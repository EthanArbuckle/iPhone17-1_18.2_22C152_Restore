uint64_t sub_100ACBB78(uint64_t result, unsigned int a2, unsigned int a3)
{
  const char *v3;
  int v4;

  *(void *)(result + 24) = 0x300000014;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)result = off_1022DC5C0;
  if (a2 > 0x14)
  {
    v3 = "this->max_num_rows_ >= num_rows";
    v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 4)
  {
    v3 = "this->max_num_cols_ >= num_cols";
    v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100ACBC24(_Unwind_Exception *a1)
{
  void *v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

void sub_100ACBC44(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x100000A55;
  *(void *)a1 = off_1022DC918;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_101D711C0;
  sub_100ACBD5C();
}

void sub_100ACBCAC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    operator delete[]();
  }
  void *v1 = off_1022CAFC0;
  _Unwind_Resume(exception_object);
}

void sub_100ACBCF4(void *a1)
{
  sub_100ACBE64(a1);

  operator delete();
}

void sub_100ACBD2C()
{
}

void sub_100ACBD5C()
{
}

void sub_100ACBDCC()
{
}

void sub_100ACBE40()
{
}

void *sub_100ACBE64(void *a1)
{
  *a1 = off_1022DC918;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    operator delete[]();
  }
  *a1 = off_1022CAFC0;
  return a1;
}

void sub_100ACBEE0(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 5040) > a2)
  {
    sub_100ACAA14(":", a1, a2, (uint64_t)v3);
    sub_100ACBF34(a1, (uint64_t)v3);
  }
}

void sub_100ACBF34(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8)) {
    BOOL v2 = *(_DWORD *)(a1 + 12) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    if (*(unsigned char *)(a1 + 5048))
    {
      uint64_t v19 = 0x300000001;
      long long v18 = xmmword_101D71140;
      v17 = off_1022DC4A0;
      v20 = &v21;
      sub_100AC9C3C(a2, a1 + 520, (uint64_t)&v17);
      double v4 = sub_100ACAA94((uint64_t)&v17, a1 + 584);
      sub_100ACB350((uint64_t)v6, *(_DWORD *)(a1 + 596), *(_DWORD *)(a1 + 592));
      sub_100ACB2A4(a1 + 584, v6);
      uint64_t v9 = 0x300000001;
      v7 = off_1022DC4A0;
      long long v8 = xmmword_101D71140;
      v10 = &v11;
      sub_100061AC4((uint64_t)v6, (uint64_t)&v7, v4);
      uint64_t v14 = 0x300000001;
      long long v13 = xmmword_101D71140;
      v12 = off_1022DC4A0;
      v15 = &v16;
      sub_100AC9C3C((uint64_t)&v17, (uint64_t)&v7, (uint64_t)&v12);
      uint64_t v34 = 0x300000001;
      v32 = off_1022DC4A0;
      long long v33 = xmmword_101D71140;
      v35 = &v36;
      uint64_t v29 = 0x100000134;
      long long v28 = xmmword_101D711B0;
      v27 = off_1022DC7F8;
      v30 = &v31;
      uint64_t v24 = 0x100000001;
      *(void *)&long long v5 = 0x100000001;
      *((void *)&v5 + 1) = 0x100000001;
      long long v23 = v5;
      v22 = off_1022DC840;
      v25 = &v26;
      sub_100ACAB14((uint64_t)&v12, (uint64_t)&v32, (uint64_t)&v27, (uint64_t)&v22, "2");
    }
  }
}

uint64_t sub_100ACC168(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = *a2;
  float v3 = 1.0 / *(double *)a2;
  *(float *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 23) = 0;
  *(void *)(a1 + 32) = off_1022AD5D0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)a1 = off_1022DC960;
  bzero((void *)(a1 + 56), 0x2D8uLL);
  *(_WORD *)(a1 + 822) = 0;
  *(_DWORD *)(a1 + 818) = 0;
  return a1;
}

void sub_100ACC20C()
{
}

void sub_100ACC220(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = *a2;
  float v3 = 1.0 / *(double *)a2;
  *(float *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 23) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  bzero((void *)(a1 + 56), 0x2D8uLL);
  *(_WORD *)(a1 + 822) = 0;
  *(_DWORD *)(a1 + 818) = 0;
}

void sub_100ACC288(uint64_t a1)
{
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v1 = a1 + 56;
  *(_DWORD *)(a1 + 20) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 776) = 0;
  *(_WORD *)(a1 + 60) = 0;
  sub_100392054(a1 + 62);
  sub_1003931A4(v1 + 208, 0, 0, 0, v1, *(_DWORD *)(v1 + 720));
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DCA10);
  }
  BOOL v2 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "compass calibrator has been reset", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DCA10);
    }
    float v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCompassCalibratorAKM::reset()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
}

void sub_100ACC44C(uint64_t a1, float *a2)
{
  sub_100392168((int)(a2[2] / 0.3 * 5.0), (int)(a2[3] / 0.3 * 5.0), (int)(a2[4] / 0.3 * 5.0), a1 + 62, (_WORD *)(a1 + 254));
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_WORD *)(a1 + 816) = 0;
  if ((int)sub_100393510(0, 0, 0, (uint64_t *)(a1 + 264), a1 + 62, *(_WORD *)(a1 + 254), 0, 1, a1 + 56, (_DWORD *)(a1 + 776), a1 + 784) >= 1)
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DCA10);
    }
    float v3 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      int v4 = *(__int16 *)(a1 + 660);
      int v5 = *(__int16 *)(a1 + 798);
      int v6 = *(__int16 *)(a1 + 796);
      int v7 = *(__int16 *)(a1 + 800);
      int v8 = *(__int16 *)(a1 + 802);
      int v9 = *(__int16 *)(a1 + 786);
      int v10 = *(__int16 *)(a1 + 804);
      int v11 = *(__int16 *)(a1 + 806);
      int v12 = *(__int16 *)(a1 + 808);
      int v13 = *(__int16 *)(a1 + 792);
      int v14 = *(__int16 *)(a1 + 784);
      int v15 = *(__int16 *)(a1 + 810);
      int v16 = *(__int16 *)(a1 + 812);
      int v17 = *(__int16 *)(a1 + 814);
      int v18 = *(__int16 *)(a1 + 790);
      int v19 = *(__int16 *)(a1 + 788);
      int v20 = *(__int16 *)(a1 + 794);
      int v21 = *(__int16 *)(a1 + 816);
      *(_DWORD *)buf = 136319746;
      uint64_t v24 = "Compass-DOE";
      __int16 v25 = 1024;
      int v26 = v4;
      __int16 v27 = 1024;
      int v28 = v5;
      __int16 v29 = 1024;
      int v30 = v6;
      __int16 v31 = 1024;
      int v32 = v7;
      __int16 v33 = 1024;
      int v34 = v8;
      __int16 v35 = 1024;
      int v36 = v9;
      __int16 v37 = 1024;
      int v38 = v10;
      __int16 v39 = 1024;
      int v40 = v11;
      __int16 v41 = 1024;
      int v42 = v12;
      __int16 v43 = 1024;
      int v44 = v13;
      __int16 v45 = 1024;
      int v46 = v14;
      __int16 v47 = 1024;
      int v48 = v15;
      __int16 v49 = 1024;
      int v50 = v16;
      __int16 v51 = 1024;
      int v52 = v17;
      __int16 v53 = 1024;
      int v54 = v18;
      __int16 v55 = 1024;
      int v56 = v19;
      __int16 v57 = 1024;
      int v58 = v20;
      __int16 v59 = 1024;
      int v60 = v21;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Type,%s,radius,%d,hrmin,%d,hrmax,%d,hrvar,%d,rvar,%d,m,%d,ovar,%d,%d,%d,hovar,%d,n,%d,vvar,%d,%d,%d,hvarA,%d,hvar,%d,hdistpl,%d,dvar,%d,", buf, 0x78u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DCA10);
      }
      v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCompassCalibratorAKM::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
  }
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 776);
}

void sub_100ACC878(uint64_t a1, float *a2, int *a3)
{
  int v5 = *a3;
  *(_WORD *)(a1 + 56) = (int)(a2[2] / 0.3 * 5.0);
  uint64_t v6 = a1 + 56;
  *(_DWORD *)(a1 + 776) = v5;
  *(_DWORD *)(a1 + 20) = v5;
  *(_WORD *)(a1 + 58) = (int)(a2[3] / 0.3 * 5.0);
  *(_WORD *)(a1 + 60) = (int)(a2[4] / 0.3 * 5.0);
  sub_100392054(a1 + 62);
  sub_1003931A4(v6 + 208, 0, 0, 0, v6, *(_DWORD *)(v6 + 720));
  *(_DWORD *)(v6 - 28) = *(_DWORD *)(v6 + 720);
  *(_DWORD *)(v6 + 762) = *(_DWORD *)v6;
  *(_WORD *)(v6 + 766) = *(_WORD *)(v6 + 4);
  *(unsigned char *)(v6 - 32) = 1;
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DCA10);
  }
  int v7 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    double v8 = a2[2];
    double v9 = a2[3];
    double v10 = a2[4];
    int v11 = *a3;
    *(_DWORD *)buf = 134218752;
    double v14 = v8;
    __int16 v15 = 2048;
    double v16 = v9;
    __int16 v17 = 2048;
    double v18 = v10;
    __int16 v19 = 1024;
    int v20 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "compass calibrator has been set with offsets (%+.3f/%+.3f/%+.3f) and calibration level (%d)", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DCA10);
    }
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCompassCalibratorAKM::setBias(const CLVector3d<float> &, const CLMotionTypeCompassCalibrationLevel &, const CLVector3d<float> &, const CLClientQuaternion *)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

uint64_t sub_100ACCB44(uint64_t result, float *a2, _DWORD *a3)
{
  int v3 = *(_DWORD *)(result + 776);
  *a3 = v3;
  int v4 = *(__int16 *)(result + 56);
  *(_DWORD *)(result + 20) = v3;
  float v5 = (float)((float)v4 / 5.0) * 0.3;
  *a2 = v5;
  float v6 = (float)((float)*(__int16 *)(result + 58) / 5.0) * 0.3;
  a2[1] = v6;
  float v7 = (float)((float)*(__int16 *)(result + 60) / 5.0) * 0.3;
  a2[2] = v7;
  int v8 = *(_DWORD *)(result + 28);
  if (v8 == v3
    && *(unsigned __int16 *)(result + 818) == *(unsigned __int16 *)(result + 56)
    && *(unsigned __int16 *)(result + 820) == *(unsigned __int16 *)(result + 58)
    && *(unsigned __int16 *)(result + 822) == *(unsigned __int16 *)(result + 60))
  {
    *(_WORD *)(result + 25) = 0;
  }
  else
  {
    *(unsigned char *)(result + 26) = v8 <= v3;
    *(_WORD *)(result + 24) = 256;
    *(_DWORD *)(result + 28) = v3;
    *(_DWORD *)(result + 818) = *(_DWORD *)(result + 56);
    *(_WORD *)(result + 822) = *(_WORD *)(result + 60);
  }
  return result;
}

float32_t sub_100ACCC28(__int16 *a1, float32x2_t *a2, float32x2_t *a3)
{
  float v3 = (float)((float)a1[30] / 5.0) * 0.3;
  float32_t v4 = a2[2].f32[0] - v3;
  v5.i32[0] = a1[28];
  v5.i32[1] = a1[29];
  __asm { FMOV            V3.2S, #5.0 }
  float32x2_t v11 = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(vdiv_f32(vcvt_f32_s32(v5), _D3)), (float64x2_t)vdupq_n_s64(0x3FD3333333333333uLL)));
  a2[1] = vsub_f32(a2[1], v11);
  a2[2].f32[0] = v4;
  float32_t result = a3[2].f32[0] - v3;
  a3[1] = vsub_f32(a3[1], v11);
  a3[2].f32[0] = result;
  return result;
}

BOOL sub_100ACCCB4(uint64_t a1)
{
  return !*(_DWORD *)(a1 + 776)
      && *(unsigned char *)(a1 + 25)
      && !*(_WORD *)(a1 + 56)
      && !*(_WORD *)(a1 + 58)
      && *(_WORD *)(a1 + 60) == 0;
}

BOOL sub_100ACCCEC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) > 0;
}

BOOL sub_100ACCCFC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) > 3;
}

uint64_t sub_100ACCD0C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

uint64_t sub_100ACCD14(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

void sub_100ACCD1C(id a1)
{
  qword_1024190A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

uint64_t sub_100ACCD4C(double **a1, double a2, double a3, int a4)
{
  if (a4) {
    return sub_100ACCD58(a1, a2, a3);
  }
  else {
    return sub_100ACD170((uint64_t)a1, a2, a3);
  }
}

BOOL sub_100ACCD58(double **a1, double a2, double a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247FF30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247FF30))
  {
    sub_101171D90((uint64_t)dbl_10247FF08);
    __cxa_guard_release(&qword_10247FF30);
  }
  if (*((_DWORD *)sub_101412290() + 20))
  {
    unsigned int v6 = 0;
    unsigned int v7 = 0;
    double v8 = 0.0;
    double v9 = 0.0;
    while (1)
    {
      float32x2_t v11 = *a1;
      double v10 = a1[1];
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)v11) >> 5) < *((unsigned int *)sub_101412290() + 22)) {
        break;
      }
      int v12 = *a1;
      int v13 = a1[1];
      if (*a1 == v13)
      {
        double v16 = -360.0;
        double v17 = 360.0;
        double v15 = -360.0;
        double v14 = 360.0;
      }
      else
      {
        double v15 = -360.0;
        double v14 = 360.0;
        double v16 = -360.0;
        double v17 = 360.0;
        do
        {
          double v18 = *v12;
          double v19 = v12[1];
          v12 += 12;
          double v8 = v8 + v18;
          double v9 = v9 + v19;
          ++v6;
          if (v18 > v16) {
            double v16 = v18;
          }
          if (v18 < v17) {
            double v17 = v18;
          }
          if (v19 > v15) {
            double v15 = v19;
          }
          if (v19 < v14) {
            double v14 = v19;
          }
        }
        while (v12 != v13);
      }
      double v20 = sub_1000F1648(dbl_10247FF08, v17, v14, v16, v15, a2);
      BOOL v21 = v20 <= a3;
      if (v20 > a3)
      {
        uint64_t v24 = *a1;
        long long v23 = a1[1];
        if (*a1 == v23)
        {
          uint64_t v24 = a1[1];
        }
        else
        {
          double v25 = -1.0;
          do
          {
            double v26 = sub_1000F1648(dbl_10247FF08, v8 / (double)v6, v9 / (double)v6, *v24, v24[1], a2);
            if (v26 > v25)
            {
              long long v23 = v24;
              double v25 = v26;
            }
            v24 += 12;
          }
          while (v24 != a1[1]);
        }
        __int16 v27 = (char *)((char *)v24 - (char *)(v23 + 12));
        if (v27) {
          memmove(v23, v23 + 12, (size_t)(v27 - 7));
        }
        a1[1] = (double *)&v27[(void)v23];
        int v22 = 1;
      }
      else
      {
        int v22 = 0;
      }
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022DCA30);
      }
      int v28 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240704;
        unsigned int v34 = v7 + 1;
        __int16 v35 = 1026;
        int v36 = v22;
        __int16 v37 = 1026;
        BOOL v38 = v20 <= a3;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "WifiCalc, outlieriter, %{public}d, dropped, %{public}d, verified, %{public}d", buf, 0x14u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022DCA30);
        }
        ++v7;
        __int16 v31 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiLocationCalculatorLatLonOutlierRejection::rejectOutlierLatLonIteratively(std::vector<CLWifiAccessPoint> &, const double, const double)", "%s\n", v31);
        if (v31 != (char *)buf) {
          free(v31);
        }
      }
      else
      {
        ++v7;
      }
      __int16 v29 = sub_101412290();
      BOOL v30 = v20 > a3;
      if (v7 >= *((_DWORD *)v29 + 20)) {
        BOOL v30 = 0;
      }
      if (!v30) {
        return v21;
      }
    }
  }
  return 0;
}

void sub_100ACD150(_Unwind_Exception *a1)
{
}

uint64_t sub_100ACD170(uint64_t a1, double a2, long double a3)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5);
  if (v6 < *((unsigned int *)sub_101412290() + 22)) {
    return 0;
  }
  v121 = 0;
  v122 = 0;
  uint64_t v123 = 0;
  sub_100ACDD2C(&v121, *(const void **)a1, *(void *)(a1 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5));
  BOOL v8 = sub_100ACD960(&v121, a2, a3);
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  if (!v8) {
    return 1;
  }
  double v10 = *(float **)a1;
  double v9 = *(float **)(a1 + 8);
  if ((float *)((char *)v9 - *(void *)a1) == (float *)192)
  {
    if (v10 != v9)
    {
      for (i = v10 + 24; i != v9; i += 24)
      {
        if (i[20] < v10[20]) {
          double v10 = i;
        }
      }
    }
    int64_t v94 = (char *)v9 - (char *)(v10 + 24);
    if (v9 != v10 + 24) {
      memmove(v10, v10 + 24, v94 - 7);
    }
    BOOL v7 = 0;
    *(void *)(a1 + 8) = (char *)v10 + v94;
  }
  else
  {
    v118 = 0;
    v119 = 0;
    uint64_t v120 = 0;
    unint64_t v12 = 4;
    double v97 = -1.0;
    do
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5);
      if (v13 >= v12)
      {
        unint64_t v96 = v12;
        sub_100ACDAE4(v13, v12, &v116);
        uint64_t v15 = v116;
        uint64_t v14 = v117;
        uint64_t v98 = v117;
        while (v15 != v14)
        {
          v113 = 0;
          v114 = 0;
          uint64_t v115 = 0;
          sub_10010F834(&v113, *(const void **)v15, *(void *)(v15 + 8), (uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 2);
          __p = 0;
          v111 = 0;
          v112 = 0;
          double v16 = (int *)v113;
          double v17 = v114;
          if (v113 == v114)
          {
            double v18 = 0;
            int v40 = 0;
          }
          else
          {
            double v18 = 0;
            do
            {
              double v19 = (_OWORD *)(*(void *)a1 + 96 * *v16);
              if (v18 >= v112)
              {
                uint64_t v24 = (char *)__p;
                unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (unsigned char *)__p) >> 5);
                unint64_t v26 = v25 + 1;
                if (v25 + 1 > 0x2AAAAAAAAAAAAAALL) {
                  sub_1001D7FD4();
                }
                if (0x5555555555555556 * ((v112 - (unsigned char *)__p) >> 5) > v26) {
                  unint64_t v26 = 0x5555555555555556 * ((v112 - (unsigned char *)__p) >> 5);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((v112 - (unsigned char *)__p) >> 5) >= 0x155555555555555) {
                  unint64_t v27 = 0x2AAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v27 = v26;
                }
                if (v27)
                {
                  int v28 = (char *)sub_100642EA8((uint64_t)&v112, v27);
                  uint64_t v24 = (char *)__p;
                  double v18 = v111;
                }
                else
                {
                  int v28 = 0;
                }
                __int16 v29 = &v28[96 * v25];
                long long v30 = v19[1];
                *(_OWORD *)__int16 v29 = *v19;
                *((_OWORD *)v29 + 1) = v30;
                long long v31 = v19[2];
                long long v32 = v19[3];
                long long v33 = v19[5];
                *((_OWORD *)v29 + 4) = v19[4];
                *((_OWORD *)v29 + 5) = v33;
                *((_OWORD *)v29 + 2) = v31;
                *((_OWORD *)v29 + 3) = v32;
                if (v18 == v24)
                {
                  __int16 v39 = &v28[96 * v25];
                }
                else
                {
                  unsigned int v34 = &v28[96 * v25];
                  do
                  {
                    long long v35 = *((_OWORD *)v18 - 5);
                    *((_OWORD *)v34 - 6) = *((_OWORD *)v18 - 6);
                    *((_OWORD *)v34 - 5) = v35;
                    long long v36 = *((_OWORD *)v18 - 4);
                    long long v37 = *((_OWORD *)v18 - 3);
                    long long v38 = *((_OWORD *)v18 - 2);
                    __int16 v39 = v34 - 96;
                    *(_OWORD *)(v34 - 23) = *(_OWORD *)(v18 - 23);
                    *((_OWORD *)v34 - 3) = v37;
                    *((_OWORD *)v34 - 2) = v38;
                    *((_OWORD *)v34 - 4) = v36;
                    v18 -= 96;
                    v34 -= 96;
                  }
                  while (v18 != v24);
                }
                double v18 = v29 + 96;
                __p = v39;
                v111 = v29 + 96;
                v112 = &v28[96 * v27];
                if (v24) {
                  operator delete(v24);
                }
              }
              else
              {
                long long v20 = v19[1];
                *(_OWORD *)double v18 = *v19;
                *((_OWORD *)v18 + 1) = v20;
                long long v21 = v19[2];
                long long v22 = v19[3];
                long long v23 = v19[5];
                *((_OWORD *)v18 + 4) = v19[4];
                *((_OWORD *)v18 + 5) = v23;
                *((_OWORD *)v18 + 2) = v21;
                *((_OWORD *)v18 + 3) = v22;
                v18 += 96;
              }
              v111 = v18;
              ++v16;
            }
            while (v16 != v17);
            int v40 = __p;
          }
          v107 = 0;
          v108 = 0;
          uint64_t v109 = 0;
          sub_100ACDD2C(&v107, v40, (uint64_t)v18, 0xAAAAAAAAAAAAAAABLL * ((v18 - (unsigned char *)v40) >> 5));
          BOOL v41 = sub_100ACD960((double **)&v107, a2, a3);
          if (v107)
          {
            v108 = v107;
            operator delete(v107);
          }
          if (!v41)
          {
            int v42 = (double *)__p;
            __int16 v43 = (double *)((char *)__p + 96);
            double v44 = *(double *)__p;
            if (__p == v111 || v43 == (double *)v111)
            {
              double v60 = *((double *)__p + 1);
              double v57 = *(double *)__p;
            }
            else
            {
              double v45 = *(double *)__p;
              int v46 = (double *)((char *)__p + 96);
              __int16 v47 = (double *)__p;
              int v48 = (double *)((char *)__p + 96);
              do
              {
                double v49 = *v48;
                v48 += 12;
                double v50 = v49;
                if (v45 < v49)
                {
                  double v45 = v50;
                  __int16 v47 = v46;
                }
                int v46 = v48;
              }
              while (v48 != (double *)v111);
              double v51 = *v47;
              int v52 = (double *)((char *)__p + 96);
              __int16 v53 = (double *)__p;
              int v54 = (double *)((char *)__p + 96);
              do
              {
                double v55 = *v54;
                v54 += 12;
                double v56 = v55;
                if (v55 < v44)
                {
                  double v44 = v56;
                  __int16 v53 = v52;
                }
                int v52 = v54;
              }
              while (v54 != (double *)v111);
              double v57 = *v53;
              int v58 = (double *)((char *)__p + 96);
              __int16 v59 = (double *)__p;
              do
              {
                if (v59[1] < v58[1]) {
                  __int16 v59 = v58;
                }
                v58 += 12;
              }
              while (v58 != (double *)v111);
              double v60 = v59[1];
              do
              {
                if (v43[1] < v42[1]) {
                  int v42 = v43;
                }
                v43 += 12;
              }
              while (v43 != (double *)v111);
              double v44 = v51;
            }
            double v61 = v42[1];
            __src = 0;
            v105 = 0;
            v106 = 0;
            v63 = *(double **)a1;
            v62 = *(double **)(a1 + 8);
            if (*(double **)a1 == v62)
            {
              v88 = 0;
              v64 = 0;
              v87 = *(unsigned char **)a1;
            }
            else
            {
              v64 = 0;
              do
              {
                double v65 = *v63;
                double v66 = v63[1];
                long long v67 = *((_OWORD *)v63 + 3);
                long long v100 = *((_OWORD *)v63 + 2);
                long long v101 = v67;
                long long v68 = *((_OWORD *)v63 + 5);
                long long v102 = *((_OWORD *)v63 + 4);
                long long v103 = v68;
                long long v99 = *((_OWORD *)v63 + 1);
                BOOL v69 = v65 > v44 || v65 < v57;
                if (!v69 && v66 <= v60 && v66 >= v61)
                {
                  if (v64 >= v106)
                  {
                    v75 = (char *)__src;
                    unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * ((v64 - (unsigned char *)__src) >> 5);
                    unint64_t v77 = v76 + 1;
                    if (v76 + 1 > 0x2AAAAAAAAAAAAAALL) {
                      sub_1001D7FD4();
                    }
                    if (0x5555555555555556 * ((v106 - (unsigned char *)__src) >> 5) > v77) {
                      unint64_t v77 = 0x5555555555555556 * ((v106 - (unsigned char *)__src) >> 5);
                    }
                    if (0xAAAAAAAAAAAAAAABLL * ((v106 - (unsigned char *)__src) >> 5) >= 0x155555555555555) {
                      unint64_t v78 = 0x2AAAAAAAAAAAAAALL;
                    }
                    else {
                      unint64_t v78 = v77;
                    }
                    if (v78)
                    {
                      v79 = (char *)sub_100642EA8((uint64_t)&v106, v78);
                      v75 = (char *)__src;
                      v64 = v105;
                    }
                    else
                    {
                      v79 = 0;
                    }
                    v80 = &v79[96 * v76];
                    *(double *)v80 = v65;
                    *((double *)v80 + 1) = v66;
                    *((_OWORD *)v80 + 2) = v100;
                    *((_OWORD *)v80 + 3) = v101;
                    *((_OWORD *)v80 + 4) = v102;
                    *((_OWORD *)v80 + 5) = v103;
                    *((_OWORD *)v80 + 1) = v99;
                    if (v64 == v75)
                    {
                      v86 = &v79[96 * v76];
                    }
                    else
                    {
                      v81 = &v79[96 * v76];
                      do
                      {
                        long long v82 = *((_OWORD *)v64 - 5);
                        *((_OWORD *)v81 - 6) = *((_OWORD *)v64 - 6);
                        *((_OWORD *)v81 - 5) = v82;
                        long long v83 = *((_OWORD *)v64 - 4);
                        long long v84 = *((_OWORD *)v64 - 3);
                        long long v85 = *((_OWORD *)v64 - 2);
                        v86 = v81 - 96;
                        *(_OWORD *)(v81 - 23) = *(_OWORD *)(v64 - 23);
                        *((_OWORD *)v81 - 3) = v84;
                        *((_OWORD *)v81 - 2) = v85;
                        *((_OWORD *)v81 - 4) = v83;
                        v64 -= 96;
                        v81 -= 96;
                      }
                      while (v64 != v75);
                    }
                    v64 = v80 + 96;
                    __src = v86;
                    v105 = v80 + 96;
                    v106 = &v79[96 * v78];
                    if (v75) {
                      operator delete(v75);
                    }
                  }
                  else
                  {
                    *(double *)v64 = v65;
                    *((double *)v64 + 1) = v66;
                    long long v73 = v102;
                    long long v72 = v103;
                    *((_OWORD *)v64 + 3) = v101;
                    *((_OWORD *)v64 + 4) = v73;
                    *((_OWORD *)v64 + 5) = v72;
                    long long v74 = v100;
                    *((_OWORD *)v64 + 1) = v99;
                    *((_OWORD *)v64 + 2) = v74;
                    v64 += 96;
                  }
                  v105 = v64;
                }
                v63 += 12;
              }
              while (v63 != v62);
              v63 = *(double **)a1;
              v87 = *(unsigned char **)(a1 + 8);
              v88 = __src;
            }
            v89 = sub_101412290();
            v90 = (char *)__src;
            if (-1431655765 * ((unint64_t)(v87 - (unsigned char *)v63) >> 5)
               + 1431655765 * ((unint64_t)(v64 - v88) >> 5) <= *((_DWORD *)v89 + 20))
            {
              double v91 = 0.0;
              if (__src != v105)
              {
                v92 = (float *)__src;
                do
                {
                  double v91 = v91 + v92[20];
                  v92 += 24;
                }
                while (v92 != (float *)v105);
              }
              if (v91 > v97)
              {
                sub_1006460C8((char *)&v118, (char *)__src, (uint64_t)v105, 0xAAAAAAAAAAAAAAABLL * ((v105 - (unsigned char *)__src) >> 5));
                v90 = (char *)__src;
                double v97 = v91;
              }
            }
            if (v90)
            {
              v105 = v90;
              operator delete(v90);
            }
          }
          if (__p)
          {
            v111 = (char *)__p;
            operator delete(__p);
          }
          if (v113)
          {
            v114 = (int *)v113;
            operator delete(v113);
          }
          v15 += 24;
          uint64_t v14 = v98;
        }
        *(void *)&long long v99 = &v116;
        sub_1001DCABC((void ***)&v99);
        unint64_t v12 = v96;
      }
      BOOL v69 = v12-- > 2;
    }
    while (v69);
    v93 = v118;
    BOOL v7 = v118 != v119;
    if (&v118 != (char **)a1 && v118 != v119)
    {
      sub_1006460C8((char *)a1, v118, (uint64_t)v119, 0xAAAAAAAAAAAAAAABLL * ((v119 - v118) >> 5));
      v93 = v118;
    }
    if (v93)
    {
      v119 = v93;
      operator delete(v93);
    }
  }
  return v7;
}

void sub_100ACD8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37)
{
  __int16 v39 = *(void **)(v37 - 200);
  if (v39)
  {
    *(void *)(v37 - 192) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100ACD960(double **a1, double a2, long double a3)
{
  int32x2_t v5 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = (uint64_t)(*a1 + 12);
  double v8 = **a1;
  if (*a1 == v6 || v7 == (void)v6)
  {
    double v10 = v5[1];
    double v11 = **a1;
  }
  else
  {
    double v12 = **a1;
    uint64_t v13 = (uint64_t)(*a1 + 12);
    uint64_t v14 = *a1;
    uint64_t v15 = (double *)v13;
    do
    {
      double v16 = *v15;
      v15 += 12;
      double v17 = v16;
      if (v12 < v16)
      {
        double v12 = v17;
        uint64_t v14 = (double *)v13;
      }
      uint64_t v13 = (uint64_t)v15;
    }
    while (v15 != v6);
    double v18 = *v14;
    uint64_t v19 = (uint64_t)(*a1 + 12);
    long long v20 = *a1;
    long long v21 = (double *)v19;
    do
    {
      double v22 = *v21;
      v21 += 12;
      double v23 = v22;
      if (v22 < v8)
      {
        double v8 = v23;
        long long v20 = (double *)v19;
      }
      uint64_t v19 = (uint64_t)v21;
    }
    while (v21 != v6);
    double v11 = *v20;
    uint64_t v24 = (uint64_t)(*a1 + 12);
    unint64_t v25 = *a1;
    do
    {
      if (v25[1] < *(double *)(v24 + 8)) {
        unint64_t v25 = (double *)v24;
      }
      v24 += 96;
    }
    while ((double *)v24 != v6);
    double v10 = v25[1];
    do
    {
      if (*(double *)(v7 + 8) < v5[1]) {
        int32x2_t v5 = (double *)v7;
      }
      v7 += 96;
    }
    while ((double *)v7 != v6);
    double v8 = v18;
  }
  double v26 = v5[1];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247FF00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247FF00))
  {
    sub_101171D90((uint64_t)dbl_10247FED8);
    __cxa_guard_release(&qword_10247FF00);
  }
  return sub_1000F1648(dbl_10247FED8, v11, v26, v8, v10, a2) > a3;
}

void sub_100ACDACC(_Unwind_Exception *a1)
{
}

void sub_100ACDAE4(int a1@<W0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_10017C384(&__b, a1);
  if (a2 >= 1) {
    memset_pattern16(__b, &unk_101D71450, 4 * a2);
  }
  do
  {
    __p = 0;
    long long v21 = 0;
    double v22 = 0;
    if (a1 >= 1)
    {
      unint64_t v6 = 0;
      uint64_t v7 = 0;
      do
      {
        if (*((_DWORD *)__b + v7))
        {
          if (v6 >= v22)
          {
            double v9 = (char *)__p;
            uint64_t v10 = (v6 - (unsigned char *)__p) >> 2;
            unint64_t v11 = v10 + 1;
            if ((unint64_t)(v10 + 1) >> 62) {
              sub_1001D7FD4();
            }
            uint64_t v12 = v22 - (unsigned char *)__p;
            if ((v22 - (unsigned char *)__p) >> 1 > v11) {
              unint64_t v11 = v12 >> 1;
            }
            if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v13 = v11;
            }
            if (v13)
            {
              uint64_t v14 = (char *)sub_10017EA34((uint64_t)&v22, v13);
              double v9 = (char *)__p;
              unint64_t v6 = v21;
            }
            else
            {
              uint64_t v14 = 0;
            }
            uint64_t v15 = &v14[4 * v10];
            *(_DWORD *)uint64_t v15 = v7;
            double v8 = v15 + 4;
            while (v6 != v9)
            {
              int v16 = *((_DWORD *)v6 - 1);
              v6 -= 4;
              *((_DWORD *)v15 - 1) = v16;
              v15 -= 4;
            }
            __p = v15;
            long long v21 = v8;
            double v22 = &v14[4 * v13];
            if (v9) {
              operator delete(v9);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v6 = v7;
            double v8 = v6 + 4;
          }
          long long v21 = v8;
          unint64_t v6 = v8;
        }
        ++v7;
      }
      while (v7 != a1);
    }
    unint64_t v17 = a3[1];
    if (v17 >= a3[2])
    {
      uint64_t v18 = sub_100ACDDFC(a3, (uint64_t)&__p);
    }
    else
    {
      sub_100ACDDA8((uint64_t)a3, (uint64_t)&__p);
      uint64_t v18 = v17 + 24;
    }
    a3[1] = v18;
    if (__p)
    {
      long long v21 = (char *)__p;
      operator delete(__p);
    }
    sub_100ACE068((unint64_t)__b, v24);
  }
  while ((v19 & 1) != 0);
  if (__b)
  {
    uint64_t v24 = __b;
    operator delete(__b);
  }
}

void sub_100ACDCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
}

void sub_100ACDCFC(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void *sub_100ACDD2C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    float32_t result = sub_10064620C(result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      float32_t result = memmove((void *)v6[1], a2, v8 - 7);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100ACDD8C(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100ACDDA8(uint64_t a1, uint64_t a2)
{
  float v3 = *(void **)(a1 + 8);
  *float v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  float32_t result = sub_10010F834(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_100ACDDF4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100ACDDFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1000DA5D8(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  int v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_10010F834(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  sub_100ACDF14(a1, v14);
  uint64_t v12 = a1[1];
  sub_1001DD2D0((uint64_t)v14);
  return v12;
}

void sub_100ACDF00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001DD2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100ACDF14(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100ACDF8C((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100ACDF8C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_100ACE030((uint64_t)v11);
  return v9;
}

uint64_t sub_100ACE030(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1001DD288(a1);
  }
  return a1;
}

_DWORD *sub_100ACE068(unint64_t a1, _DWORD *a2)
{
  if (a2 != (_DWORD *)a1)
  {
    uint64_t v2 = a2 - 1;
    if (a2 - 1 != (_DWORD *)a1)
    {
      uint64_t v3 = 0;
      int v4 = *v2;
      uint64_t v5 = a2 - 1;
      while (1)
      {
        int v6 = v4;
        int v4 = *(v5 - 1);
        if (v6 < v4) {
          break;
        }
        --v5;
        ++v3;
        if (v5 == (_DWORD *)a1)
        {
          if ((unint64_t)v2 > a1)
          {
            unint64_t v7 = a1 + 4;
            do
            {
              int v8 = *(_DWORD *)(v7 - 4);
              *(_DWORD *)(v7 - 4) = *v2;
              *v2-- = v8;
              BOOL v9 = v7 >= (unint64_t)v2;
              v7 += 4;
            }
            while (!v9);
          }
          return a2;
        }
      }
      unint64_t v11 = (unint64_t)(v5 + 1);
      char v12 = a2;
      do
      {
        int v14 = *--v12;
        int v13 = v14;
      }
      while (v14 >= v4);
      *(v5 - 1) = v13;
      *char v12 = v4;
      if (v3)
      {
        do
        {
          int v15 = *(_DWORD *)(v11 - 4);
          *(_DWORD *)(v11 - 4) = *v2;
          *v2-- = v15;
          BOOL v9 = v11 >= (unint64_t)v2;
          v11 += 4;
        }
        while (!v9);
      }
    }
  }
  return a2;
}

void sub_100ACE12C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100ACE1E4(_Unwind_Exception *a1)
{
}

void sub_100ACE1FC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100ACE2A4(_Unwind_Exception *a1)
{
}

uint64_t sub_100ACE2BC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_100ACE5E8()
{
}

BOOL sub_100ACE610(BOOL result)
{
  if (*(int *)(*(void *)(*(void *)(result + 32) + 48) + 8) >= 1)
  {
    uint64_t v1 = result;
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_1022DCAD8);
    }
    uint64_t v2 = qword_1024191E8;
    if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "power assertion for submersion state change,timestamp,%{public}f,assertionState,0,reason,timeout", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_1022DCAD8);
      }
      CFAbsoluteTimeGetCurrent();
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLContextManagerWaterSubmersionBase initWithUniverse:delegate:withBuffer:withSourceAggregator:]_block_invoke", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    return sub_100EBC6AC(*(void *)(*(void *)(v1 + 32) + 48));
  }
  return result;
}

void sub_100ACEB54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100ACFCE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AD0964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AD10E8(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *a2;
  sub_1000EF97C((uint64_t)v6, a3);
  [a4 onForcedLocationNotificationSub:v5 data:v6];

  if (v11) {
    sub_1000DB0A0(v11);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
}

void sub_100AD1178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100AD143C(int a1, void *a2, CFStringRef theString1)
{
  if (CFEqual(theString1, @"com.apple.locationd.WaterSubmersion.EnableEasySubmersion")) {
    [a2 onEnableEasySubmersion:1];
  }
  id result = (id)CFStringCompare(theString1, @"com.apple.locationd.WaterSubmersion.DisableEasySubmersion", 0);
  if (!result)
  {
    return [a2 onEnableEasySubmersion:0];
  }
  return result;
}

void sub_100AD177C()
{
}

BOOL sub_100AD17A0(uint64_t a1)
{
  if (qword_1024191E0 != -1) {
    dispatch_once(&qword_1024191E0, &stru_1022DCAD8);
  }
  uint64_t v2 = qword_1024191E8;
  if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "unsubscribing from Surface Cal GPS notifications", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_1022DCAD8);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLContextManagerWaterSubmersion setUpGPSSubscriptionForSurfaceCal]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 192) + 16) unregister:*(void *)(*(void *)(*(void *)(a1 + 32) + 192) + 8) forNotification:0];
  BOOL result = sub_100EBC6AC(*(void *)(*(void *)(a1 + 32) + 184));
  *(unsigned char *)(*(void *)(a1 + 32) + 200) = 0;
  return result;
}

void sub_100AD1E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (v40) {
    sub_1000DB0A0(v40);
  }
  sub_1000DAF68(&a27);
  if (v39) {
    sub_1000DB0A0(v39);
  }
  sub_1000DAF68(&a33);
  sub_1000DAF68(&a39);
  _Unwind_Resume(a1);
}

void sub_100AD26AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1000DB0A0(v15);
  if (v14) {
    sub_1000DB0A0(v14);
  }
  if (v13) {
    sub_1000DB0A0(v13);
  }
  sub_1000DAF68((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100AD33C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (v56) {
    sub_1000DB0A0(v56);
  }
  if (v55) {
    sub_1000DB0A0(v55);
  }
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a38) {
    operator delete(a38);
  }
  _Unwind_Resume(exception_object);
}

float sub_100AD3568(uint64_t a1, int a2)
{
  __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  sub_10010F834(&__p, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  int v5 = (int)((((*(void *)(a1 + 8) - *(void *)a1) >> 2) - 1) * a2) / 100;
  int v6 = (float *)__p;
  unint64_t v7 = (float *)((char *)__p + 4 * v5);
  if (v7 != v11)
  {
    sub_1004EF34C((float *)__p, v7, v11, v4);
    int v6 = (float *)__p;
  }
  float v8 = v6[v5];
  unint64_t v11 = v6;
  operator delete(v6);
  return v8;
}

void sub_100AD3614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AD3B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  if (v23) {
    sub_1000DB0A0(v23);
  }
  sub_1000DAF68(&a23);
  _Unwind_Resume(a1);
}

void sub_100AD41C0(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

void sub_100AD42D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AD4D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose(&a71, 8);
  _Unwind_Resume(a1);
}

void sub_100AD4E08(uint64_t a1, void *a2, const __CFString *a3)
{
  int v5 = (std::__shared_weak_count *)operator new(0x28uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)off_1022DCB08;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)0x7FEFFFFFFFFFFFFFLL;
  v5[1].__shared_owners_ = 0;
  if (CFEqual(a3, @"com.apple.locationd.WaterSubmersion.SimulateSubmerged"))
  {
    *(CFAbsoluteTime *)&v5[1].__vftable = CFAbsoluteTimeGetCurrent();
    LOBYTE(v5[1].__shared_owners_) = 2;
    float v8 = v5 + 1;
    BOOL v9 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    [a2 updateEvent_bounce:&v8];
    if (v9) {
      sub_1000DB0A0(v9);
    }
  }
  if (CFEqual(a3, @"com.apple.locationd.WaterSubmersion.SimulateNotSubmerged"))
  {
    *(CFAbsoluteTime *)&v5[1].__vftable = CFAbsoluteTimeGetCurrent();
    LOBYTE(v5[1].__shared_owners_) = 1;
    int v6 = v5 + 1;
    unint64_t v7 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    [a2 updateEvent_bounce:&v6];
    if (v7) {
      sub_1000DB0A0(v7);
    }
  }
  if (CFEqual(a3, @"com.apple.locationd.WaterSubmersion.PauseDemo")) {
    [a2 pauseEvent_bounce];
  }
  if (CFEqual(a3, @"com.apple.locationd.WaterSubmersion.ResumeDemo")) {
    [a2 resumeEvent_bounce];
  }
  if (CFEqual(a3, @"com.apple.locationd.WaterSubmersion.DemoDepthUpdate")) {
    [a2 demoDepthUpdate_bounce];
  }
  sub_1000DB0A0(v5);
}

void sub_100AD4F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_1000DB0A0(v10);
  _Unwind_Resume(a1);
}

void sub_100AD4FB4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) externalSubmersionState] == (id)2)
  {
    int v2 = *(unsigned __int8 *)(a1 + 128);
    uint64_t v3 = objc_opt_class();
    [*(id *)(a1 + 32) targetPressure];
    int v5 = (double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    if (v2) {
      [v3 boundedIncrementBetweenStart:v5 andStop:101.325 withCurrent:v4 withIncrement:*(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)];
    }
    else {
      [v3 incrementTowardsTarget:v4 andCurrent:*(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) withIncrement:*v5];
    }
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v6;
    [(id)objc_opt_class() settleToTemperatureFromStart:*(double *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) toStop:*(double *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) withCurrent:*(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) withDecrement:*(double *)(*(void *)(*(void *)(a1 + 80) + 8) + 24)];
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v9;
    [(id)objc_opt_class() settleToTemperatureFromStart:*(double *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) toStop:*(double *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) withCurrent:*(double *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) withDecrement:*(double *)(*(void *)(*(void *)(a1 + 112) + 8) + 24)];
    uint64_t v8 = *(void *)(*(void *)(a1 + 88) + 8);
  }
  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(void *)(*(void *)(*(void *)(a1 + 120) + 8)
                                                                            + 24);
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
    uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
  }
  *(void *)(v8 + 24) = v7;
  uint64_t v12 = objc_alloc_init(CLWaterSubmersionMeasurement);
  [(CLWaterSubmersionMeasurement *)v12 setStartAt:CFAbsoluteTimeGetCurrent()];
  [(CLWaterSubmersionMeasurement *)v12 setPressure:*(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)];
  [(CLWaterSubmersionMeasurement *)v12 setSurfacePressure:101.325];
  [(CLWaterSubmersionMeasurement *)v12 setTemperature:*(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)];
  [(CLWaterSubmersionMeasurement *)v12 setTemperatureUncertainty:*(double *)(*(void *)(*(void *)(a1 + 88) + 8) + 24)];
  double v10 = *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  [(CLWaterSubmersionMeasurement *)v12 surfacePressure];
  +[CLContextManagerWaterSubmersion calculateDepthFromPressure:v10 withSurfacePressure:v11];
  -[CLWaterSubmersionMeasurement setDepth:](v12, "setDepth:");
  -[CLWaterSubmersionMeasurement setState:](v12, "setState:", [*(id *)(a1 + 32) submersionState]);
  [*(id *)(a1 + 32) updateSubmersionStateFromMeasurement:v12];
  [*(id *)(a1 + 32) updateClientsSubmersionMeasurement:v12];
}

void sub_100AD5328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AD5340(void *a1)
{
  int v2 = (void *)a1[4];
  uint64_t v4 = a1[5];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  [v2 updateSubmersionStateFromAOPState:&v5];
  if (v6) {
    sub_1000DB0A0(v6);
  }
}

void sub_100AD5398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AD53B0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100AD53CC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

id sub_100AD5468(uint64_t a1)
{
  return _[*(id *)(a1 + 32) stopUpdates];
}

id sub_100AD54FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) startUpdates];
}

id sub_100AD5590(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateTargetDemoDepth];
}

void sub_100AD560C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AD573C(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

uint64_t sub_100AD576C(uint64_t a1, int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 16 * a3;
    do
    {
      sub_100AD57E4(a1, a2, a2);
      a2 += 4;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_100AD57D0(_Unwind_Exception *a1)
{
  sub_1000D7D80(v1);
  _Unwind_Resume(a1);
}

void *sub_100AD57E4(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = *a2;
  unint64_t v8 = 0xC6A4A7935BD1E995
     * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v7) ^ ((0xC6A4A7935BD1E995 * v7) >> 47)) + 3864292196u))
     + 3864292196u;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v7) ^ ((0xC6A4A7935BD1E995 * v7) >> 47)) + 3864292196u))
         + 3864292196u;
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    double v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == v7 && *((_DWORD *)v12 + 5) == v6) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v12 = operator new(0x20uLL);
  *uint64_t v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100100330(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  double v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *uint64_t v12 = *v22;
LABEL_42:
    void *v22 = v12;
    goto LABEL_43;
  }
  *uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v23 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    double v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_100AD5A3C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100AD5A50(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022DCB08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100AD5A70(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022DCB08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100AD5ACC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022DCB58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100AD5AEC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022DCB58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100AD5B48()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D71C3C;
      v0[3] = unk_101D71C4C;
      v0[4] = xmmword_101D71C5C;
      v0[0] = xmmword_101D71C1C;
      v0[1] = unk_101D71C2C;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_100AD5C28(_Unwind_Exception *a1)
{
}

uint64_t sub_100AD5C40()
{
  sub_100134750(qword_10247FF38, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247FF38, (void *)&_mh_execute_header);
  qword_10247FF58 = 0;
  qword_10247FF60 = 0;
  qword_10247FF50 = 0;
  qword_10247FF50 = (uint64_t)operator new(0x284uLL);
  uint64_t v0 = qword_10247FF50 + 644;
  qword_10247FF60 = qword_10247FF50 + 644;
  memcpy((void *)qword_10247FF50, &unk_101D71490, 0x284uLL);
  qword_10247FF58 = v0;
  __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_10247FF50, (void *)&_mh_execute_header);
  qword_10247FF70 = 0;
  qword_10247FF78 = 0;
  qword_10247FF68 = 0;
  qword_10247FF68 = (uint64_t)operator new(0x284uLL);
  uint64_t v1 = qword_10247FF68 + 644;
  qword_10247FF78 = qword_10247FF68 + 644;
  memcpy((void *)qword_10247FF68, &unk_101D71714, 0x284uLL);
  qword_10247FF70 = v1;
  qword_10247FF88 = 0;
  qword_10247FF90 = 0;
  qword_10247FF80 = 0;
  qword_10247FF80 = (uint64_t)operator new(0x284uLL);
  uint64_t v2 = qword_10247FF80 + 644;
  qword_10247FF90 = qword_10247FF80 + 644;
  memcpy((void *)qword_10247FF80, &unk_101D71998, 0x284uLL);
  qword_10247FF88 = v2;
  __cxa_atexit((void (*)(void *))sub_100ACE2BC, &qword_10247FF68, (void *)&_mh_execute_header);
  qword_10247FFA0 = 0;
  qword_10247FFA8 = 0;
  qword_10247FF98 = 0;
  qword_10247FF98 = (uint64_t)operator new(0x284uLL);
  uint64_t v3 = qword_10247FF98 + 644;
  qword_10247FFA8 = qword_10247FF98 + 644;
  memcpy((void *)qword_10247FF98, &unk_101D71714, 0x284uLL);
  qword_10247FFA0 = v3;
  qword_10247FFB8 = 0;
  qword_10247FFC0 = 0;
  qword_10247FFB0 = 0;
  qword_10247FFB0 = (uint64_t)operator new(0x284uLL);
  uint64_t v4 = qword_10247FFB0 + 644;
  qword_10247FFC0 = qword_10247FFB0 + 644;
  memcpy((void *)qword_10247FFB0, &unk_101D71998, 0x284uLL);
  qword_10247FFB8 = v4;
  __cxa_atexit((void (*)(void *))sub_100ACE2BC, &qword_10247FF98, (void *)&_mh_execute_header);
  v6[0] = 0x7800000001;
  v6[1] = &qword_10247FF98;
  v6[2] = 0x7A00000001;
  v6[3] = &qword_10247FF98;
  v6[4] = 0x7900000001;
  v6[5] = &qword_10247FF98;
  v6[6] = 0x7B00000001;
  v6[7] = &qword_10247FF98;
  v6[8] = 0x7800000004;
  v6[9] = &qword_10247FF98;
  v6[10] = 0x7A00000004;
  v6[11] = &qword_10247FF98;
  v6[12] = 0x7900000004;
  v6[13] = &qword_10247FF98;
  v6[14] = 0x7B00000004;
  v6[15] = &qword_10247FF98;
  _DWORD v6[16] = 0x7300000004;
  v6[17] = &qword_10247FF68;
  v6[18] = 0x7C00000004;
  v6[19] = &qword_10247FF68;
  v6[20] = 0x7300000000;
  v6[21] = &qword_10247FF68;
  v6[22] = 0x7C00000000;
  v6[23] = &qword_10247FF68;
  sub_100AD576C((uint64_t)&unk_10247FFC8, (int *)v6, 12);
  return __cxa_atexit((void (*)(void *))sub_100ACE300, &unk_10247FFC8, (void *)&_mh_execute_header);
}

void sub_100AD5EF8(_Unwind_Exception *exception_object)
{
}

void sub_100AD5FDC(id a1)
{
  qword_10247FFF0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLDuetMonitorSilo"];
}

void sub_100AD605C(id a1)
{
  if (!objc_opt_class())
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DCBD8);
    }
    uint64_t v1 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "CLDuetMonitor: not supported on this platform because CoreDuet.framework is not present", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DCBD8);
      }
      uint64_t v2 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "+[CLDuetMonitor isSupported]_block_invoke", "%s\n", v2);
      if (v2 != (char *)buf) {
        free(v2);
      }
    }
    byte_102480000 = 1;
  }
}

void sub_100AD6374(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

BOOL sub_100AD63A4()
{
  uint64_t v1 = qword_102419608;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

void *sub_100AD63C4(uint64_t *a1, uint64_t a2)
{
  int v4 = *((unsigned __int8 *)a1 + 8);
  if ((~v4 & 3) == 0)
  {
    uint64_t v5 = *a1;
    float32x2_t v6 = *(float32x2_t *)((char *)a1 + 12);
    float32x2_t v7 = (float32x2_t)vrev64_s32((int32x2_t)v6);
    float v8 = *((float *)a1 + 6) * v6.f32[0];
    float32x2_t v9 = vmul_n_f32(*(float32x2_t *)a2, v6.f32[0]);
    float v10 = *(float *)(a2 + 8) * v6.f32[0];
    v6.i32[1] = *((_DWORD *)a1 + 5);
    float32x2_t v11 = vadd_f32(vmul_f32(v7, v6), *(float32x2_t *)((char *)a1 + 28));
    float32x2_t v12 = (float32x2_t)vdup_n_s32(0x3C8EFA35u);
    float v13 = (float)((float)(v10 + *(float *)(a2 + 20)) * 0.017453) - (float)((float)(v8 + *((float *)a1 + 9)) * 0.017453);
    float32x2_t v15 = vsub_f32(vmul_f32(vadd_f32(v9, *(float32x2_t *)(a2 + 12)), v12), vmul_f32(v11, v12));
    float v16 = v13;
    (*(void (**)(uint64_t, float32x2_t *))(*(void *)v5 + 32))(v5, &v15);
    LOBYTE(v4) = *((unsigned char *)a1 + 8);
  }
  *((unsigned char *)a1 + 8) = v4 | 1;
  *((_DWORD *)a1 + 4) = *(_DWORD *)a2;
  *((_DWORD *)a1 + 5) = *(_DWORD *)(a2 + 4);
  *((_DWORD *)a1 + 6) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)a1 + 7) = *(_DWORD *)(a2 + 12);
  *((_DWORD *)a1 + 8) = *(_DWORD *)(a2 + 16);
  *((_DWORD *)a1 + 9) = *(_DWORD *)(a2 + 20);
  *((unsigned char *)a1 + 40) = *(unsigned char *)(a2 + 24);
  return sub_100AD64F4(a1);
}

void *sub_100AD64F4(void *result)
{
  if ((~*((unsigned __int8 *)result + 8) & 3) == 0)
  {
    float32x2_t v1 = *(float32x2_t *)((char *)result + 12);
    float32x2_t v2 = (float32x2_t)vrev64_s32((int32x2_t)v1);
    v1.i32[1] = *((_DWORD *)result + 5);
    float v3 = (float)(*((float *)result + 6) * v1.f32[0]) + *((float *)result + 9);
    float32x2_t v6 = vmul_f32(vadd_f32(vmul_f32(v2, v1), *(float32x2_t *)((char *)result + 28)), (float32x2_t)vdup_n_s32(0x3C8EFA35u));
    float v7 = v3 * 0.017453;
    BOOL v5 = v1.f32[0] < 20.0 || *((unsigned __int8 *)result + 40) > 0x60u;
    return (void *)(*(uint64_t (**)(void, float32x2_t *, BOOL))(*(void *)*result + 16))(*result, &v6, v5);
  }
  return result;
}

void *sub_100AD65B4(uint64_t a1, float a2)
{
  if (a2 == 3.4028e38)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022DCC18);
    }
    BOOL v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v8 = 0x47EFFFFFE0000000;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: temperature != 3.40282347e+38F, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMLinearTemperatureFit.cpp, line 45,temperature,%f.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022DCC18);
      }
      float32x2_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CMLinearTemperatureFit::feedGyroTemperature(float)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  *(unsigned char *)(a1 + 8) |= 2u;
  *(float *)(a1 + 12) = a2;
  return sub_100AD64F4((void *)a1);
}

void sub_100AD67A4(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

id sub_100AD67D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  [objc_msgSend(a1, "startDate") timeIntervalSinceReferenceDate];
  *(void *)a2 = v4;
  [objc_msgSend(a1, "endDate") timeIntervalSinceReferenceDate];
  *(void *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 16) = 0;
  unint64_t v6 = (unint64_t)[a1 workoutActivityType];
  *(unsigned char *)(a2 + 20) = (v6 < 0x35) & (0x10002001000000uLL >> v6);
  *(unsigned char *)(a2 + 21) = [[[objc_msgSend(objc_msgSend(objc_msgSend(a1, "metadata"), "objectForKeyedSubscript:", HKMetadataKeyIndoorWorkout)) objectForKeyedSubscript:HKMetadataKeyIndoorWorkout] boolValue];
  id result = [[[a1 totalEnergyBurned] doubleValueForUnit:[HKUnit unitFromString:@"cal"]];
  *(void *)(a2 + 24) = v8;
  return result;
}

void sub_100AD6898(uint64_t a1, double a2, double a3)
{
  if (objc_opt_class())
  {
    if (+[HKHealthStore isHealthDataAvailable])
    {
      id v6 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:a2];
      id v7 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:a3];
      v21[0] = +[HKQuery predicateForSamplesWithStartDate:v6 endDate:v7 options:3];
      v21[1] = +[HKQuery _predicateForObjectsFromAppleWatches];
      uint64_t v8 = +[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", +[NSArray arrayWithObjects:v21 count:2]);
      id v9 = objc_alloc((Class)HKSampleQuery);
      id v10 = +[HKSampleType workoutType];
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3321888768;
      v19[2] = sub_100AD6C74;
      v19[3] = &unk_1022DCC38;
      sub_100AD7138((uint64_t)v20, a1);
      id v11 = [v9 initWithSampleType:v10 predicate:v8 limit:0 sortDescriptors:0 resultsHandler:v19];
      id v12 = objc_alloc_init((Class)HKHealthStore);
      [v12 executeQuery:v11];

      sub_100AD70B4(v20);
    }
    else
    {
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022DCC68);
      }
      float v13 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Workout query, health data is not available.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1022DCC68);
        }
        __int16 v18 = 0;
        int v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLHKHealthStoreAccessUtils::queryWorkouts(CFAbsoluteTime, CFAbsoluteTime, WorkoutHandlerFunction)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      __p = 0;
      float v16 = 0;
      uint64_t v17 = 0;
      sub_1004EC468(&__p, 0, 0, 0);
      sub_100AD6C20(a1, 0);
      if (__p)
      {
        float v16 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_100AD6BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AD6C20(uint64_t a1, char a2)
{
  char v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_100AD6C74(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  long long v31 = 0;
  long long v32 = 0;
  unint64_t v33 = 0;
  if (a4)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022DCC68);
    }
    uint64_t v5 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = a4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Workout query, %@", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022DCC68);
      }
      int v34 = 138412290;
      uint64_t v35 = a4;
      double v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLHKHealthStoreAccessUtils::queryWorkouts(CFAbsoluteTime, CFAbsoluteTime, WorkoutHandlerFunction)_block_invoke", "%s\n", v22);
      if (v22 != (char *)&buf) {
        free(v22);
      }
    }
  }
  else if (a3)
  {
    if ([a3 count])
    {
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      id v7 = [a3 countByEnumeratingWithState:&v27 objects:v38 count:16];
      if (v7)
      {
        uint64_t v8 = *(void *)v28;
        do
        {
          for (i = 0; i != v7; i = (char *)i + 1)
          {
            if (*(void *)v28 != v8) {
              objc_enumerationMutation(a3);
            }
            sub_100AD67D4(*(void **)(*((void *)&v27 + 1) + 8 * i), (uint64_t)&buf);
            id v10 = v32;
            if ((unint64_t)v32 >= v33)
            {
              id v12 = v31;
              uint64_t v13 = ((char *)v32 - (unsigned char *)v31) >> 5;
              unint64_t v14 = v13 + 1;
              if ((unint64_t)(v13 + 1) >> 59) {
                sub_1001D7FD4();
              }
              uint64_t v15 = v33 - (void)v31;
              if ((uint64_t)(v33 - (void)v31) >> 4 > v14) {
                unint64_t v14 = v15 >> 4;
              }
              if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v16 = v14;
              }
              if (v16)
              {
                uint64_t v17 = (char *)sub_1001D9EDC((uint64_t)&v33, v16);
                id v12 = v31;
                id v10 = v32;
              }
              else
              {
                uint64_t v17 = 0;
              }
              __int16 v18 = &v17[32 * v13];
              *(_OWORD *)__int16 v18 = buf;
              *((_OWORD *)v18 + 1) = v37;
              if (v10 == v12)
              {
                uint64_t v21 = &v17[32 * v13];
              }
              else
              {
                unint64_t v19 = &v17[32 * v13];
                do
                {
                  long long v20 = *(v10 - 1);
                  uint64_t v21 = v19 - 32;
                  *((_OWORD *)v19 - 2) = *(v10 - 2);
                  *((_OWORD *)v19 - 1) = v20;
                  v10 -= 2;
                  v19 -= 32;
                }
                while (v10 != v12);
              }
              id v11 = v18 + 32;
              long long v31 = v21;
              long long v32 = v18 + 32;
              unint64_t v33 = (unint64_t)&v17[32 * v16];
              if (v12) {
                operator delete(v12);
              }
            }
            else
            {
              *long long v32 = buf;
              v10[1] = v37;
              id v11 = v10 + 2;
            }
            long long v32 = v11;
          }
          id v7 = [a3 countByEnumeratingWithState:&v27 objects:v38 count:16];
        }
        while (v7);
      }
    }
  }
  __p = 0;
  unint64_t v25 = 0;
  uint64_t v26 = 0;
  sub_1004EC468(&__p, v31, (uint64_t)v32, ((char *)v32 - (unsigned char *)v31) >> 5);
  sub_100AD6C20(a1 + 32, a4 == 0);
  if (__p)
  {
    unint64_t v25 = __p;
    operator delete(__p);
  }
  if (v31)
  {
    long long v32 = v31;
    operator delete(v31);
  }
}

void sub_100AD7024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AD7070(uint64_t a1, uint64_t a2)
{
  return sub_100AD7138(a1 + 32, a2 + 32);
}

void *sub_100AD707C(uint64_t a1)
{
  return sub_100AD70B4((void *)(a1 + 32));
}

void sub_100AD7084(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void *sub_100AD70B4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100AD7138(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100AD71D0(void *__dst, uint64_t a2, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    __dst[2] = *((void *)a3 + 2);
    *(_OWORD *)__dst = v5;
  }
  __dst[3] = a2;
  __dst[4] = 0xBFF0000000000000;
  sub_100AD724C((uint64_t)__dst);
  return __dst;
}

void sub_100AD7230(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100AD724C(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 96))(*(void *)(a1 + 24));
  uint64_t v3 = operator new(0x20uLL);
  *uint64_t v3 = off_1022DCCD8;
  v3[1] = sub_1001B1B2C;
  v3[2] = 0;
  v3[3] = a1;
  v32[3] = v3;
  sub_100ADB60C((void *)(v2 + 256), (uint64_t)v32);
  sub_1006A7C78(v32);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 104))(*(void *)(a1 + 24));
  long long v5 = operator new(0x20uLL);
  *long long v5 = off_1022DCD98;
  v5[1] = sub_10005F6C8;
  v5[2] = 0;
  v5[3] = a1;
  v31[3] = v5;
  sub_100ADB9C4((void *)(v4 + 112), (uint64_t)v31);
  sub_1006B1C4C(v31);
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 112))(*(void *)(a1 + 24));
  id v7 = operator new(0x20uLL);
  *id v7 = off_1022DCE58;
  v7[1] = sub_100098164;
  v7[2] = 0;
  v7[3] = a1;
  v30[3] = v7;
  sub_100ADBD7C((void *)(v6 + 416), (uint64_t)v30);
  sub_1006A9C3C(v30);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 128))(*(void *)(a1 + 24));
  id v9 = operator new(0x20uLL);
  *id v9 = off_1022DCF18;
  v9[1] = sub_10011F5F8;
  v9[2] = 0;
  v9[3] = a1;
  v29[3] = v9;
  sub_100ADC134((void *)(v8 + 112), (uint64_t)v29);
  sub_1006B1FAC(v29);
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120))(*(void *)(a1 + 24));
  id v11 = operator new(0x20uLL);
  *id v11 = off_1022DCFD8;
  v11[1] = sub_100AD7900;
  v11[2] = 0;
  void v11[3] = a1;
  v28[3] = v11;
  sub_100ADC4EC((void *)(v10 + 288), (uint64_t)v28);
  sub_1005E73C4(v28);
  uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 136))(*(void *)(a1 + 24));
  uint64_t v13 = operator new(0x20uLL);
  *uint64_t v13 = off_1022DD088;
  v13[1] = sub_100AD7B3C;
  v13[2] = 0;
  v13[3] = a1;
  v27[3] = v13;
  sub_100ADC8CC((void *)(v12 + 168), (uint64_t)v27);
  sub_1006A91BC(v27);
  uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 144))(*(void *)(a1 + 24));
  uint64_t v15 = operator new(0x20uLL);
  void *v15 = off_1022DD148;
  v15[1] = sub_100AD7D80;
  v15[2] = 0;
  v15[3] = a1;
  v26[3] = v15;
  sub_100ADCCAC((void *)(v14 + 128), (uint64_t)v26);
  sub_1006B24F4(v26);
  uint64_t v16 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 160))(*(void *)(a1 + 24));
  uint64_t v17 = operator new(0x20uLL);
  *uint64_t v17 = off_1022DD208;
  v17[1] = sub_100AD7FBC;
  v17[2] = 0;
  v17[3] = a1;
  v25[3] = v17;
  sub_100ADD08C((void *)(v16 + 144), (uint64_t)v25);
  sub_1006B2DAC(v25);
  uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 152))(*(void *)(a1 + 24));
  unint64_t v19 = operator new(0x20uLL);
  *unint64_t v19 = off_1022DD2C8;
  v19[1] = sub_10011FC24;
  v19[2] = 0;
  v19[3] = a1;
  v24[3] = v19;
  sub_100ADD46C((void *)(v18 + 128), (uint64_t)v24);
  sub_1006B2858(v24);
  uint64_t v20 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 168))(*(void *)(a1 + 24));
  uint64_t v21 = operator new(0x20uLL);
  *uint64_t v21 = off_1022DD388;
  v21[1] = sub_100AD81A0;
  void v21[2] = 0;
  v21[3] = a1;
  v23[3] = v21;
  sub_100ADD824((void *)(v20 + 152), (uint64_t)v23);
  return sub_1006B3370(v23);
}

void sub_100AD77CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1006B3370(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100AD787C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 904);
  if (v2)
  {
    *(void *)(a1 + 912) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 864);
  if (v3)
  {
    *(void *)(a1 + 872) = v3;
    operator delete(v3);
  }
  long long v5 = (void **)(a1 + 784);
  sub_1000D7F78(&v5);
  return a1;
}

void sub_100AD7900(uint64_t *a1, uint64_t *a2)
{
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_1022DCC88);
  }
  uint64_t v4 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    long long v5 = a1;
    if (*((char *)a1 + 23) < 0) {
      long long v5 = (uint64_t *)*a1;
    }
    uint64_t v6 = *a2;
    uint64_t v8 = a2[4];
    uint64_t v7 = a2[5];
    uint64_t v9 = a2[7];
    *(_DWORD *)long long buf = 136316418;
    uint64_t v12 = v5;
    __int16 v13 = 2048;
    uint64_t v14 = v6;
    __int16 v15 = 2048;
    uint64_t v16 = v7;
    __int16 v17 = 2048;
    uint64_t v18 = v8;
    __int16 v19 = 2048;
    uint64_t v20 = v9;
    __int16 v21 = 2048;
    uint64_t v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Odometer,context,%s,startTime,%f,rawSpeed,%f,speed,%f,speedAccuracy,%f,startTime,%f", buf, 0x3Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_1022DCC88);
    }
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorInputs::logGps(const CLOutdoorGps &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
}

void sub_100AD7B3C(uint64_t *a1, float *a2)
{
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_1022DCC88);
  }
  uint64_t v4 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    long long v5 = a1;
    if (*((char *)a1 + 23) < 0) {
      long long v5 = (uint64_t *)*a1;
    }
    uint64_t v6 = *(void *)a2;
    double v7 = a2[2];
    double v8 = a2[6];
    double v9 = a2[7];
    *(_DWORD *)long long buf = 136316162;
    uint64_t v12 = v5;
    __int16 v13 = 2048;
    uint64_t v14 = v6;
    __int16 v15 = 2048;
    double v16 = v7;
    __int16 v17 = 2048;
    double v18 = v8;
    __int16 v19 = 2048;
    double v20 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Turn,context,%s,startTime,%f,%f,%f,%f", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_1022DCC88);
    }
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorInputs::logTurn(const CLOutdoorTurn &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
}

void sub_100AD7D80(uint64_t *a1, uint64_t *a2)
{
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_1022DCC88);
  }
  uint64_t v4 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    long long v5 = a1;
    if (*((char *)a1 + 23) < 0) {
      long long v5 = (uint64_t *)*a1;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * ((a2[2] - a2[1]) >> 3);
    *(_DWORD *)long long buf = 136315650;
    uint64_t v10 = v5;
    __int16 v11 = 2048;
    uint64_t v12 = v6;
    __int16 v13 = 2048;
    uint64_t v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WifiScan,context,%s,startTime,%f,accessPointCount,%lu", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_1022DCC88);
    }
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorInputs::logWifiScan(const CLOutdoorWifiScan &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
}

void sub_100AD7FBC(uint64_t a1, uint64_t *a2)
{
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_1022DCC88);
  }
  uint64_t v3 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
    uint64_t v6 = a2[2];
    *(_DWORD *)long long buf = 134218496;
    uint64_t v9 = v4;
    __int16 v10 = 2048;
    uint64_t v11 = v5;
    __int16 v12 = 2048;
    uint64_t v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "GnssLeechLocation,startTime,%f,machTime,%f,lifespan,%f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_1022DCC88);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorInputs::logGnssLeechLocation(const CLOutdoorGnssLeechLocation &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_100AD81A0(uint64_t a1, uint64_t *a2)
{
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_1022DCC88);
  }
  uint64_t v3 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *a2;
    uint64_t v5 = a2[5];
    uint64_t v6 = a2[6];
    int v7 = *((_DWORD *)a2 + 2);
    int v8 = *((_DWORD *)a2 + 3);
    *(_DWORD *)long long buf = 134219009;
    uint64_t v11 = v4;
    __int16 v12 = 2048;
    uint64_t v13 = v5;
    __int16 v14 = 2048;
    uint64_t v15 = v6;
    __int16 v16 = 1025;
    int v17 = v7;
    __int16 v18 = 1025;
    int v19 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "MapsRouteHint,startTime,%f,iosTime,%f,machTime,%f,routingType,%{private}d,stepType,%{private}d", buf, 0x2Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_1022DCC88);
    }
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorInputs::logMapsRouteHint(const CLOutdoorMapsRouteHint &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
}

void sub_100AD83B4(id a1)
{
  qword_1024194F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

uint64_t sub_100AD83E4(uint64_t result)
{
  if (*(double *)(result + 64) != -1.0)
  {
    uint64_t v1 = result;
    if (!*(unsigned char *)(result + 8))
    {
      id result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      if (result)
      {
        *(unsigned char *)(v1 + 8) = 1;
      }
      else if (!*(unsigned char *)(v1 + 8))
      {
        double v2 = 2.22507386e-308;
        goto LABEL_7;
      }
    }
    double v2 = *(double *)(v1 + 64) + 30.0;
LABEL_7:
    *(double *)(v1 + 72) = v2;
  }
  return result;
}

void sub_100AD8478(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

__n128 sub_100AD84A8@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    int v19 = a2;
    __int16 v18 = a4;
    uint64_t v15 = a5;
    __int16 v16 = a6;
  }
  else
  {
    uint64_t v13 = a3 - 1;
    __int16 v12 = *a3;
    __int16 v14 = a4;
    uint64_t v15 = a5;
    __int16 v16 = a6;
    while (1)
    {
      sub_100AD8578(v12, v14, v15, v16, &v21);
      __int16 v16 = (char *)v22.n128_u64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      int v17 = *v13--;
      __int16 v12 = v17;
      __int16 v14 = v17 + 4000;
    }
    __int16 v18 = *a1 + 4000;
    int v19 = a2;
  }
  sub_100AD8578(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100AD8578@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = a2;
    while (1)
    {
      int64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a4[-v10] >> 5);
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v11 - a1) >> 5)) < v12) {
        int64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - a1) >> 5);
      }
      v11 -= 160 * v12;
      a4 -= 160 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 160 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4000);
    }
    if ((char *)(*v6 + 4000) == a4)
    {
      uint64_t v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

uint64_t sub_100AD865C(uint64_t result)
{
  if (*(double *)(result + 64) != -1.0)
  {
    uint64_t v1 = result;
    if (!*(unsigned char *)(result + 8))
    {
      __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      if (result)
      {
        *(unsigned char *)(v1 + 8) = 1;
      }
      else if (!*(unsigned char *)(v1 + 8))
      {
        double v2 = 2.22507386e-308;
        goto LABEL_7;
      }
    }
    double v2 = *(double *)(v1 + 64) + 30.0;
LABEL_7:
    *(double *)(v1 + 72) = v2;
  }
  return result;
}

__n128 sub_100AD86F0@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    int v17 = a2;
    __int16 v16 = a4;
    i = a5;
    uint64_t v14 = a6;
  }
  else
  {
    int64_t v12 = a3 - 1;
    sub_100AD87DC(*a3, a4, a5, a6, &v19);
    uint64_t v14 = (char *)v20.n128_u64[1];
    for (i = (void *)v20.n128_u64[0]; v12 != a1; i = (void *)v20.n128_u64[0])
    {
      uint64_t v15 = *v12--;
      sub_100AD87DC(v15, v15 + 5120, i, v14, &v19);
      uint64_t v14 = (char *)v20.n128_u64[1];
    }
    __int16 v16 = *a1 + 5120;
    int v17 = a2;
  }
  sub_100AD87DC(v17, v16, i, v14, &v19);
  __n128 result = v20;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100AD87DC@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = a2;
    while (1)
    {
      int64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a4[-v10] >> 6);
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v11 - a1) >> 6)) < v12) {
        int64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - a1) >> 6);
      }
      v11 -= 320 * v12;
      a4 -= 320 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 320 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 5120);
    }
    if ((char *)(*v6 + 5120) == a4)
    {
      uint64_t v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

uint64_t sub_100AD88C8(uint64_t result)
{
  if (*(double *)(result + 64) != -1.0)
  {
    uint64_t v1 = result;
    if (!*(unsigned char *)(result + 8))
    {
      __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      if (result)
      {
        *(unsigned char *)(v1 + 8) = 1;
      }
      else if (!*(unsigned char *)(v1 + 8))
      {
        double v2 = 2.22507386e-308;
        goto LABEL_7;
      }
    }
    double v2 = *(double *)(v1 + 64) + 30.0;
LABEL_7:
    *(double *)(v1 + 72) = v2;
  }
  return result;
}

void *sub_100AD895C(void *result, double *a2, uint64_t a3, double *a4, uint64_t a5, uint64_t a6)
{
  if (a2 != a4)
  {
    while (*(double *)&a5 - *a2 <= *(double *)(a6 + 88))
    {
      a2 += 24;
      if ((double *)((char *)a2 - *result) == (double *)4032)
      {
        uint64_t v6 = (double *)result[1];
        ++result;
        a2 = v6;
      }
      if (a2 == a4) {
        return result;
      }
    }
  }
  if (a2 != a4)
  {
    int v7 = a2;
    int v8 = result;
    while (1)
    {
      v7 += 24;
      if ((double *)((char *)v7 - *v8) == (double *)4032)
      {
        uint64_t v9 = (double *)v8[1];
        ++v8;
        int v7 = v9;
      }
      if (v7 == a4) {
        break;
      }
      if (*(double *)&a5 - *v7 <= *(double *)(a6 + 88))
      {
        long long v10 = *(_OWORD *)v7;
        long long v11 = *((_OWORD *)v7 + 1);
        long long v12 = *((_OWORD *)v7 + 3);
        *((_OWORD *)a2 + 2) = *((_OWORD *)v7 + 2);
        *((_OWORD *)a2 + 3) = v12;
        *(_OWORD *)a2 = v10;
        *((_OWORD *)a2 + 1) = v11;
        long long v13 = *((_OWORD *)v7 + 4);
        long long v14 = *((_OWORD *)v7 + 5);
        long long v15 = *((_OWORD *)v7 + 7);
        *((_OWORD *)a2 + 6) = *((_OWORD *)v7 + 6);
        *((_OWORD *)a2 + 7) = v15;
        *((_OWORD *)a2 + 4) = v13;
        *((_OWORD *)a2 + 5) = v14;
        long long v16 = *((_OWORD *)v7 + 8);
        long long v17 = *((_OWORD *)v7 + 9);
        long long v18 = *((_OWORD *)v7 + 11);
        *((_OWORD *)a2 + 10) = *((_OWORD *)v7 + 10);
        *((_OWORD *)a2 + 11) = v18;
        *((_OWORD *)a2 + 8) = v16;
        *((_OWORD *)a2 + 9) = v17;
        a2 += 24;
        if ((double *)((char *)a2 - *result) == (double *)4032)
        {
          uint64_t v19 = (double *)result[1];
          ++result;
          a2 = v19;
        }
      }
    }
  }
  return result;
}

uint64_t sub_100AD8A38(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x15) {
    a2 = 1;
  }
  if (v2 < 0x2A) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 21;
  }
  return v4 ^ 1u;
}

uint64_t sub_100AD8A98(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 21 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x15) {
    a2 = 1;
  }
  if (v5 < 0x2A) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 sub_100AD8B10@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    long long v18 = a4;
    long long v15 = a5;
    long long v16 = a6;
  }
  else
  {
    long long v13 = a3 - 1;
    long long v12 = *a3;
    long long v14 = a4;
    long long v15 = a5;
    long long v16 = a6;
    while (1)
    {
      sub_100AD8BE0(v12, v14, v15, v16, &v21);
      long long v16 = (char *)v22.n128_u64[1];
      long long v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      long long v17 = *v13--;
      long long v12 = v17;
      long long v14 = v17 + 4032;
    }
    long long v18 = *a1 + 4032;
    uint64_t v19 = a2;
  }
  sub_100AD8BE0(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100AD8BE0@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    long long v11 = a2;
    while (1)
    {
      int64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a4[-v10] >> 6);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - a1) >> 6)) < v12) {
        int64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - a1) >> 6);
      }
      v11 -= 192 * v12;
      a4 -= 192 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 192 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4032);
    }
    if ((char *)(*v6 + 4032) == a4)
    {
      long long v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100AD8CC4(void *a1, unsigned char *a2, unsigned char **a3, unsigned char *a4, uint64_t a5)
{
  int v7 = *(void ***)a5;
  int v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (i = (unsigned char *)(*a1 + 4032); ; i = v12 + 4032)
    {
      sub_100AD8D58(a2, v8, i, v7, &v14);
      int v8 = (char *)*((void *)&v15 + 1);
      int v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      int64_t v12 = (unsigned char *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_100AD8D58(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_100AD8D58@<X0>(unsigned char *__src@<X1>, char *__dst@<X4>, unsigned char *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a4;
  int v7 = __src;
  if (__src == a3)
  {
    uint64_t v9 = __src;
  }
  else
  {
    uint64_t v9 = a3;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - __dst + 4032) >> 6);
      unint64_t v12 = (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 6)) >= v11 ? v11 : 0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 6);
      if (v12) {
        double result = memmove(__dst, v7, 192 * v12);
      }
      v7 += 192 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      __dst = v14;
    }
    __dst += 192 * v12;
    if ((char *)*(v6 - 1) + 4032 == __dst) {
      __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

uint64_t sub_100AD8E44(uint64_t result)
{
  if (*(double *)(result + 64) != -1.0)
  {
    uint64_t v1 = result;
    if (!*(unsigned char *)(result + 8))
    {
      double result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      if (result)
      {
        *(unsigned char *)(v1 + 8) = 1;
      }
      else if (!*(unsigned char *)(v1 + 8))
      {
        double v2 = 2.22507386e-308;
        goto LABEL_7;
      }
    }
    double v2 = *(double *)(v1 + 64) + 30.0;
LABEL_7:
    *(double *)(v1 + 72) = v2;
  }
  return result;
}

unint64_t sub_100AD8ED8(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 56 * (a4 - a2) - 0x71C71C71C71C71C7 * ((a5 - *a4) >> 3) + 0x71C71C71C71C71C7 * ((a3 - *a2) >> 3);
  }
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  uint64_t v9 = (uint64_t *)(v8 + 8 * (v7 / 0x38));
  if (a1[2] == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *v9 + 72 * (v7 % 0x38);
  }
  if (a3 == v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = 56 * (a2 - v9) - 0x71C71C71C71C71C7 * ((a3 - *a2) >> 3) + 0x71C71C71C71C71C7 * ((v10 - *v9) >> 3);
  }
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x38);
  v24[0].n128_u64[1] = v10;
  sub_1005AACC4(v24, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_1005AACC4(v24, v6);
      sub_100AD9250(v9, v10, (uint64_t *)v12.n128_u64[0], v12.n128_i64[1], (uint64_t *)v24[0].n128_u64[0], v24[0].n128_i64[1], v24);
      uint64_t v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_100507AAC((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_1005AACC4(v24, v6);
      __n128 v13 = v24[0];
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      long long v16 = (uint64_t *)(v15 + 8 * (v14 / 0x38));
      if (a1[2] == v15) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = *v16 + 72 * (v14 % 0x38);
      }
      v24[0] = v12;
      sub_100AD93FC((uint64_t *)v13.n128_u64[0], v13.n128_i64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_1005AAD78(a1, 1) & 1) != 0)
        ;
    }
  }
  unint64_t v19 = a1[4];
  uint64_t v20 = a1[1];
  uint64_t v21 = (void *)(v20 + 8 * (v19 / 0x38));
  if (a1[2] == v20) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = *v21 + 72 * (v19 % 0x38);
  }
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_1005AACC4(v24, v11);
  return v24[0].n128_u64[0];
}

void *sub_100AD9184(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)a2 <= *(double *)(a6 + 88))
    {
      a2 += 72;
      if (a2 - *result == 4032)
      {
        uint64_t v6 = result[1];
        ++result;
        a2 = v6;
      }
      if (a2 == a4) {
        return result;
      }
    }
  }
  if (a2 != a4)
  {
    uint64_t v7 = a2;
    uint64_t v8 = result;
    while (1)
    {
      v7 += 72;
      if (v7 - *v8 == 4032)
      {
        uint64_t v9 = v8[1];
        ++v8;
        uint64_t v7 = v9;
      }
      if (v7 == a4) {
        break;
      }
      if (*(double *)&a5 - *(double *)v7 <= *(double *)(a6 + 88))
      {
        *(_OWORD *)a2 = *(_OWORD *)v7;
        long long v10 = *(_OWORD *)(v7 + 16);
        long long v11 = *(_OWORD *)(v7 + 32);
        long long v12 = *(_OWORD *)(v7 + 48);
        *(void *)(a2 + 64) = *(void *)(v7 + 64);
        *(_OWORD *)(a2 + 32) = v11;
        *(_OWORD *)(a2 + 48) = v12;
        *(_OWORD *)(a2 + 16) = v10;
        a2 += 72;
        if (a2 - *result == 4032)
        {
          uint64_t v13 = result[1];
          ++result;
          a2 = v13;
        }
      }
    }
  }
  return result;
}

__n128 sub_100AD9250@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    uint64_t v14 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_100AD9320(v12, v14, v15, v16, &v21);
      uint64_t v16 = v22.n128_i64[1];
      uint64_t v15 = (uint64_t *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      uint64_t v14 = v17 + 4032;
    }
    uint64_t v18 = *a1 + 4032;
    uint64_t v19 = a2;
  }
  sub_100AD9320(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = a4;
  a7[1] = result;
  return result;
}

void sub_100AD9320(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  if (a1 == a2)
  {
    a2 = a1;
  }
  else
  {
    uint64_t v5 = *a3;
    uint64_t v6 = a4;
    uint64_t v7 = a2;
    while (1)
    {
      int64_t v8 = 0x8E38E38E38E38E39 * ((v6 - v5) >> 3);
      if ((uint64_t)(0x8E38E38E38E38E39 * ((v7 - a1) >> 3)) < v8) {
        int64_t v8 = 0x8E38E38E38E38E39 * ((v7 - a1) >> 3);
      }
      if (v8)
      {
        uint64_t v9 = -72 * v8;
        uint64_t v10 = v7 - 72;
        do
        {
          a4 = v6 - 72;
          *(_OWORD *)(v6 - 72) = *(_OWORD *)v10;
          long long v11 = *(_OWORD *)(v10 + 16);
          long long v12 = *(_OWORD *)(v10 + 32);
          long long v13 = *(_OWORD *)(v10 + 48);
          *(void *)(v6 - 8) = *(void *)(v10 + 64);
          *(_OWORD *)(v6 - 24) = v13;
          *(_OWORD *)(v6 - 40) = v12;
          *(_OWORD *)(v6 - 56) = v11;
          v10 -= 72;
          v6 -= 72;
          v9 += 72;
        }
        while (v9);
      }
      else
      {
        a4 = v6;
      }
      v7 -= 72 * v8;
      if (v7 == a1) {
        break;
      }
      uint64_t v14 = *--a3;
      uint64_t v5 = v14;
      uint64_t v6 = v14 + 4032;
    }
    if (*a3 + 4032 == a4)
    {
      uint64_t v15 = a3[1];
      ++a3;
      a4 = v15;
    }
  }
  *a5 = a2;
  a5[1] = a3;
  a5[2] = a4;
}

double sub_100AD93FC(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(uint64_t **)a5;
  uint64_t v8 = *(void *)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = *a1 + 4032; ; uint64_t i = v12 + 4032)
    {
      sub_100AD9490(a2, i, v7, v8, &v14);
      uint64_t v8 = *((void *)&v15 + 1);
      uint64_t v7 = (uint64_t *)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      uint64_t v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_100AD9490(a2, a4, v7, v8, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void sub_100AD9490(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  if (a1 == a2)
  {
    a2 = a1;
  }
  else
  {
    uint64_t v5 = *a3;
    while (1)
    {
      int64_t v6 = 0x8E38E38E38E38E39 * ((v5 - a4 + 4032) >> 3);
      int64_t v7 = 0x8E38E38E38E38E39 * ((a2 - a1) >> 3);
      if (v7 >= v6) {
        int64_t v7 = v6;
      }
      if (v7)
      {
        uint64_t v8 = a1 + 72 * v7;
        uint64_t v9 = 72 * v7;
        do
        {
          *(_OWORD *)a4 = *(_OWORD *)a1;
          long long v10 = *(_OWORD *)(a1 + 16);
          long long v11 = *(_OWORD *)(a1 + 32);
          long long v12 = *(_OWORD *)(a1 + 48);
          *(void *)(a4 + 64) = *(void *)(a1 + 64);
          *(_OWORD *)(a4 + 32) = v11;
          *(_OWORD *)(a4 + 48) = v12;
          *(_OWORD *)(a4 + 16) = v10;
          a1 += 72;
          a4 += 72;
          v9 -= 72;
        }
        while (v9);
        a1 = v8;
      }
      if (a1 == a2) {
        break;
      }
      uint64_t v13 = a3[1];
      ++a3;
      uint64_t v5 = v13;
      a4 = v13;
    }
    if (*a3 + 4032 == a4)
    {
      uint64_t v14 = a3[1];
      ++a3;
      a4 = v14;
    }
  }
  *a5 = a2;
  a5[1] = a3;
  a5[2] = a4;
}

uint64_t sub_100AD9554(uint64_t result)
{
  if (*(double *)(result + 64) != -1.0)
  {
    uint64_t v1 = result;
    if (!*(unsigned char *)(result + 8))
    {
      double result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      if (result)
      {
        *(unsigned char *)(v1 + 8) = 1;
      }
      else if (!*(unsigned char *)(v1 + 8))
      {
        double v2 = 2.22507386e-308;
        goto LABEL_7;
      }
    }
    double v2 = *(double *)(v1 + 64) + 30.0;
LABEL_7:
    *(double *)(v1 + 72) = v2;
  }
  return result;
}

void *sub_100AD95E8(void *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((a5 - *(void *)a4) >> 5) + 16 * (a4 - a2) - ((a3 - *(void *)a2) >> 5);
  }
  uint64_t v7 = a1[1];
  uint64_t v8 = (char *)(v7 + 8 * (a1[4] >> 7));
  if (a1[2] == v7) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)v8 + 32 * (a1[4] & 0x7FLL);
  }
  long long v38 = (uint64_t *)(v7 + 8 * (a1[4] >> 7));
  uint64_t v39 = v9;
  if (v9 == a3) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = ((a3 - *(void *)a2) >> 5) + 16 * (a2 - v8) - ((v9 - *(void *)v8) >> 5);
  }
  long long v11 = sub_1001732B8((uint64_t)&v38, v10);
  v37.n128_u64[0] = (unint64_t)v11;
  v37.n128_u64[1] = v12;
  if (v6 >= 1)
  {
    if (v10 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      uint64_t v19 = v11;
      uint64_t v20 = v12;
      uint64_t v21 = v38;
      uint64_t v22 = v39;
      unint64_t v23 = sub_1001732B8((uint64_t)&v37, v6);
      sub_100AD99B4(v21, v22, v19, v20, v23, v24, &v40);
      uint64_t v25 = v41;
      uint64_t v26 = v39;
      while (v26 != v25)
      {
        v40.n128_u64[0] = v26 + 8;
        sub_1000D7F78((void ***)&v40);
        uint64_t v26 = v39 + 32;
        uint64_t v39 = v26;
        if (v26 - *v38 == 4096)
        {
          uint64_t v26 = v38[1];
          ++v38;
          uint64_t v39 = v26;
        }
      }
      uint64_t v27 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v27;
      while ((sub_1002D0514((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      uint64_t v13 = sub_1001732B8((uint64_t)&v37, v6);
      unint64_t v15 = a1[4] + a1[5];
      uint64_t v16 = a1[1];
      uint64_t v17 = (uint64_t *)(v16 + 8 * (v15 >> 7));
      if (a1[2] == v16) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = *v17 + 32 * (v15 & 0x7F);
      }
      __n128 v40 = v37;
      sub_100AD9C10(v13, v14, v17, v18, (uint64_t)&v40);
      unint64_t v28 = v40.n128_u64[1];
      uint64_t v29 = a1[1];
      if (a1[2] == v29)
      {
        uint64_t v31 = 0;
      }
      else
      {
        unint64_t v30 = a1[5] + a1[4];
        uint64_t v31 = *(void *)(v29 + ((v30 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v30 & 0x7F);
      }
      if (v31 != v40.n128_u64[1])
      {
        long long v32 = (void *)v40.n128_u64[0];
        do
        {
          v40.n128_u64[0] = v28 + 8;
          sub_1000D7F78((void ***)&v40);
          v28 += 32;
          if (v28 - *v32 == 4096)
          {
            unint64_t v33 = v32[1];
            ++v32;
            unint64_t v28 = v33;
          }
        }
        while (v28 != v31);
      }
      a1[5] -= v6;
      while ((sub_10017DE88(a1, 1) & 1) != 0)
        ;
    }
  }
  uint64_t v34 = a1[1];
  if (a1[2] == v34) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = *(void *)(v34 + 8 * (a1[4] >> 7)) + 32 * (a1[4] & 0x7FLL);
  }
  v40.n128_u64[0] = v34 + 8 * (a1[4] >> 7);
  v40.n128_u64[1] = v35;
  return sub_1001732B8((uint64_t)&v40, v10);
}

void *sub_100AD989C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a2;
  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)v8 <= *(double *)(a6 + 88))
    {
      v8 += 32;
      if (v8 - *a1 == 4096)
      {
        uint64_t v11 = a1[1];
        ++a1;
        uint64_t v8 = v11;
      }
      if (v8 == a4) {
        return a1;
      }
    }
  }
  if (v8 != a4)
  {
    uint64_t v12 = v8;
    uint64_t v13 = a1;
    while (1)
    {
      v12 += 32;
      if (v12 - *v13 == 4096)
      {
        uint64_t v14 = v13[1];
        ++v13;
        uint64_t v12 = v14;
      }
      if (v12 == a4) {
        break;
      }
      if (*(double *)&a5 - *(double *)v12 <= *(double *)(a6 + 88))
      {
        *(void *)uint64_t v8 = *(void *)v12;
        sub_10017C740((uint64_t *)(v8 + 8));
        *(_OWORD *)(v8 + 8) = *(_OWORD *)(v12 + 8);
        *(void *)(v8 + 24) = *(void *)(v12 + 24);
        *(void *)(v12 + 8) = 0;
        *(void *)(v12 + 16) = 0;
        *(void *)(v12 + 24) = 0;
        v8 += 32;
        if (v8 - *a1 == 4096)
        {
          uint64_t v15 = a1[1];
          ++a1;
          uint64_t v8 = v15;
        }
      }
    }
  }
  return a1;
}

__n128 sub_100AD99B4@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    uint64_t v14 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_100AD9A84(v12, v14, v15, v16, &v21);
      uint64_t v16 = v22.n128_i64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      uint64_t v14 = v17 + 4096;
    }
    uint64_t v18 = *a1 + 4096;
    uint64_t v19 = a2;
  }
  sub_100AD9A84(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = a4;
  a7[1] = result;
  return result;
}

uint64_t sub_100AD9A84@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v5 = a4;
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = a4 - *a3;
    if ((a2 - a1) >> 5 >= v10 >> 5) {
      uint64_t v11 = v10 >> 5;
    }
    else {
      uint64_t v11 = (a2 - a1) >> 5;
    }
    uint64_t v12 = a2 - 32 * v11;
    uint64_t result = sub_100AD9B80((uint64_t)&v20, v12, a2, a4);
    if (v12 != a1)
    {
      do
      {
        uint64_t v15 = *--v6;
        uint64_t v16 = v15 + 4096;
        uint64_t v17 = (v12 - a1) >> 5;
        if (v17 >= 128) {
          uint64_t v17 = 128;
        }
        uint64_t v18 = v12 - 32 * v17;
        uint64_t result = sub_100AD9B80((uint64_t)&v20, v18, v12, v16);
        uint64_t v12 = v18;
      }
      while (v18 != a1);
    }
    uint64_t v5 = v14;
    if (*v6 + 4096 == v14)
    {
      uint64_t v19 = v6[1];
      ++v6;
      uint64_t v5 = v19;
    }
  }
  *a5 = v9;
  a5[1] = (uint64_t)v6;
  a5[2] = v5;
  return result;
}

uint64_t sub_100AD9B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = a4 + v7;
      *(void *)(a4 + v7 - 32) = *(void *)(a3 + v7 - 32);
      sub_10017C740((uint64_t *)(a4 + v7 - 24));
      *(_OWORD *)(v9 - 24) = *(_OWORD *)(a3 + v7 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 + v7 - 8);
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      *(void *)(v8 - 8) = 0;
      v7 -= 32;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

double sub_100AD9C10(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void **)a5;
  uint64_t v8 = *(void **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = *a1 + 4096; ; uint64_t i = v12 + 4096)
    {
      sub_100AD9CA4(a2, i, v7, v8, &v14);
      uint64_t v8 = (void *)*((void *)&v15 + 1);
      uint64_t v7 = (void *)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      uint64_t v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_100AD9CA4(a2, a4, v7, v8, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void sub_100AD9CA4(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, void *a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v5 = a4;
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v8 = a2;
    uint64_t v9 = *a3 - (void)a4 + 4096;
    if ((a2 - a1) >> 5 >= v9 >> 5) {
      uint64_t v10 = v9 >> 5;
    }
    else {
      uint64_t v10 = (a2 - a1) >> 5;
    }
    uint64_t v11 = sub_100AD9D90((uint64_t)&v18, a1, a1 + 32 * v10, a4);
    if (v11 != v8)
    {
      uint64_t v13 = v11;
      do
      {
        long long v15 = (void *)v6[1];
        ++v6;
        uint64_t v14 = v15;
        uint64_t v16 = (v8 - v13) >> 5;
        if (v16 >= 128) {
          uint64_t v16 = 128;
        }
        uint64_t v13 = sub_100AD9D90((uint64_t)&v18, v13, v13 + 32 * v16, v14);
      }
      while (v13 != v8);
    }
    uint64_t v5 = v12;
    if ((void *)(*v6 + 4096) == v12)
    {
      uint64_t v17 = (void *)v6[1];
      ++v6;
      uint64_t v5 = v17;
    }
  }
  *a5 = v8;
  a5[1] = (uint64_t)v6;
  a5[2] = (uint64_t)v5;
}

uint64_t sub_100AD9D90(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    *a4 = *(void *)v5;
    sub_10017C740(a4 + 1);
    *(_OWORD *)(a4 + 1) = *(_OWORD *)(v5 + 8);
    a4[3] = *(void *)(v5 + 24);
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
    *(void *)(v5 + 24) = 0;
    a4 += 4;
    v5 += 32;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_100AD9E10(uint64_t result)
{
  if (*(double *)(result + 64) != -1.0)
  {
    uint64_t v1 = result;
    if (!*(unsigned char *)(result + 8))
    {
      double result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      if (result)
      {
        *(unsigned char *)(v1 + 8) = 1;
      }
      else if (!*(unsigned char *)(v1 + 8))
      {
        double v2 = 2.22507386e-308;
        goto LABEL_7;
      }
    }
    double v2 = *(double *)(v1 + 64) + 30.0;
LABEL_7:
    *(double *)(v1 + 72) = v2;
  }
  return result;
}

unint64_t sub_100AD9EA4(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 85 * (a4 - a2) - 0x5555555555555555 * ((a5 - *a4) >> 4) + 0x5555555555555555 * ((a3 - *a2) >> 4);
  }
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  uint64_t v9 = v8 + 8 * (v7 / 0x55);
  if (a1[2] == v8) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *(void *)v9 + 48 * (v7 % 0x55);
  }
  if (a3 == v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = 85 * (((uint64_t)a2 - v9) >> 3)
  }
        - 0x5555555555555555 * ((a3 - *a2) >> 4)
        + 0x5555555555555555 * ((uint64_t)(v10 - *(void *)v9) >> 4);
  v34.n128_u64[0] = v8 + 8 * (v7 / 0x55);
  v34.n128_u64[1] = v10;
  sub_100ADA550(&v34, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v34;
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_100ADA550(&v34, v6);
      sub_100ADA5EC((char **)v9, (char *)v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], (char *)v34.n128_u64[0], v34.n128_i64[1], &v34);
      uint64_t v18 = v35;
      while (v10 != v18)
      {
        uint64_t v19 = *(void **)(v10 + 24);
        if (v19)
        {
          *(void *)(v10 + 32) = v19;
          operator delete(v19);
        }
        v10 += 48;
        if (v10 - *(void *)v9 == 4080)
        {
          unint64_t v20 = *(void *)(v9 + 8);
          v9 += 8;
          unint64_t v10 = v20;
        }
      }
      uint64_t v21 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v21;
      while ((sub_1004465E8((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_100ADA550(&v34, v6);
      __n128 v13 = v34;
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      uint64_t v16 = (long long **)(v15 + 8 * (v14 / 0x55));
      if (a1[2] == v15) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = &(*v16)[3 * (v14 % 0x55)];
      }
      __n128 v34 = v12;
      sub_100ADA810((long long **)v13.n128_u64[0], (long long *)v13.n128_u64[1], v16, v17, (uint64_t)&v34);
      unint64_t v22 = v34.n128_u64[1];
      uint64_t v23 = a1[1];
      if (a1[2] == v23)
      {
        unint64_t v25 = 0;
      }
      else
      {
        unint64_t v24 = a1[5] + a1[4];
        unint64_t v25 = *(void *)(v23 + 8 * (v24 / 0x55)) + 48 * (v24 % 0x55);
      }
      if (v25 != v34.n128_u64[1])
      {
        uint64_t v26 = (void *)v34.n128_u64[0];
        do
        {
          uint64_t v27 = *(void **)(v22 + 24);
          if (v27)
          {
            *(void *)(v22 + 32) = v27;
            operator delete(v27);
          }
          v22 += 48;
          if (v22 - *v26 == 4080)
          {
            unint64_t v28 = v26[1];
            ++v26;
            unint64_t v22 = v28;
          }
        }
        while (v22 != v25);
      }
      a1[5] -= v6;
      while ((sub_100ADA4D8(a1, 1) & 1) != 0)
        ;
    }
  }
  unint64_t v29 = a1[4];
  uint64_t v30 = a1[1];
  uint64_t v31 = (void *)(v30 + 8 * (v29 / 0x55));
  if (a1[2] == v30) {
    unint64_t v32 = 0;
  }
  else {
    unint64_t v32 = *v31 + 48 * (v29 % 0x55);
  }
  v34.n128_u64[0] = (unint64_t)v31;
  v34.n128_u64[1] = v32;
  sub_100ADA550(&v34, v11);
  return v34.n128_u64[0];
}

void *sub_100ADA1C8(void *a1, long long *a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a2;
  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)v8 <= *(double *)(a6 + 88))
    {
      v8 += 3;
      if ((long long *)((char *)v8 - *a1) == (long long *)4080)
      {
        unint64_t v11 = (long long *)a1[1];
        ++a1;
        uint64_t v8 = v11;
      }
      if (v8 == a4) {
        return a1;
      }
    }
  }
  if (v8 != a4)
  {
    __n128 v12 = v8;
    __n128 v13 = a1;
    while (1)
    {
      v12 += 3;
      if ((long long *)((char *)v12 - *v13) == (long long *)4080)
      {
        unint64_t v14 = (long long *)v13[1];
        ++v13;
        __n128 v12 = v14;
      }
      if (v12 == a4) {
        break;
      }
      if (*(double *)&a5 - *(double *)v12 <= *(double *)(a6 + 88))
      {
        long long v15 = *v12;
        *((void *)v8 + 2) = *((void *)v12 + 2);
        *uint64_t v8 = v15;
        sub_1000F4EBC((uint64_t)v8 + 24, (__n128 *)((char *)v12 + 24));
        v8 += 3;
        if ((long long *)((char *)v8 - *a1) == (long long *)4080)
        {
          uint64_t v16 = (long long *)a1[1];
          ++a1;
          uint64_t v8 = v16;
        }
      }
    }
  }
  return a1;
}

char *sub_100ADA2D8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *(void *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x924924924924924) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x492492492492492) {
      unint64_t v12 = 0x924924924924924;
    }
    else {
      unint64_t v12 = v11;
    }
    double result = sub_100ADA434(v7, v12);
    unint64_t v14 = (char *)v7[1];
    __n128 v13 = (void **)(v7 + 1);
    uint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  __n128 v13 = (void **)(result + 8);
  long long v15 = (unsigned char *)*((void *)result + 1);
  if (0x6DB6DB6DB6DB6DB7 * ((v15 - v9) >> 2) >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v15 - v9);
    uint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *__n128 v13 = &v9[v17];
  return result;
}

char *sub_100ADA434(void *a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925) {
    sub_1001D7FD4();
  }
  double result = (char *)sub_100ADA48C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[28 * v4];
  return result;
}

void *sub_100ADA48C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925) {
    sub_1001D7FA0();
  }
  return operator new(28 * a2);
}

uint64_t sub_100ADA4D8(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 85 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x55) {
    a2 = 1;
  }
  if (v5 < 0xAA) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void *sub_100ADA550(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)*result;
    unint64_t v3 = a2 - 0x5555555555555555 * ((uint64_t)(result[1] - *(void *)*result) >> 4);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 84 - v3;
      uint64_t v6 = &v2[-(v5 / 0x55)];
      *double result = v6;
      unint64_t v4 = *v6 + 48 * (85 * (v5 / 0x55) - v5) + 4032;
    }
    else
    {
      *double result = &v2[v3 / 0x55];
      unint64_t v4 = v2[v3 / 0x55] + 48 * (v3 % 0x55);
    }
    result[1] = v4;
  }
  return result;
}

__n128 sub_100ADA5EC@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, char *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    long long v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    __n128 v13 = a3 - 1;
    unint64_t v12 = *a3;
    unint64_t v14 = a4;
    long long v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_100ADA6BC(v12, v14, v15, v16, &v21);
      uint64_t v16 = v22.n128_i64[1];
      long long v15 = (char *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      size_t v17 = *v13--;
      unint64_t v12 = v17;
      unint64_t v14 = v17 + 4080;
    }
    uint64_t v18 = *a1 + 4080;
    uint64_t v19 = a2;
  }
  sub_100ADA6BC(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

char *sub_100ADA6BC@<X0>(char *a1@<X1>, char *a2@<X2>, char *a3@<X3>, uint64_t a4@<X4>, char **a5@<X8>)
{
  unint64_t v5 = a3;
  if (a1 == a2)
  {
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v8 = a2;
    uint64_t v9 = *(void *)a3;
    for (uint64_t i = a2; ; uint64_t i = v12)
    {
      int64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a4 - v9) >> 4);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((i - a1) >> 4)) < v11) {
        int64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((i - a1) >> 4);
      }
      unint64_t v12 = &i[-48 * v11];
      __n128 result = sub_100ADA790(v12, i, a4);
      if (v12 == a1) {
        break;
      }
      uint64_t v15 = *((void *)v5 - 1);
      v5 -= 8;
      uint64_t v9 = v15;
      a4 = v15 + 4080;
    }
    a4 = v14;
    if (*(void *)v5 + 4080 == v14)
    {
      uint64_t v16 = *((void *)v5 + 1);
      v5 += 8;
      a4 = v16;
    }
  }
  *a5 = v8;
  a5[1] = v5;
  a5[2] = (char *)a4;
  return result;
}

char *sub_100ADA790(char *a1, char *a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v5 = a3 - 24;
    uint64_t v6 = (__n128 *)(a2 - 24);
    do
    {
      int v7 = &v6[-2].n128_i8[8];
      long long v8 = *(long long *)((char *)&v6[-2] + 8);
      *(void *)(v5 - 8) = v6[-1].n128_u64[1];
      *(_OWORD *)(v5 - 24) = v8;
      sub_1000F4EBC(v5, v6);
      v5 -= 48;
      v6 -= 3;
    }
    while (v7 != a1);
  }
  return a2;
}

double sub_100ADA810(long long **a1, long long *a2, long long **a3, long long *a4, uint64_t a5)
{
  int v7 = *(uint64_t **)a5;
  uint64_t v8 = *(void *)(a5 + 8);
  if (a1 != a3)
  {
    unint64_t v10 = a1 + 1;
    for (uint64_t i = *a1 + 255; ; uint64_t i = v12 + 255)
    {
      sub_100ADA8A4(a2, i, v7, v8, &v14);
      uint64_t v8 = *((void *)&v15 + 1);
      int v7 = (uint64_t *)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      unint64_t v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_100ADA8A4(a2, a4, v7, v8, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

long long *sub_100ADA8A4@<X0>(long long *a1@<X1>, long long *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, long long **a5@<X8>)
{
  uint64_t v5 = a3;
  double result = a1;
  if (a1 == a2)
  {
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v8 = a2;
    uint64_t v5 = a3 + 1;
    uint64_t v9 = *a3;
    while (1)
    {
      int64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - a4 + 4080) >> 4);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (v8 - result)) < v10) {
        int64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 - result);
      }
      double result = sub_100ADA970(result, &result[3 * v10], a4);
      if (result == v8) {
        break;
      }
      uint64_t v12 = *v5++;
      uint64_t v9 = v12;
      a4 = v12;
    }
    a4 = v11;
    if (*(v5 - 1) + 4080 == v11) {
      a4 = *v5;
    }
    else {
      --v5;
    }
  }
  *a5 = v8;
  a5[1] = (long long *)v5;
  a5[2] = (long long *)a4;
  return result;
}

long long *sub_100ADA970(long long *a1, long long *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    long long v6 = *v4;
    *(void *)(a3 + 16) = *((void *)v4 + 2);
    *(_OWORD *)a3 = v6;
    sub_1000F4EBC(a3 + 24, (__n128 *)((char *)v4 + 24));
    a3 += 48;
    v4 += 3;
  }
  while (v4 != v5);
  return v5;
}

uint64_t sub_100ADA9E4(uint64_t result)
{
  if (*(double *)(result + 64) != -1.0)
  {
    uint64_t v1 = result;
    if (!*(unsigned char *)(result + 8))
    {
      double result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      if (result)
      {
        *(unsigned char *)(v1 + 8) = 1;
      }
      else if (!*(unsigned char *)(v1 + 8))
      {
        double v2 = 2.22507386e-308;
        goto LABEL_7;
      }
    }
    double v2 = *(double *)(v1 + 64) + 30.0;
LABEL_7:
    *(double *)(v1 + 72) = v2;
  }
  return result;
}

__n128 sub_100ADAA78@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    long long v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    __n128 v13 = a3 - 1;
    uint64_t v12 = *a3;
    uint64_t v14 = a4;
    long long v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_100ADAB48(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      long long v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      size_t v17 = *v13--;
      uint64_t v12 = v17;
      uint64_t v14 = v17 + 4096;
    }
    uint64_t v18 = *a1 + 4096;
    uint64_t v19 = a2;
  }
  sub_100ADAB48(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100ADAB48@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  long long v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = a2;
    while (1)
    {
      uint64_t v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 5 >= v12 >> 5) {
        uint64_t v13 = v12 >> 5;
      }
      else {
        uint64_t v13 = (v11 - a1) >> 5;
      }
      v11 -= 32 * v13;
      a4 -= 32 * v13;
      if (v13) {
        __n128 result = memmove(a4, v11, 32 * v13);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v15 = *--v6;
      uint64_t v10 = v15;
      a4 = (char *)(v15 + 4096);
    }
    if ((char *)(*v6 + 4096) == a4)
    {
      uint64_t v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

uint64_t sub_100ADAC04(uint64_t result)
{
  if (*(double *)(result + 64) != -1.0)
  {
    uint64_t v1 = result;
    if (!*(unsigned char *)(result + 8))
    {
      __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      if (result)
      {
        *(unsigned char *)(v1 + 8) = 1;
      }
      else if (!*(unsigned char *)(v1 + 8))
      {
        double v2 = 2.22507386e-308;
        goto LABEL_7;
      }
    }
    double v2 = *(double *)(v1 + 64) + 30.0;
LABEL_7:
    *(double *)(v1 + 72) = v2;
  }
  return result;
}

unint64_t sub_100ADAC98(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 73 * (a4 - a2) + 0x6DB6DB6DB6DB6DB7 * ((a5 - *a4) >> 3) - 0x6DB6DB6DB6DB6DB7 * ((a3 - *a2) >> 3);
  }
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  uint64_t v9 = (uint64_t *)(v8 + 8 * (v7 / 0x49));
  if (a1[2] == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *v9 + 56 * (v7 % 0x49);
  }
  if (a3 == v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = 73 * (a2 - v9) + 0x6DB6DB6DB6DB6DB7 * ((a3 - *a2) >> 3) - 0x6DB6DB6DB6DB6DB7 * ((v10 - *v9) >> 3);
  }
  v34.n128_u64[0] = v8 + 8 * (v7 / 0x49);
  v34.n128_u64[1] = v10;
  sub_10080DF84(&v34, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v34;
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_10080DF84(&v34, v6);
      sub_100ADB1F0(v9, v10, (uint64_t *)v12.n128_u64[0], v12.n128_i64[1], v34.n128_u64[0], v34.n128_i64[1], &v34);
      uint64_t v18 = v35;
      while (v10 != v18)
      {
        uint64_t v19 = *(void **)(v10 + 16);
        if (v19)
        {
          *(void *)(v10 + 24) = v19;
          operator delete(v19);
        }
        v10 += 56;
        if (v10 - *v9 == 4088)
        {
          uint64_t v20 = v9[1];
          ++v9;
          uint64_t v10 = v20;
        }
      }
      uint64_t v21 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v21;
      while ((sub_100ADB118((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_10080DF84(&v34, v6);
      __n128 v13 = v34;
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      uint64_t v16 = (uint64_t *)(v15 + 8 * (v14 / 0x49));
      if (a1[2] == v15) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = *v16 + 56 * (v14 % 0x49);
      }
      __n128 v34 = v12;
      sub_100ADB428((uint64_t *)v13.n128_u64[0], v13.n128_i64[1], v16, v17, (uint64_t)&v34);
      unint64_t v22 = v34.n128_u64[1];
      uint64_t v23 = a1[1];
      if (a1[2] == v23)
      {
        unint64_t v25 = 0;
      }
      else
      {
        unint64_t v24 = a1[5] + a1[4];
        unint64_t v25 = *(void *)(v23 + 8 * (v24 / 0x49)) + 56 * (v24 % 0x49);
      }
      if (v25 != v34.n128_u64[1])
      {
        uint64_t v26 = (void *)v34.n128_u64[0];
        do
        {
          uint64_t v27 = *(void **)(v22 + 16);
          if (v27)
          {
            *(void *)(v22 + 24) = v27;
            operator delete(v27);
          }
          v22 += 56;
          if (v22 - *v26 == 4088)
          {
            unint64_t v28 = v26[1];
            ++v26;
            unint64_t v22 = v28;
          }
        }
        while (v22 != v25);
      }
      a1[5] -= v6;
      while ((sub_100ADB178(a1, 1) & 1) != 0)
        ;
    }
  }
  unint64_t v29 = a1[4];
  uint64_t v30 = a1[1];
  uint64_t v31 = (void *)(v30 + 8 * (v29 / 0x49));
  if (a1[2] == v30) {
    unint64_t v32 = 0;
  }
  else {
    unint64_t v32 = *v31 + 56 * (v29 % 0x49);
  }
  v34.n128_u64[0] = (unint64_t)v31;
  v34.n128_u64[1] = v32;
  sub_10080DF84(&v34, v11);
  return v34.n128_u64[0];
}

void *sub_100ADB004(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a2;
  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)v8 <= *(double *)(a6 + 88))
    {
      v8 += 56;
      if (v8 - *a1 == 4088)
      {
        uint64_t v11 = a1[1];
        ++a1;
        uint64_t v8 = v11;
      }
      if (v8 == a4) {
        return a1;
      }
    }
  }
  if (v8 != a4)
  {
    uint64_t v12 = v8;
    __n128 v13 = a1;
    while (1)
    {
      v12 += 56;
      if (v12 - *v13 == 4088)
      {
        uint64_t v14 = v13[1];
        ++v13;
        uint64_t v12 = v14;
      }
      if (v12 == a4) {
        break;
      }
      if (*(double *)&a5 - *(double *)v12 <= *(double *)(a6 + 88))
      {
        *(void *)uint64_t v8 = *(void *)v12;
        *(void *)(v8 + 8) = *(void *)(v12 + 8);
        sub_1000F4EBC(v8 + 16, (__n128 *)(v12 + 16));
        *(_OWORD *)(v8 + 40) = *(_OWORD *)(v12 + 40);
        v8 += 56;
        if (v8 - *a1 == 4088)
        {
          uint64_t v15 = a1[1];
          ++a1;
          uint64_t v8 = v15;
        }
      }
    }
  }
  return a1;
}

uint64_t sub_100ADB118(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x49) {
    a2 = 1;
  }
  if (v2 < 0x92) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 73;
  }
  return v4 ^ 1u;
}

uint64_t sub_100ADB178(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 73 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x49) {
    a2 = 1;
  }
  if (v5 < 0x92) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 sub_100ADB1F0@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    __n128 v13 = a3 - 1;
    uint64_t v12 = *a3;
    uint64_t v14 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_100ADB2C0(v12, v14, v15, v16, &v21);
      uint64_t v16 = v22.n128_i64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      uint64_t v14 = v17 + 4088;
    }
    uint64_t v18 = *a1 + 4088;
    uint64_t v19 = a2;
  }
  sub_100ADB2C0(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = a4;
  a7[1] = result;
  return result;
}

uint64_t sub_100ADB2C0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  unint64_t v5 = a3;
  if (a1 == a2)
  {
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v8 = a2;
    uint64_t v9 = *a3;
    for (uint64_t i = a2; ; uint64_t i = v12)
    {
      uint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((a4 - v9) >> 3);
      if (0x6DB6DB6DB6DB6DB7 * ((i - a1) >> 3) < v11) {
        uint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((i - a1) >> 3);
      }
      uint64_t v12 = i - 56 * v11;
      uint64_t result = sub_100ADB39C(v12, i, a4);
      if (v12 == a1) {
        break;
      }
      uint64_t v15 = *--v5;
      uint64_t v9 = v15;
      a4 = v15 + 4088;
    }
    a4 = v14;
    if (*v5 + 4088 == v14)
    {
      uint64_t v16 = v5[1];
      ++v5;
      a4 = v16;
    }
  }
  *a5 = v8;
  a5[1] = (uint64_t)v5;
  a5[2] = a4;
  return result;
}

uint64_t sub_100ADB39C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      *(void *)(v7 - 56) = *(void *)(a2 + v6 - 56);
      *(void *)(v7 - 48) = *(void *)(a2 + v6 - 48);
      sub_1000F4EBC(a3 + v6 - 40, (__n128 *)(a2 + v6 - 40));
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a2 + v6 - 16);
      v6 -= 56;
    }
    while (a2 + v6 != a1);
  }
  return a2;
}

double sub_100ADB428(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(uint64_t **)a5;
  uint64_t v8 = *(void *)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = *a1 + 4088; ; uint64_t i = v12 + 4088)
    {
      sub_100ADB4BC(a2, i, v7, v8, &v14);
      uint64_t v8 = *((void *)&v15 + 1);
      uint64_t v7 = (uint64_t *)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      uint64_t v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_100ADB4BC(a2, a4, v7, v8, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

uint64_t sub_100ADB4BC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  unint64_t v5 = a3;
  uint64_t result = a1;
  if (a1 == a2)
  {
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v8 = a2;
    unint64_t v5 = a3 + 1;
    uint64_t v9 = *a3;
    while (1)
    {
      uint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v9 - a4 + 4088) >> 3);
      if (0x6DB6DB6DB6DB6DB7 * ((v8 - result) >> 3) < v10) {
        uint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v8 - result) >> 3);
      }
      uint64_t result = sub_100ADB590(result, result + 56 * v10, a4);
      if (result == v8) {
        break;
      }
      uint64_t v12 = *v5++;
      uint64_t v9 = v12;
      a4 = v12;
    }
    a4 = v11;
    if (*(v5 - 1) + 4088 == v11) {
      a4 = *v5;
    }
    else {
      --v5;
    }
  }
  *a5 = v8;
  a5[1] = (uint64_t)v5;
  a5[2] = a4;
  return result;
}

uint64_t sub_100ADB590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    *(void *)a3 = *(void *)v4;
    *(void *)(a3 + 8) = *(void *)(v4 + 8);
    sub_1000F4EBC(a3 + 16, (__n128 *)(v4 + 16));
    *(_OWORD *)(a3 + 40) = *(_OWORD *)(v4 + 40);
    a3 += 56;
    v4 += 56;
  }
  while (v4 != v5);
  return v5;
}

void *sub_100ADB60C(void *a1, uint64_t a2)
{
  sub_1006B18D4((uint64_t)v4, a2);
  sub_100ADB680(v4, a1);
  sub_1006A7C78(v4);
  return a1;
}

void *sub_100ADB680(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100ADB8E0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

__n128 sub_100ADB8EC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1022DCCD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100ADB940(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022DCCD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100ADB978(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100ADB9B8()
{
}

void *sub_100ADB9C4(void *a1, uint64_t a2)
{
  sub_1006B1BB4((uint64_t)v4, a2);
  sub_100ADBA38(v4, a1);
  sub_1006B1C4C(v4);
  return a1;
}

void *sub_100ADBA38(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100ADBC98(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

__n128 sub_100ADBCA4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1022DCD98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100ADBCF8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022DCD98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100ADBD30(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100ADBD70()
{
}

void *sub_100ADBD7C(void *a1, uint64_t a2)
{
  sub_1006AF590((uint64_t)v4, a2);
  sub_100ADBDF0(v4, a1);
  sub_1006A9C3C(v4);
  return a1;
}

void *sub_100ADBDF0(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100ADC050(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

__n128 sub_100ADC05C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1022DCE58;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100ADC0B0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022DCE58;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100ADC0E8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100ADC128()
{
}

void *sub_100ADC134(void *a1, uint64_t a2)
{
  sub_1006B1F14((uint64_t)v4, a2);
  sub_100ADC1A8(v4, a1);
  sub_1006B1FAC(v4);
  return a1;
}

void *sub_100ADC1A8(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100ADC408(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

__n128 sub_100ADC414(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1022DCF18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100ADC468(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022DCF18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100ADC4A0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100ADC4E0()
{
}

void *sub_100ADC4EC(void *a1, uint64_t a2)
{
  sub_1005E71B0((uint64_t)v4, a2);
  sub_100ADC560(v4, a1);
  sub_1005E73C4(v4);
  return a1;
}

void *sub_100ADC560(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100ADC7C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

__n128 sub_100ADC7CC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1022DCFD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100ADC820(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022DCFD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100ADC858(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t sub_100ADC880(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100ADC8C0()
{
}

void *sub_100ADC8CC(void *a1, uint64_t a2)
{
  sub_1006AFAA4((uint64_t)v4, a2);
  sub_100ADC940(v4, a1);
  sub_1006A91BC(v4);
  return a1;
}

void *sub_100ADC940(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100ADCBA0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

__n128 sub_100ADCBAC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1022DD088;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100ADCC00(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022DD088;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100ADCC38(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t sub_100ADCC60(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100ADCCA0()
{
}

void *sub_100ADCCAC(void *a1, uint64_t a2)
{
  sub_1006B2320((uint64_t)v4, a2);
  sub_100ADCD20(v4, a1);
  sub_1006B24F4(v4);
  return a1;
}

void *sub_100ADCD20(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100ADCF80(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

__n128 sub_100ADCF8C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1022DD148;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100ADCFE0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022DD148;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100ADD018(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t sub_100ADD040(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100ADD080()
{
}

void *sub_100ADD08C(void *a1, uint64_t a2)
{
  sub_1006B2BBC((uint64_t)v4, a2);
  sub_100ADD100(v4, a1);
  sub_1006B2DAC(v4);
  return a1;
}

void *sub_100ADD100(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100ADD360(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

__n128 sub_100ADD36C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1022DD208;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100ADD3C0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022DD208;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100ADD3F8(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t sub_100ADD420(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100ADD460()
{
}

void *sub_100ADD46C(void *a1, uint64_t a2)
{
  sub_1006B27C0((uint64_t)v4, a2);
  sub_100ADD4E0(v4, a1);
  sub_1006B2858(v4);
  return a1;
}

void *sub_100ADD4E0(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100ADD740(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

__n128 sub_100ADD74C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1022DD2C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100ADD7A0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022DD2C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100ADD7D8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100ADD818()
{
}

void *sub_100ADD824(void *a1, uint64_t a2)
{
  sub_1006B3178((uint64_t)v4, a2);
  sub_100ADD898(v4, a1);
  sub_1006B3370(v4);
  return a1;
}

void *sub_100ADD898(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100ADDAF8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

__n128 sub_100ADDB04(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1022DD388;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100ADDB58(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022DD388;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100ADDB90(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t sub_100ADDBB8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100ADDBF8()
{
}

id sub_100ADDC04(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *a2;
  long long v5 = *(_OWORD *)(a3 + 16);
  v7[0] = *(_OWORD *)a3;
  v7[1] = v5;
  int v8 = *(_DWORD *)(a3 + 32);
  return [a4 onMotionStateObserverNotification:v4 data:v7];
}

id sub_100ADDC70(uint64_t a1, unsigned int *a2, long long *a3, void *a4)
{
  uint64_t v4 = *a2;
  long long v6 = *a3;
  uint64_t v7 = *((void *)a3 + 2);
  return [a4 onDaemonStatusNotification:v4 data:&v6];
}

uint64_t sub_100ADDCB0(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *a2;
  sub_1004CE794(v8);
  uint64_t v9 = *(void *)(a3 + 16);
  [a4 onMobileAssetNotification:v6 data:v8];
  return sub_10013F3C4(v8);
}

void sub_100ADDD14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_100ADDDD8(id a1)
{
  qword_102480070 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLBarometerCalibrationSilo"];
}

void sub_100ADDE98(id a1)
{
  byte_102480080 = +[CLBarometerCalibration isNotificationSupported:0];
  if (byte_102480080) {
    unsigned __int8 v1 = 1;
  }
  else {
    unsigned __int8 v1 = +[CLBarometerCalibration isNotificationSupported:1];
  }
  byte_102480080 = v1;
}

void sub_100ADF9EC(_Unwind_Exception *a1)
{
  for (uint64_t i = 432; i != -48; i -= 48)
    sub_1000DAF68((void *)(v1 + i));
  _Unwind_Resume(a1);
}

id sub_100ADFA18(uint64_t a1)
{
  uint64_t v2 = 0;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  v6[2] = sub_100AE4810;
  void v6[3] = &unk_1022DD530;
  do
  {
    sub_100096374((uint64_t)&v6[v2 + 4], (void *)(a1 + v2 * 8));
    v2 += 6;
  }
  while (v2 != 60);
  id v3 = [v6 copy];
  for (uint64_t i = 58; i != -2; i -= 6)
    sub_1000DAF68(&v6[i]);
  return v3;
}

void sub_100ADFAE0(_Unwind_Exception *a1)
{
  for (uint64_t i = 464; i != -16; i -= 48)
    sub_1000DAF68((void *)(v1 + i));
  _Unwind_Resume(a1);
}

void sub_100AE06CC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AE0CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100AE1364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100AE17E0(uint64_t a1)
{
  if (qword_1024191E0 != -1) {
    dispatch_once(&qword_1024191E0, &stru_1022DD4F0);
  }
  uint64_t v2 = qword_1024191E8;
  if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "destructing Altimeter context", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_1022DD4F0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLBarometerCalibration setupAltimeterReleaseTimer]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [*(id *)(a1 + 32) releaseAndClearManager:*(void *)(a1 + 32) + 528];
}

void sub_100AE1E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

id sub_100AE1ED4(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary];
  v21[0] = @"deviceWet";
  v22[0] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 672)];
  v21[1] = @"inVisit";
  v22[1] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 728)];
  void v21[2] = @"isCompanionConnected";
  v22[2] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 704)];
  v21[3] = @"uncertainty_binned";
  double v3 = *(double *)(a1 + 40);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  sub_10010F834(&v16, (const void *)qword_102480028, qword_102480030, (qword_102480030 - qword_102480028) >> 2);
  float v4 = v3;
  sub_1003B1E08((uint64_t)&v16, v19, v4);
  if (v20 >= 0) {
    long long v5 = v19;
  }
  else {
    long long v5 = (void **)v19[0];
  }
  v22[3] = +[NSString stringWithUTF8String:v5];
  v21[4] = @"timeElapsedSinceLastClientRegistered_binned";
  double v6 = *(double *)(a1 + 48);
  double v7 = *(double *)(*(void *)(a1 + 32) + 736);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  sub_10010F834(&v11, (const void *)qword_102480040, qword_102480048, (qword_102480048 - qword_102480040) >> 2);
  float v8 = v6 - v7;
  sub_1003B1E08((uint64_t)&v11, __p, v8 / 60.0);
  if (v15 >= 0) {
    uint64_t v9 = __p;
  }
  else {
    uint64_t v9 = (void **)__p[0];
  }
  v22[4] = +[NSString stringWithUTF8String:v9];
  [v2 setDictionary:[NSDictionary dictionaryWithObjects:forKeys:count:v22, v21, 5]];
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }
  if ([*(id *)(a1 + 32) isIHAAuthorized]) {
    [v2 setObject:[NSNumber numberWithBool:objc_msgSend(*(id *)(a1 + 32), "isInOutdoorWorkout")] forKeyedSubscript:@"inOutdoorWorkout"];
  }
  return v2;
}

void sub_100AE2168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AE2330(uint64_t a1)
{
  id v2 = objc_alloc((Class)RTStoredVisitFetchOptions);
  id v3 = [[v2 initWithAscending:1 confidence:[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", RTVisitConfidenceHigh) dateInterval:0 limit:0];
  uint64_t v4 = *(void *)(a1 + 32);
  long long v5 = *(void **)(v4 + 720);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100AE2404;
  void v6[3] = &unk_10229FF00;
  v6[4] = v4;
  [v5 fetchStoredVisitsWithOptions:v3 withReply:v6];
}

id sub_100AE2404(uint64_t a1, void *a2, uint64_t a3)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (a3)
  {
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_1022DD4F0);
    }
    double v7 = qword_1024191E8;
    if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "error fetching visits", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_1022DD4F0);
      }
      LOWORD(v58) = 0;
      long long v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLBarometerCalibration fetchVisitStatusAtStart]_block_invoke", "%s\n", v36);
      if (v36 != (char *)&buf) {
        free(v36);
      }
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 728) = 0;
    double v8 = 0.0;
  }
  else
  {
    id v9 = [a2 lastObject];
    BOOL v10 = [v9 type] == (id)1 || [v9 type] == (id)2;
    *(unsigned char *)(*(void *)(a1 + 32) + 728) = v10;
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_1022DD4F0);
    }
    uint64_t v11 = qword_1024191E8;
    if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 728);
      [objc_msgSend(v9, "location") latitude];
      uint64_t v14 = v13;
      [objc_msgSend(v9, "location") longitude];
      uint64_t v16 = v15;
      [objc_msgSend(v9, "entry") timeIntervalSinceReferenceDate];
      uint64_t v18 = v17;
      [objc_msgSend(v9, "exit") timeIntervalSinceReferenceDate];
      LODWORD(buf) = 67110144;
      HIDWORD(buf) = v12;
      __int16 v47 = 2048;
      uint64_t v48 = v14;
      __int16 v49 = 2048;
      uint64_t v50 = v16;
      __int16 v51 = 2048;
      uint64_t v52 = v18;
      __int16 v53 = 2048;
      uint64_t v54 = v19;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "retrieved visits,inVisit,%d,lat,%f,lon,%f,arrivalTime,%f,departureTime,%f", (uint8_t *)&buf, 0x30u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_1022DD4F0);
      }
      int v37 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 728);
      [objc_msgSend(v9, "location") latitude];
      uint64_t v39 = v38;
      [objc_msgSend(v9, "location") longitude];
      uint64_t v41 = v40;
      [objc_msgSend(v9, "entry") timeIntervalSinceReferenceDate];
      uint64_t v43 = v42;
      [objc_msgSend(objc_msgSend(v9, "exit"), "timeIntervalSinceReferenceDate")];
      int v58 = 67110144;
      int v59 = v37;
      __int16 v60 = 2048;
      uint64_t v61 = v39;
      __int16 v62 = 2048;
      uint64_t v63 = v41;
      __int16 v64 = 2048;
      uint64_t v65 = v43;
      __int16 v66 = 2048;
      uint64_t v67 = v44;
      double v45 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLBarometerCalibration fetchVisitStatusAtStart]_block_invoke", "%s\n", v45);
      if (v45 != (char *)&buf) {
        free(v45);
      }
    }
    [objc_msgSend(v9, "entry") timeIntervalSinceReferenceDate];
    double v8 = v20;
    [objc_msgSend(v9, "exit") timeIntervalSinceReferenceDate];
    double v22 = v21;
    if (*(unsigned char *)(*(void *)(a1 + 32) + 729))
    {
      sub_10170140C(&buf);
      sub_101727E18((uint64_t)&buf);
      v57 |= 1u;
      double v55 = Current;
      uint64_t v23 = v56;
      [objc_msgSend(v9, "location") longitude];
      *(_WORD *)(v23 + 92) |= 0x40u;
      *(void *)(v23 + 56) = v24;
      uint64_t v25 = v56;
      [objc_msgSend(v9, "location") latitude];
      *(_WORD *)(v25 + 92) |= 0x20u;
      *(void *)(v25 + 48) = v26;
      uint64_t v27 = v56;
      [objc_msgSend(objc_msgSend(v9, "exit"), "timeIntervalSinceReferenceDate")];
      *(_WORD *)(v27 + 92) |= 4u;
      *(void *)(v27 + 24) = v28;
      uint64_t v29 = v56;
      [objc_msgSend(v9, "entry") timeIntervalSinceReferenceDate];
      *(_WORD *)(v29 + 92) |= 1u;
      *(void *)(v29 + 8) = v30;
      uint64_t v31 = v56;
      *(_WORD *)(v56 + 92) |= 0x10u;
      *(void *)(v31 + 40) = 0xBFF0000000000000;
      uint64_t v32 = v56;
      *(_WORD *)(v56 + 92) |= 0x200u;
      *(_DWORD *)(v32 + 80) = 2;
      uint64_t v33 = v56;
      unsigned int v34 = [v9 type];
      *(_WORD *)(v33 + 92) |= 0x400u;
      *(_DWORD *)(v33 + 84) = v34;
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022DD510);
      }
      if (qword_10248AF90) {
        sub_1019E5150(qword_10248AF90, (uint64_t)&buf);
      }
      sub_101706914((PB::Base *)&buf);
    }
    double Current = v22;
  }
  [*(id *)(*(void *)(a1 + 32) + 624) updateVisitState:*(unsigned __int8 *)(*(void *)(a1 + 32) + 728) arrivalTime:v8 departureTime:Current];
  return [*(id *)(a1 + 32) sendInVisit:*(unsigned __int8 *)(*(void *)(a1 + 32) + 728)];
}

void sub_100AE29D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

id sub_100AE2C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [[objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100AE2CE0;
  v10[3] = &unk_1022DD4D0;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  v10[4] = a3;
  v10[5] = v7;
  v10[8] = *(void *)(a1 + 48);
  v10[6] = a2;
  v10[7] = v8;
  return [v6 async:v10];
}

void sub_100AE2CE0(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_1022DD4F0);
    }
    id v2 = qword_1024191E8;
    if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
    {
      double v3 = COERCE_DOUBLE([*(id *)(a1 + 40) UUIDString]);
      *(_DWORD *)uint64_t buf = 138412290;
      double v127 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received error when fetching LOI from visit, LOI id %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_1022DD4F0);
      }
      double v4 = COERCE_DOUBLE([*(id *)(a1 + 40) UUIDString]);
      int v114 = 138412290;
      double v115 = v4;
      long long v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLBarometerCalibration fetchLoiFromId:atTimestamp:]_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    double Current = CFAbsoluteTimeGetCurrent();
    __p = 0;
    v112 = 0;
    v113 = 0;
    [objc_msgSend(*(id *)(a1 + 48), "location") verticalUncertainty];
    if (v7 > 0.0)
    {
      [objc_msgSend(*(id *)(a1 + 48), "location") altitude];
      uint64_t v9 = v8;
      [objc_msgSend(*(id *)(a1 + 48), "location") verticalUncertainty];
      double v11 = v10;
      [objc_msgSend(*(id *)(a1 + 48), "location") verticalUncertainty];
      double v13 = v11 * v12;
      uint64_t v14 = (v112 - (unsigned char *)__p) >> 4;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60) {
        sub_1001D7FD4();
      }
      uint64_t v16 = v113 - (unsigned char *)__p;
      if ((v113 - (unsigned char *)__p) >> 3 > v15) {
        unint64_t v15 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17) {
        uint64_t v18 = (char *)sub_1000C571C((uint64_t)&v113, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v19 = (double *)&v18[16 * v14];
      *(void *)uint64_t v19 = v9;
      v19[1] = v13;
      __p = v19;
      v113 = &v18[16 * v17];
      v112 = v19 + 2;
    }
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_1022DD4F0);
    }
    double v20 = qword_1024191E8;
    if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
    {
      double v21 = COERCE_DOUBLE([*(id *)(a1 + 40) UUIDString]);
      [objc_msgSend(*(id *)(a1 + 48), "location") altitude];
      double v23 = v22;
      [objc_msgSend(*(id *)(a1 + 48), "location") verticalUncertainty];
      uint64_t v24 = *(void *)(a1 + 64);
      *(_DWORD *)uint64_t buf = 138413314;
      double v127 = v21;
      __int16 v128 = 2048;
      double v129 = v23;
      __int16 v130 = 2048;
      uint64_t v131 = v25;
      __int16 v132 = 2048;
      uint64_t v133 = v24;
      __int16 v134 = 2048;
      double v135 = Current;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "LOI id,%@,elevation,%f,uncertainty,%f,visitEntryTime,%f,currentTimestamp,%f", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_1022DD4F0);
      }
      double v89 = COERCE_DOUBLE([*(id *)(a1 + 40) UUIDString]);
      [objc_msgSend(*(id *)(a1 + 48), "location") altitude];
      double v91 = v90;
      [objc_msgSend(*(id *)(a1 + 48), "location") verticalUncertainty];
      uint64_t v92 = *(void *)(a1 + 64);
      int v114 = 138413314;
      double v115 = v89;
      __int16 v116 = 2048;
      double v117 = v91;
      __int16 v118 = 2048;
      uint64_t v119 = v93;
      __int16 v120 = 2048;
      uint64_t v121 = v92;
      __int16 v122 = 2048;
      double v123 = Current;
      int64_t v94 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLBarometerCalibration fetchLoiFromId:atTimestamp:]_block_invoke", "%s\n", v94);
      if (v94 != (char *)buf) {
        free(v94);
      }
    }
    [*(id *)(*(void *)(a1 + 56) + 624) updateLoiInfo:&__p];
    uint64_t v26 = *(void *)(a1 + 56);
    if (*(unsigned char *)(v26 + 730))
    {
      v108 = 0;
      uint64_t v109 = 0;
      unint64_t v110 = 0;
      v105 = 0;
      v106 = 0;
      unint64_t v107 = 0;
      if (v112 == __p)
      {
        uint64_t v61 = sub_1000DA54C((uint64_t)&v110, 1uLL);
        *uint64_t v61 = 0;
        v108 = v61;
        unint64_t v110 = (unint64_t)&v61[v62];
        uint64_t v109 = v61 + 1;
        uint64_t v63 = v106;
        if ((unint64_t)v106 >= v107)
        {
          uint64_t v65 = v105;
          uint64_t v66 = ((char *)v106 - (unsigned char *)v105) >> 3;
          unint64_t v67 = v66 + 1;
          if ((unint64_t)(v66 + 1) >> 61) {
            sub_1001D7FD4();
          }
          uint64_t v68 = v107 - (void)v105;
          if ((uint64_t)(v107 - (void)v105) >> 2 > v67) {
            unint64_t v67 = v68 >> 2;
          }
          if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v69 = v67;
          }
          if (v69)
          {
            v70 = (char *)sub_1000DA54C((uint64_t)&v107, v69);
            uint64_t v65 = v105;
            uint64_t v63 = v106;
          }
          else
          {
            v70 = 0;
          }
          v71 = &v70[8 * v66];
          long long v72 = &v70[8 * v69];
          *(void *)v71 = 0xBFF0000000000000;
          __int16 v64 = v71 + 8;
          while (v63 != v65)
          {
            uint64_t v73 = *--v63;
            *((void *)v71 - 1) = v73;
            v71 -= 8;
          }
          v105 = v71;
          v106 = v64;
          unint64_t v107 = (unint64_t)v72;
          if (v65) {
            operator delete(v65);
          }
        }
        else
        {
          void *v106 = 0xBFF0000000000000;
          __int16 v64 = v63 + 1;
        }
        v106 = v64;
        if (qword_1024191E0 != -1) {
          dispatch_once(&qword_1024191E0, &stru_1022DD4F0);
        }
        long long v74 = qword_1024191E8;
        if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "received zero loi visit so write negative uncertainty to msl.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191E0 != -1) {
            dispatch_once(&qword_1024191E0, &stru_1022DD4F0);
          }
          LOWORD(v114) = 0;
          v95 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "-[CLBarometerCalibration fetchLoiFromId:atTimestamp:]_block_invoke", "%s\n", v95);
          if (v95 != (char *)buf) {
            free(v95);
          }
        }
      }
      else
      {
        uint64_t v27 = 0;
        if ((unint64_t)((v112 - (unsigned char *)__p) >> 4) <= 1) {
          uint64_t v28 = 1;
        }
        else {
          uint64_t v28 = (v112 - (unsigned char *)__p) >> 4;
        }
        do
        {
          uint64_t v29 = (char *)__p + 16 * v27;
          uint64_t v30 = v109;
          if ((unint64_t)v109 >= v110)
          {
            uint64_t v32 = v108;
            uint64_t v33 = ((char *)v109 - (unsigned char *)v108) >> 3;
            unint64_t v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 61) {
              sub_1001D7FD4();
            }
            uint64_t v35 = v110 - (void)v108;
            if ((uint64_t)(v110 - (void)v108) >> 2 > v34) {
              unint64_t v34 = v35 >> 2;
            }
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v36 = v34;
            }
            if (v36)
            {
              int v37 = (char *)sub_1000DA54C((uint64_t)&v110, v36);
              uint64_t v32 = v108;
              uint64_t v30 = v109;
            }
            else
            {
              int v37 = 0;
            }
            uint64_t v38 = &v37[8 * v33];
            *(void *)uint64_t v38 = *v29;
            uint64_t v31 = v38 + 8;
            while (v30 != v32)
            {
              uint64_t v39 = *--v30;
              *((void *)v38 - 1) = v39;
              v38 -= 8;
            }
            v108 = v38;
            uint64_t v109 = v31;
            unint64_t v110 = (unint64_t)&v37[8 * v36];
            if (v32) {
              operator delete(v32);
            }
          }
          else
          {
            *uint64_t v109 = *v29;
            uint64_t v31 = v30 + 1;
          }
          uint64_t v109 = v31;
          double v40 = sqrt(*((double *)__p + 2 * v27 + 1));
          uint64_t v41 = v106;
          if ((unint64_t)v106 >= v107)
          {
            uint64_t v43 = v105;
            uint64_t v44 = ((char *)v106 - (unsigned char *)v105) >> 3;
            unint64_t v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 61) {
              sub_1001D7FD4();
            }
            uint64_t v46 = v107 - (void)v105;
            if ((uint64_t)(v107 - (void)v105) >> 2 > v45) {
              unint64_t v45 = v46 >> 2;
            }
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v47 = v45;
            }
            if (v47)
            {
              uint64_t v48 = (char *)sub_1000DA54C((uint64_t)&v107, v47);
              uint64_t v43 = v105;
              uint64_t v41 = v106;
            }
            else
            {
              uint64_t v48 = 0;
            }
            __int16 v49 = (double *)&v48[8 * v44];
            *__int16 v49 = v40;
            uint64_t v42 = v49 + 1;
            while (v41 != v43)
            {
              uint64_t v50 = *--v41;
              *((void *)v49-- - 1) = v50;
            }
            v105 = v49;
            v106 = v42;
            unint64_t v107 = (unint64_t)&v48[8 * v47];
            if (v43) {
              operator delete(v43);
            }
          }
          else
          {
            *(double *)v106 = v40;
            uint64_t v42 = v41 + 1;
          }
          v106 = v42;
          if (qword_1024191E0 != -1) {
            dispatch_once(&qword_1024191E0, &stru_1022DD4F0);
          }
          __int16 v51 = qword_1024191E8;
          if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v52 = (double *)((char *)__p + 16 * v27);
            double v53 = *v52;
            double v54 = v52[1];
            uint64_t v55 = *(void *)(a1 + 64);
            *(_DWORD *)uint64_t buf = 134218496;
            double v127 = v53;
            __int16 v128 = 2048;
            double v129 = sqrt(v54);
            __int16 v130 = 2048;
            uint64_t v131 = v55;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "writing loi visit to msl,altitude,%f,verticalUncertainty,%f,timestamp,%f", buf, 0x20u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024191E0 != -1) {
              dispatch_once(&qword_1024191E0, &stru_1022DD4F0);
            }
            uint64_t v56 = (double *)((char *)__p + 16 * v27);
            double v57 = *v56;
            double v58 = v56[1];
            uint64_t v59 = *(void *)(a1 + 64);
            int v114 = 134218496;
            double v115 = v57;
            __int16 v116 = 2048;
            double v117 = sqrt(v58);
            __int16 v118 = 2048;
            uint64_t v119 = v59;
            __int16 v60 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "-[CLBarometerCalibration fetchLoiFromId:atTimestamp:]_block_invoke", "%s\n", v60);
            if (v60 != (char *)buf) {
              free(v60);
            }
          }
          ++v27;
        }
        while (v27 != v28);
      }
      sub_10170140C(buf);
      sub_101726678((uint64_t)buf);
      CFAbsoluteTime v75 = CFAbsoluteTimeGetCurrent();
      v140 |= 1u;
      CFAbsoluteTime v138 = v75;
      uint64_t v76 = v139;
      if ((void **)(v139 + 8) != &v108)
      {
        sub_1002DD194((char *)(v139 + 8), (char *)v108, (uint64_t)v109, ((char *)v109 - (unsigned char *)v108) >> 3);
        uint64_t v76 = v139;
      }
      if ((void **)(v76 + 32) != &v105) {
        sub_1002DD194((char *)(v76 + 32), (char *)v105, (uint64_t)v106, ((char *)v106 - (unsigned char *)v105) >> 3);
      }
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022DD510);
      }
      if (qword_10248AF90) {
        sub_1019E5150(qword_10248AF90, (uint64_t)buf);
      }
      sub_101706914((PB::Base *)buf);
      if (v105)
      {
        v106 = v105;
        operator delete(v105);
      }
      if (v108)
      {
        uint64_t v109 = v108;
        operator delete(v108);
      }
      uint64_t v26 = *(void *)(a1 + 56);
    }
    [*(id *)(v26 + 640) timestamp];
    if (v77 != 1.79769313e308)
    {
      [*(id *)(*(void *)(a1 + 56) + 640) timestamp];
      if (vabdd_f64(v78, Current) < 10.0)
      {
        [objc_msgSend(*(id *)(a1 + 48), "location") verticalUncertainty];
        if (v79 > 0.0)
        {
          [*(id *)(*(void *)(a1 + 56) + 640) altitude];
          [objc_msgSend(*(id *)(a1 + 48), "location") altitude];
          AnalyticsSendEventLazy();
          if (qword_1024191E0 != -1) {
            dispatch_once(&qword_1024191E0, &stru_1022DD4F0);
          }
          v80 = qword_1024191E8;
          if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
          {
            double v81 = *(double *)(a1 + 64);
            [objc_msgSend(*(id *)(a1 + 48), "location") altitude];
            uint64_t v83 = v82;
            [objc_msgSend(*(id *)(a1 + 48), "location") verticalUncertainty];
            uint64_t v85 = v84;
            [*(id *)(*(void *)(a1 + 56) + 640) altitude];
            double v87 = v86;
            [*(id *)(*(void *)(a1 + 56) + 640) accuracy];
            *(_DWORD *)uint64_t buf = 134219264;
            double v127 = v81;
            __int16 v128 = 2048;
            double v129 = Current;
            __int16 v130 = 2048;
            uint64_t v131 = v83;
            __int16 v132 = 2048;
            uint64_t v133 = v85;
            __int16 v134 = 2048;
            double v135 = v87;
            __int16 v136 = 2048;
            uint64_t v137 = v88;
            _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "LOI visit entry,timestamp,%f,currentTimestamp,%f,loiAltitude,%f,loiVerticalUncertainty,%f,altimeter,%f,altimeterUncertainty,%f", buf, 0x3Eu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024191E0 != -1) {
              dispatch_once(&qword_1024191E0, &stru_1022DD4F0);
            }
            double v96 = *(double *)(a1 + 64);
            [objc_msgSend(*(id *)(a1 + 48), "location").altitude];
            uint64_t v98 = v97;
            [objc_msgSend(*(id *)(a1 + 48), "location") verticalUncertainty];
            uint64_t v100 = v99;
            [*(id *)(*(void *)(a1 + 56) + 640) altitude];
            double v102 = v101;
            [*(id *)(*(void *)(a1 + 56) + 640) accuracy];
            int v114 = 134219264;
            double v115 = v96;
            __int16 v116 = 2048;
            double v117 = Current;
            __int16 v118 = 2048;
            uint64_t v119 = v98;
            __int16 v120 = 2048;
            uint64_t v121 = v100;
            __int16 v122 = 2048;
            double v123 = v102;
            __int16 v124 = 2048;
            uint64_t v125 = v103;
            v104 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "-[CLBarometerCalibration fetchLoiFromId:atTimestamp:]_block_invoke", "%s\n", v104);
            if (v104 != (char *)buf) {
              free(v104);
            }
          }
        }
      }
    }
    if (__p)
    {
      v112 = __p;
      operator delete(__p);
    }
  }
}

void sub_100AE3BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_100AE3C50(uint64_t a1)
{
  v30[0] = @"loiAltitudeError_binned";
  double v2 = *(double *)(a1 + 48);
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  sub_10010F834(&v25, (const void *)qword_102480058, qword_102480060, (qword_102480060 - qword_102480058) >> 2);
  float v3 = v2;
  sub_1003B1E08((uint64_t)&v25, v28, v3);
  if (v29 >= 0) {
    double v4 = v28;
  }
  else {
    double v4 = (void **)v28[0];
  }
  v31[0] = +[NSString stringWithUTF8String:v4];
  v30[1] = @"loiAltitudeUncertainty_binned";
  [objc_msgSend(*(id *)(a1 + 32), "location") verticalUncertainty];
  double v6 = v5;
  double v20 = 0;
  double v21 = 0;
  uint64_t v22 = 0;
  sub_10010F834(&v20, (const void *)qword_102480028, qword_102480030, (qword_102480030 - qword_102480028) >> 2);
  float v7 = v6;
  sub_1003B1E08((uint64_t)&v20, v23, v7);
  if (v24 >= 0) {
    uint64_t v8 = v23;
  }
  else {
    uint64_t v8 = (void **)v23[0];
  }
  v31[1] = +[NSString stringWithUTF8String:v8];
  v30[2] = @"altitudeUncertainty_binned";
  [*(id *)(*(void *)(a1 + 40) + 640) accuracy];
  double v10 = v9;
  unint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  sub_10010F834(&v15, (const void *)qword_102480028, qword_102480030, (qword_102480030 - qword_102480028) >> 2);
  float v11 = v10;
  sub_1003B1E08((uint64_t)&v15, __p, v11);
  if (v19 >= 0) {
    double v12 = __p;
  }
  else {
    double v12 = (void **)__p[0];
  }
  v31[2] = +[NSString stringWithUTF8String:v12];
  double v13 = +[NSDictionary dictionaryWithObjects:v31 forKeys:v30 count:3];
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (v20)
  {
    double v21 = v20;
    operator delete(v20);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
  return v13;
}

void sub_100AE3E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a28) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AE41DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

void sub_100AE4468(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_101706914((PB::Base *)va);
  sub_10048B8C4((uint64_t)&STACK[0xE48]);
  _Unwind_Resume(a1);
}

__n128 sub_100AE44AC(uint64_t a1, __n128 *a2)
{
  sub_100AE479C(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(char *)(v4 + 23) < 0) {
    operator delete(*(void **)v4);
  }
  __n128 result = *a2;
  *(void *)(v4 + 16) = a2[1].n128_u64[0];
  *(__n128 *)uint64_t v4 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

void sub_100AE4768(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

uint64_t sub_100AE479C(uint64_t result)
{
  if (!*(void *)(result + 8)) {
    operator new();
  }
  return result;
}

uint64_t sub_100AE4810@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = 0;
  uint64_t v4 = a1 + 32;
  do
  {
    uint64_t result = sub_100096374(a2 + v3, (void *)(v4 + v3));
    v3 += 48;
  }
  while (v3 != 480);
  return result;
}

void sub_100AE4858(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 48;
    do
    {
      sub_1000DAF68((void *)(v4 + v2));
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AE487C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = a2 + 32;
  uint64_t v4 = a1 + 32;
  do
  {
    uint64_t result = sub_100096374(v4 + v2, (void *)(v3 + v2));
    v2 += 48;
  }
  while (v2 != 480);
  return result;
}

void sub_100AE48C8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 16;
    do
    {
      sub_1000DAF68((void *)(v4 + v2));
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AE48EC(uint64_t a1)
{
  for (uint64_t i = 464; i != -16; i -= 48)
    uint64_t result = sub_1000DAF68((void *)(a1 + i));
  return result;
}

uint64_t sub_100AE4924()
{
  sub_100134750(qword_102480010, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480010, (void *)&_mh_execute_header);
  qword_102480030 = 0;
  unk_102480038 = 0;
  qword_102480028 = 0;
  uint64_t v0 = operator new(0x30uLL);
  qword_102480030 = (uint64_t)(v0 + 3);
  unk_102480038 = v0 + 3;
  _OWORD *v0 = xmmword_101D73150;
  v0[1] = unk_101D73160;
  v0[2] = xmmword_101D73170;
  qword_102480028 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_102480028, (void *)&_mh_execute_header);
  qword_102480048 = 0;
  unk_102480050 = 0;
  qword_102480040 = 0;
  uint64_t v1 = operator new(0x20uLL);
  qword_102480048 = (uint64_t)(v1 + 2);
  unk_102480050 = v1 + 2;
  _OWORD *v1 = xmmword_101D73180;
  v1[1] = unk_101D73190;
  qword_102480040 = (uint64_t)v1;
  __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_102480040, (void *)&_mh_execute_header);
  qword_102480060 = 0;
  unk_102480068 = 0;
  qword_102480058 = 0;
  uint64_t v2 = operator new(0x5CuLL);
  qword_102480060 = (uint64_t)v2 + 92;
  unk_102480068 = (char *)v2 + 92;
  v2[2] = xmmword_101D731C0;
  v2[3] = unk_101D731D0;
  v2[4] = xmmword_101D731E0;
  *(_OWORD *)((char *)v2 + 76) = *(long long *)((char *)&xmmword_101D731E0 + 12);
  *uint64_t v2 = xmmword_101D731A0;
  v2[1] = unk_101D731B0;
  qword_102480058 = (uint64_t)v2;

  return __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_102480058, (void *)&_mh_execute_header);
}

uint64_t sub_100AE4A8C(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_100AE4AC0(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t v4 = &qword_1024800C0;
  }
  else {
    uint64_t v4 = &qword_102480090;
  }
  uint64_t v5 = *v4;
  *(_WORD *)(a1 + 8) = *((_WORD *)v4 + 4);
  *(void *)a1 = v5;
  double v6 = &xmmword_1024800A0;
  if (a2) {
    double v6 = &xmmword_1024800D0;
  }
  float v7 = (char *)&qword_1024800E0 + 7;
  if (!a2) {
    float v7 = (char *)&qword_1024800B0 + 7;
  }
  if (*v7 < 0)
  {
    double v9 = (void *)v4[2];
    if (a2) {
      double v10 = &qword_1024800C0;
    }
    else {
      double v10 = &qword_102480090;
    }
    sub_1000DC48C((unsigned char *)(a1 + 16), v9, v10[3]);
  }
  else
  {
    long long v8 = *v6;
    *(void *)(a1 + 32) = *((void *)v6 + 2);
    *(_OWORD *)(a1 + 16) = v8;
  }
  if (a2) {
    float v11 = &qword_1024800C0;
  }
  else {
    float v11 = &qword_102480090;
  }
  *(void *)(a1 + 40) = v11[5];
  *(void *)(a1 + 48) = 0;
  sub_100AE4BB4();
}

void sub_100AE4B88(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = 0;
  if (v4) {
    sub_101A7ED4C(v4);
  }
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AE4BB4()
{
}

void sub_100AE4F5C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100AE4FC4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    return sub_10014C3C0(v1);
  }
  else
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022DD560);
    }
    uint64_t v3 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Database is not accessible.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022DD560);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionAlarmDatabase::isDbAccessible() const", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return 0;
  }
}

uint64_t sub_100AE5194(uint64_t a1, void *a2)
{
  if (!sub_100AE4FC4(a1)) {
    return 0;
  }
  if (!objc_msgSend(objc_msgSend(a2, "bundleId"), "length") || !objc_msgSend(objc_msgSend(a2, "name"), "length"))
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022DD560);
    }
    double v6 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unable to update alarm because bundleId, executable or name is empty.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022DD560);
      }
      float v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmDatabase::upsertAlarm(CMMotionAlarm *)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return 0;
  }
  uint64_t v4 = (void *)sub_100AE5410(a1, [a2 bundleId], [a2 name]);
  if (v4)
  {
    [a2 setAlarmId:[v4 alarmId]];
    return sub_100AE56B4(a1, a2);
  }
  else
  {
    return sub_100AE5A24(a1, a2);
  }
}

uint64_t sub_100AE5410(uint64_t a1, void *a2, void *a3)
{
  if (sub_100AE4FC4(a1))
  {
    if ([a2 length] && objc_msgSend(a3, "length")) {
      sub_10014D518(*(void *)(a1 + 48), (uint64_t)"SELECT id, state, duration, type, repeats, bundleId, name FROM MotionAlarm WHERE 1 = 1 AND bundleId = ? AND name = ?");
    }
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022DD560);
    }
    double v6 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unable to get alarm because bundleId, executable or name is empty.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022DD560);
      }
      long long v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CMMotionAlarm *CLMotionAlarmDatabase::getAlarm(NSString *, NSString *)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return 0;
}

void sub_100AE5694(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AE56B4(uint64_t a1, void *a2)
{
  if (sub_100AE4FC4(a1))
  {
    if (objc_msgSend(objc_msgSend(a2, "bundleId"), "length") && objc_msgSend(objc_msgSend(a2, "name"), "length")) {
      sub_10014D518(*(void *)(a1 + 48), (uint64_t)"UPDATE MotionAlarm SET state = ?, duration = ?, type = ?, repeats = ? WHERE 1 = 1 AND id = ? AND bundleId = ? AND name = ?");
    }
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022DD560);
    }
    uint64_t v4 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unable to update alarm because bundleId or name is empty.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022DD560);
      }
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmDatabase::updateAlarm(CMMotionAlarm *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return 0;
}

void sub_100AE5A04(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AE5A24(uint64_t a1, void *a2)
{
  if (sub_100AE4FC4(a1))
  {
    if (objc_msgSend(objc_msgSend(a2, "bundleId"), "length") && objc_msgSend(objc_msgSend(a2, "name"), "length")) {
      sub_10014D518(*(void *)(a1 + 48), (uint64_t)"INSERT INTO MotionAlarm (state, duration, type, repeats, bundleId, name) VALUES (?, ?, ?, ?, ?, ?)");
    }
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022DD560);
    }
    uint64_t v4 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unable to insert alarm because bundleId or name is empty.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022DD560);
      }
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmDatabase::insertAlarm(CMMotionAlarm *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return 0;
}

void sub_100AE5D64(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AE5D84(uint64_t a1)
{
  if (sub_100AE4FC4(a1)) {
    sub_10014D518(*(void *)(a1 + 48), (uint64_t)"SELECT id, state, duration, type, repeats, bundleId, name FROM MotionAlarm");
  }
  return 0;
}

void sub_100AE5E1C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

NSMutableArray *sub_100AE5E34(uint64_t a1, sqlite3_stmt *a2)
{
  for (uint64_t i = +[NSMutableArray arrayWithCapacity:5];
        ;
        [(NSMutableArray *)i addObject:sub_100AE6280(v4, a2)])
  {
    uint64_t v4 = sqlite3_step(a2);
    if (v4 != 100) {
      break;
    }
  }
  if (v4 != 16 && v4 != 101)
  {
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022DD560);
    }
    uint64_t v5 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unable to iterate through all rows for getAllAlarms!", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022DD560);
      }
      float v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "NSArray<CMMotionAlarm *> *CLMotionAlarmDatabase::alarmsFromStatement(sqlite3_stmt *) const", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  return i;
}

uint64_t sub_100AE6018(uint64_t a1, void *a2)
{
  if (sub_100AE4FC4(a1))
  {
    if ([a2 length]) {
      sub_10014D518(*(void *)(a1 + 48), (uint64_t)"SELECT id, state, duration, type, repeats, bundleId, name FROM MotionAlarm WHERE bundleId = ?");
    }
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022DD560);
    }
    uint64_t v4 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unable to get alarms because bundleId or executable is empty.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022DD560);
      }
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "NSArray<CMMotionAlarm *> *CLMotionAlarmDatabase::getAlarms(NSString *) const", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return 0;
}

void sub_100AE6260(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

id sub_100AE6280(uint64_t a1, sqlite3_stmt *a2)
{
  id v3 = objc_alloc((Class)CMMotionAlarm);
  uint64_t v4 = +[NSString stringWithUTF8String:sqlite3_column_text(a2, 6)];
  uint64_t v5 = sqlite3_column_int(a2, 3);
  uint64_t v6 = sqlite3_column_int(a2, 2);
  BOOL v7 = sqlite3_column_int(a2, 4) != 0;
  sqlite3_int64 v8 = sqlite3_column_int64(a2, 0);
  double v9 = +[NSString stringWithUTF8String:sqlite3_column_text(a2, 5)];
  LODWORD(v12) = sqlite3_column_int(a2, 1);
  id v10 = [v3 initWithName:v4 type:v5 duration:v6 repeats:v7 alarmId:v8 bundleId:v9 state:v12];

  return v10;
}

uint64_t sub_100AE6398(uint64_t a1)
{
  if (sub_100AE4FC4(a1)) {
    sub_10014D518(*(void *)(a1 + 48), (uint64_t)"SELECT id, state, duration, type, repeats, bundleId, name FROM MotionAlarm WHERE id = ?");
  }
  return 0;
}

void sub_100AE6468(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AE6480(uint64_t a1, void *a2, void *a3)
{
  if (sub_100AE4FC4(a1))
  {
    if ([a2 length] && objc_msgSend(a3, "length")) {
      sub_10014D518(*(void *)(a1 + 48), (uint64_t)"DELETE FROM MotionAlarm WHERE 1 = 1 AND bundleId = ? AND name = ?");
    }
    if (qword_102419130 != -1) {
      dispatch_once(&qword_102419130, &stru_1022DD560);
    }
    uint64_t v6 = qword_102419138;
    if (os_log_type_enabled((os_log_t)qword_102419138, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unable to delete alarm because bundleId, executable or name is empty.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419130 != -1) {
        dispatch_once(&qword_102419130, &stru_1022DD560);
      }
      sqlite3_int64 v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMotionAlarmDatabase::deleteAlarm(NSString *, NSString *)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return 0;
}

void sub_100AE66FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

void sub_100AE671C(id a1)
{
  qword_102419138 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MotionAlarm");
}

uint64_t sub_100AE674C()
{
  sub_100134750(__p, "");
  qword_102480090 = 0x100000003;
  word_102480098 = 0;
  if (SHIBYTE(v2) < 0)
  {
    sub_1000DC48C(&xmmword_1024800A0, __p[0], (unint64_t)__p[1]);
    qword_1024800B8 = 0;
    if (SHIBYTE(v2) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    xmmword_1024800A0 = *(_OWORD *)__p;
    qword_1024800B0 = v2;
    qword_1024800B8 = 0;
  }
  __cxa_atexit((void (*)(void *))sub_100AE4A8C, &qword_102480090, (void *)&_mh_execute_header);
  sub_100134750(__p, "");
  word_1024800C8 = 0;
  qword_1024800C0 = 0;
  if (SHIBYTE(v2) < 0)
  {
    sub_1000DC48C(&xmmword_1024800D0, __p[0], (unint64_t)__p[1]);
    qword_1024800E8 = 0;
    if (SHIBYTE(v2) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    xmmword_1024800D0 = *(_OWORD *)__p;
    qword_1024800E0 = v2;
    qword_1024800E8 = 0;
  }
  return __cxa_atexit((void (*)(void *))sub_100AE4A8C, &qword_1024800C0, (void *)&_mh_execute_header);
}

void sub_100AE6898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100AE68B8(char a1, uint64_t a2, uint64_t a3, double a4)
{
  *(_DWORD *)(a3 + 52) |= 1u;
  uint64_t v4 = *(void *)(a3 + 32);
  if (!v4) {
    operator new();
  }
  *(_DWORD *)(v4 + 44) |= 1u;
  *(double *)(v4 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v5 = *(void *)(a3 + 40);
  if (!v5) {
    operator new();
  }
  *(_DWORD *)(v5 + 492) |= 0x1000u;
  uint64_t v6 = *(void *)(v5 + 360);
  if (!v6) {
    operator new();
  }
  *(_DWORD *)(v6 + 24) |= 1u;
  *(unsigned char *)(v6 + 16) = a1;
  *(_DWORD *)(a3 + 52) |= 2u;
  *(_DWORD *)(v5 + 492) |= 0x1000u;
  uint64_t v7 = *(void *)(v5 + 360);
  if (!v7) {
    operator new();
  }
  *(_DWORD *)(v7 + 24) |= 2u;
  uint64_t v8 = *(void *)(v7 + 8);
  if (!v8) {
    operator new();
  }

  return sub_10146B120(a2, v8);
}

void sub_100AE6A84()
{
}

void sub_100AE6AE0()
{
}

BOOL sub_100AE6AFC(_DWORD *a1, uint64_t a2, uint64_t a3, double a4)
{
  *(_DWORD *)(a3 + 52) |= 1u;
  uint64_t v6 = *(void *)(a3 + 32);
  if (!v6) {
    operator new();
  }
  *(_DWORD *)(v6 + 44) |= 1u;
  *(double *)(v6 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v7 = *(void *)(a3 + 40);
  if (!v7) {
    operator new();
  }
  *(_DWORD *)(v7 + 492) |= 0x2000u;
  uint64_t v8 = *(void *)(v7 + 368);
  if (!v8) {
    operator new();
  }
  unsigned int v9 = sub_10146B484(a1);
  if (!sub_1003F098C(v9)) {
    sub_101A7615C();
  }
  *(_DWORD *)(v8 + 32) |= 1u;
  *(_DWORD *)(v8 + 16) = v9;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v10 = *(void *)(a3 + 40);
  if (!v10) {
    operator new();
  }
  *(_DWORD *)(v10 + 492) |= 0x2000u;
  uint64_t v11 = *(void *)(v10 + 368);
  if (!v11) {
    operator new();
  }
  *(_DWORD *)(v11 + 32) |= 2u;
  uint64_t v12 = *(void *)(v11 + 8);
  if (!v12) {
    operator new();
  }
  sub_10146B120(a2, v12);
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v13 = *(void *)(a3 + 40);
  if (!v13) {
    operator new();
  }
  *(_DWORD *)(v13 + 492) |= 0x2000u;
  uint64_t v14 = *(void *)(v13 + 368);
  if (!v14) {
    operator new();
  }
  unsigned int v15 = sub_10146B2AC((int *)(a2 + 248));
  if (!sub_1001662E0(v15)) {
    sub_101A76130();
  }
  *(_DWORD *)(v14 + 32) |= 4u;
  *(_DWORD *)(v14 + 20) = v15;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v16 = *(void *)(a3 + 40);
  if (!v16) {
    operator new();
  }
  *(_DWORD *)(v16 + 492) |= 0x2000u;
  uint64_t v17 = *(void *)(v16 + 368);
  if (!v17) {
    operator new();
  }
  unsigned int v18 = sub_10146B2AC((int *)(a2 + 408));
  BOOL result = sub_1001662E0(v18);
  if (!result) {
    sub_101A76104();
  }
  *(_DWORD *)(v17 + 32) |= 8u;
  *(_DWORD *)(v17 + 24) = v18;
  return result;
}

void sub_100AE6E04()
{
}

void sub_100AE6E88()
{
}

BOOL sub_100AE6EA4(int *a1, uint64_t a2, uint64_t a3, double a4)
{
  *(_DWORD *)(a3 + 52) |= 1u;
  uint64_t v6 = *(void *)(a3 + 32);
  if (!v6) {
    operator new();
  }
  *(_DWORD *)(v6 + 44) |= 1u;
  *(double *)(v6 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v7 = *(void *)(a3 + 40);
  if (!v7) {
    operator new();
  }
  *(_DWORD *)(v7 + 492) |= 0x800u;
  uint64_t v8 = *(void *)(v7 + 352);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 184) |= 0x200u;
  uint64_t v9 = *(void *)(v8 + 72);
  if (!v9) {
    operator new();
  }
  unsigned int v10 = sub_10146901C(a1);
  if (!sub_100165F14(v10)) {
    sub_101A7ED9C();
  }
  *(_DWORD *)(v9 + 28) |= 2u;
  *(_DWORD *)(v9 + 12) = v10;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v11 = *(void *)(a3 + 40);
  if (!v11) {
    operator new();
  }
  *(_DWORD *)(v11 + 492) |= 0x800u;
  uint64_t v12 = *(void *)(v11 + 352);
  if (!v12) {
    operator new();
  }
  *(_DWORD *)(v12 + 184) |= 0x200u;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13) {
    operator new();
  }
  *(_DWORD *)(v13 + 28) |= 4u;
  uint64_t v14 = *(void *)(v13 + 16);
  if (!v14) {
    operator new();
  }
  char v15 = *(unsigned char *)(a2 + 113);
  *(_DWORD *)(v14 + 24) |= 1u;
  *(unsigned char *)(v14 + 16) = v15;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v16 = *(void *)(a3 + 40);
  if (!v16) {
    operator new();
  }
  *(_DWORD *)(v16 + 492) |= 0x800u;
  uint64_t v17 = *(void *)(v16 + 352);
  if (!v17) {
    operator new();
  }
  *(_DWORD *)(v17 + 184) |= 0x200u;
  uint64_t v18 = *(void *)(v17 + 72);
  if (!v18) {
    operator new();
  }
  *(_DWORD *)(v18 + 28) |= 4u;
  uint64_t v19 = *(void *)(v18 + 16);
  if (!v19) {
    operator new();
  }
  char v20 = *(unsigned char *)(a2 + 112);
  *(_DWORD *)(v19 + 24) |= 2u;
  *(unsigned char *)(v19 + 17) = v20;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v21 = *(void *)(a3 + 40);
  if (!v21) {
    operator new();
  }
  *(_DWORD *)(v21 + 492) |= 0x800u;
  uint64_t v22 = *(void *)(v21 + 352);
  if (!v22) {
    operator new();
  }
  *(_DWORD *)(v22 + 184) |= 0x200u;
  uint64_t v23 = *(void *)(v22 + 72);
  if (!v23) {
    operator new();
  }
  *(_DWORD *)(v23 + 28) |= 4u;
  uint64_t v24 = *(void *)(v23 + 16);
  if (!v24) {
    operator new();
  }
  *(_DWORD *)(v24 + 24) |= 4u;
  uint64_t v25 = *(void *)(v24 + 8);
  if (!v25) {
    operator new();
  }
  return sub_1014691F0((std::string *)(a2 + 8), v25);
}

void sub_100AE7318()
{
}

void sub_100AE73E0()
{
}

BOOL sub_100AE73FC(int *a1, char *a2, uint64_t a3, double a4)
{
  *(_DWORD *)(a3 + 52) |= 1u;
  uint64_t v7 = *(void *)(a3 + 32);
  if (!v7) {
    operator new();
  }
  *(_DWORD *)(v7 + 44) |= 1u;
  *(double *)(v7 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v8 = *(void *)(a3 + 40);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 492) |= 0x800u;
  uint64_t v9 = *(void *)(v8 + 352);
  if (!v9) {
    operator new();
  }
  *(_DWORD *)(v9 + 184) |= 0x400u;
  uint64_t v10 = *(void *)(v9 + 80);
  if (!v10) {
    operator new();
  }
  unsigned int v11 = sub_101469350(a1);
  BOOL result = sub_1001A4C4C(v11);
  if (!result) {
    sub_101A7EDC8();
  }
  *(_DWORD *)(v10 + 28) |= 2u;
  *(_DWORD *)(v10 + 12) = v11;
  if (*a1 == 5)
  {
    *(_DWORD *)(a3 + 52) |= 2u;
    uint64_t v13 = *(void *)(a3 + 40);
    if (!v13) {
      operator new();
    }
    *(_DWORD *)(v13 + 492) |= 0x800u;
    uint64_t v14 = *(void *)(v13 + 352);
    if (!v14) {
      operator new();
    }
    *(_DWORD *)(v14 + 184) |= 0x400u;
    uint64_t v15 = *(void *)(v14 + 80);
    if (!v15) {
      operator new();
    }
    *(_DWORD *)(v15 + 28) |= 4u;
    uint64_t v16 = *(void *)(v15 + 16);
    if (!v16) {
      operator new();
    }
    char v17 = *a2;
    *(_DWORD *)(v16 + 16) |= 1u;
    *(unsigned char *)(v16 + 8) = v17;
  }
  return result;
}

void sub_100AE7658()
{
}

void sub_100AE76F8(int *a1, uint64_t a2, uint64_t a3, double a4)
{
  *(_DWORD *)(a3 + 52) |= 1u;
  uint64_t v6 = *(void *)(a3 + 32);
  if (!v6) {
    operator new();
  }
  *(_DWORD *)(v6 + 44) |= 1u;
  *(double *)(v6 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v7 = *(void *)(a3 + 40);
  if (!v7) {
    operator new();
  }
  *(_DWORD *)(v7 + 492) |= 0x800u;
  uint64_t v8 = *(void *)(v7 + 352);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 184) |= 0x800u;
  uint64_t v9 = *(void *)(v8 + 88);
  if (!v9) {
    operator new();
  }
  unsigned int v10 = sub_10146AB74(a1);
  if (!sub_1001662E0(v10)) {
    sub_101A7EDF4();
  }
  uint64_t v11 = 0;
  int v12 = *(_DWORD *)(v9 + 28);
  *(_DWORD *)(v9 + 28) = v12 | 2;
  *(_DWORD *)(v9 + 12) = v10;
  uint64_t v13 = (int *)&unk_101D73214;
  while (dword_101D731FC[v11] != *a1)
  {
    if (++v11 == 6) {
      goto LABEL_15;
    }
  }
  uint64_t v13 = &dword_101D731FC[v11];
LABEL_15:
  if ((char *)v13 - (char *)dword_101D731FC != 24)
  {
    *(_DWORD *)(v9 + 28) = v12 | 6;
    uint64_t v14 = *(void *)(v9 + 16);
    if (!v14) {
      operator new();
    }
    *(_DWORD *)(v14 + 20) |= 1u;
    uint64_t v15 = *(void *)(v14 + 8);
    if (!v15) {
      operator new();
    }
    sub_100163CA8(a2, v15, 0);
  }
}

void sub_100AE7938()
{
}

void sub_100AE79C8(int *a1, char *a2, uint64_t a3, double a4)
{
  *(_DWORD *)(a3 + 52) |= 1u;
  uint64_t v4 = *(void *)(a3 + 32);
  if (!v4) {
    operator new();
  }
  *(_DWORD *)(v4 + 44) |= 1u;
  *(double *)(v4 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v5 = *(void *)(a3 + 40);
  if (!v5) {
    operator new();
  }
  *(_DWORD *)(v5 + 492) |= 0x800u;
  uint64_t v6 = *(void *)(v5 + 352);
  if (!v6) {
    operator new();
  }
  *(_DWORD *)(v6 + 184) |= 0x20u;
  uint64_t v7 = *(void *)(v6 + 40);
  if (!v7) {
    operator new();
  }

  sub_101469700(a1, a2, v7);
}

void sub_100AE7B10()
{
}

BOOL sub_100AE7B78(int *a1, int *a2, uint64_t a3, double a4)
{
  *(_DWORD *)(a3 + 52) |= 1u;
  uint64_t v5 = *(void *)(a3 + 32);
  if (!v5) {
    operator new();
  }
  *(_DWORD *)(v5 + 44) |= 1u;
  *(double *)(v5 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v6 = *(void *)(a3 + 40);
  if (!v6) {
    operator new();
  }
  *(_DWORD *)(v6 + 492) |= 0x800u;
  uint64_t v7 = *(void *)(v6 + 352);
  if (!v7) {
    operator new();
  }
  *(_DWORD *)(v7 + 184) |= 0x2000u;
  uint64_t v8 = *(void *)(v7 + 104);
  if (!v8) {
    operator new();
  }
  unsigned int v9 = sub_10146A7E4(a1);
  if (!sub_1001A4C4C(v9)) {
    sub_101A7EE20();
  }
  int v10 = *(_DWORD *)(v8 + 28);
  *(_DWORD *)(v8 + 12) = v9;
  *(_DWORD *)(v8 + 28) = v10 | 6;
  uint64_t v11 = *(void *)(v8 + 16);
  if (!v11) {
    operator new();
  }
  *(_DWORD *)(v11 + 20) |= 1u;
  uint64_t v12 = *(void *)(v11 + 8);
  if (!v12) {
    operator new();
  }
  int v13 = sub_10016DA54(a2);
  if (!sub_10016D86C(v13)) {
    sub_101A5F208();
  }
  *(_DWORD *)(v12 + 20) |= 1u;
  *(_DWORD *)(v12 + 8) = v13;
  *(_DWORD *)(v11 + 20) |= 1u;
  uint64_t v14 = *(void *)(v11 + 8);
  if (!v14) {
    operator new();
  }
  unsigned int v15 = sub_10146A9A8(a2 + 1);
  BOOL result = sub_100165F14(v15);
  if (!result) {
    sub_101A5F1DC();
  }
  *(_DWORD *)(v14 + 20) |= 2u;
  *(_DWORD *)(v14 + 12) = v15;
  return result;
}

void sub_100AE7DC0()
{
}

void sub_100AE7E54(int *a1, char *a2, uint64_t a3, double a4)
{
  *(_DWORD *)(a3 + 52) |= 1u;
  uint64_t v4 = *(void *)(a3 + 32);
  if (!v4) {
    operator new();
  }
  *(_DWORD *)(v4 + 44) |= 1u;
  *(double *)(v4 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v5 = *(void *)(a3 + 40);
  if (!v5) {
    operator new();
  }
  *(_DWORD *)(v5 + 488) |= 0x200000u;
  uint64_t v6 = *(void *)(v5 + 176);
  if (!v6) {
    operator new();
  }

  sub_1014652F4(a1, a2, v6);
}

void sub_100AE7F64()
{
}

uint64_t sub_100AE7FB8(uint64_t a1, uint64_t a2, double a3)
{
  *(_DWORD *)(a2 + 52) |= 1u;
  uint64_t v4 = *(void *)(a2 + 32);
  if (!v4) {
    operator new();
  }
  *(_DWORD *)(v4 + 44) |= 1u;
  *(double *)(v4 + 8) = a3;
  *(_DWORD *)(a2 + 52) |= 2u;
  uint64_t v5 = *(void *)(a2 + 40);
  if (!v5) {
    operator new();
  }
  *(_DWORD *)(v5 + 492) |= 0x4000u;
  uint64_t v6 = *(void *)(v5 + 376);
  if (!v6) {
    operator new();
  }
  double v7 = sub_100B02B58(a1);
  *(_DWORD *)(v6 + 44) |= 1u;
  *(double *)(v6 + 8) = v7;
  double v8 = sub_100C8D894(a1);
  *(_DWORD *)(v6 + 44) |= 2u;
  *(double *)(v6 + 16) = v8;
  int v9 = sub_10026DDD8(a1);
  *(_DWORD *)(v6 + 44) |= 8u;
  *(_DWORD *)(v6 + 28) = v9;
  int v10 = sub_100170408(a1);
  *(_DWORD *)(v6 + 44) |= 0x10u;
  *(_DWORD *)(v6 + 32) = v10;
  uint64_t result = sub_100173A28(a1);
  *(_DWORD *)(v6 + 44) |= 0x20u;
  *(_DWORD *)(v6 + 36) = result;
  return result;
}

void sub_100AE8120()
{
}

BOOL sub_100AE8174(int *a1, uint64_t a2, double a3)
{
  *(_DWORD *)(a2 + 52) |= 1u;
  uint64_t v3 = *(void *)(a2 + 32);
  if (!v3) {
    operator new();
  }
  *(_DWORD *)(v3 + 44) |= 1u;
  *(double *)(v3 + 8) = a3;
  *(_DWORD *)(a2 + 52) |= 2u;
  uint64_t v4 = *(void *)(a2 + 40);
  if (!v4) {
    operator new();
  }
  int v5 = *a1;
  if (*a1)
  {
    if (v5 == 1)
    {
      unsigned int v6 = 2;
    }
    else
    {
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022DD700);
      }
      double v7 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        int v11 = v5;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Fence: Unhandled ControlCommand, %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022DD700);
        }
        int v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLP::LogEntry::RegionMonitoring::RegionMonitoringControl (anonymous namespace)::ConvertFenceMonitorControlCommandToProtobuf(const CLFenceMonitor::ControlCommand)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      unsigned int v6 = 0;
    }
  }
  else
  {
    unsigned int v6 = 1;
  }
  BOOL result = sub_10016E644(v6);
  if (!result) {
    sub_101A729C0();
  }
  *(_DWORD *)(v4 + 492) |= 0x8000u;
  *(_DWORD *)(v4 + 480) = v6;
  return result;
}

void sub_100AE83F8()
{
}

BOOL sub_100AE8440(uint64_t a1, unsigned int *a2, uint64_t a3, double a4)
{
  *(_DWORD *)(a3 + 52) |= 1u;
  uint64_t v6 = *(void *)(a3 + 32);
  if (!v6) {
    operator new();
  }
  *(_DWORD *)(v6 + 44) |= 1u;
  *(double *)(v6 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v7 = *(void *)(a3 + 40);
  if (!v7) {
    operator new();
  }
  *(_DWORD *)(v7 + 492) |= 0x10000u;
  uint64_t v8 = *(void *)(v7 + 384);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 24) |= 2u;
  uint64_t v9 = *(void *)(v8 + 8);
  if (!v9) {
    operator new();
  }
  sub_10146B120(a1, v9);
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v10 = *(void *)(a3 + 40);
  if (!v10) {
    operator new();
  }
  *(_DWORD *)(v10 + 492) |= 0x10000u;
  uint64_t v11 = *(void *)(v10 + 384);
  if (!v11) {
    operator new();
  }
  unsigned int v12 = sub_10146AF5C(a2);
  BOOL result = sub_1001662E0(v12);
  if (!result) {
    sub_101A76188();
  }
  *(_DWORD *)(v11 + 24) |= 1u;
  *(_DWORD *)(v11 + 16) = v12;
  return result;
}

void sub_100AE8618()
{
}

void sub_100AE867C()
{
}

BOOL sub_100AE8698(int a1, uint64_t a2, uint64_t a3, double a4)
{
  *(_DWORD *)(a3 + 52) |= 1u;
  uint64_t v6 = *(void *)(a3 + 32);
  if (!v6) {
    operator new();
  }
  *(_DWORD *)(v6 + 44) |= 1u;
  *(double *)(v6 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v7 = *(void *)(a3 + 40);
  if (a1)
  {
    if (!v7) {
      operator new();
    }
    *(_DWORD *)(v7 + 492) |= 0x20000u;
    uint64_t v8 = *(void *)(v7 + 392);
    if (!v8) {
      operator new();
    }
    int v9 = 1;
    if (!sub_1001A4C4C(1u)) {
      sub_101A761B4();
    }
  }
  else
  {
    if (!v7) {
      operator new();
    }
    *(_DWORD *)(v7 + 492) |= 0x20000u;
    uint64_t v8 = *(void *)(v7 + 392);
    if (!v8) {
      operator new();
    }
    int v9 = 0;
    if (!sub_1001A4C4C(0)) {
      sub_101A761B4();
    }
  }
  *(_DWORD *)(v8 + 24) |= 1u;
  *(_DWORD *)(v8 + 16) = v9;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v10 = *(void *)(a3 + 40);
  if (!v10) {
    operator new();
  }
  *(_DWORD *)(v10 + 492) |= 0x20000u;
  uint64_t v11 = *(void *)(v10 + 392);
  if (!v11) {
    operator new();
  }
  *(_DWORD *)(v11 + 24) |= 2u;
  uint64_t v12 = *(void *)(v11 + 8);
  if (!v12) {
    operator new();
  }

  return sub_10146B120(a2, v12);
}

void sub_100AE88E8()
{
}

void sub_100AE894C()
{
}

BOOL sub_100AE8968(std::string *__str, uint64_t a2, uint64_t a3, double a4)
{
  *(_DWORD *)(a3 + 52) |= 1u;
  uint64_t v7 = *(void *)(a3 + 32);
  if (!v7) {
    operator new();
  }
  *(_DWORD *)(v7 + 44) |= 1u;
  *(double *)(v7 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v8 = *(void *)(a3 + 40);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 492) |= 0x40000u;
  uint64_t v9 = *(void *)(v8 + 400);
  if (!v9) {
    operator new();
  }
  *(_DWORD *)(v9 + 28) |= 1u;
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10) {
    operator new();
  }
  *(_DWORD *)(v10 + 44) |= 1u;
  uint64_t v11 = *(std::string **)(v10 + 8);
  if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v11, __str);
  int v12 = *(_DWORD *)(v10 + 44);
  *(void *)(v10 + 32) = *((void *)&__str[1].__r_.__value_.__l + 2);
  *(_DWORD *)(v10 + 44) = v12 | 0xE;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)&__str[1].__r_.__value_.__l.__data_;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v13 = *(void *)(a3 + 40);
  if (!v13) {
    operator new();
  }
  *(_DWORD *)(v13 + 492) |= 0x40000u;
  uint64_t v14 = *(void *)(v13 + 400);
  if (!v14) {
    operator new();
  }
  *(_DWORD *)(v14 + 28) |= 2u;
  uint64_t v15 = *(void *)(v14 + 16);
  if (!v15) {
    operator new();
  }

  return sub_10146B120(a2, v15);
}

void sub_100AE8BC4()
{
}

void sub_100AE8C3C()
{
}

void sub_100AE8C58(void *a1, uint64_t a2, double a3)
{
  *(_DWORD *)(a2 + 52) |= 1u;
  uint64_t v3 = *(void *)(a2 + 32);
  if (!v3) {
    operator new();
  }
  *(_DWORD *)(v3 + 44) |= 1u;
  *(double *)(v3 + 8) = a3;
  *(_DWORD *)(a2 + 52) |= 2u;
  uint64_t v4 = *(void *)(a2 + 40);
  if (!v4) {
    operator new();
  }
  *(_DWORD *)(v4 + 492) |= 1u;
  uint64_t v5 = *(void *)(v4 + 264);
  if (!v5) {
    operator new();
  }

  sub_101462648(a1, v5);
}

void sub_100AE8D60()
{
}

std::string *sub_100AE8DB4(unsigned int a1, char a2, const std::string *a3, uint64_t a4, double a5)
{
  *(_DWORD *)(a4 + 52) |= 1u;
  uint64_t v8 = *(void *)(a4 + 32);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 44) |= 1u;
  *(double *)(v8 + 8) = a5;
  *(_DWORD *)(a4 + 52) |= 2u;
  uint64_t v9 = *(void *)(a4 + 40);
  if (!v9) {
    operator new();
  }
  *(_DWORD *)(v9 + 492) |= 0x100000u;
  uint64_t v10 = *(void *)(v9 + 416);
  if (!v10) {
    operator new();
  }
  if (a1 >= 5)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022DD700);
    }
    int v12 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      unsigned int v18 = a1;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Fence: Unhandled LocationRequestType, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022DD700);
      }
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLP::LogEntry::RegionMonitoring::LocationRequestType (anonymous namespace)::ConvertLocationRequestTypeToProtobuf(CLFenceMonitor::LocationRequestType)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    unsigned int v11 = 0;
  }
  else
  {
    unsigned int v11 = a1 + 1;
  }
  if (!sub_1001A4C58(v11)) {
    sub_101A7620C();
  }
  int v13 = *(_DWORD *)(v10 + 28);
  *(_DWORD *)(v10 + 8) = v11;
  *(_DWORD *)(v10 + 28) = v13 | 5;
  uint64_t v14 = *(std::string **)(v10 + 16);
  if (v14 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  BOOL result = std::string::operator=(v14, a3);
  *(_DWORD *)(v10 + 28) |= 2u;
  *(unsigned char *)(v10 + 12) = a2;
  return result;
}

void sub_100AE90C4()
{
}

uint64_t sub_100AE9120(void *a1, uint64_t a2, double a3)
{
  *(_DWORD *)(a2 + 52) |= 1u;
  uint64_t v5 = *(void *)(a2 + 32);
  if (!v5) {
    operator new();
  }
  *(_DWORD *)(v5 + 44) |= 1u;
  *(double *)(v5 + 8) = a3;
  *(_DWORD *)(a2 + 52) |= 2u;
  uint64_t v6 = *(void *)(a2 + 40);
  if (!v6) {
    operator new();
  }
  *(_DWORD *)(v6 + 492) |= 0x200000u;
  uint64_t v7 = *(void *)(v6 + 424);
  if (!v7) {
    operator new();
  }
  if (!sub_10016E644(1u)) {
    sub_101A76264();
  }
  *(_DWORD *)(v7 + 28) |= 1u;
  *(_DWORD *)(v7 + 16) = 1;
  if (a1)
  {
    id v17 = [a1 type];
    *(_DWORD *)(a2 + 52) |= 2u;
    uint64_t v8 = *(void *)(a2 + 40);
    if (!v8) {
      operator new();
    }
    *(_DWORD *)(v8 + 492) |= 0x200000u;
    uint64_t v9 = *(void *)(v8 + 424);
    if (!v9) {
      operator new();
    }
    *(_DWORD *)(v9 + 28) |= 2u;
    uint64_t v10 = *(void *)(v9 + 8);
    if (!v10) {
      operator new();
    }
    sub_10146B494((char *)&v17, v10);
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      *(_DWORD *)(a2 + 52) |= 2u;
      uint64_t v11 = *(void *)(a2 + 40);
      if (!v11) {
        operator new();
      }
      *(_DWORD *)(v11 + 492) |= 0x200000u;
      uint64_t v12 = *(void *)(v11 + 424);
      if (!v12) {
        operator new();
      }
      int v13 = 2;
      uint64_t result = sub_10016E644(2u);
      if ((result & 1) == 0) {
        sub_101A76238();
      }
    }
    else
    {
      objc_opt_class();
      uint64_t result = objc_opt_isKindOfClass();
      if ((result & 1) == 0) {
        return result;
      }
      *(_DWORD *)(a2 + 52) |= 2u;
      uint64_t v16 = *(void *)(a2 + 40);
      if (!v16) {
        operator new();
      }
      *(_DWORD *)(v16 + 492) |= 0x200000u;
      uint64_t v12 = *(void *)(v16 + 424);
      if (!v12) {
        operator new();
      }
      int v13 = 1;
      uint64_t result = sub_10016E644(1u);
      if ((result & 1) == 0) {
        sub_101A76238();
      }
    }
  }
  else
  {
    *(_DWORD *)(a2 + 52) |= 2u;
    uint64_t v15 = *(void *)(a2 + 40);
    if (!v15) {
      operator new();
    }
    *(_DWORD *)(v15 + 492) |= 0x200000u;
    uint64_t v12 = *(void *)(v15 + 424);
    if (!v12) {
      operator new();
    }
    uint64_t result = sub_10016E644(0);
    int v13 = 0;
    if ((result & 1) == 0) {
      sub_101A76238();
    }
  }
  *(_DWORD *)(v12 + 28) |= 4u;
  *(_DWORD *)(v12 + 20) = v13;
  return result;
}

void sub_100AE94D4()
{
}

void sub_100AE9564(uint64_t *a1, uint64_t *a2, uint64_t a3, double a4)
{
  *(_DWORD *)(a3 + 52) |= 1u;
  uint64_t v6 = *(void *)(a3 + 32);
  if (!v6) {
    operator new();
  }
  *(_DWORD *)(v6 + 44) |= 1u;
  *(double *)(v6 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v7 = *(void *)(a3 + 40);
  if (!v7) {
    operator new();
  }
  *(_DWORD *)(v7 + 492) |= 0x400000u;
  if (!*(void *)(v7 + 432)) {
    operator new();
  }
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  while (v8 != v9)
  {
    *(_DWORD *)(a3 + 52) |= 2u;
    uint64_t v10 = *(void *)(a3 + 40);
    if (!v10) {
      operator new();
    }
    *(_DWORD *)(v10 + 492) |= 0x400000u;
    uint64_t v11 = *(int **)(v10 + 432);
    if (!v11) {
      operator new();
    }
    int v12 = v11[5];
    uint64_t v13 = v11[4];
    if ((int)v13 >= v12)
    {
      if (v12 == v11[6])
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v11 + 2), v12 + 1);
        int v12 = v11[5];
      }
      v11[5] = v12 + 1;
      sub_1009C2AD8();
    }
    uint64_t v14 = *((void *)v11 + 1);
    v11[4] = v13 + 1;
    sub_101464BD4(v8, *(void *)(v14 + 8 * v13));
    v8 += 88;
  }
  uint64_t v15 = *a2;
  uint64_t v16 = a2[1];
  while (v15 != v16)
  {
    *(_DWORD *)(a3 + 52) |= 2u;
    uint64_t v17 = *(void *)(a3 + 40);
    if (!v17) {
      operator new();
    }
    *(_DWORD *)(v17 + 492) |= 0x400000u;
    unsigned int v18 = *(int **)(v17 + 432);
    if (!v18) {
      operator new();
    }
    int v19 = v18[11];
    uint64_t v20 = v18[10];
    if ((int)v20 >= v19)
    {
      if (v19 == v18[12])
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v18 + 8), v19 + 1);
        int v19 = v18[11];
      }
      v18[11] = v19 + 1;
      sub_1009C2AD8();
    }
    uint64_t v21 = *((void *)v18 + 4);
    v18[10] = v20 + 1;
    sub_101464BD4(v15, *(void *)(v21 + 8 * v20));
    v15 += 88;
  }
}

void sub_100AE9840()
{
}

std::string *sub_100AE98C4(std::string *__str, uint64_t a2, double a3)
{
  *(_DWORD *)(a2 + 52) |= 1u;
  uint64_t v4 = *(void *)(a2 + 32);
  if (!v4) {
    operator new();
  }
  *(_DWORD *)(v4 + 44) |= 1u;
  *(double *)(v4 + 8) = a3;
  *(_DWORD *)(a2 + 52) |= 2u;
  uint64_t v5 = *(void *)(a2 + 40);
  if (!v5) {
    operator new();
  }
  *(_DWORD *)(v5 + 492) |= 0x800000u;
  uint64_t v6 = *(void *)(v5 + 440);
  if (!v6) {
    operator new();
  }
  *(_DWORD *)(v6 + 24) |= 1u;
  *(unsigned char *)(v6 + 16) = 1;
  *(_DWORD *)(a2 + 52) |= 2u;
  *(_DWORD *)(v5 + 492) |= 0x800000u;
  uint64_t v7 = *(void *)(v5 + 440);
  if (!v7) {
    operator new();
  }
  *(_DWORD *)(v7 + 24) |= 2u;
  uint64_t v8 = *(std::string **)(v7 + 8);
  if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }

  return std::string::operator=(v8, __str);
}

void sub_100AE9A90()
{
}

uint64_t sub_100AE9AF4(uint64_t result, double a2)
{
  *(_DWORD *)(result + 52) |= 1u;
  uint64_t v2 = *(void *)(result + 32);
  if (!v2) {
    operator new();
  }
  *(_DWORD *)(v2 + 44) |= 1u;
  *(double *)(v2 + 8) = a2;
  *(_DWORD *)(result + 52) |= 2u;
  uint64_t v3 = *(void *)(result + 40);
  if (!v3) {
    operator new();
  }
  *(_DWORD *)(v3 + 492) |= 0x800000u;
  uint64_t v4 = *(void *)(v3 + 440);
  if (!v4) {
    operator new();
  }
  *(_DWORD *)(v4 + 24) |= 1u;
  *(unsigned char *)(v4 + 16) = 0;
  return result;
}

void sub_100AE9BE8()
{
}

std::string *sub_100AE9C40(std::string *__str, uint64_t a2, double a3, double a4)
{
  *(_DWORD *)(a2 + 52) |= 1u;
  uint64_t v7 = *(void *)(a2 + 32);
  if (!v7) {
    operator new();
  }
  *(_DWORD *)(v7 + 44) |= 1u;
  *(double *)(v7 + 8) = a3;
  *(_DWORD *)(a2 + 52) |= 2u;
  uint64_t v8 = *(void *)(a2 + 40);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 492) |= 0x1000000u;
  uint64_t v9 = *(void *)(v8 + 448);
  if (!v9) {
    operator new();
  }
  *(_DWORD *)(v9 + 28) |= 1u;
  uint64_t v10 = *(std::string **)(v9 + 8);
  if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  uint64_t result = std::string::operator=(v10, __str);
  *(_DWORD *)(a2 + 52) |= 2u;
  uint64_t v12 = *(void *)(a2 + 40);
  if (!v12) {
    operator new();
  }
  *(_DWORD *)(v12 + 492) |= 0x1000000u;
  uint64_t v13 = *(void *)(v12 + 448);
  if (!v13) {
    operator new();
  }
  float v14 = a4;
  *(_DWORD *)(v13 + 28) |= 2u;
  *(float *)(v13 + 16) = v14;
  *(_DWORD *)(a2 + 52) |= 2u;
  *(_DWORD *)(v12 + 492) |= 0x1000000u;
  uint64_t v15 = *(void *)(v12 + 448);
  if (!v15) {
    operator new();
  }
  *(_DWORD *)(v15 + 28) |= 4u;
  *(unsigned char *)(v15 + 20) = 0;
  return result;
}

void sub_100AE9E84()
{
}

void sub_100AE9EDC()
{
}

uint64_t sub_100AE9EF8(uint64_t result, double a2)
{
  *(_DWORD *)(result + 52) |= 1u;
  uint64_t v2 = *(void *)(result + 32);
  if (!v2) {
    operator new();
  }
  *(_DWORD *)(v2 + 44) |= 1u;
  *(double *)(v2 + 8) = a2;
  *(_DWORD *)(result + 52) |= 2u;
  uint64_t v3 = *(void *)(result + 40);
  if (!v3) {
    operator new();
  }
  *(_DWORD *)(v3 + 492) |= 0x1000000u;
  uint64_t v4 = *(void *)(v3 + 448);
  if (!v4) {
    operator new();
  }
  *(_DWORD *)(v4 + 28) |= 4u;
  *(unsigned char *)(v4 + 20) = 1;
  return result;
}

void sub_100AE9FF0()
{
}

std::string *sub_100AEA048(void *a1, const std::string *a2, uint64_t a3, double a4)
{
  *(_DWORD *)(a3 + 52) |= 1u;
  uint64_t v7 = *(void *)(a3 + 32);
  if (!v7) {
    operator new();
  }
  *(_DWORD *)(v7 + 44) |= 1u;
  *(double *)(v7 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v8 = *(void *)(a3 + 40);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 492) |= 0x2000000u;
  uint64_t v9 = *(void *)(v8 + 456);
  if (!v9) {
    operator new();
  }
  unsigned int v21 = [a1 trigger];
  unsigned int v10 = sub_10146B4B8((int *)&v21);
  if (!sub_1003EEB2C(v10)) {
    sub_101A76290();
  }
  *(_DWORD *)(v9 + 40) |= 1u;
  *(_DWORD *)(v9 + 32) = v10;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v11 = *(void *)(a3 + 40);
  if (!v11) {
    operator new();
  }
  *(_DWORD *)(v11 + 492) |= 0x2000000u;
  uint64_t v12 = *(void *)(v11 + 456);
  if (!v12) {
    operator new();
  }
  [a1 duration];
  *(_DWORD *)(v12 + 40) |= 2u;
  *(void *)(v12 + 8) = v13;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v14 = *(void *)(a3 + 40);
  if (!v14) {
    operator new();
  }
  *(_DWORD *)(v14 + 492) |= 0x2000000u;
  uint64_t v15 = *(void *)(v14 + 456);
  if (!v15) {
    operator new();
  }
  [a1 activityDuration];
  *(_DWORD *)(v15 + 40) |= 4u;
  *(void *)(v15 + 16) = v16;
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v17 = *(void *)(a3 + 40);
  if (!v17) {
    operator new();
  }
  *(_DWORD *)(v17 + 492) |= 0x2000000u;
  uint64_t v18 = *(void *)(v17 + 456);
  if (!v18) {
    operator new();
  }
  *(_DWORD *)(v18 + 40) |= 8u;
  int v19 = *(std::string **)(v18 + 24);
  if (v19 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  return std::string::operator=(v19, a2);
}

void sub_100AEA34C()
{
}

void sub_100AEA3AC()
{
}

BOOL sub_100AEA3C8(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, double a5)
{
  unsigned int v8 = a1;
  *(_DWORD *)(a4 + 52) |= 1u;
  uint64_t v9 = *(void *)(a4 + 32);
  if (!v9) {
    operator new();
  }
  *(_DWORD *)(v9 + 44) |= 1u;
  *(double *)(v9 + 8) = a5;
  *(_DWORD *)(a4 + 52) |= 2u;
  uint64_t v10 = *(void *)(a4 + 40);
  if (!v10) {
    operator new();
  }
  *(_DWORD *)(v10 + 492) |= 0x8000000u;
  uint64_t v11 = *(void *)(v10 + 472);
  if (!v11) {
    operator new();
  }
  if (a1 - 1 >= 4) {
    unsigned int v8 = 0;
  }
  if (!sub_1001662E0(v8)) {
    sub_101A76314();
  }
  *(_DWORD *)(v11 + 28) |= 1u;
  *(_DWORD *)(v11 + 8) = v8;
  *(_DWORD *)(a4 + 52) |= 2u;
  uint64_t v12 = *(void *)(a4 + 40);
  if (!v12) {
    operator new();
  }
  *(_DWORD *)(v12 + 492) |= 0x8000000u;
  uint64_t v13 = *(void *)(v12 + 472);
  if (!v13) {
    operator new();
  }
  if (a2 - 1 >= 5) {
    a2 = 0;
  }
  BOOL result = sub_1001A4C58(a2);
  if (!result) {
    sub_101A762E8();
  }
  *(_DWORD *)(v13 + 28) |= 2u;
  *(_DWORD *)(v13 + 12) = a2;
  uint64_t v15 = *(unsigned __int8 *)(a3 + 23);
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *(void *)(a3 + 8);
  }
  if (v15) {
    goto LABEL_23;
  }
  uint64_t v16 = *(unsigned __int8 *)(a3 + 47);
  if ((v16 & 0x80u) != 0) {
    uint64_t v16 = *(void *)(a3 + 32);
  }
  if (v16)
  {
LABEL_23:
    *(_DWORD *)(a4 + 52) |= 2u;
    uint64_t v17 = *(void *)(a4 + 40);
    if (!v17) {
      operator new();
    }
    *(_DWORD *)(v17 + 492) |= 0x8000000u;
    uint64_t v18 = *(void *)(v17 + 472);
    if (!v18) {
      operator new();
    }
    *(_DWORD *)(v18 + 28) |= 4u;
    uint64_t v19 = *(void *)(v18 + 16);
    if (!v19) {
      operator new();
    }
    return sub_10146B120(a3, v19);
  }
  return result;
}

void sub_100AEA698()
{
}

void sub_100AEA714()
{
}

void sub_100AEA730(id a1)
{
  qword_1024193C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_100AEB928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100AEB96C(uint64_t a1)
{
  id result = objc_loadWeak((id *)(a1 + 32));
  if (result)
  {
    uint64_t v2 = result;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DD770);
    }
    uint64_t v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v6 = "-[CLEEDCoexMonitorCellular checkAndRestartRsrpTimer]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#EED2CXCL,%{public}s, rsrpTimerExpiry", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DD770);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLEEDCoexMonitorCellular checkAndRestartRsrpTimer]_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return [v2 fetchSignalStrengthMeasurements];
  }
  return result;
}

void sub_100AEC6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100AEC700(uint64_t a1, void *a2)
{
  id Weak = objc_loadWeak((id *)(a1 + 32));
  if (!Weak)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DD770);
    }
    uint64_t v10 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v15 = "-[CLEEDCoexMonitorCellular fetchSignalStrengthMeasurements]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#EED2CXCL,%{public}s, strongSelf nil, returning", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1)
    {
LABEL_29:
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLEEDCoexMonitorCellular fetchSignalStrengthMeasurements]_block_invoke", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
      return;
    }
LABEL_31:
    dispatch_once(&qword_1024193E0, &stru_1022DD770);
    goto LABEL_29;
  }
  uint64_t v4 = (unsigned int *)Weak;
  dispatch_assert_queue_V2([[objc_msgSend(*((id *)Weak + 1), "silo") queue];
  if (a2)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DD770);
    }
    uint64_t v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v6 = [[objc_msgSend(a2, "rsrp") intValue];
      unsigned int v7 = [[objc_msgSend(a2, "rscp") intValue];
      id v8 = [[[v4 ratAsString:v4[12]] UTF8String];
      *(_DWORD *)uint64_t buf = 136446978;
      uint64_t v15 = "-[CLEEDCoexMonitorCellular fetchSignalStrengthMeasurements]_block_invoke";
      __int16 v16 = 1026;
      unsigned int v17 = v6;
      __int16 v18 = 1026;
      unsigned int v19 = v7;
      __int16 v20 = 2082;
      id v21 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#EED2CXCL,%{public}s, rsrp:%{public}d, rscp:%{public}d, rat:%{public}s", buf, 0x22u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DD770);
      }
      [objc_msgSend(a2, "rsrp") intValue];
      [objc_msgSend(a2, "rscp") intValue];
      [objc_msgSend(v4, "ratAsString:", v4[12]) UTF8String];
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLEEDCoexMonitorCellular fetchSignalStrengthMeasurements]_block_invoke", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    unsigned int v9 = v4[12];
    if (v9 == 10 || v9 == 6) {
      [v4 storeRsrpUpdate:[a2 rsrp]];
    }
    return;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DD770);
  }
  uint64_t v11 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 136446210;
    uint64_t v15 = "-[CLEEDCoexMonitorCellular fetchSignalStrengthMeasurements]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#EED2CXCL,%{public}s, nil SignalStrengthMeasurements", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_29;
    }
    goto LABEL_31;
  }
}

void sub_100AEEA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,id location)
{
  objc_destroyWeak(v49);
  objc_destroyWeak(v48);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void *sub_100AEEA58(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DD770);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 136446210;
    unsigned int v7 = "-[CLEEDCoexMonitorCellular initWithUniverse:mitigationConfig:activeSim:Rat:wifiEmergency:cachedCoexMetricData:e"
         "ventCB:coexMetricUpdateCB:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2CXPB,%{public}s CellularMitigation Disabled, returning with nominal.", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DD770);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLEEDCoexMonitorCellular initWithUniverse:mitigationConfig:activeSim:Rat:wifiEmergency:cachedCoexMetricData:eventCB:coexMetricUpdateCB:]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  id result = *(void **)(a1 + 32);
  uint64_t v4 = result[4];
  if (v4) {
    return (void *)(*(uint64_t (**)(uint64_t, id, void))(v4 + 16))(v4, [result getCurrentMitigation], 0);
  }
  return result;
}

void sub_100AEEC38(uint64_t a1, uint64_t a2)
{
  id Weak = (id *)objc_loadWeak((id *)(a1 + 32));
  if (Weak)
  {
    uint64_t v4 = Weak;
    uint64_t v5 = [Weak[1] silo].queue;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100AEECCC;
    void v6[3] = &unk_10229FEB0;
    v6[4] = a2;
    void v6[5] = v4;
    dispatch_async(v5, v6);
  }
}

id sub_100AEECCC(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DD770);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)uint64_t buf = 136446466;
    unsigned int v7 = "-[CLEEDCoexMonitorCellular initWithUniverse:mitigationConfig:activeSim:Rat:wifiEmergency:cachedCoexMetricData:e"
         "ventCB:coexMetricUpdateCB:]_block_invoke_2";
    __int16 v8 = 2114;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2CXCL,%{public}s, WRMCB:%{public}@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DD770);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLEEDCoexMonitorCellular initWithUniverse:mitigationConfig:activeSim:Rat:wifiEmergency:cachedCoexMetricData:eventCB:coexMetricUpdateCB:]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return [*(id *)(a1 + 40) handleUplinkFrequency:*(void *)(a1 + 32)];
}

id sub_100AEEEAC(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 24) getWirelessULFrequencyBandUpdates:*(void *)(a1 + 40)];
}

id sub_100AEEEB8(uint64_t a1)
{
  id result = objc_loadWeak((id *)(a1 + 32));
  if (result)
  {
    return _[result queryEmergencyBottleneck];
  }
  return result;
}

id sub_100AEEEF0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) queryEmergencyBottleneck];
}

id sub_100AEEEF8(uint64_t a1)
{
  [*(id *)(a1 + 32) checkAndRestartRsrpTimer];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 checkAndSendMitigation];
}

void sub_100AEFAF8(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_100AEFB28(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = *a2;
  float v2 = 1.0 / *(double *)a2;
  *(float *)(a1 + 16) = v2;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 23) = 0;
  *(void *)(a1 + 32) = off_1022AD5D0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)a1 = off_1022DD800;
  *(_DWORD *)(a1 + 56) = 256;
  *(unsigned char *)(a1 + 60) = 0;
  *(void *)(a1 + 64) = off_1022AD5D0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = off_1022AD5D0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = off_1022AD5D0;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = off_1022AD5D0;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = off_1022DD8D0;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_WORD *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = off_1022AD5D0;
  *(void *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 220) = 0;
  *(void *)(a1 + 228) = 0;
  *(unsigned char *)(a1 + 244) = 0;
  *(void *)(a1 + 256) = off_1022AD5D0;
  *(void *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = off_1022AD5D0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 320) = 3;
  *(_WORD *)(a1 + 332) = 0;
  *(void *)(a1 + 324) = 0;
  *(void *)(a1 + 336) = off_1022DB158;
  *(void *)(a1 + 344) = off_1022AD5D0;
  *(void *)(a1 + 352) = 1065353216;
  *(_DWORD *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = off_1022AD5D0;
  *(void *)(a1 + 376) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = off_1022AD5D0;
  *(void *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 408) = 1065353216;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0x3FF0000000000000;
  *(void *)(a1 + 448) = off_1022AD5D0;
  *(void *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = off_1022AD5D0;
  *(void *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = off_1022AD5D0;
  *(void *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  double v3 = v2;
  unint64_t v4 = vcvtad_u64_f64(v3 * 0.125);
  *(void *)(a1 + 536) = off_1022AD070;
  *(void *)(a1 + 544) = v4;
  *(void *)(a1 + 552) = off_1022AD0A0;
  *(void *)(a1 + 560) = v4;
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(void *)(a1 + 624) = off_1022AD0A0;
  *(void *)(a1 + 632) = v4;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 696) = off_1022AD0A0;
  *(void *)(a1 + 704) = v4;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(void *)(a1 + 760) = 0;
  unint64_t v5 = vcvtad_u64_f64(v3 * 0.625);
  *(void *)(a1 + 768) = off_1022AD070;
  *(void *)(a1 + 776) = v5;
  *(void *)(a1 + 784) = off_1022AD0A0;
  *(void *)(a1 + 792) = v5;
  *(void *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(void *)(a1 + 856) = off_1022AD0A0;
  *(void *)(a1 + 864) = v5;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(void *)(a1 + 920) = 0;
  *(void *)(a1 + 928) = off_1022AD0A0;
  *(void *)(a1 + 936) = v5;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  unint64_t v6 = vcvtad_u64_f64(*(float *)(a1 + 16) * 0.75);
  *(void *)(a1 + 1008) = off_1022AD0A0;
  *(void *)(a1 + 1016) = v6;
  *(void *)(a1 + 1072) = 0;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(void *)(a1 + 1080) = off_1022AD0A0;
  *(void *)(a1 + 1088) = v6;
  *(void *)(a1 + 1144) = 0;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(void *)(a1 + 1152) = off_1022AD0A0;
  *(void *)(a1 + 1160) = v6;
  *(_OWORD *)(a1 + 1212) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(void *)(a1 + 1232) = off_1022AD070;
  *(void *)(a1 + 1240) = 2;
  *(void *)(a1 + 1248) = off_1022AD0A0;
  *(void *)(a1 + 1256) = 2;
  *(void *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(void *)(a1 + 1320) = off_1022AD0A0;
  *(void *)(a1 + 1328) = 2;
  *(void *)(a1 + 1384) = 0;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(void *)(a1 + 1392) = off_1022AD0A0;
  *(void *)(a1 + 1400) = 2;
  *(_OWORD *)(a1 + 1452) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  operator new[]();
}

void sub_100AF0234(_Unwind_Exception *a1)
{
  sub_1003A73E8(v7);
  v1[144] = v6;
  sub_1003A7340(v1 + 147);
  v1[135] = v5;
  sub_1003A7340(v1 + 138);
  v1[126] = v4;
  sub_1003A7340(v1 + 129);
  sub_1003A73E8(v3);
  sub_1003A73E8(v2);
  _Unwind_Resume(a1);
}

void *sub_100AF0280(void *a1)
{
  *a1 = off_1022DD800;
  if (a1[195]) {
    operator delete[]();
  }
  if (a1[196]) {
    operator delete[]();
  }
  if (a1[197]) {
    operator delete[]();
  }
  if (a1[198]) {
    operator delete[]();
  }
  sub_1003A73E8(a1 + 154);
  a1[144] = off_1022AD0A0;
  sub_1003A7340(a1 + 147);
  a1[135] = off_1022AD0A0;
  sub_1003A7340(a1 + 138);
  a1[126] = off_1022AD0A0;
  sub_1003A7340(a1 + 129);
  sub_1003A73E8(a1 + 96);
  sub_1003A73E8(a1 + 67);
  return a1;
}

void sub_100AF03C4(void *a1)
{
  sub_100AF0280(a1);

  operator delete();
}

float sub_100AF03FC(uint64_t a1)
{
  if (!*(void *)(a1 + 1000))
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    float v2 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "RotationStability buffer not set.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLAttitudeDependentKFCalibrator::init()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  *(_DWORD *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 228) = 0;
  if (!*(unsigned char *)(a1 + 333))
  {
    *(_DWORD *)(a1 + 248) = 0;
    *(_DWORD *)(a1 + 232) = 0;
    *(_WORD *)(a1 + 184) = 0;
    *(unsigned char *)(a1 + 220) = 0;
    *(_DWORD *)(a1 + 224) = 0;
    *(_DWORD *)(a1 + 324) = 0;
    *(_DWORD *)(a1 + 1608) = 0;
    sub_1003A7544((void *)(a1 + 1080));
    sub_1003A7544((void *)(a1 + 1008));
    sub_1003A7544((void *)(a1 + 1152));
    sub_1003A7544((void *)(a1 + 1248));
    sub_1003A7544((void *)(a1 + 1320));
    sub_1003A7544((void *)(a1 + 1392));
    *(_DWORD *)(a1 + 1224) = 0;
    *(void *)(a1 + 264) = 0;
    *(_DWORD *)(a1 + 272) = 0;
    *(void *)(a1 + 288) = 0;
    *(_DWORD *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0;
    *(_WORD *)(a1 + 312) = 0;
    *(_DWORD *)(a1 + 328) = 0;
  }
  *(unsigned char *)(a1 + 244) = 0;
  sub_1003A7544((void *)(a1 + 552));
  sub_1003A7544((void *)(a1 + 624));
  sub_1003A7544((void *)(a1 + 696));
  sub_1003A7544((void *)(a1 + 784));
  sub_1003A7544((void *)(a1 + 856));
  sub_1003A7544((void *)(a1 + 928));
  float result = *(double *)(a1 + 1536);
  *(float32x2_t *)(a1 + 144) = vcvt_f32_f64(*(float64x2_t *)(a1 + 1520));
  *(float *)(a1 + 152) = result;
  *(void *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  *(_WORD *)(a1 + 59) = 0;
  return result;
}

void sub_100AF0674(void *a1)
{
  sub_1003A7544(a1 + 2);
  sub_1003A7544(a1 + 11);

  sub_1003A7544(a1 + 20);
}

float sub_100AF06B8(float64x2_t *a1, float *a2, int *a3, float *a4, double *a5)
{
  if (a5 && *a3 > 0)
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    uint64_t v10 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      double v11 = a2[2];
      double v12 = a2[3];
      double v13 = a2[4];
      int v14 = *a3;
      *(_DWORD *)uint64_t buf = 134218752;
      double v31 = v11;
      __int16 v32 = 2048;
      double v33 = v12;
      __int16 v34 = 2048;
      double v35 = v13;
      __int16 v36 = 1024;
      int v37 = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "setting bias (%.3f/%.3f/%.3f) level (%d)", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      char v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::setBias(const CLVector3d<float> &, const CLMotionTypeCompassCalibrationLevel &, const CLVector3d<float> &, const CLClientQuaternion *)", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
    BYTE5(a1[20].f64[1]) = 0;
    BYTE1(a1[3].f64[1]) = 0;
    LOBYTE(a1[1].f64[1]) = 1;
    BYTE4(a1[15].f64[1]) = 0;
    sub_100AF0BEC((float32x2_t *)&a1[21], a5);
    if (&a1[4] == (float64x2_t *)a2)
    {
      float v15 = *(float *)&a1[4].f64[1];
      float v16 = *((float *)&a1[4].f64[1] + 1);
      float v17 = *(float *)a1[5].f64;
    }
    else
    {
      float v15 = a2[2];
      *(float *)&a1[4].f64[1] = v15;
      float v16 = a2[3];
      *((float *)&a1[4].f64[1] + 1) = v16;
      float v17 = a2[4];
      *(float *)a1[5].f64 = v17;
    }
    int v21 = *a3;
    HIDWORD(a1[1].f64[0]) = *a3;
    a1[6].f64[0] = 0.0;
    LODWORD(a1[6].f64[1]) = 0;
    float v22 = a4[4] - v17;
    float v23 = a4[2] - v15;
    float v24 = a4[3] - v16;
    *(float *)&a1[7].f64[1] = (float)((float)(*(float *)&a1[23].f64[1] * v24) + (float)(v23 * *(float *)a1[22].f64))
                            + (float)(v22 * *(float *)a1[25].f64);
    *(float32x2_t *)((char *)&a1[7].f64[1] + 4) = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)((char *)&a1[23].f64[1] + 4), v24), *(float32x2_t *)((char *)a1[22].f64 + 4), v23), *(float32x2_t *)((char *)a1[25].f64 + 4), v22);
    float64_t v25 = a1[4].f64[1];
    int v26 = LODWORD(a1[5].f64[0]);
    *(void *)&a1[10].f64[1] = 0x100000001;
    LODWORD(a1[11].f64[0]) = 1;
    HIDWORD(a1[1].f64[1]) = v21;
    a1[32].f64[1] = v25;
    LODWORD(a1[33].f64[0]) = v26;
    HIDWORD(a1[20].f64[0]) = 0;
    bzero(&a1[92], 0x48uLL);
    a1[92] = vcvtq_f64_f32(*(float32x2_t *)&a1[4].f64[1]);
    a1[93].f64[0] = *(float *)a1[5].f64;
    a1[95] = vcvtq_f64_f32(*(float32x2_t *)&a1[7].f64[1]);
    a1[96].f64[0] = *(float *)a1[8].f64;
    bzero(*(void **)&a1[98].f64[0], 0x144uLL);
    float v27 = 9.0 / (float)*a3;
    float64_t v28 = a1[98].f64[0];
    **(float **)&float64_t v28 = v27;
    *(float *)(*(void *)&v28 + 40) = v27;
    *(float *)(*(void *)&v28 + 80) = v27;
    *(_DWORD *)(*(void *)&v28 + 120) = 869711765;
    *(_DWORD *)(*(void *)&v28 + 160) = 869711765;
    *(_DWORD *)(*(void *)&v28 + 200) = 869711765;
    *(float *)(*(void *)&v28 + 240) = v27;
    *(float *)(*(void *)&v28 + 280) = v27;
    *(float *)(*(void *)&v28 + 320) = v27;
    if (LOBYTE(a1[3].f64[1]))
    {
      LOBYTE(a1[3].f64[1]) = 0;
      BYTE4(a1[20].f64[1]) = 0;
    }
    sub_100AF03FC((uint64_t)a1);
    sub_100AF0D44((uint64_t)a1, 0);
    sub_1001A44F4((uint64_t)&a1[78], (float *)&a1[4].f64[1]);
    sub_1001A44F4((uint64_t)&a1[82].f64[1], (float *)&a1[4].f64[1] + 1);
    return sub_1001A44F4((uint64_t)&a1[87], (float *)&a1[5]);
  }
  else
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    __int16 v18 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Could not set bias retrieved from database", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      __int16 v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLAttitudeDependentKFCalibrator::setBias(const CLVector3d<float> &, const CLMotionTypeCompassCalibrationLevel &, const CLVector3d<float> &, const CLClientQuaternion *)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
  }
  return result;
}

float32_t sub_100AF0BEC(float32x2_t *a1, double *a2)
{
  sub_100A1D4F0(v6.f64, a2);
  float32_t result = v11;
  float32_t v4 = v9;
  float32_t v5 = v7;
  a1[2] = vcvt_f32_f64(v6);
  a1[3].f32[0] = v5;
  a1[5] = vcvt_f32_f64(v8);
  a1[6].f32[0] = v4;
  a1[8] = vcvt_f32_f64(v10);
  a1[9].f32[0] = result;
  return result;
}

float sub_100AF0C94@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float result = *(float *)(a1 + 16);
  int v3 = *(_DWORD *)(a1 + 20);
  int v4 = *(_DWORD *)(a1 + 40);
  int v5 = *(_DWORD *)(a1 + 44);
  int v6 = *(_DWORD *)(a1 + 64);
  int v7 = *(_DWORD *)(a1 + 68);
  int v8 = *(_DWORD *)(a1 + 24);
  int v9 = *(_DWORD *)(a1 + 48);
  int v10 = *(_DWORD *)(a1 + 72);
  *(void *)a2 = off_1022DB158;
  *(void *)(a2 + 8) = off_1022AD5D0;
  *(float *)(a2 + 16) = result;
  *(_DWORD *)(a2 + 20) = v4;
  *(_DWORD *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = off_1022AD5D0;
  *(_DWORD *)(a2 + 40) = v3;
  *(_DWORD *)(a2 + 44) = v5;
  *(_DWORD *)(a2 + 48) = v7;
  *(void *)(a2 + 56) = off_1022AD5D0;
  *(_DWORD *)(a2 + 64) = v8;
  *(_DWORD *)(a2 + 68) = v9;
  *(_DWORD *)(a2 + 72) = v10;
  return result;
}

void sub_100AF0D44(uint64_t a1, int a2)
{
  float v4 = *(float *)(a1 + 120);
  float v5 = *(float *)(a1 + 124);
  *(float *)(a1 + 200) = v4;
  *(float *)(a1 + 204) = v5;
  float v6 = *(float *)(a1 + 128);
  *(float *)(a1 + 208) = v6;
  *(float *)(a1 + 216) = sqrtf((float)((float)(v5 * v5) + (float)(v4 * v4)) + (float)(v6 * v6));
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
  }
  int v7 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    double v8 = *(float *)(a1 + 200);
    double v9 = *(float *)(a1 + 204);
    double v10 = *(float *)(a1 + 208);
    int v11 = *(_DWORD *)(a1 + 20);
    int v12 = *(_DWORD *)(a1 + 224);
    int v13 = *(_DWORD *)(a1 + 168);
    int v14 = *(_DWORD *)(a1 + 172);
    int v15 = *(_DWORD *)(a1 + 176);
    int v16 = *(_DWORD *)(a1 + 236);
    int v17 = *(_DWORD *)(a1 + 240);
    *(_DWORD *)uint64_t buf = 134220544;
    double v21 = v8;
    __int16 v22 = 2048;
    double v23 = v9;
    __int16 v24 = 2048;
    double v25 = v10;
    __int16 v26 = 1024;
    int v27 = v11;
    __int16 v28 = 1024;
    int v29 = v12;
    __int16 v30 = 1024;
    int v31 = v13;
    __int16 v32 = 1024;
    int v33 = v14;
    __int16 v34 = 1024;
    int v35 = v15;
    __int16 v36 = 1024;
    int v37 = v16;
    __int16 v38 = 1024;
    int v39 = v17;
    __int16 v40 = 1024;
    int v41 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "set coasting vector (%.3f/%.3f/%.3f), levels (%d %d) conv(%d %d %d) age (%d) syncAge (%d) DueTo (%d)", buf, 0x50u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    unsigned int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::setCoastingVector(BOOL)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  *(_DWORD *)(a1 + 240) = 0;
  int v18 = *(_DWORD *)(a1 + 20);
  if (a2)
  {
    *(_DWORD *)(a1 + 224) = v18;
    sub_1003A7544((void *)(a1 + 1080));
    sub_1003A7544((void *)(a1 + 1008));
    sub_1003A7544((void *)(a1 + 1152));
    *(unsigned char *)(a1 + 59) = 1;
  }
  else
  {
    if (v18 > *(_DWORD *)(a1 + 224))
    {
      *(_DWORD *)(a1 + 236) = 0;
      *(_DWORD *)(a1 + 1608) = 0;
    }
    *(void *)(a1 + 264) = 0;
    *(_DWORD *)(a1 + 272) = 0;
    *(void *)(a1 + 288) = 0;
    *(_DWORD *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0;
    *(_WORD *)(a1 + 312) = 0;
    *(_DWORD *)(a1 + 224) = v18;
    sub_1003A7544((void *)(a1 + 1080));
    sub_1003A7544((void *)(a1 + 1008));
    sub_1003A7544((void *)(a1 + 1152));
  }
}

float sub_100AF109C(uint64_t a1, float *a2, float *a3, float *a4)
{
  sub_1001A44F4(a1 + 16, a2);
  sub_1001A44F4(a1 + 88, a3);

  return sub_1001A44F4(a1 + 160, a4);
}

void sub_100AF10F8(float64x2_t *a1, float *a2, float32x2_t *a3, int a4)
{
  BYTE5(a1[20].f64[1]) = 1;
  BYTE1(a1[3].f64[1]) = 0;
  LODWORD(a1[91].f64[1]) = a4;
  float v6 = a2[2];
  float v7 = a2[3];
  float v8 = a2[4];
  float v9 = (float)((float)(a3[6].f32[0] * v7) + (float)(v6 * a3[3].f32[0])) + (float)(v8 * a3[9].f32[0]);
  double v10 = a1 + 92;
  float32x2_t v18 = vmla_n_f32(vmla_n_f32(vmul_n_f32(a3[5], v7), a3[2], v6), a3[8], v8);
  bzero(&a1[92], 0x48uLL);
  a1[92] = vcvtq_f64_f32(*(float32x2_t *)&a1[4].f64[1]);
  a1[93].f64[0] = *(float *)a1[5].f64;
  *(float64x2_t *)((char *)v10 + 24) = vcvtq_f64_f32(*(float32x2_t *)&a1[6].f64[0]);
  a1[94].f64[1] = *(float *)&a1[6].f64[1];
  a1[95] = vcvtq_f64_f32(v18);
  a1[96].f64[0] = v9;
  bzero(*(void **)&a1[98].f64[0], 0x144uLL);
  float v11 = 9.0;
  if ((*(unsigned int (**)(float64x2_t *))(*(void *)&a1->f64[0] + 72))(a1))
  {
    int v12 = HIDWORD(a1[1].f64[0]);
    if (!LOBYTE(a1[1].f64[1])) {
      v12 *= v12;
    }
    float v11 = 9.0 / (float)v12;
  }
  float64_t v13 = a1[98].f64[0];
  **(float **)&float64_t v13 = v11;
  *(float *)(*(void *)&v13 + 40) = v11;
  *(float *)(*(void *)&v13 + 80) = v11;
  *(_DWORD *)(*(void *)&v13 + 120) = 869711765;
  *(_DWORD *)(*(void *)&v13 + 160) = 869711765;
  *(_DWORD *)(*(void *)&v13 + 200) = 869711765;
  *(float *)(*(void *)&v13 + 240) = v11;
  *(float *)(*(void *)&v13 + 280) = v11;
  *(float *)(*(void *)&v13 + 320) = v11;
  a1[32].f64[1] = a1[4].f64[1];
  LODWORD(a1[33].f64[0]) = LODWORD(a1[5].f64[0]);
  sub_100AF03FC((uint64_t)a1);
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
  }
  int v14 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    int v15 = HIDWORD(a1[1].f64[0]);
    int v16 = LOBYTE(a1[1].f64[1]);
    *(_DWORD *)uint64_t buf = 67109888;
    int v20 = v15;
    __int16 v21 = 1024;
    int v22 = a4;
    __int16 v23 = 1024;
    int v24 = v16;
    __int16 v25 = 2048;
    double v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "reset internal. levels-data(%d %d %d), pScale=%.3f ", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    int v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::resetInternal(const CLVector3d<float> &, const CLMatrix3d<float> &, CLMotionTypeCompassCalibrationLevel)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
}

void sub_100AF1464(uint64_t a1)
{
  *(unsigned char *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 320) = 3;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  bzero(*(void **)(a1 + 1576), 0x6CuLL);
  float v2 = *(_DWORD **)(a1 + 1576);
  *float v2 = 1065353216;
  v2[4] = 1065353216;
  v2[8] = 1065353216;
  *(unsigned char *)(a1 + 25) = 0;
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
  }
  int v3 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "compass calibrator reset", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    float v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::reset()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

float sub_100AF163C(uint64_t a1, float *a2, float32x2_t *a3)
{
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
  }
  float v6 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Resetting calibrator states.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    float64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::resetCalibration(const CLVector3d<float> &, const CLMatrix3d<float> &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  *(_WORD *)(a1 + 332) = 1;
  *(unsigned char *)(a1 + 57) = 1;
  *(unsigned char *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 236) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(void *)(a1 + 320) = 3;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(void *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(void *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  float v8 = a2[3];
  float v7 = a2[4];
  float v9 = a2[2];
  float v10 = (float)((float)(a3[6].f32[0] * v8) + (float)(v9 * a3[3].f32[0])) + (float)(v7 * a3[9].f32[0]);
  *(float32x2_t *)(a1 + 120) = vmla_n_f32(vmla_n_f32(vmul_n_f32(a3[5], v8), a3[2], v9), a3[8], v7);
  *(float *)(a1 + 128) = v10;
  bzero((void *)(a1 + 1472), 0x48uLL);
  *(float64x2_t *)(a1 + 1520) = vcvtq_f64_f32(*(float32x2_t *)(a1 + 120));
  *(double *)(a1 + 1536) = *(float *)(a1 + 128);
  bzero(*(void **)(a1 + 1568), 0x144uLL);
  float v11 = *(_DWORD **)(a1 + 1568);
  *float v11 = 1091567616;
  v11[10] = 1091567616;
  v11[20] = 1091567616;
  v11[30] = 869711765;
  v11[40] = 869711765;
  v11[50] = 869711765;
  v11[60] = 1091567616;
  v11[70] = 1091567616;
  v11[80] = 1091567616;
  return sub_100AF03FC(a1);
}

BOOL sub_100AF18E0(uint64_t a1, int a2, int a3, int a4, float *a5, float *a6, float a7, float a8, float a9, float a10, float a11, float a12, float a13)
{
  int v19 = *(_DWORD *)(a1 + 240);
  float v20 = (float)v19;
  float v21 = *(float *)(a1 + 16);
  double v22 = 0.0;
  if ((float)(v21 * 10.0) < (float)v19) {
    double v22 = 1.0;
  }
  unint64_t v23 = *(void *)(a1 + 1072);
  float v24 = 0.0;
  float v25 = 0.0;
  if (v23) {
    float v25 = *(float *)(a1 + 1024) / (float)v23;
  }
  double v26 = a7;
  unint64_t v27 = *(void *)(a1 + 1216);
  if (v27) {
    float v24 = *(float *)(a1 + 1168) / (float)v27;
  }
  double v28 = v22 * 0.1 + v26 * 0.16;
  unint64_t v29 = *(void *)(a1 + 1144);
  if (v29) {
    float v30 = *(float *)(a1 + 1096) / (float)v29;
  }
  else {
    float v30 = 0.0;
  }
  double v31 = (double)*(int *)(a1 + 232);
  float v32 = v28;
  double v33 = v21;
  if (round(v21 * 20.0) < v31)
  {
    float v34 = 0.1875;
    if (v32 >= 0.1875) {
      float v34 = v32;
    }
    if (v30 > v34 && *(float *)(a1 + 1224) < 13.75 && v25 < 27.5 && a2 && a4 && a3 && a11 < 78.0 && v25 * 0.9 < v24)
    {
      float v35 = a13;
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      __int16 v36 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
      {
        int v37 = *(_DWORD *)(a1 + 232);
        int v38 = *(_DWORD *)(a1 + 240);
        *(_DWORD *)uint64_t buf = 134219776;
        *(double *)double v123 = v30;
        *(_WORD *)&v123[8] = 2048;
        *(double *)&v123[10] = v24;
        *(_WORD *)&v123[18] = 2048;
        *(double *)&v123[20] = a9;
        *(_WORD *)&v123[28] = 2048;
        *(double *)&v123[30] = v35;
        *(_WORD *)&v123[38] = 2048;
        *(double *)&v123[40] = a12;
        *(_WORD *)&v123[48] = 2048;
        *(double *)&v123[50] = a11;
        *(_WORD *)&v123[58] = 1024;
        *(_DWORD *)&v123[60] = v37;
        *(_WORD *)&v123[64] = 1024;
        *(_DWORD *)&v123[66] = v38;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "Resync after long coasting with mag drift. mag/incDiffMean(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), Age(%d,%d)", buf, 0x4Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
        }
        __int16 v120 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::resync(float, BOOL, BOOL, BOOL, float, float, float, const CLVector3d<float> &, float, float, float, const CLVector3d<float> &)", "%s\n", v120);
        if (v120 != (char *)buf) {
          free(v120);
        }
      }
      *(unsigned char *)(a1 + 185) = 1;
      if (!*(unsigned char *)(a1 + 333)) {
        sub_100AF10F8((float64x2_t *)a1, a5, (float32x2_t *)(a1 + 336), 3);
      }
      return 0;
    }
  }
  if (a9 <= 5.0 && *(float *)(a1 + 1224) <= 13.75) {
    goto LABEL_89;
  }
  if (v25 <= 4.0 || !a3) {
    goto LABEL_89;
  }
  BOOL v39 = v30 >= v32 || a4 == 0;
  if (v39 || a2 == 0) {
    goto LABEL_89;
  }
  float v41 = v26 * 2.0 + 4.0;
  if (v41 < a10 || v24 > v41)
  {
    float v43 = v21 + v21;
    BOOL v47 = v30 < 0.1 && v43 < v20 || (float)(v21 * 10.0) < v20 || *(unsigned char *)(a1 + 184) != 0;
    float v46 = *(float *)(a1 + 1224);
    BOOL v48 = v46 >= 27.5;
    if (vabds_f32(v46, a9) < 5.0) {
      BOOL v48 = 0;
    }
    if (v47 && !v48 || v25 * 0.9 < v24 && (v43 < v20 || v21 < v20 && a9 * 0.95 < a10) && v25 > v46 && v46 < 27.5) {
      goto LABEL_57;
    }
LABEL_89:
    if ((-858993459 * *(_DWORD *)(a1 + 324) + 429496729) > 0x33333332) {
      return 0;
    }
    float v76 = a13;
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    double v77 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v78 = *(void *)(a1 + 1072);
      double v79 = 0.0;
      double v80 = 0.0;
      if (v78 >= 2)
      {
        float v81 = (float)((float)v78 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024));
        double v80 = 0.0;
        if (v81 >= 0.0) {
          double v80 = (float)(v81 / (float)((v78 - 1) * v78));
        }
      }
      unint64_t v82 = *(void *)(a1 + 1144);
      if (v82 >= 2)
      {
        float v83 = (float)((float)v82 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
        if (v83 >= 0.0) {
          double v79 = (float)(v83 / (float)((v82 - 1) * v82));
        }
      }
      int v84 = *(_DWORD *)(a1 + 248);
      double v85 = *(float *)(a1 + 200);
      double v86 = *(float *)(a1 + 204);
      double v87 = *(float *)(a1 + 208);
      double v88 = a6[2];
      double v89 = a6[3];
      double v90 = a6[4];
      double v91 = a5[2];
      double v92 = a5[3];
      double v93 = a5[4];
      unint64_t v94 = *(void *)(a1 + 1216);
      double v95 = 0.0;
      if (v94 >= 2)
      {
        float v96 = (float)((float)v94 * *(float *)(a1 + 1172)) - (float)(*(float *)(a1 + 1168) * *(float *)(a1 + 1168));
        if (v96 >= 0.0) {
          double v95 = (float)(v96 / (float)((v94 - 1) * v94));
        }
      }
      int v98 = *(_DWORD *)(a1 + 236);
      int v97 = *(_DWORD *)(a1 + 240);
      double v99 = *(float *)(a1 + 216);
      int v100 = *(_DWORD *)(a1 + 232);
      *(_DWORD *)uint64_t buf = 67115008;
      *(_DWORD *)double v123 = v84;
      *(_WORD *)&v123[4] = 2048;
      *(double *)&v123[6] = a8;
      *(_WORD *)&v123[14] = 2048;
      *(double *)&v123[16] = v85;
      *(_WORD *)&v123[24] = 2048;
      *(double *)&v123[26] = v86;
      *(_WORD *)&v123[34] = 2048;
      *(double *)&v123[36] = v87;
      *(_WORD *)&v123[44] = 2048;
      *(double *)&v123[46] = v88;
      *(_WORD *)&v123[54] = 2048;
      *(double *)&v123[56] = v89;
      *(_WORD *)&v123[64] = 2048;
      *(double *)&v123[66] = v90;
      *(_WORD *)&v123[74] = 2048;
      *(double *)&v123[76] = v91;
      *(_WORD *)&v123[84] = 2048;
      *(double *)&v123[86] = v92;
      *(_WORD *)&v123[94] = 2048;
      *(double *)&v123[96] = v93;
      *(_WORD *)&v123[104] = 2048;
      *(double *)&v123[106] = v25;
      *(_WORD *)&v123[114] = 2048;
      *(double *)&v123[116] = v80;
      *(_WORD *)&v123[124] = 2048;
      *(double *)&v123[126] = v30;
      *(_WORD *)&v123[134] = 2048;
      *(double *)&v123[136] = v79;
      *(_WORD *)&v123[144] = 2048;
      *(double *)&v123[146] = v24;
      *(_WORD *)&v123[154] = 2048;
      *(double *)&v123[156] = v95;
      *(_WORD *)&v123[164] = 2048;
      *(double *)&v123[166] = a9;
      *(_WORD *)&v123[174] = 2048;
      *(double *)&v123[176] = v76;
      *(_WORD *)&v123[184] = 2048;
      *(double *)&v123[186] = (float)(a11 - a12);
      *(_WORD *)&v123[194] = 2048;
      *(double *)&v123[196] = v99;
      *(_WORD *)&v123[204] = 1024;
      *(_DWORD *)&v123[206] = v98;
      __int16 v124 = 1024;
      int v125 = v97;
      __int16 v126 = 1024;
      int v127 = v100;
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "numBad(%d), delH(%.3f), coastVec(%.3f/%.3f/%.3f), expectedVec(%.3f/%.3f/%.3f), calibrated(%.3f/%.3f/%.3f), angleDiff(%.3f/%.3f), magDiff(%.3f/%.4f), incDiff(%.3f/%.3f), measure(%.3f/%.3f/%.3f), coasting(%.3f/%d/%d), coastingCount(%d)", buf, 0xE2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 == -1) {
        goto LABEL_141;
      }
      goto LABEL_155;
    }
    return result;
  }
  float v46 = *(float *)(a1 + 1224);
LABEL_57:
  if (v46 < 27.5 || v46 < a9) {
    goto LABEL_63;
  }
  double v49 = 0.0;
  if (v33 * 3.0 < v31) {
    double v49 = 1.0;
  }
  if (v46 < (float)(a9 * 4.0) && v49 * 10.0 + 80.0 > v46)
  {
LABEL_63:
    *(unsigned char *)(a1 + 185) = 1;
    if (!*(unsigned char *)(a1 + 333) && *(unsigned char *)(a1 + 184) && v25 < 27.5 && v30 < 0.15 && v24 < 5.0)
    {
      float v101 = a13;
      sub_100AF10F8((float64x2_t *)a1, a5, (float32x2_t *)(a1 + 336), 3);
      a13 = v101;
      int v19 = *(_DWORD *)(a1 + 240);
      double v33 = *(float *)(a1 + 16);
    }
    if (v33 * 1.5 >= (double)v19 && ((int v50 = *(_DWORD *)(a1 + 304)) != 0 || *(unsigned char *)(a1 + 312)))
    {
      float v51 = *(float *)(a1 + 308);
      float v52 = fabsf(v51);
      float v53 = v51 + a8;
      *(float *)(a1 + 308) = v53;
      float v54 = fabsf(v53);
      if (v54 > (float)(v52 + 5.0))
      {
        *(_DWORD *)(a1 + 304) = v50 + 1;
        if (v50 >= 1 && v54 < (float)((float)(v50 + 1) * 5.0))
        {
          *(void *)(a1 + 264) = 0;
          *(_DWORD *)(a1 + 272) = 0;
          *(void *)(a1 + 288) = 0;
          *(_DWORD *)(a1 + 296) = 0;
          *(void *)(a1 + 304) = 0;
          *(_WORD *)(a1 + 312) = 0;
        }
      }
    }
    else
    {
      *(void *)(a1 + 264) = *(void *)(a1 + 72);
      *(_DWORD *)(a1 + 272) = *(_DWORD *)(a1 + 80);
      *(void *)(a1 + 288) = *(void *)(a1 + 200);
      *(_DWORD *)(a1 + 296) = *(_DWORD *)(a1 + 208);
      *(_DWORD *)(a1 + 316) = *(_DWORD *)(a1 + 324);
      *(_DWORD *)(a1 + 304) = 0;
      *(_WORD *)(a1 + 312) = 1;
      *(float *)(a1 + 308) = a8;
    }
    float v55 = a13;
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    uint64_t v56 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v57 = *(void *)(a1 + 1072);
      double v58 = 0.0;
      double v59 = 0.0;
      if (v57 >= 2)
      {
        float v60 = (float)((float)v57 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024));
        double v59 = 0.0;
        if (v60 >= 0.0) {
          double v59 = (float)(v60 / (float)((v57 - 1) * v57));
        }
      }
      unint64_t v61 = *(void *)(a1 + 1144);
      if (v61 >= 2)
      {
        float v62 = (float)((float)v61 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
        if (v62 >= 0.0) {
          double v58 = (float)(v62 / (float)((v61 - 1) * v61));
        }
      }
      int v63 = *(_DWORD *)(a1 + 248);
      int v64 = *(_DWORD *)(a1 + 304);
      double v65 = *(float *)(a1 + 308);
      double v66 = a6[2];
      double v67 = a6[3];
      double v68 = a6[4];
      double v69 = a5[2];
      double v70 = a5[3];
      double v71 = a5[4];
      unint64_t v72 = *(void *)(a1 + 1216);
      double v73 = 0.0;
      if (v72 >= 2)
      {
        float v110 = (float)((float)v72 * *(float *)(a1 + 1172)) - (float)(*(float *)(a1 + 1168) * *(float *)(a1 + 1168));
        float v74 = v55;
        if (v110 >= 0.0) {
          double v73 = (float)(v110 / (float)((v72 - 1) * v72));
        }
      }
      else
      {
        float v74 = v55;
      }
      double v111 = *(float *)(a1 + 216);
      float v112 = (float)(*(_DWORD *)(a1 + 324) - *(_DWORD *)(a1 + 316));
      int v114 = *(_DWORD *)(a1 + 236);
      int v113 = *(_DWORD *)(a1 + 240);
      int v115 = *(_DWORD *)(a1 + 232);
      *(_DWORD *)uint64_t buf = 67115520;
      float v116 = *(float *)(a1 + 16);
      *(_DWORD *)double v123 = v63;
      *(_WORD *)&v123[4] = 2048;
      *(double *)&v123[6] = v26;
      *(_WORD *)&v123[14] = 2048;
      *(double *)&v123[16] = a8;
      *(_WORD *)&v123[24] = 1024;
      *(_DWORD *)&v123[26] = v64;
      *(_WORD *)&v123[30] = 2048;
      *(double *)&v123[32] = v65;
      *(_WORD *)&v123[40] = 2048;
      *(double *)&v123[42] = v66;
      *(_WORD *)&v123[50] = 2048;
      *(double *)&v123[52] = v67;
      *(_WORD *)&v123[60] = 2048;
      *(double *)&v123[62] = v68;
      *(_WORD *)&v123[70] = 2048;
      *(double *)&v123[72] = v69;
      *(_WORD *)&v123[80] = 2048;
      *(double *)&v123[82] = v70;
      *(_WORD *)&v123[90] = 2048;
      *(double *)&v123[92] = v71;
      *(_WORD *)&v123[100] = 2048;
      *(double *)&v123[102] = v25;
      *(_WORD *)&v123[110] = 2048;
      *(double *)&v123[112] = v59;
      *(_WORD *)&v123[120] = 2048;
      *(double *)&v123[122] = v30;
      *(_WORD *)&v123[130] = 2048;
      *(double *)&v123[132] = v58;
      *(_WORD *)&v123[140] = 2048;
      *(double *)&v123[142] = v24;
      *(_WORD *)&v123[150] = 2048;
      *(double *)&v123[152] = v73;
      *(_WORD *)&v123[160] = 2048;
      *(double *)&v123[162] = a9;
      *(_WORD *)&v123[170] = 2048;
      *(double *)&v123[172] = v74;
      *(_WORD *)&v123[180] = 2048;
      *(double *)&v123[182] = (float)(a11 - a12);
      *(_WORD *)&v123[190] = 2048;
      *(double *)&v123[192] = a12;
      *(_WORD *)&v123[200] = 2048;
      *(double *)&v123[202] = v111;
      __int16 v124 = 1024;
      int v125 = v114;
      __int16 v126 = 1024;
      int v127 = v113;
      __int16 v128 = 1024;
      int v129 = v115;
      __int16 v130 = 2048;
      double v131 = (float)(v112 / v116);
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "DRIFT DETECTED. numBad=%d,s=%.3f,delH(%.3f,%d,%.3f), expectedVec (%.3f/%.3f/%.3f), calibrated(%.3f/%.3f/%.3f), angleDiff(%.3f/%.3f), magDiff(%.3f/%.4f), incDiff(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), coasting(%.3f/%d/%d), coastingCount(%d),deltaTime(%.3f)", buf, 0xF2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 == -1)
    {
LABEL_141:
      double v117 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::resync(float, BOOL, BOOL, BOOL, float, float, float, const CLVector3d<float> &, float, float, float, const CLVector3d<float> &)", "%s\n", v117);
      if (v117 != (char *)buf) {
        free(v117);
      }
      return 0;
    }
LABEL_155:
    dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    goto LABEL_141;
  }
  float v102 = a13;
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
  }
  uint64_t v103 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    int v104 = *(unsigned __int8 *)(a1 + 312);
    int v105 = *(_DWORD *)(a1 + 240);
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)double v123 = v104;
    *(_WORD *)&v123[4] = 1024;
    *(_DWORD *)&v123[6] = v105;
    _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEBUG, "fBackupInfoSet(%d), syncAge(%d)", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    __int16 v118 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::resync(float, BOOL, BOOL, BOOL, float, float, float, const CLVector3d<float> &, float, float, float, const CLVector3d<float> &)", "%s\n", v118);
    if (v118 != (char *)buf) {
      free(v118);
    }
  }
  if (*(unsigned char *)(a1 + 312)
    && *(float *)(a1 + 16) * 1.5 > (double)*(int *)(a1 + 240)
    && *(float *)(a1 + 1224) > 80.0
    && a12 > 78.0
    && *(int *)(a1 + 248) >= 5)
  {
    *(unsigned char *)(a1 + 185) = 1;
    *(unsigned char *)(a1 + 313) = 1;
    *(_DWORD *)(a1 + 248) = 0;
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    v106 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEBUG, "Likely bad resync. Backup.", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 == -1) {
        goto LABEL_141;
      }
      goto LABEL_155;
    }
  }
  else
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    unint64_t v107 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      int v108 = *(_DWORD *)(a1 + 248);
      int v109 = *(_DWORD *)(a1 + 240);
      *(_DWORD *)uint64_t buf = 67110912;
      *(_DWORD *)double v123 = v108;
      *(_WORD *)&v123[4] = 2048;
      *(double *)&v123[6] = v30;
      *(_WORD *)&v123[14] = 2048;
      *(double *)&v123[16] = v24;
      *(_WORD *)&v123[24] = 2048;
      *(double *)&v123[26] = a9;
      *(_WORD *)&v123[34] = 2048;
      *(double *)&v123[36] = v102;
      *(_WORD *)&v123[44] = 2048;
      *(double *)&v123[46] = a12;
      *(_WORD *)&v123[54] = 2048;
      *(double *)&v123[56] = a11;
      *(_WORD *)&v123[64] = 1024;
      *(_DWORD *)&v123[66] = v109;
      _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEBUG, "RESYNC Rejected. numBad=%d,mag/incDiffMean(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), syncAge(%d)", buf, 0x4Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      uint64_t v119 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::resync(float, BOOL, BOOL, BOOL, float, float, float, const CLVector3d<float> &, float, float, float, const CLVector3d<float> &)", "%s\n", v119);
      if (v119 != (char *)buf) {
        free(v119);
      }
    }
    return 1;
  }
  return result;
}

BOOL sub_100AF2EF8(uint64_t a1, float *a2, float *a3, int a4, int a5)
{
  float v5 = (int *)(a1 + 20);
  if (*(int *)(a1 + 20) <= 3) {
    int v6 = 3;
  }
  else {
    int v6 = *(_DWORD *)(a1 + 20);
  }
  float v7 = *(float *)(a1 + 216);
  if (v7 > 0.0)
  {
    float v140 = vabds_f32(v7, sqrtf((float)((float)(a2[3] * a2[3]) + (float)(a2[2] * a2[2])) + (float)(a2[4] * a2[4]))) / v7;
    sub_1001A44F4(a1 + 1080, &v140);
    float v13 = (double)(5 - v6) * 0.25 + 1.5;
    if (v140 > (float)((float)(v13 * 10.0) * 0.1875))
    {
      if (*(unsigned char *)(a1 + 184)) {
        ++*(_DWORD *)(a1 + 232);
      }
      else {
        sub_100AF48DC(a1);
      }
      unint64_t v42 = *(void *)(a1 + 1144);
      if (v42)
      {
        if ((float v43 = *(float *)(a1 + 1096) / (float)v42, v43 > 5.0)
          && roundf(*(float *)(a1 + 16) * 30.0) < (float)*(int *)(a1 + 232)
          || v43 > 10.0 && roundf(*(float *)(a1 + 16) * 10.0) < (float)*(int *)(a1 + 232))
        {
          (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
          if (qword_1024190A0 != -1) {
            dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
          }
          uint64_t v44 = qword_1024190A8;
          if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "Prolonged high magDiff. Likely bad calibration. Resetting.", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190A0 != -1) {
              dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
            }
            LOWORD(v141) = 0;
            __int16 v122 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "%s\n", v122);
            if (v122 != (char *)buf) {
              free(v122);
            }
          }
        }
      }
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      unint64_t v45 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
      {
        float v46 = a2[2];
        float v47 = a2[3];
        float v48 = a2[4];
        double v49 = sqrtf((float)((float)(v47 * v47) + (float)(v46 * v46)) + (float)(v48 * v48));
        double v50 = v46;
        double v51 = v47;
        double v52 = v48;
        double v53 = *(float *)(a1 + 200);
        double v54 = *(float *)(a1 + 204);
        double v55 = *(float *)(a1 + 208);
        double v56 = (float)((float)*(int *)(a1 + 232) / *(float *)(a1 + 16));
        unint64_t v57 = *(void *)(a1 + 1144);
        double v58 = 0.0;
        if (v57 >= 2)
        {
          float v59 = (float)((float)v57 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
          uint64_t v60 = (v57 - 1) * v57;
          if (v59 >= 0.0) {
            double v58 = (float)(v59 / (float)(unint64_t)v60);
          }
          else {
            double v58 = 0.0;
          }
        }
        int v61 = *(unsigned __int8 *)(a1 + 333);
        *(_DWORD *)uint64_t buf = 134220544;
        double v156 = v140;
        __int16 v157 = 2048;
        *(double *)v158 = v49;
        *(_WORD *)&v158[8] = 2048;
        *(double *)&v158[10] = v50;
        *(_WORD *)&v158[18] = 2048;
        *(double *)&v158[20] = v51;
        *(_WORD *)&v158[28] = 2048;
        *(double *)&v158[30] = v52;
        *(_WORD *)&v158[38] = 2048;
        *(double *)v159 = v53;
        *(_WORD *)&v159[8] = 2048;
        double v160 = v54;
        __int16 v161 = 2048;
        double v162 = v55;
        __int16 v163 = 2048;
        double v164 = v56;
        __int16 v165 = 2048;
        double v166 = v58;
        __int16 v167 = 1024;
        int v168 = v61;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "Extremely high magnitude.  magDiff (%.3f), magnitude (%.3f), calibrated (%.3f/%.3f/%.3f), coastVector (%.3f/%.3f/%.3f),coastingTime,%.3f,magDiffVar,%.3f,resetInternal,%d", buf, 0x6Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
        }
        float v105 = a2[2];
        float v106 = a2[3];
        float v107 = a2[4];
        double v108 = sqrtf((float)((float)(v106 * v106) + (float)(v105 * v105)) + (float)(v107 * v107));
        double v109 = v105;
        double v110 = v106;
        double v111 = v107;
        double v112 = *(float *)(a1 + 200);
        double v113 = *(float *)(a1 + 204);
        double v114 = *(float *)(a1 + 208);
        double v115 = (float)((float)*(int *)(a1 + 232) / *(float *)(a1 + 16));
        unint64_t v116 = *(void *)(a1 + 1144);
        double v117 = 0.0;
        if (v116 >= 2)
        {
          float v118 = (float)((float)v116 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
          uint64_t v119 = (v116 - 1) * v116;
          if (v118 >= 0.0) {
            double v117 = (float)(v118 / (float)(unint64_t)v119);
          }
          else {
            double v117 = 0.0;
          }
        }
        int v120 = *(unsigned __int8 *)(a1 + 333);
        int v141 = 134220544;
        double v142 = v140;
        __int16 v143 = 2048;
        *(double *)v144 = v108;
        *(_WORD *)&v144[8] = 2048;
        *(double *)&v144[10] = v109;
        *(_WORD *)&v144[18] = 2048;
        *(double *)&v144[20] = v110;
        *(_WORD *)&v144[28] = 2048;
        *(double *)&v144[30] = v111;
        *(_WORD *)&v144[38] = 2048;
        *(double *)v145 = v112;
        *(_WORD *)&v145[8] = 2048;
        double v146 = v113;
        __int16 v147 = 2048;
        double v148 = v114;
        __int16 v149 = 2048;
        double v150 = v115;
        __int16 v151 = 2048;
        double v152 = v117;
        __int16 v153 = 1024;
        int v154 = v120;
        uint64_t v121 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "%s\n", v121);
        if (v121 != (char *)buf) {
          free(v121);
        }
      }
      return 1;
    }
    float v17 = *(float *)(a1 + 200);
    float v18 = *(float *)(a1 + 204);
    float v19 = *(float *)(a1 + 208);
    float v20 = (float)((float)(v18 * *(float *)(a1 + 356)) + (float)(v17 * *(float *)(a1 + 352)))
        + (float)(v19 * *(float *)(a1 + 360));
    float v21 = (float)((float)(v18 * *(float *)(a1 + 380)) + (float)(v17 * *(float *)(a1 + 376)))
        + (float)(v19 * *(float *)(a1 + 384));
    float v22 = (float)((float)(v18 * *(float *)(a1 + 404)) + (float)(v17 * *(float *)(a1 + 400)))
        + (float)(v19 * *(float *)(a1 + 408));
    __int16 v136 = off_1022AD5D0;
    float v137 = v20;
    float v138 = v21;
    float v139 = v22;
    float v135 = sub_100A6E208(a2, (float *)&v136) * 57.296;
    float v23 = 90.0 - sub_100A6E208(a2, a3) * 57.2957795;
    float v24 = 90.0 - sub_100A6E208((float *)&v136, a3) * 57.2957795;
    float v134 = vabds_f32(v23, v24);
    sub_1001A44F4(a1 + 1008, &v135);
    sub_1001A44F4(a1 + 1152, &v134);
    *(_DWORD *)(a1 + 1224) = 0;
    uint64_t v133 = 0;
    float v25 = 0.0;
    if (sub_100A639C8((float *)&v136, a3, (float *)&v133) && sub_100A639C8(a2, a3, (float *)&v133 + 1))
    {
      float v25 = *((float *)&v133 + 1) - *(float *)&v133;
      float v26 = vabds_f32(*((float *)&v133 + 1), *(float *)&v133);
      *(float *)(a1 + 1224) = v26;
      if (v26 > 180.0)
      {
        float v27 = 360.0 - v26;
        *(float *)(a1 + 1224) = v27;
        if (v25 < 0.0) {
          float v25 = -v27;
        }
        else {
          float v25 = v27;
        }
      }
    }
    if (*v5 < 2 || (a5 & 1) == 0 && ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 80))(a1) & a4) != 1) {
      return !*(unsigned char *)(a1 + 333) && *(unsigned char *)(a1 + 184) && v140 > (float)((float)(v13 + 1.0) * 0.1875);
    }
    *(unsigned char *)(a1 + 185) = 0;
    unint64_t v28 = *(void *)(a1 + 1216);
    float v29 = 0.0;
    float v30 = 0.0;
    if (v28 >= 2)
    {
      float v31 = (float)((float)v28 * *(float *)(a1 + 1172)) - (float)(*(float *)(a1 + 1168) * *(float *)(a1 + 1168));
      uint64_t v32 = (v28 - 1) * v28;
      if (v31 >= 0.0) {
        float v30 = v31 / (float)(unint64_t)v32;
      }
      else {
        float v30 = 0.0;
      }
    }
    unint64_t v33 = *(void *)(a1 + 1072);
    if (v33 >= 2)
    {
      float v34 = (float)((float)v33 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024));
      uint64_t v35 = (v33 - 1) * v33;
      if (v34 >= 0.0) {
        float v29 = v34 / (float)(unint64_t)v35;
      }
      else {
        float v29 = 0.0;
      }
    }
    unint64_t v36 = *(void *)(a1 + 1144);
    float v37 = 0.0;
    if (v36 >= 2)
    {
      float v38 = (float)((float)v36 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
      if (v38 >= 0.0) {
        float v37 = v38 / (float)((v36 - 1) * v36);
      }
    }
    float v39 = v13 * 0.0032;
    float v40 = *(float *)(a1 + 1224);
    if (*(unsigned char *)(a1 + 252)
      && v40 > 27.5
      && v37 <= v39
      && (!v36 || (float)(*(float *)(a1 + 1096) / (float)v36) < 0.45))
    {
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      float v41 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "Likely bad database lookup. Resetting. ", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
        }
        LOWORD(v141) = 0;
        __int16 v126 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "%s\n", v126);
        if (v126 != (char *)buf) {
          free(v126);
        }
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
      return 1;
    }
    int v62 = *(_DWORD *)(a1 + 248);
    if (v40 <= 80.0)
    {
      if (v62 < 1) {
        goto LABEL_74;
      }
      int v63 = -1;
    }
    else
    {
      int v63 = 1;
    }
    *(_DWORD *)(a1 + 248) = v62 + v63;
LABEL_74:
    float v131 = v30;
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    float v132 = v13 * 13.0;
    int v64 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      int v65 = *(_DWORD *)(a1 + 236);
      int v66 = *(_DWORD *)(a1 + 248);
      *(_DWORD *)uint64_t buf = 134219776;
      double v156 = v13;
      __int16 v157 = 1024;
      *(_DWORD *)v158 = v65;
      *(_WORD *)&v158[4] = 2048;
      *(double *)&v158[6] = v140;
      *(_WORD *)&v158[14] = 2048;
      *(double *)&v158[16] = v25;
      *(_WORD *)&v158[24] = 2048;
      *(double *)&v158[26] = v135;
      *(_WORD *)&v158[34] = 1024;
      *(_DWORD *)&v158[36] = v66;
      *(_WORD *)v159 = 2048;
      *(double *)&v159[2] = v23;
      LOWORD(v160) = 1024;
      *(_DWORD *)((char *)&v160 + 2) = v131 < v132;
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "******* scale(%.3f),cAge(%d), magDiff(%.3f), dHeading(%.3f), deltaAngle(%.3f), numBad(%d), calInc(%.3f), incDiffIsStable(%d)", buf, 0x46u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      int v123 = *(_DWORD *)(a1 + 236);
      int v124 = *(_DWORD *)(a1 + 248);
      int v141 = 134219776;
      double v142 = v13;
      __int16 v143 = 1024;
      *(_DWORD *)v144 = v123;
      *(_WORD *)&v144[4] = 2048;
      *(double *)&v144[6] = v140;
      *(_WORD *)&v144[14] = 2048;
      *(double *)&v144[16] = v25;
      *(_WORD *)&v144[24] = 2048;
      *(double *)&v144[26] = v135;
      *(_WORD *)&v144[34] = 1024;
      *(_DWORD *)&v144[36] = v124;
      *(_WORD *)v145 = 2048;
      *(double *)&v145[2] = v23;
      LOWORD(v146) = 1024;
      *(_DWORD *)((char *)&v146 + 2) = v131 < v132;
      int v125 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "%s\n", v125);
      if (v125 != (char *)buf) {
        free(v125);
      }
    }
    double v67 = v132;
    double v68 = v29;
    double v69 = v132 * 1.5;
    if (a5)
    {
      if (*(float *)(a1 + 16) < (float)(*(_DWORD *)(a1 + 324) - *(_DWORD *)(a1 + 328)))
      {
        LODWORD(v67) = *(_DWORD *)(a1 + 1216);
        if (round((double)*(unint64_t *)(a1 + 1160) * 0.5) < (double)*(unint64_t *)&v67)
        {
          double v70 = v68;
          *(_DWORD *)(a1 + 328) = 0;
          sub_100AF18E0(a1, v131 < v132, v69 > v68, v37 <= v39, a2, (float *)&v136, v13, v25, v135, v134, v23, v24, v140);
          double v68 = v70;
          if (*(unsigned char *)(a1 + 313)) {
            return 0;
          }
        }
      }
    }
    float v71 = *(float *)(a1 + 16);
    unint64_t v72 = *(void *)(a1 + 1072);
    float v73 = 0.0;
    float v74 = 0.0;
    if (v72) {
      float v74 = *(float *)(a1 + 1024) / (float)v72;
    }
    double v75 = v71;
    unint64_t v76 = *(void *)(a1 + 1144);
    if (v76) {
      float v73 = *(float *)(a1 + 1096) / (float)v76;
    }
    double v77 = (double)*(int *)(a1 + 236);
    double v78 = v75 * 2.0 + 40.0;
    if (*(unsigned char *)(a1 + 185))
    {
      if (!*(unsigned char *)(a1 + 184)) {
        return !*(unsigned char *)(a1 + 333) && *(unsigned char *)(a1 + 184) && v140 > (float)((float)(v13 + 1.0) * 0.1875);
      }
      float v79 = v13 * 13.75;
      float v80 = v13 * 0.1875;
LABEL_98:
      int v82 = *(_DWORD *)(a1 + 232) + 1;
      *(_DWORD *)(a1 + 232) = v82;
      if (v73 <= v80 && v37 <= v39)
      {
        if (v74 <= v79)
        {
          if (v69 > v68)
          {
LABEL_107:
            if (qword_1024190A0 != -1) {
              dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
            }
            double v85 = qword_1024190A8;
            if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "Interference is gone.", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024190A0 != -1) {
                dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
              }
              LOWORD(v141) = 0;
              int v127 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "%s\n", v127);
              if (v127 != (char *)buf) {
                free(v127);
              }
            }
            sub_100AF4AA4(a1);
            if (*(unsigned char *)(a1 + 333) && *(int *)(a1 + 1592) <= 2)
            {
              int v86 = 0;
              float v5 = (int *)(a1 + 1464);
LABEL_126:
              sub_100AF10F8((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), *v5);
              goto LABEL_131;
            }
            int v86 = 0;
            goto LABEL_131;
          }
        }
        else if (*(float *)(a1 + 1224) < v79 && v69 > v68)
        {
          goto LABEL_107;
        }
      }
      if (*(unsigned char *)(a1 + 333))
      {
        int v86 = 1;
        goto LABEL_131;
      }
      if (roundf(v71 * 10.0) < (float)v82
        || v78 >= v77
        || (int v86 = 1, v23 < 78.0) && v131 < v132 && v73 < 0.45 && v74 > v79 && *(float *)(a1 + 1224) > 80.0)
      {
        sub_100AF0674((void *)(a1 + 1232));
        int v86 = 1;
        goto LABEL_126;
      }
LABEL_131:
      if (!*(unsigned char *)(a1 + 333)) {
        goto LABEL_183;
      }
      return !*(unsigned char *)(a1 + 333) && *(unsigned char *)(a1 + 184) && v140 > (float)((float)(v13 + 1.0) * 0.1875);
    }
    float v81 = *(float *)(a1 + 1224);
    if (v81 > 80.0
      && v24 > 78.0
      && v71 < (float)*(int *)(a1 + 248)
      && v74 > 13.75
      && v73 < 0.45
      && (v75 * 3.5 < (double)*(int *)(a1 + 240) || v78 >= v77))
    {
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      double v92 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEBUG, "Steep inclination. Likely bad interference or bad database lookup. Resetting. ", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
        }
        LOWORD(v141) = 0;
        __int16 v128 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "%s\n", v128);
        if (v128 != (char *)buf) {
          free(v128);
        }
      }
      *(_DWORD *)(a1 + 248) = 0;
      (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
      return 1;
    }
    float v79 = v13 * 13.75;
    float v80 = v13 * 0.1875;
    if (*(unsigned char *)(a1 + 184)) {
      goto LABEL_98;
    }
    if (v81 <= 13.75 && v140 <= 0.45)
    {
LABEL_129:
      int v86 = 0;
      goto LABEL_142;
    }
    float v87 = v13 + 0.8;
    if (v135 < (float)(v87 * 13.75) && (v135 <= 13.75 || v140 < (float)(v87 * 0.1875)))
    {
      if (v140 > v80) {
        int v93 = 1;
      }
      else {
        int v93 = a5;
      }
      int v94 = *(_DWORD *)(a1 + 228);
      if (v135 <= v79 || !v93)
      {
        BOOL v103 = __OFSUB__(v94, 1);
        int v104 = v94 - 1;
        if (v104 < 0 == v103)
        {
          int v86 = 0;
          *(_DWORD *)(a1 + 228) = v104;
          goto LABEL_142;
        }
        goto LABEL_129;
      }
      *(_DWORD *)(a1 + 228) = v94 + 1;
      int v95 = *(unsigned __int8 *)(a1 + 333);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      float v96 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 134218752;
        double v156 = v135;
        __int16 v157 = 2048;
        *(double *)v158 = v25;
        *(_WORD *)&v158[8] = 2048;
        *(double *)&v158[10] = v140;
        *(_WORD *)&v158[18] = 2048;
        *(double *)&v158[20] = v134;
        _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEBUG, "**INTERFERENCE-0 dAngle=%.3f,dHeading=%.3f,magDiff=%.3f,incDiff=%.3f", buf, 0x2Au);
      }
      int v86 = v95 ^ 1;
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
        }
        int v141 = 134218752;
        double v142 = v135;
        __int16 v143 = 2048;
        *(double *)v144 = v25;
        *(_WORD *)&v144[8] = 2048;
        *(double *)&v144[10] = v140;
        *(_WORD *)&v144[18] = 2048;
        *(double *)&v144[20] = v134;
        int v97 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "%s\n", v97);
        if (v97 != (char *)buf) {
          free(v97);
        }
      }
    }
    else
    {
      *(_DWORD *)(a1 + 228) += 5;
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      double v88 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 134218752;
        double v156 = v135;
        __int16 v157 = 2048;
        *(double *)v158 = v25;
        *(_WORD *)&v158[8] = 2048;
        *(double *)&v158[10] = v140;
        *(_WORD *)&v158[18] = 2048;
        *(double *)&v158[20] = v134;
        _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEBUG, "**INTERFERENCE-1 dAngle=%.3f,dHeading=%.3f,magDiff=%.3f,incDiff=%.3f", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
        }
        int v141 = 134218752;
        double v142 = v135;
        __int16 v143 = 2048;
        *(double *)v144 = v25;
        *(_WORD *)&v144[8] = 2048;
        *(double *)&v144[10] = v140;
        *(_WORD *)&v144[18] = 2048;
        *(double *)&v144[20] = v134;
        int v129 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "%s\n", v129);
        if (v129 != (char *)buf) {
          free(v129);
        }
      }
      int v86 = 1;
    }
LABEL_142:
    BOOL v89 = 0;
    float v90 = (float)(v13 * 4.0) * 13.75;
    int v91 = *(_DWORD *)(a1 + 228);
    if (*(unsigned char *)(a1 + 24) && v91 >= 2) {
      BOOL v89 = (v135 > v90 || *(float *)(a1 + 1224) > 32.0) && v140 < 1.12499997;
    }
    if (v91 > 40 || (v135 <= v90 ? (BOOL v98 = !v89) : (BOOL v98 = 0), !v98))
    {
      BOOL v99 = !v89;
      if (*(unsigned char *)(a1 + 24)) {
        BOOL v99 = 0;
      }
      if (v99
        || (int v100 = *(_DWORD *)(a1 + 236), v101 = *(float *)(a1 + 16), v101 * 0.25 <= (double)v100)
        && ((float)(v101 * 10.0) <= (float)v100 || v101 >= (float)*(int *)(a1 + 248) || v23 >= 78.0 || v131 >= v132))
      {
        sub_100AF48DC(a1);
        *(_DWORD *)(a1 + 228) = 0;
        return 1;
      }
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      float v102 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEBUG, "Likely bad database lookup. Resetting. ", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
        }
        LOWORD(v141) = 0;
        __int16 v130 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "%s\n", v130);
        if (v130 != (char *)buf) {
          free(v130);
        }
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
    }
LABEL_183:
    if (v86) {
      return 1;
    }
    return !*(unsigned char *)(a1 + 333) && *(unsigned char *)(a1 + 184) && v140 > (float)((float)(v13 + 1.0) * 0.1875);
  }
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
  }
  int v14 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Coasting vector not set.", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    LOWORD(v141) = 0;
    int v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
    return 0;
  }
  return result;
}

void sub_100AF48DC(uint64_t a1)
{
  *(unsigned char *)(a1 + 184) = 1;
  if (!*(unsigned char *)(a1 + 333) && *(unsigned char *)(a1 + 57))
  {
    float v1 = *(float *)(a1 + 200);
    float v2 = *(float *)(a1 + 204);
    *(float *)(a1 + 120) = v1;
    *(float *)(a1 + 124) = v2;
    float v3 = *(float *)(a1 + 208);
    *(float *)(a1 + 128) = v3;
    *(double *)(a1 + 1520) = v1;
    *(double *)(a1 + 1528) = v2;
    *(double *)(a1 + 1536) = v3;
  }
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
  }
  float v4 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "enters coasting", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    float v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::enterCoasting()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_100AF4AA4(uint64_t a1)
{
  *(unsigned char *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
  }
  float v1 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "exits coasting", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    float v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::exitCoasting()", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
}

void sub_100AF4C34(uint64_t a1, double a2)
{
  uint64_t v2 = 0;
  *(float64x2_t *)(a1 + 1520) = vmlaq_n_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 144)), 1.0 - a2), *(float64x2_t *)(a1 + 1520), a2);
  *(double *)(a1 + 1536) = (1.0 - a2) * *(float *)(a1 + 152) + a2 * *(double *)(a1 + 1536);
  double v3 = a2 * a2;
  uint64_t v4 = *(void *)(a1 + 1568);
  uint64_t v5 = v4 + 240;
  for (uint64_t i = 6; i != 9; ++i)
  {
    for (uint64_t j = 0; j != 108; j += 36)
    {
      float v8 = v3 * *(float *)(v5 + j);
      if (v2 == j)
      {
        float v9 = (1.0 - v3) * 6.25 + v8;
        float v8 = v9;
      }
      *(float *)(v5 + j) = v8;
    }
    v2 += 36;
    v5 += 4;
  }
  sub_100B084B8((void **)(a1 + 1544), v4, 9);
}

float sub_100AF4CE4(uint64_t a1, float *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 1576);
  *(float *)(v3 + 36) = -a2[2];
  *(float *)(v3 + 52) = -a2[3];
  *(float *)(v3 + 68) = -a2[4];
  *(_DWORD *)(v3 + 72) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(v3 + 84) = *(_DWORD *)(a3 + 20);
  *(_DWORD *)(v3 + 96) = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(v3 + 76) = *(_DWORD *)(a3 + 40);
  *(_DWORD *)(v3 + 88) = *(_DWORD *)(a3 + 44);
  *(_DWORD *)(v3 + 100) = *(_DWORD *)(a3 + 48);
  *(_DWORD *)(v3 + 80) = *(_DWORD *)(a3 + 64);
  *(_DWORD *)(v3 + 92) = *(_DWORD *)(a3 + 68);
  float result = *(float *)(a3 + 72);
  *(float *)(v3 + 104) = result;
  return result;
}

void sub_100AF4D58(uint64_t a1, float32x2_t *a2, uint64_t a3, char a4, float a5)
{
  sub_100AF4CE4(a1, (float *)a2, a3);
  uint64_t v9 = 0;
  *(float *)float v31 = a5;
  *(float *)&v31[1] = a5;
  *(float *)&v31[2] = a5;
  float v30 = 0.0;
  float32x2_t v29 = 0;
  uint64_t v10 = *(void *)(a1 + 1576);
  float v11 = (float *)v10;
  do
  {
    float v12 = v29.f32[v9];
    uint64_t v13 = 1472;
    int v14 = v11;
    do
    {
      float v15 = *v14;
      v14 += 3;
      float v12 = v12 + v15 * *(double *)(a1 + v13);
      v13 += 8;
    }
    while (v13 != 1544);
    v29.f32[v9++] = v12;
    ++v11;
  }
  while (v9 != 3);
  float32x2_t v27 = vsub_f32(a2[1], v29);
  float v28 = a2[2].f32[0] - v30;
  sub_100B079B8(v26, (uint64_t *)(a1 + 1544), v10, (uint64_t)v31, (uint64_t)&v27, 9, 3, (uint64_t)&v25);
  sub_100AF4F34(a1, *(void **)(a1 + 1568), (uint64_t *)(a1 + 1544), 9);
  for (uint64_t i = 0; i != 72; i += 8)
    *(double *)(a1 + 1472 + i) = *(double *)&v26[i] + *(double *)(a1 + 1472 + i);
  float v17 = *(double *)(a1 + 1520);
  float v18 = *(double *)(a1 + 1528);
  float v19 = *(double *)(a1 + 1536);
  *(float *)(a1 + 144) = v17;
  *(float *)(a1 + 148) = v18;
  *(float *)(a1 + 152) = v19;
  if (a4)
  {
    int v20 = *(_DWORD *)(a1 + 504) + 1;
    *(_DWORD *)(a1 + 504) = v20;
    float v21 = *(float *)(a1 + 488) + v17;
    *(float *)(a1 + 488) = v21;
    float v22 = *(float *)(a1 + 492) + v18;
    *(float *)(a1 + 492) = v22;
    float v23 = *(float *)(a1 + 496) + v19;
    *(float *)(a1 + 496) = v23;
    float v24 = 1.0 / (double)v20;
    *(float *)(a1 + 144) = v21 * v24;
    *(float *)(a1 + 148) = v22 * v24;
    *(float *)(a1 + 152) = v23 * v24;
  }
}

void sub_100AF4F34(uint64_t a1, void *a2, uint64_t *a3, int a4)
{
  size_t v8 = 4 * a4 * (uint64_t)a4;
  bzero(*(void **)(a1 + 1584), v8);
  bzero(a2, v8);
  if (a4 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(float **)(a1 + 1584);
    uint64_t v12 = *a3;
    uint64_t v11 = a3[1];
    uint64_t v13 = 4 * a4;
    int v14 = v10;
    do
    {
      v10[(a4 + 1) * (int)v9] = *(float *)(v11 + 4 * v9);
      if (v9)
      {
        uint64_t v15 = 0;
        int v16 = v14;
        do
        {
          *int v16 = *(float *)(v11 + 4 * v9) * *(float *)(v12 + 4 * (((int)v9 - 1) * (int)v9 / 2) + 4 * v15++);
          int v16 = (float *)((char *)v16 + v13);
        }
        while (v9 != v15);
      }
      ++v9;
      ++v14;
    }
    while (v9 != a4);
    unint64_t v17 = 0;
    do
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      uint64_t v20 = *a3;
      do
      {
        if (v17 <= v19) {
          LODWORD(v21) = v19;
        }
        else {
          LODWORD(v21) = v17;
        }
        if (v17 >= v19)
        {
          float v22 = *(float *)(*(void *)(a1 + 1584) + 4 * (v19 * a4 + (int)v21)) + 0.0;
          LODWORD(v21) = v21 + 1;
        }
        else
        {
          float v22 = 0.0;
        }
        if ((int)v21 >= a4)
        {
          uint64_t v23 = v19 * a4;
        }
        else
        {
          uint64_t v23 = v19 * a4;
          uint64_t v21 = v21;
          do
          {
            float v22 = v22
                + (float)(*(float *)(v20 + 4 * (v17 + ((int)v21 - 1) * (int)v21 / 2))
                        * *(float *)(*(void *)(a1 + 1584) + v18 + 4 * v21));
            ++v21;
          }
          while (a4 != v21);
        }
        *((float *)a2 + v23 + v17) = v22;
        ++v19;
        v18 += v13;
      }
      while (v19 != a4);
      ++v17;
    }
    while (v17 != a4);
  }
}

uint64_t sub_100AF50D0(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 1312);
  double v2 = 0.0;
  double v3 = 0.0;
  if (v1) {
    double v3 = (float)(*(float *)(result + 1264) / (float)v1);
  }
  unint64_t v4 = *(void *)(result + 1384);
  unint64_t v5 = *(void *)(result + 1456);
  *(double *)(result + 1472) = v3;
  if (v4) {
    double v2 = (float)(*(float *)(result + 1336) / (float)v4);
  }
  *(double *)(result + 1480) = v2;
  if (v5) {
    double v6 = (float)(*(float *)(result + 1408) / (float)v5);
  }
  else {
    double v6 = 0.0;
  }
  *(double *)(result + 1488) = v6;
  *(_DWORD *)(result + 236) = 0;
  *(unsigned char *)(result + 244) = 1;
  return result;
}

void sub_100AF5144(uint64_t a1, float *a2)
{
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
  }
  unint64_t v4 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Divergence!!! Resetting.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    unint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::handleDivergence(const CLVector3d<float> &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1003A7544((void *)(a1 + 1248));
  sub_1003A7544((void *)(a1 + 1320));
  sub_1003A7544((void *)(a1 + 1392));
  if (*(unsigned char *)(a1 + 24))
  {
    sub_1001A44F4(a1 + 1248, (float *)(a1 + 72));
    sub_1001A44F4(a1 + 1320, (float *)(a1 + 76));
    sub_1001A44F4(a1 + 1392, (float *)(a1 + 80));
  }
  sub_100AF10F8((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), *(_DWORD *)(a1 + 20));
}

uint64_t sub_100AF5350(uint64_t a1, float *a2)
{
  unint64_t v4 = (_OWORD *)(a1 + 1592);
  *(_OWORD *)(a1 + 1592) = 0u;
  float v5 = *(double *)(a1 + 1472);
  *(float *)uint64_t buf = v5;
  float v6 = *(double *)(a1 + 1480);
  *(float *)__int16 v151 = v6;
  float v7 = *(double *)(a1 + 1488);
  *(float *)double v146 = v7;
  sub_1001A44F4(a1 + 784, (float *)buf);
  sub_1001A44F4(a1 + 856, (float *)v151);
  sub_1001A44F4(a1 + 928, (float *)v146);
  uint64_t v8 = 0;
  uint64_t v9 = *(float **)(a1 + 1568);
  float v10 = 0.0;
  do
  {
    float v11 = *v9;
    v9 += 10;
    v180[v8] = v11;
    float v10 = v10 + v11;
    ++v8;
  }
  while (v8 != 3);
  unint64_t v12 = *(void *)(a1 + 848);
  float v13 = 0.0;
  float v14 = 0.0;
  if (v12 >= 2)
  {
    float v15 = (float)((float)v12 * *(float *)(a1 + 804)) - (float)(*(float *)(a1 + 800) * *(float *)(a1 + 800));
    float v14 = 0.0;
    if (v15 >= 0.0) {
      float v14 = v15 / (float)((v12 - 1) * v12);
    }
  }
  float v16 = sqrtf(v14);
  *(float *)v178 = v16;
  unint64_t v17 = *(void *)(a1 + 920);
  if (v17 >= 2)
  {
    float v18 = (float)((float)v17 * *(float *)(a1 + 876)) - (float)(*(float *)(a1 + 872) * *(float *)(a1 + 872));
    if (v18 >= 0.0) {
      float v13 = v18 / (float)((v17 - 1) * v17);
    }
  }
  float v19 = sqrtf(v13);
  *(float *)&v178[1] = v19;
  unint64_t v20 = *(void *)(a1 + 992);
  float v21 = 0.0;
  if (v20 >= 2)
  {
    float v22 = (float)((float)v20 * *(float *)(a1 + 948)) - (float)(*(float *)(a1 + 944) * *(float *)(a1 + 944));
    if (v22 >= 0.0) {
      float v21 = v22 / (float)((v20 - 1) * v20);
    }
  }
  float v179 = sqrtf(v21);
  float v23 = (float)(v16 + v19) + v179;
  if (v23 > 1000.0)
  {
LABEL_13:
    sub_100AF5144(a1, a2);
    return 0;
  }
  if (*(int *)(a1 + 20) < 3 || *(unsigned char *)(a1 + 24)) {
    float v24 = 0.08;
  }
  else {
    float v24 = 0.04;
  }
  uint64_t v25 = 0;
  int v26 = 0;
  float v27 = 0.0;
  do
  {
    int v28 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
    float v29 = v180[v25];
    if (v29 <= 0.02) {
      int v30 = v28;
    }
    else {
      int v30 = 0;
    }
    if (v30 == 1 && *(float *)&v178[v25] > 10.0) {
      goto LABEL_13;
    }
    if (v29 > v27) {
      float v27 = v180[v25];
    }
    if (v29 <= v24 && *(float *)&v178[v25] <= 1.0)
    {
      *(_DWORD *)(a1 + v25 * 4 + 1596) = 1;
      ++v26;
    }
    ++v25;
  }
  while (v25 != 3);
  if (v10 <= 0.125
    && (v26 == 3
     || (int v31 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1), v23 < 15.0) && v31 != 1 && v27 <= 0.08))
  {
    *unint64_t v4 = xmmword_101D73270;
    *(_DWORD *)(a1 + 320) = -1;
    if (v10 <= 0.06) {
      *(_DWORD *)unint64_t v4 = 5;
    }
  }
  else if (v23 <= 1.0 && v26 >= 1)
  {
    if (v10 <= 0.6)
    {
      *(_DWORD *)unint64_t v4 = 3;
      if (v26 <= 1)
      {
        uint64_t v32 = 0;
        int v33 = -1;
        float v34 = 9.0;
        do
        {
          if (!*(_DWORD *)(a1 + 1596 + 4 * v32) && v180[v32] < v34)
          {
            int v33 = v32;
            float v34 = v180[v32];
          }
          ++v32;
        }
        while (v32 != 3);
        *(_DWORD *)(a1 + 4 * v33 + 1596) = 1;
      }
    }
    else if (v26 >= 2)
    {
      *(_DWORD *)unint64_t v4 = v26;
    }
    if (*(_DWORD *)(a1 + 1596))
    {
      *(_DWORD *)(a1 + 320) = 0;
    }
    else
    {
      if (*(_DWORD *)(a1 + 1600)) {
        int v35 = 1;
      }
      else {
        int v35 = 2;
      }
      *(_DWORD *)(a1 + 320) = v35;
    }
  }
  float v148 = 0.0;
  if (!*(unsigned char *)(a1 + 57))
  {
    if (!*(unsigned char *)(a1 + 333) || *(_DWORD *)(a1 + 1592) < *(_DWORD *)(a1 + 1464))
    {
      if (!*(unsigned char *)(a1 + 24) || (int v56 = *(_DWORD *)(a1 + 1592), v56 < *(_DWORD *)(a1 + 20)) && (v26 < 2 || v56 <= 2))
      {
        if (!*(unsigned char *)(a1 + 184)) {
          return 0;
        }
        BOOL v57 = roundf(*(float *)(a1 + 16) * 20.0) >= (float)*(int *)(a1 + 232) || v26 < 2;
        if (v57 || *(int *)v4 < 3) {
          return 0;
        }
      }
    }
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    double v58 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v59 = *(void *)(a1 + 1472);
      uint64_t v60 = *(void *)(a1 + 1480);
      uint64_t v61 = *(void *)(a1 + 1488);
      *(_DWORD *)uint64_t buf = 134218496;
      *(void *)__int16 v165 = v59;
      *(_WORD *)&v165[8] = 2048;
      *(void *)double v166 = v60;
      *(_WORD *)&v166[8] = 2048;
      uint64_t v167 = v61;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "new internal estimates (%.3f %.3f %.3f)", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      uint64_t v115 = *(void *)(a1 + 1472);
      uint64_t v116 = *(void *)(a1 + 1480);
      uint64_t v117 = *(void *)(a1 + 1488);
      *(_DWORD *)__int16 v151 = 134218496;
      *(void *)&v151[4] = v115;
      *(_WORD *)&v151[12] = 2048;
      *(void *)double v152 = v116;
      *(_WORD *)&v152[8] = 2048;
      uint64_t v153 = v117;
      float v118 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "%s\n", v118);
      if (v118 != (char *)buf) {
        free(v118);
      }
    }
    *(unsigned char *)(a1 + 57) = 1;
    if (!*(unsigned char *)(a1 + 333))
    {
      float v81 = *(double *)(a1 + 1472);
      *(float *)uint64_t buf = v81;
      float v82 = *(double *)(a1 + 1480);
      *(float *)__int16 v151 = v82;
      float v83 = *(double *)(a1 + 1488);
      *(float *)double v146 = v83;
      sub_1001A44F4(a1 + 1248, (float *)buf);
      sub_1001A44F4(a1 + 1320, (float *)v151);
      sub_1001A44F4(a1 + 1392, (float *)v146);
      if (sub_100AF6CC4(a1, (unsigned int *)(a1 + 1596), *(_DWORD *)(a1 + 1592), &v148))
      {
        if (*(_DWORD *)v4 == 3 && *(int *)(a1 + 20) >= 4)
        {
          sub_100AF109C(a1 + 1232, (float *)(a1 + 72), (float *)(a1 + 76), (float *)(a1 + 80));
          return 0;
        }
        sub_100AF50D0(a1);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
        }
        double v112 = qword_1024190A8;
        if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
        {
          int v113 = *(_DWORD *)v4;
          *(_DWORD *)uint64_t buf = 67109120;
          *(_DWORD *)__int16 v165 = v113;
          _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEBUG, "taking new estimates, reached database. (%d)", buf, 8u);
        }
        if (!sub_10013D1A0(115, 2)) {
          return 0;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
        }
        int v114 = *(_DWORD *)v4;
        *(_DWORD *)__int16 v151 = 67109120;
        *(_DWORD *)&v151[4] = v114;
        float v90 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "%s\n", v90);
      }
      else
      {
        sub_100AF10F8((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), *(_DWORD *)(a1 + 1592));
        float v104 = v148;
        if (v148 > 25.0 && !*(unsigned char *)(a1 + 184)) {
          *(unsigned char *)(a1 + 252) = 1;
        }
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
        }
        float v105 = qword_1024190A8;
        if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
        {
          int v106 = *(_DWORD *)(a1 + 1592);
          int v107 = *(unsigned __int8 *)(a1 + 252);
          *(_DWORD *)uint64_t buf = 67109632;
          *(_DWORD *)__int16 v165 = v106;
          *(_WORD *)&v165[4] = 1024;
          *(_DWORD *)&v165[6] = v107;
          *(_WORD *)double v166 = 2048;
          *(double *)&v166[2] = v104;
          _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEBUG, "new esitmates disagree with database. (%d,%d,%.3f)", buf, 0x18u);
        }
        if (!sub_10013D1A0(115, 2)) {
          return 0;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
        }
        int v108 = *(_DWORD *)(a1 + 1592);
        int v109 = *(unsigned __int8 *)(a1 + 252);
        *(_DWORD *)__int16 v151 = 67109632;
        *(_DWORD *)&v151[4] = v108;
        *(_WORD *)&v151[8] = 1024;
        *(_DWORD *)&v151[10] = v109;
        *(_WORD *)double v152 = 2048;
        *(double *)&v152[2] = v104;
        float v90 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "%s\n", v90);
      }
LABEL_168:
      if (v90 != (char *)buf) {
        free(v90);
      }
      return 0;
    }
    float v62 = *(double *)(a1 + 1472);
    *(float *)uint64_t buf = v62;
    float v63 = *(double *)(a1 + 1480);
    *(float *)__int16 v151 = v63;
    float v64 = *(double *)(a1 + 1488);
    *(float *)double v146 = v64;
    sub_1001A44F4(a1 + 1248, (float *)buf);
    sub_1001A44F4(a1 + 1320, (float *)v151);
    sub_1001A44F4(a1 + 1392, (float *)v146);
    if (*(void *)(a1 + 1312) < *(void *)(a1 + 1256))
    {
      sub_100AF10F8((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), *(_DWORD *)(a1 + 1464));
      return 0;
    }
    if (sub_100AF6CC4(a1, (unsigned int *)(a1 + 1596), *(_DWORD *)(a1 + 1464), &v148))
    {
      sub_100AF50D0(a1);
      float v84 = *(double *)(a1 + 1472);
      float v85 = *(double *)(a1 + 1480);
      float v86 = *(double *)(a1 + 1488);
      sub_100AF70A4(a1, v84, v85, v86);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      float v87 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
      {
        int v88 = *(unsigned __int8 *)(a1 + 184);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)__int16 v165 = v88;
        _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEBUG, "taking new estimates, Internal. fIsCoasting (%d)", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 == -1) {
        goto LABEL_125;
      }
    }
    else
    {
      sub_100AF10F8((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), *(_DWORD *)(a1 + 1592));
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      double v110 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
      {
        int v111 = *(unsigned __int8 *)(a1 + 184);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)__int16 v165 = v111;
        _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEBUG, "new estimates denied, fIsCoasting (%d)", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 == -1) {
        goto LABEL_125;
      }
    }
    dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
LABEL_125:
    int v89 = *(unsigned __int8 *)(a1 + 184);
    *(_DWORD *)__int16 v151 = 67109120;
    *(_DWORD *)&v151[4] = v89;
    float v90 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "%s\n", v90);
    goto LABEL_168;
  }
  int v36 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v37 = *(_DWORD *)(a1 + 1592);
  int v38 = *(_DWORD *)(a1 + 20);
  if (v37 >= v38) {
    int v39 = v36;
  }
  else {
    int v39 = 0;
  }
  if (v39 != 1)
  {
    if (v37 <= v38) {
      return 0;
    }
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    int v65 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v66 = *(void *)(a1 + 1472);
      uint64_t v67 = *(void *)(a1 + 1480);
      uint64_t v68 = *(void *)(a1 + 1488);
      int v69 = *(_DWORD *)(a1 + 1596);
      int v70 = *(_DWORD *)(a1 + 1600);
      int v71 = *(_DWORD *)(a1 + 1604);
      int v72 = *(_DWORD *)(a1 + 1592);
      *(_DWORD *)uint64_t buf = 134219776;
      *(void *)__int16 v165 = v66;
      *(_WORD *)&v165[8] = 2048;
      *(void *)double v166 = v67;
      *(_WORD *)&v166[8] = 2048;
      uint64_t v167 = v68;
      __int16 v168 = 2048;
      double v169 = v10;
      __int16 v170 = 1024;
      int v171 = v69;
      __int16 v172 = 1024;
      int v173 = v70;
      __int16 v174 = 1024;
      int v175 = v71;
      __int16 v176 = 1024;
      int v177 = v72;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "first estimates completed (%.3f/%.3f/%.3f/%.3f), conv(%d %d %d), level (%d)", buf, 0x42u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      uint64_t v127 = *(void *)(a1 + 1472);
      uint64_t v128 = *(void *)(a1 + 1480);
      uint64_t v129 = *(void *)(a1 + 1488);
      int v130 = *(_DWORD *)(a1 + 1596);
      int v131 = *(_DWORD *)(a1 + 1600);
      int v132 = *(_DWORD *)(a1 + 1604);
      int v133 = *(_DWORD *)(a1 + 1592);
      *(_DWORD *)__int16 v151 = 134219776;
      *(void *)&v151[4] = v127;
      *(_WORD *)&v151[12] = 2048;
      *(void *)double v152 = v128;
      *(_WORD *)&v152[8] = 2048;
      uint64_t v153 = v129;
      __int16 v154 = 2048;
      double v155 = v10;
      __int16 v156 = 1024;
      int v157 = v130;
      __int16 v158 = 1024;
      int v159 = v131;
      __int16 v160 = 1024;
      int v161 = v132;
      __int16 v162 = 1024;
      int v163 = v133;
      float v134 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "%s\n", v134);
      if (v134 != (char *)buf) {
        free(v134);
      }
    }
    sub_1003A7544((void *)(a1 + 1248));
    sub_1003A7544((void *)(a1 + 1320));
    sub_1003A7544((void *)(a1 + 1392));
    float v73 = *(double *)(a1 + 1472);
    *(float *)uint64_t buf = v73;
    float v74 = *(double *)(a1 + 1480);
    *(float *)__int16 v151 = v74;
    float v75 = *(double *)(a1 + 1488);
    *(float *)double v146 = v75;
    sub_1001A44F4(a1 + 1248, (float *)buf);
    sub_1001A44F4(a1 + 1320, (float *)v151);
    sub_1001A44F4(a1 + 1392, (float *)v146);
    goto LABEL_112;
  }
  float v40 = *(float *)(a1 + 80) - *(double *)(a1 + 1488);
  float v41 = fabsf(v40);
  v146[0] = off_1022AD5D0;
  float32x2_t v42 = vabs_f32(vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 72)), *(float64x2_t *)(a1 + 1472))));
  v146[1] = v42;
  float v147 = v41;
  if (v37 <= v38 && (float v43 = vaddv_f32(v42) + v41, 10.0 / (double)v38 >= v43))
  {
    if (v43 <= 1.0) {
      return 0;
    }
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    int v91 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v92 = *(void *)(a1 + 1472);
      uint64_t v93 = *(void *)(a1 + 1480);
      uint64_t v94 = *(void *)(a1 + 1488);
      int v95 = *(_DWORD *)(a1 + 1608);
      *(_DWORD *)uint64_t buf = 134218752;
      *(void *)__int16 v165 = v92;
      *(_WORD *)&v165[8] = 2048;
      *(void *)double v166 = v93;
      *(_WORD *)&v166[8] = 2048;
      uint64_t v167 = v94;
      __int16 v168 = 1024;
      LODWORD(v169) = v95;
      _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEBUG, "estimates improved.(%.3f/%.3f/%.3f), numImprov=%d ", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      uint64_t v139 = *(void *)(a1 + 1472);
      uint64_t v140 = *(void *)(a1 + 1480);
      uint64_t v141 = *(void *)(a1 + 1488);
      int v142 = *(_DWORD *)(a1 + 1608);
      *(_DWORD *)__int16 v151 = 134218752;
      *(void *)&v151[4] = v139;
      *(_WORD *)&v151[12] = 2048;
      *(void *)double v152 = v140;
      *(_WORD *)&v152[8] = 2048;
      uint64_t v153 = v141;
      __int16 v154 = 1024;
      LODWORD(v155) = v142;
      __int16 v143 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "%s\n", v143);
      if (v143 != (char *)buf) {
        free(v143);
      }
    }
    float v96 = *(double *)(a1 + 1472);
    *(float *)uint64_t buf = v96;
    float v97 = *(double *)(a1 + 1480);
    *(float *)__int16 v151 = v97;
    float v98 = *(double *)(a1 + 1488);
    float v149 = v98;
    sub_100AF109C(a1 + 1232, (float *)buf, (float *)v151, &v149);
    uint64_t v99 = 0;
    float v100 = 0.0;
    do
    {
      float v100 = v100 + (float)((float)*(unsigned int *)(a1 + v99 * 4 + 1596) * v180[v99]);
      ++v99;
    }
    while (v99 != 3);
    if (v100 >= 0.03 || (unsigned int v101 = *(_DWORD *)(a1 + 1608) + 1, *(_DWORD *)(a1 + 1608) = v101, v101 < 2))
    {
LABEL_112:
      *(unsigned char *)(a1 + 244) = 1;
      return 0;
    }
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    float v102 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      int v103 = *(unsigned __int8 *)(a1 + 184);
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)__int16 v165 = v103;
      _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEBUG, "new estimates needed, fIsCoasting (%d)", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      int v144 = *(unsigned __int8 *)(a1 + 184);
      *(_DWORD *)__int16 v151 = 67109120;
      *(_DWORD *)&v151[4] = v144;
      v145 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "%s\n", v145);
      if (v145 != (char *)buf) {
        free(v145);
      }
    }
    sub_100AF10F8((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), *(_DWORD *)(a1 + 1592));
    *(_DWORD *)(a1 + 1608) = 0;
  }
  else
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    uint64_t v44 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v45 = *(void *)(a1 + 1472);
      uint64_t v46 = *(void *)(a1 + 1480);
      uint64_t v47 = *(void *)(a1 + 1488);
      int v48 = *(_DWORD *)(a1 + 1596);
      int v49 = *(_DWORD *)(a1 + 1600);
      int v50 = *(_DWORD *)(a1 + 1604);
      int v51 = *(_DWORD *)(a1 + 1592);
      *(_DWORD *)uint64_t buf = 134219776;
      *(void *)__int16 v165 = v45;
      *(_WORD *)&v165[8] = 2048;
      *(void *)double v166 = v46;
      *(_WORD *)&v166[8] = 2048;
      uint64_t v167 = v47;
      __int16 v168 = 2048;
      double v169 = v10;
      __int16 v170 = 1024;
      int v171 = v48;
      __int16 v172 = 1024;
      int v173 = v49;
      __int16 v174 = 1024;
      int v175 = v50;
      __int16 v176 = 1024;
      int v177 = v51;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "calibrated, first estimates completed (%.3f/%.3f/%.3f/%.3f), conv(%d %d %d), level (%d)", buf, 0x42u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      uint64_t v119 = *(void *)(a1 + 1472);
      uint64_t v120 = *(void *)(a1 + 1480);
      uint64_t v121 = *(void *)(a1 + 1488);
      int v122 = *(_DWORD *)(a1 + 1596);
      int v123 = *(_DWORD *)(a1 + 1600);
      int v124 = *(_DWORD *)(a1 + 1604);
      int v125 = *(_DWORD *)(a1 + 1592);
      *(_DWORD *)__int16 v151 = 134219776;
      *(void *)&v151[4] = v119;
      *(_WORD *)&v151[12] = 2048;
      *(void *)double v152 = v120;
      *(_WORD *)&v152[8] = 2048;
      uint64_t v153 = v121;
      __int16 v154 = 2048;
      double v155 = v10;
      __int16 v156 = 1024;
      int v157 = v122;
      __int16 v158 = 1024;
      int v159 = v123;
      __int16 v160 = 1024;
      int v161 = v124;
      __int16 v162 = 1024;
      int v163 = v125;
      __int16 v126 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "%s\n", v126);
      if (v126 != (char *)buf) {
        free(v126);
      }
    }
    float v52 = *(double *)(a1 + 1472);
    *(float *)uint64_t buf = v52;
    float v53 = *(double *)(a1 + 1480);
    *(float *)__int16 v151 = v53;
    float v54 = *(double *)(a1 + 1488);
    float v149 = v54;
    sub_1001A44F4(a1 + 1248, (float *)buf);
    sub_1001A44F4(a1 + 1320, (float *)v151);
    sub_1001A44F4(a1 + 1392, &v149);
    *(void *)__int16 v151 = *(void *)(a1 + 168);
    *(_DWORD *)&v151[8] = *(_DWORD *)(a1 + 176);
    if (sub_100AF6CC4(a1, (unsigned int *)v151, *(_DWORD *)(a1 + 1592), &v148))
    {
      if ((*(_DWORD *)(a1 + 172) + *(_DWORD *)(a1 + 168) + *(_DWORD *)(a1 + 176)) <= 2
        && (float)(*(float *)(a1 + 16) * 180.0) < (float)*(int *)(a1 + 236))
      {
        int v55 = *(_DWORD *)(a1 + 1592);
        if (v55 >= 4 && v55 > *(_DWORD *)(a1 + 20))
        {
          sub_100AF10F8((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), v55);
          return 0;
        }
      }
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      double v78 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
      {
        int v79 = *(unsigned __int8 *)(a1 + 184);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)__int16 v165 = v79;
        _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEBUG, "taking new estimates, fIsCoasting (%d)", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
        }
        int v137 = *(unsigned __int8 *)(a1 + 184);
        float v149 = 1.5047e-36;
        int v150 = v137;
        float v138 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "%s\n", v138);
        if (v138 != (char *)buf) {
          free(v138);
        }
      }
      goto LABEL_112;
    }
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    unint64_t v76 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      int v77 = *(unsigned __int8 *)(a1 + 184);
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)__int16 v165 = v77;
      _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "new estimates denied, fIsCoasting (%d)", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      int v135 = *(unsigned __int8 *)(a1 + 184);
      float v149 = 1.5047e-36;
      int v150 = v135;
      __int16 v136 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "%s\n", v136);
      if (v136 != (char *)buf) {
        free(v136);
      }
    }
    sub_100AF10F8((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), *(_DWORD *)(a1 + 1592));
  }
  return 0;
}

BOOL sub_100AF6CC4(uint64_t a1, unsigned int *a2, int a3, float *a4)
{
  *a4 = 0.0;
  unint64_t v8 = *(void *)(a1 + 1312);
  float v9 = 0.0;
  float v10 = 0.0;
  if (v8 >= 2)
  {
    float v11 = (float)((float)v8 * *(float *)(a1 + 1268)) - (float)(*(float *)(a1 + 1264) * *(float *)(a1 + 1264));
    float v10 = 0.0;
    if (v11 >= 0.0) {
      float v10 = v11 / (float)((v8 - 1) * v8);
    }
  }
  unint64_t v12 = *(void *)(a1 + 1384);
  if (v12 >= 2)
  {
    float v13 = (float)((float)v12 * *(float *)(a1 + 1340)) - (float)(*(float *)(a1 + 1336) * *(float *)(a1 + 1336));
    if (v13 >= 0.0) {
      float v9 = v13 / (float)((v12 - 1) * v12);
    }
  }
  unint64_t v14 = *(void *)(a1 + 1456);
  float v15 = 0.0;
  if (v14 >= 2)
  {
    float v16 = (float)((float)v14 * *(float *)(a1 + 1412)) - (float)(*(float *)(a1 + 1408) * *(float *)(a1 + 1408));
    if (v16 >= 0.0) {
      float v15 = v16 / (float)((v14 - 1) * v14);
    }
  }
  float v28 = v10;
  float v29 = v9;
  float v30 = v15;
  float v17 = (float)(v9 * (float)a2[1]) + (float)((float)*a2 * v10);
  float v18 = (float)a2[2];
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
  }
  float v19 = v17 + (float)(v18 * v15);
  unint64_t v20 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v21 = *a2;
    unsigned int v22 = a2[1];
    unsigned int v23 = a2[2];
    uint64_t v24 = *(void *)(a1 + 1312);
    *(_DWORD *)uint64_t buf = 67111168;
    unsigned int v32 = v21;
    __int16 v33 = 1024;
    unsigned int v34 = v22;
    __int16 v35 = 1024;
    unsigned int v36 = v23;
    __int16 v37 = 2048;
    double v38 = v28;
    __int16 v39 = 2048;
    double v40 = v29;
    __int16 v41 = 2048;
    double v42 = v30;
    __int16 v43 = 2048;
    double v44 = v19;
    __int16 v45 = 1024;
    int v46 = a3;
    __int16 v47 = 1024;
    int v48 = v24;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "new estimates calculated, converged(%d %d %d) Var (%.3f %.3f %.3f), remain (%.3f), level (%d), num=%d ", buf, 0x48u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    float v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::sanityCheck(unsigned int *, CLMotionTypeCompassCalibrationLevel, float &)", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
  float v25 = 100.0 / (float)a3;
  if (v19 > v25) {
    *a4 = (float)(v19 - v25) / v25;
  }
  return v19 <= v25;
}

float sub_100AF70A4(uint64_t a1, float a2, float a3, float a4)
{
  float v10 = a3;
  float v11 = a2;
  float v9 = a4;
  if (!*(unsigned char *)(a1 + 24)) {
    *(unsigned char *)(a1 + 57) = 1;
  }
  *(unsigned char *)(a1 + 333) = 0;
  uint64_t v5 = a1 + 1248;
  sub_1003A7544((void *)(a1 + 1248));
  uint64_t v6 = a1 + 1320;
  sub_1003A7544((void *)(a1 + 1320));
  float v7 = (void *)(a1 + 1392);
  sub_1003A7544(v7);
  sub_1001A44F4(v5, &v11);
  sub_1001A44F4(v6, &v10);
  return sub_1001A44F4((uint64_t)v7, &v9);
}

void sub_100AF7138(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 184)) {
    return;
  }
  float v1 = *(float *)(a1 + 16);
  double v2 = v1;
  unint64_t v3 = *(void *)(a1 + 1144);
  if (v1 * 8.0 >= (double)*(int *)(a1 + 248)) {
    goto LABEL_75;
  }
  float v4 = 0.0;
  if (v3 >= 2)
  {
    float v5 = (float)((float)v3 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
    if (v5 >= 0.0) {
      float v4 = v5 / (float)((v3 - 1) * v3);
    }
  }
  if (v4 >= 0.01
    || (unint64_t v6 = *(void *)(a1 + 1072), v6 >= 2)
    && (float v7 = (float)((float)v6 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024)),
        v7 >= 0.0)
    && (float)(v7 / (float)((v6 - 1) * v6)) >= 20.0
    || (unint64_t v8 = *(void *)(a1 + 1216), v8 >= 2)
    && (float v9 = (float)((float)v8 * *(float *)(a1 + 1172)) - (float)(*(float *)(a1 + 1168) * *(float *)(a1 + 1168)),
        v9 >= 0.0)
    && (float)(v9 / (float)((v8 - 1) * v8)) >= 10.0)
  {
LABEL_75:
    if (v3)
    {
      float v11 = *(float *)(a1 + 1096);
      if ((float)(v11 / (float)v3) >= 1.0)
      {
        int v19 = *(_DWORD *)(a1 + 232);
        if (roundf(v1 * 120.0) >= (float)v19
          || v3 >= 2
          && (float v20 = (float)((float)v3 * *(float *)(a1 + 1100)) - (float)(v11 * v11), v20 >= 0.0)
          && (float)(v20 / (float)((v3 - 1) * v3)) >= 0.04)
        {
          if (round(v2 * 360.0) >= (double)v19) {
            return;
          }
          (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
          if (qword_1024190A0 != -1) {
            dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
          }
          unsigned int v22 = qword_1024190A8;
          if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Coasting for too long. Exit coasting.", buf, 2u);
          }
          if (!sub_10013D1A0(115, 2)) {
            return;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1024190A0 != -1) {
            goto LABEL_71;
          }
        }
        else
        {
          (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
          if (qword_1024190A0 != -1) {
            dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
          }
          unsigned int v21 = qword_1024190A8;
          if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Waiting too long for high magnitude interference to go away. Exit coasting.", buf, 2u);
          }
          if (!sub_10013D1A0(115, 2)) {
            return;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1024190A0 != -1) {
            goto LABEL_71;
          }
        }
LABEL_69:
        float v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::resetAfterCoasting()", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
        return;
      }
    }
    int v12 = *(_DWORD *)(a1 + 232);
    if (roundf(v1 * 120.0) <= (float)v12) {
      goto LABEL_62;
    }
    if (!*(unsigned char *)(a1 + 333)) {
      return;
    }
    if (round(v2 * 30.0) > (double)v12) {
      return;
    }
    if (*(float *)(a1 + 1224) <= 30.0) {
      return;
    }
    if (v3 >= 2)
    {
      float v13 = (float)((float)v3 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
      if (v13 >= 0.0 && (float)(v13 / (float)((v3 - 1) * v3)) >= 0.01) {
        return;
      }
    }
    unint64_t v14 = *(void *)(a1 + 1072);
    if (v14 >= 2)
    {
      float v15 = (float)((float)v14 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024));
      if (v15 >= 0.0 && (float)(v15 / (float)((v14 - 1) * v14)) >= 200.0) {
        return;
      }
    }
    unint64_t v16 = *(void *)(a1 + 1216);
    if (v16 >= 2)
    {
      float v18 = (float)v16;
      float v17 = *(float *)(a1 + 1168);
      float v23 = (float)((float)v16 * *(float *)(a1 + 1172)) - (float)(v17 * v17);
      if (v23 >= 0.0 && (float)(v23 / (float)((v16 - 1) * v16)) >= 100.0) {
        return;
      }
    }
    else
    {
      if (!v16)
      {
        double v24 = 0.0;
LABEL_58:
        if (v14) {
          double v25 = (float)(*(float *)(a1 + 1024) / (float)v14) * 0.9;
        }
        else {
          double v25 = 0.0;
        }
        if (v25 <= v24) {
          return;
        }
LABEL_62:
        (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
        }
        int v26 = qword_1024190A8;
        if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "Waiting too long for internal re-calibration. Prompt user.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190A0 == -1) {
            goto LABEL_69;
          }
          goto LABEL_71;
        }
        return;
      }
      float v17 = *(float *)(a1 + 1168);
      float v18 = (float)v16;
    }
    double v24 = (float)(v17 / v18);
    goto LABEL_58;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
  }
  float v10 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Bad heading divergence for too long. Prompt user to re-calibrate.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 == -1) {
      goto LABEL_69;
    }
LABEL_71:
    dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    goto LABEL_69;
  }
}

void sub_100AF78DC(uint64_t a1, int a2, int *a3)
{
  *(unsigned char *)(a1 + 60) = a2;
  if (a2)
  {
    int v4 = *a3;
    *(_DWORD *)(a1 + 120) = *a3;
    int v5 = a3[1];
    *(_DWORD *)(a1 + 124) = v5;
    int v6 = a3[2];
    *(_DWORD *)(a1 + 128) = v6;
    *(_DWORD *)(a1 + 200) = v4;
    *(_DWORD *)(a1 + 204) = v5;
    *(_DWORD *)(a1 + 208) = v6;
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    float v7 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      double v8 = *(float *)(a1 + 200);
      double v9 = *(float *)(a1 + 204);
      double v10 = *(float *)(a1 + 208);
      double v11 = *(float *)(a1 + 120);
      double v12 = *(float *)(a1 + 124);
      double v13 = *(float *)(a1 + 128);
      *(_DWORD *)uint64_t buf = 134219264;
      double v16 = v8;
      __int16 v17 = 2048;
      double v18 = v9;
      __int16 v19 = 2048;
      double v20 = v10;
      __int16 v21 = 2048;
      double v22 = v11;
      __int16 v23 = 2048;
      double v24 = v12;
      __int16 v25 = 2048;
      double v26 = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "fCoastingVecPrint: %.3f, %.3f, %.3f, %.3f, %.3f, %.3f", buf, 0x3Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      unint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::referenceAttitudeChanged(BOOL, const CLMotionTypeMagneticField &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
}

void sub_100AF7B58(uint64_t a1, float *a2, uint64_t a3)
{
  if (!a3)
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    double v10 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Attitude data not set.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      LOWORD(v103) = 0;
      double v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "%s\n", v11);
      goto LABEL_104;
    }
    return;
  }
  ++*(_DWORD *)(a1 + 324);
  sub_100AF7138(a1);
  *(unsigned char *)(a1 + 59) = 0;
  *(unsigned char *)(a1 + 25) = 0;
  sub_100AF0BEC((float32x2_t *)(a1 + 336), (double *)a3);
  float v6 = sub_100A1D598((double *)a3);
  float v7 = sub_100A1D5B4((double *)a3);
  float v8 = sub_100A1D5D0((double *)a3);
  uint64_t v99 = off_1022AD5D0;
  float v100 = v6;
  float v101 = v7;
  float v102 = v8;
  if (*(unsigned char *)(a1 + 56))
  {
    sub_100AF163C(a1, a2, (float32x2_t *)(a1 + 336));
    long long v9 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a1 + 416) = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 432) = v9;
    if ((float *)(a1 + 448) != a2)
    {
      *(void *)(a1 + 456) = *((void *)a2 + 1);
      *(float *)(a1 + 464) = a2[4];
    }
    *(unsigned char *)(a1 + 332) = 1;
    *(unsigned char *)(a1 + 56) = 0;
  }
  else if (!*(unsigned char *)(a1 + 332))
  {
    goto LABEL_17;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 72))(a1)) {
    *(unsigned char *)(a1 + 332) = 0;
  }
LABEL_17:
  *(int32x2_t *)(a1 + 236) = vadd_s32(*(int32x2_t *)(a1 + 236), (int32x2_t)0x100000001);
  uint64_t v12 = *(void *)(a1 + 1000);
  unint64_t v13 = *(void *)(v12 + 64);
  float v14 = 0.0;
  if (v13)
  {
    float v15 = *(float *)(v12 + 16);
    float v16 = v15 / (float)v13;
    if (v13 != 1)
    {
      float v17 = (float)((float)v13 * *(float *)(v12 + 20)) - (float)(v15 * v15);
      if (v17 >= 0.0) {
        float v14 = v17 / (float)((v13 - 1) * v13);
      }
    }
  }
  else
  {
    float v16 = 0.0;
  }
  int v18 = v14 <= 6.0 && v16 <= 4.7124;
  int v19 = v14 <= 0.8 && v16 <= 1.5708;
  sub_1001A44F4(a1 + 552, a2 + 2);
  sub_1001A44F4(a1 + 624, a2 + 3);
  sub_1001A44F4(a1 + 696, a2 + 4);
  unint64_t v20 = *(void *)(a1 + 616);
  float v21 = 0.0;
  float v22 = 0.0;
  if (v20) {
    float v22 = *(float *)(a1 + 568) / (float)v20;
  }
  unint64_t v23 = *(void *)(a1 + 688);
  if (v23) {
    float v21 = *(float *)(a1 + 640) / (float)v23;
  }
  unint64_t v24 = *(void *)(a1 + 760);
  if (v24) {
    float v25 = *(float *)(a1 + 712) / (float)v24;
  }
  else {
    float v25 = 0.0;
  }
  float v96 = off_1022AD5D0;
  float32x2_t v97 = (float32x2_t)__PAIR64__(LODWORD(v21), LODWORD(v22));
  float v98 = v25;
  uint64_t v92 = off_1022AD5D0;
  float v93 = v22;
  float v94 = v21;
  float v95 = v25;
  float32_t v26 = sub_100AF8EC4((float32x2_t *)a1, (float32x2_t *)&v92);
  if ((*(unsigned int (**)(uint64_t, float32_t))(*(void *)a1 + 72))(a1, v26))
  {
    if (*(unsigned char *)(a1 + 60))
    {
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      float v27 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 136315138;
        *(void *)&uint8_t buf[4] = "Compass-withFusion";
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Type,%s,Updating reference frame.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
        }
        int v103 = 136315138;
        *(void *)float v104 = "Compass-withFusion";
        int v79 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "%s\n", v79);
        if (v79 != buf) {
          free(v79);
        }
      }
      *(unsigned char *)(a1 + 60) = 0;
    }
    if (sub_100AF2EF8(a1, (float *)&v92, (float *)&v99, v18, v19)) {
      return;
    }
    if (*(unsigned char *)(a1 + 184))
    {
      HIDWORD(v28) = -858993459 * *(_DWORD *)(a1 + 324) + 429496728;
      LODWORD(v28) = HIDWORD(v28);
      if ((v28 >> 1) <= 0x19999998)
      {
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
        }
        float v29 = qword_1024190A8;
        if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
        {
          int v30 = *(unsigned __int8 *)(a1 + 333);
          *(_DWORD *)uint64_t buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v30;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "Updating during coasting, fIsResetInternal(%d)", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190A0 != -1) {
            dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
          }
          int v80 = *(unsigned __int8 *)(a1 + 333);
          int v103 = 67109120;
          *(_DWORD *)float v104 = v80;
          float v81 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "%s\n", v81);
          if (v81 != buf) {
            free(v81);
          }
        }
      }
    }
    if (*(unsigned char *)(a1 + 185)) {
      int v31 = v19;
    }
    else {
      int v31 = 0;
    }
    if (v31 == 1)
    {
      int v32 = *(_DWORD *)(a1 + 324);
      BOOL v33 = v16 > 0.15;
      if (v14 >= 0.01) {
        BOOL v33 = 0;
      }
      if (*(unsigned char *)(a1 + 313)) {
        goto LABEL_66;
      }
      float v34 = fabsf(*(float *)(a1 + 308));
      int v35 = *(_DWORD *)(a1 + 304);
      if (v35 >= 2 && v34 > (float)((float)((float)(v32 - *(_DWORD *)(a1 + 316)) / *(float *)(a1 + 16)) * 40.0)) {
        goto LABEL_66;
      }
      if (v35 >= 6 && v34 > 100.0) {
        goto LABEL_66;
      }
      char v36 = !v33;
      if (v35 < 7) {
        char v36 = 1;
      }
      if ((v36 & 1) != 0 || v34 <= 70.0)
      {
        sub_100AF0C94(a1 + 336, (uint64_t)buf);
        float v75 = (float)((float)(v94 * *(float *)&v108[4]) + (float)(v93 * *(float *)v108))
            + (float)(v95 * *(float *)&v108[8]);
        float v76 = (float)((float)(v94 * *(float *)&buf[44]) + (float)(v93 * *(float *)&buf[40]))
            + (float)(v95 * *(float *)&buf[48]);
        *(float *)(a1 + 120) = (float)((float)(v94 * *(float *)&buf[20]) + (float)(v93 * *(float *)&buf[16]))
                             + (float)(v95 * *(float *)&buf[24]);
        *(float *)(a1 + 124) = v76;
        *(float *)(a1 + 128) = v75;
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
        }
        int v77 = qword_1024190A8;
        if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 134218240;
          *(double *)&uint8_t buf[4] = v16;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v14;
          _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "resync coasting vector. rotM,%.3f,rotV,%.3f", buf, 0x16u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_73;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
        }
        int v103 = 134218240;
        *(double *)float v104 = v16;
        *(_WORD *)&v104[8] = 2048;
        *(double *)&v104[10] = v14;
        double v78 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "%s\n", v78);
      }
      else
      {
LABEL_66:
        *(void *)(a1 + 72) = *(void *)(a1 + 264);
        *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 272);
        float v37 = *(float *)(a1 + 288);
        float v38 = *(float *)(a1 + 292);
        *(float *)(a1 + 120) = v37;
        *(float *)(a1 + 124) = v38;
        float v39 = *(float *)(a1 + 296);
        *(float *)(a1 + 128) = v39;
        *(_DWORD *)(a1 + 328) = v32;
        *(void *)(a1 + 264) = 0;
        *(_DWORD *)(a1 + 272) = 0;
        *(void *)(a1 + 288) = 0;
        *(_DWORD *)(a1 + 296) = 0;
        *(void *)(a1 + 304) = 0;
        *(_WORD *)(a1 + 312) = 0;
        if (!*(unsigned char *)(a1 + 333))
        {
          float v40 = (float)((float)(v38 * *(float *)(a1 + 356)) + (float)(v37 * *(float *)(a1 + 352)))
              + (float)(v39 * *(float *)(a1 + 360));
          float v41 = (float)((float)(v38 * *(float *)(a1 + 380)) + (float)(v37 * *(float *)(a1 + 376)))
              + (float)(v39 * *(float *)(a1 + 384));
          float v42 = (float)((float)(v38 * *(float *)(a1 + 404)) + (float)(v37 * *(float *)(a1 + 400)))
              + (float)(v39 * *(float *)(a1 + 408));
          *(void *)uint64_t buf = off_1022AD5D0;
          *(float *)&buf[8] = v40;
          *(float *)&buf[12] = v41;
          *(float *)&buf[16] = v42;
          sub_100AF10F8((float64x2_t *)a1, (float *)buf, (float32x2_t *)(a1 + 336), 3);
        }
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
        }
        __int16 v43 = qword_1024190A8;
        if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "BACKUP resync coasting vector", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_73;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
        }
        LOWORD(v103) = 0;
        double v78 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "%s\n", v78);
      }
      if (v78 != buf) {
        free(v78);
      }
LABEL_73:
      sub_100AF0D44(a1, 1);
      goto LABEL_80;
    }
    HIDWORD(v44) = -858993459 * *(_DWORD *)(a1 + 324) + 429496728;
    LODWORD(v44) = HIDWORD(v44);
    if ((v44 >> 1) <= 0x19999998)
    {
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      __int16 v45 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
      {
        double v46 = *(double *)a3;
        uint64_t v47 = *(void *)(a3 + 8);
        uint64_t v48 = *(void *)(a3 + 16);
        uint64_t v49 = *(void *)(a3 + 24);
        *(_DWORD *)uint64_t buf = 67110912;
        *(_DWORD *)&uint8_t buf[4] = v18;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v19;
        *(_WORD *)&buf[14] = 2048;
        *(double *)&buf[16] = v16;
        *(_WORD *)&buf[24] = 2048;
        *(double *)&buf[26] = v14;
        *(_WORD *)&buf[34] = 2048;
        *(double *)&buf[36] = v46;
        *(_WORD *)&buf[44] = 2048;
        *(void *)&buf[46] = v47;
        *(_WORD *)&buf[54] = 2048;
        *(void *)&buf[56] = v48;
        *(_WORD *)int v108 = 2048;
        *(void *)&v108[2] = v49;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "device status: (smooth static) = (%d %d), rotM,%.3f,rotV,%.3f, q.x,%.3f,q.y,%.3f,q.z,%.3f,q.w,%.3f)", buf, 0x4Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
        }
        double v82 = *(double *)a3;
        uint64_t v83 = *(void *)(a3 + 8);
        uint64_t v84 = *(void *)(a3 + 16);
        uint64_t v85 = *(void *)(a3 + 24);
        int v103 = 67110912;
        *(_DWORD *)float v104 = v18;
        *(_WORD *)&v104[4] = 1024;
        *(_DWORD *)&v104[6] = v19;
        *(_WORD *)&v104[10] = 2048;
        *(double *)&v104[12] = v16;
        *(_WORD *)&v104[20] = 2048;
        *(double *)&v104[22] = v14;
        *(_WORD *)&v104[30] = 2048;
        *(double *)&v104[32] = v82;
        *(_WORD *)&v104[40] = 2048;
        *(void *)&v104[42] = v83;
        *(_WORD *)&v104[50] = 2048;
        *(void *)&v104[52] = v84;
        __int16 v105 = 2048;
        uint64_t v106 = v85;
        float v86 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "%s\n", v86);
        if (v86 != buf) {
          free(v86);
        }
      }
    }
  }
LABEL_80:
  if (*(unsigned char *)(a1 + 57) && *(_DWORD *)(a1 + 20) == 5 && *(unsigned char *)(a1 + 220))
  {
    HIDWORD(v50) = -858993459 * *(_DWORD *)(a1 + 324) + 429496728;
    LODWORD(v50) = HIDWORD(v50);
    if ((v50 >> 2) <= 0xCCCCCCC)
    {
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      int v51 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "coasting vector is mature, no more updating", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
        }
        LOWORD(v103) = 0;
        double v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "%s\n", v11);
LABEL_104:
        if (v11 != buf) {
          free(v11);
        }
      }
    }
  }
  else
  {
    sub_100A1D6B8((uint64_t)v91, a1 + 416);
    sub_100A1D6D4(&v87, v91, (double *)a3);
    float v52 = fabs(v87) + fabs(v88) + fabs(v89) + fabs(v90);
    float v53 = 1.0;
    if (v98 != 0.0) {
      float v53 = v98;
    }
    float v54 = (float)(v98 - *(float *)(a1 + 464)) / v53;
    __asm { FMOV            V5.2S, #1.0 }
    float32x2_t v60 = vabs_f32(vdiv_f32(vsub_f32(v97, *(float32x2_t *)(a1 + 456)), (float32x2_t)vbsl_s8((int8x8_t)vceqz_f32(v97), _D5, (int8x8_t)v97)));
    float v61 = fabsf(v54);
    if (v52 >= 1.001 || (double v62 = (float)(vaddv_f32(v60) + v61), v62 <= 0.2))
    {
      if (*(unsigned char *)(a1 + 57) && *(_DWORD *)(a1 + 20) == 5)
      {
        if ((v19 & 1) == 0)
        {
          ++*(_DWORD *)(a1 + 472);
          --*(_DWORD *)(a1 + 236);
          return;
        }
        if (!*(unsigned char *)(a1 + 184)
          && !*(unsigned char *)(a1 + 220)
          && (float)(*(float *)(a1 + 16) * 4.0) <= (float)*(int *)(a1 + 236))
        {
          *(unsigned char *)(a1 + 220) = 1;
        }
      }
      uint64_t v66 = 0;
      float v67 = 0.0;
      do
      {
        float v67 = v67 + *(float *)(*(void *)(a1 + 1568) + v66);
        v66 += 40;
      }
      while (v66 != 360);
      double v68 = exp(v67 * 5.0) * 15.0;
      if (v68 > 5000.0) {
        double v68 = 5000.0;
      }
      if (v68 < 300.0) {
        double v68 = 300.0;
      }
      double v69 = exp(-1.0 / *(float *)(a1 + 16) / v68);
      int v70 = *(_DWORD *)(a1 + 472);
      if (v70 < 2)
      {
        double v72 = v69;
      }
      else
      {
        int v71 = v70 - 1;
        double v72 = v69;
        do
        {
          double v72 = v69 * v72;
          --v71;
        }
        while (v71);
      }
      int v73 = *(_DWORD *)(a1 + 20);
      sub_100AF4C34(a1, v72);
      sub_100AF4D58(a1, (float32x2_t *)&v96, a1 + 336, v73 > 0, 1.0);
      sub_100AF5350(a1, (float *)&v92);
      if (*(unsigned char *)(a1 + 244))
      {
        sub_100AF8F70(a1);
        sub_100AF0D44(a1, 0);
        *(unsigned char *)(a1 + 244) = 0;
        *(unsigned char *)(a1 + 220) = 0;
      }
      *(_DWORD *)(a1 + 472) = 0;
      long long v74 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a1 + 416) = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 432) = v74;
      if (&v96 != (uint64_t (***)())(a1 + 448))
      {
        *(float32x2_t *)(a1 + 456) = v97;
        *(float *)(a1 + 464) = v98;
      }
    }
    else
    {
      ++*(_DWORD *)(a1 + 472);
      --*(_DWORD *)(a1 + 236);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
      }
      float v63 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
      {
        int v64 = *(_DWORD *)(a1 + 472);
        *(_DWORD *)uint64_t buf = 67110400;
        *(_DWORD *)&uint8_t buf[4] = v64;
        *(_WORD *)&buf[8] = 2048;
        *(double *)&buf[10] = v87;
        *(_WORD *)&buf[18] = 2048;
        *(double *)&buf[20] = v88;
        *(_WORD *)&buf[28] = 2048;
        *(double *)&buf[30] = v89;
        *(_WORD *)&buf[38] = 2048;
        *(double *)&buf[40] = v90;
        *(_WORD *)&buf[48] = 2048;
        *(double *)&buf[50] = v62;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "numSamplesSkipped (%d), deltaQ (%.3f/%.3f/%.3f/%.3f), deltaReadingM (%.3f)", buf, 0x3Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
        }
        int v65 = *(_DWORD *)(a1 + 472);
        int v103 = 67110400;
        *(_DWORD *)float v104 = v65;
        *(_WORD *)&v104[4] = 2048;
        *(double *)&v104[6] = v87;
        *(_WORD *)&v104[14] = 2048;
        *(double *)&v104[16] = v88;
        *(_WORD *)&v104[24] = 2048;
        *(double *)&v104[26] = v89;
        *(_WORD *)&v104[34] = 2048;
        *(double *)&v104[36] = v90;
        *(_WORD *)&v104[44] = 2048;
        *(double *)&v104[46] = v62;
        double v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "%s\n", v11);
        goto LABEL_104;
      }
    }
  }
}

float32_t sub_100AF8EC4(float32x2_t *a1, float32x2_t *a2)
{
  if ((*(unsigned int (**)(float32x2_t *))(*(void *)a1 + 72))(a1))
  {
    float32_t v5 = (a1[13].f32[0] + 1.0) * a2[2].f32[0];
    a2[2].f32[0] = v5;
    float32_t result = v5 - a1[10].f32[0];
    __asm { FMOV            V2.2D, #1.0 }
    float32x2_t v11 = vcvt_f32_f64(vmulq_f64(vaddq_f64(vcvtq_f64_f32(a1[12]), _Q2), vcvtq_f64_f32(a2[1])));
    a2[1] = v11;
    a2[1] = vsub_f32(v11, a1[9]);
    a2[2].f32[0] = result;
  }
  return result;
}

void sub_100AF8F70(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 20);
  int v3 = *(_DWORD *)(a1 + 1592);
  if (v2 >= 2)
  {
    if (v2 != v3) {
      goto LABEL_4;
    }
    double v4 = *(double *)(a1 + 1472);
    double v5 = vabdd_f64(*(float *)(a1 + 520), v4);
    LODWORD(v4) = *(_DWORD *)(a1 + 1596);
    double v6 = *(double *)(a1 + 1480);
    double v7 = vabdd_f64(*(float *)(a1 + 524), v6);
    LODWORD(v6) = *(_DWORD *)(a1 + 1600);
    double v8 = v7 * (double)*(unint64_t *)&v6 + v5 * (double)*(unint64_t *)&v4;
    double v9 = *(double *)(a1 + 1488);
    double v10 = vabdd_f64(*(float *)(a1 + 528), v9);
    LODWORD(v9) = *(_DWORD *)(a1 + 1604);
    *(float *)&double v8 = v8 + v10 * (double)*(unint64_t *)&v9;
    int v3 = *(_DWORD *)(a1 + 20);
    if (*(float *)&v8 > 2.5) {
LABEL_4:
    }
      *(unsigned char *)(a1 + 25) = 1;
  }
  float v11 = *(double *)(a1 + 1472);
  float v12 = *(double *)(a1 + 1480);
  float v13 = *(double *)(a1 + 1488);
  *(float *)(a1 + 72) = v11;
  *(float *)(a1 + 76) = v12;
  *(float *)(a1 + 80) = v13;
  float v14 = *(double *)(a1 + 1512);
  *(float32x2_t *)(a1 + 96) = vcvt_f32_f64(*(float64x2_t *)(a1 + 1496));
  *(float *)(a1 + 104) = v14;
  float v15 = *(double *)(a1 + 1536);
  *(float32x2_t *)(a1 + 120) = vcvt_f32_f64(*(float64x2_t *)(a1 + 1520));
  *(float *)(a1 + 128) = v15;
  *(_DWORD *)(a1 + 20) = v3;
  *(void *)(a1 + 168) = *(void *)(a1 + 1596);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a1 + 1604);
  if (*(unsigned char *)(a1 + 25))
  {
    *(float *)(a1 + 520) = v11;
    *(float *)(a1 + 524) = v12;
    *(float *)(a1 + 528) = v13;
  }
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 252) = 0;
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
  }
  float v16 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v17 = *(void *)(a1 + 1472);
    uint64_t v18 = *(void *)(a1 + 1480);
    uint64_t v19 = *(void *)(a1 + 1488);
    uint64_t v20 = *(void *)(a1 + 1496);
    uint64_t v21 = *(void *)(a1 + 1504);
    uint64_t v22 = *(void *)(a1 + 1512);
    uint64_t v23 = *(void *)(a1 + 1520);
    uint64_t v24 = *(void *)(a1 + 1528);
    uint64_t v25 = *(void *)(a1 + 1536);
    *(_DWORD *)uint64_t buf = 134220032;
    uint64_t v28 = v17;
    __int16 v29 = 2048;
    uint64_t v30 = v18;
    __int16 v31 = 2048;
    uint64_t v32 = v19;
    __int16 v33 = 2048;
    uint64_t v34 = v20;
    __int16 v35 = 2048;
    uint64_t v36 = v21;
    __int16 v37 = 2048;
    uint64_t v38 = v22;
    __int16 v39 = 2048;
    uint64_t v40 = v23;
    __int16 v41 = 2048;
    uint64_t v42 = v24;
    __int16 v43 = 2048;
    uint64_t v44 = v25;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "bias.x,%.3f,bias.y,%.3f,bias.z,%.3f,scale.x,%.5f,scale.y,%.5f,scale.z,%.5f,extF.x,%.3f,extF.y,%.3f,extF.z,%.3f", buf, 0x5Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DD8A0);
    }
    float32_t v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::setCalibrationValues()", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
}

float32_t sub_100AF92FC(float32x2_t *a1, float *a2, float32x2_t *a3, double *a4)
{
  sub_100AF0BEC(a1 + 42, a4);
  uint64_t v7 = 51;
  if (!a1[23].i8[0]) {
    uint64_t v7 = 31;
  }
  uint64_t v8 = 25;
  if (!a1[23].i8[0]) {
    uint64_t v8 = 15;
  }
  uint64_t v9 = 26;
  if (!a1[23].i8[0]) {
    uint64_t v9 = 16;
  }
  float v10 = a1[v9].f32[0];
  float v11 = a1[v8].f32[0];
  float v12 = a1->f32[v7];
  float v13 = (float)((float)(v12 * a1[50].f32[1]) + (float)(v11 * a1[50].f32[0])) + (float)(v10 * a1[51].f32[0]);
  float v14 = (float)((float)(v12 * a1[47].f32[1]) + (float)(v11 * a1[47].f32[0])) + (float)(v10 * a1[48].f32[0]);
  a2[2] = (float)((float)(v12 * a1[44].f32[1]) + (float)(v11 * a1[44].f32[0])) + (float)(v10 * a1[45].f32[0]);
  a2[3] = v14;
  a2[4] = v13;

  return sub_100AF8EC4(a1, a3);
}

float32_t sub_100AF93D8(float32x2_t *a1, float32x2_t *a2, double *a3)
{
  if (a1[23].i8[0])
  {
    sub_100AF0BEC(a1 + 42, a3);
    float v6 = a1[25].f32[1];
    float v5 = a1[26].f32[0];
    float v7 = a1[25].f32[0];
    float32_t v8 = (float)((float)(v6 * a1[50].f32[1]) + (float)(v7 * a1[50].f32[0])) + (float)(v5 * a1[51].f32[0]);
    float32_t v9 = (float)((float)(v6 * a1[47].f32[1]) + (float)(v7 * a1[47].f32[0])) + (float)(v5 * a1[48].f32[0]);
    float32_t result = (float)((float)(v6 * a1[44].f32[1]) + (float)(v7 * a1[44].f32[0])) + (float)(v5 * a1[45].f32[0]);
    a2[1].f32[0] = result;
    a2[1].f32[1] = v9;
    a2[2].f32[0] = v8;
  }
  else
  {
    return sub_100AF8EC4(a1, a2);
  }
  return result;
}

float sub_100AF948C(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = *a2;
  float result = 1.0 / *(double *)a2;
  *(float *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 23) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  return result;
}

float sub_100AF94C0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(void *)a2 = *(void *)(a1 + 72);
  float result = *(float *)(a1 + 80);
  *(float *)(a2 + 8) = result;
  *a3 = *(_DWORD *)(a1 + 20);
  return result;
}

uint64_t sub_100AF94DC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 332);
}

uint64_t sub_100AF94E4()
{
  return 5;
}

uint64_t sub_100AF94EC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 59);
}

void sub_100AF94F4(id a1)
{
  qword_1024190A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

uint64_t sub_100AF9524()
{
  if (qword_10248A888) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A888 + 8))(qword_10248A888);
  }
  if (qword_10248A890) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A890 + 8))(qword_10248A890);
  }
  uint64_t result = qword_10248A898;
  if (qword_10248A898)
  {
    float v1 = *(uint64_t (**)(void))(*(void *)qword_10248A898 + 8);
    return v1();
  }
  return result;
}

void sub_100AF95DC(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_1024800F0 & 1) == 0)
  {
    byte_1024800F0 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPTropicalSavannaLogEntry.pb.cc", a4);
    operator new();
  }
}

void *sub_100AF976C(void *result)
{
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = &off_1022DD900;
  return result;
}

double sub_100AF9790(uint64_t a1)
{
  *(void *)a1 = off_1022DD978;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

double sub_100AF97BC(uint64_t a1)
{
  *(void *)a1 = off_1022DD9F0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void sub_100AF97E8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if (*(unsigned char *)(a2 + 20))
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      operator new();
    }
    uint64_t v5 = *(void *)(a2 + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248A888 + 8);
    }
    sub_100AF9DA4(v4, v5);
  }
}

void sub_100AF98D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100AF98E8(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1022DD900;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248A888 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100AF9978(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100AF98E8(a1);

  operator delete();
}

uint64_t sub_100AF99B0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A888;
  if (!qword_10248A888)
  {
    sub_100AF95DC(0, a2, a3, a4);
    return qword_10248A888;
  }
  return result;
}

void sub_100AF99E0()
{
}

uint64_t sub_100AF9A2C(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 20))
  {
    uint64_t result = *(void *)(result + 8);
    if (result) {
      uint64_t result = sub_100AF9A64(result);
    }
  }
  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100AF9A64(uint64_t result)
{
  LOBYTE(v1) = *(unsigned char *)(result + 36);
  if ((_BYTE)v1)
  {
    if (*(unsigned char *)(result + 36))
    {
      uint64_t v2 = *(void *)(result + 8);
      if (v2)
      {
        if (*(unsigned char *)(v2 + 36))
        {
          *(void *)(v2 + 8) = 0;
          *(void *)(v2 + 16) = 0;
          *(void *)(v2 + 24) = 0;
        }
        *(_DWORD *)(v2 + 36) = 0;
        int v1 = *(_DWORD *)(result + 36);
      }
    }
    if ((v1 & 2) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 36))
        {
          *(void *)(v3 + 8) = 0;
          *(void *)(v3 + 16) = 0;
          *(void *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 36) = 0;
      }
    }
    *(void *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100AF9ABC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      uint64_t v7 = *(void *)(a1 + 8);
      if (!v7) {
        operator new();
      }
      unsigned int v17 = 0;
      float32_t v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17))return 0; {
      }
        }
      else
      {
        unsigned int v17 = *v8;
        *((void *)this + 1) = v8 + 1;
      }
      int v9 = *((_DWORD *)this + 14);
      int v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10) {
        return 0;
      }
      int v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      if (!sub_100AFA634(v7, this, v12) || !*((unsigned char *)this + 36)) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      int v13 = *((_DWORD *)this + 14);
      BOOL v14 = __OFSUB__(v13, 1);
      int v15 = v13 - 1;
      if (v15 < 0 == v14) {
        *((_DWORD *)this + 14) = v15;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      break;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  return 1;
}

uint64_t sub_100AF9C80(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(result + 20))
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248A888 + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return result;
}

uint64_t sub_100AF9CAC(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_10248A888 + 8);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100AFAB28(v4, a2);
    int v7 = (int)v5;
    if (v5 >= 0x80) {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, v6);
    }
    else {
      int v8 = 1;
    }
    uint64_t result = (v7 + v8 + 1);
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100AF9D1C(uint64_t a1, void *lpsrc)
{
  sub_100AF97E8(a1, (uint64_t)lpsrc);
}

void sub_100AF9DA4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 36);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 36))
    {
      *(_DWORD *)(a1 + 36) |= 1u;
      uint64_t v5 = *(void *)(a1 + 8);
      if (!v5) {
        operator new();
      }
      uint64_t v6 = *(void *)(a2 + 8);
      if (!v6) {
        uint64_t v6 = *(void *)(qword_10248A898 + 8);
      }
      sub_100AF9F8C(v5, v6);
      int v4 = *(_DWORD *)(a2 + 36);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_19;
      }
    }
    else if ((*(unsigned char *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    *(_DWORD *)(a1 + 36) |= 2u;
    uint64_t v7 = *(void *)(a1 + 16);
    if (!v7) {
      operator new();
    }
    uint64_t v8 = *(void *)(a2 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248A898 + 16);
    }
    sub_100AF9F8C(v7, v8);
    int v4 = *(_DWORD *)(a2 + 36);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        return;
      }
LABEL_20:
      unsigned int v10 = *(_DWORD *)(a2 + 28);
      if (v10 >= 3) {
        sub_101A7EE4C();
      }
      *(_DWORD *)(a1 + 36) |= 8u;
      *(_DWORD *)(a1 + 28) = v10;
      return;
    }
LABEL_19:
    int v9 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(_DWORD *)(a1 + 24) = v9;
    if ((*(_DWORD *)(a2 + 36) & 8) == 0) {
      return;
    }
    goto LABEL_20;
  }
}

void sub_100AF9F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100AF9F74()
{
  return 1;
}

void *sub_100AF9F7C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.TropicalSavanna.LogEntry");
}

double sub_100AF9F8C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 36))
    {
      double result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(double *)(a1 + 8) = result;
      int v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          return result;
        }
        goto LABEL_7;
      }
    }
    else if ((*(unsigned char *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    double result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(double *)(a1 + 16) = result;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0) {
      return result;
    }
LABEL_7:
    double result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(double *)(a1 + 24) = result;
  }
  return result;
}

void sub_100AFA060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100AFA078(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022DD978;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100AFA098(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022DD978;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100AFA0EC()
{
}

uint64_t sub_100AFA140(uint64_t result)
{
  if (*(unsigned char *)(result + 36))
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100AFA158(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_27;
        }
        unint64_t v12 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 8) = v12;
        *(_DWORD *)(a1 + 36) |= 1u;
        int v9 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v9 < *((void *)this + 2) && *v9 == 17)
        {
          *((void *)this + 1) = v9 + 1;
LABEL_17:
          unint64_t v12 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
            return 0;
          }
          *(void *)(a1 + 16) = v12;
          *(_DWORD *)(a1 + 36) |= 2u;
          unsigned int v10 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v10 < *((void *)this + 2) && *v10 == 25)
          {
            *((void *)this + 1) = v10 + 1;
            goto LABEL_21;
          }
        }
      }
      if (v7 == 2)
      {
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_27;
        }
        goto LABEL_17;
      }
      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_27;
      }
      int v8 = TagFallback & 7;
      if (v8 == 1) {
        break;
      }
LABEL_27:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_21:
    unint64_t v12 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
      return 0;
    }
    *(void *)(a1 + 24) = v12;
    *(_DWORD *)(a1 + 36) |= 4u;
  }
  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)this + 36) = 1;
  return result;
}

uint64_t sub_100AFA320(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 36);
  if ((v5 & 1) == 0)
  {
    if ((v5 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v4 + 16), a3);
    if ((*(_DWORD *)(v4 + 36) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
  int v5 = *(_DWORD *)(v4 + 36);
  if ((v5 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 4) == 0) {
    return result;
  }
LABEL_7:
  double v6 = *(double *)(v4 + 24);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, v6, a3);
}

uint64_t sub_100AFA3AC(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 36);
  if (*(unsigned char *)(a1 + 36))
  {
    unsigned int v2 = ((int)(v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0) {
      v2 += 9;
    }
    if ((v1 & 4) != 0) {
      uint64_t v1 = v2 + 9;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *(_DWORD *)(a1 + 32) = v1;
  return v1;
}

double sub_100AFA3E4(uint64_t a1, void *lpsrc)
{
  return sub_100AF9F8C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100AFA46C()
{
  return 1;
}

void *sub_100AFA474@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.TropicalSavanna.TimeStamp");
}

void *sub_100AFA484(void *result)
{
  if ((void *)qword_10248A898 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t result = (void *)v1[2];
    if (result)
    {
      uint64_t v3 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v3();
    }
  }
  return result;
}

void sub_100AFA524(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022DD9F0;
  sub_100AFA484(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100AFA578(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022DD9F0;
  sub_100AFA484(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100AFA5E0()
{
}

uint64_t sub_100AFA634(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = (unsigned int *)(a1 + 24);
  while (2)
  {
    double v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_20;
        }
        *(_DWORD *)(a1 + 36) |= 1u;
        uint64_t v9 = *(void *)(a1 + 8);
        if (!v9) {
          operator new();
        }
        unsigned int v35 = 0;
        unsigned int v10 = (char *)*((void *)this + 1);
        if ((unint64_t)v10 >= *((void *)this + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v35))return 0; {
        }
          }
        else
        {
          unsigned int v35 = *v10;
          *((void *)this + 1) = v10 + 1;
        }
        int v14 = *((_DWORD *)this + 14);
        int v15 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v14 + 1;
        if (v14 >= v15) {
          return 0;
        }
        int v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v35);
        if (!sub_100AFA158(v9, this, v17) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
        int v18 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v18, 1);
        int v20 = v18 - 1;
        if (v20 < 0 == v19) {
          *((_DWORD *)this + 14) = v20;
        }
        uint64_t v21 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v21 >= *((void *)this + 2) || *v21 != 18) {
          continue;
        }
        *((void *)this + 1) = v21 + 1;
        goto LABEL_33;
      case 2u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_20;
        }
LABEL_33:
        *(_DWORD *)(a1 + 36) |= 2u;
        uint64_t v22 = *(void *)(a1 + 16);
        if (!v22) {
          operator new();
        }
        unsigned int v36 = 0;
        uint64_t v23 = (char *)*((void *)this + 1);
        if ((unint64_t)v23 >= *((void *)this + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v36))return 0; {
        }
          }
        else
        {
          unsigned int v36 = *v23;
          *((void *)this + 1) = v23 + 1;
        }
        int v24 = *((_DWORD *)this + 14);
        int v25 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v24 + 1;
        if (v24 < v25)
        {
          int v26 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v36);
          if (sub_100AFA158(v22, this, v27))
          {
            if (*((unsigned char *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v26);
              int v28 = *((_DWORD *)this + 14);
              BOOL v19 = __OFSUB__(v28, 1);
              int v29 = v28 - 1;
              if (v29 < 0 == v19) {
                *((_DWORD *)this + 14) = v29;
              }
              uint64_t v30 = (unsigned char *)*((void *)this + 1);
              unint64_t v11 = *((void *)this + 2);
              if ((unint64_t)v30 < v11 && *v30 == 24)
              {
                unint64_t v12 = v30 + 1;
                *((void *)this + 1) = v12;
LABEL_47:
                if ((unint64_t)v12 >= v11 || *v12 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
                  if (!result) {
                    return result;
                  }
                  __int16 v31 = (unsigned char *)*((void *)this + 1);
                  unint64_t v11 = *((void *)this + 2);
                }
                else
                {
                  *int v5 = *v12;
                  __int16 v31 = v12 + 1;
                  *((void *)this + 1) = v31;
                }
                *(_DWORD *)(a1 + 36) |= 4u;
                if ((unint64_t)v31 < v11 && *v31 == 32)
                {
                  int v13 = v31 + 1;
                  *((void *)this + 1) = v13;
LABEL_55:
                  unsigned int v34 = 0;
                  if ((unint64_t)v13 >= v11 || *v13 < 0)
                  {
                    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v34);
                    if (!result) {
                      return result;
                    }
                    unsigned int v33 = v34;
                  }
                  else
                  {
                    unsigned int v33 = *v13;
                    *((void *)this + 1) = v13 + 1;
                  }
                  if (v33 <= 2)
                  {
                    *(_DWORD *)(a1 + 36) |= 8u;
                    *(_DWORD *)(a1 + 28) = v33;
                  }
                  if (*((void *)this + 1) == *((void *)this + 2)
                    && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                  {
                    *((_DWORD *)this + 8) = 0;
                    uint64_t result = 1;
                    *((unsigned char *)this + 36) = 1;
                    return result;
                  }
                }
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_20;
        }
        unint64_t v12 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_47;
      case 4u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_20;
        }
        int v13 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_55;
      default:
        int v8 = TagFallback & 7;
LABEL_20:
        if (v8 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_100AFAA60(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 36);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248A898 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_12:
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 24), a2, a4);
      if ((*(_DWORD *)(v5 + 36) & 8) == 0) {
        return result;
      }
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_10248A898 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) != 0) {
    goto LABEL_12;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return result;
  }
LABEL_13:
  int v9 = *(_DWORD *)(v5 + 28);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, (int)a2, a4);
}

uint64_t sub_100AFAB28(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_37;
  }
  if ((*(unsigned char *)(a1 + 36) & 1) == 0)
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 36) & 2) == 0) {
      goto LABEL_24;
    }
    goto LABEL_15;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_10248A898 + 8);
  }
  int v6 = *(unsigned __int8 *)(v5 + 36);
  if (*(unsigned char *)(v5 + 36))
  {
    int v7 = (v6 << 31 >> 31) & 9;
    if ((v6 & 2) != 0) {
      v7 += 9;
    }
    if ((v6 & 4) != 0) {
      int v6 = v7 + 9;
    }
    else {
      int v6 = v7;
    }
  }
  *(_DWORD *)(v5 + 32) = v6;
  uint64_t v4 = (v6 + 2);
  int v3 = *(_DWORD *)(a1 + 36);
  if ((v3 & 2) != 0)
  {
LABEL_15:
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248A898 + 16);
    }
    int v9 = *(unsigned __int8 *)(v8 + 36);
    if (*(unsigned char *)(v8 + 36))
    {
      int v10 = (v9 << 31 >> 31) & 9;
      if ((v9 & 2) != 0) {
        v10 += 9;
      }
      if ((v9 & 4) != 0) {
        int v9 = v10 + 9;
      }
      else {
        int v9 = v10;
      }
    }
    *(_DWORD *)(v8 + 32) = v9;
    uint64_t v4 = (v4 + v9 + 2);
    int v3 = *(_DWORD *)(a1 + 36);
  }
LABEL_24:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_37;
    }
    goto LABEL_31;
  }
  unint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if (v11 >= 0x80)
  {
    int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 36);
  }
  else
  {
    int v12 = 2;
  }
  uint64_t v4 = (v12 + v4);
  if ((v3 & 8) != 0)
  {
LABEL_31:
    int v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if ((v13 & 0x80000000) != 0)
    {
      int v14 = 11;
    }
    else if (v13 >= 0x80)
    {
      int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    }
    else
    {
      int v14 = 2;
    }
    uint64_t v4 = (v14 + v4);
  }
LABEL_37:
  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

void sub_100AFAC70(uint64_t a1, void *lpsrc)
{
  sub_100AF9DA4(a1, (uint64_t)lpsrc);
}

uint64_t sub_100AFACF8()
{
  return 1;
}

void *sub_100AFAD00@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.TropicalSavanna.TropicalSavannaHint");
}

void sub_100AFAD58(id a1)
{
  sub_100103240();
  if (sub_10016CCBC() & 1) != 0 || (sub_1001B7C64() & 1) != 0 || (sub_100103240(), (sub_10073CFB8()))
  {
    byte_1024800F8 = 1;
  }
  else
  {
    if (qword_1024195C0 != -1) {
      dispatch_once(&qword_1024195C0, &stru_1022DDAE0);
    }
    uint64_t v1 = qword_1024195C8;
    if (os_log_type_enabled((os_log_t)qword_1024195C8, OS_LOG_TYPE_INFO))
    {
      uint64_t v2 = (objc_class *)objc_opt_class();
      *(_DWORD *)uint64_t buf = 136446210;
      int v6 = [NSStringFromClass(v2) UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "%{public}s not supported on this device type", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024195C0 != -1) {
        dispatch_once(&qword_1024195C0, &stru_1022DDAE0);
      }
      int v3 = (objc_class *)objc_opt_class();
      [NSStringFromClass(v3) UTF8String];
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "+[CLSuggestedActionManager(IsSupported) isSupported]_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_100AFB000(id a1)
{
  qword_102480108 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLSuggestedActionManagerSilo"];
}

void sub_100AFB104(id a1)
{
  qword_1024195C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "SAM");
}

BOOL sub_100AFB134(int a1)
{
  return (a1 - 32112928) < 0x2C0DA0;
}

void sub_100AFB154()
{
}

void sub_100AFB198()
{
}

uint64_t sub_100AFB1C0(uint64_t a1)
{
  uint64_t v2 = sub_1012F9E8C((char *)a1);
  *(void *)uint64_t v2 = off_1022DDBB0;
  *((_DWORD *)v2 + 40) = 0;
  *((_WORD *)v2 + 82) = 0;
  *(_OWORD *)(v2 + 168) = xmmword_101D1D170;
  *((_DWORD *)v2 + 46) = 0;
  *((void *)v2 + 24) = 0;
  *((void *)v2 + 25) = 0;
  *((void *)v2 + 26) = __stderrp;
  *((void *)v2 + 28) = 0;
  *((void *)v2 + 29) = 0;
  std::string::assign((std::string *)(v2 + 112), ".log");
  int v3 = dispatch_queue_create("com.apple.locationd.log.compression", 0);
  *(void *)(a1 + 216) = v3;
  global_queue = dispatch_get_global_queue(-32768, 0);
  dispatch_set_target_queue(v3, global_queue);
  return a1;
}

void sub_100AFB274(_Unwind_Exception *a1)
{
  int v3 = (std::__shared_weak_count *)v1[29];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1012FA00C(v1);
  _Unwind_Resume(a1);
}

void *sub_100AFB294(uint64_t a1)
{
  *(void *)a1 = off_1022DDBB0;
  sub_100AFB308(a1, 0, 0);
  dispatch_release(*(dispatch_object_t *)(a1 + 216));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 232);
  if (v2) {
    sub_1000DB0A0(v2);
  }

  return sub_1012FA00C((void *)a1);
}

uint64_t sub_100AFB308(uint64_t a1, FILE *a2, char a3)
{
  int v6 = (void *)(a1 + 48);
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16))(a1 + 48);
  int v7 = (FILE *)v6[18];
  if (v7 != a2)
  {
    *(void *)(a1 + 192) = a2;
    if (v7 && *(unsigned char *)(a1 + 164)) {
      fclose(v7);
    }
    *(unsigned char *)(a1 + 164) = a3;
  }
  return (*(uint64_t (**)(void *))(*v6 + 24))(v6);
}

void sub_100AFB3B8(uint64_t a1)
{
  sub_100AFB294(a1);

  operator delete();
}

uint64_t sub_100AFB3F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16))(a1 + 48);
  sub_100AFB4E4(a1, a2, a3, a4, a5, a6, &a9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v15 + 24))(v15);
}

void sub_100AFB4D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100AFB4E4(uint64_t a1, const char *a2, int a3, signed int a4, const char *a5, const char *a6, va_list a7)
{
  va_list v18 = a7;
  uint64_t v13 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16))(a1 + 48);
  unsigned int v14 = vsnprintf(__str, 0x1FFuLL, a6, v18);
  if ((v14 & 0x80000000) == 0)
  {
    if (v14 >= 0x1FF) {
      operator new[]();
    }
    uint64_t v15 = (int)v14 - 1;
    if (__str[v15] != 10) {
      __assert_rtn("vlog", "CLLog.mm", 172, "'\\n' == buffer[fullContentLength - 1]");
    }
    if (v14 >= 2)
    {
      uint64_t v15 = v15;
      int v16 = __str;
      do
      {
        if (*v16 == 10) {
          *int v16 = 32;
        }
        ++v16;
        --v15;
      }
      while (v15);
    }
    sub_100AFB758(a1, a2, a3, a4, a5, __str);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 24))(v13);
}

void sub_100AFB708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100AFB758(uint64_t a1, const char *a2, int a3, signed int a4, const char *a5, const char *a6)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (*(unsigned char *)(a1 + 160))
  {
    uint64_t v13 = *(FILE **)(a1 + 208);
    unsigned int v14 = sub_1004BA554(a4);
    fprintf(v13, "%s,%s,Time,%08.3f,Function,\"%s\",", v14, a2, Current, a5);
    uint64_t v15 = *(FILE **)(a1 + 208);
    fputs(a6, v15);
  }
  else
  {
    int v16 = *(FILE **)(a1 + 192);
    if (v16 && *(_DWORD *)(a1 + 168) >= a4)
    {
      unsigned int v17 = sub_1004BA554(a4);
      fprintf(v16, "%s,%s,Time,%08.3f,Function,\"%s\",", v17, a2, Current, a5);
      fputs(a6, *(FILE **)(a1 + 192));
      if (*(_DWORD *)(a1 + 180) >= a4) {
        sub_100AFBB84(a1, 3, *(FILE **)(a1 + 192));
      }
      sub_100AFBDE0(a1);
    }
    va_list v18 = *(FILE **)(a1 + 200);
    if (v18 && *(_DWORD *)(a1 + 172) >= a4)
    {
      BOOL v19 = sub_1004BA554(a4);
      fprintf(v18, "%s,%s,Time,%08.3f,", v19, a2, Current);
      fputs(a6, *(FILE **)(a1 + 200));
    }
    if ((!a3 || *(_DWORD *)(a1 + 184)) && *(_DWORD *)(a1 + 176) >= a4)
    {
      if (a4) {
        int v20 = 5;
      }
      else {
        int v20 = 3;
      }
      syslog(v20, "%s", a6);
    }
  }
}

uint64_t sub_100AFB904(uint64_t a1, const char *a2, int a3, signed int a4, const char *a5, char *__src, va_list a7)
{
  int v13 = strncpy(__dst, __src, 0x65CuLL);
  sub_100AFB9BC(v13, __dst);
  return sub_100AFB4E4(a1, a2, a3, a4, a5, __dst, a7);
}

BOOL sub_100AFB9BC(int a1, char *__s)
{
  int64_t v3 = strlen(__s);
  if (v3 < 1) {
    return 1;
  }
  uint64_t v4 = &__s[v3];
  uint64_t v5 = __s;
  while (1)
  {
    if (*v5 != 37)
    {
      int v6 = v5;
      goto LABEL_18;
    }
    int v6 = v5 + 1;
    int v7 = v5[1];
    if (v7 == 123) {
      break;
    }
LABEL_11:
    int v6 = v5 + 1;
    int v12 = v5 + 1;
    if (v7 != 64)
    {
      if (v7 != 46) {
        goto LABEL_18;
      }
      if (v5[2] != 42) {
        goto LABEL_18;
      }
      int v12 = v5 + 3;
      if (v5[3] != 80) {
        goto LABEL_18;
      }
      *(_WORD *)(v5 + 1) = 9572;
    }
    *int v12 = 112;
LABEL_18:
    uint64_t v5 = v6 + 1;
    if (v6 + 1 >= v4) {
      return 1;
    }
  }
  if (v6 != v4)
  {
    uint64_t v8 = 0;
    while (1)
    {
      int v9 = &v5[v8 + 2];
      if (v9 == v4) {
        break;
      }
      ++v8;
      if (*v9 == 125)
      {
        if (v8 == -1) {
          goto LABEL_18;
        }
        int v10 = &v5[v8];
        uint64_t v11 = (uint64_t)&v5[v8 + 1];
        memmove(v5, v6, v8 + 1);
        v10[1] = 37;
        int v7 = v10[2];
        uint64_t v5 = (char *)v11;
        goto LABEL_11;
      }
    }
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022DDC88);
  }
  unsigned int v14 = qword_102419538;
  BOOL result = os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_101A7EE78((uint64_t)__s, v14);
    return 0;
  }
  return result;
}

BOOL sub_100AFBB30(uint64_t a1)
{
  if (*(int *)(a1 + 12) < 1 || !*(void *)(a1 + 192)) {
    return 0;
  }
  if (*(char *)(a1 + 159) < 0)
  {
    if (*(void *)(a1 + 144)) {
      goto LABEL_5;
    }
    return 0;
  }
  if (!*(unsigned char *)(a1 + 159)) {
    return 0;
  }
LABEL_5:
  if (*(char *)(a1 + 87) < 0) {
    uint64_t v1 = *(void *)(a1 + 72);
  }
  else {
    uint64_t v1 = *(unsigned __int8 *)(a1 + 87);
  }
  return v1 != 0;
}

uint64_t sub_100AFBB84(uint64_t a1, int a2, FILE *a3)
{
  uint64_t v6 = a1 + 48;
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v12 = a1 + 48;
  (*(void (**)(uint64_t))(v5 + 16))(a1 + 48);
  __int16 v13 = 256;
  CFAbsoluteTimeGetCurrent();
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)unsigned int v14 = 0u;
  int v7 = backtrace(v14, 128);
  int v8 = a2 + 1;
  if (a2 + 1 < v7)
  {
    int v9 = (const void **)&v14[v8];
    do
    {
      if (dladdr(*v9, &v11))
      {
        if (v11.dli_sname)
        {
          basename((char *)v11.dli_fname);
          fprintf(a3, "%s,%s,Time,%08.3f,%d\t%s\t0x%08lx %s + %lu\n", "STATUS");
        }
        else
        {
          basename((char *)v11.dli_fname);
          fprintf(a3, "%s,%s,Time,%08.3f,%d\t%s\t0x%08lx 0x%08lx + %lu\n", "STATUS");
        }
      }
      else
      {
        fprintf(a3, "%s,%s,Time,%08.3f,%d\t0x%08lx\n");
      }
      ++v9;
      ++v8;
    }
    while (v7 != v8);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
}

void sub_100AFBDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AFBDE0(uint64_t a1)
{
  uint64_t v3 = a1 + 48;
  uint64_t v2 = *(void *)(a1 + 48);
  v5[1] = a1 + 48;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 48);
  __int16 v6 = 256;
  if (sub_100AFBB30(a1))
  {
    v5[0] = 0;
    fgetpos(*(FILE **)(a1 + 192), v5);
    if (v5[0] >= *(int *)(a1 + 12)) {
      sub_100AFC738(a1);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
}

void sub_100AFBE9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100AFBEB4(uint64_t a1)
{
  sub_10014DB48(a1 + 48);
  sub_1000D2988(*(void *)(a1 + 24), "ShowError", (BOOL *)(a1 + 162));
  sub_1000D2988(*(void *)(a1 + 24), "LogShowUI", (BOOL *)(a1 + 163));
  sub_10006EF84(*(void *)(a1 + 24), "LogFileLevel", (_DWORD *)(a1 + 168));
  sub_10006EF84(*(void *)(a1 + 24), "LogBufferLevel", (_DWORD *)(a1 + 172));
  sub_10006EF84(*(void *)(a1 + 24), "LogConsoleLevel", (_DWORD *)(a1 + 176));
  sub_10006EF84(*(void *)(a1 + 24), "LogStackLevel", (_DWORD *)(a1 + 180));
  sub_1004D1284(*(void *)(a1 + 24), "LogFileDirectory", (std::string *)(a1 + 64));
  sub_1004D1284(*(void *)(a1 + 24), "LogFilePrefix", (std::string *)(a1 + 88));
  sub_1000D2988(*(void *)(a1 + 24), "LogFileFlush", (BOOL *)(a1 + 165));
  sub_1000D2988(*(void *)(a1 + 24), "LogFence", (BOOL *)(a1 + 161));
  int v35 = 0;
  sub_10006EF84(*(void *)(a1 + 24), "LogBufferSize", &v35);
  v37[0] = @"Level";
  uint64_t v2 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 168)];
  v37[1] = @"RotationEnabled";
  v38[0] = v2;
  v38[1] = +[NSNumber numberWithBool:sub_100AFBB30(a1)];
  sub_1000FC494((uint64_t)+[NSDictionary dictionaryWithObjects:v38 forKeys:v37 count:2], (uint64_t)"LogLevel");
  if ((*(_DWORD *)(a1 + 168) & 0x80000000) != 0)
  {
    sub_100AFB308(a1, 0, 0);
    goto LABEL_75;
  }
  uint64_t v3 = *(void *)(a1 + 192);
  memset(&__p, 0, sizeof(__p));
  if (!sub_1004D1284(*(void *)(a1 + 24), "LogFile", &__p)) {
    goto LABEL_6;
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
LABEL_6:
    if (*(char *)(a1 + 87) < 0)
    {
      if (!*(void *)(a1 + 72)) {
        goto LABEL_43;
      }
    }
    else if (!*(unsigned char *)(a1 + 87))
    {
      goto LABEL_43;
    }
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(void *)(a1 + 96)) {
        goto LABEL_43;
      }
    }
    else if (!*(unsigned char *)(a1 + 111))
    {
      goto LABEL_43;
    }
    if (*(char *)(a1 + 87) >= 0) {
      size_t v5 = *(unsigned __int8 *)(a1 + 87);
    }
    else {
      size_t v5 = *(void *)(a1 + 72);
    }
    __int16 v6 = &v32;
    sub_1001110E4((uint64_t)&v32, v5 + 1);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v6 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    if (v5)
    {
      if (*(char *)(a1 + 87) >= 0) {
        int v7 = (const void *)(a1 + 64);
      }
      else {
        int v7 = *(const void **)(a1 + 64);
      }
      memmove(v6, v7, v5);
    }
    *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 47;
    int v8 = *(char *)(a1 + 111);
    if (v8 >= 0) {
      int v9 = (const std::string::value_type *)(a1 + 88);
    }
    else {
      int v9 = *(const std::string::value_type **)(a1 + 88);
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *(unsigned __int8 *)(a1 + 111);
    }
    else {
      std::string::size_type v10 = *(void *)(a1 + 96);
    }
    Dl_info v11 = std::string::append(&v32, v9, v10);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    int v13 = *(char *)(a1 + 135);
    if (v13 >= 0) {
      unsigned int v14 = (const std::string::value_type *)(a1 + 112);
    }
    else {
      unsigned int v14 = *(const std::string::value_type **)(a1 + 112);
    }
    if (v13 >= 0) {
      std::string::size_type v15 = *(unsigned __int8 *)(a1 + 135);
    }
    else {
      std::string::size_type v15 = *(void *)(a1 + 120);
    }
    long long v16 = std::string::append(&v33, v14, v15);
    std::string::size_type v17 = v16->__r_.__value_.__r.__words[0];
    v36[0] = v16->__r_.__value_.__l.__size_;
    *(void *)((char *)v36 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
    char v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = v17;
    __p.__r_.__value_.__l.__size_ = v36[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v36 + 7);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v18;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
  }
LABEL_43:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v19 = __p.__r_.__value_.__l.__size_;
  }
  if (v19)
  {
    if (v3)
    {
      uint64_t v20 = *(unsigned __int8 *)(a1 + 159);
      int v21 = (char)v20;
      if ((v20 & 0x80u) != 0) {
        uint64_t v20 = *(void *)(a1 + 144);
      }
      if (v19 == v20)
      {
        if (v21 >= 0) {
          long long v22 = (unsigned __int8 *)(a1 + 136);
        }
        else {
          long long v22 = *(unsigned __int8 **)(a1 + 136);
        }
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          long long v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (memcmp(__p.__r_.__value_.__l.__data_, v22, __p.__r_.__value_.__l.__size_)) {
            goto LABEL_63;
          }
        }
        else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
        {
          p_p = &__p;
          uint64_t v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          while (p_p->__r_.__value_.__s.__data_[0] == *v22)
          {
            p_p = (std::string *)((char *)p_p + 1);
            ++v22;
            if (!--v24) {
              goto LABEL_66;
            }
          }
          goto LABEL_60;
        }
LABEL_66:
        sub_100AFC698(a1, *(unsigned __int8 *)(a1 + 165));
        long long v27 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (*(unsigned char *)(a1 + 165)) {
          long long v28 = " and flushing immediately";
        }
        else {
          long long v28 = " no flush";
        }
        syslog(5, "%s,%s,logging locations to %s%s\n", "NOTICE", "CLLog", (const char *)v27, v28);
        goto LABEL_73;
      }
    }
LABEL_60:
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v25 = &__p;
    }
    else {
      long long v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
LABEL_63:
    sub_100AFC550(a1, (char *)v25);
    if (!v3)
    {
      uint64_t v26 = *(void *)(a1 + 224);
      if (v26) {
        sub_100B02E64(v26, *(FILE **)(a1 + 192));
      }
    }
    goto LABEL_66;
  }
  sub_100AFB308(a1, 0, 0);
LABEL_73:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_75:
  if ((*(_DWORD *)(a1 + 172) & 0x80000000) != 0 || v35 < 1)
  {
    long long v31 = *(std::__shared_weak_count **)(a1 + 232);
    *(void *)(a1 + 224) = 0;
    *(void *)(a1 + 232) = 0;
    if (v31) {
      sub_1000DB0A0(v31);
    }
    *(void *)(a1 + 200) = 0;
  }
  else
  {
    if (v35 > 0xA00000) {
      int v35 = 10485760;
    }
    uint64_t v29 = *(void *)(a1 + 224);
    if (!v29 || (int v30 = sub_10012FD50(v29), v30 != v35)) {
      operator new();
    }
    *(void *)(a1 + 200) = sub_100B02CD0(*(FILE ***)(a1 + 224));
    syslog(5, "%s,%s,logging locations to an internal buffer with capacity %d\n", "NOTICE", "CLLog", v35);
  }
}

void sub_100AFC4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AFC550(uint64_t a1, char *a2)
{
  uint64_t v4 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16))(a1 + 48);
  if (a2)
  {
    uid_t v5 = getuid();
    gid_t v6 = getgid();
    sub_1004BB250(a2, v5, v6);
    int v7 = fopen(a2, "a");
    if (v7)
    {
      std::string::assign((std::string *)(a1 + 136), a2);
      sub_100AFB308(a1, v7, 1);
      sub_100AFC698(a1, *(unsigned __int8 *)(a1 + 165));
      sub_100AFD3A8(a1);
    }
    else
    {
      int v8 = __error();
      syslog(3, "%s,%s,could not open locations log %s, errno %d\n", "ERROR", "CLLog", a2, *v8);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_100AFC684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100AFC698(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16))(a1 + 48);
  *(unsigned char *)(v3 + 117) = a2 != 0;
  uint64_t v4 = *(FILE **)(v3 + 144);
  if (v4) {
    setvbuf(v4, 0, a2 != 0, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
}

uint64_t sub_100AFC738(uint64_t a1)
{
  uint64_t v3 = a1 + 48;
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v45 = a1 + 48;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 48);
  __int16 v46 = 256;
  sub_100134750(v35, ".log");
  uint64_t v4 = sub_1012FB06C();
  sub_1012FAC6C((const void **)(v3 + 16), v3 + 40, (uint64_t)v35, (uint64_t)v4, &v44);
  if (SHIBYTE(v36) < 0) {
    operator delete(v35[0]);
  }
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v44.__r_.__value_.__l.__size_;
  }
  gid_t v6 = &v42;
  sub_1001110E4((uint64_t)&v42, size + 4);
  if (v43 < 0) {
    gid_t v6 = (long long *)v42;
  }
  if (size)
  {
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v7 = &v44;
    }
    else {
      int v7 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    memmove(v6, v7, size);
  }
  strcpy((char *)v6 + size, ".bz2");
  sub_100AFCCE4(a1);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v8 = &v44;
  }
  else {
    int v8 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  uid_t v9 = getuid();
  gid_t v10 = getgid();
  sub_1004BB250(v8, v9, v10);
  long long v12 = (char *)(a1 + 136);
  int v13 = (const std::__fs::filesystem::path *)(a1 + 136);
  if (*(char *)(a1 + 159) < 0) {
    int v13 = *(const std::__fs::filesystem::path **)v12;
  }
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v14 = (const std::__fs::filesystem::path *)&v44;
  }
  else {
    unsigned int v14 = (const std::__fs::filesystem::path *)v44.__r_.__value_.__r.__words[0];
  }
  if (!sub_1004BB3CC(v13, v14, v11))
  {
    int v15 = SHIBYTE(v43);
    long long v16 = (const char *)v42;
    std::string::size_type v17 = __error();
    char v18 = (const char *)&v42;
    if (v15 < 0) {
      char v18 = v16;
    }
    syslog(3, "%s,%s,Failed to move aside log file %s (%d)\n", "ERROR", "CLLog", v18, *v17);
  }
  if (*(char *)(a1 + 159) < 0) {
    long long v12 = *(char **)v12;
  }
  sub_100AFC550(a1, v12);
  if (*(char *)(a1 + 111) < 0)
  {
    sub_1000DC48C(&__dst, *(void **)(a1 + 88), *(void *)(a1 + 96));
  }
  else
  {
    long long __dst = *(_OWORD *)(v3 + 40);
    uint64_t v41 = *(void *)(v3 + 56);
  }
  if (*(char *)(a1 + 87) < 0)
  {
    sub_1000DC48C(&v38, *(void **)(a1 + 64), *(void *)(a1 + 72));
  }
  else
  {
    long long v38 = *(_OWORD *)(v3 + 16);
    uint64_t v39 = *(void *)(v3 + 32);
  }
  int v19 = *(_DWORD *)(a1 + 16);
  v35[0] = 0;
  v35[1] = v35;
  uint64_t v36 = 0x2020000000;
  int v37 = 0;
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3321888768;
  v29[2] = sub_100AFCD64;
  v29[3] = &unk_1022DDBD8;
  v29[5] = a1;
  if (SHIBYTE(v41) < 0)
  {
    sub_1000DC48C(&v30, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    long long v30 = __dst;
    uint64_t v31 = v41;
  }
  void v29[4] = v35;
  int v34 = v19;
  if (SHIBYTE(v39) < 0)
  {
    sub_1000DC48C(&v32, (void *)v38, *((unint64_t *)&v38 + 1));
  }
  else
  {
    long long v32 = v38;
    uint64_t v33 = v39;
  }
  uint64_t v20 = *(NSObject **)(a1 + 216);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_100AFD170;
  block[3] = &unk_1022DDC10;
  int v28 = v19;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    sub_1000DC48C(&v23, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  }
  else {
    std::string v23 = v44;
  }
  if (SHIBYTE(v43) < 0)
  {
    sub_1000DC48C(&v24, (void *)v42, *((unint64_t *)&v42 + 1));
  }
  else
  {
    long long v24 = v42;
    uint64_t v25 = v43;
  }
  if (SHIBYTE(v39) < 0)
  {
    sub_1000DC48C(&__p, (void *)v38, *((unint64_t *)&v38 + 1));
  }
  else
  {
    long long __p = v38;
    uint64_t v27 = v39;
  }
  block[4] = v29;
  dispatch_async(v20, block);
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)v24);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33) < 0) {
    operator delete((void *)v32);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)v30);
  }
  _Block_object_dispose(v35, 8);
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete((void *)__dst);
  }
  if (SHIBYTE(v43) < 0) {
    operator delete((void *)v42);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
}

void sub_100AFCBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  _Block_object_dispose((const void *)(v51 - 240), 8);
  if (*(char *)(v51 - 185) < 0) {
    operator delete(*(void **)(v51 - 208));
  }
  if (*(char *)(v51 - 153) < 0) {
    operator delete(*(void **)(v51 - 176));
  }
  if (*(char *)(v51 - 129) < 0) {
    operator delete(*(void **)(v51 - 152));
  }
  if (*(char *)(v51 - 105) < 0) {
    operator delete(*(void **)(v51 - 128));
  }
  sub_1019DB560(v51 - 104);
  _Unwind_Resume(a1);
}

uint64_t sub_100AFCCE4(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 48);
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16))(a1 + 48);
  uint64_t v2 = (FILE *)v1[18];
  if (v2) {
    fflush(v2);
  }
  return (*(uint64_t (**)(void *))(*v1 + 24))(v1);
}

uint64_t sub_100AFCD64(uint64_t a1, char *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  sub_100134750(v21, a2);
  if (*(char *)(a1 + 71) >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    size_t v5 = *(void *)(a1 + 56);
  }
  gid_t v6 = v19;
  sub_1001110E4((uint64_t)v19, v5 + 1);
  if (v20 < 0) {
    gid_t v6 = (void **)v19[0];
  }
  if (v5)
  {
    if (*(char *)(a1 + 71) >= 0) {
      int v7 = (const void *)(a1 + 48);
    }
    else {
      int v7 = *(const void **)(a1 + 48);
    }
    memmove(v6, v7, v5);
  }
  *(_WORD *)((char *)v6 + v5) = 95;
  if (sub_1012FB078(v4, (char **)v21, (char *)v19))
  {
    sub_100134750(v17, a2);
    sub_100134750(v15, ".log.bz2");
    if (sub_1012FB150(v4, v17, (char *)v15))
    {
      int v8 = 1;
    }
    else
    {
      sub_100134750(v13, a2);
      sub_100134750(__p, ".log");
      int v8 = sub_1012FB150(v4, v13, (char *)__p);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      if (v14 < 0) {
        operator delete(v13[0]);
      }
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
  }
  else
  {
    int v8 = 0;
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (v22 < 0)
  {
    operator delete(v21[0]);
    if (!v8) {
      return 1;
    }
  }
  else if (!v8)
  {
    return 1;
  }
  if (++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) > *(_DWORD *)(a1 + 96))
  {
    LOBYTE(v21[0]) = 0;
    uid_t v9 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      uid_t v9 = *(const char **)v9;
    }
    if (snprintf((char *)v21, 0x400uLL, "%s/%s", v9, a2) > 1023)
    {
      syslog(3, "%s,%s,Rotation path is too long, could not delete old logs.\n", "ERROR", "CLLog");
    }
    else if (!sub_1004BB38C((const char *)v21))
    {
      perror("Failed to delete log");
    }
  }
  return 1;
}

void sub_100AFCFD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_100AFD074(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 71) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 48), *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v4;
  }
  BOOL result = (unsigned char *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0) {
    return sub_1000DC48C(result, *(void **)(a2 + 72), *(void *)(a2 + 80));
  }
  long long v6 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)BOOL result = v6;
  return result;
}

void sub_100AFD0FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 71) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AFD118(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 48);
    operator delete(v2);
  }
}

void sub_100AFD170(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 112)) {
    goto LABEL_7;
  }
  uint64_t v2 = (const char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    uint64_t v2 = *(const char **)v2;
  }
  uint64_t v3 = (const char *)(a1 + 64);
  long long v4 = (const char *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0) {
    long long v4 = *(const char **)v3;
  }
  if (!sub_1004BD394(v2, v4))
  {
    if (*(char *)(a1 + 87) < 0) {
      uint64_t v3 = *(const char **)v3;
    }
    syslog(3, "%s,%s,Failed to write %s\n", "ERROR", "CLLog", v3);
  }
  else
  {
LABEL_7:
    size_t v5 = (const char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      size_t v5 = *(const char **)v5;
    }
    sub_1004BB38C(v5);
  }
  if ((*(_DWORD *)(a1 + 112) & 0x80000000) == 0)
  {
    long long v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      long long v6 = (void *)*v6;
    }
    uint64_t v7 = *(void *)(a1 + 32);
    sub_100B04560((uint64_t)v6, v7);
  }
}

unsigned char *sub_100AFD254(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 40), *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  if (*(char *)(a2 + 87) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 64), *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v5;
  }
  BOOL result = (unsigned char *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0) {
    return sub_1000DC48C(result, *(void **)(a2 + 88), *(void *)(a2 + 96));
  }
  long long v7 = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)BOOL result = v7;
  return result;
}

void sub_100AFD30C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 87) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 63) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AFD340(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 40);
    operator delete(v2);
  }
}

void sub_100AFD3A8(uint64_t a1)
{
  uint64_t v2 = *(FILE **)(a1 + 192);
  if (v2) {
    sub_1004BE600(v2);
  }
  sub_100103240();
  sub_10073B6FC((uint64_t)__p);
  if (__p[23] >= 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = *(char **)__p;
  }
  sub_100134750(&v31, v3);
  if (__p[23] < 0) {
    operator delete(*(void **)__p);
  }
  std::string::size_type size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  char v5 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v31.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    std::string::assign(&v31, "Unplugged!");
    char v5 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  }
  bzero(__p, 0x65CuLL);
  long long v6 = &v31;
  if (v5 < 0) {
    long long v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  snprintf(__p, 0x65CuLL, "CoreLocation-%s\n", (const char *)v6);
  sub_100AFB3F0(a1, (uint64_t)"Generic", 0, 2, (uint64_t)"void CLLog::logHeader()", (uint64_t)"%s\n", v7, v8, (uint64_t)__p);
  bzero(__p, 0x65CuLL);
  snprintf(__p, 0x65CuLL, "locationd was compiled on %s at %s\n", "Nov 21 2024", "21:17:06");
  sub_100AFB3F0(a1, (uint64_t)"Generic", 0, 2, (uint64_t)"void CLLog::logHeader()", (uint64_t)"%s\n", v9, v10, (uint64_t)__p);
  bufstd::string::size_type size = 1024;
  if (_NSGetExecutablePath(buf, &bufsize))
  {
    bzero(__p, 0x65CuLL);
    uint64_t v11 = sub_100103240();
    char v12 = v28;
    sub_10073B1A4(v11, (uint64_t)v28);
    if (v29 < 0) {
      char v12 = (void **)v28[0];
    }
    sub_100103240();
    sub_10073ADA8((uint64_t)v26);
    if (v27 >= 0) {
      int v13 = v26;
    }
    else {
      int v13 = (void **)v26[0];
    }
    snprintf(__p, 0x65CuLL, "/usr/libexec/locationd @ system model %s / version %s\n", (const char *)v12, (const char *)v13);
    if (v27 < 0) {
      operator delete(v26[0]);
    }
    if (v29 < 0) {
      operator delete(v28[0]);
    }
  }
  else
  {
    bzero(__p, 0x65CuLL);
    uint64_t v16 = sub_100103240();
    std::string::size_type v17 = v28;
    sub_10073B1A4(v16, (uint64_t)v28);
    if (v29 < 0) {
      std::string::size_type v17 = (void **)v28[0];
    }
    sub_100103240();
    sub_10073ADA8((uint64_t)v26);
    if (v27 >= 0) {
      char v18 = v26;
    }
    else {
      char v18 = (void **)v26[0];
    }
    snprintf(__p, 0x65CuLL, "%s @ system model %s / version %s\n", buf, (const char *)v17, (const char *)v18);
    if (v27 < 0) {
      operator delete(v26[0]);
    }
    if (v29 < 0) {
      operator delete(v28[0]);
    }
  }
  sub_100AFB3F0(a1, (uint64_t)"Generic", 0, 2, (uint64_t)"void CLLog::logHeader()", (uint64_t)"%s\n", v14, v15, (uint64_t)__p);
  bzero(__p, 0x65CuLL);
  sub_100103240();
  sub_10073B95C((uint64_t)v28);
  if (v29 >= 0) {
    int v19 = v28;
  }
  else {
    int v19 = (void **)v28[0];
  }
  snprintf(__p, 0x65CuLL, "IOPlatformSerialNumber: %s\n", (const char *)v19);
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  sub_100AFB3F0(a1, (uint64_t)"Generic", 0, 2, (uint64_t)"void CLLog::logHeader()", (uint64_t)"%s\n", v20, v21, (uint64_t)__p);
  bzero(v34, 0x5EAuLL);
  strcpy(__p, "Begin settings dump (read at construction of CLSettings or upon darwin notification 'com.apple.locationd/prefs')\n");
  sub_100AFB3F0(a1, (uint64_t)"Generic", 0, 2, (uint64_t)"void CLLog::logHeader()", (uint64_t)"%s\n", v22, v23, (uint64_t)__p);
  (*(void (**)(void))(**(void **)(a1 + 24) + 792))(*(void *)(a1 + 24));
  bzero(&__p[19], 0x649uLL);
  strcpy(__p, "End settings dump\n");
  sub_100AFB3F0(a1, (uint64_t)"Generic", 0, 2, (uint64_t)"void CLLog::logHeader()", (uint64_t)"%s\n", v24, v25, (uint64_t)__p);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
}

void sub_100AFD860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100AFD8E0(uint64_t a1, int a2)
{
  uint64_t v3 = (_DWORD *)(a1 + 48);
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16))(a1 + 48);
  v3[34] = a2;
  return (*(uint64_t (**)(_DWORD *))(*(void *)v3 + 24))(v3);
}

BOOL sub_100AFD95C(uint64_t a1)
{
  uint64_t v1 = (_DWORD *)(a1 + 48);
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16))(a1 + 48);
  int v2 = v1[34];
  (*(void (**)(_DWORD *))(*(void *)v1 + 24))(v1);
  return v2 != 0;
}

uint64_t sub_100AFD9DC(uint64_t a1)
{
  uint64_t v1 = (unsigned __int8 *)(a1 + 48);
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16))(a1 + 48);
  uint64_t v2 = v1[115];
  (*(void (**)(unsigned __int8 *))(*(void *)v1 + 24))(v1);
  return v2;
}

uint64_t sub_100AFDA58(uint64_t a1)
{
  uint64_t v3 = a1 + 48;
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v79 = a1 + 48;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 48);
  __int16 v80 = 256;
  long long v4 = sub_1012FB06C();
  if (*(char *)(a1 + 87) < 0)
  {
    sub_1000DC48C(&__dst, *(void **)(a1 + 64), *(void *)(a1 + 72));
  }
  else
  {
    long long __dst = *(_OWORD *)(a1 + 64);
    uint64_t v78 = *(void *)(a1 + 80);
  }
  if (*(char *)(a1 + 111) < 0)
  {
    sub_1000DC48C(&v75, *(void **)(a1 + 88), *(void *)(a1 + 96));
  }
  else
  {
    long long v75 = *(_OWORD *)(a1 + 88);
    uint64_t v76 = *(void *)(a1 + 104);
  }
  if (*(void *)(a1 + 224))
  {
    syslog(5, "%s,%s,dumping internal buffer\n", "NOTICE", "CLLog");
    sub_1012FAF9C(a1, __p);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v5 = __p;
    }
    else {
      char v5 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    long long v6 = fopen((const char *)v5, "a");
    uint64_t v7 = v6;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if (v7) {
        goto LABEL_13;
      }
    }
    else if (v6)
    {
LABEL_13:
      sub_100B02E64(*(void *)(a1 + 224), v7);
      fclose(v7);
      char v8 = 1;
      goto LABEL_16;
    }
  }
  char v8 = 0;
LABEL_16:
  if (v78 >= 0) {
    p_dst = (const char *)&__dst;
  }
  else {
    p_dst = (const char *)__dst;
  }
  if (sub_1000A569C(p_dst))
  {
    char v10 = HIBYTE(v78);
    if (v78 >= 0) {
      uint64_t v11 = &__dst;
    }
    else {
      uint64_t v11 = (long long *)__dst;
    }
    v70[0] = _NSConcreteStackBlock;
    v70[1] = 3321888768;
    v70[2] = sub_100AFE740;
    v70[3] = &unk_1022DDC40;
    v70[4] = a1;
    if (SHIBYTE(v76) < 0)
    {
      sub_1000DC48C(&v71, (void *)v75, *((unint64_t *)&v75 + 1));
      char v10 = HIBYTE(v78);
    }
    else
    {
      long long v71 = v75;
      uint64_t v72 = v76;
    }
    if (v10 < 0)
    {
      sub_1000DC48C(&v73, (void *)__dst, *((unint64_t *)&__dst + 1));
    }
    else
    {
      long long v73 = __dst;
      uint64_t v74 = v78;
    }
    sub_100B04560((uint64_t)v11, (uint64_t)v70);
    if (SHIBYTE(v74) < 0) {
      operator delete((void *)v73);
    }
    if (SHIBYTE(v72) < 0) {
      operator delete((void *)v71);
    }
  }
  sub_100AFCCE4(a1);
  char v12 = (char *)(a1 + 136);
  int v13 = (const char *)(a1 + 136);
  if (*(char *)(a1 + 159) < 0) {
    int v13 = *(const char **)v12;
  }
  if (sub_1000A569C(v13))
  {
    sub_1012FAF9C(a1, __p);
    uint64_t v15 = (const std::__fs::filesystem::path *)(a1 + 136);
    if (*(char *)(a1 + 159) < 0) {
      uint64_t v15 = *(const std::__fs::filesystem::path **)v12;
    }
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v16 = (const std::__fs::filesystem::path *)__p;
    }
    else {
      uint64_t v16 = (const std::__fs::filesystem::path *)__p[0].__r_.__value_.__r.__words[0];
    }
    sub_1004BB3CC(v15, v16, v14);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v17 = __p;
    }
    else {
      std::string::size_type v17 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    sub_1004BB1FC((const char *)v17);
    if (*(char *)(a1 + 159) < 0) {
      char v12 = *(char **)v12;
    }
    sub_100AFC550(a1, v12);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    char v8 = 1;
  }
  BOOL v69 = 0;
  sub_1000C7F88(__p);
  if (sub_1000D2988((uint64_t)__p[0].__r_.__value_.__l.__data_, "LogNatalimetry", &v69))
  {
    char v18 = 1;
  }
  else
  {
    sub_1000C7F88(&v65);
    char v18 = sub_1000D2988(v65, "LogCalorimetry", &v69);
    if (*((void *)&v65 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v65 + 1));
    }
  }
  if (__p[0].__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_);
  }
  if (v18)
  {
    if (v69)
    {
      sub_100134750(&v64, "");
      *(void *)&long long v65 = 0x100000003;
      WORD4(v65) = 0;
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        sub_1000DC48C(&v66, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
      }
      else {
        std::string v66 = v64;
      }
      uint64_t v67 = 0;
      sub_1005F54CC(__p, &v65);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      sub_1012FAA88((uint64_t)&v64);
      int v19 = std::string::append(&v64, "/cache_encryptedC.db");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[0] = v19->__r_.__value_.__r.__words[2];
      long long v65 = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if (v66.__r_.__value_.__s.__data_[7] >= 0) {
        uint64_t v21 = (const char *)&v65;
      }
      else {
        uint64_t v21 = (const char *)v65;
      }
      sub_10060006C((uint64_t)__p, v21);
      if (v66.__r_.__value_.__s.__data_[7] >= 0) {
        uint64_t v22 = (const char *)&v65;
      }
      else {
        uint64_t v22 = (const char *)v65;
      }
      sub_1004BB1FC(v22);
      if (v66.__r_.__value_.__s.__data_[7] < 0) {
        operator delete((void *)v65);
      }
      sub_1005F5850(__p);
      sub_10053B99C(0, &v64);
      uint64_t v23 = std::string::append(&v64, "userinfo");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[0] = v23->__r_.__value_.__r.__words[2];
      long long v65 = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      uint64_t v25 = std::string::append((std::string *)&v65, ".plist");
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      __p[0].__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      if (v66.__r_.__value_.__s.__data_[7] < 0) {
        operator delete((void *)v65);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v27 = __p;
      }
      else {
        char v27 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      }
      if (sub_1000A569C((const char *)v27))
      {
        sub_1012FAA88((uint64_t)&v62);
        int v28 = std::string::append(&v62, "/");
        long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        long long v30 = std::string::append(&v63, "userinfo");
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        long long v32 = std::string::append(&v64, ".log");
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v66.__r_.__value_.__r.__words[0] = v32->__r_.__value_.__r.__words[2];
        long long v65 = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v64.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v63.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v62.__r_.__value_.__l.__data_);
        }
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v34 = __p;
        }
        else {
          int v34 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        }
        if (v66.__r_.__value_.__s.__data_[7] >= 0) {
          int v35 = (const char *)&v65;
        }
        else {
          int v35 = (const char *)v65;
        }
        sub_1004BB3EC((const char *)v34, v35);
        if (v66.__r_.__value_.__s.__data_[7] >= 0) {
          uint64_t v36 = (const char *)&v65;
        }
        else {
          uint64_t v36 = (const char *)v65;
        }
        sub_1004BB1FC(v36);
        if (v66.__r_.__value_.__s.__data_[7] < 0) {
          operator delete((void *)v65);
        }
      }
      sub_10053B99C(0, &v63);
      int v37 = std::string::append(&v63, "cache");
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      uint64_t v39 = std::string::append(&v64, ".plist");
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[0] = v39->__r_.__value_.__r.__words[2];
      long long v65 = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      if (v66.__r_.__value_.__s.__data_[7] >= 0) {
        uint64_t v41 = (const char *)&v65;
      }
      else {
        uint64_t v41 = (const char *)v65;
      }
      if (sub_1000A569C(v41))
      {
        sub_1012FAA88((uint64_t)&v61);
        long long v42 = std::string::append(&v61, "/");
        long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        std::string v44 = std::string::append(&v62, "cache");
        long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        __int16 v46 = std::string::append(&v63, ".log");
        long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v47;
        v46->__r_.__value_.__l.__size_ = 0;
        v46->__r_.__value_.__r.__words[2] = 0;
        v46->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v63.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v62.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v61.__r_.__value_.__l.__data_);
        }
        if (v66.__r_.__value_.__s.__data_[7] >= 0) {
          uint64_t v48 = (const char *)&v65;
        }
        else {
          uint64_t v48 = (const char *)v65;
        }
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v49 = &v64;
        }
        else {
          uint64_t v49 = (std::string *)v64.__r_.__value_.__r.__words[0];
        }
        sub_1004BB3EC(v48, (const char *)v49);
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v50 = &v64;
        }
        else {
          unint64_t v50 = (std::string *)v64.__r_.__value_.__r.__words[0];
        }
        sub_1004BB1FC((const char *)v50);
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v64.__r_.__value_.__l.__data_);
        }
      }
      if (v66.__r_.__value_.__s.__data_[7] < 0) {
        operator delete((void *)v65);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    BOOL v69 = 0;
  }
  sub_1012FA8A4((uint64_t)&v63);
  uint64_t v51 = std::string::append(&v63, "/");
  long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v52;
  v51->__r_.__value_.__l.__size_ = 0;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = 0;
  float v53 = std::string::append(&v64, "com.apple.timed");
  long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__r.__words[0] = v53->__r_.__value_.__r.__words[2];
  long long v65 = v54;
  v53->__r_.__value_.__l.__size_ = 0;
  v53->__r_.__value_.__r.__words[2] = 0;
  v53->__r_.__value_.__r.__words[0] = 0;
  int v55 = std::string::append((std::string *)&v65, ".plist");
  long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  if (v66.__r_.__value_.__s.__data_[7] < 0) {
    operator delete((void *)v65);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v57 = __p;
  }
  else {
    BOOL v57 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  if (!sub_1000A569C((const char *)v57)) {
    goto LABEL_154;
  }
  sub_1012FA79C((uint64_t)&v64);
  sub_100134750(&v63, "com.apple.timed");
  sub_100134750(&v62, ".plist.log");
  sub_1012FAC6C((const void **)&v64.__r_.__value_.__l.__data_, (uint64_t)&v63, (uint64_t)&v62, (uint64_t)v4, (std::string *)&v65);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v58 = __p;
  }
  else {
    double v58 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  if (v66.__r_.__value_.__s.__data_[7] >= 0) {
    uint64_t v59 = (const char *)&v65;
  }
  else {
    uint64_t v59 = (const char *)v65;
  }
  if (sub_1004BB3EC((const char *)v58, v59) == 1) {
    syslog(5, "%s,%s,could not copy %s log\n", "WARNING", "CLLog", "com.apple.timed");
  }
  if ((v66.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
LABEL_154:
    if (v8) {
      goto LABEL_156;
    }
    goto LABEL_155;
  }
  operator delete((void *)v65);
  if ((v8 & 1) == 0) {
LABEL_155:
  }
    syslog(5, "%s,%s,could not dump log file\n", "WARNING", "CLLog");
LABEL_156:
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v76) < 0) {
    operator delete((void *)v75);
  }
  if (SHIBYTE(v78) < 0) {
    operator delete((void *)__dst);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
}

void sub_100AFE458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v56 - 121) < 0) {
    operator delete(*(void **)(v56 - 144));
  }
  if (*(char *)(v56 - 89) < 0) {
    operator delete(*(void **)(v56 - 112));
  }
  sub_1019DB560(v56 - 88);
  _Unwind_Resume(a1);
}

uint64_t sub_100AFE740(uint64_t a1, char *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  sub_100134750(&v31, a2);
  if (*(char *)(a1 + 63) >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 63);
  }
  else {
    size_t v5 = *(void *)(a1 + 48);
  }
  long long v6 = &v30;
  sub_1001110E4((uint64_t)&v30, v5 + 1);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v6 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    if (*(char *)(a1 + 63) >= 0) {
      uint64_t v7 = (const void *)(a1 + 40);
    }
    else {
      uint64_t v7 = *(const void **)(a1 + 40);
    }
    memmove(v6, v7, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 95;
  if (sub_1012FB078(v4, (char **)&v31, (char *)&v30))
  {
    sub_100134750(&v29, a2);
    sub_100134750(v27, ".log.bz2");
    if (sub_1012FB150(v4, (void **)&v29.__r_.__value_.__l.__data_, (char *)v27))
    {
      int v8 = 1;
    }
    else
    {
      sub_100134750(v25, a2);
      sub_100134750(__p, ".log");
      int v8 = sub_1012FB150(v4, v25, (char *)__p);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
      if (v26 < 0) {
        operator delete(v25[0]);
      }
    }
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    int v8 = 0;
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32) < 0)
  {
    operator delete((void *)v31);
    if (!v8) {
      return 1;
    }
  }
  else if (!v8)
  {
    return 1;
  }
  sub_1012FAA88((uint64_t)&v29);
  uint64_t v9 = std::string::append(&v29, "/");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = std::string::append(&v30, a2);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t v32 = v11->__r_.__value_.__r.__words[2];
  long long v31 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a1 + 87) >= 0) {
    size_t v13 = *(unsigned __int8 *)(a1 + 87);
  }
  else {
    size_t v13 = *(void *)(a1 + 72);
  }
  uint64_t v14 = &v29;
  sub_1001110E4((uint64_t)&v29, v13 + 1);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v14 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if (v13)
  {
    if (*(char *)(a1 + 87) >= 0) {
      uint64_t v15 = (const void *)(a1 + 64);
    }
    else {
      uint64_t v15 = *(const void **)(a1 + 64);
    }
    memmove(v14, v15, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 47;
  uint64_t v16 = std::string::append(&v29, a2);
  long long v18 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v18;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v19 = (const std::__fs::filesystem::path *)&v30;
  }
  else {
    int v19 = (const std::__fs::filesystem::path *)v30.__r_.__value_.__r.__words[0];
  }
  if (v32 >= 0) {
    long long v20 = (const std::__fs::filesystem::path *)&v31;
  }
  else {
    long long v20 = (const std::__fs::filesystem::path *)v31;
  }
  sub_1004BB3CC(v19, v20, v17);
  if (v32 >= 0) {
    uint64_t v21 = (const char *)&v31;
  }
  else {
    uint64_t v21 = (const char *)v31;
  }
  sub_1004BB1FC(v21);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)v31);
  }
  return 1;
}

void sub_100AFEA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (*(char *)(v38 - 57) < 0) {
    operator delete(*(void **)(v38 - 80));
  }
  _Unwind_Resume(exception_object);
}

void sub_100AFEB30(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100AFEB60(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100AFEBD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100AFEC78((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100AFEBEC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    sub_100B02CCC();
    operator delete();
  }
  return result;
}

uint64_t sub_100AFEC34(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100AFEC78(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100B02CCC();
    operator delete();
  }
  return result;
}

uint64_t sub_100AFECC8(uint64_t a1, const __CFString *a2, char a3)
{
  uint64_t v4 = sub_10051EE48(a1, a2, a3, @"mobile");
  *(void *)uint64_t v4 = off_1022DDD30;
  if (*(unsigned char *)(v4 + 16)) {
    sub_10051F77C(a1, 1);
  }
  return a1;
}

void sub_100AFED2C(_Unwind_Exception *a1)
{
  sub_10051F6AC(v1);
  _Unwind_Resume(a1);
}

void sub_100AFED4C(uint64_t a1)
{
  sub_10051F6AC(a1);

  operator delete();
}

BOOL sub_100AFED88(uint64_t a1, const __CFString *a2, const void *a3)
{
  sub_1005210F4(a1, a2, a3);

  return sub_10051F604(a1);
}

double sub_100AFEDC0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0x404E000000000000;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 24) = _Q0;
  *(_OWORD *)(a1 + 40) = _Q0;
  *(_OWORD *)(a1 + 56) = _Q0;
  *(_DWORD *)(a1 + 72) = 0;
  double result = 0.156897439;
  *(_OWORD *)(a1 + 80) = xmmword_101D73460;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0x3FC415371D0ABDC0;
  *(unsigned char *)(a1 + 128) = 0;
  return result;
}

double sub_100AFEE0C(double a1)
{
  double v1 = 1.0;
  if (a1 >= 0.372823626)
  {
    double v1 = 0.0;
    if (a1 < 0.559235454)
    {
      float v2 = sub_1001BF26C(0.559235454, 0.0, 0.372823626, 1.0, a1);
      double v1 = v2;
    }
  }
  return (1.0 - v1) * 60.0 + 120.0;
}

double sub_100AFEE80(uint64_t a1, void *a2, double a3, double a4)
{
  if (a4 - a3 > 0.0)
  {
    double v4 = sub_100AFF07C(a1, a2, a3, a4) / (a4 - a3);
    if (v4 > 0.0) {
      return 1.0 / v4;
    }
    if (v4 == 0.0) {
      return 0.0;
    }
  }
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022DE100);
  }
  long long v6 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Odometer failed to compute a mean pace.", buf, 2u);
  }
  double v5 = -1.0;
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022DE100);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "double CLPedometerPaceFusion::computeMeanPace(const T_buffer &, CFAbsoluteTime, CFAbsoluteTime) const [T_buffer = CLNatalieInput<CLOdometerEntry>]", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return v5;
}

void sub_100AFF04C(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

double sub_100AFF07C(uint64_t a1, void *a2, double a3, double a4)
{
  double v17 = 0.0;
  double v18 = 0.0;
  if (a3 <= a4)
  {
    if (a3 != a4)
    {
      uint64_t v13 = a2[8];
      if (v13) {
        double v14 = *(double *)(*(void *)(a2[4] + 8 * ((v13 + a2[7] - 1) / 0x15uLL)) + 192 * ((v13 + a2[7] - 1) % 0x15uLL));
      }
      else {
        double v14 = -1.79769313e308;
      }
      if (v14 == a4)
      {
        memset(buf, 0, 32);
        memset(v19, 0, sizeof(v19));
        double v7 = -1.0;
        if (!(*(unsigned int (**)(void *, uint8_t *, _OWORD *, double))(*a2 + 16))(a2, buf, v19, a4)
          || !sub_100183D00(a3, a1, a2, &v18))
        {
          return v7;
        }
        uint64_t v15 = *(void *)&buf[24];
        if (*(void *)&buf[24] == **(void **)&buf[16]) {
          uint64_t v15 = *(void *)(*(void *)&buf[16] - 8) + 4032;
        }
        double v16 = *(double *)(v15 - 144);
      }
      else
      {
        double v7 = -1.0;
        if (!sub_100183D00(a3, a1, a2, &v18) || !sub_100183D00(a4, a1, a2, &v17)) {
          return v7;
        }
        double v16 = v17;
      }
      return v16 - v18;
    }
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022DE100);
    }
    uint64_t v9 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      *(double *)&uint8_t buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Time didn't move! time,%{public}f", buf, 0xCu);
    }
    double v7 = -1.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022DE100);
      }
      LODWORD(v19[0]) = 134349056;
      *(double *)((char *)v19 + 4) = a3;
      int v8 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "double CLPedometerPaceFusion::getOdometerDistance(const T_buffer &, CFAbsoluteTime, CFAbsoluteTime) const [T_buffer = CLNatalieInput<CLOdometerEntry>]", "%s\n");
      goto LABEL_33;
    }
  }
  else
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022DE100);
    }
    long long v6 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134349312;
      *(double *)&uint8_t buf[4] = a3;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Time rolled back! t1,%{public}f,t2,%{public}f", buf, 0x16u);
    }
    double v7 = -1.0;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022DE100);
      }
      LODWORD(v19[0]) = 134349312;
      *(double *)((char *)v19 + 4) = a3;
      WORD6(v19[0]) = 2050;
      *(double *)((char *)v19 + 14) = a4;
      int v8 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "double CLPedometerPaceFusion::getOdometerDistance(const T_buffer &, CFAbsoluteTime, CFAbsoluteTime) const [T_buffer = CLNatalieInput<CLOdometerEntry>]", "%s\n");
LABEL_33:
      if (v8 != buf) {
        free(v8);
      }
    }
  }
  return v7;
}

uint64_t sub_100AFF4CC(uint64_t a1, double *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    *a2 = *(double *)(a1 + 16) - *(double *)a1;
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DE120);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "TCONV,getMachContinuousToCFAbsoluteOffsetSec failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DE120);
      }
      double v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLUtils::Timestamp::getMachContinuousToCFAbsoluteTimeOffsetSec(CFTimeInterval &) const", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return *(unsigned __int8 *)(a1 + 24);
}

float sub_100AFF680(int a1, int a2, int a3, float a4)
{
  int v4 = a2 + 12;
  if (a2 >= 3) {
    int v4 = a2;
  }
  return (float)((float)((float)((float)((float)((float)(a3
                                                       - (int)(float)((float)(a1 - (a2 < 3)) / 100.0)
                                                       + (int)(float)((float)(int)(float)((float)(a1 - (a2 < 3)) / 100.0)
                                                                    * 0.25)
                                                       + 2)
                                               + a4)
                                       + (float)(int)(((double)(a1 - (a2 < 3)) + 4716.0) * 365.25))
                               + (float)(int)(((double)v4 + 1.0) * 30.6001))
                       + -1524.5)
               + -2451500.0)
       / 36525.0;
}

float sub_100AFF744(float a1, float a2, float a3, float a4)
{
  float v7 = a4 / 57.296;
  double v8 = sinf(a4 / 57.296);
  double v9 = a1;
  double v10 = (v9 * -0.000101 + 0.019993) * sinf(v7 + v7) + v8 * (1.914602 - v9 * (v9 * 0.000014 + 0.004817));
  float v11 = v10 + sinf(v7 * 3.0) * 0.000289;
  double v12 = (float)(v11 + a3) + -0.00569;
  float v13 = v9 * -1934.136 + 125.04;
  *(float *)&double v12 = v12 + sinf(v13 / 57.296) * -0.00478;
  float v14 = sinf(a2 / 57.296);
  float v15 = sinf(*(float *)&v12 / 57.296);
  return asinf(v14 * v15) * 57.296;
}

float sub_100AFF870(float a1, float a2, float a3, float a4)
{
  float v8 = tanf((float)(a2 * 0.5) / 57.296);
  float v9 = v8 * tanf((float)(a2 / 57.296) * 0.5);
  float v10 = 0.016708634 - a1 * (a1 * 0.0000001267 + 0.000042037);
  float v11 = a4 / 57.296;
  float v12 = sinf(v11);
  __float2 v13 = __sincosf_stret((float)(a3 / 57.296) + (float)(a3 / 57.296));
  double v14 = (float)((float)((float)((float)(v10 * -2.0) * v12) + (float)(v9 * v13.__sinval))
              + (float)((float)(v12 * (float)((float)(v10 * 4.0) * v9)) * v13.__cosval))
      + v9 * -0.5 * v9 * sinf((float)(a3 / 57.296) * 4.0);
  float v15 = v14 + v10 * -1.25 * v10 * sinf(v11 + v11);
  return (float)(v15 * 57.296) * 4.0;
}

float sub_100AFF99C(int *a1, float a2, float a3)
{
  float v4 = a2 / 57.296;
  float v5 = a3 / 57.296;
  float v6 = cosf(a2 / 57.296);
  float v7 = -0.014538 / (float)(v6 * cosf(v5));
  float v8 = tanf(v4);
  float v9 = v7 - (float)(v8 * tanf(v5));
  int v10 = 2 * (v9 < -1.0);
  if (v9 > 1.0) {
    int v10 = 1;
  }
  *a1 = v10;
  return acosf(v9) * 57.296;
}

float sub_100AFFA40(double a1, float a2, float a3)
{
  float v5 = +[NSCalendar calendarWithIdentifier:NSCalendarIdentifierGregorian];
  [(NSCalendar *)v5 setTimeZone:+[NSTimeZone timeZoneForSecondsFromGMT:0]];
  float v6 = [(NSCalendar *)v5 components:252 fromDate:+[NSDate dateWithTimeIntervalSinceReferenceDate:a1]];
  float v7 = (float)[(NSDateComponents *)v6 hour];
  *(float *)&a1 = (float)[(NSDateComponents *)v6 minute];
  float v8 = (float)((float)((float)((float)((float)[(NSDateComponents *)v6 second] / 60.0) + *(float *)&a1) / 60.0)
             + v7)
     / 24.0;
  float v9 = sub_100AFF680((int)[(NSDateComponents *)v6 year], (int)[(NSDateComponents *)v6 month], (int)[(NSDateComponents *)v6 day], v8);
  double v10 = v9;
  float v11 = v9 * (v9 * 0.0003032 + 36000.7698) + 280.46646;
  float v12 = fmodf(v11, 360.0);
  if (v12 >= 0.0) {
    float v13 = v12;
  }
  else {
    float v13 = v12 + 360.0;
  }
  float v14 = v10 * (v10 * -0.0001537 + 35999.0503) + 357.52911;
  float v15 = ((21.448 - v10 * (v10 * (v10 * -0.001813 + 0.00059) + 46.815)) / 60.0 + 26.0) / 60.0 + 23.0;
  double v16 = v15;
  float v17 = v10 * -1934.136 + 125.04;
  *(float *)&double v16 = v16 + cosf(v17 / 57.296) * 0.00256;
  float v18 = sub_100AFF744(v9, *(float *)&v16, v13, v14);
  float v19 = sub_100AFF870(v9, *(float *)&v16, v13, v14);
  float v20 = fmod(v19 + v8 * 1440.0 + (float)(a3 * 4.0), 1440.0);
  if (v20 < 0.0) {
    float v20 = v20 + 1440.0;
  }
  float v21 = v20 * 0.25 + dbl_101D2CA30[v20 * 0.25 < 0.0];
  float v22 = v21 / 57.296;
  __float2 v23 = __sincosf_stret(a2 / 57.296);
  __float2 v24 = __sincosf_stret(v18 / 57.296);
  float v25 = cosf(v22);
  return asinf((float)((float)(v23.__cosval * v24.__cosval) * v25) + (float)(v23.__sinval * v24.__sinval)) * 57.296;
}

double sub_100AFFD3C(double *a1, double *a2, int *a3, double a4, float a5, float a6)
{
  float v12 = +[NSCalendar calendarWithIdentifier:NSCalendarIdentifierGregorian];
  [(NSCalendar *)v12 setTimeZone:+[NSTimeZone timeZoneForSecondsFromGMT:0]];
  float v13 = [(NSCalendar *)v12 components:28 fromDate:+[NSDate dateWithTimeIntervalSinceReferenceDate:a4]];
  float v14 = sub_100AFF680((int)[(NSDateComponents *)v13 year], (int)[(NSDateComponents *)v13 month], (int)[(NSDateComponents *)v13 day], 0.5);
  double v15 = v14;
  float v16 = v14 * (v14 * 0.0003032 + 36000.7698) + 280.46646;
  float v17 = fmodf(v16, 360.0);
  if (v17 >= 0.0) {
    float v18 = v17;
  }
  else {
    float v18 = v17 + 360.0;
  }
  float v19 = v15 * (v15 * -0.0001537 + 35999.0503) + 357.52911;
  float v20 = ((21.448 - v15 * (v15 * (v15 * -0.001813 + 0.00059) + 46.815)) / 60.0 + 26.0) / 60.0 + 23.0;
  double v21 = v20;
  float v22 = v15 * -1934.136 + 125.04;
  float v23 = v21 + cosf(v22 / 57.296) * 0.00256;
  LODWORD(v21) = sub_100AFF870(v14, v23, v18, v19);
  float v24 = sub_100AFF744(v14, v23, v18, v19);
  float v25 = sub_100AFF99C(a3, a5, v24);
  float v26 = (a6 * -4.0 + 720.0 - *(float *)&v21) / 1440.0;
  float v27 = (float)(v25 * 4.0) / 1440.0;
  double v28 = floor(a4 / 86400.0) * 86400.0;
  *a1 = v28 + (float)(v26 - v27) * 86400.0;
  double result = v28 + (float)(v27 + v26) * 86400.0;
  *a2 = result;
  return result;
}

BOOL sub_100AFFFD8(uint64_t a1, double *a2)
{
  *a2 = -1.0;
  float v5 = *(int **)(a1 + 40);
  float v6 = *(int **)(a1 + 48);
  float v7 = (int **)(a1 + 40);
  if (v5 == v6)
  {
    size_t v23 = 8;
    *(_DWORD *)uint64_t buf = 0;
    sub_10027D230((uint64_t)v7, 8uLL, buf);
    if (sysctlnametomib("kern.wake_abs_time", *v7, &v23))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DE120);
      }
      float v14 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "TCONV,error occurred, no mib to wake_abs_time conversion", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022DE120);
        }
        LOWORD(v24) = 0;
        float v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLUtils::LiveTimeConverter::getLastWakeUpMachAbsoluteTime(CFTimeInterval &)", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      BOOL v9 = 0;
      *(void *)(a1 + 48) = *(void *)(a1 + 40);
      return v9;
    }
    *(_DWORD *)uint64_t buf = 0;
    sub_10027D230((uint64_t)v7, v23, buf);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DE120);
    }
    float v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      size_t v29 = v23;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "TCONV,mib filled to %zu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DE120);
      }
      int v24 = 134217984;
      size_t v25 = v23;
      double v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLUtils::LiveTimeConverter::getLastWakeUpMachAbsoluteTime(CFTimeInterval &)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    float v5 = *(int **)(a1 + 40);
    float v6 = *(int **)(a1 + 48);
  }
  size_t v22 = 8;
  size_t v23 = 0;
  int v8 = sysctl(v5, (unint64_t)((char *)v6 - (char *)v5) >> 2, &v23, &v22, 0, 0);
  BOOL v9 = v8 == 0;
  if (v8)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DE120);
    }
    double v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v11 = *__error();
      *(_DWORD *)uint64_t buf = 67109120;
      LODWORD(v29) = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "TCONV,Error occurred when get wake_abs_time,%{errno}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DE120);
      }
      int v12 = *__error();
      int v24 = 67109120;
      LODWORD(v25) = v12;
      float v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLUtils::LiveTimeConverter::getLastWakeUpMachAbsoluteTime(CFTimeInterval &)", "%s\n", v13);
LABEL_33:
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  else
  {
    *a2 = sub_1000D3D90(v23);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DE120);
    }
    double v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      double v16 = *a2;
      *(_DWORD *)uint64_t buf = 134349312;
      size_t v29 = v23;
      __int16 v30 = 2050;
      double v31 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TCONV,GetLastWakeUpMachAbsoluteTime success,machAbs,%{public}llu,floatInterval,%{public}.6lf", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DE120);
      }
      double v19 = *a2;
      int v24 = 134349312;
      size_t v25 = v23;
      __int16 v26 = 2050;
      double v27 = v19;
      float v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLUtils::LiveTimeConverter::getLastWakeUpMachAbsoluteTime(CFTimeInterval &)", "%s\n", v13);
      goto LABEL_33;
    }
  }
  return v9;
}

BOOL sub_100B00638(uint64_t a1, uint64_t a2)
{
  unint64_t v31 = 0;
  unint64_t v32 = 0;
  if (mach_get_times())
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DE120);
    }
    float v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "TCONV,mach_get_times failed", buf, 2u);
    }
    BOOL v5 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DE120);
      }
      LOWORD(v33) = 0;
LABEL_10:
      float v7 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLUtils::LiveTimeConverter::getLastWakeUpTime(WakeUpTime &)", "%s\n");
LABEL_11:
      if (v7 != buf) {
        free(v7);
      }
      return 0;
    }
    return result;
  }
  double v8 = sub_1000D3D90(v31);
  unint64_t v9 = v31 - v32;
  double v10 = sub_10016BE44(&v29);
  double v11 = v10 - sub_1000D3D90(v32);
  if (*(unsigned char *)(a1 + 32)
    && vabdd_f64(v11, *(double *)(a1 + 16)) <= 0.0012
    && v9 == *(void *)a1
    && v8 <= *(double *)(a1 + 64) + 30.0)
  {
LABEL_26:
    long long v18 = *(_OWORD *)a1;
    long long v19 = *(_OWORD *)(a1 + 16);
    *(unsigned char *)(a2 + 32) = *(unsigned char *)(a1 + 32);
    *(_OWORD *)a2 = v18;
    *(_OWORD *)(a2 + 16) = v19;
    return 1;
  }
  *(unsigned char *)(a1 + 32) = 0;
  if (!sub_100AFFFD8(a1, (double *)(a1 + 24)))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DE120);
    }
    float v20 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "TCONV,Getting last wake up time failed", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DE120);
      }
      LOWORD(v33) = 0;
      float v7 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLUtils::LiveTimeConverter::getLastWakeUpTime(WakeUpTime &)", "%s\n");
      goto LABEL_11;
    }
    return result;
  }
  *(double *)(a1 + 64) = v8;
  *(void *)a1 = v9;
  double v12 = sub_1000D3D90(v9);
  *(double *)(a1 + 8) = v12;
  *(double *)(a1 + 16) = v11;
  if ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DE120);
    }
    double v21 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "TCONV,invalid deltaContAbsSec", buf, 2u);
    }
    BOOL v22 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v22)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DE120);
      }
      LOWORD(v33) = 0;
      goto LABEL_10;
    }
    return result;
  }
  if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    *(unsigned char *)(a1 + 32) = 1;
    double v13 = sub_1000D3D90(v32);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DE120);
    }
    float v14 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 8);
      uint64_t v16 = *(void *)(a1 + 16);
      uint64_t v17 = *(void *)(a1 + 24);
      *(_DWORD *)uint64_t buf = 134351360;
      unint64_t v54 = v32;
      __int16 v55 = 2050;
      unint64_t v56 = v31;
      __int16 v57 = 2050;
      uint64_t v58 = v29;
      __int16 v59 = 2050;
      uint64_t v60 = v30;
      __int16 v61 = 2050;
      uint64_t v62 = v15;
      __int16 v63 = 2050;
      uint64_t v64 = v16;
      __int16 v65 = 2050;
      uint64_t v66 = v17;
      __int16 v67 = 2050;
      double v68 = v13;
      __int16 v69 = 2050;
      double v70 = v8;
      __int16 v71 = 2050;
      double v72 = v10;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "TCONV,mach_get_times,machAbs,%{public}llu,machCont,%{public}llu,tv_sec,%{public}ld,tv_nsec,%{public}ld,deltaContAbs,%{public}.6lf,deltaCfAbs,%{public}.6lf,lastWakeAbs,%{public}.6lf,machNow,%{public}.6lf,machContNow,%{public}.6lf,sysNow,%{public}.6lf", buf, 0x66u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DE120);
      }
      uint64_t v25 = *(void *)(a1 + 8);
      uint64_t v26 = *(void *)(a1 + 16);
      uint64_t v27 = *(void *)(a1 + 24);
      int v33 = 134351360;
      unint64_t v34 = v32;
      __int16 v35 = 2050;
      unint64_t v36 = v31;
      __int16 v37 = 2050;
      uint64_t v38 = v29;
      __int16 v39 = 2050;
      uint64_t v40 = v30;
      __int16 v41 = 2050;
      uint64_t v42 = v25;
      __int16 v43 = 2050;
      uint64_t v44 = v26;
      __int16 v45 = 2050;
      uint64_t v46 = v27;
      __int16 v47 = 2050;
      double v48 = v13;
      __int16 v49 = 2050;
      double v50 = v8;
      __int16 v51 = 2050;
      double v52 = v10;
      double v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLUtils::LiveTimeConverter::getLastWakeUpTime(WakeUpTime &)", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    goto LABEL_26;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022DE120);
  }
  size_t v23 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "TCONV,invalid deltaCfAbsSec", buf, 2u);
  }
  BOOL v24 = sub_10013D1A0(115, 0);
  BOOL result = 0;
  if (v24)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DE120);
    }
    LOWORD(v33) = 0;
    goto LABEL_10;
  }
  return result;
}

BOOL sub_100B00DC0(uint64_t a1, double *a2)
{
  BOOL result = sub_100B00638(a1, (uint64_t)v5);
  if (result)
  {
    return sub_100B00E20(a1, a2);
  }
  return result;
}

BOOL sub_100B00E20(uint64_t a1, double *a2)
{
  if (*(unsigned char *)(a1 + 32) && *a2 >= *(double *)(a1 + 24)) {
    return 1;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022DE120);
  }
  float v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    double v5 = *a2;
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)uint64_t buf = 134349312;
    double v10 = v5;
    __int16 v11 = 2050;
    uint64_t v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "TCONV,Cannot get wakeTime or MachTime before sleep,machAbs,%{public}.6lf,wakeTime,%{public}.6lf", buf, 0x16u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DE120);
    }
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLUtils::LiveTimeConverter::isMachTimeAfterCachedLastWakeUpTime(const CFTimeInterval &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
    return 0;
  }
  return result;
}

BOOL sub_100B01018(uint64_t a1, void *a2)
{
  char v8 = 0;
  memset(v7, 0, sizeof(v7));
  BOOL v3 = sub_100B00638(a1, (uint64_t)v7);
  if (v3)
  {
    *a2 = *((void *)&v7[0] + 1);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DE120);
    }
    float v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TCONV,UpdateLastWakeUpTime failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DE120);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLUtils::LiveTimeConverter::deltaMachContinuousMachAbsolute_RealTime(CFTimeInterval &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return v3;
}

BOOL sub_100B011D8(uint64_t a1, void *a2)
{
  char v9 = 0;
  long long v7 = 0u;
  long long v8 = 0u;
  BOOL v3 = sub_100B00638(a1, (uint64_t)&v7);
  if (v3)
  {
    *a2 = v8;
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DE120);
    }
    float v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TCONV,UpdateLastWakeUpTime failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DE120);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLUtils::LiveTimeConverter::deltaCFAbsTimeMachAbsTime_RealTime(CFTimeInterval &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return v3;
}

BOOL sub_100B01398(uint64_t a1, double *a2, double *a3)
{
  double v9 = 0.0;
  if (sub_100B01018(a1, &v9))
  {
    *a3 = *a2 + v9;
    return sub_100B00E20(a1, a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DE120);
    }
    long long v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TCONV,Failed in getting the offset between mach continuous time and mach absolute time", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DE120);
      }
      long long v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLUtils::LiveTimeConverter::convertMachAbsoluteToMachContinuous_RealTime(const CFTimeInterval &, CFTimeInterval &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    return 0;
  }
}

BOOL sub_100B01594(uint64_t a1, double *a2, double *a3)
{
  double v9 = 0.0;
  if (sub_100B01018(a1, &v9))
  {
    *a3 = *a2 - v9;
    return sub_100B00E20(a1, a3);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DE120);
    }
    long long v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TCONV,Failed in getting the offset between mach continuous time and mach absolute time", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DE120);
      }
      long long v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLUtils::LiveTimeConverter::convertMachContinuousToMachAbsolute_RealTime(const CFTimeInterval &, CFTimeInterval &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    return 0;
  }
}

BOOL sub_100B01790(uint64_t a1, double *a2, double *a3)
{
  double v9 = 0.0;
  if (sub_100B011D8(a1, &v9))
  {
    *a3 = *a2 + v9;
    return sub_100B00E20(a1, a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DE120);
    }
    long long v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TCONV,Failed in getting the offset between CF time and mach time", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DE120);
      }
      long long v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLUtils::LiveTimeConverter::convertMachAbsoluteToCFAbsolute_RealTime(const CFTimeInterval &, CFAbsoluteTime &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    return 0;
  }
}

BOOL sub_100B0198C(uint64_t a1, double *a2, double *a3)
{
  double v9 = 0.0;
  if (sub_100B011D8(a1, &v9))
  {
    *a3 = *a2 - v9;
    return sub_100B00E20(a1, a3);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DE120);
    }
    long long v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TCONV,Failed in getting the offset between CF time and mach time", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DE120);
      }
      long long v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLUtils::LiveTimeConverter::convertCFAbsoluteToMachAbsolute_RealTime(const CFAbsoluteTime &, CFTimeInterval &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    return 0;
  }
}

void sub_100B01B88(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

double sub_100B01BB8(uint64_t a1, char a2)
{
  sub_100EBD890(a1);
  *(int64x2_t *)(v3 + 24) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(void *)(v3 + 40) = 0xFFEFFFFFFFFFFFFFLL;
  *(_DWORD *)(v3 + 48) = 0;
  *(void *)(v3 + 56) = 0x3FFB333340000000;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 124) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(unsigned char *)(v3 + 192) = a2;
  *(_DWORD *)(v3 + 200) = 0;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(void *)&double result = 1050253722;
  *(void *)(v3 + 240) = 1050253722;
  return result;
}

void sub_100B01C30(double a1, uint64_t a2, _DWORD *a3, int *a4, uint64_t a5)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022DE140);
  }
  double v9 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_INFO))
  {
    int v10 = *a4;
    uint64_t v11 = *(void *)(a5 + 32);
    double v12 = *(float *)(a5 + 24);
    double v13 = *(float *)(a5 + 40);
    double v14 = *(float *)(a5 + 44);
    int v15 = *(_DWORD *)(a5 + 56);
    uint64_t v16 = *(void *)(a5 + 64);
    int v17 = *(unsigned __int8 *)(a5 + 72);
    int v18 = *(unsigned __int8 *)(a5 + 73);
    int v19 = *(_DWORD *)(a5 + 76);
    int v20 = a4[2] - a3[2];
    int v35 = a4[3] - a3[3];
    int v21 = a4[7] - a3[7];
    int v22 = a4[8] - a3[8];
    uint64_t v23 = *(void *)(a5 + 80);
    uint64_t v34 = *(void *)(a5 + 88);
    int v24 = a4[9] - a3[9];
    int v25 = a4[10] - a3[10];
    int v26 = a4[11] - a3[11];
    int v27 = a4[14] - a3[14];
    int v28 = a4[15] - a3[15];
    uint64_t v29 = *(void *)(a5 + 96);
    int v30 = a4[12] - a3[12];
    int v31 = a4[13] - a3[13];
    int v32 = *(unsigned __int8 *)(a5 + 104);
    *(_DWORD *)uint64_t buf = 67116032;
    int v37 = v10;
    __int16 v38 = 2048;
    uint64_t v39 = v11;
    __int16 v40 = 2048;
    double v41 = v12;
    __int16 v42 = 2048;
    double v43 = v13;
    __int16 v44 = 2048;
    double v45 = v14;
    __int16 v46 = 1024;
    int v47 = v15;
    __int16 v48 = 2048;
    uint64_t v49 = v16;
    __int16 v50 = 1024;
    int v51 = v17;
    __int16 v52 = 1024;
    int v53 = v18;
    __int16 v54 = 1024;
    int v55 = v19;
    __int16 v56 = 1024;
    int v57 = v23;
    __int16 v58 = 1024;
    int v59 = 1;
    __int16 v60 = 1024;
    int v61 = v20;
    __int16 v62 = 1024;
    int v63 = 1;
    __int16 v64 = 1024;
    int v65 = v35;
    __int16 v66 = 1024;
    int v67 = v21;
    __int16 v68 = 1024;
    int v69 = v22;
    __int16 v70 = 2048;
    uint64_t v71 = v34;
    __int16 v72 = 1024;
    int v73 = v24;
    __int16 v74 = 2048;
    uint64_t v75 = v29;
    __int16 v76 = 1024;
    int v77 = v25;
    __int16 v78 = 1024;
    int v79 = v26;
    __int16 v80 = 2048;
    double v81 = a1;
    __int16 v82 = 1024;
    int v83 = v27;
    __int16 v84 = 1024;
    int v85 = v28;
    __int16 v86 = 1024;
    int v87 = v30;
    __int16 v88 = 1024;
    int v89 = v31;
    __int16 v90 = 1024;
    int v91 = v32;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "pairNumber,%d,startTime,%f,mets,%f,hr,%f,hrConfidence,%f,gradeType,%d,grade,%f,hasGPS,%d,hasStrideCal,%d,metSource,%d,workoutType,%d,warmupOK,%d,gradeOK,%d,metDeltaOK,%d,metsAboveMin,%d,metSourceOK,%d,hrOK,%d,cadence,%f,workoutLengthOK,%d,pace,%f,paceOK,%d,strollerOK,%d,percentGradeSigma,%.6f,percentWalkingOK,%d,metsAboveAdaptiveAlgMin,%d,pairOKForClustering,%d,pairOKForAdaptiveModel,%d,isStroller,%d", buf, 0xCAu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022DE140);
    }
    int v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVO2MaxPreprocessor::logSinglePairStats(const PairStats &, const PairStats &, const VO2MaxInput &, const double) const", "%s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
  }
}

void sub_100B02120(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v6 = *(double *)(a2 + 32);
  double v7 = *(double *)(a2 + 48);
  *(double *)a3 = v6;
  *(double *)(a3 + 8) = v7;
  float v8 = *(float *)(a2 + 24) * 3.5;
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a2 + 40);
  *(float *)(a3 + 20) = v8;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 52) = 0u;
  int v10 = (int *)(a1 + 64);
  int v9 = *(_DWORD *)(a1 + 64);
  long long v11 = *(_OWORD *)(a1 + 80);
  long long v12 = *(_OWORD *)(a1 + 112);
  v49[2] = *(_OWORD *)(a1 + 96);
  v50[0] = v12;
  *(_OWORD *)((char *)v50 + 12) = *(_OWORD *)(a1 + 124);
  v49[0] = *(_OWORD *)(a1 + 64);
  v49[1] = v11;
  double v13 = *(double *)(a1 + 24);
  if (v13 < 0.0) {
    double v13 = v6;
  }
  *(double *)(a1 + 24) = v13;
  *(double *)(a1 + 32) = v6;
  int *v10 = v9 + 1;
  BOOL v14 = v7 == 0.0;
  if (vabdd_f64(v7, *(double *)(a2 + 32)) < 5.0) {
    BOOL v14 = 1;
  }
  int v15 = *(_DWORD *)(a2 + 56);
  if (!v15) {
    BOOL v14 = 0;
  }
  int v16 = *(_DWORD *)(a1 + 68);
  if (v15) {
    ++v16;
  }
  *(_DWORD *)(a1 + 68) = v16;
  if (v15)
  {
    double v17 = *(double *)(a2 + 64);
    int v18 = v17 > -0.02;
    if (*(unsigned char *)(a1 + 192))
    {
      int v18 = v17 > -0.02;
      if (v17 >= 0.02) {
        int v18 = 0;
      }
    }
    int v19 = v14 & v18;
    *(_DWORD *)(a1 + 72) += v18;
    int v20 = *(_DWORD *)(a1 + 136);
    if (fabs(v17) > 0.0525) {
      ++v20;
    }
    *(_DWORD *)(a1 + 136) = v20;
  }
  else
  {
    int v19 = 0;
  }
  int v21 = sub_100B02424(a1, *(void *)(a2 + 80), *(double *)(a2 + 96), *(double *)(a2 + 88));
  int v22 = v19 & v21;
  int v23 = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(a1 + 104) += v21;
  BOOL v24 = *(double *)(a2 + 96) <= 0.0 || *(unsigned char *)(a2 + 104) == 0;
  if (v24)
  {
    int v25 = v23 + 1;
  }
  else
  {
    int v22 = 0;
    int v25 = v23;
  }
  *(_DWORD *)(a1 + 108) = v25;
  int v26 = *(unsigned __int8 *)(a2 + 72);
  BOOL v24 = v26 == 0;
  int v27 = *(_DWORD *)(a1 + 84);
  *(_DWORD *)(a1 + 80) += v26;
  int v28 = *(_DWORD *)(a1 + 92);
  int v29 = *(_DWORD *)(a1 + 88) + v26;
  if (v24) {
    int v22 = 0;
  }
  *(_DWORD *)(a1 + 84) = v27 + *(unsigned __int8 *)(a2 + 73);
  *(_DWORD *)(a1 + 88) = v29;
  if (*(_DWORD *)(a2 + 76))
  {
    int v22 = 0;
    int v30 = v28;
  }
  else
  {
    int v30 = v28 + 1;
  }
  *(_DWORD *)(a1 + 92) = v30;
  float v31 = *(float *)(a2 + 44);
  if (v31 <= 0.35) {
    int v22 = 0;
  }
  int v32 = *(_DWORD *)(a1 + 96);
  if (v31 > 0.35) {
    ++v32;
  }
  *(_DWORD *)(a1 + 96) = v32;
  float v33 = *(float *)(a2 + 40);
  float v35 = *(float *)(a1 + 8);
  float v34 = *(float *)(a1 + 12);
  int v37 = *(_DWORD *)(a1 + 124);
  int v36 = *(_DWORD *)(a1 + 128);
  if (v33 > v34) {
    ++v36;
  }
  int v38 = *(_DWORD *)(a1 + 132);
  if (v33 < v35) {
    ++v38;
  }
  *(_DWORD *)(a1 + 128) = v36;
  *(_DWORD *)(a1 + 132) = v38;
  float v39 = (v34 - v33) / (v34 - v35);
  float v40 = 1.0 - v39;
  if (v40 <= 0.0) {
    int v22 = 0;
  }
  BOOL v41 = v31 < 0.6;
  float v42 = 0.0;
  if (!v41) {
    float v42 = v40;
  }
  *(float *)(a1 + 244) = v42;
  float v43 = *(float *)(a2 + 24);
  if (v43 > 2.5) {
    int v44 = v22;
  }
  else {
    int v44 = 0;
  }
  if (v43 <= 2.5) {
    int v45 = v37;
  }
  else {
    int v45 = v37 + 1;
  }
  *(_DWORD *)(a1 + 124) = v45;
  BOOL v46 = sub_100B024C8((void *)a1, a2);
  if (v46) {
    ++*(_DWORD *)(a1 + 120);
  }
  if (v44)
  {
    ++*(_DWORD *)(a1 + 112);
    sub_1003AD508((double *)(a1 + 200), *(double *)(a2 + 64));
    if (v46)
    {
      *(_DWORD *)(a3 + 64) = 2;
      ++*(_DWORD *)(a1 + 116);
    }
    else
    {
      *(_DWORD *)(a3 + 64) = 1;
    }
  }
  int v47 = *(_DWORD *)(a1 + 76);
  if (*(float *)(a2 + 24) > 4.0) {
    ++v47;
  }
  *(_DWORD *)(a1 + 76) = v47;
  __int16 v48 = sub_100B026A4((void *)a1, a2, a3);
  sub_100B01C30(*(double *)(a3 + 40), (uint64_t)v48, v49, v10, a2);
}

uint64_t sub_100B02424(uint64_t a1, unint64_t a2, double a3, double a4)
{
  if (a3 <= 0.0) {
    return 0;
  }
  LODWORD(result) = sub_10007E3A4(a3, *(double *)(a1 + 56));
  if (a4 * 60.0 > 140.0) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = result;
  }
  if (*(_DWORD *)(a1 + 48) == 3 && (result & 1) != 0) {
    return 0;
  }
  if (a2 > 0x12 || ((1 << a2) & 0x60004) == 0) {
    return 1;
  }
  return result;
}

BOOL sub_100B024C8(void *a1, uint64_t a2)
{
  unint64_t v6 = a1[23];
  uint64_t v4 = (uint64_t)(a1 + 23);
  unint64_t v5 = v6;
  double v7 = (char **)(v4 - 16);
  double v8 = *(double *)(a2 + 88);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = *(void *)(v4 - 8);
  if (v10 >= v6)
  {
    uint64_t v13 = (uint64_t)(v10 - (void)*v7) >> 4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v15 = v5 - (void)*v7;
    if (v15 >> 3 > v14) {
      unint64_t v14 = v15 >> 3;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    double v17 = (char *)sub_1000C571C(v4, v16);
    int v18 = &v17[16 * v13];
    int v20 = &v17[16 * v19];
    double v21 = 0.0;
    if (v8 <= 0.0) {
      double v21 = 1.0;
    }
    *(void *)int v18 = v9;
    *((double *)v18 + 1) = v21;
    long long v12 = v18 + 16;
    int v23 = (char *)a1[21];
    int v22 = (char *)a1[22];
    if (v22 != v23)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v22 - 1);
        v18 -= 16;
        v22 -= 16;
      }
      while (v22 != v23);
      int v22 = *v7;
    }
    a1[21] = v18;
    a1[22] = v12;
    a1[23] = v20;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    double v11 = 0.0;
    if (v8 <= 0.0) {
      double v11 = 1.0;
    }
    *(void *)unint64_t v10 = v9;
    *(double *)(v10 + 8) = v11;
    long long v12 = (char *)(v10 + 16);
  }
  a1[22] = v12;
  BOOL v24 = (double *)a1[21];
  int v25 = (double *)v12;
  if (v24 != (double *)v12)
  {
    double v26 = *(double *)(a2 + 32);
    while (vabdd_f64(v26, *v24) <= 122.56)
    {
      v24 += 2;
      if (v24 == (double *)v12)
      {
        int v25 = (double *)v12;
        goto LABEL_29;
      }
    }
    int v25 = (double *)v12;
    if (v24 != (double *)v12)
    {
      int v27 = v24 + 2;
      int v25 = v24;
      while (v27 != (double *)v12)
      {
        if (vabdd_f64(v26, *v27) <= 122.56)
        {
          double *v25 = *v27;
          v25[1] = v27[1];
          v25 += 2;
        }
        v27 += 2;
      }
    }
  }
LABEL_29:
  sub_100966EC4((uint64_t)v7, (char *)v25, v12);
  uint64_t v28 = a1[21];
  uint64_t v29 = a1[22];
  if (v28 == v29) {
    return 1;
  }
  int v30 = 0;
  do
  {
    int v30 = (int)(*(double *)(v28 + 8) + (double)v30);
    v28 += 16;
  }
  while (v28 != v29);
  return v30 < 10;
}

char *sub_100B026A4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 88);
  double v7 = *(double *)(a2 + 64) * 100.0;
  *(double *)(a3 + 24) = 2.23693991 / *(double *)(a2 + 96);
  *(double *)(a3 + 32) = v7;
  *(double *)(a3 + 48) = *(float *)(a2 + 44);
  *(void *)(a3 + 56) = v6;
  uint64_t v8 = (uint64_t)(a1 + 20);
  unint64_t v9 = a1[20];
  unint64_t v10 = (void **)(a1 + 18);
  uint64_t v11 = *(void *)(a2 + 32);
  long long v12 = (char *)a1[19];
  if ((unint64_t)v12 >= v9)
  {
    unint64_t v14 = (char *)*v10;
    uint64_t v15 = (v12 - (unsigned char *)*v10) >> 4;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v17 = v9 - (void)v14;
    if (v17 >> 3 > v16) {
      unint64_t v16 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      uint64_t v19 = (char *)sub_1000C571C(v8, v18);
      unint64_t v14 = (char *)a1[18];
      long long v12 = (char *)a1[19];
    }
    else
    {
      uint64_t v19 = 0;
    }
    int v20 = &v19[16 * v15];
    double v21 = &v19[16 * v18];
    *(void *)int v20 = v11;
    *((double *)v20 + 1) = v7;
    uint64_t v13 = v20 + 16;
    if (v12 != v14)
    {
      do
      {
        *((_OWORD *)v20 - 1) = *((_OWORD *)v12 - 1);
        v20 -= 16;
        v12 -= 16;
      }
      while (v12 != v14);
      unint64_t v14 = (char *)*v10;
    }
    a1[18] = v20;
    a1[19] = v13;
    a1[20] = v21;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *(void *)long long v12 = v11;
    *((double *)v12 + 1) = v7;
    uint64_t v13 = v12 + 16;
  }
  a1[19] = v13;
  int v22 = (double *)a1[18];
  int v23 = (double *)v13;
  if (v22 != (double *)v13)
  {
    double v24 = *(double *)(a2 + 32);
    while (vabdd_f64(v24, *v22) <= 62.56)
    {
      v22 += 2;
      if (v22 == (double *)v13)
      {
        int v23 = (double *)v13;
        goto LABEL_28;
      }
    }
    int v23 = (double *)v13;
    if (v22 != (double *)v13)
    {
      int v25 = v22 + 2;
      int v23 = v22;
      while (v25 != (double *)v13)
      {
        if (vabdd_f64(v24, *v25) <= 62.56)
        {
          *int v23 = *v25;
          v23[1] = v25[1];
          v23 += 2;
        }
        v25 += 2;
      }
    }
  }
LABEL_28:
  uint64_t result = sub_100966EC4((uint64_t)v10, (char *)v23, v13);
  uint64_t v28 = (double *)a1[18];
  int v27 = (double *)a1[19];
  double v29 = 0.0;
  if (vabdd_f64(*(v27 - 2), *v28) >= 60.0)
  {
    if (v28 == v27) {
      goto LABEL_34;
    }
    unint64_t v30 = -1;
    double v31 = 0.0;
    do
    {
      double v32 = v28[1];
      double v33 = v32 - v31;
      double v31 = v31 + (v32 - v31) / (double)(v30 + 2);
      double v29 = v29 + v33 * (v32 - v31);
      v28 += 2;
      ++v30;
    }
    while (v28 != v27);
    if (!v30) {
LABEL_34:
    }
      double v34 = 2.22044605e-16;
    else {
      double v34 = v29 / (double)v30 + 2.22044605e-16;
    }
    double v29 = sqrt(v34);
  }
  *(double *)(a3 + 40) = v29;
  return result;
}

void sub_100B02904(uint64_t a1)
{
  uint64_t v2 = a1 + 192;
  char v3 = *(unsigned char *)(a1 + 192);
  sub_100EBD890((uint64_t)&v15);
  *(int64x2_t *)&v16[8] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(void *)&v16[24] = 0xFFEFFFFFFFFFFFFFLL;
  LODWORD(v17) = 0;
  *((void *)&v17 + 1) = 0x3FFB333340000000;
  long long v4 = 0uLL;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  memset(v21, 0, 28);
  *(_OWORD *)long long __p = 0u;
  memset(v23, 0, sizeof(v23));
  LOBYTE(v24) = v3;
  DWORD2(v24) = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 1050253722;
  long long v5 = v15;
  long long v6 = *(_OWORD *)v16;
  long long v7 = v17;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v16[16];
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  long long v8 = v18;
  long long v9 = v19;
  *(_OWORD *)(a1 + 124) = *(_OWORD *)((char *)v21 + 12);
  long long v10 = v21[0];
  *(_OWORD *)(a1 + 96) = v20;
  *(_OWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v9;
  uint64_t v11 = *(void **)(a1 + 144);
  if (v11)
  {
    *(void *)(a1 + 152) = v11;
    operator delete(v11);
    long long v4 = *(_OWORD *)__p;
    uint64_t v12 = *(void *)&v23[0];
  }
  else
  {
    uint64_t v12 = 0;
  }
  *(_OWORD *)(a1 + 144) = v4;
  *(void *)(a1 + 160) = v12;
  __p[1] = 0;
  *(void *)&v23[0] = 0;
  __p[0] = 0;
  uint64_t v13 = *(void **)(a1 + 168);
  if (v13)
  {
    *(void *)(a1 + 176) = v13;
    operator delete(v13);
    uint64_t v13 = __p[0];
  }
  *(_OWORD *)(a1 + 168) = *(_OWORD *)((char *)v23 + 8);
  *(void *)(a1 + 184) = *((void *)&v23[1] + 1);
  memset((char *)v23 + 8, 0, 24);
  long long v14 = v25;
  *(_OWORD *)uint64_t v2 = v24;
  *(_OWORD *)(v2 + 16) = v14;
  *(_OWORD *)(v2 + 32) = v26;
  *(void *)(v2 + 48) = v27;
  if (v13)
  {
    __p[1] = v13;
    operator delete(v13);
  }
}

uint64_t sub_100B02A78(uint64_t a1, uint64_t a2)
{
  *(double *)(a1 + 56) = *(float *)(a2 + 8);
  return sub_100EBD8A4(a1, *(float *)(a2 + 28));
}

float sub_100B02A8C(float *a1, double a2)
{
  float v2 = a2;
  float v3 = (a1[3] - v2) / (a1[3] - a1[2]);
  float result = fminf(1.0 - v3, 0.3);
  a1[60] = result;
  return result;
}

BOOL sub_100B02ACC(uint64_t a1)
{
  return *(float *)(a1 + 244) >= *(float *)(a1 + 240);
}

float sub_100B02ADC(uint64_t a1)
{
  return (float)((float)(*(_DWORD *)(a1 + 64) - *(_DWORD *)(a1 + 108)) * 100.0) / (float)*(int *)(a1 + 64);
}

float sub_100B02B04(uint64_t a1)
{
  return (float)*(int *)(a1 + 116) * 2.56;
}

void sub_100B02B1C(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

double sub_100B02B4C(double *a1, uint64_t a2)
{
  double result = *(double *)(a2 + 72);
  *a1 = result;
  a1[1] = result;
  return result;
}

double sub_100B02B58(uint64_t a1)
{
  return *(double *)a1;
}

double sub_100B02B60(double *a1, double a2)
{
  double result = *a1 + a2;
  *a1 = result;
  return result;
}

uint64_t sub_100B02B70(uint64_t a1, int a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 20) = 0;
  sub_100513074(a1 + 32, "CLCircularLogBuffer", 1, 1);
  return a1;
}

FILE **sub_100B02BB8(FILE **a1)
{
  return a1;
}

uint64_t sub_100B02BEC(FILE **a1)
{
  float v2 = a1 + 4;
  (*(void (**)(FILE **))&a1[4]->_flags)(a1 + 4);
  float v3 = *a1;
  if (*a1)
  {
    *a1 = 0;
    fclose(v3);
  }
  long long v4 = a1[1];
  if (v4)
  {
    free(v4);
    a1[1] = 0;
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
  }
  sub_100B02DEC((uint64_t)a1);
  (*(void (**)(void *))(*v2 + 24))(v2);
  return v5;
}

void sub_100B02CB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

FILE *sub_100B02CD0(FILE **a1)
{
  float v2 = (char *)(a1 + 4);
  (*(void (**)(FILE **))&a1[4]->_flags)(a1 + 4);
  float v3 = *a1;
  if (!*a1)
  {
    long long v4 = (FILE *)malloc_type_malloc(*((int *)a1 + 4), 0x100004077774924uLL);
    a1[1] = v4;
    if (v4)
    {
      *a1 = funopen(a1, 0, (int (__cdecl *)(void *, const char *, int))sub_100B02DE4, 0, (int (__cdecl *)(void *))sub_100B02DE8);
      sub_100B02DEC((uint64_t)a1);
    }
    float v3 = *a1;
  }
  (*(void (**)(char *))(*(void *)v2 + 24))(v2);
  return v3;
}

void sub_100B02DCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B02DEC(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  (*(void (**)(uint64_t))(*(void *)(a1 + 32) + 16))(a1 + 32);
  *(void *)(v1 - 12) = 0;
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 24))(v1);
}

uint64_t sub_100B02E64(uint64_t a1, FILE *a2)
{
  uint64_t v4 = a1 + 32;
  (*(void (**)(uint64_t))(*(void *)(a1 + 32) + 16))(a1 + 32);
  uint64_t v5 = *(void *)(v4 - 24);
  if (v5)
  {
    if (*(void *)a1)
    {
      fflush(*(FILE **)a1);
      uint64_t v5 = *(void *)(a1 + 8);
    }
    uint64_t v6 = *(unsigned int *)(a1 + 24);
    uint64_t v7 = *(int *)(a1 + 16);
    if ((int)v6 >= (int)v7)
    {
      uint64_t v8 = v7 + v5;
      int v9 = *(char *)(v8 - 1);
      *(unsigned char *)(v8 - 1) = 0;
      fputs((const char *)(*(void *)(a1 + 8) + *(int *)(a1 + 20)), a2);
      fputc(v9, a2);
      uint64_t v5 = *(void *)(a1 + 8);
    }
    *(unsigned char *)(v5 + *(int *)(a1 + 20)) = 0;
    fputs(*(const char **)(a1 + 8), a2);
    sub_100B02DEC(a1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return v6;
}

void sub_100B02F80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B02F9C(uint64_t a1, const void *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v6 = a1 + 32;
  (*(void (**)(uint64_t))(*(void *)(a1 + 32) + 16))(a1 + 32);
  uint64_t v7 = *(void *)(v6 - 24);
  if (v7)
  {
    uint64_t v8 = *(int *)(a1 + 20);
    int v9 = *(_DWORD *)(a1 + 16) - v8;
    if (v9 >= (int)v3) {
      uint64_t v3 = v3;
    }
    else {
      uint64_t v3 = v9;
    }
    memcpy((void *)(v7 + v8), a2, (int)v3);
    int v10 = *(_DWORD *)(a1 + 16);
    int v11 = (*(_DWORD *)(a1 + 20) + (int)v3) % v10;
    if (*(_DWORD *)(a1 + 24) + (int)v3 < v10) {
      int v10 = *(_DWORD *)(a1 + 24) + v3;
    }
    *(_DWORD *)(a1 + 20) = v11;
    *(_DWORD *)(a1 + 24) = v10;
  }
  else
  {
    uint64_t v3 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  return v3;
}

uint64_t sub_100B03080(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, double *))(*(void *)a1 + 120))(a1, v8);
  if (result)
  {
    double v3 = (*(double (**)(uint64_t))(*(void *)a1 + 104))(a1);
    double v4 = v3 - v8[9];
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
    int v6 = v5 - v9;
    BOOL v7 = v4 > 25.0;
    if (v4 < 0.0) {
      BOOL v7 = 1;
    }
    if (v6 > 0x3B) {
      BOOL v7 = 1;
    }
    return v6 > 3 && v7;
  }
  return result;
}

double sub_100B0318C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  int v3 = *(_DWORD *)(a1 + 100);
  do
  {
    int v4 = *(_DWORD *)((char *)&xmmword_101D735D0 + v2);
    BOOL v5 = v4 == v3 || v2 == 12;
    v2 += 4;
  }
  while (!v5);
  double result = 0.0;
  if (v4 == v3)
  {
    int v7 = *(_DWORD *)(a1 + 104) - *(_DWORD *)(a2 + 104);
    double v8 = *(double *)(a1 + 48) - *(double *)(a1 + 40);
    BOOL v9 = v8 <= 0.0 || v7 <= 0;
    double result = v8 + (double)v7;
    if (v9) {
      return 0.0;
    }
  }
  return result;
}

double sub_100B031EC(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a2 + 120))(a2, v8)) {
    return sub_100B0318C(a1, (uint64_t)v8);
  }
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_1022DE160);
  }
  int v4 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#SWOLF,unable to calculate lap SWOLF since last entry is not available", buf, 2u);
  }
  double v3 = 0.0;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1022DE160);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "double CLSWOLFUtil::calculateLapSwimSWOLF(const CLSwimEntry &, const CLSwimDataStore &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return v3;
}

double sub_100B033D0(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  if (*(_DWORD *)(a1 + 100) == 1)
  {
    double v3 = *(double *)(a1 + 72) - *(double *)(a2 + 72);
    if (v3 >= 20.0 && v3 <= 30.0)
    {
      double v5 = 25.0 / v3;
      double v6 = v5 * (*(double *)(a1 + 48) - *(double *)(a1 + 40));
      int v7 = llround(v5 * (double)(*(_DWORD *)(a1 + 104) - *(_DWORD *)(a2 + 104)));
      BOOL v8 = v7 <= 0 || v6 <= 0.0;
      double result = v6 + (double)v7;
      if (v8) {
        return 0.0;
      }
    }
  }
  return result;
}

double sub_100B03448(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a2 + 120))(a2, v8)) {
    return sub_100B033D0(a1, (uint64_t)v8);
  }
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_1022DE160);
  }
  int v4 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#SWOLF,unable to calculate lap SWOLF since last entry is not available", buf, 2u);
  }
  double v3 = 0.0;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1022DE160);
    }
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "double CLSWOLFUtil::calculateOpenWaterSWOLF(const CLSwimEntry &, const CLSwimDataStore &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return v3;
}

double sub_100B0362C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(double **__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 72))(&v9, a2, a1);
  if (v9 == v10)
  {
    double v7 = 0.0;
    if (!v9) {
      return v7;
    }
    goto LABEL_12;
  }
  double v2 = 0.0;
  double v3 = 0.0;
  int v4 = v9;
  do
  {
    double v5 = v4[4];
    BOOL v6 = v5 == 0.0;
    if (v5 == 0.0) {
      double v5 = -0.0;
    }
    double v3 = v3 + v5;
    if (!v6) {
      double v2 = v2 + 1.0;
    }
    v4 += 5;
  }
  while (v4 != v10);
  if (v2 <= 0.0) {
    double v7 = 0.0;
  }
  else {
    double v7 = v3 / v2;
  }
  if (v9)
  {
LABEL_12:
    int v10 = v9;
    operator delete(v9);
  }
  return v7;
}

void sub_100B036F8(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 == v3)
  {
    int v4 = 0;
    int v5 = 0;
    int v6 = 0;
    memset(v48, 0, 37);
    memset(out, 0, 37);
    goto LABEL_23;
  }
  int v4 = 0;
  int v5 = 0;
  int v6 = 0;
  do
  {
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1022DE160);
    }
    double v7 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v8 = *(void *)v2;
      BOOL v9 = *(char **)(v2 + 40);
      int v10 = *(char **)(v2 + 48);
      uint64_t v11 = *(void *)(v2 + 72);
      uint64_t v12 = *(void *)(v2 + 80);
      int v13 = *(_DWORD *)(v2 + 96);
      int v14 = *(_DWORD *)(v2 + 100);
      int v15 = *(_DWORD *)(v2 + 104);
      int v16 = *(_DWORD *)(v2 + 108);
      int v17 = *(_DWORD *)(v2 + 120);
      uint64_t v18 = *(void *)(v2 + 128);
      uint64_t v19 = *(void *)(v2 + 136);
      *(_DWORD *)uint64_t buf = 134220800;
      unint64_t v73 = v8;
      __int16 v74 = 2048;
      uint64_t v75 = v9;
      __int16 v76 = 2048;
      int v77 = v10;
      __int16 v78 = 2048;
      *(void *)int v79 = v11;
      *(_WORD *)&v79[8] = 2048;
      uint64_t v80 = v12;
      __int16 v81 = 1024;
      int v82 = v13;
      __int16 v83 = 1024;
      int v84 = v14;
      __int16 v85 = 1024;
      int v86 = v15;
      __int16 v87 = 1024;
      int v88 = v16;
      __int16 v89 = 1024;
      int v90 = v17;
      __int16 v91 = 2048;
      uint64_t v92 = v18;
      __int16 v93 = 2048;
      uint64_t v94 = v19;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "SWOLF session entries,id,%llu,startTime,%f,endTime,%f,distance,%f,distanceTimestamp,%f,type,%d,style,%d,strokes,%d,laps,%d,segment,%d,SWOLF,%f,segmentSWOLF,%f", buf, 0x66u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_1022DE160);
      }
      unint64_t v21 = *(void *)v2;
      int v22 = *(char **)(v2 + 40);
      int v23 = *(char **)(v2 + 48);
      uint64_t v24 = *(void *)(v2 + 72);
      uint64_t v25 = *(void *)(v2 + 80);
      int v26 = *(_DWORD *)(v2 + 96);
      int v27 = *(_DWORD *)(v2 + 100);
      int v28 = *(_DWORD *)(v2 + 104);
      int v29 = *(_DWORD *)(v2 + 108);
      int v30 = *(_DWORD *)(v2 + 120);
      uint64_t v31 = *(void *)(v2 + 128);
      uint64_t v32 = *(void *)(v2 + 136);
      int v49 = 134220800;
      unint64_t v50 = v21;
      __int16 v51 = 2048;
      __int16 v52 = v22;
      __int16 v53 = 2048;
      __int16 v54 = v23;
      __int16 v55 = 2048;
      *(void *)__int16 v56 = v24;
      *(_WORD *)&v56[8] = 2048;
      uint64_t v57 = v25;
      __int16 v58 = 1024;
      int v59 = v26;
      __int16 v60 = 1024;
      int v61 = v27;
      __int16 v62 = 1024;
      int v63 = v28;
      __int16 v64 = 1024;
      int v65 = v29;
      __int16 v66 = 1024;
      int v67 = v30;
      __int16 v68 = 2048;
      uint64_t v69 = v31;
      __int16 v70 = 2048;
      uint64_t v71 = v32;
      double v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSWOLFUtil::logEntries(const std::vector<CLSwimEntry> &)", "%s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
    }
    int v20 = *(_DWORD *)(v2 + 96);
    if ((v20 - 1) >= 2)
    {
      if (v20 != 3) {
        goto LABEL_14;
      }
      ++v5;
    }
    else
    {
      ++v4;
    }
    if (*(double *)(v2 + 128) != 0.0) {
      ++v6;
    }
LABEL_14:
    v2 += 152;
  }
  while (v2 != v3);
  uint64_t v1 = a1;
  uint64_t v34 = *a1;
  uint64_t v35 = a1[1];
  memset(v48, 0, 37);
  memset(out, 0, 37);
  if (v34 != v35)
  {
    uuid_unparse((const unsigned __int8 *)(v34 + 24), out);
    uuid_unparse((const unsigned __int8 *)(*a1 + 8), v48);
  }
LABEL_23:
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_1022DE160);
  }
  int v36 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v37 = v1[1] == *v1;
    unint64_t v38 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v1[1] - *v1) >> 3);
    *(_DWORD *)uint64_t buf = 134219266;
    float v39 = out;
    if (v37) {
      float v39 = "--";
    }
    unint64_t v73 = v38;
    float v40 = v48;
    __int16 v74 = 2080;
    if (v37) {
      float v40 = "--";
    }
    uint64_t v75 = v39;
    __int16 v76 = 2080;
    int v77 = v40;
    __int16 v78 = 1024;
    *(_DWORD *)int v79 = v5;
    *(_WORD *)&v79[4] = 1024;
    *(_DWORD *)&v79[6] = v4;
    LOWORD(v80) = 1024;
    *(_DWORD *)((char *)&v80 + 2) = v6;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "SWOLF, totalEntries, %lu, sourceId, %s, session id, %s, openWaterEntries, %d, poolEntries, %d, SWOLF entries, %d", buf, 0x32u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1022DE160);
    }
    BOOL v41 = v1[1] == *v1;
    unint64_t v42 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v1[1] - *v1) >> 3);
    float v43 = "--";
    int v44 = out;
    if (v1[1] == *v1) {
      int v44 = "--";
    }
    int v49 = 134219266;
    if (!v41) {
      float v43 = v48;
    }
    unint64_t v50 = v42;
    __int16 v51 = 2080;
    __int16 v52 = v44;
    __int16 v53 = 2080;
    __int16 v54 = v43;
    __int16 v55 = 1024;
    *(_DWORD *)__int16 v56 = v5;
    *(_WORD *)&v56[4] = 1024;
    *(_DWORD *)&v56[6] = v4;
    LOWORD(v57) = 1024;
    *(_DWORD *)((char *)&v57 + 2) = v6;
    int v45 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSWOLFUtil::logEntries(const std::vector<CLSwimEntry> &)", "%s\n", v45);
    if (v45 != (char *)buf) {
      free(v45);
    }
  }
}

BOOL sub_100B03C84(void *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2)
  {
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1022DE160);
    }
    int v5 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "empty session SWOLF entries", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_1022DE160);
      }
      int v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSWOLFUtil::checkSessionSWOLFEntries(const std::vector<CLSwimEntry> &)", "%s\n");
LABEL_29:
      if (v6 != buf) {
        free(v6);
      }
      return 0;
    }
  }
  else
  {
    while (!uuid_compare((const unsigned __int8 *)(v1 + 8), (const unsigned __int8 *)(*a1 + 8)))
    {
      if (uuid_compare((const unsigned __int8 *)(v1 + 24), (const unsigned __int8 *)(*a1 + 24)))
      {
        if (qword_102419000 != -1) {
          dispatch_once(&qword_102419000, &stru_1022DE160);
        }
        BOOL v9 = qword_102419008;
        if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "programmer error, entries passed into calculateSessionSWOLF should all have same session id", buf, 2u);
        }
        BOOL v10 = sub_10013D1A0(115, 0);
        BOOL result = 0;
        if (!v10) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419000 == -1)
        {
LABEL_28:
          int v6 = (uint8_t *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLSWOLFUtil::checkSessionSWOLFEntries(const std::vector<CLSwimEntry> &)", "%s\n");
          goto LABEL_29;
        }
LABEL_32:
        dispatch_once(&qword_102419000, &stru_1022DE160);
        goto LABEL_28;
      }
      v1 += 152;
      if (v1 == v2) {
        return 1;
      }
    }
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1022DE160);
    }
    double v7 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "programmer error, entries passed into calculateSessionSWOLF should all have same session id", buf, 2u);
    }
    BOOL v8 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v8)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 == -1) {
        goto LABEL_28;
      }
      goto LABEL_32;
    }
  }
  return result;
}

void sub_100B0405C(uint64_t *a1@<X0>, unsigned __int8 *a2@<X8>)
{
  uuid_clear(a2 + 16);
  uuid_clear(a2 + 32);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  *((void *)a2 + 10) = 0;
  sub_100B036F8(a1);
  if (sub_100B03C84(a1))
  {
    long long v27 = xmmword_101D735D0;
    *((double *)a2 + 6) = sub_100B04444((uint64_t)&v27, a1);
    *(_DWORD *)uint64_t buf = 1;
    *((double *)a2 + 7) = sub_100B044C4(buf, a1);
    *(_DWORD *)uint64_t buf = 2;
    *((double *)a2 + 8) = sub_100B044C4(buf, a1);
    *(_DWORD *)uint64_t buf = 3;
    *((double *)a2 + 9) = sub_100B044C4(buf, a1);
    *(_DWORD *)uint64_t buf = 4;
    *((double *)a2 + 10) = sub_100B044C4(buf, a1);
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    double v6 = *(double *)(*a1 + 40);
    *(double *)a2 = v6;
    double v7 = *(double *)(v4 + 48);
    *((double *)a2 + 1) = v7;
    if (v4 != v5)
    {
      uint64_t v8 = v4;
      do
      {
        if ((*(_DWORD *)(v8 + 96) - 1) > 2) {
          goto LABEL_9;
        }
        double v9 = *(double *)(v8 + 40);
        if (v9 < v6)
        {
          *(double *)a2 = v9;
          double v6 = v9;
        }
        double v10 = *(double *)(v8 + 48);
        if (v10 <= v7) {
LABEL_9:
        }
          double v10 = v7;
        else {
          *((double *)a2 + 1) = v10;
        }
        v8 += 152;
        double v7 = v10;
      }
      while (v8 != v5);
    }
    uuid_copy(a2 + 16, (const unsigned __int8 *)(v4 + 8));
    uuid_copy(a2 + 32, (const unsigned __int8 *)(*a1 + 24));
    memset(v65, 0, 37);
    memset(out, 0, 37);
    uuid_unparse(a2 + 32, out);
    uuid_unparse(a2 + 16, v65);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1022DE160);
    }
    uint64_t v11 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *((void *)a2 + 6);
      uint64_t v13 = *((void *)a2 + 7);
      uint64_t v14 = *((void *)a2 + 8);
      uint64_t v15 = *((void *)a2 + 9);
      uint64_t v16 = *((void *)a2 + 10);
      uint64_t v17 = *(void *)a2;
      uint64_t v18 = *((void *)a2 + 1);
      *(_DWORD *)uint64_t buf = 134220034;
      uint64_t v47 = v12;
      __int16 v48 = 2048;
      uint64_t v49 = v13;
      __int16 v50 = 2048;
      uint64_t v51 = v14;
      __int16 v52 = 2048;
      uint64_t v53 = v15;
      __int16 v54 = 2048;
      uint64_t v55 = v16;
      __int16 v56 = 2048;
      uint64_t v57 = v17;
      __int16 v58 = 2048;
      uint64_t v59 = v18;
      __int16 v60 = 2080;
      int v61 = out;
      __int16 v62 = 2080;
      int v63 = v65;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "SessionSWOLF,SWOLF,%f,freestyle,%f,backstroke,%f,breastroke,%f,butterfly,%f,startTime,%f,endTime,%f,sourceID,%s,sessionId,%s", buf, 0x5Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_1022DE160);
      }
      uint64_t v19 = *((void *)a2 + 6);
      uint64_t v20 = *((void *)a2 + 7);
      uint64_t v21 = *((void *)a2 + 8);
      uint64_t v22 = *((void *)a2 + 9);
      uint64_t v23 = *((void *)a2 + 10);
      uint64_t v24 = *(void *)a2;
      uint64_t v25 = *((void *)a2 + 1);
      int v28 = 134220034;
      uint64_t v29 = v19;
      __int16 v30 = 2048;
      uint64_t v31 = v20;
      __int16 v32 = 2048;
      uint64_t v33 = v21;
      __int16 v34 = 2048;
      uint64_t v35 = v22;
      __int16 v36 = 2048;
      uint64_t v37 = v23;
      __int16 v38 = 2048;
      uint64_t v39 = v24;
      __int16 v40 = 2048;
      uint64_t v41 = v25;
      __int16 v42 = 2080;
      float v43 = out;
      __int16 v44 = 2080;
      int v45 = v65;
      int v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLSWOLFSummary CLSWOLFUtil::calculateSessionSWOLF(const std::vector<CLSwimEntry> &)", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
  }
}

double sub_100B04444(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return 0.0;
  }
  unint64_t v4 = 0;
  double v5 = 0.0;
  do
  {
    uint64_t v6 = 0;
    int v7 = *(_DWORD *)(v2 + 100);
    do
    {
      int v8 = *(_DWORD *)(a1 + v6);
      BOOL v9 = v8 == v7 || v6 == 12;
      v6 += 4;
    }
    while (!v9);
    if (v8 == v7)
    {
      double v10 = *(double *)(v2 + 128);
      if (v10 != 0.0 && (*(_DWORD *)(v2 + 96) - 1) <= 2)
      {
        double v5 = v5 + v10;
        ++v4;
      }
    }
    v2 += 152;
  }
  while (v2 != v3);
  if (!v4) {
    return 0.0;
  }
  else {
    return v5 / (double)v4;
  }
}

double sub_100B044C4(_DWORD *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return 0.0;
  }
  unint64_t v4 = 0;
  double v5 = 0.0;
  do
  {
    if (*a1 == *(_DWORD *)(v2 + 100))
    {
      double v6 = *(double *)(v2 + 128);
      if (v6 != 0.0 && (*(_DWORD *)(v2 + 96) - 1) <= 2)
      {
        double v5 = v5 + v6;
        ++v4;
      }
    }
    v2 += 152;
  }
  while (v2 != v3);
  if (!v4) {
    return 0.0;
  }
  else {
    return v5 / (double)v4;
  }
}

void sub_100B04530(id a1)
{
  qword_102419008 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

void sub_100B04560(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSFileManager);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v5 = [[objc_msgSend(v4, "contentsOfDirectoryAtPath:error:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1), 0)) reverseObjectEnumerator];
  id v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v11;
LABEL_3:
    uint64_t v9 = 0;
    while (1)
    {
      if (*(void *)v11 != v8) {
        objc_enumerationMutation(v5);
      }
      if (!(*(unsigned int (**)(uint64_t, id))(a2 + 16))(a2, [*(id *)(*((void *)&v10 + 1) + 8 * v9) UTF8String]))break; {
      if (v7 == (id)++v9)
      }
      {
        id v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
        if (v7) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
}

void sub_100B046A0(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSFileManager);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v5 = [[objc_msgSend(v4, "contentsOfDirectoryAtPath:error:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1), 0)) objectEnumerator];
  id v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v11;
LABEL_3:
    uint64_t v9 = 0;
    while (1)
    {
      if (*(void *)v11 != v8) {
        objc_enumerationMutation(v5);
      }
      if (!(*(unsigned int (**)(uint64_t, id))(a2 + 16))(a2, [*(id *)(*((void *)&v10 + 1) + 8 * v9) UTF8String]))break; {
      if (v7 == (id)++v9)
      }
      {
        id v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
        if (v7) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
}

BOOL sub_100B047E0(const char *a1, __int16 a2, uint64_t a3)
{
  uint64_t v8 = a3;
  id v5 = [+[NSFileManager defaultManager](NSFileManager, "defaultManager") attributesOfItemAtPath:+[NSString stringWithUTF8String:a1] error:&v8];
  id v6 = v5;
  if (v5) {
    chmod(a1, (unsigned __int16)[(NSDictionary *)v5 filePosixPermissions] | a2);
  }
  return v6 != 0;
}

void sub_100B04870(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  float v4 = *(float *)(a1 + 300);
  int v5 = *(_DWORD *)(a1 + 520);
  float v6 = 0.0;
  if (v5) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = v4 <= 20.0;
  }
  if (v7) {
    goto LABEL_12;
  }
  float v8 = (float)(v4 * 0.0467) + 0.3694;
  if (v4 <= 8.0) {
    float v8 = 0.0;
  }
  float v9 = (float)(v8 * 0.9308) + 1.8885;
  float v6 = v4 <= 8.0 ? 1.8 : v9;
  if (!v5)
  {
LABEL_12:
    if (v4 > 17.5 && *(float *)(a1 + 292) < 0.0)
    {
      uint64_t v10 = sub_100C3AE20();
      sub_100C3B120(v10);
    }
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022DE1D0);
  }
  long long v11 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = *(void *)(a1 + 112);
    *(_DWORD *)uint64_t buf = 134218752;
    uint64_t v17 = v12;
    __int16 v18 = 2048;
    double v19 = v6;
    __int16 v20 = 1024;
    int v21 = v5;
    __int16 v22 = 2048;
    double v23 = v4;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "WheelchairPush, computeTime, %f, metsFromPushes, %.1f, Push Count, %d, pushEM, %.1f", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022DE1D0);
    }
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLCalorieWheelchairPushModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  if (*(void *)(a1 + 344) == 21) {
    int v13 = 18;
  }
  else {
    int v13 = 17;
  }
  *(_DWORD *)a2 = 0;
  *(float *)(a2 + 4) = v6;
  *(_DWORD *)(a2 + 8) = 0;
  *(float *)(a2 + 12) = v6;
  *(_DWORD *)(a2 + 16) = 0;
  *(float *)(a2 + 20) = v6;
  *(_DWORD *)(a2 + 24) = 0;
  *(float *)(a2 + 28) = v6;
  if (v6 == 1.8) {
    int v14 = 3;
  }
  else {
    int v14 = 0;
  }
  *(_DWORD *)(a2 + 32) = v14;
  *(_DWORD *)(a2 + 36) = v13;
}

uint64_t sub_100B04B54(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)(a2 + 40) + 48))();
}

void sub_100B04B7C(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100B04C5C(id a1)
{
  qword_102480120 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLVDRNotifierSilo"];
}

uint64_t sub_100B04D1C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100B05264;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102480140 != -1) {
    dispatch_once(&qword_102480140, block);
  }
  return qword_10248A8A8;
}

void sub_100B04F80(id a1)
{
  if (sub_10016CCBC()) {
    byte_102480130 = 1;
  }
}

void *sub_100B0505C(uint64_t a1, void *a2)
{
  BOOL result = (void *)sub_100B0509C(a1, "CLVDRNotifier", a2);
  *BOOL result = off_1022DE240;
  return result;
}

uint64_t sub_100B0509C(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022DE3F8;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_100B0512C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B05148(uint64_t a1)
{
  *(void *)a1 = off_1022DE240;
  return sub_100B05168(a1);
}

uint64_t sub_100B05168(uint64_t a1)
{
  *(void *)a1 = off_1022DE3F8;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_100B051EC(uint64_t a1)
{
  *(void *)a1 = off_1022DE240;
  return sub_100B05168(a1);
}

void sub_100B0520C(void *a1)
{
  *a1 = off_1022DE240;
  sub_100B05168((uint64_t)a1);

  operator delete();
}

void sub_100B05264()
{
  sub_1000C7F88(&v2);
  BOOL v4 = 0;
  int v0 = sub_1000D2988(v2, "CLTSPVDRNotifierTypeSensorRecorder", &v4);
  if (v4) {
    int v1 = v0;
  }
  else {
    int v1 = 0;
  }
  if (v3) {
    sub_1000DB0A0(v3);
  }
  if (v1) {
    operator new();
  }
  operator new();
}

void sub_100B05320()
{
}

void *sub_100B0536C@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  if (*a1) {
    uint64_t v2 = "Unknown";
  }
  else {
    uint64_t v2 = "";
  }
  return sub_100134750(a2, v2);
}

uint64_t sub_100B05390(uint64_t **a1, int a2, unsigned int *a3, int a4)
{
  int v25 = a2;
  if (qword_102419500 != -1) {
    dispatch_once(&qword_102419500, &stru_1022DE3C8);
  }
  BOOL v7 = qword_102419508;
  if (os_log_type_enabled((os_log_t)qword_102419508, OS_LOG_TYPE_DEFAULT))
  {
    float v8 = a4 ? "Registration" : "Unregistration";
    *(void *)uint64_t buf = &v25;
    id v9 = [[objc_msgSend(sub_10008A098(a1 + 10, &v25, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[8], "description") UTF8String];
    unsigned int v10 = *a3;
    *(_DWORD *)uint64_t buf = *a3;
    int v11 = sub_1001072EC((uint64_t)a1, (int *)buf, 1);
    ((void (*)(unsigned char *__return_ptr, uint64_t **, unsigned int *))(*a1)[20])(__p, a1, a3);
    uint64_t v12 = v31 >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)uint64_t buf = 136447234;
    *(void *)&uint8_t buf[4] = v8;
    __int16 v38 = 2082;
    id v39 = v9;
    __int16 v40 = 1026;
    unsigned int v41 = v10;
    __int16 v42 = 1026;
    int v43 = v11;
    __int16 v44 = 2082;
    int v45 = v12;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "VDR, action, %{public}s, client, %{public}s, notification, %{public}d, notificationClientCount, %{public}d, notificationString, %{public}s", buf, 0x2Cu);
    if (SHIBYTE(v31) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419500 != -1) {
      dispatch_once(&qword_102419500, &stru_1022DE3C8);
    }
    if (a4) {
      uint64_t v17 = "Registration";
    }
    else {
      uint64_t v17 = "Unregistration";
    }
    *(void *)long long __p = &v25;
    id v18 = [[objc_msgSend(sub_10008A098(a1 + 10, &v25, (uint64_t)&unk_101D0B290, (_DWORD **)__p)[8], "description") UTF8String];
    unsigned int v19 = *a3;
    *(_DWORD *)long long __p = *a3;
    int v20 = sub_1001072EC((uint64_t)a1, (int *)__p, 1);
    ((void (*)(void **__return_ptr, uint64_t **, unsigned int *))(*a1)[20])(v23, a1, a3);
    if (v24 >= 0) {
      int v21 = v23;
    }
    else {
      int v21 = (void **)v23[0];
    }
    *(_DWORD *)long long __p = 136447234;
    *(void *)&__p[4] = v17;
    __int16 v29 = 2082;
    id v30 = v18;
    __int16 v31 = 1026;
    unsigned int v32 = v19;
    __int16 v33 = 1026;
    int v34 = v20;
    __int16 v35 = 2082;
    __int16 v36 = v21;
    __int16 v22 = (char *)_os_log_send_and_compose_impl();
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVDRNotifier::logClient(int, const CLVDRNotifier_Type::Notification &, BOOL)", "%s\n", v22);
    if (v22 != buf) {
      free(v22);
    }
  }
  CFStringRef v13 = @"Unregistration";
  if (a4) {
    CFStringRef v13 = @"Registration";
  }
  v27[0] = v13;
  v26[0] = @"action";
  v26[1] = @"client";
  *(void *)uint64_t buf = &v25;
  v27[1] = [[sub_10008A098(a1 + 10, &v25, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[8] description];
  v26[2] = @"notification";
  v27[2] = +[NSNumber numberWithUnsignedInt:*a3];
  v26[3] = @"notificationClientCount";
  *(_DWORD *)uint64_t buf = *a3;
  v27[3] = +[NSNumber numberWithInt:sub_1001072EC((uint64_t)a1, (int *)buf, 1)];
  void v26[4] = @"notificationString";
  ((void (*)(unsigned char *__return_ptr, uint64_t **, unsigned int *))(*a1)[20])(buf, a1, a3);
  if (v40 >= 0) {
    int v14 = buf;
  }
  else {
    int v14 = *(unsigned char **)buf;
  }
  void v27[4] = +[NSString stringWithUTF8String:v14];
  uint64_t v15 = +[NSDictionary dictionaryWithObjects:v27 forKeys:v26 count:5];
  if (SHIBYTE(v40) < 0) {
    operator delete(*(void **)buf);
  }
  return sub_1000FC494((uint64_t)v15, (uint64_t)"MotionVDR");
}

void sub_100B05898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B058BC(uint64_t **a1, uint64_t a2, unsigned int *a3)
{
  int v4 = a2;
  uint64_t v6 = ((uint64_t (*)(uint64_t **, uint64_t, unsigned int *, void *))(*a1)[12])(a1, a2, a3, &unk_102472F78);
  sub_100B05390(a1, v4, a3, 1);
  return v6;
}

uint64_t sub_100B05934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_102472F78);
}

BOOL sub_100B05960(char *a1, int a2, int *a3)
{
  BOOL v6 = sub_100B059B0(a1, a2, a3);
  sub_100B05390((uint64_t **)a1, a2, (unsigned int *)a3, 0);
  return v6;
}

BOOL sub_100B059B0(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      float v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          float v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        int v14 = (char *)*((void *)v8 + 6);
        uint64_t v12 = v8 + 48;
        CFStringRef v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              unsigned int v19 = (char **)v13;
            }
            else {
              unsigned int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            CFStringRef v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            __int16 v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                int v25 = (uint64_t *)v20;
              }
              else {
                int v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                __int16 v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022DE3A8);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                long long v27 = a1 + 8;
                if (a1[31] < 0) {
                  long long v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                __int16 v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022DE3A8);
                }
                __int16 v29 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  id v30 = buf;
                }
                else {
                  id v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                __int16 v38 = v29;
                __int16 v39 = 2082;
                __int16 v40 = v30;
                __int16 v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLVDRNotifier_Type::Notification, CLVDRNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLVDRNotifier_Type::Notification, NotificationData_T = CLVDRNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100B05D84(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_1022DE4D8;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = (uint64_t *)*a3;
  }
  id v13 = [[[a4 vendor] proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a4 silo]];
  return a1;
}

void sub_100B05E68()
{
}

void sub_100B05F24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_100B05F64(uint64_t a1)
{
  sub_100B0604C(a1);

  operator delete();
}

id sub_100B05F9C(uint64_t a1, int a2, void *a3)
{
  id result = sub_1006D1F18(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100B05FEC(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100B0601C(id a1)
{
  qword_102419508 = (uint64_t)os_log_create("com.apple.locationd.Position", "VDR");
}

uint64_t sub_100B0604C(uint64_t a1)
{
  *(void *)a1 = off_1022DE4D8;
  uint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *uint64_t v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_100B060BC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D73634;
      v0[3] = unk_101D73644;
      v0[4] = xmmword_101D73654;
      v0[0] = xmmword_101D73614;
      v0[1] = unk_101D73624;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_100B0619C(_Unwind_Exception *a1)
{
}

uint64_t sub_100B061B4(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 48) + 48))(*(void *)(a3 + 48));
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void, unsigned char *, double))(**(void **)(a3 + 48) + 24))(*(void *)(a3 + 48), v6, a1);
    if (v6[208]) {
      return sub_10046B90C(*(void *)(a3 + 8), *(double *)(*(void *)(a3 + 8) + 104), *(double *)(*(void *)(a3 + 8) + 112));
    }
  }
  return result;
}

void sub_100B06284(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  float v4 = *(float *)(a1 + 1368);
  float v5 = *(float *)(a1 + 1372);
  float v6 = *(float *)(a1 + 1376);
  float v7 = *(float *)(a1 + 1380);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 3;
  *(void *)(a2 + 32) = 3;
  sub_10068D230();
  float v9 = v8;
  if (sub_1001860C8(a1) && *(double *)(a1 + 600) < *(double *)a1)
  {
    float v10 = *(double *)(a1 + 560);
    float v11 = (v7 - v10) / (v7 - v6);
    float v12 = v4 * sub_101141BD8(v11, v5);
    *(float *)a2 = v12;
    *(float *)(a2 + 28) = v12;
    int v13 = 1;
    *(_DWORD *)(a2 + 32) = 1;
    float v14 = 0.0;
    float v15 = 7.0;
    float v16 = v12;
    if (v12 > 7.0)
    {
LABEL_9:
      float v18 = v16;
      int v17 = v13;
      *(float *)(a2 + 20) = v15;
      int v13 = 3;
      *(_DWORD *)(a2 + 24) = 3;
      float v16 = v15;
      goto LABEL_11;
    }
  }
  else
  {
    int v13 = 0;
    *(float *)(a2 + 4) = v9;
    *(float *)(a2 + 28) = v9;
    float v12 = 0.0;
    float v14 = v9;
    float v16 = v9;
    *(_DWORD *)(a2 + 32) = 0;
  }
  *(float *)(a2 + 20) = v16;
  *(_DWORD *)(a2 + 24) = v13;
  float v15 = 4.4021;
  if (v16 >= 4.4021)
  {
    int v17 = v13;
    float v18 = v16;
    goto LABEL_11;
  }
  if (!sub_1001860C8(a1)) {
    goto LABEL_9;
  }
  int v17 = v13;
  float v18 = v16;
  if (*(double *)(a1 + 600) >= *(double *)a1) {
    goto LABEL_9;
  }
LABEL_11:
  if (v18 < 1.6 && (!sub_1001860C8(a1) || *(double *)(a1 + 600) >= *(double *)a1))
  {
    *(void *)(a2 + 28) = 0x33FCCCCCDLL;
    int v17 = 3;
    float v18 = 1.6;
  }
  *(float *)(a2 + 12) = v9;
  if (*(_DWORD *)(a1 + 152) == 2101) {
    int v19 = 20;
  }
  else {
    int v19 = 13;
  }
  *(_DWORD *)(a2 + 36) = v19;
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022DE540);
  }
  uint64_t v20 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134219264;
    double v23 = v14;
    __int16 v24 = 2048;
    double v25 = v12;
    __int16 v26 = 2048;
    double v27 = v18;
    __int16 v28 = 1024;
    int v29 = v17;
    __int16 v30 = 2048;
    double v31 = v16;
    __int16 v32 = 1024;
    int v33 = v13;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Yoga,metsWR,%f,metsHR,%f,truthMets,%f,truthMetsSrc,%d,userMets,%f,userMetsSrc,%d", buf, 0x36u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022DE540);
    }
    int v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLCalorieYogaModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
}

void sub_100B06650(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100B06680(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  *(_WORD *)(a1 + 8) = 0;
  *(void *)a1 = off_1022DE578;
  *(unsigned char *)(a1 + 10) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 168) = _Q0;
  *(unsigned char *)(a1 + 196) = a4;
  *(void *)(a1 + 200) = *a2;
  *(_DWORD *)(a1 + 208) = 4;
  *(void *)(a1 + 216) = 0x3FA0A3D70A3D70A4;
  *(unsigned char *)(a1 + 224) = 1;
  *(void *)(a1 + 232) = off_1022AD0A0;
  *(void *)(a1 + 240) = 100;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = off_1022DE6C0;
  *(void *)(a1 + 312) = 20;
  *(void *)(a1 + 320) = off_1022DE6F0;
  *(void *)(a1 + 328) = 20;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(void *)(a1 + 400) = off_1022DE6F0;
  *(void *)(a1 + 408) = 20;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(void *)(a1 + 480) = off_1022DE6F0;
  *(void *)(a1 + 488) = 20;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_DWORD *)(a1 + 600) = 0;
  *(void *)(a1 + 608) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 616) = 0;
  operator new[]();
}

void sub_100B06E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100B0AC5C(v13);
  *(void *)(v12 + 232) = a12;
  sub_1003A7340((void *)(v12 + 256));
  _Unwind_Resume(a1);
}

void *sub_100B06E84(void *a1)
{
  *a1 = off_1022DE578;
  if (a1[16]) {
    operator delete[]();
  }
  sub_100B0AC5C(a1 + 38);
  a1[29] = off_1022AD0A0;
  sub_1003A7340(a1 + 32);
  return a1;
}

void sub_100B06F14(void *a1)
{
  sub_100B06E84(a1);

  operator delete();
}

uint64_t sub_100B06F4C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_100B06F54(uint64_t a1)
{
  *(unsigned char *)(a1 + 8) = 0;
  bzero((void *)(a1 + 16), 0x20uLL);
  *(void *)(a1 + 40) = 0x3FF0000000000000;
  bzero((void *)(a1 + 64), 0x30uLL);
  bzero(*(void **)(a1 + 120), 0x18uLL);
  bzero(*(void **)(a1 + 112), 0x3CuLL);
  uint64_t v2 = *(void *)(a1 + 120);
  memset_pattern16((void *)v2, &unk_101D73800, 0xCuLL);
  memset_pattern16((void *)(v2 + 12), &unk_101D73810, 0xCuLL);
  *(unsigned char *)(a1 + 10) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 168) = _Q0;
  bzero((void *)(a1 + 184), 0xCuLL);
  bzero((void *)(a1 + 156), 0xCuLL);
  bzero((void *)(a1 + 136), 0xCuLL);
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  bzero((void *)(a1 + 560), 0xCuLL);
  bzero((void *)(a1 + 576), 0x18uLL);
  *(_DWORD *)(a1 + 600) = 0;
  *(void *)(a1 + 608) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 616) = 0;
  sub_100B0AD14((void *)(a1 + 320));
  sub_100B0AD14((void *)(a1 + 400));
  sub_100B0AD14((void *)(a1 + 480));

  sub_1003A7544((void *)(a1 + 232));
}

void sub_100B07064(uint64_t a1, float64x2_t *a2, uint64_t a3, double *a4, void *a5)
{
  *(void *)(a1 + 168) = *a5;
  ++*(_DWORD *)(a1 + 152);
  float v7 = *a4;
  float32x2_t v8 = vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(vmul_f32(vcvt_f32_f64(*a2), (float32x2_t)vdup_n_s32(0x3C8EFA35u))), *(float64x2_t *)(a1 + 88)));
  float32x2_t v50 = v8;
  float v9 = (float)(v7 * 0.017453) - *(double *)(a1 + 104);
  float v51 = v9;
  *(float *)(a1 + 164) = v9;
  *(float32x2_t *)(a1 + 156) = v50;
  float32x2_t v28 = v8;
  if (*(unsigned char *)(a1 + 224))
  {
    float v10 = v8.f32[1];
    float v29 = sqrtf(vmlas_n_f32(vmuls_lane_f32(v8.f32[1], v8, 1), v8.f32[0], v8.f32[0]) + (float)(v9 * v9));
    sub_1001A44F4(a1 + 232, &v29);
    if (*(unsigned char *)(a1 + 196))
    {
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022DE650);
      }
      float v11 = qword_102419088;
      if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 134218752;
        double v41 = (float)(v29 / 0.017453);
        __int16 v42 = 2048;
        double v43 = (float)(v28.f32[0] * 57.296);
        __int16 v44 = 2048;
        double v45 = (float)(v10 * 57.296);
        __int16 v46 = 2048;
        double v47 = (float)(v9 * 57.296);
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "omegaMag6, %.3f, omega, %.3f, %.3f, %.3f", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022DE650);
        }
        int v30 = 134218752;
        double v31 = (float)(v29 / 0.017453);
        __int16 v32 = 2048;
        double v33 = (float)(v28.f32[0] * 57.296);
        __int16 v34 = 2048;
        double v35 = (float)(v10 * 57.296);
        __int16 v36 = 2048;
        double v37 = (float)(v9 * 57.296);
        double v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedGyroData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
    }
  }
  sub_100B07594(a1 + 16, &v50, (double *)(a1 + 200));
  float32x2_t v12 = vadd_f32(*(float32x2_t *)(a1 + 136), v28);
  *(float32x2_t *)(a1 + 136) = v12;
  float v13 = *(float *)(a1 + 144) + v9;
  *(float *)(a1 + 144) = v13;
  ++*(_DWORD *)(a1 + 148);
  double v14 = *(double *)(a1 + 200)
      * (*(double *)(a1 + 200)
       * (float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v12, v12).i32[1]), v12.f32[0], v12.f32[0]) + (float)(v13 * v13)));
  if (v14 > 0.122500002) {
    sub_100B07630(a1, v14, (int32x2_t)0x3FBF5C2900000000);
  }
  if (*(unsigned char *)(a1 + 196))
  {
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022DE690);
    }
    float v15 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
    {
      double v16 = *(double *)(a1 + 16);
      double v17 = *(double *)(a1 + 24);
      double v18 = *(double *)(a1 + 32);
      double v19 = *(double *)(a1 + 40);
      uint64_t v20 = *a5;
      *(_DWORD *)uint64_t buf = 134219008;
      double v41 = v16;
      __int16 v42 = 2048;
      double v43 = v17;
      __int16 v44 = 2048;
      double v45 = v18;
      __int16 v46 = 2048;
      double v47 = v19;
      __int16 v48 = 2048;
      uint64_t v49 = v20;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[AppleQuaternion] x,%f,y,%f,z,%f,w,%f,timestamp,%f", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022DE690);
      }
      double v21 = *(double *)(a1 + 16);
      double v22 = *(double *)(a1 + 24);
      double v23 = *(double *)(a1 + 32);
      double v24 = *(double *)(a1 + 40);
      uint64_t v25 = *a5;
      int v30 = 134219008;
      double v31 = v21;
      __int16 v32 = 2048;
      double v33 = v22;
      __int16 v34 = 2048;
      double v35 = v23;
      __int16 v36 = 2048;
      double v37 = v24;
      __int16 v38 = 2048;
      uint64_t v39 = v25;
      __int16 v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedGyroData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
  }
}

double sub_100B07594(uint64_t a1, float32x2_t *a2, double *a3)
{
  double v4 = *a3;
  float64x2_t v9 = vmulq_n_f64(vcvtq_f64_f32(*a2), *a3);
  double v10 = v4 * a2[1].f32[0];
  sub_100B07EA4(v8, v9.f64);
  sub_100A1D6D4((double *)v7, v8, (double *)a1);
  double result = *(double *)v7;
  long long v6 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t sub_100B07630(uint64_t result, double a2, int32x2_t a3)
{
  int v3 = *(_DWORD *)(result + 148);
  if (v3)
  {
    uint64_t v4 = result;
    float v5 = (void *)(result + 136);
    *(float *)a3.i32 = (float)v3;
    int32x2_t v20 = a3;
    float v6 = *(float *)(result + 136) / (float)v3;
    double v24 = *(double *)(result + 200) * (double)v3;
    double v7 = v24;
    *(_DWORD *)(result + 148) = 0;
    double v18 = exp(v7 / -5000.0);
    float32x2_t v19 = vdiv_f32(*(float32x2_t *)(v4 + 140), (float32x2_t)vdup_lane_s32(v20, 0));
    bzero(v5, 0xCuLL);
    float32x2_t v8 = v19;
    *(float64x2_t *)(v4 + 88) = vmulq_n_f64(*(float64x2_t *)(v4 + 88), v18);
    *(double *)(v4 + 104) = v18 * *(double *)(v4 + 104);
    int v39 = 0;
    _S9 = v19.i32[1];
    float32_t v40 = v19.f32[1];
    float32x2_t v41 = vneg_f32(v19);
    int v42 = 0;
    float v43 = v6;
    __int32 v44 = v19.i32[0];
    float v45 = -v6;
    int v46 = 0;
    v31[0] = -(float)(vmul_f32(v8, v8).f32[0] + (float)(v19.f32[1] * v19.f32[1]));
    v31[1] = v6 * v19.f32[0];
    float v32 = vmuls_lane_f32(v6, v19, 1);
    float v33 = v6 * v19.f32[0];
    float v34 = -(float)((float)(v6 * v6) + (float)(v40 * v40));
    float v35 = vmuls_lane_f32(v8.f32[0], v8, 1);
    float v36 = v32;
    float v37 = v35;
    float v38 = -(float)((float)(v6 * v6) + (float)(v8.f32[0] * v8.f32[0]));
    sub_100B07FDC((uint64_t)v30, &v24, (uint64_t)&v39, (uint64_t)v31);
    uint64_t v10 = *(void *)(v4 + 112);
    v4 += 112;
    sub_100B081E0(v30, v10, 6);
    v23[0] = &v28;
    v23[1] = &v27;
    _V1.S[1] = v19.i32[1];
    __asm { FMLA            S0, S9, V1.S[1] }
    double v21 = (float)(*(float *)v20.i32 * 0.00000021323) * 0.5;
    double v22 = 2.76135698e-10 / (7.0 / (exp((0.11 - sqrtf(_S0)) / 0.012) + 1.0) + 1.0);
    sub_100B08274(v29, &v24, (uint64_t)&v39, &v21, &v22);
    sub_100B084B8(v23, (uint64_t)v29, 6);
    double result = sub_100B08650((uint64_t)&v25, (uint64_t *)v4, (uint64_t)v30, (uint64_t *)v23, 6);
    uint64_t v17 = *(void *)(v4 + 8);
    *(_OWORD *)uint64_t v17 = v25;
    *(void *)(v17 + 16) = v26;
  }
  return result;
}

double sub_100B07870(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  bzero(v12, 0x48uLL);
  int v13 = 1065353216;
  int v14 = 1065353216;
  int v15 = 1065353216;
  uint64_t v9 = *a3;
  int v10 = *((_DWORD *)a3 + 2);
  sub_100B079B8(v11, (uint64_t *)(a1 + 112), (uint64_t)v12, (uint64_t)&v9, a2, 6, 3, (uint64_t)&v8);
  for (uint64_t i = 0; i != 24; i += 8)
  {
    double result = *(double *)&v11[i + 24] + *(double *)(a1 + i + 88);
    *(double *)(a1 + i + 88) = result;
  }
  return result;
}

void sub_100B079B8(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8)
{
  bzero(a1, 8 * a6);
  if (a7 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = a8 + 4 * a6;
    do
    {
      sub_100B0A9BC(a8, *a2, a3 + 4 * v13, a7, a6);
      if (a6 >= 1)
      {
        int v15 = (float *)a2[1];
        uint64_t v16 = a6;
        uint64_t v17 = (float *)a8;
        do
        {
          float v18 = *v15++;
          v17[a6] = v18 * *v17;
          ++v17;
          --v16;
        }
        while (v16);
        uint64_t v19 = 0;
        float v20 = *(float *)(a5 + 4 * v13);
        float v21 = *(float *)(a4 + 4 * v13);
        uint64_t v23 = *a2;
        uint64_t v22 = a2[1];
        float v24 = 1.0 / v21;
        do
        {
          float v25 = v21;
          float v26 = *(float *)(a8 + 4 * v19);
          float v21 = v21 + (float)(v26 * *(float *)(v14 + 4 * v19));
          *(float *)(v22 + 4 * v19) = *(float *)(v22 + 4 * v19) * (float)(v25 * (float)(1.0 / v21));
          if (v19)
          {
            uint64_t v27 = 0;
            float v28 = -(float)(v26 * v24);
            uint64_t v29 = v23 + 4 * (((int)v19 - 1) * (int)v19 / 2);
            do
            {
              float v30 = *(float *)(v29 + 4 * v27);
              *(float *)(v29 + 4 * v27) = v30 + (float)(*(float *)(v14 + 4 * v27) * v28);
              *(float *)(v14 + 4 * v27) = *(float *)(v14 + 4 * v27) + (float)(*(float *)(v14 + 4 * v19) * v30);
              ++v27;
            }
            while (v19 != v27);
          }
          ++v19;
          float v24 = 1.0 / v21;
        }
        while (v19 != a6);
        float v31 = v20 * (float)(1.0 / v21);
        uint64_t v32 = a6;
        float v33 = (float *)(a8 + 4 * a6);
        float v34 = (double *)a1;
        do
        {
          float v35 = *v33++;
          *float v34 = *v34 + (float)(v31 * v35);
          ++v34;
          --v32;
        }
        while (v32);
      }
      ++v13;
    }
    while (v13 != a7);
  }
}

double sub_100B07B6C(uint64_t a1, float32x2_t *a2, float *a3)
{
  if (*(unsigned char *)(a1 + 196))
  {
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022DE690);
    }
    float v6 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
    {
      double v7 = a2->f32[0];
      double v8 = a2->f32[1];
      double v9 = a2[1].f32[0];
      double v10 = *a3;
      double v11 = a3[1];
      double v12 = a3[2];
      *(_DWORD *)uint64_t buf = 134219264;
      *(double *)&uint8_t buf[4] = v7;
      __int16 v38 = 2048;
      double v39 = v8;
      __int16 v40 = 2048;
      double v41 = v9;
      __int16 v42 = 2048;
      double v43 = v10;
      __int16 v44 = 2048;
      double v45 = v11;
      __int16 v46 = 2048;
      double v47 = v12;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[Bias,Var] bias.x,%f,bias.y,%f,bias.z,%f,var.x,%f,var.y,%f,var.z,%f", buf, 0x3Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022DE690);
      }
      double v19 = a2->f32[0];
      double v20 = a2->f32[1];
      double v21 = a2[1].f32[0];
      double v22 = *a3;
      double v23 = a3[1];
      double v24 = a3[2];
      *(_DWORD *)float v26 = 134219264;
      *(double *)&void v26[4] = v19;
      __int16 v27 = 2048;
      double v28 = v20;
      __int16 v29 = 2048;
      double v30 = v21;
      __int16 v31 = 2048;
      double v32 = v22;
      __int16 v33 = 2048;
      double v34 = v23;
      __int16 v35 = 2048;
      double v36 = v24;
      float v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedGyroBias(const CLMotionTypeRotationRate &, const CLMotionTypeVector3 &)", "%s\n", v25);
      if (v25 != buf) {
        free(v25);
      }
    }
  }
  if (*(unsigned char *)(a1 + 10))
  {
    uint64_t v13 = 0;
    double result = *(double *)a3;
    *(void *)uint64_t buf = *(void *)a3;
    *(float *)&buf[8] = a3[2];
    LODWORD(result) = 897988541;
    do
    {
      float v15 = *(float *)&buf[v13];
      if (v15 < 0.000001) {
        float v15 = 0.000001;
      }
      *(float *)&buf[v13] = v15;
      v13 += 4;
    }
    while (v13 != 12);
    int v16 = *(_DWORD *)(a1 + 152);
    if (v16 >= 1)
    {
      if (v16 >= 50) {
        int v17 = 50;
      }
      else {
        int v17 = *(_DWORD *)(a1 + 152);
      }
      do
      {
        *(float32x2_t *)float v26 = vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*a2), *(float64x2_t *)(a1 + 88)));
        float v18 = a2[1].f32[0] - *(double *)(a1 + 104);
        *(float *)&v26[8] = v18;
        double result = sub_100B07870(a1, (uint64_t)v26, (uint64_t *)buf);
        --v17;
      }
      while (v17);
    }
    *(_DWORD *)(a1 + 152) = 0;
  }
  else
  {
    *(float64x2_t *)(a1 + 88) = vcvtq_f64_f32(*a2);
    double result = a2[1].f32[0];
    *(double *)(a1 + 104) = result;
    *(unsigned char *)(a1 + 10) = 1;
  }
  return result;
}

void sub_100B07EA4(double *a1, double *a2)
{
  double v4 = *a2;
  double v5 = sqrt(a2[1] * a2[1] + v4 * v4 + a2[2] * a2[2]);
  if (v5 >= 0.00000002)
  {
    __double2 v13 = __sincos_stret(v5 * 0.5);
    double cosval = v13.__cosval;
    *a1 = v4 * v13.__sinval / v5;
    a1[1] = v13.__sinval * a2[1] / v5;
    double v11 = v13.__sinval * a2[2] / v5;
  }
  else
  {
    *a1 = v4 * 0.5;
    double v6 = a2[1] * 0.5;
    a1[1] = v6;
    double v7 = a2[2] * 0.5;
    double v8 = v5 * v5 * 0.125;
    double v9 = 1.0 - v8;
    double v10 = sqrt(v8 + 1.0);
    *a1 = v4 * 0.5 / v10;
    a1[1] = v6 / v10;
    double v11 = v7 / v10;
    double cosval = v9 / v10;
  }
  a1[2] = v11;
  a1[3] = cosval;
}

double sub_100B07F84(double *a1, double *a2)
{
  *a1 = a2[3] * (a2[1] + a2[1]) - *a2 * (a2[2] + a2[2]);
  a1[1] = -(a2[3] * (*a2 + *a2)) - a2[1] * (a2[2] + a2[2]);
  double result = *a2 * (*a2 + *a2) + -1.0 + a2[1] * (a2[1] + a2[1]);
  a1[2] = result;
  return result;
}

void sub_100B07FDC(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 0;
  double v7 = *a2;
  float v8 = *a2;
  float v9 = -v8;
  double v10 = v7 * v7 * 0.5;
  float v11 = v10;
  uint64_t v12 = a3;
  __double2 v13 = v29;
  do
  {
    for (uint64_t i = 0; i != 3; ++i)
      v13[i] = (float)(*(float *)(a4 + i * 4) * v11) + (float)(v9 * *(float *)(v12 + i * 4));
    v29[4 * v6] = v29[4 * v6] + 1.0;
    ++v6;
    v13 += 3;
    a4 += 12;
    v12 += 12;
  }
  while (v6 != 3);
  uint64_t v15 = 0;
  uint64_t v16 = a1;
  do
  {
    *(void *)uint64_t v16 = *(void *)&v29[v15];
    *(float *)(v16 + 8) = v29[v15 + 2];
    v15 += 3;
    v16 += 24;
  }
  while (v15 != 9);
  uint64_t v17 = 0;
  float v18 = v10 / 5000.0 - v7;
  double v19 = v29;
  do
  {
    for (uint64_t j = 0; j != 3; ++j)
      v19[j] = *(float *)(a3 + j * 4) * v11;
    v29[4 * v17] = v29[4 * v17] + v18;
    ++v17;
    v19 += 3;
    a3 += 12;
  }
  while (v17 != 3);
  uint64_t v21 = 0;
  uint64_t v22 = a1 + 72;
  do
  {
    *(void *)uint64_t v22 = *(void *)&v29[v21];
    *(float *)(v22 + 8) = v29[v21 + 2];
    v21 += 3;
    v22 += 24;
  }
  while (v21 != 9);
  for (uint64_t k = 12; k != 84; k += 24)
    bzero((void *)(a1 + k), 0xCuLL);
  long double v24 = exp(*a2 / -5000.0);
  uint64_t v25 = 0;
  float v26 = v24;
  uint64_t v27 = a1 + 84;
  double v28 = (char *)(a1 + 84);
  do
  {
    bzero(v28, 0xCuLL);
    *(float *)(v27 + v25) = v26;
    v28 += 24;
    v25 += 28;
  }
  while (v25 != 84);
}

float *sub_100B081E0(float *result, uint64_t a2, int a3)
{
  uint64_t v3 = (a3 - 1);
  if (a3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 4 * a3;
    uint64_t v6 = result;
    uint64_t v7 = a3;
    do
    {
      uint64_t v8 = v7;
      uint64_t v9 = v3;
      while (v8 >= 2)
      {
        uint64_t v10 = 0;
        uint64_t v11 = v8 - 1;
        uint64_t v12 = v4 + (v8 - 1) * v7;
        float v13 = result[v12];
        uint64_t v14 = a2 + 4 * (((int)v8 - 1) * ((int)v8 - 2) / 2);
        uint64_t v15 = v6;
        do
        {
          float v13 = v13 + (float)(*v15 * *(float *)(v14 + 4 * v10++));
          uint64_t v15 = (float *)((char *)v15 + v5);
        }
        while (v9 != v10);
        result[v12] = v13;
        --v9;
        uint64_t v8 = v11;
      }
      ++v4;
      ++v6;
    }
    while (v4 != v7);
  }
  return result;
}

void sub_100B08274(char *a1, double *a2, uint64_t a3, double *a4, double *a5)
{
  uint64_t v9 = 0;
  float v10 = (*a2 * -0.25 / 5000.0 + 0.333333333) * (*a2 * (*a2 * (*a2 * *a5))) + *a4 * *a2;
  uint64_t v11 = a1;
  do
  {
    bzero(v11, 0xCuLL);
    *(float *)&a1[v9] = v10;
    v11 += 24;
    v9 += 28;
  }
  while (v9 != 84);
  double v12 = *a2;
  double v13 = *a2 / 5000.0;
  double v14 = expm1(-v13);
  long double v15 = exp(-v13);
  uint64_t v16 = 0;
  long double v17 = v15 * (v13 * v13 + v13 * 2.0) + v14 * 2.0;
  double v18 = *a5;
  double v19 = *a5 * -0.5;
  float v20 = v15 * (v12 * (v12 * v19));
  float v21 = v19 * 1.24999999e11 * v17;
  uint64_t v22 = v35;
  do
  {
    for (uint64_t i = 0; i != 3; ++i)
      v22[i] = *(float *)(a3 + i * 4) * v21;
    v35[4 * v16] = v35[4 * v16] + v20;
    ++v16;
    v22 += 3;
    a3 += 12;
  }
  while (v16 != 3);
  long double v24 = (float *)(a1 + 12);
  uint64_t v25 = a1 + 72;
  float v26 = v35;
  uint64_t v27 = 3;
  do
  {
    uint64_t v28 = 0;
    __int16 v29 = v24;
    do
    {
      float v30 = v26[v28];
      *(float *)&v25[v28 * 4] = v30;
      *__int16 v29 = v30;
      v29 += 6;
      ++v28;
    }
    while (v28 != 3);
    ++v27;
    ++v24;
    v25 += 24;
    v26 += 3;
  }
  while (v27 != 6);
  uint64_t v31 = 0;
  float v32 = v18 * 5000.0 * (1.0 - exp(v12 * -2.0 / 5000.0)) * 0.5;
  __int16 v33 = a1 + 84;
  double v34 = a1 + 84;
  do
  {
    bzero(v34, 0xCuLL);
    *(float *)&v33[v31] = v32;
    v34 += 24;
    v31 += 28;
  }
  while (v31 != 84);
}

void sub_100B084B8(void **a1, uint64_t a2, int a3)
{
  bzero(*a1, 4 * ((a3 - 1) * a3 / 2));
  bzero(a1[1], 4 * a3);
  if (a3 >= 1)
  {
    int v6 = 0;
    uint64_t v7 = (float *)*a1;
    uint64_t v8 = (float *)a1[1];
    uint64_t v9 = a3 - 2;
    uint64_t v10 = a3 - 1;
    int v11 = a3 - 1;
    double v12 = &v8[a3];
    uint64_t v13 = v10;
    int v14 = a3;
    while (1)
    {
      float v15 = *(float *)(a2 + 4 * (v13 + (int)v13 * a3));
      if (v13 < v10)
      {
        uint64_t v16 = 0;
        do
        {
          float v15 = v15
              + (float)((float)-(float)(v7[v13 + (v11 + (int)v16) * (v14 + (int)v16) / 2]
                                      * v7[v13 + (v11 + (int)v16) * (v14 + (int)v16) / 2])
                      * v12[v16]);
          ++v16;
        }
        while (v6 != v16);
      }
      v8[v13] = v15;
      if (v13 < 1) {
        break;
      }
      long double v17 = (float *)*a1;
      uint64_t v18 = v9;
      do
      {
        float v19 = *(float *)(a2 + 4 * (v18 + v13 * a3));
        if (v13 < v10)
        {
          uint64_t v20 = 0;
          do
          {
            float v19 = v19
                + (float)((float)-(float)(v17[v18 + (v11 + (int)v20) * (v14 + (int)v20) / 2]
                                        * v17[v13 + (v11 + (int)v20) * (v14 + (int)v20) / 2])
                        * v12[v20]);
            ++v20;
          }
          while (v6 != v20);
        }
        v7[v18 + ((uint64_t)(int)((v13 - 1) * v13 + (((int)v13 - 1) * (int)v13 < 0)) >> 1)] = v19 / v8[v13];
      }
      while (v18-- > 0);
      --v14;
      --v9;
      --v11;
      --v12;
      ++v6;
      --v13;
    }
  }
}

uint64_t sub_100B08650(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = (a5 - 1);
  if ((int)a5 >= 1)
  {
    int v6 = 0;
    uint64_t v7 = *a4;
    uint64_t v8 = a4[1];
    uint64_t v9 = a5;
    uint64_t v10 = 4 * a5;
    uint64_t v12 = *a2;
    int v11 = (float *)a2[1];
    uint64_t v13 = a3 + v10 - 4;
    int v14 = a5 - 1;
    uint64_t v15 = v8 + v10;
    a5 = a5;
    while (1)
    {
      uint64_t v16 = a5--;
      float v17 = 0.0;
      uint64_t v18 = v9;
      float v19 = v11;
      uint64_t v20 = (float *)v13;
      do
      {
        float v21 = *v19++;
        float v17 = v17 + (float)((float)(*v20 * *v20) * v21);
        uint64_t v20 = (float *)((char *)v20 + v10);
        --v18;
      }
      while (v18);
      if (v16 < v9)
      {
        uint64_t v22 = 0;
        do
        {
          float v17 = v17
              + (float)((float)(*(float *)(v7 + 4 * (a5 + (v14 + (int)v22) * ((int)v16 + (int)v22) / 2))
                              * *(float *)(v7 + 4 * (a5 + (v14 + (int)v22) * ((int)v16 + (int)v22) / 2)))
                      * *(float *)(v15 + 4 * v22));
          ++v22;
        }
        while (v6 != v22);
      }
      *(float *)(result + 4 * a5) = v17 + *(float *)(v8 + 4 * a5);
      if (v16 < 2) {
        break;
      }
      uint64_t v23 = 0;
      long double v24 = (float *)a2[1];
      uint64_t v25 = (uint64_t)(int)(a5 * (v16 - 2) + ((int)a5 * ((int)v16 - 2) < 0)) >> 1;
      uint64_t v26 = a3;
      do
      {
        uint64_t v27 = 0;
        float v28 = 0.0;
        uint64_t v29 = v9;
        float v30 = v24;
        do
        {
          float v31 = *v30++;
          float v28 = v28 + (float)((float)(*(float *)(v13 + v27) * v31) * *(float *)(v26 + v27));
          v27 += v10;
          --v29;
        }
        while (v29);
        uint64_t v32 = v23 + v25;
        float v33 = v28 + (float)(*(float *)(v8 + 4 * a5) * *(float *)(v7 + 4 * (v23 + v25)));
        if (v16 < v9)
        {
          uint64_t v34 = 0;
          do
          {
            float v33 = v33
                + (float)((float)(*(float *)(v7 + 4 * (a5 + (v14 + (int)v34) * ((int)v16 + (int)v34) / 2))
                                * *(float *)(v15 + 4 * v34))
                        * *(float *)(v7 + 4 * (v23 + (v14 + (int)v34) * ((int)v16 + (int)v34) / 2)));
            ++v34;
          }
          while (v6 != v34);
        }
        uint64_t v35 = 0;
        *(float *)(v12 + 4 * v32) = v33 / *(float *)(result + 4 * a5);
        uint64_t v36 = v9;
        do
        {
          *(float *)(v26 + v35) = *(float *)(v26 + v35) - (float)(*(float *)(v12 + 4 * v32) * *(float *)(v13 + v35));
          v35 += v10;
          --v36;
        }
        while (v36);
        int v37 = v6;
        int v38 = v16;
        if (v16 < v9)
        {
          do
          {
            *(float *)(v7 + 4 * (v23 + (v38 - 1) * v38 / 2)) = *(float *)(v7 + 4 * (v23 + (v38 - 1) * v38 / 2))
                                                             - (float)(*(float *)(v12 + 4 * v32)
                                                                     * *(float *)(v7 + 4 * (a5 + (v38 - 1) * v38 / 2)));
            ++v38;
            --v37;
          }
          while (v37);
        }
        *(float *)(v7 + 4 * v32) = *(float *)(v7 + 4 * v32) - *(float *)(v12 + 4 * v32);
        ++v23;
        v26 += 4;
      }
      while (v23 != v5);
      --v5;
      v13 -= 4;
      --v14;
      v15 -= 4;
      ++v6;
    }
  }
  return result;
}

void sub_100B0889C(uint64_t a1, double *a2, double *a3, double *a4, void *a5)
{
  v10.f64[0] = *a2;
  float v11 = *a2;
  *(float *)(a1 + 184) = v11;
  double v12 = *a3;
  float v13 = *a3;
  *(float *)(a1 + 188) = v13;
  double v14 = *a4;
  float v15 = *a4;
  *(float *)(a1 + 192) = v15;
  if (*(double *)(a1 + 176) < 0.0)
  {
    sub_100A1D5EC(a1 + 16, a2, a3, a4);
    *(void *)(a1 + 176) = *a5;
    float v16 = *a2;
    *(float *)(a1 + 560) = v16;
    float v17 = *a3;
    *(float *)(a1 + 564) = v17;
    float v18 = *a4;
    *(float *)(a1 + 568) = v18;
    *(_DWORD *)(a1 + 600) = 0;
    sub_100B07F84((double *)(a1 + 576), (double *)(a1 + 16));
    *(unsigned char *)(a1 + 8) = 1;
    return;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    v10.f64[1] = v12;
    float32x2_t v19 = vcvt_f32_f64(vmlaq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 560)), (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL)), (float64x2_t)vdupq_n_s64(0x3FECCCCCCCCCCCCDuLL), v10));
    *(float32x2_t *)(a1 + 560) = v19;
    float v20 = *(float *)(a1 + 568) * 0.1 + v14 * 0.9;
    *(float *)(a1 + 568) = v20;
    *(double *)uint64_t buf = v19.f32[0];
    *(double *)double v152 = v19.f32[1];
    double v146 = v20;
    sub_100B0AD90(a1 + 320, (double *)buf);
    sub_100B0AD90(a1 + 400, (double *)v152);
    sub_100B0AD90(a1 + 480, &v146);
  }
  *(void *)(a1 + 176) = *a5;
  if (!*(_DWORD *)(a1 + 148)) {
    return;
  }
  double v21 = *(double *)a5;
  double v22 = *(double *)(a1 + 168);
  if (*(double *)a5 < v22) {
    return;
  }
  if (*(unsigned char *)(a1 + 196))
  {
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022DE690);
    }
    uint64_t v23 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
    {
      double v24 = *a2;
      double v25 = *a3;
      double v26 = *a4;
      double v27 = *(float *)(a1 + 560);
      double v28 = *(float *)(a1 + 564);
      double v29 = *(float *)(a1 + 568);
      uint64_t v30 = *a5;
      *(_DWORD *)uint64_t buf = 134219520;
      *(double *)&uint8_t buf[4] = v24;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v25;
      *(_WORD *)&buf[22] = 2048;
      double v163 = v26;
      __int16 v164 = 2048;
      double v165 = v27;
      __int16 v166 = 2048;
      double v167 = v28;
      __int16 v168 = 2048;
      double v169 = v29;
      __int16 v170 = 2048;
      uint64_t v171 = v30;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "[Accelerometer6] x,%.4f,y,%.4f,z,%.4f,lpf, %.4f, %.4f, %.4f, timestamp,%lf", buf, 0x48u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022DE690);
      }
      double v99 = *a2;
      double v100 = *a3;
      double v101 = *a4;
      double v102 = *(float *)(a1 + 560);
      double v103 = *(float *)(a1 + 564);
      double v104 = *(float *)(a1 + 568);
      uint64_t v105 = *a5;
      *(_DWORD *)double v152 = 134219520;
      *(double *)&v152[4] = v99;
      *(_WORD *)&v152[12] = 2048;
      *(double *)&v152[14] = v100;
      *(_WORD *)&v152[22] = 2048;
      double v153 = v101;
      __int16 v154 = 2048;
      double v155 = v102;
      __int16 v156 = 2048;
      double v157 = v103;
      __int16 v158 = 2048;
      double v159 = v104;
      __int16 v160 = 2048;
      uint64_t v161 = v105;
      uint64_t v106 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v106);
      if (v106 != buf) {
        free(v106);
      }
    }
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022DE690);
    }
    float v31 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
    {
      double v32 = *(float *)(a1 + 156);
      double v33 = *(float *)(a1 + 160);
      double v34 = *(float *)(a1 + 164);
      unint64_t v35 = *(void *)(a1 + 296);
      float v36 = 0.0;
      if (v35)
      {
        float v37 = *(float *)(a1 + 248);
        double v38 = (float)(v37 / (float)v35);
        if (v35 != 1)
        {
          float v39 = (float)((float)v35 * *(float *)(a1 + 252)) - (float)(v37 * v37);
          if (v39 >= 0.0) {
            float v36 = v39 / (float)((v35 - 1) * v35);
          }
        }
      }
      else
      {
        double v38 = 0.0;
      }
      *(_DWORD *)uint64_t buf = 134219008;
      *(double *)&uint8_t buf[4] = v32;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v33;
      *(_WORD *)&buf[22] = 2048;
      double v163 = v34;
      __int16 v164 = 2048;
      double v165 = v38;
      __int16 v166 = 2048;
      double v167 = v36;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "[RotationRate6X] %.3f, %.3f, %.3f, %.3f, %.3f", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022DE690);
      }
      double v107 = *(float *)(a1 + 156);
      double v108 = *(float *)(a1 + 160);
      double v109 = *(float *)(a1 + 164);
      unint64_t v110 = *(void *)(a1 + 296);
      float v111 = 0.0;
      if (v110)
      {
        float v112 = *(float *)(a1 + 248);
        double v113 = (float)(v112 / (float)v110);
        if (v110 != 1)
        {
          float v114 = (float)((float)v110 * *(float *)(a1 + 252)) - (float)(v112 * v112);
          if (v114 >= 0.0) {
            float v111 = v114 / (float)((v110 - 1) * v110);
          }
        }
      }
      else
      {
        double v113 = 0.0;
      }
      *(_DWORD *)double v152 = 134219008;
      *(double *)&v152[4] = v107;
      *(_WORD *)&v152[12] = 2048;
      *(double *)&v152[14] = v108;
      *(_WORD *)&v152[22] = 2048;
      double v153 = v109;
      __int16 v154 = 2048;
      double v155 = v113;
      __int16 v156 = 2048;
      double v157 = v111;
      uint64_t v121 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v121);
      if (v121 != buf) {
        free(v121);
      }
    }
  }
  double v41 = *a3;
  *(double *)&long long v150 = *a2;
  double v40 = *(double *)&v150;
  *((double *)&v150 + 1) = v41;
  double v151 = *a4;
  double v42 = v151;
  LODWORD(v22) = *(_DWORD *)(a1 + 136);
  LODWORD(v21) = *(_DWORD *)(a1 + 140);
  float v43 = *(float *)(a1 + 144);
  float v141 = *(float *)&v21;
  float v142 = *(float *)&v22;
  int v44 = *(_DWORD *)(a1 + 148);
  sub_100B07630(a1, v21, *(int32x2_t *)&v22);
  double v45 = sqrt(v41 * v41 + v40 * v40 + v42 * v42);
  double v46 = fabs(v45 + -1.0) / v45;
  if (v46 > 0.1) {
    return;
  }
  if (!*(unsigned char *)(a1 + 224) || *(_DWORD *)(a1 + 616)) {
    goto LABEL_26;
  }
  float v70 = fabsf(*(float *)(a1 + 156));
  if (v70 > 10.0) {
    goto LABEL_86;
  }
  float v71 = fabsf(*(float *)(a1 + 160));
  if (v71 > 10.0) {
    goto LABEL_86;
  }
  float v72 = fabsf(*(float *)(a1 + 164));
  if (v72 > 10.0) {
    goto LABEL_86;
  }
  unint64_t v73 = *(void *)(a1 + 296);
  if (v73)
  {
    if ((float)(*(float *)(a1 + 248) / (float)v73) > 10.0) {
      goto LABEL_86;
    }
  }
  if (v70 > 3.14159265
    || v71 > 3.14159265
    || v72 > 3.14159265
    || (!v73 ? (float v74 = 0.0) : (float v74 = *(float *)(a1 + 248) / (float)v73), v74 > 3.14159265))
  {
    if (v73 < 2
      || (float v75 = (float)((float)v73 * *(float *)(a1 + 252)) - (float)(*(float *)(a1 + 248) * *(float *)(a1 + 248)),
          v75 < 0.0)
      || (float)(v75 / (float)((v73 - 1) * v73)) < 1.25)
    {
      sub_100B07F84((double *)(a1 + 576), (double *)(a1 + 16));
      if (!*(unsigned char *)(a1 + 196))
      {
        *(_DWORD *)(a1 + 600) = 0;
        goto LABEL_32;
      }
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022DE650);
      }
      __int16 v76 = qword_102419088;
      if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "rotating and going through.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022DE650);
        }
        *(_WORD *)double v152 = 0;
        int v77 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v77);
        if (v77 != buf) {
          free(v77);
        }
      }
LABEL_26:
      int v47 = *(unsigned __int8 *)(a1 + 196);
      *(_DWORD *)(a1 + 600) = 0;
      if (v47)
      {
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022DE650);
        }
        __int16 v48 = qword_102419088;
        if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 134218752;
          *(double *)&uint8_t buf[4] = v40;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(double *)&buf[14] = v41;
          *(_WORD *)&buf[22] = 2048;
          double v163 = v42;
          __int16 v164 = 2048;
          double v165 = v45;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "accM, (%.4f, %.4f, %.4f), mag, %.3f", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419080 != -1) {
            dispatch_once(&qword_102419080, &stru_1022DE650);
          }
          *(_DWORD *)double v152 = 134218752;
          *(double *)&v152[4] = v40;
          *(_WORD *)&v152[12] = 2048;
          *(double *)&v152[14] = v41;
          *(_WORD *)&v152[22] = 2048;
          double v153 = v42;
          __int16 v154 = 2048;
          double v155 = v45;
          uint64_t v120 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v120);
          if (v120 != buf) {
            free(v120);
          }
        }
      }
LABEL_32:
      double v49 = v46
          * (0.015
           / (exp((0.9- sqrtf((float)((float)((float)(v141 / (float)v44) * (float)(v141 / (float)v44))+ (float)((float)(v142 / (float)v44) * (float)(v142 / (float)v44)))+ (float)((float)(v43 / (float)v44) * (float)(v43 / (float)v44))))/ 0.08)+ 1.0))+ 0.00000900000032;
      if (*(unsigned char *)(a1 + 224) && !*(_DWORD *)(a1 + 616)) {
        double v49 = v49 * 0.85;
      }
      *(double *)&long long v150 = v40 / v45;
      *((double *)&v150 + 1) = v41 / v45;
      double v151 = v42 / v45;
      sub_100B0A794(a1, (double *)&v150, v49);
      if (*(unsigned char *)(a1 + 224)) {
        sub_100B07F84((double *)(a1 + 576), (double *)(a1 + 16));
      }
      *(void *)(a1 + 608) = *a5;
      int v50 = *(_DWORD *)(a1 + 616);
      BOOL v51 = __OFSUB__(v50, 1);
      int v52 = v50 - 1;
      if (v52 < 0 == v51)
      {
        *(_DWORD *)(a1 + 616) = v52;
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022DE650);
        }
        uint64_t v53 = qword_102419088;
        if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "Doing some crude updates to catch up.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419080 != -1) {
            dispatch_once(&qword_102419080, &stru_1022DE650);
          }
          *(_WORD *)double v152 = 0;
          uint64_t v119 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v119);
          if (v119 != buf) {
            free(v119);
          }
        }
      }
      if (*(unsigned char *)(a1 + 196))
      {
        if (qword_102419090 != -1) {
          dispatch_once(&qword_102419090, &stru_1022DE690);
        }
        __int16 v54 = qword_102419098;
        if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v55 = *(void *)(a1 + 64);
          uint64_t v56 = *(void *)(a1 + 72);
          double v57 = *(double *)(a1 + 80);
          double v58 = *(double *)(a1 + 88);
          double v59 = *(double *)(a1 + 96);
          double v60 = *(double *)(a1 + 104);
          uint64_t v61 = *a5;
          *(_DWORD *)uint64_t buf = 134219520;
          *(void *)&uint8_t buf[4] = v55;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v56;
          *(_WORD *)&buf[22] = 2048;
          double v163 = v57;
          __int16 v164 = 2048;
          double v165 = v58;
          __int16 v166 = 2048;
          double v167 = v59;
          __int16 v168 = 2048;
          double v169 = v60;
          __int16 v170 = 2048;
          uint64_t v171 = v61;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "[KalmanFilterStates] %f,%f,%f,%f,%f,%f,%f", buf, 0x48u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419090 != -1) {
            dispatch_once(&qword_102419090, &stru_1022DE690);
          }
          uint64_t v62 = *(void *)(a1 + 64);
          uint64_t v63 = *(void *)(a1 + 72);
          double v64 = *(double *)(a1 + 80);
          double v65 = *(double *)(a1 + 88);
          double v66 = *(double *)(a1 + 96);
          double v67 = *(double *)(a1 + 104);
          uint64_t v68 = *a5;
          *(_DWORD *)double v152 = 134219520;
          *(void *)&v152[4] = v62;
          *(_WORD *)&v152[12] = 2048;
          *(void *)&v152[14] = v63;
          *(_WORD *)&v152[22] = 2048;
          double v153 = v64;
          __int16 v154 = 2048;
          double v155 = v65;
          __int16 v156 = 2048;
          double v157 = v66;
          __int16 v158 = 2048;
          double v159 = v67;
          __int16 v160 = 2048;
          uint64_t v161 = v68;
          uint64_t v69 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v69);
LABEL_52:
          if (v69 != buf) {
            free(v69);
          }
          return;
        }
      }
      return;
    }
  }
  sub_100B0A640(a1 + 304, (uint64_t)&v146);
  double v140 = sqrt(v148 * v148 + v147 * v147 + v149 * v149);
  double v78 = *(double *)(a1 + 608);
  if (v78 > 0.0 && *(double *)(a1 + 176) - v78 > 15.0 && v140 < 0.3)
  {
    sub_100B0A720(a1 + 304, (uint64_t)buf);
    if (fabs(sqrt(*(double *)&buf[16] * *(double *)&buf[16] + *(double *)&buf[8] * *(double *)&buf[8] + v163 * v163)+ -1.0) <= 0.1)
    {
      *(_DWORD *)(a1 + 616) = 10;
      if (!*(unsigned char *)(a1 + 196)) {
        goto LABEL_184;
      }
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022DE650);
      }
      float32x2_t v97 = qword_102419088;
      if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEBUG, "it's been too long. go through.", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_184;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419080 == -1) {
        goto LABEL_119;
      }
      goto LABEL_216;
    }
  }
  if (*(_DWORD *)(a1 + 392) <= (int)((double)*(unint64_t *)(a1 + 312) * 0.5))
  {
LABEL_86:
    sub_100B07F84((double *)(a1 + 576), (double *)(a1 + 16));
    return;
  }
  uint64_t v79 = *(void *)(a1 + 296);
  if (v79) {
    float v80 = *(float *)(*(void *)(*(void *)(a1 + 264)
  }
                               + (((unint64_t)(v79 + *(void *)(a1 + 288) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * ((v79 + *(void *)(a1 + 288) - 1) & 0x3FF));
  else {
    float v80 = 0.0;
  }
  if (v80 > 0.2)
  {
    sub_100B07F84((double *)(a1 + 576), (double *)(a1 + 16));
    if (*(unsigned char *)(a1 + 196))
    {
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022DE650);
      }
      __int16 v81 = qword_102419088;
      if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v82 = *(void *)(a1 + 576);
        uint64_t v83 = *(void *)(a1 + 584);
        double v84 = *(double *)(a1 + 592);
        *(_DWORD *)uint64_t buf = 134218496;
        *(void *)&uint8_t buf[4] = v82;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v83;
        *(_WORD *)&buf[22] = 2048;
        double v163 = v84;
        _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEBUG, "grabing gravity, %.4f, %.4f, %.4f", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022DE650);
        }
        uint64_t v129 = *(void *)(a1 + 576);
        uint64_t v130 = *(void *)(a1 + 584);
        double v131 = *(double *)(a1 + 592);
        *(_DWORD *)double v152 = 134218496;
        *(void *)&v152[4] = v129;
        *(_WORD *)&v152[12] = 2048;
        *(void *)&v152[14] = v130;
        *(_WORD *)&v152[22] = 2048;
        double v153 = v131;
        int v132 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v132);
        if (v132 != buf) {
          free(v132);
        }
      }
    }
  }
  if (v140 <= *(double *)(a1 + 216) * 0.75) {
    goto LABEL_184;
  }
  double v85 = *(double *)(a1 + 576);
  double v86 = *(double *)(a1 + 584);
  double v87 = *(double *)(a1 + 592);
  double v88 = fabs(v148 * v86 + v147 * v85 + v149 * v87);
  double v139 = v140 - v88;
  double v89 = *(double *)(a1 + 336);
  double v90 = *(double *)(a1 + 416);
  double v91 = *(double *)(a1 + 496);
  double v92 = v86 * v90 + v89 * v85 + v91 * v87;
  double v143 = v89 - v92 * v85;
  double v144 = v90 - v92 * v86;
  double v145 = v91 - v92 * v87;
  double v137 = v92;
  double v138 = fabs(v145) + fabs(v143) + fabs(v144);
  if (*(unsigned char *)(a1 + 196))
  {
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022DE650);
    }
    __int16 v93 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134219264;
      *(double *)&uint8_t buf[4] = v147;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v148;
      *(_WORD *)&buf[22] = 2048;
      double v163 = v149;
      __int16 v164 = 2048;
      double v165 = v140;
      __int16 v166 = 2048;
      double v167 = v88;
      __int16 v168 = 2048;
      double v169 = v140 - v88;
      _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEBUG, "std, %.3f, %.3f, %.3f, mag, %.3f, dot, %.3f, leftover, %.3f", buf, 0x3Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022DE650);
      }
      *(_DWORD *)double v152 = 134219264;
      *(double *)&v152[4] = v147;
      *(_WORD *)&v152[12] = 2048;
      *(double *)&v152[14] = v148;
      *(_WORD *)&v152[22] = 2048;
      double v153 = v149;
      __int16 v154 = 2048;
      double v155 = v140;
      __int16 v156 = 2048;
      double v157 = v88;
      __int16 v158 = 2048;
      double v159 = v140 - v88;
      int v133 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v133);
      if (v133 != buf) {
        free(v133);
      }
    }
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022DE650);
    }
    uint64_t v94 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134219008;
      *(double *)&uint8_t buf[4] = v143;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v144;
      *(_WORD *)&buf[22] = 2048;
      double v163 = v145;
      __int16 v164 = 2048;
      double v165 = v137;
      __int16 v166 = 2048;
      double v167 = v138;
      _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEBUG, "sum, %.3f, %.3f, %.3f, dot, %.3f, leftover, %.3f", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022DE650);
      }
      *(_DWORD *)double v152 = 134219008;
      *(double *)&v152[4] = v143;
      *(_WORD *)&v152[12] = 2048;
      *(double *)&v152[14] = v144;
      *(_WORD *)&v152[22] = 2048;
      double v153 = v145;
      __int16 v154 = 2048;
      double v155 = v137;
      __int16 v156 = 2048;
      double v157 = v138;
      float v134 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v134);
      if (v134 != buf) {
        free(v134);
      }
    }
  }
  if (v139 > *(double *)(a1 + 216)) {
    goto LABEL_135;
  }
  unint64_t v95 = *(void *)(a1 + 296);
  if (v95) {
    float v96 = *(float *)(a1 + 248) / (float)v95;
  }
  else {
    float v96 = 0.0;
  }
  BOOL v115 = v96 <= 1.57079633;
  double v116 = 0.0;
  if (!v115) {
    double v116 = 1.0;
  }
  if (v138 > (v116 * 0.5 + 1.0) * 6.0)
  {
LABEL_135:
    *(_DWORD *)(a1 + 600) = 0;
    return;
  }
  if (v139 >= 0.01 || v138 >= 0.6)
  {
    int v122 = *(_DWORD *)(a1 + 600) + 1;
    *(_DWORD *)(a1 + 600) = v122;
    if (!v95) {
      goto LABEL_174;
    }
    int v123 = (int *)(a1 + 600);
    float v117 = *(float *)(a1 + 248) / (float)v95;
  }
  else
  {
    if (!v95)
    {
      int v122 = *(_DWORD *)(a1 + 600) + 1;
      *(_DWORD *)(a1 + 600) = v122;
      goto LABEL_174;
    }
    float v117 = *(float *)(a1 + 248) / (float)v95;
    if (v117 > 0.5)
    {
      if (!*(unsigned char *)(a1 + 196)) {
        goto LABEL_184;
      }
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022DE650);
      }
      float v118 = qword_102419088;
      if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEBUG, "===========Skip ahead.", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_184;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419080 == -1) {
        goto LABEL_119;
      }
LABEL_216:
      dispatch_once(&qword_102419080, &stru_1022DE650);
LABEL_119:
      *(_WORD *)double v152 = 0;
      float v98 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v98);
      if (v98 != buf) {
        free(v98);
      }
      goto LABEL_184;
    }
    int v123 = (int *)(a1 + 600);
    int v122 = *(_DWORD *)(a1 + 600) + 1;
    *(_DWORD *)(a1 + 600) = v122;
  }
  if (v117 > 1.0
    && *(float *)(*(void *)(*(void *)(a1 + 264) + (((v95 + *(void *)(a1 + 288) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                + 4 * ((v95 + *(void *)(a1 + 288) - 1) & 0x3FF)) < 0.2)
  {
    sub_100B0A720(a1 + 304, (uint64_t)buf);
    double v124 = sqrt(*(double *)&buf[16] * *(double *)&buf[16] + *(double *)&buf[8] * *(double *)&buf[8] + v163 * v163);
    if (fabs(v124 + -1.0) / v124 >= 0.025)
    {
      int v122 = *v123;
    }
    else
    {
      if (*(unsigned char *)(a1 + 196))
      {
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022DE650);
        }
        int v125 = qword_102419088;
        if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_DEBUG, "Skip ahead------.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419080 != -1) {
            dispatch_once(&qword_102419080, &stru_1022DE650);
          }
          *(_WORD *)double v152 = 0;
          __int16 v136 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v136);
          if (v136 != buf) {
            free(v136);
          }
        }
      }
      int v122 = *v123 + 2;
      *int v123 = v122;
    }
  }
LABEL_174:
  if (v122 >= *(_DWORD *)(a1 + 208))
  {
LABEL_184:
    if (*(unsigned char *)(a1 + 224))
    {
      if (v140 > 0.2)
      {
        unint64_t v127 = *(void *)(a1 + 296);
        if (!v127
          || *(float *)(*(void *)(*(void *)(a1 + 264)
                                  + (((v127 + *(void *)(a1 + 288) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                      + 4 * ((v127 + *(void *)(a1 + 288) - 1) & 0x3FF)) < 0.75
          && (float)(*(float *)(a1 + 248) / (float)v127) < 1.0)
        {
          sub_100B0A720(a1 + 304, (uint64_t)v152);
          double v41 = *(double *)&v152[16];
          double v40 = *(double *)&v152[8];
          double v42 = v153;
          long long v150 = *(_OWORD *)&v152[8];
          double v151 = v153;
          if (*(unsigned char *)(a1 + 196))
          {
            if (qword_102419080 != -1) {
              dispatch_once(&qword_102419080, &stru_1022DE650);
            }
            uint64_t v128 = qword_102419088;
            if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_DEBUG, "using mean accel", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419080 != -1) {
                dispatch_once(&qword_102419080, &stru_1022DE650);
              }
              LOWORD(v146) = 0;
              int v135 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v135);
              if (v135 != buf) {
                free(v135);
              }
            }
          }
          double v45 = sqrt(v41 * v41 + v40 * v40 + v42 * v42);
          double v46 = fabs(v45 + -1.0) / v45;
        }
      }
    }
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 196))
  {
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022DE650);
    }
    __int16 v126 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEBUG, "Taking another look.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022DE650);
      }
      *(_WORD *)double v152 = 0;
      uint64_t v69 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v69);
      goto LABEL_52;
    }
  }
}

double sub_100B0A640@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = *(void *)(a1 + 88);
  double v3 = 0.0;
  double v4 = 0.0;
  if (v2 >= 2)
  {
    double v5 = (double)v2 * *(double *)(a1 + 40) - *(double *)(a1 + 32) * *(double *)(a1 + 32);
    double v4 = 0.0;
    if (v5 >= 0.0) {
      double v4 = v5 / (double)((v2 - 1) * v2);
    }
  }
  unint64_t v6 = *(void *)(a1 + 168);
  if (v6 >= 2)
  {
    double v7 = (double)v6 * *(double *)(a1 + 120) - *(double *)(a1 + 112) * *(double *)(a1 + 112);
    if (v7 >= 0.0) {
      double v3 = v7 / (double)((v6 - 1) * v6);
    }
  }
  unint64_t v8 = *(void *)(a1 + 248);
  double v9 = 0.0;
  if (v8 >= 2)
  {
    double v10 = (double)v8 * *(double *)(a1 + 200) - *(double *)(a1 + 192) * *(double *)(a1 + 192);
    if (v10 >= 0.0) {
      double v9 = v10 / (double)((v8 - 1) * v8);
    }
  }
  *(void *)a2 = off_1022DE720;
  *(double *)(a2 + 8) = sqrt(v4);
  *(double *)(a2 + 16) = sqrt(v3);
  double result = sqrt(v9);
  *(double *)(a2 + 24) = result;
  return result;
}

uint64_t sub_100B0A720@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = *(void *)(result + 88);
  double v3 = 0.0;
  double v4 = 0.0;
  if (v2) {
    double v4 = *(double *)(result + 32) / (double)v2;
  }
  unint64_t v5 = *(void *)(result + 168);
  if (v5) {
    double v3 = *(double *)(result + 112) / (double)v5;
  }
  unint64_t v6 = *(void *)(result + 248);
  if (v6) {
    double v7 = *(double *)(result + 192) / (double)v6;
  }
  else {
    double v7 = 0.0;
  }
  *(void *)a2 = off_1022DE720;
  *(double *)(a2 + 8) = v4;
  *(double *)(a2 + 16) = v3;
  *(double *)(a2 + 24) = v7;
  return result;
}

void sub_100B0A794(uint64_t a1, double *a2, double a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  double v8 = *(double *)(a1 + 40);
  double v9 = *(double *)(a1 + 32) + *(double *)(a1 + 32);
  double v10 = *(double *)(a1 + 16);
  double v11 = *(double *)(a1 + 24);
  double v12 = v8 * (v11 + v11) - v10 * v9;
  double v13 = -(v8 * (v10 + v10)) - v11 * v9;
  double v14 = v10 * (v10 + v10) + -1.0 + v11 * (v11 + v11);
  *(float *)&double v9 = v13;
  *(float *)&double v8 = v14;
  v29[0] = 0;
  v29[1] = LODWORD(v8);
  *(float *)&v29[2] = -*(float *)&v9;
  *(float *)&double v10 = v12;
  *(float *)&v29[3] = -*(float *)&v8;
  void v29[4] = 0;
  v29[5] = LODWORD(v10);
  void v29[6] = LODWORD(v9);
  *(float *)&v29[7] = -*(float *)&v10;
  v29[8] = 0;
  do
  {
    for (uint64_t i = 0; i != 9; i += 3)
      *(_DWORD *)&v27[v6 * 4 + i * 4] = v29[v6 + i];
    ++v7;
    ++v6;
  }
  while (v7 != 3);
  bzero(&v28, 0x24uLL);
  float v16 = a3;
  *(float *)double v26 = v16;
  *(float *)&v26[1] = v16;
  *(float *)&v26[2] = v16;
  float v17 = *a2 - v12;
  float v18 = a2[1] - v13;
  *(float *)double v25 = v17;
  *(float *)&v25[1] = v18;
  float v19 = a2[2] - v14;
  *(float *)&v25[2] = v19;
  sub_100B079B8(&v22, (uint64_t *)(a1 + 112), (uint64_t)v27, (uint64_t)v26, (uint64_t)v25, 6, 3, (uint64_t)&v21);
  double v20 = v13 * v23 + v22 * v12 + v24 * v14;
  double v22 = v22 - v20 * v12;
  double v23 = v23 - v20 * v13;
  double v24 = v24 - v20 * v14;
  sub_100B0A948(a1, &v22);
}

double sub_100B0A948(uint64_t a1, double *a2)
{
  sub_100B07EA4(v9, a2);
  sub_100A1D6D4((double *)v8, v9, (double *)(a1 + 16));
  uint64_t v4 = 0;
  long long v5 = v8[1];
  *(_OWORD *)(a1 + 16) = v8[0];
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = a1 + 88;
  do
  {
    double result = a2[v4 + 3] + *(double *)(v6 + v4 * 8);
    *(double *)(v6 + v4 * 8) = result;
    ++v4;
  }
  while (v4 != 3);
  return result;
}

uint64_t sub_100B0A9BC(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (float *)(a3 - 4 * a4);
    do
    {
      float v7 = *(float *)(a3 + 4 * v5 * a4);
      *(float *)(result + 4 * v5) = v7;
      if (v5)
      {
        double v8 = v6;
        uint64_t v9 = v5;
        do
        {
          float v7 = v7 + (float)(*v8 * *(float *)(a2 - 4 + 4 * (((int)v5 - 1) * (int)v5 / 2) + 4 * v9));
          *(float *)(result + 4 * v5) = v7;
          v8 -= a4;
        }
        while (v9-- > 1);
      }
      ++v5;
      v6 += a4;
    }
    while (v5 != a5);
  }
  return result;
}

double sub_100B0AA40(uint64_t a1)
{
  return *(double *)(a1 + 16);
}

double sub_100B0AA48(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

double sub_100B0AA50(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

uint64_t sub_100B0AA58(_DWORD *a1, _DWORD *a2)
{
  *a2 = a1[39];
  a2[1] = a1[40];
  a2[2] = a1[41];
  return 1;
}

BOOL sub_100B0AA78(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 176);
  if (v2 <= 0.0)
  {
    *(void *)a2 = 0;
    float v10 = 0.0;
  }
  else
  {
    double v3 = *(double *)(a1 + 40);
    double v4 = *(double *)(a1 + 32) + *(double *)(a1 + 32);
    double v5 = *(double *)(a1 + 16);
    double v6 = *(double *)(a1 + 24);
    double v7 = v3 * (v6 + v6) - v5 * v4;
    double v8 = -(v3 * (v5 + v5)) - v6 * v4;
    double v9 = v5 * (v5 + v5) + -1.0 + v6 * (v6 + v6);
    *(float *)&double v5 = *(float *)(a1 + 184) - v7;
    *(_DWORD *)a2 = LODWORD(v5);
    *(float *)&double v8 = *(float *)(a1 + 188) - v8;
    *(_DWORD *)(a2 + 4) = LODWORD(v8);
    float v10 = *(float *)(a1 + 192) - v9;
  }
  BOOL result = v2 > 0.0;
  *(float *)(a2 + 8) = v10;
  return result;
}

uint64_t sub_100B0AB08(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9);
}

float sub_100B0AB10(uint64_t a1)
{
  return *(double *)(a1 + 64);
}

void sub_100B0AB1C(id a1)
{
  qword_102419088 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_100B0AB4C(id a1)
{
  qword_102419098 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Sensors");
}

void *sub_100B0AB7C(void *a1)
{
  *a1 = off_1022DE6F0;
  sub_10041F48C(a1 + 4);
  return a1;
}

void sub_100B0ABC0(void *a1)
{
  sub_100B0AC5C(a1);

  operator delete();
}

void sub_100B0ABF8(void *a1)
{
  *a1 = off_1022DE6F0;
  sub_10041F48C(a1 + 4);

  operator delete();
}

void *sub_100B0AC5C(void *a1)
{
  *a1 = off_1022DE6C0;
  a1[22] = off_1022DE6F0;
  sub_10041F48C(a1 + 26);
  a1[12] = off_1022DE6F0;
  sub_10041F48C(a1 + 16);
  a1[2] = off_1022DE6F0;
  sub_10041F48C(a1 + 6);
  return a1;
}

void sub_100B0AD14(void *a1)
{
  double v2 = (void **)a1[5];
  uint64_t v3 = a1[6];
  a1[9] = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[6];
      double v2 = (void **)(a1[5] + 8);
      a1[5] = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v4 >> 3 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    a1[8] = v6;
  }
  a1[2] = 0;
  a1[3] = 0;
}

double sub_100B0AD90(uint64_t a1, double *a2)
{
  uint64_t v4 = a1 + 32;
  sub_10017CCF0((void *)(a1 + 32), a2);
  unint64_t v5 = *(void *)(a1 + 72);
  if (v5 > *(void *)(a1 + 8))
  {
    unint64_t v6 = *(void *)(a1 + 64);
    double v7 = *(double *)(*(void *)(*(void *)(a1 + 40) + ((v6 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v6 & 0x1FF));
    double v8 = *(double *)(a1 + 16) - v7;
    double v9 = *(double *)(a1 + 24) - v7 * v7;
    *(double *)(a1 + 16) = v8;
    *(double *)(a1 + 24) = v9;
    *(void *)(a1 + 64) = v6 + 1;
    *(void *)(a1 + 72) = v5 - 1;
    sub_10007F07C(v4, 1);
  }
  double v10 = *(double *)(a1 + 24);
  *(double *)(a1 + 16) = *a2 + *(double *)(a1 + 16);
  double result = v10 + *a2 * *a2;
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t sub_100B0AE38()
{
  uint64_t result = sub_10074157C();
  if (result) {
    operator new();
  }
  return result;
}

void sub_100B0AE84()
{
}

uint64_t sub_100B0AEA8()
{
  return sub_10074157C() & 1;
}

uint64_t sub_100B0AEC4()
{
  if (qword_102480148 != -1) {
    dispatch_once(&qword_102480148, &stru_1022DE740);
  }
  return qword_10248A8B0;
}

void sub_100B0AF0C(uint64_t a1)
{
}

void sub_100B0AFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  double v12 = (std::__shared_weak_count *)v10[11];
  if (v12) {
    sub_1000DB0A0(v12);
  }
  sub_1009D1DE4(v10);
  _Unwind_Resume(a1);
}

void *sub_100B0AFFC(void *a1)
{
  *a1 = off_1022DE770;
  uint64_t v5 = 0;
  sub_100B0B080((uint64_t)a1, (double *)&v5);
  double v2 = (std::__shared_weak_count *)a1[11];
  a1[10] = 0;
  a1[11] = 0;
  if (v2)
  {
    sub_1000DB0A0(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[11];
    if (v3) {
      sub_1000DB0A0(v3);
    }
  }

  return sub_1009D1DE4(a1);
}

uint64_t sub_100B0B080(uint64_t a1, double *a2)
{
  char v4 = sub_10074157C();
  if (v4)
  {
    if (!*(void *)(a1 + 80))
    {
      uint64_t v5 = (uint64_t *)sub_100A26784();
      uint64_t v20 = 0xA0000FF00;
      char v21 = 0;
      sub_101A46D60(v5, (uint64_t)&v20, (uint64_t *)buf);
      long long v6 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      double v7 = *(std::__shared_weak_count **)(a1 + 88);
      *(_OWORD *)(a1 + 80) = v6;
      if (v7)
      {
        sub_1000DB0A0(v7);
        if (*(void *)&buf[8]) {
          sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
        }
      }
      id v8 = [&off_102397540 mutableCopy];
      unsigned int v19 = 0;
      uint64_t v9 = sub_1000D3E78();
      sub_10006B564(v9, buf);
      int v10 = sub_1004D0870(*(uint64_t *)buf, "MagLocationID", &v19);
      if (v19) {
        int v11 = 1;
      }
      else {
        int v11 = v10;
      }
      if (*(void *)&buf[8]) {
        sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
      }
      if (v11)
      {
        [v8 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v19) forKey:@"LocationID"];
        if (qword_1024190C0 != -1) {
          dispatch_once(&qword_1024190C0, &stru_1022DE7B8);
        }
        double v12 = qword_1024190C8;
        if (os_log_type_enabled((os_log_t)qword_1024190C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v19;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Setting Mag matching properties with IMULocationID %d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190C0 != -1) {
            dispatch_once(&qword_1024190C0, &stru_1022DE7B8);
          }
          int v22 = 67109120;
          LODWORD(v23) = v19;
          float v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMagnetometer::setMagnetometerInterval(const CFTimeInterval &)", "%s\n", v18);
          if (v18 != (char *)buf) {
            free(v18);
          }
        }
      }
      sub_100A29EB0(*(void *)(a1 + 80), v8);
      sub_100A2932C(*(uint64_t **)(a1 + 80), (uint64_t)sub_100B0B5A0, a1);
    }
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022DE7D8);
    }
    double v13 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_INFO))
    {
      double v14 = *a2;
      *(_DWORD *)uint64_t buf = 134349056;
      *(double *)&uint8_t buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Setting magnetometer update and batch interval to %{public}f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022DE7D8);
      }
      uint64_t v16 = *(void *)a2;
      int v22 = 134349056;
      uint64_t v23 = v16;
      float v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMagnetometer::setMagnetometerInterval(const CFTimeInterval &)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    sub_100A29D64(*(void *)(a1 + 80), *a2);
    sub_100A29E04(*(void *)(a1 + 80), *a2);
  }
  return v4 & 1;
}

void sub_100B0B4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

void sub_100B0B4E0(void *a1)
{
  sub_100B0AFFC(a1);

  operator delete();
}

BOOL sub_100B0B518(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    id v3 = [objc_alloc((Class)NSNumber) initWithBool:1];
    (*(void (**)(void, const __CFString *, id))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), @"IOHIDCompasssResetDAC", v3);
  }
  return v1 != 0;
}

uint64_t sub_100B0B5A0(uint64_t a1)
{
  uint64_t result = IOHIDEventGetType();
  if (result == 21)
  {
    IOHIDEventGetFloatValue();
    *(float *)&double v3 = v3;
    v8.i32[0] = LODWORD(v3);
    IOHIDEventGetFloatValue();
    *(float *)&double v4 = v4;
    v8.i32[1] = LODWORD(v4);
    IOHIDEventGetFloatValue();
    *(float *)&double v5 = v5;
    int v9 = LODWORD(v5);
    unint64_t TimeStamp = IOHIDEventGetTimeStamp();
    double v7 = sub_1000D3D90(TimeStamp);
    return sub_100B0BB4C(a1, &v8, &v7);
  }
  return result;
}

double sub_100B0B64C(uint64_t a1, int a2, double *a3)
{
  if (a2)
  {
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022DE7D8);
    }
    double v4 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v13 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unrecognized magnetometer notification %{public}d", buf, 8u);
    }
    double v5 = 0.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022DE7D8);
      }
      long long v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CFTimeInterval CLMagnetometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    sub_100B0B080(a1, a3);
    if (*a3 > 0.0 && !*(void *)(a1 + 40))
    {
      *(void *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      operator new();
    }
    if (*a3 <= 0.0 && *(void *)(a1 + 40))
    {
      uint64_t v9 = sub_100EC748C();
      sub_1009D26C4(v9, 0, *(void *)(a1 + 40));
      uint64_t v10 = *(void *)(a1 + 40);
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      *(void *)(a1 + 40) = 0;
    }
    return *a3;
  }
  return v5;
}

void sub_100B0B910()
{
}

void sub_100B0B93C(float *a1, uint64_t a2)
{
  if (qword_102419090 != -1) {
    dispatch_once(&qword_102419090, &stru_1022DE7D8);
  }
  double v4 = qword_102419098;
  if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_INFO))
  {
    double v5 = *a1;
    double v6 = a1[1];
    double v7 = a1[2];
    *(_DWORD *)uint64_t buf = 134218496;
    double v11 = v5;
    __int16 v12 = 2048;
    double v13 = v6;
    __int16 v14 = 2048;
    double v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Received magnetometer offset (%f, %f, %f)", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022DE7D8);
    }
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLMagnetometer::onOffset(const CLMotionTypeMagneticField *, void *)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  uint64_t v8 = *(void *)a1;
  *(float *)(a2 + 56) = a1[2];
  *(void *)(a2 + 48) = v8;
}

uint64_t sub_100B0BB4C(uint64_t a1, float32x2_t *a2, double *a3)
{
  double v6 = *a3;
  if (*a3 > *(double *)(a1 + 64) + 1.0)
  {
    double v7 = (void *)(*(uint64_t (**)(void, const __CFString *, double))(**(void **)(a1 + 80) + 24))(*(void *)(a1 + 80), @"AppleVoltageDictionary", v6);
    [v7[@"COMPASS_TEMP"] floatValue];
    *(float *)(a1 + 72) = v8 / 100.0;
    *(double *)(a1 + 64) = *a3;

    double v6 = *a3;
  }
  float32x2_t v9 = vsub_f32(*a2, *(float32x2_t *)(a1 + 48));
  *(double *)float v31 = v6;
  v31[1] = v9;
  v9.i32[0] = *(_DWORD *)(a1 + 72);
  float v32 = a2[1].f32[0] - *(float *)(a1 + 56);
  __int32 v33 = v9.i32[0];
  if (qword_102419090 != -1) {
    dispatch_once(&qword_102419090, &stru_1022DE7D8);
  }
  uint64_t v10 = qword_102419098;
  if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
  {
    double v11 = a2->f32[0];
    double v12 = a2->f32[1];
    double v13 = a2[1].f32[0];
    double v14 = *a3;
    *(_DWORD *)uint64_t buf = 136316162;
    unint64_t v35 = "Magnetometer";
    __int16 v36 = 2048;
    double v37 = v11;
    __int16 v38 = 2048;
    double v39 = v12;
    __int16 v40 = 2048;
    double v41 = v13;
    __int16 v42 = 2048;
    double v43 = v14;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Type,%s,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022DE7D8);
    }
    double v26 = a2->f32[0];
    double v27 = a2->f32[1];
    double v28 = a2[1].f32[0];
    double v29 = *a3;
    *(_DWORD *)int v47 = 136316162;
    *(void *)&v47[4] = "Magnetometer";
    *(_WORD *)&v47[12] = 2048;
    *(double *)&v47[14] = v26;
    __int16 v48 = 2048;
    double v49 = v27;
    *(_WORD *)int v50 = 2048;
    *(double *)&_OWORD v50[2] = v28;
    *(_WORD *)&v50[10] = 2048;
    double v51 = v29;
    uint64_t v30 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMagnetometer::onMagnetometerData(const CLMotionTypeMagneticField &, const CLMotionTypeTimestamp &)", "%s\n", v30);
    if (v30 != (char *)buf) {
      free(v30);
    }
  }
  if (*(unsigned char *)(a1 + 32))
  {
    *(void *)int v47 = off_1022E68D0;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    double v16 = *a3;
    *(CFAbsoluteTime *)&v47[8] = Current;
    float32x2_t v17 = *a2;
    double v49 = v16;
    *(float32x2_t *)int v50 = v17;
    *(_DWORD *)&v50[8] = a2[1].i32[0];
    uint64_t v18 = sub_101282D9C();
    sub_10128431C(v18, (uint64_t)v47);
    sub_10170140C(buf);
    sub_101726DC8((uint64_t)buf);
    v46 |= 1u;
    uint64_t v44 = *(void *)&v47[8];
    uint64_t v19 = v45;
    double v20 = *a3;
    *(unsigned char *)(v45 + 36) |= 1u;
    *(double *)(v19 + 8) = v20;
    uint64_t v21 = v45;
    LODWORD(v20) = a2->i32[0];
    *(unsigned char *)(v45 + 36) |= 8u;
    *(_DWORD *)(v21 + 24) = LODWORD(v20);
    uint64_t v22 = v45;
    LODWORD(v20) = a2->i32[1];
    *(unsigned char *)(v45 + 36) |= 0x10u;
    *(_DWORD *)(v22 + 28) = LODWORD(v20);
    uint64_t v23 = v45;
    LODWORD(v20) = a2[1].i32[0];
    *(unsigned char *)(v45 + 36) |= 0x20u;
    *(_DWORD *)(v23 + 32) = LODWORD(v20);
    uint64_t v24 = v45;
    LODWORD(v20) = *(_DWORD *)(a1 + 72);
    *(unsigned char *)(v45 + 36) |= 4u;
    *(_DWORD *)(v24 + 20) = LODWORD(v20);
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022DE7F8);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)buf);
    }
    sub_101706914((PB::Base *)buf);
  }
  return sub_1000E7BA0(a1, 0, (uint64_t)v31, 24);
}

void sub_100B0BF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100B0BFA4(id a1)
{
  qword_1024190C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accel");
}

void sub_100B0BFD4(id a1)
{
  qword_102419098 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Sensors");
}

void sub_100B0C008(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  float v4 = *(float *)(a1 + 1368);
  float v5 = *(float *)(a1 + 1372);
  float v6 = *(float *)(a1 + 1376);
  float v7 = *(float *)(a1 + 1380);
  float v8 = 0.0;
  if (sub_1001860C8(a1) && *(double *)(a1 + 600) < *(double *)a1)
  {
    float v9 = *(double *)(a1 + 560);
    double v10 = v9;
    double v11 = v6;
    double v12 = v7;
    float v13 = (v12 - v9) / (v12 - v11);
    float v14 = sub_101141BD8(v13, v5);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022DE8B8);
    }
    float v8 = v4 * v14;
    double v15 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134219008;
      double v18 = v10;
      __int16 v19 = 2048;
      double v20 = v12;
      __int16 v21 = 2048;
      double v22 = v11;
      __int16 v23 = 2048;
      double v24 = v4;
      __int16 v25 = 2048;
      double v26 = v8;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "High Intensity, CR DT Regression, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, METS, %f", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022DE8B8);
      }
      double v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieHighIntensityModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
  }
  *(float *)a2 = v8;
  *(void *)(a2 + 4) = 0;
  *(void *)(a2 + 12) = 0;
  *(void *)(a2 + 20) = 0x340B33333;
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a2 + 32) = 3;
  if (v8 > 5.6)
  {
    *(void *)(a2 + 4) = 0;
    *(void *)(a2 + 12) = 0;
    *(float *)(a2 + 20) = v8;
    *(_DWORD *)(a2 + 24) = 1;
    *(_DWORD *)(a2 + 32) = 3;
  }
}

void sub_100B0C2E4(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100B0C314(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 166080;
  uint64_t v4 = sub_10096A580(a1, a2);
  *(void *)uint64_t v4 = off_1022DE8E8;
  float v5 = (void *)(v4 + 166136);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_DWORD *)(v3 + 48) = 0;
  *(_OWORD *)(v4 + 166136) = 0u;
  *(_DWORD *)(v4 + 166152) = 0;
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_1022DE920);
  }
  float v6 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLSwimPoolSessionSimulator Instantiated", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1022DE920);
    }
    float v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLSwimPoolSessionSimulator::CLSwimPoolSessionSimulator(CLSwimDataStore *, float)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  memcpy(buf, &unk_101D738A0, sizeof(buf));
  sub_1002A9098((char *)v3, (char *)buf, (uint64_t)&v10, 0x1DuLL);
  *(_DWORD *)(v3 + 48) = 0;
  *float v5 = 0;
  v5[1] = 0;
  *(void *)(v3 + 32) = *(void *)(v3 + 24);
  return a1;
}

void sub_100B0C538(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    *(void *)(v2 + 32) = v4;
    operator delete(v4);
  }
  float v5 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v5;
    operator delete(v5);
  }
  void *v1 = off_1022D4F38;
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B0C58C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_10041DA28(*(void *)(a1 + 8))) {
    return 0;
  }
  float v6 = (char **)(a1 + 166104);
  uint64_t v7 = *(void *)(a1 + 166080);
  if (*(void *)(a1 + 166112) - *(void *)(a1 + 166104) == *(void *)(a1 + 166088) - v7) {
    goto LABEL_3;
  }
  uint64_t v9 = *(void *)(a1 + 166144);
  uint64_t v10 = (long long *)(v7 + 24 * v9);
  int v11 = *(_DWORD *)(a1 + 166152);
  switch(v11)
  {
    case 2:
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8)))
      {
        if (sub_10096B988((uint64_t *)a1, *(double *)(a2 + 56), *(double *)(a2 + 56))) {
          uint64_t v8 = 2;
        }
        else {
          uint64_t v8 = 0;
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      unint64_t v15 = *(void *)(a1 + 166120);
      *(_DWORD *)(a1 + 166128) = 0;
      ++*(void *)(a1 + 166144);
      unint64_t v16 = *(void *)(a1 + 166112);
      if (v16 >= v15)
      {
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (void)*v6) >> 3);
        unint64_t v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1001D7FD4();
        }
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (void)*v6) >> 3);
        if (2 * v21 > v20) {
          unint64_t v20 = 2 * v21;
        }
        if (v21 >= 0x555555555555555) {
          unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22) {
          __int16 v23 = (char *)sub_1000DA5D8(a1 + 166120, v22);
        }
        else {
          __int16 v23 = 0;
        }
        double v24 = &v23[24 * v19];
        __int16 v25 = &v23[24 * v22];
        long long v26 = *v10;
        *((void *)v24 + 2) = *((void *)v10 + 2);
        *(_OWORD *)double v24 = v26;
        double v18 = v24 + 24;
        double v28 = *(char **)(a1 + 166104);
        double v27 = *(char **)(a1 + 166112);
        if (v27 != v28)
        {
          do
          {
            long long v29 = *(_OWORD *)(v27 - 24);
            *((void *)v24 - 1) = *((void *)v27 - 1);
            *(_OWORD *)(v24 - 24) = v29;
            v24 -= 24;
            v27 -= 24;
          }
          while (v27 != v28);
          double v27 = *v6;
        }
        *(void *)(a1 + 166104) = v24;
        *(void *)(a1 + 166112) = v18;
        *(void *)(a1 + 166120) = v25;
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        long long v17 = *v10;
        *(void *)(v16 + 16) = *((void *)v10 + 2);
        *(_OWORD *)unint64_t v16 = v17;
        double v18 = (char *)(v16 + 24);
      }
      int v14 = 0;
      *(void *)(a1 + 166112) = v18;
      goto LABEL_38;
    case 1:
      uint64_t v8 = 0;
      if (*(double *)(a2 + 56) - *(double *)(a1 + 166136) < 20.0) {
        goto LABEL_39;
      }
      int v14 = 2;
LABEL_38:
      *(_DWORD *)(a1 + 166152) = v14;
      goto LABEL_39;
    case 0:
      int v12 = *((_DWORD *)v10 + 1);
      double v13 = *(double *)(a2 + 56);
      if (vabdd_f64(v13, *(double *)(a1 + 166136)) > *(double *)(v7 + 24 * v9 + 8) / (double)v12)
      {
        *(double *)(a1 + 166136) = v13;
        ++*(_DWORD *)(a1 + 166128);
        sub_10041C4AC(*(void *)(a1 + 8), *(_DWORD *)v10, 1, v13);
        int v12 = *((_DWORD *)v10 + 1);
      }
      if (*(_DWORD *)(a1 + 166128) >= v12)
      {
        uint64_t v8 = 0;
        if (*(unsigned char *)(v7 + 24 * v9 + 16)) {
          int v14 = 1;
        }
        else {
          int v14 = 2;
        }
        goto LABEL_38;
      }
      break;
  }
LABEL_3:
  uint64_t v8 = 0;
LABEL_39:
  double v30 = vabdd_f64(*(double *)(a2 + 56), *(double *)(a1 + 720));
  if (v30 > sub_10096BB54(a1))
  {
    unsigned int v31 = sub_10096BBA4(a1, a3);
    uint64_t v8 = v8 & 2 | v31;
    if (v31) {
      *(void *)(a1 + 720) = *(void *)(a2 + 56);
    }
  }
  return v8;
}

void *sub_100B0C890(void *a1)
{
  uint64_t v2 = (void **)(a1 + 20760);
  *a1 = off_1022DE8E8;
  uint64_t v3 = (void *)a1[20763];
  if (v3)
  {
    v2[4] = v3;
    operator delete(v3);
  }
  uint64_t v4 = *v2;
  if (*v2)
  {
    v2[1] = v4;
    operator delete(v4);
  }
  *a1 = off_1022D4F38;
  return a1;
}

void sub_100B0C914(void *a1)
{
  uint64_t v2 = (void **)(a1 + 20760);
  *a1 = off_1022DE8E8;
  uint64_t v3 = (void *)a1[20763];
  if (v3)
  {
    v2[4] = v3;
    operator delete(v3);
  }
  uint64_t v4 = *v2;
  if (*v2)
  {
    v2[1] = v4;
    operator delete(v4);
  }
  *a1 = off_1022D4F38;

  operator delete();
}

void sub_100B0C9B8(id a1)
{
  qword_102419008 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

void sub_100B0C9E8()
{
}

void sub_100B0CA3C()
{
}

void sub_100B0CB10(id a1)
{
  qword_102480168 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLAnalyticsLoggerSilo"];
}

void sub_100B0D3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  a23 = (void **)&a17;
  sub_100682B1C(&a23);
  _Unwind_Resume(a1);
}

void sub_100B0E090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a68 = (uint64_t)&a36;
  sub_100682B1C((void ***)&a68);
  if (a47 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100B0E16C(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022DE9A8);
  }
  uint64_t v4 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ca,computeEmergencyDerivedMeasurements", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    LOWORD(v111) = 0;
    double v64 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v64);
    if (v64 != (char *)buf) {
      free(v64);
    }
  }
  uint64_t v5 = a2[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  uint64_t v7 = *((void *)&xmmword_10248A918 + 1);
  if (byte_10248A92F >= 0) {
    uint64_t v7 = byte_10248A92F;
  }
  if (v6 != v7) {
    goto LABEL_21;
  }
  if (byte_10248A92F >= 0) {
    uint64_t v8 = &xmmword_10248A918;
  }
  else {
    uint64_t v8 = (long long *)xmmword_10248A918;
  }
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v8, *((void *)a2 + 1))) {
      goto LABEL_21;
    }
  }
  else if (a2[23])
  {
    while (*a2 == *(unsigned __int8 *)v8)
    {
      ++a2;
      uint64_t v8 = (long long *)((char *)v8 + 1);
      if (!--v5) {
        goto LABEL_28;
      }
    }
LABEL_21:
    *(_DWORD *)uint64_t buf = 79;
    uint64_t v9 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    uint64_t v10 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v11 = [(__CFString *)v9 intValue];
      *(_DWORD *)uint64_t buf = 67109120;
      unsigned int v114 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#ca,callSim,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 == -1)
      {
LABEL_185:
        int v111 = 67109120;
        unsigned int v112 = [(__CFString *)v9 intValue];
        uint64_t v94 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v94);
        if (v94 != (char *)buf) {
          free(v94);
        }
        goto LABEL_33;
      }
LABEL_187:
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
      goto LABEL_185;
    }
    goto LABEL_33;
  }
LABEL_28:
  *(_DWORD *)uint64_t buf = 141;
  uint64_t v9 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022DE9A8);
  }
  int v12 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v13 = [(__CFString *)v9 intValue];
    *(_DWORD *)uint64_t buf = 67109120;
    unsigned int v114 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#ca,EED,simInstance,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 == -1) {
      goto LABEL_185;
    }
    goto LABEL_187;
  }
LABEL_33:
  sub_100B19F3C(a1, (int)[(__CFString *)v9 intValue]);
  if ([(__CFString *)v9 intValue])
  {
    if ([(__CFString *)v9 intValue] == 1)
    {
      *(_DWORD *)uint64_t buf = 12;
      int v14 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
      *(_DWORD *)uint64_t buf = 54;
      v102[0] = [(__CFString *)v14 intValue];
      v102[6] = 0;
      sub_100117AF0(a1, (int *)buf, (uint64_t)v102);
      sub_100118010((uint64_t)v102);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      unint64_t v15 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v16 = [(__CFString *)v14 intValue];
        *(_DWORD *)uint64_t buf = 67109120;
        unsigned int v114 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#ca,callCarrierMcc,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022DE9A8);
        }
        unsigned int v80 = [(__CFString *)v14 intValue];
        int v111 = 67109120;
        unsigned int v112 = v80;
        __int16 v81 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v81);
        if (v81 != (char *)buf) {
          free(v81);
        }
      }
      *(_DWORD *)uint64_t buf = 13;
      long long v17 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
      *(_DWORD *)uint64_t buf = 55;
      v101[0] = [(__CFString *)v17 intValue];
      v101[6] = 0;
      sub_100117AF0(a1, (int *)buf, (uint64_t)v101);
      sub_100118010((uint64_t)v101);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      double v18 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v19 = [(__CFString *)v17 intValue];
        *(_DWORD *)uint64_t buf = 67109120;
        unsigned int v114 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#ca,callCarrierMnc,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022DE9A8);
        }
        unsigned int v82 = [(__CFString *)v17 intValue];
        int v111 = 67109120;
        unsigned int v112 = v82;
        uint64_t v83 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v83);
        if (v83 != (char *)buf) {
          free(v83);
        }
      }
      *(_DWORD *)uint64_t buf = 14;
      unint64_t v20 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
      *(_DWORD *)uint64_t buf = 56;
      v100[0] = [(__CFString *)v20 intValue];
      v100[6] = 0;
      sub_100117AF0(a1, (int *)buf, (uint64_t)v100);
      sub_100118010((uint64_t)v100);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      unint64_t v21 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v22 = [(__CFString *)v20 intValue];
        *(_DWORD *)uint64_t buf = 67109120;
        unsigned int v114 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#ca,calloperatorMcc,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022DE9A8);
        }
        unsigned int v84 = [(__CFString *)v20 intValue];
        int v111 = 67109120;
        unsigned int v112 = v84;
        double v85 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v85);
        if (v85 != (char *)buf) {
          free(v85);
        }
      }
      *(_DWORD *)uint64_t buf = 15;
      __int16 v23 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
      *(_DWORD *)uint64_t buf = 57;
      v99[0] = [(__CFString *)v23 intValue];
      v99[6] = 0;
      sub_100117AF0(a1, (int *)buf, (uint64_t)v99);
      sub_100118010((uint64_t)v99);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      double v24 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v25 = [(__CFString *)v23 intValue];
        *(_DWORD *)uint64_t buf = 67109120;
        unsigned int v114 = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#ca,callOperatorMnc,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022DE9A8);
        }
        unsigned int v86 = [(__CFString *)v23 intValue];
        int v111 = 67109120;
        unsigned int v112 = v86;
        double v87 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v87);
        if (v87 != (char *)buf) {
          free(v87);
        }
      }
      *(_DWORD *)uint64_t buf = 21;
      long long v26 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
      *(_DWORD *)uint64_t buf = 50;
      v98[0] = [(__CFString *)v26 intValue];
      v98[6] = 0;
      sub_100117AF0(a1, (int *)buf, (uint64_t)v98);
      sub_100118010((uint64_t)v98);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      double v27 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v28 = [(__CFString *)v26 intValue];
        *(_DWORD *)uint64_t buf = 67109120;
        unsigned int v114 = v28;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#ca,callrat,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022DE9A8);
        }
        unsigned int v88 = [(__CFString *)v26 intValue];
        int v111 = 67109120;
        unsigned int v112 = v88;
        double v89 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v89);
        if (v89 != (char *)buf) {
          free(v89);
        }
      }
      *(_DWORD *)uint64_t buf = 23;
      long long v29 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
      *(_DWORD *)uint64_t buf = 53;
      v97[0] = [(__CFString *)v29 intValue];
      v97[6] = 0;
      sub_100117AF0(a1, (int *)buf, (uint64_t)v97);
      sub_100118010((uint64_t)v97);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      double v30 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v31 = [(__CFString *)v29 intValue];
        *(_DWORD *)uint64_t buf = 67109120;
        unsigned int v114 = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#ca,isSimPresentValue,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022DE9A8);
        }
        unsigned int v90 = [(__CFString *)v29 intValue];
        int v111 = 67109120;
        unsigned int v112 = v90;
        double v91 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v91);
        if (v91 != (char *)buf) {
          free(v91);
        }
      }
      *(_DWORD *)uint64_t buf = 35;
      float v32 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
      *(_DWORD *)uint64_t buf = 78;
      v96[0] = [(__CFString *)v32 intValue];
      v96[6] = 0;
      sub_100117AF0(a1, (int *)buf, (uint64_t)v96);
      sub_100118010((uint64_t)v96);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      __int32 v33 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v34 = [(__CFString *)v32 intValue];
        *(_DWORD *)uint64_t buf = 67109120;
        unsigned int v114 = v34;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#ca,dataPreferredInfo,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022DE9A8);
        }
        unsigned int v92 = [(__CFString *)v32 intValue];
        int v111 = 67109120;
        unsigned int v112 = v92;
        __int16 v93 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v93);
        if (v93 != (char *)buf) {
          free(v93);
        }
      }
      *(_DWORD *)uint64_t buf = 36;
      unint64_t v35 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
      *(_DWORD *)uint64_t buf = 80;
      v95[0] = [(__CFString *)v35 intValue];
      v95[6] = 0;
      sub_100117AF0(a1, (int *)buf, (uint64_t)v95);
      sub_100118010((uint64_t)v95);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      __int16 v36 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v37 = [(__CFString *)v35 intValue];
        *(_DWORD *)uint64_t buf = 67109120;
        unsigned int v114 = v37;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#ca,voiceDefaultInfo,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022DE9A8);
        }
        unsigned int v38 = [(__CFString *)v35 intValue];
        int v111 = 67109120;
        unsigned int v112 = v38;
        double v39 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v39);
LABEL_154:
        if (v39 != (char *)buf) {
          free(v39);
        }
      }
    }
  }
  else
  {
    *(_DWORD *)uint64_t buf = 4;
    __int16 v40 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
    *(_DWORD *)uint64_t buf = 54;
    v110[0] = [(__CFString *)v40 intValue];
    v110[6] = 0;
    sub_100117AF0(a1, (int *)buf, (uint64_t)v110);
    sub_100118010((uint64_t)v110);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    double v41 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v42 = [(__CFString *)v40 intValue];
      *(_DWORD *)uint64_t buf = 67109120;
      unsigned int v114 = v42;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#ca,callCarrierMcc,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      unsigned int v65 = [(__CFString *)v40 intValue];
      int v111 = 67109120;
      unsigned int v112 = v65;
      double v66 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v66);
      if (v66 != (char *)buf) {
        free(v66);
      }
    }
    *(_DWORD *)uint64_t buf = 5;
    double v43 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
    *(_DWORD *)uint64_t buf = 55;
    v109[0] = [(__CFString *)v43 intValue];
    v109[6] = 0;
    sub_100117AF0(a1, (int *)buf, (uint64_t)v109);
    sub_100118010((uint64_t)v109);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    uint64_t v44 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v45 = [(__CFString *)v43 intValue];
      *(_DWORD *)uint64_t buf = 67109120;
      unsigned int v114 = v45;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#ca,callCarrierMnc,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      unsigned int v67 = [(__CFString *)v43 intValue];
      int v111 = 67109120;
      unsigned int v112 = v67;
      uint64_t v68 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v68);
      if (v68 != (char *)buf) {
        free(v68);
      }
    }
    *(_DWORD *)uint64_t buf = 8;
    char v46 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
    *(_DWORD *)uint64_t buf = 56;
    v108[0] = [(__CFString *)v46 intValue];
    v108[6] = 0;
    sub_100117AF0(a1, (int *)buf, (uint64_t)v108);
    sub_100118010((uint64_t)v108);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    int v47 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v48 = [(__CFString *)v46 intValue];
      *(_DWORD *)uint64_t buf = 67109120;
      unsigned int v114 = v48;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#ca,calloperatorMcc,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      unsigned int v69 = [(__CFString *)v46 intValue];
      int v111 = 67109120;
      unsigned int v112 = v69;
      float v70 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v70);
      if (v70 != (char *)buf) {
        free(v70);
      }
    }
    *(_DWORD *)uint64_t buf = 9;
    double v49 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
    *(_DWORD *)uint64_t buf = 57;
    v107[0] = [(__CFString *)v49 intValue];
    v107[6] = 0;
    sub_100117AF0(a1, (int *)buf, (uint64_t)v107);
    sub_100118010((uint64_t)v107);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    int v50 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v51 = [(__CFString *)v49 intValue];
      *(_DWORD *)uint64_t buf = 67109120;
      unsigned int v114 = v51;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#ca,callOperatorMnc,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      unsigned int v71 = [(__CFString *)v49 intValue];
      int v111 = 67109120;
      unsigned int v112 = v71;
      float v72 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v72);
      if (v72 != (char *)buf) {
        free(v72);
      }
    }
    *(_DWORD *)uint64_t buf = 20;
    int v52 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
    *(_DWORD *)uint64_t buf = 50;
    v106[0] = [(__CFString *)v52 intValue];
    v106[6] = 0;
    sub_100117AF0(a1, (int *)buf, (uint64_t)v106);
    sub_100118010((uint64_t)v106);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    uint64_t v53 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v54 = [(__CFString *)v52 intValue];
      *(_DWORD *)uint64_t buf = 67109120;
      unsigned int v114 = v54;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "#ca,callrat,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      unsigned int v73 = [(__CFString *)v52 intValue];
      int v111 = 67109120;
      unsigned int v112 = v73;
      float v74 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v74);
      if (v74 != (char *)buf) {
        free(v74);
      }
    }
    *(_DWORD *)uint64_t buf = 22;
    uint64_t v55 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
    *(_DWORD *)uint64_t buf = 53;
    v105[0] = [(__CFString *)v55 intValue];
    v105[6] = 0;
    sub_100117AF0(a1, (int *)buf, (uint64_t)v105);
    sub_100118010((uint64_t)v105);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    uint64_t v56 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v57 = [(__CFString *)v55 intValue];
      *(_DWORD *)uint64_t buf = 67109120;
      unsigned int v114 = v57;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#ca,isSimPresentValue,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      unsigned int v75 = [(__CFString *)v55 intValue];
      int v111 = 67109120;
      unsigned int v112 = v75;
      __int16 v76 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v76);
      if (v76 != (char *)buf) {
        free(v76);
      }
    }
    *(_DWORD *)uint64_t buf = 33;
    double v58 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
    *(_DWORD *)uint64_t buf = 78;
    v104[0] = [(__CFString *)v58 intValue];
    v104[6] = 0;
    sub_100117AF0(a1, (int *)buf, (uint64_t)v104);
    sub_100118010((uint64_t)v104);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    double v59 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v60 = [(__CFString *)v58 intValue];
      *(_DWORD *)uint64_t buf = 67109120;
      unsigned int v114 = v60;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "#ca,dataPreferredInfo,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      unsigned int v77 = [(__CFString *)v58 intValue];
      int v111 = 67109120;
      unsigned int v112 = v77;
      double v78 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v78);
      if (v78 != (char *)buf) {
        free(v78);
      }
    }
    *(_DWORD *)uint64_t buf = 34;
    uint64_t v61 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
    *(_DWORD *)uint64_t buf = 80;
    v103[0] = [(__CFString *)v61 intValue];
    v103[6] = 0;
    sub_100117AF0(a1, (int *)buf, (uint64_t)v103);
    sub_100118010((uint64_t)v103);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    uint64_t v62 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v63 = [(__CFString *)v61 intValue];
      *(_DWORD *)uint64_t buf = 67109120;
      unsigned int v114 = v63;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "#ca,voiceDefaultInfo,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      unsigned int v79 = [(__CFString *)v61 intValue];
      int v111 = 67109120;
      unsigned int v112 = v79;
      double v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)", "%s\n", v39);
      goto LABEL_154;
    }
  }
}

void sub_100B0FFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100118010((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100B100C8(uint64_t a1)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022DE9A8);
  }
  uint64_t v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ca,computePhoneNumberAvailabilityDerivedMeasurements", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::computePhoneNumberAvailabilityDerivedMeasurements()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  *(_DWORD *)uint64_t buf = 146;
  uint64_t v3 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022DE9A8);
  }
  uint64_t v4 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = [(__CFString *)v3 intValue];
    *(_DWORD *)uint64_t buf = 67109120;
    unsigned int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ca,PhoneNumberAvailability,simInstance,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    [(__CFString *)v3 intValue];
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::computePhoneNumberAvailabilityDerivedMeasurements()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_100B19F3C(a1, (int)[(__CFString *)v3 intValue]);
}

void sub_100B103DC(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = a2;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = sub_100103284((void *)(a1 + 88), a2);
  if (v6)
  {
    uint64_t v7 = (int *)*((void *)v6 + 5);
    for (uint64_t i = (int *)*((void *)v6 + 6); v7 != i; ++v7)
    {
      unsigned int v9 = sub_10011853C((void *)(a1 + 48), v7);
      if (v9)
      {
        uint64_t v10 = (_DWORD *)a3[1];
        if ((unint64_t)v10 >= a3[2])
        {
          uint64_t v11 = sub_100B1C414(a3, (_DWORD *)v9 + 4);
        }
        else
        {
          _DWORD *v10 = *((_DWORD *)v9 + 4);
          sub_100118070((uint64_t)(v10 + 2), (uint64_t)(v9 + 3));
          uint64_t v11 = (uint64_t)(v10 + 10);
          a3[1] = (uint64_t)(v10 + 10);
        }
        a3[1] = v11;
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022DEBB8);
        }
        int v12 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          int v13 = *v7;
          sub_100B10854(a1, *v7, (uint64_t)__p);
          int v14 = __p;
          if (v28 < 0) {
            int v14 = *(unsigned char **)__p;
          }
          *(_DWORD *)uint64_t buf = 67240450;
          *(_DWORD *)&uint8_t buf[4] = v13;
          *(_WORD *)&buf[8] = 2080;
          *(void *)&buf[10] = v14;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#ca,serializeEvent,no value for meas,id,%{public}d,name,%s", buf, 0x12u);
          if (v28 < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022DEBB8);
          }
          int v15 = *v7;
          sub_100B10854(a1, *v7, (uint64_t)buf);
          unsigned int v16 = buf;
          if (v22 < 0) {
            unsigned int v16 = *(unsigned char **)buf;
          }
          int v23 = 67240450;
          int v24 = v15;
          __int16 v25 = 2080;
          long long v26 = v16;
          long long v17 = (char *)_os_log_send_and_compose_impl();
          if (v22 < 0) {
            operator delete(*(void **)buf);
          }
          sub_1004BA5E4("Generic", 1, 0, 0, "MeasurementSetList AnalyticsLogger<CLAnalyticsMeasurements, CLAnalyticsTriggers>::serializeEvent(std::string) [Measurement = CLAnalyticsMeasurements, Trigger = CLAnalyticsTriggers, MeasurementValueType = std::variant<int, long long, unsigned long long, unsigned int, float, double, std::string, BOOL>]", "%s\n", v17);
          if (v17 != __p) {
            free(v17);
          }
        }
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DEBB8);
    }
    double v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      unsigned int v19 = v3;
      if ((char)v3[23] < 0) {
        unsigned int v19 = *(unsigned __int8 **)v3;
      }
      *(_DWORD *)long long __p = 136446210;
      *(void *)&__p[4] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#ca,serializeEvent,invalid event,[%{public}s]", __p, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DEBB8);
      }
      if ((char)v3[23] < 0) {
        uint64_t v3 = *(unsigned __int8 **)v3;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v3;
      unint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "MeasurementSetList AnalyticsLogger<CLAnalyticsMeasurements, CLAnalyticsTriggers>::serializeEvent(std::string) [Measurement = CLAnalyticsMeasurements, Trigger = CLAnalyticsTriggers, MeasurementValueType = std::variant<int, long long, unsigned long long, unsigned int, float, double, std::string, BOOL>]", "%s\n", v20);
      if (v20 != __p) {
        free(v20);
      }
    }
  }
}

void sub_100B1081C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_100682B1C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100B10854@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v8 = a2;
  uint64_t result = sub_10011853C((void *)(a1 + 8), &v8);
  if (result)
  {
    if (*((char *)result + 47) < 0)
    {
      return (uint64_t *)sub_1000DC48C((unsigned char *)a3, (void *)result[3], result[4]);
    }
    else
    {
      long long v5 = *(_OWORD *)(result + 3);
      *(void *)(a3 + 16) = result[5];
      *(_OWORD *)a3 = v5;
    }
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    uint64_t v6 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ca,ERROR,toString,invalid measurement", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::string AnalyticsLogger<CLAnalyticsMeasurements, CLAnalyticsTriggers>::toString(Measurement) const [Measurement = CLAnalyticsMeasurements, Trigger = CLAnalyticsTriggers, MeasurementValueType = std::variant<int, long long, unsigned long long, unsigned int, float, double, std::string, BOOL>]", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return sub_100134750((void *)a3, "");
  }
  return result;
}

uint64_t sub_100B10A3C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_100B10A44(void *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = sub_100103284(a1 + 11, a2);
  if (v4)
  {
    long long v5 = (int *)*((void *)v4 + 5);
    for (uint64_t i = (int *)*((void *)v4 + 6); v5 != i; ++v5)
    {
      uint64_t v7 = sub_10011853C(a1 + 6, v5);
      if (v7)
      {
        int v8 = sub_10011853C(a1 + 1, v5);
        if (v8)
        {
          if (!*((unsigned char *)v8 + 56))
          {
            sub_10017FA3C(a1 + 6, v7, (uint64_t)__p);
            sub_100B1BEC8((uint64_t)__p, 0);
          }
        }
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022DEBB8);
        }
        unsigned int v9 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          int v10 = *v5;
          sub_100B10854((uint64_t)a1, *v5, (uint64_t)__p);
          uint64_t v11 = __p;
          if (v25 < 0) {
            uint64_t v11 = *(unsigned char **)__p;
          }
          *(_DWORD *)uint64_t buf = 67240450;
          *(_DWORD *)&uint8_t buf[4] = v10;
          *(_WORD *)&buf[8] = 2080;
          *(void *)&buf[10] = v11;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ca,clearEventMeasurements,no value for meas,%{public}d,name,%s", buf, 0x12u);
          if (v25 < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022DEBB8);
          }
          int v12 = *v5;
          sub_100B10854((uint64_t)a1, *v5, (uint64_t)buf);
          int v13 = buf;
          if (v19 < 0) {
            int v13 = *(unsigned char **)buf;
          }
          int v20 = 67240450;
          int v21 = v12;
          __int16 v22 = 2080;
          int v23 = v13;
          int v14 = (char *)_os_log_send_and_compose_impl();
          if (v19 < 0) {
            operator delete(*(void **)buf);
          }
          sub_1004BA5E4("Generic", 1, 0, 0, "void AnalyticsLogger<CLAnalyticsMeasurements, CLAnalyticsTriggers>::clearEventMeasurements(std::string) [Measurement = CLAnalyticsMeasurements, Trigger = CLAnalyticsTriggers, MeasurementValueType = std::variant<int, long long, unsigned long long, unsigned int, float, double, std::string, BOOL>]", "%s\n", v14);
          if (v14 != __p) {
            free(v14);
          }
        }
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DEBB8);
    }
    int v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      unsigned int v16 = v2;
      if ((char)v2[23] < 0) {
        unsigned int v16 = *(unsigned __int8 **)v2;
      }
      *(_DWORD *)long long __p = 136446210;
      *(void *)&__p[4] = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#ca,clearEventMeasurements,invalid event,[%{public}s]", __p, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DEBB8);
      }
      if ((char)v2[23] < 0) {
        uint64_t v2 = *(unsigned __int8 **)v2;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v2;
      long long v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void AnalyticsLogger<CLAnalyticsMeasurements, CLAnalyticsTriggers>::clearEventMeasurements(std::string) [Measurement = CLAnalyticsMeasurements, Trigger = CLAnalyticsTriggers, MeasurementValueType = std::variant<int, long long, unsigned long long, unsigned int, float, double, std::string, BOOL>]", "%s\n", v17);
      if (v17 != __p) {
        free(v17);
      }
    }
  }
}

uint64_t sub_100B10EC0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(void *)a1 = off_1022DE970;
  *(void *)(a1 + 208) = a2;
  sub_101171D90(a1 + 224);
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  [*(id *)(a1 + 208) silo];
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022DE9A8);
  }
  uint64_t v3 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ca,CLAnalyticsLogger initialized", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    long long v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLAnalyticsLogger::CLAnalyticsLogger(id<CLIntersiloUniverse>)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_100B1124C(a1);
  sub_100B18D20(a1);
  sub_100B1931C(a1);
  sub_100B193EC(a1);
  sub_100B19650(a1);
  sub_100B19720(a1);
  sub_100B199DC(a1);
  return a1;
}

void sub_100B1110C(_Unwind_Exception *a1)
{
  uint64_t v4 = v1[39];
  v1[39] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = v1[38];
  v1[38] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = v1[37];
  v1[37] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = v1[36];
  v1[36] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *v2;
  *uint64_t v2 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = v1[33];
  v1[33] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  sub_100B19C10(v1);
  _Unwind_Resume(a1);
}

void sub_100B1124C(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022DE9A8);
  }
  uint64_t v3 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    v885[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ca,defineMeasurements", (uint8_t *)v885, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v885, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::defineMeasurements()", "%s\n", v4);
    if (v4 != (char *)v885) {
      free(v4);
    }
  }
  sub_100134750(&__p, "carrier1Mcc");
  char v883 = 1;
  v884[0] = off_1022DEBE8;
  v884[1] = v885;
  v884[3] = v884;
  sub_100B19C7C(v2, 4, &__p);
  sub_10011843C(v884);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v877, "carrier1Mnc");
  char v879 = 1;
  v880[0] = off_1022DEC78;
  v880[1] = v885;
  v880[3] = v880;
  sub_100B19C7C(v2, 5, &v877);
  sub_10011843C(v880);
  if (SHIBYTE(v877.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v877.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v873, "carrier2Mcc");
  char v875 = 1;
  v876[0] = off_1022DECF8;
  v876[1] = v885;
  v876[3] = v876;
  sub_100B19C7C(v2, 12, &v873);
  sub_10011843C(v876);
  if (SHIBYTE(v873.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v873.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v869, "carrier2Mnc");
  char v871 = 1;
  v872[0] = off_1022DED78;
  v872[1] = v885;
  v872[3] = v872;
  sub_100B19C7C(v2, 13, &v869);
  sub_10011843C(v872);
  if (SHIBYTE(v869.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v869.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v865, "operator1Mcc");
  char v867 = 1;
  v868[0] = off_1022DEDF8;
  v868[1] = v885;
  v868[3] = v868;
  sub_100B19C7C(v2, 8, &v865);
  sub_10011843C(v868);
  if (SHIBYTE(v865.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v865.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v861, "operator1Mnc");
  char v863 = 1;
  v864[0] = off_1022DEE78;
  v864[1] = v885;
  v864[3] = v864;
  sub_100B19C7C(v2, 9, &v861);
  sub_10011843C(v864);
  if (SHIBYTE(v861.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v861.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v857, "operator2Mcc");
  char v859 = 1;
  v860[0] = off_1022DEEF8;
  v860[1] = v885;
  v860[3] = v860;
  sub_100B19C7C(v2, 14, &v857);
  sub_10011843C(v860);
  if (SHIBYTE(v857.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v857.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v853, "operator2Mnc");
  char v855 = 1;
  v856[0] = off_1022DEF78;
  v856[1] = v885;
  v856[3] = v856;
  sub_100B19C7C(v2, 15, &v853);
  sub_10011843C(v856);
  if (SHIBYTE(v853.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v853.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v849, "carrier1BundleId");
  char v851 = 1;
  v852[0] = off_1022DEFF8;
  v852[1] = v885;
  v852[3] = v852;
  sub_100B19C7C(v2, 7, &v849);
  sub_10011843C(v852);
  if (SHIBYTE(v849.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v849.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v845, "carrier2BundleId");
  char v847 = 1;
  v848[0] = off_1022DF078;
  v848[1] = v885;
  v848[3] = v848;
  sub_100B19C7C(v2, 17, &v845);
  sub_10011843C(v848);
  if (SHIBYTE(v845.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v845.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v841, "carrier1Country");
  char v843 = 1;
  v844[0] = off_1022DF0F8;
  v844[1] = v885;
  v844[3] = v844;
  sub_100B19C7C(v2, 6, &v841);
  sub_10011843C(v844);
  if (SHIBYTE(v841.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v841.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v837, "carrier2Country");
  char v839 = 1;
  v840[0] = off_1022DF178;
  v840[1] = v885;
  v840[3] = v840;
  sub_100B19C7C(v2, 16, &v837);
  sub_10011843C(v840);
  if (SHIBYTE(v837.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v837.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v833, "operator1BundleId");
  char v835 = 1;
  v836[0] = off_1022DF1F8;
  v836[1] = v885;
  v836[3] = v836;
  sub_100B19C7C(v2, 11, &v833);
  sub_10011843C(v836);
  if (SHIBYTE(v833.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v833.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v829, "operator2BundleId");
  char v831 = 1;
  v832[0] = off_1022DF278;
  v832[1] = v885;
  v832[3] = v832;
  sub_100B19C7C(v2, 19, &v829);
  sub_10011843C(v832);
  if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v829.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v825, "operator1Country");
  char v827 = 1;
  v828[0] = off_1022DF2F8;
  v828[1] = v885;
  v828[3] = v828;
  sub_100B19C7C(v2, 10, &v825);
  sub_10011843C(v828);
  if (SHIBYTE(v825.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v825.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v821, "operator2Country");
  char v823 = 1;
  v824[0] = off_1022DF378;
  v824[1] = v885;
  v824[3] = v824;
  sub_100B19C7C(v2, 18, &v821);
  sub_10011843C(v824);
  if (SHIBYTE(v821.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v821.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v817, "carrierCountry");
  char v819 = 0;
  v820[0] = off_1022DF3F8;
  v820[1] = v885;
  v820[3] = v820;
  sub_100B19C7C(v2, 58, &v817);
  sub_10011843C(v820);
  if (SHIBYTE(v817.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v817.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v813, "carrierBundleId");
  char v815 = 0;
  v816[0] = off_1022DF478;
  v816[1] = v885;
  v816[3] = v816;
  sub_100B19C7C(v2, 59, &v813);
  sub_10011843C(v816);
  if (SHIBYTE(v813.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v813.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v809, "operatorCountry");
  char v811 = 0;
  v812[0] = off_1022DF4F8;
  v812[1] = v885;
  v812[3] = v812;
  sub_100B19C7C(v2, 60, &v809);
  sub_10011843C(v812);
  if (SHIBYTE(v809.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v809.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v805, "operatorBundleId");
  char v807 = 0;
  v808[0] = off_1022DF578;
  v808[1] = v885;
  v808[3] = v808;
  sub_100B19C7C(v2, 61, &v805);
  sub_10011843C(v808);
  if (SHIBYTE(v805.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v805.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v801, "simBundleId");
  char v803 = 0;
  v804[0] = off_1022DF5F8;
  v804[1] = v885;
  v804[3] = v804;
  sub_100B19C7C(v2, 140, &v801);
  sub_10011843C(v804);
  if (SHIBYTE(v801.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v801.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v797, "simCountry");
  char v799 = 0;
  v800[0] = off_1022DF678;
  v800[1] = v885;
  v800[3] = v800;
  sub_100B19C7C(v2, 139, &v797);
  sub_10011843C(v800);
  if (SHIBYTE(v797.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v797.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v793, "simSlot");
  char v795 = 0;
  v796[0] = off_1022DF6F8;
  v796[1] = v885;
  v796[3] = v796;
  sub_100B19C7C(v2, 141, &v793);
  sub_10011843C(v796);
  if (SHIBYTE(v793.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v793.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v789, "sim1RAT");
  char v791 = 1;
  v792[0] = off_1022DF778;
  v792[1] = v885;
  v792[3] = v792;
  sub_100B19C7C(v2, 20, &v789);
  sub_10011843C(v792);
  if (SHIBYTE(v789.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v789.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v785, "sim2RAT");
  char v787 = 1;
  v788[0] = off_1022DF7F8;
  v788[1] = v885;
  v788[3] = v788;
  sub_100B19C7C(v2, 21, &v785);
  sub_10011843C(v788);
  if (SHIBYTE(v785.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v785.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v781, "wifiAssociatedState");
  char v783 = 1;
  v784[0] = off_1022DF878;
  v784[1] = v885;
  v784[3] = v784;
  sub_100B19C7C(v2, 24, &v781);
  sub_10011843C(v784);
  if (SHIBYTE(v781.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v781.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v777, "networkReachablilityState");
  char v779 = 1;
  v780[0] = off_1022DF8F8;
  v780[1] = v885;
  v780[3] = v780;
  sub_100B19C7C(v2, 26, &v777);
  sub_10011843C(v780);
  if (SHIBYTE(v777.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v777.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v773, "watchMode");
  char v775 = 1;
  v776[0] = off_1022DF978;
  v776[1] = v885;
  v776[3] = v776;
  sub_100B19C7C(v2, 30, &v773);
  sub_10011843C(v776);
  if (SHIBYTE(v773.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v773.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v769, "mobileAssetVersion");
  char v771 = 1;
  v772[0] = off_1022DF9F8;
  v772[1] = v885;
  v772[3] = v772;
  sub_100B19C7C(v2, 29, &v769);
  sub_10011843C(v772);
  if (SHIBYTE(v769.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v769.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v765, "callTriggerType");
  char v767 = 1;
  v768[0] = off_1022DFA78;
  v768[1] = v885;
  v768[3] = v768;
  sub_100B19C7C(v2, 82, &v765);
  sub_10011843C(v768);
  if (SHIBYTE(v765.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v765.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v761, "isSim1Present");
  char v763 = 1;
  v764[0] = off_1022DFAF8;
  v764[1] = v885;
  v764[3] = v764;
  sub_100B19C7C(v2, 22, &v761);
  sub_10011843C(v764);
  if (SHIBYTE(v761.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v761.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v757, "isSim2Present");
  char v759 = 1;
  v760[0] = off_1022DFB78;
  v760[1] = v885;
  v760[3] = v760;
  sub_100B19C7C(v2, 23, &v757);
  sub_10011843C(v760);
  if (SHIBYTE(v757.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v757.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v753, "isSim1DataPreferred");
  char v755 = 1;
  v756[0] = off_1022DFBF8;
  v756[1] = v885;
  v756[3] = v756;
  sub_100B19C7C(v2, 33, &v753);
  sub_10011843C(v756);
  if (SHIBYTE(v753.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v753.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v749, "isSim2DataPreferred");
  char v751 = 1;
  v752[0] = off_1022DFC78;
  v752[1] = v885;
  v752[3] = v752;
  sub_100B19C7C(v2, 35, &v749);
  sub_10011843C(v752);
  if (SHIBYTE(v749.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v749.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v745, "isSim1DefaultVoice");
  char v747 = 1;
  v748[0] = off_1022DFCF8;
  v748[1] = v885;
  v748[3] = v748;
  sub_100B19C7C(v2, 34, &v745);
  sub_10011843C(v748);
  if (SHIBYTE(v745.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v745.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v741, "isSim2DefaultVoice");
  char v743 = 1;
  v744[0] = off_1022DFD78;
  v744[1] = v885;
  v744[3] = v744;
  sub_100B19C7C(v2, 36, &v741);
  sub_10011843C(v744);
  if (SHIBYTE(v741.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v741.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v737, "GNSSSignalEnvironment");
  char v739 = 1;
  v740[0] = off_1022DFDF8;
  v740[1] = v885;
  v740[3] = v740;
  sub_100B19C7C(v2, 25, &v737);
  sub_10011843C(v740);
  if (SHIBYTE(v737.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v737.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v733, "communicationType");
  char v735 = 1;
  v736[0] = off_1022DFE78;
  v736[1] = v885;
  v736[3] = v736;
  sub_100B19C7C(v2, 77, &v733);
  sub_10011843C(v736);
  if (SHIBYTE(v733.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v733.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v729, "latitude");
  char v731 = 0;
  v732[0] = off_1022DFEF8;
  v732[1] = v885;
  v732[3] = v732;
  sub_100B19C7C(v2, 37, &v729);
  sub_10011843C(v732);
  if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v729.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v725, "longitude");
  char v727 = 0;
  v728[0] = off_1022DFF78;
  v728[1] = v885;
  v728[3] = v728;
  sub_100B19C7C(v2, 38, &v725);
  sub_10011843C(v728);
  if (SHIBYTE(v725.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v725.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v721, "altitude");
  char v723 = 0;
  v724[0] = off_1022DFFF8;
  v724[1] = v885;
  v724[3] = v724;
  sub_100B19C7C(v2, 39, &v721);
  sub_10011843C(v724);
  if (SHIBYTE(v721.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v721.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v717, "horizontalAccuracy");
  char v719 = 0;
  v720[0] = off_1022E0078;
  v720[1] = v885;
  v720[3] = v720;
  sub_100B19C7C(v2, 40, &v717);
  sub_10011843C(v720);
  if (SHIBYTE(v717.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v717.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v713, "verticalAccuracy");
  char v715 = 0;
  v716[0] = off_1022E00F8;
  v716[1] = v885;
  v716[3] = v716;
  sub_100B19C7C(v2, 41, &v713);
  sub_10011843C(v716);
  if (SHIBYTE(v713.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v713.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v709, "timetoFix");
  char v711 = 0;
  v712[0] = off_1022E0178;
  v712[1] = v885;
  v712[3] = v712;
  sub_100B19C7C(v2, 42, &v709);
  sub_10011843C(v712);
  if (SHIBYTE(v709.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v709.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v705, "fixSource");
  char v707 = 0;
  v708[0] = off_1022E01F8;
  v708[1] = v885;
  v708[3] = v708;
  sub_100B19C7C(v2, 43, &v705);
  sub_10011843C(v708);
  if (SHIBYTE(v705.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v705.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v701, "requestedResponseTime");
  char v703 = 0;
  v704[0] = off_1022E0278;
  v704[1] = v885;
  v704[3] = v704;
  sub_100B19C7C(v2, 44, &v701);
  sub_10011843C(v704);
  if (SHIBYTE(v701.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v701.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v697, "requestedAccuracy");
  char v699 = 0;
  v700[0] = off_1022E02F8;
  v700[1] = v885;
  v700[3] = v700;
  sub_100B19C7C(v2, 45, &v697);
  sub_10011843C(v700);
  if (SHIBYTE(v697.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v697.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v693, "requestedPosReportType");
  char v695 = 0;
  v696[0] = off_1022E0378;
  v696[1] = v885;
  v696[3] = v696;
  sub_100B19C7C(v2, 46, &v693);
  sub_10011843C(v696);
  if (SHIBYTE(v693.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v693.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v689, "isInActiveEmergency");
  char v691 = 0;
  v692[0] = off_1022E03F8;
  v692[1] = v885;
  v692[3] = v692;
  sub_100B19C7C(v2, 83, &v689);
  sub_10011843C(v692);
  if (SHIBYTE(v689.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v689.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v685, "sessionResult");
  char v687 = 0;
  v688[0] = off_1022E0478;
  v688[1] = v885;
  v688[3] = v688;
  sub_100B19C7C(v2, 47, &v685);
  sub_10011843C(v688);
  if (SHIBYTE(v685.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v685.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v681, "posProtocol");
  char v683 = 0;
  v684[0] = off_1022E04F8;
  v684[1] = v885;
  v684[3] = v684;
  sub_100B19C7C(v2, 49, &v681);
  sub_10011843C(v684);
  if (SHIBYTE(v681.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v681.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v677, "sessionType");
  char v679 = 0;
  v680[0] = off_1022E0578;
  v680[1] = v885;
  v680[3] = v680;
  sub_100B19C7C(v2, 51, &v677);
  sub_10011843C(v680);
  if (SHIBYTE(v677.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v677.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v673, "methodType");
  char v675 = 0;
  v676[0] = off_1022E05F8;
  v676[1] = v885;
  v676[3] = v676;
  sub_100B19C7C(v2, 52, &v673);
  sub_10011843C(v676);
  if (SHIBYTE(v673.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v673.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v669, "abortCause");
  char v671 = 0;
  v672[0] = off_1022E0678;
  v672[1] = v885;
  v672[3] = v672;
  sub_100B19C7C(v2, 66, &v669);
  sub_10011843C(v672);
  if (SHIBYTE(v669.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v669.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v665, "carrier1Mcc");
  char v667 = 1;
  v668[0] = off_1022E06F8;
  v668[1] = v885;
  v668[3] = v668;
  sub_100B19C7C(v2, 4, &v665);
  sub_10011843C(v668);
  if (SHIBYTE(v665.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v665.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v661, "carrier1Mnc");
  char v663 = 1;
  v664[0] = off_1022E0778;
  v664[1] = v885;
  v664[3] = v664;
  sub_100B19C7C(v2, 5, &v661);
  sub_10011843C(v664);
  if (SHIBYTE(v661.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v661.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v657, "carrier2Mcc");
  char v659 = 1;
  v660[0] = off_1022E07F8;
  v660[1] = v885;
  v660[3] = v660;
  sub_100B19C7C(v2, 12, &v657);
  sub_10011843C(v660);
  if (SHIBYTE(v657.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v657.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v653, "carrier2Mnc");
  char v655 = 1;
  v656[0] = off_1022E0878;
  v656[1] = v885;
  v656[3] = v656;
  sub_100B19C7C(v2, 13, &v653);
  sub_10011843C(v656);
  if (SHIBYTE(v653.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v653.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v649, "phoneNumberAvailable");
  char v651 = 1;
  v652[0] = off_1022E08F8;
  v652[1] = v885;
  v652[3] = v652;
  sub_100B19C7C(v2, 31, &v649);
  sub_10011843C(v652);
  if (SHIBYTE(v649.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v649.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v645, "wasTCPositionInjected");
  char v647 = 0;
  v648[0] = off_1022E0978;
  v648[1] = v885;
  v648[3] = v648;
  sub_100B19C7C(v2, 62, &v645);
  sub_10011843C(v648);
  if (SHIBYTE(v645.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v645.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v641, "TCPositionUsage");
  char v643 = 0;
  v644[0] = off_1022E09F8;
  v644[1] = v885;
  v644[3] = v644;
  sub_100B19C7C(v2, 63, &v641);
  sub_10011843C(v644);
  if (SHIBYTE(v641.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v641.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v637, "nwRefLocAvailability");
  char v639 = 0;
  v640[0] = off_1022E0A78;
  v640[1] = v885;
  v640[3] = v640;
  sub_100B19C7C(v2, 67, &v637);
  sub_10011843C(v640);
  if (SHIBYTE(v637.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v637.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v633, "nwTimeAssistanceAvailability");
  char v635 = 0;
  v636[0] = off_1022E0AF8;
  v636[1] = v885;
  v636[3] = v636;
  sub_100B19C7C(v2, 74, &v633);
  sub_10011843C(v636);
  if (SHIBYTE(v633.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v633.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v629, "nwNavModelAvailability");
  char v631 = 0;
  v632[0] = off_1022E0B78;
  v632[1] = v885;
  v632[3] = v632;
  sub_100B19C7C(v2, 75, &v629);
  sub_10011843C(v632);
  if (SHIBYTE(v629.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v629.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v625, "nwRefLocLatitude");
  char v627 = 0;
  v628[0] = off_1022E0BF8;
  v628[1] = v885;
  v628[3] = v628;
  sub_100B19C7C(v2, 68, &v625);
  sub_10011843C(v628);
  if (SHIBYTE(v625.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v625.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v621, "nwRefLocLongitude");
  char v623 = 0;
  v624[0] = off_1022E0C78;
  v624[1] = v885;
  v624[3] = v624;
  sub_100B19C7C(v2, 69, &v621);
  sub_10011843C(v624);
  if (SHIBYTE(v621.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v621.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v617, "nwRefLocUncertainity");
  char v619 = 0;
  v620[0] = off_1022E0CF8;
  v620[1] = v885;
  v620[3] = v620;
  sub_100B19C7C(v2, 70, &v617);
  sub_10011843C(v620);
  if (SHIBYTE(v617.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v617.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v613, "nwRefLocConfidence");
  char v615 = 0;
  v616[0] = off_1022E0D78;
  v616[1] = v885;
  v616[3] = v616;
  sub_100B19C7C(v2, 71, &v613);
  sub_10011843C(v616);
  if (SHIBYTE(v613.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v613.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v609, "nwRefLocDeviationFromTCP");
  char v611 = 0;
  v612[0] = off_1022E0DF8;
  v612[1] = v885;
  v612[3] = v612;
  sub_100B19C7C(v2, 72, &v609);
  sub_10011843C(v612);
  if (SHIBYTE(v609.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v609.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v605, "nwRefLocDeviationFromCellLocation");
  char v607 = 0;
  v608[0] = off_1022E0E78;
  v608[1] = v885;
  v608[3] = v608;
  sub_100B19C7C(v2, 73, &v605);
  sub_10011843C(v608);
  if (SHIBYTE(v605.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v605.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v601, "finalFixDeviationFromCellLocation");
  char v603 = 0;
  v604[0] = off_1022E0EF8;
  v604[1] = v885;
  v604[3] = v604;
  sub_100B19C7C(v2, 76, &v601);
  sub_10011843C(v604);
  if (SHIBYTE(v601.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v601.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v597, "simSlotId");
  char v599 = 1;
  v600[0] = off_1022E0F78;
  v600[1] = v885;
  v600[3] = v600;
  sub_100B19C7C(v2, 79, &v597);
  sub_10011843C(v600);
  if (SHIBYTE(v597.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v597.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v593, "carrierMcc");
  char v595 = 0;
  v596[0] = off_1022E0FF8;
  v596[1] = v885;
  v596[3] = v596;
  sub_100B19C7C(v2, 54, &v593);
  sub_10011843C(v596);
  if (SHIBYTE(v593.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v593.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v589, "carrierMnc");
  char v591 = 0;
  v592[0] = off_1022E1078;
  v592[1] = v885;
  v592[3] = v592;
  sub_100B19C7C(v2, 55, &v589);
  sub_10011843C(v592);
  if (SHIBYTE(v589.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v589.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v585, "operatorMcc");
  char v587 = 0;
  v588[0] = off_1022E10F8;
  v588[1] = v885;
  v588[3] = v588;
  sub_100B19C7C(v2, 56, &v585);
  sub_10011843C(v588);
  if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v585.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v581, "operatorMnc");
  char v583 = 0;
  v584[0] = off_1022E1178;
  v584[1] = v885;
  v584[3] = v584;
  sub_100B19C7C(v2, 57, &v581);
  sub_10011843C(v584);
  if (SHIBYTE(v581.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v581.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v577, "ratType");
  char v579 = 0;
  v580[0] = off_1022E11F8;
  v580[1] = v885;
  v580[3] = v580;
  sub_100B19C7C(v2, 50, &v577);
  sub_10011843C(v580);
  if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v577.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v573, "isSimPresent");
  char v575 = 0;
  v576[0] = off_1022E1278;
  v576[1] = v885;
  v576[3] = v576;
  sub_100B19C7C(v2, 53, &v573);
  sub_10011843C(v576);
  if (SHIBYTE(v573.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v573.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v569, "callOverDataPrefferedSim");
  char v571 = 0;
  v572[0] = off_1022E12F8;
  v572[1] = v885;
  v572[3] = v572;
  sub_100B19C7C(v2, 78, &v569);
  sub_10011843C(v572);
  if (SHIBYTE(v569.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v569.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v565, "callOverVoiceDefaultSim");
  char v567 = 0;
  v568[0] = off_1022E1378;
  v568[1] = v885;
  v568[3] = v568;
  sub_100B19C7C(v2, 80, &v565);
  sub_10011843C(v568);
  if (SHIBYTE(v565.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v565.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v561, "orbitFileAvailability");
  char v563 = 0;
  v564[0] = off_1022E13F8;
  v564[1] = v885;
  v564[3] = v564;
  sub_100B19C7C(v2, 27, &v561);
  sub_10011843C(v564);
  if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v561.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v557, "orbitFileAge");
  char v559 = 0;
  v560[0] = off_1022E1478;
  v560[1] = v885;
  v560[3] = v560;
  sub_100B19C7C(v2, 28, &v557);
  sub_10011843C(v560);
  if (SHIBYTE(v557.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v557.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v553, "discardReason");
  char v555 = 0;
  v556[0] = off_1022E14F8;
  v556[1] = v885;
  v556[3] = v556;
  sub_100B19C7C(v2, 84, &v553);
  sub_10011843C(v556);
  if (SHIBYTE(v553.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v553.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v549, "discardedPositionMessageType");
  char v551 = 0;
  v552[0] = off_1022E1578;
  v552[1] = v885;
  v552[3] = v552;
  sub_100B19C7C(v2, 85, &v549);
  sub_10011843C(v552);
  if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v549.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v545, "posProtocolType");
  char v547 = 0;
  v548[0] = off_1022E15F8;
  v548[1] = v885;
  v548[3] = v548;
  sub_100B19C7C(v2, 86, &v545);
  sub_10011843C(v548);
  if (SHIBYTE(v545.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v545.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v541, "timetoFirstFix");
  char v543 = 0;
  v544[0] = off_1022E1678;
  v544[1] = v885;
  v544[3] = v544;
  sub_100B19C7C(v2, 89, &v541);
  sub_10011843C(v544);
  if (SHIBYTE(v541.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v541.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v537, "firstFixSource");
  char v539 = 0;
  v540[0] = off_1022E16F8;
  v540[1] = v885;
  v540[3] = v540;
  sub_100B19C7C(v2, 90, &v537);
  sub_10011843C(v540);
  if (SHIBYTE(v537.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v537.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v533, "timeToBestFix");
  char v535 = 0;
  v536[0] = off_1022E1778;
  v536[1] = v885;
  v536[3] = v536;
  sub_100B19C7C(v2, 91, &v533);
  sub_10011843C(v536);
  if (SHIBYTE(v533.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v533.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v529, "bestFixSource");
  char v531 = 0;
  v532[0] = off_1022E17F8;
  v532[1] = v885;
  v532[3] = v532;
  sub_100B19C7C(v2, 92, &v529);
  sub_10011843C(v532);
  if (SHIBYTE(v529.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v529.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v525, "horzAccuracy");
  char v527 = 0;
  v528[0] = off_1022E1878;
  v528[1] = v885;
  v528[3] = v528;
  sub_100B19C7C(v2, 93, &v525);
  sub_10011843C(v528);
  if (SHIBYTE(v525.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v525.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v521, "vertAccuracy");
  char v523 = 0;
  v524[0] = off_1022E18F8;
  v524[1] = v885;
  v524[3] = v524;
  sub_100B19C7C(v2, 94, &v521);
  sub_10011843C(v524);
  if (SHIBYTE(v521.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v521.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v517, "sessionResult");
  char v519 = 0;
  v520[0] = off_1022E1978;
  v520[1] = v885;
  v520[3] = v520;
  sub_100B19C7C(v2, 96, &v517);
  sub_10011843C(v520);
  if (SHIBYTE(v517.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v517.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v513, "numValidFixesSent");
  char v515 = 0;
  v516[0] = off_1022E19F8;
  v516[1] = v885;
  v516[3] = v516;
  sub_100B19C7C(v2, 95, &v513);
  sub_10011843C(v516);
  if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v513.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v509, "numNoFixMessagesSent");
  char v511 = 0;
  v512[0] = off_1022E1A78;
  v512[1] = v885;
  v512[3] = v512;
  sub_100B19C7C(v2, 97, &v509);
  sub_10011843C(v512);
  if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v509.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v505, "numSendSuccessForValidFix");
  char v507 = 0;
  v508[0] = off_1022E1AF8;
  v508[1] = v885;
  v508[3] = v508;
  sub_100B19C7C(v2, 98, &v505);
  sub_10011843C(v508);
  if (SHIBYTE(v505.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v505.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v501, "numSendFailForValidFix");
  char v503 = 0;
  v504[0] = off_1022E1B78;
  v504[1] = v885;
  v504[3] = v504;
  sub_100B19C7C(v2, 99, &v501);
  sub_10011843C(v504);
  if (SHIBYTE(v501.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v501.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v497, "amlSessionOverNas");
  char v499 = 0;
  v500[0] = off_1022E1BF8;
  v500[1] = v885;
  v500[3] = v500;
  sub_100B19C7C(v2, 100, &v497);
  sub_10011843C(v500);
  if (SHIBYTE(v497.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v497.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v493, "timetoFirstFix");
  char v495 = 0;
  v496[0] = off_1022E1C78;
  v496[1] = v885;
  v496[3] = v496;
  sub_100B19C7C(v2, 101, &v493);
  sub_10011843C(v496);
  if (SHIBYTE(v493.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v493.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v489, "firstFixSource");
  char v491 = 0;
  v492[0] = off_1022E1CF8;
  v492[1] = v885;
  v492[3] = v492;
  sub_100B19C7C(v2, 102, &v489);
  sub_10011843C(v492);
  if (SHIBYTE(v489.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v489.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v485, "timeToBestFix");
  char v487 = 0;
  v488[0] = off_1022E1D78;
  v488[1] = v885;
  v488[3] = v488;
  sub_100B19C7C(v2, 103, &v485);
  sub_10011843C(v488);
  if (SHIBYTE(v485.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v485.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v481, "bestFixSource");
  char v483 = 0;
  v484[0] = off_1022E1DF8;
  v484[1] = v885;
  v484[3] = v484;
  sub_100B19C7C(v2, 104, &v481);
  sub_10011843C(v484);
  if (SHIBYTE(v481.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v481.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v477, "horzAccuracy");
  char v479 = 0;
  v480[0] = off_1022E1E78;
  v480[1] = v885;
  v480[3] = v480;
  sub_100B19C7C(v2, 105, &v477);
  sub_10011843C(v480);
  if (SHIBYTE(v477.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v477.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v473, "vertAccuracy");
  char v475 = 0;
  v476[0] = off_1022E1EF8;
  v476[1] = v885;
  v476[3] = v476;
  sub_100B19C7C(v2, 106, &v473);
  sub_10011843C(v476);
  if (SHIBYTE(v473.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v473.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v469, "sessionResult");
  char v471 = 0;
  v472[0] = off_1022E1F78;
  v472[1] = v885;
  v472[3] = v472;
  sub_100B19C7C(v2, 107, &v469);
  sub_10011843C(v472);
  if (SHIBYTE(v469.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v469.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v465, "numValidFixesSent");
  char v467 = 0;
  v468[0] = off_1022E1FF8;
  v468[1] = v885;
  v468[3] = v468;
  sub_100B19C7C(v2, 108, &v465);
  sub_10011843C(v468);
  if (SHIBYTE(v465.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v465.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v461, "numNoFixMessagesSent");
  char v463 = 0;
  v464[0] = off_1022E2078;
  v464[1] = v885;
  v464[3] = v464;
  sub_100B19C7C(v2, 109, &v461);
  sub_10011843C(v464);
  if (SHIBYTE(v461.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v461.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v457, "numSendSuccessForValidFix");
  char v459 = 0;
  v460[0] = off_1022E20F8;
  v460[1] = v885;
  v460[3] = v460;
  sub_100B19C7C(v2, 110, &v457);
  sub_10011843C(v460);
  if (SHIBYTE(v457.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v457.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v453, "numSendFailForValidFix");
  char v455 = 0;
  v456[0] = off_1022E2178;
  v456[1] = v885;
  v456[3] = v456;
  sub_100B19C7C(v2, 111, &v453);
  sub_10011843C(v456);
  if (SHIBYTE(v453.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v453.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v449, "payloadSendErrorCode");
  char v451 = 0;
  v452[0] = off_1022E21F8;
  v452[1] = v885;
  v452[3] = v452;
  sub_100B19C7C(v2, 112, &v449);
  sub_10011843C(v452);
  if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v449.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v445, "countOfADRTotalPayloadsSent");
  char v447 = 0;
  v448[0] = off_1022E2278;
  v448[1] = v885;
  v448[3] = v448;
  sub_100B19C7C(v2, 113, &v445);
  sub_10011843C(v448);
  if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v445.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v441, "countOfADRSuccessfulPayloadsSent");
  char v443 = 0;
  v444[0] = off_1022E22F8;
  v444[1] = v885;
  v444[3] = v444;
  sub_100B19C7C(v2, 114, &v441);
  sub_10011843C(v444);
  if (SHIBYTE(v441.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v441.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v437, "nameAvailability");
  char v439 = 0;
  v440[0] = off_1022E2378;
  v440[1] = v885;
  v440[3] = v440;
  sub_100B19C7C(v2, 116, &v437);
  sub_10011843C(v440);
  if (SHIBYTE(v437.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v437.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v433, "ageAvailability");
  char v435 = 0;
  v436[0] = off_1022E23F8;
  v436[1] = v885;
  v436[3] = v436;
  sub_100B19C7C(v2, 117, &v433);
  sub_10011843C(v436);
  if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v433.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v429, "weightAvailability");
  char v431 = 0;
  v432[0] = off_1022E2478;
  v432[1] = v885;
  v432[3] = v432;
  sub_100B19C7C(v2, 118, &v429);
  sub_10011843C(v432);
  if (SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v429.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v425, "heightAvailability");
  char v427 = 0;
  v428[0] = off_1022E24F8;
  v428[1] = v885;
  v428[3] = v428;
  sub_100B19C7C(v2, 119, &v425);
  sub_10011843C(v428);
  if (SHIBYTE(v425.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v425.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v421, "bloodTypeAvailability");
  char v423 = 0;
  v424[0] = off_1022E2578;
  v424[1] = v885;
  v424[3] = v424;
  sub_100B19C7C(v2, 120, &v421);
  sub_10011843C(v424);
  if (SHIBYTE(v421.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v421.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v417, "medicalNotesAvailability");
  char v419 = 0;
  v420[0] = off_1022E25F8;
  v420[1] = v885;
  v420[3] = v420;
  sub_100B19C7C(v2, 121, &v417);
  sub_10011843C(v420);
  if (SHIBYTE(v417.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v417.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v413, "allergyDetailsAvailability");
  char v415 = 0;
  v416[0] = off_1022E2678;
  v416[1] = v885;
  v416[3] = v416;
  sub_100B19C7C(v2, 122, &v413);
  sub_10011843C(v416);
  if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v413.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v409, "medicationsAvailability");
  char v411 = 0;
  v412[0] = off_1022E26F8;
  v412[1] = v885;
  v412[3] = v412;
  sub_100B19C7C(v2, 123, &v409);
  sub_10011843C(v412);
  if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v409.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v405, "emergencyContactsAvailability");
  char v407 = 0;
  v408[0] = off_1022E2778;
  v408[1] = v885;
  v408[3] = v408;
  sub_100B19C7C(v2, 124, &v405);
  sub_10011843C(v408);
  if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v405.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v401, "medicalConditionsAvailability");
  char v403 = 0;
  v404[0] = off_1022E27F8;
  v404[1] = v885;
  v404[3] = v404;
  sub_100B19C7C(v2, 125, &v401);
  sub_10011843C(v404);
  if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v401.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v397, "devicePrimaryLanguage");
  char v399 = 0;
  v400[0] = off_1022E2878;
  v400[1] = v885;
  v400[3] = v400;
  sub_100B19C7C(v2, 126, &v397);
  sub_10011843C(v400);
  if (SHIBYTE(v397.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v397.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v393, "deviceSystemLanguage");
  char v395 = 0;
  v396[0] = off_1022E28F8;
  v396[1] = v885;
  v396[3] = v396;
  sub_100B19C7C(v2, 127, &v393);
  sub_10011843C(v396);
  if (SHIBYTE(v393.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v393.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v389, "dispatchableSearchAreaAvailability");
  char v391 = 0;
  v392[0] = off_1022E2978;
  v392[1] = v885;
  v392[3] = v392;
  sub_100B19C7C(v2, 115, &v389);
  sub_10011843C(v392);
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v389.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v385, "daysSinceLastNameUpdate");
  char v387 = 0;
  v388[0] = off_1022E29F8;
  v388[1] = v885;
  v388[3] = v388;
  sub_100B19C7C(v2, 128, &v385);
  sub_10011843C(v388);
  if (SHIBYTE(v385.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v385.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v381, "daysSinceLastAgeUpdate");
  char v383 = 0;
  v384[0] = off_1022E2A78;
  v384[1] = v885;
  v384[3] = v384;
  sub_100B19C7C(v2, 129, &v381);
  sub_10011843C(v384);
  if (SHIBYTE(v381.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v381.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v377, "daysSinceLastWeightUpdate");
  char v379 = 0;
  v380[0] = off_1022E2AF8;
  v380[1] = v885;
  v380[3] = v380;
  sub_100B19C7C(v2, 130, &v377);
  sub_10011843C(v380);
  if (SHIBYTE(v377.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v377.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v373, "daysSinceLastHeightUpdate");
  char v375 = 0;
  v376[0] = off_1022E2B78;
  v376[1] = v885;
  v376[3] = v376;
  sub_100B19C7C(v2, 131, &v373);
  sub_10011843C(v376);
  if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v373.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v369, "daysSinceLastMedicalNotesUpdate");
  char v371 = 0;
  v372[0] = off_1022E2BF8;
  v372[1] = v885;
  v372[3] = v372;
  sub_100B19C7C(v2, 132, &v369);
  sub_10011843C(v372);
  if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v369.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v365, "daysSinceLastAllergyDetailsUpdate");
  char v367 = 0;
  v368[0] = off_1022E2C78;
  v368[1] = v885;
  v368[3] = v368;
  sub_100B19C7C(v2, 133, &v365);
  sub_10011843C(v368);
  if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v365.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v361, "daysSinceLastMedicationsUpdate");
  char v363 = 0;
  v364[0] = off_1022E2CF8;
  v364[1] = v885;
  v364[3] = v364;
  sub_100B19C7C(v2, 134, &v361);
  sub_10011843C(v364);
  if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v361.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v357, "daysSinceLastEmergencyContactsUpdate");
  char v359 = 0;
  v360[0] = off_1022E2D78;
  v360[1] = v885;
  v360[3] = v360;
  sub_100B19C7C(v2, 135, &v357);
  sub_10011843C(v360);
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v357.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v353, "daysSinceLastMedicalConditionsUpdate");
  char v355 = 0;
  v356[0] = off_1022E2DF8;
  v356[1] = v885;
  v356[3] = v356;
  sub_100B19C7C(v2, 136, &v353);
  sub_10011843C(v356);
  if (SHIBYTE(v353.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v353.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v349, "daysSinceLastDevicePrimaryLanguageUpdate");
  char v351 = 0;
  v352[0] = off_1022E2E78;
  v352[1] = v885;
  v352[3] = v352;
  sub_100B19C7C(v2, 137, &v349);
  sub_10011843C(v352);
  if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v349.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v345, "featureVersion");
  char v347 = 0;
  v348[0] = off_1022E2EF8;
  v348[1] = v885;
  v348[3] = v348;
  sub_100B19C7C(v2, 138, &v345);
  sub_10011843C(v348);
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v345.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v341, "callDuration");
  char v343 = 0;
  v344[0] = off_1022E2F78;
  v344[1] = v885;
  v344[3] = v344;
  sub_100B19C7C(v2, 32, &v341);
  sub_10011843C(v344);
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v341.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v337, "apnsTokenReceived");
  char v339 = 0;
  v340[0] = off_1022E2FF8;
  v340[1] = v885;
  v340[3] = v340;
  sub_100B19C7C(v2, 190, &v337);
  sub_10011843C(v340);
  if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v337.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v333, "numRequestsReceived");
  char v335 = 0;
  v336[0] = off_1022E3078;
  v336[1] = v885;
  v336[3] = v336;
  sub_100B19C7C(v2, 191, &v333);
  sub_10011843C(v336);
  if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v333.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v329, "numSuccessfulRequestsReceived");
  char v331 = 0;
  v332[0] = off_1022E30F8;
  v332[1] = v885;
  v332[3] = v332;
  sub_100B19C7C(v2, 192, &v329);
  sub_10011843C(v332);
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v329.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v325, "numControlPayloadsSent");
  char v327 = 0;
  v328[0] = off_1022E3178;
  v328[1] = v885;
  v328[3] = v328;
  sub_100B19C7C(v2, 193, &v325);
  sub_10011843C(v328);
  if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v325.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v321, "numSuccessfulControlPayloadsSent");
  char v323 = 0;
  v324[0] = off_1022E31F8;
  v324[1] = v885;
  v324[3] = v324;
  sub_100B19C7C(v2, 194, &v321);
  sub_10011843C(v324);
  if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v321.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v317, "numRequestsDuringEEM");
  char v319 = 0;
  v320[0] = off_1022E3278;
  v320[1] = v885;
  v320[3] = v320;
  sub_100B19C7C(v2, 195, &v317);
  sub_10011843C(v320);
  if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v317.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v313, "numDuplicateRequests");
  char v315 = 0;
  v316[0] = off_1022E32F8;
  v316[1] = v885;
  v316[3] = v316;
  sub_100B19C7C(v2, 196, &v313);
  sub_10011843C(v316);
  if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v313.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v309, "locationdRestartedDuringSession");
  char v311 = 0;
  v312[0] = off_1022E3378;
  v312[1] = v885;
  v312[3] = v312;
  sub_100B19C7C(v2, 197, &v309);
  sub_10011843C(v312);
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v309.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v305, "firstRequestTypeReceived");
  char v307 = 0;
  v308[0] = off_1022E33F8;
  v308[1] = v885;
  v308[3] = v308;
  sub_100B19C7C(v2, 198, &v305);
  sub_10011843C(v308);
  if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v305.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v301, "numStreamingRequests");
  char v303 = 0;
  v304[0] = off_1022E3478;
  v304[1] = v885;
  v304[3] = v304;
  sub_100B19C7C(v2, 199, &v301);
  sub_10011843C(v304);
  if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v301.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v297, "numUploadRequests");
  char v299 = 0;
  v300[0] = off_1022E34F8;
  v300[1] = v885;
  v300[3] = v300;
  sub_100B19C7C(v2, 200, &v297);
  sub_10011843C(v300);
  if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v297.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v293, "numDuplicateMediaSelections");
  char v295 = 0;
  v296[0] = off_1022E3578;
  v296[1] = v885;
  v296[3] = v296;
  sub_100B19C7C(v2, 201, &v293);
  sub_10011843C(v296);
  if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v293.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v289, "totalItems");
  char v291 = 0;
  v292[0] = off_1022E35F8;
  v292[1] = v885;
  v292[3] = v292;
  sub_100B19C7C(v2, 202, &v289);
  sub_10011843C(v292);
  if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v289.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v285, "numImages");
  char v287 = 0;
  v288[0] = off_1022E3678;
  v288[1] = v885;
  v288[3] = v288;
  sub_100B19C7C(v2, 203, &v285);
  sub_10011843C(v288);
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v285.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v281, "numVideos");
  char v283 = 0;
  v284[0] = off_1022E36F8;
  v284[1] = v885;
  v284[3] = v284;
  sub_100B19C7C(v2, 204, &v281);
  sub_10011843C(v284);
  if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v281.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v277, "batteryLevelChange");
  char v279 = 0;
  v280[0] = off_1022E3778;
  v280[1] = v885;
  v280[3] = v280;
  sub_100B19C7C(v2, 205, &v277);
  sub_10011843C(v280);
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v277.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v273, "powerSourceConnected");
  char v275 = 0;
  v276[0] = off_1022E37F8;
  v276[1] = v885;
  v276[3] = v276;
  sub_100B19C7C(v2, 206, &v273);
  sub_10011843C(v276);
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v273.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v269, "batteryLevelAtStartOfCall");
  char v271 = 0;
  v272[0] = off_1022E3878;
  v272[1] = v885;
  v272[3] = v272;
  sub_100B19C7C(v2, 207, &v269);
  sub_10011843C(v272);
  if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v269.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v265, "batteryLevelAtEndOfCall");
  char v267 = 0;
  v268[0] = off_1022E38F8;
  v268[1] = v885;
  v268[3] = v268;
  sub_100B19C7C(v2, 208, &v265);
  sub_10011843C(v268);
  if (SHIBYTE(v265.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v265.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v261, "partnerID");
  char v263 = 0;
  v264[0] = off_1022E3978;
  v264[1] = v885;
  v264[3] = v264;
  sub_100B19C7C(v2, 209, &v261);
  sub_10011843C(v264);
  if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v261.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v257, "psapID");
  char v259 = 0;
  v260[0] = off_1022E39F8;
  v260[1] = v885;
  v260[3] = v260;
  sub_100B19C7C(v2, 210, &v257);
  sub_10011843C(v260);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v257.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v253, "geofenceID");
  char v255 = 0;
  v256[0] = off_1022E3A78;
  v256[1] = v885;
  v256[3] = v256;
  sub_100B19C7C(v2, 211, &v253);
  sub_10011843C(v256);
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v253.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v249, "requestType");
  char v251 = 0;
  v252[0] = off_1022E3AF8;
  v252[1] = v885;
  v252[3] = v252;
  sub_100B19C7C(v2, 212, &v249);
  sub_10011843C(v252);
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v249.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v245, "requestStatusAtFirstUserResponse");
  char v247 = 0;
  v248[0] = off_1022E3B78;
  v248[1] = v885;
  v248[3] = v248;
  sub_100B19C7C(v2, 213, &v245);
  sub_10011843C(v248);
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v245.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v241, "requestStatusAtCallEnd");
  char v243 = 0;
  v244[0] = off_1022E3BF8;
  v244[1] = v885;
  v244[3] = v244;
  sub_100B19C7C(v2, 214, &v241);
  sub_10011843C(v244);
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v241.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v237, "receivedTimeSinceSessionStart");
  char v239 = 0;
  v240[0] = off_1022E3C78;
  v240[1] = v885;
  v240[3] = v240;
  sub_100B19C7C(v2, 215, &v237);
  sub_10011843C(v240);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v237.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v233, "receivedTimeToFirstUserResponse");
  char v235 = 0;
  v236[0] = off_1022E3CF8;
  v236[1] = v885;
  v236[3] = v236;
  sub_100B19C7C(v2, 216, &v233);
  sub_10011843C(v236);
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v233.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v229, "receivedTimeToAcceptTime");
  char v231 = 0;
  v232[0] = off_1022E3D78;
  v232[1] = v885;
  v232[3] = v232;
  sub_100B19C7C(v2, 217, &v229);
  sub_10011843C(v232);
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v229.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v225, "numMediaSelectIterations");
  char v227 = 0;
  v228[0] = off_1022E3DF8;
  v228[1] = v885;
  v228[3] = v228;
  sub_100B19C7C(v2, 218, &v225);
  sub_10011843C(v228);
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v225.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v221, "requestTransmissionTime");
  char v223 = 0;
  v224[0] = off_1022E3E78;
  v224[1] = v885;
  v224[3] = v224;
  sub_100B19C7C(v2, 219, &v221);
  sub_10011843C(v224);
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v217, "thermalLevelAtStartOfCall");
  char v219 = 0;
  v220[0] = off_1022E3EF8;
  v220[1] = v885;
  v220[3] = v220;
  sub_100B19C7C(v2, 220, &v217);
  sub_10011843C(v220);
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v217.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v213, "maxThermalLevelInCall");
  char v215 = 0;
  v216[0] = off_1022E3F78;
  v216[1] = v885;
  v216[3] = v216;
  sub_100B19C7C(v2, 221, &v213);
  sub_10011843C(v216);
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v213.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v209, "thermalLevelAtEndOfCall");
  char v211 = 0;
  v212[0] = off_1022E3FF8;
  v212[1] = v885;
  v212[3] = v212;
  sub_100B19C7C(v2, 222, &v209);
  sub_10011843C(v212);
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v209.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v205, "peakPowerAtStartOfCall");
  char v207 = 0;
  v208[0] = off_1022E4078;
  v208[1] = v885;
  v208[3] = v208;
  sub_100B19C7C(v2, 223, &v205);
  sub_10011843C(v208);
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v205.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v201, "maxPeakPowerInCall");
  char v203 = 0;
  v204[0] = off_1022E40F8;
  v204[1] = v885;
  v204[3] = v204;
  sub_100B19C7C(v2, 224, &v201);
  sub_10011843C(v204);
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v201.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v197, "peakPowerAtEndOfCall");
  char v199 = 0;
  v200[0] = off_1022E4178;
  v200[1] = v885;
  v200[3] = v200;
  sub_100B19C7C(v2, 225, &v197);
  sub_10011843C(v200);
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v197.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v193, "phoneNumberAvailability");
  char v195 = 0;
  v196[0] = off_1022E41F8;
  v196[1] = v885;
  v196[3] = v196;
  sub_100B19C7C(v2, 142, &v193);
  sub_10011843C(v196);
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v193.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v189, "timeSinceProvisioning");
  char v191 = 0;
  v192[0] = off_1022E4278;
  v192[1] = v885;
  v192[3] = v192;
  sub_100B19C7C(v2, 143, &v189);
  sub_10011843C(v192);
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v189.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v185, "timeWithoutNativeNumber");
  char v187 = 0;
  v188[0] = off_1022E42F8;
  v188[1] = v885;
  v188[3] = v188;
  sub_100B19C7C(v2, 144, &v185);
  sub_10011843C(v188);
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v185.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v181, "isEEDEnabledCarrier");
  char v183 = 0;
  v184[0] = off_1022E4378;
  v184[1] = v885;
  v184[3] = v184;
  sub_100B19C7C(v2, 145, &v181);
  sub_10011843C(v184);
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v181.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v177, "simInstance");
  char v179 = 0;
  v180[0] = off_1022E43F8;
  v180[1] = v885;
  float v180[3] = v180;
  sub_100B19C7C(v2, 146, &v177);
  sub_10011843C(v180);
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v177.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v173, "catalogDownloadDuration");
  char v175 = 0;
  v176[0] = off_1022E4478;
  v176[1] = v885;
  v176[3] = v176;
  sub_100B19C7C(v2, 147, &v173);
  sub_10011843C(v176);
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v173.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v169, "daysSinceLastCatalogDownloadAttempt");
  char v171 = 0;
  v172[0] = off_1022E44F8;
  v172[1] = v885;
  v172[3] = v172;
  sub_100B19C7C(v2, 148, &v169);
  sub_10011843C(v172);
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v169.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v165, "daysSinceLastCatalogDownloadSuccess");
  char v167 = 0;
  v168[0] = off_1022E4578;
  v168[1] = v885;
  v168[3] = v168;
  sub_100B19C7C(v2, 149, &v165);
  sub_10011843C(v168);
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v165.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v161, "aggressiveCatalogDownloadCriteriaUsed");
  char v163 = 0;
  v164[0] = off_1022E45F8;
  v164[1] = v885;
  v164[3] = v164;
  sub_100B19C7C(v2, 150, &v161);
  sub_10011843C(v164);
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v161.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v157, "catalogDownloadResult");
  char v159 = 0;
  v160[0] = off_1022E4678;
  v160[1] = v885;
  v160[3] = v160;
  sub_100B19C7C(v2, 151, &v157);
  sub_10011843C(v160);
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v157.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v153, "mobileAssetType");
  char v155 = 0;
  v156[0] = off_1022E46F8;
  v156[1] = v885;
  v156[3] = v156;
  sub_100B19C7C(v2, 152, &v153);
  sub_10011843C(v156);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v149, "assetDownloadDuration");
  char v151 = 0;
  v152[0] = off_1022E4778;
  v152[1] = v885;
  v152[3] = v152;
  sub_100B19C7C(v2, 153, &v149);
  sub_10011843C(v152);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v149.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v145, "daysSinceLastAssetDownloadAttempt");
  char v147 = 0;
  v148[0] = off_1022E47F8;
  v148[1] = v885;
  v148[3] = v148;
  sub_100B19C7C(v2, 154, &v145);
  sub_10011843C(v148);
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v145.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v141, "daysSinceLastAssetDownloadSuccess");
  char v143 = 0;
  v144[0] = off_1022E4878;
  v144[1] = v885;
  v144[3] = v144;
  sub_100B19C7C(v2, 155, &v141);
  sub_10011843C(v144);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v137, "assetDownloadResult");
  char v139 = 0;
  v140[0] = off_1022E48F8;
  v140[1] = v885;
  v140[3] = v140;
  sub_100B19C7C(v2, 156, &v137);
  sub_10011843C(v140);
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v137.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v133, "genericAssetUsed");
  char v135 = 0;
  v136[0] = off_1022E4978;
  v136[1] = v885;
  v136[3] = v136;
  sub_100B19C7C(v2, 157, &v133);
  sub_10011843C(v136);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v129, "mobileAssetComponent");
  char v131 = 0;
  v132[0] = off_1022E49F8;
  v132[1] = v885;
  v132[3] = v132;
  sub_100B19C7C(v2, 158, &v129);
  sub_10011843C(v132);
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v129.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v125, "mobileAssetVersion");
  char v127 = 0;
  v128[0] = off_1022E4A78;
  v128[1] = v885;
  v128[3] = v128;
  sub_100B19C7C(v2, 159, &v125);
  sub_10011843C(v128);
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v121, "daysSinceLastAssetDownloadAttempt");
  char v123 = 0;
  v124[0] = off_1022E4AF8;
  v124[1] = v885;
  v124[3] = v124;
  sub_100B19C7C(v2, 162, &v121);
  sub_10011843C(v124);
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v121.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v117, "daysSinceLastAssetDownloadSuccess");
  char v119 = 0;
  v120[0] = off_1022E4B78;
  v120[1] = v885;
  v120[3] = v120;
  sub_100B19C7C(v2, 163, &v117);
  sub_10011843C(v120);
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v117.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v113, "daysSinceLastCatalogDownloadAttempt");
  char v115 = 0;
  v116[0] = off_1022E4BF8;
  v116[1] = v885;
  v116[3] = v116;
  sub_100B19C7C(v2, 164, &v113);
  sub_10011843C(v116);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v113.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v109, "daysSinceLastCatalogDownloadSuccess");
  char v111 = 0;
  v112[0] = off_1022E4C78;
  v112[1] = v885;
  v112[3] = v112;
  sub_100B19C7C(v2, 165, &v109);
  sub_10011843C(v112);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v105, "aggressiveCatelogDownloadCriteriaUsed");
  char v107 = 0;
  v108[0] = off_1022E4CF8;
  v108[1] = v885;
  v108[3] = v108;
  sub_100B19C7C(v2, 160, &v105);
  sub_10011843C(v108);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v101, "mobileAssetType");
  char v103 = 0;
  v104[0] = off_1022E4D78;
  v104[1] = v885;
  v104[3] = v104;
  sub_100B19C7C(v2, 161, &v101);
  sub_10011843C(v104);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v97, "daysSinceLastAssetDownloadAttempt");
  char v99 = 0;
  v100[0] = off_1022E4DF8;
  v100[1] = v885;
  v100[3] = v100;
  sub_100B19C7C(v2, 166, &v97);
  sub_10011843C(v100);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v93, "daysSinceLastAssetDownloadSuccess");
  char v95 = 0;
  v96[0] = off_1022E4E78;
  v96[1] = v885;
  v96[3] = v96;
  sub_100B19C7C(v2, 167, &v93);
  sub_10011843C(v96);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v93.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v89, "daysSinceLastCatalogDownloadAttempt");
  char v91 = 0;
  v92[0] = off_1022E4EF8;
  v92[1] = v885;
  v92[3] = v92;
  sub_100B19C7C(v2, 168, &v89);
  sub_10011843C(v92);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v85, "daysSinceLastCatalogDownloadSuccess");
  char v87 = 0;
  v88[0] = off_1022E4F78;
  v88[1] = v885;
  v88[3] = v88;
  sub_100B19C7C(v2, 169, &v85);
  sub_10011843C(v88);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v81, "genericAssetUsed");
  char v83 = 0;
  v84[0] = off_1022E4FF8;
  v84[1] = v885;
  v84[3] = v84;
  sub_100B19C7C(v2, 170, &v81);
  sub_10011843C(v84);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v81.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v77, "mobileAssetComponent");
  char v79 = 0;
  v80[0] = off_1022E5078;
  v80[1] = v885;
  v80[3] = v80;
  sub_100B19C7C(v2, 171, &v77);
  sub_10011843C(v80);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v73, "mobileAssetVersion");
  char v75 = 0;
  v76[0] = off_1022E50F8;
  v76[1] = v885;
  v76[3] = v76;
  sub_100B19C7C(v2, 172, &v73);
  sub_10011843C(v76);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v69, "ERAResult");
  char v71 = 0;
  v72[0] = off_1022E5178;
  v72[1] = v885;
  v72[3] = v72;
  sub_100B19C7C(v2, 173, &v69);
  sub_10011843C(v72);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v65, "apiResponseTime");
  char v67 = 0;
  v68[0] = off_1022E51F8;
  v68[1] = v885;
  v68[3] = v68;
  sub_100B19C7C(v2, 174, &v65);
  sub_10011843C(v68);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v61, "placemarkLocCount");
  char v63 = 0;
  v64[0] = off_1022E5278;
  v64[1] = v885;
  v64[3] = v64;
  sub_100B19C7C(v2, 175, &v61);
  sub_10011843C(v64);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v57, "chosenPlacemarkLocConfidence");
  char v59 = 0;
  v60[0] = off_1022E52F8;
  v60[1] = v885;
  v60[3] = v60;
  sub_100B19C7C(v2, 176, &v57);
  sub_10011843C(v60);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v53, "chosenPlacemarkLocType");
  char v55 = 0;
  v56[0] = off_1022E5378;
  v56[1] = v885;
  v56[3] = v56;
  sub_100B19C7C(v2, 177, &v53);
  sub_10011843C(v56);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v49, "chosenPlacemarkLocSource");
  char v51 = 0;
  v52[0] = off_1022E53F8;
  v52[1] = v885;
  v52[3] = v52;
  sub_100B19C7C(v2, 178, &v49);
  sub_10011843C(v52);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v45, "placemarkLocDeviationFromE911Loc");
  char v47 = 0;
  v48[0] = off_1022E5478;
  v48[1] = v885;
  v48[3] = v48;
  sub_100B19C7C(v2, 179, &v45);
  sub_10011843C(v48);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v41, "placemarkLocDeviationFromCurrentDeviceLoc");
  char v43 = 0;
  v44[0] = off_1022E54F8;
  v44[1] = v885;
  v44[3] = v44;
  sub_100B19C7C(v2, 180, &v41);
  sub_10011843C(v44);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v37, "placemarkLocUncertainity");
  char v39 = 0;
  v40[0] = off_1022E5578;
  v40[1] = v885;
  v40[3] = v40;
  sub_100B19C7C(v2, 181, &v37);
  sub_10011843C(v40);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v33, "e911LocUncertainity");
  char v35 = 0;
  v36[0] = off_1022E55F8;
  v36[1] = v885;
  v36[3] = v36;
  sub_100B19C7C(v2, 182, &v33);
  sub_10011843C(v36);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v29, "subPremiseFromMeCard");
  char v31 = 0;
  v32[0] = off_1022E5678;
  v32[1] = v885;
  v32[3] = v32;
  sub_100B19C7C(v2, 183, &v29);
  sub_10011843C(v32);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v25, "lastInjectedAltAssistanceSource");
  char v27 = 0;
  v28[0] = off_1022E56F8;
  v28[1] = v885;
  v28[3] = v28;
  sub_100B19C7C(v2, 184, &v25);
  sub_10011843C(v28);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v21, "lastInjectedAltAssistanceUnc");
  char v23 = 0;
  v24[0] = off_1022E5778;
  v24[1] = v885;
  v24[3] = v24;
  sub_100B19C7C(v2, 185, &v21);
  sub_10011843C(v24);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v17, "bestWifiAltUncertainty");
  char v19 = 0;
  v20[0] = off_1022E57F8;
  v20[1] = v885;
  v20[3] = v20;
  sub_100B19C7C(v2, 186, &v17);
  sub_10011843C(v20);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v13, "bestRpaAltUncertainty");
  char v15 = 0;
  v16[0] = off_1022E5878;
  v16[1] = v885;
  v16[3] = v16;
  sub_100B19C7C(v2, 187, &v13);
  sub_10011843C(v16);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v9, "bestGpsAltUncertainty");
  char v11 = 0;
  v12[0] = off_1022E58F8;
  v12[1] = v885;
  v12[3] = v12;
  sub_100B19C7C(v2, 188, &v9);
  sub_10011843C(v12);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v5, "deviceInCMA");
  char v7 = 0;
  v8[0] = off_1022E5978;
  v8[1] = v885;
  v8[3] = v8;
  sub_100B19C7C(v2, 189, &v5);
  sub_10011843C(v8);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_100B18034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100B19CFC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100B18D20(uint64_t a1)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022DE9A8);
  }
  uint64_t v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ca,defineEventRecipies", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    char v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::defineEventRecipies()", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  uint64_t v3 = operator new(0xDCuLL);
  *(void *)uint64_t buf = v3;
  double v18 = (char *)v3 + 220;
  v3[10] = xmmword_101D73C58;
  v3[11] = unk_101D73C68;
  v3[12] = xmmword_101D73C78;
  *(_OWORD *)((char *)v3 + 204) = *(long long *)((char *)&xmmword_101D73C78 + 12);
  v3[6] = xmmword_101D73C18;
  v3[7] = unk_101D73C28;
  v3[8] = xmmword_101D73C38;
  v3[9] = unk_101D73C48;
  v3[2] = xmmword_101D73BD8;
  v3[3] = unk_101D73BE8;
  v3[4] = xmmword_101D73BF8;
  v3[5] = unk_101D73C08;
  *uint64_t v3 = *(_OWORD *)"%";
  v3[1] = *(_OWORD *)")";
  std::string v17 = (char *)v3 + 220;
  sub_100B19D38(a1, &xmmword_10248A8B8, buf);
  if (*(void *)buf)
  {
    std::string v17 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  uint64_t v4 = operator new(0x3CuLL);
  *(void *)uint64_t buf = v4;
  double v18 = (char *)v4 + 60;
  *uint64_t v4 = xmmword_101D73C94;
  v4[1] = unk_101D73CA4;
  v4[2] = xmmword_101D73CB4;
  *(_OWORD *)((char *)v4 + 44) = *(long long *)((char *)&xmmword_101D73CB4 + 12);
  std::string v17 = (char *)v4 + 60;
  sub_100B19D38(a1, &xmmword_10248A8E8, buf);
  if (*(void *)buf)
  {
    std::string v17 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  std::string v5 = operator new(0x80uLL);
  *(void *)uint64_t buf = v5;
  double v18 = (char *)(v5 + 8);
  v5[4] = xmmword_101D73D10;
  v5[5] = unk_101D73D20;
  v5[6] = xmmword_101D73D30;
  v5[7] = unk_101D73D40;
  *std::string v5 = xmmword_101D73CD0;
  v5[1] = unk_101D73CE0;
  v5[2] = xmmword_101D73CF0;
  fpos_t v5[3] = unk_101D73D00;
  std::string v17 = v5 + 8;
  sub_100B19D38(a1, &xmmword_10248A8D0, buf);
  if (*(void *)buf)
  {
    std::string v17 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  uint64_t v6 = (char *)operator new(0x14CuLL);
  char v7 = v6 + 332;
  *(void *)uint64_t buf = v6;
  double v18 = v6 + 332;
  memcpy(v6, &unk_101D73D50, 0x14CuLL);
  std::string v17 = v7;
  sub_100B19D38(a1, &xmmword_10248A918, buf);
  if (*(void *)buf)
  {
    std::string v17 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  uint64_t v8 = operator new(0x24uLL);
  *(void *)uint64_t buf = v8;
  double v18 = (char *)(v8 + 9);
  v8[8] = 61;
  *(_OWORD *)uint64_t v8 = xmmword_101D73E9C;
  *((_OWORD *)v8 + 1) = unk_101D73EAC;
  std::string v17 = v8 + 9;
  sub_100B19D38(a1, (long long *)&qword_10248A930, buf);
  if (*(void *)buf)
  {
    std::string v17 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  std::string v9 = operator new(0x18uLL);
  *(void *)uint64_t buf = v9;
  double v18 = (char *)(v9 + 3);
  v9[2] = 0x9800000097;
  *(_OWORD *)std::string v9 = xmmword_101D73EC0;
  std::string v17 = v9 + 3;
  sub_100B19D38(a1, &xmmword_10248A948, buf);
  if (*(void *)buf)
  {
    std::string v17 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  int v10 = operator new(0x1CuLL);
  *(void *)uint64_t buf = v10;
  double v18 = (char *)v10 + 28;
  _OWORD *v10 = xmmword_101D73ED8;
  *(_OWORD *)((char *)v10 + 12) = *(long long *)((char *)&xmmword_101D73ED8 + 12);
  std::string v17 = (char *)v10 + 28;
  sub_100B19D38(a1, &xmmword_10248A960, buf);
  if (*(void *)buf)
  {
    std::string v17 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  char v11 = operator new(0x18uLL);
  *(void *)uint64_t buf = v11;
  double v18 = (char *)(v11 + 3);
  v11[2] = 0xA5000000A4;
  *(_OWORD *)char v11 = xmmword_101D73EF4;
  std::string v17 = v11 + 3;
  sub_100B19D38(a1, &xmmword_10248A978, buf);
  if (*(void *)buf)
  {
    std::string v17 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  int v12 = operator new(0x1CuLL);
  *(void *)uint64_t buf = v12;
  double v18 = (char *)v12 + 28;
  *int v12 = xmmword_101D73F0C;
  *(_OWORD *)((char *)v12 + 12) = *(long long *)((char *)&xmmword_101D73F0C + 12);
  std::string v17 = (char *)v12 + 28;
  sub_100B19D38(a1, &xmmword_10248A990, buf);
  if (*(void *)buf)
  {
    std::string v17 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  std::string v13 = operator new(0x3CuLL);
  *(void *)uint64_t buf = v13;
  double v18 = (char *)v13 + 60;
  *std::string v13 = xmmword_101D73F28;
  v13[1] = unk_101D73F38;
  v13[2] = xmmword_101D73F48;
  *(_OWORD *)((char *)v13 + 44) = *(long long *)((char *)&xmmword_101D73F48 + 12);
  std::string v17 = (char *)v13 + 60;
  sub_100B19D38(a1, &xmmword_10248A900, buf);
  if (*(void *)buf)
  {
    std::string v17 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  int v14 = operator new(0x2CuLL);
  *(void *)uint64_t buf = v14;
  double v18 = (char *)v14 + 44;
  *int v14 = xmmword_101D73F64;
  v14[1] = unk_101D73F74;
  *(_OWORD *)((char *)v14 + 28) = unk_101D73F80;
  std::string v17 = (char *)v14 + 44;
  sub_100B19D38(a1, &xmmword_10248A9A8, buf);
  if (*(void *)buf)
  {
    std::string v17 = *(void **)buf;
    operator delete(*(void **)buf);
  }
}

void sub_100B192D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B1931C(uint64_t result)
{
  if (!*(void *)(result + 280)) {
    sub_1001AE6FC();
  }
  return result;
}

void sub_100B193EC(uint64_t a1)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022DE9A8);
  }
  uint64_t v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ca,registerForDaemonStatusNotification", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::registerForDaemonStatusNotification()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  if (!*(void *)(a1 + 288)) {
    sub_10060F068();
  }
}

uint64_t sub_100B19650(uint64_t result)
{
  if (!*(void *)(result + 296)) {
    sub_1007E0344();
  }
  return result;
}

uint64_t sub_100B19720(uint64_t result)
{
  if (!*(void *)(result + 264)) {
    sub_100561580();
  }
  return result;
}

uint64_t sub_100B199DC(uint64_t result)
{
  if (!*(void *)(result + 312)) {
    sub_1014CC69C();
  }
  return result;
}

void *sub_100B19C10(void *a1)
{
  *a1 = &off_1022DEA58;
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_1000DB114((uint64_t)(a1 + 21));
  sub_100B1BAF4((uint64_t)(a1 + 16));
  sub_100B1BB84((uint64_t)(a1 + 11));
  sub_100B1BC04((uint64_t)(a1 + 6));
  sub_100B1BC84(v2);
  return a1;
}

uint64_t sub_100B19C7C(uint64_t a1, int a2, const std::string *a3)
{
  int v7 = a2;
  uint64_t v8 = &v7;
  uint64_t v4 = (std::string *)sub_100B1C64C(a1 + 8, &v7, (uint64_t)&unk_101D0B290, &v8);
  std::string::operator=(v4 + 1, a3);
  std::string::value_type v5 = a3[1].__r_.__value_.__s.__data_[8];
  v4[2].__r_.__value_.__r.__words[0] = a3[1].__r_.__value_.__r.__words[0];
  v4[2].__r_.__value_.__s.__data_[8] = v5;
  sub_100B1C954(&v4[2].__r_.__value_.__r.__words[2], (uint64_t)&a3[1].__r_.__value_.__r.__words[2]);
  return 1;
}

uint64_t sub_100B19CFC(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unsigned __int8 *sub_100B19D38(uint64_t a1, long long *a2, void *a3)
{
  std::string v21 = a2;
  std::string::value_type v5 = sub_100B2CD2C(a1 + 88, (unsigned __int8 *)a2, (uint64_t)&unk_101D0B290, &v21);
  uint64_t v6 = (int **)(v5 + 40);
  *((void *)v5 + 6) = *((void *)v5 + 5);
  sub_1001F6538((void **)v5 + 5, (uint64_t)(a3[1] - *a3) >> 2);
  int v7 = (_DWORD *)*a3;
  uint64_t v8 = (_DWORD *)a3[1];
  if ((_DWORD *)*a3 != v8)
  {
    std::string v9 = v5 + 56;
    int v10 = (_DWORD *)*((void *)v5 + 6);
    do
    {
      if ((unint64_t)v10 >= *v9)
      {
        int v12 = *v6;
        uint64_t v13 = v10 - *v6;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          sub_1001D7FD4();
        }
        uint64_t v15 = *v9 - (void)v12;
        if (v15 >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          std::string v17 = (char *)sub_10017EA34((uint64_t)(v5 + 56), v16);
          int v12 = (int *)*((void *)v5 + 5);
          int v10 = (_DWORD *)*((void *)v5 + 6);
        }
        else
        {
          std::string v17 = 0;
        }
        double v18 = &v17[4 * v13];
        *(_DWORD *)double v18 = *v7;
        char v11 = v18 + 4;
        while (v10 != v12)
        {
          int v19 = *--v10;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        *((void *)v5 + 5) = v18;
        *((void *)v5 + 6) = v11;
        *((void *)v5 + 7) = &v17[4 * v16];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        _DWORD *v10 = *v7;
        char v11 = v10 + 1;
      }
      *((void *)v5 + 6) = v11;
      ++v7;
      int v10 = v11;
    }
    while (v7 != v8);
  }
  sub_100B2CC94(a1, v6);
  return v5 + 40;
}

CFStringRef sub_100B19EAC(uint64_t a1, int *a2)
{
  uint64_t v3 = (void *)(a1 + 48);
  if (!sub_10011853C((void *)(a1 + 48), a2)) {
    return &stru_10234F018;
  }
  uint64_t v4 = sub_10011853C(v3, a2);
  if (!v4) {
    sub_10000EDDC("unordered_map::at: key not found");
  }
  uint64_t v5 = *((unsigned int *)v4 + 12);
  if (v5 == -1) {
    sub_1003217E4();
  }
  uint64_t v8 = &v7;
  return (const __CFString *)((uint64_t (*)(char **, uint64_t *))off_1022E59E8[v5])(&v8, v4 + 3);
}

void sub_100B19F3C(uint64_t a1, int a2)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022DE9A8);
  }
  uint64_t v4 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ca,fillCountryAndBundleId,simInstance,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    v51[0] = 67109120;
    v51[1] = a2;
    unint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::fillCountryAndBundleId(int)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  if (a2 == 1)
  {
    *(_DWORD *)uint64_t buf = 17;
    int v10 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
    v51[0] = 59;
    sub_100134750(buf, (char *)[(__CFString *)v10 UTF8String]);
    long long v30 = *(_OWORD *)buf;
    uint64_t v31 = v53;
    uint64_t v53 = 0;
    memset(buf, 0, sizeof(buf));
    int v32 = 6;
    sub_100117AF0(a1, v51, (uint64_t)&v30);
    sub_100118010((uint64_t)&v30);
    if (SHIBYTE(v53) < 0) {
      operator delete(*(void **)buf);
    }
    *(_DWORD *)uint64_t buf = 16;
    char v11 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
    v51[0] = 58;
    sub_100134750(buf, (char *)[(__CFString *)v11 UTF8String]);
    long long v27 = *(_OWORD *)buf;
    uint64_t v28 = v53;
    uint64_t v53 = 0;
    memset(buf, 0, sizeof(buf));
    int v29 = 6;
    sub_100117AF0(a1, v51, (uint64_t)&v27);
    sub_100118010((uint64_t)&v27);
    if (SHIBYTE(v53) < 0) {
      operator delete(*(void **)buf);
    }
    v51[0] = 140;
    sub_100134750(buf, (char *)[(__CFString *)v10 UTF8String]);
    long long v24 = *(_OWORD *)buf;
    uint64_t v25 = v53;
    uint64_t v53 = 0;
    memset(buf, 0, sizeof(buf));
    int v26 = 6;
    sub_100117AF0(a1, v51, (uint64_t)&v24);
    sub_100118010((uint64_t)&v24);
    if (SHIBYTE(v53) < 0) {
      operator delete(*(void **)buf);
    }
    v51[0] = 139;
    sub_100134750(buf, (char *)[(__CFString *)v11 UTF8String]);
    long long v21 = *(_OWORD *)buf;
    uint64_t v22 = v53;
    uint64_t v53 = 0;
    memset(buf, 0, sizeof(buf));
    int v23 = 6;
    sub_100117AF0(a1, v51, (uint64_t)&v21);
    sub_100118010((uint64_t)&v21);
    if (SHIBYTE(v53) < 0) {
      operator delete(*(void **)buf);
    }
    *(_DWORD *)uint64_t buf = 19;
    int v12 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
    v51[0] = 61;
    sub_100134750(buf, (char *)[(__CFString *)v12 UTF8String]);
    long long v18 = *(_OWORD *)buf;
    uint64_t v19 = v53;
    uint64_t v53 = 0;
    memset(buf, 0, sizeof(buf));
    int v20 = 6;
    sub_100117AF0(a1, v51, (uint64_t)&v18);
    sub_100118010((uint64_t)&v18);
    if (SHIBYTE(v53) < 0) {
      operator delete(*(void **)buf);
    }
    *(_DWORD *)uint64_t buf = 18;
    uint64_t v13 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
    v51[0] = 60;
    sub_100134750(buf, (char *)[(__CFString *)v13 UTF8String]);
    long long v15 = *(_OWORD *)buf;
    uint64_t v16 = v53;
    uint64_t v53 = 0;
    memset(buf, 0, sizeof(buf));
    int v17 = 6;
    sub_100117AF0(a1, v51, (uint64_t)&v15);
    std::string v9 = &v15;
  }
  else
  {
    if (a2) {
      return;
    }
    *(_DWORD *)uint64_t buf = 7;
    uint64_t v5 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
    v51[0] = 59;
    sub_100134750(buf, (char *)[(__CFString *)v5 UTF8String]);
    long long v48 = *(_OWORD *)buf;
    uint64_t v49 = v53;
    uint64_t v53 = 0;
    memset(buf, 0, sizeof(buf));
    int v50 = 6;
    sub_100117AF0(a1, v51, (uint64_t)&v48);
    sub_100118010((uint64_t)&v48);
    if (SHIBYTE(v53) < 0) {
      operator delete(*(void **)buf);
    }
    *(_DWORD *)uint64_t buf = 6;
    uint64_t v6 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
    v51[0] = 58;
    sub_100134750(buf, (char *)[(__CFString *)v6 UTF8String]);
    long long v45 = *(_OWORD *)buf;
    uint64_t v46 = v53;
    uint64_t v53 = 0;
    memset(buf, 0, sizeof(buf));
    int v47 = 6;
    sub_100117AF0(a1, v51, (uint64_t)&v45);
    sub_100118010((uint64_t)&v45);
    if (SHIBYTE(v53) < 0) {
      operator delete(*(void **)buf);
    }
    v51[0] = 140;
    sub_100134750(buf, (char *)[(__CFString *)v5 UTF8String]);
    long long v42 = *(_OWORD *)buf;
    uint64_t v43 = v53;
    uint64_t v53 = 0;
    memset(buf, 0, sizeof(buf));
    int v44 = 6;
    sub_100117AF0(a1, v51, (uint64_t)&v42);
    sub_100118010((uint64_t)&v42);
    if (SHIBYTE(v53) < 0) {
      operator delete(*(void **)buf);
    }
    v51[0] = 139;
    sub_100134750(buf, (char *)[(__CFString *)v6 UTF8String]);
    long long v39 = *(_OWORD *)buf;
    uint64_t v40 = v53;
    uint64_t v53 = 0;
    memset(buf, 0, sizeof(buf));
    int v41 = 6;
    sub_100117AF0(a1, v51, (uint64_t)&v39);
    sub_100118010((uint64_t)&v39);
    if (SHIBYTE(v53) < 0) {
      operator delete(*(void **)buf);
    }
    *(_DWORD *)uint64_t buf = 11;
    char v7 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
    v51[0] = 61;
    sub_100134750(buf, (char *)[(__CFString *)v7 UTF8String]);
    long long v36 = *(_OWORD *)buf;
    uint64_t v37 = v53;
    uint64_t v53 = 0;
    memset(buf, 0, sizeof(buf));
    int v38 = 6;
    sub_100117AF0(a1, v51, (uint64_t)&v36);
    sub_100118010((uint64_t)&v36);
    if (SHIBYTE(v53) < 0) {
      operator delete(*(void **)buf);
    }
    *(_DWORD *)uint64_t buf = 10;
    uint64_t v8 = (__CFString *)sub_100B19EAC(a1, (int *)buf);
    v51[0] = 60;
    sub_100134750(buf, (char *)[(__CFString *)v8 UTF8String]);
    long long v33 = *(_OWORD *)buf;
    uint64_t v34 = v53;
    uint64_t v53 = 0;
    memset(buf, 0, sizeof(buf));
    int v35 = 6;
    sub_100117AF0(a1, v51, (uint64_t)&v33);
    std::string v9 = &v33;
  }
  sub_100118010((uint64_t)v9);
  if (SHIBYTE(v53) < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_100B1A628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  sub_100118010((uint64_t)&a11);
  if (a66 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100B1A6D8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 208), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DEA68);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAnalyticsLogger::onWifiServiceNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DEA68);
    }
    std::string v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAnalyticsLogger::onWifiServiceNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100B1A8B4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100B1A894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B1A8B4(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 == 6)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    uint64_t v6 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      if (*(unsigned char *)(a4 + 96)) {
        BOOL v7 = *(_DWORD *)(a4 + 48) <= 0;
      }
      else {
        BOOL v7 = 1;
      }
      int v8 = !v7;
      *(_DWORD *)uint64_t buf = 67109120;
      int v24 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ca,received wifi service link status,%d,", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      if (*(unsigned char *)(a4 + 96)) {
        BOOL v14 = *(_DWORD *)(a4 + 48) <= 0;
      }
      else {
        BOOL v14 = 1;
      }
      int v15 = !v14;
      int v21 = 67109120;
      int v22 = v15;
      __int16 v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::onWifiServiceNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    *(_DWORD *)uint64_t buf = 24;
    if (*(unsigned char *)(a4 + 96)) {
      BOOL v9 = *(_DWORD *)(a4 + 48) <= 0;
    }
    else {
      BOOL v9 = 1;
    }
    char v10 = !v9;
    v19[0] = v10;
    int v20 = 7;
    sub_100117AF0(a1, (int *)buf, (uint64_t)v19);
    sub_100118010((uint64_t)v19);
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    int v12 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      int v13 = *a3;
      *(_DWORD *)uint64_t buf = 67174657;
      int v24 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#ca, received unhandled wifi service notification,%{private}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      int v17 = *a3;
      int v21 = 67174657;
      int v22 = v17;
      __int16 v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::onWifiServiceNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
}

void sub_100B1AC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100118010((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100B1AC44(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 208), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DEA68);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAnalyticsLogger::onClientManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DEA68);
    }
    BOOL v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAnalyticsLogger::onClientManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100B1AE20(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100B1AE00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B1AE20(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 4)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    uint64_t v6 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(_DWORD *)(a1 + 216);
      int v8 = *(_DWORD *)(a4 + 188);
      *(_DWORD *)uint64_t buf = 67240448;
      int v13 = v7;
      __int16 v14 = 1026;
      int v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ca,LS Toggle,prev,%{public}d,now,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      char v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    int v9 = *(_DWORD *)(a1 + 216);
    int v10 = *(_DWORD *)(a4 + 188);
    if (!v9 && v10 == 1 || v9 == 1 && !v10) {
      *(_DWORD *)(a1 + 216) = v10;
    }
  }
}

void sub_100B1B028(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 208), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DEA68);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAnalyticsLogger::onDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DEA68);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAnalyticsLogger::onDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100B1B204(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100B1B1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B1B204(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  int v5 = *a3;
  if (*a3 == 15)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    int v10 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      int v11 = *(unsigned __int8 *)a4;
      *(_DWORD *)uint64_t buf = 68289282;
      int v16 = 0;
      __int16 v17 = 2082;
      __int16 v18 = "";
      __int16 v19 = 1026;
      int v20 = v11;
      int v12 = "{\"msg%{public}.0s\":\"#ca received daemon status batterSaveMode\", \"BatterySaverMode\":%{public}d}";
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, v12, buf, 0x18u);
    }
  }
  else
  {
    if (v5 != 8)
    {
      if (v5 == 6)
      {
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022DE9A8);
        }
        uint64_t v7 = qword_102419608;
        if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
        {
          int v8 = *a4;
          int v9 = a4[1];
          *(_DWORD *)uint64_t buf = 68289538;
          int v16 = 0;
          __int16 v17 = 2082;
          __int16 v18 = "";
          __int16 v19 = 1026;
          int v20 = v8;
          __int16 v21 = 1026;
          int v22 = v9;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ca,received daemon status reachability change\", \"ReachabilityOld\":%{public}d, \"ReachabilityNew\":%{public}d}", buf, 0x1Eu);
        }
        *(_DWORD *)uint64_t buf = 26;
        v14[0] = a4[1];
        v14[6] = 0;
        sub_100117AF0(a1, (int *)buf, (uint64_t)v14);
        sub_100118010((uint64_t)v14);
      }
      return;
    }
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    int v10 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      int v13 = *(unsigned __int8 *)a4;
      *(_DWORD *)uint64_t buf = 68289282;
      int v16 = 0;
      __int16 v17 = 2082;
      __int16 v18 = "";
      __int16 v19 = 1026;
      int v20 = v13;
      int v12 = "{\"msg%{public}.0s\":\"#ca received daemon status airplaneMode\", \"AirplaneMode\":%{public}d}";
      goto LABEL_17;
    }
  }
}

void sub_100B1B470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100B1B484(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 208), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DEA68);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAnalyticsLogger::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DEA68);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAnalyticsLogger::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100B1B660(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100B1B640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B1B660(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 1)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    uint64_t v6 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      *(void *)uint64_t buf = 68289282;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2114;
      *(void *)&buf[20] = sub_1000E9358(a4);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ca,Asset notification,CLMobileAssetManager_Type::kNotificationEmergencyCarrierSettings\", \"Asset data:\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    int v20 = 29;
    std::to_string(&v15, *(_DWORD *)(a4 + 20));
    uint64_t v7 = std::string::append(&v15, ".");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(void *)&uint8_t buf[16] = *((void *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t buf = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v14, *(_DWORD *)(a4 + 16));
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v9 = &v14;
    }
    else {
      int v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v14.__r_.__value_.__l.__size_;
    }
    char v11 = std::string::append((std::string *)buf, (const std::string::value_type *)v9, size);
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[0];
    v21[0] = v11->__r_.__value_.__l.__size_;
    *(void *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
    char v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    *(void *)&v17[7] = *(void *)((char *)v21 + 7);
    std::string::size_type v16 = v12;
    *(void *)__int16 v17 = v21[0];
    char v18 = v13;
    int v19 = 6;
    sub_100117AF0(a1, &v20, (uint64_t)&v16);
    sub_100118010((uint64_t)&v16);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
}

void sub_100B1B854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  sub_100118010((uint64_t)&a22);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v22 - 57) < 0) {
    operator delete(*(void **)(v22 - 80));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_100B1B90C(void *a1)
{
  sub_100B2D274(a1);

  operator delete();
}

void sub_100B1B944(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

NSNumber *sub_100B1B974(uint64_t a1, unsigned int *a2)
{
  return +[NSNumber numberWithInt:*a2];
}

NSNumber *sub_100B1B984(uint64_t a1, void *a2)
{
  return +[NSNumber numberWithLongLong:*a2];
}

NSNumber *sub_100B1B994(uint64_t a1, void *a2)
{
  return +[NSNumber numberWithUnsignedLongLong:*a2];
}

NSNumber *sub_100B1B9A4(uint64_t a1, unsigned int *a2)
{
  return +[NSNumber numberWithUnsignedInt:*a2];
}

NSNumber *sub_100B1B9B4(double a1, uint64_t a2, _DWORD *a3)
{
  LODWORD(a1) = *a3;
  return +[NSNumber numberWithFloat:a1];
}

NSNumber *sub_100B1B9C4(uint64_t a1, double *a2)
{
  return +[NSNumber numberWithDouble:*a2];
}

NSString *sub_100B1B9D4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
  }
  if (v6 >= 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  uint64_t v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2, __p[0], __p[1], v6);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_100B1BA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSNumber *sub_100B1BA78(uint64_t a1, unsigned __int8 *a2)
{
  return +[NSNumber numberWithBool:*a2];
}

void sub_100B1BA8C(void *a1)
{
  sub_100B19C10(a1);

  operator delete();
}

void sub_100B1BAC4(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100B1BAF4(uint64_t a1)
{
  sub_100B1BB30(a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100B1BB30(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *(char **)v2;
      uint64_t v4 = (void **)(v2 + 24);
      sub_1000A7B4C(&v4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_100B1BB84(uint64_t a1)
{
  sub_100B1BBC0(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100B1BBC0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_1005103F8((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_100B1BC04(uint64_t a1)
{
  sub_100B1BC40(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100B1BC40(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100118010((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_100B1BC84(uint64_t a1)
{
  sub_100B1BCC0(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100B1BCC0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100B1BD04((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100B1BD04(uint64_t a1)
{
  sub_10011843C((void *)(a1 + 48));
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

void *sub_100B1BD54()
{
}

void *sub_100B1BD60()
{
}

void *sub_100B1BD6C()
{
}

void *sub_100B1BD78()
{
}

void *sub_100B1BD84()
{
}

void *sub_100B1BD90()
{
}

uint64_t sub_100B1BD9C()
{
  return 0;
}

void *sub_100B1BDA4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DEAD8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1BDEC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DEAD8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B1BE18(uint64_t a1, uint64_t a2)
{
  return sub_100B1BE6C((uint64_t (**)(unsigned char *))(a1 + 8), a2);
}

uint64_t sub_100B1BE20(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_1022DEB58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1BE60()
{
  return &off_1022DEB58;
}

uint64_t sub_100B1BE6C(uint64_t (**a1)(unsigned char *), uint64_t a2)
{
  uint64_t v2 = *a1;
  sub_10011885C((uint64_t)v5, a2);
  uint64_t v3 = v2(v5);
  sub_100118010((uint64_t)v5);
  return v3;
}

void sub_100B1BEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100B1BEC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100118010((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
}

uint64_t sub_100B1BF20(uint64_t *a1, void *a2, void *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 24) != 1) {
    return sub_100B1C064(result, a3);
  }
  *a2 = *a3;
  return result;
}

uint64_t sub_100B1BF44(uint64_t *a1, void *a2, void *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 24) != 2) {
    return sub_100B1C0CC(result, a3);
  }
  *a2 = *a3;
  return result;
}

_DWORD *sub_100B1BF68(_DWORD **a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result = *a1;
  if (result[6] != 3) {
    return sub_100B1C134(result, a3);
  }
  *a2 = *a3;
  return result;
}

_DWORD *sub_100B1BF8C(_DWORD **a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result = *a1;
  if (result[6] != 4) {
    return sub_100B1C1A4(result, a3);
  }
  *a2 = *a3;
  return result;
}

uint64_t sub_100B1BFB0(uint64_t *a1, void *a2, void *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 24) != 5) {
    return sub_100B1C20C(result, a3);
  }
  *a2 = *a3;
  return result;
}

uint64_t sub_100B1BFD4(uint64_t *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 24) != 7) {
    return sub_100B1C37C(result, a3);
  }
  *a2 = *a3;
  return result;
}

_DWORD *sub_100B1BFF8(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = a1[6];
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))off_1022DE9C8[v4])(&v6, a1);
  }
  a1[6] = -1;
  *a1 = *a2;
  a1[6] = 0;
  return a1;
}

uint64_t sub_100B1C064(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1022DE9C8[v4])(&v6, a1);
  }
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

uint64_t sub_100B1C0CC(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1022DE9C8[v4])(&v6, a1);
  }
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 2;
  return a1;
}

_DWORD *sub_100B1C134(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = a1[6];
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))off_1022DE9C8[v4])(&v6, a1);
  }
  a1[6] = -1;
  *a1 = *a2;
  a1[6] = 3;
  return a1;
}

_DWORD *sub_100B1C1A4(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = a1[6];
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))off_1022DE9C8[v4])(&v6, a1);
  }
  *a1 = *a2;
  a1[6] = 4;
  return a1;
}

uint64_t sub_100B1C20C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1022DE9C8[v4])(&v6, a1);
  }
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 5;
  return a1;
}

void sub_100B1C274(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (*(char *)(v1 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)v1, *(void *)(v1 + 8));
  }
  else
  {
    long long v3 = *(_OWORD *)v1;
    uint64_t v5 = *(void *)(v1 + 16);
    *(_OWORD *)std::string __p = v3;
  }
  sub_100B1C2FC(v2, (long long *)__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100B1C2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B1C2FC(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1022DE9C8[v4])(&v7, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  long long v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a1 + 24) = 6;
  return a1;
}

uint64_t sub_100B1C37C(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1022DE9C8[v4])(&v6, a1);
  }
  *(unsigned char *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 7;
  return a1;
}

void sub_100B1C3E4(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_100B1C414(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  __int16 v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)sub_1002E5328(v7, v9);
  }
  else {
    int v10 = 0;
  }
  char v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  std::string v15 = v11;
  std::string::size_type v16 = &v10[40 * v9];
  *(_DWORD *)char v11 = *a2;
  sub_100118070((uint64_t)(v11 + 8), (uint64_t)(a2 + 2));
  v15 += 40;
  sub_100682E84(a1, v14);
  uint64_t v12 = a1[1];
  sub_100682F18((uint64_t)v14);
  return v12;
}

void sub_100B1C510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100682F18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100B1C528()
{
}

void *sub_100B1C53C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DEBE8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1C584(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DEBE8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B1C5B0(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B1C600(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1C640()
{
}

uint64_t *sub_100B1C64C(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = a1 + 16;
  std::string v14 = (char *)operator new(0x60uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)std::string v14 = 0;
  *((void *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((void *)v14 + 8) = off_1022DEAD8;
  *((void *)v14 + 9) = sub_100B1BD9C;
  *((void *)v14 + 11) = v14 + 64;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100100330(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  __int16 v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *__int16 v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  uint64_t i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  sub_100B1C8FC((uint64_t)v24, 0);
  return i;
}

void sub_100B1C8E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100B1C8FC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_100B1C8FC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100B1BD04((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *sub_100B1C954(void *a1, uint64_t a2)
{
  sub_1001185F0((uint64_t)v4, a2);
  sub_100B1C9C8(v4, a1);
  sub_10011843C(v4);
  return a1;
}

void *sub_100B1C9C8(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100B1CC28(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_100B1CC38()
{
}

void *sub_100B1CC4C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DEC78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1CC94(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DEC78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B1CCC0(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B1CD10(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1CD50()
{
}

void sub_100B1CD60()
{
}

void *sub_100B1CD74(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DECF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1CDBC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DECF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B1CDE8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B1CE38(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1CE78()
{
}

void sub_100B1CE88()
{
}

void *sub_100B1CE9C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DED78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1CEE4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DED78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B1CF10(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B1CF60(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1CFA0()
{
}

void sub_100B1CFB0()
{
}

void *sub_100B1CFC4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DEDF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1D010(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1D050()
{
}

void sub_100B1D060()
{
}

void *sub_100B1D074(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DEE78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1D0C0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1D100()
{
}

void sub_100B1D110()
{
}

void *sub_100B1D124(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DEEF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1D16C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DEEF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B1D198(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B1D1E8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1D228()
{
}

void sub_100B1D238()
{
}

void *sub_100B1D24C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DEF78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1D294(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DEF78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B1D2C0(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B1D310(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1D350()
{
}

void sub_100B1D360()
{
}

void *sub_100B1D374(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DEFF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1D3BC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DEFF8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B1D3E8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)&v4, a2);
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1000DC48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100118010((uint64_t)&v4);
  return v2 == 6;
}

void sub_100B1D46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100B1D480(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1D4C0()
{
}

void sub_100B1D4D0()
{
}

void *sub_100B1D4E4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DF078;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1D52C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DF078;
  a2[1] = v2;
  return result;
}

BOOL sub_100B1D558(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)&v4, a2);
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1000DC48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100118010((uint64_t)&v4);
  return v2 == 6;
}

void sub_100B1D5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100B1D5F0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1D630()
{
}

void sub_100B1D640()
{
}

void *sub_100B1D654(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DF0F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1D69C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DF0F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B1D6C8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)&v4, a2);
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1000DC48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100118010((uint64_t)&v4);
  return v2 == 6;
}

void sub_100B1D74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100B1D760(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1D7A0()
{
}

void sub_100B1D7B0()
{
}

void *sub_100B1D7C4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DF178;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1D80C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DF178;
  a2[1] = v2;
  return result;
}

BOOL sub_100B1D838(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)&v4, a2);
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1000DC48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100118010((uint64_t)&v4);
  return v2 == 6;
}

void sub_100B1D8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100B1D8D0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1D910()
{
}

void sub_100B1D920()
{
}

void *sub_100B1D934(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DF1F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1D97C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DF1F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B1D9A8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)&v4, a2);
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1000DC48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100118010((uint64_t)&v4);
  return v2 == 6;
}

void sub_100B1DA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100B1DA40(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1DA80()
{
}

void sub_100B1DA90()
{
}

void *sub_100B1DAA4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DF278;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1DAEC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DF278;
  a2[1] = v2;
  return result;
}

BOOL sub_100B1DB18(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)&v4, a2);
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1000DC48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100118010((uint64_t)&v4);
  return v2 == 6;
}

void sub_100B1DB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100B1DBB0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1DBF0()
{
}

void sub_100B1DC00()
{
}

void *sub_100B1DC14(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DF2F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1DC60(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1DCA0()
{
}

void sub_100B1DCB0()
{
}

void *sub_100B1DCC4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DF378;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1DD0C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DF378;
  a2[1] = v2;
  return result;
}

BOOL sub_100B1DD38(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)&v4, a2);
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1000DC48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100118010((uint64_t)&v4);
  return v2 == 6;
}

void sub_100B1DDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100B1DDD0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1DE10()
{
}

void sub_100B1DE20()
{
}

void *sub_100B1DE34(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DF3F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1DE7C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DF3F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B1DEA8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)&v4, a2);
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1000DC48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100118010((uint64_t)&v4);
  return v2 == 6;
}

void sub_100B1DF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100B1DF40(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1DF80()
{
}

void sub_100B1DF90()
{
}

void *sub_100B1DFA4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DF478;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1DFEC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DF478;
  a2[1] = v2;
  return result;
}

BOOL sub_100B1E018(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)&v4, a2);
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1000DC48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100118010((uint64_t)&v4);
  return v2 == 6;
}

void sub_100B1E09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100B1E0B0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1E0F0()
{
}

void sub_100B1E100()
{
}

void *sub_100B1E114(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DF4F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1E15C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DF4F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B1E188(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)&v4, a2);
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1000DC48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100118010((uint64_t)&v4);
  return v2 == 6;
}

void sub_100B1E20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100B1E220(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1E260()
{
}

void sub_100B1E270()
{
}

void *sub_100B1E284(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DF578;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1E2CC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DF578;
  a2[1] = v2;
  return result;
}

BOOL sub_100B1E2F8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)&v4, a2);
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1000DC48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100118010((uint64_t)&v4);
  return v2 == 6;
}

void sub_100B1E37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100B1E390(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1E3D0()
{
}

void sub_100B1E3E0()
{
}

void *sub_100B1E3F4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DF5F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1E43C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DF5F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B1E468(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)&v4, a2);
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1000DC48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100118010((uint64_t)&v4);
  return v2 == 6;
}

void sub_100B1E4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100B1E500(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1E540()
{
}

void sub_100B1E550()
{
}

void *sub_100B1E564(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DF678;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1E5AC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DF678;
  a2[1] = v2;
  return result;
}

BOOL sub_100B1E5D8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)&v4, a2);
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1000DC48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100118010((uint64_t)&v4);
  return v2 == 6;
}

void sub_100B1E65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100B1E670(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1E6B0()
{
}

void sub_100B1E6C0()
{
}

void *sub_100B1E6D4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DF6F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1E71C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DF6F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B1E748(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  if (v4[6]) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = v4[0] < 2u || v4[0] == 255;
  }
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B1E7A8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1E7E8()
{
}

void sub_100B1E7F8()
{
}

void *sub_100B1E80C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DF778;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1E858(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1E898()
{
}

void sub_100B1E8A8()
{
}

void *sub_100B1E8BC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DF7F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1E904(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DF7F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B1E930(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0xDu;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B1E97C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1E9BC()
{
}

void sub_100B1E9CC()
{
}

void *sub_100B1E9E0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DF878;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1EA28(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DF878;
  a2[1] = v2;
  return result;
}

BOOL sub_100B1EA54(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 7;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B1EA98(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1EAD8()
{
}

void sub_100B1EAE8()
{
}

void *sub_100B1EAFC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DF8F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1EB44(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DF8F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B1EB70(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E9u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B1EBC0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1EC00()
{
}

void sub_100B1EC10()
{
}

void *sub_100B1EC24(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DF978;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1EC6C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DF978;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B1EC98(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B1ECE4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1ED24()
{
}

void sub_100B1ED34()
{
}

void *sub_100B1ED48(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DF9F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1ED90(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DF9F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B1EDBC(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)&v4, a2);
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1000DC48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100118010((uint64_t)&v4);
  return v2 == 6;
}

void sub_100B1EE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100B1EE54(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1EE94()
{
}

void sub_100B1EEA4()
{
}

void *sub_100B1EEB8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DFA78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1EF00(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DFA78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B1EF2C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x14u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B1EF78(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1EFB8()
{
}

void sub_100B1EFC8()
{
}

void *sub_100B1EFDC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DFAF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1F024(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DFAF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B1F050(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B1F09C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1F0DC()
{
}

void sub_100B1F0EC()
{
}

void *sub_100B1F100(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DFB78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1F148(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DFB78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B1F174(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B1F1C0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1F200()
{
}

void sub_100B1F210()
{
}

void *sub_100B1F224(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DFBF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1F26C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DFBF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B1F298(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B1F2E4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1F324()
{
}

void sub_100B1F334()
{
}

void *sub_100B1F348(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DFC78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1F390(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DFC78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B1F3BC(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B1F408(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1F448()
{
}

void sub_100B1F458()
{
}

void *sub_100B1F46C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DFCF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1F4B4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DFCF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B1F4E0(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B1F52C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1F56C()
{
}

void sub_100B1F57C()
{
}

void *sub_100B1F590(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DFD78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1F5D8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DFD78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B1F604(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B1F650(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1F690()
{
}

void sub_100B1F6A0()
{
}

void *sub_100B1F6B4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DFDF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1F6FC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DFDF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B1F728(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 7u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B1F774(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1F7B4()
{
}

void sub_100B1F7C4()
{
}

void *sub_100B1F7D8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DFE78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1F820(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DFE78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B1F84C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B1F898(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1F8D8()
{
}

void sub_100B1F8E8()
{
}

void *sub_100B1F8FC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DFEF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1F944(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DFEF8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B1F970(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] <= 90.0 && v4[0] >= -90.0;
  }
  else {
    BOOL v2 = 0;
  }
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B1F9E0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1FA20()
{
}

void sub_100B1FA30()
{
}

void *sub_100B1FA44(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DFF78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1FA8C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DFF78;
  a2[1] = v2;
  return result;
}

BOOL sub_100B1FAB8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] <= 180.0 && v4[0] >= -180.0;
  }
  else {
    BOOL v2 = 0;
  }
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B1FB28(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1FB68()
{
}

void sub_100B1FB78()
{
}

void *sub_100B1FB8C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022DFFF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1FBD4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DFFF8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B1FC00(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  BOOL v3 = v5[0] >= -500.0 && LODWORD(v5[6]) == 4;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B1FC54(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1FC94()
{
}

void sub_100B1FCA4()
{
}

void *sub_100B1FCB8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E0078;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1FD00(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E0078;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B1FD2C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B1FD78(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1FDB8()
{
}

void sub_100B1FDC8()
{
}

void *sub_100B1FDDC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E00F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1FE24(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E00F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B1FE50(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B1FE9C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B1FEDC()
{
}

void sub_100B1FEEC()
{
}

void *sub_100B1FF00(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E0178;
  result[1] = v3;
  return result;
}

uint64_t sub_100B1FF48(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E0178;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B1FF74(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B1FFC0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B20000()
{
}

void sub_100B20010()
{
}

void *sub_100B20024(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E01F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2006C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E01F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B20098(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 0;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B200DC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2011C()
{
}

void sub_100B2012C()
{
}

void *sub_100B20140(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E0278;
  result[1] = v3;
  return result;
}

uint64_t sub_100B20188(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E0278;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B201B4(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = (v5[0] - 1) >= 0x77;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B20208(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B20248()
{
}

void sub_100B20258()
{
}

void *sub_100B2026C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E02F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B202B4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E02F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B202E0(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = (v5[0] - 1) >= 0x77;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B20334(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B20374()
{
}

void sub_100B20384()
{
}

void *sub_100B20398(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E0378;
  result[1] = v3;
  return result;
}

uint64_t sub_100B203E0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E0378;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B2040C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 4u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B20458(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B20498()
{
}

void sub_100B204A8()
{
}

void *sub_100B204BC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E03F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B20504(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E03F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B20530(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 7;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B20574(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B205B4()
{
}

void sub_100B205C4()
{
}

void *sub_100B205D8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E0478;
  result[1] = v3;
  return result;
}

uint64_t sub_100B20620(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E0478;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B2064C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x27u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B2069C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B206DC()
{
}

void sub_100B206EC()
{
}

void *sub_100B20700(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E04F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B20748(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E04F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B20774(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 6u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B207C0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B20800()
{
}

void sub_100B20810()
{
}

void *sub_100B20824(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E0578;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2086C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E0578;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B20898(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B208E4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B20924()
{
}

void sub_100B20934()
{
}

void *sub_100B20948(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E05F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B20990(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E05F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B209BC(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0xBu;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B20A08(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B20A48()
{
}

void sub_100B20A58()
{
}

void *sub_100B20A6C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E0678;
  result[1] = v3;
  return result;
}

uint64_t sub_100B20AB4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E0678;
  a2[1] = v2;
  return result;
}

BOOL sub_100B20AE0(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)&v4, a2);
  if (v5 == 6)
  {
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000DC48C(&__str, v4.__r_.__value_.__l.__data_, v4.__r_.__value_.__l.__size_);
    }
    else {
      std::string __str = v4;
    }
    BOOL v2 = (std::stoi(&__str, 0, 10) - 1) < 0xB;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    BOOL v2 = 0;
  }
  sub_100118010((uint64_t)&v4);
  return v2;
}

void sub_100B20B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

uint64_t sub_100B20BAC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B20BEC()
{
}

void sub_100B20BFC()
{
}

void *sub_100B20C10(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E06F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B20C58(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E06F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B20C84(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B20CD4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B20D14()
{
}

void sub_100B20D24()
{
}

void *sub_100B20D38(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E0778;
  result[1] = v3;
  return result;
}

uint64_t sub_100B20D80(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E0778;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B20DAC(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B20DFC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B20E3C()
{
}

void sub_100B20E4C()
{
}

void *sub_100B20E60(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E07F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B20EA8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E07F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B20ED4(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B20F24(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B20F64()
{
}

void sub_100B20F74()
{
}

void *sub_100B20F88(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E0878;
  result[1] = v3;
  return result;
}

uint64_t sub_100B20FD0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E0878;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B20FFC(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B2104C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2108C()
{
}

void sub_100B2109C()
{
}

void *sub_100B210B0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E08F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B210F8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E08F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B21124(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 5u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B21170(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B211B0()
{
}

void sub_100B211C0()
{
}

void *sub_100B211D4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E0978;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2121C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E0978;
  a2[1] = v2;
  return result;
}

BOOL sub_100B21248(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 7;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B2128C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B212CC()
{
}

void sub_100B212DC()
{
}

void *sub_100B212F0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E09F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B21338(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E09F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B21364(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = v5[0] < 3;
  }
  uint64_t v3 = v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B213B0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B213F0()
{
}

void sub_100B21400()
{
}

void *sub_100B21414(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E0A78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2145C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E0A78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B21488(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B214D4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B21514()
{
}

void sub_100B21524()
{
}

void *sub_100B21538(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E0AF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B21580(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E0AF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B215AC(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B215F8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B21638()
{
}

void sub_100B21648()
{
}

void *sub_100B2165C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E0B78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B216A4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E0B78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B216D0(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B2171C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2175C()
{
}

void sub_100B2176C()
{
}

void *sub_100B21780(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E0BF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B217C8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E0BF8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B217F4(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] <= 90.0 && v4[0] >= -90.0;
  }
  else {
    BOOL v2 = 0;
  }
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B21864(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B218A4()
{
}

void sub_100B218B4()
{
}

void *sub_100B218C8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E0C78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B21910(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E0C78;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2193C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] <= 180.0 && v4[0] >= -180.0;
  }
  else {
    BOOL v2 = 0;
  }
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B219AC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B219EC()
{
}

void sub_100B219FC()
{
}

void *sub_100B21A10(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E0CF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B21A58(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E0CF8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B21A84(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = v5[0] > 0 || v5[0] == -1;
  }
  sub_100118010((uint64_t)v5);
  return v2;
}

uint64_t sub_100B21ADC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B21B1C()
{
}

void sub_100B21B2C()
{
}

void *sub_100B21B40(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E0D78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B21B88(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E0D78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B21BB4(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] < 0;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B21C00(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B21C40()
{
}

void sub_100B21C50()
{
}

void *sub_100B21C64(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E0DF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B21CAC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E0DF8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B21CD8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = v5[0] > 0 || v5[0] == -1;
  }
  sub_100118010((uint64_t)v5);
  return v2;
}

uint64_t sub_100B21D30(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B21D70()
{
}

void sub_100B21D80()
{
}

void *sub_100B21D94(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E0E78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B21DDC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E0E78;
  a2[1] = v2;
  return result;
}

BOOL sub_100B21E08(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = v5[0] > 0 || v5[0] == -1;
  }
  sub_100118010((uint64_t)v5);
  return v2;
}

uint64_t sub_100B21E60(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B21EA0()
{
}

void sub_100B21EB0()
{
}

void *sub_100B21EC4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E0EF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B21F0C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E0EF8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B21F38(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  if (v5 == 5) {
    BOOL v2 = v4[0] == -1.0 || v4[0] > 0.0;
  }
  else {
    BOOL v2 = 0;
  }
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B21F9C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B21FDC()
{
}

void sub_100B21FEC()
{
}

void *sub_100B22000(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E0F78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B22048(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E0F78;
  a2[1] = v2;
  return result;
}

BOOL sub_100B22074(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  if (v4[6]) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = v4[0] < 2u || v4[0] == 255;
  }
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B220D4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B22114()
{
}

void sub_100B22124()
{
}

void *sub_100B22138(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E0FF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B22180(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E0FF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B221AC(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B221FC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2223C()
{
}

void sub_100B2224C()
{
}

void *sub_100B22260(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E1078;
  result[1] = v3;
  return result;
}

uint64_t sub_100B222A8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E1078;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B222D4(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B22324(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B22364()
{
}

void sub_100B22374()
{
}

void *sub_100B22388(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E10F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B223D0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E10F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B223FC(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B2244C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2248C()
{
}

void sub_100B2249C()
{
}

void *sub_100B224B0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E1178;
  result[1] = v3;
  return result;
}

uint64_t sub_100B224F8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E1178;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B22524(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B22574(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B225B4()
{
}

void sub_100B225C4()
{
}

void *sub_100B225D8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E11F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B22620(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E11F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B2264C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0xDu;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B22698(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B226D8()
{
}

void sub_100B226E8()
{
}

void *sub_100B226FC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E1278;
  result[1] = v3;
  return result;
}

uint64_t sub_100B22744(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E1278;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B22770(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B227BC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B227FC()
{
}

void sub_100B2280C()
{
}

void *sub_100B22820(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E12F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B22868(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E12F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B22894(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B228E0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B22920()
{
}

void sub_100B22930()
{
}

void *sub_100B22944(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E1378;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2298C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E1378;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B229B8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B22A04(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B22A44()
{
}

void sub_100B22A54()
{
}

void *sub_100B22A68(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E13F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B22AB0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E13F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B22ADC(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B22B28(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B22B68()
{
}

void sub_100B22B78()
{
}

void *sub_100B22B8C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E1478;
  result[1] = v3;
  return result;
}

uint64_t sub_100B22BD4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E1478;
  a2[1] = v2;
  return result;
}

BOOL sub_100B22C00(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 2;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B22C44(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B22C84()
{
}

void sub_100B22C94()
{
}

void *sub_100B22CA8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E14F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B22CF0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E14F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B22D1C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B22D68(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B22DA8()
{
}

void sub_100B22DB8()
{
}

void *sub_100B22DCC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E1578;
  result[1] = v3;
  return result;
}

uint64_t sub_100B22E14(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E1578;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B22E40(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 8u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B22E8C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B22ECC()
{
}

void sub_100B22EDC()
{
}

void *sub_100B22EF0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E15F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B22F38(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E15F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B22F64(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 6u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B22FB0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B22FF0()
{
}

void sub_100B23000()
{
}

void *sub_100B23014(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E1678;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2305C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E1678;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B23088(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B230D4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B23114()
{
}

void sub_100B23124()
{
}

void *sub_100B23138(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E16F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B23180(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E16F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B231AC(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0xFu;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B231F8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B23238()
{
}

void sub_100B23248()
{
}

void *sub_100B2325C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E1778;
  result[1] = v3;
  return result;
}

uint64_t sub_100B232A4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E1778;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B232D0(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B2331C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2335C()
{
}

void sub_100B2336C()
{
}

void *sub_100B23380(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E17F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B233C8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E17F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B233F4(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0xFu;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B23440(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B23480()
{
}

void sub_100B23490()
{
}

void *sub_100B234A4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E1878;
  result[1] = v3;
  return result;
}

uint64_t sub_100B234EC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E1878;
  a2[1] = v2;
  return result;
}

BOOL sub_100B23518(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  }
  else {
    BOOL v2 = 0;
  }
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B2357C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B235BC()
{
}

void sub_100B235CC()
{
}

void *sub_100B235E0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E18F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B23628(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E18F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B23654(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  }
  else {
    BOOL v2 = 0;
  }
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B236B8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B236F8()
{
}

void sub_100B23708()
{
}

void *sub_100B2371C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E1978;
  result[1] = v3;
  return result;
}

uint64_t sub_100B23764(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E1978;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B23790(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0xAu;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B237DC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2381C()
{
}

void sub_100B2382C()
{
}

void *sub_100B23840(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E19F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B23888(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E19F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B238B4(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B23900(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B23940()
{
}

void sub_100B23950()
{
}

void *sub_100B23964(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E1A78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B239AC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E1A78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B239D8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B23A24(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B23A64()
{
}

void sub_100B23A74()
{
}

void *sub_100B23A88(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E1AF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B23AD0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E1AF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B23AFC(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B23B48(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B23B88()
{
}

void sub_100B23B98()
{
}

void *sub_100B23BAC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E1B78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B23BF4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E1B78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B23C20(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B23C6C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B23CAC()
{
}

void sub_100B23CBC()
{
}

void *sub_100B23CD0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E1BF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B23D18(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E1BF8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B23D44(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 7;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B23D88(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B23DC8()
{
}

void sub_100B23DD8()
{
}

void *sub_100B23DEC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E1C78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B23E34(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E1C78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B23E60(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B23EAC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B23EEC()
{
}

void sub_100B23EFC()
{
}

void *sub_100B23F10(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E1CF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B23F58(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E1CF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B23F84(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0xFu;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B23FD0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B24010()
{
}

void sub_100B24020()
{
}

void *sub_100B24034(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E1D78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2407C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E1D78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B240A8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B240F4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B24134()
{
}

void sub_100B24144()
{
}

void *sub_100B24158(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E1DF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B241A0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E1DF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B241CC(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0xFu;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B24218(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B24258()
{
}

void sub_100B24268()
{
}

void *sub_100B2427C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E1E78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B242C4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E1E78;
  a2[1] = v2;
  return result;
}

BOOL sub_100B242F0(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  }
  else {
    BOOL v2 = 0;
  }
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B24354(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B24394()
{
}

void sub_100B243A4()
{
}

void *sub_100B243B8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E1EF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B24400(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E1EF8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2442C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  }
  else {
    BOOL v2 = 0;
  }
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B24490(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B244D0()
{
}

void sub_100B244E0()
{
}

void *sub_100B244F4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E1F78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2453C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E1F78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B24568(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0xBu;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B245B4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B245F4()
{
}

void sub_100B24604()
{
}

void *sub_100B24618(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E1FF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B24660(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E1FF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B2468C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B246D8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B24718()
{
}

void sub_100B24728()
{
}

void *sub_100B2473C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E2078;
  result[1] = v3;
  return result;
}

uint64_t sub_100B24784(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E2078;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B247B0(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B247FC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2483C()
{
}

void sub_100B2484C()
{
}

void *sub_100B24860(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E20F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B248A8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E20F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B248D4(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B24920(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B24960()
{
}

void sub_100B24970()
{
}

void *sub_100B24984(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E2178;
  result[1] = v3;
  return result;
}

uint64_t sub_100B249CC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E2178;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B249F8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B24A44(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B24A84()
{
}

void sub_100B24A94()
{
}

void *sub_100B24AA8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E21F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B24AF0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E21F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B24B1C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 0;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B24B60(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B24BA0()
{
}

void sub_100B24BB0()
{
}

void *sub_100B24BC4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E2278;
  result[1] = v3;
  return result;
}

uint64_t sub_100B24C0C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E2278;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B24C38(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B24C84(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B24CC4()
{
}

void sub_100B24CD4()
{
}

void *sub_100B24CE8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E22F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B24D30(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E22F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B24D5C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B24DA8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B24DE8()
{
}

void sub_100B24DF8()
{
}

void *sub_100B24E0C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E2378;
  result[1] = v3;
  return result;
}

uint64_t sub_100B24E54(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E2378;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B24E80(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 4u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B24ECC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B24F0C()
{
}

void sub_100B24F1C()
{
}

void *sub_100B24F30(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E23F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B24F78(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E23F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B24FA4(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 4u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B24FF0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B25030()
{
}

void sub_100B25040()
{
}

void *sub_100B25054(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E2478;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2509C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E2478;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B250C8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 4u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B25114(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B25154()
{
}

void sub_100B25164()
{
}

void *sub_100B25178(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E24F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B251C0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E24F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B251EC(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 4u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B25238(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B25278()
{
}

void sub_100B25288()
{
}

void *sub_100B2529C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E2578;
  result[1] = v3;
  return result;
}

uint64_t sub_100B252E4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E2578;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B25310(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 4u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B2535C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2539C()
{
}

void sub_100B253AC()
{
}

void *sub_100B253C0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E25F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B25408(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E25F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B25434(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 4u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B25480(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B254C0()
{
}

void sub_100B254D0()
{
}

void *sub_100B254E4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E2678;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2552C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E2678;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B25558(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 4u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B255A4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B255E4()
{
}

void sub_100B255F4()
{
}

void *sub_100B25608(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E26F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B25650(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E26F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B2567C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 4u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B256C8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B25708()
{
}

void sub_100B25718()
{
}

void *sub_100B2572C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E2778;
  result[1] = v3;
  return result;
}

uint64_t sub_100B25774(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E2778;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B257A0(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 4u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B257EC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2582C()
{
}

void sub_100B2583C()
{
}

void *sub_100B25850(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E27F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B25898(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E27F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B258C4(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 4u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B25910(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B25950()
{
}

void sub_100B25960()
{
}

void *sub_100B25974(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E2878;
  result[1] = v3;
  return result;
}

uint64_t sub_100B259BC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E2878;
  a2[1] = v2;
  return result;
}

BOOL sub_100B259E8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)&v4, a2);
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1000DC48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100118010((uint64_t)&v4);
  return v2 == 6;
}

void sub_100B25A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100B25A80(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B25AC0()
{
}

void sub_100B25AD0()
{
}

void *sub_100B25AE4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E28F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B25B2C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E28F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B25B58(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)&v4, a2);
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1000DC48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100118010((uint64_t)&v4);
  return v2 == 6;
}

void sub_100B25BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100B25BF0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B25C30()
{
}

void sub_100B25C40()
{
}

void *sub_100B25C54(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E2978;
  result[1] = v3;
  return result;
}

uint64_t sub_100B25C9C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E2978;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B25CC8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B25D14(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B25D54()
{
}

void sub_100B25D64()
{
}

void *sub_100B25D78(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E29F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B25DC0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E29F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B25DEC(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B25E38(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B25E78()
{
}

void sub_100B25E88()
{
}

void *sub_100B25E9C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E2A78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B25EE4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E2A78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B25F10(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B25F5C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B25F9C()
{
}

void sub_100B25FAC()
{
}

void *sub_100B25FC0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E2AF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B26008(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E2AF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B26034(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B26080(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B260C0()
{
}

void sub_100B260D0()
{
}

void *sub_100B260E4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E2B78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2612C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E2B78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B26158(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B261A4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B261E4()
{
}

void sub_100B261F4()
{
}

void *sub_100B26208(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E2BF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B26250(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E2BF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B2627C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B262C8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B26308()
{
}

void sub_100B26318()
{
}

void *sub_100B2632C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E2C78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B26374(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E2C78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B263A0(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B263EC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2642C()
{
}

void sub_100B2643C()
{
}

void *sub_100B26450(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E2CF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B26498(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E2CF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B264C4(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B26510(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B26550()
{
}

void sub_100B26560()
{
}

void *sub_100B26574(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E2D78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B265BC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E2D78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B265E8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B26634(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B26674()
{
}

void sub_100B26684()
{
}

void *sub_100B26698(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E2DF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B266E0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E2DF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B2670C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B26758(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B26798()
{
}

void sub_100B267A8()
{
}

void *sub_100B267BC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E2E78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B26804(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E2E78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B26830(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B2687C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B268BC()
{
}

void sub_100B268CC()
{
}

void *sub_100B268E0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E2EF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B26928(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E2EF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B26954(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B269A0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B269E0()
{
}

void sub_100B269F0()
{
}

void *sub_100B26A04(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E2F78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B26A4C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E2F78;
  a2[1] = v2;
  return result;
}

BOOL sub_100B26A78(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  BOOL v3 = v5[6] == 3 && v5[0] > -2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B26AC4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B26B04()
{
}

void sub_100B26B14()
{
}

void *sub_100B26B28(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E2FF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B26B70(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E2FF8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B26B9C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 7;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B26BE0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B26C20()
{
}

void sub_100B26C30()
{
}

void *sub_100B26C44(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E3078;
  result[1] = v3;
  return result;
}

uint64_t sub_100B26C8C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E3078;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B26CB8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B26D04(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B26D44()
{
}

void sub_100B26D54()
{
}

void *sub_100B26D68(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E30F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B26DB0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E30F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B26DDC(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B26E28(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B26E68()
{
}

void sub_100B26E78()
{
}

void *sub_100B26E8C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E3178;
  result[1] = v3;
  return result;
}

uint64_t sub_100B26ED4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E3178;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B26F00(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B26F4C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B26F8C()
{
}

void sub_100B26F9C()
{
}

void *sub_100B26FB0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E31F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B26FF8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E31F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B27024(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B27070(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B270B0()
{
}

void sub_100B270C0()
{
}

void *sub_100B270D4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E3278;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2711C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E3278;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B27148(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B27194(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B271D4()
{
}

void sub_100B271E4()
{
}

void *sub_100B271F8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E32F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B27240(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E32F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B2726C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B272B8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B272F8()
{
}

void sub_100B27308()
{
}

void *sub_100B2731C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E3378;
  result[1] = v3;
  return result;
}

uint64_t sub_100B27364(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E3378;
  a2[1] = v2;
  return result;
}

BOOL sub_100B27390(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 7;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B273D4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B27414()
{
}

void sub_100B27424()
{
}

void *sub_100B27438(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E33F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B27480(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E33F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B274AC(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B274F8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B27538()
{
}

void sub_100B27548()
{
}

void *sub_100B2755C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E3478;
  result[1] = v3;
  return result;
}

uint64_t sub_100B275A4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E3478;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B275D0(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B2761C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2765C()
{
}

void sub_100B2766C()
{
}

void *sub_100B27680(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E34F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B276C8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E34F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B276F4(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B27740(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B27780()
{
}

void sub_100B27790()
{
}

void *sub_100B277A4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E3578;
  result[1] = v3;
  return result;
}

uint64_t sub_100B277EC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E3578;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B27818(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B27864(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B278A4()
{
}

void sub_100B278B4()
{
}

void *sub_100B278C8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E35F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B27910(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E35F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B2793C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B27988(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B279C8()
{
}

void sub_100B279D8()
{
}

void *sub_100B279EC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E3678;
  result[1] = v3;
  return result;
}

uint64_t sub_100B27A34(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E3678;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B27A60(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B27AAC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B27AEC()
{
}

void sub_100B27AFC()
{
}

void *sub_100B27B10(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E36F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B27B58(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E36F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B27B84(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B27BD0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B27C10()
{
}

void sub_100B27C20()
{
}

void *sub_100B27C34(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E3778;
  result[1] = v3;
  return result;
}

uint64_t sub_100B27C7C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E3778;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B27CA8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B27CF4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B27D34()
{
}

void sub_100B27D44()
{
}

void *sub_100B27D58(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E37F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B27DA0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E37F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B27DCC(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 7;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B27E10(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B27E50()
{
}

void sub_100B27E60()
{
}

void *sub_100B27E74(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E3878;
  result[1] = v3;
  return result;
}

uint64_t sub_100B27EBC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E3878;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B27EE8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B27F34(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B27F74()
{
}

void sub_100B27F84()
{
}

void *sub_100B27F98(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E38F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B27FE0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E38F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B2800C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B28058(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B28098()
{
}

void sub_100B280A8()
{
}

void *sub_100B280BC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E3978;
  result[1] = v3;
  return result;
}

uint64_t sub_100B28104(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E3978;
  a2[1] = v2;
  return result;
}

BOOL sub_100B28130(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)&v4, a2);
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1000DC48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100118010((uint64_t)&v4);
  return v2 == 6;
}

void sub_100B281B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100B281C8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B28208()
{
}

void sub_100B28218()
{
}

void *sub_100B2822C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E39F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B28274(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E39F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B282A0(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)&v4, a2);
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1000DC48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100118010((uint64_t)&v4);
  return v2 == 6;
}

void sub_100B28324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100B28338(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B28378()
{
}

void sub_100B28388()
{
}

void *sub_100B2839C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E3A78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B283E4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E3A78;
  a2[1] = v2;
  return result;
}

BOOL sub_100B28410(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)&v4, a2);
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1000DC48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = v4;
      uint64_t v8 = v5;
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100118010((uint64_t)&v4);
  return v2 == 6;
}

void sub_100B28494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100B284A8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B284E8()
{
}

void sub_100B284F8()
{
}

void *sub_100B2850C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E3AF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B28554(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E3AF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B28580(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B285CC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2860C()
{
}

void sub_100B2861C()
{
}

void *sub_100B28630(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E3B78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B28678(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E3B78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B286A4(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x13u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B286F0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B28730()
{
}

void sub_100B28740()
{
}

void *sub_100B28754(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E3BF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2879C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E3BF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B287C8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x13u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B28814(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B28854()
{
}

void sub_100B28864()
{
}

void *sub_100B28878(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E3C78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B288C0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E3C78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B288EC(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B28938(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B28978()
{
}

void sub_100B28988()
{
}

void *sub_100B2899C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E3CF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B289E4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E3CF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B28A10(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B28A5C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B28A9C()
{
}

void sub_100B28AAC()
{
}

void *sub_100B28AC0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E3D78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B28B08(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E3D78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B28B34(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B28B80(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B28BC0()
{
}

void sub_100B28BD0()
{
}

void *sub_100B28BE4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E3DF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B28C2C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E3DF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B28C58(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B28CA4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B28CE4()
{
}

void sub_100B28CF4()
{
}

void *sub_100B28D08(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E3E78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B28D50(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E3E78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B28D7C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B28DC8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B28E08()
{
}

void sub_100B28E18()
{
}

void *sub_100B28E2C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E3EF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B28E74(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E3EF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B28EA0(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B28EEC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B28F2C()
{
}

void sub_100B28F3C()
{
}

void *sub_100B28F50(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E3F78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B28F98(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E3F78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B28FC4(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B29010(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B29050()
{
}

void sub_100B29060()
{
}

void *sub_100B29074(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E3FF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B290BC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E3FF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B290E8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B29134(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B29174()
{
}

void sub_100B29184()
{
}

void *sub_100B29198(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E4078;
  result[1] = v3;
  return result;
}

uint64_t sub_100B291E0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E4078;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B2920C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B29258(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B29298()
{
}

void sub_100B292A8()
{
}

void *sub_100B292BC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E40F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B29304(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E40F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B29330(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B2937C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B293BC()
{
}

void sub_100B293CC()
{
}

void *sub_100B293E0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E4178;
  result[1] = v3;
  return result;
}

uint64_t sub_100B29428(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E4178;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B29454(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B294A0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B294E0()
{
}

void sub_100B294F0()
{
}

void *sub_100B29504(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E41F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2954C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E41F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B29578(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 6u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B295C4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B29604()
{
}

void sub_100B29614()
{
}

void *sub_100B29628(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E4278;
  result[1] = v3;
  return result;
}

uint64_t sub_100B29670(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E4278;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2969C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 0;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B296E0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B29720()
{
}

void sub_100B29730()
{
}

void *sub_100B29744(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E42F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2978C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E42F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B297B8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 0;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B297FC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2983C()
{
}

void sub_100B2984C()
{
}

void *sub_100B29860(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E4378;
  result[1] = v3;
  return result;
}

uint64_t sub_100B298A8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E4378;
  a2[1] = v2;
  return result;
}

BOOL sub_100B298D4(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 7;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B29918(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B29958()
{
}

void sub_100B29968()
{
}

void *sub_100B2997C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E43F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B299C4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E43F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B299F0(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  if (v4[6] == 3) {
    BOOL v2 = v4[0] < 2u || v4[0] == 255;
  }
  else {
    BOOL v2 = 0;
  }
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B29A54(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B29A94()
{
}

void sub_100B29AA4()
{
}

void *sub_100B29AB8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E4478;
  result[1] = v3;
  return result;
}

uint64_t sub_100B29B00(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E4478;
  a2[1] = v2;
  return result;
}

BOOL sub_100B29B2C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 0;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B29B70(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B29BB0()
{
}

void sub_100B29BC0()
{
}

void *sub_100B29BD4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E44F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B29C1C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E44F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B29C48(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 0;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B29C8C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B29CCC()
{
}

void sub_100B29CDC()
{
}

void *sub_100B29CF0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E4578;
  result[1] = v3;
  return result;
}

uint64_t sub_100B29D38(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E4578;
  a2[1] = v2;
  return result;
}

BOOL sub_100B29D64(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 0;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B29DA8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B29DE8()
{
}

void sub_100B29DF8()
{
}

void *sub_100B29E0C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E45F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B29E54(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E45F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B29E80(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 7;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B29EC4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B29F04()
{
}

void sub_100B29F14()
{
}

void *sub_100B29F28(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E4678;
  result[1] = v3;
  return result;
}

uint64_t sub_100B29F70(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E4678;
  a2[1] = v2;
  return result;
}

BOOL sub_100B29F9C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 0;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B29FE0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2A020()
{
}

void sub_100B2A030()
{
}

void *sub_100B2A044(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E46F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2A08C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E46F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B2A0B8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B2A104(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2A144()
{
}

void sub_100B2A154()
{
}

void *sub_100B2A168(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E4778;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2A1B0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E4778;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2A1DC(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 0;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B2A220(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2A260()
{
}

void sub_100B2A270()
{
}

void *sub_100B2A284(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E47F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2A2CC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E47F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2A2F8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 0;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B2A33C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2A37C()
{
}

void sub_100B2A38C()
{
}

void *sub_100B2A3A0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E4878;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2A3E8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E4878;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2A414(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 0;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B2A458(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2A498()
{
}

void sub_100B2A4A8()
{
}

void *sub_100B2A4BC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E48F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2A504(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E48F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2A530(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 0;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B2A574(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2A5B4()
{
}

void sub_100B2A5C4()
{
}

void *sub_100B2A5D8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E4978;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2A620(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E4978;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2A64C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 7;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B2A690(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2A6D0()
{
}

void sub_100B2A6E0()
{
}

void *sub_100B2A6F4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E49F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2A73C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E49F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B2A768(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = (v5[0] + 1) >= 0xC;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B2A7B8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2A7F8()
{
}

void sub_100B2A808()
{
}

void *sub_100B2A81C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E4A78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2A864(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E4A78;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2A890(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)&v5, a2);
  if (v7 == 6)
  {
    if (SHIBYTE(v6) < 0)
    {
      sub_1000DC48C(__p, (void *)v5, *((unint64_t *)&v5 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = v5;
      uint64_t v9 = v6;
    }
    uint64_t v3 = __p[1];
    if (v9 >= 0) {
      uint64_t v3 = (void *)HIBYTE(v9);
    }
    BOOL v2 = v3 != 0;
    if (SHIBYTE(v9) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    BOOL v2 = 0;
  }
  sub_100118010((uint64_t)&v5);
  return v2;
}

void sub_100B2A92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100B2A940(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2A980()
{
}

void sub_100B2A990()
{
}

void *sub_100B2A9A4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E4AF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2A9EC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E4AF8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2AA18(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 0;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B2AA5C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2AA9C()
{
}

void sub_100B2AAAC()
{
}

void *sub_100B2AAC0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E4B78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2AB08(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E4B78;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2AB34(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 0;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B2AB78(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2ABB8()
{
}

void sub_100B2ABC8()
{
}

void *sub_100B2ABDC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E4BF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2AC24(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E4BF8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2AC50(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 0;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B2AC94(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2ACD4()
{
}

void sub_100B2ACE4()
{
}

void *sub_100B2ACF8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E4C78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2AD40(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E4C78;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2AD6C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 0;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B2ADB0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2ADF0()
{
}

void sub_100B2AE00()
{
}

void *sub_100B2AE14(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E4CF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2AE5C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E4CF8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2AE88(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 7;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B2AECC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2AF0C()
{
}

void sub_100B2AF1C()
{
}

void *sub_100B2AF30(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E4D78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2AF78(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E4D78;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B2AFA4(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 3u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B2AFF0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2B030()
{
}

void sub_100B2B040()
{
}

void *sub_100B2B054(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E4DF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2B09C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E4DF8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2B0C8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 0;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B2B10C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2B14C()
{
}

void sub_100B2B15C()
{
}

void *sub_100B2B170(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E4E78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2B1B8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E4E78;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2B1E4(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 0;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B2B228(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2B268()
{
}

void sub_100B2B278()
{
}

void *sub_100B2B28C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E4EF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2B2D4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E4EF8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2B300(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 0;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B2B344(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2B384()
{
}

void sub_100B2B394()
{
}

void *sub_100B2B3A8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E4F78;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2B3F0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E4F78;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2B41C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 0;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B2B460(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2B4A0()
{
}

void sub_100B2B4B0()
{
}

void *sub_100B2B4C4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E4FF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2B50C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E4FF8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2B538(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  BOOL v2 = v4[6] == 7;
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B2B57C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2B5BC()
{
}

void sub_100B2B5CC()
{
}

void *sub_100B2B5E0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E5078;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2B628(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E5078;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B2B654(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = (v5[0] + 1) >= 0xC;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B2B6A4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2B6E4()
{
}

void sub_100B2B6F4()
{
}

void *sub_100B2B708(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E50F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2B750(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E50F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2B77C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)&v5, a2);
  if (v7 == 6)
  {
    if (SHIBYTE(v6) < 0)
    {
      sub_1000DC48C(__p, (void *)v5, *((unint64_t *)&v5 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = v5;
      uint64_t v9 = v6;
    }
    uint64_t v3 = __p[1];
    if (v9 >= 0) {
      uint64_t v3 = (void *)HIBYTE(v9);
    }
    BOOL v2 = v3 != 0;
    if (SHIBYTE(v9) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    BOOL v2 = 0;
  }
  sub_100118010((uint64_t)&v5);
  return v2;
}

void sub_100B2B818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100B2B82C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2B86C()
{
}

void sub_100B2B87C()
{
}

void *sub_100B2B890(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E5178;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2B8D8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E5178;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B2B904(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 9u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B2B950(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2B990()
{
}

void sub_100B2B9A0()
{
}

void *sub_100B2B9B4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E51F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2B9FC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E51F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B2BA28(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B2BA74(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2BAB4()
{
}

void sub_100B2BAC4()
{
}

void *sub_100B2BAD8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E5278;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2BB20(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E5278;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B2BB4C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B2BB98(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2BBD8()
{
}

void sub_100B2BBE8()
{
}

void *sub_100B2BBFC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E52F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2BC44(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E52F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2BC70(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  }
  else {
    BOOL v2 = 0;
  }
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B2BCD4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2BD14()
{
}

void sub_100B2BD24()
{
}

void *sub_100B2BD38(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E5378;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2BD80(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E5378;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B2BDAC(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] < 0;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B2BDF8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2BE38()
{
}

void sub_100B2BE48()
{
}

void *sub_100B2BE5C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E53F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2BEA4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E53F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B2BED0(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] < 0;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B2BF1C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2BF5C()
{
}

void sub_100B2BF6C()
{
}

void *sub_100B2BF80(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E5478;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2BFC8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E5478;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B2BFF4(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B2C040(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2C080()
{
}

void sub_100B2C090()
{
}

void *sub_100B2C0A4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E54F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2C0EC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E54F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B2C118(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B2C164(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2C1A4()
{
}

void sub_100B2C1B4()
{
}

void *sub_100B2C1C8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E5578;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2C210(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E5578;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2C23C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  }
  else {
    BOOL v2 = 0;
  }
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B2C2A0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2C2E0()
{
}

void sub_100B2C2F0()
{
}

void *sub_100B2C304(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E55F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2C34C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E55F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2C378(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  }
  else {
    BOOL v2 = 0;
  }
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B2C3DC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2C41C()
{
}

void sub_100B2C42C()
{
}

void *sub_100B2C440(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E5678;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2C488(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E5678;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B2C4B4(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] < 0;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B2C500(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2C540()
{
}

void sub_100B2C550()
{
}

void *sub_100B2C564(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E56F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2C5AC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E56F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2C5D8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = v5[0] < 0xEu || v5[0] == 100;
  }
  sub_100118010((uint64_t)v5);
  return v2;
}

uint64_t sub_100B2C634(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2C674()
{
}

void sub_100B2C684()
{
}

void *sub_100B2C698(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E5778;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2C6E0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E5778;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2C70C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  }
  else {
    BOOL v2 = 0;
  }
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B2C770(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2C7B0()
{
}

void sub_100B2C7C0()
{
}

void *sub_100B2C7D4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E57F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2C81C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E57F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2C848(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  }
  else {
    BOOL v2 = 0;
  }
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B2C8AC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2C8EC()
{
}

void sub_100B2C8FC()
{
}

void *sub_100B2C910(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E5878;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2C958(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E5878;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2C984(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  }
  else {
    BOOL v2 = 0;
  }
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B2C9E8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2CA28()
{
}

void sub_100B2CA38()
{
}

void *sub_100B2CA4C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E58F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2CA94(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E58F8;
  a2[1] = v2;
  return result;
}

BOOL sub_100B2CAC0(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v4, a2);
  if (LODWORD(v4[6]) == 4) {
    BOOL v2 = v4[0] == -1.0 || v4[0] >= 0.0;
  }
  else {
    BOOL v2 = 0;
  }
  sub_100118010((uint64_t)v4);
  return v2;
}

uint64_t sub_100B2CB24(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2CB64()
{
}

void sub_100B2CB74()
{
}

void *sub_100B2CB88(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022E5978;
  result[1] = v3;
  return result;
}

uint64_t sub_100B2CBD0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022E5978;
  a2[1] = v2;
  return result;
}

uint64_t sub_100B2CBFC(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] <= -2;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_100B2CC48(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100B2CC88()
{
}

uint64_t sub_100B2CC94(uint64_t a1, int **a2)
{
  memset(v5, 0, sizeof(v5));
  int v6 = 1065353216;
  uint64_t v3 = sub_100B2D0C4(*a2, a2[1], (uint64_t)v5);
  if (a2[1] != v3) {
    a2[1] = v3;
  }
  return sub_1000D7D80((uint64_t)v5);
}

void sub_100B2CD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned __int8 *sub_100B2CD2C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    std::string v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_100B2CFC8(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_100100330(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  int v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *int v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  sub_100B2D06C((uint64_t)v26, 0);
  return i;
}

void sub_100B2CFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100B2D06C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned char *sub_100B2CFC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    uint64_t result = sub_1000DC48C(result, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    void v8[4] = *((void *)v10 + 2);
    *(_OWORD *)uint64_t result = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_100B2D054(_Unwind_Exception *a1)
{
  sub_100B2D06C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100B2D06C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1005103F8((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

int *sub_100B2D0C4(int *a1, int *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a2;
  }
  long long v5 = a1;
  while (1)
  {
    sub_10029AF50(a3, v5, v5);
    if ((v6 & 1) == 0) {
      break;
    }
    if (++v5 == a2) {
      return a2;
    }
  }
  if (v5 != a2)
  {
    for (uint64_t i = v5 + 1; i != a2; ++i)
    {
      sub_10029AF50(a3, i, i);
      if (v9) {
        *v5++ = *i;
      }
    }
  }
  return v5;
}

NSNumber *sub_100B2D15C(uint64_t a1, unsigned int *a2)
{
  return +[NSNumber numberWithInt:*a2];
}

NSNumber *sub_100B2D16C(uint64_t a1, void *a2)
{
  return +[NSNumber numberWithLongLong:*a2];
}

NSNumber *sub_100B2D17C(uint64_t a1, void *a2)
{
  return +[NSNumber numberWithUnsignedLongLong:*a2];
}

NSNumber *sub_100B2D18C(uint64_t a1, unsigned int *a2)
{
  return +[NSNumber numberWithUnsignedInt:*a2];
}

NSNumber *sub_100B2D19C(double a1, uint64_t a2, _DWORD *a3)
{
  LODWORD(a1) = *a3;
  return +[NSNumber numberWithFloat:a1];
}

NSNumber *sub_100B2D1AC(uint64_t a1, double *a2)
{
  return +[NSNumber numberWithDouble:*a2];
}

NSNumber *sub_100B2D1C0(uint64_t a1, unsigned __int8 *a2)
{
  return +[NSNumber numberWithBool:*a2];
}

NSString *sub_100B2D1D0(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
  }
  if (v6 >= 0) {
    BOOL v2 = __p;
  }
  else {
    BOOL v2 = (void **)__p[0];
  }
  uint64_t v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2, __p[0], __p[1], v6);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_100B2D258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100B2D274(void *a1)
{
  *a1 = off_1022DE970;
  uint64_t v2 = a1[39];
  a1[39] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[38];
  a1[38] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[37];
  a1[37] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[36];
  a1[36] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a1[35];
  a1[35] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a1[33];
  a1[33] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  return sub_100B19C10(a1);
}

uint64_t sub_100B2D3E4()
{
  sub_100134750(qword_102480150, "AnalyticsLogger");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480150, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10248A948, "com.apple.locationd.emergency.MobileAssetStats.CatalogDownload");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10248A948, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10248A960, "com.apple.locationd.emergency.MobileAssetStats.AssetDownload");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10248A960, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10248A978, "com.apple.locationd.emergency.MobileAssetStats.DownloadNotTriggered");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10248A978, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10248A990, "com.apple.locationd.emergency.MobileAssetStats.VersionReporting");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10248A990, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10248A900, "com.apple.location.emergency.era");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10248A900, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10248A918, "com.apple.locationd.emergency.eed");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10248A918, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10248A8D0, "com.apple.locationd.emergency.aml");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10248A8D0, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10248A8B8, "com.apple.locationd.emergency.nilr");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10248A8B8, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10248A8E8, "com.apple.locationd.emergency.non_emergency_nilr");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10248A8E8, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248A930, "com.apple.locationd.emergency.phone_number_availability");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248A930, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10248A9A8, "com.apple.locationd.eed.request");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10248A9A8, (void *)&_mh_execute_header);
}

double sub_100B2D60C(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = &unk_101D802D8;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = &unk_101D80358;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = &unk_101D802D8;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = &unk_101D80358;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 184) = 0x80000000800000;
  *(unsigned char *)(a1 + 192) = 1;
  *(_OWORD *)(a1 + 204) = 0u;
  *(void *)(a1 + 220) = 0x6400000000;
  *(_WORD *)(a1 + 628) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  return result;
}

uint64_t sub_100B2D68C(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, double a5, double a6)
{
  int v11 = (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)a3 + 136))(a3, 100, a6 + -12.0);
  double v12 = *(double *)(a2 + 56);
  if (v12 == *(double *)a1) {
    return 0;
  }
  int v14 = v11;
  *(double *)a1 = v12;
  if (sub_100B2D800(a1, a2))
  {
    if (*(double *)(a1 + 640) >= a6) {
      return 0;
    }
    *(double *)(a1 + 632) = a6;
  }
  else
  {
    double v15 = a6 + -6.0;
    if (*(double *)(a1 + 632) >= *(double *)(a1 + 640)) {
      double v16 = *(double *)(a1 + 632);
    }
    else {
      double v16 = *(double *)(a1 + 640);
    }
    int v17 = (*(uint64_t (**)(uint64_t, double))(*(void *)a3 + 128))(a3, v15);
    int v18 = (*(uint64_t (**)(uint64_t, double))(*(void *)a3 + 128))(a3, v16);
    if ((v14 != 2) == (*(unsigned char *)(a1 + 629) == 0)) {
      return 0;
    }
    *(unsigned char *)(a1 + 629) ^= 1u;
    if ((v17 - v18) < 5 || v15 <= v16) {
      return 0;
    }
    *a4 = v15;
    *(double *)(a1 + 640) = v15;
  }
  return 1;
}

uint64_t sub_100B2D800(uint64_t a1, uint64_t a2)
{
  sub_100B9BD60((float *)(a2 + 36), v25);
  float v3 = sub_10126D72C(v25);
  float v5 = v4;
  float v6 = sub_100B2DAFC((void *)(a1 + 64), 0, v3);
  *(float *)(a1 + 72) = v6;
  *(float *)(a1 + 72) = sub_100B2DAFC((void *)(a1 + 64), 1, v6);
  float v7 = sub_100B2DAFC((void *)(a1 + 144), 0, v5);
  *(float *)(a1 + 152) = v7;
  float v8 = sub_100B2DAFC((void *)(a1 + 144), 1, v7);
  *(float *)(a1 + 152) = v8;
  uint64_t v9 = *(void *)(a1 + 16) + 1;
  *(void *)(a1 + 16) = v9;
  if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * v9, 1) > 0x1999999999999999uLL) {
    return 0;
  }
  float v11 = v8;
  float v12 = sub_100B2DAFC((void *)(a1 + 24), 0, *(float *)(a1 + 72));
  *(float *)(a1 + 32) = v12;
  *(float *)(a1 + 32) = sub_100B2DAFC((void *)(a1 + 24), 1, v12);
  float v13 = sub_100B2DAFC((void *)(a1 + 104), 0, v11);
  *(float *)(a1 + 112) = v13;
  float v14 = sub_100B2DAFC((void *)(a1 + 104), 1, v13);
  *(float *)(a1 + 112) = v14;
  uint64_t v15 = *(void *)(a1 + 8);
  if ((unint64_t)(v15 + 1) < 0x64) {
    unint64_t v16 = v15 + 1;
  }
  else {
    unint64_t v16 = 100;
  }
  *(void *)(a1 + 8) = v16;
  if (v16 < 0x64) {
    goto LABEL_16;
  }
  float v17 = v14;
  float v18 = *(float *)(a1 + 32);
  float v19 = sqrtf((float)(v17 * v17) + (float)(v18 * v18));
  if (v19 > 0.00000011921)
  {
    float v18 = v18 / v19;
    float v17 = v17 / v19;
  }
  v24[0] = v18;
  v24[1] = v17;
  double v20 = sub_100B2D9EC(a1, v24);
  int v23 = LODWORD(v20);
  *(float *)(a1 + 184) = v18;
  *(float *)(a1 + 188) = v17;
  sub_100B2DA24(a1 + 192, (float *)&v23);
  uint64_t v21 = 0;
  float v22 = fabsf(*(float *)(a1 + 204));
  while (v22 > flt_101D803D8[v21])
  {
    if (++v21 == 16) {
      goto LABEL_15;
    }
  }
  if (v21 < 0xA)
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 628) = 0;
    goto LABEL_17;
  }
LABEL_15:
  if (*(unsigned char *)(a1 + 628))
  {
LABEL_16:
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = 1;
    *(unsigned char *)(a1 + 628) = 1;
  }
LABEL_17:
  *(void *)(a1 + 16) = 0;
  return result;
}

double sub_100B2D9EC(uint64_t a1, float *a2)
{
  float v2 = *(float *)(a1 + 184);
  float v3 = *(float *)(a1 + 188);
  if (v2 == 1.1755e-38 && v3 == 1.1755e-38) {
    return 0.0;
  }
  *(float *)&double result = atan2f((float)(v2 * a2[1]) - (float)(v3 * *a2), (float)(a2[1] * v3) + (float)(v2 * *a2));
  return result;
}

unsigned __int16 *sub_100B2DA24(uint64_t a1, float *a2)
{
  float v3 = (unsigned __int16 *)(a1 + 28);
  if (*(_DWORD *)(a1 + 32) == *(unsigned __int16 *)(a1 + 30))
  {
    float v4 = *(float *)(a1 + 28 + 4 * *(unsigned __int16 *)(a1 + 28) + 8);
    float v5 = *(float *)(a1 + 12);
    float v6 = (float)(*a2 - v4) - *(float *)(a1 + 16);
    *(float *)(a1 + 12) = v5 + v6;
    *(float *)(a1 + 16) = (float)((float)(v5 + v6) - v5) - v6;
    float v7 = *(float *)(a1 + 20);
    float v8 = (float)((float)(v4 + *a2) * (float)(*a2 - v4)) - *(float *)(a1 + 24);
  }
  else
  {
    float v9 = *(float *)(a1 + 12);
    float v10 = *a2 - *(float *)(a1 + 16);
    *(float *)(a1 + 12) = v9 + v10;
    *(float *)(a1 + 16) = (float)((float)(v9 + v10) - v9) - v10;
    float v7 = *(float *)(a1 + 20);
    float v8 = (float)(*a2 * *a2) - *(float *)(a1 + 24);
  }
  *(float *)(a1 + 20) = v7 + v8;
  *(float *)(a1 + 24) = (float)((float)(v7 + v8) - v7) - v8;
  double result = sub_100877A00(v3, a2);
  *(unsigned char *)a1 = 1;
  return result;
}

float sub_100B2DAFC(void *a1, uint64_t a2, float a3)
{
  uint64_t v4 = *a1;
  float v3 = (char *)a1 + 12;
  uint64_t v5 = v4 + 8 * a2;
  uint64_t v6 = 3 * a2 + 1;
  float v7 = *(float *)&v3[4 * v6];
  uint64_t v8 = 3 * a2 + 2;
  double v9 = *(float *)&v3[4 * v8];
  float v10 = *(double *)(v4 + 48 + 24 * a2) * a3 * *(double *)(v5 + 96)
      - *(double *)(v4 + 48 + 8 * v6) * v7
      - *(double *)(v4 + 48 + 8 * v8) * v9;
  double v11 = *(double *)(v5 + 112)
      * (*(double *)(v4 + 8 * v6) * v7 + *(double *)(v4 + 24 * a2) * v10 + *(double *)(v4 + 8 * v8) * v9);
  *(float *)&v3[4 * v8] = v7;
  float result = v11;
  *(float *)&v3[4 * v6] = v10;
  *(_DWORD *)&v3[12 * a2] = 0;
  return result;
}

void sub_100B2E05C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_100B2E2F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_100B2EA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
}

void sub_100B2EB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B2ED48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::string __p = &a15;
  sub_100946620((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_100B2EDE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B2EF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a30) {
    sub_1008B5A70(&a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B2F208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  a23 = (void **)&a15;
  sub_100946620(&a23);
  _Unwind_Resume(a1);
}

id sub_100B305E4(void *a1, uint64_t a2)
{
  id v3 = [objc_alloc((Class)CKRecordID) initWithRecordName:a2 zoneID:[objc_alloc((Class)CKRecordZoneID) initWithZoneName:a1[4] ownerName:CKCurrentUserDefaultName]];
  id v4 = [objc_alloc((Class)CKSyncEnginePendingRecordZoneChange) initWithRecordID:v3 type:a1[6]];

  uint64_t v5 = (void *)a1[5];

  return [v5 addObject:v4];
}

void sub_100B314A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100B31A64(uint64_t a1, void *a2)
{
  return sub_100DB4C2C(*(void *)(*(void *)(a1 + 32) + 16), a2);
}

void sub_100B33D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1008B5A70(va);
  _Unwind_Resume(a1);
}

void sub_100B34594(id a1, CKRecordZone *a2, unint64_t a3, BOOL *a4)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
  }
  uint64_t v5 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 138543362;
    uint64_t v8 = [(CKRecordZoneID *)[(CKRecordZone *)a2 zoneID] zoneName];
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[CloudKit] WifiAssociatedApCentroidStore, Successfully saved zone %{public}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
    }
    [(CKRecordZoneID *)[(CKRecordZone *)a2 zoneID] zoneName];
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentDatabaseChanges:]_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

id sub_100B3475C(uint64_t a1, void *a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
  }
  id v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 138543362;
    id v8 = [a2 zoneName];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[CloudKit] WifiAssociatedApCentroidStore, Successfully deleted zone ID %{public}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
    }
    [a2 zoneName];
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentDatabaseChanges:]_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return [*(id *)(a1 + 32) handleZoneDeleted:a2];
}

id sub_100B3492C(uint64_t a1, void *a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
  }
  id v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 138543618;
    id v8 = [objc_msgSend(objc_msgSend(objc_msgSend(a2, "recordZone"), "zoneID"), "zoneName");
    __int16 v9 = 2114;
    id v10 = [a2 error];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[CloudKit] WifiAssociatedApCentroidStore, Failed to save zone changes %{public}@. Error: %{public}@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
    }
    [objc_msgSend(objc_msgSend(objc_msgSend(a2, "recordZone"), "zoneID"), "zoneName"]
    [a2 error];
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentDatabaseChanges:]_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  id result = [objc_msgSend(a2, "error") code];
  if (result == (id)112) {
    return [*(id *)(a1 + 32) deleteZone:[objc_msgSend(objc_msgSend(a2, "recordZone"), "zoneID")]];
  }
  return result;
}

void sub_100B34B68(id a1, CKRecordZoneID *a2, NSError *a3, BOOL *a4)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
  }
  uint64_t v6 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)uint64_t buf = 138543618;
    __int16 v9 = [(CKRecordZoneID *)a2 zoneName];
    __int16 v10 = 2114;
    double v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "[CloudKit] WifiAssociatedApCentroidStore, Failed to delete zone %{public}@. Error: %{public}@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
    }
    [(CKRecordZoneID *)a2 zoneName];
    float v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentDatabaseChanges:]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_100B35018(uint64_t a1, void *a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
  }
  id v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 138477827;
    __int16 v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[CloudKit] WifiAssociatedApCentroidStore, Successfully saved record %{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if ([*(id *)(a1 + 32) isCentroidDatabaseValid]
    && (sub_100DB5008(*(void *)(*(void *)(a1 + 32) + 16), [a2 recordID], a2) & 1) == 0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
    }
    uint64_t v5 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[CloudKit] WifiAssociatedApCentroidStore, SentRecordChanges: Failed to update local system fields for saved record", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
      }
      float v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_100B35328(uint64_t a1, void *a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
  }
  id v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 138477827;
    __int16 v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[CloudKit] WifiAssociatedApCentroidStore, Successfully deleted record %{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if ([*(id *)(a1 + 32) isCentroidDatabaseValid]
    && (sub_100DB5008(*(void *)(*(void *)(a1 + 32) + 16), a2, 0) & 1) == 0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
    }
    uint64_t v5 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[CloudKit] WifiAssociatedApCentroidStore, SentRecordChanges: Failed to update local system fields for failed record", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
      }
      float v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_100B3562C(uint64_t a1, void *a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
  }
  id v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 138478083;
    id v17 = [objc_msgSend(a2, "record") recordID];
    __int16 v18 = 2114;
    id v19 = [a2 error];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[CloudKit] WifiAssociatedApCentroidStore, Failed to save record changes %{private}@. Error: %{public}@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
    }
    [objc_msgSend(a2, "record") recordID];
    [a2 error];
    __int16 v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  [a2 error];
  if (CKErrorIsCode())
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
    }
    uint64_t v5 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[CloudKit] WifiAssociatedApCentroidStore, CKErrorServerRecordChanged: The record was rejected because the version on the server was different", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
      }
      double v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    [*(id *)(a1 + 32) handleServerRecordChanged:[objc_msgSend(objc_msgSend(objc_msgSend(a2, "error"), "userInfo"), "objectForKeyedSubscript:", CKRecordChangedErrorServerRecordKey)];
  }
  else
  {
    [a2 error];
    if (CKErrorIsCode())
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
      }
      uint64_t v6 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[CloudKit] WifiAssociatedApCentroidStore, CKErrorUnknownItem: Record does not exist", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
        }
        float v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      [*(id *)(a1 + 32) handleUnknownItem:[a2 record]];
    }
    else
    {
      [a2 error];
      if (CKErrorIsCode())
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
        }
        float v7 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[CloudKit] WifiAssociatedApCentroidStore, CKErrorZoneNotFound: The specified zone does not exist on the server", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
          }
          float v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke", "%s\n", v13);
          if (v13 != (char *)buf) {
            free(v13);
          }
        }
        [*(id *)(a1 + 32) handleZoneNotFound:[a2 record]];
      }
      else
      {
        [a2 error];
        if (CKErrorIsCode())
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
          }
          id v8 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[CloudKit] WifiAssociatedApCentroidStore, CKErrorPrivateMissingManateeIdentity", buf, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
            }
            float v14 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke", "%s\n", v14);
            if (v14 != (char *)buf) {
              free(v14);
            }
          }
          [*(id *)(a1 + 32) deleteZone:[objc_msgSend(objc_msgSend(objc_msgSend(a2, "record"), "recordID"), "zoneID")]];
        }
        else
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
          }
          __int16 v9 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "[CloudKit] WifiAssociatedApCentroidStore, Unhandled error, ignoring failed record", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
            }
            uint64_t v15 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke", "%s\n", v15);
            if (v15 != (char *)buf) {
              free(v15);
            }
          }
        }
      }
    }
  }
}

void sub_100B35ECC(id a1, CKRecordID *a2, NSError *a3, BOOL *a4)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
  }
  uint64_t v6 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 138478083;
    __int16 v9 = a2;
    __int16 v10 = 2114;
    double v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[CloudKit] WifiAssociatedApCentroidStore, Failed to delete record %{private}@. Error: %{public}@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E5AB0);
    }
    float v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CLWifiAssociatedApCentroidSyncedDataStore handleSentRecordZoneChanges:]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_100B371D8(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100B37208(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1005F5850(a2 + 72);
    if (*(char *)(a2 + 71) < 0) {
      operator delete(*(void **)(a2 + 48));
    }
    if (*(char *)(a2 + 39) < 0) {
      operator delete(*(void **)(a2 + 16));
    }
    operator delete();
  }
}

void sub_100B3727C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    int v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)int v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100B37334(_Unwind_Exception *a1)
{
}

void sub_100B3734C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    int v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100B373F4(_Unwind_Exception *a1)
{
}

uint64_t sub_100B3740C(uint64_t a1, double a2)
{
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)a1 = _Q1;
  *(void *)(a1 + 24) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = _Q1;
  id v8 = (void **)(a1 + 40);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 62) = 0;
  *(void *)(a1 + 72) = 3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(double *)(a1 + 16) = a2;
  uint64_t v9 = sub_100F8CC8C();
  sub_100F8CCD4(v9, @"VO2MaxDeescalatorExtendAfterHighExertionTimeSeconds", v8);
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022E5AD0);
  }
  __int16 v10 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = *(void *)(a1 + 40);
    *(_DWORD *)uint64_t buf = 134349312;
    uint64_t v16 = v11;
    __int16 v17 = 2050;
    uint64_t v18 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Now watching for deescalation event for background VO2Max estimation; start time: %{public}f, extendAfterHightExer"
      "tionTimeSeconds: %{public}f",
      buf,
      0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022E5AD0);
    }
    float v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLVO2MaxEstimationDeescalator::CLVO2MaxEstimationDeescalator(CFAbsoluteTime)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  return a1;
}

uint64_t sub_100B37634(uint64_t result, void *a2)
{
  *(void *)(result + 72) = *a2;
  return result;
}

BOOL sub_100B37640(double *a1)
{
  if (a1[5] <= 0.0 || CFAbsoluteTimeGetCurrent() - a1[6] >= a1[5]) {
    double v2 = (double)(int)sub_100EBA078();
  }
  else {
    double v2 = a1[5] + (double)(int)sub_100EBA078();
  }
  return CFAbsoluteTimeGetCurrent() - a1[2] > v2;
}

BOOL sub_100B376B8(uint64_t a1)
{
  double v2 = *(double *)(a1 + 56);
  double v3 = *(double *)(a1 + 16);
  float v4 = *(float *)(a1 + 64);
  BOOL result = 0;
  if ((sub_100EBA2F4() & 1) == 0)
  {
    double v6 = v2 - v3;
    if (v6 > (double)(int)sub_100EB9FE0()) {
      return 1;
    }
    double v7 = v6 - v4;
    float v8 = (float)(int)sub_100EB9FE0();
    if (v7 > (float)(sub_100EBA094() * v8) || *(unsigned char *)(a1 + 68)) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_100B37748(uint64_t a1, double *a2)
{
  ++*(_DWORD *)(a1 + 96);
  int v4 = 0;
  if (a2[82] != -1.79769313e308)
  {
    double v5 = a2[92];
    if (v5 > 0.140000001 && v5 <= 2.23693991)
    {
      float v6 = 2.23693991 / v5;
      if (v6 >= 1.0)
      {
        float v7 = (float)((float)(v6 * -0.793) + (float)((float)(v6 * 0.3564) * v6)) + 3.142;
        if (v7 > 8.0) {
          float v7 = 8.0;
        }
        int v4 = v7 > 2.5;
      }
      else
      {
        int v4 = 0;
      }
    }
    v4 |= sub_100EBA12C();
    *(_DWORD *)(a1 + 84) += v4;
  }
  if (sub_100EBA1C4()) {
    int v8 = 1;
  }
  else {
    int v8 = a2[33] != -1.79769313e308 && a2[30] > 0.349999994;
  }
  *(_DWORD *)(a1 + 80) += v8;
  uint64_t result = sub_100EBA25C();
  if (result) {
    int v10 = 1;
  }
  else {
    int v10 = a2[36] != -1.79769313e308 && a2[41] > -1.0;
  }
  int v11 = v4 & v8;
  *(_DWORD *)(a1 + 88) += v10;
  if (!*(unsigned char *)(a1 + 104))
  {
    if (v11 & v10) {
      return result;
    }
    goto LABEL_24;
  }
  if (((v11 ^ 1 | v10) & 1) == 0) {
    ++*(_DWORD *)(a1 + 100);
  }
  if ((v11 & 1) == 0) {
LABEL_24:
  }
    ++*(_DWORD *)(a1 + 92);
  return result;
}

uint64_t sub_100B37900(uint64_t a1)
{
  if (*(double *)(a1 + 40) > 0.0 && CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 48) < *(double *)(a1 + 40))
  {
    if (sub_100B37640((double *)a1)) {
      return 4294967291;
    }
    else {
      return 0;
    }
  }
  int v3 = *(unsigned __int8 *)(a1 + 104);
  BOOL v4 = sub_100B37640((double *)a1);
  if (!v3)
  {
    if (!v4)
    {
      if ((sub_100EBA38C() & 1) == 0 && *(void *)(a1 + 72) < 2uLL) {
        return 4294967294;
      }
      if (sub_100B376B8(a1)) {
        return 4294967293;
      }
      goto LABEL_8;
    }
    return 0xFFFFFFFFLL;
  }
  if (v4) {
    return 0xFFFFFFFFLL;
  }
LABEL_8:
  double v5 = (double)*(int *)(a1 + 92) * 2.56;
  float v6 = (float)(int)sub_100EB9FE0();
  if (v5 <= (float)(sub_100EBA094() * v6)) {
    return 0;
  }
  else {
    return 4294967292;
  }
}

void sub_100B379E4(uint64_t a1, double *a2, char a3)
{
  sub_100B381DC(a1, *(_DWORD *)(a1 + 32));
  if (*(double *)(a1 + 24) == -1.0)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102480198, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_102480198))
    {
      *(void *)uint64_t buf = 0x300000008;
      *(_DWORD *)&uint8_t buf[8] = 2;
      sub_1004F7D80(qword_102480180, buf, 3uLL);
      __cxa_atexit((void (*)(void *))sub_1004F7E04, qword_102480180, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_102480198);
    }
    __int16 v55 = 0;
    *(_OWORD *)unsigned int v54 = xmmword_101D1E250;
    memset(&v54[2], 0, 135);
    long long v56 = xmmword_101D1E250;
    uint64_t v57 = 0;
    int v58 = 0;
    v60[0] = 0;
    uint64_t v59 = 0;
    *(void *)((char *)v60 + 5) = 0;
    *(void *)((char *)&v60[1] + 6) = 0;
    char v61 = 0;
    memset(&v60[3], 0, 24);
    long long v62 = xmmword_101D1E250;
    uint64_t v63 = 0;
    int v64 = 0;
    unint64_t v65 = 0xFFEFFFFFFFFFFFFFLL;
    int v76 = 0;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    int v71 = 0;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    memset(v75, 0, sizeof(v75));
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    unint64_t v79 = 0xFFEFFFFFFFFFFFFFLL;
    uint64_t v80 = 0;
    int v81 = 0;
    uint64_t v87 = 0;
    __int16 v88 = 0;
    int v93 = 0;
    int v86 = 0;
    long long v85 = 0u;
    long long v84 = 0u;
    long long v83 = 0u;
    long long v82 = 0u;
    long long v90 = 0u;
    long long v89 = 0u;
    char v91 = 0;
    memset(v92, 0, sizeof(v92));
    unint64_t v94 = 0xFFEFFFFFFFFFFFFFLL;
    long long v113 = 0u;
    long long v112 = 0u;
    long long v111 = 0u;
    long long v110 = 0u;
    long long v109 = 0u;
    long long v108 = 0u;
    long long v107 = 0u;
    long long v106 = 0u;
    long long v105 = 0u;
    long long v104 = 0u;
    long long v103 = 0u;
    long long v102 = 0u;
    long long v101 = 0u;
    long long v100 = 0u;
    long long v99 = 0u;
    long long v98 = 0u;
    long long v97 = 0u;
    long long v96 = 0u;
    long long v95 = 0u;
    uint64_t v114 = 0;
    unint64_t v115 = 0xFFEFFFFFFFFFFFFFLL;
    long long v116 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    unint64_t v120 = 0xFFEFFFFFFFFFFFFFLL;
    uint64_t v121 = 0;
    int v122 = 0;
    uint64_t v123 = 0;
    char v124 = 0;
    unint64_t v125 = 0xFFEFFFFFFFFFFFFFLL;
    uint64_t v127 = 0;
    uint64_t v126 = 0;
    uint64_t v128 = 0x80000000800000;
    uint64_t v130 = 0;
    uint64_t v129 = 0;
    long long v131 = xmmword_101D1E260;
    uint64_t v132 = 0x80000000800000;
    long long v133 = 0u;
    long long v134 = 0u;
    uint64_t v135 = 0;
    unint64_t v136 = 0xFFEFFFFFFFFFFFFFLL;
    long long v137 = 0u;
    long long v138 = 0u;
    long long v139 = 0u;
    long long v140 = 0u;
    long long v141 = 0u;
    long long v142 = 0u;
    int v143 = 0;
    unint64_t v144 = 0xFFEFFFFFFFFFFFFFLL;
    __int16 v145 = 0;
    int v146 = 0;
    unint64_t v147 = 0xFFEFFFFFFFFFFFFFLL;
    uint64_t v148 = 7;
    unint64_t v149 = 0xFFEFFFFFFFFFFFFFLL;
    char v150 = 0;
    uint64_t v152 = 0;
    uint64_t v151 = 0;
    uint64_t v153 = 0;
    sub_100174478(a2, qword_102480180, (uint64_t)v54);
    *(unsigned char *)(a1 + 104) = a3;
    sub_100B37748(a1, (double *)v54);
    int v6 = sub_100B37900(a1);
    if (v6)
    {
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022E5AD0);
      }
      float v7 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
      {
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        double v9 = *(double *)(a1 + 16);
        uint64_t v10 = *(void *)(a1 + 40);
        uint64_t v11 = *(void *)(a1 + 48);
        uint64_t v12 = *(void *)(a1 + 72);
        double v13 = *(double *)(a1 + 56) - v9;
        double v14 = v13 - *(float *)(a1 + 64);
        int v15 = *(unsigned __int8 *)(a1 + 68);
        int v16 = *(_DWORD *)(a1 + 96);
        int v17 = *(_DWORD *)(a1 + 100);
        int v18 = v16 - *(_DWORD *)(a1 + 80);
        int v19 = v16 - *(_DWORD *)(a1 + 84);
        int v20 = *(_DWORD *)(a1 + 92);
        int v21 = v16 - *(_DWORD *)(a1 + 88);
        *(_DWORD *)uint64_t buf = 67243776;
        *(_DWORD *)&uint8_t buf[4] = v6;
        *(_WORD *)&uint8_t buf[8] = 2050;
        *(CFAbsoluteTime *)&buf[10] = Current;
        *(_WORD *)&unsigned char buf[18] = 2050;
        *(double *)&buf[20] = v9;
        __int16 v30 = 2050;
        uint64_t v31 = v10;
        __int16 v32 = 2050;
        uint64_t v33 = v11;
        __int16 v34 = 1026;
        int v35 = v12;
        __int16 v36 = 2050;
        double v37 = v13;
        __int16 v38 = 2050;
        double v39 = v14;
        __int16 v40 = 1026;
        int v41 = v15;
        __int16 v42 = 1026;
        int v43 = v16;
        __int16 v44 = 1026;
        int v45 = v18;
        __int16 v46 = 1026;
        int v47 = v19;
        __int16 v48 = 1026;
        int v49 = v21;
        __int16 v50 = 1026;
        int v51 = v20;
        __int16 v52 = 1026;
        int v53 = v17;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "VO2MaxBackgroundEstimationDeescalation,reason,%{public}d,timestamp,%{public}f,deescalatorStartTime,%{public}f,timeToExtendAfterHighExertion,%{public}f,lastTimeHRMetExertionThreshold,%{public}f,locationType,%{public}d,sessionStatsDuration,%{public}f,sessionStatsBadSeconds,%{public}f,sessionStatsPreconditionFailed,%{public}d,pairStatsTotalSamples,%{public}d,pairStatsBadHR,%{public}d,pairStatsBadWR,%{public}d,pairStatsBadGPS,%{public}d,pairStatsBadSamples,%{public}d,pairStatsExtraSamplesFromRelaxedDeescalationRules,%{public}d", buf, 0x74u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1022E5AD0);
        }
        CFAbsoluteTimeGetCurrent();
        uint64_t v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLVO2MaxEstimationDeescalator::update(const CLWorkoutPredictorInputs &, BOOL)", "%s\n", v28);
        if (v28 != buf) {
          free(v28);
        }
      }
      double v22 = CFAbsoluteTimeGetCurrent();
      *(double *)(a1 + 24) = v22;
      if (*(double *)(a1 + 40) > 0.0)
      {
        double v23 = *(double *)(a1 + 48);
        if (v23 > 0.0 && v23 < v22)
        {
          *(double *)a1 = v23;
          *(double *)(a1 + 8) = v22;
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_1022E5AD0);
          }
          unint64_t v24 = qword_1024191C8;
          if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
          {
            double v25 = *(double *)a1;
            uint64_t v26 = *(void *)(a1 + 8);
            *(_DWORD *)uint64_t buf = 134349312;
            *(double *)&uint8_t buf[4] = v25;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(void *)&buf[14] = v26;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "VO2Max Background Escalation, HRRecovery startTime,%{public}f,endTime,%{public}f", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024191C0 != -1) {
              dispatch_once(&qword_1024191C0, &stru_1022E5AD0);
            }
            long long v27 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLVO2MaxEstimationDeescalator::update(const CLWorkoutPredictorInputs &, BOOL)", "%s\n", v27);
            if (v27 != buf) {
              free(v27);
            }
          }
        }
      }
    }
  }
}

void sub_100B3817C(_Unwind_Exception *a1)
{
}

BOOL sub_100B3819C(uint64_t a1, uint64_t *a2)
{
  *a2 = sub_100B381DC(a1, *(_DWORD *)(a1 + 32));
  return *(double *)(a1 + 24) != -1.0;
}

uint64_t sub_100B381DC(uint64_t a1, int a2)
{
  if ((a2 + 5) < 6) {
    return 5 - (a2 + 5);
  }
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022E5AD0);
  }
  BOOL v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unexpected DeescalationReason value: %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022E5AD0);
    }
    double v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CMActivityReason CLVO2MaxEstimationDeescalator::getActivityReasonFromDeescalationReason(CLVO2MaxEstimationDeescalator::DeescalationReason) const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return 0;
}

void sub_100B383A4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a2;
  double Current = CFAbsoluteTimeGetCurrent();
  double v5 = *(double *)(a1 + 16);
  double v6 = *(double *)a2;
  float v7 = *(float *)(a2 + 8);
  if (*(unsigned char *)(a2 + 13)) {
    *(double *)(a1 + 48) = v6;
  }
  double v8 = v6 - v5;
  double v9 = v7;
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022E5AD0);
  }
  double v10 = Current - v5;
  uint64_t v11 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
  {
    double v12 = *(float *)(a2 + 8);
    int v13 = *(unsigned __int8 *)(a2 + 12);
    int v14 = *(unsigned __int8 *)(a2 + 13);
    uint64_t v15 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t buf = 134285057;
    double v18 = v8;
    __int16 v19 = 2049;
    double v20 = v12;
    __int16 v21 = 2049;
    double v22 = v8 - v9;
    __int16 v23 = 2049;
    double v24 = v10;
    __int16 v25 = 1025;
    int v26 = v13;
    __int16 v27 = 1025;
    int v28 = v14;
    __int16 v29 = 2049;
    uint64_t v30 = v15;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "VO2SessionStatus,duration,%{private}.3f,totalGoodSeconds,%{private}.3f,totalBadSeconds,%{private}.3f,timeElapsed,%{private}.3f,preConditionFailed,%{private}d,lastHRMetExertionThreshold,%{private}d,lastTimeHRMetExertionThreshold,%{private}f", buf, 0x40u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022E5AD0);
    }
    int v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVO2MaxEstimationDeescalator::feedVO2MaxSessionStats(const VO2MaxSessionStats &)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
}

void sub_100B38634(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

NSDictionary *sub_100B38664()
{
  v1[0] = +[NSString stringWithUTF8String:"VO2MaxPowerBudgetEstimatorQueryLookbackInterval"];
  v2[0] = &off_102397BA8;
  v1[1] = +[NSString stringWithUTF8String:"SensitiveEscalationExtendedBudgetRefreshInterval"];
  v2[1] = &off_102397BC0;
  v1[2] = +[NSString stringWithUTF8String:"VO2MaxDeescalatorExtendAfterHighExertionTimeSeconds"];
  v2[2] = &off_102397BD8;
  v1[3] = +[NSString stringWithUTF8String:"SensitiveEscalationBudgetAllowanceSeconds"];
  v2[3] = &off_102397BF0;
  v1[4] = +[NSString stringWithUTF8String:"SensitiveEscalationExtendedBudgetAllowanceSeconds"];
  v2[4] = &off_102397C08;
  v1[5] = +[NSString stringWithUTF8String:"SensitiveEscalationGeneralStairsBudgetAllowanceSeconds"];
  v2[5] = &off_102397C20;
  v1[6] = +[NSString stringWithUTF8String:"SensitiveEscalationGeneralStairsBudgetRefreshInterval"];
  v2[6] = &off_102397C38;
  uint64_t result = +[NSDictionary dictionaryWithObjects:v2 forKeys:v1 count:7];
  qword_102480178 = (uint64_t)result;
  return result;
}

void *sub_100B387B8(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    if (!v3) {
      goto LABEL_15;
    }
    if (v3 != 12) {
      goto LABEL_17;
    }
    uint64_t v2 = *(void *)a1;
  }
  else
  {
    uint64_t v2 = a1;
    if (*(unsigned char *)(a1 + 23) != 12)
    {
      if (*(unsigned char *)(a1 + 23))
      {
LABEL_17:
        sub_100134750(v9, "size");
        uint64_t v7 = sub_100B38A98((uint64_t *)v9, (uint64_t *)a1);
LABEL_19:
        double v5 = (void *)v7;
        goto LABEL_20;
      }
LABEL_15:
      sub_100134750(v9, "empty");
      sub_100134750(v14, " ");
      double v5 = (void *)sub_100B38A98((uint64_t *)v9, (uint64_t *)v14);
      if (v15 < 0) {
        operator delete(v14[0]);
      }
LABEL_20:
      if (SHIBYTE(v10) < 0) {
        operator delete(v9[0]);
      }
      return v5;
    }
  }
  for (uint64_t i = 0; i != 12; ++i)
  {
    if (*(char *)(v2 + i) < 0 || (_DefaultRuneLocale.__runetype[*(unsigned __int8 *)(v2 + i)] & 0x10000) == 0)
    {
      sub_100134750(v9, "nonhex");
      uint64_t v7 = sub_100B38A98((uint64_t *)v9, (uint64_t *)a1);
      goto LABEL_19;
    }
  }
  v14[0] = 0;
  sub_1004BAEC8((void (__cdecl ***)(std::basic_stringstream<char> *__hidden))v9, (const std::string *)a1, 24);
  *(_DWORD *)((char *)&v9[1] + *((void *)v9[0] - 3)) = *(_DWORD *)((unsigned char *)&v9[1] + *((void *)v9[0] - 3)) & 0xFFFFFFB5 | 8;
  std::istream::operator>>();
  double v5 = v14[0];
  *(void **)((char *)v9
  uint64_t v10 = v6;
  if (v13 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return v5;
}

void sub_100B38A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_100B38A98(uint64_t *a1, uint64_t *a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022E5B10);
  }
  BOOL v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a1 + 23) >= 0) {
      double v5 = a1;
    }
    else {
      double v5 = (uint64_t *)*a1;
    }
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v6 = a2;
    }
    else {
      uint64_t v6 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 136446467;
    *(void *)&uint8_t buf[4] = v5;
    __int16 v11 = 2081;
    double v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#Warning malformed mac address error, %{public}s, %{private}s", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E5B10);
    }
    double v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static CLMacAddress CLMacAddress::newFromMalformedMac(const std::string &, const std::string &)", "%s\n", v9);
    if (v9 != buf) {
      free(v9);
    }
  }
  sub_100134750(buf, "ff:ff:ff:ff:ff:ff");
  uint64_t v7 = sub_100B38F04(buf);
  if (v13 < 0) {
    operator delete(*(void **)buf);
  }
  return v7;
}

void sub_100B38CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B38CF4(char *a1)
{
  if (a1[23] < 0)
  {
    uint64_t v2 = *((void *)a1 + 1);
    if (v2)
    {
      memset(&__str, 0, sizeof(__str));
      uint64_t v3 = *(char **)a1;
      goto LABEL_6;
    }
    goto LABEL_17;
  }
  uint64_t v2 = a1[23];
  if (!a1[23])
  {
LABEL_17:
    sub_100134750(&__str, "empty");
    sub_100134750(&__p, " ");
    uint64_t v10 = sub_100B38A98((uint64_t *)&__str, (uint64_t *)&__p);
    goto LABEL_29;
  }
  memset(&__str, 0, sizeof(__str));
  uint64_t v3 = a1;
  do
  {
LABEL_6:
    __darwin_ct_rune_t v4 = *v3;
    if (v4 < 0 || (_DefaultRuneLocale.__runetype[v4] & 0x10000) == 0)
    {
      sub_100134750(&__p, "nonhex");
      uint64_t v10 = sub_100B38A98((uint64_t *)&__p, (uint64_t *)a1);
      goto LABEL_29;
    }
    std::string::value_type v5 = __tolower(v4);
    std::string::push_back(&__str, v5);
    ++v3;
    --v2;
  }
  while (v2);
  std::string::size_type size = __str.__r_.__value_.__l.__size_;
  std::string::size_type v7 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v7 = __str.__r_.__value_.__l.__size_;
  }
  if (v7 > 0xB)
  {
    std::string::operator=(&__p, &__str);
  }
  else
  {
    BOOL v8 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    if (size == 12)
    {
      std::string::size_type v9 = 12;
    }
    else
    {
      unint64_t v11 = 0;
      do
      {
        std::string::push_back(&__p, 48);
        ++v11;
        BOOL v8 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v9 = __str.__r_.__value_.__l.__size_;
        }
      }
      while (12 - v9 > v11);
    }
    if (v8) {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    else {
      p_str = &__str;
    }
    std::string::append(&__p, (const std::string::value_type *)p_str, v9);
  }
  uint64_t v10 = (uint64_t)sub_100B387B8((uint64_t)&__p);
LABEL_29:
  uint64_t v13 = v10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v13;
}

void sub_100B38EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B38F04(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)a1;
      goto LABEL_6;
    }
LABEL_24:
    sub_100134750(v15, "empty");
    sub_100134750(__p, " ");
    uint64_t v5 = sub_100B38A98((uint64_t *)v15, (uint64_t *)__p);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
LABEL_29:
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    return v5;
  }
  uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  if (!*(unsigned char *)(a1 + 23)) {
    goto LABEL_24;
  }
  uint64_t v3 = a1;
LABEL_6:
  int v4 = 0;
  uint64_t v5 = 0;
  char v6 = 0;
  int v7 = 0;
  uint64_t v8 = v3 - 1;
  do
  {
    int v9 = *(char *)(v8 + v2);
    if (v9 == 58)
    {
      ++v7;
      if (v4 == 2)
      {
        int v4 = 0;
        goto LABEL_20;
      }
      if (v4 != 1)
      {
        sub_100134750(v15, "multibyte");
        uint64_t v11 = sub_100B38A98((uint64_t *)v15, (uint64_t *)a1);
        goto LABEL_28;
      }
      int v4 = 0;
    }
    else
    {
      int v10 = v9 - 48;
      if ((v9 - 48) > 9)
      {
        if ((v9 - 65) > 5)
        {
          if ((v9 - 97) > 5) {
            goto LABEL_26;
          }
          int v10 = v9 - 87;
        }
        else
        {
          int v10 = v9 - 55;
        }
      }
      if (v10 == -1)
      {
LABEL_26:
        sub_100134750(v15, "nonhex");
        uint64_t v11 = sub_100B38A98((uint64_t *)v15, (uint64_t *)a1);
        goto LABEL_28;
      }
      v5 += (uint64_t)v10 << v6;
      ++v4;
    }
    v6 += 4;
LABEL_20:
    --v2;
  }
  while (v2);
  if (v7 && v7 != 5)
  {
    sub_100134750(v15, "colons");
    uint64_t v11 = sub_100B38A98((uint64_t *)v15, (uint64_t *)a1);
LABEL_28:
    uint64_t v5 = v11;
    goto LABEL_29;
  }
  return v5;
}

void sub_100B390AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_100B390EC(unsigned __int8 *a1)
{
  return bswap32(*(_DWORD *)(a1 + 2)) | ((unint64_t)a1[1] << 32) | ((unint64_t)*a1 << 40);
}

uint64_t sub_100B39108()
{
  sub_100134750(__p, "ff:ff:ff:ff:ff:ff");
  uint64_t v0 = sub_100B38F04((uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return v0;
}

void sub_100B3915C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100B39178(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL sub_100B3918C(void *a1, void *a2)
{
  return *a1 != *a2;
}

BOOL sub_100B391A0(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_100B391B4(void *a1, void *a2)
{
  return *a1 <= *a2;
}

BOOL sub_100B391C8(void *a1, void *a2)
{
  return *a1 > *a2;
}

BOOL sub_100B391DC()
{
  sub_10006DF94();
  if (v6 < 0)
  {
    BOOL v1 = v5 == 12 && *(void *)v4 == 0x6666666666666666 && v4[2] == 1717986918;
    operator delete(v4);
  }
  else
  {
    return v6 == 12 && v4 == (_DWORD *)0x6666666666666666 && v5 == 1717986918;
  }
  return v1;
}

void sub_100B39278(std::string *a1@<X8>)
{
  sub_10006DF94();
  uint64_t v2 = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  while (1)
  {
    unsigned __int8 v3 = v7;
    if ((char)v7 < 0) {
      break;
    }
    if ((unint64_t)v2 >= v7) {
      return;
    }
LABEL_6:
    if (v2)
    {
      std::string::push_back(a1, 58);
      unsigned __int8 v3 = v7;
    }
    if ((v3 & 0x80u) == 0) {
      int v4 = __p;
    }
    else {
      int v4 = (void **)__p[0];
    }
    std::string::push_back(a1, v2[(void)v4]);
    if ((v7 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    std::string::push_back(a1, v2[(void)v5 + 1]);
    v2 += 2;
  }
  if (v2 < __p[1]) {
    goto LABEL_6;
  }
  operator delete(__p[0]);
}

void sub_100B39344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_100B39370(unint64_t *a1)
{
  return bswap64(*a1) >> 16;
}

void sub_100B39380(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_100B393B0()
{
  BOOL v16 = 0;
  sub_1000C7F88(&buf);
  int v0 = sub_1000D2988(buf, "iCloudSharingEnabled", &v16);
  if (*((void *)&buf + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
  }
  if (v0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E5B30);
    }
    BOOL v1 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      if (v16) {
        uint64_t v2 = "true";
      }
      else {
        uint64_t v2 = "false";
      }
      LODWORD(buf) = 136380675;
      *(void *)((char *)&buf + 4) = v2;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "CLWifi1Settings, #Warning defaults write iCloudSharingEnabled to %{private}s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E5B30);
      }
      if (v16) {
        double v12 = "true";
      }
      else {
        double v12 = "false";
      }
      *(_DWORD *)int v17 = 136380675;
      *(void *)&v17[4] = v12;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiPositionWithAssociatedApSettings::iCloudSharingEnabledForDevice()", "%s\n", v13);
      if (v13 != (char *)&buf) {
        free(v13);
      }
    }
    unsigned __int8 v3 = (uint64_t *)&v16;
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E5B30);
    }
    int v4 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100103240();
      sub_10073ABEC(&buf);
      uint64_t v5 = v22 >= 0 ? &buf : (long long *)buf;
      *(_DWORD *)int v17 = 136446210;
      *(void *)&v17[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLWifi1Settings, system version: %{public}s", v17, 0xCu);
      if (v22 < 0) {
        operator delete((void *)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E5B30);
      }
      sub_100103240();
      sub_10073ABEC(v17);
      if (v18 >= 0) {
        char v14 = v17;
      }
      else {
        char v14 = *(unsigned char **)v17;
      }
      int v19 = 136446210;
      double v20 = v14;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      if (v18 < 0) {
        operator delete(*(void **)v17);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiPositionWithAssociatedApSettings::iCloudSharingEnabledForDevice()", "%s\n", v15);
      if (v15 != (char *)&buf) {
        free(v15);
      }
    }
    sub_100103240();
    if (sub_10016CCBC())
    {
      unsigned __int8 v3 = (uint64_t *)((char *)sub_1014122A8() + 93);
    }
    else
    {
      sub_100103240();
      if (sub_10010145C())
      {
        unsigned __int8 v3 = sub_1014122A8() + 12;
      }
      else
      {
        sub_100103240();
        int v7 = sub_1001B7C64();
        sub_100103240();
        if (v7)
        {
          int v8 = sub_10015F708();
          int v9 = sub_1014122A8();
          if (v8) {
            unsigned __int8 v3 = (uint64_t *)((char *)v9 + 94);
          }
          else {
            unsigned __int8 v3 = (uint64_t *)((char *)v9 + 95);
          }
        }
        else if (sub_10073D06C())
        {
          unsigned __int8 v3 = (uint64_t *)((char *)sub_1014122A8() + 98);
        }
        else
        {
          sub_100103240();
          int v10 = sub_10073D198();
          uint64_t v11 = sub_1014122A8();
          if (v10) {
            unsigned __int8 v3 = (uint64_t *)((char *)v11 + 99);
          }
          else {
            unsigned __int8 v3 = (uint64_t *)((char *)v11 + 102);
          }
        }
      }
    }
  }
  return *(unsigned __int8 *)v3;
}

void sub_100B39808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_1000DB0A0(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B39828(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100B39858()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    int v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)int v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100B39910(_Unwind_Exception *a1)
{
}

void sub_100B39928()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    int v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100B399D0(_Unwind_Exception *a1)
{
}

id sub_100B39C90(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) onGeoCountryCodeChangeNotification:a2 andMonitorRegion:*(void *)(a1 + 40)];
}

void sub_100B3A028(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_100B3A058(uint64_t a1)
{
  if (!*(void *)(a1 + 48)) {
    sub_1013E1440();
  }
  return a1 + 48;
}

void sub_100B3A118(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022E5BF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRangingSubscription::onBTLERangeNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022E5BF8);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRangingSubscription::onBTLERangeNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100B3CDB4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100B3A2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100B3A2F4@<X0>(uint64_t a1@<X8>)
{
  v3[0] = off_1022E5C68;
  v3[1] = sub_100B3A3F8;
  v3[2] = 0;
  v3[3] = v3;
  sub_100134750(__p, "kCLConnectionMessageRanging");
  sub_100B3DBD8((uint64_t)v6, (uint64_t)v3);
  sub_100B3E214(a1, (unsigned __int8 *)__p, 1);
  sub_100B3E190(v6);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return sub_100B3E190(v3);
}

void sub_100B3A3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_100B3A3F8(uint64_t a1, int a2, uint64_t a3)
{
  id v33 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_100B3EBC0(v42, a1 + 56);
  sub_1007899D4(a1 + 56, *(void **)(a1 + 64));
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_100134750(v40, (char *)[[*(id *)(a1 + 24) legacyClientKey] UTF8String]);
  int v5 = sub_1004D5D9C(a3, "kCLConnectionMessageRegionsKey");
  if (v5 < 1)
  {
LABEL_76:
    sub_100B3C680(a1);
    if (sub_10009C834(a1))
    {
      sub_100B3C124(a1);
      sub_1001978C8(a1);
    }
    else if (a2)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022E5C18);
      }
      __int16 v23 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#Warning Unable to subscribe to ranging.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022E5C18);
        }
        LOWORD(v44) = 0;
        uint64_t v31 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)", "%s\n", v31);
        if (v31 != buf) {
          free(v31);
        }
      }
      *(void *)long long buf = buf;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0;
      sub_100B3CCBC((uint64_t)v42, (void *)(a1 + 56), (uint64_t *)buf);
      for (uint64_t i = *(void *)&buf[8]; (unsigned char *)i != buf; uint64_t i = *(void *)(i + 8))
      {
        sub_1000E9354(&v44);
        sub_100B3CAD4(i + 16, (uint64_t)&v44);
        v38.__r_.__value_.__r.__words[0] = 1;
        sub_1004D31B8((uint64_t)&v44, "kCLConnectionMessageErrorKey", &v38);
        v38.__r_.__value_.__r.__words[0] = sub_1000E9358((uint64_t)&v44);
        sub_100B3CC38(a1);
        sub_10013F3C4(&v44);
      }
      sub_10013415C((uint64_t *)buf);
    }
    goto LABEL_129;
  }
  int v6 = 0;
  while (1)
  {
    sub_1000E9354(v39);
    if (!sub_100012960(a3, "kCLConnectionMessageRegionsKey", v39))
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022E5C18);
      }
      __int16 v14 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Unable to parse ranged region,%{public}d.", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022E5C18);
        }
        int v44 = 67240192;
        *(_DWORD *)int v45 = v6;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)", "%s\n", v15);
        if (v15 != buf) {
          free(v15);
        }
      }
      goto LABEL_68;
    }
    memset(&v38, 0, sizeof(v38));
    sub_1004D1284((uint64_t)v39, "kCLConnectionMessageIdentifierKey", &v38);
    memset(&__p, 0, sizeof(__p));
    sub_1004D1284((uint64_t)v39, "kCLConnectionMessageOnBehalfOfKey", &__p);
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022E5C18);
      }
      int v8 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
      {
        int v9 = v40;
        if (v41 < 0) {
          int v9 = (void **)v40[0];
        }
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = v9;
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = p_p;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Client %{public}s is attempting ranging as a proxy service to %{public}s", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022E5C18);
        }
        char v11 = v40;
        if (v41 < 0) {
          char v11 = (void **)v40[0];
        }
        double v12 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          double v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v44 = 136446466;
        *(void *)int v45 = v11;
        *(_WORD *)&v45[8] = 2082;
        *(void *)&v45[10] = v12;
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)", "%s\n", v13);
        if (v13 != buf) {
          free(v13);
        }
      }
      goto LABEL_64;
    }
    sub_10048B0C8((uint64_t)&v44, (long long *)v40, (long long *)&v38, (long long *)&__p);
    sub_10006EF84((uint64_t)v39, "kCLConnectionMessageRegionDefinitionKey", (_DWORD *)v47 + 1);
    sub_1004D1284((uint64_t)v39, "kCLConnectionMessageProximityUUIDKey", (std::string *)&v45[4]);
    sub_1004D0240((uint64_t)v39, "kCLConnectionMessageMajorKey", v47);
    sub_1004D0240((uint64_t)v39, "kCLConnectionMessageMinorKey", (_WORD *)v47 + 1);
    __int16 v36 = 0;
    __int16 v35 = 0;
    BOOL v34 = 0;
    if ((sub_1000D2988(a3, "kCLConnectionMessageNotifyOnEntryKey", (BOOL *)&v36 + 1) & 1) == 0)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022E5C18);
      }
      __int16 v25 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "kCLConnectionMessageNotifyOnEntryKey";
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022E5C18);
        }
        *(_DWORD *)int v43 = 136446210;
        *(void *)&v43[4] = "kCLConnectionMessageNotifyOnEntryKey";
        int v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)", "%s\n", v26);
        goto LABEL_139;
      }
      goto LABEL_124;
    }
    if ((sub_1000D2988(a3, "kCLConnectionMessageNotifyOnExitKey", (BOOL *)&v36) & 1) == 0)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022E5C18);
      }
      __int16 v27 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "kCLConnectionMessageNotifyOnExitKey";
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022E5C18);
        }
        *(_DWORD *)int v43 = 136446210;
        *(void *)&v43[4] = "kCLConnectionMessageNotifyOnExitKey";
        int v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)", "%s\n", v26);
        goto LABEL_139;
      }
      goto LABEL_124;
    }
    if ((sub_1000D2988(a3, "kCLConnectionMessageNotifyEntryStateOnDisplayKey", (BOOL *)&v35 + 1) & 1) == 0)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022E5C18);
      }
      int v28 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "kCLConnectionMessageNotifyEntryStateOnDisplayKey";
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022E5C18);
        }
        *(_DWORD *)int v43 = 136446210;
        *(void *)&v43[4] = "kCLConnectionMessageNotifyEntryStateOnDisplayKey";
        int v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)", "%s\n", v26);
        goto LABEL_139;
      }
      goto LABEL_124;
    }
    if ((sub_1000D2988(a3, "kCLConnectionMessageConservativeEntry", (BOOL *)&v35) & 1) == 0) {
      break;
    }
    if ((sub_1000D2988(a3, "kCLConnectionMessageEmergencyKey", &v34) & 1) == 0)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022E5C18);
      }
      uint64_t v30 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = "kCLConnectionMessageEmergencyKey";
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_124;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022E5C18);
      }
      *(_DWORD *)int v43 = 136446210;
      *(void *)&v43[4] = "kCLConnectionMessageEmergencyKey";
      int v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)", "%s\n", v26);
LABEL_139:
      if (v26 != buf) {
        free(v26);
      }
      goto LABEL_124;
    }
    if (HIBYTE(v36)) {
      v48 |= 1u;
    }
    if ((_BYTE)v36) {
      v48 |= 2u;
    }
    if (HIBYTE(v35)) {
      v48 |= 4u;
    }
    if ((_BYTE)v35) {
      v48 |= 8u;
    }
    if (!HIDWORD(v47[0]))
    {
      sub_100134750(buf, "com.apple.locationd.ranging");
      char v16 = sub_1010A4BAC(a1);
      char v17 = v16;
      if ((buf[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)buf);
        if ((v17 & 1) == 0)
        {
LABEL_55:
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022E5C18);
          }
          uint64_t v19 = qword_102419528;
          if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
          {
            double v20 = &v38;
            if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              double v20 = (std::string *)v38.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = v20;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Ranging any region,%{public}s, requires an entitlement.", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022E5C18);
            }
            __int16 v21 = &v38;
            if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              __int16 v21 = (std::string *)v38.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)int v43 = 136446210;
            *(void *)&v43[4] = v21;
            char v22 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)", "%s\n", v22);
            if (v22 != buf) {
              free(v22);
            }
          }
          sub_1000E9354(buf);
          sub_100B3CAD4((uint64_t)&v44, (uint64_t)buf);
          *(void *)int v43 = 1;
          sub_1004D31B8((uint64_t)buf, "kCLConnectionMessageErrorKey", v43);
          *(void *)int v43 = sub_1000E9358((uint64_t)buf);
          sub_100B3CC38(a1);
          sub_10013F3C4(buf);
          goto LABEL_63;
        }
      }
      else if ((v16 & 1) == 0)
      {
        goto LABEL_55;
      }
    }
    *(void *)long long buf = off_1022B3DE8;
    if (SHIBYTE(v46) < 0)
    {
      sub_1000DC48C(&buf[8], *(void **)&v45[4], *(unint64_t *)&v45[12]);
    }
    else
    {
      *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)&v45[4];
      uint64_t v50 = v46;
    }
    uint64_t v51 = v47[0];
    *(void *)int v43 = buf;
    __int16 v18 = sub_100B3F308((uint64_t **)(a1 + 56), (uint64_t)buf, (uint64_t)&unk_101D0B290, (uint64_t *)v43);
    sub_10078B488((uint64_t **)v18 + 9, (uint64_t)&v44, (uint64_t)&v44);
    *(void *)long long buf = off_1022B3DE8;
    if (SHIBYTE(v50) < 0) {
      operator delete(*(void **)&buf[8]);
    }
LABEL_63:
    sub_100111F40((uint64_t)&v44);
LABEL_64:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
LABEL_68:
    sub_10013F3C4(v39);
    if (v5 == ++v6) {
      goto LABEL_76;
    }
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022E5C18);
  }
  __int16 v29 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = "kCLConnectionMessageConservativeEntry";
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022E5C18);
    }
    *(_DWORD *)int v43 = 136446210;
    *(void *)&v43[4] = "kCLConnectionMessageConservativeEntry";
    int v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLRangingSubscription::handleRequestRanging(BOOL, const CLNameValuePair &)", "%s\n", v26);
    goto LABEL_139;
  }
LABEL_124:
  sub_100111F40((uint64_t)&v44);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  sub_10013F3C4(v39);
LABEL_129:
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  sub_1007899D4((uint64_t)v42, (void *)v42[1]);
}

void sub_100B3B594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  sub_10013F3C4(&a38);
  if (a45 < 0) {
    operator delete(a40);
  }
  sub_1007899D4((uint64_t)&a46, (void *)a47);

  _Unwind_Resume(a1);
}

uint64_t sub_100B3B6F4(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100B3B730(uint64_t a1)
{
  *(void *)a1 = off_1022E5BA8;
  uint64_t v2 = (_OWORD *)(a1 + 80);
  if (*(unsigned char *)(a1 + 80))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022E5C18);
    }
    unsigned __int8 v3 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *(void *)(a1 + 24);
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "iB: ending metric session (BeaconRangingSession) for %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022E5C18);
      }
      double v12 = *(void ***)(a1 + 24);
      LODWORD(v14[0]) = 138412290;
      *(void ***)((char *)v14 + 4) = v12;
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLRangingSubscription::~CLRangingSubscription()", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    sub_100C84664((uint64_t)v2);
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    memset(__p, 0, sizeof(__p));
    *(void *)long long buf = 0;
    *(_OWORD *)char v16 = 0u;
    *(void *)&uint8_t buf[8] = 0xBFF0000000000000;
    LODWORD(v18) = 0;
    DWORD2(v21) = 0;
    *uint64_t v2 = *(_OWORD *)buf;
    int v5 = (void **)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      operator delete(*v5);
    }
    *(_OWORD *)int v5 = *(_OWORD *)v16;
    *(void **)(a1 + 112) = __p[0];
    HIBYTE(__p[0]) = 0;
    LOBYTE(v16[0]) = 0;
    int v6 = (void **)(a1 + 120);
    if (*(char *)(a1 + 143) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)int v6 = *(_OWORD *)&__p[1];
    *(void **)(a1 + 136) = __p[3];
    HIBYTE(__p[3]) = 0;
    LOBYTE(__p[1]) = 0;
    long long v7 = v19;
    *(_OWORD *)(a1 + 144) = v18;
    *(_OWORD *)(a1 + 160) = v7;
    sub_100B3DC88((void **)(a1 + 176));
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0;
    *(void *)&long long v21 = 0;
    long long v20 = 0uLL;
    *(_DWORD *)(a1 + 200) = 0;
    v14[0] = (void **)&v20;
    sub_100B3DD28(v14);
    if (SHIBYTE(__p[3]) < 0) {
      operator delete(__p[1]);
    }
    if (SHIBYTE(__p[0]) < 0) {
      operator delete(v16[0]);
    }
  }
  uint64_t v8 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*(void **)(a1 + 296));
  }
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*(void **)(a1 + 272));
  }
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  if (*(char *)(a1 + 247) < 0) {
    operator delete(*(void **)(a1 + 224));
  }
  uint64_t v9 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *(void *)long long buf = a1 + 176;
  sub_100B3DD28((void ***)buf);
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  sub_1007899D4(a1 + 56, *(void **)(a1 + 64));
  uint64_t v10 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  sub_100029A7C(a1);
  return a1;
}

void sub_100B3BB14(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_100B3BB20(uint64_t a1)
{
  unsigned __int8 v3 = (void **)(a1 + 96);
  sub_100B3DD28(&v3);
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_100B3BB80(uint64_t a1)
{
  sub_100B3B730(a1);

  operator delete();
}

void sub_100B3BBB8(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v5 = sub_100054C14(a1, a2, a3, a4, a5);
  *(void *)uint64_t v5 = off_1022E5BA8;
  *(void *)(v5 + 48) = 0;
  *(void *)(v5 + 64) = 0;
  *(void *)(v5 + 56) = v5 + 64;
  *(unsigned char *)(v5 + 80) = 0;
  *(void *)(v5 + 72) = 0;
  *(void *)(v5 + 88) = 0xBFF0000000000000;
  *(void *)(v5 + 152) = 0;
  *(unsigned char *)(v5 + 160) = 0;
  *(_DWORD *)(v5 + 164) = 0;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_DWORD *)(v5 + 144) = 0;
  *(void *)(v5 + 184) = 0;
  *(void *)(v5 + 192) = 0;
  *(void *)(v5 + 176) = 0;
  *(_DWORD *)(v5 + 200) = 0;
  *(void *)(v5 + 208) = 0;
  *(_DWORD *)(v5 + 216) = -1;
  *(_WORD *)(v5 + 320) = 0;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_OWORD *)(v5 + 272) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  sub_10120A518();
}

void sub_100B3BD5C(_Unwind_Exception *a1)
{
  sub_100783674(v4);
  uint64_t v6 = *(void *)(v1 + 208);
  *(void *)(v1 + 208) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_100B3BB20(v3);
  sub_1007899D4(v2, *(void **)(v1 + 64));
  uint64_t v7 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_100029A7C(v1);
  _Unwind_Resume(a1);
}

void sub_100B3BDFC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022E5BF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRangingSubscription::onAppMonitorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022E5BF8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRangingSubscription::onAppMonitorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100B3DA30(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100B3BFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B3BFDC(uint64_t a1)
{
  if ((sub_100138A70(a1, 2) & 1) == 0) {
    sub_10012A200(a1);
  }
  unsigned int v2 = [*(id *)(a1 + 16) transientAwareRegistrationResult];
  if (v2 <= 8)
  {
    if (((1 << v2) & 0x1C) != 0)
    {
      sub_100B3C680(a1);
      sub_1000E9354(v7);
      uint64_t v4 = 1;
      sub_1004D31B8((uint64_t)v7, "kCLConnectionMessageErrorKey", &v4);
      uint64_t v4 = (uint64_t)&v4;
      uint64_t v5 = &v4;
      uint64_t v6 = 0;
      sub_100B3C9D8((void *)(a1 + 56), &v4);
      for (uint64_t i = v5; i != &v4; uint64_t i = (uint64_t *)i[1])
      {
        sub_100B3CAD4((uint64_t)(i + 2), (uint64_t)v7);
        sub_1000E9358((uint64_t)v7);
        sub_100B3CC38(a1);
      }
      sub_10013415C(&v4);
      sub_10013F3C4(v7);
    }
    else if (((1 << v2) & 0x103) != 0)
    {
      sub_100B3C124(a1);
    }
  }
  sub_100B3C124(a1);
}

void sub_100B3C0F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_10013415C((uint64_t *)va);
  sub_10013F3C4(va1);
  _Unwind_Resume(a1);
}

void sub_100B3C124(uint64_t a1)
{
  sub_100134750(&__p, "kCLConnectionMessageRanging");
  char v2 = sub_10012E364(a1);
  char v3 = v2;
  if (SBYTE3(v14) < 0)
  {
    operator delete((void *)__p);
    if ((v3 & 1) == 0) {
      return;
    }
  }
  else if ((v2 & 1) == 0)
  {
    return;
  }
  if (sub_100138A70(a1, 2))
  {
    v8[0] = (uint64_t)v8;
    v8[1] = (uint64_t)v8;
    uint64_t v9 = 0;
    sub_100B3C9D8((void *)(a1 + 56), v8);
    if (v9)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022E5C18);
      }
      uint64_t v4 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
      {
        uint64_t __p = 68289282;
        __int16 __p_8 = 2082;
        __p_10 = "";
        __int16 v13 = 2050;
        uint64_t v14 = v9;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Starting ranging for regions\", \"rangedRegions\":%{public}lu}", (uint8_t *)&__p, 0x1Cu);
      }
      sub_1001978F0(a1, 4);
      sub_100B3A058(a1);
      sub_100B3F4A0();
    }
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022E5C18);
    }
    uint64_t v7 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t __p = 68289026;
      __int16 __p_8 = 2082;
      __p_10 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning There are no regions to range.\"}", (uint8_t *)&__p, 0x12u);
    }
    sub_10013415C(v8);
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022E5C38);
    }
    uint64_t v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 24);
      uint64_t __p = 68289282;
      __int16 __p_8 = 2082;
      __p_10 = "";
      __int16 v13 = 2114;
      uint64_t v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"client not authorized for ranging; not starting yet\", \"Client\":%{public, location:escape_only}@}",
        (uint8_t *)&__p,
        0x1Cu);
    }
    sub_100B3C680(a1);
  }
}

void sub_100B3C644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void sub_100B3C680(uint64_t a1)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022E5C18);
  }
  char v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Stopping ranging.\"}", buf, 0x12u);
  }
  sub_10012A200(a1);
  uint64_t v3 = sub_100B3A058(a1);
  [*(id *)(*(void *)v3 + 16) unregister:*(void *)(*(void *)v3 + 8) forNotification:0];
  if (*(unsigned char *)(a1 + 80))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022E5C18);
    }
    uint64_t v4 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = *(void *)(a1 + 24);
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: ending metric session (BeaconRangingSession) for %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022E5C18);
      }
      uint64_t v9 = *(void ***)(a1 + 24);
      LODWORD(v11[0]) = 138412290;
      *(void ***)((char *)v11 + 4) = v9;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRangingSubscription::stopRanging_nl()", "%s\n", v10);
      if (v10 != buf) {
        free(v10);
      }
    }
    sub_100C84664(a1 + 80);
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(void *)long long buf = 0;
    memset(&buf[16], 0, 48);
    *(void *)&uint8_t buf[8] = 0xBFF0000000000000;
    LODWORD(v13) = 0;
    DWORD2(v16) = 0;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)buf;
    uint64_t v6 = (void **)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = *(_OWORD *)&buf[16];
    *(void *)(a1 + 112) = *(void *)&buf[32];
    buf[39] = 0;
    uint8_t buf[16] = 0;
    uint64_t v7 = (void **)(a1 + 120);
    if (*(char *)(a1 + 143) < 0) {
      operator delete(*v7);
    }
    *(_OWORD *)uint64_t v7 = *(_OWORD *)&buf[40];
    *(void *)(a1 + 136) = *(void *)&buf[56];
    buf[63] = 0;
    buf[40] = 0;
    long long v8 = v14;
    *(_OWORD *)(a1 + 144) = v13;
    *(_OWORD *)(a1 + 160) = v8;
    sub_100B3DC88((void **)(a1 + 176));
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0;
    *(void *)&long long v16 = 0;
    long long v15 = 0uLL;
    *(_DWORD *)(a1 + 200) = 0;
    v11[0] = (void **)&v15;
    sub_100B3DD28(v11);
    if ((buf[63] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[40]);
    }
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
  }
}

uint64_t sub_100B3C9D8(void *a1, uint64_t *a2)
{
  sub_10013415C(a2);
  uint64_t v6 = (void *)*a1;
  uint64_t v4 = a1 + 1;
  uint64_t v5 = v6;
  if (v6 != v4)
  {
    do
    {
      uint64_t v7 = (void *)v5[9];
      if (v7 != v5 + 10)
      {
        do
        {
          long long v8 = sub_100B3E7C4((uint64_t)a2, 0, 0, (uint64_t)(v7 + 4));
          uint64_t v9 = *a2;
          *long long v8 = *a2;
          v8[1] = a2;
          *(void *)(v9 + 8) = v8;
          *a2 = (uint64_t)v8;
          ++a2[2];
          uint64_t v10 = (void *)v7[1];
          if (v10)
          {
            do
            {
              char v11 = v10;
              uint64_t v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              char v11 = (void *)v7[2];
              BOOL v12 = *v11 == (void)v7;
              uint64_t v7 = v11;
            }
            while (!v12);
          }
          uint64_t v7 = v11;
        }
        while (v11 != v5 + 10);
      }
      long long v13 = (void *)v5[1];
      if (v13)
      {
        do
        {
          long long v14 = v13;
          long long v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          long long v14 = (void *)v5[2];
          BOOL v12 = *v14 == (void)v5;
          uint64_t v5 = v14;
        }
        while (!v12);
      }
      uint64_t v5 = v14;
    }
    while (v14 != v4);
  }
  return 1;
}

uint64_t sub_100B3CAD4(uint64_t a1, uint64_t a2)
{
  sub_1004D37A8(a2, "kCLConnectionMessageNameKey", (char *)(a1 + 88));
  sub_1004D37A8(a2, "kCLConnectionMessageOnBehalfOfKey", (char *)(a1 + 64));
  int v6 = 0;
  sub_1000EA838(a2, "kCLConnectionMessageRegionTypeKey", &v6);
  int v6 = *(_DWORD *)(a1 + 36) & 7;
  sub_1000EA838(a2, "kCLConnectionMessageRegionDefinitionKey", &v6);
  sub_1004D37A8(a2, "kCLConnectionMessageProximityUUIDKey", (char *)(a1 + 8));
  sub_1004D25D0(a2, "kCLConnectionMessageMajorKey", (unsigned __int16 *)(a1 + 32));
  sub_1004D25D0(a2, "kCLConnectionMessageMinorKey", (unsigned __int16 *)(a1 + 34));
  int v5 = *(_DWORD *)(a1 + 112) & 1;
  sub_1000EA838(a2, "kCLConnectionMessageNotifyOnEntryKey", &v5);
  int v5 = *(_DWORD *)(a1 + 112) & 2;
  sub_1000EA838(a2, "kCLConnectionMessageNotifyOnExitKey", &v5);
  int v5 = *(_DWORD *)(a1 + 112) & 4;
  sub_1000EA838(a2, "kCLConnectionMessageNotifyEntryStateOnDisplayKey", &v5);
  int v5 = *(_DWORD *)(a1 + 112) & 8;
  sub_1000EA838(a2, "kCLConnectionMessageConservativeEntry", &v5);
  LOBYTE(v5) = 0;
  sub_1000EA238(a2, "kCLConnectionMessageEmergencyKey", &v5);
  return 1;
}

void sub_100B3CC38(uint64_t a1)
{
  sub_10048C758(off_1022E5CE8, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100B3CCA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B3CCBC(uint64_t a1, void *a2, uint64_t *a3)
{
  sub_10013415C(a3);
  long long v8 = (void *)*a2;
  int v6 = a2 + 1;
  uint64_t v7 = v8;
  if (v8 != v6)
  {
    do
    {
      uint64_t v9 = sub_10078AD94(a1, (uint64_t)(v7 + 4));
      if ((void *)(a1 + 8) == v9)
      {
        sub_100B3E824((uint64_t)v14, (void *)v7[9], v7 + 10, a3);
      }
      else
      {
        uint64_t v10 = v9[9];
        uint64_t v19 = v7[9];
        uint64_t v17 = v10;
        __int16 v18 = v7 + 10;
        v15[1] = a3;
        long long v16 = v9 + 10;
        v15[0] = a3;
        sub_100B3E8D0((uint64_t)&v19, &v18, (uint64_t)&v17, &v16, (uint64_t)v15, (uint64_t)v14);
      }
      char v11 = (void *)v7[1];
      if (v11)
      {
        do
        {
          BOOL v12 = v11;
          char v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          BOOL v12 = (void *)v7[2];
          BOOL v13 = *v12 == (void)v7;
          uint64_t v7 = v12;
        }
        while (!v13);
      }
      uint64_t v7 = v12;
    }
    while (v12 != v6);
  }
}

void sub_100B3CDB4(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (!*a3)
  {
    sub_1000E9354(v63);
    uint64_t v11 = a4 + 8;
    BOOL v12 = sub_10078AD94(a1 + 56, a4 + 8);
    BOOL v13 = v12;
    if ((void *)(a1 + 64) == v12)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022E5C18);
      }
      long long v15 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
      {
        sub_10048B578(v11);
        long long v16 = v73 >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)long long v68 = 136380675;
        *(void *)&void v68[4] = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "iB: Unable to find ranged region,%{private}s.", v68, 0xCu);
        if (v73 < 0) {
          operator delete(*(void **)buf);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022E5C18);
        }
        sub_10048B578(v11);
        if (v71 >= 0) {
          uint64_t v17 = v68;
        }
        else {
          uint64_t v17 = *(unsigned char **)v68;
        }
        int valuePtr = 136380675;
        unint64_t v65 = v17;
        __int16 v18 = (char *)_os_log_send_and_compose_impl();
        if (v71 < 0) {
          operator delete(*(void **)v68);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRangingSubscription::onBTLERangeNotification(int, const CLBTLERangeManager_Type::Notification &, const CLBTLERangeManager_Type::NotificationData &)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
      goto LABEL_92;
    }
    if ((*(_DWORD *)a4 - 1) >= 2)
    {
      if (!*(_DWORD *)a4)
      {
        int v58 = v12;
        uint64_t v61 = a1;
        theArray = CFArrayCreateMutable(kCFAllocatorDefault, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a4 + 56) - *(void *)(a4 + 48)) >> 3), &kCFTypeArrayCallBacks);
        uint64_t v19 = *(void *)(a4 + 48);
        uint64_t v60 = a4;
        if (v19 != *(void *)(a4 + 56))
        {
          long long v20 = (unsigned char *)(a1 + 80);
          long long v21 = (_DWORD *)(v19 + 56);
          uint64_t v59 = (unsigned char *)(a1 + 80);
          do
          {
            if (*v20) {
              sub_100C84584((unint64_t)v20, (uint64_t)(v21 - 14));
            }
            sub_1000E9354(buf);
            int valuePtr = *(v21 - 5) & 7;
            if ((*(v21 - 4) - 1) >= 3) {
              int v22 = 0;
            }
            else {
              int v22 = *(v21 - 4);
            }
            Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 8, &kCFTypeArrayCallBacks);
            CFNumberRef v24 = sub_100122110(&valuePtr);
            __int16 v25 = (char *)(v21 - 12);
            if (*((char *)v21 - 25) < 0) {
              __int16 v25 = *(char **)v25;
            }
            CFStringRef v26 = sub_1000B73E0(v25);
            CFNumberRef v27 = sub_1004D3B6C((unsigned __int16 *)v21 - 12);
            CFNumberRef v28 = sub_1004D3B6C((unsigned __int16 *)v21 - 11);
            *(_DWORD *)long long v68 = v22;
            CFNumberRef v29 = sub_100122110(v68);
            CFNumberRef v30 = sub_1004D3BFC(v21 - 2);
            CFNumberRef v31 = sub_1004D3BA8(v21);
            *(void *)long long v68 = CFAbsoluteTimeGetCurrent();
            CFNumberRef v32 = sub_1004D3BFC(v68);
            CFArrayAppendValue(Mutable, v24);
            CFArrayAppendValue(Mutable, v26);
            CFArrayAppendValue(Mutable, v27);
            CFArrayAppendValue(Mutable, v28);
            CFArrayAppendValue(Mutable, v29);
            CFArrayAppendValue(Mutable, v30);
            CFArrayAppendValue(Mutable, v31);
            CFArrayAppendValue(Mutable, v32);
            CFArrayAppendValue(theArray, Mutable);
            CFRelease(v31);
            CFRelease(v30);
            CFRelease(v29);
            CFRelease(v28);
            CFRelease(v27);
            CFRelease(v26);
            CFRelease(v24);
            CFRelease(Mutable);
            CFRelease(v32);
            sub_10013F3C4(buf);
            long long v20 = v59;
            id v33 = (char *)(v21 + 8);
            v21 += 22;
          }
          while (v33 != *(char **)(v60 + 56));
        }
        sub_1000EA8A4((uint64_t)v63, "kCLConnectionMessageBeaconsKey", (uint64_t)theArray);
        CFRelease(theArray);
        BOOL v34 = (void *)v58[9];
        if (v34 != v58 + 10)
        {
          do
          {
            __int16 v35 = v34 + 4;
            sub_100B3CAD4((uint64_t)(v34 + 4), (uint64_t)v63);
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022E5C18);
            }
            __int16 v36 = qword_102419528;
            if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
            {
              (*(void (**)(uint8_t *__return_ptr, void *))(*v35 + 16))(buf, v34 + 4);
              int v37 = v73;
              std::string v38 = *(uint8_t **)buf;
              int v39 = sub_1004D5D9C((uint64_t)v63, "kCLConnectionMessageBeaconsKey");
              *(_DWORD *)long long v68 = 136380931;
              __int16 v40 = buf;
              if (v37 < 0) {
                __int16 v40 = v38;
              }
              *(void *)&void v68[4] = v40;
              __int16 v69 = 1026;
              int v70 = v39;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "@iB: Sending kCLConnectionMessageRanging for region,%{private}s, with beacons,%{public}d.", v68, 0x12u);
              if (v73 < 0) {
                operator delete(*(void **)buf);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419520 != -1) {
                dispatch_once(&qword_102419520, &stru_1022E5C18);
              }
              (*(void (**)(unsigned char *__return_ptr, void *))(*v35 + 16))(v68, v34 + 4);
              int v44 = v71;
              int v45 = *(unsigned char **)v68;
              int v46 = sub_1004D5D9C((uint64_t)v63, "kCLConnectionMessageBeaconsKey");
              int valuePtr = 136380931;
              int v47 = v68;
              if (v44 < 0) {
                int v47 = v45;
              }
              unint64_t v65 = v47;
              __int16 v66 = 1026;
              int v67 = v46;
              int v48 = (char *)_os_log_send_and_compose_impl();
              if (v71 < 0) {
                operator delete(*(void **)v68);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLRangingSubscription::onBTLERangeNotification(int, const CLBTLERangeManager_Type::Notification &, const CLBTLERangeManager_Type::NotificationData &)", "%s\n", v48);
              if (v48 != (char *)buf) {
                free(v48);
              }
            }
            *(void *)long long buf = sub_1000E9358((uint64_t)v63);
            sub_100B3D9AC(v61);
            char v41 = (void *)v34[1];
            if (v41)
            {
              do
              {
                __int16 v42 = v41;
                char v41 = (void *)*v41;
              }
              while (v41);
            }
            else
            {
              do
              {
                __int16 v42 = (void *)v34[2];
                BOOL v43 = *v42 == (void)v34;
                BOOL v34 = v42;
              }
              while (!v43);
            }
            BOOL v34 = v42;
          }
          while (v42 != v58 + 10);
        }
        goto LABEL_92;
      }
      uint64_t v14 = 17;
    }
    else
    {
      uint64_t v14 = 16;
    }
    *(void *)long long buf = v14;
    sub_1004D31B8((uint64_t)v63, "kCLConnectionMessageErrorKey", buf);
    int v49 = (void *)v13[9];
    uint64_t v50 = v13 + 10;
    if (v49 != v13 + 10)
    {
      do
      {
        uint64_t v51 = v49 + 4;
        sub_100B3CAD4((uint64_t)(v49 + 4), (uint64_t)v63);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022E5C18);
        }
        __int16 v52 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(uint8_t *__return_ptr, void *))(*v51 + 16))(buf, v49 + 4);
          int v53 = buf;
          if (v73 < 0) {
            int v53 = *(uint8_t **)buf;
          }
          *(_DWORD *)long long v68 = 136380931;
          *(void *)&void v68[4] = v53;
          __int16 v69 = 1026;
          int v70 = v14;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#Warning Sending kCLConnectionMessageRangingError for region,%{private}s with error,%{public}d.", v68, 0x12u);
          if (v73 < 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022E5C18);
          }
          (*(void (**)(unsigned char *__return_ptr, void *))(*v51 + 16))(v68, v49 + 4);
          long long v56 = v68;
          if (v71 < 0) {
            long long v56 = *(unsigned char **)v68;
          }
          int valuePtr = 136380931;
          unint64_t v65 = v56;
          __int16 v66 = 1026;
          int v67 = v14;
          uint64_t v57 = (char *)_os_log_send_and_compose_impl();
          if (v71 < 0) {
            operator delete(*(void **)v68);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRangingSubscription::onBTLERangeNotification(int, const CLBTLERangeManager_Type::Notification &, const CLBTLERangeManager_Type::NotificationData &)", "%s\n", v57);
          if (v57 != (char *)buf) {
            free(v57);
          }
        }
        *(void *)long long buf = sub_1000E9358((uint64_t)v63);
        sub_100B3CC38(a1);
        unsigned int v54 = (void *)v49[1];
        if (v54)
        {
          do
          {
            __int16 v55 = v54;
            unsigned int v54 = (void *)*v54;
          }
          while (v54);
        }
        else
        {
          do
          {
            __int16 v55 = (void *)v49[2];
            BOOL v43 = *v55 == (void)v49;
            int v49 = v55;
          }
          while (!v43);
        }
        int v49 = v55;
      }
      while (v55 != v50);
    }
LABEL_92:
    sub_10013F3C4(v63);
    return;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022E5C18);
  }
  int v5 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *a3;
    *(_DWORD *)long long buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Unknown range notification received, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022E5C18);
    }
    int v7 = *a3;
    *(_DWORD *)long long v68 = 67240192;
    *(_DWORD *)&void v68[4] = v7;
    long long v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRangingSubscription::onBTLERangeNotification(int, const CLBTLERangeManager_Type::Notification &, const CLBTLERangeManager_Type::NotificationData &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
}

void sub_100B3D8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
}

void sub_100B3D9AC(uint64_t a1)
{
  sub_10048C758(&off_1022E5CF0, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100B3DA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B3DA30(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if ((*a3 - 1) >= 3)
  {
    if (*a3 == 4)
    {
      *(_DWORD *)(a1 + 216) = *(_DWORD *)a4;
      std::string::operator=((std::string *)(a1 + 224), (const std::string *)(a4 + 8));
      std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a4 + 32));
      std::string::operator=((std::string *)(a1 + 272), (const std::string *)(a4 + 56));
      std::string::operator=((std::string *)(a1 + 296), (const std::string *)(a4 + 80));
      *(_WORD *)(a1 + 320) = *(_WORD *)(a4 + 104);
    }
    return;
  }
  uint64_t v6 = *(unsigned __int8 *)(a4 + 31);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = *(unsigned __int8 *)(a4 + 31);
  }
  else {
    uint64_t v7 = *(void *)(a4 + 16);
  }
  uint64_t v8 = *(unsigned __int8 *)(a1 + 247);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 232);
  }
  if (v7 != v8) {
    return;
  }
  uint64_t v10 = (const void **)(a4 + 8);
  BOOL v12 = (void *)(a1 + 224);
  uint64_t v11 = *(void **)(a1 + 224);
  if (v9 >= 0) {
    BOOL v13 = (unsigned __int8 *)(a1 + 224);
  }
  else {
    BOOL v13 = *(unsigned __int8 **)(a1 + 224);
  }
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*v10, v13, *(void *)(a4 + 16))) {
      return;
    }
    goto LABEL_19;
  }
  if (!*(unsigned char *)(a4 + 31))
  {
LABEL_19:
    *(_DWORD *)(a1 + 216) = -1;
    if (v9 < 0) {
      operator delete(v11);
    }
    uint64_t v14 = (void **)(a1 + 248);
    *BOOL v12 = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = 0;
    if (*(char *)(a1 + 271) < 0) {
      operator delete(*v14);
    }
    long long v15 = (void **)(a1 + 272);
    *uint64_t v14 = 0;
    *(void *)(a1 + 256) = 0;
    *(void *)(a1 + 264) = 0;
    if (*(char *)(a1 + 295) < 0) {
      operator delete(*v15);
    }
    long long v16 = (void **)(a1 + 296);
    NSObject *v15 = 0;
    *(void *)(a1 + 280) = 0;
    *(void *)(a1 + 288) = 0;
    if (*(char *)(a1 + 319) < 0) {
      operator delete(*v16);
    }
    *long long v16 = 0;
    *(void *)(a1 + 304) = 0;
    *(_WORD *)(a1 + 320) = 0;
    *(void *)(a1 + 312) = 0;
    return;
  }
  while (*(unsigned __int8 *)v10 == *v13)
  {
    uint64_t v10 = (const void **)((char *)v10 + 1);
    ++v13;
    if (!--v6) {
      goto LABEL_19;
    }
  }
}

void sub_100B3DBA8(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100B3DBD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_100B3DC58(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100B3DC88(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      int v5 = v3 - 40;
      uint64_t v6 = v3 - 40;
      uint64_t v7 = v3 - 40;
      do
      {
        uint64_t v8 = *(void (***)(char *))v7;
        v7 -= 40;
        (*v8)(v6);
        v5 -= 40;
        BOOL v9 = v6 == v1;
        uint64_t v6 = v7;
      }
      while (!v9);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_100B3DD28(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 40;
      uint64_t v7 = v4 - 40;
      uint64_t v8 = v4 - 40;
      do
      {
        BOOL v9 = *(void (***)(char *))v8;
        v8 -= 40;
        (*v9)(v7);
        v6 -= 40;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100B3DDE8(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

__n128 sub_100B3DE18(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1022E5C68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100B3DE64(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022E5C68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100B3DE94(uint64_t a1, uint64_t a2, long long *a3)
{
}

uint64_t sub_100B3DE9C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100B3DEDC()
{
}

void sub_100B3DEE8(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100B3DF44(a1, a2, (CLConnectionMessage **)&v3);
  if (*((void *)&v3 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_100B3DF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B3DF44(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  uint64_t v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  CFDictionaryRef DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_10013FA80((int)v15, DictionaryOfClasses);
  BOOL v14 = 0;
  if (sub_1000D2988((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14))
  {
    uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    BOOL v10 = (void *)(a2 + (v9 >> 1));
    if (v9) {
      uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022E5C18);
    }
    uint64_t v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022E5C18);
      }
    }
    BOOL v12 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)long long buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10013F3C4(v15);
}

void sub_100B3E174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void *sub_100B3E190(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100B3E214(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100B3E290(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100B3E27C(_Unwind_Exception *a1)
{
  sub_100B3E744(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100B3E290(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    BOOL v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_100B3E514(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_100B3E69C((uint64_t)v25, 0);
  return i;
}

void sub_100B3E4FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100B3E69C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_100B3E514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  __n128 result = sub_100B3E58C(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_100B3E574(_Unwind_Exception *a1)
{
  sub_100B3E69C(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_100B3E58C(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_100B3E604((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100B3E5E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B3E604(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_100B3E69C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100B3E6F4((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_100B3E6F4(uint64_t a1)
{
  sub_100B3E190((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_100B3E744(uint64_t a1)
{
  sub_100B3E780(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100B3E780(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100B3E6F4((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *sub_100B3E7C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = operator new(0x88uLL);
  *uint64_t v7 = a2;
  v7[1] = a3;
  sub_10048B9C8((uint64_t)(v7 + 2), a4);
  return v7;
}

void sub_100B3E810(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100B3E824(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      uint64_t v7 = sub_100B3E7C4((uint64_t)a4, 0, 0, (uint64_t)(v5 + 4));
      uint64_t v8 = *a4;
      *uint64_t v7 = *a4;
      v7[1] = a4;
      *(void *)(v8 + 8) = v7;
      *a4 = (uint64_t)v7;
      ++a4[2];
      unint64_t v9 = (void *)v5[1];
      if (v9)
      {
        do
        {
          unint64_t v10 = v9;
          unint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          unint64_t v10 = (void *)v5[2];
          BOOL v11 = *v10 == (void)v5;
          uint64_t v5 = v10;
        }
        while (!v11);
      }
      uint64_t v5 = v10;
    }
    while (v10 != a3);
    return a3;
  }
  return v5;
}

double sub_100B3E8D0@<D0>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v10 = *(void **)a1;
  BOOL v11 = *a2;
  if (*(void **)a1 == *a2)
  {
LABEL_31:
    BOOL v11 = v10;
    goto LABEL_32;
  }
  for (uint64_t i = *(void **)a3; *(void *)a3 != *a4; uint64_t i = *(void **)a3)
  {
    if (sub_10078AFC4((uint64_t)(v10 + 4), (uint64_t)(i + 4)))
    {
      sub_100B3EA90((uint64_t *)a5, *(void *)a1 + 32);
      unint64_t v15 = *(void **)a1;
      float v16 = *(void **)(*(void *)a1 + 8);
      if (v16)
      {
        do
        {
          float v17 = v16;
          float v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          float v17 = (void *)v15[2];
          BOOL v18 = *v17 == (void)v15;
          unint64_t v15 = v17;
        }
        while (!v18);
      }
      *(void *)a1 = v17;
    }
    else
    {
      if (sub_10078AFC4(*(void *)a3 + 32, *(void *)a1 + 32))
      {
        unint64_t v19 = *(void **)a3;
        unint64_t v20 = *(void **)(*(void *)a3 + 8);
        if (v20)
        {
          do
          {
            size_t v21 = v20;
            unint64_t v20 = (void *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            size_t v21 = (void *)v19[2];
            BOOL v18 = *v21 == (void)v19;
            unint64_t v19 = v21;
          }
          while (!v18);
        }
      }
      else
      {
        int v22 = *(void **)a1;
        unint64_t v23 = *(void **)(*(void *)a1 + 8);
        if (v23)
        {
          do
          {
            CFNumberRef v24 = v23;
            unint64_t v23 = (void *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            CFNumberRef v24 = (void *)v22[2];
            BOOL v18 = *v24 == (void)v22;
            int v22 = v24;
          }
          while (!v18);
        }
        *(void *)a1 = v24;
        __int16 v25 = *(void **)a3;
        CFStringRef v26 = *(void **)(*(void *)a3 + 8);
        if (v26)
        {
          do
          {
            size_t v21 = v26;
            CFStringRef v26 = (void *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            size_t v21 = (void *)v25[2];
            BOOL v18 = *v21 == (void)v25;
            __int16 v25 = v21;
          }
          while (!v18);
        }
      }
      *(void *)a3 = v21;
    }
    unint64_t v10 = *(void **)a1;
    BOOL v11 = *a2;
    if (*(void **)a1 == *a2) {
      goto LABEL_31;
    }
  }
LABEL_32:
  sub_100B3EB00(v10, v11, *(void *)a5, *(uint64_t **)(a5 + 8), &v28);
  *(void *)a6 = v28;
  double result = *(double *)&v29;
  *(_OWORD *)(a6 + 8) = v29;
  return result;
}

uint64_t *sub_100B3EA90(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  long long v4 = (uint64_t *)a1[1];
  uint64_t v5 = sub_100B3E7C4(*a1, 0, 0, a2);
  uint64_t v6 = *v4;
  *(void *)(v6 + 8) = v5;
  *uint64_t v5 = v6;
  *long long v4 = (uint64_t)v5;
  v5[1] = v4;
  ++*(void *)(v3 + 16);
  a1[1] = (uint64_t)v5;
  a1[1] = v5[1];
  return a1;
}

void sub_100B3EB00(void *a1@<X1>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X4>, void *a5@<X8>)
{
  uint64_t v7 = a1;
  if (a1 != a2)
  {
    do
    {
      unint64_t v10 = sub_100B3E7C4(a3, 0, 0, (uint64_t)(v7 + 4));
      uint64_t v11 = *a4;
      *(void *)(v11 + 8) = v10;
      void *v10 = v11;
      *a4 = (uint64_t)v10;
      v10[1] = a4;
      ++*(void *)(a3 + 16);
      unint64_t v12 = (void *)v7[1];
      if (v12)
      {
        do
        {
          BOOL v13 = v12;
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          BOOL v13 = (void *)v7[2];
          BOOL v14 = *v13 == (void)v7;
          uint64_t v7 = v13;
        }
        while (!v14);
      }
      uint64_t v7 = v13;
    }
    while (v13 != a2);
    uint64_t v7 = a2;
  }
  *a5 = v7;
  a5[1] = a3;
  a5[2] = a4;
}

uint64_t *sub_100B3EBC0(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100B3EC18(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_100B3EC00(_Unwind_Exception *a1)
{
  sub_1007899D4(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100B3EC18(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      double result = sub_100B3ECA4(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_100B3ECA4(uint64_t **a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_100B3ED3C(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    sub_100B3EED4((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000EDF90(a1, v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_10078B430((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *sub_100B3ED3C(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  BOOL v9 = a1 + 1;
  if (a1 + 1 != a2 && !sub_10078AE10(a5, (uint64_t)(a2 + 4)))
  {
    if (!sub_10078AE10((uint64_t)(a2 + 4), a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      BOOL v14 = (void *)a2[1];
      do
      {
        unint64_t v15 = v14;
        BOOL v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      BOOL v18 = a2;
      do
      {
        unint64_t v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        BOOL v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_10078AE10(a5, (uint64_t)(v15 + 4))) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    uint64_t v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      uint64_t v12 = v11;
      uint64_t v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    float v16 = a2;
    do
    {
      uint64_t v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      float v16 = v12;
    }
    while (v17);
  }
  if (sub_10078AE10((uint64_t)(v12 + 4), a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return sub_10078B2A8((uint64_t)a1, a3, a5);
}

uint64_t sub_100B3EED4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x60uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_100B3EF40((uint64_t)v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100B3EF28(_Unwind_Exception *a1)
{
  sub_10078B430(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100B3EF40(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1022B3DE8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_100B3EFF4((uint64_t *)(a1 + 40), a2 + 40);
  return a1;
}

void sub_100B3EFD4(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100B3EFF4(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100B3F04C(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_100B3F034(_Unwind_Exception *a1)
{
  sub_100789AA0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100B3F04C(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_100B3F0D8(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_100B3F0D8(uint64_t **a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_100B3F170(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    sub_10078B5B0((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000EDF90(a1, v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_10078B61C((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *sub_100B3F170(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  BOOL v9 = a1 + 1;
  if (a1 + 1 != a2 && !sub_10078AFC4(a5, (uint64_t)(a2 + 4)))
  {
    if (!sub_10078AFC4((uint64_t)(a2 + 4), a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      BOOL v14 = (void *)a2[1];
      do
      {
        unint64_t v15 = v14;
        BOOL v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      BOOL v18 = a2;
      do
      {
        unint64_t v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        BOOL v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_10078AFC4(a5, (uint64_t)(v15 + 4))) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    uint64_t v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      uint64_t v12 = v11;
      uint64_t v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    float v16 = a2;
    do
    {
      uint64_t v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      float v16 = v12;
    }
    while (v17);
  }
  if (sub_10078AFC4((uint64_t)(v12 + 4), a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return sub_10078B51C((uint64_t)a1, a3, a5);
}

uint64_t *sub_100B3F308(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)sub_10078B2A8((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_100B3F3B4((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000EDF90(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_10078B430((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_100B3F3B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x60uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_100B3F420(v6 + 4, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100B3F408(_Unwind_Exception *a1)
{
  sub_10078B430(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_100B3F420(void *a1, uint64_t a2)
{
  *a1 = off_1022B3DE8;
  long long v4 = a1 + 1;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1000DC48C(v4, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    v4[2] = *(void *)(a2 + 24);
    *(_OWORD *)long long v4 = v5;
  }
  uint64_t v6 = *(void *)(a2 + 32);
  a1[7] = 0;
  a1[6] = 0;
  a1[4] = v6;
  a1[5] = a1 + 6;
  return a1;
}

void sub_100B3F4A0()
{
}

void sub_100B3F550()
{
}

uint64_t sub_100B3F574(uint64_t result)
{
  if (*(void *)(result + 32))
  {
    sub_10013415C(*(uint64_t **)(result + 32));
    operator delete();
  }
  return result;
}

uint64_t *sub_100B3F5D0(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    long long v5 = sub_100B3E7C4((uint64_t)a1, 0, 0, i + 16);
    uint64_t v6 = *a1;
    *long long v5 = *a1;
    v5[1] = a1;
    *(void *)(v6 + 8) = v5;
    *a1 = (uint64_t)v5;
    ++a1[2];
  }
  return a1;
}

void sub_100B3F650(_Unwind_Exception *a1)
{
  sub_10013415C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100B3F664(uint64_t a1)
{
  *(void *)a1 = 0;
  *(_OWORD *)(a1 + 24) = xmmword_101D82EC8;
  *(_OWORD *)(a1 + 8) = xmmword_101D82EB8;
  *(_OWORD *)(a1 + 88) = xmmword_101D82F08;
  *(_OWORD *)(a1 + 72) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 56) = xmmword_101D82EE8;
  *(_OWORD *)(a1 + 40) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 148) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 136) = xmmword_101D82F38;
  *(_OWORD *)(a1 + 120) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 104) = xmmword_101D82F18;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 272) = xmmword_101D82F18;
  *(_OWORD *)(a1 + 288) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 304) = xmmword_101D82F38;
  *(_OWORD *)(a1 + 316) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 208) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 224) = xmmword_101D82EE8;
  *(_OWORD *)(a1 + 240) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 256) = xmmword_101D82F08;
  *(_OWORD *)(a1 + 176) = xmmword_101D82EB8;
  *(_OWORD *)(a1 + 192) = xmmword_101D82EC8;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 360) = 1;
  *(void *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 460) = 0u;
  sub_1000C7F88(buf);
  v8[0] = 0.0;
  if (sub_1000A699C(*(uint64_t *)&buf[0], "CLBackgroundInertialOdometryTelemetryThrottleInterval_s", v8)) {
    double v2 = v8[0];
  }
  else {
    double v2 = 1800.0;
  }
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  *(double *)(a1 + 480) = v2;
  *(void *)(a1 + 488) = 0;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022E5D18);
  }
  uint64_t v3 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a1 + 480);
    LODWORD(buf[0]) = 134217984;
    *(void *)((char *)buf + 4) = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#pbio, CLBackgroundInertialOdometryTelemetryThrottleInterval_s, %.3f", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022E5D18);
    }
    uint64_t v6 = *(void *)(a1 + 480);
    LODWORD(v8[0]) = 134217984;
    *(void *)((char *)v8 + 4) = v6;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLBackgroundInertialOdometryTelemetryCalculator::CLBackgroundInertialOdometryTelemetryCalculator()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return a1;
}

void sub_100B3F924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B3F948(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      sub_100B3F9A4(a1, v3, a3);
      v3 += 72;
    }
    while (v3 != v4);
  }
}

void sub_100B3F9A4(uint64_t a1, uint64_t a2, double a3)
{
  *(void *)a1 = *(void *)(a2 + 8);
  if (sub_1000E6DB4(a1 + 8))
  {
    if (*(double *)(a2 + 8) >= *(double *)(a1 + 168))
    {
      ++*(_DWORD *)(a1 + 400);
      int v6 = *(unsigned __int8 *)(a2 + 63);
      *(_DWORD *)(a1 + 404) += v6;
      *(_DWORD *)(a1 + 408) += *(unsigned __int8 *)(a2 + 64);
      *(_DWORD *)(a1 + 412) += *(unsigned __int8 *)(a2 + 65);
      if (v6)
      {
        float32x4_t v7 = *(float32x4_t *)(a2 + 20);
        v7.i64[1] = *(void *)(a2 + 32);
        *(float32x4_t *)(a1 + 344) = vaddq_f32(v7, *(float32x4_t *)(a1 + 344));
      }
    }
  }

  sub_100154748((double *)a1, a3);
}

void sub_100B3FA68(uint64_t a1, char a2, double a3)
{
  sub_100B3FAB8(a1, a3);
  *(unsigned char *)(a1 + 360) = a2;

  sub_100154748((double *)a1, a3);
}

uint64_t sub_100B3FAB8(uint64_t result, double a2)
{
  double v2 = *(double *)(result + 336);
  if (v2 < a2 && v2 > 0.0) {
    a2 = *(double *)(result + 336);
  }
  double v4 = a2 - *(double *)(result + 368);
  if (*(unsigned char *)(result + 360))
  {
    float v5 = v4 + *(float *)(result + 432);
    *(float *)(result + 432) = v5;
  }
  else
  {
    float v6 = v4 + *(float *)(result + 436);
    *(float *)(result + 436) = v6;
  }
  *(double *)(result + 368) = a2;
  return result;
}

void sub_100B3FB10(uint64_t a1, _DWORD *a2, _DWORD *a3, double a4)
{
  if ((*a2 - 1) <= 1)
  {
    sub_100B3FB84(a1, a4);
    *(_DWORD *)(a1 + 376) = *a3;
    sub_100154748((double *)a1, a4);
  }
}

float sub_100B3FB84(uint64_t a1, double a2)
{
  double v2 = *(double *)(a1 + 336);
  if (v2 >= a2 || v2 <= 0.0) {
    double v2 = a2;
  }
  double v4 = v2 - *(double *)(a1 + 384);
  *(double *)(a1 + 384) = v2;
  int v5 = *(_DWORD *)(a1 + 376);
  if (v5 > 40)
  {
    if (v5 == 41)
    {
LABEL_15:
      float result = v4 + *(float *)(a1 + 456);
      *(float *)(a1 + 456) = result;
    }
    else if (v5 == 52 || v5 == 56)
    {
LABEL_13:
      float result = v4 + *(float *)(a1 + 460);
      *(float *)(a1 + 460) = result;
    }
    else
    {
LABEL_20:
      float result = v4 + *(float *)(a1 + 472);
      *(float *)(a1 + 472) = result;
    }
  }
  else
  {
    switch(v5)
    {
      case 0:
        float result = v4 + *(float *)(a1 + 440);
        *(float *)(a1 + 440) = result;
        break;
      case 1:
      case 10:
        float result = v4 + *(float *)(a1 + 444);
        *(float *)(a1 + 444) = result;
        break;
      case 2:
      case 11:
        float result = v4 + *(float *)(a1 + 448);
        *(float *)(a1 + 448) = result;
        break;
      case 3:
      case 7:
      case 9:
        float result = v4 + *(float *)(a1 + 452);
        *(float *)(a1 + 452) = result;
        break;
      case 4:
        goto LABEL_15;
      case 5:
        goto LABEL_13;
      case 6:
        float result = v4 + *(float *)(a1 + 464);
        *(float *)(a1 + 464) = result;
        break;
      case 8:
        float result = v4 + *(float *)(a1 + 468);
        *(float *)(a1 + 468) = result;
        break;
      default:
        goto LABEL_20;
    }
  }
  return result;
}

double sub_100B3FCF8(uint64_t a1)
{
  double v2 = (_OWORD *)(a1 + 392);
  *(double *)(a1 + 392) = *(double *)(a1 + 336) - *(double *)(a1 + 168);
  uint64_t v3 = a1 + 176;
  CLClientGetDistanceCoordinates();
  *(float *)&double v4 = v4;
  *(_DWORD *)(a1 + 416) = LODWORD(v4);
  *(float *)(a1 + 420) = sqrtf((float)(*(float *)(a1 + 348) * *(float *)(a1 + 348))+ (float)(*(float *)(a1 + 344) * *(float *)(a1 + 344)));
  *(float *)&double v4 = sqrt(*(double *)(a1 + 196) * *(double *)(a1 + 196) + *(double *)(a1 + 28) * *(double *)(a1 + 28));
  *(_DWORD *)(a1 + 428) = LODWORD(v4);
  sub_100B3FAB8(a1, *(double *)(a1 + 336));
  sub_100B3FB84(a1, *(double *)(a1 + 336));
  long long v5 = *(_OWORD *)(a1 + 288);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 272);
  *(_OWORD *)(a1 + 120) = v5;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(a1 + 148) = *(_OWORD *)(v3 + 140);
  long long v6 = *(_OWORD *)(a1 + 224);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(a1 + 56) = v6;
  long long v7 = *(_OWORD *)(a1 + 256);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a1 + 240);
  *(_OWORD *)(a1 + 88) = v7;
  long long v8 = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a1 + 24) = v8;
  *(void *)(a1 + 168) = *(void *)(a1 + 336);
  *(_DWORD *)(a1 + 176) = 0xFFFF;
  *(void *)(a1 + 188) = 0;
  *(void *)(a1 + 180) = 0;
  *(_OWORD *)(a1 + 196) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 212) = _Q0;
  *(_OWORD *)(a1 + 228) = _Q0;
  *(_OWORD *)(a1 + 244) = _Q0;
  *(_DWORD *)(a1 + 260) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 288) = 0;
  *(void *)(v3 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 300) = 0x7FFFFFFF;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  sub_100B3FE70(a1, *(double *)&_Q0, *(double *)&v8, v14, v15, v16);
  *(_DWORD *)(a1 + 472) = 0;
  v2[3] = 0u;
  v2[4] = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  *double v2 = 0u;
  double result = *(double *)(a1 + 168);
  *(double *)(a1 + 368) = result;
  *(double *)(a1 + 384) = result;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  return result;
}

void sub_100B3FE70(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  double v6 = *(double *)(a1 + 392);
  if (v6 <= 0.0) {
    return;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 400);
  *(float *)&a2 = (float)v8;
  *(float *)&a6 = v6;
  if ((float)v8 <= *(float *)&a6) {
    float v9 = (float)v8 / *(float *)&a6;
  }
  else {
    float v9 = 1.0;
  }
  double v10 = *(float *)&a2;
  double v11 = *(float *)&a6;
  if (*(float *)&a6 + 2.0 >= *(float *)&a2)
  {
    float v14 = -1.0;
    if (v8)
    {
      float32x2_t v42 = vdiv_f32(vcvt_f32_u32(*(uint32x2_t *)(a1 + 408)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a2, 0));
      float v15 = (float)*(unsigned int *)(a1 + 404) / *(float *)&a2;
    }
    else
    {
      __asm { FMOV            V0.2S, #-1.0 }
      float32x2_t v42 = _D0;
      float v15 = -1.0;
    }
    float v41 = v15;
    float v21 = *(float *)(a1 + 416);
    float v22 = *(float *)(a1 + 420) - v21;
    if (v21 <= 0.0) {
      float v23 = -1.0;
    }
    else {
      float v23 = v22 / v21;
    }
    float v24 = *(float *)(a1 + 428);
    if (v24 <= 0.0) {
      float v24 = -1.0;
    }
    float v39 = v24;
    float v40 = v23;
    if (*(float *)&a6 <= 0.0)
    {
      __asm { FMOV            V0.4S, #-1.0 }
      float v26 = -1.0;
      float v27 = -1.0;
      float32x4_t v37 = _Q0;
      float32x4_t v38 = _Q0;
    }
    else
    {
      float32x4_t v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a6, 0);
      float32x4_t v37 = vdivq_f32(*(float32x4_t *)(a1 + 448), v25);
      float32x4_t v38 = vdivq_f32(*(float32x4_t *)(a1 + 432), v25);
      float v26 = *(float *)(a1 + 464) / *(float *)&a6;
      float v14 = *(float *)(a1 + 468) / *(float *)&a6;
      float v27 = *(float *)(a1 + 472) / *(float *)&a6;
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022E5D18);
    }
    long long v29 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134353920;
      double v44 = v11;
      __int16 v45 = 2050;
      double v46 = v9;
      __int16 v47 = 2050;
      double v48 = v41;
      __int16 v49 = 2050;
      double v50 = v42.f32[0];
      __int16 v51 = 2050;
      double v52 = v42.f32[1];
      __int16 v53 = 2050;
      double v54 = v21;
      __int16 v55 = 2050;
      double v56 = v39;
      __int16 v57 = 2050;
      double v58 = v22;
      __int16 v59 = 2050;
      double v60 = v40;
      __int16 v61 = 2050;
      double v62 = v38.f32[0];
      __int16 v63 = 2050;
      double v64 = v38.f32[1];
      __int16 v65 = 2050;
      double v66 = v38.f32[2];
      __int16 v67 = 2050;
      double v68 = v38.f32[3];
      __int16 v69 = 2050;
      double v70 = v37.f32[0];
      __int16 v71 = 2050;
      double v72 = v37.f32[1];
      __int16 v73 = 2050;
      double v74 = v37.f32[2];
      __int16 v75 = 2050;
      double v76 = v37.f32[3];
      __int16 v77 = 2050;
      double v78 = v26;
      __int16 v79 = 2050;
      double v80 = v14;
      __int16 v81 = 2050;
      double v82 = v27;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "#pbio, submitToCoreAnalytics, statistics,IOMeasurementInterval_s,%{public}.2f,IOSampleYield,%{public}.2f,FractionOfIOSamplesWithValidDeltaPosition,%{public}.2f,FractionOfIOSamplesWithValidDeltaVelocity,%{public}.2f,FractionOfIOSamplesWithValidAttitude,%{public}.2f,ReferenceDisplacement_m,%{public}.2f,ReferenceDisplacementUncertainty_m,%{public}.2f,DisplacementError_m,%{public}.2f,FractionalDisplacementError_m,%{public}.2f,FractionOfTimeInVisit_s,%{public}.2f,FractionOfTimeOutOfVisit_s,%{public}.2f,FractionOfTimeInMotionTypeUnknown_s,%{public}.2f,FractionOfTimeInMotionTypeFrozen_s,%{public}.2f,FractionOfTimeInMotionTypeStatic_s,%{public}.2f,FractionOfTimeInMotionTypeMoving_s,%{public}.2f,FractionOfTimeInMotionTypeWalking_s,%{public}.2f,FractionOfTimeInMotionTypeDriving_s,%{public}.2f,FractionOfTimeInMotionTypeCycling_s,%{public}.2f,FractionOfTimeInMotionTypeRunning_s,%{public}.2f,FractionOfTimeInMotionTypeWorkoutGeneric_s,%{public}.2f", buf, 0xCAu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022E5D18);
      }
      __int16 v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundInertialOdometryTelemetryCalculator::submitToCoreAnalytics()", "%s\n", v36);
      if (v36 != (char *)buf) {
        free(v36);
      }
    }
    double v30 = *(double *)(a1 + 168);
    if (v30 >= *(double *)(a1 + 488) + *(double *)(a1 + 480))
    {
      *(double *)(a1 + 488) = v30;
      AnalyticsSendEventLazy();
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022E5D18);
      }
      BOOL v34 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        double v35 = *(double *)(a1 + 168);
        *(_DWORD *)long long buf = 134217984;
        double v44 = v35;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "#pbio, submitToCoreAnalytics, complete for interval starting at MachContinuousTime, %.3f", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1)
      {
LABEL_49:
        uint64_t v13 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundInertialOdometryTelemetryCalculator::submitToCoreAnalytics()", "%s\n");
LABEL_50:
        if (v13 != buf) {
          free(v13);
        }
        return;
      }
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022E5D18);
      }
      CFNumberRef v31 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        double v32 = *(double *)(a1 + 480);
        double v33 = *(double *)(a1 + 488);
        *(_DWORD *)long long buf = 134218240;
        double v44 = v32;
        __int16 v45 = 2048;
        double v46 = v33;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "#pbio, submitToCoreAnalytics, throttling core analytics submissions to once per %.3f seconds, data for most recent submission was at CFAbsoluteTime %.3f seconds.", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_49;
      }
    }
    dispatch_once(&qword_102419380, &stru_1022E5D18);
    goto LABEL_49;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022E5D18);
  }
  uint64_t v12 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134349312;
    double v44 = v10;
    __int16 v45 = 2050;
    double v46 = v11;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#pbio, submitToCoreAnalytics, NumIOSamplesTotal, %{public}f, IOMeasurementInterval_s, %{public}.2f, unexpected number of IO samples received.", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022E5D18);
    }
    uint64_t v13 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLBackgroundInertialOdometryTelemetryCalculator::submitToCoreAnalytics()", "%s\n");
    goto LABEL_50;
  }
}

NSDictionary *sub_100B407A0(_DWORD *a1, double a2)
{
  v23[0] = @"MeasurementInterval_s";
  LODWORD(a2) = a1[8];
  v24[0] = +[NSNumber numberWithFloat:a2];
  v23[1] = @"IOSampleYield";
  LODWORD(v3) = a1[9];
  v24[1] = +[NSNumber numberWithFloat:v3];
  _OWORD v23[2] = @"FractionOfIOSamplesWithValidDeltaPosition";
  LODWORD(v4) = a1[10];
  float v24[2] = +[NSNumber numberWithFloat:v4];
  v23[3] = @"FractionOfIOSamplesWithValidDeltaVelocity";
  LODWORD(v5) = a1[11];
  v24[3] = +[NSNumber numberWithFloat:v5];
  void v23[4] = @"FractionOfIOSamplesWithValidAttitude";
  LODWORD(v6) = a1[12];
  void v24[4] = +[NSNumber numberWithFloat:v6];
  v23[5] = @"ReferenceDisplacement_m";
  LODWORD(v7) = a1[13];
  v24[5] = +[NSNumber numberWithFloat:v7];
  v23[6] = @"ReferenceDisplacementUncertainty_m";
  LODWORD(v8) = a1[14];
  v24[6] = +[NSNumber numberWithFloat:v8];
  v23[7] = @"DisplacementError_m";
  LODWORD(v9) = a1[15];
  v24[7] = +[NSNumber numberWithFloat:v9];
  v23[8] = @"FractionalDisplacementError_m";
  LODWORD(v10) = a1[16];
  v24[8] = +[NSNumber numberWithFloat:v10];
  v23[9] = @"FractionOfTimeInVisit_s";
  LODWORD(v11) = a1[17];
  v24[9] = +[NSNumber numberWithFloat:v11];
  v23[10] = @"FractionOfTimeOutOfVisit_s";
  LODWORD(v12) = a1[18];
  v24[10] = +[NSNumber numberWithFloat:v12];
  v23[11] = @"FractionOfTimeInMotionTypeUnknown_s";
  LODWORD(v13) = a1[19];
  v24[11] = +[NSNumber numberWithFloat:v13];
  v23[12] = @"FractionOfTimeInMotionTypeFrozen_s";
  LODWORD(v14) = a1[20];
  v24[12] = +[NSNumber numberWithFloat:v14];
  v23[13] = @"FractionOfTimeInMotionTypeStatic_s";
  LODWORD(v15) = a1[21];
  v24[13] = +[NSNumber numberWithFloat:v15];
  v23[14] = @"FractionOfTimeInMotionTypeMoving_s";
  LODWORD(v16) = a1[22];
  v24[14] = +[NSNumber numberWithFloat:v16];
  v23[15] = @"FractionOfTimeInMotionTypeWalking_s";
  LODWORD(v17) = a1[23];
  v24[15] = +[NSNumber numberWithFloat:v17];
  v23[16] = @"FractionOfTimeInMotionTypeDriving_s";
  LODWORD(v18) = a1[24];
  v24[16] = +[NSNumber numberWithFloat:v18];
  v23[17] = @"FractionOfTimeInMotionTypeCycling_s";
  LODWORD(v19) = a1[25];
  v24[17] = +[NSNumber numberWithFloat:v19];
  v23[18] = @"FractionOfTimeInMotionTypeRunning_s";
  LODWORD(v20) = a1[26];
  v24[18] = +[NSNumber numberWithFloat:v20];
  v23[19] = @"FractionOfTimeInMotionTypeWorkoutGeneric_s";
  LODWORD(v21) = a1[27];
  v24[19] = +[NSNumber numberWithFloat:v21];
  return +[NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:20];
}

void sub_100B40A48(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_100B40A78()
{
  if (qword_1024801A8 != -1) {
    dispatch_once(&qword_1024801A8, &stru_1022E5EF0);
  }
  return qword_1024801A0;
}

void sub_100B40ABC(id a1)
{
  id v30 = objc_alloc_init((Class)NSAutoreleasePool);
  qword_1024801A0 = (uint64_t)objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v1 = sub_100891600();
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  id v2 = [(NSDictionary *)v1 countByEnumeratingWithState:&v49 objects:v65 count:16];
  if (v2)
  {
    uint64_t v32 = *(void *)v50;
    CFNumberRef v31 = v1;
    do
    {
      uint64_t v3 = 0;
      id v33 = v2;
      do
      {
        if (*(void *)v50 != v32) {
          objc_enumerationMutation(v1);
        }
        double v4 = *(__CFString **)(*((void *)&v49 + 1) + 8 * v3);
        if (!sub_100102484(v4))
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022E5F38);
          }
          double v5 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)long long buf = 68289282;
            int v57 = 0;
            __int16 v58 = 2082;
            __int16 v59 = "";
            __int16 v60 = 2114;
            __int16 v61 = v4;
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Bellwethers of groups MUST be system services\", \"Bellwether\":%{public, location:escape_only}@}", buf, 0x1Cu);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022E5F38);
            }
          }
          double v6 = qword_102419538;
          if (os_signpost_enabled((os_log_t)qword_102419538))
          {
            *(_DWORD *)long long buf = 68289282;
            int v57 = 0;
            __int16 v58 = 2082;
            __int16 v59 = "";
            __int16 v60 = 2114;
            __int16 v61 = v4;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Bellwethers of groups MUST be system services", "{\"msg%{public}.0s\":\"Bellwethers of groups MUST be system services\", \"Bellwether\":%{public, location:escape_only}@}", buf, 0x1Cu);
          }
        }
        double v7 = +[CLClientKeyPath clientKeyPathWithUserName:0 clientAnchor:v4 anchorType:112];
        [(id)qword_1024801A0 setObject:v7 forKeyedSubscript:v4];
        id v8 = [(NSDictionary *)v1 objectForKeyedSubscript:v4];
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        id v9 = [v8 countByEnumeratingWithState:&v45 objects:v64 count:16];
        uint64_t v34 = v3;
        if (v9)
        {
          uint64_t v10 = *(void *)v46;
          do
          {
            double v11 = 0;
            do
            {
              if (*(void *)v46 != v10) {
                objc_enumerationMutation(v8);
              }
              double v12 = *(__CFString **)(*((void *)&v45 + 1) + 8 * (void)v11);
              if (sub_100102484(v12))
              {
                double v13 = +[CLClientKeyPath clientKeyPathWithUserName:0 clientAnchor:v4 anchorType:112 subIdentityId:v12 subIdentityType:112];
                [(id)qword_1024801A0 setObject:v13 forKeyedSubscript:v12];
              }
              else
              {
                if (qword_102419530 != -1) {
                  dispatch_once(&qword_102419530, &stru_1022E5F38);
                }
                double v14 = qword_102419538;
                if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)long long buf = 68289538;
                  int v57 = 0;
                  __int16 v58 = 2082;
                  __int16 v59 = "";
                  __int16 v60 = 2114;
                  __int16 v61 = v4;
                  __int16 v62 = 2114;
                  __int16 v63 = v12;
                  _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Innate system service found in grouping, but is not a system service on disk\", \"Group\":%{public, location:escape_only}@, \"Innate\":%{public, location:escape_only}@}", buf, 0x26u);
                  if (qword_102419530 != -1) {
                    dispatch_once(&qword_102419530, &stru_1022E5F38);
                  }
                }
                double v15 = qword_102419538;
                if (os_signpost_enabled((os_log_t)qword_102419538))
                {
                  *(_DWORD *)long long buf = 68289538;
                  int v57 = 0;
                  __int16 v58 = 2082;
                  __int16 v59 = "";
                  __int16 v60 = 2114;
                  __int16 v61 = v4;
                  __int16 v62 = 2114;
                  __int16 v63 = v12;
                  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Innate system service found in grouping, but is not a system service on disk", "{\"msg%{public}.0s\":\"Innate system service found in grouping, but is not a system service on disk\", \"Group\":%{public, location:escape_only}@, \"Innate\":%{public, location:escape_only}@}", buf, 0x26u);
                }
              }
              double v11 = (char *)v11 + 1;
            }
            while (v9 != v11);
            id v9 = [v8 countByEnumeratingWithState:&v45 objects:v64 count:16];
          }
          while (v9);
        }
        uint64_t v3 = v34 + 1;
        uint64_t v1 = v31;
      }
      while ((id)(v34 + 1) != v33);
      id v2 = [(NSDictionary *)v31 countByEnumeratingWithState:&v49 objects:v65 count:16];
    }
    while (v2);
  }
  id v16 = [(NSArray *)sub_100891970() mutableCopy];
  double v17 = sub_100891A74();
  v55[0] = @"/System/Library/LocationBundles";
  v55[1] = @"/AppleInternal/Library/LocationBundles";
  double v18 = +[NSArray arrayWithObjects:v55 count:2];
  double v35 = v16;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id v19 = [(NSArray *)v18 countByEnumeratingWithState:&v41 objects:v54 count:16];
  if (v19)
  {
    uint64_t v20 = *(void *)v42;
    do
    {
      for (uint64_t i = 0; i != v19; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v42 != v20) {
          objc_enumerationMutation(v18);
        }
        float v22 = *(void **)(*((void *)&v41 + 1) + 8 * i);
        id v23 = [v22 UTF8String];
        v40[0] = _NSConcreteStackBlock;
        v40[1] = 3221225472;
        v40[2] = sub_100B412E8;
        v40[3] = &unk_1022E5F18;
        void v40[4] = v22;
        v40[5] = v17;
        v40[6] = 0;
        sub_100B046A0((uint64_t)v23, (uint64_t)v40);
      }
      id v19 = [(NSArray *)v18 countByEnumeratingWithState:&v41 objects:v54 count:16];
    }
    while (v19);
  }
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v24 = [v35 countByEnumeratingWithState:&v36 objects:v53 count:16];
  if (v24)
  {
    uint64_t v25 = *(void *)v37;
    do
    {
      float v26 = 0;
      do
      {
        if (*(void *)v37 != v25) {
          objc_enumerationMutation(v35);
        }
        float v27 = *(__CFString **)(*((void *)&v36 + 1) + 8 * (void)v26);
        if (![(id)qword_1024801A0 objectForKeyedSubscript:v27])
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022E5F38);
          }
          uint64_t v28 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 68289282;
            int v57 = 0;
            __int16 v58 = 2082;
            __int16 v59 = "";
            __int16 v60 = 2114;
            __int16 v61 = v27;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"System service found in known standalone set, but is not a system service on disk\", \"SystemService\":%{public, location:escape_only}@}", buf, 0x1Cu);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022E5F38);
            }
          }
          long long v29 = qword_102419538;
          if (os_signpost_enabled((os_log_t)qword_102419538))
          {
            *(_DWORD *)long long buf = 68289282;
            int v57 = 0;
            __int16 v58 = 2082;
            __int16 v59 = "";
            __int16 v60 = 2114;
            __int16 v61 = v27;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "System service found in known standalone set, but is not a system service on disk", "{\"msg%{public}.0s\":\"System service found in known standalone set, but is not a system service on disk\", \"SystemService\":%{public, location:escape_only}@}", buf, 0x1Cu);
          }
        }
        float v26 = (char *)v26 + 1;
      }
      while (v24 != v26);
      id v24 = [v35 countByEnumeratingWithState:&v36 objects:v53 count:16];
    }
    while (v24);
  }
}

void sub_100B41270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

uint64_t sub_100B412E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (__CFString *)[[[*(id *)(a1 + 32) stringByAppendingPathComponent:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2)] stringByResolvingSymlinksInPath];
  if (v3)
  {
    double v4 = v3;
    if (![(id)qword_1024801A0 objectForKeyedSubscript:v3] && sub_100102484(v4))
    {
      if ([*(id *)(a1 + 40) containsObject:v4])
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022E5F38);
        }
        double v5 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
        {
          int v9 = 68289282;
          int v10 = 0;
          __int16 v11 = 2082;
          double v12 = "";
          __int16 v13 = 2114;
          double v14 = v4;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"System service found in known standalone set, but is not a system service on disk\", \"SystemService\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022E5F38);
          }
        }
        double v6 = qword_102419538;
        if (os_signpost_enabled((os_log_t)qword_102419538))
        {
          int v9 = 68289282;
          int v10 = 0;
          __int16 v11 = 2082;
          double v12 = "";
          __int16 v13 = 2114;
          double v14 = v4;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "System service found in known standalone set, but is not a system service on disk", "{\"msg%{public}.0s\":\"System service found in known standalone set, but is not a system service on disk\", \"SystemService\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
        }
      }
      double v7 = +[CLClientKeyPath clientKeyPathWithUserName:*(void *)(a1 + 48) clientAnchor:v4 anchorType:112];
      [(id)qword_1024801A0 setObject:v7 forKeyedSubscript:v4];
    }
  }
  return 1;
}

void sub_100B41568(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void *sub_100B41598(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_100B41698((uint64_t)a1, "HRRecoverySessionHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_1022E5F68;
  a1[9] = off_1022E6030;
  a1[58] = off_1022E6080;
  sub_100B42D18((uint64_t)a1);
  return a1;
}

void sub_100B4166C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_100B41B64(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100B41698(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  double v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  *double v12 = off_1022ADB08;
  *(void *)a1 = off_1022E6470;
  *(void *)(a1 + 72) = off_1022E6518;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_1022E6470;
  *(void *)(a1 + 72) = off_1022E6518;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 316) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 362) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 384) = 12000;
  *(void *)(a1 + 392) = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 400));
  *(void *)(a1 + 400) = off_1022ADB08;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)uint64_t __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_100B41AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *float v27 = v30;
  sub_1003BE1F8(v31);
  sub_1004F4578(v29);
  sub_1011F8AE0(v28);
  void *v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_100B41B5C()
{
}

void *sub_100B41B64(void *a1)
{
  *a1 = off_1022E6470;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_1022E6518;
  a1[49] = off_1022ADAD8;
  sub_1003BE1F8(a1 + 50);
  sub_1004F4578(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022ADAD8;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_100B41C28(uint64_t a1)
{
  return sub_100B41B64((void *)(a1 - 72));
}

void *sub_100B41C30(uint64_t a1)
{
  return sub_100B41B64((void *)(a1 - 464));
}

void sub_100B41C38(void *a1)
{
  sub_100B41B64(a1);

  operator delete();
}

void sub_100B41C70(uint64_t a1)
{
  sub_100B41B64((void *)(a1 - 72));

  operator delete();
}

void sub_100B41CAC(uint64_t a1)
{
  sub_100B41B64((void *)(a1 - 464));

  operator delete();
}

uint64_t sub_100B41CE8(uint64_t a1, uint64_t a2)
{
  sub_1000E1294((uint64_t *)v5, (uint64_t)"HRRecoverySessionDb.aggregateRecs", 0);
  if (*(double *)(*(void *)(a2 + 8) - 16) == 1.79769313e308 && sub_100082064(a1 + 72))
  {
    sub_10002B640(*(void *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM HRRecoverySessionHistory WHERE startTime < ?");
  }
  sub_1000E1098(v5);
  return -1;
}

void sub_100B41E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B41E80(uint64_t a1, uint64_t a2)
{
  return sub_100B41CE8(a1 - 72, a2);
}

uint64_t sub_100B41E88(uint64_t a1, void *a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    a2[1] = *a2;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from HRRecoverySessionHistory ORDER BY startTime ASC");
  }
  return result;
}

void sub_100B42104(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B4214C(uint64_t *a1, uint64_t a2)
{
  double v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  sub_100B43674(a1, a2);
  return 0;
}

uint64_t sub_100B421AC(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM HRRecoverySessionHistory");
  }
  return 0xFFFFFFFFLL;
}

void sub_100B42268(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B422A4(uint64_t a1)
{
  return sub_100B421AC(a1 - 72);
}

uint64_t sub_100B422AC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 120))(a1, a2, 0);
}

uint64_t sub_100B422D4(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"UPDATE HRRecoverySessionHistory SET startTime = ?, activityEndTime = ?, workoutSessionId = ?, workoutType = ?, hrRecovery = ?, lambda = ?, hrMax = ?, hrMinAdjusted = ?, recoveryOnsetTime = ?, steadyStateHR = ?, status = ?, sessionHrRecovery = ?, peakHR = ?, hrRecoveryReference = ? WHERE id = ?");
  }
  return result;
}

void sub_100B42520(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

void sub_100B42540(void *a1, double *a2)
{
  (*(void (**)(void *, double *, void))(*a1 + 120))(a1, a2, 0);
  memset(v15, 0, 32);
  memset(&v15[3], 0, 60);
  memset(&v15[7], 0, 42);
  if (!sub_10092AC20(a1, (uint64_t)v15))
  {
LABEL_17:
    uint64_t v4 = 0;
    goto LABEL_18;
  }
  if (*((double *)v15 + 1) != a2[1])
  {
    if (qword_1024192C0 != -1) {
      dispatch_once(&qword_1024192C0, &stru_1022E6120);
    }
    id v8 = qword_1024192C8;
    if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *((void *)a2 + 1);
      *(_DWORD *)long long buf = 134349312;
      uint64_t v12 = v9;
      __int16 v13 = 2050;
      uint64_t v14 = *((void *)&v15[0] + 1);
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Inserted session (startTime=%{public}f) is not the latest session (startTime=%{public}f)", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192C0 != -1) {
        dispatch_once(&qword_1024192C0, &stru_1022E6120);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLHRRecoverySessionRecorderDb::addSession(HRRecoverySession &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    goto LABEL_17;
  }
  uint64_t v4 = *(void *)&v15[0];
  if (qword_1024192C0 != -1) {
    dispatch_once(&qword_1024192C0, &stru_1022E6120);
  }
  int v5 = qword_1024192C8;
  if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *((void *)a2 + 1);
    *(_DWORD *)long long buf = 134349312;
    uint64_t v12 = v4;
    __int16 v13 = 2050;
    uint64_t v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Wrote session to db: id=%{public}llu, startTime=%{public}.2f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192C0 != -1) {
      dispatch_once(&qword_1024192C0, &stru_1022E6120);
    }
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLHRRecoverySessionRecorderDb::addSession(HRRecoverySession &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
LABEL_18:
  *(void *)a2 = v4;
}

uint64_t sub_100B428F4(uint64_t a1, void *a2, int a3)
{
  if (sub_100082064(a1 + 72))
  {
    a2[1] = *a2;
    if (a3) {
      sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM HRRecoverySessionHistory WHERE status = 1 AND sessionHrRecovery IS NOT NULL AND startTime > ? ORDER BY startTime ASC");
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM HRRecoverySessionHistory WHERE sessionHrRecovery IS NOT NULL AND startTime > ? ORDER BY startTime ASC");
  }
  if (qword_1024192C0 != -1) {
    dispatch_once(&qword_1024192C0, &stru_1022E6120);
  }
  uint64_t v6 = qword_1024192C8;
  if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "HRRecoverySessionHistory, DB not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192C0 != -1) {
      dispatch_once(&qword_1024192C0, &stru_1022E6120);
    }
    id v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLHRRecoverySessionRecorderDb::querySinceTime(CFAbsoluteTime, std::vector<HRRecoverySession> &, BOOL) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return 109;
}

void sub_100B42CD4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100B42D18(uint64_t a1)
{
  uint64_t result = sub_10014C3C0(*(void *)(a1 + 80));
  if (result)
  {
    sub_100B42D88(a1);
    uint64_t v3 = *(void *)(a1 + 80);
    return sub_1005F7B0C(v3, "HRRecoverySessionHistory", (const char **)&off_1022E6140, (const std::string::value_type **)&off_102473040, 0);
  }
  return result;
}

uint64_t sub_100B42D88(uint64_t a1)
{
  uint64_t result = sub_1005F93E4(*(void *)(a1 + 80), "HRRecoverySessionHistory");
  if (result)
  {
    uint64_t v3 = "startTime";
    int v4 = 5;
    __int16 v5 = 0;
    char v6 = 0;
    char v7 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "HRRecoverySessionHistory", (uint64_t)"startTime", (uint64_t)&v3);
  }
  return result;
}

void sub_100B43280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a23);
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  sub_101A129A8((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void *sub_100B43328@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "HRRecoverySessionHistory");
}

void *sub_100B43338@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "HRRecoverySessionHistory");
}

uint64_t sub_100B43348(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM HRRecoverySessionHistory");
  }
  return result;
}

void sub_100B433F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B43410(uint64_t a1)
{
  return sub_100B43348(a1 - 72);
}

uint64_t sub_100B43418(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"INSERT INTO HRRecoverySessionHistory (startTime, activityEndTime, workoutSessionId, workoutType, hrRecovery, lambda, hrMax, hrMinAdjusted, recoveryOnsetTime, steadyStateHR, status, sessionHrRecovery, peakHR, hrRecoveryReference) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
  }
  return result;
}

void sub_100B43648(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

void sub_100B43668(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void sub_100B43674(uint64_t *a1, uint64_t a2)
{
  int v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)a2 = sqlite3_column_int(v4, 0);
  __int16 v5 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  char v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v6, 2);
  char v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  id v8 = sqlite3_column_text(v7, 3);
  uuid_parse((const char *)v8, (unsigned __int8 *)(a2 + 32));
  uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)(a2 + 48) = sqlite3_column_int(v9, 4);
  int v10 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 56) = sqlite3_column_double(v10, 5);
  __int16 v11 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v11, 6);
  uint64_t v12 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 72) = sqlite3_column_double(v12, 7);
  __int16 v13 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 80) = sqlite3_column_double(v13, 8);
  uint64_t v14 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 88) = sqlite3_column_double(v14, 9);
  double v15 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 96) = sqlite3_column_double(v15, 10);
  uint64_t v16 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 104) = sqlite3_column_int(v16, 11);
  uint64_t v17 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 112) = sqlite3_column_double(v17, 12);
  __int16 v18 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 120) = sqlite3_column_double(v18, 13);
  id v19 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 128) = sqlite3_column_double(v19, 14);
}

uint64_t sub_100B437D0(uint64_t a1, void *a2)
{
  if (!sub_1005F9734(*(void *)(a1 + 80), (char *)a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022E6558);
    }
    int v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022E6558);
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      uint64_t v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", (const char *)v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    memset(__p, 0, 24);
    sub_100134750(buf, (char *)a2);
    __int16 v5 = std::string::append(buf, "AutoIncr");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v22 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)double v21 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_100134750(buf, (char *)a2);
    char v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v8 = HIBYTE(__p[2]);
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    uint64_t v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        int v10 = __p;
      }
      else {
        int v10 = (void **)__p[0];
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v22 >= 0) {
      __int16 v11 = v21;
    }
    else {
      __int16 v11 = (void **)v21[0];
    }
    if (v22 >= 0) {
      std::string::size_type v12 = HIBYTE(v22);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    __int16 v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    uint64_t v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v14;
    __p[1] = v23.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v23.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      char v15 = HIBYTE(__p[2]);
      uint64_t v14 = __p[0];
    }
    if (v15 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)v14;
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)v16);
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 88);
  }
  sub_10003CC68(v17, v18);
  return 0;
}

void sub_100B449FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100B44D5C(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM HRRecoverySessionHistory WHERE status = 1 AND sessionHrRecovery IS NOT NULL");
  }
  if (qword_1024192C0 != -1) {
    dispatch_once(&qword_1024192C0, &stru_1022E6120);
  }
  uint64_t v2 = qword_1024192C8;
  if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "HRRecoverySessionHistory, DB not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192C0 != -1) {
      dispatch_once(&qword_1024192C0, &stru_1022E6120);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHRRecoverySessionRecorderDb::hasRecentSuccessfulEstimate() const", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return 0;
}

void sub_100B44F7C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B44FC0(uint64_t a1)
{
  uint64_t v2 = a1 + 112;
  uint64_t v3 = a1 + 72;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  if (sub_100082064(v3)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM HRRecoverySessionHistory WHERE startTime > ? and startTime < ? ORDER BY startTime ASC LIMIT ?");
  }
  if (qword_1024192C0 != -1) {
    dispatch_once(&qword_1024192C0, &stru_1022E6120);
  }
  int v4 = qword_1024192C8;
  if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "HRRecoverySessionHistory not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192C0 != -1) {
      dispatch_once(&qword_1024192C0, &stru_1022E6120);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CMError CLHRRecoverySessionRecorderDb::queryHRRecoverySessionInTimeRange(CFAbsoluteTime, CFAbsoluteTime, int, std::vector<HRRecoverySession> &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return 109;
}

void sub_100B45420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B45484(uint64_t a1)
{
  return sub_100B44FC0(a1 - 464);
}

uint64_t sub_100B4548C(uint64_t a1)
{
  uint64_t v2 = a1 + 112;
  uint64_t v3 = a1 + 72;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  if (sub_100082064(v3)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from HRRecoverySessionHistory ORDER BY startTime ASC");
  }
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022E6440);
  }
  int v4 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "HRRecoverySessionHistory not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022E6440);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CMError CLHRRecoverySessionRecorderDb::queryHRRecoverySessionAllRecords(std::vector<HRRecoverySession> &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return 109;
}

void sub_100B45898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B45900(uint64_t a1)
{
  return sub_100B4548C(a1 - 464);
}

uint64_t sub_100B45908(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A7F084(v2);
    __break(1u);
  }
  uint64_t v9 = v11[1];
  operator delete(v11[0]);
  if (!v9) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v11);
    uint64_t v3 = sub_100132EFC(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      int v4 = __p;
    }
    else {
      int v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    long long v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      size_t v8 = __p;
    }
    else {
      size_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_100B45DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_100B45E6C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_100B47EEC(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022E6558);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    long long v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      long long v6 = (void *)*v6;
    }
    *(_DWORD *)long long buf = 68289282;
    *(_DWORD *)__int16 v13 = 0;
    *(_WORD *)&v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    char v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022E6558);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)long long buf = 134349056;
      *(void *)__int16 v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022E6558);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_100B465FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_100B46630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v3;
  long long v4 = *(_OWORD *)(a3 + 32);
  long long v5 = *(_OWORD *)(a3 + 48);
  long long v6 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 48) = v5;
  __n128 result = *(__n128 *)(a3 + 96);
  long long v8 = *(_OWORD *)(a3 + 112);
  long long v9 = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a2 + 138) = *(_OWORD *)(a3 + 138);
  *(_OWORD *)(a2 + 112) = v8;
  *(_OWORD *)(a2 + 128) = v9;
  *(__n128 *)(a2 + 96) = result;
  return result;
}

id *sub_100B46664(uint64_t a1, uint64_t a2, char a3)
{
  v34[0] = (id)os_transaction_create();
  v34[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v34);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  memset(v43, 0, 32);
  memset(&v43[3], 0, 60);
  memset(&v43[7], 0, 42);
  int v6 = (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)a1 + 104))(a1, v43);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022E6558);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022E6558);
        }
        LOWORD(v35) = 0;
        char v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *(double *)(a2 + 8);
    double v8 = *((double *)v43 + 1);
    double v9 = v7 - *((double *)v43 + 1);
    if (v7 - *((double *)v43 + 1) < 0.0) {
      double v9 = -(v7 - *((double *)v43 + 1));
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022E6558);
      }
      int v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 8);
        *(_DWORD *)long long buf = 134349312;
        double v40 = *((double *)v43 + 1);
        __int16 v41 = 2050;
        uint64_t v42 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022E6558);
        }
        uint64_t v28 = *(void *)(a2 + 8);
        int v35 = 134349312;
        double v36 = *((double *)v43 + 1);
        __int16 v37 = 2050;
        uint64_t v38 = v28;
        long long v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
      }
      CLWriteStackshot();
      double v7 = *(double *)(a2 + 8);
      double v8 = *((double *)v43 + 1);
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022E6558);
        }
        uint64_t v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 8);
          *(_DWORD *)long long buf = 134217984;
          double v40 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022E6558);
          }
          double v30 = *(double *)(a2 + 8);
          int v35 = 134217984;
          double v36 = v30;
          CFNumberRef v31 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v31);
          if (v31 != (char *)buf) {
            free(v31);
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v33 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_1022E6558);
        double v17 = v33;
      }
      double v18 = v16 - v17;
      id v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134217984;
        double v40 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022E6558);
        }
        int v35 = 134217984;
        double v36 = v18;
        uint64_t v32 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v32);
        if (v32 != (char *)buf) {
          free(v32);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v43, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v20;
  long long v21 = *(_OWORD *)(a2 + 32);
  long long v22 = *(_OWORD *)(a2 + 48);
  long long v23 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 304) = v23;
  *(_OWORD *)(a1 + 256) = v21;
  *(_OWORD *)(a1 + 272) = v22;
  long long v24 = *(_OWORD *)(a2 + 96);
  long long v25 = *(_OWORD *)(a2 + 112);
  long long v26 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 362) = *(_OWORD *)(a2 + 138);
  *(_OWORD *)(a1 + 336) = v25;
  *(_OWORD *)(a1 + 352) = v26;
  *(_OWORD *)(a1 + 320) = v24;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v34);
}

void sub_100B46EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B46ED8(void *a1, uint64_t a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A7F1F4(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  uint64_t v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_100B4724C(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A7F364(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    long long v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_100B47578(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A7F4D4(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    long long v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      long long v4 = __p;
    }
    else {
      long long v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

uint64_t sub_100B4789C(uint64_t a1)
{
  return sub_100B45E6C(a1 - 72);
}

void sub_100B478A4(id a1)
{
  qword_1024192C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

void sub_100B478D4(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_100B47904(void *a1, void *a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A7F644(v4);
    __break(1u);
  }
  uint64_t v12 = v13[1];
  operator delete(v13[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v13);
    uint64_t v6 = sub_100132EFC(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v16 & 0x80u) == 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if ((v16 & 0x80u) == 0) {
      uint64_t v8 = v16;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v16 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v16 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_100B47DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  sub_101A129A8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_100B47E2C(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100B47E5C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_100B47EEC(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_100B47F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B47F88(uint64_t a1, double *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024801C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024801C8))
  {
    *(void *)&long long v6 = 0xC00000000;
    long long v5 = xmmword_101D808DC;
    sub_1004F7D80(qword_1024801B0, &v5, 6uLL);
    __cxa_atexit((void (*)(void *))sub_1004F7E04, qword_1024801B0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024801C8);
  }
  __int16 v14 = 0;
  long long v5 = xmmword_101D1E250;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  memset(v13, 0, sizeof(v13));
  long long v15 = xmmword_101D1E250;
  uint64_t v16 = 0;
  int v17 = 0;
  uint64_t v18 = 0;
  v19[0] = 0;
  *(void *)((char *)v19 + 5) = 0;
  *(void *)((char *)&v19[1] + 6) = 0;
  char v20 = 0;
  memset(&v19[3], 0, 24);
  long long v21 = xmmword_101D1E250;
  uint64_t v22 = 0;
  int v23 = 0;
  unint64_t v24 = 0xFFEFFFFFFFFFFFFFLL;
  int v35 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  int v30 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  memset(v34, 0, sizeof(v34));
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  unint64_t v38 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v39 = 0;
  int v40 = 0;
  uint64_t v46 = 0;
  __int16 v47 = 0;
  int v52 = 0;
  int v45 = 0;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  char v50 = 0;
  memset(v51, 0, sizeof(v51));
  unint64_t v53 = 0xFFEFFFFFFFFFFFFFLL;
  long long v72 = 0u;
  long long v71 = 0u;
  long long v70 = 0u;
  long long v69 = 0u;
  long long v68 = 0u;
  long long v67 = 0u;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  uint64_t v73 = 0;
  unint64_t v74 = 0xFFEFFFFFFFFFFFFFLL;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  unint64_t v79 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v80 = 0;
  int v81 = 0;
  uint64_t v82 = 0;
  char v83 = 0;
  unint64_t v84 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v86 = 0;
  uint64_t v85 = 0;
  uint64_t v87 = 0x80000000800000;
  uint64_t v89 = 0;
  uint64_t v88 = 0;
  long long v90 = xmmword_101D1E260;
  uint64_t v91 = 0x80000000800000;
  long long v92 = 0u;
  long long v93 = 0u;
  uint64_t v94 = 0;
  unint64_t v95 = 0xFFEFFFFFFFFFFFFFLL;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  int v102 = 0;
  unint64_t v103 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v104 = 0;
  int v105 = 0;
  unint64_t v106 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v107 = 7;
  unint64_t v108 = 0xFFEFFFFFFFFFFFFFLL;
  char v109 = 0;
  uint64_t v111 = 0;
  uint64_t v110 = 0;
  uint64_t v112 = 0;
  sub_100174478(a2, qword_1024801B0, (uint64_t)&v5);
  return sub_100B48288(a1, (float *)a2, (uint64_t)&v5);
}

void sub_100B48268(_Unwind_Exception *a1)
{
}

uint64_t sub_100B48288(uint64_t a1, float *a2, uint64_t a3)
{
  double v6 = *(double *)(a3 + 320);
  double v7 = 0.0;
  double v8 = 0.0;
  if (v6 > 0.0) {
    double v8 = *(double *)(a3 + 192) / v6;
  }
  double v9 = *(double *)(a3 + 880);
  if (v9 > 0.0) {
    double v7 = *(double *)(a3 + 912) / v9;
  }
  int v10 = *(_DWORD *)(a3 + 24);
  int v11 = *(unsigned __int8 *)(a3 + 1352);
  float v112 = *(float *)(a3 + 1360);
  float v113 = *(float *)(a3 + 1356);
  float v107 = *(float *)(a3 + 1364);
  double v12 = *(double *)(a3 + 328);
  double v13 = *(double *)(a3 + 232);
  double v117 = *(double *)(a3 + 240);
  int v111 = *(_DWORD *)(a3 + 872);
  uint64_t v14 = *(void *)(a3 + 8);
  unsigned __int8 v119 = 0;
  unsigned int v15 = sub_100B492C4(a3, &v119);
  unsigned int v115 = sub_101004734((uint64_t)a2, a3);
  uint64_t v109 = *(void *)(a3 + 296);
  uint64_t v16 = *(void *)(a3 + 192);
  sub_100B493BC((void **)a1, (double *)a3, (uint64_t)(a2 + 82), (uint64_t)&buf);
  *(_OWORD *)(a1 + 24) = buf;
  uint64_t v118 = a1;
  *(void *)(a1 + 40) = *(void *)v189;
  double v18 = *(double *)(a3 + 288);
  BOOL v19 = v18 != -1.79769313e308;
  double v20 = *(double *)(a3 + 328);
  if (v20 <= -1.0) {
    BOOL v19 = 0;
  }
  double v21 = *(double *)(a3 + 656);
  uint64_t v116 = v14;
  if (!v19 || v12 >= 0.44704 || v21 == -1.79769313e308 || !v119 || v15)
  {
    if (v12 < 0.44704) {
      LOBYTE(v19) = 0;
    }
    if (!v19)
    {
      int v24 = v21 != -1.79769313e308 && v119 != 0 && v15 != 0;
      int v22 = 1;
      int v23 = 7;
      goto LABEL_31;
    }
    int v22 = 1;
    int v23 = 7;
  }
  else
  {
    BOOL v17 = sub_1001A4C4C(v115);
    int v22 = 0;
    if (v17) {
      int v23 = 0;
    }
    else {
      int v23 = 11;
    }
    double v18 = *(double *)(a3 + 288);
    double v20 = *(double *)(a3 + 328);
    double v21 = *(double *)(a3 + 656);
  }
  int v24 = 1;
LABEL_31:
  BOOL v27 = v20 > -1.0 && v18 != -1.79769313e308;
  double v110 = v7;
  if (!v27 || v12 < 0.44704 || v12 >= 1.56464 || v21 == -1.79769313e308 || !v119 || v15)
  {
    BOOL v30 = v12 >= 1.56464 && v27 || v21 != -1.79769313e308 && v119 != 0 && v15 != 0;
    v24 &= v30;
  }
  else if (*(double *)(a3 + 168) == -1.79769313e308 || !*(_DWORD *)(a3 + 184) || (double v28 = fabs(v8), v28 < 0.03))
  {
    int v22 = 0;
    int v23 = 5;
  }
  else if (v28 > 0.03)
  {
    int v22 = 0;
    int v23 = 4;
  }
  char v33 = !v27;
  if (v6 >= 8.9408) {
    char v33 = 1;
  }
  if ((v33 & 1) != 0 || v21 == -1.79769313e308 || !v119 || !v15)
  {
    BOOL v39 = v6 >= 8.9408 && v27 || v21 != -1.79769313e308 && v119 != 0 && v15 == 0;
    v24 &= v39;
  }
  else
  {
    int v22 = 0;
    int v23 = 1;
    if (*(double *)(a3 + 168) != -1.79769313e308 && *(_DWORD *)(a3 + 184))
    {
      int v22 = 0;
      if (v15 < 0xA && v12 >= 0.44704 && v8 <= 0.03 && v12 <= 1.56464 && *(float *)(a3 + 1364) < 0.5) {
        int v23 = 14;
      }
      else {
        int v23 = 1;
      }
    }
  }
  float v42 = v13;
  sub_100B4949C(v17, a3);
  float v44 = v43;
  unsigned int v108 = v15;
  if (v6 > 8.9408
    && *(double *)(a3 + 288) != -1.79769313e308
    && *(double *)(a3 + 328) > -1.0
    && *(double *)(a3 + 264) != -1.79769313e308
    && *(double *)(a3 + 240) >= 0.8
    && sub_100B49558(v118, a3, a2 + 82) == 1
    && *(double *)(a3 + 168) != -1.79769313e308
    && *(_DWORD *)(a3 + 184)
    && v8 > -0.005
    && *(double *)(v118 + 40) > -0.005
    && v42 <= 120.0)
  {
    int v22 = 0;
    int v23 = 2;
LABEL_147:
    uint64_t v48 = v118;
    goto LABEL_182;
  }
  if (v6 > 8.9408
    && *(double *)(a3 + 288) != -1.79769313e308
    && *(double *)(a3 + 328) > -1.0
    && *(double *)(a3 + 264) != -1.79769313e308
    && *(double *)(a3 + 240) >= 0.8
    && sub_100B49558(v118, a3, a2 + 82) == 1
    && *(double *)(a3 + 168) != -1.79769313e308
    && *(_DWORD *)(a3 + 184)
    && (v8 <= -0.005 || *(double *)(v118 + 40) <= -0.005)
    && v42 <= 120.0)
  {
    int v22 = 0;
    int v23 = 13;
    goto LABEL_147;
  }
  if (*(double *)(a3 + 288) != -1.79769313e308
    && *(double *)(a3 + 328) > -1.0
    && v12 >= 0.44704
    && v117 >= 0.4
    && (sub_100B49558(v118, a3, a2 + 82) == 2 || sub_100B49558(v118, a3, a2 + 82) == 1)
    && v42 <= 120.0)
  {
    int v22 = 0;
    int v23 = 3;
    goto LABEL_147;
  }
  double v45 = *(double *)(a3 + 1344);
  double v46 = *(double *)(a3 + 288);
  double v47 = *(double *)(a3 + 328);
  if (v23 == 7
    && v45 != -1.79769313e308
    && v46 != -1.79769313e308
    && v47 > -1.0
    && v12 >= 0.44704
    && v12 < 8.9408
    && v44 > 0.5
    && (v42 <= 120.0 || v117 < 0.4)
    || v45 != -1.79769313e308
    && v46 != -1.79769313e308
    && v47 > -1.0
    && v12 >= 8.9408
    && v44 > 0.5
    && v42 <= 120.0
    && v117 >= 0.4)
  {
    int v22 = 0;
    int v23 = 12;
    goto LABEL_147;
  }
  BOOL v49 = v46 != -1.79769313e308;
  if (v47 <= -1.0) {
    BOOL v49 = 0;
  }
  uint64_t v48 = v118;
  if (v49 && v12 >= 8.9408 && *(float *)(a3 + 1364) < 0.5 && v117 < 0.4) {
    goto LABEL_160;
  }
  if (!v49) {
    goto LABEL_162;
  }
  if (*(double *)(a3 + 168) != -1.79769313e308
    && *(_DWORD *)(a3 + 184)
    && v12 >= 11.176
    && *(float *)(a3 + 1364) < 0.2
    && v8 > -0.005)
  {
LABEL_160:
    int v22 = 0;
    int v23 = 12;
    goto LABEL_182;
  }
  if (v6 > 8.9408)
  {
LABEL_162:
    double v50 = *(double *)(a3 + 264);
    double v51 = *(double *)(a3 + 240);
    if (v50 != -1.79769313e308 && v51 >= 0.8)
    {
      if (!sub_100B49558(v118, a3, a2 + 82))
      {
        BOOL v52 = 1;
LABEL_170:
        uint64_t v48 = v118;
        goto LABEL_173;
      }
      double v50 = *(double *)(a3 + 264);
      double v51 = *(double *)(a3 + 240);
    }
    BOOL v52 = v50 != -1.79769313e308;
    if (v51 < 0.8) {
      BOOL v52 = 0;
    }
    if (v42 <= 120.0) {
      BOOL v52 = 0;
    }
    goto LABEL_170;
  }
  BOOL v52 = 1;
LABEL_173:
  BOOL v53 = 0;
  if (*(double *)(a3 + 288) != -1.79769313e308 && *(double *)(a3 + 328) > -1.0) {
    BOOL v53 = *(double *)(a3 + 168) != -1.79769313e308 && *(_DWORD *)(a3 + 184) != 0;
  }
  v24 &= v52 || v53;
LABEL_182:
  sub_100B495F4((unsigned __int16 *)v48, a3);
  BOOL v55 = sub_100B49698(v48);
  BOOL v56 = *(double *)(a3 + 288) != -1.79769313e308;
  if (*(double *)(a3 + 328) <= -1.0) {
    BOOL v56 = 0;
  }
  if (v6 > 22.352 && v56)
  {
    BOOL v57 = *(double *)(a3 + 168) == -1.79769313e308 || *(_DWORD *)(a3 + 184) == 0;
    int v58 = !v57;
    if (!v57 && v8 > -0.005 && *(double *)(v48 + 40) > -0.005)
    {
      int v59 = 2;
LABEL_216:
      uint64_t v62 = v116;
      goto LABEL_217;
    }
    if (v58 && (v8 <= -0.005 || *(double *)(v48 + 40) <= -0.005))
    {
      int v59 = 13;
      goto LABEL_216;
    }
  }
  if (v6 <= 22.352) {
    int v60 = v24;
  }
  else {
    int v60 = 0;
  }
  if ((v60 & v56) != 0) {
    int v61 = 6;
  }
  else {
    int v61 = 7;
  }
  if (!v22) {
    int v61 = v23;
  }
  if (v55) {
    int v59 = 2;
  }
  else {
    int v59 = v61;
  }
  uint64_t v62 = v116;
  if (v59 == 7)
  {
    if ((v10 - 1) >= 2 && (v113 >= 4.0 || v112 >= 1.045))
    {
      int v59 = 7;
      if (v10 == 64 || v10 == 16)
      {
        if (v111) {
          BOOL v80 = v11 == 0;
        }
        else {
          BOOL v80 = 0;
        }
        if (v80) {
          int v59 = 10;
        }
        else {
          int v59 = 7;
        }
      }
    }
    else
    {
      int v59 = 9;
    }
  }
LABEL_217:
  BOOL v106 = v55;
  double v63 = fmin((a2[89] - *(double *)(a3 + 232)) / (a2[89] - a2[88]), 1.0);
  float v64 = v63;
  float v65 = sub_101141BD8(v64, a2[87]) * a2[86];
  int v66 = sub_100B49558(v48, a3, a2 + 82);
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022E6578);
  }
  long long v67 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    int v103 = v66;
    BOOL v68 = *(double *)(a3 + 328) > -1.0 && *(double *)(a3 + 288) != -1.79769313e308;
    BOOL v69 = *(double *)(a3 + 656) != -1.79769313e308;
    BOOL v71 = *(double *)(a3 + 168) != -1.79769313e308 && *(_DWORD *)(a3 + 184) != 0;
    int v72 = v10;
    BOOL v73 = *(double *)(a3 + 240) >= 0.8 && *(double *)(a3 + 264) != -1.79769313e308;
    uint64_t v99 = *(void *)(a3 + 232);
    BOOL v100 = *(double *)(a3 + 8) != -1.79769313e308;
    int v101 = v119;
    uint64_t v102 = *(void *)(v118 + 32);
    float v74 = log10f(*(float *)(a3 + 1368));
    uint64_t v75 = *(unsigned __int16 *)(v118 + 50);
    double v76 = (float)(v74 * 10.0);
    double v77 = *(float *)(a3 + 1372);
    double v78 = *(float *)(a3 + 1376);
    LODWORD(buf) = 67117568;
    DWORD1(buf) = v59;
    WORD4(buf) = 1024;
    *(_DWORD *)((char *)&buf + 10) = v68;
    int v66 = v103;
    HIWORD(buf) = 1024;
    *(_DWORD *)std::string v189 = v69;
    *(_WORD *)&v189[4] = 1024;
    *(_DWORD *)&v189[6] = v71;
    __int16 v190 = 1024;
    BOOL v191 = v73;
    int v10 = v72;
    __int16 v192 = 1024;
    int v193 = v111;
    __int16 v194 = 1024;
    unsigned int v195 = v15;
    __int16 v196 = 2048;
    double v197 = v6;
    __int16 v198 = 2048;
    double v199 = v12;
    __int16 v200 = 2048;
    uint64_t v201 = v99;
    __int16 v202 = 2048;
    double v203 = v117;
    __int16 v204 = 2048;
    double v205 = v8;
    __int16 v206 = 2048;
    double v207 = v110;
    __int16 v208 = 1024;
    int v209 = v103;
    __int16 v210 = 1024;
    BOOL v211 = v100;
    __int16 v212 = 1024;
    int v213 = v72;
    __int16 v214 = 1024;
    int v215 = v101;
    __int16 v216 = 1024;
    int v217 = v59;
    __int16 v218 = 1024;
    int v219 = v11;
    __int16 v220 = 2048;
    double v221 = v107;
    __int16 v222 = 2048;
    double v223 = v113;
    __int16 v224 = 2048;
    double v225 = v112;
    __int16 v226 = 2048;
    uint64_t v227 = v102;
    __int16 v228 = 2048;
    double v229 = v65;
    __int16 v230 = 2048;
    double v231 = v63;
    __int16 v232 = 2048;
    double v233 = v44;
    __int16 v234 = 2048;
    double v235 = v76;
    __int16 v236 = 1024;
    unsigned int v237 = v115;
    __int16 v238 = 2048;
    uint64_t v239 = v109;
    __int16 v240 = 2048;
    uint64_t v241 = v16;
    __int16 v242 = 1024;
    BOOL v243 = v106;
    __int16 v244 = 2048;
    uint64_t v245 = v75;
    __int16 v246 = 2048;
    double v247 = v77;
    __int16 v248 = 2048;
    uint64_t v62 = v116;
    double v249 = v78;
    _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "CyclingStateDetector,state,%d,hasGPS,%d,hasStep,%d,hasElevation,%d,hasHR,%d,stepsRaw,%u,stepsQualified,%u,gpsSpeed,%f,rawGPSSpeed,%f,heartrate,%f,hrConf,%f,grade,%f,pedSpeed,%f,wrHrMetDiscordanceStatus,%d,hasTier1,%d,tier1Type,%d,hasStepsQual,%d,cycleState,%d,isArmConstrained,%d,tier1CyclingProbability,%f,accelXPowerSum,%f,grav90th_100Hz,%f,avgWRMets,%f,HRMets,%f,fhr,%f,isDriving,%f,roadNoise,%f,gpsDeltaDistanceState,%d,gpsDeltaDist,%f,verticalSpeed,%f,vehicularAccel,%d,speedBufferLen,%zu,tier1Smooth,%f,pedEnergyVertical,%f", (uint8_t *)&buf, 0x11Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    int v104 = v66;
    bzero(&buf, 0x65CuLL);
    int v105 = v11;
    uint64_t v98 = v16;
    int v97 = v10;
    int v81 = v59;
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022E6578);
    }
    BOOL v82 = *(double *)(a3 + 328) > -1.0 && *(double *)(a3 + 288) != -1.79769313e308;
    BOOL v83 = *(double *)(a3 + 656) != -1.79769313e308;
    BOOL v85 = *(double *)(a3 + 168) != -1.79769313e308 && *(_DWORD *)(a3 + 184) != 0;
    BOOL v86 = *(double *)(a3 + 240) >= 0.8 && *(double *)(a3 + 264) != -1.79769313e308;
    uint64_t v87 = *(void *)(a3 + 232);
    BOOL v88 = *(double *)(a3 + 8) != -1.79769313e308;
    int v89 = v119;
    double v90 = v113;
    uint64_t v114 = *(void *)(v118 + 32);
    float v91 = log10f(*(float *)(a3 + 1368));
    uint64_t v92 = *(unsigned __int16 *)(v118 + 50);
    double v93 = (float)(v91 * 10.0);
    double v94 = *(float *)(a3 + 1372);
    double v95 = *(float *)(a3 + 1376);
    int v120 = 67117568;
    int v121 = v81;
    __int16 v122 = 1024;
    BOOL v123 = v82;
    __int16 v124 = 1024;
    BOOL v125 = v83;
    __int16 v126 = 1024;
    BOOL v127 = v85;
    __int16 v128 = 1024;
    BOOL v129 = v86;
    __int16 v130 = 1024;
    int v131 = v111;
    __int16 v132 = 1024;
    unsigned int v133 = v108;
    __int16 v134 = 2048;
    double v135 = v6;
    __int16 v136 = 2048;
    double v137 = v12;
    __int16 v138 = 2048;
    uint64_t v139 = v87;
    __int16 v140 = 2048;
    double v141 = v117;
    __int16 v142 = 2048;
    double v143 = v8;
    __int16 v144 = 2048;
    double v145 = v110;
    __int16 v146 = 1024;
    int v147 = v104;
    __int16 v148 = 1024;
    BOOL v149 = v88;
    __int16 v150 = 1024;
    int v151 = v97;
    __int16 v152 = 1024;
    int v153 = v89;
    __int16 v154 = 1024;
    int v155 = v81;
    __int16 v156 = 1024;
    int v157 = v105;
    __int16 v158 = 2048;
    double v159 = v107;
    __int16 v160 = 2048;
    double v161 = v90;
    __int16 v162 = 2048;
    double v163 = v112;
    __int16 v164 = 2048;
    uint64_t v165 = v114;
    __int16 v166 = 2048;
    double v167 = v65;
    __int16 v168 = 2048;
    double v169 = v63;
    __int16 v170 = 2048;
    double v171 = v44;
    __int16 v172 = 2048;
    double v173 = v93;
    __int16 v174 = 1024;
    unsigned int v175 = v115;
    __int16 v176 = 2048;
    uint64_t v177 = v109;
    __int16 v178 = 2048;
    uint64_t v179 = v98;
    __int16 v180 = 1024;
    BOOL v181 = v106;
    __int16 v182 = 2048;
    uint64_t v183 = v92;
    __int16 v184 = 2048;
    double v185 = v94;
    __int16 v186 = 2048;
    double v187 = v95;
    long long v96 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLCyclingStateDetector_Type::CyclingResult CLCyclingStateDetector::determineCyclingState(const CLWorkoutPredictorInputs &, const CLWorkoutPredictorInputs::Items &)", "%s\n", v96);
    if (v96 != (char *)&buf) {
      free(v96);
    }
    return v116;
  }
  return v62;
}

uint64_t sub_100B492C4(uint64_t a1, unsigned char *a2)
{
  double v2 = *(double *)(a1 + 328);
  BOOL v4 = *(double *)(a1 + 288) == -1.79769313e308 || v2 <= -1.0 || *(double *)(a1 + 656) == -1.79769313e308;
  if (v4
    || (int v6 = *(unsigned char *)(a1 + 816) & 0xFE, v6 == 2)
    && (*(double *)(a1 + 168) != -1.79769313e308 ? (BOOL v7 = *(_DWORD *)(a1 + 184) == 0) : (BOOL v7 = 1), v7))
  {
    uint64_t v5 = 0;
    *a2 = 0;
  }
  else
  {
    *a2 = 1;
    LODWORD(v5) = *(_DWORD *)(a1 + 872);
    double v8 = *(double *)(a1 + 880);
    double v9 = 0.0;
    if (v8 > 0.0) {
      double v9 = *(double *)(a1 + 912) / v8;
    }
    if (v9 <= v2 * 0.7) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = v5;
    }
    if (v6 == 2 && *(double *)(a1 + 168) != -1.79769313e308 && *(_DWORD *)(a1 + 184) != 0)
    {
      double v11 = *(double *)(a1 + 320);
      double v12 = 0.0;
      if (v11 > 0.0) {
        double v12 = *(double *)(a1 + 192) / v11;
      }
      if (fabs(v12) > 0.03) {
        return 0;
      }
    }
  }
  return v5;
}

double sub_100B493BC@<D0>(void **a1@<X0>, double *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v7 = a2[40];
  double v8 = a2[24];
  if (v7 <= 0.0) {
    double v9 = 0.0;
  }
  else {
    double v9 = v8 / v7;
  }
  double v10 = fabs(v8);
  float v11 = v8;
  if (v10 > v7 * 0.1) {
    float v11 = 0.0;
  }
  float v12 = v7;
  sub_10106C668(v12, v11, *(float *)(a3 + 12));
  double v13 = a2[1];
  *(double *)&long long v16 = v13;
  *((double *)&v16 + 1) = v14;
  double v17 = v9;
  if (a2[36] != -1.79769313e308 && a2[41] > -1.0) {
    sub_100B49748(a1, &v16);
  }

  return sub_100B49898((uint64_t *)a1, a4, v13);
}

void sub_100B4949C(uint64_t a1, uint64_t a2)
{
  long long v6 = xmmword_101D808F4;
  int v7 = -1056275379;
  float v3 = *(double *)(a2 + 328);
  float v4 = log10f(*(float *)(a2 + 1368));
  *(float *)double v9 = v3;
  *(float *)&v9[1] = v4 * 10.0;
  int v5 = *(_DWORD *)(a2 + 1372);
  v9[2] = *(_DWORD *)(a2 + 1356);
  v9[3] = v5;
  sub_100081994((uint64_t)v9, (float *)&v8, (int *)&v6, 2, 4);
}

uint64_t sub_100B49558(uint64_t a1, uint64_t a2, float *a3)
{
  float v4 = fmin((a3[7] - *(double *)(a2 + 232)) / (a3[7] - a3[6]), 1.0);
  float v5 = sub_101141BD8(v4, a3[5]) * a3[4];
  if (v5 <= 0.0) {
    return 0;
  }
  double v6 = v5;
  double v7 = *(double *)(a1 + 32);
  if (v7 > v6 + 15.0) {
    return 1;
  }
  if (v7 <= v6 + v6) {
    return 0;
  }
  else {
    return 2;
  }
}

unsigned __int16 *sub_100B495F4(unsigned __int16 *result, uint64_t a2)
{
  if (*(double *)(a2 + 168) == -1.79769313e308 || *(_DWORD *)(a2 + 184) == 0)
  {
    BOOL v3 = 0;
  }
  else
  {
    BOOL v3 = *(double *)(a2 + 288) != -1.79769313e308;
    if (*(double *)(a2 + 328) <= -1.0) {
      BOOL v3 = 0;
    }
  }
  double v4 = *(double *)(a2 + 320);
  double v5 = 0.0;
  if (v4 > 0.0) {
    double v5 = *(double *)(a2 + 192) / v4;
  }
  if (fabs(v5) >= 0.03) {
    BOOL v3 = 0;
  }
  if (v3 && *(double *)(a2 + 328) > 0.44704) {
    return sub_100B499E8(result + 24, (void *)(a2 + 328));
  }
  *((_DWORD *)result + 12) = 0;
  return result;
}

BOOL sub_100B49698(uint64_t a1)
{
  if (*(_WORD *)(a1 + 50) != 3) {
    return 0;
  }
  uint64_t v1 = (unsigned __int16 *)(a1 + 48);
  double v2 = *(double *)sub_1000C0B8C((unsigned __int16 *)(a1 + 48), 0);
  uint64_t v3 = 1;
  double v4 = v2 - *(double *)sub_1000C0B8C(v1, 1uLL);
  double v5 = *(double *)sub_1000C0B8C(v1, 1uLL);
  double v6 = v5 - *(double *)sub_1000C0B8C(v1, 2uLL);
  if (v4 < 3.0 || v6 < 3.0) {
    return v6 <= -3.0 && v4 <= -3.0;
  }
  return v3;
}

void sub_100B49748(void **a1, long long *a2)
{
  double v4 = (char *)*a1;
  double v5 = (char *)a1[1];
  uint64_t v6 = v5 - (unsigned char *)*a1;
  if (v5 == *a1 || *(double *)a2 - *((double *)v5 - 3) > 0.0)
  {
    uint64_t v7 = (uint64_t)(a1 + 2);
    int v8 = (char *)a1[2];
    if (v5 >= v8)
    {
      uint64_t v11 = v6 / 24;
      unint64_t v12 = v6 / 24 + 1;
      if (v12 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        unsigned int v15 = (char *)sub_1000DA5D8(v7, v14);
      }
      else {
        unsigned int v15 = 0;
      }
      long long v16 = &v15[24 * v11];
      double v17 = &v15[24 * v14];
      long long v18 = *a2;
      *((void *)v16 + 2) = *((void *)a2 + 2);
      *(_OWORD *)long long v16 = v18;
      double v10 = v16 + 24;
      double v20 = (char *)*a1;
      BOOL v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          long long v21 = *(_OWORD *)(v19 - 24);
          *((void *)v16 - 1) = *((void *)v19 - 1);
          *(_OWORD *)(v16 - 24) = v21;
          v16 -= 24;
          v19 -= 24;
        }
        while (v19 != v20);
        BOOL v19 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v10;
      a1[2] = v17;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      long long v9 = *a2;
      *((void *)v5 + 2) = *((void *)a2 + 2);
      *(_OWORD *)double v5 = v9;
      double v10 = v5 + 24;
    }
    a1[1] = v10;
  }
}

double sub_100B49898@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(_DWORD *)a2 = 0;
  *(_OWORD *)(a2 + 8) = xmmword_101D1C320;
  uint64_t v6 = (long long *)*a1;
  double v5 = (long long *)a1[1];
  uint64_t v7 = v6;
  if (v6 == v5)
  {
LABEL_6:
    double v5 = v7;
  }
  else
  {
    double v8 = a3 + -30.0;
    long long v9 = v6;
    while (*(double *)v9 >= v8)
    {
      long long v9 = (long long *)((char *)v9 + 24);
      if (v9 == v5)
      {
        uint64_t v7 = v5;
        goto LABEL_6;
      }
    }
    if (v9 != v5)
    {
      double v10 = (long long *)((char *)v9 + 24);
      if ((long long *)((char *)v9 + 24) != v5)
      {
        do
        {
          if (*(double *)v10 >= v8)
          {
            long long v11 = *v10;
            *((void *)v9 + 2) = *((void *)v10 + 2);
            *long long v9 = v11;
            long long v9 = (long long *)((char *)v9 + 24);
          }
          double v10 = (long long *)((char *)v10 + 24);
        }
        while (v10 != v5);
        uint64_t v6 = (long long *)*a1;
        double v5 = (long long *)a1[1];
      }
    }
    if (v9 != v5)
    {
      double v5 = v9;
      a1[1] = (uint64_t)v9;
    }
  }
  int v12 = -1431655765 * ((unint64_t)((char *)v5 - (char *)v6) >> 3);
  *(_DWORD *)a2 = v12;
  if (v6 == v5)
  {
    double v14 = 0.0;
    double v13 = 0.0;
  }
  else
  {
    double v13 = 0.0;
    double v14 = 0.0;
    do
    {
      double v13 = v13 + fmax(*((double *)v6 + 1), 0.0);
      double v14 = v14 + *((double *)v6 + 2);
      uint64_t v6 = (long long *)((char *)v6 + 24);
    }
    while (v6 != v5);
  }
  double result = v14 / (double)v12;
  *(double *)(a2 + 8) = v13 / (double)v12;
  *(double *)(a2 + 16) = result;
  return result;
}

unsigned __int16 *sub_100B499E8(unsigned __int16 *result, void *a2)
{
  uint64_t v2 = result[1];
  unint64_t v3 = *((unsigned int *)result + 1);
  uint64_t v4 = *result;
  if (v4 + v2 >= v3) {
    uint64_t v5 = *((unsigned int *)result + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  *(void *)&result[4 * (v4 + v2 - v5) + 4] = *a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3) {
      LOWORD(v3) = 0;
    }
    *double result = v4 + 1 - v3;
  }
  else
  {
    result[1] = v2 + 1;
  }
  return result;
}

void sub_100B49A3C(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

uint64_t sub_100B49A6C()
{
  if (qword_1024801D0 != -1) {
    dispatch_once(&qword_1024801D0, &stru_1022E6598);
  }
  return qword_10248A9C0;
}

void sub_100B49AB4()
{
}

void sub_100B49B28()
{
}

void *sub_100B49B4C(void *a1)
{
  *a1 = off_1022E65C8;
  sub_100B49BF4((uint64_t)a1, 0, 0);
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_1000DB0A0(v2);
  }

  return sub_1009D1DE4(a1);
}

void sub_100B49BBC(void *a1)
{
  sub_100B49B4C(a1);

  operator delete();
}

void sub_100B49BF4(uint64_t a1, int a2, uint64_t a3)
{
  if (!a2)
  {
    uint64_t v15 = v3;
    uint64_t v16 = v4;
    if (!*(void *)(a1 + 32))
    {
      uint64_t v7 = (uint64_t *)sub_100A26784();
      uint64_t v12 = 0x80000FF00;
      char v13 = 0;
      sub_101A46D60(v7, (uint64_t)&v12, (uint64_t *)&v14);
      long long v8 = v14;
      long long v14 = 0uLL;
      long long v9 = *(std::__shared_weak_count **)(a1 + 40);
      *(_OWORD *)(a1 + 32) = v8;
      if (v9)
      {
        sub_1000DB0A0(v9);
        if (*((void *)&v14 + 1)) {
          sub_1000DB0A0(*((std::__shared_weak_count **)&v14 + 1));
        }
      }
      sub_100A29D14(*(void *)(a1 + 32), 14);
    }
    if (a3)
    {
      double v10 = sub_100B49CB0;
      uint64_t v11 = a1;
    }
    else
    {
      double v10 = 0;
      uint64_t v11 = 0;
    }
    sub_100A2932C(*(uint64_t **)(a1 + 32), (uint64_t)v10, v11);
  }
}

uint64_t sub_100B49CB0(uint64_t a1)
{
  uint64_t result = IOHIDEventGetType();
  if (result == 14)
  {
    int IntegerValue = IOHIDEventGetIntegerValue();
    unint64_t TimeStamp = IOHIDEventGetTimeStamp();
    double v5 = sub_1000D3D90(TimeStamp);
    int v6 = IntegerValue;
    return sub_1000E7BA0(a1, 0, (uint64_t)&v5, 16);
  }
  return result;
}

uint64_t sub_100B49D30(uint64_t a1)
{
  *(void *)a1 = off_1022E6620;
  *(_DWORD *)(a1 + 8) = 1065353216;
  uint64_t v2 = (float *)(a1 + 8);
  uint64_t v3 = sub_1000D3E78();
  sub_10006B564(v3, &v5);
  sub_1004D11B0(v5, "StatCycleModelMetsScale", v2);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return a1;
}

void sub_100B49DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B49DD0(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 48) + 48))(*(void *)(a3 + 48));
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void, unsigned char *, double))(**(void **)(a3 + 48) + 24))(*(void *)(a3 + 48), v6, a1);
    if (v6[208])
    {
      sub_10046B90C(*(void *)(a3 + 8), *(double *)(*(void *)(a3 + 8) + 104), *(double *)(*(void *)(a3 + 8) + 112));
      return sub_100B4A608(*(void *)(a3 + 64), *(double *)(*(void *)(a3 + 64) + 104), *(double *)(*(void *)(a3 + 64) + 112));
    }
  }
  return result;
}

uint64_t sub_100B49EAC(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 8) + 48))(*(void *)(a3 + 8));
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(__n128))(**(void **)(a3 + 64) + 48);
    v6.n128_f64[0] = a1;
    return v7(v6);
  }
  return result;
}

void sub_100B49F4C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int isTypeStatic = CLMotionActivity::isTypeStatic();
  *(_OWORD *)a2 = xmmword_101D80930;
  *(void *)(a2 + 16) = 0x408CDDEA00000000;
  *(_DWORD *)(a2 + 24) = 3;
  float v5 = 4.4021;
  if (isTypeStatic) {
    float v6 = 1.3;
  }
  else {
    float v6 = 4.4021;
  }
  float v38 = v6;
  *(float *)(a2 + 28) = v6;
  *(void *)(a2 + 32) = 0x300000003;
  float v7 = *(float *)(a1 + 1364);
  float v8 = *(float *)(a1 + 1368);
  float v9 = *(float *)(a1 + 1372);
  float v10 = *(float *)(a1 + 1380);
  float v11 = *(float *)(a1 + 1384);
  float v12 = 0.0;
  if (sub_1001860C8(a1))
  {
    float v37 = v7;
    float v13 = 4.4021;
    if (*(double *)(a1 + 600) < *(double *)a1)
    {
      float v14 = *(double *)(a1 + 560);
      double v15 = v11;
      double v16 = v10;
      double v17 = v14;
      double v36 = v16;
      float v18 = (v16 - v14) / (v16 - v11);
      float v19 = v8;
      float v20 = v8 * sub_101141BD8(v18, v9);
      if ((float)(1.0 - v18) <= 0.2)
      {
        float v5 = 2.1;
        if (v20 >= 2.1) {
          float v13 = v20;
        }
        else {
          float v13 = 2.1;
        }
        if (v20 >= 2.1) {
          int v21 = 1;
        }
        else {
          int v21 = 3;
        }
        if (isTypeStatic) {
          float v23 = 1.3;
        }
        else {
          float v23 = 2.1;
        }
        if (v20 >= v23) {
          float v22 = v20;
        }
        else {
          float v22 = v23;
        }
      }
      else
      {
        float v5 = 4.4021;
        if (v20 >= 4.4021) {
          float v13 = v20;
        }
        else {
          float v13 = 4.4021;
        }
        if (v20 >= 4.4021) {
          int v21 = 1;
        }
        else {
          int v21 = 3;
        }
        float v22 = v13;
      }
      *(float *)a2 = v20;
      *(_DWORD *)(a2 + 4) = 0;
      *(_DWORD *)(a2 + 8) = 0;
      *(float *)(a2 + 12) = v5;
      *(_DWORD *)(a2 + 16) = 0;
      *(float *)(a2 + 20) = v13;
      *(_DWORD *)(a2 + 24) = v21;
      *(float *)(a2 + 28) = v22;
      *(_DWORD *)(a2 + 32) = v21;
      *(_DWORD *)(a2 + 36) = 0;
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022E6660);
      }
      int v24 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
      {
        double v25 = *(double *)(a1 + 120);
        double v26 = *(double *)(a1 + 128);
        uint64_t v27 = *(void *)(a1 + 600);
        *(_DWORD *)long long buf = 134220288;
        double v40 = v25;
        __int16 v41 = 2048;
        double v42 = v26;
        __int16 v43 = 2048;
        double v44 = v17;
        __int16 v45 = 2048;
        double v46 = v36;
        __int16 v47 = 2048;
        double v48 = v15;
        __int16 v49 = 2048;
        double v50 = v19;
        __int16 v51 = 2048;
        double v52 = v26 - v25;
        __int16 v53 = 2048;
        double v54 = v37;
        __int16 v55 = 2048;
        double v56 = v13;
        __int16 v57 = 2048;
        uint64_t v58 = v27;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Stationary Cycle, Begin Time, %f, End Time, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, duration(s), %f, weight(kg), %f, METS, %f, HRstaleness, %f", buf, 0x66u);
      }
      float v38 = v22;
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_1022E6660);
        }
        float v12 = v20;
        int v35 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieStationaryCycleModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v35);
        if (v35 != (char *)buf) {
          free(v35);
        }
      }
      else
      {
        float v12 = v20;
      }
    }
  }
  else
  {
    float v13 = 4.4021;
  }
  double v28 = 0.0;
  if (*(unsigned char *)(a1 + 352))
  {
    float v29 = v38;
    if (*(double *)(a1 + 1040) > 0.0)
    {
      float v30 = sub_1013EF984(*(double *)(a1 + 1152), *(float *)(a1 + 1364));
      *(float *)(a2 + 8) = v30;
      if (v13 < v30)
      {
        *(float *)(a2 + 20) = v30;
        *(_DWORD *)(a2 + 24) = 4;
        float v13 = v30;
      }
      if (v38 < v30)
      {
        *(float *)(a2 + 28) = v30;
        *(_DWORD *)(a2 + 32) = 4;
        float v29 = v30;
      }
      if (v5 <= v30) {
        float v5 = v30;
      }
      *(float *)(a2 + 12) = v5;
      double v28 = v30;
    }
  }
  else
  {
    float v29 = v38;
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022E6660);
  }
  long long v31 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    double v32 = *(double *)(a1 + 112);
    double v33 = *(double *)(a1 + 128) - *(double *)(a1 + 120);
    *(_DWORD *)long long buf = 134219520;
    double v40 = v32;
    __int16 v41 = 2048;
    double v42 = v12;
    __int16 v43 = 2048;
    double v44 = v28;
    __int16 v45 = 2048;
    double v46 = v13;
    __int16 v47 = 2048;
    double v48 = v33;
    __int16 v49 = 2048;
    double v50 = v29;
    __int16 v51 = 2048;
    double v52 = v5;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "Stationary Cycle, computeTime, %.3f, hrMets, %f, fmMets, %f, userMets, %f, Duration, %f, truthMets, %f, metsPE, %f", buf, 0x48u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022E6660);
    }
    uint64_t v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieStationaryCycleModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v34);
    if (v34 != (char *)buf) {
      free(v34);
    }
  }
}

void sub_100B4A5C4()
{
}

void sub_100B4A5D8(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

BOOL sub_100B4A608(uint64_t a1, double a2, double a3)
{
  if (*(unsigned char *)(a1 + 80))
  {
    BOOL result = 1;
  }
  else if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1))
  {
    *(double *)(a1 + 72) = a2;
    BOOL result = 1;
    *(unsigned char *)(a1 + 80) = 1;
    *(unsigned char *)(a1 + 120) = 0;
  }
  else
  {
    BOOL result = *(unsigned char *)(a1 + 80) != 0;
  }
  double v7 = a2 + a3;
  if (*(double *)(a1 + 88) >= a2 + a3) {
    double v7 = *(double *)(a1 + 88);
  }
  *(double *)(a1 + 88) = v7;
  return result;
}

void *sub_100B4A6A8(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  *BOOL result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

unint64_t sub_100B4A6C4(void *a1, void *a2, unsigned int a3)
{
  sub_1000E1294((uint64_t *)v31, (uint64_t)"CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords", 0);
  double v28 = 0;
  float v29 = 0;
  uint64_t v30 = 0;
  double Current = CFAbsoluteTimeGetCurrent();
  double v27 = 0.0;
  uint64_t v7 = sub_1000D3E78();
  sub_10006B564(v7, buf);
  sub_1000A699C(*(uint64_t *)buf, "PredictedWalkDistanceBoutRecordId", &v27);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v27 <= 0.0)
  {
    uint64_t v11 = sub_1000A6958();
    sub_1000A699C(v11, "CMHealthColdStorageWatchServiceLastSyncTimestampPredictedWalkDistance", &v27);
  }
  else
  {
    uint64_t v8 = sub_1000A6958();
    sub_10016332C(v8, "CMHealthColdStorageWatchServiceLastSyncTimestampPredictedWalkDistance", &v27);
    uint64_t v9 = sub_1000A6958();
    (*(void (**)(uint64_t))(*(void *)v9 + 944))(v9);
    uint64_t v10 = sub_1000D3E78();
    sub_10006B564(v10, buf);
    sub_1004CF7DC(*(uint64_t *)buf, "PredictedWalkDistanceBoutRecordId", 0xFFFFFFFFLL);
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if ((*(unsigned int (**)(void, char **, uint64_t, unint64_t, void, double, double))(*(void *)*a1 + 24))(*a1, &v28, 1, a3 / 0x78uLL, 0, v27, Current) != 100)
  {
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1022E6680);
    }
    float v12 = qword_102419208;
    if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134218240;
      *(double *)&uint8_t buf[4] = v27;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = Current;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLPredictedWalkDistanceCompanionSyncManager: Failed to fetch bouts for time range, startTime : %f, endTime: %f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1022E6680);
      }
      int v32 = 134218240;
      double v33 = v27;
      __int16 v34 = 2048;
      double v35 = Current;
      double v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "size_t CLPredictedWalkDistanceCompanionSyncManager::queryLatestRecords(NSMutableDictionary *, uint32_t)", "%s\n", v26);
      if (v26 != buf) {
        free(v26);
      }
    }
  }
  a1[2] = 0xBFF0000000000000;
  float v13 = v28;
  if (v28 == v29)
  {
    int v24 = v28;
    if (!v28) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  a1[2] = *((void *)v29 - 13);
  id v14 = +[NSMutableArray array];
  double v15 = v28;
  double v16 = v29;
  if (v28 != v29)
  {
    do
    {
      long long v17 = *v15;
      long long v18 = v15[1];
      long long v19 = v15[3];
      long long v37 = v15[2];
      long long v38 = v19;
      *(_OWORD *)long long buf = v17;
      *(_OWORD *)&uint8_t buf[16] = v18;
      long long v20 = v15[4];
      long long v21 = v15[5];
      long long v22 = v15[6];
      uint64_t v42 = *((void *)v15 + 14);
      long long v40 = v21;
      long long v41 = v22;
      long long v39 = v20;
      float v23 = [[CLPredictedWalkDistanceData alloc] initWithPredictedWalkDistanceBoutEntry:buf];
      [v14 addObject:v23];

      double v15 = (_OWORD *)((char *)v15 + 120);
    }
    while (v15 != (_OWORD *)v16);
  }
  [a2 setObject:v14 forKey:@"PredictedWalkDistanceBoutKey"];
  int v24 = v28;
  float v13 = v29;
  if (v28)
  {
LABEL_17:
    float v29 = v24;
    operator delete(v24);
  }
LABEL_18:
  sub_1000E1098(v31);
  return 0xEEEEEEEEEEEEEEEFLL * ((v13 - v24) >> 3);
}

void sub_100B4AAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, id a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1000E1098(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100B4AB34(uint64_t result)
{
  uint64_t v1 = (uint64_t *)(result + 16);
  if (*(double *)(result + 16) > 0.0)
  {
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1022E6680);
    }
    uint64_t v2 = qword_102419208;
    if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = *v1;
      *(_DWORD *)long long buf = 134217984;
      uint64_t v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Saving last Cold Storage sync timestamp: %f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1022E6680);
      }
      float v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPredictedWalkDistanceCompanionSyncManager::saveCurrentSyncProgress()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    uint64_t v4 = sub_1000A6958();
    sub_10016332C(v4, "CMHealthColdStorageWatchServiceLastSyncTimestampPredictedWalkDistance", v1);
    uint64_t v5 = *(void *)sub_1000A6958();
    return (*(uint64_t (**)(void))(v5 + 944))();
  }
  return result;
}

void sub_100B4AD44(id a1)
{
  qword_102419208 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
}

BOOL sub_100B4AD74(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  BOOL result = 0;
  if (a2 && a3 - a4 >= a6)
  {
    if (*(unsigned char *)(a2 + a4) == 64
      && (uint64_t v7 = a4 + a2, *(unsigned __int8 *)(v7 + 1) <= 0x30u)
      && *(unsigned __int8 *)(v7 + 2) == a6)
    {
      return *(unsigned __int8 *)(a4 + a2 + 3) == a5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_100B4ADD0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 35)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 19083328;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 33);
    *(_WORD *)(a2 + 33) = v6 | ((_WORD)v5 << 8);
    *a4 = 35;
  }
  return a3 > 34;
}

BOOL sub_100B4AE78(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 1, 35);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    uint64_t v9 = a4 + 33;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 29);
    if (a4 < -32)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4AF60(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 35)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0#\a");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 33);
    *(_WORD *)(a2 + 33) = v6 | ((_WORD)v5 << 8);
    *a4 = 35;
  }
  return a3 > 34;
}

BOOL sub_100B4B008(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 7, 35);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    uint64_t v9 = a4 + 33;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 29);
    if (a4 < -32)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4B0F0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 35)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0#\n");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 33);
    *(_WORD *)(a2 + 33) = v6 | ((_WORD)v5 << 8);
    *a4 = 35;
  }
  return a3 > 34;
}

BOOL sub_100B4B198(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 10, 35);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    uint64_t v9 = a4 + 33;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 29);
    if (a4 < -32)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

std::string *sub_100B4B280(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,AccelOscarEmu,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20lf", *(double *)(a1 + 8), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40), *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

BOOL sub_100B4B31C(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 41)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    char v7 = *(unsigned char *)(a1 + 49);
    if (*(unsigned char *)(a1 + 50)) {
      v7 |= 2u;
    }
    *(_DWORD *)a2 = 36253760;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 44);
    *(unsigned char *)(a2 + 37) = *(unsigned char *)(a1 + 48);
    *(unsigned char *)(a2 + 38) = v7;
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 39);
    *(_WORD *)(a2 + 39) = v6 | ((_WORD)v5 << 8);
    *a4 = 41;
  }
  return a3 > 40;
}

BOOL sub_100B4B3EC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 2, 41);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 29);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(v8 + 33);
    *(unsigned char *)(a1 + 48) = v8[37];
    unsigned __int8 v9 = v8[38];
    uint64_t v10 = a4 + 39;
    *(unsigned char *)(a1 + 49) = v9 & 1;
    *(unsigned char *)(a1 + 50) = (v9 & 2) != 0;
    if (a4 < -38)
    {
      int v15 = 0;
    }
    else
    {
      unsigned int v11 = 0;
      unsigned int v12 = 0;
      uint64_t v13 = v10;
      do
      {
        int v14 = *v8++;
        unsigned int v12 = (v12 + v14) % 0xFF;
        unsigned int v11 = (v12 + v11) % 0xFF;
        --v13;
      }
      while (v13);
      int v15 = (unsigned __int16)v12 | ((unsigned __int16)v11 << 8);
    }
    int v16 = *(unsigned __int16 *)(v10 + a2);
    *(_WORD *)(a1 + 16) = v16;
    return v16 == v15;
  }
  return result;
}

BOOL sub_100B4B4F8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 35)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0#\b");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 33);
    *(_WORD *)(a2 + 33) = v6 | ((_WORD)v5 << 8);
    *a4 = 35;
  }
  return a3 > 34;
}

BOOL sub_100B4B5A0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 8, 35);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    uint64_t v9 = a4 + 33;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 29);
    if (a4 < -32)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4B688(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 19)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 101920832;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 17);
    *(_WORD *)(a2 + 17) = v6 | ((_WORD)v5 << 8);
    *a4 = 19;
  }
  return a3 > 18;
}

BOOL sub_100B4B718(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 6, 19);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    uint64_t v9 = a4 + 17;
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 13);
    if (a4 < -16)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4B7E8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 38)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 388378688;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    *(_WORD *)(a2 + 33) = *(_WORD *)(a1 + 44);
    *(unsigned char *)(a2 + 35) = *(unsigned char *)(a1 + 46);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 36);
    *(_WORD *)(a2 + 36) = v6 | ((_WORD)v5 << 8);
    *a4 = 38;
  }
  return a3 > 37;
}

BOOL sub_100B4B8A0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 23, 38);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 29);
    *(_WORD *)(a1 + 44) = *(_WORD *)(v8 + 33);
    uint64_t v9 = a4 + 36;
    *(unsigned char *)(a1 + 46) = v8[35] == 1;
    if (a4 < -35)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

std::string *sub_100B4B9A0(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,GyroOscarEmu,x,%20.20f,y,%20.20f,z,%20.20f,sampleNum,%d,fsync,%d,timestamp,%20.20lf", *(double *)(a1 + 8), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40), *(unsigned __int16 *)(a1 + 44), *(unsigned __int8 *)(a1 + 46), *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

BOOL sub_100B4BA48(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 40)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 203960384;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a2 + 17) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 40);
    *(unsigned char *)(a2 + 37) = *(unsigned char *)(a1 + 44);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 38);
    *(_WORD *)(a2 + 38) = v6 | ((_WORD)v5 << 8);
    *a4 = 40;
  }
  return a3 > 39;
}

BOOL sub_100B4BB08(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 12, 40);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 + 17);
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 29);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 33);
    *(unsigned char *)(a1 + 44) = v8[37];
    uint64_t v9 = a4 + 38;
    if (a4 < -37)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4BC08(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 44)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 288108608;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a2 + 17) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 37) = *(_DWORD *)(a1 + 44);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 42);
    *(_WORD *)(a2 + 42) = v6 | ((_WORD)v5 << 8);
    *a4 = 44;
  }
  return a3 > 43;
}

BOOL sub_100B4BCC8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 17, 44);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 + 17);
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 29);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 33);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(v8 + 37);
    uint64_t v9 = a4 + 42;
    if (a4 < -41)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4BDC8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 20)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 303312960;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 18);
    *(_WORD *)(a2 + 18) = v6 | ((_WORD)v5 << 8);
    *a4 = 20;
  }
  return a3 > 19;
}

BOOL sub_100B4BE58(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 18, 20);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 13);
    uint64_t v9 = a4 + 18;
    if (a4 < -17)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4BF28(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 35)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 52637760;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 33);
    *(_WORD *)(a2 + 33) = v6 | ((_WORD)v5 << 8);
    *a4 = 35;
  }
  return a3 > 34;
}

BOOL sub_100B4BFD0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 3, 35);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    uint64_t v9 = a4 + 33;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 29);
    if (a4 < -32)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4C0B8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 72)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 71839808;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a2 + 37) = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a2 + 41) = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a2 + 45) = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a2 + 49) = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a2 + 53) = *(_DWORD *)(a1 + 64);
    *(unsigned char *)(a2 + 57) = *(unsigned char *)(a1 + 68);
    *(_DWORD *)(a2 + 58) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a2 + 62) = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a2 + 66) = *(_DWORD *)(a1 + 80);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 70);
    *(_WORD *)(a2 + 70) = v6 | ((_WORD)v5 << 8);
    *a4 = 72;
  }
  return a3 > 71;
}

BOOL sub_100B4C1B0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 4, 72);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 29);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(v8 + 33);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(v8 + 37);
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(v8 + 41);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(v8 + 45);
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(v8 + 49);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(v8 + 53);
    *(unsigned char *)(a1 + 68) = v8[57];
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(v8 + 58);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(v8 + 62);
    uint64_t v9 = a4 + 70;
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(v8 + 66);
    if (a4 < -69)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4C2E8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 24)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 186134592;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(unsigned char *)(a2 + 21) = *(unsigned char *)(a1 + 32);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 22);
    *(_WORD *)(a2 + 22) = v6 | ((_WORD)v5 << 8);
    *a4 = 24;
  }
  return a3 > 23;
}

BOOL sub_100B4C380(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 11, 24);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(unsigned char *)(a1 + 32) = v8[21];
    uint64_t v9 = a4 + 22;
    if (a4 < -21)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4C458(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 102)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 90583104;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a2 + 37) = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a2 + 41) = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a2 + 45) = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a2 + 49) = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a2 + 53) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a2 + 57) = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a2 + 61) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a2 + 65) = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a2 + 69) = *(_DWORD *)(a1 + 80);
    *(unsigned char *)(a2 + 73) = *(unsigned char *)(a1 + 84);
    *(_DWORD *)(a2 + 74) = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a2 + 78) = *(_DWORD *)(a1 + 92);
    *(_DWORD *)(a2 + 82) = *(_DWORD *)(a1 + 96);
    *(_DWORD *)(a2 + 86) = *(_DWORD *)(a1 + 100);
    *(_DWORD *)(a2 + 90) = *(_DWORD *)(a1 + 104);
    *(_DWORD *)(a2 + 94) = *(_DWORD *)(a1 + 108);
    *(_WORD *)(a2 + 98) = *(_WORD *)(a1 + 112);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 100);
    *(_WORD *)(a2 + 100) = v6 | ((_WORD)v5 << 8);
    *a4 = 102;
  }
  return a3 > 101;
}

BOOL sub_100B4C590(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 5, 102);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 29);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(v8 + 33);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(v8 + 37);
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(v8 + 41);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(v8 + 45);
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(v8 + 49);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(v8 + 53);
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(v8 + 57);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(v8 + 61);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(v8 + 65);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(v8 + 69);
    *(unsigned char *)(a1 + 84) = v8[73];
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(v8 + 74);
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(v8 + 78);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(v8 + 82);
    *(_DWORD *)(a1 + 100) = *(_DWORD *)(v8 + 86);
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(v8 + 90);
    *(_DWORD *)(a1 + 108) = *(_DWORD *)(v8 + 94);
    *(_WORD *)(a1 + 112) = *((_WORD *)v8 + 49);
    uint64_t v9 = a4 + 100;
    if (a4 < -99)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4C708(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 84)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 341061696;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(unsigned char *)(a2 + 17) = *(unsigned char *)(a1 + 24);
    *(unsigned char *)(a2 + 18) = *(unsigned char *)(a1 + 25);
    *(unsigned char *)(a2 + 19) = *(unsigned char *)(a1 + 26);
    *(unsigned char *)(a2 + 20) = *(unsigned char *)(a1 + 27);
    *(unsigned char *)(a2 + 21) = *(unsigned char *)(a1 + 28);
    *(unsigned char *)(a2 + 22) = *(unsigned char *)(a1 + 29);
    *(unsigned char *)(a2 + 23) = *(unsigned char *)(a1 + 30);
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 32);
    *(void *)(a2 + 28) = *(void *)(a1 + 40);
    *(void *)(a2 + 36) = *(void *)(a1 + 48);
    *(void *)(a2 + 44) = *(void *)(a1 + 56);
    *(void *)(a2 + 52) = *(void *)(a1 + 64);
    *(unsigned char *)(a2 + 60) = *(unsigned char *)(a1 + 72);
    *(_DWORD *)(a2 + 61) = *(_DWORD *)(a1 + 76);
    *(unsigned char *)(a2 + 65) = *(unsigned char *)(a1 + 80);
    *(_DWORD *)(a2 + 66) = *(_DWORD *)(a1 + 84);
    *(_DWORD *)(a2 + 70) = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a2 + 74) = *(_DWORD *)(a1 + 92);
    *(_DWORD *)(a2 + 78) = *(_DWORD *)(a1 + 96);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 82);
    *(_WORD *)(a2 + 82) = v6 | ((_WORD)v5 << 8);
    *a4 = 84;
  }
  return a3 > 83;
}

BOOL sub_100B4C830(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 20, 84);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 13);
    *(unsigned char *)(a1 + 24) = v8[17];
    *(unsigned char *)(a1 + 25) = v8[18];
    *(unsigned char *)(a1 + 26) = v8[19];
    *(unsigned char *)(a1 + 27) = v8[20];
    *(unsigned char *)(a1 + 28) = v8[21];
    *(unsigned char *)(a1 + 29) = v8[22];
    *(unsigned char *)(a1 + 30) = v8[23];
    *(_DWORD *)(a1 + 32) = *((_DWORD *)v8 + 6);
    *(void *)(a1 + 40) = *(void *)(v8 + 28);
    *(void *)(a1 + 48) = *(void *)(v8 + 36);
    *(void *)(a1 + 56) = *(void *)(v8 + 44);
    *(void *)(a1 + 64) = *(void *)(v8 + 52);
    *(unsigned char *)(a1 + 72) = v8[60];
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(v8 + 61);
    *(unsigned char *)(a1 + 80) = v8[65];
    *(_DWORD *)(a1 + 84) = *(_DWORD *)(v8 + 66);
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(v8 + 70);
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(v8 + 74);
    uint64_t v9 = a4 + 82;
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(v8 + 78);
    if (a4 < -81)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4C998(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 31)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 220147776;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 29);
    *(_WORD *)(a2 + 29) = v6 | ((_WORD)v5 << 8);
    *a4 = 31;
  }
  return a3 > 30;
}

BOOL sub_100B4CA38(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 13, 31);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    uint64_t v9 = a4 + 29;
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    if (a4 < -28)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4CB18(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 27)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0\x1B5");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 25);
    *(_WORD *)(a2 + 25) = v6 | ((_WORD)v5 << 8);
    *a4 = 27;
  }
  return a3 > 26;
}

BOOL sub_100B4CBB0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 53, 27);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    uint64_t v9 = a4 + 25;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    if (a4 < -24)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4CC88(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 27)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 320548928;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 25);
    *(_WORD *)(a2 + 25) = v6 | ((_WORD)v5 << 8);
    *a4 = 27;
  }
  return a3 > 26;
}

BOOL sub_100B4CD20(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 19, 27);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    uint64_t v9 = a4 + 25;
    if (a4 < -24)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4CDF8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 24)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 421015616;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(unsigned char *)(a2 + 21) = *(unsigned char *)(a1 + 32);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 22);
    *(_WORD *)(a2 + 22) = v6 | ((_WORD)v5 << 8);
    *a4 = 24;
  }
  return a3 > 23;
}

BOOL sub_100B4CE90(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 25, 24);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    uint64_t v9 = a4 + 22;
    *(unsigned char *)(a1 + 32) = v8[21] == 1;
    if (a4 < -21)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4CF70(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 76)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 374091840;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a2 + 37) = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a2 + 41) = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a2 + 45) = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a2 + 49) = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a2 + 53) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a2 + 57) = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a2 + 61) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a2 + 65) = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a2 + 69) = *(_DWORD *)(a1 + 80);
    *(unsigned char *)(a2 + 73) = *(unsigned char *)(a1 + 84);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 74);
    *(_WORD *)(a2 + 74) = v6 | ((_WORD)v5 << 8);
    *a4 = 76;
  }
  return a3 > 75;
}

BOOL sub_100B4D070(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 22, 76);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 29);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(v8 + 33);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(v8 + 37);
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(v8 + 41);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(v8 + 45);
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(v8 + 49);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(v8 + 53);
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(v8 + 57);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(v8 + 61);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(v8 + 65);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(v8 + 69);
    *(unsigned char *)(a1 + 84) = v8[73];
    uint64_t v9 = a4 + 74;
    if (a4 < -73)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4D1B0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 32)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 404762688;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    *(unsigned char *)(a2 + 29) = *(unsigned char *)(a1 + 40);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 30);
    *(_WORD *)(a2 + 30) = v6 | ((_WORD)v5 << 8);
    *a4 = 32;
  }
  return a3 > 31;
}

BOOL sub_100B4D250(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 24, 32);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(void *)(a1 + 32) = *(void *)(v8 + 21);
    uint64_t v9 = a4 + 30;
    *(unsigned char *)(a1 + 40) = v8[29] != 0;
    if (a4 < -29)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4D338(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 43)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0+%");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a2 + 37) = *(_DWORD *)(a1 + 48);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 41);
    *(_WORD *)(a2 + 41) = v6 | ((_WORD)v5 << 8);
    *a4 = 43;
  }
  return a3 > 42;
}

BOOL sub_100B4D3E8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 37, 43);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(void *)(a1 + 32) = *(void *)(v8 + 21);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 29);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(v8 + 33);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(v8 + 37);
    uint64_t v9 = a4 + 41;
    if (a4 < -40)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4D4D8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 27)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0\x1B*");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 25);
    *(_WORD *)(a2 + 25) = v6 | ((_WORD)v5 << 8);
    *a4 = 27;
  }
  return a3 > 26;
}

BOOL sub_100B4D570(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 42, 27);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    uint64_t v9 = a4 + 25;
    if (a4 < -24)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4D648(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 27)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 437989440;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 32);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 25);
    *(_WORD *)(a2 + 25) = v6 | ((_WORD)v5 << 8);
    *a4 = 27;
  }
  return a3 > 26;
}

BOOL sub_100B4D6E0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 25)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 454635584;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(unsigned char *)(a2 + 21) = *(unsigned char *)(a1 + 32);
    *(unsigned char *)(a2 + 22) = *(unsigned char *)(a1 + 33);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 23);
    *(_WORD *)(a2 + 23) = v6 | ((_WORD)v5 << 8);
    *a4 = 25;
  }
  return a3 > 24;
}

BOOL sub_100B4D780(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 26, 27);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 21);
    uint64_t v9 = a4 + 25;
    if (a4 < -24)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4D858(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 27, 25);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(unsigned char *)(a1 + 32) = v8[21];
    *(unsigned char *)(a1 + 33) = v8[22];
    uint64_t v9 = a4 + 23;
    if (a4 < -22)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4D938(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 98)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 492974144;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(unsigned char *)(a2 + 21) = *(unsigned char *)(a1 + 32);
    *(void *)(a2 + 22) = *(void *)(a1 + 40);
    *(void *)(a2 + 30) = *(void *)(a1 + 48);
    *(void *)(a2 + 38) = *(void *)(a1 + 56);
    *(void *)(a2 + 46) = *(void *)(a1 + 64);
    *(void *)(a2 + 54) = *(void *)(a1 + 72);
    *(void *)(a2 + 62) = *(void *)(a1 + 80);
    *(void *)(a2 + 70) = *(void *)(a1 + 88);
    *(void *)(a2 + 78) = *(void *)(a1 + 96);
    *(void *)(a2 + 86) = *(void *)(a1 + 104);
    *(unsigned char *)(a2 + 94) = *(unsigned char *)(a1 + 112);
    *(unsigned char *)(a2 + 95) = *(unsigned char *)(a1 + 113);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 96);
    *(_WORD *)(a2 + 96) = v6 | ((_WORD)v5 << 8);
    *a4 = 98;
  }
  return a3 > 97;
}

BOOL sub_100B4DA28(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 29, 98);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(unsigned char *)(a1 + 32) = v8[21];
    *(void *)(a1 + 40) = *(void *)(v8 + 22);
    *(void *)(a1 + 48) = *(void *)(v8 + 30);
    *(void *)(a1 + 56) = *(void *)(v8 + 38);
    *(void *)(a1 + 64) = *(void *)(v8 + 46);
    *(void *)(a1 + 72) = *(void *)(v8 + 54);
    *(void *)(a1 + 80) = *(void *)(v8 + 62);
    *(void *)(a1 + 88) = *(void *)(v8 + 70);
    *(void *)(a1 + 96) = *(void *)(v8 + 78);
    *(void *)(a1 + 104) = *(void *)(v8 + 86);
    *(unsigned char *)(a1 + 112) = v8[94];
    *(unsigned char *)(a1 + 113) = v8[95];
    uint64_t v9 = a4 + 96;
    if (a4 < -95)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4DB58(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 95)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 509554752;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    *(void *)(a2 + 29) = *(void *)(a1 + 40);
    *(void *)(a2 + 37) = *(void *)(a1 + 48);
    *(void *)(a2 + 45) = *(void *)(a1 + 56);
    *(_DWORD *)(a2 + 53) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a2 + 57) = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a2 + 61) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a2 + 65) = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a2 + 69) = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a2 + 73) = *(_DWORD *)(a1 + 84);
    *(_DWORD *)(a2 + 77) = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a2 + 81) = *(_DWORD *)(a1 + 92);
    *(_DWORD *)(a2 + 85) = *(_DWORD *)(a1 + 96);
    *(unsigned char *)(a2 + 89) = *(unsigned char *)(a1 + 100);
    *(unsigned char *)(a2 + 90) = *(unsigned char *)(a1 + 101);
    *(unsigned char *)(a2 + 91) = *(unsigned char *)(a1 + 102);
    *(unsigned char *)(a2 + 92) = *(unsigned char *)(a1 + 103);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 93);
    *(_WORD *)(a2 + 93) = v6 | ((_WORD)v5 << 8);
    *a4 = 95;
  }
  return a3 > 94;
}

BOOL sub_100B4DC70(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 30, 95);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(void *)(a1 + 32) = *(void *)(v8 + 21);
    *(void *)(a1 + 40) = *(void *)(v8 + 29);
    *(void *)(a1 + 48) = *(void *)(v8 + 37);
    *(void *)(a1 + 56) = *(void *)(v8 + 45);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(v8 + 53);
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(v8 + 57);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(v8 + 61);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(v8 + 65);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(v8 + 69);
    *(_DWORD *)(a1 + 84) = *(_DWORD *)(v8 + 73);
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(v8 + 77);
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(v8 + 81);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(v8 + 85);
    unsigned __int8 v9 = v8[89];
    *(unsigned char *)(a1 + 101) = v8[90] != 0;
    *(unsigned char *)(a1 + 102) = v8[91] != 0;
    unsigned __int8 v10 = v8[92];
    uint64_t v11 = a4 + 93;
    *(unsigned char *)(a1 + 100) = v9;
    *(unsigned char *)(a1 + 103) = v10;
    if (a4 < -92)
    {
      int v16 = 0;
    }
    else
    {
      unsigned int v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = v11;
      do
      {
        int v15 = *v8++;
        unsigned int v13 = (v13 + v15) % 0xFF;
        unsigned int v12 = (v13 + v12) % 0xFF;
        --v14;
      }
      while (v14);
      int v16 = (unsigned __int16)v13 | ((unsigned __int16)v12 << 8);
    }
    int v17 = *(unsigned __int16 *)(v11 + a2);
    *(_WORD *)(a1 + 16) = v17;
    return v17 == v16;
  }
  return result;
}

BOOL sub_100B4DDD8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 252)
  {
    uint64_t v4 = 0;
    *(_DWORD *)a2 = 536621120;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    do
    {
      *(_DWORD *)(a2 + 13 + v4) = *(_DWORD *)(a1 + 20 + v4);
      v4 += 4;
    }
    while (v4 != 96);
    for (uint64_t i = 0; i != 96; i += 4)
      *(_DWORD *)(a2 + 109 + i) = *(_DWORD *)(a1 + 116 + i);
    for (uint64_t j = 0; j != 28; j += 4)
      *(_DWORD *)(a2 + 205 + j) = *(_DWORD *)(a1 + 212 + j);
    uint64_t v7 = 0;
    *(_DWORD *)(a2 + 233) = *(_DWORD *)(a1 + 240);
    do
    {
      *(unsigned char *)(a2 + 237 + v7) = *(unsigned char *)(a1 + 244 + v7);
      ++v7;
    }
    while (v7 != 13);
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    do
    {
      unsigned int v10 = (v10 + *(unsigned __int8 *)(a2 + v8)) % 0xFF;
      unsigned int v9 = (v10 + v9) % 0xFF;
      ++v8;
    }
    while (v8 != 250);
    *(_WORD *)(a2 + 250) = v10 | ((_WORD)v9 << 8);
    *a4 = 252;
  }
  return a3 > 251;
}

BOOL sub_100B4DEE8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 31, 252);
  if (result)
  {
    uint64_t v8 = 0;
    unsigned int v9 = (unsigned __int8 *)(a2 + a4);
    int v10 = a4 + 13;
    *(void *)(a1 + 8) = *(void *)(v9 + 5);
    do
    {
      *(_DWORD *)(a1 + 20 + v8) = *(_DWORD *)(a2 + v10 + v8);
      v8 += 4;
    }
    while (v8 != 96);
    uint64_t v11 = 0;
    int v12 = -96;
    do
    {
      *(_DWORD *)(a1 + 116 + v11) = *(_DWORD *)(a2 + a4 + 109 + v11);
      v12 -= 4;
      v11 += 4;
    }
    while (v11 != 96);
    uint64_t v13 = 0;
    uint64_t v14 = (v10 - v12);
    uint64_t v15 = a2 + (int)v14;
    uint64_t v16 = v14 << 32;
    do
    {
      *(_DWORD *)(a1 + 212 + v13) = *(_DWORD *)(v15 + v13);
      v12 -= 4;
      v13 += 4;
      v16 += 0x400000000;
    }
    while (v13 != 28);
    uint64_t v17 = 0;
    *(_DWORD *)(a1 + 240) = *(_DWORD *)((v16 >> 32) + a2);
    uint64_t v18 = (a4 + 17 - v12);
    uint64_t v19 = a2 + (int)v18;
    uint64_t v20 = v18 << 32;
    int v21 = 19 - v12;
    do
    {
      *(unsigned char *)(a1 + 244 + v17) = *(unsigned char *)(v19 + v17);
      LODWORD(v18) = v18 + 1;
      ++v21;
      ++v17;
      v20 += (uint64_t)&_mh_execute_header;
    }
    while (v17 != 13);
    if ((int)v18 - 1 < 0)
    {
      int v27 = 0;
    }
    else
    {
      unsigned int v22 = 0;
      unsigned int v23 = 0;
      uint64_t v24 = -(uint64_t)v18;
      do
      {
        int v25 = *v9++;
        unsigned int v23 = (v23 + v25) % 0xFF;
        unsigned int v22 = (v23 + v22) % 0xFF;
      }
      while (!__CFADD__(v24++, 1));
      int v27 = (unsigned __int16)v23 | ((unsigned __int16)v22 << 8);
    }
    int v28 = *(unsigned __int16 *)((v20 >> 32) + a2);
    *(_WORD *)(a1 + 16) = v28;
    if (v21 == 252)
    {
      return v28 == v27;
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022E7970);
      }
      float v29 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 67240448;
        int v33 = v21;
        __int16 v34 = 1026;
        int v35 = 252;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
      }
      BOOL v30 = sub_10013D1A0(115, 0);
      BOOL result = 0;
      if (v30)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022E7970);
        }
        long long v31 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLBinaryLogTypes::NonlinearBiasFit::decode(const uint8_t *, const int, const int)", "%s\n", v31);
        if (v31 != (char *)buf) {
          free(v31);
        }
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_100B4E240(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 59)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0;!");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a2 + 17) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 37) = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a2 + 41) = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a2 + 45) = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a2 + 49) = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a2 + 53) = *(_DWORD *)(a1 + 60);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 57);
    *(_WORD *)(a2 + 57) = v6 | ((_WORD)v5 << 8);
    *a4 = 59;
  }
  return a3 > 58;
}

BOOL sub_100B4E320(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 33, 59);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 + 17);
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 25);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 29);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 33);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(v8 + 37);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(v8 + 41);
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(v8 + 45);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(v8 + 49);
    uint64_t v9 = a4 + 57;
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(v8 + 53);
    if (a4 < -56)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4E440(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 31)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 572469312;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a2 + 17) = *(_DWORD *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 29);
    *(_WORD *)(a2 + 29) = v6 | ((_WORD)v5 << 8);
    *a4 = 31;
  }
  return a3 > 30;
}

BOOL sub_100B4E4E0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 34, 31);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 + 17);
    uint64_t v9 = a4 + 29;
    *(void *)(a1 + 32) = *(void *)(v8 + 21);
    if (a4 < -28)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4E5C0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 68)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0D#");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a2 + 17) = *(_DWORD *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    *(void *)(a2 + 29) = *(void *)(a1 + 40);
    *(unsigned char *)(a2 + 37) = *(unsigned char *)(a1 + 48);
    *(void *)(a2 + 38) = *(void *)(a1 + 56);
    *(void *)(a2 + 46) = *(void *)(a1 + 64);
    *(void *)(a2 + 54) = *(void *)(a1 + 72);
    *(_DWORD *)(a2 + 62) = *(_DWORD *)(a1 + 80);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 66);
    *(_WORD *)(a2 + 66) = v6 | ((_WORD)v5 << 8);
    *a4 = 68;
  }
  return a3 > 67;
}

BOOL sub_100B4E690(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 35, 68);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 + 17);
    *(void *)(a1 + 32) = *(void *)(v8 + 21);
    *(void *)(a1 + 40) = *(void *)(v8 + 29);
    *(unsigned char *)(a1 + 48) = v8[37] != 0;
    *(void *)(a1 + 56) = *(void *)(v8 + 38);
    *(void *)(a1 + 64) = *(void *)(v8 + 46);
    *(void *)(a1 + 72) = *(void *)(v8 + 54);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(v8 + 62);
    uint64_t v9 = a4 + 66;
    if (a4 < -65)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4E7A8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 68)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0D$");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a2 + 17) = *(_DWORD *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    *(void *)(a2 + 29) = *(void *)(a1 + 40);
    *(unsigned char *)(a2 + 37) = *(unsigned char *)(a1 + 48);
    *(void *)(a2 + 38) = *(void *)(a1 + 56);
    *(void *)(a2 + 46) = *(void *)(a1 + 64);
    *(void *)(a2 + 54) = *(void *)(a1 + 72);
    *(_DWORD *)(a2 + 62) = *(_DWORD *)(a1 + 80);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 66);
    *(_WORD *)(a2 + 66) = v6 | ((_WORD)v5 << 8);
    *a4 = 68;
  }
  return a3 > 67;
}

BOOL sub_100B4E878(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 36, 68);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 + 17);
    *(void *)(a1 + 32) = *(void *)(v8 + 21);
    *(void *)(a1 + 40) = *(void *)(v8 + 29);
    *(unsigned char *)(a1 + 48) = v8[37] != 0;
    *(void *)(a1 + 56) = *(void *)(v8 + 38);
    *(void *)(a1 + 64) = *(void *)(v8 + 46);
    *(void *)(a1 + 72) = *(void *)(v8 + 54);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(v8 + 62);
    uint64_t v9 = a4 + 66;
    if (a4 < -65)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4E990(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 155)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 647704640;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    *(void *)(a2 + 29) = *(void *)(a1 + 40);
    *(void *)(a2 + 37) = *(void *)(a1 + 48);
    *(void *)(a2 + 45) = *(void *)(a1 + 56);
    *(void *)(a2 + 53) = *(void *)(a1 + 64);
    *(void *)(a2 + 61) = *(void *)(a1 + 72);
    *(void *)(a2 + 69) = *(void *)(a1 + 80);
    *(void *)(a2 + 77) = *(void *)(a1 + 88);
    *(void *)(a2 + 85) = *(void *)(a1 + 96);
    *(_DWORD *)(a2 + 93) = *(_DWORD *)(a1 + 104);
    *(void *)(a2 + 97) = *(void *)(a1 + 112);
    *(_DWORD *)(a2 + 105) = *(_DWORD *)(a1 + 120);
    *(_DWORD *)(a2 + 109) = *(_DWORD *)(a1 + 124);
    *(_DWORD *)(a2 + 113) = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a2 + 117) = *(_DWORD *)(a1 + 132);
    *(_DWORD *)(a2 + 121) = *(_DWORD *)(a1 + 136);
    *(void *)(a2 + 125) = *(void *)(a1 + 144);
    *(void *)(a2 + 133) = *(void *)(a1 + 152);
    *(void *)(a2 + 141) = *(void *)(a1 + 160);
    *(_DWORD *)(a2 + 149) = *(_DWORD *)(a1 + 168);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 153);
    *(_WORD *)(a2 + 153) = v6 | ((_WORD)v5 << 8);
    *a4 = 155;
  }
  return a3 > 154;
}

BOOL sub_100B4EAC0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 38, 155);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(void *)(a1 + 32) = *(void *)(v8 + 21);
    *(void *)(a1 + 40) = *(void *)(v8 + 29);
    *(void *)(a1 + 48) = *(void *)(v8 + 37);
    *(void *)(a1 + 56) = *(void *)(v8 + 45);
    *(void *)(a1 + 64) = *(void *)(v8 + 53);
    *(void *)(a1 + 72) = *(void *)(v8 + 61);
    *(void *)(a1 + 80) = *(void *)(v8 + 69);
    *(void *)(a1 + 88) = *(void *)(v8 + 77);
    *(void *)(a1 + 96) = *(void *)(v8 + 85);
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(v8 + 93);
    *(void *)(a1 + 112) = *(void *)(v8 + 97);
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(v8 + 105);
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(v8 + 109);
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(v8 + 113);
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(v8 + 117);
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(v8 + 121);
    *(void *)(a1 + 144) = *(void *)(v8 + 125);
    *(void *)(a1 + 152) = *(void *)(v8 + 133);
    *(void *)(a1 + 160) = *(void *)(v8 + 141);
    *(_DWORD *)(a1 + 168) = *(_DWORD *)(v8 + 149);
    uint64_t v9 = a4 + 153;
    if (a4 < -152)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4EC30(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 155)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 664481856;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    *(void *)(a2 + 29) = *(void *)(a1 + 40);
    *(void *)(a2 + 37) = *(void *)(a1 + 48);
    *(void *)(a2 + 45) = *(void *)(a1 + 56);
    *(void *)(a2 + 53) = *(void *)(a1 + 64);
    *(void *)(a2 + 61) = *(void *)(a1 + 72);
    *(void *)(a2 + 69) = *(void *)(a1 + 80);
    *(void *)(a2 + 77) = *(void *)(a1 + 88);
    *(void *)(a2 + 85) = *(void *)(a1 + 96);
    *(_DWORD *)(a2 + 93) = *(_DWORD *)(a1 + 104);
    *(void *)(a2 + 97) = *(void *)(a1 + 112);
    *(_DWORD *)(a2 + 105) = *(_DWORD *)(a1 + 120);
    *(_DWORD *)(a2 + 109) = *(_DWORD *)(a1 + 124);
    *(_DWORD *)(a2 + 113) = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a2 + 117) = *(_DWORD *)(a1 + 132);
    *(_DWORD *)(a2 + 121) = *(_DWORD *)(a1 + 136);
    *(void *)(a2 + 125) = *(void *)(a1 + 144);
    *(void *)(a2 + 133) = *(void *)(a1 + 152);
    *(void *)(a2 + 141) = *(void *)(a1 + 160);
    *(_DWORD *)(a2 + 149) = *(_DWORD *)(a1 + 168);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 153);
    *(_WORD *)(a2 + 153) = v6 | ((_WORD)v5 << 8);
    *a4 = 155;
  }
  return a3 > 154;
}

BOOL sub_100B4ED60(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 39, 155);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(void *)(a1 + 32) = *(void *)(v8 + 21);
    *(void *)(a1 + 40) = *(void *)(v8 + 29);
    *(void *)(a1 + 48) = *(void *)(v8 + 37);
    *(void *)(a1 + 56) = *(void *)(v8 + 45);
    *(void *)(a1 + 64) = *(void *)(v8 + 53);
    *(void *)(a1 + 72) = *(void *)(v8 + 61);
    *(void *)(a1 + 80) = *(void *)(v8 + 69);
    *(void *)(a1 + 88) = *(void *)(v8 + 77);
    *(void *)(a1 + 96) = *(void *)(v8 + 85);
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(v8 + 93);
    *(void *)(a1 + 112) = *(void *)(v8 + 97);
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(v8 + 105);
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(v8 + 109);
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(v8 + 113);
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(v8 + 117);
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(v8 + 121);
    *(void *)(a1 + 144) = *(void *)(v8 + 125);
    *(void *)(a1 + 152) = *(void *)(v8 + 133);
    *(void *)(a1 + 160) = *(void *)(v8 + 141);
    *(_DWORD *)(a1 + 168) = *(_DWORD *)(v8 + 149);
    uint64_t v9 = a4 + 153;
    if (a4 < -152)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4EED0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 47)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0/(");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(void *)(a2 + 17) = *(void *)(a1 + 24);
    *(void *)(a2 + 25) = *(void *)(a1 + 32);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 40);
    *(void *)(a2 + 37) = *(void *)(a1 + 48);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 45);
    *(_WORD *)(a2 + 45) = v6 | ((_WORD)v5 << 8);
    *a4 = 47;
  }
  return a3 > 46;
}

BOOL sub_100B4EF80(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 40, 47);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 13);
    *(void *)(a1 + 24) = *(void *)(v8 + 17);
    *(void *)(a1 + 32) = *(void *)(v8 + 25);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 33);
    uint64_t v9 = a4 + 45;
    *(void *)(a1 + 48) = *(void *)(v8 + 37);
    if (a4 < -44)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4F070(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 16)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 688926784;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(unsigned char *)(a2 + 13) = *(unsigned char *)(a1 + 18);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 14);
    *(_WORD *)(a2 + 14) = v6 | ((_WORD)v5 << 8);
    *a4 = 16;
  }
  return a3 > 15;
}

BOOL sub_100B4F100(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 41, 16);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    uint64_t v9 = a4 + 14;
    *(unsigned char *)(a1 + 18) = v8[13] != 0;
    if (a4 < -13)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4F1D8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 95)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0_+");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    *(void *)(a2 + 29) = *(void *)(a1 + 40);
    *(void *)(a2 + 37) = *(void *)(a1 + 48);
    *(void *)(a2 + 45) = *(void *)(a1 + 56);
    *(void *)(a2 + 53) = *(void *)(a1 + 64);
    *(void *)(a2 + 61) = *(void *)(a1 + 72);
    *(void *)(a2 + 69) = *(void *)(a1 + 80);
    *(void *)(a2 + 77) = *(void *)(a1 + 88);
    *(_DWORD *)(a2 + 85) = *(_DWORD *)(a1 + 96);
    *(_DWORD *)(a2 + 89) = *(_DWORD *)(a1 + 100);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 93);
    *(_WORD *)(a2 + 93) = v6 | ((_WORD)v5 << 8);
    *a4 = 95;
  }
  return a3 > 94;
}

BOOL sub_100B4F2B8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 43, 95);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(void *)(a1 + 32) = *(void *)(v8 + 21);
    *(void *)(a1 + 40) = *(void *)(v8 + 29);
    *(void *)(a1 + 48) = *(void *)(v8 + 37);
    *(void *)(a1 + 56) = *(void *)(v8 + 45);
    *(void *)(a1 + 64) = *(void *)(v8 + 53);
    *(void *)(a1 + 72) = *(void *)(v8 + 61);
    *(void *)(a1 + 80) = *(void *)(v8 + 69);
    *(void *)(a1 + 88) = *(void *)(v8 + 77);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(v8 + 85);
    *(_DWORD *)(a1 + 100) = *(_DWORD *)(v8 + 89);
    uint64_t v9 = a4 + 93;
    if (a4 < -92)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4F3D8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 35)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0#,");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a2 + 17) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a2 + 21) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a2 + 25) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 29) = *(_DWORD *)(a1 + 36);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 33);
    *(_WORD *)(a2 + 33) = v6 | ((_WORD)v5 << 8);
    *a4 = 35;
  }
  return a3 > 34;
}

BOOL sub_100B4F488(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 44, 35);
  if (result)
  {
    uint64_t v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 13);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 + 17);
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(v8 + 21);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 25);
    uint64_t v9 = a4 + 33;
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 29);
    if (a4 < -32)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B4F578(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 33)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0!;");
    *(_DWORD *)(a2 + 5) = *(_DWORD *)(a1 + 20);
    *(unsigned char *)(a2 + 9) = *(unsigned char *)(a1 + 24);
    *(unsigned char *)(a2 + 10) = *(unsigned char *)(a1 + 25);
    *(unsigned char *)(a2 + 11) = *(unsigned char *)(a1 + 26);
    *(unsigned char *)(a2 + 12) = *(unsigned char *)(a1 + 27);
    *(unsigned char *)(a2 + 13) = *(unsigned char *)(a1 + 29);
    *(unsigned char *)(a2 + 14) = *(unsigned char *)(a1 + 30);
    *(unsigned char *)(a2 + 15) = *(unsigned char *)(a1 + 31);
    *(void *)(a2 + 16) = *(void *)(a1 + 32);
    *(unsigned char *)(a2 + 24) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a2 + 25) = *(unsigned char *)(a1 + 41);
    *(unsigned char *)(a2 + 26) = *(unsigned char *)(a1 + 42);
    *(unsigned char *)(a2 + 27) = *(unsigned char *)(a1 + 43);
    *(unsigned char *)(a2 + 28) = *(unsigned char *)(a1 + 44);
    *(unsigned char *)(a2 + 29) = *(unsigned char *)(a1 + 45);
    *(unsigned char *)(a2 + 30) = *(unsigned char *)(a1 + 28);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 31);
    *(_WORD *)(a2 + 31) = v6 | ((_WORD)v5 << 8);
    *a4 = 33;
  }
  return a3 > 32;
}

BOOL sub_100B4F678(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL v8 = sub_100B4AD74(a1, a2, a3, a4, 59, 32);
  BOOL v9 = v8;
  BOOL result = sub_100B4AD74(v8, a2, a3, a4, 59, 33);
  if (!v9 && !result) {
    return result;
  }
  uint64_t v11 = a2 + a4;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(v11 + 5);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(v11 + 9) != 0;
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(v11 + 10) != 0;
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(v11 + 11) != 0;
  *(unsigned char *)(a1 + 27) = *(unsigned char *)(v11 + 12) != 0;
  *(unsigned char *)(a1 + 29) = *(unsigned char *)(v11 + 13) != 0;
  *(unsigned char *)(a1 + 30) = *(unsigned char *)(v11 + 14) != 0;
  *(unsigned char *)(a1 + 31) = *(unsigned char *)(v11 + 15) != 0;
  *(void *)(a1 + 32) = *(void *)(v11 + 16);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(v11 + 24);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(v11 + 25) != 0;
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(v11 + 26);
  *(unsigned char *)(a1 + 43) = *(unsigned char *)(v11 + 27) != 0;
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(v11 + 28) != 0;
  int v12 = *(unsigned __int8 *)(v11 + 29);
  uint64_t v13 = a4 + 30;
  *(unsigned char *)(a1 + 45) = v12 != 0;
  if (result)
  {
    int v14 = *(unsigned __int8 *)(a2 + v13);
    LODWORD(v13) = a4 + 31;
    *(unsigned char *)(a1 + 28) = v14 != 0;
  }
  if ((int)v13 < 1)
  {
    int v20 = 0;
  }
  else
  {
    unsigned int v15 = 0;
    unsigned int v16 = 0;
    uint64_t v17 = (unsigned __int8 *)(a2 + a4);
    uint64_t v18 = v13;
    do
    {
      int v19 = *v17++;
      unsigned int v16 = (v16 + v19) % 0xFF;
      unsigned int v15 = (v16 + v15) % 0xFF;
      --v18;
    }
    while (v18);
    int v20 = (unsigned __int16)v16 | ((unsigned __int16)v15 << 8);
  }
  int v21 = *(unsigned __int16 *)(a2 + (int)v13);
  *(_WORD *)(a1 + 16) = v21;
  int v22 = v13 + 2;
  if (v9)
  {
    int v23 = v22 - a4;
    if (v22 - a4 != 32)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022E7970);
      }
      int v25 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 67240448;
        int v31 = v23;
        __int16 v32 = 1026;
        int v33 = 32;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
      }
      BOOL v26 = sub_10013D1A0(115, 0);
      BOOL result = 0;
      if (!v26) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419530 == -1)
      {
LABEL_29:
        float v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLBinaryLogTypes::FallConfig::decode(const uint8_t *, const int, const int)", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
        return 0;
      }
LABEL_32:
      dispatch_once(&qword_102419530, &stru_1022E7970);
      goto LABEL_29;
    }
  }
  if (!result) {
    return v21 == v20;
  }
  int v24 = v22 - a4;
  if (v22 - a4 == 33) {
    return v21 == v20;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022E7970);
  }
  int v27 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 67240448;
    int v31 = v24;
    __int16 v32 = 1026;
    int v33 = 33;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
  }
  BOOL v28 = sub_10013D1A0(115, 0);
  BOOL result = 0;
  if (v28)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 == -1) {
      goto LABEL_29;
    }
    goto LABEL_32;
  }
  return result;
}

BOOL sub_100B4FB34(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 209)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 768684096;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(unsigned char *)(a2 + 21) = *(unsigned char *)(a1 + 32);
    *(_WORD *)(a2 + 22) = *(_WORD *)(a1 + 34);
    *(void *)(a2 + 24) = *(void *)(a1 + 40);
    *(void *)(a2 + 32) = *(void *)(a1 + 48);
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a2 + 44) = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 84);
    *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a2 + 76) = *(_DWORD *)(a1 + 92);
    *(_DWORD *)(a2 + 80) = *(_DWORD *)(a1 + 96);
    *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 100);
    *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 104);
    *(_DWORD *)(a2 + 92) = *(_DWORD *)(a1 + 108);
    *(void *)(a2 + 96) = *(void *)(a1 + 112);
    *(_DWORD *)(a2 + 104) = *(_DWORD *)(a1 + 120);
    *(_DWORD *)(a2 + 108) = *(_DWORD *)(a1 + 124);
    *(_DWORD *)(a2 + 112) = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a2 + 116) = *(_DWORD *)(a1 + 132);
    *(_DWORD *)(a2 + 120) = *(_DWORD *)(a1 + 136);
    *(_DWORD *)(a2 + 124) = *(_DWORD *)(a1 + 140);
    *(_DWORD *)(a2 + 128) = *(_DWORD *)(a1 + 144);
    *(_DWORD *)(a2 + 132) = *(_DWORD *)(a1 + 148);
    *(unsigned char *)(a2 + 136) = *(unsigned char *)(a1 + 152);
    *(unsigned char *)(a2 + 137) = *(unsigned char *)(a1 + 153);
    *(unsigned char *)(a2 + 138) = *(unsigned char *)(a1 + 154);
    *(unsigned char *)(a2 + 139) = *(unsigned char *)(a1 + 155);
    *(unsigned char *)(a2 + 140) = *(unsigned char *)(a1 + 156);
    *(_DWORD *)(a2 + 141) = *(_DWORD *)(a1 + 160);
    *(_DWORD *)(a2 + 145) = *(_DWORD *)(a1 + 164);
    *(_DWORD *)(a2 + 149) = *(_DWORD *)(a1 + 168);
    *(_DWORD *)(a2 + 153) = *(_DWORD *)(a1 + 172);
    *(_DWORD *)(a2 + 157) = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a2 + 161) = *(_DWORD *)(a1 + 180);
    *(_DWORD *)(a2 + 165) = *(_DWORD *)(a1 + 184);
    *(unsigned char *)(a2 + 169) = *(unsigned char *)(a1 + 188);
    *(_DWORD *)(a2 + 170) = *(_DWORD *)(a1 + 192);
    *(_DWORD *)(a2 + 174) = *(_DWORD *)(a1 + 196);
    *(_DWORD *)(a2 + 178) = *(_DWORD *)(a1 + 200);
    *(_DWORD *)(a2 + 182) = *(_DWORD *)(a1 + 204);
    *(_DWORD *)(a2 + 186) = *(_DWORD *)(a1 + 208);
    *(unsigned char *)(a2 + 190) = *(unsigned char *)(a1 + 212);
    *(_DWORD *)(a2 + 191) = *(_DWORD *)(a1 + 216);
    *(_DWORD *)(a2 + 195) = *(_DWORD *)(a1 + 220);
    *(_DWORD *)(a2 + 199) = *(_DWORD *)(a1 + 224);
    *(_DWORD *)(a2 + 203) = *(_DWORD *)(a1 + 228);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 207);
    *(_WORD *)(a2 + 207) = v6 | ((_WORD)v5 << 8);
    *a4 = 209;
  }
  return a3 > 208;
}

BOOL sub_100B4FD54(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL v8 = sub_100B4AD74(a1, a2, a3, a4, 45, 98);
  BOOL v75 = v8;
  BOOL v9 = sub_100B4AD74(v8, a2, a3, a4, 45, 143);
  BOOL v74 = v9;
  BOOL v10 = sub_100B4AD74(v9, a2, a3, a4, 45, 151);
  BOOL v73 = v10;
  BOOL v11 = sub_100B4AD74(v10, a2, a3, a4, 45, 159);
  BOOL v72 = v11;
  BOOL v12 = sub_100B4AD74(v11, a2, a3, a4, 45, 171);
  BOOL v13 = v12;
  BOOL v14 = sub_100B4AD74(v12, a2, a3, a4, 45, 172);
  BOOL v15 = v14;
  BOOL v16 = sub_100B4AD74(v14, a2, a3, a4, 45, 188);
  BOOL v17 = sub_100B4AD74(v16, a2, a3, a4, 45, 192);
  BOOL v18 = sub_100B4AD74(v17, a2, a3, a4, 45, 193);
  BOOL v19 = sub_100B4AD74(v18, a2, a3, a4, 45, 201);
  BOOL result = sub_100B4AD74(v19, a2, a3, a4, 45, 209);
  if (!v75 && !v74 && !v73 && !v72 && !v13 && !v15 && !v16 && !v17 && !v18 && !v19 && !result) {
    return result;
  }
  uint64_t v21 = a2 + a4;
  *(void *)(a1 + 8) = *(void *)(v21 + 5);
  *(void *)(a1 + 24) = *(void *)(v21 + 13);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(v21 + 21);
  *(_WORD *)(a1 + 34) = *(_WORD *)(v21 + 22);
  *(void *)(a1 + 40) = *(void *)(v21 + 24);
  *(void *)(a1 + 48) = *(void *)(v21 + 32);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(v21 + 40);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(v21 + 44);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v21 + 48);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(v21 + 52);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(v21 + 56);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(v21 + 60);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(v21 + 64);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(v21 + 68);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(v21 + 72);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(v21 + 76);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(v21 + 80);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(v21 + 84);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(v21 + 88);
  uint64_t v22 = a4 + 96;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(v21 + 92);
  if (v74 || v73 || v72 || v13 || v15 || v16 || v17 || v18 || v19 || result)
  {
    *(void *)(a1 + 112) = *(void *)(v22 + a2);
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(v21 + 104);
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(v21 + 108);
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(v21 + 112);
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(v21 + 116);
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(v21 + 120);
    *(_DWORD *)(a1 + 140) = *(_DWORD *)(v21 + 124);
    *(_DWORD *)(a1 + 144) = *(_DWORD *)(v21 + 128);
    *(_DWORD *)(a1 + 148) = *(_DWORD *)(v21 + 132);
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a4 + a2 + 136);
    *(unsigned char *)(a1 + 153) = *(unsigned char *)(a4 + a2 + 137);
    *(unsigned char *)(a1 + 154) = *(unsigned char *)(a4 + a2 + 138);
    *(unsigned char *)(a1 + 155) = *(unsigned char *)(a4 + a2 + 139);
    LODWORD(v22) = a4 + 141;
    *(unsigned char *)(a1 + 156) = *(unsigned char *)(a4 + a2 + 140);
  }
  if (v73 || v72 || v13 || v15 || v16 || v17 || v18 || v19 || result)
  {
    int v23 = (_DWORD *)(a2 + (int)v22);
    *(_DWORD *)(a1 + 160) = *v23;
    LODWORD(v22) = v22 + 8;
    *(_DWORD *)(a1 + 164) = v23[1];
  }
  if (v72 || v13 || v15 || v16 || v17 || v18 || v19 || result)
  {
    int v24 = (_DWORD *)(a2 + (int)v22);
    *(_DWORD *)(a1 + 168) = *v24;
    LODWORD(v22) = v22 + 8;
    *(_DWORD *)(a1 + 172) = v24[1];
  }
  if (v13 || v15 || v16 || v17 || v18 || v19 || result)
  {
    int v25 = (_DWORD *)(a2 + (int)v22);
    *(_DWORD *)(a1 + 176) = *v25;
    *(_DWORD *)(a1 + 180) = v25[1];
    LODWORD(v22) = v22 + 12;
    *(_DWORD *)(a1 + 184) = v25[2];
  }
  if (v15 || v16 || v17 || v18 || v19 || result)
  {
    *(unsigned char *)(a1 + 188) = *(unsigned char *)(a2 + (int)v22);
    LODWORD(v22) = v22 + 1;
  }
  if (v16 || v17 || v18 || v19 || result)
  {
    BOOL v26 = (_DWORD *)(a2 + (int)v22);
    *(_DWORD *)(a1 + 192) = *v26;
    *(_DWORD *)(a1 + 196) = v26[1];
    *(_DWORD *)(a1 + 200) = v26[2];
    LODWORD(v22) = v22 + 16;
    *(_DWORD *)(a1 + 204) = v26[3];
  }
  if (v17 || v18 || v19 || result)
  {
    int v27 = *(_DWORD *)(a2 + (int)v22);
    LODWORD(v22) = v22 + 4;
    *(_DWORD *)(a1 + 208) = v27;
  }
  if (v18 || v19 || result)
  {
    *(unsigned char *)(a1 + 212) = *(unsigned char *)(a2 + (int)v22);
    LODWORD(v22) = v22 + 1;
  }
  if (v19 || result)
  {
    BOOL v28 = (_DWORD *)(a2 + (int)v22);
    *(_DWORD *)(a1 + 216) = *v28;
    LODWORD(v22) = v22 + 8;
    *(_DWORD *)(a1 + 220) = v28[1];
  }
  if (result)
  {
    float v29 = (_DWORD *)(a2 + (int)v22);
    *(_DWORD *)(a1 + 224) = *v29;
    LODWORD(v22) = v22 + 8;
    *(_DWORD *)(a1 + 228) = v29[1];
  }
  if ((int)v22 < 1)
  {
    int v35 = 0;
  }
  else
  {
    unsigned int v30 = 0;
    unsigned int v31 = 0;
    __int16 v32 = (unsigned __int8 *)(a2 + a4);
    uint64_t v33 = v22;
    do
    {
      int v34 = *v32++;
      unsigned int v31 = (v31 + v34) % 0xFF;
      unsigned int v30 = (v31 + v30) % 0xFF;
      --v33;
    }
    while (v33);
    int v35 = (unsigned __int16)v31 | ((unsigned __int16)v30 << 8);
  }
  int v36 = *(unsigned __int16 *)(a2 + (int)v22);
  *(_WORD *)(a1 + 16) = v36;
  int v37 = v22 + 2;
  if (v75 && (int v38 = v37 - a4, v37 - a4 != 98))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022E7970);
    }
    __int16 v49 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 67240448;
      int v77 = v38;
      __int16 v78 = 1026;
      int v79 = 98;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
    }
    BOOL v50 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v50)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 == -1) {
        goto LABEL_137;
      }
      goto LABEL_140;
    }
  }
  else if (v74 && (int v39 = v37 - a4, v37 - a4 != 143))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022E7970);
    }
    __int16 v51 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 67240448;
      int v77 = v39;
      __int16 v78 = 1026;
      int v79 = 143;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
    }
    BOOL v52 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v52)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 == -1) {
        goto LABEL_137;
      }
      goto LABEL_140;
    }
  }
  else if (v73 && (int v40 = v37 - a4, v37 - a4 != 151))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022E7970);
    }
    __int16 v53 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 67240448;
      int v77 = v40;
      __int16 v78 = 1026;
      int v79 = 151;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
    }
    BOOL v54 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v54)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 == -1) {
        goto LABEL_137;
      }
      goto LABEL_140;
    }
  }
  else if (v72 && (int v41 = v37 - a4, v37 - a4 != 159))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022E7970);
    }
    __int16 v55 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 67240448;
      int v77 = v41;
      __int16 v78 = 1026;
      int v79 = 159;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
    }
    BOOL v56 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v56)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 == -1) {
        goto LABEL_137;
      }
      goto LABEL_140;
    }
  }
  else if (v13 && (int v42 = v37 - a4, v37 - a4 != 171))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022E7970);
    }
    __int16 v57 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 67240448;
      int v77 = v42;
      __int16 v78 = 1026;
      int v79 = 171;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
    }
    BOOL v58 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v58)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 == -1) {
        goto LABEL_137;
      }
      goto LABEL_140;
    }
  }
  else if (v15 && (int v43 = v37 - a4, v37 - a4 != 172))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022E7970);
    }
    int v59 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 67240448;
      int v77 = v43;
      __int16 v78 = 1026;
      int v79 = 172;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
    }
    BOOL v60 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v60)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 == -1) {
        goto LABEL_137;
      }
      goto LABEL_140;
    }
  }
  else if (v16 && (int v44 = v37 - a4, v37 - a4 != 188))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022E7970);
    }
    int v61 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 67240448;
      int v77 = v44;
      __int16 v78 = 1026;
      int v79 = 188;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
    }
    BOOL v62 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v62)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 == -1) {
        goto LABEL_137;
      }
      goto LABEL_140;
    }
  }
  else if (v17 && (int v45 = v37 - a4, v37 - a4 != 192))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022E7970);
    }
    double v63 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 67240448;
      int v77 = v45;
      __int16 v78 = 1026;
      int v79 = 192;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
    }
    BOOL v64 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v64)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 == -1) {
        goto LABEL_137;
      }
      goto LABEL_140;
    }
  }
  else if (v18 && (int v46 = v37 - a4, v37 - a4 != 193))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022E7970);
    }
    float v65 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 67240448;
      int v77 = v46;
      __int16 v78 = 1026;
      int v79 = 193;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
    }
    BOOL v66 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v66)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 == -1) {
        goto LABEL_137;
      }
      goto LABEL_140;
    }
  }
  else if (v19 && (int v47 = v37 - a4, v37 - a4 != 201))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022E7970);
    }
    long long v67 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 67240448;
      int v77 = v47;
      __int16 v78 = 1026;
      int v79 = 201;
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
    }
    BOOL v68 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v68)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 == -1) {
        goto LABEL_137;
      }
      goto LABEL_140;
    }
  }
  else
  {
    if (!result) {
      return v36 == v35;
    }
    int v48 = v37 - a4;
    if (v37 - a4 == 209) {
      return v36 == v35;
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022E7970);
    }
    BOOL v69 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 67240448;
      int v77 = v48;
      __int16 v78 = 1026;
      int v79 = 209;
      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
    }
    BOOL v70 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v70)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 == -1)
      {
LABEL_137:
        BOOL v71 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLBinaryLogTypes::FallStats::decode(const uint8_t *, const int, const int)", "%s\n", v71);
        if (v71 != (char *)buf) {
          free(v71);
        }
        return 0;
      }
LABEL_140:
      dispatch_once(&qword_102419530, &stru_1022E7970);
      goto LABEL_137;
    }
  }
  return result;
}

BOOL sub_100B50F88(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 53)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@056");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 40);
    *(void *)(a2 + 29) = *(void *)(a1 + 48);
    *(unsigned char *)(a2 + 37) = *(unsigned char *)(a1 + 56);
    *(unsigned char *)(a2 + 38) = *(unsigned char *)(a1 + 57);
    *(unsigned char *)(a2 + 39) = *(unsigned char *)(a1 + 58);
    *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 59);
    *(void *)(a2 + 41) = *(void *)(a1 + 64);
    *(unsigned char *)(a2 + 49) = *(unsigned char *)(a1 + 72);
    *(unsigned char *)(a2 + 50) = *(unsigned char *)(a1 + 73);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 51);
    *(_WORD *)(a2 + 51) = v6 | ((_WORD)v5 << 8);
    *a4 = 53;
  }
  return a3 > 52;
}

BOOL sub_100B51060(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL v8 = sub_100B4AD74(a1, a2, a3, a4, 54, 43);
  BOOL v9 = v8;
  BOOL v10 = sub_100B4AD74(v8, a2, a3, a4, 54, 52);
  BOOL v11 = v10;
  BOOL result = sub_100B4AD74(v10, a2, a3, a4, 54, 53);
  if (!v9 && !v11 && !result) {
    return result;
  }
  uint64_t v13 = a2 + a4;
  *(void *)(a1 + 8) = *(void *)(v13 + 5);
  *(void *)(a1 + 24) = *(void *)(v13 + 13);
  *(void *)(a1 + 40) = *(void *)(v13 + 21);
  *(void *)(a1 + 48) = *(void *)(v13 + 29);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(v13 + 37);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(v13 + 38);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(v13 + 39);
  *(unsigned char *)(a1 + 59) = *(unsigned char *)(v13 + 40);
  uint64_t v14 = a4 + 41;
  if (v11 || result)
  {
    *(void *)(a1 + 64) = *(void *)(v14 + a2);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a4 + a2 + 49);
    LODWORD(v14) = a4 + 50;
  }
  if (result)
  {
    int v15 = *(unsigned __int8 *)(a2 + (int)v14);
    LODWORD(v14) = v14 + 1;
    *(unsigned char *)(a1 + 73) = v15 != 0;
  }
  if ((int)v14 < 1)
  {
    int v21 = 0;
  }
  else
  {
    unsigned int v16 = 0;
    unsigned int v17 = 0;
    BOOL v18 = (unsigned __int8 *)(a2 + a4);
    uint64_t v19 = v14;
    do
    {
      int v20 = *v18++;
      unsigned int v17 = (v17 + v20) % 0xFF;
      unsigned int v16 = (v17 + v16) % 0xFF;
      --v19;
    }
    while (v19);
    int v21 = (unsigned __int16)v17 | ((unsigned __int16)v16 << 8);
  }
  int v22 = *(unsigned __int16 *)(a2 + (int)v14);
  *(_WORD *)(a1 + 16) = v22;
  int v23 = v14 + 2;
  if (v9)
  {
    int v24 = v23 - a4;
    if (v23 - a4 != 43)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022E7970);
      }
      int v27 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 67240448;
        int v35 = v24;
        __int16 v36 = 1026;
        int v37 = 43;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
      }
      BOOL v28 = sub_10013D1A0(115, 0);
      BOOL result = 0;
      if (!v28) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        goto LABEL_44;
      }
      goto LABEL_41;
    }
  }
  if (v11)
  {
    int v25 = v23 - a4;
    if (v23 - a4 != 52)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022E7970);
      }
      float v29 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 67240448;
        int v35 = v25;
        __int16 v36 = 1026;
        int v37 = 52;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
      }
      BOOL v30 = sub_10013D1A0(115, 0);
      BOOL result = 0;
      if (!v30) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        goto LABEL_44;
      }
LABEL_41:
      uint64_t v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLBinaryLogTypes::FallState::decode(const uint8_t *, const int, const int)", "%s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
      return 0;
    }
  }
  if (!result) {
    return v22 == v21;
  }
  int v26 = v23 - a4;
  if (v23 - a4 == 53) {
    return v22 == v21;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022E7970);
  }
  unsigned int v31 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 67240448;
    int v35 = v26;
    __int16 v36 = 1026;
    int v37 = 53;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
  }
  BOOL v32 = sub_10013D1A0(115, 0);
  BOOL result = 0;
  if (v32)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 == -1) {
      goto LABEL_41;
    }
LABEL_44:
    dispatch_once(&qword_102419530, &stru_1022E7970);
    goto LABEL_41;
  }
  return result;
}

BOOL sub_100B515FC(void *a1, uint64_t a2, int a3, _DWORD *a4)
{
  return sub_100B51604(a1, a2, a3, a4, 58);
}

BOOL sub_100B51604(void *a1, uint64_t a2, int a3, _DWORD *a4, char a5)
{
  if (a3 >= 43)
  {
    uint64_t v5 = 0;
    *(_WORD *)a2 = 12352;
    *(unsigned char *)(a2 + 2) = 43;
    *(unsigned char *)(a2 + 3) = a5;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = a1[1];
    *(void *)(a2 + 13) = a1[3];
    *(void *)(a2 + 21) = a1[4];
    do
    {
      *(_DWORD *)(a2 + 29 + v5) = *(_DWORD *)((char *)a1 + v5 + 40);
      v5 += 4;
    }
    while (v5 != 12);
    uint64_t v6 = 0;
    unsigned int v7 = 0;
    unsigned int v8 = 0;
    do
    {
      unsigned int v8 = (v8 + *(unsigned __int8 *)(a2 + v6)) % 0xFF;
      unsigned int v7 = (v8 + v7) % 0xFF;
      ++v6;
    }
    while (v6 != 41);
    *(_WORD *)(a2 + 41) = v8 | ((_WORD)v7 << 8);
    *a4 = 43;
  }
  return a3 > 42;
}

BOOL sub_100B516C4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return sub_100B516CC(a1, a2, a3, a4, 58);
}

BOOL sub_100B516CC(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, a5, 43);
  if (result)
  {
    uint64_t v9 = 0;
    BOOL v10 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v10 + 5);
    *(void *)(a1 + 24) = *(void *)(v10 + 13);
    *(void *)(a1 + 32) = *(void *)(v10 + 21);
    uint64_t v11 = (a4 + 29);
    uint64_t v12 = a2 + (int)v11;
    uint64_t v13 = v11 << 32;
    do
    {
      *(_DWORD *)(a1 + 40 + v9) = *(_DWORD *)(v12 + v9);
      v9 += 4;
      v13 += 0x400000000;
    }
    while (v9 != 12);
    if (a4 + 37 < -3)
    {
      int v18 = 0;
    }
    else
    {
      unsigned int v14 = 0;
      unsigned int v15 = 0;
      uint64_t v16 = (a4 + 41);
      do
      {
        int v17 = *v10++;
        unsigned int v15 = (v15 + v17) % 0xFF;
        unsigned int v14 = (v15 + v14) % 0xFF;
        --v16;
      }
      while (v16);
      int v18 = (unsigned __int16)v15 | ((unsigned __int16)v14 << 8);
    }
    int v19 = *(unsigned __int16 *)((v13 >> 32) + a2);
    *(_WORD *)(a1 + 16) = v19;
    return v19 == v18;
  }
  return result;
}

BOOL sub_100B519A0(void *a1, uint64_t a2, int a3, _DWORD *a4)
{
  return sub_100B51604(a1, a2, a3, a4, 57);
}

BOOL sub_100B519A8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return sub_100B516CC(a1, a2, a3, a4, 57);
}

BOOL sub_100B519B0(void *a1, uint64_t a2, int a3, _DWORD *a4)
{
  return sub_100B519B8(a1, a2, a3, a4, 60);
}

BOOL sub_100B519B8(void *a1, uint64_t a2, int a3, _DWORD *a4, char a5)
{
  if (a3 >= 47)
  {
    uint64_t v5 = 0;
    *(_WORD *)a2 = 12352;
    *(unsigned char *)(a2 + 2) = 47;
    *(unsigned char *)(a2 + 3) = a5;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = a1[1];
    *(void *)(a2 + 13) = a1[3];
    *(void *)(a2 + 21) = a1[4];
    do
    {
      *(_DWORD *)(a2 + 29 + v5) = *(_DWORD *)((char *)a1 + v5 + 40);
      v5 += 4;
    }
    while (v5 != 16);
    uint64_t v6 = 0;
    unsigned int v7 = 0;
    unsigned int v8 = 0;
    do
    {
      unsigned int v8 = (v8 + *(unsigned __int8 *)(a2 + v6)) % 0xFF;
      unsigned int v7 = (v8 + v7) % 0xFF;
      ++v6;
    }
    while (v6 != 45);
    *(_WORD *)(a2 + 45) = v8 | ((_WORD)v7 << 8);
    *a4 = 47;
  }
  return a3 > 46;
}

BOOL sub_100B51A78(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return sub_100B51A80(a1, a2, a3, a4, 60);
}

BOOL sub_100B51A80(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, a5, 47);
  if (result)
  {
    uint64_t v9 = 0;
    BOOL v10 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v10 + 5);
    *(void *)(a1 + 24) = *(void *)(v10 + 13);
    *(void *)(a1 + 32) = *(void *)(v10 + 21);
    uint64_t v11 = (a4 + 29);
    uint64_t v12 = a2 + (int)v11;
    uint64_t v13 = v11 << 32;
    do
    {
      *(_DWORD *)(a1 + 40 + v9) = *(_DWORD *)(v12 + v9);
      v9 += 4;
      v13 += 0x400000000;
    }
    while (v9 != 16);
    if (a4 + 41 < -3)
    {
      int v18 = 0;
    }
    else
    {
      unsigned int v14 = 0;
      unsigned int v15 = 0;
      uint64_t v16 = (a4 + 45);
      do
      {
        int v17 = *v10++;
        unsigned int v15 = (v15 + v17) % 0xFF;
        unsigned int v14 = (v15 + v14) % 0xFF;
        --v16;
      }
      while (v16);
      int v18 = (unsigned __int16)v15 | ((unsigned __int16)v14 << 8);
    }
    int v19 = *(unsigned __int16 *)((v13 >> 32) + a2);
    *(_WORD *)(a1 + 16) = v19;
    return v19 == v18;
  }
  return result;
}

BOOL sub_100B51D54(void *a1, uint64_t a2, int a3, _DWORD *a4)
{
  return sub_100B51604(a1, a2, a3, a4, 123);
}

BOOL sub_100B51D5C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return sub_100B516CC(a1, a2, a3, a4, 123);
}

BOOL sub_100B51D64(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 86)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0V>");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    *(void *)(a2 + 29) = *(void *)(a1 + 40);
    *(void *)(a2 + 37) = *(void *)(a1 + 48);
    *(_WORD *)(a2 + 45) = *(_WORD *)(a1 + 56);
    *(_DWORD *)(a2 + 47) = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a2 + 51) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a2 + 55) = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a2 + 59) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a2 + 63) = *(_DWORD *)(a1 + 76);
    *(unsigned char *)(a2 + 67) = *(unsigned char *)(a1 + 81);
    *(void *)(a2 + 68) = *(void *)(a1 + 88);
    *(void *)(a2 + 76) = *(void *)(a1 + 96);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 84);
    *(_WORD *)(a2 + 84) = v6 | ((_WORD)v5 << 8);
    *a4 = 86;
  }
  return a3 > 85;
}

BOOL sub_100B51E54(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL v8 = sub_100B4AD74(a1, a2, a3, a4, 62, 69);
  BOOL v9 = v8;
  BOOL v10 = sub_100B4AD74(v8, a2, a3, a4, 62, 70);
  BOOL v11 = v10;
  BOOL result = sub_100B4AD74(v10, a2, a3, a4, 62, 86);
  if (!v9 && !v11 && !result) {
    return result;
  }
  uint64_t v13 = a2 + a4;
  *(void *)(a1 + 8) = *(void *)(v13 + 5);
  *(void *)(a1 + 24) = *(void *)(v13 + 13);
  *(void *)(a1 + 32) = *(void *)(v13 + 21);
  *(void *)(a1 + 40) = *(void *)(v13 + 29);
  *(void *)(a1 + 48) = *(void *)(v13 + 37);
  *(_WORD *)(a1 + 56) = *(_WORD *)(v13 + 45);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(v13 + 47);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v13 + 51);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(v13 + 55);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(v13 + 59);
  uint64_t v14 = a4 + 67;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(v13 + 63);
  if (v9)
  {
    *(unsigned char *)(a1 + 80) = 1;
  }
  else if (v11)
  {
    *(unsigned char *)(a1 + 80) = 2;
    *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + v14);
    LODWORD(v14) = a4 + 68;
  }
  else if (result)
  {
    *(unsigned char *)(a1 + 80) = 3;
    *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + v14);
    *(void *)(a1 + 88) = *(void *)(v13 + 68);
    *(void *)(a1 + 96) = *(void *)(v13 + 76);
    LODWORD(v14) = a4 + 84;
  }
  if ((int)v14 < 1)
  {
    int v20 = 0;
  }
  else
  {
    unsigned int v15 = 0;
    unsigned int v16 = 0;
    int v17 = (unsigned __int8 *)(a2 + a4);
    uint64_t v18 = v14;
    do
    {
      int v19 = *v17++;
      unsigned int v16 = (v16 + v19) % 0xFF;
      unsigned int v15 = (v16 + v15) % 0xFF;
      --v18;
    }
    while (v18);
    int v20 = (unsigned __int16)v16 | ((unsigned __int16)v15 << 8);
  }
  int v21 = *(unsigned __int16 *)(a2 + (int)v14);
  *(_WORD *)(a1 + 16) = v21;
  int v22 = v14 + 2;
  if (v9)
  {
    int v23 = v22 - a4;
    if (v22 - a4 != 69)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022E7970);
      }
      int v26 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 67240448;
        int v34 = v23;
        __int16 v35 = 1026;
        int v36 = 69;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
      }
      BOOL v27 = sub_10013D1A0(115, 0);
      BOOL result = 0;
      if (!v27) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        goto LABEL_46;
      }
      goto LABEL_43;
    }
  }
  if (v11)
  {
    int v24 = v22 - a4;
    if (v22 - a4 != 70)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022E7970);
      }
      BOOL v28 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 67240448;
        int v34 = v24;
        __int16 v35 = 1026;
        int v36 = 70;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
      }
      BOOL v29 = sub_10013D1A0(115, 0);
      BOOL result = 0;
      if (!v29) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        goto LABEL_46;
      }
LABEL_43:
      BOOL v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLBinaryLogTypes::FallFalsePositiveSuppressionFeatures::decode(const uint8_t *, const int, const int)", "%s\n", v32);
      if (v32 != (char *)buf) {
        free(v32);
      }
      return 0;
    }
  }
  if (!result) {
    return v21 == v20;
  }
  int v25 = v22 - a4;
  if (v22 - a4 == 86) {
    return v21 == v20;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022E7970);
  }
  BOOL v30 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 67240448;
    int v34 = v25;
    __int16 v35 = 1026;
    int v36 = 86;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "i-index(%{public}d)!=kSize(%{public}d)", buf, 0xEu);
  }
  BOOL v31 = sub_10013D1A0(115, 0);
  BOOL result = 0;
  if (v31)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 == -1) {
      goto LABEL_43;
    }
LABEL_46:
    dispatch_once(&qword_102419530, &stru_1022E7970);
    goto LABEL_43;
  }
  return result;
}

BOOL sub_100B52420(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 27)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0\x1B.");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(unsigned char *)(a2 + 21) = *(unsigned char *)(a1 + 32);
    *(unsigned char *)(a2 + 22) = *(unsigned char *)(a1 + 33);
    *(unsigned char *)(a2 + 23) = *(unsigned char *)(a1 + 34);
    *(unsigned char *)(a2 + 24) = *(unsigned char *)(a1 + 35);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 25);
    *(_WORD *)(a2 + 25) = v6 | ((_WORD)v5 << 8);
    *a4 = 27;
  }
  return a3 > 26;
}

BOOL sub_100B524D0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 46, 27);
  if (result)
  {
    BOOL v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    __int16 v9 = *(_WORD *)(v8 + 21);
    *(unsigned char *)(a1 + 34) = v8[23];
    *(unsigned char *)(a1 + 35) = v8[24];
    uint64_t v10 = a4 + 25;
    *(_WORD *)(a1 + 32) = v9;
    if (a4 < -24)
    {
      int v15 = 0;
    }
    else
    {
      unsigned int v11 = 0;
      unsigned int v12 = 0;
      uint64_t v13 = v10;
      do
      {
        int v14 = *v8++;
        unsigned int v12 = (v12 + v14) % 0xFF;
        unsigned int v11 = (v12 + v11) % 0xFF;
        --v13;
      }
      while (v13);
      int v15 = (unsigned __int16)v12 | ((unsigned __int16)v11 << 8);
    }
    int v16 = *(unsigned __int16 *)(v10 + a2);
    *(_WORD *)(a1 + 16) = v16;
    return v16 == v15;
  }
  return result;
}

BOOL sub_100B525B8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 16)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 789590080;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(unsigned char *)(a2 + 13) = *(unsigned char *)(a1 + 18);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 14);
    *(_WORD *)(a2 + 14) = v6 | ((_WORD)v5 << 8);
    *a4 = 16;
  }
  return a3 > 15;
}

BOOL sub_100B52648(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 47, 16);
  if (result)
  {
    BOOL v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    uint64_t v9 = a4 + 14;
    *(unsigned char *)(a1 + 18) = v8[13] == 1;
    if (a4 < -13)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B52720(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 47)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@0/0");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(_DWORD *)(a2 + 13) = *(_DWORD *)(a1 + 20);
    *(void *)(a2 + 17) = *(void *)(a1 + 24);
    *(void *)(a2 + 25) = *(void *)(a1 + 32);
    *(_DWORD *)(a2 + 33) = *(_DWORD *)(a1 + 40);
    *(void *)(a2 + 37) = *(void *)(a1 + 48);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 45);
    *(_WORD *)(a2 + 45) = v6 | ((_WORD)v5 << 8);
    *a4 = 47;
  }
  return a3 > 46;
}

BOOL sub_100B527D0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 48, 47);
  if (result)
  {
    BOOL v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(v8 + 13);
    *(void *)(a1 + 24) = *(void *)(v8 + 17);
    *(void *)(a1 + 32) = *(void *)(v8 + 25);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 33);
    uint64_t v9 = a4 + 45;
    *(void *)(a1 + 48) = *(void *)(v8 + 37);
    if (a4 < -44)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B528C0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 17)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 823210048;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(unsigned char *)(a2 + 13) = *(unsigned char *)(a1 + 18);
    *(unsigned char *)(a2 + 14) = *(unsigned char *)(a1 + 19);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 15);
    *(_WORD *)(a2 + 15) = v6 | ((_WORD)v5 << 8);
    *a4 = 17;
  }
  return a3 > 16;
}

BOOL sub_100B52958(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 49, 17);
  if (result)
  {
    BOOL v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(unsigned char *)(a1 + 18) = v8[13];
    *(unsigned char *)(a1 + 19) = v8[14];
    uint64_t v9 = a4 + 15;
    if (a4 < -14)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B52A30(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 16)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 839921728;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(unsigned char *)(a2 + 13) = *(unsigned char *)(a1 + 18);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 14);
    *(_WORD *)(a2 + 14) = v6 | ((_WORD)v5 << 8);
    *a4 = 16;
  }
  return a3 > 15;
}

BOOL sub_100B52AC0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 50, 16);
  if (result)
  {
    BOOL v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    uint64_t v9 = a4 + 14;
    *(unsigned char *)(a1 + 18) = v8[13] == 1;
    if (a4 < -13)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B52B98(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 56)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    strcpy((char *)a2, "@083");
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    *(void *)(a2 + 29) = *(void *)(a1 + 40);
    *(void *)(a2 + 37) = *(void *)(a1 + 48);
    *(void *)(a2 + 45) = *(void *)(a1 + 56);
    *(unsigned char *)(a2 + 53) = *(unsigned char *)(a1 + 64);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 54);
    *(_WORD *)(a2 + 54) = v6 | ((_WORD)v5 << 8);
    *a4 = 56;
  }
  return a3 > 55;
}

BOOL sub_100B52C50(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 51, 56);
  if (result)
  {
    BOOL v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(void *)(a1 + 32) = *(void *)(v8 + 21);
    *(void *)(a1 + 40) = *(void *)(v8 + 29);
    *(void *)(a1 + 48) = *(void *)(v8 + 37);
    *(void *)(a1 + 56) = *(void *)(v8 + 45);
    *(unsigned char *)(a1 + 64) = v8[53];
    uint64_t v9 = a4 + 54;
    if (a4 < -53)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B52D48(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 127)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 880750656;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    *(void *)(a2 + 29) = *(void *)(a1 + 40);
    *(void *)(a2 + 37) = *(void *)(a1 + 48);
    *(void *)(a2 + 45) = *(void *)(a1 + 56);
    *(void *)(a2 + 53) = *(void *)(a1 + 64);
    *(void *)(a2 + 61) = *(void *)(a1 + 72);
    *(void *)(a2 + 69) = *(void *)(a1 + 80);
    *(void *)(a2 + 77) = *(void *)(a1 + 88);
    *(_DWORD *)(a2 + 85) = *(_DWORD *)(a1 + 96);
    *(_DWORD *)(a2 + 89) = *(_DWORD *)(a1 + 100);
    *(void *)(a2 + 93) = *(void *)(a1 + 104);
    *(void *)(a2 + 101) = *(void *)(a1 + 112);
    *(void *)(a2 + 109) = *(void *)(a1 + 120);
    *(void *)(a2 + 117) = *(void *)(a1 + 128);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 125);
    *(_WORD *)(a2 + 125) = v6 | ((_WORD)v5 << 8);
    *a4 = 127;
  }
  return a3 > 126;
}

BOOL sub_100B52E48(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 52, 127);
  if (result)
  {
    BOOL v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(void *)(a1 + 32) = *(void *)(v8 + 21);
    *(void *)(a1 + 40) = *(void *)(v8 + 29);
    *(void *)(a1 + 48) = *(void *)(v8 + 37);
    *(void *)(a1 + 56) = *(void *)(v8 + 45);
    *(void *)(a1 + 64) = *(void *)(v8 + 53);
    *(void *)(a1 + 72) = *(void *)(v8 + 61);
    *(void *)(a1 + 80) = *(void *)(v8 + 69);
    *(void *)(a1 + 88) = *(void *)(v8 + 77);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(v8 + 85);
    *(_DWORD *)(a1 + 100) = *(_DWORD *)(v8 + 89);
    *(void *)(a1 + 104) = *(void *)(v8 + 93);
    *(void *)(a1 + 112) = *(void *)(v8 + 101);
    *(void *)(a1 + 120) = *(void *)(v8 + 109);
    uint64_t v9 = a4 + 125;
    *(void *)(a1 + 128) = *(void *)(v8 + 117);
    if (a4 < -124)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

BOOL sub_100B52F88(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 143)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    *(_DWORD *)a2 = 1066348608;
    *(unsigned char *)(a2 + 4) = 0;
    *(void *)(a2 + 5) = *(void *)(a1 + 8);
    *(void *)(a2 + 13) = *(void *)(a1 + 24);
    *(void *)(a2 + 21) = *(void *)(a1 + 32);
    *(void *)(a2 + 29) = *(void *)(a1 + 40);
    *(void *)(a2 + 37) = *(void *)(a1 + 48);
    *(void *)(a2 + 45) = *(void *)(a1 + 56);
    *(void *)(a2 + 53) = *(void *)(a1 + 64);
    *(void *)(a2 + 61) = *(void *)(a1 + 72);
    *(void *)(a2 + 69) = *(void *)(a1 + 80);
    *(void *)(a2 + 77) = *(void *)(a1 + 88);
    *(_DWORD *)(a2 + 85) = *(_DWORD *)(a1 + 96);
    *(_DWORD *)(a2 + 89) = *(_DWORD *)(a1 + 100);
    *(void *)(a2 + 93) = *(void *)(a1 + 104);
    *(void *)(a2 + 101) = *(void *)(a1 + 112);
    *(void *)(a2 + 109) = *(void *)(a1 + 120);
    *(void *)(a2 + 117) = *(void *)(a1 + 128);
    *(void *)(a2 + 125) = *(void *)(a1 + 136);
    *(void *)(a2 + 133) = *(void *)(a1 + 144);
    do
    {
      unsigned int v6 = (v6 + *(unsigned __int8 *)(a2 + v4)) % 0xFF;
      unsigned int v5 = (v6 + v5) % 0xFF;
      ++v4;
    }
    while (v4 != 141);
    *(_WORD *)(a2 + 141) = v6 | ((_WORD)v5 << 8);
    *a4 = 143;
  }
  return a3 > 142;
}

BOOL sub_100B53098(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = sub_100B4AD74(a1, a2, a3, a4, 63, 143);
  if (result)
  {
    BOOL v8 = (unsigned __int8 *)(a2 + a4);
    *(void *)(a1 + 8) = *(void *)(v8 + 5);
    *(void *)(a1 + 24) = *(void *)(v8 + 13);
    *(void *)(a1 + 32) = *(void *)(v8 + 21);
    *(void *)(a1 + 40) = *(void *)(v8 + 29);
    *(void *)(a1 + 48) = *(void *)(v8 + 37);
    *(void *)(a1 + 56) = *(void *)(v8 + 45);
    *(void *)(a1 + 64) = *(void *)(v8 + 53);
    *(void *)(a1 + 72) = *(void *)(v8 + 61);
    *(void *)(a1 + 80) = *(void *)(v8 + 69);
    *(void *)(a1 + 88) = *(void *)(v8 + 77);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(v8 + 85);
    *(_DWORD *)(a1 + 100) = *(_DWORD *)(v8 + 89);
    *(void *)(a1 + 104) = *(void *)(v8 + 93);
    *(void *)(a1 + 112) = *(void *)(v8 + 101);
    *(void *)(a1 + 120) = *(void *)(v8 + 109);
    *(void *)(a1 + 128) = *(void *)(v8 + 117);
    *(void *)(a1 + 136) = *(void *)(v8 + 125);
    uint64_t v9 = a4 + 141;
    *(void *)(a1 + 144) = *(void *)(v8 + 133);
    if (a4 < -140)
    {
      int v14 = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = v9;
      do
      {
        int v13 = *v8++;
        unsigned int v11 = (v11 + v13) % 0xFF;
        unsigned int v10 = (v11 + v10) % 0xFF;
        --v12;
      }
      while (v12);
      int v14 = (unsigned __int16)v11 | ((unsigned __int16)v10 << 8);
    }
    int v15 = *(unsigned __int16 *)(v9 + a2);
    *(_WORD *)(a1 + 16) = v15;
    return v15 == v14;
  }
  return result;
}

std::string *sub_100B531E8(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,Accelerometer,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20lf", *(double *)(a1 + 8), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40), *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_100B53284(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "AccelGps,Time,%.4lf,timestamp,%.4f,x,%.12g,y,%.12g,z,%.12g", *(double *)(a1 + 8), *(double *)(a1 + 24), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40));
  return std::string::assign(a2, __str);
}

std::string *sub_100B53320(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,Gyro,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f,subType,%d,sampleNum%%3,%d,triggerEnabled,%d,triggerOn,%d", *(double *)(a1 + 8), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40), *(double *)(a1 + 24), *(_DWORD *)(a1 + 44), *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49), *(unsigned __int8 *)(a1 + 50));
  return std::string::assign(a2, __str);
}

std::string *sub_100B533D4(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "GyroGps,Time,%.4lf,timestamp,%.4f,x,%.12g,y,%.12g,z,%.12g", *(double *)(a1 + 8), *(double *)(a1 + 24), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40));
  return std::string::assign(a2, __str);
}

std::string *sub_100B53470(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,GyroTemperature,temperature,%f", *(double *)(a1 + 8), *(float *)(a1 + 20));
  return std::string::assign(a2, __str);
}

std::string *sub_100B534F4(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,GyroBias,bias.x,%20.20f,bias.y,%20.20f,bias.z,%20.20f,variance.x,%20.20f,variance.y,%20.20f,variance.z,%20.20f,doingBiasEstimation,%d", *(double *)(a1 + 8), *(float *)(a1 + 20), *(float *)(a1 + 24), *(float *)(a1 + 28), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40), *(char *)(a1 + 44));
  return std::string::assign(a2, __str);
}

std::string *sub_100B535A8(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,GyroBiasFit,slope.x,%20.20f,slope.y,%20.20f,slope.z,%20.20f,intercept.x,%20.20f,intercept.y,%20.20f,intercept.z,%20.20f, lastMiniCal,%20.20f", *(double *)(a1 + 8), *(float *)(a1 + 20), *(float *)(a1 + 24), *(float *)(a1 + 28), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40), fmaxf(*(float *)(a1 + 44), 0.0));
  return std::string::assign(a2, __str);
}

std::string *sub_100B53664(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,GyroDt,dt,%20.20f", *(double *)(a1 + 8), *(float *)(a1 + 20));
  return std::string::assign(a2, __str);
}

std::string *sub_100B536E8(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,Magnetometer,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20lf", *(double *)(a1 + 8), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40), *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_100B53784(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,Compass,magneticHeading,%20.20f,trueHeading,%20.20f,accuracy,%20.20f,magneticField.x,%20.20f,magneticField.y,%20.20f,magneticField.z,%20.20f,bias.x,%20.20f,bias.y,%20.20f,bias.z,%20.20f,level,%d,magnitude,%20.20f,inclination,%20.20f,horizontal,%20.20f,timestamp,%20.20f", *(double *)(a1 + 8), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40), *(float *)(a1 + 44), *(float *)(a1 + 48), *(float *)(a1 + 52), *(float *)(a1 + 56), *(float *)(a1 + 60), *(float *)(a1 + 64), *(char *)(a1 + 68), *(float *)(a1 + 72), *(float *)(a1 + 76), *(float *)(a1 + 80),
    *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_100B53870(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,CompassAlignment,compassJustAlignedToStableField,%d,timestamp,%20.20f", *(double *)(a1 + 8), *(char *)(a1 + 32), *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_100B538FC(uint64_t a1, std::string *a2)
{
  unsigned int v3 = *(unsigned __int16 *)(a1 + 112);
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,DeviceMotion,q.x,%20.20f,q.y,%20.20f,q.z,%20.20f,q.w,%20.20f,userAccel.x,%20.20f,userAccel.y,%20.20f,userAccel.z,%20.20f,rotationRate.x,%20.20f,rotationRate.y,%20.20f,rotationRate.z,%20.20f,magneticField.x,%20.20f,magneticField.y,%20.20f,magneticField.z,%20.20f,magneticFieldCalibrationLevel,%d,heading,%.3f,trueheading,%.3f,accuracy,%.3f,variant,%d,mode,%d,clientID,%#02x,biasEstimation,%d,yawCorrection,%d,gravityCorrection,%d,courseCorrection,%d,visualLocalizationCorrection,%d,initialized,%d,accelSaturated,%d,gyroSaturated,%d,compassCalibration,%d,gyroCalibration,%d,course,%d,gmm,%d,north,%d,visualLocalization,%d,timestamp,%20.20f", *(double *)(a1 + 8), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40), *(float *)(a1 + 44), *(float *)(a1 + 48), *(float *)(a1 + 52), *(float *)(a1 + 56), *(float *)(a1 + 60), *(float *)(a1 + 64), *(float *)(a1 + 68),
    *(float *)(a1 + 72),
    *(float *)(a1 + 76),
    *(float *)(a1 + 80),
    *(char *)(a1 + 84),
    *(float *)(a1 + 88),
    *(float *)(a1 + 92),
    *(float *)(a1 + 96),
    *(_DWORD *)(a1 + 100),
    *(_DWORD *)(a1 + 104),
    *(_DWORD *)(a1 + 108),
    (v3 >> 4) & 1,
    (v3 >> 3) & 1,
    (v3 >> 2) & 1,
    (v3 >> 5) & 1,
    (v3 >> 6) & 1,
    (v3 >> 8) & 1,
    (v3 >> 1) & 1,
    v3 & 1,
    (v3 >> 10) & 1,
    (v3 >> 9) & 1,
    (v3 >> 11) & 1,
    (v3 >> 12) & 1,
    (v3 >> 13) & 1,
    (v3 >> 14) & 1,
    *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_100B53A74(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,MotionStateUpdate,motionStateUpdate:Motion,%d,conf,%d,Mounted,%d,MountedConf,%d,exitState,%d,turn,%d,isVehicular,%d,isMoving,%d,seq,%d,startTime,%f,timestamp,%f,startTimeUL,%llu,nowUL,%llu -- caltype,%d,vm,%f,standing,%d,machinefrequency,%f,strokefrequency,%f,strokeAmplitude,%f,strokepower,%f", *(double *)(a1 + 8), *(_DWORD *)(a1 + 20), *(unsigned __int8 *)(a1 + 24), *(unsigned __int8 *)(a1 + 25), *(unsigned __int8 *)(a1 + 26), *(unsigned __int8 *)(a1 + 27), *(unsigned __int8 *)(a1 + 28), *(unsigned __int8 *)(a1 + 29), *(unsigned __int8 *)(a1 + 30), *(_DWORD *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64),
    *(unsigned __int8 *)(a1 + 72),
    *(float *)(a1 + 76),
    *(unsigned __int8 *)(a1 + 80),
    *(float *)(a1 + 84),
    *(float *)(a1 + 88),
    *(float *)(a1 + 92),
    *(float *)(a1 + 96));
  return std::string::assign(a2, __str);
}

std::string *sub_100B53B74(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,Pressure,pressure,%20.20f,temperature,%20.20f,timestamp,%20.20lf", *(double *)(a1 + 8), *(float *)(a1 + 32), *(float *)(a1 + 36), *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_100B53C04(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,PressureFilteredNoTemperature,pressure,%20.20f,timestamp,%llu", *(double *)(a1 + 8), *(float *)(a1 + 32), *(void *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_100B53C90(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,Prox,DetectionMask,%d,timestamp,%20.20lf", *(double *)(a1 + 8), *(_DWORD *)(a1 + 32), *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_100B53D1C(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,TouchOscarEmu,touchDetected,%d,timestamp,%20.20lf", *(double *)(a1 + 8), *(unsigned __int8 *)(a1 + 32), *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_100B53DA8(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,CompassCalibration,bias.x,%.8f,.y,%.8f,.z,%.8f,scale.x,%.8f,.y,%.8f,.z,%.8f,quality,%.8f,cost,%.8f,coverage,%.8f,earthDiffRatio,%.8f,pose.x,%.8f,.y,%.8f,.z,%.8f,level,%d,timestamp,%20.20f", *(double *)(a1 + 8), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40), *(float *)(a1 + 44), *(float *)(a1 + 48), *(float *)(a1 + 52), *(float *)(a1 + 56), *(float *)(a1 + 60), *(float *)(a1 + 64), *(float *)(a1 + 68), *(float *)(a1 + 72), *(float *)(a1 + 76), *(float *)(a1 + 80), *(char *)(a1 + 84),
    *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_100B53E9C(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,BTConnection,startTime,%.3lf,endTime,%.3lf,connected,%d", *(double *)(a1 + 8), *(double *)(a1 + 24), *(double *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
  return std::string::assign(a2, __str);
}

std::string *sub_100B53F28(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,SessionOverride,sessionType,%d,timestamp,%.3lf", *(double *)(a1 + 8), *(_DWORD *)(a1 + 32), *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_100B53FB4(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,LocationOscarEmu,locationType,%d,speed,%.3lf,speedAccuracy,%.3lf,latitude,%.7lf,longitude,%.7lf,horizontalAccuracy,%.3lf,altitude,%.3lf,verticalAccuracy,%.3lf,course,%.3lf,courseAccuracy,%.3lf,confidence,%d,locationLoggingEnabled,%d,timestamp,%.3lf", *(double *)(a1 + 8), *(unsigned __int8 *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96), *(double *)(a1 + 104), *(unsigned __int8 *)(a1 + 112), *(unsigned __int8 *)(a1 + 113), *(double *)(a1 + 24));
  return std::string::assign(a2, __str);
}

std::string *sub_100B5406C(uint64_t a1, std::string *a2)
{
  switch(*(unsigned char *)(a1 + 32))
  {
    case 4:
      snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.lf,Type,MotionHint,event,%d,eventDescription,%s,value,%d,valueDescription,%s\n");
      break;
    default:
      snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.lf,Type,MotionHint,event,%d,eventDescription,%s,value,%d\n");
      break;
  }
  return std::string::assign(a2, __str);
}

std::string *sub_100B541EC(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,CLDeviceMotion,q.x,%20.20f,q.y,%20.20f,q.z,%20.20f,q.w,%20.20f,userAccel.x,%20.20f,userAccel.y,%20.20f,userAccel.z,%20.20f,rotationRate.x,%20.20f,rotationRate.y,%20.20f,rotationRate.z,%20.20f,magneticField.x,%20.20f,magneticField.y,%20.20f,magneticField.z,%20.20f,magneticFieldCalibrationLevel,%d,timestamp,%20.20f,doingBiasEstimation,%d,doingYawCorrection,%d,type,%d", *(double *)(a1 + 8), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(float *)(a1 + 64), *(float *)(a1 + 68), *(float *)(a1 + 72), *(float *)(a1 + 76), *(float *)(a1 + 80), *(float *)(a1 + 84), *(float *)(a1 + 88), *(float *)(a1 + 92),
    *(float *)(a1 + 96),
    *(char *)(a1 + 100),
    *(double *)(a1 + 24),
    *(unsigned __int8 *)(a1 + 101),
    *(unsigned __int8 *)(a1 + 102),
    *(unsigned __int8 *)(a1 + 103));
  return std::string::assign(a2, __str);
}

void *sub_100B542E4()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  strcpy(__s, "fits,");
  unsigned int v3 = (float *)(v0 + 124);
  unint64_t v4 = -3;
  unint64_t v5 = 5;
  while (1)
  {
    v5 += snprintf(&__s[v5], 4096 - v5, "slope.x,%f,slope.y,%f,slope.z,%f,intercept.x,%f,intercept.y,%f,intercept.z,%f,", *(v3 - 26), *(v3 - 25), *(v3 - 24), *(v3 - 2), *(v3 - 1), *v3);
    if (v5 > 0xFFF) {
      break;
    }
    v4 += 3;
    v3 += 3;
    if (v4 > 0x14)
    {
      snprintf(&__s[v5], 4096 - v5, "temperatures,%f,%f,%f,%f,%f,%f,%f,overlap,%f,error,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d", *(float *)(v0 + 212), *(float *)(v0 + 216), *(float *)(v0 + 220), *(float *)(v0 + 224), *(float *)(v0 + 228), *(float *)(v0 + 232), *(float *)(v0 + 236), *(float *)(v0 + 240), *(unsigned __int8 *)(v0 + 244), *(unsigned __int8 *)(v0 + 245), *(unsigned __int8 *)(v0 + 246), *(unsigned __int8 *)(v0 + 247), *(unsigned __int8 *)(v0 + 248), *(unsigned __int8 *)(v0 + 249), *(unsigned __int8 *)(v0 + 250), *(unsigned __int8 *)(v0 + 251),
        *(unsigned __int8 *)(v0 + 252),
        *(unsigned __int8 *)(v0 + 253),
        *(unsigned __int8 *)(v0 + 254),
        *(unsigned __int8 *)(v0 + 255),
        *(unsigned __int8 *)(v0 + 256));
      return sub_100134750(v2, __s);
    }
  }
  return sub_100134750(v2, __s);
}

std::string *sub_100B544C0(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  double v4 = *(double *)(v3 + 8);
  sub_100B542E4();
  if (v8 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  snprintf(__str, 0x1000uLL, "STATUS,SENSOR,Time,%.3lf,Type,CLNonlinearGyroBiasFit,fits,%s", v4, p_p);
  if (v8 < 0) {
    operator delete(__p);
  }
  return std::string::assign(v2, __str);
}

std::string *sub_100B5459C(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,BodyMetrics,gender,%u,heightM,%f,weightKG,%f,vo2max,%f,age,%f,hrmin,%f,hrmax,%f,hronset,%f,pal,%f,condition,%u,runVo2max,%f", *(double *)(a1 + 8), *(_DWORD *)(a1 + 20), *(float *)(a1 + 24), *(float *)(a1 + 28), *(float *)(a1 + 32), *(float *)(a1 + 36), *(float *)(a1 + 40), *(float *)(a1 + 44), *(float *)(a1 + 48), *(float *)(a1 + 52), *(_DWORD *)(a1 + 56), *(float *)(a1 + 60));
  return std::string::assign(a2, __str);
}

std::string *sub_100B54674(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,WorkoutEvent,workoutType,%u,eventType,%u,eventTime,%.3lf", *(double *)(a1 + 8), *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24), *(double *)(a1 + 32));
  return std::string::assign(a2, __str);
}

std::string *sub_100B54700(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,OnsetHeartRateData,dataSource,%u,interpolation,%u,HeartRate,%f,confidence,%f,error,%d,timestamp,%.3lf,startTime,%.3lf,sinceLastGood,%.3lf,mode,%u", *(double *)(a1 + 8), *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(_DWORD *)(a1 + 80));
  return std::string::assign(a2, __str);
}

std::string *sub_100B547AC(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,StreamingHeartRateData,dataSource,%u,interpolation,%u,HeartRate,%f,confidence,%f,error,%d,timestamp,%.3lf,startTime,%.3lf,sinceLastGood,%.3lf,mode,%u", *(double *)(a1 + 8), *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(_DWORD *)(a1 + 80));
  return std::string::assign(a2, __str);
}

std::string *sub_100B54858(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,ElevationChange,timestamp,%.3lf,startTime,%.3lf,elevationAscended,%u,elevationDescended,%d,source,%u", *(double *)(a1 + 8), *(double *)(a1 + 24), *(double *)(a1 + 32), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44), *(_DWORD *)(a1 + 48));
  return std::string::assign(a2, __str);
}

std::string *sub_100B548EC(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,CoarseElevationChange,startTime,%.3lf,elevationAscended,%u", *(double *)(a1 + 8), *(double *)(a1 + 24), *(_DWORD *)(a1 + 32));
  return std::string::assign(a2, __str);
}

std::string *sub_100B54974(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,MotionGPSLocation,timestamp,%.3lf,latitude,%+.10f,longitude,%+.10f,speed,%.3lf,speedAccuracy,%.3lf,horizontalAccuracy,%.3lf,course,%.3lf,courseAccuracy,%.3lf,altitude,%.3lf,verticalAccuracy,%.3lf,type,%d,timestampGPS,%.3lf,undulation,%.3lf,undulationModel,%d,horzUncSemiMaj,%.3lf,horzUncSemiMin,%.3lf,horzUncSemiMajAz,%.3lf,odometer,%.3lf,deltaDistance,%.3lf,deltaDistanceAccuracy,%.3lf,originDevice,%d", *(double *)(a1 + 8), *(double *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96), *(_DWORD *)(a1 + 104), *(double *)(a1 + 112),
    *(float *)(a1 + 120),
    *(_DWORD *)(a1 + 124),
    *(float *)(a1 + 128),
    *(float *)(a1 + 132),
    *(float *)(a1 + 136),
    *(double *)(a1 + 144),
    *(double *)(a1 + 152),
    *(double *)(a1 + 160),
    *(_DWORD *)(a1 + 168));
  return std::string::assign(a2, __str);
}

std::string *sub_100B54A6C(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,Odometer,startTime,%.3lf,accuracy,%.3lf,distance,%.3lf,gpsAltitude,%.3lf,speed,%.3lf,rawSpeed,%.3lf,odometer,%.3lf,gpsSpeedAccuracy,%.3lf,timestampGPS,%.3lf,origin,%d,quality,%d", *(double *)(a1 + 8), *(double *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(_DWORD *)(a1 + 96), *(_DWORD *)(a1 + 100));
  return std::string::assign(a2, __str);
}

std::string *sub_100B54B14(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,MotionWifiLocation,timestamp,%.3lf,latitude,%+.10f,longitude,%+.10f,speed,%.3lf,speedAccuracy,%.3lf,horizontalAccuracy,%.3lf,course,%.3lf,courseAccuracy,%.3lf,altitude,%.3lf,verticalAccuracy,%.3lf,type,%d,timestampGPS,%.3lf,undulation,%.3lf,undulationModel,%d,horzUncSemiMaj,%.3lf,horzUncSemiMin,%.3lf,horzUncSemiMajAz,%.3lf,odometer,%.3lf,deltaDistance,%.3lf,deltaDistanceAccuracy,%.3lf,originDevice,%d", *(double *)(a1 + 8), *(double *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96), *(_DWORD *)(a1 + 104), *(double *)(a1 + 112),
    *(float *)(a1 + 120),
    *(_DWORD *)(a1 + 124),
    *(float *)(a1 + 128),
    *(float *)(a1 + 132),
    *(float *)(a1 + 136),
    *(double *)(a1 + 144),
    *(double *)(a1 + 152),
    *(double *)(a1 + 160),
    *(_DWORD *)(a1 + 168));
  return std::string::assign(a2, __str);
}

std::string *sub_100B54C0C(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,StrideCalBin,bin,%d,begin,%.3lf,end,%.3lf,state,%d,kValue,%.3lf", *(double *)(a1 + 8), *(_DWORD *)(a1 + 20), *(double *)(a1 + 24), *(double *)(a1 + 32), *(_DWORD *)(a1 + 40), *(double *)(a1 + 48));
  return std::string::assign(a2, __str);
}

std::string *sub_100B54CA8(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,CaloriemetryPauseEvent,pause,%d", *(double *)(a1 + 8), *(unsigned __int8 *)(a1 + 18));
  return std::string::assign(a2, __str);
}

std::string *sub_100B54D2C(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,MetsInfo,mets,%f,metsHR,%f,metsWR,%f,source,%u,metsDiff,%f", *(double *)(a1 + 8), *(float *)(a1 + 20), *(float *)(a1 + 24), *(float *)(a1 + 28), *(_DWORD *)(a1 + 32), *(float *)(a1 + 36));
  return std::string::assign(a2, __str);
}

std::string *sub_100B54DD4(uint64_t a1, std::string *this)
{
  int v3 = *(unsigned __int8 *)(a1 + 18);
  if (v3 == 2)
  {
    if (snprintf(__str, 0x400uLL, "STATUS,SENSOR,systemHardware,%d,defaultsUserStudyFallStatsEnabled,%d,defaultsUserStudyPressureDataCollection,%d,defaultsIsSensorRecordingEnabled,%d,defaultsDetectorEnabled,%d,defaultsAnomalyMotionInternalTest,%d,spuConfigSensorTestModeEnabled,%d,spuConfigSensorRecordingEnabled,%d,spuConfigLastReplyAopTimestamp,%llu,spuConfigFallStatsMode,%d,spuConfigSensorRecordingActive,%d,spuConfigSimulateEvent,%d,spuConfigUserStudyPressureDataCollection,%d,spuConfigDetectorEnabled,%d,spuConfigSensorTestModeEnabled,%d,defaultsDetectorDuringWorkoutEnabled,%d", *(_DWORD *)(a1 + 20), *(unsigned __int8 *)(a1 + 24), *(unsigned __int8 *)(a1 + 25), *(unsigned __int8 *)(a1 + 26), *(unsigned __int8 *)(a1 + 27), *(unsigned __int8 *)(a1 + 29), *(unsigned __int8 *)(a1 + 30), *(unsigned __int8 *)(a1 + 31), *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41),
                         *(unsigned __int8 *)(a1 + 42),
                         *(unsigned __int8 *)(a1 + 43),
                         *(unsigned __int8 *)(a1 + 44),
                         *(unsigned __int8 *)(a1 + 45),
                         *(unsigned __int8 *)(a1 + 28)) >= 0x401)
    {
      int v4 = 4710;
      goto LABEL_7;
    }
  }
  else if (v3 == 1 {
         && snprintf(__str, 0x400uLL, "STATUS,SENSOR,systemHardware,%d,defaultsUserStudyFallStatsEnabled,%d,defaultsUserStudyPressureDataCollection,%d,defaultsIsSensorRecordingEnabled,%d,defaultsDetectorEnabled,%d,defaultsAnomalyMotionInternalTest,%d,spuConfigSensorTestModeEnabled,%d,spuConfigSensorRecordingEnabled,%d,spuConfigLastReplyAopTimestamp,%llu,spuConfigFallStatsMode,%d,spuConfigSensorRecordingActive,%d,spuConfigSimulateEvent,%d,spuConfigUserStudyPressureDataCollection,%d,spuConfigDetectorEnabled,%d,spuConfigSensorTestModeEnabled,%d", *(_DWORD *)(a1 + 20), *(unsigned __int8 *)(a1 + 24), *(unsigned __int8 *)(a1 + 25), *(unsigned __int8 *)(a1 + 26), *(unsigned __int8 *)(a1 + 27), *(unsigned __int8 *)(a1 + 29), *(unsigned __int8 *)(a1 + 30), *(unsigned __int8 *)(a1 + 31), *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41),
  }
                            *(unsigned __int8 *)(a1 + 42),
                            *(unsigned __int8 *)(a1 + 43),
                            *(unsigned __int8 *)(a1 + 44),
                            *(unsigned __int8 *)(a1 + 45)) > 0x400)
  {
    int v4 = 4684;
LABEL_7:
    snprintf(__str, 0x400uLL, "buffer too short to host all data (line:%i)", v4);
  }
  return std::string::assign(this, __str);
}

std::string *sub_100B54F60(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "LOG,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,operatingMode,%d,aopTsNow,%llu,aopTsSensor,%llu,peakTimestamp,%llu,fallType,%hhd,isFall,%hhu,isNearFall,%d,simulated,%hhu,crown,%hhd,seq,%u,trialCount,%u", *(double *)(a1 + 8), *(double *)(a1 + 24), *(unsigned __int8 *)(a1 + 32), *(unsigned __int8 *)(a1 + 212), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 112), *(char *)(a1 + 152), *(unsigned __int8 *)(a1 + 153), *(unsigned __int8 *)(a1 + 188), *(unsigned __int8 *)(a1 + 154), *(char *)(a1 + 156), *(unsigned __int16 *)(a1 + 34), *(unsigned __int8 *)(a1 + 155));
  return std::string::assign(a2, __str);
}

std::string *sub_100B55024(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x800uLL, "LOG,Time,%.3lf,Type,FallStatsFeatures,timestamp,%f,version,%d,operatingMode,%d,aopTsNow,%llu,aopTsSensor,%llu,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,maxAccelNorm,%f,accelPathLength,%f,minInertialZ,%f,minInertialZHighFreq,%f,crownVariance,%f,gravityVariance,%f,medianAbsGravityY,%f,abruptGravityChangeAngle,%f,jerkVectorMagMax,%f,angleChangePreImpact,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDeltaAngles,%f,posteriorRatio,%f,poseAtImpact,%f,tiltAngle,%f,swingAngle,%f,pathLengthHarmonicMean,%f,pathLengthDecorrelation,%f,pathLengthDelaySpread,%f,accelPathLengthWithPeak,%f", *(double *)(a1 + 8), *(double *)(a1 + 24), *(unsigned __int8 *)(a1 + 32), *(unsigned __int8 *)(a1 + 212), *(void *)(a1 + 40), *(void *)(a1 + 48), *(float *)(a1 + 60), *(float *)(a1 + 64), *(float *)(a1 + 68), *(float *)(a1 + 72), *(float *)(a1 + 76),
    *(float *)(a1 + 80),
    *(float *)(a1 + 164),
    *(float *)(a1 + 120),
    *(float *)(a1 + 124),
    *(float *)(a1 + 208),
    *(float *)(a1 + 220),
    *(float *)(a1 + 216),
    *(float *)(a1 + 224),
    *(float *)(a1 + 228),
    *(float *)(a1 + 96),
    *(float *)(a1 + 128),
    *(float *)(a1 + 132),
    *(float *)(a1 + 136),
    *(float *)(a1 + 140),
    *(float *)(a1 + 144),
    *(float *)(a1 + 148),
    *(float *)(a1 + 176),
    *(float *)(a1 + 180),
    *(float *)(a1 + 184),
    *(float *)(a1 + 192),
    *(float *)(a1 + 196),
    *(float *)(a1 + 200),
    *(float *)(a1 + 204));
  return std::string::assign(a2, __str);
}

std::string *sub_100B551B8(uint64_t a1)
{
  __chkstk_darwin(a1);
  int v3 = v2;
  switch(*(unsigned char *)(v1 + 32))
  {
    case 1:
      if (snprintf(__str, 0x4000uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f", *(double *)(v1 + 8), *(double *)(v1 + 24), 1, *(unsigned __int16 *)(v1 + 34), *(void *)(v1 + 40), *(void *)(v1 + 48), *(float *)(v1 + 56), *(float *)(v1 + 60), *(float *)(v1 + 64), *(float *)(v1 + 68), *(float *)(v1 + 72), *(float *)(v1 + 76), *(float *)(v1 + 80), *(float *)(v1 + 84),
                           *(float *)(v1 + 88),
                           *(float *)(v1 + 92),
                           *(float *)(v1 + 96),
                           *(float *)(v1 + 100),
                           *(float *)(v1 + 104),
                           *(float *)(v1 + 108)) > 0x4000)
      {
        int v4 = 4810;
        goto LABEL_24;
      }
      break;
    case 2:
      if (snprintf(__str, 0x4000uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%hhd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImpact,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDeltaAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu", *(double *)(v1 + 8), *(double *)(v1 + 24), 2, *(unsigned __int16 *)(v1 + 34), *(unsigned __int8 *)(v1 + 155), *(char *)(v1 + 156), *(void *)(v1 + 40), *(void *)(v1 + 48), *(float *)(v1 + 56), *(float *)(v1 + 60), *(float *)(v1 + 64),
                           *(float *)(v1 + 68),
                           *(float *)(v1 + 72),
                           *(float *)(v1 + 76),
                           *(float *)(v1 + 80),
                           *(float *)(v1 + 84),
                           *(float *)(v1 + 88),
                           *(float *)(v1 + 92),
                           *(float *)(v1 + 96),
                           *(float *)(v1 + 100),
                           *(float *)(v1 + 104),
                           *(float *)(v1 + 108),
                           *(void *)(v1 + 112),
                           *(float *)(v1 + 120),
                           *(float *)(v1 + 124),
                           *(float *)(v1 + 128),
                           *(float *)(v1 + 132),
                           *(float *)(v1 + 136),
                           *(float *)(v1 + 140),
                           *(float *)(v1 + 144),
                           *(float *)(v1 + 148),
                           *(char *)(v1 + 152),
                           *(unsigned __int8 *)(v1 + 153),
                           *(unsigned __int8 *)(v1 + 154)) > 0x4000)
      {
        int v4 = 4848;
        goto LABEL_24;
      }
      break;
    case 3:
      if (snprintf(__str, 0x4000uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%hhd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImpact,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDeltaAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAccelNorm,%f", *(double *)(v1 + 8), *(double *)(v1 + 24), 3, *(unsigned __int16 *)(v1 + 34), *(unsigned __int8 *)(v1 + 155), *(char *)(v1 + 156), *(void *)(v1 + 40), *(void *)(v1 + 48), *(float *)(v1 + 56), *(float *)(v1 + 60), *(float *)(v1 + 64),
                           *(float *)(v1 + 68),
                           *(float *)(v1 + 72),
                           *(float *)(v1 + 76),
                           *(float *)(v1 + 80),
                           *(float *)(v1 + 84),
                           *(float *)(v1 + 88),
                           *(float *)(v1 + 92),
                           *(float *)(v1 + 96),
                           *(float *)(v1 + 100),
                           *(float *)(v1 + 104),
                           *(float *)(v1 + 108),
                           *(void *)(v1 + 112),
                           *(float *)(v1 + 120),
                           *(float *)(v1 + 124),
                           *(float *)(v1 + 128),
                           *(float *)(v1 + 132),
                           *(float *)(v1 + 136),
                           *(float *)(v1 + 140),
                           *(float *)(v1 + 144),
                           *(float *)(v1 + 148),
                           *(char *)(v1 + 152),
                           *(unsigned __int8 *)(v1 + 153),
                           *(unsigned __int8 *)(v1 + 154),
                           *(float *)(v1 + 160),
                           *(float *)(v1 + 164)) > 0x4000)
      {
        int v4 = 4888;
        goto LABEL_24;
      }
      break;
    case 4:
      if (snprintf(__str, 0x4000uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%hhd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImpact,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDeltaAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAccelNorm,%f,extrapolatedMaxMinusMin,%f,extrapolatedMaxAccelNorm,%f", *(double *)(v1 + 8), *(double *)(v1 + 24), 4, *(unsigned __int16 *)(v1 + 34), *(unsigned __int8 *)(v1 + 155), *(char *)(v1 + 156), *(void *)(v1 + 40), *(void *)(v1 + 48), *(float *)(v1 + 56), *(float *)(v1 + 60),
                           *(float *)(v1 + 64),
                           *(float *)(v1 + 68),
                           *(float *)(v1 + 72),
                           *(float *)(v1 + 76),
                           *(float *)(v1 + 80),
                           *(float *)(v1 + 84),
                           *(float *)(v1 + 88),
                           *(float *)(v1 + 92),
                           *(float *)(v1 + 96),
                           *(float *)(v1 + 100),
                           *(float *)(v1 + 104),
                           *(float *)(v1 + 108),
                           *(void *)(v1 + 112),
                           *(float *)(v1 + 120),
                           *(float *)(v1 + 124),
                           *(float *)(v1 + 128),
                           *(float *)(v1 + 132),
                           *(float *)(v1 + 136),
                           *(float *)(v1 + 140),
                           *(float *)(v1 + 144),
                           *(float *)(v1 + 148),
                           *(char *)(v1 + 152),
                           *(unsigned __int8 *)(v1 + 153),
                           *(unsigned __int8 *)(v1 + 154),
                           *(float *)(v1 + 160),
                           *(float *)(v1 + 164),
                           *(float *)(v1 + 168),
                           *(float *)(v1 + 172)) > 0x4000)
      {
        int v4 = 4930;
        goto LABEL_24;
      }
      break;
    case 5:
      if (snprintf(__str, 0x4000uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%hhd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImpact,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDeltaAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAccelNorm,%f,extrapolatedMaxMinusMin,%f,extrapolatedMaxAccelNorm,%f,poseAtImpact,%f,tiltAngle,%f,swingAngle,%f", *(double *)(v1 + 8), *(double *)(v1 + 24), 5, *(unsigned __int16 *)(v1 + 34), *(unsigned __int8 *)(v1 + 155), *(char *)(v1 + 156), *(void *)(v1 + 40), *(void *)(v1 + 48), *(float *)(v1 + 56), *(float *)(v1 + 60),
                           *(float *)(v1 + 64),
                           *(float *)(v1 + 68),
                           *(float *)(v1 + 72),
                           *(float *)(v1 + 76),
                           *(float *)(v1 + 80),
                           *(float *)(v1 + 84),
                           *(float *)(v1 + 88),
                           *(float *)(v1 + 92),
                           *(float *)(v1 + 96),
                           *(float *)(v1 + 100),
                           *(float *)(v1 + 104),
                           *(float *)(v1 + 108),
                           *(void *)(v1 + 112),
                           *(float *)(v1 + 120),
                           *(float *)(v1 + 124),
                           *(float *)(v1 + 128),
                           *(float *)(v1 + 132),
                           *(float *)(v1 + 136),
                           *(float *)(v1 + 140),
                           *(float *)(v1 + 144),
                           *(float *)(v1 + 148),
                           *(char *)(v1 + 152),
                           *(unsigned __int8 *)(v1 + 153),
                           *(unsigned __int8 *)(v1 + 154),
                           *(float *)(v1 + 160),
                           *(float *)(v1 + 164),
                           *(float *)(v1 + 168),
                           *(float *)(v1 + 172),
                           *(float *)(v1 + 176),
                           *(float *)(v1 + 180),
                           *(float *)(v1 + 184)) > 0x4000)
      {
        int v4 = 4975;
        goto LABEL_24;
      }
      break;
    case 6:
      if (snprintf(__str, 0x4000uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%hhd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImpact,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDeltaAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAccelNorm,%f,extrapolatedMaxMinusMin,%f,extrapolatedMaxAccelNorm,%f,poseAtImpact,%f,tiltAngle,%f,swingAngle,%f,isNearFall,%d", *(double *)(v1 + 8), *(double *)(v1 + 24), 6, *(unsigned __int16 *)(v1 + 34), *(unsigned __int8 *)(v1 + 155), *(char *)(v1 + 156), *(void *)(v1 + 40), *(void *)(v1 + 48), *(float *)(v1 + 56),
                           *(float *)(v1 + 60),
                           *(float *)(v1 + 64),
                           *(float *)(v1 + 68),
                           *(float *)(v1 + 72),
                           *(float *)(v1 + 76),
                           *(float *)(v1 + 80),
                           *(float *)(v1 + 84),
                           *(float *)(v1 + 88),
                           *(float *)(v1 + 92),
                           *(float *)(v1 + 96),
                           *(float *)(v1 + 100),
                           *(float *)(v1 + 104),
                           *(float *)(v1 + 108),
                           *(void *)(v1 + 112),
                           *(float *)(v1 + 120),
                           *(float *)(v1 + 124),
                           *(float *)(v1 + 128),
                           *(float *)(v1 + 132),
                           *(float *)(v1 + 136),
                           *(float *)(v1 + 140),
                           *(float *)(v1 + 144),
                           *(float *)(v1 + 148),
                           *(char *)(v1 + 152),
                           *(unsigned __int8 *)(v1 + 153),
                           *(unsigned __int8 *)(v1 + 154),
                           *(float *)(v1 + 160),
                           *(float *)(v1 + 164),
                           *(float *)(v1 + 168),
                           *(float *)(v1 + 172),
                           *(float *)(v1 + 176),
                           *(float *)(v1 + 180),
                           *(float *)(v1 + 184),
                           *(unsigned __int8 *)(v1 + 188)) > 0x4000)
      {
        int v4 = 5021;
        goto LABEL_24;
      }
      break;
    case 7:
      double v5 = *(double *)(v1 + 8);
      double v6 = *(double *)(v1 + 24);
      if (snprintf(__str, 0x4000uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%hhd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImpact,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDeltaAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAccelNorm,%f,extrapolatedMaxMinusMin,%f,extrapolatedMaxAccelNorm,%f,poseAtImpact,%f,tiltAngle,%f,swingAngle,%f,isNearFall,%d,pathLengthHarmonicMean,%f,pathLengthDecorrelation,%f,pathLengthDelaySpread,%f,accelPathLengthWithPeak,%f", v5, v6, 7, *(unsigned __int16 *)(v1 + 34), *(unsigned __int8 *)(v1 + 155), *(char *)(v1 + 156), *(void *)(v1 + 40), *(void *)(v1 + 48),
                           *(float *)(v1 + 56),
                           *(float *)(v1 + 60),
                           *(float *)(v1 + 64),
                           *(float *)(v1 + 68),
                           *(float *)(v1 + 72),
                           *(float *)(v1 + 76),
                           *(float *)(v1 + 80),
                           *(float *)(v1 + 84),
                           *(float *)(v1 + 88),
                           *(float *)(v1 + 92),
                           *(float *)(v1 + 96),
                           *(float *)(v1 + 100),
                           *(float *)(v1 + 104),
                           *(float *)(v1 + 108),
                           *(void *)(v1 + 112),
                           *(float *)(v1 + 120),
                           *(float *)(v1 + 124),
                           *(float *)(v1 + 128),
                           *(float *)(v1 + 132),
                           *(float *)(v1 + 136),
                           *(float *)(v1 + 140),
                           *(float *)(v1 + 144),
                           *(float *)(v1 + 148),
                           *(char *)(v1 + 152),
                           *(unsigned __int8 *)(v1 + 153),
                           *(unsigned __int8 *)(v1 + 154),
                           *(float *)(v1 + 160),
                           *(float *)(v1 + 164),
                           *(float *)(v1 + 168),
                           *(float *)(v1 + 172),
                           *(float *)(v1 + 176),
                           *(float *)(v1 + 180),
                           *(float *)(v1 + 184),
                           *(unsigned __int8 *)(v1 + 188),
                           *(float *)(v1 + 192),
                           *(float *)(v1 + 196),
                           *(float *)(v1 + 200),
                           *(float *)(v1 + 204)) > 0x4000)
      {
        int v4 = 5071;
        goto LABEL_24;
      }
      break;
    case 8:
      double v7 = *(double *)(v1 + 8);
      double v8 = *(double *)(v1 + 24);
      double v16 = *(float *)(v1 + 204);
      if (snprintf(__str, 0x4000uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%hhd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImpact,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDeltaAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAccelNorm,%f,extrapolatedMaxMinusMin,%f,extrapolatedMaxAccelNorm,%f,poseAtImpact,%f,tiltAngle,%f,swingAngle,%f,isNearFall,%d,pathLengthHarmonicMean,%f,pathLengthDecorrelation,%f,pathLengthDelaySpread,%f,accelPathLengthWithPeak,%f,minInertialZHighFreq,%f", v7, v8, 8, *(unsigned __int16 *)(v1 + 34), *(unsigned __int8 *)(v1 + 155), *(char *)(v1 + 156), *(void *)(v1 + 40), *(void *)(v1 + 48),
                           *(float *)(v1 + 56),
                           *(float *)(v1 + 60),
                           *(float *)(v1 + 64),
                           *(float *)(v1 + 68),
                           *(float *)(v1 + 72),
                           *(float *)(v1 + 76),
                           *(float *)(v1 + 80),
                           *(float *)(v1 + 84),
                           *(float *)(v1 + 88),
                           *(float *)(v1 + 92),
                           *(float *)(v1 + 96),
                           *(float *)(v1 + 100),
                           *(float *)(v1 + 104),
                           *(float *)(v1 + 108),
                           *(void *)(v1 + 112),
                           *(float *)(v1 + 120),
                           *(float *)(v1 + 124),
                           *(float *)(v1 + 128),
                           *(float *)(v1 + 132),
                           *(float *)(v1 + 136),
                           *(float *)(v1 + 140),
                           *(float *)(v1 + 144),
                           *(float *)(v1 + 148),
                           *(char *)(v1 + 152),
                           *(unsigned __int8 *)(v1 + 153),
                           *(unsigned __int8 *)(v1 + 154),
                           *(float *)(v1 + 160),
                           *(float *)(v1 + 164),
                           *(float *)(v1 + 168),
                           *(float *)(v1 + 172),
                           *(float *)(v1 + 176),
                           *(float *)(v1 + 180),
                           *(float *)(v1 + 184),
                           *(unsigned __int8 *)(v1 + 188),
                           *(float *)(v1 + 192),
                           *(float *)(v1 + 196),
                           *(float *)(v1 + 200),
                           v16,
                           *(float *)(v1 + 208)) > 0x4000)
      {
        int v4 = 5122;
        goto LABEL_24;
      }
      break;
    case 9:
      double v9 = *(double *)(v1 + 8);
      double v10 = *(double *)(v1 + 24);
      double v17 = *(float *)(v1 + 204);
      double v20 = *(float *)(v1 + 208);
      if (snprintf(__str, 0x4000uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%hhd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImpact,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDeltaAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAccelNorm,%f,extrapolatedMaxMinusMin,%f,extrapolatedMaxAccelNorm,%f,poseAtImpact,%f,tiltAngle,%f,swingAngle,%f,isNearFall,%d,pathLengthHarmonicMean,%f,pathLengthDecorrelation,%f,pathLengthDelaySpread,%f,accelPathLengthWithPeak,%f,minInertialZHighFreq,%f,operatingMode,%d", v9, v10, 9, *(unsigned __int16 *)(v1 + 34), *(unsigned __int8 *)(v1 + 155), *(char *)(v1 + 156), *(void *)(v1 + 40), *(void *)(v1 + 48),
                           *(float *)(v1 + 56),
                           *(float *)(v1 + 60),
                           *(float *)(v1 + 64),
                           *(float *)(v1 + 68),
                           *(float *)(v1 + 72),
                           *(float *)(v1 + 76),
                           *(float *)(v1 + 80),
                           *(float *)(v1 + 84),
                           *(float *)(v1 + 88),
                           *(float *)(v1 + 92),
                           *(float *)(v1 + 96),
                           *(float *)(v1 + 100),
                           *(float *)(v1 + 104),
                           *(float *)(v1 + 108),
                           *(void *)(v1 + 112),
                           *(float *)(v1 + 120),
                           *(float *)(v1 + 124),
                           *(float *)(v1 + 128),
                           *(float *)(v1 + 132),
                           *(float *)(v1 + 136),
                           *(float *)(v1 + 140),
                           *(float *)(v1 + 144),
                           *(float *)(v1 + 148),
                           *(char *)(v1 + 152),
                           *(unsigned __int8 *)(v1 + 153),
                           *(unsigned __int8 *)(v1 + 154),
                           *(float *)(v1 + 160),
                           *(float *)(v1 + 164),
                           *(float *)(v1 + 168),
                           *(float *)(v1 + 172),
                           *(float *)(v1 + 176),
                           *(float *)(v1 + 180),
                           *(float *)(v1 + 184),
                           *(unsigned __int8 *)(v1 + 188),
                           *(float *)(v1 + 192),
                           *(float *)(v1 + 196),
                           *(float *)(v1 + 200),
                           v17,
                           v20,
                           *(unsigned __int8 *)(v1 + 212)) > 0x4000)
      {
        int v4 = 5174;
        goto LABEL_24;
      }
      break;
    case 0xA:
      double v11 = *(double *)(v1 + 8);
      double v12 = *(double *)(v1 + 24);
      double v23 = *(float *)(v1 + 216);
      double v25 = *(float *)(v1 + 220);
      double v18 = *(float *)(v1 + 204);
      double v21 = *(float *)(v1 + 208);
      if (snprintf(__str, 0x4000uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%hhd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImpact,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDeltaAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAccelNorm,%f,extrapolatedMaxMinusMin,%f,extrapolatedMaxAccelNorm,%f,poseAtImpact,%f,tiltAngle,%f,swingAngle,%f,isNearFall,%d,pathLengthHarmonicMean,%f,pathLengthDecorrelation,%f,pathLengthDelaySpread,%f,accelPathLengthWithPeak,%f,minInertialZHighFreq,%f,operatingMode,%d,gravityVariance,%f,crownVariance,%f", v11, v12, 10, *(unsigned __int16 *)(v1 + 34), *(unsigned __int8 *)(v1 + 155), *(char *)(v1 + 156), *(void *)(v1 + 40),
                           *(void *)(v1 + 48),
                           *(float *)(v1 + 56),
                           *(float *)(v1 + 60),
                           *(float *)(v1 + 64),
                           *(float *)(v1 + 68),
                           *(float *)(v1 + 72),
                           *(float *)(v1 + 76),
                           *(float *)(v1 + 80),
                           *(float *)(v1 + 84),
                           *(float *)(v1 + 88),
                           *(float *)(v1 + 92),
                           *(float *)(v1 + 96),
                           *(float *)(v1 + 100),
                           *(float *)(v1 + 104),
                           *(float *)(v1 + 108),
                           *(void *)(v1 + 112),
                           *(float *)(v1 + 120),
                           *(float *)(v1 + 124),
                           *(float *)(v1 + 128),
                           *(float *)(v1 + 132),
                           *(float *)(v1 + 136),
                           *(float *)(v1 + 140),
                           *(float *)(v1 + 144),
                           *(float *)(v1 + 148),
                           *(char *)(v1 + 152),
                           *(unsigned __int8 *)(v1 + 153),
                           *(unsigned __int8 *)(v1 + 154),
                           *(float *)(v1 + 160),
                           *(float *)(v1 + 164),
                           *(float *)(v1 + 168),
                           *(float *)(v1 + 172),
                           *(float *)(v1 + 176),
                           *(float *)(v1 + 180),
                           *(float *)(v1 + 184),
                           *(unsigned __int8 *)(v1 + 188),
                           *(float *)(v1 + 192),
                           *(float *)(v1 + 196),
                           *(float *)(v1 + 200),
                           v18,
                           v21,
                           *(unsigned __int8 *)(v1 + 212),
                           v23,
                           v25) > 0x4000)
      {
        int v4 = 5228;
        goto LABEL_24;
      }
      break;
    case 0xB:
      double v13 = *(double *)(v1 + 8);
      double v14 = *(double *)(v1 + 24);
      double v27 = *(float *)(v1 + 224);
      double v28 = *(float *)(v1 + 228);
      double v24 = *(float *)(v1 + 216);
      double v26 = *(float *)(v1 + 220);
      double v19 = *(float *)(v1 + 204);
      double v22 = *(float *)(v1 + 208);
      if (snprintf(__str, 0x4000uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,trialCount,%u,crown,%hhd,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f,peakTimestamp,%llu,accelPathLength,%f,minInertialZ,%f,angleChangePreImpact,%f,angleChangePostImpact,%f,maxAngleChangePreImpact,%f,maxAngleChangePostImpact,%f,sumDeltaAngles,%f,posteriorRatio,%f,fallType,%hhd,isFall,%hhu,simulated,%hhu,maxMinusMin,%f,maxAccelNorm,%f,extrapolatedMaxMinusMin,%f,extrapolatedMaxAccelNorm,%f,poseAtImpact,%f,tiltAngle,%f,swingAngle,%f,isNearFall,%d,pathLengthHarmonicMean,%f,pathLengthDecorrelation,%f,pathLengthDelaySpread,%f,accelPathLengthWithPeak,%f,minInertialZHighFreq,%f,operatingMode,%d,gravityVariance,%f,crownVariance,%f,medianAbsGravityY,%f,abruptGravityChangeAngle,%f", v13, v14, 11, *(unsigned __int16 *)(v1 + 34), *(unsigned __int8 *)(v1 + 155), *(char *)(v1 + 156), *(void *)(v1 + 40),
                           *(void *)(v1 + 48),
                           *(float *)(v1 + 56),
                           *(float *)(v1 + 60),
                           *(float *)(v1 + 64),
                           *(float *)(v1 + 68),
                           *(float *)(v1 + 72),
                           *(float *)(v1 + 76),
                           *(float *)(v1 + 80),
                           *(float *)(v1 + 84),
                           *(float *)(v1 + 88),
                           *(float *)(v1 + 92),
                           *(float *)(v1 + 96),
                           *(float *)(v1 + 100),
                           *(float *)(v1 + 104),
                           *(float *)(v1 + 108),
                           *(void *)(v1 + 112),
                           *(float *)(v1 + 120),
                           *(float *)(v1 + 124),
                           *(float *)(v1 + 128),
                           *(float *)(v1 + 132),
                           *(float *)(v1 + 136),
                           *(float *)(v1 + 140),
                           *(float *)(v1 + 144),
                           *(float *)(v1 + 148),
                           *(char *)(v1 + 152),
                           *(unsigned __int8 *)(v1 + 153),
                           *(unsigned __int8 *)(v1 + 154),
                           *(float *)(v1 + 160),
                           *(float *)(v1 + 164),
                           *(float *)(v1 + 168),
                           *(float *)(v1 + 172),
                           *(float *)(v1 + 176),
                           *(float *)(v1 + 180),
                           *(float *)(v1 + 184),
                           *(unsigned __int8 *)(v1 + 188),
                           *(float *)(v1 + 192),
                           *(float *)(v1 + 196),
                           *(float *)(v1 + 200),
                           v19,
                           v22,
                           *(unsigned __int8 *)(v1 + 212),
                           v24,
                           v26,
                           v27,
                           v28) > 0x4000)
      {
        int v4 = 5284;
LABEL_24:
        snprintf(__str, 0x4000uLL, "buffer too short to host all data (line:%i)", v4);
      }
      break;
    default:
      return std::string::assign(v3, __str);
  }
  return std::string::assign(v3, __str);
}

std::string *sub_100B56270(uint64_t a1, std::string *this)
{
  int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 == 3)
  {
    if (snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallState,timestamp,%f,aopTsNow,%llu,aopTsSensor,%llu,isFall,%d,state,%d,response,%d,resolution,%d,sosCallTimestamp,%f,sosState,%d,fallAlertSentFromReferee,%d", *(double *)(a1 + 8), *(double *)(a1 + 24), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57), *(unsigned __int8 *)(a1 + 58), *(unsigned __int8 *)(a1 + 59), *(double *)(a1 + 64), *(unsigned __int8 *)(a1 + 72), *(unsigned __int8 *)(a1 + 73)) >= 0x401)
    {
      int v4 = 5332;
      goto LABEL_10;
    }
  }
  else if (v3 == 2)
  {
    if (snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallState,timestamp,%f,aopTsNow,%llu,aopTsSensor,%llu,isFall,%d,state,%d,response,%d,resolution,%d,sosCallTimestamp,%f,sosState,%d", *(double *)(a1 + 8), *(double *)(a1 + 24), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57), *(unsigned __int8 *)(a1 + 58), *(unsigned __int8 *)(a1 + 59), *(double *)(a1 + 64), *(unsigned __int8 *)(a1 + 72)) > 0x400)
    {
      int v4 = 5317;
      goto LABEL_10;
    }
  }
  else if (v3 == 1 {
         && snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallState,timestamp,%f,aopTsNow,%llu,aopTsSensor,%llu,isFall,%d,state,%d,response,%d,resolution,%d", *(double *)(a1 + 8), *(double *)(a1 + 24), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57), *(unsigned __int8 *)(a1 + 58), *(unsigned __int8 *)(a1 + 59)) > 0x400)
  }
  {
    int v4 = 5303;
LABEL_10:
    snprintf(__str, 0x400uLL, "buffer too short to host all data (line:%i)", v4);
  }
  return std::string::assign(this, __str);
}

void sub_100B56414(uint64_t a1, std::string *a2, int a3)
{
  sub_100134750(&v11, "unsupported");
  sub_100134750(&v10, "unknown");
  if (a3 == 57)
  {
    std::string::assign(&v11, "FallDataGyro200");
    double v7 = "aopTs";
  }
  else
  {
    if (a3 == 58)
    {
      double v6 = "FallDataAccel800";
    }
    else
    {
      if (a3 != 123) {
        goto LABEL_9;
      }
      double v6 = "FallDataHgal";
    }
    std::string::assign(&v11, v6);
    double v7 = "approxAopTs";
  }
  std::string::assign(&v10, v7);
LABEL_9:
  double v8 = &v11;
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    double v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
  }
  double v9 = &v10;
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    double v9 = (std::string *)v10.__r_.__value_.__r.__words[0];
  }
  if (snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,%s,timestamp,%f,%s,%llu,x,%f,y,%f,z,%f", *(double *)(a1 + 8), (const char *)v8, *(double *)(a1 + 24), (const char *)v9, *(void *)(a1 + 32), *(float *)(a1 + 40), *(float *)(a1 + 44), *(float *)(a1 + 48)) >= 0x401)snprintf(__str, 0x400uLL, "buffer too short to host all data (line:%i)", 5371); {
  std::string::assign(a2, __str);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_100B565BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B565F8(uint64_t a1, std::string *a2, int a3)
{
  sub_100134750(&v9, "unsupported");
  sub_100134750(&v8, "unknown");
  if (a3 == 60)
  {
    std::string::assign(&v9, "FallDataQuaternion6");
    std::string::assign(&v8, "aopTs");
  }
  double v6 = &v9;
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    double v6 = (std::string *)v9.__r_.__value_.__r.__words[0];
  }
  double v7 = &v8;
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    double v7 = (std::string *)v8.__r_.__value_.__r.__words[0];
  }
  if (snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,%s,timestamp,%f,%s,%llu,qx,%f,qy,%f,qz,%f,qw,%f", *(double *)(a1 + 8), (const char *)v6, *(double *)(a1 + 24), (const char *)v7, *(void *)(a1 + 32), *(float *)(a1 + 40), *(float *)(a1 + 44), *(float *)(a1 + 48), *(float *)(a1 + 52)) >= 0x401)snprintf(__str, 0x400uLL, "buffer too short to host all data (line:%i)", 5404); {
  std::string::assign(a2, __str);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_100B5676C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B567A8(uint64_t a1, std::string *a2)
{
}

void sub_100B567B0(uint64_t a1, std::string *a2)
{
}

void sub_100B567B8(uint64_t a1, std::string *a2)
{
}

void sub_100B567C0(uint64_t a1, std::string *a2)
{
}

std::string *sub_100B567C8(uint64_t a1, std::string *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 == 2)
  {
    if (snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallFalsePositiveSuppressionFeatures,timestamp,%f,aopTsNow,%llu,aopTsSensor,%llu,aopTsImpact,%llu,seq,%d,sumHighQPeaksInHighFreqFFT,%f,sumHighQPeaksInLowFreqFFT,%f,sumHighQPeaksInDecLowFreqFFT,%f,nPeaks,%i,normalizedIQR,%f,repetitiveMotion,%d,version=%d", *(double *)(a1 + 8), *(double *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned __int16 *)(a1 + 56), *(float *)(a1 + 60), *(float *)(a1 + 64), *(float *)(a1 + 68), *(_DWORD *)(a1 + 72), *(float *)(a1 + 76), *(unsigned __int8 *)(a1 + 81), 2) > 0x400)
    {
      int v4 = 5486;
      goto LABEL_9;
    }
  }
  else if (v3 == 3)
  {
    if (snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallFalsePositiveSuppressionFeatures,timestamp,%f,aopTsNow,%llu,aopTsSensor,%llu,aopTsImpact,%llu,seq,%d,sumHighQPeaksInHighFreqFFT,%f,sumHighQPeaksInLowFreqFFT,%f,sumHighQPeaksInDecLowFreqFFT,%f,nPeaks,%i,normalizedIQR,%f,repetitiveMotion,%d,version=%d,repetitiveMotionStartTs,%llu,repetitiveMotionEndTs,%llu", *(double *)(a1 + 8), *(double *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned __int16 *)(a1 + 56), *(float *)(a1 + 60), *(float *)(a1 + 64), *(float *)(a1 + 68), *(_DWORD *)(a1 + 72), *(float *)(a1 + 76), *(unsigned __int8 *)(a1 + 81), 3,
                         *(void *)(a1 + 88),
                         *(void *)(a1 + 96)) > 0x400)
    {
      int v4 = 5469;
LABEL_9:
      snprintf(__str, 0x400uLL, "buffer too short to host all data (line:%i)", v4);
    }
  }
  else if (snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,FallFalsePositiveSuppressionFeatures,timestamp,%f,aopTsNow,%llu,aopTsSensor,%llu,aopTsImpact,%llu,seq,%d,sumHighQPeaksInHighFreqFFT,%f,sumHighQPeaksInLowFreqFFT,%f,sumHighQPeaksInDecLowFreqFFT,%f,nPeaks,%i,normalizedIQR,%f,version=%d", *(double *)(a1 + 8), *(double *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned __int16 *)(a1 + 56), *(float *)(a1 + 60), *(float *)(a1 + 64), *(float *)(a1 + 68), *(_DWORD *)(a1 + 72), *(float *)(a1 + 76), *(unsigned __int8 *)(a1 + 80)) >= 0x401)
  {
    int v4 = 5502;
    goto LABEL_9;
  }
  return std::string::assign(a2, __str);
}

std::string *sub_100B569D0(uint64_t a1, std::string *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 32);
  unint64_t v4 = *(char *)(a1 + 33);
  double v5 = "Undefined";
  double v6 = "Undefined";
  if (v4 <= 5) {
    double v6 = (&off_1022E79C8)[v4];
  }
  if (v3 == 16) {
    double v5 = "Above 30mph";
  }
  if (v3 == 1) {
    double v5 = "Below 30mph";
  }
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,BasebandSpeed,timestamp,%f,speedThreshold,0x%02hhx,speedRange,0x%02hhx,scaledValue,0x%02x,reserved,0x%02x,speedThresholdStr,%s,speedRangeStr,%s", *(double *)(a1 + 8), *(double *)(a1 + 24), v3, *(unsigned __int8 *)(a1 + 33), *(unsigned __int8 *)(a1 + 34), *(unsigned __int8 *)(a1 + 35), v5, v6);
  return std::string::assign(a2, __str);
}

std::string *sub_100B56AB0(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,VibrationEvent,isDeviceVibrating,%d", *(double *)(a1 + 8), *(unsigned __int8 *)(a1 + 18));
  return std::string::assign(a2, __str);
}

std::string *sub_100B56B34(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,StepCadenceToStrideLengthBin,bin,%d,begin,%.3lf,end,%.3lf,state,%d,strideLength,%.3lf", *(double *)(a1 + 8), *(_DWORD *)(a1 + 20), *(double *)(a1 + 24), *(double *)(a1 + 32), *(_DWORD *)(a1 + 40), *(double *)(a1 + 48));
  return std::string::assign(a2, __str);
}

std::string *sub_100B56BD0(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,WatchOrientationSettings,wrist,%d,crown,%d", *(double *)(a1 + 8), *(unsigned __int8 *)(a1 + 18), *(unsigned __int8 *)(a1 + 19));
  return std::string::assign(a2, __str);
}

std::string *sub_100B56C58(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,MotionWifiAssociation,isWifiAssociated,%d", *(double *)(a1 + 8), *(unsigned __int8 *)(a1 + 18));
  return std::string::assign(a2, __str);
}

std::string *sub_100B56CDC(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,MotionLoiData,longitude,%f,latitude,%f,departureDate,%.3lf,arrivalDate,%.3lf,horizontalAccuracy,%.3lf,confidence,%d", *(double *)(a1 + 8), *(double *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(unsigned __int8 *)(a1 + 64));
  return std::string::assign(a2, __str);
}

std::string *sub_100B56D74(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,OdometerWithAltitude,startTime,%.3lf,accuracy,%.3lf,distance,%.3lf,gpsAltitude,%.3lf,speed,%.3lf,rawSpeed,%.3lf,odometer,%.3lf,gpsSpeedAccuracy,%.3lf,timestampGPS,%.3lf,origin,%d,quality,%d,groundAltitude,%.3lf,groundAltitudeUncertainty,%.3lf,smoothedGPSAltitude,%.3lf,smoothedGPSAltitudeUncertainty,%.3lf", *(double *)(a1 + 8), *(double *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(_DWORD *)(a1 + 96), *(_DWORD *)(a1 + 100), *(double *)(a1 + 104), *(double *)(a1 + 112),
    *(double *)(a1 + 120),
    *(double *)(a1 + 128));
  return std::string::assign(a2, __str);
}

std::string *sub_100B56E2C(uint64_t a1, std::string *a2)
{
  snprintf(__str, 0x400uLL, "STATUS,SENSOR,Time,%.3lf,Type,OdometerWithAltitudeAndRadians,startTime,%.3lf,accuracy,%.3lf,distance,%.3lf,gpsAltitude,%.3lf,speed,%.3lf,rawSpeed,%.3lf,odometer,%.3lf,gpsSpeedAccuracy,%.3lf,timestampGPS,%.3lf,origin,%d,quality,%d,groundAltitude,%.3lf,groundAltitudeUncertainty,%.3lf,smoothedGPSAltitude,%.3lf,smoothedGPSAltitudeUncertainty,%.3lf,gpsCourseRadians,%.3lf,gpsCourseAccuracy,%.3lf", *(double *)(a1 + 8), *(double *)(a1 + 24), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(_DWORD *)(a1 + 96), *(_DWORD *)(a1 + 100), *(double *)(a1 + 104),
    *(double *)(a1 + 112),
    *(double *)(a1 + 120),
    *(double *)(a1 + 128),
    *(double *)(a1 + 136),
    *(double *)(a1 + 144));
  return std::string::assign(a2, __str);
}

void sub_100B56EE8()
{
}

uint64_t sub_100B56EFC()
{
  return 35;
}

void sub_100B56F04()
{
}

uint64_t sub_100B56F18()
{
  return 41;
}

void sub_100B56F20()
{
}

uint64_t sub_100B56F34()
{
  return 38;
}

void sub_100B56F3C()
{
}

uint64_t sub_100B56F50()
{
  return 19;
}

void sub_100B56F58()
{
}

uint64_t sub_100B56F6C()
{
  return 44;
}

uint64_t sub_100B56F74()
{
  return 20;
}

void sub_100B56F7C()
{
}

uint64_t sub_100B56F90()
{
  return 72;
}

void sub_100B56F98()
{
}

uint64_t sub_100B56FAC()
{
  return 76;
}

void sub_100B56FB4()
{
}

uint64_t sub_100B56FC8()
{
  return 31;
}

void sub_100B56FD0()
{
}

uint64_t sub_100B56FE4()
{
  return 27;
}

void sub_100B56FEC()
{
}

void sub_100B57000()
{
}

uint64_t sub_100B57014()
{
  return 102;
}

void sub_100B5701C()
{
}

uint64_t sub_100B57030()
{
  return 84;
}

void sub_100B57038()
{
}

uint64_t sub_100B5704C()
{
  return 32;
}

void sub_100B57054()
{
}

uint64_t sub_100B57068()
{
  return 98;
}

void sub_100B57070()
{
}

uint64_t sub_100B57084()
{
  return 95;
}

void sub_100B5708C()
{
}

uint64_t sub_100B570A0()
{
  return 252;
}

void sub_100B570A8()
{
}

uint64_t sub_100B570BC()
{
  return 59;
}

void sub_100B570C4()
{
}

void sub_100B570D8()
{
}

uint64_t sub_100B570EC()
{
  return 68;
}

void sub_100B570F4()
{
}

uint64_t sub_100B57108()
{
  return 47;
}

void sub_100B57110()
{
}

uint64_t sub_100B57124()
{
  return 16;
}

void sub_100B5712C()
{
}

void sub_100B57140()
{
}

uint64_t sub_100B57154(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 32) - 1;
  if (v1 >= 0xB) {
    sub_101A7F7B4();
  }
  return *(unsigned int *)&aB_4[4 * (char)v1];
}

void sub_100B5718C()
{
}

uint64_t sub_100B571A0(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 18);
  if (v1 == 1) {
    return 32;
  }
  if (v1 != 2) {
    sub_101A7F7E0();
  }
  return 33;
}

void sub_100B571D8()
{
}

uint64_t sub_100B571EC(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 32) - 1;
  if (v1 >= 3) {
    sub_101A7F80C();
  }
  return dword_101D81390[(char)v1];
}

void sub_100B57224()
{
}

uint64_t sub_100B57238()
{
  return 43;
}

void sub_100B57240()
{
}

void sub_100B57254()
{
}

uint64_t sub_100B57268(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 80) - 1;
  if (v1 >= 3) {
    sub_101A7F838();
  }
  return dword_101D8139C[(char)v1];
}

uint64_t sub_100B572A0()
{
  return 17;
}

void sub_100B572A8()
{
}

uint64_t sub_100B572BC()
{
  return 56;
}

void sub_100B572C4()
{
}

uint64_t sub_100B572D8()
{
  return 127;
}

void sub_100B572E0()
{
}

uint64_t sub_100B572F4()
{
  return 143;
}

void sub_100B572FC()
{
}

uint64_t sub_100B57310()
{
  return 40;
}

void sub_100B57318()
{
}

uint64_t sub_100B5732C()
{
  return 25;
}

void sub_100B57334()
{
}

uint64_t sub_100B57348()
{
  return 155;
}

void sub_100B57350(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_100B57684(id *a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      double v13 = objc_alloc_init(CLCKVO2MaxCalorimetryInput);
      [a1 addInputs:v13];

      if (!PBReaderPlaceMark() || (sub_100D504A8((uint64_t)v13, a2) & 1) == 0) {
        return 0;
      }
      PBReaderRecallMark();
    }
    else if ((v6 >> 3) == 1)
    {
      String = (void *)PBReaderReadString();

      a1[2] = String;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100B57D9C(uint64_t a1)
{
  return a1;
}

std::string *sub_100B57DD0(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 32), a2);
}

uint64_t sub_100B57DD8(uint64_t a1, unint64_t a2, unint64_t a3, void *a4, double a5)
{
  *(void *)a1 = a2;
  if (a2) {
    double v6 = (double)a3 / (double)a2;
  }
  else {
    double v6 = 0.0;
  }
  *(double *)(a1 + 8) = v6;
  *(double *)(a1 + 16) = a5;
  *(void *)(a1 + 24) = *a4;
  uint64_t result = rand();
  HIDWORD(v8) = -1030792151 * result + 85899344;
  LODWORD(v8) = HIDWORD(v8);
  if ((v8 >> 2) <= 0x28F5C28)
  {
    return sub_100B57E6C((unsigned int *)a1);
  }
  return result;
}

uint64_t sub_100B57E6C(unsigned int *a1)
{
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022E79F8);
  }
  uint64_t v2 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = a1 + 8;
    if (*((char *)a1 + 55) < 0) {
      int v3 = (void *)*v3;
    }
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *((void *)a1 + 1);
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 3);
    *(_DWORD *)long long buf = 136447234;
    double v17 = v3;
    __int16 v18 = 2050;
    uint64_t v19 = v4;
    __int16 v20 = 2050;
    uint64_t v21 = v5;
    __int16 v22 = 2050;
    uint64_t v23 = v6;
    __int16 v24 = 2050;
    uint64_t v25 = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "WifiAssociatedApHarvestDatabaseAnalytics, %{public}s, %{public}zu APs, average number of samples, %{public}.1f, current associated AP has oldest sample age of %{public}.1f hours, latest sample age of %{public}.1f seconds", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022E79F8);
    }
    int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiAssociatedApHarvestDatabaseAnalytics::sendCoreAnalyticsEvent()", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  id v8 = +[NSMutableDictionary dictionary];
  [v8 setObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *a1) forKeyedSubscript:@"numAssociatedAps"];
  LODWORD(v9) = llround(*((double *)a1 + 1));
  [v8 setObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v9) forKeyedSubscript:@"averageNumSamples"];
  int v10 = a1 + 8;
  if (*((char *)a1 + 55) < 0) {
    int v10 = (void *)*v10;
  }
  [v8 setObject:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10) forKeyedSubscript:@"harvestType"];
  double v12 = *((double *)a1 + 2);
  if (v12 >= 0.0)
  {
    LODWORD(v11) = llround(v12);
    [v8 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11)] forKeyedSubscript:@"oldestSampleAgeInHoursOfCurrentAssociatedAp"];
  }
  double v13 = *((double *)a1 + 3);
  if (v13 >= 0.0)
  {
    LODWORD(v11) = llround(v13);
    [v8 setObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11) forKeyedSubscript:@"latestSampleAgeInSecondsOfCurrentAssociatedAp"];
  }
  return AnalyticsSendEventLazy();
}

uint64_t sub_100B581CC(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_100B581D4(id a1)
{
  off_1024195E8 = os_log_create("com.apple.locationd.Utility", "Database");
}

void sub_100B5883C(id a1)
{
  qword_1024191F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

uint64_t sub_100B5886C()
{
  sub_10048B72C((uint64_t)v18);
  *(_DWORD *)((char *)&v18[1] + *(void *)(v18[0] - 24)) = *(_DWORD *)((unsigned char *)&v18[1] + *(void *)(v18[0] - 24)) & 0xFFFFFEFB | 4;
  sub_100132EFC(v18, (uint64_t)"Model2a,", 8);
  uint64_t v0 = (void *)std::ostream::operator<<();
  sub_100132EFC(v0, (uint64_t)",", 1);
  unsigned int v1 = (void *)std::ostream::operator<<();
  uint64_t v2 = sub_100132EFC(v1, (uint64_t)",", 1);
  sub_100132EFC(v2, (uint64_t)"Model2b,", 8);
  int v3 = (void *)std::ostream::operator<<();
  sub_100132EFC(v3, (uint64_t)",", 1);
  uint64_t v4 = (void *)std::ostream::operator<<();
  uint64_t v5 = sub_100132EFC(v4, (uint64_t)",", 1);
  sub_100132EFC(v5, (uint64_t)"Model3a,", 8);
  uint64_t v6 = (void *)std::ostream::operator<<();
  sub_100132EFC(v6, (uint64_t)",", 1);
  uint64_t v7 = (void *)std::ostream::operator<<();
  sub_100132EFC(v7, (uint64_t)",", 1);
  id v8 = (void *)std::ostream::operator<<();
  uint64_t v9 = sub_100132EFC(v8, (uint64_t)",", 1);
  sub_100132EFC(v9, (uint64_t)"Model3b,", 8);
  int v10 = (void *)std::ostream::operator<<();
  sub_100132EFC(v10, (uint64_t)",", 1);
  uint64_t v11 = (void *)std::ostream::operator<<();
  sub_100132EFC(v11, (uint64_t)",", 1);
  double v12 = (void *)std::ostream::operator<<();
  double v13 = sub_100132EFC(v12, (uint64_t)",", 1);
  sub_100132EFC(v13, (uint64_t)"Model4,", 7);
  double v14 = (void *)std::ostream::operator<<();
  sub_100132EFC(v14, (uint64_t)",", 1);
  int v15 = (void *)std::ostream::operator<<();
  sub_100132EFC(v15, (uint64_t)",", 1);
  double v16 = (void *)std::ostream::operator<<();
  sub_100132EFC(v16, (uint64_t)",", 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_100B58B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10048B8C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100B58BA0(uint64_t a1)
{
  *(void *)(a1 + 8) = *(void *)a1;
  uint64_t v2 = (uint64_t *)(a1 + 8);
  sub_10017C3FC((void **)a1, 0xEuLL);
  long long v46 = xmmword_101D81450;
  long long __src = xmmword_101D81440;
  long long v43 = xmmword_101D81480;
  uint64_t v44 = 0x4031F9C39BCBA301;
  uint64_t v41 = 0x3FF02C4F7EC3547ELL;
  v39[0] = xmmword_101D814B0;
  v39[1] = unk_101D814C0;
  long long v40 = xmmword_101D81498;
  sub_100B5B760(a1, *v2, (char *)&__src, v48, 2);
  sub_100B5B760(a1, *v2, (char *)&v46, (char *)&__src, 2);
  sub_100B5B760(a1, *v2, (char *)&v43, v45, 3);
  sub_100B5B760(a1, *v2, (char *)&v40, v42, 3);
  sub_100B5B760(a1, *v2, (char *)v39, (char *)&v40, 4);
  *(void *)(a1 + 32) = *(void *)(a1 + 24);
  sub_10017C3FC((void **)(a1 + 24), 0xEuLL);
  long long v37 = xmmword_101D81470;
  long long v38 = xmmword_101D81460;
  long long v34 = xmmword_101D814D0;
  uint64_t v35 = 0x4042258EB8950764;
  long long v31 = xmmword_101D814E8;
  uint64_t v32 = 0x3FF0355FFE6D58C9;
  v30[0] = xmmword_101D81500;
  v30[1] = unk_101D81510;
  sub_100B5B760(a1 + 24, *(void *)(a1 + 32), (char *)&v38, (char *)v39, 2);
  sub_100B5B760(a1 + 24, *(void *)(a1 + 32), (char *)&v37, (char *)&v38, 2);
  sub_100B5B760(a1 + 24, *(void *)(a1 + 32), (char *)&v34, v36, 3);
  sub_100B5B760(a1 + 24, *(void *)(a1 + 32), (char *)&v31, v33, 3);
  sub_100B5B760(a1 + 24, *(void *)(a1 + 32), (char *)v30, (char *)&v31, 4);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022E7A38);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void **)a1;
    uint64_t v4 = *(void *)(a1 + 8);
    sub_100B5886C();
    sub_100B5886C();
    uint64_t v6 = v19;
    if (v22 < 0) {
      uint64_t v6 = *(unsigned char **)v19;
    }
    *(_DWORD *)long long buf = 134349570;
    if (v18 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    uint64_t v25 = (v4 - (uint64_t)v5) >> 3;
    __int16 v26 = 2082;
    double v27 = v6;
    __int16 v28 = 2082;
    BOOL v29 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "GPSODOM,MA-OTA,DistanceMultiplier,Default Model Coefficients,Size,%{public}lu,HikeWalk,%{public}s,Run,%{public}s", buf, 0x20u);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v22) < 0) {
      operator delete(*(void **)v19);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7A38);
    }
    uint64_t v9 = *(void **)a1;
    uint64_t v8 = *(void *)(a1 + 8);
    sub_100B5886C();
    int v10 = v18;
    uint64_t v11 = (void **)__p[0];
    sub_100B5886C();
    double v12 = __p;
    if (v10 < 0) {
      double v12 = v11;
    }
    *(_DWORD *)char v19 = 134349570;
    if (v16 >= 0) {
      double v13 = &v15;
    }
    else {
      double v13 = v15;
    }
    *(void *)&void v19[4] = (v8 - (uint64_t)v9) >> 3;
    __int16 v20 = 2082;
    uint64_t v21 = v12;
    __int16 v22 = 2082;
    uint64_t v23 = v13;
    double v14 = (char *)_os_log_send_and_compose_impl();
    if (v16 < 0) {
      operator delete(v15);
    }
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDistanceMultiplierSettings::setDefaults()", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
}

void sub_100B59064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B5909C(uint64_t a1, uint64_t a2)
{
  sub_1000E9354(v57);
  if (sub_100012960(a2, "RhythmicDistanceMultiplierSettings", v57))
  {
    sub_100B58BA0(a1);
    sub_1000E9354(v56);
    if (!sub_100012960((uint64_t)v57, "ModelCoefficients", v56) || *(void *)a1 == *(void *)(a1 + 8)) {
      goto LABEL_63;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7A38);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "GPSODOM,MA-OTA,DistanceMultiplier,Read model coefficients from settings", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022E7A38);
      }
      LOWORD(v49) = 0;
      double v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDistanceMultiplierSettings::readConfig(const CLNameValuePair &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v49 = 0u;
    sub_100134750(__p, "DistanceMultiplierModel2a_1");
    *(void *)&long long v49 = sub_100B59C24((uint64_t)v56, (const char *)__p, *(double *)&v49, -0.1, 20.0);
    if (v48 < 0) {
      operator delete(__p[0]);
    }
    sub_100134750(v45, "DistanceMultiplierModel2a_2");
    *((void *)&v49 + 1) = sub_100B59C24((uint64_t)v56, (const char *)v45, *((double *)&v49 + 1), -0.1, 20.0);
    if (v46 < 0) {
      operator delete(v45[0]);
    }
    sub_100134750(v43, "DistanceMultiplierModel2b_1");
    *(void *)&long long v50 = sub_100B59C24((uint64_t)v56, (const char *)v43, *(double *)&v50, -0.1, 20.0);
    if (v44 < 0) {
      operator delete(v43[0]);
    }
    sub_100134750(v41, "DistanceMultiplierModel2b_2");
    *((void *)&v50 + 1) = sub_100B59C24((uint64_t)v56, (const char *)v41, *((double *)&v50 + 1), -0.1, 20.0);
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    sub_100134750(v39, "DistanceMultiplierModel3a_1");
    *(void *)&long long v51 = sub_100B59C24((uint64_t)v56, (const char *)v39, *(double *)&v51, -0.1, 20.0);
    if (v40 < 0) {
      operator delete(v39[0]);
    }
    sub_100134750(v37, "DistanceMultiplierModel3a_2");
    *((void *)&v51 + 1) = sub_100B59C24((uint64_t)v56, (const char *)v37, *((double *)&v51 + 1), -0.1, 20.0);
    if (v38 < 0) {
      operator delete(v37[0]);
    }
    sub_100134750(v35, "DistanceMultiplierModel3a_3");
    *(void *)&long long v52 = sub_100B59C24((uint64_t)v56, (const char *)v35, *(double *)&v52, -0.1, 20.0);
    if (v36 < 0) {
      operator delete(v35[0]);
    }
    sub_100134750(v33, "DistanceMultiplierModel3b_1");
    *((void *)&v52 + 1) = sub_100B59C24((uint64_t)v56, (const char *)v33, *((double *)&v52 + 1), -0.1, 20.0);
    if (v34 < 0) {
      operator delete(v33[0]);
    }
    sub_100134750(v31, "DistanceMultiplierModel3b_2");
    *(void *)&long long v53 = sub_100B59C24((uint64_t)v56, (const char *)v31, *(double *)&v53, -0.1, 20.0);
    if (v32 < 0) {
      operator delete(v31[0]);
    }
    sub_100134750(v29, "DistanceMultiplierModel3b_3");
    *((void *)&v53 + 1) = sub_100B59C24((uint64_t)v56, (const char *)v29, *((double *)&v53 + 1), -0.1, 20.0);
    if (v30 < 0) {
      operator delete(v29[0]);
    }
    sub_100134750(v27, "DistanceMultiplierModel4_1");
    *(void *)&long long v54 = sub_100B59C24((uint64_t)v56, (const char *)v27, *(double *)&v54, -0.1, 20.0);
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    sub_100134750(v25, "DistanceMultiplierModel4_2");
    *((void *)&v54 + 1) = sub_100B59C24((uint64_t)v56, (const char *)v25, *((double *)&v54 + 1), -0.1, 20.0);
    if (v26 < 0) {
      operator delete(v25[0]);
    }
    sub_100134750(v23, "DistanceMultiplierModel4_3");
    *(void *)&long long v55 = sub_100B59C24((uint64_t)v56, (const char *)v23, *(double *)&v55, -0.1, 20.0);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    sub_100134750(v21, "DistanceMultiplierModel4_4");
    *((void *)&v55 + 1) = sub_100B59C24((uint64_t)v56, (const char *)v21, *((double *)&v55 + 1), -0.1, 20.0);
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    char v18 = 0;
    char v19 = 0;
    uint64_t v20 = 0;
    sub_1001DD364(&v18, &v49, (uint64_t)v56, 0xEuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7A38);
    }
    uint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      sub_100B5886C();
      uint64_t v6 = v63 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)BOOL v58 = 136446210;
      *(void *)&v58[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "GPSODOM,MA-OTA,DistanceMultiplier,Model Coefficients from Mobile Asset,%{public}s", v58, 0xCu);
      if (v63 < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022E7A38);
      }
      sub_100B5886C();
      if (v59 >= 0) {
        int v15 = v58;
      }
      else {
        int v15 = *(unsigned char **)v58;
      }
      int v60 = 136446210;
      int v61 = v15;
      char v16 = (char *)_os_log_send_and_compose_impl();
      if (v59 < 0) {
        operator delete(*(void **)v58);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDistanceMultiplierSettings::readConfig(const CLNameValuePair &)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    uint64_t v7 = (v19 - (unsigned char *)v18) >> 3;
    uint64_t v8 = (*(void *)(a1 + 8) - *(void *)a1) >> 3;
    if (v7 == v8)
    {
      if (&v18 != (void **)a1) {
        sub_1002DD194((char *)a1, (char *)v18, (uint64_t)v19, (v19 - (unsigned char *)v18) >> 3);
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022E7A38);
      }
      uint64_t v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "GPSODOM,MA-OTA,DistanceMultiplier,Model Coefficients Size Mismatch", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022E7A38);
        }
        *(_WORD *)BOOL v58 = 0;
        double v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLDistanceMultiplierSettings::readConfig(const CLNameValuePair &)", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
    }
    if (v18)
    {
      char v19 = v18;
      operator delete(v18);
    }
    if (v7 == v8) {
LABEL_63:
    }
      uint64_t v10 = 1;
    else {
      uint64_t v10 = 0;
    }
    sub_10013F3C4(v56);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7A38);
    }
    uint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "GPSODOM,MA-OTA,DistanceMultiplier,RhythmicDistanceMultiplierSettings settings not available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022E7A38);
      }
      LOWORD(v49) = 0;
      double v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDistanceMultiplierSettings::readConfig(const CLNameValuePair &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    uint64_t v10 = 0;
  }
  sub_10013F3C4(v57);
  return v10;
}

void sub_100B59AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10013F3C4(&a71);
  sub_10013F3C4(&STACK[0x200]);
  _Unwind_Resume(a1);
}

double sub_100B59C24(uint64_t a1, const char *a2, double a3, double a4, double a5)
{
  double v7 = a3;
  uint64_t v8 = (uint64_t *)a2;
  double v14 = a3;
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  if (sub_1000A699C(a1, a2, &v14))
  {
    if (v14 >= a4 && v14 <= a5)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022E7A38);
      }
      uint64_t v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = v8;
        if (*((char *)v8 + 23) < 0) {
          uint64_t v11 = (uint64_t *)*v8;
        }
        *(_DWORD *)long long buf = 136446466;
        uint64_t v20 = v11;
        __int16 v21 = 1026;
        int v22 = (int)v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "GPSODOM,MA-OTA,CLGpsOdometryMobileAssetReader,read,%{public}s,value,%{public}d", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022E7A38);
        }
        if (*((char *)v8 + 23) < 0) {
          uint64_t v8 = (uint64_t *)*v8;
        }
        int v15 = 136446466;
        char v16 = v8;
        __int16 v17 = 1026;
        int v18 = (int)v14;
        double v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "T getField(const CLNameValuePair &, const std::string, T, T, T) [T = double]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      return v14;
    }
  }
  return v7;
}

void *sub_100B59E68@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_1001DD364(a2, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
}

void *sub_100B59E84@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_1001DD364(a2, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
}

void sub_100B59EA0(double *a1, uint64_t a2)
{
  BOOL v36 = *(unsigned char *)a1;
  if (sub_1000D2988(a2, "Enable", &v36))
  {
    *(unsigned char *)a1 = v36;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7A38);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(unsigned __int8 *)a1;
      *(_DWORD *)long long buf = 67240192;
      int v52 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,MA-OTA,activity enabled,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022E7A38);
      }
      int v22 = *(unsigned __int8 *)a1;
      int v37 = 67240192;
      int v38 = v22;
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMMOdometryActivitySettings::fillFromMobileAssets(const CLNameValuePair &)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
  }
  sub_100134750(__p, "RoadCachingRadiusMin");
  a1[1] = sub_100B59C24(a2, (const char *)__p, a1[1], 50.0, 3000.0);
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  sub_100134750(v32, "RoadCachingRadiusMax");
  a1[2] = sub_100B59C24(a2, (const char *)v32, a1[2], 50.0, 3000.0);
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  sub_100134750(v30, "AStarSearchRadiusMin");
  a1[5] = sub_100B59C24(a2, (const char *)v30, a1[5], 50.0, 3000.0);
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  sub_100134750(v28, "AStarSearchRadiusMax");
  a1[6] = sub_100B59C24(a2, (const char *)v28, a1[6], 50.0, 3000.0);
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  sub_100134750(v26, "SnappingRadiusMin");
  a1[3] = sub_100B59C24(a2, (const char *)v26, a1[3], 50.0, 3000.0);
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  sub_100134750(v24, "SnappingRadiusMax");
  a1[4] = sub_100B59C24(a2, (const char *)v24, a1[4], 50.0, 3000.0);
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022E7A38);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    int v7 = *(unsigned __int8 *)a1;
    uint64_t v8 = *((void *)a1 + 1);
    uint64_t v9 = *((void *)a1 + 2);
    uint64_t v10 = *((void *)a1 + 3);
    uint64_t v11 = *((void *)a1 + 4);
    uint64_t v12 = *((void *)a1 + 5);
    uint64_t v13 = *((void *)a1 + 6);
    *(_DWORD *)long long buf = 67241728;
    int v52 = v7;
    __int16 v53 = 2050;
    uint64_t v54 = v8;
    __int16 v55 = 2050;
    uint64_t v56 = v9;
    __int16 v57 = 2050;
    uint64_t v58 = v10;
    __int16 v59 = 2050;
    uint64_t v60 = v11;
    __int16 v61 = 2050;
    uint64_t v62 = v12;
    __int16 v63 = 2050;
    uint64_t v64 = v13;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "GPSODOM-MM,MA-OTA,settings,enable,%{public}d,roadCache,%{public}.2lf,%{public}.2lf,snapRadius,%{public}.2lf,%{public}.2lf,aSearch,%{public}.2lf,%{public}.2lf", buf, 0x44u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7A38);
    }
    int v14 = *(unsigned __int8 *)a1;
    uint64_t v15 = *((void *)a1 + 1);
    uint64_t v16 = *((void *)a1 + 2);
    uint64_t v17 = *((void *)a1 + 3);
    uint64_t v18 = *((void *)a1 + 4);
    uint64_t v19 = *((void *)a1 + 5);
    uint64_t v20 = *((void *)a1 + 6);
    int v37 = 67241728;
    int v38 = v14;
    __int16 v39 = 2050;
    uint64_t v40 = v15;
    __int16 v41 = 2050;
    uint64_t v42 = v16;
    __int16 v43 = 2050;
    uint64_t v44 = v17;
    __int16 v45 = 2050;
    uint64_t v46 = v18;
    __int16 v47 = 2050;
    uint64_t v48 = v19;
    __int16 v49 = 2050;
    uint64_t v50 = v20;
    __int16 v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMMOdometryActivitySettings::fillFromMobileAssets(const CLNameValuePair &)", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
}

void sub_100B5A3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

double sub_100B5A474(uint64_t a1)
{
  int v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v2 = sub_100B5B970((uint64_t **)a1, &v8, (uint64_t)&unk_101D0B290, &v9);
  v2[11] = 0;
  *(_OWORD *)(v2 + 9) = 0u;
  *(_OWORD *)(v2 + 7) = 0u;
  *(_OWORD *)(v2 + 5) = 0u;
  int v8 = 0;
  uint64_t v9 = &v8;
  *((unsigned char *)sub_100B5B970((uint64_t **)a1, &v8, (uint64_t)&unk_101D0B290, &v9) + 40) = 1;
  int v8 = 0;
  uint64_t v9 = &v8;
  *((_OWORD *)sub_100B5B970((uint64_t **)a1, &v8, (uint64_t)&unk_101D0B290, &v9) + 3) = xmmword_101D813C0;
  int v7 = 0;
  uint64_t v9 = &v7;
  *((_OWORD *)sub_100B5B970((uint64_t **)a1, &v7, (uint64_t)&unk_101D0B290, &v9) + 5) = xmmword_101D813D0;
  int v6 = 0;
  uint64_t v9 = &v6;
  *((_OWORD *)sub_100B5B970((uint64_t **)a1, &v6, (uint64_t)&unk_101D0B290, &v9) + 4) = xmmword_101D813E0;
  int v8 = 1;
  uint64_t v9 = &v8;
  int v3 = sub_100B5B970((uint64_t **)a1, &v8, (uint64_t)&unk_101D0B290, &v9);
  v3[11] = 0;
  *(_OWORD *)(v3 + 9) = 0u;
  *(_OWORD *)(v3 + 7) = 0u;
  *(_OWORD *)(v3 + 5) = 0u;
  int v8 = 1;
  uint64_t v9 = &v8;
  *((unsigned char *)sub_100B5B970((uint64_t **)a1, &v8, (uint64_t)&unk_101D0B290, &v9) + 40) = 1;
  int v8 = 1;
  uint64_t v9 = &v8;
  *((_OWORD *)sub_100B5B970((uint64_t **)a1, &v8, (uint64_t)&unk_101D0B290, &v9) + 3) = xmmword_101D813F0;
  int v7 = 1;
  uint64_t v9 = &v7;
  *((_OWORD *)sub_100B5B970((uint64_t **)a1, &v7, (uint64_t)&unk_101D0B290, &v9) + 5) = xmmword_101D81400;
  int v6 = 1;
  uint64_t v9 = &v6;
  *((_OWORD *)sub_100B5B970((uint64_t **)a1, &v6, (uint64_t)&unk_101D0B290, &v9) + 4) = xmmword_101D813E0;
  int v8 = 2;
  uint64_t v9 = &v8;
  uint64_t v4 = sub_100B5B970((uint64_t **)a1, &v8, (uint64_t)&unk_101D0B290, &v9);
  v4[11] = 0;
  *(_OWORD *)(v4 + 9) = 0u;
  *(_OWORD *)(v4 + 7) = 0u;
  *(_OWORD *)(v4 + 5) = 0u;
  int v8 = 2;
  uint64_t v9 = &v8;
  *((unsigned char *)sub_100B5B970((uint64_t **)a1, &v8, (uint64_t)&unk_101D0B290, &v9) + 40) = 0;
  int v8 = 2;
  uint64_t v9 = &v8;
  *((_OWORD *)sub_100B5B970((uint64_t **)a1, &v8, (uint64_t)&unk_101D0B290, &v9) + 3) = xmmword_101D81410;
  int v7 = 2;
  uint64_t v9 = &v7;
  *((_OWORD *)sub_100B5B970((uint64_t **)a1, &v7, (uint64_t)&unk_101D0B290, &v9) + 5) = xmmword_101D81420;
  int v6 = 2;
  uint64_t v9 = &v6;
  *((_OWORD *)sub_100B5B970((uint64_t **)a1, &v6, (uint64_t)&unk_101D0B290, &v9) + 4) = xmmword_101D813E0;
  double result = 90.0;
  *(_OWORD *)(a1 + 24) = xmmword_101D81430;
  return result;
}

__n128 sub_100B5A770@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v9 = a2;
  for (uint64_t i = *(uint64_t **)(a1 + 8); i; uint64_t i = (uint64_t *)*i)
  {
    int v5 = *((_DWORD *)i + 8);
    if (v5 <= a2)
    {
      if (v5 >= a2)
      {
        uint64_t v10 = &v9;
        int v6 = sub_100B5B970((uint64_t **)a1, &v9, (uint64_t)&unk_101D0B290, &v10);
        long long v7 = *(_OWORD *)(v6 + 7);
        *(_OWORD *)a3 = *(_OWORD *)(v6 + 5);
        *(_OWORD *)(a3 + 16) = v7;
        __n128 result = *(__n128 *)(v6 + 9);
        *(__n128 *)(a3 + 32) = result;
        *(void *)(a3 + 48) = v6[11];
        return result;
      }
      ++i;
    }
  }
  *(void *)(a3 + 48) = 0;
  result.n128_u64[0] = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  return result;
}

BOOL sub_100B5A810(uint64_t a1, uint64_t a2)
{
  sub_1000E9354(v36);
  BOOL v4 = sub_100012960(a2, "RhythmicMMOdometerSettings", v36);
  if (!v4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7A38);
    }
    long long v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "GPSODOM-MM,MA-OTA,RhythmicMapMatchedOdometerSettings settings not available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022E7A38);
      }
      LOWORD(v35[0]) = 0;
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMMOdometrySettings::readConfig(const CLNameValuePair &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    goto LABEL_63;
  }
  sub_100B5A474(a1);
  sub_1000E9354(v35);
  if (sub_100012960((uint64_t)v36, "Walking", v35))
  {
    for (uint64_t i = *(uint64_t **)(a1 + 8); i; uint64_t i = (uint64_t *)*i)
    {
      int v6 = *((_DWORD *)i + 8);
      if (v6 <= 0)
      {
        if ((v6 & 0x80000000) == 0)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022E7A38);
          }
          int v9 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "GPSODOM-MM,MA-OTA,Read Walking activity settings", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1022E7A38);
            }
            LOWORD(v34[0]) = 0;
            char v30 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMMOdometrySettings::readConfig(const CLNameValuePair &)", "%s\n", v30);
            if (v30 != (char *)buf) {
              free(v30);
            }
          }
          LODWORD(v34[0]) = 0;
          *(void *)long long buf = v34;
          uint64_t v10 = sub_100B5B970((uint64_t **)a1, (int *)v34, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
          sub_100B59EA0((double *)v10 + 5, (uint64_t)v35);
          break;
        }
        ++i;
      }
    }
  }
  sub_1000E9354(v34);
  if (sub_100012960((uint64_t)v36, "Running", v34))
  {
    for (uint64_t j = *(uint64_t **)(a1 + 8); j; uint64_t j = (uint64_t *)*j)
    {
      int v12 = *((_DWORD *)j + 8);
      if (v12 <= 1)
      {
        if (v12 == 1)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022E7A38);
          }
          uint64_t v13 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "GPSODOM-MM,MA-OTA,Read Running activity settings", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1022E7A38);
            }
            LOWORD(v33[0]) = 0;
            char v28 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMMOdometrySettings::readConfig(const CLNameValuePair &)", "%s\n", v28);
            if (v28 != (char *)buf) {
              free(v28);
            }
          }
          LODWORD(v33[0]) = 1;
          *(void *)long long buf = v33;
          int v14 = sub_100B5B970((uint64_t **)a1, (int *)v33, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
          sub_100B59EA0((double *)v14 + 5, (uint64_t)v34);
          break;
        }
        ++j;
      }
    }
  }
  sub_1000E9354(v33);
  if (!sub_100012960((uint64_t)v36, "Cycling", v33)) {
    goto LABEL_50;
  }
  uint64_t v15 = *(uint64_t **)(a1 + 8);
  if (!v15) {
    goto LABEL_50;
  }
  while (1)
  {
    int v16 = *((_DWORD *)v15 + 8);
    if (v16 <= 2) {
      break;
    }
LABEL_42:
    uint64_t v15 = (uint64_t *)*v15;
    if (!v15) {
      goto LABEL_50;
    }
  }
  if (v16 != 2)
  {
    ++v15;
    goto LABEL_42;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022E7A38);
  }
  uint64_t v17 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "GPSODOM-MM,MA-OTA,Read Cycling activity settings", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7A38);
    }
    LOWORD(v37) = 0;
    char v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMMOdometrySettings::readConfig(const CLNameValuePair &)", "%s\n", v29);
    if (v29 != (char *)buf) {
      free(v29);
    }
  }
  int v37 = 2;
  *(void *)long long buf = &v37;
  uint64_t v18 = sub_100B5B970((uint64_t **)a1, &v37, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  sub_100B59EA0((double *)v18 + 5, (uint64_t)v33);
LABEL_50:
  uint64_t v32 = *(void *)(a1 + 24);
  if (sub_1000A699C((uint64_t)v36, "MinTimeSeparationForMapDataRecache", &v32))
  {
    *(void *)(a1 + 24) = v32;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7A38);
    }
    uint64_t v19 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      uint64_t v20 = *(void *)(a1 + 24);
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "GPSODOM-MM,MA-OTA,Read Min time separation settings, %{public}.1lf", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022E7A38);
      }
      uint64_t v24 = *(void *)(a1 + 24);
      int v37 = 134349056;
      uint64_t v38 = v24;
      char v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMMOdometrySettings::readConfig(const CLNameValuePair &)", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
  }
  uint64_t v31 = *(void *)(a1 + 32);
  if (sub_1000A699C((uint64_t)v36, "DistanceBufferForMapDataCache", &v31))
  {
    *(void *)(a1 + 32) = v31;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7A38);
    }
    __int16 v21 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      uint64_t v22 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "GPSODOM-MM,MA-OTA,Read distance buffer settings, %{public}.1lf", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022E7A38);
      }
      uint64_t v26 = *(void *)(a1 + 32);
      int v37 = 134349056;
      uint64_t v38 = v26;
      char v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMMOdometrySettings::readConfig(const CLNameValuePair &)", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
  }
  sub_10013F3C4(v33);
  sub_10013F3C4(v34);
  sub_10013F3C4(v35);
LABEL_63:
  sub_10013F3C4(v36);
  return v4;
}

void sub_100B5B20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_10013F3C4((uint64_t *)va);
  sub_10013F3C4(va1);
  _Unwind_Resume(a1);
}

void sub_100B5B290(uint64_t a1, uint64_t a2)
{
  sub_100B5B57C(a1);
  if ((sub_100B5909C(a1, a2) & 1) == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7A38);
    }
    BOOL v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "GPSODOM,MA-OTA,DistanceMultiplier,Distanace Multiplier config is not available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022E7A38);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  if (!sub_100B5A810(a1 + 48, a2))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7A38);
    }
    int v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "GPSODOM-MM,MA-OTA,RhythmicOdometerMM config not available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022E7A38);
      }
      long long v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_100B5B57C(uint64_t a1)
{
  sub_100B5B6AC(__p);
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  *(_OWORD *)a1 = *(_OWORD *)__p;
  *(void *)(a1 + 16) = v8;
  __p[1] = 0;
  uint64_t v8 = 0;
  __p[0] = 0;
  int v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
    int v3 = __p[0];
  }
  *(_OWORD *)(a1 + 24) = v9;
  *(void *)(a1 + 40) = v10;
  uint64_t v10 = 0;
  long long v9 = 0uLL;
  if (v3)
  {
    __p[1] = v3;
    operator delete(v3);
  }
  sub_100B5B704((uint64_t)__p);
  uint64_t v4 = a1 + 56;
  sub_1000F5BB0(a1 + 48, *(void **)(a1 + 56));
  int v5 = __p[1];
  *(void **)(a1 + 48) = __p[0];
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = v8;
  *(void *)(a1 + 64) = v8;
  if (v6)
  {
    id v5[2] = v4;
    __p[0] = &__p[1];
    __p[1] = 0;
    uint64_t v8 = 0;
    int v5 = 0;
  }
  else
  {
    *(void *)(a1 + 48) = v4;
  }
  *(_OWORD *)(a1 + 72) = v9;
  sub_1000F5BB0((uint64_t)__p, v5);
}

void sub_100B5B67C(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

_OWORD *sub_100B5B6AC(_OWORD *a1)
{
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  sub_100B58BA0((uint64_t)a1);
  return a1;
}

void sub_100B5B6E0(_Unwind_Exception *a1)
{
  int v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(void *)(v1 + 32) = v3;
    operator delete(v3);
  }
  sub_101A5DAEC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100B5B704(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  *(_OWORD *)(a1 + 24) = xmmword_101D81430;
  sub_100B5A474(a1);
  return a1;
}

void sub_100B5B748(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *sub_100B5B760(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  int v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  long long v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    uint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      sub_1001D7FD4();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      uint64_t v18 = (char *)sub_1000DA54C(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    char v28 = &v18[8 * v15];
    uint64_t __p = v18;
    char v34 = v28;
    BOOL v36 = &v18[8 * v17];
    uint64_t v29 = 8 * a5;
    char v30 = &v28[8 * a5];
    do
    {
      uint64_t v31 = *(void *)v7;
      v7 += 8;
      *(void *)char v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    char v35 = v30;
    int v5 = sub_10076C628((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    __int16 v21 = &__src[8 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    uint64_t v24 = &v5[8 * a5];
    char v25 = &v23[-8 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)uint64_t v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  __int16 v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_100B5B938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_100B5B970(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  long long v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        long long v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        long long v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (char *)operator new(0x60uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *((void *)v11 + 11) = 0;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    sub_1000EDF90(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_100B5BA44(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 48) + 48))(*(void *)(a3 + 48));
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void, unsigned char *, double))(**(void **)(a3 + 48) + 24))(*(void *)(a3 + 48), v6, a1);
    if (v6[208])
    {
      sub_100528B3C(*(void *)(a3 + 16), *(double *)(*(void *)(a3 + 16) + 104), *(double *)(*(void *)(a3 + 16) + 112));
      sub_100B5C070(*(void *)(a3 + 24), *(double *)(*(void *)(a3 + 24) + 104), *(double *)(*(void *)(a3 + 24) + 112));
      return sub_100B5C140(*(void *)(a3 + 40), *(double *)(*(void *)(a3 + 40) + 104), *(double *)(*(void *)(a3 + 40) + 112));
    }
  }
  return result;
}

uint64_t sub_100B5BB2C(double a1, uint64_t a2, void **a3)
{
  if (!(*(unsigned int (**)(void *))(*a3[5] + 48))(a3[5])
    || !(*(unsigned int (**)(void *, double))(*a3[2] + 48))(a3[2], a1))
  {
    return 0;
  }
  uint64_t v6 = *(uint64_t (**)(__n128))(*a3[3] + 48);
  v5.n128_f64[0] = a1;

  return v6(v5);
}

void sub_100B5BC00(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 832);
  float v5 = *(double *)(a1 + 648);
  if (v5 <= 8.0) {
    float v7 = *(double *)(a1 + 648);
  }
  else {
    float v7 = 8.0;
  }
  float v8 = 2.0;
  float v6 = *(double *)(a1 + 840);
  if (v6 <= 2.0) {
    float v9 = *(double *)(a1 + 840);
  }
  else {
    float v9 = 2.0;
  }
  float v10 = fmaxf(v7, 0.0);
  if (v9 >= -2.0) {
    float v11 = v9;
  }
  else {
    float v11 = -2.0;
  }
  if (v10 < 0.3 || v10 > 0.5)
  {
    float v8 = 1.5;
    if (v10 >= 0.3) {
      float v8 = (float)(v10 * -0.94) + v10 * v10 * 0.699999988 + 2.29999995;
    }
  }
  float v13 = *(float *)(a1 + 300);
  sub_100B04870(a1, (uint64_t)buf);
  float v14 = *(float *)&v32[6];
  BOOL v16 = *(double *)(a1 + 616) <= 0.0 || *(_DWORD *)(a1 + 832) == 0 || v4 == 3;
  float v17 = *(float *)&v32[6];
  if (!v16)
  {
    if (v4 == 1)
    {
      BOOL v27 = v11 <= 0.0 || v7 <= 0.0;
      float v17 = (float)(v8 * 2.4) + (float)(v11 * 4.4);
      if (v27) {
        float v17 = v8;
      }
      if (v17 < *(float *)&v32[6]) {
        float v17 = *(float *)&v32[6];
      }
    }
    else if (v8 >= *(float *)&v32[6])
    {
      float v17 = v8;
    }
    else
    {
      float v17 = *(float *)&v32[6];
    }
  }
  if (v17 >= 1.5) {
    float v18 = v17;
  }
  else {
    float v18 = 1.5;
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022E7AA8);
  }
  uint64_t v19 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    double v20 = *(double *)(a1 + 120);
    double v21 = *(double *)(a1 + 128);
    BOOL v22 = *(double *)(a1 + 616) > 0.0;
    BOOL v23 = *(_DWORD *)(a1 + 832) != 0;
    *(_DWORD *)long long buf = 134220800;
    double v30 = v20;
    __int16 v31 = 2048;
    *(double *)uint64_t v32 = v21;
    *(_WORD *)&v32[8] = 2048;
    double v33 = v21 - v20;
    __int16 v34 = 2048;
    double v35 = v10;
    __int16 v36 = 1024;
    BOOL v37 = v22;
    __int16 v38 = 1024;
    BOOL v39 = v23;
    __int16 v40 = 2048;
    double v41 = v13;
    __int16 v42 = 2048;
    double v43 = v11;
    __int16 v44 = 1024;
    int v45 = v4;
    __int16 v46 = 2048;
    double v47 = v8;
    __int16 v48 = 2048;
    double v49 = v14;
    __int16 v50 = 2048;
    double v51 = v18;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "OutdoorWheelchair, beginTime, %f, endTime, %f, duration(s), %f,gpsSpeed,%.2f, gpsAvail, %d, elevAvail, %d, pushVM,%.1f, verticalSpeed, %.3f, gradeType, %d, metsFromGps,%.1f, metsFromPushes, %.1f, mets, %.1f", buf, 0x6Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022E7AA8);
    }
    char v28 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLCalorieOutdoorWheelchairModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v28);
    if (v28 != (char *)buf) {
      free(v28);
    }
  }
  if (*(void *)(a1 + 344) == 21) {
    int v24 = 18;
  }
  else {
    int v24 = 17;
  }
  float v25 = 16.0;
  if (v18 <= 16.0) {
    float v25 = v18;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(float *)(a2 + 20) = v25;
  *(_DWORD *)(a2 + 24) = 0;
  *(float *)(a2 + 12) = v25;
  *(float *)(a2 + 28) = v25;
  if (v18 == 1.8) {
    int v26 = 3;
  }
  else {
    int v26 = 0;
  }
  *(_DWORD *)(a2 + 32) = v26;
  *(_DWORD *)(a2 + 36) = v24;
}

BOOL sub_100B5C070(uint64_t a1, double a2, double a3)
{
  if (*(unsigned char *)(a1 + 80))
  {
    BOOL result = 1;
  }
  else if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1))
  {
    *(double *)(a1 + 72) = a2;
    BOOL result = 1;
    *(unsigned char *)(a1 + 80) = 1;
    *(unsigned char *)(a1 + 120) = 0;
  }
  else
  {
    BOOL result = *(unsigned char *)(a1 + 80) != 0;
  }
  double v7 = a2 + a3;
  if (*(double *)(a1 + 88) >= a2 + a3) {
    double v7 = *(double *)(a1 + 88);
  }
  *(double *)(a1 + 88) = v7;
  return result;
}

void sub_100B5C110(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

BOOL sub_100B5C140(uint64_t a1, double a2, double a3)
{
  if (*(unsigned char *)(a1 + 80))
  {
    BOOL result = 1;
  }
  else if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1))
  {
    *(double *)(a1 + 72) = a2;
    BOOL result = 1;
    *(unsigned char *)(a1 + 80) = 1;
    *(unsigned char *)(a1 + 120) = 0;
  }
  else
  {
    BOOL result = *(unsigned char *)(a1 + 80) != 0;
  }
  double v7 = a2 + a3;
  if (*(double *)(a1 + 88) >= a2 + a3) {
    double v7 = *(double *)(a1 + 88);
  }
  *(double *)(a1 + 88) = v7;
  return result;
}

uint64_t sub_100B5C1E0(uint64_t a1)
{
  *(void *)(a1 + 144) = a1 + 144;
  *(void *)(a1 + 152) = a1 + 144;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)a1 = 0;
  return a1;
}

void sub_100B5C21C(uint64_t a1, int a2, unsigned __int8 *src)
{
  *(_DWORD *)a1 = a2;
  uuid_copy((unsigned __int8 *)(a1 + 168), src);
}

void sub_100B5C228(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  uuid_clear((unsigned __int8 *)(a1 + 168));
}

double sub_100B5C230(uint64_t a1)
{
  *(void *)a1 = off_1022E7AD8;
  *(void *)(a1 + 8) = 0x1000000000;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 233) = 0;
  *(unsigned char *)(a1 + 244) = 1;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 272) = 0x2000000000;
  *(void *)(a1 + 408) = 0;
  *(_WORD *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 420) = 973279855;
  *(int32x2_t *)(a1 + 424) = vdup_n_s32(0x3A03126Fu);
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 1;
  *(_DWORD *)(a1 + 480) = 32;
  *(_DWORD *)(a1 + 492) = 0;
  *(void *)(a1 + 484) = 0;
  *(_DWORD *)(a1 + 496) = 1065353216;
  *(unsigned char *)(a1 + 500) = 0;
  *(void *)(a1 + 504) = 0xA00000000;
  *(_DWORD *)(a1 + 672) = 1065353216;
  *(void *)(a1 + 680) = 0x500000000;
  *(void *)(a1 + 728) = 0x500000000;
  *(_DWORD *)(a1 + 208) = 0;
  *(void *)(a1 + 813) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  *(void *)&double result = 1003306496;
  *(_OWORD *)(a1 + 212) = xmmword_101D81580;
  return result;
}

int32x2_t sub_100B5C310(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(void *)(a1 + 408) = 0;
  *(unsigned char *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 452) = 0;
  *(void *)(a1 + 444) = 0;
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(unsigned char *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_DWORD *)(a1 + 816) = 0;
  *(_DWORD *)(a1 + 420) = 973279855;
  int32x2_t result = vdup_n_s32(0x3A03126Fu);
  *(int32x2_t *)(a1 + 424) = result;
  *(void *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(void *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 244) = 1;
  *(void *)(a1 + 484) = 0;
  *(void *)(a1 + 492) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 504) = 0;
  *(unsigned char *)(a1 + 500) = 0;
  *(_DWORD *)(a1 + 672) = 1065353216;
  *(_DWORD *)(a1 + 680) = 0;
  *(_DWORD *)(a1 + 728) = 0;
  *(unsigned char *)(a1 + 820) = 0;
  return result;
}

void sub_100B5C3AC(_DWORD *a1, unsigned int a2)
{
  a1[117] = a2;
  if (a2)
  {
    a1[118] = 1;
    a1[120] = 32;
    float v3 = (float)a2;
    float v4 = 5000.0 / (float)a2;
    BOOL v5 = v4 < 1.0;
    if (v4 < 1.0) {
      float v4 = v4 * 32.0;
    }
    uint64_t v6 = 118;
    if (v5) {
      uint64_t v6 = 120;
    }
    a1[v6] = v4;
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022E7B20);
    }
    double v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v8 = a1[118];
      int v9 = a1[120];
      *(_DWORD *)long long buf = 134218496;
      double v12 = (float)(1000000.0 / v3);
      __int16 v13 = 1024;
      int v14 = v8;
      __int16 v15 = 1024;
      int v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "GyroInterval, GyroFreq, %.1f, rotationDecimation, %u, numSamplesForPartialGyroStats, %u", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022E7B20);
      }
      float v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CMDeviceMotionInputs::updateGyroInterval(uint32_t)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

float sub_100B5C608(uint64_t a1, float32x2_t *a2, uint64_t a3)
{
  sub_100659A48((unsigned __int16 *)(a1 + 8), (uint64_t)a2);
  sub_100B5C68C((float32x2_t *)(a1 + 208), a2);
  *(void *)(a1 + 228) = *(void *)(a1 + 808);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a1 + 816);
  *(unsigned char *)(a1 + 240) = sub_100B5C714(a1, *(void *)(a1 + 800), a1 + 228);
  *(void *)(a1 + 800) = a3;
  *(_DWORD *)(a1 + 808) = a2->i32[0];
  *(_DWORD *)(a1 + 812) = a2->i32[1];
  float result = a2[1].f32[0];
  *(float *)(a1 + 816) = result;
  return result;
}

float32x2_t *sub_100B5C68C(float32x2_t *result, float32x2_t *a2)
{
  int v2 = result->i32[0];
  int v3 = result->i32[0] + 1;
  result->i32[0] = v3;
  float v4 = a2[1].f32[0];
  if (v2 > 2)
  {
    float v7 = result->f32[1];
    float v8 = result[2].f32[0];
    result[1] = vsub_f32(result[1], vmul_n_f32(vsub_f32(result[1], *a2), v7));
    float v6 = v8 - (float)(v7 * (float)(v8 - v4));
  }
  else
  {
    float v5 = 1.0 / (float)v3;
    float v6 = v5 * (float)((float)(result[2].f32[0] * (float)v2) + v4);
    result[1] = vmul_n_f32(vadd_f32(vmul_n_f32(result[1], (float)v2), *a2), v5);
  }
  result[2].f32[0] = v6;
  return result;
}

uint64_t sub_100B5C714(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(unsigned __int16 *)(a1 + 682);
  if (*(_DWORD *)(a1 + 684) != v3) {
    return 0;
  }
  unint64_t v4 = a2;
  uint64_t v6 = *(unsigned __int16 *)(a1 + 680);
  if (*(void *)(a1 + 688 + 8 * v6) > a2) {
    return 0;
  }
  unint64_t v7 = v3 + v6 - 1;
  uint64_t v8 = v7 >= v3 ? *(unsigned __int16 *)(a1 + 682) : 0;
  unint64_t v9 = *(void *)(a1 + 688 + 8 * (v7 - v8));
  if (v9 + 10000 < a2) {
    return 0;
  }
  BOOL v12 = v9 >= a2;
  uint64_t v13 = v9 - a2;
  if (!v12)
  {
    uint64_t v14 = 0;
    float v15 = (float)v13 * 0.000001;
    unint64_t v16 = *(unsigned __int16 *)(a1 + 728) + (unint64_t)*(unsigned __int16 *)(a1 + 730) - 1;
    unint64_t v17 = *(unsigned int *)(a1 + 732);
    if (v16 < v17) {
      unint64_t v17 = 0;
    }
    float v18 = (float32x2_t *)(a1 + 728 + 12 * (v16 - v17));
    float v19 = v15 * v18[2].f32[0];
    float32x2_t v32 = vmul_n_f32(v18[1], v15);
    float v33 = v19;
    do
    {
      v32.f32[v14] = -v32.f32[v14];
      ++v14;
    }
    while (v14 != 3);
    float32x2_t v30 = v32;
    float v31 = v33;
    sub_100B5CE48((float *)&v30, (uint64_t)&v32);
    *(float *)a3 = sub_1004E301C((uint64_t)&v32, (float *)a3);
    *(_DWORD *)(a3 + 4) = v20;
    *(_DWORD *)(a3 + 8) = v21;
    return 1;
  }
  if (v3 == 1) {
    return 1;
  }
  unint64_t v22 = 0;
  do
  {
    BOOL v23 = (unint64_t *)sub_100B5D42C((unsigned __int16 *)(a1 + 680), v22++);
    if (v4 >= *v23 && v4 < *(void *)sub_100B5D42C((unsigned __int16 *)(a1 + 680), v22))
    {
      float v29 = (float)(*(void *)sub_100B5D42C((unsigned __int16 *)(a1 + 680), v22) - v4) * 0.000001;
      int v24 = (float32x2_t *)sub_100659D10((unsigned __int16 *)(a1 + 728), v22);
      uint64_t v25 = 0;
      float v26 = v29 * v24[1].f32[0];
      float32x2_t v32 = vmul_n_f32(*v24, v29);
      float v33 = v26;
      do
      {
        v32.f32[v25] = -v32.f32[v25];
        ++v25;
      }
      while (v25 != 3);
      float32x2_t v30 = v32;
      float v31 = v33;
      sub_100B5CE48((float *)&v30, (uint64_t)&v32);
      *(float *)a3 = sub_1004E301C((uint64_t)&v32, (float *)a3);
      *(_DWORD *)(a3 + 4) = v27;
      *(_DWORD *)(a3 + 8) = v28;
      unint64_t v4 = *(void *)sub_100B5D42C((unsigned __int16 *)(a1 + 680), v22);
    }
    uint64_t result = 1;
  }
  while (v22 < (unint64_t)*(unsigned __int16 *)(a1 + 682) - 1);
  return result;
}

void sub_100B5C97C(uint64_t a1, float32x2_t *a2, unint64_t a3)
{
  if (*(unsigned char *)(a1 + 416))
  {
    if (*(unsigned char *)(a1 + 820))
    {
      *(void *)(a1 + 256) = 0;
      *(void *)(a1 + 264) = 0;
      *(_DWORD *)(a1 + 272) = 0;
      *(unsigned char *)(a1 + 244) = 1;
      v8.i32[0] = a2->i32[0];
      *(_DWORD *)(a1 + 456) = a2->i32[0];
      __int32 v6 = a2->i32[1];
      *(_DWORD *)(a1 + 460) = v6;
      float v7 = a2[1].f32[0];
      *(float *)(a1 + 464) = v7;
      *(void *)(a1 + 484) = 0;
      *(void *)(a1 + 492) = 0x3F80000000000000;
      *(_DWORD *)(a1 + 504) = 0;
      *(unsigned char *)(a1 + 500) = 0;
      *(_DWORD *)(a1 + 672) = 1065353216;
      *(unsigned char *)(a1 + 820) = 0;
      v8.i32[1] = v6;
    }
    else
    {
      float32x2_t v8 = *(float32x2_t *)(a1 + 456);
      float v7 = *(float *)(a1 + 464);
    }
    unint64_t v9 = (float32x2_t *)(a1 + 444);
    float v10 = (float)((float)(v7 + a2[1].f32[0]) * 0.5) - *(float *)(a1 + 452);
    float32x2_t v34 = vsub_f32(vmul_f32(vadd_f32(v8, *a2), (float32x2_t)0x3F0000003F000000), *(float32x2_t *)(a1 + 444));
    float v35 = v10;
    uint64_t v11 = *(unsigned __int16 *)(a1 + 682);
    unint64_t v12 = *(unsigned int *)(a1 + 684);
    uint64_t v13 = *(unsigned __int16 *)(a1 + 680);
    if (v13 + v11 >= v12) {
      uint64_t v14 = *(unsigned int *)(a1 + 684);
    }
    else {
      uint64_t v14 = 0;
    }
    *(void *)(a1 + 680 + 8 * (v13 + v11 - v14) + 8) = a3;
    if (v12 <= v11)
    {
      if (v13 + 1 < v12) {
        LOWORD(v12) = 0;
      }
      *(_WORD *)(a1 + 680) = v13 + 1 - v12;
    }
    else
    {
      *(_WORD *)(a1 + 682) = v11 + 1;
    }
    sub_100659A48((unsigned __int16 *)(a1 + 728), (uint64_t)&v34);
    float v15 = a2[1].f32[0] - *(float *)(a1 + 452);
    *(float32x2_t *)(a1 + 432) = vsub_f32(*a2, *v9);
    *(float *)(a1 + 440) = v15;
    *(_DWORD *)(a1 + 456) = a2->i32[0];
    *(_DWORD *)(a1 + 460) = a2->i32[1];
    *(_DWORD *)(a1 + 464) = a2[1].i32[0];
    int v16 = *(_DWORD *)(a1 + 476) + 1;
    *(_DWORD *)(a1 + 476) = v16;
    if (v16 == *(_DWORD *)(a1 + 472))
    {
      uint64_t v17 = 0;
      float v18 = 0.0;
      do
      {
        float v18 = v18 + (float)(*(float *)(a1 + 432 + v17) * *(float *)(a1 + 432 + v17));
        v17 += 4;
      }
      while (v17 != 12);
      v33.i32[0] = sqrtf(v18);
      sub_100B2DA24(a1 + 244, v33.f32);
      *(_DWORD *)(a1 + 476) = 0;
    }
    unint64_t v19 = *(void *)(a1 + 408);
    if (v19)
    {
      BOOL v20 = a3 >= v19;
      unint64_t v21 = a3 - v19;
      if (v21 != 0 && v20)
      {
        float v22 = (float)(*(float *)(a1 + 440) * (float)v21) * 0.000001;
        float32x2_t v30 = vmul_f32(vmul_n_f32(*(float32x2_t *)(a1 + 432), (float)v21), (float32x2_t)vdup_n_s32(0x358637BDu));
        float v31 = v22;
        *(double *)v23.i64 = sub_100B9BDF4(&v32, (float *)&v30);
        sub_100B9BB80((uint64_t)&v32, (float *)(a1 + 484), &v33, v23);
        if ((float32x4_t *)(a1 + 484) != &v33) {
          *(float32x4_t *)(a1 + 484) = v33;
        }
      }
    }
    unsigned __int8 v24 = *(unsigned char *)(a1 + 500) + 1;
    *(unsigned char *)(a1 + 500) = v24;
    if ((*(_DWORD *)(a1 + 468) * v24) >> 4 >= 0x753)
    {
      sub_1000C0748((unsigned __int16 *)(a1 + 504), (_OWORD *)(a1 + 484));
      *(unsigned char *)(a1 + 500) = 0;
    }
    if (*(_DWORD *)(a1 + 508) == *(unsigned __int16 *)(a1 + 506))
    {
      unint64_t v25 = 0;
      float v26 = 1.0;
      do
      {
        uint64_t v27 = sub_100B5CF88((unsigned __int16 *)(a1 + 504), v25);
        *(double *)v29.i64 = sub_100B9BBE0((float32x2_t *)(a1 + 484), &v32, v28);
        sub_100B9BB80(v27, v32.f32, &v33, v29);
        if (v26 >= v33.f32[3]) {
          float v26 = v33.f32[3];
        }
        ++v25;
      }
      while (v25 != 10);
      *(float *)(a1 + 672) = v26;
    }
    *(void *)(a1 + 408) = a3;
  }
}

float sub_100B5CC6C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 416) = 1;
  *(_DWORD *)(a1 + 444) = *a2;
  *(_DWORD *)(a1 + 448) = a2[1];
  *(_DWORD *)(a1 + 452) = a2[2];
  *(_DWORD *)(a1 + 420) = *(_DWORD *)a3;
  *(_DWORD *)(a1 + 424) = *(_DWORD *)(a3 + 4);
  float result = *(float *)(a3 + 8);
  *(float *)(a1 + 428) = result;
  return result;
}

BOOL sub_100B5CCA8(uint64_t a1)
{
  int v2 = (unsigned __int16 *)(a1 + 8);
  float v3 = sub_100659AB4((unsigned __int16 *)(a1 + 8), 0, *(unsigned __int16 *)(a1 + 10));
  uint64_t v4 = 0;
  float v15 = v3;
  int v16 = v5;
  int v17 = v6;
  float v7 = 0.0;
  do
  {
    float v7 = v7 + (float)(*(float *)((char *)&v15 + v4) * *(float *)((char *)&v15 + v4));
    v4 += 4;
  }
  while (v4 != 12);
  float v8 = sqrtf(v7) + -1.0;
  if (v8 <= 0.0) {
    float v8 = -v8;
  }
  if (v8 >= 0.05) {
    return 0;
  }
  sub_100659F10(v2, 0, *(unsigned __int16 *)(a1 + 10));
  uint64_t v9 = 0;
  float v15 = v10;
  int v16 = v11;
  int v17 = v12;
  float v13 = 0.0;
  do
  {
    float v13 = v13 + (float)(*(float *)((char *)&v15 + v9) * *(float *)((char *)&v15 + v9));
    v9 += 4;
  }
  while (v9 != 12);
  return sqrtf(v13) < 0.01;
}

uint64_t sub_100B5CD90(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 417) = *(void *)(a2 + 64) != 0;
  return result;
}

float sub_100B5CDA4(uint64_t a1)
{
  return sub_100B5CDBC(a1 + 244, 32 - *(_DWORD *)(a1 + 480), *(_DWORD *)(a1 + 480));
}

float sub_100B5CDBC(uint64_t a1, int a2, int a3)
{
  if (a3 < 1)
  {
    float v10 = 0.0;
  }
  else
  {
    uint64_t v4 = (unsigned __int16 *)(a1 + 28);
    unint64_t v5 = a2;
    float v6 = 0.0;
    float v7 = 0.0;
    uint64_t v8 = a3;
    do
    {
      float v9 = *(float *)sub_1004182C4(v4, v5) - v7;
      float v10 = v6 + v9;
      float v7 = (float)((float)(v6 + v9) - v6) - v9;
      ++v5;
      float v6 = v6 + v9;
      --v8;
    }
    while (v8);
  }
  return v10 / (float)a3;
}

void sub_100B5CE48(float *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = 0;
  float v5 = 0.0;
  do
  {
    float v5 = v5 + (float)(a1[v4] * a1[v4]);
    ++v4;
  }
  while (v4 != 3);
  float v6 = sqrtf(v5);
  float v7 = -v6;
  if (v6 > 0.0) {
    float v7 = v6;
  }
  if (v7 == 0.0)
  {
    *(_DWORD *)(a2 + 32) = 1065353216;
    *(_OWORD *)a2 = xmmword_101D815B0;
    *(_OWORD *)(a2 + 16) = unk_101D815C0;
  }
  else
  {
    __float2 v8 = __sincosf_stret(v6);
    v9[0] = 1.0;
    v9[1] = v8.__sinval / v6;
    v9[2] = (float)(1.0 - v8.__cosval) / (float)(v6 * v6);
    sub_100B5D184(a1, v9, a2);
  }
}

void *sub_100B5CF08(void *result)
{
  *float result = off_1022E7AD8;
  return result;
}

void sub_100B5CF28(void *a1)
{
  *a1 = off_1022E7AD8;
  operator delete();
}

void sub_100B5CF58(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100B5CF88(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022E7B20);
    }
    float v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)long long buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022E7B20);
      }
      float v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const T &CMQueue<CMOQuaternion>::operator[](const size_t) const [T = CMOQuaternion]", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[8 * (v4 - v5) + 4];
}

float sub_100B5D184@<S0>(float *a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = 0;
  float v5 = 0.0;
  do
  {
    float v5 = v5 + (float)(a1[v4] * a1[v4]);
    ++v4;
  }
  while (v4 != 3);
  float v6 = *a2;
  *(float *)a3 = *a2;
  *(void *)(a3 + 4) = 0;
  *(_DWORD *)(a3 + 12) = 0;
  *(float *)(a3 + 16) = v6;
  *(void *)(a3 + 20) = 0;
  *(_DWORD *)(a3 + 28) = 0;
  *(float *)(a3 + 32) = v6;
  float result = sqrtf(v5);
  if (result <= 0.0) {
    float result = -result;
  }
  if (result != 0.0)
  {
    uint64_t v8 = 0;
    float v10 = a1[1];
    float v9 = a1[2];
    float v11 = *a1;
    float v12 = -*a1;
    LODWORD(v32) = 0;
    *((float *)&v32 + 1) = v9;
    *((float *)&v32 + 2) = -v10;
    *((float *)&v32 + 3) = -v9;
    LODWORD(v33) = 0;
    *(void *)((char *)&v33 + 4) = __PAIR64__(LODWORD(v10), LODWORD(v11));
    *((float *)&v33 + 3) = v12;
    int v34 = 0;
    float v13 = a2[1];
    int v26 = 0;
    long long v24 = v32;
    long long v25 = v33;
    do
    {
      *(float *)((char *)&v24 + v8) = v13 * *(float *)((char *)&v24 + v8);
      v8 += 4;
    }
    while (v8 != 36);
    uint64_t v14 = 0;
    int v29 = v26;
    long long v27 = v24;
    long long v28 = v25;
    float v15 = a2[2];
    long long v18 = v32;
    long long v19 = v33;
    int v20 = v34;
    do
    {
      *(float *)((char *)&v18 + v14) = v15 * *(float *)((char *)&v18 + v14);
      v14 += 4;
    }
    while (v14 != 36);
    v21[0] = v18;
    v21[1] = v19;
    int v22 = v20;
    sub_100B5D33C((uint64_t)v21, (uint64_t)&v32, (uint64_t)v23);
    for (unint64_t i = 0; i != 9; ++i)
      *((float *)&v27 + i) = sub_10080FD50((uint64_t)v23, i) + *((float *)&v27 + i);
    unint64_t v17 = 0;
    v30[0] = v27;
    v30[1] = v28;
    int v31 = v29;
    do
    {
      float result = sub_10080FD50((uint64_t)v30, v17) + *(float *)(a3 + 4 * v17);
      *(float *)(a3 + 4 * v17++) = result;
    }
    while (v17 != 9);
  }
  return result;
}

float *sub_100B5D33C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  for (unint64_t i = 0; i != 3; ++i)
  {
    for (unint64_t j = 0; j != 3; ++j)
    {
      float v8 = sub_1004E4240(a1, i, 0);
      float v9 = v8 * sub_1004E4240(a2, 0, j);
      *(float *)sub_1004E45A0(a3, i, j) = v9;
      for (unint64_t k = 1; k != 3; ++k)
      {
        float v11 = sub_1004E4240(a1, i, k);
        float v12 = sub_1004E4240(a2, k, j);
        float result = (float *)sub_1004E45A0(a3, i, j);
        *float result = *result + (float)(v11 * v12);
      }
    }
  }
  return result;
}

uint64_t sub_100B5D42C(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022E7B20);
    }
    float v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)long long buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022E7B20);
      }
      float v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const T &CMQueue<unsigned long long>::operator[](const size_t) const [T = unsigned long long]", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[4 * (v4 - v5) + 4];
}

uint64_t sub_100B5D628(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = 0xFFFFFFFF7FFFFFFFLL;
  *(_DWORD *)(a1 + 56) = -1082130432;
  *(void *)(a1 + 60) = -1;
  *(_DWORD *)(a1 + 68) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  uint64_t v2 = a1 + 72;
  *(void *)(a1 + 80) = 0xBFF0000000000000;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0xFFFFFFFF7FFFFFFFLL;
  *(_DWORD *)(a1 + 120) = -1;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022E7B40);
  }
  float v3 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Starting up CLDeviceMotionAWDAggregator", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022E7B40);
    }
    unint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLDeviceMotionAWDAggregator::CLDeviceMotionAWDAggregator()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_100B5D9AC(a1, (unsigned int *)a1);
  sub_100B5DB9C(a1, v2);
  if ((sub_1000A16E8() & 0x10) != 0) {
    operator new();
  }
  return a1;
}

void sub_100B5D950(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B5D9AC(uint64_t a1, unsigned int *a2)
{
  int v8 = 0;
  uint64_t v5 = sub_1000A6958();
  if (!sub_1004D01D8(v5, @"CompassSaturations", (CFTypeRef *)&v8)) {
    goto LABEL_8;
  }
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022E7B60);
  }
  float v6 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Loading daemon cache for Compass Saturations AWD metrics", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022E7B60);
    }
    float v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionAWDAggregator::loadCache(CLDaemonStats_Type::CompassSaturations &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if ((sub_100B5F3AC(a1, (float *)a2, v8) & 1) == 0) {
LABEL_8:
  }
    sub_100B5ED24(a1, a2);
}

void sub_100B5DB9C(uint64_t a1, uint64_t a2)
{
  float v9 = 0;
  uint64_t v5 = sub_1000A6958();
  if (!sub_1004D01D8(v5, @"MotionGyroDaily", (CFTypeRef *)&v9)) {
    goto LABEL_8;
  }
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022E7B60);
  }
  float v6 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Loading daemon cache for MotionGyroDaily AWD metrics", buf, 2u);
  }
  uint64_t v7 = sub_10013D1A0(115, 2);
  if (v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022E7B60);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    uint64_t v7 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionAWDAggregator::loadCache(CLDaemonStats_Type::MotionGyroDaily &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if ((sub_100B5FBAC(v7, a2, v9) & 1) == 0) {
LABEL_8:
  }
    sub_100B5F92C(a1, a2);
}

void sub_100B5DD88(unsigned __int8 *a1, uint64_t a2)
{
  int v3 = *a1;
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022E7B60);
  }
  unint64_t v4 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Keyboard attached,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022E7B60);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLDeviceMotionAWDAggregator::onKeyboardState(const BOOL *, void *)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (v3) {
    sub_100B5FF38(a2);
  }
}

void sub_100B5DF44(unsigned __int8 *a1, uint64_t a2)
{
  int v3 = *a1;
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022E7B60);
  }
  unint64_t v4 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Cover open,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022E7B60);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLDeviceMotionAWDAggregator::onCoverState(const BOOL *, void *)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (v3) {
    sub_100B5FF38(a2);
  }
}

void sub_100B5E104(uint64_t a1, uint64_t a2)
{
  if (*(float *)(a1 + 56) > 0.0)
  {
    float v4 = *(float *)(a1 + 172);
    if (v4 > 0.0)
    {
      float v5 = *(float *)(a1 + 144) - *(float *)(a1 + 160);
      float v6 = *(float *)(a1 + 148) - *(float *)(a1 + 164);
      float v7 = *(float *)(a1 + 152) - *(float *)(a1 + 168);
      unsigned int v8 = llroundf(*(float *)(a1 + 156) - v4);
      *(_DWORD *)(a1 + 60) = llroundf(sqrtf((float)((float)(v6 * v6) + (float)(v5 * v5)) + (float)(v7 * v7)));
      *(_DWORD *)(a1 + 64) = v8;
    }
  }
  *(_OWORD *)a2 = *(_OWORD *)a1;
  float v9 = (void **)(a1 + 16);
  std::string::operator=((std::string *)(a2 + 16), (const std::string *)(a1 + 16));
  long long v10 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = v10;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xBFF0000000000000;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*v9);
  }
  *(_OWORD *)float v9 = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = 0xFFFFFFFF7FFFFFFFLL;
  *(_DWORD *)(a1 + 56) = -1082130432;
  *(void *)(a1 + 60) = -1;
  *(_DWORD *)(a1 + 68) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;

  sub_100B5E214(a1, (unsigned int *)a1);
}

void sub_100B5E214(uint64_t a1, unsigned int *a2)
{
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022E7B60);
  }
  float v5 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Saving daemon cache for CompassSaturations AWD metrics", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022E7B60);
    }
    LOWORD(v11) = 0;
    float v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionAWDAggregator::storeCache(const CLDaemonStats_Type::CompassSaturations &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  CFTypeRef v11 = 0;
  uint64_t v6 = sub_1000A6958();
  if (sub_1004D01D8(v6, @"CompassSaturations", &v11))
  {
    sub_100B5EF34(a1, a2);
    uint64_t v7 = sub_1000A6958();
    sub_1004D258C(v7);
  }
  else
  {
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022E7B60);
    }
    unsigned int v8 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning daemon cache does not exist!", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022E7B60);
      }
      long long v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionAWDAggregator::storeCache(const CLDaemonStats_Type::CompassSaturations &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void sub_100B5E534(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 72;
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 72);
  float v5 = (void **)(a1 + 88);
  std::string::operator=((std::string *)(a2 + 16), (const std::string *)(a1 + 88));
  int v6 = *(_DWORD *)(a1 + 120);
  *(void *)(a2 + 40) = *(void *)(a1 + 112);
  *(_DWORD *)(a2 + 48) = v6;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0xBFF0000000000000;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*v5);
  }
  *float v5 = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0xFFFFFFFF7FFFFFFFLL;
  *(_DWORD *)(a1 + 120) = -1;

  sub_100B5E5D8(a1, v4);
}

void sub_100B5E5D8(uint64_t a1, uint64_t a2)
{
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022E7B60);
  }
  uint64_t v4 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Saving daemon cache for MotionGyroDaily AWD metrics", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022E7B60);
    }
    LOWORD(v17) = 0;
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionAWDAggregator::storeCache(const CLDaemonStats_Type::MotionGyroDaily &)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  CFTypeRef v16 = 0;
  uint64_t v5 = sub_1000A6958();
  uint64_t v6 = sub_1004D01D8(v5, @"MotionGyroDaily", &v16);
  if (v6)
  {
    sub_100B5FB2C(v6, a2);
    uint64_t v7 = sub_1000A6958();
    sub_1004D258C(v7);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022E7B60);
    }
    unsigned int v8 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
    {
      int v9 = *(_DWORD *)(a2 + 44);
      int v10 = *(_DWORD *)(a2 + 48);
      *(_DWORD *)long long buf = 67109376;
      int v22 = v9;
      __int16 v23 = 1024;
      int v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "magnitude,%d,activeMins,%d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022E7B60);
      }
      int v11 = *(_DWORD *)(a2 + 44);
      int v12 = *(_DWORD *)(a2 + 48);
      int v17 = 67109376;
      int v18 = v11;
      __int16 v19 = 1024;
      int v20 = v12;
LABEL_28:
      float v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionAWDAggregator::storeCache(const CLDaemonStats_Type::MotionGyroDaily &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  else
  {
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022E7B60);
    }
    int v13 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning daemon cache does not exist!", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022E7B60);
      }
      LOWORD(v17) = 0;
      goto LABEL_28;
    }
  }
}

void sub_100B5EA08(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 2))
  {
    ++*(_DWORD *)(a1 + 40);
    double Current = CFAbsoluteTimeGetCurrent();
    double v5 = Current;
    int v6 = *(_DWORD *)(a1 + 40);
    if (v6 >= 2)
    {
      double v7 = *(double *)(a1 + 136) + Current - *(double *)(a1 + 128);
      *(double *)(a1 + 136) = v7;
      *(_DWORD *)(a1 + 44) = (int)(v7 / (double)(v6 - 1) * 1000.0);
    }
    *(double *)(a1 + 128) = v5;
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022E7B40);
    }
    unsigned int v8 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      int v9 = *(_DWORD *)(a1 + 40);
      int v10 = *(_DWORD *)(a1 + 44);
      *(_DWORD *)long long buf = 67109632;
      int v14 = v9;
      __int16 v15 = 2048;
      double v16 = v5;
      __int16 v17 = 1024;
      int v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Received compass saturation,%d,timestamp,%f,meanDeltaTimeSaturations,%d", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022E7B40);
      }
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionAWDAggregator::updateCalibrationStats(const CMMotionCoprocessorReply::CompassCalibration)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  if (*(unsigned __int8 *)(a2 + 1) - 4 >= 2)
  {
    if (!*(unsigned char *)(a2 + 1))
    {
      *(_DWORD *)(a1 + 56) = -1082130432;
      *(void *)(a1 + 144) = 0;
      *(void *)(a1 + 152) = 0;
    }
  }
  else
  {
    float v11 = *(float *)(a2 + 53);
    if (v11 > *(float *)(a1 + 56))
    {
      *(float *)(a1 + 56) = v11;
      *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 5);
      *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 9);
      *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 13);
      *(float *)(a1 + 156) = 1.0 / *(float *)(a2 + 29);
    }
  }
  sub_100B5E214(a1, (unsigned int *)a1);
}

void sub_100B5ECC0(unsigned int *a1, uint64_t a2, int a3)
{
  a1[12] = (int)*(float *)&a3;
  a1[13] = (int)*((float *)&a2 + 1);
  sub_100B5E214((uint64_t)a1, a1);
}

void sub_100B5ECE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v3 = a2;
  BYTE8(v3) = a3;
  *(_DWORD *)(a1 + 116) = (int)*((float *)&a3 + 1);
  *(_DWORD *)(a1 + 120) = llroundf((float)((float)*(unint64_t *)((char *)&v3 + 1) * 0.000001) / 60.0);
  sub_100B5E5D8(a1, a1 + 72);
}

void sub_100B5ED24(uint64_t a1, unsigned int *a2)
{
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022E7B60);
  }
  double v5 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Creating daemon cache for AWD CompassSaturations metric", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022E7B60);
    }
    unsigned int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionAWDAggregator::createCache(const CLDaemonStats_Type::CompassSaturations &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_100B5EF34(a1, a2);
  uint64_t v6 = sub_1000A6958();
  sub_1004D258C(v6);
  uint64_t v7 = *(void *)sub_1000A6958();
  (*(void (**)(void))(v7 + 944))();
}

id sub_100B5EF34(uint64_t a1, unsigned int *a2)
{
  id v4 = +[NSMutableDictionary dictionary];
  [v4 setObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2[10]) forKeyedSubscript:@"NumSaturations"];
  [v4 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2[11])] forKeyedSubscript:@"BetweenSaturations"];
  v40[0] = +[NSNumber numberWithInt:a2[12]];
  v40[1] = +[NSNumber numberWithInt:a2[13]];
  [v4 setObject:+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v40, 2) forKeyedSubscript:@"Intensities"];
  LODWORD(v5) = a2[14];
  [v4 setObject:[+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v5)] forKeyedSubscript:@"MaxQuality"];
  v39[0] = +[NSNumber numberWithInt:a2[15]];
  v39[1] = +[NSNumber numberWithInt:a2[16]];
  [v4 setObject:[+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v39, 2) forKeyedSubscript:@"DeltaCalibrations"];
  [v4 setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[17]) forKeyedSubscript:@"NumCoverAttach"];
  id v6 = +[NSMutableArray array];
  for (uint64_t i = 0; i != 4; ++i)
  {
    LODWORD(v7) = *(_DWORD *)(a1 + 160 + 4 * i);
    [v6 setObject:[+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v7)] atIndexedSubscript:i];
  }
  [v4 setObject:v6 forKeyedSubscript:@"PreviousCalibration"];
  id v9 = +[NSMutableArray array];
  for (uint64_t j = 0; j != 4; ++j)
  {
    LODWORD(v10) = *(_DWORD *)(a1 + 144 + 4 * j);
    [v9 setObject:[+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v10)] atIndexedSubscript:j];
  }
  [v4 setObject:v9 forKeyedSubscript:@"CurrentCalibration"];
  [v4 setObject:[NSNumber numberWithDouble:*((double *)(a1 + 128))] forKeyedSubscript:@"PreviousSaturationTime"];
  [v4 setObject:[NSNumber numberWithDouble:*((double *)(a1 + 136))] forKeyedSubscript:@"SumDeltaSaturations"];
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022E7B60);
  }
  int v12 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v13 = a2[10];
    unsigned int v14 = a2[11];
    unsigned int v15 = a2[12];
    unsigned int v16 = a2[13];
    double v17 = *((float *)a2 + 14);
    unsigned int v18 = a2[15];
    unsigned int v19 = a2[16];
    unsigned int v20 = a2[17];
    *(_DWORD *)long long buf = 67110912;
    unsigned int v24 = v13;
    __int16 v25 = 1024;
    unsigned int v26 = v14;
    __int16 v27 = 1024;
    unsigned int v28 = v15;
    __int16 v29 = 1024;
    unsigned int v30 = v16;
    __int16 v31 = 2048;
    double v32 = v17;
    __int16 v33 = 1024;
    unsigned int v34 = v18;
    __int16 v35 = 1024;
    unsigned int v36 = v19;
    __int16 v37 = 1024;
    unsigned int v38 = v20;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "saturations,%d,meanTimeMsec,%d,intensity,[%d %d],maxQuality,%f,deltaBias,%d,deltaRadius,%d,attachments,%d", buf, 0x36u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022E7B60);
    }
    int v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLDeviceMotionAWDAggregator::populateStatsToCache(const CLDaemonStats_Type::CompassSaturations &) const", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  return v4;
}

uint64_t sub_100B5F3AC(uint64_t a1, float *a2, void *a3)
{
  *((_DWORD *)a2 + 10) = [[objc_msgSend(a3, "objectForKeyedSubscript:", @"NumSaturations") integerValue];
  *((_DWORD *)a2 + 11) = [[objc_msgSend(a3, "objectForKeyedSubscript:", @"BetweenSaturations") integerValue];
  id v6 = [a3 objectForKeyedSubscript:@"Intensities"];
  *((_DWORD *)a2 + 12) = [[v6 objectAtIndexedSubscript:0] integerValue];
  *((_DWORD *)a2 + 13) = [v6 objectAtIndexedSubscript:1].integerValue;
  [objc_msgSend(a3, "objectForKeyedSubscript:", @"MaxQuality") floatValue];
  *((_DWORD *)a2 + 14) = v7;
  id v8 = [a3 objectForKeyedSubscript:@"DeltaCalibrations"];
  *((_DWORD *)a2 + 15) = [[v8 objectAtIndexedSubscript:0] integerValue];
  *((_DWORD *)a2 + 16) = [[v8 objectAtIndexedSubscript:1] integerValue];
  *((_DWORD *)a2 + 17) = [objc_msgSend(a3, "objectForKeyedSubscript:", @"NumCoverAttach") unsignedIntegerValue];
  id v9 = [a3 objectForKeyedSubscript:@"PreviousCalibration"];
  for (uint64_t i = 0; i != 4; ++i)
  {
    [v9[i] floatValue];
    *(_DWORD *)(a1 + 160 + 4 * i) = v11;
  }
  id v12 = [a3 objectForKeyedSubscript:@"CurrentCalibration"];
  for (uint64_t j = 0; j != 4; ++j)
  {
    [v12[j] floatValue];
    *(_DWORD *)(a1 + 144 + 4 * j) = v14;
  }
  [objc_msgSend(a3, "objectForKeyedSubscript:", @"PreviousSaturationTime") doubleValue];
  *(void *)(a1 + 128) = v15;
  [objc_msgSend(a3, "objectForKeyedSubscript:", @"SumDeltaSaturations") doubleValue];
  *(void *)(a1 + 136) = v16;
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022E7B60);
  }
  double v17 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    int v18 = *((_DWORD *)a2 + 10);
    int v19 = *((_DWORD *)a2 + 11);
    int v20 = *((_DWORD *)a2 + 12);
    int v21 = *((_DWORD *)a2 + 13);
    double v22 = a2[14];
    int v23 = *((_DWORD *)a2 + 15);
    int v24 = *((_DWORD *)a2 + 16);
    int v25 = *((_DWORD *)a2 + 17);
    *(_DWORD *)long long buf = 67110912;
    int v29 = v18;
    __int16 v30 = 1024;
    int v31 = v19;
    __int16 v32 = 1024;
    int v33 = v20;
    __int16 v34 = 1024;
    int v35 = v21;
    __int16 v36 = 2048;
    double v37 = v22;
    __int16 v38 = 1024;
    int v39 = v23;
    __int16 v40 = 1024;
    int v41 = v24;
    __int16 v42 = 1024;
    int v43 = v25;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "saturations,%d,meanTimeMsec,%d,intensity,[%d %d],maxQuality,%f,deltaBias,%d,deltaRadius,%d,attachments,%d", buf, 0x36u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022E7B60);
    }
    __int16 v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDeviceMotionAWDAggregator::loadCache(CLDaemonStats_Type::CompassSaturations &, NSDictionary *)", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
  return 1;
}

#error "100B5F8E8: call analysis failed (funcsize=82)"

void sub_100B5F92C(uint64_t a1, uint64_t a2)
{
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022E7B60);
  }
  id v4 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Creating daemon cache for AWD MotionGyroDaily metric", buf, 2u);
  }
  uint64_t v5 = sub_10013D1A0(115, 2);
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022E7B60);
    }
    id v8 = (char *)_os_log_send_and_compose_impl();
    uint64_t v5 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionAWDAggregator::createCache(const CLDaemonStats_Type::MotionGyroDaily &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_100B5FB2C(v5, a2);
  uint64_t v6 = sub_1000A6958();
  sub_1004D258C(v6);
  uint64_t v7 = *(void *)sub_1000A6958();
  (*(void (**)(void))(v7 + 944))();
}

id sub_100B5FB2C(uint64_t a1, uint64_t a2)
{
  id v3 = +[NSMutableDictionary dictionary];
  [v3 setObject:[NSNumber numberWithInt:*(unsigned int *)(a2 + 44)] forKeyedSubscript:@"GyroMagnitude"];
  [v3 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 48))] forKeyedSubscript:@"ActiveMins"];
  return v3;
}

uint64_t sub_100B5FBAC(uint64_t a1, uint64_t a2, void *a3)
{
  *(_DWORD *)(a2 + 44) = [objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", @"GyroMagnitude"), "integerValue");
  *(_DWORD *)(a2 + 48) = [[objc_msgSend(a3, "objectForKeyedSubscript:", @"ActiveMins") integerValue];
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022E7B60);
  }
  uint64_t v5 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    int v6 = *(_DWORD *)(a2 + 44);
    int v7 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)long long buf = 67109376;
    int v11 = v6;
    __int16 v12 = 1024;
    int v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "magnitude,%d,activeMins,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022E7B60);
    }
    id v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDeviceMotionAWDAggregator::loadCache(CLDaemonStats_Type::MotionGyroDaily &, NSDictionary *)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  return 1;
}

#error "100B5FEF4: call analysis failed (funcsize=82)"

void sub_100B5FF38(uint64_t a1)
{
  ++*(_DWORD *)(a1 + 68);
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022E7B60);
  }
  uint64_t v2 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(_DWORD *)(a1 + 68);
    *(_DWORD *)long long buf = 67109120;
    int v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "New cover attachment,total,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022E7B60);
    }
    id v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionAWDAggregator::newCoverAttach()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

void sub_100B600F8(id a1)
{
  qword_1024190A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_100B60128(id a1)
{
  qword_102419088 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

uint64_t sub_100B60158()
{
  uint64_t result = sub_1000EB1B0();
  if (result) {
    operator new();
  }
  return result;
}

void sub_100B601DC()
{
}

uint64_t sub_100B60200()
{
  if (qword_1024801D8 != -1) {
    dispatch_once(&qword_1024801D8, &stru_1022E7B80);
  }
  return qword_10248A9C8;
}

void sub_100B6024C(void *a1)
{
  sub_1012F6FF8(a1);

  operator delete();
}

double sub_100B60284(uint64_t a1, int a2, double *a3)
{
  if (a2)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022E7C08);
    }
    id v4 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 67240192;
      LODWORD(v14) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "[AccessoryMagnetometer] Unrecognized update interval notification %{public}d", buf, 8u);
    }
    double v5 = 0.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022E7C08);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryMagnetometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    sub_1012F71A4(a1);
    if (*a3 > 0.0) {
      *(unsigned char *)(a1 + 30) = 0;
    }
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022E7C08);
    }
    id v9 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_INFO))
    {
      double v10 = *a3;
      *(_DWORD *)long long buf = 134349056;
      double v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[AccessoryMagnetometer] Setting update interval to %{public}f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022E7C08);
      }
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryMagnetometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    sub_100A29D64(*(void *)(a1 + 32), *a3);
    return *a3;
  }
  return v5;
}

double sub_100B605C0(uint64_t a1, int a2, double *a3)
{
  if (a2)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022E7C08);
    }
    id v4 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 67240192;
      LODWORD(v14) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "[AccessoryMagnetometer] Unrecognized batch interval notification %{public}d", buf, 8u);
    }
    double v5 = 0.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022E7C08);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryMagnetometer::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    sub_1012F71A4(a1);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022E7C08);
    }
    id v9 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_INFO))
    {
      double v10 = *a3;
      *(_DWORD *)long long buf = 134349056;
      double v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[AccessoryMagnetometer] Setting batch interval to %{public}f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022E7C08);
      }
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryMagnetometer::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    sub_100A29E04(*(void *)(a1 + 32), *a3);
    return *a3;
  }
  return v5;
}

void sub_100B608EC(uint64_t a1, uint64_t a2)
{
  sub_1000E7BA0(a1, 0, a2, 40);
  if (!*(unsigned char *)(a1 + 30))
  {
    *(unsigned char *)(a1 + 30) = 1;
    int v11 = 0;
    sub_100134750(v12, "N/A");
    sub_100134750(__p, "N/A");
    int v16 = 0;
    if (sub_1012F72FC(a1, &v11))
    {
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022E7C08);
      }
      int v3 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEBUG))
      {
        if (v13 >= 0) {
          id v4 = v12;
        }
        else {
          id v4 = (void **)v12[0];
        }
        if (v15 >= 0) {
          double v5 = __p;
        }
        else {
          double v5 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 67240707;
        int v24 = v11;
        __int16 v25 = 2081;
        unsigned int v26 = v4;
        __int16 v27 = 2081;
        unsigned int v28 = v5;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[AccessoryMagnetometer] config,side,%{public}d,configuration,%{private}s,serialNumber,%{private}s", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022E7C08);
        }
        if (v13 >= 0) {
          int v7 = v12;
        }
        else {
          int v7 = (void **)v12[0];
        }
        if (v15 >= 0) {
          id v8 = __p;
        }
        else {
          id v8 = (void **)__p[0];
        }
        int v17 = 67240707;
        int v18 = v11;
        __int16 v19 = 2081;
        int v20 = v7;
        __int16 v21 = 2081;
        double v22 = v8;
        id v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryMagnetometer::onMagnetometerData(const Sample &)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      sub_1000E7BA0(a1, 1, (uint64_t)&v11, 64);
    }
    else
    {
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022E7C08);
      }
      int v6 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "[AccessoryMagnetometer] Service not found!", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022E7C08);
        }
        LOWORD(v17) = 0;
        double v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLAccessoryMagnetometer::onMagnetometerData(const Sample &)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
  }
}

void sub_100B60CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void sub_100B60D18(uint64_t a1)
{
  if (IOHIDEventGetType() == 21)
  {
    IOHIDEventGetFloatValue();
    float v3 = v2;
    float v17 = v3;
    IOHIDEventGetFloatValue();
    float v5 = v4;
    float v18 = v5;
    IOHIDEventGetFloatValue();
    float v7 = v6;
    float v19 = v7;
    unint64_t TimeStamp = IOHIDEventGetTimeStamp();
    double v9 = sub_1000D3D90(TimeStamp);
    double v16 = v9;
    unsigned __int16 IntegerValue = IOHIDEventGetIntegerValue();
    unsigned __int16 v21 = IntegerValue;
    uint64_t v11 = sub_10149F054();
    uint64_t v20 = v11;
    float v12 = *(float *)(a1 + 100);
    float v22 = v12;
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022E7C08);
    }
    char v13 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67241728;
      int v38 = IntegerValue;
      __int16 v39 = 2050;
      double v40 = v3;
      __int16 v41 = 2050;
      double v42 = v5;
      __int16 v43 = 2050;
      double v44 = v7;
      __int16 v45 = 2050;
      double v46 = v12;
      __int16 v47 = 2050;
      uint64_t v48 = v11;
      __int16 v49 = 2050;
      double v50 = v9;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[AccessoryMagnetometer] seq,%{public}d,x,%{public}20.20f,y,%{public}20.20f,z,%{public}20.20f,temp,%{public}20.20f,sensorTime,%{public}llu,timestamp,%{public}20.20f", buf, 0x44u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022E7C08);
      }
      int v23 = 67241728;
      int v24 = IntegerValue;
      __int16 v25 = 2050;
      double v26 = v3;
      __int16 v27 = 2050;
      double v28 = v5;
      __int16 v29 = 2050;
      double v30 = v7;
      __int16 v31 = 2050;
      double v32 = v12;
      __int16 v33 = 2050;
      uint64_t v34 = v11;
      __int16 v35 = 2050;
      double v36 = v9;
      char v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAccessoryMagnetometer::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    sub_100B608EC(a1, (uint64_t)&v16);
  }
  else if (IOHIDEventGetType() == 15)
  {
    IOHIDEventGetFloatValue();
    *(float *)&double v14 = v14;
    *(_DWORD *)(a1 + 100) = LODWORD(v14);
  }
}

void sub_100B61048(id a1)
{
  qword_1024190E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

BOOL sub_100B61078(void *a1, char *a2, int a3)
{
  char v10 = 0;
  *a2 = 0;
  int v3 = *(_DWORD *)((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5;
  if (v3)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    double v4 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134349312;
      uint64_t v16 = 0;
      __int16 v17 = 2050;
      uint64_t v18 = 1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#Warning eof,n,%{public}ld,requested,%{public}ld", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022E7C28);
      }
      int v11 = 134349312;
      uint64_t v12 = 0;
      __int16 v13 = 2050;
      uint64_t v14 = 1;
      float v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLParseXtra::read_from_file(std::istream &, DataType &, Endian) [DataType = unsigned char]", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    sub_100B64B98(a1, &v10);
    char v8 = *a2;
    if (a3) {
      char v8 = 0;
    }
    *a2 = v10 | v8;
  }
  return v3 == 0;
}

BOOL sub_100B612A0(void *a1, _WORD *a2, int a3)
{
  uint64_t v6 = 0;
  unsigned __int8 v16 = 0;
  *a2 = 0;
  float v7 = a1 + 4;
  char v8 = 1;
  while (1)
  {
    char v9 = v8;
    int v10 = *(_DWORD *)((unsigned char *)v7 + *(void *)(*a1 - 24)) & 5;
    if (v10) {
      break;
    }
    sub_100B64B98(a1, &v16);
    int v11 = (unsigned __int16)*a2;
    if (a3) {
      LOWORD(v12) = v16 | (unsigned __int16)((_WORD)v11 << 8);
    }
    else {
      int v12 = (v16 << (8 * v6)) | v11;
    }
    char v8 = 0;
    *a2 = v12;
    uint64_t v6 = 1;
    if ((v9 & 1) == 0) {
      return v10 == 0;
    }
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1022E7C28);
  }
  __int16 v13 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 134349312;
    uint64_t v22 = v6;
    __int16 v23 = 2050;
    uint64_t v24 = 2;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#Warning eof,n,%{public}ld,requested,%{public}ld", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v17 = 134349312;
    uint64_t v18 = v6;
    __int16 v19 = 2050;
    uint64_t v20 = 2;
    char v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLParseXtra::read_from_file(std::istream &, DataType &, Endian) [DataType = unsigned short]", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  return v10 == 0;
}

uint64_t sub_100B6150C(void *a1, int *a2, int a3)
{
  unsigned __int8 v16 = 0;
  *a2 = 0;
  int v3 = a1 + 4;
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    BOOL v4 = 0;
    unint64_t v5 = 0;
LABEL_10:
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    __int16 v13 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134349312;
      unint64_t v22 = v5;
      __int16 v23 = 2050;
      uint64_t v24 = 4;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#Warning eof,n,%{public}ld,requested,%{public}ld", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022E7C28);
      }
      int v17 = 134349312;
      unint64_t v18 = v5;
      __int16 v19 = 2050;
      uint64_t v20 = 4;
      char v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLParseXtra::read_from_file(std::istream &, DataType &, Endian) [DataType = unsigned int]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  else
  {
    char v9 = 0;
    unint64_t v10 = -1;
    while (1)
    {
      sub_100B64B98(a1, &v16);
      int v11 = *a2;
      int v12 = a3 ? v16 | (v11 << 8) : (v16 << v9) | v11;
      *a2 = v12;
      if (v10 == 2) {
        return 1;
      }
      ++v10;
      v9 += 8;
      if ((*((unsigned char *)v3 + *(void *)(*a1 - 24)) & 5) != 0)
      {
        BOOL v4 = v10 > 2;
        unint64_t v5 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  return v4;
}

uint64_t sub_100B617A4(void *a1)
{
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7C48);
    }
    uint64_t v1 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "#ee,#Warning,can't open file\n", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7C48);
    }
    LOWORD(v43) = 0;
    goto LABEL_206;
  }
  char v42 = 0;
  sub_100B64B98(a1, &v42);
  BOOL v3 = v42 != 0;
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7C48);
    }
    BOOL v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#ee,#Warning,endian\n", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7C48);
    }
    LOWORD(v43) = 0;
    goto LABEL_206;
  }
  unsigned __int16 v41 = 0;
  unsigned int v40 = 0;
  char v39 = 0;
  int v38 = 0;
  char v37 = 0;
  int v36 = 0;
  *(_WORD *)__int16 v35 = 0;
  int v34 = 0;
  uint64_t v33 = 0;
  int v32 = 0;
  __int16 v31 = 0;
  int v30 = 0;
  if (!sub_100B61078(a1, &v39, v42 != 0))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    uint64_t v6 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      double v46 = "headerLen";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v43 = 136446210;
    double v44 = "headerLen";
    goto LABEL_206;
  }
  if ((sub_100B6150C(a1, &v38, v3) & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    float v7 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      double v46 = "warnVersion";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v43 = 136446210;
    double v44 = "warnVersion";
    goto LABEL_206;
  }
  if (!sub_100B61078(a1, &v37, v3))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    char v8 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      double v46 = "xtraVersion";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v43 = 136446210;
    double v44 = "xtraVersion";
    goto LABEL_206;
  }
  if ((sub_100B6150C(a1, &v36, v3) & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    char v9 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      double v46 = "cksum";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v43 = 136446210;
    double v44 = "cksum";
    goto LABEL_206;
  }
  if (v37 != 3)
  {
    if (v37 != 2) {
      return 0;
    }
    if (sub_100B6150C(a1, (int *)&v33, v3))
    {
      if (sub_100B612A0(a1, &v31, v3))
      {
        if (sub_100B6150C(a1, &v30, v3))
        {
          if (sub_100B612A0(a1, &v41, v3))
          {
            if (sub_100B6150C(a1, (int *)&v40, v3)) {
              goto LABEL_30;
            }
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1022E7C28);
            }
            uint64_t v20 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 136446210;
              double v46 = "dataGpsMsec";
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
            }
            if (!sub_10013D1A0(115, 2)) {
              return 0;
            }
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1022E7C28);
            }
            int v43 = 136446210;
            double v44 = "dataGpsMsec";
          }
          else
          {
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1022E7C28);
            }
            unint64_t v18 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 136446210;
              double v46 = "dataGpsWeek";
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
            }
            if (!sub_10013D1A0(115, 2)) {
              return 0;
            }
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1022E7C28);
            }
            int v43 = 136446210;
            double v44 = "dataGpsWeek";
          }
        }
        else
        {
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1022E7C28);
          }
          unsigned __int8 v16 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 136446210;
            double v46 = "fileMsec";
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
          }
          if (!sub_10013D1A0(115, 2)) {
            return 0;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1022E7C28);
          }
          int v43 = 136446210;
          double v44 = "fileMsec";
        }
      }
      else
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022E7C28);
        }
        uint64_t v14 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 136446210;
          double v46 = "fileGpsWeek";
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 2)) {
          return 0;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022E7C28);
        }
        int v43 = 136446210;
        double v44 = "fileGpsWeek";
      }
    }
    else
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022E7C28);
      }
      int v12 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136446210;
        double v46 = "fileSize";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022E7C28);
      }
      int v43 = 136446210;
      double v44 = "fileSize";
    }
LABEL_206:
    double v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static uint64_t CLParseXtra::getXtraHeaderGpsNs(std::istream &)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
    return 0;
  }
  if (!sub_100B63344(a1, (char *)&v34, v3))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    __int16 v13 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      double v46 = "x3_warnManagerID[0]";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v43 = 136446210;
    double v44 = "x3_warnManagerID[0]";
    goto LABEL_206;
  }
  if (!sub_100B63344(a1, (char *)&v34 + 1, v3))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    char v15 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      double v46 = "x3_warnManagerID[1]";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v43 = 136446210;
    double v44 = "x3_warnManagerID[1]";
    goto LABEL_206;
  }
  if (!sub_100B63344(a1, (char *)&v34 + 2, v3))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v17 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      double v46 = "x3_warnManagerID[2]";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v43 = 136446210;
    double v44 = "x3_warnManagerID[2]";
    goto LABEL_206;
  }
  if (!sub_100B63344(a1, (char *)&v34 + 3, v3))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    __int16 v19 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      double v46 = "x3_warnManagerID[3]";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v43 = 136446210;
    double v44 = "x3_warnManagerID[3]";
    goto LABEL_206;
  }
  if (!sub_100B63344(a1, v35, v3))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    unsigned __int16 v21 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      double v46 = "x3_warnManagerID[4]";
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v43 = 136446210;
    double v44 = "x3_warnManagerID[4]";
    goto LABEL_206;
  }
  if (!sub_100B63344(a1, &v35[1], v3))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    unint64_t v22 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      double v46 = "x3_warnManagerID[5]";
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v43 = 136446210;
    double v44 = "x3_warnManagerID[5]";
    goto LABEL_206;
  }
  if ((sub_100B6150C(a1, (int *)&v33 + 1, v3) & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    __int16 v23 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      double v46 = "x3_fileSequencyNr";
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v43 = 136446210;
    double v44 = "x3_fileSequencyNr";
    goto LABEL_206;
  }
  if ((sub_100B6150C(a1, (int *)&v33, v3) & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    uint64_t v24 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      double v46 = "fileSize";
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v43 = 136446210;
    double v44 = "fileSize";
    goto LABEL_206;
  }
  if ((sub_100B6150C(a1, &v32, v3) & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    __int16 v25 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      double v46 = "x3_signatureRecordOffset";
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v43 = 136446210;
    double v44 = "x3_signatureRecordOffset";
    goto LABEL_206;
  }
  if (!sub_100B612A0(a1, &v31, v3))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    __int16 v27 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      double v46 = "fileGpsWeek";
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v43 = 136446210;
    double v44 = "fileGpsWeek";
    goto LABEL_206;
  }
  if ((sub_100B6150C(a1, &v30, v3) & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    double v28 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      double v46 = "fileMsec";
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v43 = 136446210;
    double v44 = "fileMsec";
    goto LABEL_206;
  }
  if (!sub_100B612A0(a1, &v41, v3))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    __int16 v29 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      double v46 = "dataGpsWeek";
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v43 = 136446210;
    double v44 = "dataGpsWeek";
    goto LABEL_206;
  }
  if ((sub_100B6150C(a1, (int *)&v40, v3) & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v11 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      double v46 = "dataGpsMsec";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v43 = 136446210;
    double v44 = "dataGpsMsec";
    goto LABEL_206;
  }
LABEL_30:
  if (v40 >= 0x240C8400)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7C48);
    }
    unint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v46) = v40;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#ee,#Warning,xtra,invalid,dataGpsMsec,%u\n", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7C48);
    }
    int v43 = 67109120;
    LODWORD(v44) = v40;
    goto LABEL_206;
  }
  return 1000000 * (v40 + 604800000 * v41);
}

BOOL sub_100B63344(void *a1, char *a2, int a3)
{
  char v10 = 0;
  *a2 = 0;
  int v3 = *(_DWORD *)((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5;
  if (v3)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    BOOL v4 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134349312;
      uint64_t v16 = 0;
      __int16 v17 = 2050;
      uint64_t v18 = 1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#Warning eof,n,%{public}ld,requested,%{public}ld", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022E7C28);
      }
      int v11 = 134349312;
      uint64_t v12 = 0;
      __int16 v13 = 2050;
      uint64_t v14 = 1;
      unint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLParseXtra::read_from_file(std::istream &, DataType &, Endian) [DataType = unsigned char &]", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    sub_100B64B98(a1, &v10);
    char v8 = *a2;
    if (a3) {
      char v8 = 0;
    }
    *a2 = v10 | v8;
  }
  return v3 == 0;
}

uint64_t sub_100B6356C(void *a1)
{
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7C48);
    }
    uint64_t v1 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#eph,can't open file", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7C48);
    }
    LOWORD(v35) = 0;
    goto LABEL_19;
  }
  char v34 = 0;
  sub_100B64B98(a1, &v34);
  BOOL v3 = v34 != 0;
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7C48);
    }
    BOOL v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#eph,invalid endianness", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7C48);
    }
    LOWORD(v35) = 0;
LABEL_19:
    unint64_t v5 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static uint64_t CLParseXtra::getXtraBroadcastEphemerisHeaderGpsNs(std::istream &)", "%s\n");
    goto LABEL_20;
  }
  unsigned __int16 v33 = 0;
  unsigned int v32 = 0;
  unsigned __int8 v31 = 0;
  int v30 = 0;
  char v29 = 0;
  *(_WORD *)double v28 = 0;
  int v27 = 0;
  uint64_t v26 = 0;
  int v25 = 0;
  if (!sub_100B61078(a1, (char *)&v31, v34 != 0))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    float v7 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      int v38 = "headerLen";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_76;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v35 = 136446210;
    int v36 = "headerLen";
LABEL_161:
    char v9 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static uint64_t CLParseXtra::getXtraBroadcastEphemerisHeaderGpsNs(std::istream &)", "%s\n");
LABEL_162:
    if (v9 != buf) {
      free(v9);
    }
    goto LABEL_76;
  }
  if (v31 != 32)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7C48);
    }
    char v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v38) = v31;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#eph,invalid headerLen,%u", buf, 8u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_76;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7C48);
    }
    int v35 = 67109120;
    LODWORD(v36) = v31;
    char v9 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static uint64_t CLParseXtra::getXtraBroadcastEphemerisHeaderGpsNs(std::istream &)", "%s\n");
    goto LABEL_162;
  }
  if ((sub_100B6150C(a1, &v30, v3) & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    char v10 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      int v38 = "reservedOne";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_76;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v35 = 136446210;
    int v36 = "reservedOne";
    goto LABEL_161;
  }
  if (!sub_100B61078(a1, &v29, v3))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v11 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      int v38 = "xtraEphVersion";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_76;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v35 = 136446210;
    int v36 = "xtraEphVersion";
    goto LABEL_161;
  }
  if (v29 != 62)
  {
LABEL_76:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7C48);
    }
    uint64_t v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#eph,getXtraBroadcastEphemerisHeaderGpsNs,could not read file age", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7C48);
    }
    LOWORD(v35) = 0;
LABEL_125:
    unint64_t v5 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static uint64_t CLParseXtra::getXtraBroadcastEphemerisHeaderGpsNs(std::istream &)", "%s\n");
LABEL_20:
    if (v5 != buf) {
      free(v5);
    }
    return 0;
  }
  if (!sub_100B63344(a1, (char *)&v27, v3))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    uint64_t v14 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      int v38 = "reservedTwo[0]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_76;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v35 = 136446210;
    int v36 = "reservedTwo[0]";
    goto LABEL_161;
  }
  if (!sub_100B63344(a1, (char *)&v27 + 1, v3))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    char v15 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      int v38 = "reservedTwo[1]";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_76;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v35 = 136446210;
    int v36 = "reservedTwo[1]";
    goto LABEL_161;
  }
  if (!sub_100B63344(a1, (char *)&v27 + 2, v3))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    uint64_t v16 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      int v38 = "reservedTwo[2]";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_76;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v35 = 136446210;
    int v36 = "reservedTwo[2]";
    goto LABEL_161;
  }
  if (!sub_100B63344(a1, (char *)&v27 + 3, v3))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    __int16 v17 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      int v38 = "reservedTwo[3]";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_76;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v35 = 136446210;
    int v36 = "reservedTwo[3]";
    goto LABEL_161;
  }
  if (!sub_100B63344(a1, v28, v3))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    uint64_t v18 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      int v38 = "reservedTwo[4]";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_76;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v35 = 136446210;
    int v36 = "reservedTwo[4]";
    goto LABEL_161;
  }
  if (!sub_100B63344(a1, &v28[1], v3))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    __int16 v19 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      int v38 = "reservedTwo[5]";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_76;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v35 = 136446210;
    int v36 = "reservedTwo[5]";
    goto LABEL_161;
  }
  if ((sub_100B6150C(a1, (int *)&v26 + 1, v3) & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    uint64_t v20 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      int v38 = "fileSequencyNum";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_76;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v35 = 136446210;
    int v36 = "fileSequencyNum";
    goto LABEL_161;
  }
  if ((sub_100B6150C(a1, (int *)&v26, v3) & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    unsigned __int16 v21 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      int v38 = "fileSize";
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_76;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v35 = 136446210;
    int v36 = "fileSize";
    goto LABEL_161;
  }
  if ((sub_100B6150C(a1, &v25, v3) & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    unint64_t v22 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      int v38 = "reservedThree";
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_76;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v35 = 136446210;
    int v36 = "reservedThree";
    goto LABEL_161;
  }
  if (!sub_100B612A0(a1, &v33, v3))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    __int16 v23 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      int v38 = "fileGpsWeek";
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_76;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v35 = 136446210;
    int v36 = "fileGpsWeek";
    goto LABEL_161;
  }
  if ((sub_100B6150C(a1, (int *)&v32, v3) & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    uint64_t v24 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136446210;
      int v38 = "fileGpsMsec";
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "#Warning failed to read [%{public}s]", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_76;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022E7C28);
    }
    int v35 = 136446210;
    int v36 = "fileGpsMsec";
    goto LABEL_161;
  }
  if (v32 >= 0x240C8400)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7C48);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v38) = v32;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#eph,getXtraBroadcastEphemerisHeaderGpsNs,invalid fileGpsMsec,%u", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E7C48);
    }
    int v35 = 67109120;
    LODWORD(v36) = v32;
    goto LABEL_125;
  }
  return 1000000 * (v32 + 604800000 * v33);
}

void sub_100B64B38(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_100B64B68(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void *sub_100B64B98(void *a1, unsigned char *a2)
{
  std::istream::sentry::sentry();
  if (v8)
  {
    BOOL v4 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    unint64_t v5 = (unsigned char *)v4[3];
    if (v5 == (unsigned char *)v4[4])
    {
      LODWORD(v4) = (*(uint64_t (**)(void *))(*v4 + 80))(v4);
      if (v4 == -1)
      {
        int v6 = 6;
        goto LABEL_6;
      }
    }
    else
    {
      double v4[3] = v5 + 1;
      LOBYTE(v4) = *v5;
    }
    int v6 = 0;
    *a2 = (_BYTE)v4;
LABEL_6:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v6);
  }
  return a1;
}

void sub_100B64C78(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x100B64C38);
  }
  __cxa_rethrow();
}

void sub_100B64CF0(_Unwind_Exception *a1)
{
}

void sub_100B64D04(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = a2;
  a1[2] = a3;
  *a1 = off_1022E7C78;
  a1[3] = 0;
  sub_1005AEEAC();
}

void sub_100B64E2C(_Unwind_Exception *a1)
{
  uint64_t v3 = v1[3];
  v1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_100426880(v1);
  _Unwind_Resume(a1);
}

void sub_100B64E74(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 16), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022E7CB8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionActivityLiteClient::onMotionActivityNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022E7CB8);
    }
    char v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionActivityLiteClient::onMotionActivityNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100B65E8C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100B65030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B65050(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  unint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_100B650C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100B650E0(void *a1)
{
  *a1 = off_1022E7C78;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  return sub_100426880(a1);
}

void sub_100B65164(void *a1)
{
  sub_100B650E0(a1);

  operator delete();
}

void sub_100B6519C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  int v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 59)
    {
LABEL_7:
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022E7CD8);
      }
      int v6 = qword_102419018;
      if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_FAULT))
      {
        uint64_t v7 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        if (*(char *)(v7 + 23) >= 0) {
          uint64_t v8 = v7;
        }
        else {
          uint64_t v8 = *(void *)v7;
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v18 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Got unhandled mesage of type %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419010 != -1) {
          dispatch_once(&qword_102419010, &stru_1022E7CD8);
        }
        uint64_t v11 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        if (*(char *)(v11 + 23) >= 0) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = *(void *)v11;
        }
        int v15 = 136446210;
        uint64_t v16 = v12;
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLMotionActivityLiteClient::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      return;
    }
    uint64_t v4 = (void *)*v4;
  }
  else if (v5 != 59)
  {
    goto LABEL_7;
  }
  if (memcmp(v4, "MotionActivityLite/kCLConnectionMessageMotionActivityUpdate", 0x3BuLL)) {
    goto LABEL_7;
  }
  char v9 = *(CLConnectionMessage **)a2;
  uint64_t v10 = *(void *)(a2 + 8);
  v14[0] = v9;
  v14[1] = (CLConnectionMessage *)v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100B6544C(a1, v14);
  if (v10)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v10);
  }
}

void sub_100B6542C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B6544C(uint64_t a1, CLConnectionMessage **a2)
{
  if (qword_102419010 != -1) {
    dispatch_once(&qword_102419010, &stru_1022E7CD8);
  }
  uint64_t v4 = qword_102419018;
  if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Received MotionActivityUpdate request", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_1022E7CD8);
    }
    v16[0] = 0;
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionActivityLiteClient::handleMessageMotionActivityUpdate(std::shared_ptr<CLConnectionMessage>)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  v17[0] = 0;
  if (sub_100B65970(a1, v17))
  {
    CFDictionaryRef Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
    sub_10013FA80((int)v16, Dictionary);
    BOOL v15 = 0;
    if (sub_1000D2988((uint64_t)v16, "kCLConnectionMessageSubscribeKey", &v15))
    {
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022E7CD8);
      }
      int v6 = qword_102419018;
      if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 67240192;
        BOOL v23 = v15;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Received MotionActivityUpdate subscription,%{public}u", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419010 != -1) {
          dispatch_once(&qword_102419010, &stru_1022E7CD8);
        }
        v17[1] = 67240192;
        v17[2] = v15;
        __int16 v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionActivityLiteClient::handleMessageMotionActivityUpdate(std::shared_ptr<CLConnectionMessage>)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      uint64_t v7 = *(void *)(a1 + 24);
      uint64_t v9 = *(void *)(v7 + 8);
      uint64_t v8 = *(void **)(v7 + 16);
      if (v15) {
        [v8 register:v9 forNotification:1 registrationInfo:0];
      }
      else {
        [v8 unregister:v9 forNotification:1];
      }
    }
    else
    {
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022E7CD8);
      }
      uint64_t v11 = qword_102419018;
      if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 68289026;
        BOOL v23 = 0;
        __int16 v24 = 2082;
        int v25 = "";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
        if (qword_102419010 != -1) {
          dispatch_once(&qword_102419010, &stru_1022E7CD8);
        }
      }
      uint64_t v12 = qword_102419018;
      if (os_signpost_enabled((os_log_t)qword_102419018))
      {
        *(_DWORD *)long long buf = 68289026;
        BOOL v23 = 0;
        __int16 v24 = 2082;
        int v25 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      }
      uint64_t v18 = CMErrorMessage;
      uint64_t v19 = &off_102393068;
      +[NSDictionary dictionaryWithObjects:&v19 forKeys:&v18 count:1];
      CLConnectionMessage::sendReply();
    }
    return sub_10013F3C4(v16);
  }
  else
  {
    uint64_t v20 = CMErrorMessage;
    unsigned __int16 v21 = +[NSNumber numberWithUnsignedInt:v17[0]];
    +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
    return CLConnectionMessage::sendReply();
  }
}

void sub_100B65948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

BOOL sub_100B65970(uint64_t a1, int *a2)
{
  if (sub_1005AD828())
  {
    sub_100134750(buf, "com.apple.locationd.activity");
    char isEntitled = CLConnection::isEntitled();
    char v5 = isEntitled;
    if (SBYTE3(v39) < 0)
    {
      operator delete(*(void **)buf);
      if (v5) {
        goto LABEL_4;
      }
    }
    else if (isEntitled)
    {
LABEL_4:
      BOOL result = 1;
      int v7 = 100;
      goto LABEL_24;
    }
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_1022E7CD8);
    }
    int v13 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      CLConnection::getName((uint64_t *)__p, *(CLConnection **)(a1 + 8));
      int v14 = SBYTE3(v34);
      BOOL v15 = *(unsigned char **)__p;
      int RemotePid = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
      __int16 v17 = __p;
      *(_DWORD *)long long buf = 136315650;
      if (v14 < 0) {
        __int16 v17 = v15;
      }
      *(void *)&uint8_t buf[4] = v17;
      __int16 v36 = 1024;
      int v37 = RemotePid;
      __int16 v38 = 2048;
      uint64_t v39 = a1;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "ActivityLite client failed entitlement check,connection,%s,pid,%d,this,%p", buf, 0x1Cu);
      if (SBYTE3(v34) < 0) {
        operator delete(*(void **)__p);
      }
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022E7CD8);
      }
      CLConnection::getName((uint64_t *)v28, *(CLConnection **)(a1 + 8));
      int v23 = v29;
      __int16 v24 = (void **)v28[0];
      int v25 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
      uint64_t v26 = v28;
      *(_DWORD *)uint64_t __p = 136315650;
      if (v23 < 0) {
        uint64_t v26 = v24;
      }
      *(void *)&__p[4] = v26;
      __int16 v31 = 1024;
      int v32 = v25;
      __int16 v33 = 2048;
      uint64_t v34 = a1;
      int v27 = (char *)_os_log_send_and_compose_impl();
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionActivityLiteClient::isAuthorizedForMotionActivityLite(CMError &)", "%s\n", v27);
      if (v27 != buf) {
        free(v27);
      }
      BOOL result = 0;
    }
    int v7 = 110;
  }
  else
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_1022E7CD8);
    }
    uint64_t v8 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      CLConnection::getName((uint64_t *)__p, *(CLConnection **)(a1 + 8));
      int v9 = SBYTE3(v34);
      uint64_t v10 = *(unsigned char **)__p;
      int v11 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
      uint64_t v12 = __p;
      *(_DWORD *)long long buf = 136315650;
      if (v9 < 0) {
        uint64_t v12 = v10;
      }
      *(void *)&uint8_t buf[4] = v12;
      __int16 v36 = 1024;
      int v37 = v11;
      __int16 v38 = 2048;
      uint64_t v39 = a1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "ActivityLite not available unable to service request,connection,%s,pid,%d,this,%p", buf, 0x1Cu);
      if (SBYTE3(v34) < 0) {
        operator delete(*(void **)__p);
      }
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022E7CD8);
      }
      CLConnection::getName((uint64_t *)v28, *(CLConnection **)(a1 + 8));
      int v18 = v29;
      uint64_t v19 = (void **)v28[0];
      int v20 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
      unsigned __int16 v21 = v28;
      *(_DWORD *)uint64_t __p = 136315650;
      if (v18 < 0) {
        unsigned __int16 v21 = v19;
      }
      *(void *)&__p[4] = v21;
      __int16 v31 = 1024;
      int v32 = v20;
      __int16 v33 = 2048;
      uint64_t v34 = a1;
      unint64_t v22 = (char *)_os_log_send_and_compose_impl();
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMotionActivityLiteClient::isAuthorizedForMotionActivityLite(CMError &)", "%s\n", v22);
      if (v22 != buf) {
        free(v22);
      }
      BOOL result = 0;
    }
    int v7 = 109;
  }
LABEL_24:
  *a2 = v7;
  return result;
}

void sub_100B65E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B65E8C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 1 && *(void *)(a1 + 8))
  {
    id v5 = objc_alloc((Class)CMMotionActivity);
    long long v6 = *(_OWORD *)(a4 + 112);
    v15[6] = *(_OWORD *)(a4 + 96);
    v15[7] = v6;
    uint64_t v16 = *(void *)(a4 + 128);
    long long v7 = *(_OWORD *)(a4 + 48);
    void v15[2] = *(_OWORD *)(a4 + 32);
    v15[3] = v7;
    long long v8 = *(_OWORD *)(a4 + 80);
    v15[4] = *(_OWORD *)(a4 + 64);
    v15[5] = v8;
    long long v9 = *(_OWORD *)(a4 + 16);
    v15[0] = *(_OWORD *)a4;
    v15[1] = v9;
    id v10 = [v5 initWithMotionActivity:v15];
    uint64_t v17 = CMMotionActivityData;
    id v18 = v10;
    int v14 = +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];

    sub_100B66054("MotionActivityLite/kCLConnectionMessageMotionActivityUpdate", &v12);
    int v11 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLConnection::sendMessage();
    if (v11) {
      sub_1000DB0A0(v11);
    }
    if (v13) {
      sub_1000DB0A0(v13);
    }
  }
}

void sub_100B65FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B65FF4(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100B66024(id a1)
{
  qword_102419018 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void *sub_100B66054@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  BOOL result = sub_10017E9C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100B660A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100B660D8(id a1)
{
}

void sub_100B662A0()
{
}

void sub_100B662C8(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_100B662F8()
{
  if (qword_10248A9D8) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A9D8 + 8))(qword_10248A9D8);
  }
  if (qword_10248A9E0) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A9E0 + 8))(qword_10248A9E0);
  }
  if (qword_10248A9E8) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A9E8 + 8))(qword_10248A9E8);
  }
  if (qword_10248A9F0) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A9F0 + 8))(qword_10248A9F0);
  }
  if (qword_10248A9F8) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A9F8 + 8))(qword_10248A9F8);
  }
  if (qword_10248AA00) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AA00 + 8))(qword_10248AA00);
  }
  if (qword_10248AA08) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AA08 + 8))(qword_10248AA08);
  }
  if (qword_10248AA10) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AA10 + 8))(qword_10248AA10);
  }
  if (qword_10248AA18) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AA18 + 8))(qword_10248AA18);
  }
  if (qword_10248AA20) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AA20 + 8))(qword_10248AA20);
  }
  if (qword_10248AA28) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AA28 + 8))(qword_10248AA28);
  }
  if (qword_10248AA30) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AA30 + 8))(qword_10248AA30);
  }
  if (qword_10248AA38) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AA38 + 8))(qword_10248AA38);
  }
  if (qword_10248AA40) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AA40 + 8))(qword_10248AA40);
  }
  if (qword_10248AA48) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AA48 + 8))(qword_10248AA48);
  }
  if (qword_10248AA50) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AA50 + 8))(qword_10248AA50);
  }
  if (qword_10248AA58) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AA58 + 8))(qword_10248AA58);
  }
  if (qword_10248AA60) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AA60 + 8))(qword_10248AA60);
  }
  if (qword_10248AA68) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AA68 + 8))(qword_10248AA68);
  }
  if (qword_10248AA70) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AA70 + 8))(qword_10248AA70);
  }
  uint64_t result = qword_10248AA78;
  if (qword_10248AA78)
  {
    uint64_t v1 = *(uint64_t (**)(void))(*(void *)qword_10248AA78 + 8);
    return v1();
  }
  return result;
}

void sub_100B66710(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_1024801E8 & 1) == 0)
  {
    byte_1024801E8 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc", a4);
    operator new();
  }
}

double sub_100B66E8C(uint64_t a1)
{
  *(void *)a1 = off_1022E7D48;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void *sub_100B66EB8(void *result)
{
  *double result = &off_1022E7DC0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void *sub_100B66EDC(void *result)
{
  *double result = &off_1022E7E38;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_100B66F00(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_1022E7EB0;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  return result;
}

uint64_t sub_100B66F2C(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_1022E7F28;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  return result;
}

void *sub_100B66F58(void *result)
{
  *double result = off_1022E7FA0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

double sub_100B66F7C(uint64_t a1)
{
  *(void *)a1 = off_1022E8018;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  return result;
}

double sub_100B66FB0(uint64_t a1)
{
  *(void *)a1 = off_1022E8090;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  return result;
}

double sub_100B66FE4(uint64_t a1)
{
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(a1 + 80) = 0xFFFFFFFFLL;
  *(void *)a1 = off_1022E8108;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 48) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  return result;
}

double sub_100B67028(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1022E83D8;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)&double result = 0x8FFFFFFFFLL;
  *(_OWORD *)(a1 + 32) = xmmword_101D81610;
  return result;
}

void *sub_100B6705C(void *result)
{
  *double result = &off_1022E8450;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void *sub_100B67080(void *result)
{
  *double result = &off_1022E84C8;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_100B670A4(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_1022E8540;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  return result;
}

double sub_100B670D0(uint64_t a1)
{
  *(void *)a1 = off_1022E85B8;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 168) = 0;
  return result;
}

void *sub_100B67138(void *result)
{
  result[1] = 0;
  result[2] = 0;
  *double result = &off_1022E8630;
  return result;
}

double sub_100B6715C(uint64_t a1)
{
  *(void *)a1 = off_1022E86A8;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_100B67190(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = qword_10248A9D8;
  if (qword_10248A9D8)
  {
    *(void *)(result + 8) = qword_10248A9D8;
  }
  else
  {
    double result = ((uint64_t (*)(void))sub_100B66710)();
    uint64_t v2 = qword_10248A9D8;
    v1[1] = qword_10248A9D8;
    if (!v2)
    {
      double result = sub_100B66710(result);
      uint64_t v2 = qword_10248A9D8;
    }
  }
  v1[2] = v2;
  uint64_t v3 = qword_10248AA08;
  if (!qword_10248AA08)
  {
    double result = sub_100B66710(result);
    uint64_t v3 = qword_10248AA08;
  }
  v1[3] = v3;
  uint64_t v4 = qword_10248AA10;
  if (!qword_10248AA10)
  {
    double result = sub_100B66710(result);
    uint64_t v4 = qword_10248AA10;
  }
  v1[5] = v4;
  uint64_t v5 = qword_10248A9F0;
  if (qword_10248A9F0)
  {
    void v1[7] = qword_10248A9F0;
  }
  else
  {
    double result = sub_100B66710(result);
    uint64_t v5 = qword_10248A9F0;
    void v1[7] = qword_10248A9F0;
    if (!v5)
    {
      double result = sub_100B66710(result);
      uint64_t v5 = qword_10248A9F0;
    }
  }
  v1[8] = v5;
  uint64_t v6 = qword_10248AA00;
  if (!qword_10248AA00)
  {
    double result = sub_100B66710(result);
    uint64_t v6 = qword_10248AA00;
  }
  v1[9] = v6;
  return result;
}

uint64_t sub_100B67258(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = qword_10248A9D8;
  if (!qword_10248A9D8)
  {
    double result = sub_100B66710(result);
    uint64_t v2 = qword_10248A9D8;
  }
  v1[1] = v2;
  uint64_t v3 = qword_10248A9F8;
  if (qword_10248A9F8)
  {
    v1[2] = qword_10248A9F8;
  }
  else
  {
    double result = sub_100B66710(result);
    uint64_t v3 = qword_10248A9F8;
    v1[2] = qword_10248A9F8;
    if (!v3)
    {
      double result = sub_100B66710(result);
      uint64_t v3 = qword_10248A9F8;
    }
  }
  v1[3] = v3;
  uint64_t v4 = qword_10248A9E8;
  if (!qword_10248A9E8)
  {
    double result = sub_100B66710(result);
    uint64_t v4 = qword_10248A9E8;
  }
  v1[4] = v4;
  uint64_t v5 = qword_10248AA28;
  if (!qword_10248AA28)
  {
    double result = sub_100B66710(result);
    uint64_t v5 = qword_10248AA28;
  }
  v1[6] = v5;
  uint64_t v6 = qword_10248AA40;
  if (!qword_10248AA40)
  {
    double result = sub_100B66710(result);
    uint64_t v6 = qword_10248AA40;
  }
  void v1[7] = v6;
  return result;
}

uint64_t sub_100B67308(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = qword_10248A9D8;
  if (!qword_10248A9D8)
  {
    double result = sub_100B66710(result);
    uint64_t v2 = qword_10248A9D8;
  }
  v1[1] = v2;
  uint64_t v3 = qword_10248AA50;
  if (!qword_10248AA50)
  {
    double result = sub_100B66710(result);
    uint64_t v3 = qword_10248AA50;
  }
  v1[2] = v3;
  uint64_t v4 = qword_10248A9F8;
  if (!qword_10248A9F8)
  {
    double result = sub_100B66710(result);
    uint64_t v4 = qword_10248A9F8;
  }
  v1[3] = v4;
  uint64_t v5 = qword_10248AA60;
  if (!qword_10248AA60)
  {
    double result = sub_100B66710(result);
    uint64_t v5 = qword_10248AA60;
  }
  v1[4] = v5;
  uint64_t v6 = qword_10248AA70;
  if (!qword_10248AA70)
  {
    double result = sub_100B66710(result);
    uint64_t v6 = qword_10248AA70;
  }
  v1[5] = v6;
  return result;
}

BOOL sub_100B673A0(int a1)
{
  return (a1 + 1) < 6;
}

double sub_100B673B0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 36))
    {
      double result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(double *)(a1 + 8) = result;
      int v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          return result;
        }
        goto LABEL_7;
      }
    }
    else if ((*(unsigned char *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    double result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(double *)(a1 + 16) = result;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0) {
      return result;
    }
LABEL_7:
    double result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(double *)(a1 + 24) = result;
  }
  return result;
}

void sub_100B67484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B6749C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022E7D48;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B674BC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022E7D48;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100B67510()
{
}

uint64_t sub_100B67564(uint64_t result)
{
  if (*(unsigned char *)(result + 36))
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100B6757C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_27;
        }
        unint64_t v12 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 8) = v12;
        *(_DWORD *)(a1 + 36) |= 1u;
        long long v9 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v9 < *((void *)this + 2) && *v9 == 17)
        {
          *((void *)this + 1) = v9 + 1;
LABEL_17:
          unint64_t v12 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
            return 0;
          }
          *(void *)(a1 + 16) = v12;
          *(_DWORD *)(a1 + 36) |= 2u;
          id v10 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v10 < *((void *)this + 2) && *v10 == 25)
          {
            *((void *)this + 1) = v10 + 1;
            goto LABEL_21;
          }
        }
      }
      if (v7 == 2)
      {
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_27;
        }
        goto LABEL_17;
      }
      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_27;
      }
      int v8 = TagFallback & 7;
      if (v8 == 1) {
        break;
      }
LABEL_27:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_21:
    unint64_t v12 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
      return 0;
    }
    *(void *)(a1 + 24) = v12;
    *(_DWORD *)(a1 + 36) |= 4u;
  }
  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)this + 36) = 1;
  return result;
}

uint64_t sub_100B67744(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 36);
  if ((v5 & 1) == 0)
  {
    if ((v5 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v4 + 16), a3);
    if ((*(_DWORD *)(v4 + 36) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
  int v5 = *(_DWORD *)(v4 + 36);
  if ((v5 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 4) == 0) {
    return result;
  }
LABEL_7:
  double v6 = *(double *)(v4 + 24);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, v6, a3);
}

uint64_t sub_100B677D0(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 36);
  if (*(unsigned char *)(a1 + 36))
  {
    unsigned int v2 = ((int)(v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0) {
      v2 += 9;
    }
    if ((v1 & 4) != 0) {
      uint64_t v1 = v2 + 9;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *(_DWORD *)(a1 + 32) = v1;
  return v1;
}

double sub_100B67808(uint64_t a1, void *lpsrc)
{
  return sub_100B673B0(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B67890()
{
  return 1;
}

void *sub_100B67898@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Vision.TimeStamp");
}

void sub_100B678A8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v5);
  }
  int v4 = *(_DWORD *)(a2 + 16);
  if (v4)
  {
    sub_100221DFC(a1 + 8, *(_DWORD *)(a1 + 16) + v4);
    memcpy((void *)(*(void *)(a1 + 8) + 4 * *(int *)(a1 + 16)), *(const void **)(a2 + 8), 4 * *(int *)(a2 + 16));
    *(_DWORD *)(a1 + 16) += *(_DWORD *)(a2 + 16);
  }
}

void sub_100B6795C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B67974(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1022E7DC0;
  if (*((void *)this + 1)) {
    operator delete[]();
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B679E4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100B67974(a1);

  operator delete();
}

void sub_100B67A1C()
{
}

uint64_t sub_100B67A68(uint64_t result)
{
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100B67A74(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5 = a1 + 8;
  while (1)
  {
    while (1)
    {
      double v6 = (char *)*((void *)this + 1);
      if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v6;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v6 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      int v8 = TagFallback & 7;
      if ((TagFallback & 0xFFFFFFF8) != 8) {
        break;
      }
      if (v8 != 2)
      {
        if (v8 != 5) {
          break;
        }
        goto LABEL_15;
      }
      uint64_t result = sub_100B67CF0(this, v5);
      if (!result) {
        return result;
      }
      while (1)
      {
        int v20 = (unsigned char *)*((void *)this + 1);
        unsigned __int16 v21 = (unsigned char *)*((void *)this + 2);
        if (v20 >= v21 || *v20 != 13) {
          break;
        }
        *((void *)this + 1) = v20 + 1;
LABEL_15:
        v22[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v22) & 1) == 0) {
          return 0;
        }
        unsigned int v10 = v22[0];
        int v11 = *(_DWORD *)(a1 + 16);
        if (v11 == *(_DWORD *)(a1 + 20))
        {
          sub_100221DFC(v5, v11 + 1);
          int v11 = *(_DWORD *)(a1 + 16);
        }
        uint64_t v12 = *(void *)(a1 + 8);
        int v13 = v11 + 1;
        *(_DWORD *)(a1 + 16) = v11 + 1;
        *(_DWORD *)(v12 + 4 * v11) = v10;
        uint64_t v14 = *((void *)this + 1);
        int v15 = *((_DWORD *)this + 4) - v14;
        if (v15 >= 1)
        {
          signed int v16 = v15 / 5u;
          int v17 = v16 >= *(_DWORD *)(a1 + 20) - v13 ? *(_DWORD *)(a1 + 20) - v13 : v16;
          if (v17 >= 1)
          {
            int v18 = 0;
            while (*(unsigned char *)v14 == 13)
            {
              int v19 = *(_DWORD *)(v14 + 1);
              if (v13 >= *(_DWORD *)(a1 + 20))
              {
                wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v22);
                int v13 = *(_DWORD *)(a1 + 16);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 16) = v13 + 1;
              *(_DWORD *)(v12 + 4 * v13) = v19;
              ++v18;
              v14 += 5;
              ++v13;
              if (v17 == v18)
              {
                int v18 = v17;
                break;
              }
            }
            if (v18) {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 5 * v18);
            }
          }
        }
      }
      if (v20 == v21 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (v8 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_100B67CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B67CF0(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a2)
{
  unsigned int v11 = 0;
  int v4 = (char *)*((void *)this + 1);
  if ((unint64_t)v4 >= *((void *)this + 2) || *v4 < 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v11);
    if (!result) {
      return result;
    }
    unsigned int v5 = v11;
  }
  else
  {
    unsigned int v5 = *v4;
    unsigned int v11 = v5;
    *((void *)this + 1) = v4 + 1;
  }
  int v7 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v5);
  if ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) < 1)
  {
LABEL_11:
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v7);
    return 1;
  }
  else
  {
    while (1)
    {
      unsigned int v12 = 0;
      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v12);
      if (!result) {
        break;
      }
      unsigned int v8 = v12;
      int v9 = *(_DWORD *)(a2 + 8);
      if (v9 == *(_DWORD *)(a2 + 12))
      {
        sub_100221DFC(a2, v9 + 1);
        int v9 = *(_DWORD *)(a2 + 8);
      }
      uint64_t v10 = *(void *)a2;
      *(_DWORD *)(a2 + 8) = v9 + 1;
      *(_DWORD *)(v10 + 4 * v9) = v8;
      if ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) <= 0) {
        goto LABEL_11;
      }
    }
  }
  return result;
}

uint64_t sub_100B67DEC(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(float *)(*(void *)(v4 + 8) + 4 * v5++), a3);
    while (v5 < *(int *)(v4 + 16));
  }
  return result;
}

uint64_t sub_100B67E4C(uint64_t a1)
{
  uint64_t v1 = (5 * *(_DWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

void sub_100B67E60(uint64_t a1, void *lpsrc)
{
  sub_100B678A8(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B67EE8()
{
  return 1;
}

void *sub_100B67EF0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Vision.simd_floatM");
}

void sub_100B67F00(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v5);
  }
  int v4 = *(_DWORD *)(a2 + 16);
  if (v4)
  {
    sub_10026DE30(a1 + 8, *(_DWORD *)(a1 + 16) + v4);
    memcpy((void *)(*(void *)(a1 + 8) + 8 * *(int *)(a1 + 16)), *(const void **)(a2 + 8), 8 * *(int *)(a2 + 16));
    *(_DWORD *)(a1 + 16) += *(_DWORD *)(a2 + 16);
  }
}

void sub_100B67FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B67FCC(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1022E7E38;
  if (*((void *)this + 1)) {
    operator delete[]();
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B6803C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100B67FCC(a1);

  operator delete();
}

void sub_100B68074()
{
}

uint64_t sub_100B680C0(uint64_t result)
{
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100B680CC(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5 = a1 + 8;
  while (1)
  {
LABEL_2:
    double v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    int v8 = TagFallback & 7;
    if ((TagFallback & 0xFFFFFFF8) == 8)
    {
      if (v8 == 1)
      {
        while (1)
        {
          v22[0] = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, v22) & 1) == 0) {
            return 0;
          }
          unint64_t v10 = v22[0];
          int v11 = *(_DWORD *)(a1 + 16);
          if (v11 == *(_DWORD *)(a1 + 20))
          {
            sub_10026DE30(v5, v11 + 1);
            int v11 = *(_DWORD *)(a1 + 16);
          }
          uint64_t v12 = *(void *)(a1 + 8);
          int v13 = v11 + 1;
          *(_DWORD *)(a1 + 16) = v11 + 1;
          *(void *)(v12 + 8 * v11) = v10;
          uint64_t v14 = *((void *)this + 1);
          int v15 = *((_DWORD *)this + 4) - v14;
          if (v15 >= 1)
          {
            signed int v16 = v15 / 9u;
            int v17 = v16 >= *(_DWORD *)(a1 + 20) - v13 ? *(_DWORD *)(a1 + 20) - v13 : v16;
            if (v17 >= 1)
            {
              int v18 = 0;
              while (*(unsigned char *)v14 == 9)
              {
                uint64_t v19 = *(void *)(v14 + 1);
                if (v13 >= *(_DWORD *)(a1 + 20))
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                  wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v22);
                  int v13 = *(_DWORD *)(a1 + 16);
                  uint64_t v12 = *(void *)(a1 + 8);
                }
                *(_DWORD *)(a1 + 16) = v13 + 1;
                *(void *)(v12 + 8 * v13) = v19;
                ++v18;
                v14 += 9;
                ++v13;
                if (v17 == v18)
                {
                  int v18 = v17;
                  break;
                }
              }
              if (v18) {
                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 9 * v18);
              }
            }
          }
LABEL_31:
          int v20 = (unsigned char *)*((void *)this + 1);
          unsigned __int16 v21 = (unsigned char *)*((void *)this + 2);
          if (v20 >= v21 || *v20 != 9)
          {
            if (v20 == v21 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              uint64_t result = 1;
              *((unsigned char *)this + 36) = 1;
              return result;
            }
            goto LABEL_2;
          }
          *((void *)this + 1) = v20 + 1;
        }
      }
      if (v8 == 2) {
        break;
      }
    }
    if (v8 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  uint64_t result = sub_100249F20(this, v5);
  if (result) {
    goto LABEL_31;
  }
  return result;
}

void sub_100B68330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B68348(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(*(void *)(v4 + 8) + 8 * v5++), a3);
    while (v5 < *(int *)(v4 + 16));
  }
  return result;
}

uint64_t sub_100B683A8(uint64_t a1)
{
  uint64_t v1 = (9 * *(_DWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

void sub_100B683BC(uint64_t a1, void *lpsrc)
{
  sub_100B67F00(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B68444()
{
  return 1;
}

void *sub_100B6844C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Vision.simd_doubleM");
}

void sub_100B6845C(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a2 + 8) + 8 * v4);
      int v6 = a1[5];
      uint64_t v7 = (int)a1[4];
      if ((int)v7 >= v6)
      {
        if (v6 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), v6 + 1);
          int v6 = a1[5];
        }
        a1[5] = v6 + 1;
        operator new();
      }
      uint64_t v8 = *((void *)a1 + 1);
      a1[4] = v7 + 1;
      sub_100B678A8(*(void *)(v8 + 8 * v7), v5);
      ++v4;
    }
    while (v4 < *(int *)(a2 + 16));
  }
}

void sub_100B685B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B685D0(uint64_t *a1)
{
  *a1 = (uint64_t)off_1022E7EB0;
  sub_10016B2E8(a1 + 1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_100B6862C(uint64_t *a1)
{
  sub_100B685D0(a1);

  operator delete();
}

void sub_100B68664()
{
}

uint64_t sub_100B686B8(uint64_t a1)
{
  uint64_t result = sub_10026DEDC(a1 + 8);
  *(_DWORD *)(a1 + 36) = 0;
  return result;
}

uint64_t sub_100B686E4(int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
LABEL_2:
    int v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
    }
    else
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v6 + 1;
    }
    if (TagFallback == 10)
    {
      while (1)
      {
        int v8 = a1[5];
        uint64_t v9 = a1[4];
        if ((int)v9 >= v8)
        {
          if (v8 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v8 + 1);
            int v8 = a1[5];
          }
          a1[5] = v8 + 1;
          operator new();
        }
        uint64_t v10 = *((void *)a1 + 1);
        a1[4] = v9 + 1;
        uint64_t v11 = *(void *)(v10 + 8 * v9);
        unsigned int v23 = 0;
        uint64_t v12 = (char *)*((void *)this + 1);
        if ((unint64_t)v12 >= *((void *)this + 2) || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23))return 0; {
        }
          }
        else
        {
          unsigned int v23 = *v12;
          *((void *)this + 1) = v12 + 1;
        }
        int v13 = *((_DWORD *)this + 14);
        int v14 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v13 + 1;
        if (v13 >= v14) {
          return 0;
        }
        int v15 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
        if (!sub_100B67A74(v11, this, v16) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v15);
        int v17 = *((_DWORD *)this + 14);
        BOOL v18 = __OFSUB__(v17, 1);
        int v19 = v17 - 1;
        if (v19 < 0 == v18) {
          *((_DWORD *)this + 14) = v19;
        }
        int v20 = (unsigned char *)*((void *)this + 1);
        unsigned __int16 v21 = (unsigned char *)*((void *)this + 2);
        if (v20 >= v21 || *v20 != 10)
        {
          if (v20 == v21 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)this + 36) = 1;
            return result;
          }
          goto LABEL_2;
        }
        *((void *)this + 1) = v20 + 1;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_100B6890C(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  return result;
}

uint64_t sub_100B6896C(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 < 1)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    uint64_t v4 = 0;
    LODWORD(v5) = *(_DWORD *)(a1 + 16);
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 8 * v4);
      uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(5 * *(_DWORD *)(v6 + 16));
      *(_DWORD *)(v6 + 24) = v7;
      if (v7 >= 0x80)
      {
        int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
        int v3 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        int v8 = 1;
      }
      uint64_t v5 = (v7 + v5 + v8);
      ++v4;
    }
    while (v4 < v3);
  }
  *(_DWORD *)(a1 + 32) = v5;
  return v5;
}

void sub_100B689FC(_DWORD *a1, void *lpsrc)
{
  sub_100B6845C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B68A84()
{
  return 1;
}

void *sub_100B68A8C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Vision.simd_floatMxN");
}

void sub_100B68A9C(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a2 + 8) + 8 * v4);
      int v6 = a1[5];
      uint64_t v7 = (int)a1[4];
      if ((int)v7 >= v6)
      {
        if (v6 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), v6 + 1);
          int v6 = a1[5];
        }
        a1[5] = v6 + 1;
        operator new();
      }
      uint64_t v8 = *((void *)a1 + 1);
      a1[4] = v7 + 1;
      sub_100B67F00(*(void *)(v8 + 8 * v7), v5);
      ++v4;
    }
    while (v4 < *(int *)(a2 + 16));
  }
}

void sub_100B68BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B68C10(uint64_t *a1)
{
  *a1 = (uint64_t)off_1022E7F28;
  sub_10016B2E8(a1 + 1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_100B68C6C(uint64_t *a1)
{
  sub_100B68C10(a1);

  operator delete();
}

void sub_100B68CA4()
{
}

uint64_t sub_100B68CF8(uint64_t a1)
{
  uint64_t result = sub_10026DEDC(a1 + 8);
  *(_DWORD *)(a1 + 36) = 0;
  return result;
}

uint64_t sub_100B68D24(int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
LABEL_2:
    int v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
    }
    else
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v6 + 1;
    }
    if (TagFallback == 10)
    {
      while (1)
      {
        int v8 = a1[5];
        uint64_t v9 = a1[4];
        if ((int)v9 >= v8)
        {
          if (v8 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v8 + 1);
            int v8 = a1[5];
          }
          a1[5] = v8 + 1;
          operator new();
        }
        uint64_t v10 = *((void *)a1 + 1);
        a1[4] = v9 + 1;
        uint64_t v11 = *(void *)(v10 + 8 * v9);
        unsigned int v23 = 0;
        uint64_t v12 = (char *)*((void *)this + 1);
        if ((unint64_t)v12 >= *((void *)this + 2) || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23))return 0; {
        }
          }
        else
        {
          unsigned int v23 = *v12;
          *((void *)this + 1) = v12 + 1;
        }
        int v13 = *((_DWORD *)this + 14);
        int v14 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v13 + 1;
        if (v13 >= v14) {
          return 0;
        }
        int v15 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
        if (!sub_100B680CC(v11, this, v16) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v15);
        int v17 = *((_DWORD *)this + 14);
        BOOL v18 = __OFSUB__(v17, 1);
        int v19 = v17 - 1;
        if (v19 < 0 == v18) {
          *((_DWORD *)this + 14) = v19;
        }
        int v20 = (unsigned char *)*((void *)this + 1);
        unsigned __int16 v21 = (unsigned char *)*((void *)this + 2);
        if (v20 >= v21 || *v20 != 10)
        {
          if (v20 == v21 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)this + 36) = 1;
            return result;
          }
          goto LABEL_2;
        }
        *((void *)this + 1) = v20 + 1;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_100B68F4C(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  return result;
}

uint64_t sub_100B68FAC(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 < 1)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    uint64_t v4 = 0;
    LODWORD(v5) = *(_DWORD *)(a1 + 16);
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 8 * v4);
      uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(9 * *(_DWORD *)(v6 + 16));
      *(_DWORD *)(v6 + 24) = v7;
      if (v7 >= 0x80)
      {
        int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
        int v3 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        int v8 = 1;
      }
      uint64_t v5 = (v7 + v5 + v8);
      ++v4;
    }
    while (v4 < v3);
  }
  *(_DWORD *)(a1 + 32) = v5;
  return v5;
}

void sub_100B6903C(_DWORD *a1, void *lpsrc)
{
  sub_100B68A9C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B690C4()
{
  return 1;
}

void *sub_100B690CC@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Vision.simd_doubleMxN");
}

double sub_100B690DC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      double result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(double *)(a1 + 8) = result;
      int v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      double result = *(double *)(a2 + 16);
      *(_DWORD *)(a1 + 28) |= 2u;
      *(double *)(a1 + 16) = result;
    }
  }
  return result;
}

void sub_100B69188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B691A0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022E7FA0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B691C0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022E7FA0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100B69214()
{
}

uint64_t sub_100B69260(uint64_t result)
{
  if (*(unsigned char *)(result + 28))
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100B69274(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_21;
        }
        unint64_t v10 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v10) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 8) = v10;
        *(_DWORD *)(a1 + 28) |= 1u;
        int v8 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v8 < *((void *)this + 2) && *v8 == 17)
        {
          *((void *)this + 1) = v8 + 1;
          goto LABEL_15;
        }
      }
      if (TagFallback >> 3 != 2)
      {
        int v7 = TagFallback & 7;
        goto LABEL_21;
      }
      int v7 = TagFallback & 7;
      if (v7 == 1) {
        break;
      }
LABEL_21:
      if (v7 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_15:
    unint64_t v10 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v10) & 1) == 0) {
      return 0;
    }
    *(void *)(a1 + 16) = v10;
    *(_DWORD *)(a1 + 28) |= 2u;
  }
  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)this + 36) = 1;
  return result;
}

uint64_t sub_100B693DC(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 28);
  if (v5)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    int v5 = *(_DWORD *)(v4 + 28);
  }
  if ((v5 & 2) != 0)
  {
    double v6 = *(double *)(v4 + 16);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, v6, a3);
  }
  return result;
}

uint64_t sub_100B69448(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 28);
  if (*(unsigned char *)(a1 + 28))
  {
    unsigned int v2 = ((int)(v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0) {
      uint64_t v1 = v2 + 9;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

double sub_100B69474(uint64_t a1, void *lpsrc)
{
  return sub_100B690DC(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B694FC()
{
  return 1;
}

void *sub_100B69504@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Vision.CGSize");
}

void sub_100B69514(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v17);
  }
  int v4 = *(_DWORD *)(a2 + 64);
  if (!(_BYTE)v4) {
    goto LABEL_13;
  }
  if (v4)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 64) |= 1u;
    *(void *)(a1 + 8) = v7;
    int v4 = *(_DWORD *)(a2 + 64);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_22;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_6;
  }
  int v8 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 64) |= 2u;
  *(_DWORD *)(a1 + 16) = v8;
  int v4 = *(_DWORD *)(a2 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v9 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 64) |= 4u;
  *(_DWORD *)(a1 + 20) = v9;
  int v4 = *(_DWORD *)(a2 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  int v10 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 64) |= 8u;
  *(_DWORD *)(a1 + 24) = v10;
  int v4 = *(_DWORD *)(a2 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_25:
    int v12 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 64) |= 0x20u;
    *(_DWORD *)(a1 + 32) = v12;
    int v4 = *(_DWORD *)(a2 + 64);
    if ((v4 & 0x40) == 0)
    {
LABEL_11:
      if ((v4 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_24:
  int v11 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 64) |= 0x10u;
  *(_DWORD *)(a1 + 28) = v11;
  int v4 = *(_DWORD *)(a2 + 64);
  if ((v4 & 0x20) != 0) {
    goto LABEL_25;
  }
LABEL_10:
  if ((v4 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_26:
  int v13 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 64) |= 0x40u;
  *(_DWORD *)(a1 + 36) = v13;
  int v4 = *(_DWORD *)(a2 + 64);
  if ((v4 & 0x80) != 0)
  {
LABEL_12:
    int v5 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 64) |= 0x80u;
    *(_DWORD *)(a1 + 40) = v5;
    int v4 = *(_DWORD *)(a2 + 64);
  }
LABEL_13:
  if ((v4 & 0xFF00) == 0) {
    return;
  }
  if ((v4 & 0x100) != 0)
  {
    int v14 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a1 + 64) |= 0x100u;
    *(_DWORD *)(a1 + 44) = v14;
    int v4 = *(_DWORD *)(a2 + 64);
    if ((v4 & 0x200) == 0)
    {
LABEL_16:
      if ((v4 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_16;
  }
  int v15 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) |= 0x200u;
  *(_DWORD *)(a1 + 48) = v15;
  int v4 = *(_DWORD *)(a2 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_17:
    if ((v4 & 0x800) == 0) {
      return;
    }
    goto LABEL_18;
  }
LABEL_30:
  int v16 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 64) |= 0x400u;
  *(_DWORD *)(a1 + 52) = v16;
  if ((*(_DWORD *)(a2 + 64) & 0x800) == 0) {
    return;
  }
LABEL_18:
  int v6 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) |= 0x800u;
  *(_DWORD *)(a1 + 56) = v6;
}

void sub_100B69714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B6972C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022E8018;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B6974C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022E8018;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100B697A0()
{
}

uint64_t sub_100B697FC(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 64);
  if ((_BYTE)v1)
  {
    *(_DWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(void *)(result + 52) = 0;
    *(void *)(result + 44) = 0;
  }
  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t sub_100B69830(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char v42 = (unint64_t *)(a1 + 8);
  int v43 = (unsigned int *)(a1 + 16);
  double v44 = (unsigned int *)(a1 + 20);
  __int16 v45 = (unsigned int *)(a1 + 24);
  int v5 = (unsigned int *)(a1 + 28);
  int v6 = (unsigned int *)(a1 + 32);
  uint64_t v7 = (unsigned int *)(a1 + 36);
  int v8 = (unsigned int *)(a1 + 40);
  int v9 = (unsigned int *)(a1 + 44);
  int v10 = (unsigned int *)(a1 + 48);
  int v11 = (unsigned int *)(a1 + 52);
  int v12 = (unsigned int *)(a1 + 56);
  while (2)
  {
    int v13 = (char *)*((void *)this + 1);
    if ((unint64_t)v13 >= *((void *)this + 2) || *v13 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v13;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v13 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        int v17 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        if ((unint64_t)v17 < v16 && (*v17 & 0x80000000) == 0)
        {
          *char v42 = *v17;
          BOOL v18 = v17 + 1;
          *((void *)this + 1) = v18;
LABEL_40:
          *(_DWORD *)(a1 + 64) |= 1u;
          if ((unint64_t)v18 < v16 && *v18 == 16)
          {
            int v19 = v18 + 1;
            *((void *)this + 1) = v19;
            goto LABEL_43;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v42);
        if (result)
        {
          BOOL v18 = (unsigned char *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
          goto LABEL_40;
        }
        break;
      case 2u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        int v19 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
LABEL_43:
        if ((unint64_t)v19 >= v16 || *v19 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v43);
          if (!result) {
            return result;
          }
          int v30 = (unsigned char *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
        }
        else
        {
          *int v43 = *v19;
          int v30 = v19 + 1;
          *((void *)this + 1) = v30;
        }
        *(_DWORD *)(a1 + 64) |= 2u;
        if ((unint64_t)v30 >= v16 || *v30 != 24) {
          continue;
        }
        int v20 = v30 + 1;
        *((void *)this + 1) = v20;
LABEL_51:
        if ((unint64_t)v20 >= v16 || *v20 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v44);
          if (!result) {
            return result;
          }
          __int16 v31 = (unsigned char *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
        }
        else
        {
          *double v44 = *v20;
          __int16 v31 = v20 + 1;
          *((void *)this + 1) = v31;
        }
        *(_DWORD *)(a1 + 64) |= 4u;
        if ((unint64_t)v31 >= v16 || *v31 != 32) {
          continue;
        }
        unsigned __int16 v21 = v31 + 1;
        *((void *)this + 1) = v21;
LABEL_59:
        if ((unint64_t)v21 >= v16 || *v21 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v45);
          if (!result) {
            return result;
          }
          int v32 = (unsigned char *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
        }
        else
        {
          *__int16 v45 = *v21;
          int v32 = v21 + 1;
          *((void *)this + 1) = v32;
        }
        *(_DWORD *)(a1 + 64) |= 8u;
        if ((unint64_t)v32 >= v16 || *v32 != 40) {
          continue;
        }
        unint64_t v22 = v32 + 1;
        *((void *)this + 1) = v22;
LABEL_67:
        if ((unint64_t)v22 >= v16 || *v22 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!result) {
            return result;
          }
          __int16 v33 = (unsigned char *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
        }
        else
        {
          *int v5 = *v22;
          __int16 v33 = v22 + 1;
          *((void *)this + 1) = v33;
        }
        *(_DWORD *)(a1 + 64) |= 0x10u;
        if ((unint64_t)v33 >= v16 || *v33 != 48) {
          continue;
        }
        unsigned int v23 = v33 + 1;
        *((void *)this + 1) = v23;
LABEL_75:
        if ((unint64_t)v23 >= v16 || *v23 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!result) {
            return result;
          }
          uint64_t v34 = (unsigned char *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
        }
        else
        {
          *int v6 = *v23;
          uint64_t v34 = v23 + 1;
          *((void *)this + 1) = v34;
        }
        *(_DWORD *)(a1 + 64) |= 0x20u;
        if ((unint64_t)v34 >= v16 || *v34 != 56) {
          continue;
        }
        __int16 v24 = v34 + 1;
        *((void *)this + 1) = v24;
LABEL_83:
        if ((unint64_t)v24 >= v16 || *v24 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!result) {
            return result;
          }
          int v35 = (unsigned char *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
        }
        else
        {
          *uint64_t v7 = *v24;
          int v35 = v24 + 1;
          *((void *)this + 1) = v35;
        }
        *(_DWORD *)(a1 + 64) |= 0x40u;
        if ((unint64_t)v35 >= v16 || *v35 != 64) {
          continue;
        }
        int v25 = v35 + 1;
        *((void *)this + 1) = v25;
LABEL_91:
        if ((unint64_t)v25 >= v16 || *v25 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
          if (!result) {
            return result;
          }
          __int16 v36 = (unsigned char *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
        }
        else
        {
          *int v8 = *v25;
          __int16 v36 = v25 + 1;
          *((void *)this + 1) = v36;
        }
        *(_DWORD *)(a1 + 64) |= 0x80u;
        if ((unint64_t)v36 >= v16 || *v36 != 72) {
          continue;
        }
        uint64_t v26 = v36 + 1;
        *((void *)this + 1) = v26;
LABEL_99:
        if ((unint64_t)v26 >= v16 || *v26 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v9);
          if (!result) {
            return result;
          }
          int v37 = (unsigned char *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
        }
        else
        {
          *int v9 = *v26;
          int v37 = v26 + 1;
          *((void *)this + 1) = v37;
        }
        *(_DWORD *)(a1 + 64) |= 0x100u;
        if ((unint64_t)v37 >= v16 || *v37 != 80) {
          continue;
        }
        int v27 = v37 + 1;
        *((void *)this + 1) = v27;
LABEL_107:
        if ((unint64_t)v27 >= v16 || *v27 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v10);
          if (!result) {
            return result;
          }
          __int16 v38 = (unsigned char *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
        }
        else
        {
          unsigned int *v10 = *v27;
          __int16 v38 = v27 + 1;
          *((void *)this + 1) = v38;
        }
        *(_DWORD *)(a1 + 64) |= 0x200u;
        if ((unint64_t)v38 >= v16 || *v38 != 88) {
          continue;
        }
        double v28 = v38 + 1;
        *((void *)this + 1) = v28;
LABEL_115:
        if ((unint64_t)v28 >= v16 || *v28 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v11);
          if (!result) {
            return result;
          }
          uint64_t v39 = (unsigned char *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
        }
        else
        {
          *int v11 = *v28;
          uint64_t v39 = v28 + 1;
          *((void *)this + 1) = v39;
        }
        *(_DWORD *)(a1 + 64) |= 0x400u;
        if ((unint64_t)v39 >= v16 || *v39 != 96) {
          continue;
        }
        char v29 = v39 + 1;
        *((void *)this + 1) = v29;
LABEL_123:
        if ((unint64_t)v29 >= v16 || *v29 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v12);
          if (!result) {
            return result;
          }
          unsigned int v40 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
        }
        else
        {
          *int v12 = *v29;
          unsigned int v40 = (unsigned __int8 *)(v29 + 1);
          *((void *)this + 1) = v40;
        }
        *(_DWORD *)(a1 + 64) |= 0x800u;
        if (v40 != (unsigned __int8 *)v16 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10)) {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      case 3u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        int v20 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_51;
      case 4u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        unsigned __int16 v21 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_59;
      case 5u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        unint64_t v22 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_67;
      case 6u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        unsigned int v23 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_75;
      case 7u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        __int16 v24 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_83;
      case 8u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        int v25 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_91;
      case 9u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        uint64_t v26 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_99;
      case 0xAu:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        int v27 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_107;
      case 0xBu:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        double v28 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_115;
      case 0xCu:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        char v29 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_123;
      default:
        int v15 = TagFallback & 7;
LABEL_34:
        if (v15 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t sub_100B69EE0(uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v4 = a2;
  int v5 = (int *)result;
  int v6 = *(_DWORD *)(result + 64);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(result + 8), a2, a4);
    int v6 = v5[16];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[4], v4, a4);
  int v6 = v5[16];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], v4, a4);
  int v6 = v5[16];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[6], v4, a4);
  int v6 = v5[16];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[7], v4, a4);
  int v6 = v5[16];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v5[8], v4, a4);
  int v6 = v5[16];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v5[9], v4, a4);
  int v6 = v5[16];
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v5[10], v4, a4);
  int v6 = v5[16];
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v5[11], v4, a4);
  int v6 = v5[16];
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
LABEL_24:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v5[13], v4, a4);
    if ((v5[16] & 0x800) == 0) {
      return result;
    }
    goto LABEL_25;
  }
LABEL_23:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v5[12], v4, a4);
  int v6 = v5[16];
  if ((v6 & 0x400) != 0) {
    goto LABEL_24;
  }
LABEL_12:
  if ((v6 & 0x800) == 0) {
    return result;
  }
LABEL_25:
  int v7 = v5[14];

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, v7, v4, a4);
}

uint64_t sub_100B6A068(uint64_t a1, unint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 64);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_42;
  }
  if (v3)
  {
    uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
    int v3 = *(_DWORD *)(a1 + 64);
    if ((v3 & 2) == 0) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((v3 & 2) == 0) {
      goto LABEL_11;
    }
  }
  int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
  if (v5 >= 0x80)
  {
    int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
    int v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    int v6 = 1;
  }
  uint64_t v4 = (v4 + v6 + 1);
LABEL_11:
  if ((v3 & 4) != 0)
  {
    int v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if (v7 >= 0x80)
    {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
      int v3 = *(_DWORD *)(a1 + 64);
    }
    else
    {
      int v8 = 1;
    }
    uint64_t v4 = (v4 + v8 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_13:
      if ((v3 & 0x10) == 0) {
        goto LABEL_14;
      }
      goto LABEL_26;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_13;
  }
  int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if (v9 >= 0x80)
  {
    int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    int v10 = 1;
  }
  uint64_t v4 = (v4 + v10 + 1);
  if ((v3 & 0x10) == 0)
  {
LABEL_14:
    if ((v3 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }
LABEL_26:
  int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
  if (v11 >= 0x80)
  {
    int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    int v12 = 2;
  }
  uint64_t v4 = (v12 + v4);
  if ((v3 & 0x20) == 0)
  {
LABEL_15:
    if ((v3 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_30:
  int v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if (v13 >= 0x80)
  {
    int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    int v14 = 2;
  }
  uint64_t v4 = (v14 + v4);
  if ((v3 & 0x40) == 0)
  {
LABEL_16:
    if ((v3 & 0x80) == 0) {
      goto LABEL_42;
    }
    goto LABEL_38;
  }
LABEL_34:
  int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
  if (v15 >= 0x80)
  {
    int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    int v16 = 2;
  }
  uint64_t v4 = (v16 + v4);
  if ((v3 & 0x80) != 0)
  {
LABEL_38:
    int v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    if (v17 >= 0x80)
    {
      int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 64);
    }
    else
    {
      int v18 = 2;
    }
    uint64_t v4 = (v18 + v4);
  }
LABEL_42:
  if ((v3 & 0xFF00) == 0) {
    goto LABEL_64;
  }
  if ((v3 & 0x100) != 0)
  {
    int v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 44);
    if (v19 >= 0x80)
    {
      int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 64);
    }
    else
    {
      int v20 = 2;
    }
    uint64_t v4 = (v20 + v4);
    if ((v3 & 0x200) == 0)
    {
LABEL_45:
      if ((v3 & 0x400) == 0) {
        goto LABEL_46;
      }
      goto LABEL_56;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_45;
  }
  unsigned __int16 v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
  if (v21 >= 0x80)
  {
    int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    int v22 = 2;
  }
  uint64_t v4 = (v22 + v4);
  if ((v3 & 0x400) == 0)
  {
LABEL_46:
    if ((v3 & 0x800) == 0) {
      goto LABEL_64;
    }
    goto LABEL_60;
  }
LABEL_56:
  unsigned int v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
  if (v23 >= 0x80)
  {
    int v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    int v24 = 2;
  }
  uint64_t v4 = (v24 + v4);
  if ((v3 & 0x800) != 0)
  {
LABEL_60:
    int v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
    if (v25 >= 0x80) {
      int v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2) + 1;
    }
    else {
      int v26 = 2;
    }
    uint64_t v4 = (v26 + v4);
  }
LABEL_64:
  *(_DWORD *)(a1 + 60) = v4;
  return v4;
}

void sub_100B6A2A8(uint64_t a1, void *lpsrc)
{
  sub_100B69514(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B6A330()
{
  return 1;
}

void *sub_100B6A338@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Vision.VIOInertialStateInfo");
}

void sub_100B6A348(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v17);
  }
  int v4 = *(_DWORD *)(a2 + 64);
  if (!(_BYTE)v4) {
    goto LABEL_13;
  }
  if (v4)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 64) |= 1u;
    *(void *)(a1 + 8) = v7;
    int v4 = *(_DWORD *)(a2 + 64);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_22;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_6;
  }
  int v8 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 64) |= 2u;
  *(_DWORD *)(a1 + 16) = v8;
  int v4 = *(_DWORD *)(a2 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v9 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 64) |= 4u;
  *(_DWORD *)(a1 + 20) = v9;
  int v4 = *(_DWORD *)(a2 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  int v10 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 64) |= 8u;
  *(_DWORD *)(a1 + 24) = v10;
  int v4 = *(_DWORD *)(a2 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_25:
    int v12 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 64) |= 0x20u;
    *(_DWORD *)(a1 + 32) = v12;
    int v4 = *(_DWORD *)(a2 + 64);
    if ((v4 & 0x40) == 0)
    {
LABEL_11:
      if ((v4 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_24:
  int v11 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 64) |= 0x10u;
  *(_DWORD *)(a1 + 28) = v11;
  int v4 = *(_DWORD *)(a2 + 64);
  if ((v4 & 0x20) != 0) {
    goto LABEL_25;
  }
LABEL_10:
  if ((v4 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_26:
  int v13 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 64) |= 0x40u;
  *(_DWORD *)(a1 + 36) = v13;
  int v4 = *(_DWORD *)(a2 + 64);
  if ((v4 & 0x80) != 0)
  {
LABEL_12:
    int v5 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 64) |= 0x80u;
    *(_DWORD *)(a1 + 40) = v5;
    int v4 = *(_DWORD *)(a2 + 64);
  }
LABEL_13:
  if ((v4 & 0xFF00) == 0) {
    return;
  }
  if ((v4 & 0x100) != 0)
  {
    int v14 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a1 + 64) |= 0x100u;
    *(_DWORD *)(a1 + 44) = v14;
    int v4 = *(_DWORD *)(a2 + 64);
    if ((v4 & 0x200) == 0)
    {
LABEL_16:
      if ((v4 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_16;
  }
  int v15 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) |= 0x200u;
  *(_DWORD *)(a1 + 48) = v15;
  int v4 = *(_DWORD *)(a2 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_17:
    if ((v4 & 0x800) == 0) {
      return;
    }
    goto LABEL_18;
  }
LABEL_30:
  int v16 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 64) |= 0x400u;
  *(_DWORD *)(a1 + 52) = v16;
  if ((*(_DWORD *)(a2 + 64) & 0x800) == 0) {
    return;
  }
LABEL_18:
  int v6 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) |= 0x800u;
  *(_DWORD *)(a1 + 56) = v6;
}

void sub_100B6A548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B6A560(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022E8090;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B6A580(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022E8090;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100B6A5D4()
{
}

uint64_t sub_100B6A630(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 64);
  if ((_BYTE)v1)
  {
    *(_DWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(void *)(result + 52) = 0;
    *(void *)(result + 44) = 0;
  }
  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t sub_100B6A664(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char v42 = (unint64_t *)(a1 + 8);
  int v43 = (unsigned int *)(a1 + 16);
  double v44 = (unsigned int *)(a1 + 20);
  __int16 v45 = (unsigned int *)(a1 + 24);
  int v5 = (unsigned int *)(a1 + 28);
  int v6 = (unsigned int *)(a1 + 32);
  uint64_t v7 = (unsigned int *)(a1 + 36);
  int v8 = (unsigned int *)(a1 + 40);
  int v9 = (unsigned int *)(a1 + 44);
  int v10 = (unsigned int *)(a1 + 48);
  int v11 = (unsigned int *)(a1 + 52);
  int v12 = (unsigned int *)(a1 + 56);
  while (2)
  {
    int v13 = (char *)*((void *)this + 1);
    if ((unint64_t)v13 >= *((void *)this + 2) || *v13 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v13;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v13 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        int v17 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        if ((unint64_t)v17 < v16 && (*v17 & 0x80000000) == 0)
        {
          *char v42 = *v17;
          int v18 = v17 + 1;
          *((void *)this + 1) = v18;
LABEL_40:
          *(_DWORD *)(a1 + 64) |= 1u;
          if ((unint64_t)v18 < v16 && *v18 == 16)
          {
            int v19 = v18 + 1;
            *((void *)this + 1) = v19;
            goto LABEL_43;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v42);
        if (result)
        {
          int v18 = (unsigned char *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
          goto LABEL_40;
        }
        break;
      case 2u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        int v19 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
LABEL_43:
        if ((unint64_t)v19 >= v16 || *v19 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v43);
          if (!result) {
            return result;
          }
          int v30 = (unsigned char *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
        }
        else
        {
          *int v43 = *v19;
          int v30 = v19 + 1;
          *((void *)this + 1) = v30;
        }
        *(_DWORD *)(a1 + 64) |= 2u;
        if ((unint64_t)v30 >= v16 || *v30 != 24) {
          continue;
        }
        int v20 = v30 + 1;
        *((void *)this + 1) = v20;
LABEL_51:
        if ((unint64_t)v20 >= v16 || *v20 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v44);
          if (!result) {
            return result;
          }
          __int16 v31 = (unsigned char *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
        }
        else
        {
          *double v44 = *v20;
          __int16 v31 = v20 + 1;
          *((void *)this + 1) = v31;
        }
        *(_DWORD *)(a1 + 64) |= 4u;
        if ((unint64_t)v31 >= v16 || *v31 != 32) {
          continue;
        }
        unsigned __int16 v21 = v31 + 1;
        *((void *)this + 1) = v21;
LABEL_59:
        if ((unint64_t)v21 >= v16 || *v21 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v45);
          if (!result) {
            return result;
          }
          int v32 = (unsigned char *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
        }
        else
        {
          *__int16 v45 = *v21;
          int v32 = v21 + 1;
          *((void *)this + 1) = v32;
        }
        *(_DWORD *)(a1 + 64) |= 8u;
        if ((unint64_t)v32 >= v16 || *v32 != 40) {
          continue;
        }
        int v22 = v32 + 1;
        *((void *)this + 1) = v22;
LABEL_67:
        if ((unint64_t)v22 >= v16 || *v22 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!result) {
            return result;
          }
          __int16 v33 = (unsigned char *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
        }
        else
        {
          *int v5 = *v22;
          __int16 v33 = v22 + 1;
          *((void *)this + 1) = v33;
        }
        *(_DWORD *)(a1 + 64) |= 0x10u;
        if ((unint64_t)v33 >= v16 || *v33 != 48) {
          continue;
        }
        unsigned int v23 = v33 + 1;
        *((void *)this + 1) = v23;
LABEL_75:
        if ((unint64_t)v23 >= v16 || *v23 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!result) {
            return result;
          }
          uint64_t v34 = (unsigned char *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
        }
        else
        {
          *int v6 = *v23;
          uint64_t v34 = v23 + 1;
          *((void *)this + 1) = v34;
        }
        *(_DWORD *)(a1 + 64) |= 0x20u;
        if ((unint64_t)v34 >= v16 || *v34 != 56) {
          continue;
        }
        int v24 = v34 + 1;
        *((void *)this + 1) = v24;
LABEL_83:
        if ((unint64_t)v24 >= v16 || *v24 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!result) {
            return result;
          }
          int v35 = (unsigned char *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
        }
        else
        {
          *uint64_t v7 = *v24;
          int v35 = v24 + 1;
          *((void *)this + 1) = v35;
        }
        *(_DWORD *)(a1 + 64) |= 0x40u;
        if ((unint64_t)v35 >= v16 || *v35 != 64) {
          continue;
        }
        int v25 = v35 + 1;
        *((void *)this + 1) = v25;
LABEL_91:
        if ((unint64_t)v25 >= v16 || *v25 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
          if (!result) {
            return result;
          }
          __int16 v36 = (unsigned char *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
        }
        else
        {
          *int v8 = *v25;
          __int16 v36 = v25 + 1;
          *((void *)this + 1) = v36;
        }
        *(_DWORD *)(a1 + 64) |= 0x80u;
        if ((unint64_t)v36 >= v16 || *v36 != 72) {
          continue;
        }
        int v26 = v36 + 1;
        *((void *)this + 1) = v26;
LABEL_99:
        if ((unint64_t)v26 >= v16 || *v26 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v9);
          if (!result) {
            return result;
          }
          int v37 = (unsigned char *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
        }
        else
        {
          *int v9 = *v26;
          int v37 = v26 + 1;
          *((void *)this + 1) = v37;
        }
        *(_DWORD *)(a1 + 64) |= 0x100u;
        if ((unint64_t)v37 >= v16 || *v37 != 80) {
          continue;
        }
        int v27 = v37 + 1;
        *((void *)this + 1) = v27;
LABEL_107:
        if ((unint64_t)v27 >= v16 || *v27 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v10);
          if (!result) {
            return result;
          }
          __int16 v38 = (unsigned char *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
        }
        else
        {
          unsigned int *v10 = *v27;
          __int16 v38 = v27 + 1;
          *((void *)this + 1) = v38;
        }
        *(_DWORD *)(a1 + 64) |= 0x200u;
        if ((unint64_t)v38 >= v16 || *v38 != 88) {
          continue;
        }
        double v28 = v38 + 1;
        *((void *)this + 1) = v28;
LABEL_115:
        if ((unint64_t)v28 >= v16 || *v28 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v11);
          if (!result) {
            return result;
          }
          uint64_t v39 = (unsigned char *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
        }
        else
        {
          *int v11 = *v28;
          uint64_t v39 = v28 + 1;
          *((void *)this + 1) = v39;
        }
        *(_DWORD *)(a1 + 64) |= 0x400u;
        if ((unint64_t)v39 >= v16 || *v39 != 96) {
          continue;
        }
        char v29 = v39 + 1;
        *((void *)this + 1) = v29;
LABEL_123:
        if ((unint64_t)v29 >= v16 || *v29 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v12);
          if (!result) {
            return result;
          }
          unsigned int v40 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
        }
        else
        {
          *int v12 = *v29;
          unsigned int v40 = (unsigned __int8 *)(v29 + 1);
          *((void *)this + 1) = v40;
        }
        *(_DWORD *)(a1 + 64) |= 0x800u;
        if (v40 != (unsigned __int8 *)v16 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10)) {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      case 3u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        int v20 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_51;
      case 4u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        unsigned __int16 v21 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_59;
      case 5u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        int v22 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_67;
      case 6u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        unsigned int v23 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_75;
      case 7u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        int v24 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_83;
      case 8u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        int v25 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_91;
      case 9u:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        int v26 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_99;
      case 0xAu:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        int v27 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_107;
      case 0xBu:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        double v28 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_115;
      case 0xCu:
        int v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_34;
        }
        char v29 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_123;
      default:
        int v15 = TagFallback & 7;
LABEL_34:
        if (v15 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t sub_100B6AD14(uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v4 = a2;
  int v5 = (int *)result;
  int v6 = *(_DWORD *)(result + 64);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(result + 8), a2, a4);
    int v6 = v5[16];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[4], v4, a4);
  int v6 = v5[16];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], v4, a4);
  int v6 = v5[16];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[6], v4, a4);
  int v6 = v5[16];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[7], v4, a4);
  int v6 = v5[16];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v5[8], v4, a4);
  int v6 = v5[16];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v5[9], v4, a4);
  int v6 = v5[16];
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v5[10], v4, a4);
  int v6 = v5[16];
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v5[11], v4, a4);
  int v6 = v5[16];
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
LABEL_24:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v5[13], v4, a4);
    if ((v5[16] & 0x800) == 0) {
      return result;
    }
    goto LABEL_25;
  }
LABEL_23:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v5[12], v4, a4);
  int v6 = v5[16];
  if ((v6 & 0x400) != 0) {
    goto LABEL_24;
  }
LABEL_12:
  if ((v6 & 0x800) == 0) {
    return result;
  }
LABEL_25:
  int v7 = v5[14];

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, v7, v4, a4);
}

uint64_t sub_100B6AE9C(uint64_t a1, unint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 64);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_42;
  }
  if (v3)
  {
    uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
    int v3 = *(_DWORD *)(a1 + 64);
    if ((v3 & 2) == 0) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((v3 & 2) == 0) {
      goto LABEL_11;
    }
  }
  int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
  if (v5 >= 0x80)
  {
    int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
    int v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    int v6 = 1;
  }
  uint64_t v4 = (v4 + v6 + 1);
LABEL_11:
  if ((v3 & 4) != 0)
  {
    int v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if (v7 >= 0x80)
    {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
      int v3 = *(_DWORD *)(a1 + 64);
    }
    else
    {
      int v8 = 1;
    }
    uint64_t v4 = (v4 + v8 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_13:
      if ((v3 & 0x10) == 0) {
        goto LABEL_14;
      }
      goto LABEL_26;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_13;
  }
  int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if (v9 >= 0x80)
  {
    int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    int v10 = 1;
  }
  uint64_t v4 = (v4 + v10 + 1);
  if ((v3 & 0x10) == 0)
  {
LABEL_14:
    if ((v3 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }
LABEL_26:
  int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
  if (v11 >= 0x80)
  {
    int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    int v12 = 2;
  }
  uint64_t v4 = (v12 + v4);
  if ((v3 & 0x20) == 0)
  {
LABEL_15:
    if ((v3 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_30:
  int v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if (v13 >= 0x80)
  {
    int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    int v14 = 2;
  }
  uint64_t v4 = (v14 + v4);
  if ((v3 & 0x40) == 0)
  {
LABEL_16:
    if ((v3 & 0x80) == 0) {
      goto LABEL_42;
    }
    goto LABEL_38;
  }
LABEL_34:
  int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
  if (v15 >= 0x80)
  {
    int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    int v16 = 2;
  }
  uint64_t v4 = (v16 + v4);
  if ((v3 & 0x80) != 0)
  {
LABEL_38:
    int v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    if (v17 >= 0x80)
    {
      int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 64);
    }
    else
    {
      int v18 = 2;
    }
    uint64_t v4 = (v18 + v4);
  }
LABEL_42:
  if ((v3 & 0xFF00) == 0) {
    goto LABEL_64;
  }
  if ((v3 & 0x100) != 0)
  {
    int v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 44);
    if (v19 >= 0x80)
    {
      int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 64);
    }
    else
    {
      int v20 = 2;
    }
    uint64_t v4 = (v20 + v4);
    if ((v3 & 0x200) == 0)
    {
LABEL_45:
      if ((v3 & 0x400) == 0) {
        goto LABEL_46;
      }
      goto LABEL_56;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_45;
  }
  unsigned __int16 v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
  if (v21 >= 0x80)
  {
    int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    int v22 = 2;
  }
  uint64_t v4 = (v22 + v4);
  if ((v3 & 0x400) == 0)
  {
LABEL_46:
    if ((v3 & 0x800) == 0) {
      goto LABEL_64;
    }
    goto LABEL_60;
  }
LABEL_56:
  unsigned int v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
  if (v23 >= 0x80)
  {
    int v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    int v24 = 2;
  }
  uint64_t v4 = (v24 + v4);
  if ((v3 & 0x800) != 0)
  {
LABEL_60:
    int v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
    if (v25 >= 0x80) {
      int v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2) + 1;
    }
    else {
      int v26 = 2;
    }
    uint64_t v4 = (v26 + v4);
  }
LABEL_64:
  *(_DWORD *)(a1 + 60) = v4;
  return v4;
}

void sub_100B6B0DC(uint64_t a1, void *lpsrc)
{
  sub_100B6A348(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B6B164()
{
  return 1;
}

void *sub_100B6B16C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Vision.VIOInertialCovarianceInfo");
}

double sub_100B6B17C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v25);
  }
  int v5 = *(_DWORD *)(a2 + 88);
  if (!(_BYTE)v5) {
    goto LABEL_47;
  }
  if (v5)
  {
    int v6 = *(_DWORD *)(a2 + 80);
    if ((v6 + 1) >= 6) {
      sub_101A7F864();
    }
    *(_DWORD *)(a1 + 88) |= 1u;
    *(_DWORD *)(a1 + 80) = v6;
    int v5 = *(_DWORD *)(a2 + 88);
  }
  if ((v5 & 2) != 0)
  {
    *(_DWORD *)(a1 + 88) |= 2u;
    uint64_t v7 = *(void *)(a1 + 8);
    if (!v7) {
      operator new();
    }
    uint64_t v8 = *(void *)(a2 + 8);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248AA18 + 8);
    }
    double result = sub_100B673B0(v7, v8);
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 4) == 0)
    {
LABEL_9:
      if ((v5 & 8) == 0) {
        goto LABEL_26;
      }
      goto LABEL_21;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_9;
  }
  *(_DWORD *)(a1 + 88) |= 4u;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    operator new();
  }
  uint64_t v10 = *(void *)(a2 + 16);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_10248AA18 + 16);
  }
  double result = sub_100B673B0(v9, v10);
  int v5 = *(_DWORD *)(a2 + 88);
  if ((v5 & 8) != 0)
  {
LABEL_21:
    *(_DWORD *)(a1 + 88) |= 8u;
    uint64_t v11 = *(void *)(a1 + 24);
    if (!v11) {
      operator new();
    }
    uint64_t v12 = *(void *)(a2 + 24);
    if (!v12) {
      uint64_t v12 = *(void *)(qword_10248AA18 + 24);
    }
    sub_100B69514(v11, v12);
    int v5 = *(_DWORD *)(a2 + 88);
  }
LABEL_26:
  if ((v5 & 0x10) == 0)
  {
    if ((v5 & 0x20) == 0) {
      goto LABEL_28;
    }
LABEL_34:
    *(_DWORD *)(a1 + 88) |= 0x20u;
    uint64_t v15 = *(void *)(a1 + 40);
    if (!v15) {
      operator new();
    }
    uint64_t v16 = *(void *)(a2 + 40);
    if (!v16) {
      uint64_t v16 = *(void *)(qword_10248AA18 + 40);
    }
    sub_100B6A348(v15, v16);
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x40) == 0)
    {
LABEL_29:
      if ((v5 & 0x80) == 0) {
        goto LABEL_47;
      }
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  int v13 = *(const std::string **)(a2 + 32);
  *(_DWORD *)(a1 + 88) |= 0x10u;
  int v14 = *(std::string **)(a1 + 32);
  if (v14 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v14, v13);
  int v5 = *(_DWORD *)(a2 + 88);
  if ((v5 & 0x20) != 0) {
    goto LABEL_34;
  }
LABEL_28:
  if ((v5 & 0x40) == 0) {
    goto LABEL_29;
  }
LABEL_39:
  int v17 = *(const std::string **)(a2 + 48);
  *(_DWORD *)(a1 + 88) |= 0x40u;
  int v18 = *(std::string **)(a1 + 48);
  if (v18 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v18, v17);
  int v5 = *(_DWORD *)(a2 + 88);
  if ((v5 & 0x80) != 0)
  {
LABEL_42:
    *(_DWORD *)(a1 + 88) |= 0x80u;
    int v19 = *(_DWORD **)(a1 + 56);
    if (!v19) {
      operator new();
    }
    uint64_t v20 = *(void *)(a2 + 56);
    if (!v20) {
      uint64_t v20 = *(void *)(qword_10248AA18 + 56);
    }
    sub_100B6845C(v19, v20);
    int v5 = *(_DWORD *)(a2 + 88);
  }
LABEL_47:
  if ((v5 & 0xFF00) != 0)
  {
    if ((v5 & 0x100) != 0)
    {
      *(_DWORD *)(a1 + 88) |= 0x100u;
      unsigned __int16 v21 = *(_DWORD **)(a1 + 64);
      if (!v21) {
        operator new();
      }
      uint64_t v22 = *(void *)(a2 + 64);
      if (!v22) {
        uint64_t v22 = *(void *)(qword_10248AA18 + 64);
      }
      sub_100B6845C(v21, v22);
      int v5 = *(_DWORD *)(a2 + 88);
    }
    if ((v5 & 0x200) != 0)
    {
      *(_DWORD *)(a1 + 88) |= 0x200u;
      uint64_t v23 = *(void *)(a1 + 72);
      if (!v23) {
        operator new();
      }
      uint64_t v24 = *(void *)(a2 + 72);
      if (!v24) {
        uint64_t v24 = *(void *)(qword_10248AA18 + 72);
      }
      return sub_100B690DC(v23, v24);
    }
  }
  return result;
}

void sub_100B6B644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *sub_100B6B65C(void *result)
{
  int v1 = result;
  uint64_t v2 = result[4];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete();
  }
  uint64_t v4 = result[6];
  if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    operator delete();
  }
  if ((void *)qword_10248AA18 != result)
  {
    uint64_t v6 = result[1];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = v1[2];
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = v1[3];
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t v9 = v1[5];
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    uint64_t v10 = v1[7];
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t v11 = v1[8];
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    double result = (void *)v1[9];
    if (result)
    {
      uint64_t v12 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v12();
    }
  }
  return result;
}

void sub_100B6B85C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022E8108;
  sub_100B6B65C(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B6B8B0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022E8108;
  sub_100B6B65C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

uint64_t sub_100B6B918(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248AA18;
  if (!qword_10248AA18)
  {
    sub_100B66710(0, a2, a3, a4);
    return qword_10248AA18;
  }
  return result;
}

void sub_100B6B948()
{
}

uint64_t sub_100B6B9B4(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 88);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(result + 80) = -1;
    if ((v2 & 2) != 0)
    {
      uint64_t v3 = *(void *)(result + 8);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 36))
        {
          *(void *)(v3 + 8) = 0;
          *(void *)(v3 + 16) = 0;
          *(void *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 36) = 0;
        int v2 = *(_DWORD *)(result + 88);
      }
    }
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(void *)(result + 16);
      if (v4)
      {
        if (*(unsigned char *)(v4 + 36))
        {
          *(void *)(v4 + 8) = 0;
          *(void *)(v4 + 16) = 0;
          *(void *)(v4 + 24) = 0;
        }
        *(_DWORD *)(v4 + 36) = 0;
        int v2 = *(_DWORD *)(result + 88);
      }
    }
    if ((v2 & 8) != 0)
    {
      uint64_t v5 = *(void *)(result + 24);
      if (v5)
      {
        int v6 = *(_DWORD *)(v5 + 64);
        if ((_BYTE)v6)
        {
          *(_DWORD *)(v5 + 40) = 0;
          *(_OWORD *)(v5 + 24) = 0u;
          *(_OWORD *)(v5 + 8) = 0u;
        }
        if ((v6 & 0xFF00) != 0)
        {
          *(void *)(v5 + 52) = 0;
          *(void *)(v5 + 44) = 0;
        }
        *(_DWORD *)(v5 + 64) = 0;
        int v2 = *(_DWORD *)(result + 88);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      uint64_t v7 = *(void *)(result + 32);
      if ((_UNKNOWN *)v7 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(unsigned char **)uint64_t v7 = 0;
          *(void *)(v7 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v7 = 0;
          *(unsigned char *)(v7 + 23) = 0;
        }
      }
    }
    int v8 = *(_DWORD *)(result + 88);
    if ((v8 & 0x20) != 0)
    {
      uint64_t v9 = *(void *)(result + 40);
      if (v9)
      {
        int v10 = *(_DWORD *)(v9 + 64);
        if ((_BYTE)v10)
        {
          *(_DWORD *)(v9 + 40) = 0;
          *(_OWORD *)(v9 + 24) = 0u;
          *(_OWORD *)(v9 + 8) = 0u;
        }
        if ((v10 & 0xFF00) != 0)
        {
          *(void *)(v9 + 52) = 0;
          *(void *)(v9 + 44) = 0;
        }
        *(_DWORD *)(v9 + 64) = 0;
        int v8 = *(_DWORD *)(result + 88);
      }
    }
    if ((v8 & 0x40) != 0)
    {
      uint64_t v11 = *(void *)(result + 48);
      if ((_UNKNOWN *)v11 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v11 + 23) < 0)
        {
          **(unsigned char **)uint64_t v11 = 0;
          *(void *)(v11 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v11 = 0;
          *(unsigned char *)(v11 + 23) = 0;
        }
      }
    }
    int v2 = *(_DWORD *)(result + 88);
    if ((v2 & 0x80) != 0)
    {
      uint64_t v12 = *(void *)(result + 56);
      if (v12)
      {
        uint64_t result = sub_10026DEDC(v12 + 8);
        *(_DWORD *)(v12 + 36) = 0;
        int v2 = *(_DWORD *)(v1 + 88);
      }
    }
  }
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      uint64_t v13 = *(void *)(v1 + 64);
      if (v13)
      {
        uint64_t result = sub_10026DEDC(v13 + 8);
        *(_DWORD *)(v13 + 36) = 0;
        int v2 = *(_DWORD *)(v1 + 88);
      }
    }
    if ((v2 & 0x200) != 0)
    {
      uint64_t v14 = *(void *)(v1 + 72);
      if (v14)
      {
        if (*(unsigned char *)(v14 + 28))
        {
          *(void *)(v14 + 8) = 0;
          *(void *)(v14 + 16) = 0;
        }
        *(_DWORD *)(v14 + 28) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 88) = 0;
  return result;
}

uint64_t sub_100B6BB80(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 < *((void *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_6;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_29;
        }
        unsigned int v77 = 0;
        int v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v77);
          if (!result) {
            return result;
          }
          unsigned int v9 = v77;
        }
        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }
        if (v9 + 1 <= 5)
        {
          *(_DWORD *)(a1 + 88) |= 1u;
          *(_DWORD *)(a1 + 80) = v9;
        }
        uint64_t v11 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v11 < *((void *)this + 2) && *v11 == 18)
        {
          *((void *)this + 1) = v11 + 1;
          goto LABEL_39;
        }
        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_29;
        }
LABEL_39:
        *(_DWORD *)(a1 + 88) |= 2u;
        uint64_t v12 = *(void *)(a1 + 8);
        if (!v12) {
          operator new();
        }
        unsigned int v77 = 0;
        uint64_t v13 = (char *)*((void *)this + 1);
        if ((unint64_t)v13 >= *((void *)this + 2) || *v13 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v77))return 0; {
        }
          }
        else
        {
          unsigned int v77 = *v13;
          *((void *)this + 1) = v13 + 1;
        }
        int v14 = *((_DWORD *)this + 14);
        int v15 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v14 + 1;
        if (v14 >= v15) {
          return 0;
        }
        int v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v77);
        if (!sub_100B6757C(v12, this, v17) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
        int v18 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v18, 1);
        int v20 = v18 - 1;
        if (v20 < 0 == v19) {
          *((_DWORD *)this + 14) = v20;
        }
        unsigned __int16 v21 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v21 >= *((void *)this + 2) || *v21 != 26) {
          continue;
        }
        *((void *)this + 1) = v21 + 1;
LABEL_53:
        *(_DWORD *)(a1 + 88) |= 4u;
        uint64_t v22 = *(void *)(a1 + 16);
        if (!v22) {
          operator new();
        }
        unsigned int v77 = 0;
        uint64_t v23 = (char *)*((void *)this + 1);
        if ((unint64_t)v23 >= *((void *)this + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v77))return 0; {
        }
          }
        else
        {
          unsigned int v77 = *v23;
          *((void *)this + 1) = v23 + 1;
        }
        int v24 = *((_DWORD *)this + 14);
        int v25 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v24 + 1;
        if (v24 >= v25) {
          return 0;
        }
        int v26 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v77);
        if (!sub_100B6757C(v22, this, v27) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v26);
        int v28 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v28, 1);
        int v29 = v28 - 1;
        if (v29 < 0 == v19) {
          *((_DWORD *)this + 14) = v29;
        }
        int v30 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v30 >= *((void *)this + 2) || *v30 != 34) {
          continue;
        }
        *((void *)this + 1) = v30 + 1;
LABEL_67:
        *(_DWORD *)(a1 + 88) |= 8u;
        uint64_t v31 = *(void *)(a1 + 24);
        if (!v31) {
          operator new();
        }
        unsigned int v77 = 0;
        int v32 = (char *)*((void *)this + 1);
        if ((unint64_t)v32 >= *((void *)this + 2) || *v32 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v77))return 0; {
        }
          }
        else
        {
          unsigned int v77 = *v32;
          *((void *)this + 1) = v32 + 1;
        }
        int v33 = *((_DWORD *)this + 14);
        int v34 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v33 + 1;
        if (v33 >= v34) {
          return 0;
        }
        int v35 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v77);
        if (!sub_100B69830(v31, this, v36) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v35);
        int v37 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v37, 1);
        int v38 = v37 - 1;
        if (v38 < 0 == v19) {
          *((_DWORD *)this + 14) = v38;
        }
        uint64_t v39 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v39 >= *((void *)this + 2) || *v39 != 42) {
          continue;
        }
        *((void *)this + 1) = v39 + 1;
LABEL_81:
        *(_DWORD *)(a1 + 88) |= 0x10u;
        if (*(_UNKNOWN **)(a1 + 32) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!result) {
          return result;
        }
        unsigned int v40 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v40 >= *((void *)this + 2) || *v40 != 50) {
          continue;
        }
        *((void *)this + 1) = v40 + 1;
LABEL_87:
        *(_DWORD *)(a1 + 88) |= 0x20u;
        uint64_t v41 = *(void *)(a1 + 40);
        if (!v41) {
          operator new();
        }
        unsigned int v77 = 0;
        char v42 = (char *)*((void *)this + 1);
        if ((unint64_t)v42 >= *((void *)this + 2) || *v42 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v77))return 0; {
        }
          }
        else
        {
          unsigned int v77 = *v42;
          *((void *)this + 1) = v42 + 1;
        }
        int v43 = *((_DWORD *)this + 14);
        int v44 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v43 + 1;
        if (v43 >= v44) {
          return 0;
        }
        int v45 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v77);
        if (!sub_100B6A664(v41, this, v46) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v45);
        int v47 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v47, 1);
        int v48 = v47 - 1;
        if (v48 < 0 == v19) {
          *((_DWORD *)this + 14) = v48;
        }
        __int16 v49 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v49 >= *((void *)this + 2) || *v49 != 58) {
          continue;
        }
        *((void *)this + 1) = v49 + 1;
LABEL_101:
        *(_DWORD *)(a1 + 88) |= 0x40u;
        if (*(_UNKNOWN **)(a1 + 48) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!result) {
          return result;
        }
        double v50 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v50 >= *((void *)this + 2) || *v50 != 66) {
          continue;
        }
        *((void *)this + 1) = v50 + 1;
LABEL_107:
        *(_DWORD *)(a1 + 88) |= 0x80u;
        double v51 = *(int **)(a1 + 56);
        if (!v51) {
          operator new();
        }
        unsigned int v77 = 0;
        int v52 = (char *)*((void *)this + 1);
        if ((unint64_t)v52 >= *((void *)this + 2) || *v52 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v77))return 0; {
        }
          }
        else
        {
          unsigned int v77 = *v52;
          *((void *)this + 1) = v52 + 1;
        }
        int v53 = *((_DWORD *)this + 14);
        int v54 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v53 + 1;
        if (v53 >= v54) {
          return 0;
        }
        int v55 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v77);
        if (!sub_100B686E4(v51, this, v56) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v55);
        int v57 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v57, 1);
        int v58 = v57 - 1;
        if (v58 < 0 == v19) {
          *((_DWORD *)this + 14) = v58;
        }
        __int16 v59 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v59 >= *((void *)this + 2) || *v59 != 74) {
          continue;
        }
        *((void *)this + 1) = v59 + 1;
LABEL_121:
        *(_DWORD *)(a1 + 88) |= 0x100u;
        uint64_t v60 = *(int **)(a1 + 64);
        if (!v60) {
          operator new();
        }
        unsigned int v77 = 0;
        __int16 v61 = (char *)*((void *)this + 1);
        if ((unint64_t)v61 >= *((void *)this + 2) || *v61 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v77))return 0; {
        }
          }
        else
        {
          unsigned int v77 = *v61;
          *((void *)this + 1) = v61 + 1;
        }
        int v62 = *((_DWORD *)this + 14);
        int v63 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v62 + 1;
        if (v62 >= v63) {
          return 0;
        }
        int v64 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v77);
        if (!sub_100B686E4(v60, this, v65) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v64);
        int v66 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v66, 1);
        int v67 = v66 - 1;
        if (v67 < 0 == v19) {
          *((_DWORD *)this + 14) = v67;
        }
        BOOL v68 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v68 >= *((void *)this + 2) || *v68 != 82) {
          continue;
        }
        *((void *)this + 1) = v68 + 1;
LABEL_135:
        *(_DWORD *)(a1 + 88) |= 0x200u;
        uint64_t v69 = *(void *)(a1 + 72);
        if (!v69) {
          operator new();
        }
        unsigned int v77 = 0;
        BOOL v70 = (char *)*((void *)this + 1);
        if ((unint64_t)v70 >= *((void *)this + 2) || *v70 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v77))return 0; {
        }
          }
        else
        {
          unsigned int v77 = *v70;
          *((void *)this + 1) = v70 + 1;
        }
        int v71 = *((_DWORD *)this + 14);
        int v72 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v71 + 1;
        if (v71 >= v72) {
          return 0;
        }
        int v73 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v77);
        if (!sub_100B69274(v69, this, v74) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v73);
        int v75 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v75, 1);
        int v76 = v75 - 1;
        if (v76 < 0 == v19) {
          *((_DWORD *)this + 14) = v76;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_53;
        }
        goto LABEL_29;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_67;
        }
        goto LABEL_29;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_81;
        }
        goto LABEL_29;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_87;
        }
        goto LABEL_29;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_101;
        }
        goto LABEL_29;
      case 8u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_107;
        }
        goto LABEL_29;
      case 9u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_121;
        }
        goto LABEL_29;
      case 0xAu:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_29;
        }
        goto LABEL_135;
      default:
        int v7 = TagFallback & 7;
LABEL_29:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_100B6C5F8(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 88);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 80), (int)a2, a4);
    int v6 = *(_DWORD *)(v5 + 88);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v7 = *(void *)(v5 + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AA18 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  int v6 = *(_DWORD *)(v5 + 88);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_16:
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_10248AA18 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  int v6 = *(_DWORD *)(v5 + 88);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_19:
  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_10248AA18 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  int v6 = *(_DWORD *)(v5 + 88);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  int v6 = *(_DWORD *)(v5 + 88);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_23:
  uint64_t v10 = *(void *)(v5 + 40);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_10248AA18 + 40);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v10, a2, a4);
  int v6 = *(_DWORD *)(v5 + 88);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  int v6 = *(_DWORD *)(v5 + 88);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_27:
  uint64_t v11 = *(void *)(v5 + 56);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_10248AA18 + 56);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v11, a2, a4);
  int v6 = *(_DWORD *)(v5 + 88);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      return result;
    }
    goto LABEL_33;
  }
LABEL_30:
  uint64_t v12 = *(void *)(v5 + 64);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_10248AA18 + 64);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v12, a2, a4);
  if ((*(_DWORD *)(v5 + 88) & 0x200) != 0)
  {
LABEL_33:
    uint64_t v13 = *(void *)(v5 + 72);
    if (!v13) {
      uint64_t v13 = *(void *)(qword_10248AA18 + 72);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v13, a2, a4);
  }
  return result;
}

uint64_t sub_100B6C7B8(uint64_t a1, unint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 88);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_73;
  }
  if (v3)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 80);
    if ((v5 & 0x80000000) != 0)
    {
      int v6 = 10;
    }
    else if (v5 >= 0x80)
    {
      int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      int v3 = *(_DWORD *)(a1 + 88);
    }
    else
    {
      int v6 = 1;
    }
    uint64_t v4 = (v6 + 1);
    if ((v3 & 2) == 0) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((v3 & 2) == 0) {
      goto LABEL_21;
    }
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AA18 + 8);
  }
  int v8 = *(unsigned __int8 *)(v7 + 36);
  if (*(unsigned char *)(v7 + 36))
  {
    int v9 = (v8 << 31 >> 31) & 9;
    if ((v8 & 2) != 0) {
      v9 += 9;
    }
    if ((v8 & 4) != 0) {
      int v8 = v9 + 9;
    }
    else {
      int v8 = v9;
    }
  }
  *(_DWORD *)(v7 + 32) = v8;
  uint64_t v4 = (v4 + v8 + 2);
  int v3 = *(_DWORD *)(a1 + 88);
LABEL_21:
  if ((v3 & 4) != 0)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    if (!v10) {
      uint64_t v10 = *(void *)(qword_10248AA18 + 16);
    }
    int v11 = *(unsigned __int8 *)(v10 + 36);
    if (*(unsigned char *)(v10 + 36))
    {
      int v12 = (v11 << 31 >> 31) & 9;
      if ((v11 & 2) != 0) {
        v12 += 9;
      }
      if ((v11 & 4) != 0) {
        int v11 = v12 + 9;
      }
      else {
        int v11 = v12;
      }
    }
    *(_DWORD *)(v10 + 32) = v11;
    uint64_t v4 = (v4 + v11 + 2);
    int v3 = *(_DWORD *)(a1 + 88);
    if ((v3 & 8) == 0)
    {
LABEL_23:
      if ((v3 & 0x10) == 0) {
        goto LABEL_24;
      }
      goto LABEL_43;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_23;
  }
  uint64_t v13 = *(void *)(a1 + 24);
  if (!v13) {
    uint64_t v13 = *(void *)(qword_10248AA18 + 24);
  }
  int v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B6A068(v13, a2);
  int v15 = (int)v14;
  if (v14 >= 0x80) {
    int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
  }
  else {
    int v16 = 1;
  }
  uint64_t v4 = (v4 + v15 + v16 + 1);
  int v3 = *(_DWORD *)(a1 + 88);
  if ((v3 & 0x10) == 0)
  {
LABEL_24:
    if ((v3 & 0x20) == 0) {
      goto LABEL_25;
    }
    goto LABEL_52;
  }
LABEL_43:
  uint64_t v17 = *(void *)(a1 + 32);
  int v18 = *(unsigned __int8 *)(v17 + 23);
  char v19 = v18;
  uint64_t v20 = *(void *)(v17 + 8);
  if ((v18 & 0x80u) == 0) {
    unint64_t v21 = *(unsigned __int8 *)(v17 + 23);
  }
  else {
    unint64_t v21 = v20;
  }
  if (v21 >= 0x80)
  {
    int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v21, a2);
    int v18 = *(unsigned __int8 *)(v17 + 23);
    uint64_t v20 = *(void *)(v17 + 8);
    int v3 = *(_DWORD *)(a1 + 88);
    char v19 = *(unsigned char *)(v17 + 23);
  }
  else
  {
    int v22 = 1;
  }
  if (v19 < 0) {
    int v18 = v20;
  }
  uint64_t v4 = (v4 + v22 + v18 + 1);
  if ((v3 & 0x20) == 0)
  {
LABEL_25:
    if ((v3 & 0x40) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }
LABEL_52:
  uint64_t v23 = *(void *)(a1 + 40);
  if (!v23) {
    uint64_t v23 = *(void *)(qword_10248AA18 + 40);
  }
  int v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B6AE9C(v23, a2);
  int v25 = (int)v24;
  if (v24 >= 0x80) {
    int v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2);
  }
  else {
    int v26 = 1;
  }
  uint64_t v4 = (v4 + v25 + v26 + 1);
  int v3 = *(_DWORD *)(a1 + 88);
  if ((v3 & 0x40) == 0)
  {
LABEL_26:
    if ((v3 & 0x80) == 0) {
      goto LABEL_73;
    }
    goto LABEL_67;
  }
LABEL_58:
  uint64_t v27 = *(void *)(a1 + 48);
  int v28 = *(unsigned __int8 *)(v27 + 23);
  char v29 = v28;
  uint64_t v30 = *(void *)(v27 + 8);
  if ((v28 & 0x80u) == 0) {
    unint64_t v31 = *(unsigned __int8 *)(v27 + 23);
  }
  else {
    unint64_t v31 = v30;
  }
  if (v31 >= 0x80)
  {
    int v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v31, a2);
    int v28 = *(unsigned __int8 *)(v27 + 23);
    uint64_t v30 = *(void *)(v27 + 8);
    int v3 = *(_DWORD *)(a1 + 88);
    char v29 = *(unsigned char *)(v27 + 23);
  }
  else
  {
    int v32 = 1;
  }
  if (v29 < 0) {
    int v28 = v30;
  }
  uint64_t v4 = (v4 + v32 + v28 + 1);
  if ((v3 & 0x80) != 0)
  {
LABEL_67:
    uint64_t v33 = *(void *)(a1 + 56);
    if (!v33) {
      uint64_t v33 = *(void *)(qword_10248AA18 + 56);
    }
    int v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B6896C(v33, a2);
    int v35 = (int)v34;
    if (v34 >= 0x80) {
      int v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v34, a2);
    }
    else {
      int v36 = 1;
    }
    uint64_t v4 = (v4 + v35 + v36 + 1);
    int v3 = *(_DWORD *)(a1 + 88);
  }
LABEL_73:
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      uint64_t v37 = *(void *)(a1 + 64);
      if (!v37) {
        uint64_t v37 = *(void *)(qword_10248AA18 + 64);
      }
      int v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B6896C(v37, a2);
      int v40 = (int)v38;
      if (v38 >= 0x80) {
        int v41 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v38, v39);
      }
      else {
        int v41 = 1;
      }
      uint64_t v4 = (v4 + v40 + v41 + 1);
      int v3 = *(_DWORD *)(a1 + 88);
    }
    if ((v3 & 0x200) != 0)
    {
      uint64_t v42 = *(void *)(a1 + 72);
      if (!v42) {
        uint64_t v42 = *(void *)(qword_10248AA18 + 72);
      }
      int v43 = *(unsigned __int8 *)(v42 + 28);
      int v44 = (v43 << 31 >> 31) & 9;
      if ((v43 & 2) != 0) {
        v44 += 9;
      }
      if (*(unsigned char *)(v42 + 28)) {
        int v45 = v44;
      }
      else {
        int v45 = 0;
      }
      *(_DWORD *)(v42 + 24) = v45;
      uint64_t v4 = (v4 + v45 + 2);
    }
  }
  *(_DWORD *)(a1 + 84) = v4;
  return v4;
}

double sub_100B6CB18(uint64_t a1, void *lpsrc)
{
  return sub_100B6B17C(a1, (uint64_t)lpsrc);
}

double sub_100B6CBA0(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    return sub_100B6B17C(a1, a2);
  }
  return result;
}

uint64_t sub_100B6CC0C()
{
  return 1;
}

void *sub_100B6CC14@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Vision.VIOEstimation");
}

double sub_100B6CC24(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      double result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(double *)(a1 + 8) = result;
      int v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      double result = *(double *)(a2 + 16);
      *(_DWORD *)(a1 + 28) |= 2u;
      *(double *)(a1 + 16) = result;
    }
  }
  return result;
}

void sub_100B6CCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B6CCE8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022E8180;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B6CD08(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022E8180;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100B6CD5C()
{
}

uint64_t sub_100B6CDA8(uint64_t result)
{
  if (*(unsigned char *)(result + 28))
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100B6CDBC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_21;
        }
        unint64_t v10 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v10) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 8) = v10;
        *(_DWORD *)(a1 + 28) |= 1u;
        int v8 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v8 < *((void *)this + 2) && *v8 == 17)
        {
          *((void *)this + 1) = v8 + 1;
          goto LABEL_15;
        }
      }
      if (TagFallback >> 3 != 2)
      {
        int v7 = TagFallback & 7;
        goto LABEL_21;
      }
      int v7 = TagFallback & 7;
      if (v7 == 1) {
        break;
      }
LABEL_21:
      if (v7 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_15:
    unint64_t v10 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v10) & 1) == 0) {
      return 0;
    }
    *(void *)(a1 + 16) = v10;
    *(_DWORD *)(a1 + 28) |= 2u;
  }
  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)this + 36) = 1;
  return result;
}

uint64_t sub_100B6CF24(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 28);
  if (v5)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    int v5 = *(_DWORD *)(v4 + 28);
  }
  if ((v5 & 2) != 0)
  {
    double v6 = *(double *)(v4 + 16);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, v6, a3);
  }
  return result;
}

uint64_t sub_100B6CF90(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 28);
  if (*(unsigned char *)(a1 + 28))
  {
    unsigned int v2 = ((int)(v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0) {
      uint64_t v1 = v2 + 9;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

double sub_100B6CFBC(uint64_t a1, void *lpsrc)
{
  return sub_100B6CC24(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B6D044()
{
  return 1;
}

void *sub_100B6D04C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Vision.LSLLocationCoordinate");
}

double sub_100B6D05C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 36))
    {
      *(_DWORD *)(a1 + 36) |= 1u;
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        operator new();
      }
      uint64_t v7 = *(void *)(a2 + 8);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_10248AA28 + 8);
      }
      double result = sub_100B6CC24(v6, v7);
      int v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          return result;
        }
        goto LABEL_14;
      }
    }
    else if ((*(unsigned char *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    double result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(double *)(a1 + 16) = result;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0) {
      return result;
    }
LABEL_14:
    *(_DWORD *)(a1 + 36) |= 4u;
    uint64_t v8 = *(void *)(a1 + 24);
    if (!v8) {
      operator new();
    }
    uint64_t v9 = *(void *)(a2 + 24);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_10248AA28 + 24);
    }
    return sub_100B673B0(v8, v9);
  }
  return result;
}

void sub_100B6D1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *sub_100B6D1F8(void *result)
{
  if ((void *)qword_10248AA28 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    double result = (void *)v1[3];
    if (result)
    {
      int v3 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v3();
    }
  }
  return result;
}

void sub_100B6D298(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022E81F8;
  sub_100B6D1F8(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B6D2EC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022E81F8;
  sub_100B6D1F8(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100B6D354()
{
}

uint64_t sub_100B6D3A8(uint64_t result)
{
  LOBYTE(v1) = *(unsigned char *)(result + 36);
  if ((_BYTE)v1)
  {
    if (*(unsigned char *)(result + 36))
    {
      uint64_t v2 = *(void *)(result + 8);
      if (v2)
      {
        if (*(unsigned char *)(v2 + 28))
        {
          *(void *)(v2 + 8) = 0;
          *(void *)(v2 + 16) = 0;
        }
        *(_DWORD *)(v2 + 28) = 0;
        int v1 = *(_DWORD *)(result + 36);
      }
    }
    *(void *)(result + 16) = 0;
    if ((v1 & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 24);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 36))
        {
          *(void *)(v3 + 8) = 0;
          *(void *)(v3 + 16) = 0;
          *(void *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 36) = 0;
      }
    }
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100B6D3FC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_20;
        }
        *(_DWORD *)(a1 + 36) |= 1u;
        uint64_t v10 = *(void *)(a1 + 8);
        if (!v10) {
          operator new();
        }
        v30[0] = 0;
        int v11 = (char *)*((void *)this + 1);
        if ((unint64_t)v11 >= *((void *)this + 2) || *v11 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v30))return 0; {
        }
          }
        else
        {
          v30[0] = *v11;
          *((void *)this + 1) = v11 + 1;
        }
        int v12 = *((_DWORD *)this + 14);
        int v13 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v12 + 1;
        if (v12 >= v13) {
          return 0;
        }
        int v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v30[0]);
        if (!sub_100B6CDBC(v10, this, v15) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
        int v16 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v16, 1);
        int v18 = v16 - 1;
        if (v18 < 0 == v17) {
          *((_DWORD *)this + 14) = v18;
        }
        char v19 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v19 < *((void *)this + 2) && *v19 == 17)
        {
          *((void *)this + 1) = v19 + 1;
          goto LABEL_32;
        }
      }
      if (v7 != 2) {
        break;
      }
      int v8 = TagFallback & 7;
      if (v8 != 1) {
        goto LABEL_20;
      }
LABEL_32:
      *(void *)uint64_t v30 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v30) & 1) == 0)return 0; {
      *(void *)(a1 + 16) = *(void *)v30;
      }
      int v9 = *(_DWORD *)(a1 + 36) | 2;
      *(_DWORD *)(a1 + 36) = v9;
      uint64_t v20 = (unsigned char *)*((void *)this + 1);
      if ((unint64_t)v20 < *((void *)this + 2) && *v20 == 26)
      {
        *((void *)this + 1) = v20 + 1;
LABEL_36:
        *(_DWORD *)(a1 + 36) = v9 | 4;
        uint64_t v21 = *(void *)(a1 + 24);
        if (!v21) {
          operator new();
        }
        v30[0] = 0;
        int v22 = (char *)*((void *)this + 1);
        if ((unint64_t)v22 >= *((void *)this + 2) || *v22 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v30))return 0; {
        }
          }
        else
        {
          v30[0] = *v22;
          *((void *)this + 1) = v22 + 1;
        }
        int v23 = *((_DWORD *)this + 14);
        int v24 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v23 + 1;
        if (v23 >= v24) {
          return 0;
        }
        int v25 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v30[0]);
        if (!sub_100B6757C(v21, this, v26) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v25);
        int v27 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v27, 1);
        int v28 = v27 - 1;
        if (v28 < 0 == v17) {
          *((_DWORD *)this + 14) = v28;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v7 == 3)
    {
      int v8 = TagFallback & 7;
      if (v8 == 2)
      {
        int v9 = *(_DWORD *)(a1 + 36);
        goto LABEL_36;
      }
    }
    else
    {
      int v8 = TagFallback & 7;
    }
LABEL_20:
    if (v8 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_100B6D754(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(double *)(v5 + 16), a3);
    if ((*(_DWORD *)(v5 + 36) & 4) == 0) {
      return result;
    }
    goto LABEL_9;
  }
  uint64_t v7 = *(void *)(result + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AA28 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_9:
  uint64_t v8 = *(void *)(v5 + 24);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_10248AA28 + 24);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
}

uint64_t sub_100B6D800(uint64_t a1)
{
  LOBYTE(v1) = *(unsigned char *)(a1 + 36);
  if ((_BYTE)v1)
  {
    if (*(unsigned char *)(a1 + 36))
    {
      uint64_t v2 = *(void *)(a1 + 8);
      if (!v2) {
        uint64_t v2 = *(void *)(qword_10248AA28 + 8);
      }
      int v3 = *(unsigned __int8 *)(v2 + 28);
      if (*(unsigned char *)(v2 + 28))
      {
        if ((v3 & 2) != 0) {
          int v3 = ((v3 << 31 >> 31) & 9) + 9;
        }
        else {
          int v3 = (v3 << 31 >> 31) & 9;
        }
      }
      *(_DWORD *)(v2 + 24) = v3;
      LODWORD(v2) = v3 + 2;
      int v1 = *(_DWORD *)(a1 + 36);
    }
    else
    {
      LODWORD(v2) = 0;
    }
    if ((v1 & 2) != 0) {
      uint64_t v2 = (v2 + 9);
    }
    else {
      uint64_t v2 = v2;
    }
    if ((v1 & 4) != 0)
    {
      uint64_t v4 = *(void *)(a1 + 24);
      if (!v4) {
        uint64_t v4 = *(void *)(qword_10248AA28 + 24);
      }
      int v5 = *(unsigned __int8 *)(v4 + 36);
      if (*(unsigned char *)(v4 + 36))
      {
        int v6 = (v5 << 31 >> 31) & 9;
        if ((v5 & 2) != 0) {
          v6 += 9;
        }
        if ((v5 & 4) != 0) {
          int v5 = v6 + 9;
        }
        else {
          int v5 = v6;
        }
      }
      *(_DWORD *)(v4 + 32) = v5;
      uint64_t v2 = (v2 + v5 + 2);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  *(_DWORD *)(a1 + 32) = v2;
  return v2;
}

double sub_100B6D8C4(uint64_t a1, void *lpsrc)
{
  return sub_100B6D05C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B6D94C()
{
  return 1;
}

void *sub_100B6D954@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Vision.LSLLocation");
}

void sub_100B6D964(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 72);
  if (!(_BYTE)v4) {
    return;
  }
  if (*(unsigned char *)(a2 + 72))
  {
    *(_DWORD *)(a1 + 72) |= 1u;
    uint64_t v5 = *(void *)(a1 + 8);
    if (!v5) {
      operator new();
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248AA30 + 8);
    }
    sub_100B673B0(v5, v6);
    int v4 = *(_DWORD *)(a2 + 72);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_23;
    }
  }
  else if ((*(unsigned char *)(a2 + 72) & 2) == 0)
  {
    goto LABEL_6;
  }
  *(_DWORD *)(a1 + 72) |= 2u;
  uint64_t v7 = *(_DWORD **)(a1 + 16);
  if (!v7) {
    operator new();
  }
  uint64_t v8 = *(void *)(a2 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_10248AA30 + 16);
  }
  sub_100B68A9C(v7, v8);
  int v4 = *(_DWORD *)(a2 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_23:
  *(_DWORD *)(a1 + 72) |= 4u;
  int v9 = *(_DWORD **)(a1 + 24);
  if (!v9) {
    operator new();
  }
  uint64_t v10 = *(void *)(a2 + 24);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_10248AA30 + 24);
  }
  sub_100B68A9C(v9, v10);
  int v4 = *(_DWORD *)(a2 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }
LABEL_28:
  *(_DWORD *)(a1 + 72) |= 8u;
  uint64_t v11 = *(void *)(a1 + 32);
  if (!v11) {
    operator new();
  }
  uint64_t v12 = *(void *)(a2 + 32);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_10248AA30 + 32);
  }
  sub_100B67F00(v11, v12);
  int v4 = *(_DWORD *)(a2 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_34:
    int v14 = *(_DWORD *)(a2 + 64);
    if ((v14 + 1) >= 4) {
      sub_101A7F890();
    }
    *(_DWORD *)(a1 + 72) |= 0x20u;
    *(_DWORD *)(a1 + 64) = v14;
    int v4 = *(_DWORD *)(a2 + 72);
    if ((v4 & 0x40) == 0)
    {
LABEL_11:
      if ((v4 & 0x80) == 0) {
        return;
      }
      goto LABEL_41;
    }
    goto LABEL_36;
  }
LABEL_33:
  uint64_t v13 = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 72) |= 0x10u;
  *(void *)(a1 + 40) = v13;
  int v4 = *(_DWORD *)(a2 + 72);
  if ((v4 & 0x20) != 0) {
    goto LABEL_34;
  }
LABEL_10:
  if ((v4 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_36:
  *(_DWORD *)(a1 + 72) |= 0x40u;
  uint64_t v15 = *(void *)(a1 + 48);
  if (!v15) {
    operator new();
  }
  uint64_t v16 = *(void *)(a2 + 48);
  if (!v16) {
    uint64_t v16 = *(void *)(qword_10248AA30 + 48);
  }
  sub_100B6D05C(v15, v16);
  if ((*(_DWORD *)(a2 + 72) & 0x80) != 0)
  {
LABEL_41:
    *(_DWORD *)(a1 + 72) |= 0x80u;
    uint64_t v17 = *(void *)(a1 + 56);
    if (!v17) {
      operator new();
    }
    uint64_t v18 = *(void *)(a2 + 56);
    if (!v18) {
      uint64_t v18 = *(void *)(qword_10248AA30 + 56);
    }
    sub_100B6ED88(v17, v18);
  }
}

void sub_100B6DD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *sub_100B6DD18(void *result)
{
  if ((void *)qword_10248AA30 != result)
  {
    int v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = v1[2];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = v1[3];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = v1[4];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = v1[6];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t result = (void *)v1[7];
    if (result)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v7();
    }
  }
  return result;
}

void sub_100B6DE68(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022E8270;
  sub_100B6DD18(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B6DEBC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022E8270;
  sub_100B6DD18(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100B6DF24()
{
}

uint64_t sub_100B6DF8C(uint64_t result)
{
  uint64_t v1 = result;
  LOBYTE(v2) = *(unsigned char *)(result + 72);
  if ((_BYTE)v2)
  {
    if (*(unsigned char *)(result + 72))
    {
      uint64_t v3 = *(void *)(result + 8);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 36))
        {
          *(void *)(v3 + 8) = 0;
          *(void *)(v3 + 16) = 0;
          *(void *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 36) = 0;
        int v2 = *(_DWORD *)(result + 72);
      }
    }
    if ((v2 & 2) != 0)
    {
      uint64_t v4 = *(void *)(result + 16);
      if (v4)
      {
        uint64_t result = sub_10026DEDC(v4 + 8);
        *(_DWORD *)(v4 + 36) = 0;
        int v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 4) != 0)
    {
      uint64_t v5 = *(void *)(v1 + 24);
      if (v5)
      {
        uint64_t result = sub_10026DEDC(v5 + 8);
        *(_DWORD *)(v5 + 36) = 0;
        int v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 8) != 0)
    {
      uint64_t v6 = *(void *)(v1 + 32);
      if (v6)
      {
        *(_DWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 28) = 0;
        int v2 = *(_DWORD *)(v1 + 72);
      }
    }
    *(void *)(v1 + 40) = 0;
    *(_DWORD *)(v1 + 64) = -1;
    if ((v2 & 0x40) != 0)
    {
      uint64_t result = *(void *)(v1 + 48);
      if (result)
      {
        uint64_t result = sub_100B6D3A8(result);
        int v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 0x80) != 0)
    {
      uint64_t result = *(void *)(v1 + 56);
      if (result) {
        uint64_t result = sub_100B6E05C(result);
      }
    }
  }
  *(_DWORD *)(v1 + 72) = 0;
  return result;
}

uint64_t sub_100B6E05C(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 20))
  {
    uint64_t v2 = *(void *)(result + 8);
    if (v2)
    {
      if (*(unsigned char *)(v2 + 44)) {
        *(void *)(v2 + 8) = 0;
      }
      uint64_t result = sub_10026DEDC(v2 + 16);
      *(_DWORD *)(v2 + 44) = 0;
    }
  }
  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100B6E0A8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 < *((void *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_6;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_27;
        }
        *(_DWORD *)(a1 + 72) |= 1u;
        uint64_t v8 = *(void *)(a1 + 8);
        if (!v8) {
          operator new();
        }
        v68[0] = 0;
        int v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68))return 0; {
        }
          }
        else
        {
          v68[0] = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        int v12 = *((_DWORD *)this + 14);
        int v13 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v12 + 1;
        if (v12 >= v13) {
          return 0;
        }
        int v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        if (!sub_100B6757C(v8, this, v15) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
        int v16 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v16, 1);
        int v18 = v16 - 1;
        if (v18 < 0 == v17) {
          *((_DWORD *)this + 14) = v18;
        }
        char v19 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v19 >= *((void *)this + 2) || *v19 != 18) {
          continue;
        }
        *((void *)this + 1) = v19 + 1;
        goto LABEL_39;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_27;
        }
LABEL_39:
        *(_DWORD *)(a1 + 72) |= 2u;
        uint64_t v20 = *(int **)(a1 + 16);
        if (!v20) {
          operator new();
        }
        v68[0] = 0;
        uint64_t v21 = (char *)*((void *)this + 1);
        if ((unint64_t)v21 >= *((void *)this + 2) || *v21 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68))return 0; {
        }
          }
        else
        {
          v68[0] = *v21;
          *((void *)this + 1) = v21 + 1;
        }
        int v22 = *((_DWORD *)this + 14);
        int v23 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v22 + 1;
        if (v22 >= v23) {
          return 0;
        }
        int v24 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        if (!sub_100B68D24(v20, this, v25) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v24);
        int v26 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v26, 1);
        int v27 = v26 - 1;
        if (v27 < 0 == v17) {
          *((_DWORD *)this + 14) = v27;
        }
        int v28 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v28 >= *((void *)this + 2) || *v28 != 26) {
          continue;
        }
        *((void *)this + 1) = v28 + 1;
LABEL_53:
        *(_DWORD *)(a1 + 72) |= 4u;
        char v29 = *(int **)(a1 + 24);
        if (!v29) {
          operator new();
        }
        v68[0] = 0;
        uint64_t v30 = (char *)*((void *)this + 1);
        if ((unint64_t)v30 >= *((void *)this + 2) || *v30 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68))return 0; {
        }
          }
        else
        {
          v68[0] = *v30;
          *((void *)this + 1) = v30 + 1;
        }
        int v31 = *((_DWORD *)this + 14);
        int v32 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v31 + 1;
        if (v31 >= v32) {
          return 0;
        }
        int v33 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        if (!sub_100B68D24(v29, this, v34) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v33);
        int v35 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v35, 1);
        int v36 = v35 - 1;
        if (v36 < 0 == v17) {
          *((_DWORD *)this + 14) = v36;
        }
        uint64_t v37 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v37 >= *((void *)this + 2) || *v37 != 34) {
          continue;
        }
        *((void *)this + 1) = v37 + 1;
LABEL_67:
        *(_DWORD *)(a1 + 72) |= 8u;
        uint64_t v38 = *(void *)(a1 + 32);
        if (!v38) {
          operator new();
        }
        v68[0] = 0;
        unsigned int v39 = (char *)*((void *)this + 1);
        if ((unint64_t)v39 >= *((void *)this + 2) || *v39 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68))return 0; {
        }
          }
        else
        {
          v68[0] = *v39;
          *((void *)this + 1) = v39 + 1;
        }
        int v40 = *((_DWORD *)this + 14);
        int v41 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v40 + 1;
        if (v40 >= v41) {
          return 0;
        }
        int v42 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        if (!sub_100B680CC(v38, this, v43) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v42);
        int v44 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v44, 1);
        int v45 = v44 - 1;
        if (v45 < 0 == v17) {
          *((_DWORD *)this + 14) = v45;
        }
        unsigned int v46 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v46 >= *((void *)this + 2) || *v46 != 41) {
          continue;
        }
        *((void *)this + 1) = v46 + 1;
LABEL_81:
        *(void *)BOOL v68 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v68) & 1) == 0)return 0; {
        *(void *)(a1 + 40) = *(void *)v68;
        }
        *(_DWORD *)(a1 + 72) |= 0x10u;
        int v47 = (unsigned char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        if ((unint64_t)v47 >= v10 || *v47 != 48) {
          continue;
        }
        uint64_t v11 = v47 + 1;
        *((void *)this + 1) = v11;
LABEL_85:
        v68[0] = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68);
          if (!result) {
            return result;
          }
          unsigned int v48 = v68[0];
        }
        else
        {
          unsigned int v48 = *v11;
          *((void *)this + 1) = v11 + 1;
        }
        if (v48 + 1 <= 3)
        {
          *(_DWORD *)(a1 + 72) |= 0x20u;
          *(_DWORD *)(a1 + 64) = v48;
        }
        double v50 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v50 >= *((void *)this + 2) || *v50 != 58) {
          continue;
        }
        *((void *)this + 1) = v50 + 1;
LABEL_95:
        *(_DWORD *)(a1 + 72) |= 0x40u;
        uint64_t v51 = *(void *)(a1 + 48);
        if (!v51) {
          operator new();
        }
        v68[0] = 0;
        int v52 = (char *)*((void *)this + 1);
        if ((unint64_t)v52 >= *((void *)this + 2) || *v52 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68))return 0; {
        }
          }
        else
        {
          v68[0] = *v52;
          *((void *)this + 1) = v52 + 1;
        }
        int v53 = *((_DWORD *)this + 14);
        int v54 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v53 + 1;
        if (v53 >= v54) {
          return 0;
        }
        int v55 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        if (!sub_100B6D3FC(v51, this, v56) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v55);
        int v57 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v57, 1);
        int v58 = v57 - 1;
        if (v58 < 0 == v17) {
          *((_DWORD *)this + 14) = v58;
        }
        __int16 v59 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v59 >= *((void *)this + 2) || *v59 != 66) {
          continue;
        }
        *((void *)this + 1) = v59 + 1;
LABEL_109:
        *(_DWORD *)(a1 + 72) |= 0x80u;
        uint64_t v60 = *(void *)(a1 + 56);
        if (!v60) {
          operator new();
        }
        v68[0] = 0;
        __int16 v61 = (char *)*((void *)this + 1);
        if ((unint64_t)v61 >= *((void *)this + 2) || *v61 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68))return 0; {
        }
          }
        else
        {
          v68[0] = *v61;
          *((void *)this + 1) = v61 + 1;
        }
        int v62 = *((_DWORD *)this + 14);
        int v63 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v62 + 1;
        if (v62 >= v63) {
          return 0;
        }
        int v64 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        if (!sub_100B6F6BC(v60, this, v65) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v64);
        int v66 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v66, 1);
        int v67 = v66 - 1;
        if (v67 < 0 == v17) {
          *((_DWORD *)this + 14) = v67;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_53;
        }
        goto LABEL_27;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_67;
        }
        goto LABEL_27;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_81;
        }
        goto LABEL_27;
      case 6u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_27;
        }
        uint64_t v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_85;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_95;
        }
        goto LABEL_27;
      case 8u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_27;
        }
        goto LABEL_109;
      default:
        int v7 = TagFallback & 7;
LABEL_27:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_100B6E930(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 72);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248AA30 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_10248AA30 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_16:
  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_10248AA30 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_19:
  uint64_t v10 = *(void *)(v5 + 32);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_10248AA30 + 32);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v10, a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (int)a2, *(double *)(v5 + 40), a3);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_DWORD *)(v5 + 64), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      return result;
    }
    goto LABEL_27;
  }
LABEL_24:
  uint64_t v11 = *(void *)(v5 + 48);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_10248AA30 + 48);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v11, a2, a4);
  if ((*(_DWORD *)(v5 + 72) & 0x80) != 0)
  {
LABEL_27:
    uint64_t v12 = *(void *)(v5 + 56);
    if (!v12) {
      uint64_t v12 = *(void *)(qword_10248AA30 + 56);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v12, a2, a4);
  }
  return result;
}

uint64_t sub_100B6EAA8(uint64_t a1, unint64_t a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 72);
  if (!(_BYTE)v3)
  {
    uint64_t v5 = 0;
    goto LABEL_61;
  }
  if ((*(unsigned char *)(a1 + 72) & 1) == 0)
  {
    unsigned int v4 = 0;
    if ((*(unsigned char *)(a1 + 72) & 2) == 0) {
      goto LABEL_21;
    }
    goto LABEL_15;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    uint64_t v6 = *(void *)(qword_10248AA30 + 8);
  }
  int v7 = *(unsigned __int8 *)(v6 + 36);
  if (*(unsigned char *)(v6 + 36))
  {
    int v8 = (v7 << 31 >> 31) & 9;
    if ((v7 & 2) != 0) {
      v8 += 9;
    }
    if ((v7 & 4) != 0) {
      int v7 = v8 + 9;
    }
    else {
      int v7 = v8;
    }
  }
  *(_DWORD *)(v6 + 32) = v7;
  unsigned int v4 = v7 + 2;
  int v3 = *(_DWORD *)(a1 + 72);
  if ((v3 & 2) != 0)
  {
LABEL_15:
    uint64_t v9 = *(void *)(a1 + 16);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_10248AA30 + 16);
    }
    uint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B68FAC(v9, a2);
    int v11 = (int)v10;
    if (v10 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    }
    else {
      int v12 = 1;
    }
    v4 += v11 + v12 + 1;
    int v3 = *(_DWORD *)(a1 + 72);
  }
LABEL_21:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_36;
    }
    goto LABEL_30;
  }
  uint64_t v13 = *(void *)(a1 + 24);
  if (!v13) {
    uint64_t v13 = *(void *)(qword_10248AA30 + 24);
  }
  int v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B68FAC(v13, a2);
  int v15 = (int)v14;
  if (v14 >= 0x80) {
    int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
  }
  else {
    int v16 = 1;
  }
  v4 += v15 + v16 + 1;
  int v3 = *(_DWORD *)(a1 + 72);
  if ((v3 & 8) != 0)
  {
LABEL_30:
    uint64_t v17 = *(void *)(a1 + 32);
    if (!v17) {
      uint64_t v17 = *(void *)(qword_10248AA30 + 32);
    }
    int v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(9 * *(_DWORD *)(v17 + 16));
    *(_DWORD *)(v17 + 24) = v18;
    if (v18 >= 0x80) {
      int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2);
    }
    else {
      int v19 = 1;
    }
    v4 += v18 + v19 + 1;
    int v3 = *(_DWORD *)(a1 + 72);
  }
LABEL_36:
  if ((v3 & 0x10) != 0) {
    uint64_t v5 = v4 + 9;
  }
  else {
    uint64_t v5 = v4;
  }
  if ((v3 & 0x20) != 0)
  {
    uint64_t v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 64);
    if ((v20 & 0x80000000) != 0)
    {
      int v21 = 11;
    }
    else if (v20 >= 0x80)
    {
      int v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 72);
    }
    else
    {
      int v21 = 2;
    }
    uint64_t v5 = (v21 + v5);
    if ((v3 & 0x40) == 0)
    {
LABEL_41:
      if ((v3 & 0x80) == 0) {
        goto LABEL_61;
      }
      goto LABEL_55;
    }
  }
  else if ((v3 & 0x40) == 0)
  {
    goto LABEL_41;
  }
  uint64_t v22 = *(void *)(a1 + 48);
  if (!v22) {
    uint64_t v22 = *(void *)(qword_10248AA30 + 48);
  }
  int v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B6D800(v22);
  int v24 = (int)v23;
  if (v23 >= 0x80) {
    int v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2);
  }
  else {
    int v25 = 1;
  }
  uint64_t v5 = (v5 + v24 + v25 + 1);
  if ((*(_DWORD *)(a1 + 72) & 0x80) != 0)
  {
LABEL_55:
    uint64_t v26 = *(void *)(a1 + 56);
    if (!v26) {
      uint64_t v26 = *(void *)(qword_10248AA30 + 56);
    }
    int v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B6F8AC(v26, a2);
    int v29 = (int)v27;
    if (v27 >= 0x80) {
      int v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, v28);
    }
    else {
      int v30 = 1;
    }
    uint64_t v5 = (v5 + v29 + v30 + 1);
  }
LABEL_61:
  *(_DWORD *)(a1 + 68) = v5;
  return v5;
}

void sub_100B6ED00(uint64_t a1, void *lpsrc)
{
  sub_100B6D964(a1, (uint64_t)lpsrc);
}

void sub_100B6ED88(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if (*(unsigned char *)(a2 + 20))
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      operator new();
    }
    uint64_t v5 = *(void *)(a2 + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248AA40 + 8);
    }
    sub_100B6EEA0(v4, v5);
  }
}

void sub_100B6EE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B6EE88()
{
  return 1;
}

void *sub_100B6EE90@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Vision.LSLHeading");
}

void sub_100B6EEA0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16), *(_DWORD *)(a2 + 24) + *(_DWORD *)(a1 + 24));
  if (*(int *)(a2 + 24) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a2 + 16) + 8 * v4);
      int v6 = *(_DWORD *)(a1 + 28);
      uint64_t v7 = *(int *)(a1 + 24);
      if ((int)v7 >= v6)
      {
        if (v6 == *(_DWORD *)(a1 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16), v6 + 1);
          int v6 = *(_DWORD *)(a1 + 28);
        }
        *(_DWORD *)(a1 + 28) = v6 + 1;
        operator new();
      }
      uint64_t v8 = *(void *)(a1 + 16);
      *(_DWORD *)(a1 + 24) = v7 + 1;
      sub_100B6CC24(*(void *)(v8 + 8 * v7), v5);
      ++v4;
    }
    while (v4 < *(int *)(a2 + 24));
  }
  if (*(unsigned char *)(a2 + 44))
  {
    uint64_t v9 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 44) |= 1u;
    *(void *)(a1 + 8) = v9;
  }
}

void sub_100B6F018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B6F030(uint64_t *a1)
{
  *a1 = (uint64_t)off_1022E82E8;
  sub_10016B2E8(a1 + 2);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_100B6F08C(uint64_t *a1)
{
  sub_100B6F030(a1);

  operator delete();
}

void sub_100B6F0C4()
{
}

uint64_t sub_100B6F118(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 44)) {
    *(void *)(a1 + 8) = 0;
  }
  uint64_t result = sub_10026DEDC(a1 + 16);
  *(_DWORD *)(a1 + 44) = 0;
  return result;
}

uint64_t sub_100B6F150(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (unint64_t *)(a1 + 8);
  int v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (char *)*((void *)this + 1);
        if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v7;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v7 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_16;
        }
        uint64_t v10 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        if ((unint64_t)v10 >= v11 || *v10 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!result) {
            return result;
          }
          int v12 = (unsigned char *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
        }
        else
        {
          *uint64_t v5 = *v10;
          int v12 = v10 + 1;
          *((void *)this + 1) = v12;
        }
        *(_DWORD *)(a1 + 44) |= 1u;
        if ((unint64_t)v12 < v11 && *v12 == 18) {
          goto LABEL_23;
        }
      }
      if (TagFallback >> 3 != 2) {
        break;
      }
      int v9 = TagFallback & 7;
      if (v9 != 2) {
        goto LABEL_16;
      }
      while (1)
      {
        int v14 = *(_DWORD *)(a1 + 28);
        uint64_t v15 = *(int *)(a1 + 24);
        if ((int)v15 >= v14)
        {
          if (v14 == *(_DWORD *)(a1 + 32))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v14 + 1);
            int v14 = *(_DWORD *)(a1 + 28);
          }
          *(_DWORD *)(a1 + 28) = v14 + 1;
          operator new();
        }
        uint64_t v16 = *(void *)(a1 + 16);
        *(_DWORD *)(a1 + 24) = v15 + 1;
        uint64_t v17 = *(void *)(v16 + 8 * v15);
        unsigned int v27 = 0;
        int v18 = (char *)*((void *)this + 1);
        if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27))return 0; {
        }
          }
        else
        {
          unsigned int v27 = *v18;
          *((void *)this + 1) = v18 + 1;
        }
        int v19 = *((_DWORD *)this + 14);
        int v20 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v19 + 1;
        if (v19 >= v20) {
          return 0;
        }
        int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v27);
        if (!sub_100B6CDBC(v17, this, v22) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
        int v23 = *((_DWORD *)this + 14);
        BOOL v24 = __OFSUB__(v23, 1);
        int v25 = v23 - 1;
        if (v25 < 0 == v24) {
          *((_DWORD *)this + 14) = v25;
        }
        int v12 = (unsigned char *)*((void *)this + 1);
        uint64_t v26 = (unsigned char *)*((void *)this + 2);
        if (v12 >= v26 || *v12 != 18) {
          break;
        }
LABEL_23:
        *((void *)this + 1) = v12 + 1;
      }
      if (v12 == v26 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    int v9 = TagFallback & 7;
LABEL_16:
    if (v9 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_100B6F400(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  if (*(unsigned char *)(result + 44)) {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(result + 8), (unint64_t)a2, a4);
  }
  if (*(int *)(v5 + 24) >= 1)
  {
    uint64_t v6 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(void *)(*(void *)(v5 + 16) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 24));
  }
  return result;
}

uint64_t sub_100B6F478(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 44)) {
    int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
  }
  else {
    int v3 = 0;
  }
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  uint64_t result = (v4 + v3);
  if ((int)v4 >= 1)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    do
    {
      int v7 = *(unsigned __int8 *)(*(void *)v6 + 28);
      if (*(unsigned char *)(*(void *)v6 + 28))
      {
        if ((v7 & 2) != 0) {
          int v7 = ((v7 << 31 >> 31) & 9) + 9;
        }
        else {
          int v7 = (v7 << 31 >> 31) & 9;
        }
      }
      *(_DWORD *)(*(void *)v6 + 24) = v7;
      uint64_t result = (result + v7 + 1);
      v6 += 8;
      --v4;
    }
    while (v4);
  }
  *(_DWORD *)(a1 + 40) = result;
  return result;
}

void sub_100B6F508(uint64_t a1, void *lpsrc)
{
  sub_100B6EEA0(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B6F590()
{
  return 1;
}

void *sub_100B6F598@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Vision.LSLMapRoadSegment");
}

void sub_100B6F5A8(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1022E8360;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248AA40 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B6F638(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100B6F5A8(a1);

  operator delete();
}

void sub_100B6F670()
{
}

uint64_t sub_100B6F6BC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      uint64_t v7 = *(void *)(a1 + 8);
      if (!v7) {
        operator new();
      }
      unsigned int v17 = 0;
      uint64_t v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17))return 0; {
      }
        }
      else
      {
        unsigned int v17 = *v8;
        *((void *)this + 1) = v8 + 1;
      }
      int v9 = *((_DWORD *)this + 14);
      int v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10) {
        return 0;
      }
      int v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      if (!sub_100B6F150(v7, this, v12) || !*((unsigned char *)this + 36)) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      int v13 = *((_DWORD *)this + 14);
      BOOL v14 = __OFSUB__(v13, 1);
      int v15 = v13 - 1;
      if (v15 < 0 == v14) {
        *((_DWORD *)this + 14) = v15;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      break;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  return 1;
}

uint64_t sub_100B6F880(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(result + 20))
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248AA40 + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return result;
}

uint64_t sub_100B6F8AC(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_10248AA40 + 8);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B6F478(v4, a2);
    int v7 = (int)v5;
    if (v5 >= 0x80) {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, v6);
    }
    else {
      int v8 = 1;
    }
    uint64_t result = (v7 + v8 + 1);
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100B6F91C(uint64_t a1, void *lpsrc)
{
  sub_100B6ED88(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B6F9A4()
{
  return 1;
}

void *sub_100B6F9AC@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Vision.LSLHeadingSupplInfo");
}

void sub_100B6F9BC(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a2 + 8) + 8 * v4);
      int v6 = a1[5];
      uint64_t v7 = (int)a1[4];
      if ((int)v7 >= v6)
      {
        if (v6 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), v6 + 1);
          int v6 = a1[5];
        }
        a1[5] = v6 + 1;
        operator new();
      }
      uint64_t v8 = *((void *)a1 + 1);
      a1[4] = v7 + 1;
      sub_100B6D964(*(void *)(v8 + 8 * v7), v5);
      ++v4;
    }
    while (v4 < *(int *)(a2 + 16));
  }
  LOBYTE(v9) = *(unsigned char *)(a2 + 44);
  if ((_BYTE)v9)
  {
    if (*(unsigned char *)(a2 + 44))
    {
      int v10 = *(_DWORD *)(a2 + 32);
      if ((v10 + 1) >= 6) {
        sub_101A7F8E8();
      }
      a1[11] |= 1u;
      a1[8] = v10;
      int v9 = *(_DWORD *)(a2 + 44);
    }
    if ((v9 & 4) != 0)
    {
      unsigned int v11 = *(_DWORD *)(a2 + 36);
      if (v11 >= 9) {
        sub_101A7F8BC();
      }
      a1[11] |= 4u;
      a1[9] = v11;
    }
  }
}

void sub_100B6FB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B6FBAC(uint64_t *a1)
{
  *a1 = (uint64_t)off_1022E83D8;
  sub_10016B2E8(a1 + 1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_100B6FC08(uint64_t *a1)
{
  sub_100B6FBAC(a1);

  operator delete();
}

uint64_t sub_100B6FC40(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248AA48;
  if (!qword_10248AA48)
  {
    sub_100B66710(0, a2, a3, a4);
    return qword_10248AA48;
  }
  return result;
}

void sub_100B6FC70()
{
}

uint64_t sub_100B6FCCC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 44)) {
    *(void *)(a1 + 32) = 0x8FFFFFFFFLL;
  }
  uint64_t result = sub_10026DEDC(a1 + 8);
  *(_DWORD *)(a1 + 44) = 0;
  return result;
}

uint64_t sub_100B6FD0C(int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
    while (1)
    {
LABEL_2:
      int v6 = (char *)*((void *)this + 1);
      if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v6;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v6 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      unsigned int v8 = TagFallback >> 3;
      if (TagFallback >> 3 != 1) {
        break;
      }
      int v9 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_19;
      }
      unsigned int v31 = 0;
      unsigned int v12 = (char *)*((void *)this + 1);
      if ((unint64_t)v12 >= *((void *)this + 2) || *v12 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v31);
        if (!result) {
          return result;
        }
        unsigned int v13 = v31;
      }
      else
      {
        unsigned int v13 = *v12;
        *((void *)this + 1) = v12 + 1;
      }
      if (v13 + 1 <= 5)
      {
        a1[11] |= 1u;
        a1[8] = v13;
      }
      int v15 = (unsigned char *)*((void *)this + 1);
      if ((unint64_t)v15 < *((void *)this + 2) && *v15 == 18)
      {
        while (1)
        {
          *((void *)this + 1) = v15 + 1;
LABEL_29:
          int v16 = a1[5];
          uint64_t v17 = a1[4];
          if ((int)v17 >= v16)
          {
            if (v16 == a1[6])
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v16 + 1);
              int v16 = a1[5];
            }
            a1[5] = v16 + 1;
            operator new();
          }
          uint64_t v18 = *((void *)a1 + 1);
          a1[4] = v17 + 1;
          uint64_t v19 = *(void *)(v18 + 8 * v17);
          unsigned int v32 = 0;
          int v20 = (char *)*((void *)this + 1);
          if ((unint64_t)v20 >= *((void *)this + 2) || *v20 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v32))return 0; {
          }
            }
          else
          {
            unsigned int v32 = *v20;
            *((void *)this + 1) = v20 + 1;
          }
          int v21 = *((_DWORD *)this + 14);
          int v22 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v21 + 1;
          if (v21 >= v22) {
            return 0;
          }
          int v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v32);
          if (!sub_100B6E0A8(v19, this, v24) || !*((unsigned char *)this + 36)) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v23);
          int v25 = *((_DWORD *)this + 14);
          BOOL v26 = __OFSUB__(v25, 1);
          int v27 = v25 - 1;
          if (v27 < 0 == v26) {
            *((_DWORD *)this + 14) = v27;
          }
          int v15 = (unsigned char *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
          if ((unint64_t)v15 >= v11) {
            break;
          }
          int v28 = *v15;
          if (v28 != 18)
          {
            if (v28 == 24)
            {
              int v10 = v15 + 1;
              *((void *)this + 1) = v10;
LABEL_47:
              unsigned int v30 = 0;
              if ((unint64_t)v10 >= v11 || *v10 < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v30);
                if (!result) {
                  return result;
                }
                unsigned int v29 = v30;
              }
              else
              {
                unsigned int v29 = *v10;
                *((void *)this + 1) = v10 + 1;
              }
              if (v29 <= 8)
              {
                a1[11] |= 4u;
                a1[9] = v29;
              }
              if (*((void *)this + 1) == *((void *)this + 2)
                && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                uint64_t result = 1;
                *((unsigned char *)this + 36) = 1;
                return result;
              }
            }
            goto LABEL_2;
          }
        }
      }
    }
    if (v8 == 2)
    {
      int v9 = TagFallback & 7;
      if (v9 != 2) {
        goto LABEL_19;
      }
      goto LABEL_29;
    }
    if (v8 == 3)
    {
      int v9 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        int v10 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_47;
      }
    }
    else
    {
      int v9 = TagFallback & 7;
    }
LABEL_19:
    if (v9 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_100B7006C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  if (*(unsigned char *)(result + 44)) {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 32), (int)a2, a4);
  }
  if (*(int *)(v5 + 16) >= 1)
  {
    uint64_t v6 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(void *)(*(void *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  if ((*(unsigned char *)(v5 + 44) & 4) != 0)
  {
    int v7 = *(_DWORD *)(v5 + 36);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, (int)a2, a4);
  }
  return result;
}

uint64_t sub_100B70118(uint64_t a1, unint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 44);
  if (!v3)
  {
    int v4 = 0;
    goto LABEL_19;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v5 & 0x80000000) != 0)
    {
      int v4 = 11;
      if ((v3 & 4) == 0) {
        goto LABEL_19;
      }
    }
    else if (v5 >= 0x80)
    {
      int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      if ((*(_DWORD *)(a1 + 44) & 4) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      int v4 = 2;
      if ((v3 & 4) == 0) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    int v4 = 0;
    if ((*(unsigned char *)(a1 + 44) & 4) == 0) {
      goto LABEL_19;
    }
  }
  uint64_t v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
  }
  else
  {
    int v7 = 2;
  }
  v4 += v7;
LABEL_19:
  int v8 = *(_DWORD *)(a1 + 16);
  uint64_t v9 = (v8 + v4);
  if (v8 >= 1)
  {
    uint64_t v10 = 0;
    do
    {
      unint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B6EAA8(*(void *)(*(void *)(a1 + 8) + 8 * v10), a2);
      int v12 = (int)v11;
      if (v11 >= 0x80) {
        int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
      }
      else {
        int v13 = 1;
      }
      uint64_t v9 = (v12 + v9 + v13);
      ++v10;
    }
    while (v10 < *(int *)(a1 + 16));
  }
  *(_DWORD *)(a1 + 40) = v9;
  return v9;
}

void sub_100B70220(_DWORD *a1, void *lpsrc)
{
  sub_100B6F9BC(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B702A8()
{
  return 1;
}

void *sub_100B702B0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Vision.LSLHeadingEstimation");
}

double sub_100B702C0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      *(_DWORD *)(a1 + 28) |= 1u;
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        operator new();
      }
      uint64_t v7 = *(void *)(a2 + 8);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_10248AA50 + 8);
      }
      sub_100B67F00(v6, v7);
      int v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      double result = *(double *)(a2 + 16);
      *(_DWORD *)(a1 + 28) |= 2u;
      *(double *)(a1 + 16) = result;
    }
  }
  return result;
}

void sub_100B703C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B703D8(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1022E8450;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248AA50 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B70468(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100B703D8(a1);

  operator delete();
}

void sub_100B704A0()
{
}

uint64_t sub_100B704EC(uint64_t result)
{
  if (*(unsigned char *)(result + 28))
  {
    if (*(unsigned char *)(result + 28))
    {
      uint64_t v1 = *(void *)(result + 8);
      if (v1)
      {
        *(_DWORD *)(v1 + 16) = 0;
        *(_DWORD *)(v1 + 28) = 0;
      }
    }
    *(void *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100B70514(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 == 1) {
        break;
      }
      if (TagFallback >> 3 != 2)
      {
        int v7 = TagFallback & 7;
        goto LABEL_17;
      }
      int v7 = TagFallback & 7;
      if (v7 == 1)
      {
LABEL_29:
        unint64_t v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v19) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 16) = v19;
        *(_DWORD *)(a1 + 28) |= 2u;
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
      else
      {
LABEL_17:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
      }
        }
    }
    int v7 = TagFallback & 7;
    if (v7 != 2) {
      goto LABEL_17;
    }
    *(_DWORD *)(a1 + 28) |= 1u;
    uint64_t v8 = *(void *)(a1 + 8);
    if (!v8) {
      operator new();
    }
    unsigned int v20 = 0;
    uint64_t v9 = (char *)*((void *)this + 1);
    if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v20)) {
        return 0;
      }
    }
    else
    {
      unsigned int v20 = *v9;
      *((void *)this + 1) = v9 + 1;
    }
    int v10 = *((_DWORD *)this + 14);
    int v11 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v10 + 1;
    if (v10 >= v11) {
      return 0;
    }
    int v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v20);
    if (!sub_100B680CC(v8, this, v13) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
    int v14 = *((_DWORD *)this + 14);
    BOOL v15 = __OFSUB__(v14, 1);
    int v16 = v14 - 1;
    if (v16 < 0 == v15) {
      *((_DWORD *)this + 14) = v16;
    }
    uint64_t v17 = (unsigned char *)*((void *)this + 1);
    if ((unint64_t)v17 < *((void *)this + 2) && *v17 == 17)
    {
      *((void *)this + 1) = v17 + 1;
      goto LABEL_29;
    }
  }
}

uint64_t sub_100B70744(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(result + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AA50 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 2) != 0)
  {
LABEL_7:
    double v8 = *(double *)(v5 + 16);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, v8, a3);
  }
  return result;
}

uint64_t sub_100B707C4(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 28);
  if ((_BYTE)v3)
  {
    if (*(unsigned char *)(a1 + 28))
    {
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        uint64_t v6 = *(void *)(qword_10248AA50 + 8);
      }
      uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(9 * *(_DWORD *)(v6 + 16));
      *(_DWORD *)(v6 + 24) = v7;
      if (v7 >= 0x80) {
        int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
      }
      else {
        int v8 = 1;
      }
      unsigned int v4 = v7 + v8 + 1;
      int v3 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      unsigned int v4 = 0;
    }
    if ((v3 & 2) != 0) {
      uint64_t result = v4 + 9;
    }
    else {
      uint64_t result = v4;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

double sub_100B70854(uint64_t a1, void *lpsrc)
{
  return sub_100B702C0(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B708DC()
{
  return 1;
}

void *sub_100B708E4@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Vision.VLLocation");
}

void sub_100B708F4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v5);
  }
  int v4 = *(_DWORD *)(a2 + 16);
  if (v4)
  {
    sub_100221DFC(a1 + 8, *(_DWORD *)(a1 + 16) + v4);
    memcpy((void *)(*(void *)(a1 + 8) + 4 * *(int *)(a1 + 16)), *(const void **)(a2 + 8), 4 * *(int *)(a2 + 16));
    *(_DWORD *)(a1 + 16) += *(_DWORD *)(a2 + 16);
  }
}

void sub_100B709A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B709C0(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1022E84C8;
  if (*((void *)this + 1)) {
    operator delete[]();
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B70A30(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100B709C0(a1);

  operator delete();
}

void sub_100B70A68()
{
}

uint64_t sub_100B70AB4(uint64_t result)
{
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100B70AC0(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5 = a1 + 8;
  while (1)
  {
    while (1)
    {
      uint64_t v6 = (char *)*((void *)this + 1);
      if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v6;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v6 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      int v8 = TagFallback & 7;
      if ((TagFallback & 0xFFFFFFF8) != 8) {
        break;
      }
      if (v8 != 2)
      {
        if (v8 != 5) {
          break;
        }
        goto LABEL_15;
      }
      uint64_t result = sub_100B67CF0(this, v5);
      if (!result) {
        return result;
      }
      while (1)
      {
        unsigned int v20 = (unsigned char *)*((void *)this + 1);
        int v21 = (unsigned char *)*((void *)this + 2);
        if (v20 >= v21 || *v20 != 13) {
          break;
        }
        *((void *)this + 1) = v20 + 1;
LABEL_15:
        v22[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v22) & 1) == 0) {
          return 0;
        }
        unsigned int v10 = v22[0];
        int v11 = *(_DWORD *)(a1 + 16);
        if (v11 == *(_DWORD *)(a1 + 20))
        {
          sub_100221DFC(v5, v11 + 1);
          int v11 = *(_DWORD *)(a1 + 16);
        }
        uint64_t v12 = *(void *)(a1 + 8);
        int v13 = v11 + 1;
        *(_DWORD *)(a1 + 16) = v11 + 1;
        *(_DWORD *)(v12 + 4 * v11) = v10;
        uint64_t v14 = *((void *)this + 1);
        int v15 = *((_DWORD *)this + 4) - v14;
        if (v15 >= 1)
        {
          signed int v16 = v15 / 5u;
          int v17 = v16 >= *(_DWORD *)(a1 + 20) - v13 ? *(_DWORD *)(a1 + 20) - v13 : v16;
          if (v17 >= 1)
          {
            int v18 = 0;
            while (*(unsigned char *)v14 == 13)
            {
              int v19 = *(_DWORD *)(v14 + 1);
              if (v13 >= *(_DWORD *)(a1 + 20))
              {
                wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v22);
                int v13 = *(_DWORD *)(a1 + 16);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 16) = v13 + 1;
              *(_DWORD *)(v12 + 4 * v13) = v19;
              ++v18;
              v14 += 5;
              ++v13;
              if (v17 == v18)
              {
                int v18 = v17;
                break;
              }
            }
            if (v18) {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 5 * v18);
            }
          }
        }
      }
      if (v20 == v21 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (v8 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_100B70D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B70D3C(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(float *)(*(void *)(v4 + 8) + 4 * v5++), a3);
    while (v5 < *(int *)(v4 + 16));
  }
  return result;
}

uint64_t sub_100B70D9C(uint64_t a1)
{
  uint64_t v1 = (5 * *(_DWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

void sub_100B70DB0(uint64_t a1, void *lpsrc)
{
  sub_100B708F4(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B70E38()
{
  return 1;
}

void *sub_100B70E40@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Vision.VLVectorfM");
}

void sub_100B70E50(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a2 + 8) + 8 * v4);
      int v6 = a1[5];
      uint64_t v7 = (int)a1[4];
      if ((int)v7 >= v6)
      {
        if (v6 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), v6 + 1);
          int v6 = a1[5];
        }
        a1[5] = v6 + 1;
        operator new();
      }
      uint64_t v8 = *((void *)a1 + 1);
      a1[4] = v7 + 1;
      sub_100B708F4(*(void *)(v8 + 8 * v7), v5);
      ++v4;
    }
    while (v4 < *(int *)(a2 + 16));
  }
}

void sub_100B70FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B70FC4(uint64_t *a1)
{
  *a1 = (uint64_t)off_1022E8540;
  sub_10016B2E8(a1 + 1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_100B71020(uint64_t *a1)
{
  sub_100B70FC4(a1);

  operator delete();
}

void sub_100B71058()
{
}

uint64_t sub_100B710AC(uint64_t a1)
{
  uint64_t result = sub_10026DEDC(a1 + 8);
  *(_DWORD *)(a1 + 36) = 0;
  return result;
}

uint64_t sub_100B710D8(int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
LABEL_2:
    int v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
    }
    else
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v6 + 1;
    }
    if (TagFallback == 10)
    {
      while (1)
      {
        int v8 = a1[5];
        uint64_t v9 = a1[4];
        if ((int)v9 >= v8)
        {
          if (v8 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v8 + 1);
            int v8 = a1[5];
          }
          a1[5] = v8 + 1;
          operator new();
        }
        uint64_t v10 = *((void *)a1 + 1);
        a1[4] = v9 + 1;
        uint64_t v11 = *(void *)(v10 + 8 * v9);
        unsigned int v23 = 0;
        uint64_t v12 = (char *)*((void *)this + 1);
        if ((unint64_t)v12 >= *((void *)this + 2) || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23))return 0; {
        }
          }
        else
        {
          unsigned int v23 = *v12;
          *((void *)this + 1) = v12 + 1;
        }
        int v13 = *((_DWORD *)this + 14);
        int v14 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v13 + 1;
        if (v13 >= v14) {
          return 0;
        }
        int v15 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
        if (!sub_100B70AC0(v11, this, v16) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v15);
        int v17 = *((_DWORD *)this + 14);
        BOOL v18 = __OFSUB__(v17, 1);
        int v19 = v17 - 1;
        if (v19 < 0 == v18) {
          *((_DWORD *)this + 14) = v19;
        }
        unsigned int v20 = (unsigned char *)*((void *)this + 1);
        int v21 = (unsigned char *)*((void *)this + 2);
        if (v20 >= v21 || *v20 != 10)
        {
          if (v20 == v21 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)this + 36) = 1;
            return result;
          }
          goto LABEL_2;
        }
        *((void *)this + 1) = v20 + 1;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_100B71300(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  return result;
}

uint64_t sub_100B71360(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 < 1)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    uint64_t v4 = 0;
    LODWORD(v5) = *(_DWORD *)(a1 + 16);
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 8 * v4);
      uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(5 * *(_DWORD *)(v6 + 16));
      *(_DWORD *)(v6 + 24) = v7;
      if (v7 >= 0x80)
      {
        int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
        int v3 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        int v8 = 1;
      }
      uint64_t v5 = (v7 + v5 + v8);
      ++v4;
    }
    while (v4 < v3);
  }
  *(_DWORD *)(a1 + 32) = v5;
  return v5;
}

void sub_100B713F0(_DWORD *a1, void *lpsrc)
{
  sub_100B70E50(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B71478()
{
  return 1;
}

void *sub_100B71480@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Vision.VLMatrixfMxN");
}

void sub_100B71490(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v25);
  }
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    sub_100221DFC(a1 + 16, *(_DWORD *)(a1 + 24) + v4);
    memcpy((void *)(*(void *)(a1 + 16) + 4 * *(int *)(a1 + 24)), *(const void **)(a2 + 16), 4 * *(int *)(a2 + 24));
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
  }
  int v5 = *(_DWORD *)(a2 + 40);
  if (v5)
  {
    sub_10026DE30(a1 + 32, *(_DWORD *)(a1 + 40) + v5);
    memcpy((void *)(*(void *)(a1 + 32) + 8 * *(int *)(a1 + 40)), *(const void **)(a2 + 32), 8 * *(int *)(a2 + 40));
    *(_DWORD *)(a1 + 40) += *(_DWORD *)(a2 + 40);
  }
  int v6 = *(_DWORD *)(a2 + 56);
  if (v6)
  {
    sub_100221DFC(a1 + 48, *(_DWORD *)(a1 + 56) + v6);
    memcpy((void *)(*(void *)(a1 + 48) + 4 * *(int *)(a1 + 56)), *(const void **)(a2 + 48), 4 * *(int *)(a2 + 56));
    *(_DWORD *)(a1 + 56) += *(_DWORD *)(a2 + 56);
  }
  int v7 = *(_DWORD *)(a2 + 72);
  if (v7)
  {
    sub_10026DE30(a1 + 64, *(_DWORD *)(a1 + 72) + v7);
    memcpy((void *)(*(void *)(a1 + 64) + 8 * *(int *)(a1 + 72)), *(const void **)(a2 + 64), 8 * *(int *)(a2 + 72));
    *(_DWORD *)(a1 + 72) += *(_DWORD *)(a2 + 72);
  }
  int v8 = *(_DWORD *)(a2 + 96);
  if (v8)
  {
    sub_100221DFC(a1 + 88, *(_DWORD *)(a1 + 96) + v8);
    memcpy((void *)(*(void *)(a1 + 88) + 4 * *(int *)(a1 + 96)), *(const void **)(a2 + 88), 4 * *(int *)(a2 + 96));
    *(_DWORD *)(a1 + 96) += *(_DWORD *)(a2 + 96);
  }
  int v9 = *(_DWORD *)(a2 + 128);
  if (v9)
  {
    sub_100221DFC(a1 + 120, *(_DWORD *)(a1 + 128) + v9);
    memcpy((void *)(*(void *)(a1 + 120) + 4 * *(int *)(a1 + 128)), *(const void **)(a2 + 120), 4 * *(int *)(a2 + 128));
    *(_DWORD *)(a1 + 128) += *(_DWORD *)(a2 + 128);
  }
  int v10 = *(_DWORD *)(a2 + 144);
  if (v10)
  {
    sub_100221DFC(a1 + 136, *(_DWORD *)(a1 + 144) + v10);
    memcpy((void *)(*(void *)(a1 + 136) + 4 * *(int *)(a1 + 144)), *(const void **)(a2 + 136), 4 * *(int *)(a2 + 144));
    *(_DWORD *)(a1 + 144) += *(_DWORD *)(a2 + 144);
  }
  int v11 = *(_DWORD *)(a2 + 160);
  if (v11)
  {
    sub_100221DFC(a1 + 152, *(_DWORD *)(a1 + 160) + v11);
    memcpy((void *)(*(void *)(a1 + 152) + 4 * *(int *)(a1 + 160)), *(const void **)(a2 + 152), 4 * *(int *)(a2 + 160));
    *(_DWORD *)(a1 + 160) += *(_DWORD *)(a2 + 160);
  }
  int v12 = *(_DWORD *)(a2 + 184);
  if (v12)
  {
    sub_100221DFC(a1 + 176, *(_DWORD *)(a1 + 184) + v12);
    memcpy((void *)(*(void *)(a1 + 176) + 4 * *(int *)(a1 + 184)), *(const void **)(a2 + 176), 4 * *(int *)(a2 + 184));
    *(_DWORD *)(a1 + 184) += *(_DWORD *)(a2 + 184);
  }
  int v13 = *(_DWORD *)(a2 + 200);
  if (v13)
  {
    sub_100221DFC(a1 + 192, *(_DWORD *)(a1 + 200) + v13);
    memcpy((void *)(*(void *)(a1 + 192) + 4 * *(int *)(a1 + 200)), *(const void **)(a2 + 192), 4 * *(int *)(a2 + 200));
    *(_DWORD *)(a1 + 200) += *(_DWORD *)(a2 + 200);
  }
  int v14 = *(_DWORD *)(a2 + 216);
  if (v14)
  {
    sub_100221DFC(a1 + 208, *(_DWORD *)(a1 + 216) + v14);
    memcpy((void *)(*(void *)(a1 + 208) + 4 * *(int *)(a1 + 216)), *(const void **)(a2 + 208), 4 * *(int *)(a2 + 216));
    *(_DWORD *)(a1 + 216) += *(_DWORD *)(a2 + 216);
  }
  int v15 = *(_DWORD *)(a2 + 232);
  if (v15)
  {
    sub_100221DFC(a1 + 224, *(_DWORD *)(a1 + 232) + v15);
    memcpy((void *)(*(void *)(a1 + 224) + 4 * *(int *)(a1 + 232)), *(const void **)(a2 + 224), 4 * *(int *)(a2 + 232));
    *(_DWORD *)(a1 + 232) += *(_DWORD *)(a2 + 232);
  }
  int v16 = *(_DWORD *)(a2 + 248);
  if (v16)
  {
    sub_10026DE30(a1 + 240, *(_DWORD *)(a1 + 248) + v16);
    memcpy((void *)(*(void *)(a1 + 240) + 8 * *(int *)(a1 + 248)), *(const void **)(a2 + 240), 8 * *(int *)(a2 + 248));
    *(_DWORD *)(a1 + 248) += *(_DWORD *)(a2 + 248);
  }
  int v17 = *(_DWORD *)(a2 + 264);
  if (v17)
  {
    sub_10026DE30(a1 + 256, *(_DWORD *)(a1 + 264) + v17);
    memcpy((void *)(*(void *)(a1 + 256) + 8 * *(int *)(a1 + 264)), *(const void **)(a2 + 256), 8 * *(int *)(a2 + 264));
    *(_DWORD *)(a1 + 264) += *(_DWORD *)(a2 + 264);
  }
  int v18 = *(_DWORD *)(a2 + 276);
  if ((_BYTE)v18)
  {
    if (v18)
    {
      uint64_t v23 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 276) |= 1u;
      *(void *)(a1 + 8) = v23;
      int v18 = *(_DWORD *)(a2 + 276);
      if ((v18 & 0x20) == 0)
      {
LABEL_34:
        if ((v18 & 0x80) == 0) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
    }
    else if ((v18 & 0x20) == 0)
    {
      goto LABEL_34;
    }
    uint64_t v24 = *(void *)(a2 + 80);
    *(_DWORD *)(a1 + 276) |= 0x20u;
    *(void *)(a1 + 80) = v24;
    int v18 = *(_DWORD *)(a2 + 276);
    if ((v18 & 0x80) != 0)
    {
LABEL_35:
      uint64_t v19 = *(void *)(a2 + 104);
      *(_DWORD *)(a1 + 276) |= 0x80u;
      *(void *)(a1 + 104) = v19;
      int v18 = *(_DWORD *)(a2 + 276);
    }
  }
LABEL_36:
  if ((v18 & 0xFF00) != 0)
  {
    if ((v18 & 0x100) != 0)
    {
      unsigned int v20 = *(const std::string **)(a2 + 112);
      *(_DWORD *)(a1 + 276) |= 0x100u;
      int v21 = *(std::string **)(a1 + 112);
      if (v21 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v21, v20);
      int v18 = *(_DWORD *)(a2 + 276);
    }
    if ((v18 & 0x1000) != 0)
    {
      uint64_t v22 = *(void *)(a2 + 168);
      *(_DWORD *)(a1 + 276) |= 0x1000u;
      *(void *)(a1 + 168) = v22;
    }
  }
}

void sub_100B719A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B719BC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022E85B8;
  sub_100B71B98((uint64_t)a1);
  if (*((void *)a1 + 32)) {
    operator delete[]();
  }
  if (*((void *)a1 + 30)) {
    operator delete[]();
  }
  if (*((void *)a1 + 28)) {
    operator delete[]();
  }
  if (*((void *)a1 + 26)) {
    operator delete[]();
  }
  if (*((void *)a1 + 24)) {
    operator delete[]();
  }
  if (*((void *)a1 + 22)) {
    operator delete[]();
  }
  if (*((void *)a1 + 19)) {
    operator delete[]();
  }
  if (*((void *)a1 + 17)) {
    operator delete[]();
  }
  if (*((void *)a1 + 15)) {
    operator delete[]();
  }
  if (*((void *)a1 + 11)) {
    operator delete[]();
  }
  if (*((void *)a1 + 8)) {
    operator delete[]();
  }
  if (*((void *)a1 + 6)) {
    operator delete[]();
  }
  if (*((void *)a1 + 4)) {
    operator delete[]();
  }
  if (*((void *)a1 + 2)) {
    operator delete[]();
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

uint64_t sub_100B71B98(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 112);
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  return result;
}

void sub_100B71C10(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100B719BC(a1);

  operator delete();
}

void sub_100B71C48()
{
}

uint64_t sub_100B71CD8(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 276);
  if ((_BYTE)v1)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 80) = 0;
    *(void *)(result + 104) = 0;
  }
  if ((v1 & 0xFF00) != 0)
  {
    if ((v1 & 0x100) != 0)
    {
      uint64_t v2 = *(void *)(result + 112);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    *(void *)(result + 168) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 96) = 0;
  *(_DWORD *)(result + 128) = 0;
  *(_DWORD *)(result + 144) = 0;
  *(_DWORD *)(result + 160) = 0;
  *(_DWORD *)(result + 184) = 0;
  *(_DWORD *)(result + 200) = 0;
  *(_DWORD *)(result + 216) = 0;
  *(_DWORD *)(result + 232) = 0;
  *(_DWORD *)(result + 248) = 0;
  *(_DWORD *)(result + 264) = 0;
  *(_DWORD *)(result + 276) = 0;
  return result;
}

uint64_t sub_100B71D74(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v188 = a1 + 240;
  uint64_t v189 = a1 + 224;
  uint64_t v190 = a1 + 208;
  uint64_t v191 = a1 + 256;
  uint64_t v5 = a1 + 192;
  uint64_t v196 = a1 + 176;
  uint64_t v197 = a1 + 120;
  uint64_t v200 = a1 + 152;
  uint64_t v201 = a1 + 88;
  uint64_t v202 = a1 + 136;
  uint64_t v203 = a1 + 64;
  uint64_t v198 = a1 + 32;
  uint64_t v199 = a1 + 48;
  double v187 = (unint64_t *)(a1 + 8);
  uint64_t v194 = a1 + 16;
  unsigned int v195 = (unint64_t *)(a1 + 80);
  __int16 v192 = (unint64_t *)(a1 + 168);
  int v193 = (unint64_t *)(a1 + 104);
LABEL_2:
  while (2)
  {
    int v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_67;
        }
        int v9 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        if ((unint64_t)v9 >= v10 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v187);
          if (!result) {
            return result;
          }
          int v11 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          *double v187 = *v9;
          int v11 = v9 + 1;
          *((void *)this + 1) = v11;
        }
        *(_DWORD *)(a1 + 276) |= 1u;
        if ((unint64_t)v11 >= v10 || *v11 != 21) {
          continue;
        }
        goto LABEL_129;
      case 2u:
        int v8 = TagFallback & 7;
        if (v8 == 2)
        {
          uint64_t result = sub_100B67CF0(this, v194);
          if (!result) {
            return result;
          }
          goto LABEL_146;
        }
        if (v8 != 5)
        {
LABEL_67:
          if (v8 == 4) {
            return 1;
          }
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
          continue;
          }
        }
        while (1)
        {
          v204[0] = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v204) & 1) == 0) {
            return 0;
          }
          unsigned int v41 = v204[0];
          int v42 = *(_DWORD *)(a1 + 24);
          if (v42 == *(_DWORD *)(a1 + 28))
          {
            sub_100221DFC(v194, v42 + 1);
            int v42 = *(_DWORD *)(a1 + 24);
          }
          uint64_t v43 = *(void *)(a1 + 16);
          int v44 = v42 + 1;
          *(_DWORD *)(a1 + 24) = v42 + 1;
          *(_DWORD *)(v43 + 4 * v42) = v41;
          uint64_t v45 = *((void *)this + 1);
          int v46 = *((_DWORD *)this + 4) - v45;
          if (v46 >= 1)
          {
            signed int v47 = v46 / 5u;
            int v48 = v47 >= *(_DWORD *)(a1 + 28) - v44 ? *(_DWORD *)(a1 + 28) - v44 : v47;
            if (v48 >= 1)
            {
              int v49 = 0;
              while (*(unsigned char *)v45 == 21)
              {
                int v50 = *(_DWORD *)(v45 + 1);
                if (v44 >= *(_DWORD *)(a1 + 28))
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                  wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v204);
                  int v44 = *(_DWORD *)(a1 + 24);
                  uint64_t v43 = *(void *)(a1 + 16);
                }
                *(_DWORD *)(a1 + 24) = v44 + 1;
                *(_DWORD *)(v43 + 4 * v44) = v50;
                ++v49;
                v45 += 5;
                ++v44;
                if (v48 == v49)
                {
                  int v49 = v48;
                  break;
                }
              }
              if (v49) {
                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 5 * v49);
              }
            }
          }
LABEL_146:
          int v11 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v11 >= *((void *)this + 2)) {
            goto LABEL_2;
          }
          int v51 = *v11;
          if (v51 != 21) {
            break;
          }
LABEL_129:
          *((void *)this + 1) = v11 + 1;
        }
        if (v51 != 25) {
          continue;
        }
LABEL_149:
        *((void *)this + 1) = v11 + 1;
LABEL_150:
        *(void *)__int16 v204 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v204))
        {
          uint64_t v52 = *(void *)v204;
          int v53 = *(_DWORD *)(a1 + 40);
          if (v53 == *(_DWORD *)(a1 + 44))
          {
            sub_10026DE30(v198, v53 + 1);
            int v53 = *(_DWORD *)(a1 + 40);
          }
          uint64_t v54 = *(void *)(a1 + 32);
          int v55 = v53 + 1;
          *(_DWORD *)(a1 + 40) = v53 + 1;
          *(void *)(v54 + 8 * v53) = v52;
          uint64_t v56 = *((void *)this + 1);
          int v57 = *((_DWORD *)this + 4) - v56;
          if (v57 >= 1)
          {
            signed int v58 = v57 / 9u;
            int v59 = v58 >= *(_DWORD *)(a1 + 44) - v55 ? *(_DWORD *)(a1 + 44) - v55 : v58;
            if (v59 >= 1)
            {
              int v60 = 0;
              while (*(unsigned char *)v56 == 25)
              {
                uint64_t v61 = *(void *)(v56 + 1);
                if (v55 >= *(_DWORD *)(a1 + 44))
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                  wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v204);
                  int v55 = *(_DWORD *)(a1 + 40);
                  uint64_t v54 = *(void *)(a1 + 32);
                }
                *(_DWORD *)(a1 + 40) = v55 + 1;
                *(void *)(v54 + 8 * v55) = v61;
                ++v60;
                v56 += 9;
                ++v55;
                if (v59 == v60)
                {
                  int v60 = v59;
                  break;
                }
              }
              if (v60) {
                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 9 * v60);
              }
            }
          }
LABEL_166:
          int v11 = (unsigned char *)*((void *)this + 1);
          unint64_t v14 = *((void *)this + 2);
          if ((unint64_t)v11 >= v14) {
            continue;
          }
          int v62 = *v11;
          if (v62 == 25) {
            goto LABEL_149;
          }
          if (v62 == 32)
          {
            for (uint64_t i = v11 + 1; ; uint64_t i = (char *)(v26 + 1))
            {
              *((void *)this + 1) = i;
LABEL_171:
              v204[0] = 0;
              if ((unint64_t)i >= v14 || *i < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v204);
                if (!result) {
                  return result;
                }
                unsigned int v63 = v204[0];
              }
              else
              {
                unsigned int v63 = *i;
                *((void *)this + 1) = i + 1;
              }
              int v64 = *(_DWORD *)(a1 + 56);
              if (v64 == *(_DWORD *)(a1 + 60))
              {
                sub_100221DFC(v199, v64 + 1);
                int v64 = *(_DWORD *)(a1 + 56);
              }
              uint64_t v65 = *(void *)(a1 + 48);
              *(_DWORD *)(a1 + 56) = v64 + 1;
              *(_DWORD *)(v65 + 4 * v64) = v63;
              int v66 = *(_DWORD *)(a1 + 60) - *(_DWORD *)(a1 + 56);
              if (v66 >= 1)
              {
                int v67 = v66 + 1;
                do
                {
                  BOOL v68 = (unsigned char *)*((void *)this + 1);
                  unint64_t v69 = *((void *)this + 2);
                  if ((unint64_t)v68 >= v69 || *v68 != 32) {
                    break;
                  }
                  *((void *)this + 1) = v68 + 1;
                  v204[0] = 0;
                  if ((unint64_t)(v68 + 1) >= v69 || (char)v68[1] < 0)
                  {
                    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v204);
                    if (!result) {
                      return result;
                    }
                    unsigned int v70 = v204[0];
                  }
                  else
                  {
                    unsigned int v70 = v68[1];
                    *((void *)this + 1) = v68 + 2;
                  }
                  int v71 = *(_DWORD *)(a1 + 56);
                  if (v71 >= *(_DWORD *)(a1 + 60))
                  {
                    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v204);
                    int v71 = *(_DWORD *)(a1 + 56);
                  }
                  uint64_t v72 = *(void *)(a1 + 48);
                  *(_DWORD *)(a1 + 56) = v71 + 1;
                  *(_DWORD *)(v72 + 4 * v71) = v70;
                  --v67;
                }
                while (v67 > 1);
              }
LABEL_190:
              BOOL v26 = (unsigned __int8 *)*((void *)this + 1);
              unint64_t v14 = *((void *)this + 2);
              if ((unint64_t)v26 >= v14) {
                break;
              }
              int v73 = *v26;
              if (v73 == 41)
              {
                while (1)
                {
                  *((void *)this + 1) = v26 + 1;
LABEL_195:
                  *(void *)__int16 v204 = 0;
                  if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v204) & 1) == 0)return 0; {
                  uint64_t v74 = *(void *)v204;
                  }
                  int v75 = *(_DWORD *)(a1 + 72);
                  if (v75 == *(_DWORD *)(a1 + 76))
                  {
                    sub_10026DE30(v203, v75 + 1);
                    int v75 = *(_DWORD *)(a1 + 72);
                  }
                  uint64_t v76 = *(void *)(a1 + 64);
                  int v77 = v75 + 1;
                  *(_DWORD *)(a1 + 72) = v75 + 1;
                  *(void *)(v76 + 8 * v75) = v74;
                  uint64_t v78 = *((void *)this + 1);
                  int v79 = *((_DWORD *)this + 4) - v78;
                  if (v79 >= 1)
                  {
                    signed int v80 = v79 / 9u;
                    int v81 = v80 >= *(_DWORD *)(a1 + 76) - v77 ? *(_DWORD *)(a1 + 76) - v77 : v80;
                    if (v81 >= 1)
                    {
                      int v82 = 0;
                      while (*(unsigned char *)v78 == 41)
                      {
                        uint64_t v83 = *(void *)(v78 + 1);
                        if (v77 >= *(_DWORD *)(a1 + 76))
                        {
                          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                          wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v204);
                          int v77 = *(_DWORD *)(a1 + 72);
                          uint64_t v76 = *(void *)(a1 + 64);
                        }
                        *(_DWORD *)(a1 + 72) = v77 + 1;
                        *(void *)(v76 + 8 * v77) = v83;
                        ++v82;
                        v78 += 9;
                        ++v77;
                        if (v81 == v82)
                        {
                          int v82 = v81;
                          break;
                        }
                      }
                      if (v82) {
                        wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 9 * v82);
                      }
                    }
                  }
LABEL_95:
                  BOOL v26 = (unsigned __int8 *)*((void *)this + 1);
                  unint64_t v15 = *((void *)this + 2);
                  if ((unint64_t)v26 >= v15) {
                    goto LABEL_2;
                  }
                  int v27 = *v26;
                  if (v27 != 41)
                  {
                    if (v27 == 48)
                    {
                      int v16 = (char *)(v26 + 1);
                      *((void *)this + 1) = v26 + 1;
LABEL_99:
                      if ((unint64_t)v16 >= v15 || *v16 < 0)
                      {
                        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v195);
                        if (!result) {
                          return result;
                        }
                        int v28 = (unsigned char *)*((void *)this + 1);
                        unint64_t v15 = *((void *)this + 2);
                      }
                      else
                      {
                        *unsigned int v195 = *v16;
                        int v28 = v16 + 1;
                        *((void *)this + 1) = v28;
                      }
                      *(_DWORD *)(a1 + 276) |= 0x20u;
                      if ((unint64_t)v28 < v15 && *v28 == 61)
                      {
                        while (1)
                        {
                          *((void *)this + 1) = v28 + 1;
LABEL_212:
                          v204[0] = 0;
                          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v204) & 1) == 0)return 0; {
                          unsigned int v84 = v204[0];
                          }
                          int v85 = *(_DWORD *)(a1 + 96);
                          if (v85 == *(_DWORD *)(a1 + 100))
                          {
                            sub_100221DFC(v201, v85 + 1);
                            int v85 = *(_DWORD *)(a1 + 96);
                          }
                          uint64_t v86 = *(void *)(a1 + 88);
                          int v87 = v85 + 1;
                          *(_DWORD *)(a1 + 96) = v85 + 1;
                          *(_DWORD *)(v86 + 4 * v85) = v84;
                          uint64_t v88 = *((void *)this + 1);
                          int v89 = *((_DWORD *)this + 4) - v88;
                          if (v89 >= 1)
                          {
                            signed int v90 = v89 / 5u;
                            int v91 = v90 >= *(_DWORD *)(a1 + 100) - v87 ? *(_DWORD *)(a1 + 100) - v87 : v90;
                            if (v91 >= 1)
                            {
                              int v92 = 0;
                              while (*(unsigned char *)v88 == 61)
                              {
                                int v93 = *(_DWORD *)(v88 + 1);
                                if (v87 >= *(_DWORD *)(a1 + 100))
                                {
                                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                                  wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v204);
                                  int v87 = *(_DWORD *)(a1 + 96);
                                  uint64_t v86 = *(void *)(a1 + 88);
                                }
                                *(_DWORD *)(a1 + 96) = v87 + 1;
                                *(_DWORD *)(v86 + 4 * v87) = v93;
                                ++v92;
                                v88 += 5;
                                ++v87;
                                if (v91 == v92)
                                {
                                  int v92 = v91;
                                  break;
                                }
                              }
                              if (v92) {
                                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 5 * v92);
                              }
                            }
                          }
LABEL_228:
                          int v28 = (unsigned char *)*((void *)this + 1);
                          unint64_t v17 = *((void *)this + 2);
                          if ((unint64_t)v28 >= v17) {
                            break;
                          }
                          int v94 = *v28;
                          if (v94 != 61)
                          {
                            if (v94 == 64)
                            {
                              int v18 = v28 + 1;
                              *((void *)this + 1) = v18;
LABEL_232:
                              if ((unint64_t)v18 >= v17 || *v18 < 0)
                              {
                                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v193);
                                if (!result) {
                                  return result;
                                }
                                double v95 = (unsigned char *)*((void *)this + 1);
                                unint64_t v17 = *((void *)this + 2);
                              }
                              else
                              {
                                *int v193 = *v18;
                                double v95 = v18 + 1;
                                *((void *)this + 1) = v95;
                              }
                              int v19 = *(_DWORD *)(a1 + 276) | 0x80;
                              *(_DWORD *)(a1 + 276) = v19;
                              if ((unint64_t)v95 < v17 && *v95 == 74)
                              {
                                *((void *)this + 1) = v95 + 1;
LABEL_240:
                                *(_DWORD *)(a1 + 276) = v19 | 0x100;
                                if (*(_UNKNOWN **)(a1 + 112) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
                                  operator new();
                                }
                                uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
                                if (!result) {
                                  return result;
                                }
                                long long v96 = (unsigned char *)*((void *)this + 1);
                                unint64_t v20 = *((void *)this + 2);
                                if ((unint64_t)v96 < v20 && *v96 == 80)
                                {
                                  for (uint64_t j = v96 + 1; ; uint64_t j = (char *)(v107 + 1))
                                  {
                                    *((void *)this + 1) = j;
LABEL_247:
                                    v204[0] = 0;
                                    if ((unint64_t)j >= v20 || *j < 0)
                                    {
                                      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v204);
                                      if (!result) {
                                        return result;
                                      }
                                      unsigned int v97 = v204[0];
                                    }
                                    else
                                    {
                                      unsigned int v97 = *j;
                                      *((void *)this + 1) = j + 1;
                                    }
                                    int v98 = *(_DWORD *)(a1 + 128);
                                    if (v98 == *(_DWORD *)(a1 + 132))
                                    {
                                      sub_100221DFC(v197, v98 + 1);
                                      int v98 = *(_DWORD *)(a1 + 128);
                                    }
                                    uint64_t v99 = *(void *)(a1 + 120);
                                    *(_DWORD *)(a1 + 128) = v98 + 1;
                                    *(_DWORD *)(v99 + 4 * v98) = v97;
                                    int v100 = *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 128);
                                    if (v100 >= 1)
                                    {
                                      int v101 = v100 + 1;
                                      do
                                      {
                                        uint64_t v102 = (unsigned char *)*((void *)this + 1);
                                        unint64_t v103 = *((void *)this + 2);
                                        if ((unint64_t)v102 >= v103 || *v102 != 80) {
                                          break;
                                        }
                                        *((void *)this + 1) = v102 + 1;
                                        v204[0] = 0;
                                        if ((unint64_t)(v102 + 1) >= v103 || (char)v102[1] < 0)
                                        {
                                          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v204);
                                          if (!result) {
                                            return result;
                                          }
                                          unsigned int v104 = v204[0];
                                        }
                                        else
                                        {
                                          unsigned int v104 = v102[1];
                                          *((void *)this + 1) = v102 + 2;
                                        }
                                        int v105 = *(_DWORD *)(a1 + 128);
                                        if (v105 >= *(_DWORD *)(a1 + 132))
                                        {
                                          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                                          wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                                          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                                          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v204);
                                          int v105 = *(_DWORD *)(a1 + 128);
                                        }
                                        uint64_t v106 = *(void *)(a1 + 120);
                                        *(_DWORD *)(a1 + 128) = v105 + 1;
                                        *(_DWORD *)(v106 + 4 * v105) = v104;
                                        --v101;
                                      }
                                      while (v101 > 1);
                                    }
LABEL_266:
                                    float v107 = (unsigned __int8 *)*((void *)this + 1);
                                    unint64_t v20 = *((void *)this + 2);
                                    if ((unint64_t)v107 >= v20) {
                                      break;
                                    }
                                    int v108 = *v107;
                                    if (v108 == 93)
                                    {
                                      while (1)
                                      {
                                        *((void *)this + 1) = v107 + 1;
LABEL_271:
                                        v204[0] = 0;
                                        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v204) & 1) == 0)return 0; {
                                        unsigned int v109 = v204[0];
                                        }
                                        int v110 = *(_DWORD *)(a1 + 144);
                                        if (v110 == *(_DWORD *)(a1 + 148))
                                        {
                                          sub_100221DFC(v202, v110 + 1);
                                          int v110 = *(_DWORD *)(a1 + 144);
                                        }
                                        uint64_t v111 = *(void *)(a1 + 136);
                                        int v112 = v110 + 1;
                                        *(_DWORD *)(a1 + 144) = v110 + 1;
                                        *(_DWORD *)(v111 + 4 * v110) = v109;
                                        uint64_t v113 = *((void *)this + 1);
                                        int v114 = *((_DWORD *)this + 4) - v113;
                                        if (v114 >= 1)
                                        {
                                          signed int v115 = v114 / 5u;
                                          int v116 = v115 >= *(_DWORD *)(a1 + 148) - v112
                                               ? *(_DWORD *)(a1 + 148) - v112
                                               : v115;
                                          if (v116 >= 1)
                                          {
                                            int v117 = 0;
                                            while (*(unsigned char *)v113 == 93)
                                            {
                                              int v118 = *(_DWORD *)(v113 + 1);
                                              if (v112 >= *(_DWORD *)(a1 + 148))
                                              {
                                                wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                                                wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                                                wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                                                wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v204);
                                                int v112 = *(_DWORD *)(a1 + 144);
                                                uint64_t v111 = *(void *)(a1 + 136);
                                              }
                                              *(_DWORD *)(a1 + 144) = v112 + 1;
                                              *(_DWORD *)(v111 + 4 * v112) = v118;
                                              ++v117;
                                              v113 += 5;
                                              ++v112;
                                              if (v116 == v117)
                                              {
                                                int v117 = v116;
                                                break;
                                              }
                                            }
                                            if (v117) {
                                              wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 5 * v117);
                                            }
                                          }
                                        }
LABEL_287:
                                        float v107 = (unsigned __int8 *)*((void *)this + 1);
                                        unint64_t v23 = *((void *)this + 2);
                                        if ((unint64_t)v107 >= v23) {
                                          goto LABEL_2;
                                        }
                                        int v119 = *v107;
                                        if (v119 != 93)
                                        {
                                          if (v119 == 96)
                                          {
                                            for (unint64_t k = (char *)(v107 + 1); ; unint64_t k = (char *)(v130 + 1))
                                            {
                                              *((void *)this + 1) = k;
LABEL_292:
                                              v204[0] = 0;
                                              if ((unint64_t)k >= v23 || *k < 0)
                                              {
                                                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v204);
                                                if (!result) {
                                                  return result;
                                                }
                                                unsigned int v120 = v204[0];
                                              }
                                              else
                                              {
                                                unsigned int v120 = *k;
                                                *((void *)this + 1) = k + 1;
                                              }
                                              int v121 = *(_DWORD *)(a1 + 160);
                                              if (v121 == *(_DWORD *)(a1 + 164))
                                              {
                                                sub_100221DFC(v200, v121 + 1);
                                                int v121 = *(_DWORD *)(a1 + 160);
                                              }
                                              uint64_t v122 = *(void *)(a1 + 152);
                                              *(_DWORD *)(a1 + 160) = v121 + 1;
                                              *(_DWORD *)(v122 + 4 * v121) = v120;
                                              int v123 = *(_DWORD *)(a1 + 164) - *(_DWORD *)(a1 + 160);
                                              if (v123 >= 1)
                                              {
                                                int v124 = v123 + 1;
                                                do
                                                {
                                                  BOOL v125 = (unsigned char *)*((void *)this + 1);
                                                  unint64_t v126 = *((void *)this + 2);
                                                  if ((unint64_t)v125 >= v126 || *v125 != 96) {
                                                    break;
                                                  }
                                                  *((void *)this + 1) = v125 + 1;
                                                  v204[0] = 0;
                                                  if ((unint64_t)(v125 + 1) >= v126 || (char)v125[1] < 0)
                                                  {
                                                    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v204);
                                                    if (!result) {
                                                      return result;
                                                    }
                                                    unsigned int v127 = v204[0];
                                                  }
                                                  else
                                                  {
                                                    unsigned int v127 = v125[1];
                                                    *((void *)this + 1) = v125 + 2;
                                                  }
                                                  int v128 = *(_DWORD *)(a1 + 160);
                                                  if (v128 >= *(_DWORD *)(a1 + 164))
                                                  {
                                                    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                                                    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                                                    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                                                    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v204);
                                                    int v128 = *(_DWORD *)(a1 + 160);
                                                  }
                                                  uint64_t v129 = *(void *)(a1 + 152);
                                                  *(_DWORD *)(a1 + 160) = v128 + 1;
                                                  *(_DWORD *)(v129 + 4 * v128) = v127;
                                                  --v124;
                                                }
                                                while (v124 > 1);
                                              }
LABEL_311:
                                              __int16 v130 = (unsigned __int8 *)*((void *)this + 1);
                                              unint64_t v23 = *((void *)this + 2);
                                              if ((unint64_t)v130 >= v23) {
                                                break;
                                              }
                                              int v131 = *v130;
                                              if (v131 == 104)
                                              {
                                                uint64_t v24 = v130 + 1;
                                                *((void *)this + 1) = v24;
LABEL_316:
                                                if ((unint64_t)v24 >= v23 || (char)*v24 < 0)
                                                {
                                                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v192);
                                                  if (!result) {
                                                    return result;
                                                  }
                                                  unsigned int v39 = (unsigned __int8 *)*((void *)this + 1);
                                                  unint64_t v23 = *((void *)this + 2);
                                                }
                                                else
                                                {
                                                  *__int16 v192 = *v24;
                                                  unsigned int v39 = v24 + 1;
                                                  *((void *)this + 1) = v39;
                                                }
                                                *(_DWORD *)(a1 + 276) |= 0x1000u;
                                                if ((unint64_t)v39 < v23)
                                                {
                                                  int v40 = *v39;
                                                  while (v40 == 112)
                                                  {
                                                    int v25 = (char *)(v39 + 1);
                                                    *((void *)this + 1) = v25;
LABEL_107:
                                                    v204[0] = 0;
                                                    if ((unint64_t)v25 >= v23 || *v25 < 0)
                                                    {
                                                      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v204);
                                                      if (!result) {
                                                        return result;
                                                      }
                                                      unsigned int v29 = v204[0];
                                                    }
                                                    else
                                                    {
                                                      unsigned int v29 = *v25;
                                                      *((void *)this + 1) = v25 + 1;
                                                    }
                                                    int v30 = *(_DWORD *)(a1 + 184);
                                                    if (v30 == *(_DWORD *)(a1 + 188))
                                                    {
                                                      sub_100221DFC(v196, v30 + 1);
                                                      int v30 = *(_DWORD *)(a1 + 184);
                                                    }
                                                    uint64_t v31 = *(void *)(a1 + 176);
                                                    *(_DWORD *)(a1 + 184) = v30 + 1;
                                                    *(_DWORD *)(v31 + 4 * v30) = v29;
                                                    int v32 = *(_DWORD *)(a1 + 188) - *(_DWORD *)(a1 + 184);
                                                    if (v32 >= 1)
                                                    {
                                                      int v33 = v32 + 1;
                                                      do
                                                      {
                                                        unsigned int v34 = (unsigned char *)*((void *)this + 1);
                                                        unint64_t v35 = *((void *)this + 2);
                                                        if ((unint64_t)v34 >= v35 || *v34 != 112) {
                                                          break;
                                                        }
                                                        *((void *)this + 1) = v34 + 1;
                                                        v204[0] = 0;
                                                        if ((unint64_t)(v34 + 1) >= v35 || (char)v34[1] < 0)
                                                        {
                                                          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v204);
                                                          if (!result) {
                                                            return result;
                                                          }
                                                          unsigned int v36 = v204[0];
                                                        }
                                                        else
                                                        {
                                                          unsigned int v36 = v34[1];
                                                          *((void *)this + 1) = v34 + 2;
                                                        }
                                                        int v37 = *(_DWORD *)(a1 + 184);
                                                        if (v37 >= *(_DWORD *)(a1 + 188))
                                                        {
                                                          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                                                          wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                                                          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                                                          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v204);
                                                          int v37 = *(_DWORD *)(a1 + 184);
                                                        }
                                                        uint64_t v38 = *(void *)(a1 + 176);
                                                        *(_DWORD *)(a1 + 184) = v37 + 1;
                                                        *(_DWORD *)(v38 + 4 * v37) = v36;
                                                        --v33;
                                                      }
                                                      while (v33 > 1);
                                                    }
LABEL_126:
                                                    unsigned int v39 = (unsigned __int8 *)*((void *)this + 1);
                                                    unint64_t v23 = *((void *)this + 2);
                                                    if ((unint64_t)v39 >= v23) {
                                                      break;
                                                    }
                                                    int v40 = *v39;
                                                    if (v40 == 125)
                                                    {
                                                      do
                                                      {
                                                        *((void *)this + 1) = v39 + 1;
LABEL_326:
                                                        v204[0] = 0;
                                                        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v204) & 1) == 0)return 0; {
                                                        unsigned int v132 = v204[0];
                                                        }
                                                        int v133 = *(_DWORD *)(a1 + 200);
                                                        if (v133 == *(_DWORD *)(a1 + 204))
                                                        {
                                                          sub_100221DFC(v5, v133 + 1);
                                                          int v133 = *(_DWORD *)(a1 + 200);
                                                        }
                                                        uint64_t v134 = *(void *)(a1 + 192);
                                                        int v135 = v133 + 1;
                                                        *(_DWORD *)(a1 + 200) = v133 + 1;
                                                        *(_DWORD *)(v134 + 4 * v133) = v132;
                                                        uint64_t v136 = *((void *)this + 1);
                                                        int v137 = *((_DWORD *)this + 4) - v136;
                                                        if (v137 >= 1)
                                                        {
                                                          signed int v138 = v137 / 5u;
                                                          int v139 = v138 >= *(_DWORD *)(a1 + 204) - v135
                                                               ? *(_DWORD *)(a1 + 204) - v135
                                                               : v138;
                                                          if (v139 >= 1)
                                                          {
                                                            int v140 = 0;
                                                            while (*(unsigned char *)v136 == 125)
                                                            {
                                                              int v141 = *(_DWORD *)(v136 + 1);
                                                              if (v135 >= *(_DWORD *)(a1 + 204))
                                                              {
                                                                wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                                                                wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                                                                wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                                                                wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v204);
                                                                int v135 = *(_DWORD *)(a1 + 200);
                                                                uint64_t v134 = *(void *)(a1 + 192);
                                                              }
                                                              *(_DWORD *)(a1 + 200) = v135 + 1;
                                                              *(_DWORD *)(v134 + 4 * v135) = v141;
                                                              ++v140;
                                                              v136 += 5;
                                                              ++v135;
                                                              if (v139 == v140)
                                                              {
                                                                int v140 = v139;
                                                                break;
                                                              }
                                                            }
                                                            if (v140) {
                                                              wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 5 * v140);
                                                            }
                                                          }
                                                        }
LABEL_342:
                                                        unsigned int v39 = (unsigned __int8 *)*((void *)this + 1);
                                                        unint64_t v142 = *((void *)this + 2);
                                                      }
                                                      while ((unint64_t)v39 < v142 && *v39 == 125);
                                                      if ((int)v142 - (int)v39 >= 2 && *v39 == 133 && v39[1] == 1)
                                                      {
                                                        while (1)
                                                        {
                                                          *((void *)this + 1) = v39 + 2;
LABEL_348:
                                                          if (wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)0x85, TagFallback) != 2)
                                                          {
                                                            wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                                                            wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                                                            wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                                                            wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v204);
                                                          }
                                                          v204[0] = 0;
                                                          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v204) & 1) == 0)return 0; {
                                                          unsigned int v143 = v204[0];
                                                          }
                                                          int v144 = *(_DWORD *)(a1 + 216);
                                                          if (v144 == *(_DWORD *)(a1 + 220))
                                                          {
                                                            sub_100221DFC(v190, v144 + 1);
                                                            int v144 = *(_DWORD *)(a1 + 216);
                                                          }
                                                          uint64_t v145 = *(void *)(a1 + 208);
                                                          int v146 = v144 + 1;
                                                          *(_DWORD *)(a1 + 216) = v144 + 1;
                                                          *(_DWORD *)(v145 + 4 * v144) = v143;
                                                          int v147 = (unsigned __int8 *)*((void *)this + 1);
                                                          int v148 = *((_DWORD *)this + 4) - v147;
                                                          if (v148 >= 1)
                                                          {
                                                            signed int v149 = v148 / 6u;
                                                            int v150 = v149 >= *(_DWORD *)(a1 + 220) - v146
                                                                 ? *(_DWORD *)(a1 + 220) - v146
                                                                 : v149;
                                                            if (v150 >= 1)
                                                            {
                                                              int v151 = 0;
                                                              while (*v147 == 133 && v147[1] == 1)
                                                              {
                                                                int v152 = *(_DWORD *)(v147 + 2);
                                                                if (v146 >= *(_DWORD *)(a1 + 220))
                                                                {
                                                                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                                                                  wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                                                                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                                                                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v204);
                                                                  int v146 = *(_DWORD *)(a1 + 216);
                                                                  uint64_t v145 = *(void *)(a1 + 208);
                                                                }
                                                                *(_DWORD *)(a1 + 216) = v146 + 1;
                                                                *(_DWORD *)(v145 + 4 * v146) = v152;
                                                                ++v151;
                                                                v147 += 6;
                                                                ++v146;
                                                                if (v150 == v151)
                                                                {
                                                                  int v151 = v150;
                                                                  break;
                                                                }
                                                              }
                                                              if (v151) {
                                                                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 6 * v151);
                                                              }
                                                            }
                                                          }
LABEL_367:
                                                          unsigned int v39 = (unsigned __int8 *)*((void *)this + 1);
                                                          if (*((_DWORD *)this + 4) - (int)v39 <= 1) {
                                                            break;
                                                          }
                                                          int v153 = *v39;
                                                          if (v153 == 141)
                                                          {
                                                            if (v39[1] == 1)
                                                            {
                                                              while (1)
                                                              {
                                                                *((void *)this + 1) = v39 + 2;
LABEL_374:
                                                                if (wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)0x8D, TagFallback) != 2)
                                                                {
                                                                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                                                                  wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                                                                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                                                                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v204);
                                                                }
                                                                v204[0] = 0;
                                                                if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v204) & 1) == 0)return 0; {
                                                                unsigned int v154 = v204[0];
                                                                }
                                                                int v155 = *(_DWORD *)(a1 + 232);
                                                                if (v155 == *(_DWORD *)(a1 + 236))
                                                                {
                                                                  sub_100221DFC(v189, v155 + 1);
                                                                  int v155 = *(_DWORD *)(a1 + 232);
                                                                }
                                                                uint64_t v156 = *(void *)(a1 + 224);
                                                                int v157 = v155 + 1;
                                                                *(_DWORD *)(a1 + 232) = v155 + 1;
                                                                *(_DWORD *)(v156 + 4 * v155) = v154;
                                                                __int16 v158 = (unsigned __int8 *)*((void *)this + 1);
                                                                int v159 = *((_DWORD *)this + 4) - v158;
                                                                if (v159 >= 1)
                                                                {
                                                                  signed int v160 = v159 / 6u;
                                                                  int v161 = v160 >= *(_DWORD *)(a1 + 236) - v157
                                                                       ? *(_DWORD *)(a1 + 236) - v157
                                                                       : v160;
                                                                  if (v161 >= 1)
                                                                  {
                                                                    int v162 = 0;
                                                                    while (*v158 == 141 && v158[1] == 1)
                                                                    {
                                                                      int v163 = *(_DWORD *)(v158 + 2);
                                                                      if (v157 >= *(_DWORD *)(a1 + 236))
                                                                      {
                                                                        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                                                                        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                                                                        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                                                                        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v204);
                                                                        int v157 = *(_DWORD *)(a1 + 232);
                                                                        uint64_t v156 = *(void *)(a1 + 224);
                                                                      }
                                                                      *(_DWORD *)(a1 + 232) = v157 + 1;
                                                                      *(_DWORD *)(v156 + 4 * v157) = v163;
                                                                      ++v162;
                                                                      v158 += 6;
                                                                      ++v157;
                                                                      if (v161 == v162)
                                                                      {
                                                                        int v162 = v161;
                                                                        break;
                                                                      }
                                                                    }
                                                                    if (v162) {
                                                                      wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 6 * v162);
                                                                    }
                                                                  }
                                                                }
LABEL_393:
                                                                unsigned int v39 = (unsigned __int8 *)*((void *)this + 1);
                                                                if (*((_DWORD *)this + 4) - (int)v39 <= 1) {
                                                                  break;
                                                                }
                                                                int v164 = *v39;
                                                                if (v164 == 145)
                                                                {
                                                                  if (v39[1] == 1)
                                                                  {
                                                                    while (1)
                                                                    {
                                                                      *((void *)this + 1) = v39 + 2;
LABEL_400:
                                                                      if (wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)0x91, TagFallback) != 2)
                                                                      {
                                                                        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                                                                        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                                                                        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                                                                        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v204);
                                                                      }
                                                                      *(void *)__int16 v204 = 0;
                                                                      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v204) & 1) == 0)return 0; {
                                                                      uint64_t v165 = *(void *)v204;
                                                                      }
                                                                      int v166 = *(_DWORD *)(a1 + 248);
                                                                      if (v166 == *(_DWORD *)(a1 + 252))
                                                                      {
                                                                        sub_10026DE30(v188, v166 + 1);
                                                                        int v166 = *(_DWORD *)(a1 + 248);
                                                                      }
                                                                      uint64_t v167 = *(void *)(a1 + 240);
                                                                      int v168 = v166 + 1;
                                                                      *(_DWORD *)(a1 + 248) = v166 + 1;
                                                                      *(void *)(v167 + 8 * v166) = v165;
                                                                      double v169 = (unsigned __int8 *)*((void *)this + 1);
                                                                      int v170 = *((_DWORD *)this + 4) - v169;
                                                                      if (v170 >= 1)
                                                                      {
                                                                        signed int v171 = v170 / 0xAu;
                                                                        int v172 = v171 >= *(_DWORD *)(a1 + 252) - v168
                                                                             ? *(_DWORD *)(a1 + 252) - v168
                                                                             : v171;
                                                                        if (v172 >= 1)
                                                                        {
                                                                          int v173 = 0;
                                                                          while (*v169 == 145 && v169[1] == 1)
                                                                          {
                                                                            uint64_t v174 = *(void *)(v169 + 2);
                                                                            if (v168 >= *(_DWORD *)(a1 + 252))
                                                                            {
                                                                              wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                                                                              wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                                                                              wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                                                                              wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v204);
                                                                              int v168 = *(_DWORD *)(a1 + 248);
                                                                              uint64_t v167 = *(void *)(a1 + 240);
                                                                            }
                                                                            *(_DWORD *)(a1 + 248) = v168 + 1;
                                                                            *(void *)(v167 + 8 * v168) = v174;
                                                                            ++v173;
                                                                            v169 += 10;
                                                                            ++v168;
                                                                            if (v172 == v173)
                                                                            {
                                                                              int v173 = v172;
                                                                              break;
                                                                            }
                                                                          }
                                                                          if (v173) {
                                                                            wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 10 * v173);
                                                                          }
                                                                        }
                                                                      }
LABEL_419:
                                                                      unsigned int v39 = (unsigned __int8 *)*((void *)this + 1);
                                                                      if (*((_DWORD *)this + 4) - (int)v39 <= 1) {
                                                                        goto LABEL_2;
                                                                      }
                                                                      int v175 = *v39;
                                                                      if (v175 == 153) {
                                                                        break;
                                                                      }
                                                                      if (v175 != 145 || v39[1] != 1) {
                                                                        goto LABEL_2;
                                                                      }
                                                                    }
                                                                    if (v39[1] == 1)
                                                                    {
                                                                      do
                                                                      {
                                                                        *((void *)this + 1) = v39 + 2;
LABEL_426:
                                                                        if (wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)0x99, TagFallback) != 2)
                                                                        {
                                                                          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                                                                          wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                                                                          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                                                                          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v204);
                                                                        }
                                                                        *(void *)__int16 v204 = 0;
                                                                        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v204) & 1) == 0)return 0; {
                                                                        uint64_t v176 = *(void *)v204;
                                                                        }
                                                                        int v177 = *(_DWORD *)(a1 + 264);
                                                                        if (v177 == *(_DWORD *)(a1 + 268))
                                                                        {
                                                                          sub_10026DE30(v191, v177 + 1);
                                                                          int v177 = *(_DWORD *)(a1 + 264);
                                                                        }
                                                                        uint64_t v178 = *(void *)(a1 + 256);
                                                                        int v179 = v177 + 1;
                                                                        *(_DWORD *)(a1 + 264) = v177 + 1;
                                                                        *(void *)(v178 + 8 * v177) = v176;
                                                                        __int16 v180 = (unsigned __int8 *)*((void *)this + 1);
                                                                        int v181 = *((_DWORD *)this + 4) - v180;
                                                                        if (v181 >= 1)
                                                                        {
                                                                          signed int v182 = v181 / 0xAu;
                                                                          int v183 = v182 >= *(_DWORD *)(a1 + 268) - v179
                                                                               ? *(_DWORD *)(a1 + 268) - v179
                                                                               : v182;
                                                                          if (v183 >= 1)
                                                                          {
                                                                            int v184 = 0;
                                                                            while (*v180 == 153 && v180[1] == 1)
                                                                            {
                                                                              uint64_t v185 = *(void *)(v180 + 2);
                                                                              if (v179 >= *(_DWORD *)(a1 + 268))
                                                                              {
                                                                                wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                                                                                wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                                                                                wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                                                                                wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v204);
                                                                                int v179 = *(_DWORD *)(a1 + 264);
                                                                                uint64_t v178 = *(void *)(a1 + 256);
                                                                              }
                                                                              *(_DWORD *)(a1 + 264) = v179 + 1;
                                                                              *(void *)(v178 + 8 * v179) = v185;
                                                                              ++v184;
                                                                              v180 += 10;
                                                                              ++v179;
                                                                              if (v183 == v184)
                                                                              {
                                                                                int v184 = v183;
                                                                                break;
                                                                              }
                                                                            }
                                                                            if (v184) {
                                                                              wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 10 * v184);
                                                                            }
                                                                          }
                                                                        }
LABEL_445:
                                                                        unsigned int v39 = (unsigned __int8 *)*((void *)this + 1);
                                                                        __int16 v186 = (unsigned __int8 *)*((void *)this + 2);
                                                                      }
                                                                      while ((int)v186 - (int)v39 > 1
                                                                           && *v39 == 153
                                                                           && v39[1] == 1);
                                                                      if (v39 == v186
                                                                        && (*((_DWORD *)this + 11)
                                                                         || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                                                                      {
                                                                        *((_DWORD *)this + 8) = 0;
                                                                        uint64_t result = 1;
                                                                        *((unsigned char *)this + 36) = 1;
                                                                        return result;
                                                                      }
                                                                    }
                                                                  }
                                                                  goto LABEL_2;
                                                                }
                                                                if (v164 != 141 || v39[1] != 1) {
                                                                  goto LABEL_2;
                                                                }
                                                              }
                                                            }
                                                            goto LABEL_2;
                                                          }
                                                          if (v153 != 133 || v39[1] != 1) {
                                                            goto LABEL_2;
                                                          }
                                                        }
                                                      }
                                                      goto LABEL_2;
                                                    }
                                                  }
                                                }
                                                goto LABEL_2;
                                              }
                                              if (v131 != 96) {
                                                goto LABEL_2;
                                              }
                                            }
                                          }
                                          goto LABEL_2;
                                        }
                                      }
                                    }
                                    if (v108 != 80) {
                                      goto LABEL_2;
                                    }
                                  }
                                }
                              }
                            }
                            goto LABEL_2;
                          }
                        }
                      }
                    }
                    goto LABEL_2;
                  }
                }
              }
              if (v73 != 32) {
                goto LABEL_2;
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        int v8 = TagFallback & 7;
        if (v8 == 1) {
          goto LABEL_150;
        }
        if (v8 != 2) {
          goto LABEL_67;
        }
        uint64_t result = sub_100249F20(this, v198);
        if (!result) {
          return result;
        }
        goto LABEL_166;
      case 4u:
        int v8 = TagFallback & 7;
        if (v8 == 2)
        {
          uint64_t result = sub_100B73850(this, v199);
          if (!result) {
            return result;
          }
          goto LABEL_190;
        }
        if ((TagFallback & 7) != 0) {
          goto LABEL_67;
        }
        uint64_t i = (char *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
        goto LABEL_171;
      case 5u:
        int v8 = TagFallback & 7;
        if (v8 == 1) {
          goto LABEL_195;
        }
        if (v8 != 2) {
          goto LABEL_67;
        }
        uint64_t result = sub_100249F20(this, v203);
        if (!result) {
          return result;
        }
        goto LABEL_95;
      case 6u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_67;
        }
        int v16 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_99;
      case 7u:
        int v8 = TagFallback & 7;
        if (v8 == 2)
        {
          uint64_t result = sub_100B67CF0(this, v201);
          if (!result) {
            return result;
          }
          goto LABEL_228;
        }
        if (v8 == 5) {
          goto LABEL_212;
        }
        goto LABEL_67;
      case 8u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_67;
        }
        int v18 = (char *)*((void *)this + 1);
        unint64_t v17 = *((void *)this + 2);
        goto LABEL_232;
      case 9u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_67;
        }
        int v19 = *(_DWORD *)(a1 + 276);
        goto LABEL_240;
      case 0xAu:
        int v8 = TagFallback & 7;
        if (v8 == 2)
        {
          uint64_t result = sub_100B73850(this, v197);
          if (!result) {
            return result;
          }
          goto LABEL_266;
        }
        if ((TagFallback & 7) != 0) {
          goto LABEL_67;
        }
        uint64_t j = (char *)*((void *)this + 1);
        unint64_t v20 = *((void *)this + 2);
        goto LABEL_247;
      case 0xBu:
        int v8 = TagFallback & 7;
        if (v8 == 2)
        {
          uint64_t result = sub_100B67CF0(this, v202);
          if (!result) {
            return result;
          }
          goto LABEL_287;
        }
        if (v8 == 5) {
          goto LABEL_271;
        }
        goto LABEL_67;
      case 0xCu:
        int v8 = TagFallback & 7;
        if (v8 == 2)
        {
          uint64_t result = sub_100B73850(this, v200);
          if (!result) {
            return result;
          }
          goto LABEL_311;
        }
        if ((TagFallback & 7) != 0) {
          goto LABEL_67;
        }
        unint64_t k = (char *)*((void *)this + 1);
        unint64_t v23 = *((void *)this + 2);
        goto LABEL_292;
      case 0xDu:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_67;
        }
        uint64_t v24 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v23 = *((void *)this + 2);
        goto LABEL_316;
      case 0xEu:
        int v8 = TagFallback & 7;
        if (v8 == 2)
        {
          uint64_t result = sub_100B73850(this, v196);
          if (!result) {
            return result;
          }
          goto LABEL_126;
        }
        if ((TagFallback & 7) != 0) {
          goto LABEL_67;
        }
        int v25 = (char *)*((void *)this + 1);
        unint64_t v23 = *((void *)this + 2);
        goto LABEL_107;
      case 0xFu:
        int v8 = TagFallback & 7;
        if (v8 == 2)
        {
          uint64_t result = sub_100B67CF0(this, v5);
          if (!result) {
            return result;
          }
          goto LABEL_342;
        }
        if (v8 == 5) {
          goto LABEL_326;
        }
        goto LABEL_67;
      case 0x10u:
        int v8 = TagFallback & 7;
        if (v8 == 2)
        {
          uint64_t result = sub_100B67CF0(this, v190);
          if (!result) {
            return result;
          }
          goto LABEL_367;
        }
        if (v8 == 5) {
          goto LABEL_348;
        }
        goto LABEL_67;
      case 0x11u:
        int v8 = TagFallback & 7;
        if (v8 == 2)
        {
          uint64_t result = sub_100B67CF0(this, v189);
          if (!result) {
            return result;
          }
          goto LABEL_393;
        }
        if (v8 == 5) {
          goto LABEL_374;
        }
        goto LABEL_67;
      case 0x12u:
        int v8 = TagFallback & 7;
        if (v8 == 1) {
          goto LABEL_400;
        }
        if (v8 != 2) {
          goto LABEL_67;
        }
        uint64_t result = sub_100249F20(this, v188);
        if (!result) {
          return result;
        }
        goto LABEL_419;
      case 0x13u:
        int v8 = TagFallback & 7;
        if (v8 == 1) {
          goto LABEL_426;
        }
        if (v8 != 2) {
          goto LABEL_67;
        }
        uint64_t result = sub_100249F20(this, v191);
        if (!result) {
          return result;
        }
        goto LABEL_445;
      default:
        int v8 = TagFallback & 7;
        goto LABEL_67;
    }
  }
}

void sub_100B73764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

uint64_t sub_100B73850(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a2)
{
  unsigned int v12 = 0;
  int v4 = (char *)*((void *)this + 1);
  if ((unint64_t)v4 >= *((void *)this + 2) || *v4 < 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
    if (!result) {
      return result;
    }
    unsigned int v5 = v12;
  }
  else
  {
    unsigned int v5 = *v4;
    unsigned int v12 = v5;
    *((void *)this + 1) = v4 + 1;
  }
  int v7 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v5);
  if ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
  {
    do
    {
      unsigned int v13 = 0;
      int v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v13);
        if (!result) {
          return result;
        }
        unsigned int v9 = v13;
      }
      else
      {
        unsigned int v9 = *v8;
        *((void *)this + 1) = v8 + 1;
      }
      int v10 = *(_DWORD *)(a2 + 8);
      if (v10 == *(_DWORD *)(a2 + 12))
      {
        sub_100221DFC(a2, v10 + 1);
        int v10 = *(_DWORD *)(a2 + 8);
      }
      uint64_t v11 = *(void *)a2;
      *(_DWORD *)(a2 + 8) = v10 + 1;
      *(_DWORD *)(v11 + 4 * v10) = v9;
    }
    while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) > 0);
  }
  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v7);
  return 1;
}

uint64_t sub_100B73968(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  if (*(unsigned char *)(result + 276)) {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(result + 8), a2, a4);
  }
  if (*(int *)(v5 + 24) >= 1)
  {
    uint64_t v6 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(float *)(*(void *)(v5 + 16) + 4 * v6++), a3);
    while (v6 < *(int *)(v5 + 24));
  }
  if (*(int *)(v5 + 40) >= 1)
  {
    uint64_t v7 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(*(void *)(v5 + 32) + 8 * v7++), a3);
    while (v7 < *(int *)(v5 + 40));
  }
  if (*(int *)(v5 + 56) >= 1)
  {
    uint64_t v8 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(*(void *)(v5 + 48) + 4 * v8++), a2, a4);
    while (v8 < *(int *)(v5 + 56));
  }
  if (*(int *)(v5 + 72) >= 1)
  {
    uint64_t v9 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, a2, *(double *)(*(void *)(v5 + 64) + 8 * v9++), a3);
    while (v9 < *(int *)(v5 + 72));
  }
  if ((*(unsigned char *)(v5 + 276) & 0x20) != 0) {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(void *)(v5 + 80), a2, a4);
  }
  if (*(int *)(v5 + 96) >= 1)
  {
    uint64_t v10 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, a2, *(float *)(*(void *)(v5 + 88) + 4 * v10++), a3);
    while (v10 < *(int *)(v5 + 96));
  }
  int v11 = *(_DWORD *)(v5 + 276);
  if ((v11 & 0x80) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(void *)(v5 + 104), a2, a4);
    int v11 = *(_DWORD *)(v5 + 276);
  }
  if ((v11 & 0x100) != 0) {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  }
  if (*(int *)(v5 + 128) >= 1)
  {
    uint64_t v12 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(_DWORD *)(*(void *)(v5 + 120) + 4 * v12++), a2, a4);
    while (v12 < *(int *)(v5 + 128));
  }
  if (*(int *)(v5 + 144) >= 1)
  {
    uint64_t v13 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, a2, *(float *)(*(void *)(v5 + 136) + 4 * v13++), a3);
    while (v13 < *(int *)(v5 + 144));
  }
  if (*(int *)(v5 + 160) >= 1)
  {
    uint64_t v14 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(_DWORD *)(*(void *)(v5 + 152) + 4 * v14++), a2, a4);
    while (v14 < *(int *)(v5 + 160));
  }
  if ((*(unsigned char *)(v5 + 277) & 0x10) != 0) {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(void *)(v5 + 168), a2, a4);
  }
  if (*(int *)(v5 + 184) >= 1)
  {
    uint64_t v15 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(_DWORD *)(*(void *)(v5 + 176) + 4 * v15++), a2, a4);
    while (v15 < *(int *)(v5 + 184));
  }
  if (*(int *)(v5 + 200) >= 1)
  {
    uint64_t v16 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, a2, *(float *)(*(void *)(v5 + 192) + 4 * v16++), a3);
    while (v16 < *(int *)(v5 + 200));
  }
  if (*(int *)(v5 + 216) >= 1)
  {
    uint64_t v17 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, a2, *(float *)(*(void *)(v5 + 208) + 4 * v17++), a3);
    while (v17 < *(int *)(v5 + 216));
  }
  if (*(int *)(v5 + 232) >= 1)
  {
    uint64_t v18 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, a2, *(float *)(*(void *)(v5 + 224) + 4 * v18++), a3);
    while (v18 < *(int *)(v5 + 232));
  }
  if (*(int *)(v5 + 248) >= 1)
  {
    uint64_t v19 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, a2, *(double *)(*(void *)(v5 + 240) + 8 * v19++), a3);
    while (v19 < *(int *)(v5 + 248));
  }
  if (*(int *)(v5 + 264) >= 1)
  {
    uint64_t v20 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, a2, *(double *)(*(void *)(v5 + 256) + 8 * v20++), a3);
    while (v20 < *(int *)(v5 + 264));
  }
  return result;
}

uint64_t sub_100B73CE4(uint64_t a1, unint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 276);
  if (!(_BYTE)v3)
  {
    int v4 = 0;
    goto LABEL_10;
  }
  if (v3)
  {
    int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
    int v3 = *(_DWORD *)(a1 + 276);
    if ((v3 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  int v4 = 0;
  if ((v3 & 0x20) != 0)
  {
LABEL_7:
    v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 80), a2)+ 1;
    int v3 = *(_DWORD *)(a1 + 276);
  }
LABEL_8:
  if ((v3 & 0x80) != 0)
  {
    v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 104), a2)+ 1;
    int v3 = *(_DWORD *)(a1 + 276);
  }
LABEL_10:
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      uint64_t v5 = *(void *)(a1 + 112);
      int v6 = *(unsigned __int8 *)(v5 + 23);
      char v7 = v6;
      uint64_t v8 = *(void *)(v5 + 8);
      if ((v6 & 0x80u) == 0) {
        unint64_t v9 = *(unsigned __int8 *)(v5 + 23);
      }
      else {
        unint64_t v9 = v8;
      }
      if (v9 >= 0x80)
      {
        int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9, a2);
        int v6 = *(unsigned __int8 *)(v5 + 23);
        uint64_t v8 = *(void *)(v5 + 8);
        int v3 = *(_DWORD *)(a1 + 276);
        char v7 = *(unsigned char *)(v5 + 23);
      }
      else
      {
        int v10 = 1;
      }
      if (v7 < 0) {
        int v6 = v8;
      }
      v4 += v10 + v6 + 1;
    }
    if ((v3 & 0x1000) != 0) {
      v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 168), a2)+ 1;
    }
  }
  int v35 = *(_DWORD *)(a1 + 24);
  int v36 = *(_DWORD *)(a1 + 40);
  int v37 = v4;
  int v11 = *(_DWORD *)(a1 + 56);
  if (v11 < 1)
  {
    int v13 = 0;
  }
  else
  {
    uint64_t v12 = 0;
    int v13 = 0;
    do
    {
      uint64_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(void *)(a1 + 48)
                                                                                             + 4 * v12);
      if ((v14 & 0x80000000) != 0)
      {
        int v15 = 10;
      }
      else if (v14 >= 0x80)
      {
        int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
        int v11 = *(_DWORD *)(a1 + 56);
      }
      else
      {
        int v15 = 1;
      }
      v13 += v15;
      ++v12;
    }
    while (v12 < v11);
  }
  int v33 = *(_DWORD *)(a1 + 96);
  int v34 = *(_DWORD *)(a1 + 72);
  int v16 = *(_DWORD *)(a1 + 128);
  if (v16 < 1)
  {
    int v18 = 0;
  }
  else
  {
    uint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(void *)(a1 + 120)
                                                                                             + 4 * v17);
      if ((v19 & 0x80000000) != 0)
      {
        int v20 = 10;
      }
      else if (v19 >= 0x80)
      {
        int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2);
        int v16 = *(_DWORD *)(a1 + 128);
      }
      else
      {
        int v20 = 1;
      }
      v18 += v20;
      ++v17;
    }
    while (v17 < v16);
  }
  int v21 = *(_DWORD *)(a1 + 144);
  int v22 = *(_DWORD *)(a1 + 160);
  if (v22 < 1)
  {
    int v24 = 0;
  }
  else
  {
    uint64_t v23 = 0;
    int v24 = 0;
    do
    {
      int v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(void *)(a1 + 152)
                                                                                             + 4 * v23);
      if ((v25 & 0x80000000) != 0)
      {
        int v26 = 10;
      }
      else if (v25 >= 0x80)
      {
        int v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2);
        int v22 = *(_DWORD *)(a1 + 160);
      }
      else
      {
        int v26 = 1;
      }
      v24 += v26;
      ++v23;
    }
    while (v23 < v22);
  }
  int v27 = *(_DWORD *)(a1 + 184);
  if (v27 < 1)
  {
    int v29 = 0;
  }
  else
  {
    uint64_t v28 = 0;
    int v29 = 0;
    do
    {
      int v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(void *)(a1 + 176)
                                                                                             + 4 * v28);
      if ((v30 & 0x80000000) != 0)
      {
        int v31 = 10;
      }
      else if (v30 >= 0x80)
      {
        int v31 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v30, a2);
        int v27 = *(_DWORD *)(a1 + 184);
      }
      else
      {
        int v31 = 1;
      }
      v29 += v31;
      ++v28;
    }
    while (v28 < v27);
  }
  uint64_t result = (v13
                        + v37
                        + v11
                        + v18
                        + 9 * (v34 + v36)
                        + v16
                        + v24
                        + v22
                        + v29
                        + v27
                        + 5 * (v33 + v35 + v21 + *(_DWORD *)(a1 + 200))
                        + 6 * (*(_DWORD *)(a1 + 232) + *(_DWORD *)(a1 + 216))
                        + 10 * (*(_DWORD *)(a1 + 264) + *(_DWORD *)(a1 + 248)));
  *(_DWORD *)(a1 + 272) = result;
  return result;
}

void sub_100B74008(uint64_t a1, void *lpsrc)
{
  sub_100B71490(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B74090()
{
  return 1;
}

void *sub_100B74098@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Vision.VLLocalizationMaps488Details");
}

void sub_100B740A8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if (*(unsigned char *)(a2 + 20))
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      operator new();
    }
    uint64_t v5 = *(void *)(a2 + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248AA70 + 8);
    }
    sub_100B71490(v4, v5);
  }
}

void sub_100B741CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100B741E4(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1022E8630;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248AA70 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100B74274(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100B741E4(a1);

  operator delete();
}

void sub_100B742AC()
{
}

uint64_t sub_100B742F8(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 20))
  {
    uint64_t result = *(void *)(result + 8);
    if (result) {
      uint64_t result = sub_100B71CD8(result);
    }
  }
  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100B74330(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      uint64_t v7 = *(void *)(a1 + 8);
      if (!v7) {
        operator new();
      }
      unsigned int v17 = 0;
      uint64_t v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17))return 0; {
      }
        }
      else
      {
        unsigned int v17 = *v8;
        *((void *)this + 1) = v8 + 1;
      }
      int v9 = *((_DWORD *)this + 14);
      int v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10) {
        return 0;
      }
      int v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      if (!sub_100B71D74(v7, this, v12) || !*((unsigned char *)this + 36)) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      int v13 = *((_DWORD *)this + 14);
      BOOL v14 = __OFSUB__(v13, 1);
      int v15 = v13 - 1;
      if (v15 < 0 == v14) {
        *((_DWORD *)this + 14) = v15;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      break;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  return 1;
}

uint64_t sub_100B74538(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(result + 20))
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248AA70 + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return result;
}

uint64_t sub_100B74564(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_10248AA70 + 8);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B73CE4(v4, a2);
    int v7 = (int)v5;
    if (v5 >= 0x80) {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, v6);
    }
    else {
      int v8 = 1;
    }
    uint64_t result = (v7 + v8 + 1);
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100B745D4(uint64_t a1, void *lpsrc)
{
  sub_100B740A8(a1, (uint64_t)lpsrc);
}

uint64_t sub_100B7465C()
{
  return 1;
}

void *sub_100B74664@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Vision.VLLocalizationDebugInfo");
}

void sub_100B74674(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 56);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 56))
    {
      *(_DWORD *)(a1 + 56) |= 1u;
      uint64_t v5 = *(void *)(a1 + 8);
      if (!v5) {
        operator new();
      }
      uint64_t v6 = *(void *)(a2 + 8);
      if (!v6) {
        uint64_t v6 = *(void *)(qword_10248AA78 + 8);
      }
      sub_100B673B0(v5, v6);
      int v4 = *(_DWORD *)(a2 + 56);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_21;
      }
    }
    else if ((*(unsigned char *)(a2 + 56) & 2) == 0)
    {
      goto LABEL_6;
    }
    *(_DWORD *)(a1 + 56) |= 2u;
    uint64_t v7 = *(void *)(a1 + 16);
    if (!v7) {
      operator new();
    }
    uint64_t v8 = *(void *)(a2 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248AA78 + 16);
    }
    sub_100B702C0(v7, v8);
    int v4 = *(_DWORD *)(a2 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_26;
    }
LABEL_21:
    *(_DWORD *)(a1 + 56) |= 4u;
    int v9 = *(_DWORD **)(a1 + 24);
    if (!v9) {
      operator new();
    }
    uint64_t v10 = *(void *)(a2 + 24);
    if (!v10) {
      uint64_t v10 = *(void *)(qword_10248AA78 + 24);
    }
    sub_100B68A9C(v9, v10);
    int v4 = *(_DWORD *)(a2 + 56);
    if ((v4 & 8) == 0)
    {
LABEL_8:
      if ((v4 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_31;
    }
LABEL_26:
    *(_DWORD *)(a1 + 56) |= 8u;
    int v11 = *(_DWORD **)(a1 + 32);
    if (!v11) {
      operator new();
    }
    uint64_t v12 = *(void *)(a2 + 32);
    if (!v12) {
      uint64_t v12 = *(void *)(qword_10248AA78 + 32);
    }
    sub_100B70E50(v11, v12);
    int v4 = *(_DWORD *)(a2 + 56);
    if ((v4 & 0x10) == 0)
    {
LABEL_9:
      if ((v4 & 0x20) == 0) {
        return;
      }
      goto LABEL_32;
    }
LABEL_31:
    int v13 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 56) |= 0x10u;
    *(_DWORD *)(a1 + 48) = v13;
    if ((*(_DWORD *)(a2 + 56) & 0x20) == 0) {
      return;
    }
LABEL_32:
    *(_DWORD *)(a1 + 56) |= 0x20u;
    uint64_t v14 = *(void *)(a1 + 40);
    if (!v14) {
      operator new();
    }
    uint64_t v15 = *(void *)(a2 + 40);
    if (!v15) {
      uint64_t v15 = *(void *)(qword_10248AA78 + 40);
    }
    sub_100B740A8(v14, v15);
  }
}

void sub_100B74964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *sub_100B7497C(void *result)
{
  if ((void *)qword_10248AA78 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = v1[2];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = v1[3];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = v1[4];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t result = (void *)v1[5];
    if (result)
    {
      uint64_t v6 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v6();
    }
  }
  return result;
}

void sub_100B74AA0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022E86A8;
  sub_100B7497C(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100B74AF4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022E86A8;
  sub_100B7497C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

uint64_t sub_100B74B5C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248AA78;
  if (!qword_10248AA78)
  {
    sub_100B66710(0, a2, a3, a4);
    return qword_10248AA78;
  }
  return result;
}

void sub_100B74B8C()
{
}

uint64_t sub_100B74BE8(uint64_t result)
{
  uint64_t v1 = result;
  LOBYTE(v2) = *(unsigned char *)(result + 56);
  if ((_BYTE)v2)
  {
    if (*(unsigned char *)(result + 56))
    {
      uint64_t v3 = *(void *)(result + 8);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 36))
        {
          *(void *)(v3 + 8) = 0;
          *(void *)(v3 + 16) = 0;
          *(void *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 36) = 0;
        int v2 = *(_DWORD *)(result + 56);
      }
    }
    if ((v2 & 2) != 0)
    {
      uint64_t v4 = *(void *)(result + 16);
      if (v4)
      {
        if (*(unsigned char *)(v4 + 28))
        {
          if (*(unsigned char *)(v4 + 28))
          {
            uint64_t v5 = *(void *)(v4 + 8);
            if (v5)
            {
              *(_DWORD *)(v5 + 16) = 0;
              *(_DWORD *)(v5 + 28) = 0;
            }
          }
          *(void *)(v4 + 16) = 0;
        }
        *(_DWORD *)(v4 + 28) = 0;
        int v2 = *(_DWORD *)(result + 56);
      }
    }
    if ((v2 & 4) != 0)
    {
      uint64_t v6 = *(void *)(result + 24);
      if (v6)
      {
        uint64_t result = sub_10026DEDC(v6 + 8);
        *(_DWORD *)(v6 + 36) = 0;
        int v2 = *(_DWORD *)(v1 + 56);
      }
    }
    if ((v2 & 8) != 0)
    {
      uint64_t v7 = *(void *)(v1 + 32);
      if (v7)
      {
        uint64_t result = sub_10026DEDC(v7 + 8);
        *(_DWORD *)(v7 + 36) = 0;
        int v2 = *(_DWORD *)(v1 + 56);
      }
    }
    *(_DWORD *)(v1 + 48) = 0;
    if ((v2 & 0x20) != 0)
    {
      uint64_t v8 = *(void *)(v1 + 40);
      if (v8)
      {
        if (*(unsigned char *)(v8 + 20))
        {
          uint64_t result = *(void *)(v8 + 8);
          if (result) {
            uint64_t result = sub_100B71CD8(result);
          }
        }
        *(_DWORD *)(v8 + 20) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 56) = 0;
  return result;
}

uint64_t sub_100B74CCC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 < *((void *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_6;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_24;
        }
        *(_DWORD *)(a1 + 56) |= 1u;
        uint64_t v8 = *(void *)(a1 + 8);
        if (!v8) {
          operator new();
        }
        unsigned int v56 = 0;
        int v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v56))return 0; {
        }
          }
        else
        {
          unsigned int v56 = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        int v11 = *((_DWORD *)this + 14);
        int v12 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v11 + 1;
        if (v11 >= v12) {
          return 0;
        }
        int v13 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v56);
        if (!sub_100B6757C(v8, this, v14) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v13);
        int v15 = *((_DWORD *)this + 14);
        BOOL v16 = __OFSUB__(v15, 1);
        int v17 = v15 - 1;
        if (v17 < 0 == v16) {
          *((_DWORD *)this + 14) = v17;
        }
        int v18 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v18 >= *((void *)this + 2) || *v18 != 18) {
          continue;
        }
        *((void *)this + 1) = v18 + 1;
        goto LABEL_36;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_24;
        }
LABEL_36:
        *(_DWORD *)(a1 + 56) |= 2u;
        uint64_t v19 = *(void *)(a1 + 16);
        if (!v19) {
          operator new();
        }
        unsigned int v56 = 0;
        int v20 = (char *)*((void *)this + 1);
        if ((unint64_t)v20 >= *((void *)this + 2) || *v20 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v56))return 0; {
        }
          }
        else
        {
          unsigned int v56 = *v20;
          *((void *)this + 1) = v20 + 1;
        }
        int v21 = *((_DWORD *)this + 14);
        int v22 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v21 + 1;
        if (v21 >= v22) {
          return 0;
        }
        int v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v56);
        if (!sub_100B70514(v19, this, v24) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v23);
        int v25 = *((_DWORD *)this + 14);
        BOOL v16 = __OFSUB__(v25, 1);
        int v26 = v25 - 1;
        if (v26 < 0 == v16) {
          *((_DWORD *)this + 14) = v26;
        }
        int v27 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v27 >= *((void *)this + 2) || *v27 != 26) {
          continue;
        }
        *((void *)this + 1) = v27 + 1;
LABEL_50:
        *(_DWORD *)(a1 + 56) |= 4u;
        uint64_t v28 = *(int **)(a1 + 24);
        if (!v28) {
          operator new();
        }
        unsigned int v56 = 0;
        int v29 = (char *)*((void *)this + 1);
        if ((unint64_t)v29 >= *((void *)this + 2) || *v29 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v56))return 0; {
        }
          }
        else
        {
          unsigned int v56 = *v29;
          *((void *)this + 1) = v29 + 1;
        }
        int v30 = *((_DWORD *)this + 14);
        int v31 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v30 + 1;
        if (v30 >= v31) {
          return 0;
        }
        int v32 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v56);
        if (!sub_100B68D24(v28, this, v33) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v32);
        int v34 = *((_DWORD *)this + 14);
        BOOL v16 = __OFSUB__(v34, 1);
        int v35 = v34 - 1;
        if (v35 < 0 == v16) {
          *((_DWORD *)this + 14) = v35;
        }
        int v36 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v36 >= *((void *)this + 2) || *v36 != 34) {
          continue;
        }
        *((void *)this + 1) = v36 + 1;
LABEL_64:
        *(_DWORD *)(a1 + 56) |= 8u;
        int v37 = *(int **)(a1 + 32);
        if (!v37) {
          operator new();
        }
        unsigned int v56 = 0;
        uint64_t v38 = (char *)*((void *)this + 1);
        if ((unint64_t)v38 >= *((void *)this + 2) || *v38 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v56))return 0; {
        }
          }
        else
        {
          unsigned int v56 = *v38;
          *((void *)this + 1) = v38 + 1;
        }
        int v39 = *((_DWORD *)this + 14);
        int v40 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v39 + 1;
        if (v39 >= v40) {
          return 0;
        }
        int v41 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v56);
        if (!sub_100B710D8(v37, this, v42) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v41);
        int v43 = *((_DWORD *)this + 14);
        BOOL v16 = __OFSUB__(v43, 1);
        int v44 = v43 - 1;
        if (v44 < 0 == v16) {
          *((_DWORD *)this + 14) = v44;
        }
        uint64_t v45 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v45 >= *((void *)this + 2) || *v45 != 45) {
          continue;
        }
        *((void *)this + 1) = v45 + 1;
LABEL_78:
        unsigned int v56 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v56) & 1) == 0) {
          return 0;
        }
        *(_DWORD *)(a1 + 48) = v56;
        int v10 = *(_DWORD *)(a1 + 56) | 0x10;
        *(_DWORD *)(a1 + 56) = v10;
        int v46 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v46 >= *((void *)this + 2) || *v46 != 50) {
          continue;
        }
        *((void *)this + 1) = v46 + 1;
LABEL_82:
        *(_DWORD *)(a1 + 56) = v10 | 0x20;
        uint64_t v47 = *(void *)(a1 + 40);
        if (!v47) {
          operator new();
        }
        unsigned int v56 = 0;
        int v48 = (char *)*((void *)this + 1);
        if ((unint64_t)v48 >= *((void *)this + 2) || *v48 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v56))return 0; {
        }
          }
        else
        {
          unsigned int v56 = *v48;
          *((void *)this + 1) = v48 + 1;
        }
        int v49 = *((_DWORD *)this + 14);
        int v50 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v49 + 1;
        if (v49 >= v50) {
          return 0;
        }
        int v51 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v56);
        if (!sub_100B74330(v47, this, v52) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v51);
        int v53 = *((_DWORD *)this + 14);
        BOOL v16 = __OFSUB__(v53, 1);
        int v54 = v53 - 1;
        if (v54 < 0 == v16) {
          *((_DWORD *)this + 14) = v54;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_50;
        }
        goto LABEL_24;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_64;
        }
        goto LABEL_24;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_78;
        }
        goto LABEL_24;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_24;
        }
        int v10 = *(_DWORD *)(a1 + 56);
        goto LABEL_82;
      default:
        int v7 = TagFallback & 7;
LABEL_24:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_100B753AC(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 56);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248AA78 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 56);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_10248AA78 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_14:
  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_10248AA78 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_20:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (int)a2, *(float *)(v5 + 48), a3);
    if ((*(_DWORD *)(v5 + 56) & 0x20) == 0) {
      return result;
    }
    goto LABEL_21;
  }
LABEL_17:
  uint64_t v10 = *(void *)(v5 + 32);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_10248AA78 + 32);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v10, a2, a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x10) != 0) {
    goto LABEL_20;
  }
LABEL_6:
  if ((v6 & 0x20) == 0) {
    return result;
  }
LABEL_21:
  uint64_t v11 = *(void *)(v5 + 40);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_10248AA78 + 40);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v11, a2, a4);
}

uint64_t sub_100B754DC(uint64_t a1, unint64_t a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 56);
  if (!(_BYTE)v3)
  {
    uint64_t v5 = 0;
    goto LABEL_46;
  }
  if ((*(unsigned char *)(a1 + 56) & 1) == 0)
  {
    unsigned int v4 = 0;
    if ((*(unsigned char *)(a1 + 56) & 2) == 0) {
      goto LABEL_21;
    }
    goto LABEL_15;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    uint64_t v6 = *(void *)(qword_10248AA78 + 8);
  }
  int v7 = *(unsigned __int8 *)(v6 + 36);
  if (*(unsigned char *)(v6 + 36))
  {
    int v8 = (v7 << 31 >> 31) & 9;
    if ((v7 & 2) != 0) {
      v8 += 9;
    }
    if ((v7 & 4) != 0) {
      int v7 = v8 + 9;
    }
    else {
      int v7 = v8;
    }
  }
  *(_DWORD *)(v6 + 32) = v7;
  unsigned int v4 = v7 + 2;
  int v3 = *(_DWORD *)(a1 + 56);
  if ((v3 & 2) != 0)
  {
LABEL_15:
    uint64_t v9 = *(void *)(a1 + 16);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_10248AA78 + 16);
    }
    uint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B707C4(v9, a2);
    int v11 = (int)v10;
    if (v10 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    }
    else {
      int v12 = 1;
    }
    v4 += v11 + v12 + 1;
    int v3 = *(_DWORD *)(a1 + 56);
  }
LABEL_21:
  if ((v3 & 4) != 0)
  {
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      uint64_t v13 = *(void *)(qword_10248AA78 + 24);
    }
    unsigned int v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B68FAC(v13, a2);
    int v15 = (int)v14;
    if (v14 >= 0x80) {
      int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
    }
    else {
      int v16 = 1;
    }
    v4 += v15 + v16 + 1;
    int v3 = *(_DWORD *)(a1 + 56);
    if ((v3 & 8) == 0) {
      goto LABEL_36;
    }
    goto LABEL_30;
  }
  if ((v3 & 8) != 0)
  {
LABEL_30:
    uint64_t v17 = *(void *)(a1 + 32);
    if (!v17) {
      uint64_t v17 = *(void *)(qword_10248AA78 + 32);
    }
    int v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B71360(v17, a2);
    int v19 = (int)v18;
    if (v18 >= 0x80) {
      int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2);
    }
    else {
      int v20 = 1;
    }
    v4 += v19 + v20 + 1;
    int v3 = *(_DWORD *)(a1 + 56);
  }
LABEL_36:
  if ((v3 & 0x10) != 0) {
    uint64_t v5 = v4 + 5;
  }
  else {
    uint64_t v5 = v4;
  }
  if ((v3 & 0x20) != 0)
  {
    uint64_t v21 = *(void *)(a1 + 40);
    if (!v21) {
      uint64_t v21 = *(void *)(qword_10248AA78 + 40);
    }
    int v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B74564(v21, a2);
    int v24 = (int)v22;
    if (v22 >= 0x80) {
      int v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, v23);
    }
    else {
      int v25 = 1;
    }
    uint64_t v5 = (v5 + v24 + v25 + 1);
  }
LABEL_46:
  *(_DWORD *)(a1 + 52) = v5;
  return v5;
}

void sub_100B756A8(uint64_t a1, void *lpsrc)
{
  sub_100B74674(a1, (uint64_t)lpsrc);
}

void sub_100B75730(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_100B74674(a1, a2);
  }
}

uint64_t sub_100B7579C()
{
  return 1;
}

void *sub_100B757A4@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Vision.VLLocalizationResult");
}

uint64_t sub_100B757B4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 272);
}

NSInteger sub_100B757C0(double a1)
{
  id v1 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:a1];
  NSInteger v2 = [(NSDateComponents *)[+[NSCalendar currentCalendar] components:32 fromDate:v1] hour];

  return v2;
}

void sub_100B75828(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100B76BF0(a1, 0);
  *(unsigned char *)(a1 + 76) = 0;
  sub_1000C7F88(buf);
  sub_10006EF84(*(uint64_t *)buf, "TaMetricHour", (_DWORD *)(a1 + 72));
  uint64_t v3 = *(void *)&buf[8];
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  double v4 = sub_100B76E04(Current, v3, *(_DWORD *)(a1 + 72));
  *(double *)(a1 + 64) = v4;
  if (*(_DWORD *)(a1 + 72) != 4 && v4 - Current > 82800.0) {
    *(double *)(a1 + 64) = v4 + -86400.0;
  }
  BOOL v69 = 0;
  sub_1000C7F88(buf);
  sub_1000D2988(*(uint64_t *)buf, "TaMetricReset", &v69);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v69) {
    sub_100B77128(a1, "reset", Current);
  }
  v86.__r_.__value_.__r.__words[0] = 0;
  uint64_t v5 = sub_1000A6958();
  if (sub_1000A699C(v5, "TaNextWeeklySubmissionTime", &v86))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E89B0);
    }
    uint64_t v6 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = v86.__r_.__value_.__r.__words[0];
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "TaMetricEvent, load, TaNextWeeklySubmissionTime, %{public}.0f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E89B0);
      }
      LODWORD(v70.__r_.__value_.__l.__data_) = 134349056;
      *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 4) = v86.__r_.__value_.__r.__words[0];
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::initializeMetricCollection()", "%s\n", v7);
      if (v7 != buf) {
        free(v7);
      }
    }
  }
  else
  {
    *(double *)&v86.__r_.__value_.__l.__data_ = Current + 604800.0;
  }
  int v80 = 0;
  uint64_t v8 = sub_1000A6958();
  if (sub_1004D0870(v8, "TaWeeklyCountOfSuspiciousDevices", &v80))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E89B0);
    }
    uint64_t v9 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v80;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "TaMetricEvent, load, TaWeeklyCountOfSuspiciousDevices, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E89B0);
      }
      LODWORD(v70.__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(v70.__r_.__value_.__r.__words[0]) = v80;
      signed int v58 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::initializeMetricCollection()", "%s\n", v58);
      if (v58 != buf) {
        free(v58);
      }
    }
  }
  __p[0] = 0;
  uint64_t v10 = sub_1000A6958();
  if (sub_1000A699C(v10, "TaNextMonthlySubmissionTime", __p))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E89B0);
    }
    int v11 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134349056;
      *(void **)&uint8_t buf[4] = __p[0];
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "TaMetricEvent, load, TaNextMonthlySubmissionTime, %{public}.0f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E89B0);
      }
      LODWORD(v70.__r_.__value_.__l.__data_) = 134349056;
      *(void **)((char *)v70.__r_.__value_.__r.__words + 4) = __p[0];
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::initializeMetricCollection()", "%s\n", v12);
      if (v12 != buf) {
        free(v12);
      }
    }
  }
  else
  {
    *(double *)uint64_t __p = Current + 2592000.0;
  }
  LODWORD(v68) = 0;
  uint64_t v13 = sub_1000A6958();
  if (sub_1004D0870(v13, "TaMonthlyCountOfSuspiciousDevices", &v68))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E89B0);
    }
    unsigned int v14 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v68;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "TaMetricEvent, load, TaMonthlyCountOfSuspiciousDevices, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E89B0);
      }
      LODWORD(v70.__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(v70.__r_.__value_.__r.__words[0]) = v68;
      int v59 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::initializeMetricCollection()", "%s\n", v59);
      if (v59 != buf) {
        free(v59);
      }
    }
  }
  *(void *)(a1 + 80) = v86.__r_.__value_.__r.__words[0];
  *(_DWORD *)(a1 + 88) = v80;
  *(void **)(a1 + 96) = __p[0];
  *(_DWORD *)(a1 + 104) = v68;
  BOOL v68 = 0;
  sub_100134750(&v70, "na");
  uint64_t v16 = sub_1000A6958();
  if (sub_1004D1D1C(v16, @"TA_metrics", (CFTypeRef *)&v68))
  {
    uint64_t v17 = v68;
    int v18 = [v68 count];
    if (v18 < 3)
    {
      std::string::assign(&v70, "mincount");
    }
    else
    {
      sub_100134750(&v86, (char *)[v17[0] description]);
      if (!std::string::compare(&v86, "Version2"))
      {
        int v19 = [[v17 objectAtIndexedSubscript:1] intValue];
        unsigned int v20 = [[v17 objectAtIndexedSubscript:2] intValue];
        if (v19 + v20 + 3 == v18)
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022E89B0);
          }
          uint64_t v21 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 67240192;
            *(_DWORD *)&uint8_t buf[4] = v19;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "TaMetricEvent, load, nUnique, %{public}d", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022E89B0);
            }
            LODWORD(__p[0]) = 67240192;
            HIDWORD(__p[0]) = v19;
            uint64_t v65 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::initializeMetricCollection()", "%s\n", v65);
            if (v65 != buf) {
              free(v65);
            }
          }
          int v67 = v19;
          if (v19 >= 1)
          {
            for (uint64_t i = 0; i != v19; ++i)
            {
              sub_100134750(__p, (char *)[v17[i + 3] description]);
              if (qword_1024193A0 != -1) {
                dispatch_once(&qword_1024193A0, &stru_1022E89B0);
              }
              unsigned int v23 = qword_1024193A8;
              if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
              {
                if (v85 >= 0) {
                  int v24 = __p;
                }
                else {
                  int v24 = (void **)__p[0];
                }
                *(_DWORD *)long long buf = 136380675;
                *(void *)&uint8_t buf[4] = v24;
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "TaMetricEvent, load, unique, %{private}s", buf, 0xCu);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193A0 != -1) {
                  dispatch_once(&qword_1024193A0, &stru_1022E89B0);
                }
                if (v85 >= 0) {
                  int v25 = __p;
                }
                else {
                  int v25 = (void **)__p[0];
                }
                int v80 = 136380675;
                int v81 = v25;
                int v26 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::initializeMetricCollection()", "%s\n", v26);
                if (v26 != buf) {
                  free(v26);
                }
              }
              sub_10010702C((uint64_t **)a1, (const void **)__p, (uint64_t)__p);
              if (v85 < 0) {
                operator delete(__p[0]);
              }
            }
          }
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022E89B0);
          }
          LODWORD(v27) = v20;
          int v28 = v67;
          int v29 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 67240192;
            *(_DWORD *)&uint8_t buf[4] = v20;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "TaMetricEvent, load, nDetected, %{public}d", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022E89B0);
            }
            LODWORD(__p[0]) = 67240192;
            HIDWORD(__p[0]) = v20;
            int v66 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::initializeMetricCollection()", "%s\n", v66);
            if (v66 != buf) {
              free(v66);
            }
            LODWORD(v27) = v20;
            int v28 = v67;
          }
          if ((int)v27 >= 1)
          {
            uint64_t v27 = v27;
            int v30 = v28 + 4;
            do
            {
              sub_100134750(__p, (char *)[v17 objectAtIndexedSubscript:v30 - 1].description.UTF8String]);
              unsigned int v31 = [[v17 objectAtIndexedSubscript:v30] intValue];
              if (qword_1024193A0 != -1) {
                dispatch_once(&qword_1024193A0, &stru_1022E89B0);
              }
              int v32 = qword_1024193A8;
              if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
              {
                if (v85 >= 0) {
                  unsigned int v33 = __p;
                }
                else {
                  unsigned int v33 = (void **)__p[0];
                }
                *(_DWORD *)long long buf = 136380931;
                *(void *)&uint8_t buf[4] = v33;
                *(_WORD *)&unsigned char buf[12] = 1026;
                *(_DWORD *)&buf[14] = v31;
                _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "TaMetricEvent, load, detected, %{private}s, %{public}d", buf, 0x12u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193A0 != -1) {
                  dispatch_once(&qword_1024193A0, &stru_1022E89B0);
                }
                if (v85 >= 0) {
                  int v34 = __p;
                }
                else {
                  int v34 = (void **)__p[0];
                }
                int v80 = 136380931;
                int v81 = v34;
                __int16 v82 = 1026;
                unsigned int v83 = v31;
                int v35 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::initializeMetricCollection()", "%s\n", v35);
                if (v35 != buf) {
                  free(v35);
                }
              }
              *(void *)long long buf = __p;
              *((_DWORD *)sub_100510C30((uint64_t **)(a1 + 24), (const void **)__p, (uint64_t)&unk_101D0B290, (long long **)buf)+ 14) = v31;
              if (v85 < 0) {
                operator delete(__p[0]);
              }
              v30 += 2;
              --v27;
            }
            while (v27);
          }
        }
        else
        {
          std::string::assign(&v70, "ids");
        }
      }
      else
      {
        std::string::assign(&v70, "version");
      }
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v86.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v70.__r_.__value_.__l.__size_ == 2)
      {
        int v36 = (std::string *)v70.__r_.__value_.__r.__words[0];
LABEL_110:
        if (LOWORD(v36->__r_.__value_.__l.__data_) == 24942) {
          goto LABEL_119;
        }
      }
    }
    else if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) == 2)
    {
      int v36 = &v70;
      goto LABEL_110;
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E89B0);
    }
    int v37 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      int v38 = SHIBYTE(v70.__r_.__value_.__r.__words[2]);
      std::string::size_type v39 = v70.__r_.__value_.__r.__words[0];
      unsigned int v40 = [v17 count];
      int v41 = &v70;
      if (v38 < 0) {
        int v41 = (std::string *)v39;
      }
      *(_DWORD *)long long buf = 136446467;
      *(void *)&uint8_t buf[4] = v41;
      *(_WORD *)&unsigned char buf[12] = 1025;
      *(_DWORD *)&buf[14] = v40;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "TaMetricEvent, loaderr, %{public}s, count, %{private}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E89B0);
      }
      int v60 = SHIBYTE(v70.__r_.__value_.__r.__words[2]);
      std::string::size_type v61 = v70.__r_.__value_.__r.__words[0];
      unsigned int v62 = [v17 count];
      unsigned int v63 = &v70;
      if (v60 < 0) {
        unsigned int v63 = (std::string *)v61;
      }
      LODWORD(v86.__r_.__value_.__l.__data_) = 136446467;
      *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = (std::string::size_type)v63;
      WORD2(v86.__r_.__value_.__r.__words[1]) = 1025;
      *(_DWORD *)((char *)&v86.__r_.__value_.__r.__words[1] + 6) = v62;
      int v64 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::initializeMetricCollection()", "%s\n", v64);
      if (v64 != buf) {
        free(v64);
      }
    }
    sub_100B77128(a1, "loaderror", Current);
  }
LABEL_119:
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022E89B0);
  }
  unsigned int v42 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v43 = *(void *)(a1 + 16);
    uint64_t v44 = *(void *)(a1 + 40);
    int v45 = *(_DWORD *)(a1 + 48);
    int v46 = *(_DWORD *)(a1 + 52);
    int v47 = *(_DWORD *)(a1 + 56);
    double v48 = *(double *)(a1 + 64) - Current;
    *(_DWORD *)long long buf = 134350592;
    int v49 = *(_DWORD *)(a1 + 72);
    *(void *)&uint8_t buf[4] = v43;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(void *)&buf[14] = v44;
    __int16 v88 = 1026;
    int v89 = v45;
    __int16 v90 = 1026;
    int v91 = v46;
    __int16 v92 = 1026;
    int v93 = v47;
    __int16 v94 = 2050;
    double v95 = v48 / 3600.0;
    __int16 v96 = 1024;
    int v97 = v49;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "TaMetricEvent, init, unique, %{public}ld, detected, %{public}ld, suspicious, %{public}d, %{public}d, %{public}d, nextSend, %{public}.1f, sendhour, %d", buf, 0x38u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E89B0);
    }
    std::string::size_type v50 = *(void *)(a1 + 16);
    std::string::size_type v51 = *(void *)(a1 + 40);
    int v52 = *(_DWORD *)(a1 + 48);
    int v53 = *(_DWORD *)(a1 + 52);
    int v54 = *(_DWORD *)(a1 + 56);
    double v55 = *(double *)(a1 + 64) - Current;
    LODWORD(v70.__r_.__value_.__l.__data_) = 134350592;
    int v56 = *(_DWORD *)(a1 + 72);
    *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 4) = v50;
    WORD2(v70.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&v70.__r_.__value_.__r.__words[1] + 6) = v51;
    HIWORD(v70.__r_.__value_.__r.__words[2]) = 1026;
    int v71 = v52;
    __int16 v72 = 1026;
    int v73 = v53;
    __int16 v74 = 1026;
    int v75 = v54;
    __int16 v76 = 2050;
    double v77 = v55 / 3600.0;
    __int16 v78 = 1024;
    int v79 = v56;
    int v57 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::initializeMetricCollection()", "%s\n", v57);
    if (v57 != buf) {
      free(v57);
    }
  }
  sub_100199238(a1, Current);
}

void sub_100B76B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B76BF0(uint64_t a1, int a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022E89B0);
  }
  double v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67240192;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "TaMetricEvent, resetDailyMetricsState, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E89B0);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::resetDailyMetricsState(BOOL)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1000DB264(a1, *(char **)(a1 + 8));
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  sub_1000DB264(a1 + 24, *(char **)(a1 + 32));
  *(void *)(a1 + 24) = a1 + 32;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  if (a2)
  {
    *(double *)(a1 + 64) = *(double *)(a1 + 64) + 86400.0;
  }
  else
  {
    *(void *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 4;
  }
}

double sub_100B76E04(CFAbsoluteTime a1, uint64_t a2, int a3)
{
  CFDateRef v5 = CFDateCreate(0, a1);
  CFLocaleRef v6 = CFLocaleCopyCurrent();
  int v7 = CFDateFormatterCreate(0, v6, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
  CFDateFormatterSetFormat(v7, @"HH");
  CFStringRef StringWithDate = CFDateFormatterCreateStringWithDate(0, v7, v5);
  SInt32 IntValue = CFStringGetIntValue(StringWithDate);
  CFRelease(StringWithDate);
  CFRelease(@"HH");
  CFRelease(v7);
  CFRelease(v6);
  CFRelease(v5);
  int v10 = (a3 - IntValue + 24) % 24;
  int v11 = 3600 * (v10 + (int)a1 / 3600);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022E89B0);
  }
  int v12 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134350336;
    double v17 = ((double)v11 - a1) / 3600.0;
    __int16 v18 = 1026;
    int v19 = 3600 * (v10 + (int)a1 / 3600);
    __int16 v20 = 2050;
    CFAbsoluteTime v21 = a1;
    __int16 v22 = 1026;
    int v23 = a3;
    __int16 v24 = 1026;
    SInt32 v25 = IntValue;
    __int16 v26 = 1026;
    int v27 = (a3 - IntValue + 24) % 24;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "TaMetricEvent, nextSend, %{public}0.1f, abstimes, %{public}d, %{public}.0f, hours, %{public}d, %{public}d, delta, %{public}d", buf, 0x2Eu);
  }
  if (!sub_10013D1A0(115, 2)) {
    return (double)v11;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022E89B0);
  }
  double v13 = (double)v11;
  int v15 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 2, "CFAbsoluteTime CLTrackingAvoidanceMetrics::getNextSendTime(CFAbsoluteTime, int)", "%s\n", v15);
  if (v15 != (char *)buf) {
    free(v15);
  }
  return v13;
}

void sub_100B77128(uint64_t a1, unsigned char *a2, double a3)
{
  if (!*(unsigned char *)(a1 + 76))
  {
    uint64_t v5 = *(unsigned int *)(a1 + 16);
    uint64_t v6 = *(unsigned int *)(a1 + 40);
    int v7 = +[NSMutableArray arrayWithCapacity:(int)v6 + (int)v5 + 3];
    [(NSMutableArray *)v7 addObject:+[NSString stringWithUTF8String:"Version2"]];
    [(NSMutableArray *)v7 addObject:+[NSNumber numberWithInt:v5]];
    [(NSMutableArray *)v7 addObject:+[NSNumber numberWithInt:v6]];
    uint64_t v8 = *(void **)a1;
    if (*(void *)a1 != a1 + 8)
    {
      do
      {
        if (*((char *)v8 + 55) < 0)
        {
          sub_1000DC48C(__p, (void *)v8[4], v8[5]);
        }
        else
        {
          *(_OWORD *)uint64_t __p = *((_OWORD *)v8 + 2);
          *(void *)&__p[16] = v8[6];
        }
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022E89B0);
        }
        uint64_t v9 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
        {
          if (__p[23] >= 0) {
            int v10 = __p;
          }
          else {
            int v10 = *(unsigned char **)__p;
          }
          *(_DWORD *)long long buf = 136380675;
          int v81 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "TaMetricEvent, save, unique, %{private}s", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022E89B0);
          }
          if (__p[23] >= 0) {
            int v15 = __p;
          }
          else {
            int v15 = *(unsigned char **)__p;
          }
          int v76 = 136380675;
          double v77 = v15;
          uint64_t v16 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::saveState(const char *, CFAbsoluteTime)", "%s\n", v16);
          if (v16 != (char *)buf) {
            free(v16);
          }
        }
        if (__p[23] >= 0) {
          int v11 = __p;
        }
        else {
          int v11 = *(unsigned char **)__p;
        }
        [(NSMutableArray *)v7 addObject:+[NSString stringWithUTF8String:v11]];
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        int v12 = (void *)v8[1];
        if (v12)
        {
          do
          {
            double v13 = v12;
            int v12 = (void *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            double v13 = (void *)v8[2];
            BOOL v14 = *v13 == (void)v8;
            uint64_t v8 = v13;
          }
          while (!v14);
        }
        uint64_t v8 = v13;
      }
      while (v13 != (void *)(a1 + 8));
    }
    double v17 = *(void **)(a1 + 24);
    if (v17 != (void *)(a1 + 32))
    {
      do
      {
        if (*((char *)v17 + 55) < 0)
        {
          sub_1000DC48C(__p, (void *)v17[4], v17[5]);
        }
        else
        {
          *(_OWORD *)uint64_t __p = *((_OWORD *)v17 + 2);
          *(void *)&__p[16] = v17[6];
        }
        *(_DWORD *)BOOL v68 = *((_DWORD *)v17 + 14);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022E89B0);
        }
        __int16 v18 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
        {
          if (__p[23] >= 0) {
            int v19 = __p;
          }
          else {
            int v19 = *(unsigned char **)__p;
          }
          *(_DWORD *)long long buf = 136380931;
          int v81 = v19;
          __int16 v82 = 1026;
          *(_DWORD *)unsigned int v83 = *(_DWORD *)v68;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "TaMetricEvent, save, detected, %{private}s, %{public}d", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022E89B0);
          }
          if (__p[23] >= 0) {
            int v23 = __p;
          }
          else {
            int v23 = *(unsigned char **)__p;
          }
          int v76 = 136380931;
          double v77 = v23;
          __int16 v78 = 1026;
          int v79 = *(_DWORD *)v68;
          __int16 v24 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::saveState(const char *, CFAbsoluteTime)", "%s\n", v24);
          if (v24 != (char *)buf) {
            free(v24);
          }
        }
        if (__p[23] >= 0) {
          __int16 v20 = __p;
        }
        else {
          __int16 v20 = *(unsigned char **)__p;
        }
        [(NSMutableArray *)v7 addObject:+[NSString stringWithUTF8String:v20]];
        [(NSMutableArray *)v7 addObject:+[NSNumber numberWithInt:*(unsigned int *)v68]];
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        CFAbsoluteTime v21 = (void *)v17[1];
        if (v21)
        {
          do
          {
            __int16 v22 = v21;
            CFAbsoluteTime v21 = (void *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            __int16 v22 = (void *)v17[2];
            BOOL v14 = *v22 == (void)v17;
            double v17 = v22;
          }
          while (!v14);
        }
        double v17 = v22;
      }
      while (v22 != (void *)(a1 + 32));
    }
    uint64_t v25 = sub_1000A6958();
    __int16 v26 = (double *)(a1 + 80);
    sub_10016332C(v25, "TaNextWeeklySubmissionTime", (const void *)(a1 + 80));
    uint64_t v27 = sub_1000A6958();
    int v28 = (int *)(a1 + 88);
    sub_1004D2BC4(v27, "TaWeeklyCountOfSuspiciousDevices", (unsigned int *)(a1 + 88));
    uint64_t v29 = sub_1000A6958();
    int v30 = (double *)(a1 + 96);
    sub_10016332C(v29, "TaNextMonthlySubmissionTime", (const void *)(a1 + 96));
    uint64_t v31 = sub_1000A6958();
    int v32 = (int *)(a1 + 104);
    sub_1004D2BC4(v31, "TaMonthlyCountOfSuspiciousDevices", (unsigned int *)(a1 + 104));
    uint64_t v33 = sub_1000A6958();
    sub_1004D258C(v33);
    uint64_t v34 = sub_1000A6958();
    (*(void (**)(uint64_t))(*(void *)v34 + 944))(v34);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E89B0);
    }
    int v35 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v36 = *(void *)(a1 + 16);
      uint64_t v37 = *(void *)(a1 + 40);
      int v38 = *(_DWORD *)(a1 + 48);
      int v39 = *(_DWORD *)(a1 + 52);
      int v40 = *(_DWORD *)(a1 + 56);
      uint64_t v41 = *(void *)(a1 + 64);
      int v42 = *(_DWORD *)(a1 + 72);
      *(_DWORD *)long long buf = 136448002;
      int v81 = a2;
      __int16 v82 = 2050;
      *(void *)unsigned int v83 = v36;
      *(_WORD *)&v83[8] = 2050;
      *(void *)unsigned int v84 = v37;
      *(_WORD *)&v84[8] = 1026;
      *(_DWORD *)char v85 = v38;
      *(_WORD *)&v85[4] = 1026;
      *(_DWORD *)std::string v86 = v39;
      *(_WORD *)&v86[4] = 1026;
      int v87 = v40;
      __int16 v88 = 2050;
      uint64_t v89 = v41;
      __int16 v90 = 1024;
      int v91 = v42;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "TaMetricEvent, save, %{public}s, uniqueIds, %{public}ld, detectedIds, %{public}ld, suspicious, %{public}d, %{public}d, %{public}d, nextSend, %{public}.1f, sendhour, %d", buf, 0x42u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E89B0);
      }
      uint64_t v52 = *(void *)(a1 + 16);
      uint64_t v53 = *(void *)(a1 + 40);
      int v54 = *(_DWORD *)(a1 + 48);
      int v55 = *(_DWORD *)(a1 + 52);
      int v56 = *(_DWORD *)(a1 + 56);
      uint64_t v57 = *(void *)(a1 + 64);
      int v58 = *(_DWORD *)(a1 + 72);
      *(_DWORD *)uint64_t __p = 136448002;
      *(void *)&__p[4] = a2;
      *(_WORD *)&unsigned char __p[12] = 2050;
      *(void *)&__p[14] = v52;
      *(_WORD *)&__p[22] = 2050;
      *(void *)BOOL v68 = v53;
      *(_WORD *)&v68[8] = 1026;
      *(_DWORD *)BOOL v69 = v54;
      *(_WORD *)&v69[4] = 1026;
      *(_DWORD *)std::string v70 = v55;
      *(_WORD *)&v70[4] = 1026;
      int v71 = v56;
      __int16 v72 = 2050;
      uint64_t v73 = v57;
      __int16 v74 = 1024;
      int v75 = v58;
      int v59 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::saveState(const char *, CFAbsoluteTime)", "%s\n", v59);
      if (v59 != (char *)buf) {
        free(v59);
      }
    }
    int v43 = (unint64_t)(3257812231 * (int)(*v26 - a3)) >> 32;
    int v44 = (unint64_t)(3257812231 * (int)(*v30 - a3)) >> 32;
    int v45 = v44 >> 16;
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E89B0);
    }
    int v46 = (v43 >> 16) + (v43 >> 31);
    int v47 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v48 = (unint64_t)*v26;
      unint64_t v49 = (unint64_t)*v30;
      int v50 = *v28;
      int v51 = *v32;
      *(_DWORD *)long long buf = 134350336;
      int v81 = (unsigned char *)v48;
      __int16 v82 = 1026;
      *(_DWORD *)unsigned int v83 = v46;
      *(_WORD *)&v83[4] = 1026;
      *(_DWORD *)&v83[6] = v50;
      *(_WORD *)unsigned int v84 = 2050;
      *(void *)&v84[2] = v49;
      *(_WORD *)char v85 = 1026;
      *(_DWORD *)&v85[2] = v45 + (v44 >> 31);
      *(_WORD *)std::string v86 = 1026;
      *(_DWORD *)&v86[2] = v51;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "TaMetricEvent, save, nextWeekly, %{public}lld, nextWeeklyDaysRem, %{public}d, weeklyCount, %{public}d, nextMonthly, %{public}lld, nextMonthlyDaysRem, %{public}d, monthlyCount, %{public}d", buf, 0x2Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E89B0);
      }
      unint64_t v60 = (unint64_t)*v26;
      unint64_t v61 = (unint64_t)*v30;
      int v62 = *v28;
      int v63 = *v32;
      *(_DWORD *)uint64_t __p = 134350336;
      *(void *)&__p[4] = v60;
      *(_WORD *)&unsigned char __p[12] = 1026;
      *(_DWORD *)&__p[14] = v46;
      *(_WORD *)&__p[18] = 1026;
      *(_DWORD *)&__p[20] = v62;
      *(_WORD *)BOOL v68 = 2050;
      *(void *)&unsigned int v68[2] = v61;
      *(_WORD *)BOOL v69 = 1026;
      *(_DWORD *)&v69[2] = v45 + (v44 >> 31);
      *(_WORD *)std::string v70 = 1026;
      *(_DWORD *)&v70[2] = v63;
      int v64 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::saveState(const char *, CFAbsoluteTime)", "%s\n", v64);
      if (v64 != (char *)buf) {
        free(v64);
      }
    }
  }
}

void sub_100B77B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B77BCC(uint64_t a1, void *a2, double a3)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022E89B0);
  }
  double v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = [a2 count];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "TaMetricEvent, didFindSuspiciousDevices, %lu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E89B0);
    }
    *(_DWORD *)uint64_t __p = 134217984;
    *(void *)&__p[4] = [a2 count];
    __int16 v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::handleFoundSuspiciousDevices(NSArray<TASuspiciousDevice *> *, CFAbsoluteTime)", "%s\n", v22);
    if (v22 != buf) {
      free(v22);
    }
  }
  sub_100199238(a1, a3);
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v5 = [a2 countByEnumeratingWithState:&v31 objects:v41 count:16];
  if (v5)
  {
    int v29 = 0;
    int v27 = 0;
    int v6 = 0;
    uint64_t v7 = *(void *)v32;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v32 != v7) {
          objc_enumerationMutation(a2);
        }
        uint64_t v9 = *(void **)(*((void *)&v31 + 1) + 8 * (void)v8);
        sub_100134750(__p, (char *)[[[v9 address] hexString] UTF8String]);
        sub_100134750(&v30, (char *)[[[v9 detectionSummary] objectForKeyedSubscript:@"DetectionAlgorithm"] UTF8String]);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022E89B0);
        }
        int v10 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          if (v40 >= 0) {
            int v11 = __p;
          }
          else {
            int v11 = *(unsigned char **)__p;
          }
          int v12 = &v30;
          if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v12 = (std::string *)v30.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)long long buf = 136380931;
          *(void *)&uint8_t buf[4] = v11;
          __int16 v43 = 2082;
          int v44 = v12;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "TaMetricEvent, suspicious, %{private}s, %{public}s", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022E89B0);
          }
          if (v40 >= 0) {
            BOOL v14 = __p;
          }
          else {
            BOOL v14 = *(unsigned char **)__p;
          }
          int v15 = &v30;
          if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v15 = (std::string *)v30.__r_.__value_.__r.__words[0];
          }
          int v35 = 136380931;
          uint64_t v36 = v14;
          __int16 v37 = 2082;
          int v38 = v15;
          uint64_t v16 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::handleFoundSuspiciousDevices(NSArray<TASuspiciousDevice *> *, CFAbsoluteTime)", "%s\n", v16);
          if (v16 != buf) {
            free(v16);
          }
        }
        if (!std::string::compare(&v30, "TAFilterVisits"))
        {
          ++v6;
        }
        else if (!std::string::compare(&v30, "TAFilterGeneral"))
        {
          ++v27;
        }
        else
        {
          ++v29;
        }
        *(void *)long long buf = __p;
        double v13 = sub_100510C30((uint64_t **)(a1 + 24), (const void **)__p, (uint64_t)&unk_101D0B290, (long long **)buf);
        ++*((_DWORD *)v13 + 14);
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v30.__r_.__value_.__l.__data_);
        }
        if (v40 < 0) {
          operator delete(*(void **)__p);
        }
        uint64_t v8 = (char *)v8 + 1;
      }
      while (v5 != v8);
      id v17 = [a2 countByEnumeratingWithState:&v31 objects:v41 count:16];
      id v5 = v17;
    }
    while (v17);
  }
  else
  {
    int v29 = 0;
    int v27 = 0;
    int v6 = 0;
  }
  int v18 = *(_DWORD *)(a1 + 52) + v27;
  *(_DWORD *)(a1 + 48) += v6;
  *(_DWORD *)(a1 + 52) = v18;
  *(_DWORD *)(a1 + 56) += v29;
  *(_DWORD *)(a1 + 88) += [a2 count];
  *(_DWORD *)(a1 + 104) += [a2 count];
  if (v6 && !*(unsigned char *)(a1 + 76))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E89B0);
    }
    int v19 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "TaMetric, detection, visits, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E89B0);
      }
      *(_DWORD *)uint64_t __p = 67240192;
      *(_DWORD *)&__p[4] = v6;
      int v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::handleFoundSuspiciousDevices(NSArray<TASuspiciousDevice *> *, CFAbsoluteTime)", "%s\n", v23);
      if (v23 != buf) {
        free(v23);
      }
    }
    AnalyticsSendEventLazy();
  }
  if (v27 && !*(unsigned char *)(a1 + 76))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E89B0);
    }
    __int16 v20 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "TaMetric, detection, general, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E89B0);
      }
      *(_DWORD *)uint64_t __p = 67240192;
      *(_DWORD *)&__p[4] = v27;
      __int16 v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::handleFoundSuspiciousDevices(NSArray<TASuspiciousDevice *> *, CFAbsoluteTime)", "%s\n", v24);
      if (v24 != buf) {
        free(v24);
      }
    }
    AnalyticsSendEventLazy();
  }
  if (v29 && !*(unsigned char *)(a1 + 76))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E89B0);
    }
    CFAbsoluteTime v21 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v29;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "TaMetric, detection, other, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E89B0);
      }
      *(_DWORD *)uint64_t __p = 67240192;
      *(_DWORD *)&__p[4] = v29;
      uint64_t v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::handleFoundSuspiciousDevices(NSArray<TASuspiciousDevice *> *, CFAbsoluteTime)", "%s\n", v25);
      if (v25 != buf) {
        free(v25);
      }
    }
    AnalyticsSendEventLazy();
  }
  sub_100B77128(a1, "suspicious", a3);
}

void sub_100B786C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_100B78700(uint64_t a1)
{
  v2[1] = @"events";
  v3[0] = @"visits";
  v2[0] = @"algorithm";
  v3[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:2];
}

NSDictionary *sub_100B78798(uint64_t a1)
{
  v2[1] = @"events";
  v3[0] = @"general";
  v2[0] = @"algorithm";
  v3[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:2];
}

NSDictionary *sub_100B78830(uint64_t a1)
{
  v2[1] = @"events";
  v3[0] = @"other";
  v2[0] = @"algorithm";
  v3[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:2];
}

void sub_100B788C8(uint64_t a1, void *a2, void *a3, double a4)
{
  sub_100199238(a1, a4);
  [a2 address];
  if (a3)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E89B0);
    }
    uint64_t v7 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138477827;
      double v13 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "TaMetric, submitting intervisit metrics:%{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E89B0);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::handleInterVisitMetrics(TASPAdvertisement *, TAMetricsInterVisit *, CFAbsoluteTime, NSUInteger)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    [a3 currentInterVisitMetric];
    [a3 totalInterVisitMetric];
    sub_100B757C0(a4);
    id v8 = +[TASPAdvertisement TASPAdvertisementDeviceTypeToString:](TASPAdvertisement, "TASPAdvertisementDeviceTypeToString:", [a2 getDeviceType]);
    NSSelectorFromString(@"getLatestAdvTypeToString:");
    if (objc_opt_respondsToSelector()) {
      [a2 getLatestAdvTypeToString:v8];
    }
    AnalyticsSendEventLazy();
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E89B0);
    }
    uint64_t v9 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "TaMetric, handleInterVisitMetric got nil TAMetricsInterVisit", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E89B0);
      }
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLTrackingAvoidanceMetrics::handleInterVisitMetrics(TASPAdvertisement *, TAMetricsInterVisit *, CFAbsoluteTime, NSUInteger)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

NSDictionary *sub_100B78CB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  v42[0] = @"intervisit";
  v41[0] = @"reason";
  v41[1] = @"deviceIdentifier";
  v42[1] = [*(id *)(a1 + 32) hexString];
  v41[2] = @"distance";
  [*(id *)(a1 + 40) distance];
  v42[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v41[3] = @"duration";
  [*(id *)(a1 + 40) duration];
  uint64_t v42[3] = +[NSNumber numberWithDouble:v3 / 60.0];
  v41[4] = @"distanceBucketed";
  [*(id *)(a1 + 40) distance];
  uint64_t v5 = 0;
  while (dbl_101D821B8[v5] <= v4)
  {
    if (++v5 == 33)
    {
      uint64_t v6 = 32;
      goto LABEL_6;
    }
  }
  uint64_t v6 = (v5 - 1);
LABEL_6:
  v42[4] = +[NSNumber numberWithInt:v6];
  v41[5] = @"durationBucketed";
  [*(id *)(a1 + 40) duration];
  uint64_t v7 = 0;
  double v9 = v8 / 60.0;
  while (dbl_101D820A0[v7] <= v9)
  {
    if (++v7 == 35)
    {
      uint64_t v10 = 34;
      goto LABEL_11;
    }
  }
  uint64_t v10 = (v7 - 1);
LABEL_11:
  v42[5] = +[NSNumber numberWithInt:v10];
  v41[6] = @"totalDistance";
  [*(id *)(a1 + 48) distance];
  v42[6] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v41[7] = @"totalDuration";
  [*(id *)(a1 + 48) duration];
  v42[7] = +[NSNumber numberWithDouble:v11 / 60.0];
  v41[8] = @"totalDistanceBucketed";
  [*(id *)(a1 + 48) distance];
  uint64_t v13 = 0;
  while (dbl_101D821B8[v13] <= v12)
  {
    if (++v13 == 33)
    {
      uint64_t v14 = 32;
      goto LABEL_16;
    }
  }
  uint64_t v14 = (v13 - 1);
LABEL_16:
  char v42[8] = +[NSNumber numberWithInt:v14];
  v41[9] = @"totalDurationBucketed";
  [*(id *)(a1 + 48) duration];
  uint64_t v15 = 0;
  double v17 = v16 / 60.0;
  while (dbl_101D820A0[v15] <= v17)
  {
    if (++v15 == 35)
    {
      uint64_t v18 = 34;
      goto LABEL_21;
    }
  }
  uint64_t v18 = (v15 - 1);
LABEL_21:
  v42[9] = +[NSNumber numberWithInt:v18];
  v41[10] = @"altitude";
  int v19 = +[NSNumber numberWithDouble:*(double *)(v2 + 144)];
  uint64_t v20 = 0;
  v42[10] = v19;
  v41[11] = @"altitudeBucketed";
  while (dword_101D81990[v20] <= (int)*(double *)(v2 + 144))
  {
    if (++v20 == 5)
    {
      uint64_t v21 = 4;
      goto LABEL_26;
    }
  }
  uint64_t v21 = (v20 - 1);
LABEL_26:
  v42[11] = +[NSNumber numberWithInt:v21];
  v41[12] = @"demAltitude";
  __int16 v22 = +[NSNumber numberWithDouble:*(double *)(v2 + 648)];
  uint64_t v23 = 0;
  v42[12] = v22;
  v41[13] = @"demAltitudeBucketed";
  while (dword_101D81990[v23] <= (int)*(double *)(v2 + 648))
  {
    if (++v23 == 5)
    {
      uint64_t v24 = 4;
      goto LABEL_31;
    }
  }
  uint64_t v24 = (v23 - 1);
LABEL_31:
  v42[13] = +[NSNumber numberWithInt:v24];
  v41[14] = @"latitude";
  uint64_t v25 = +[NSNumber numberWithDouble:*(double *)(v2 + 120)];
  uint64_t v26 = 0;
  v42[14] = v25;
  v41[15] = @"latitudeBucketed";
  uint64_t v27 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101D819A8[v26] <= *(double *)(v2 + 120))
  {
    uint64_t v27 = (v27 + 1);
    if (++v26 == 38)
    {
      uint64_t v27 = 37;
      break;
    }
  }
  v42[15] = +[NSNumber numberWithInt:v27];
  v41[16] = @"longitude";
  int v28 = +[NSNumber numberWithDouble:*(double *)(v2 + 128)];
  uint64_t v29 = 0;
  v42[16] = v28;
  v41[17] = @"longitudeBucketed";
  uint64_t v30 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101D81AD8[v29] <= *(double *)(v2 + 128))
  {
    uint64_t v30 = (v30 + 1);
    if (++v29 == 74)
    {
      uint64_t v30 = 73;
      break;
    }
  }
  v42[17] = +[NSNumber numberWithInt:v30];
  v41[18] = @"timeOfDayHour";
  long long v31 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
  uint64_t v32 = 0;
  v42[18] = v31;
  v41[19] = @"timeOfDayBucketed";
  uint64_t v33 = 0xFFFFFFFFLL;
  while (dword_101D81D28[v32] <= *(_DWORD *)(a1 + 80))
  {
    uint64_t v33 = (v33 + 1);
    if (++v32 == 7)
    {
      uint64_t v33 = 6;
      break;
    }
  }
  v42[19] = +[NSNumber numberWithInt:v33];
  v41[20] = @"signalEnvironment";
  v42[20] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 112)];
  v41[21] = @"numberOfAlertsPerDay";
  int v34 = *(_DWORD *)(v2 + 52) + *(_DWORD *)(v2 + 48);
  int v35 = *(_DWORD *)(v2 + 56);
  uint64_t v36 = (v34 + v35);
  if (v34 + v35 < 0)
  {
    uint64_t v36 = 0xFFFFFFFFLL;
  }
  else if (v36 < 0x3E9)
  {
    if (v36 < 0x65)
    {
      if (v36 >= 0xB) {
        uint64_t v36 = v34 + v35 - (v34 + v35) % 0xAu;
      }
    }
    else
    {
      uint64_t v36 = v34 + v35 - (unsigned __int16)(v34 + v35) % 0x64u;
    }
  }
  else
  {
    uint64_t v36 = 1000 * (v36 / 0x3E8);
  }
  v42[21] = +[NSNumber numberWithInt:v36];
  v41[22] = @"numberOfAlertsPerWeek";
  uint64_t v37 = *(unsigned int *)(v2 + 88);
  if ((v37 & 0x80000000) != 0)
  {
    uint64_t v37 = 0xFFFFFFFFLL;
  }
  else if (v37 < 0x3E9)
  {
    if (v37 < 0x65)
    {
      if (v37 >= 0xB) {
        uint64_t v37 = *(_DWORD *)(v2 + 88) - *(_DWORD *)(v2 + 88) % 0xAu;
      }
    }
    else
    {
      uint64_t v37 = v37 - (unsigned __int16)v37 % 0x64u;
    }
  }
  else
  {
    uint64_t v37 = 1000 * (v37 / 0x3E8);
  }
  int v38 = +[NSNumber numberWithInt:v37];
  uint64_t v39 = *(void *)(a1 + 56);
  v42[22] = v38;
  v42[23] = v39;
  v41[23] = @"productName";
  v41[24] = @"settingsVersion";
  v42[24] = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 72)];
  return +[NSDictionary dictionaryWithObjects:v42 forKeys:v41 count:25];
}

void sub_100B792F0(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  sub_100199238(a1, a4);
  [a2 address];
  if (a3)
  {
    sub_100B757C0(a4);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E89B0);
    }
    uint64_t v7 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138477827;
      uint64_t v13 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "TaMetric, submitting visit metrics:%{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E89B0);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::handleVisitMetrics(TASPAdvertisement *, TAMetricsVisit *, CFAbsoluteTime, NSUInteger)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    id v8 = +[TASPAdvertisement TASPAdvertisementDeviceTypeToString:](TASPAdvertisement, "TASPAdvertisementDeviceTypeToString:", [a2 getDeviceType]);
    NSSelectorFromString(@"getLatestAdvTypeToString:");
    if (objc_opt_respondsToSelector()) {
      [a2 getLatestAdvTypeToString:v8];
    }
    AnalyticsSendEventLazy();
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E89B0);
    }
    double v9 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "TaMetric, handleInterVisitMetric got nil TAMetricsVisit", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E89B0);
      }
      double v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLTrackingAvoidanceMetrics::handleVisitMetrics(TASPAdvertisement *, TAMetricsVisit *, CFAbsoluteTime, NSUInteger)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

NSDictionary *sub_100B796C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  v69[0] = @"visit";
  v68[0] = @"reason";
  v68[1] = @"deviceIdentifier";
  v69[1] = [*(id *)(a1 + 32) hexString];
  unsigned int v68[2] = @"totalVisitCount";
  signed int v3 = [*(id *)(a1 + 40) totalVisitCount];
  uint64_t v4 = 0;
  while (dword_101D81D44[v4] <= v3)
  {
    if (++v4 == 32)
    {
      uint64_t v5 = 31;
      goto LABEL_6;
    }
  }
  uint64_t v5 = (v4 - 1);
LABEL_6:
  v69[2] = +[NSNumber numberWithInt:v5];
  v68[3] = @"distinctVisitCount";
  signed int v6 = [*(id *)(a1 + 40) totalDistinctVisitCount];
  uint64_t v7 = 0;
  while (dword_101D81D44[v7] <= v6)
  {
    if (++v7 == 32)
    {
      uint64_t v8 = 31;
      goto LABEL_11;
    }
  }
  uint64_t v8 = (v7 - 1);
LABEL_11:
  v69[3] = +[NSNumber numberWithInt:v8];
  void v68[4] = @"lastVisitCount";
  signed int v9 = [*(id *)(a1 + 40) consecutiveVisitCount];
  uint64_t v10 = 0;
  while (dword_101D81D44[v10] <= v9)
  {
    if (++v10 == 32)
    {
      uint64_t v11 = 31;
      goto LABEL_16;
    }
  }
  uint64_t v11 = (v10 - 1);
LABEL_16:
  v69[4] = +[NSNumber numberWithInt:v11];
  v68[5] = @"lastDistinctVisitCount";
  signed int v12 = [*(id *)(a1 + 40) consecutiveAndDistinctFromPrevVisitCount];
  uint64_t v13 = 0;
  while (dword_101D81D44[v13] <= v12)
  {
    if (++v13 == 32)
    {
      uint64_t v14 = 31;
      goto LABEL_21;
    }
  }
  uint64_t v14 = (v13 - 1);
LABEL_21:
  v69[5] = +[NSNumber numberWithInt:v14];
  v68[6] = @"durationOfVisitEntryConsideration";
  [*(id *)(a1 + 40) durationOfVisitEntryConsideration];
  unsigned char v69[6] = +[NSNumber numberWithDouble:v15 / 60.0];
  v68[7] = @"durationOfVisitExitConsideration";
  [*(id *)(a1 + 40) durationOfVisitExitConsideration];
  v69[7] = +[NSNumber numberWithDouble:v16 / 60.0];
  v68[8] = @"visitEntryDetectionDelay";
  if ([*(id *)(a1 + 40) visitEntryDelay])
  {
    [objc_msgSend(*(id *)(a1 + 40), "visitEntryDelay") duration];
    uint64_t v18 = +[NSNumber numberWithDouble:v17 / 60.0];
  }
  else
  {
    uint64_t v18 = +[NSNull null];
  }
  v69[8] = v18;
  v68[9] = @"visitExitDetectionDelay";
  if ([*(id *)(a1 + 40) visitExitDelay])
  {
    [objc_msgSend(*(id *)(a1 + 40), "visitExitDelay") duration];
    uint64_t v20 = +[NSNumber numberWithDouble:v19 / 60.0];
  }
  else
  {
    uint64_t v20 = +[NSNull null];
  }
  v69[9] = v20;
  unsigned char v68[10] = @"distance";
  if ([*(id *)(a1 + 40) distanceToPreviousSeenVisit]) {
    uint64_t v21 = (NSNull *)[*(id *)(a1 + 40) distanceToPreviousSeenVisit];
  }
  else {
    uint64_t v21 = +[NSNull null];
  }
  v69[10] = v21;
  v68[11] = @"latitude";
  [*(id *)(a1 + 40) latitude];
  v69[11] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  unsigned char v68[12] = @"longitude";
  [*(id *)(a1 + 40) longitude];
  v69[12] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v68[13] = @"durationOfVisitEntryConsiderationBucketed";
  if ([*(id *)(a1 + 40) visitEntryDelay])
  {
    [*(id *)(a1 + 40) durationOfVisitEntryConsideration];
    uint64_t v22 = 0;
    double v24 = v23 / 60.0;
    while (dbl_101D81DC8[v22] <= v24)
    {
      if (++v22 == 39)
      {
        uint64_t v25 = 38;
        goto LABEL_37;
      }
    }
    uint64_t v25 = (v22 - 1);
LABEL_37:
    uint64_t v26 = +[NSNumber numberWithInt:v25];
  }
  else
  {
    uint64_t v26 = +[NSNull null];
  }
  v69[13] = v26;
  v68[14] = @"durationOfVisitExitConsiderationBucketed";
  if ([*(id *)(a1 + 40) visitExitDelay])
  {
    [*(id *)(a1 + 40) durationOfVisitExitConsideration];
    uint64_t v27 = 0;
    double v29 = v28 / 60.0;
    while (dbl_101D81DC8[v27] <= v29)
    {
      if (++v27 == 39)
      {
        uint64_t v30 = 38;
        goto LABEL_45;
      }
    }
    uint64_t v30 = (v27 - 1);
LABEL_45:
    long long v31 = +[NSNumber numberWithInt:v30];
  }
  else
  {
    long long v31 = +[NSNull null];
  }
  v69[14] = v31;
  v68[15] = @"visitEntryDetectionDelayBucketed";
  if ([*(id *)(a1 + 40) visitEntryDelay])
  {
    [objc_msgSend(*(id *)(a1 + 40), "visitEntryDelay") duration];
    uint64_t v32 = 0;
    double v34 = v33 / 60.0;
    while (dbl_101D81F00[v32] <= v34)
    {
      if (++v32 == 52)
      {
        uint64_t v35 = 51;
        goto LABEL_53;
      }
    }
    uint64_t v35 = (v32 - 1);
LABEL_53:
    uint64_t v36 = +[NSNumber numberWithInt:v35];
  }
  else
  {
    uint64_t v36 = +[NSNull null];
  }
  v69[15] = v36;
  v68[16] = @"visitExitDetectionDelayBucketed";
  if ([*(id *)(a1 + 40) visitExitDelay])
  {
    [objc_msgSend(*(id *)(a1 + 40), "visitExitDelay") duration];
    uint64_t v37 = 0;
    double v39 = v38 / 60.0;
    while (dbl_101D81F00[v37] <= v39)
    {
      if (++v37 == 52)
      {
        uint64_t v40 = 51;
        goto LABEL_61;
      }
    }
    uint64_t v40 = (v37 - 1);
LABEL_61:
    uint64_t v41 = +[NSNumber numberWithInt:v40];
  }
  else
  {
    uint64_t v41 = +[NSNull null];
  }
  v69[16] = v41;
  v68[17] = @"distanceBucketed";
  if ([*(id *)(a1 + 40) distanceToPreviousSeenVisit])
  {
    [objc_msgSend(*(id *)(a1 + 40), "distanceToPreviousSeenVisit") doubleValue];
    uint64_t v43 = 0;
    while (dbl_101D821B8[v43] <= v42)
    {
      if (++v43 == 33)
      {
        uint64_t v44 = 32;
        goto LABEL_69;
      }
    }
    uint64_t v44 = (v43 - 1);
LABEL_69:
    int v45 = +[NSNumber numberWithInt:v44];
  }
  else
  {
    int v45 = +[NSNull null];
  }
  v69[17] = v45;
  v68[18] = @"latitudeBucketed";
  [*(id *)(a1 + 40) latitude];
  uint64_t v47 = 0;
  uint64_t v48 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101D819A8[v47] <= v46)
  {
    uint64_t v48 = (v48 + 1);
    if (++v47 == 38)
    {
      uint64_t v48 = 37;
      break;
    }
  }
  v69[18] = +[NSNumber numberWithInt:v48];
  v68[19] = @"longitudeBucketed";
  [*(id *)(a1 + 40) longitude];
  uint64_t v50 = 0;
  uint64_t v51 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101D81AD8[v50] <= v49)
  {
    uint64_t v51 = (v51 + 1);
    if (++v50 == 74)
    {
      uint64_t v51 = 73;
      break;
    }
  }
  v69[19] = +[NSNumber numberWithInt:v51];
  v68[20] = @"altitude";
  uint64_t v52 = +[NSNumber numberWithDouble:*(double *)(v2 + 144)];
  uint64_t v53 = 0;
  v69[20] = v52;
  v68[21] = @"altitudeBucketed";
  while (dword_101D81990[v53] <= (int)*(double *)(v2 + 144))
  {
    if (++v53 == 5)
    {
      uint64_t v54 = 4;
      goto LABEL_83;
    }
  }
  uint64_t v54 = (v53 - 1);
LABEL_83:
  v69[21] = +[NSNumber numberWithInt:v54];
  v68[22] = @"demAltitude";
  int v55 = +[NSNumber numberWithDouble:*(double *)(v2 + 648)];
  uint64_t v56 = 0;
  v69[22] = v55;
  v68[23] = @"demAltitudeBucketed";
  while (dword_101D81990[v56] <= (int)*(double *)(v2 + 648))
  {
    if (++v56 == 5)
    {
      uint64_t v57 = 4;
      goto LABEL_88;
    }
  }
  uint64_t v57 = (v56 - 1);
LABEL_88:
  v69[23] = +[NSNumber numberWithInt:v57];
  v68[24] = @"timeOfDayHour";
  int v58 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
  uint64_t v59 = 0;
  v69[24] = v58;
  v68[25] = @"timeOfDayBucketed";
  uint64_t v60 = 0xFFFFFFFFLL;
  while (dword_101D81D28[v59] <= *(_DWORD *)(a1 + 72))
  {
    uint64_t v60 = (v60 + 1);
    if (++v59 == 7)
    {
      uint64_t v60 = 6;
      break;
    }
  }
  v69[25] = +[NSNumber numberWithInt:v60];
  v68[26] = @"signalEnvironment";
  v69[26] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 112)];
  v68[27] = @"numberOfAlertsPerDay";
  int v61 = *(_DWORD *)(v2 + 52) + *(_DWORD *)(v2 + 48);
  int v62 = *(_DWORD *)(v2 + 56);
  uint64_t v63 = (v61 + v62);
  if (v61 + v62 < 0)
  {
    uint64_t v63 = 0xFFFFFFFFLL;
  }
  else if (v63 < 0x3E9)
  {
    if (v63 < 0x65)
    {
      if (v63 >= 0xB) {
        uint64_t v63 = v61 + v62 - (v61 + v62) % 0xAu;
      }
    }
    else
    {
      uint64_t v63 = v61 + v62 - (unsigned __int16)(v61 + v62) % 0x64u;
    }
  }
  else
  {
    uint64_t v63 = 1000 * (v63 / 0x3E8);
  }
  v69[27] = +[NSNumber numberWithInt:v63];
  v68[28] = @"numberOfAlertsPerWeek";
  uint64_t v64 = *(unsigned int *)(v2 + 88);
  if ((v64 & 0x80000000) != 0)
  {
    uint64_t v64 = 0xFFFFFFFFLL;
  }
  else if (v64 < 0x3E9)
  {
    if (v64 < 0x65)
    {
      if (v64 >= 0xB) {
        uint64_t v64 = *(_DWORD *)(v2 + 88) - *(_DWORD *)(v2 + 88) % 0xAu;
      }
    }
    else
    {
      uint64_t v64 = v64 - (unsigned __int16)v64 % 0x64u;
    }
  }
  else
  {
    uint64_t v64 = 1000 * (v64 / 0x3E8);
  }
  uint64_t v65 = +[NSNumber numberWithInt:v64];
  uint64_t v66 = *(void *)(a1 + 48);
  v69[28] = v65;
  v69[29] = v66;
  v68[29] = @"productName";
  v68[30] = @"settingsVersion";
  v69[30] = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 64)];
  return +[NSDictionary dictionaryWithObjects:v69 forKeys:v68 count:31];
}

void sub_100B79FE8(uint64_t a1, void *a2, void *a3, double a4)
{
  sub_100199238(a1, a4);
  id v7 = [a2 address];
  if (!a3 || !v7)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E89B0);
    }
    uint64_t v14 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "TaMetric, handleDetectionMetrics got nil TAMetricsDetection", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 == -1) {
        goto LABEL_22;
      }
      goto LABEL_83;
    }
    return;
  }
  unint64_t v8 = (unint64_t)[a3 detectionType];
  id v9 = +[TAMetricsDetection convertTADetectionTypeToString:v8];
  sub_100B757C0(a4);
  if (v8 > 0x10) {
    goto LABEL_63;
  }
  if (((1 << v8) & 0xF382) == 0)
  {
    if (((1 << v8) & 0xC48) != 0)
    {
      id v20 = [a3 singleVisitDetectionMetrics];
      if (v20)
      {
        id v21 = v20;
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022E89B0);
        }
        uint64_t v22 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 138477827;
          id v32 = v21;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "TaMetric, submitting single-visit detection details metrics:%{private}@", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022E89B0);
          }
          uint64_t v30 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::handleDetectionMetrics(TASPAdvertisement *, TAMetricsDetection *, CFAbsoluteTime, NSUInteger)", "%s\n", v30);
          if (v30 != (char *)buf) {
            free(v30);
          }
        }
        id v23 = +[TASPAdvertisement TASPAdvertisementDeviceTypeToString:](TASPAdvertisement, "TASPAdvertisementDeviceTypeToString:", [a2 getDeviceType]);
        NSSelectorFromString(@"getLatestAdvTypeToString:");
        if (objc_opt_respondsToSelector()) {
          [a2 getLatestAdvTypeToString:v23];
        }
        goto LABEL_41;
      }
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E89B0);
      }
      uint64_t v26 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "TaMetric, handleDetectionMetrics got nil TASingleVisitDetectionMetrics", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        goto LABEL_83;
      }
LABEL_22:
      double v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLTrackingAvoidanceMetrics::handleDetectionMetrics(TASPAdvertisement *, TAMetricsDetection *, CFAbsoluteTime, NSUInteger)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
      return;
    }
    if (((1 << v8) & 0x10034) != 0)
    {
      id v10 = [a3 visitDetectionMetrics];
      if (v10)
      {
        id v11 = v10;
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022E89B0);
        }
        signed int v12 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138477827;
          id v32 = v11;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "TaMetric, submitting visit detection details metrics:%{private}@", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022E89B0);
          }
          double v29 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::handleDetectionMetrics(TASPAdvertisement *, TAMetricsDetection *, CFAbsoluteTime, NSUInteger)", "%s\n", v29);
          if (v29 != (char *)buf) {
            free(v29);
          }
        }
        id v13 = +[TASPAdvertisement TASPAdvertisementDeviceTypeToString:](TASPAdvertisement, "TASPAdvertisementDeviceTypeToString:", [a2 getDeviceType]);
        NSSelectorFromString(@"getLatestAdvTypeToString:");
        if (objc_opt_respondsToSelector()) {
          [a2 getLatestAdvTypeToString:v13];
        }
LABEL_41:
        AnalyticsSendEventLazy();
        return;
      }
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E89B0);
      }
      uint64_t v25 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "TaMetric, handleDetectionMetrics got nil TAVisitDetectionMetrics", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 == -1) {
          goto LABEL_22;
        }
LABEL_83:
        dispatch_once(&qword_1024193A0, &stru_1022E89B0);
        goto LABEL_22;
      }
      return;
    }
LABEL_63:
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E89B0);
    }
    uint64_t v27 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v32 = v9;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "TaMetric, handleDetectionMetrics got unsupported detectionType %{public}@", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      goto LABEL_83;
    }
    goto LABEL_22;
  }
  id v16 = [a3 generalDetectionMetrics];
  if (v16)
  {
    id v17 = v16;
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E89B0);
    }
    uint64_t v18 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138477827;
      id v32 = v17;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "TaMetric, submitting general detection details metrics:%{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E89B0);
      }
      double v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::handleDetectionMetrics(TASPAdvertisement *, TAMetricsDetection *, CFAbsoluteTime, NSUInteger)", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    id v19 = +[TASPAdvertisement TASPAdvertisementDeviceTypeToString:](TASPAdvertisement, "TASPAdvertisementDeviceTypeToString:", [a2 getDeviceType]);
    NSSelectorFromString(@"getLatestAdvTypeToString:");
    if (objc_opt_respondsToSelector()) {
      [a2 getLatestAdvTypeToString:v19];
    }
    goto LABEL_41;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022E89B0);
  }
  double v24 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "TaMetric, handleDetectionMetrics got nil TAGeneralDetectionMetrics", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1) {
      goto LABEL_22;
    }
    goto LABEL_83;
  }
}

NSDictionary *sub_100B7ABD4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  v41[0] = @"detection";
  v40[0] = @"reason";
  v40[1] = @"deviceIdentifier";
  id v3 = [*(id *)(a1 + 32) hexString];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(a1 + 48);
  v41[1] = v3;
  v41[2] = v5;
  void v40[2] = @"detectionAlgorithm";
  v40[3] = @"detectionDistance";
  [objc_msgSend(v4, "interVisitMetrics") distance];
  v41[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  void v40[4] = @"detectionDistanceBucketed";
  [objc_msgSend(*(id *)(a1 + 48), "interVisitMetrics") distance];
  uint64_t v7 = 0;
  while (dbl_101D821B8[v7] <= v6)
  {
    if (++v7 == 33)
    {
      uint64_t v8 = 32;
      goto LABEL_6;
    }
  }
  uint64_t v8 = (v7 - 1);
LABEL_6:
  v41[4] = +[NSNumber numberWithInt:v8];
  v40[5] = @"detectionDuration";
  [objc_msgSend(*(id *)(a1 + 48), "interVisitMetrics") duration];
  v41[5] = +[NSNumber numberWithDouble:v9 / 60.0];
  v40[6] = @"detectionDurationBucketed";
  [objc_msgSend(*(id *)(a1 + 48), "interVisitMetrics") duration];
  uint64_t v10 = 0;
  double v12 = v11 / 60.0;
  while (dbl_101D820A0[v10] <= v12)
  {
    if (++v10 == 35)
    {
      uint64_t v13 = 34;
      goto LABEL_11;
    }
  }
  uint64_t v13 = (v10 - 1);
LABEL_11:
  v41[6] = +[NSNumber numberWithInt:v13];
  void v40[7] = @"detectionDominantUserActivity";
  uint64_t v14 = (char *)[*(id *)(a1 + 48) dominantUserActivity];
  CFStringRef v15 = @"unknown";
  if ((unint64_t)(v14 - 1) <= 2) {
    CFStringRef v15 = *(&off_1022E89D0 + (void)(v14 - 1));
  }
  v41[7] = v15;
  v40[8] = @"detectionPeopleDensityState";
  id v16 = [*(id *)(a1 + 48) pdState];
  CFStringRef v17 = @"crowd";
  if (v16 != (id)100) {
    CFStringRef v17 = @"unknown";
  }
  if (!v16) {
    CFStringRef v17 = @"alone";
  }
  v41[8] = v17;
  v40[9] = @"detectionHasGeoNavHint";
  v41[9] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 48) geoNavHint]);
  v40[10] = @"detectionHasVehicleConnectionHint";
  v41[10] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 48) vehicularStateHint]);
  v40[11] = @"altitude";
  uint64_t v18 = +[NSNumber numberWithDouble:*(double *)(v2 + 144)];
  uint64_t v19 = 0;
  v41[11] = v18;
  v40[12] = @"altitudeBucketed";
  while (dword_101D81990[v19] <= (int)*(double *)(v2 + 144))
  {
    if (++v19 == 5)
    {
      uint64_t v20 = 4;
      goto LABEL_22;
    }
  }
  uint64_t v20 = (v19 - 1);
LABEL_22:
  v41[12] = +[NSNumber numberWithInt:v20];
  v40[13] = @"demAltitude";
  id v21 = +[NSNumber numberWithDouble:*(double *)(v2 + 648)];
  uint64_t v22 = 0;
  v41[13] = v21;
  v40[14] = @"demAltitudeBucketed";
  while (dword_101D81990[v22] <= (int)*(double *)(v2 + 648))
  {
    if (++v22 == 5)
    {
      uint64_t v23 = 4;
      goto LABEL_27;
    }
  }
  uint64_t v23 = (v22 - 1);
LABEL_27:
  v41[14] = +[NSNumber numberWithInt:v23];
  v40[15] = @"latitude";
  double v24 = +[NSNumber numberWithDouble:*(double *)(v2 + 120)];
  uint64_t v25 = 0;
  v41[15] = v24;
  v40[16] = @"latitudeBucketed";
  uint64_t v26 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101D819A8[v25] <= *(double *)(v2 + 120))
  {
    uint64_t v26 = (v26 + 1);
    if (++v25 == 38)
    {
      uint64_t v26 = 37;
      break;
    }
  }
  v41[16] = +[NSNumber numberWithInt:v26];
  v40[17] = @"longitude";
  uint64_t v27 = +[NSNumber numberWithDouble:*(double *)(v2 + 128)];
  uint64_t v28 = 0;
  v41[17] = v27;
  v40[18] = @"longitudeBucketed";
  uint64_t v29 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101D81AD8[v28] <= *(double *)(v2 + 128))
  {
    uint64_t v29 = (v29 + 1);
    if (++v28 == 74)
    {
      uint64_t v29 = 73;
      break;
    }
  }
  v41[18] = +[NSNumber numberWithInt:v29];
  v40[19] = @"timeOfDayHour";
  uint64_t v30 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
  uint64_t v31 = 0;
  v41[19] = v30;
  v40[20] = @"timeOfDayBucketed";
  uint64_t v32 = 0xFFFFFFFFLL;
  while (dword_101D81D28[v31] <= *(_DWORD *)(a1 + 80))
  {
    uint64_t v32 = (v32 + 1);
    if (++v31 == 7)
    {
      uint64_t v32 = 6;
      break;
    }
  }
  v41[20] = +[NSNumber numberWithInt:v32];
  v40[21] = @"signalEnvironment";
  v41[21] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 112)];
  v40[22] = @"numberOfAlertsPerDay";
  int v33 = *(_DWORD *)(v2 + 52) + *(_DWORD *)(v2 + 48);
  int v34 = *(_DWORD *)(v2 + 56);
  uint64_t v35 = (v33 + v34);
  if (v33 + v34 < 0)
  {
    uint64_t v35 = 0xFFFFFFFFLL;
  }
  else if (v35 < 0x3E9)
  {
    if (v35 < 0x65)
    {
      if (v35 >= 0xB) {
        uint64_t v35 = v33 + v34 - (v33 + v34) % 0xAu;
      }
    }
    else
    {
      uint64_t v35 = v33 + v34 - (unsigned __int16)(v33 + v34) % 0x64u;
    }
  }
  else
  {
    uint64_t v35 = 1000 * (v35 / 0x3E8);
  }
  v41[22] = +[NSNumber numberWithInt:v35];
  v40[23] = @"numberOfAlertsPerWeek";
  uint64_t v36 = *(unsigned int *)(v2 + 88);
  if ((v36 & 0x80000000) != 0)
  {
    uint64_t v36 = 0xFFFFFFFFLL;
  }
  else if (v36 < 0x3E9)
  {
    if (v36 < 0x65)
    {
      if (v36 >= 0xB) {
        uint64_t v36 = *(_DWORD *)(v2 + 88) - *(_DWORD *)(v2 + 88) % 0xAu;
      }
    }
    else
    {
      uint64_t v36 = v36 - (unsigned __int16)v36 % 0x64u;
    }
  }
  else
  {
    uint64_t v36 = 1000 * (v36 / 0x3E8);
  }
  uint64_t v37 = +[NSNumber numberWithInt:v36];
  uint64_t v38 = *(void *)(a1 + 56);
  v41[23] = v37;
  v41[24] = v38;
  v40[24] = @"productName";
  v40[25] = @"settingsVersion";
  void v41[25] = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 72)];
  return +[NSDictionary dictionaryWithObjects:v41 forKeys:v40 count:26];
}

NSDictionary *sub_100B7B1F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  v38[0] = @"detection";
  v37[0] = @"reason";
  v37[1] = @"deviceIdentifier";
  id v3 = [*(id *)(a1 + 32) hexString];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(a1 + 48);
  v38[1] = v3;
  void v38[2] = v5;
  void v37[2] = @"detectionAlgorithm";
  v37[3] = @"detectionDistance";
  [v4 distanceToPreviousVisit];
  v38[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v37[4] = @"detectionDistanceBucketed";
  [*(id *)(a1 + 48) distanceToPreviousVisit];
  uint64_t v7 = 0;
  while (dbl_101D821B8[v7] <= v6)
  {
    if (++v7 == 33)
    {
      uint64_t v8 = 32;
      goto LABEL_6;
    }
  }
  uint64_t v8 = (v7 - 1);
LABEL_6:
  v38[4] = +[NSNumber numberWithInt:v8];
  v37[5] = @"detectionResidualDistance";
  [*(id *)(a1 + 48) residualDistanceToPreviousVisit];
  v38[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v37[6] = @"detectionResidualDistanceBucketed";
  [*(id *)(a1 + 48) residualDistanceToPreviousVisit];
  uint64_t v10 = 0;
  while (dbl_101D821B8[v10] <= v9)
  {
    if (++v10 == 33)
    {
      uint64_t v11 = 32;
      goto LABEL_11;
    }
  }
  uint64_t v11 = (v10 - 1);
LABEL_11:
  v38[6] = +[NSNumber numberWithInt:v11];
  v37[7] = @"detectionNumOfSigmaBetweenVisits";
  id v12 = [*(id *)(a1 + 48) nSigmaBetweenVisits];
  uint64_t v13 = 0;
  uint64_t v14 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101D822C0[v13] <= (double)(unint64_t)v12)
  {
    uint64_t v14 = (v14 + 1);
    if (++v13 == 12)
    {
      uint64_t v14 = 11;
      break;
    }
  }
  v38[7] = +[NSNumber numberWithInt:v14];
  v37[8] = @"altitude";
  CFStringRef v15 = +[NSNumber numberWithDouble:*(double *)(v2 + 144)];
  uint64_t v16 = 0;
  v38[8] = v15;
  v37[9] = @"altitudeBucketed";
  while (dword_101D81990[v16] <= (int)*(double *)(v2 + 144))
  {
    if (++v16 == 5)
    {
      uint64_t v17 = 4;
      goto LABEL_20;
    }
  }
  uint64_t v17 = (v16 - 1);
LABEL_20:
  v38[9] = +[NSNumber numberWithInt:v17];
  v37[10] = @"demAltitude";
  uint64_t v18 = +[NSNumber numberWithDouble:*(double *)(v2 + 648)];
  uint64_t v19 = 0;
  v38[10] = v18;
  v37[11] = @"demAltitudeBucketed";
  while (dword_101D81990[v19] <= (int)*(double *)(v2 + 648))
  {
    if (++v19 == 5)
    {
      uint64_t v20 = 4;
      goto LABEL_25;
    }
  }
  uint64_t v20 = (v19 - 1);
LABEL_25:
  v38[11] = +[NSNumber numberWithInt:v20];
  v37[12] = @"latitude";
  id v21 = +[NSNumber numberWithDouble:*(double *)(v2 + 120)];
  uint64_t v22 = 0;
  v38[12] = v21;
  v37[13] = @"latitudeBucketed";
  uint64_t v23 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101D819A8[v22] <= *(double *)(v2 + 120))
  {
    uint64_t v23 = (v23 + 1);
    if (++v22 == 38)
    {
      uint64_t v23 = 37;
      break;
    }
  }
  v38[13] = +[NSNumber numberWithInt:v23];
  v37[14] = @"longitude";
  double v24 = +[NSNumber numberWithDouble:*(double *)(v2 + 128)];
  uint64_t v25 = 0;
  v38[14] = v24;
  v37[15] = @"longitudeBucketed";
  uint64_t v26 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101D81AD8[v25] <= *(double *)(v2 + 128))
  {
    uint64_t v26 = (v26 + 1);
    if (++v25 == 74)
    {
      uint64_t v26 = 73;
      break;
    }
  }
  v38[15] = +[NSNumber numberWithInt:v26];
  v37[16] = @"timeOfDayHour";
  uint64_t v27 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
  uint64_t v28 = 0;
  v38[16] = v27;
  v37[17] = @"timeOfDayBucketed";
  uint64_t v29 = 0xFFFFFFFFLL;
  while (dword_101D81D28[v28] <= *(_DWORD *)(a1 + 80))
  {
    uint64_t v29 = (v29 + 1);
    if (++v28 == 7)
    {
      uint64_t v29 = 6;
      break;
    }
  }
  v38[17] = +[NSNumber numberWithInt:v29];
  v37[18] = @"signalEnvironment";
  v38[18] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 112)];
  v37[19] = @"numberOfAlertsPerDay";
  int v30 = *(_DWORD *)(v2 + 52) + *(_DWORD *)(v2 + 48);
  int v31 = *(_DWORD *)(v2 + 56);
  uint64_t v32 = (v30 + v31);
  if (v30 + v31 < 0)
  {
    uint64_t v32 = 0xFFFFFFFFLL;
  }
  else if (v32 < 0x3E9)
  {
    if (v32 < 0x65)
    {
      if (v32 >= 0xB) {
        uint64_t v32 = v30 + v31 - (v30 + v31) % 0xAu;
      }
    }
    else
    {
      uint64_t v32 = v30 + v31 - (unsigned __int16)(v30 + v31) % 0x64u;
    }
  }
  else
  {
    uint64_t v32 = 1000 * (v32 / 0x3E8);
  }
  v38[19] = +[NSNumber numberWithInt:v32];
  v37[20] = @"numberOfAlertsPerWeek";
  uint64_t v33 = *(unsigned int *)(v2 + 88);
  if ((v33 & 0x80000000) != 0)
  {
    uint64_t v33 = 0xFFFFFFFFLL;
  }
  else if (v33 < 0x3E9)
  {
    if (v33 < 0x65)
    {
      if (v33 >= 0xB) {
        uint64_t v33 = *(_DWORD *)(v2 + 88) - *(_DWORD *)(v2 + 88) % 0xAu;
      }
    }
    else
    {
      uint64_t v33 = v33 - (unsigned __int16)v33 % 0x64u;
    }
  }
  else
  {
    uint64_t v33 = 1000 * (v33 / 0x3E8);
  }
  int v34 = +[NSNumber numberWithInt:v33];
  uint64_t v35 = *(void *)(a1 + 56);
  v38[20] = v34;
  v38[21] = v35;
  v37[21] = @"productName";
  v37[22] = @"settingsVersion";
  v38[22] = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 72)];
  return +[NSDictionary dictionaryWithObjects:v38 forKeys:v37 count:23];
}

NSDictionary *sub_100B7B778(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  v37[0] = @"detection";
  v36[0] = @"reason";
  v36[1] = @"deviceIdentifier";
  id v3 = [*(id *)(a1 + 32) hexString];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(a1 + 48);
  v37[1] = v3;
  void v37[2] = v5;
  void v36[2] = @"detectionAlgorithm";
  v36[3] = @"detectionDistance";
  [objc_msgSend(v4, "interVisitMetrics") distance];
  v37[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  void v36[4] = @"detectionDistanceBucketed";
  [objc_msgSend(*(id *)(a1 + 48), "interVisitMetrics") distance];
  uint64_t v7 = 0;
  while (dbl_101D821B8[v7] <= v6)
  {
    if (++v7 == 33)
    {
      uint64_t v8 = 32;
      goto LABEL_6;
    }
  }
  uint64_t v8 = (v7 - 1);
LABEL_6:
  v37[4] = +[NSNumber numberWithInt:v8];
  v36[5] = @"detectionDuration";
  [objc_msgSend(*(id *)(a1 + 48), "interVisitMetrics") duration];
  v37[5] = +[NSNumber numberWithDouble:v9 / 60.0];
  v36[6] = @"detectionDurationBucketed";
  [objc_msgSend(*(id *)(a1 + 48), "interVisitMetrics") duration];
  uint64_t v10 = 0;
  double v12 = v11 / 60.0;
  while (dbl_101D820A0[v10] <= v12)
  {
    if (++v10 == 35)
    {
      uint64_t v13 = 34;
      goto LABEL_11;
    }
  }
  uint64_t v13 = (v10 - 1);
LABEL_11:
  v37[6] = +[NSNumber numberWithInt:v13];
  v36[7] = @"altitude";
  uint64_t v14 = +[NSNumber numberWithDouble:*(double *)(v2 + 144)];
  uint64_t v15 = 0;
  v37[7] = v14;
  char v36[8] = @"altitudeBucketed";
  while (dword_101D81990[v15] <= (int)*(double *)(v2 + 144))
  {
    if (++v15 == 5)
    {
      uint64_t v16 = 4;
      goto LABEL_16;
    }
  }
  uint64_t v16 = (v15 - 1);
LABEL_16:
  v37[8] = +[NSNumber numberWithInt:v16];
  v36[9] = @"demAltitude";
  uint64_t v17 = +[NSNumber numberWithDouble:*(double *)(v2 + 648)];
  uint64_t v18 = 0;
  v37[9] = v17;
  v36[10] = @"demAltitudeBucketed";
  while (dword_101D81990[v18] <= (int)*(double *)(v2 + 648))
  {
    if (++v18 == 5)
    {
      uint64_t v19 = 4;
      goto LABEL_21;
    }
  }
  uint64_t v19 = (v18 - 1);
LABEL_21:
  v37[10] = +[NSNumber numberWithInt:v19];
  v36[11] = @"latitude";
  uint64_t v20 = +[NSNumber numberWithDouble:*(double *)(v2 + 120)];
  uint64_t v21 = 0;
  v37[11] = v20;
  v36[12] = @"latitudeBucketed";
  uint64_t v22 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101D819A8[v21] <= *(double *)(v2 + 120))
  {
    uint64_t v22 = (v22 + 1);
    if (++v21 == 38)
    {
      uint64_t v22 = 37;
      break;
    }
  }
  v37[12] = +[NSNumber numberWithInt:v22];
  v36[13] = @"longitude";
  uint64_t v23 = +[NSNumber numberWithDouble:*(double *)(v2 + 128)];
  uint64_t v24 = 0;
  v37[13] = v23;
  v36[14] = @"longitudeBucketed";
  uint64_t v25 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101D81AD8[v24] <= *(double *)(v2 + 128))
  {
    uint64_t v25 = (v25 + 1);
    if (++v24 == 74)
    {
      uint64_t v25 = 73;
      break;
    }
  }
  v37[14] = +[NSNumber numberWithInt:v25];
  v36[15] = @"timeOfDayHour";
  uint64_t v26 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
  uint64_t v27 = 0;
  v37[15] = v26;
  v36[16] = @"timeOfDayBucketed";
  uint64_t v28 = 0xFFFFFFFFLL;
  while (dword_101D81D28[v27] <= *(_DWORD *)(a1 + 80))
  {
    uint64_t v28 = (v28 + 1);
    if (++v27 == 7)
    {
      uint64_t v28 = 6;
      break;
    }
  }
  v37[16] = +[NSNumber numberWithInt:v28];
  v36[17] = @"signalEnvironment";
  v37[17] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 112)];
  v36[18] = @"numberOfAlertsPerDay";
  int v29 = *(_DWORD *)(v2 + 52) + *(_DWORD *)(v2 + 48);
  int v30 = *(_DWORD *)(v2 + 56);
  uint64_t v31 = (v29 + v30);
  if (v29 + v30 < 0)
  {
    uint64_t v31 = 0xFFFFFFFFLL;
  }
  else if (v31 < 0x3E9)
  {
    if (v31 < 0x65)
    {
      if (v31 >= 0xB) {
        uint64_t v31 = v29 + v30 - (v29 + v30) % 0xAu;
      }
    }
    else
    {
      uint64_t v31 = v29 + v30 - (unsigned __int16)(v29 + v30) % 0x64u;
    }
  }
  else
  {
    uint64_t v31 = 1000 * (v31 / 0x3E8);
  }
  v37[18] = +[NSNumber numberWithInt:v31];
  v36[19] = @"numberOfAlertsPerWeek";
  uint64_t v32 = *(unsigned int *)(v2 + 88);
  if ((v32 & 0x80000000) != 0)
  {
    uint64_t v32 = 0xFFFFFFFFLL;
  }
  else if (v32 < 0x3E9)
  {
    if (v32 < 0x65)
    {
      if (v32 >= 0xB) {
        uint64_t v32 = *(_DWORD *)(v2 + 88) - *(_DWORD *)(v2 + 88) % 0xAu;
      }
    }
    else
    {
      uint64_t v32 = v32 - (unsigned __int16)v32 % 0x64u;
    }
  }
  else
  {
    uint64_t v32 = 1000 * (v32 / 0x3E8);
  }
  uint64_t v33 = +[NSNumber numberWithInt:v32];
  uint64_t v34 = *(void *)(a1 + 56);
  v37[19] = v33;
  v37[20] = v34;
  v36[20] = @"productName";
  v36[21] = @"settingsVersion";
  v37[21] = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 72)];
  return +[NSDictionary dictionaryWithObjects:v37 forKeys:v36 count:22];
}

void sub_100B7BCD4(uint64_t a1, void *a2, double a3)
{
  sub_100199238(a1, a3);
  if (a2)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E89B0);
    }
    uint64_t v5 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 68289282;
      int v7 = 0;
      __int16 v8 = 2082;
      double v9 = "";
      __int16 v10 = 2082;
      id v11 = [a2 UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"TaMetric, submitting fault metric\", \"faultType\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    sub_100B757C0(a3);
    AnalyticsSendEventLazy();
  }
}

NSDictionary *sub_100B7BE4C(uint64_t a1)
{
  v24[0] = @"reason";
  v24[1] = @"faultReason";
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v25[0] = @"fault";
  v25[1] = v2;
  float v24[2] = @"altitude";
  uint64_t v4 = +[NSNumber numberWithDouble:*(double *)(v3 + 144)];
  uint64_t v5 = 0;
  v25[2] = v4;
  v24[3] = @"altitudeBucketed";
  while (dword_101D81990[v5] <= (int)*(double *)(v3 + 144))
  {
    if (++v5 == 5)
    {
      uint64_t v6 = 4;
      goto LABEL_6;
    }
  }
  uint64_t v6 = (v5 - 1);
LABEL_6:
  void v25[3] = +[NSNumber numberWithInt:v6];
  void v24[4] = @"demAltitude";
  int v7 = +[NSNumber numberWithDouble:*(double *)(v3 + 648)];
  uint64_t v8 = 0;
  void v25[4] = v7;
  v24[5] = @"demAltitudeBucketed";
  while (dword_101D81990[v8] <= (int)*(double *)(v3 + 648))
  {
    if (++v8 == 5)
    {
      uint64_t v9 = 4;
      goto LABEL_11;
    }
  }
  uint64_t v9 = (v8 - 1);
LABEL_11:
  v25[5] = +[NSNumber numberWithInt:v9];
  v24[6] = @"latitude";
  __int16 v10 = +[NSNumber numberWithDouble:*(double *)(v3 + 120)];
  uint64_t v11 = 0;
  v25[6] = v10;
  v24[7] = @"latitudeBucketed";
  uint64_t v12 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101D819A8[v11] <= *(double *)(v3 + 120))
  {
    uint64_t v12 = (v12 + 1);
    if (++v11 == 38)
    {
      uint64_t v12 = 37;
      break;
    }
  }
  v25[7] = +[NSNumber numberWithInt:v12];
  v24[8] = @"longitude";
  uint64_t v13 = +[NSNumber numberWithDouble:*(double *)(v3 + 128)];
  uint64_t v14 = 0;
  v25[8] = v13;
  v24[9] = @"longitudeBucketed";
  uint64_t v15 = 0xFFFFFFFFLL;
  while (*(double *)&qword_101D81AD8[v14] <= *(double *)(v3 + 128))
  {
    uint64_t v15 = (v15 + 1);
    if (++v14 == 74)
    {
      uint64_t v15 = 73;
      break;
    }
  }
  float v25[9] = +[NSNumber numberWithInt:v15];
  v24[10] = @"timeOfDayHour";
  uint64_t v16 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
  uint64_t v17 = 0;
  v25[10] = v16;
  v24[11] = @"timeOfDayBucketed";
  uint64_t v18 = 0xFFFFFFFFLL;
  while (dword_101D81D28[v17] <= *(_DWORD *)(a1 + 56))
  {
    uint64_t v18 = (v18 + 1);
    if (++v17 == 7)
    {
      uint64_t v18 = 6;
      break;
    }
  }
  v25[11] = +[NSNumber numberWithInt:v18];
  v24[12] = @"signalEnvironment";
  v25[12] = +[NSNumber numberWithInt:*(unsigned int *)(v3 + 112)];
  v24[13] = @"numberOfAlertsPerDay";
  int v19 = *(_DWORD *)(v3 + 52) + *(_DWORD *)(v3 + 48);
  int v20 = *(_DWORD *)(v3 + 56);
  uint64_t v21 = (v19 + v20);
  if (v19 + v20 < 0)
  {
    uint64_t v21 = 0xFFFFFFFFLL;
  }
  else if (v21 < 0x3E9)
  {
    if (v21 < 0x65)
    {
      if (v21 >= 0xB) {
        uint64_t v21 = v19 + v20 - (v19 + v20) % 0xAu;
      }
    }
    else
    {
      uint64_t v21 = v19 + v20 - (unsigned __int16)(v19 + v20) % 0x64u;
    }
  }
  else
  {
    uint64_t v21 = 1000 * (v21 / 0x3E8);
  }
  v25[13] = +[NSNumber numberWithInt:v21];
  v24[14] = @"numberOfAlertsPerWeek";
  uint64_t v22 = *(unsigned int *)(v3 + 88);
  if ((v22 & 0x80000000) != 0)
  {
    uint64_t v22 = 0xFFFFFFFFLL;
  }
  else if (v22 < 0x3E9)
  {
    if (v22 < 0x65)
    {
      if (v22 >= 0xB) {
        uint64_t v22 = *(_DWORD *)(v3 + 88) - *(_DWORD *)(v3 + 88) % 0xAu;
      }
    }
    else
    {
      uint64_t v22 = v22 - (unsigned __int16)v22 % 0x64u;
    }
  }
  else
  {
    uint64_t v22 = 1000 * (v22 / 0x3E8);
  }
  v25[14] = +[NSNumber numberWithInt:v22];
  v24[15] = @"settingsVersion";
  v25[15] = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 48)];
  return +[NSDictionary dictionaryWithObjects:v25 forKeys:v24 count:16];
}

uint64_t sub_100B7C26C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 112) = a2;
  return result;
}

NSDictionary *sub_100B7C274(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 32);
  v4[0] = @"uniqueIds";
  v5[0] = +[NSNumber numberWithInt:v2[4]];
  v4[1] = @"detectedIds";
  v5[1] = +[NSNumber numberWithInt:v2[10]];
  v4[2] = @"suspiciousVisits";
  id v5[2] = +[NSNumber numberWithInt:v2[12]];
  double v4[3] = @"suspiciousGeneral";
  fpos_t v5[3] = +[NSNumber numberWithInt:v2[13]];
  void v4[4] = @"suspiciousOther";
  v5[4] = +[NSNumber numberWithInt:v2[14]];
  v4[5] = @"suspiciousTotal";
  v5[5] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 40)];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:6];
}

NSDictionary *sub_100B7C398(uint64_t a1)
{
  CFStringRef v2 = @"detections";
  uint64_t v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
  return +[NSDictionary dictionaryWithObjects:&v3 forKeys:&v2 count:1];
}

void *sub_100B7C41C(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    uint64_t result = sub_1000DC48C(result, *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    result[2] = *(void *)(a2 + 48);
    *(_OWORD *)uint64_t result = v5;
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return result;
}

void sub_100B7C474(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
}

NSDictionary *sub_100B7C488(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  CFStringRef v3 = @"numberOfAlertsPerWeek";
  uint64_t v4 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v1 + 88)];
  return +[NSDictionary dictionaryWithObjects:&v4 forKeys:&v3 count:1];
}

NSDictionary *sub_100B7C50C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  CFStringRef v3 = @"numberOfAlertsPerMonth";
  uint64_t v4 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v1 + 104)];
  return +[NSDictionary dictionaryWithObjects:&v4 forKeys:&v3 count:1];
}

void sub_100B7C590(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_100B7C5C0(uint64_t a1)
{
  uint64_t v2 = 264;
  do
  {
    CFStringRef v3 = *(void **)(a1 + v2 - 24);
    if (v3)
    {
      *(void *)(a1 + v2 - 16) = v3;
      operator delete(v3);
    }
    v2 -= 24;
  }
  while (v2);
  return a1;
}

uint64_t sub_100B7C604(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_100B7C638(uint64_t a1)
{
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_100B7D038(a1 + 144, 360.0, 0.0, 10800.0);
  sub_100B7D038(a1 + 192, 20.0, 0.0, 1000.0);
  sub_100B7D038(a1 + 240, 10.0, 0.0, 200.0);
  sub_100B7D038(a1 + 288, 15.0, 0.0, 180.0);
  *(_DWORD *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  sub_100B7D038(a1 + 648, 10.0, 0.0, 200.0);
  *(_DWORD *)(a1 + 696) = 13;
  sub_100B7D038(a1 + 704, 15.0, 0.0, 180.0);
  *(_DWORD *)(a1 + 752) = 13;
  *(void *)(a1 + 760) = 0;
  *(void *)(a1 + 776) = 0;
  *(void *)(a1 + 768) = 0;
  sub_100B7D038(a1 + 784, 0.7, -4.7, 3.0);
  *(_DWORD *)(a1 + 832) = 13;
  sub_100B7D038(a1 + 840, 0.7, -4.7, 3.0);
  *(_DWORD *)(a1 + 888) = 13;
  uint64_t v2 = sub_100B7D038(a1 + 896, 0.5, -2.5, 3.0);
  *(_DWORD *)(a1 + 944) = 13;
  *(void *)(v2 + 52) = 0;
  *(void *)(v2 + 57) = 0;
  *(void *)(a1 + 968) = 0x7FEFFFFFFFFFFFFFLL;
  *(int64x2_t *)(a1 + 976) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 992) = 0;
  *(void *)(a1 + 1008) = 0;
  *(void *)(a1 + 1000) = 0;
  *(unsigned char *)(a1 + 1016) = 0;
  *(void *)(a1 + 1024) = 0xBFF0000000000000;
  *(void *)(a1 + 1032) = 0;
  *(void *)(a1 + 1048) = 0;
  *(void *)(a1 + 1040) = 0;
  *(void *)(a1 + 1176) = 0;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(int64x2_t *)(a1 + 1440) = vdupq_n_s64(0x42uLL);
  *(void *)(a1 + 1456) = 4;
  *(void *)(a1 + 1464) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 1472) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 1488) = dispatch_queue_create("com.apple.locationd.CLElevationAWDAggregator", 0);
  *(unsigned char *)(a1 + 1496) = 0;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_DWORD *)(a1 + 1696) = 1;
  return a1;
}

void sub_100B7C8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v12 = *(void **)(v10 + 864);
  if (v12)
  {
    *(void *)(v10 + 872) = v12;
    operator delete(v12);
  }
  uint64_t v13 = *(void **)(v10 + 808);
  if (v13)
  {
    *(void *)(v10 + 816) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(v10 + 728);
  if (v14)
  {
    *(void *)(v10 + 736) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(v10 + 672);
  if (v15)
  {
    *(void *)(v10 + 680) = v15;
    operator delete(v15);
  }
  a10 = (void **)(v10 + 456);
  sub_100B7D110(&a10);
  a10 = (void **)(v10 + 432);
  sub_100B7D110(&a10);
  a10 = (void **)(v10 + 408);
  sub_100B7D110(&a10);
  uint64_t v16 = *(void **)(v10 + 384);
  if (v16)
  {
    *(void *)(v10 + 392) = v16;
    operator delete(v16);
  }
  a10 = (void **)(v10 + 360);
  sub_100B7D110(&a10);
  a10 = (void **)(v10 + 336);
  sub_100B7D110(&a10);
  uint64_t v17 = *(void **)(v10 + 312);
  if (v17)
  {
    *(void *)(v10 + 320) = v17;
    operator delete(v17);
  }
  uint64_t v18 = *(void **)(v10 + 264);
  if (v18)
  {
    *(void *)(v10 + 272) = v18;
    operator delete(v18);
  }
  int v19 = *(void **)(v10 + 216);
  if (v19)
  {
    *(void *)(v10 + 224) = v19;
    operator delete(v19);
  }
  int v20 = *(void **)(v10 + 168);
  if (v20)
  {
    *(void *)(v10 + 176) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100B7C9F4()
{
  uint64_t result = sub_10074157C();
  if ((result & 0x10) != 0) {
    operator new();
  }
  return result;
}

void sub_100B7CA40()
{
}

uint64_t sub_100B7CA64()
{
  if (qword_1024803E8 != -1) {
    dispatch_once(&qword_1024803E8, &stru_1022E89E8);
  }
  return qword_10248AA80;
}

void sub_100B7CAAC(uint64_t a1, int a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 1488));
  uint64_t v4 = *(NSObject **)(a1 + 1488);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  id v5[2] = sub_100B7CB38;
  fpos_t v5[3] = &unk_1022B2410;
  v5[4] = a1;
  int v6 = a2;
  dispatch_async(v4, v5);
}

uint64_t sub_100B7CB38(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 1648) = *(_DWORD *)(result + 40);
  return result;
}

void sub_100B7CB48(uint64_t a1, long long *a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 1488));
  uint64_t v4 = *(NSObject **)(a1 + 1488);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  long long v5 = a2[3];
  long long v10 = a2[2];
  long long v11 = v5;
  long long v12 = a2[4];
  long long v6 = a2[1];
  long long v8 = *a2;
  _OWORD v7[2] = sub_100B7CBF8;
  v7[3] = &unk_1022E8A08;
  v7[4] = a1;
  uint64_t v13 = *((void *)a2 + 10);
  long long v9 = v6;
  dispatch_async(v4, v7);
}

void sub_100B7CBF8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 952))
  {
    unsigned int v3 = *(_DWORD *)(v1 + 1648);
    if (v3 >= 5) {
      unsigned int v3 = 5;
    }
    ++*(_DWORD *)(v1 + 4 * v3 + 760);
    double v4 = *(double *)(a1 + 88);
    if (v4 >= 0.0)
    {
      float v6 = log(fmax(v4, 0.000335462628));
      float v7 = *(float *)(v1 + 900);
      if (v7 >= v6) {
        float v6 = *(float *)(v1 + 900);
      }
      float v8 = v6 - v7;
      float v9 = *(float *)(v1 + 904) - v7;
      if (v8 >= v9) {
        float v8 = v9;
      }
      ++*(_DWORD *)(*(void *)(v1 + 920) + 4 * (unint64_t)(float)(v8 / *(float *)(v1 + 896)));
      double v10 = *(double *)(a1 + 104);
      if (v10 < 0.0) {
        double v10 = -v10;
      }
      float v11 = log(fmax(v10, 0.000335462624));
      float v12 = *(float *)(v1 + 788);
      if (v12 >= v11) {
        float v11 = *(float *)(v1 + 788);
      }
      float v13 = v11 - v12;
      float v14 = *(float *)(v1 + 792) - v12;
      if (v13 >= v14) {
        float v13 = v14;
      }
      ++*(_DWORD *)(*(void *)(v1 + 808) + 4 * (unint64_t)(float)(v13 / *(float *)(v1 + 784)));
      float v15 = log(fmax(*(double *)(a1 + 112), 0.000335462624));
      float v16 = *(float *)(v1 + 844);
      if (v16 >= v15) {
        float v15 = *(float *)(v1 + 844);
      }
      float v17 = v15 - v16;
      float v18 = *(float *)(v1 + 848) - v16;
      if (v17 >= v18) {
        float v17 = v18;
      }
      long long v5 = (_DWORD *)(*(void *)(v1 + 864) + 4 * (unint64_t)(float)(v17 / *(float *)(v1 + 840)));
    }
    else
    {
      long long v5 = (_DWORD *)(v1 + 948);
    }
    ++*v5;
  }
}

void sub_100B7CD60(uint64_t a1, double a2, float a3)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 1488));
  float v6 = *(NSObject **)(a1 + 1488);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100B7CDFC;
  block[3] = &unk_1022BE758;
  block[4] = a1;
  *(double *)&void block[5] = a2;
  float v8 = a3;
  dispatch_async(v6, block);
}

double sub_100B7CDFC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  double v2 = *(double *)(v1 + 1464);
  double v3 = *(double *)(a1 + 40);
  if (v2 != 1.79769313e308)
  {
    double v4 = (v3 - v2) / 60.0;
    if (v4 > 0.0)
    {
      double v5 = *(float *)(a1 + 48) - *(double *)(v1 + 1472);
      if (v5 < 0.0) {
        double v5 = -v5;
      }
      float v6 = v5 / v4 * 60.0;
      if (*(unsigned char *)(v1 + 952))
      {
        float v7 = *(float *)(v1 + 652);
        if (v7 >= v6) {
          float v6 = *(float *)(v1 + 652);
        }
        float v8 = v6 - v7;
        float v9 = *(float *)(v1 + 656) - v7;
        if (v8 >= v9) {
          float v8 = v9;
        }
        ++*(_DWORD *)(*(void *)(v1 + 672) + 4 * (unint64_t)(float)(v8 / *(float *)(v1 + 648)));
        double v10 = (float *)(v1 + 704);
        float v11 = v4;
        float v12 = *(float *)(v1 + 708);
        if (v12 >= v11) {
          float v11 = *(float *)(v1 + 708);
        }
        float v13 = v11 - v12;
        float v14 = *(float *)(v1 + 712) - v12;
        if (v13 >= v14) {
          float v13 = v14;
        }
        float v15 = (void *)(v1 + 728);
      }
      else
      {
        float v16 = *(float *)(v1 + 244);
        if (v16 >= v6) {
          float v6 = *(float *)(v1 + 244);
        }
        float v17 = v6 - v16;
        float v18 = *(float *)(v1 + 248) - v16;
        if (v17 >= v18) {
          float v17 = v18;
        }
        ++*(_DWORD *)(*(void *)(v1 + 264) + 4 * (unint64_t)(float)(v17 / *(float *)(v1 + 240)));
        double v10 = (float *)(v1 + 288);
        float v19 = v4;
        float v20 = *(float *)(v1 + 292);
        if (v20 >= v19) {
          float v19 = *(float *)(v1 + 292);
        }
        float v13 = v19 - v20;
        float v21 = *(float *)(v1 + 296) - v20;
        if (v13 >= v21) {
          float v13 = v21;
        }
        float v15 = (void *)(v1 + 312);
      }
      ++*(_DWORD *)(*v15 + 4 * (unint64_t)(float)(v13 / *v10));
    }
  }
  *(double *)(v1 + 1464) = v3;
  double result = *(float *)(a1 + 48);
  *(double *)(v1 + 1472) = result;
  return result;
}

void sub_100B7CF64(uint64_t a1, char a2, char a3)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 1488));
  float v6 = *(NSObject **)(a1 + 1488);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _OWORD v7[2] = sub_100B7D000;
  v7[3] = &unk_1022E8A48;
  v7[4] = a1;
  char v8 = a2;
  char v9 = a3;
  dispatch_async(v6, v7);
}

uint64_t sub_100B7D000(uint64_t result)
{
  uint64_t v1 = *(unsigned char **)(result + 32);
  char v2 = *(unsigned char *)(result + 40);
  if (v2) {
    char v2 = *(unsigned char *)(result + 41) != 0;
  }
  v1[954] = v2;
  if (v1[952])
  {
    if (v1[956]) {
      char v2 = 1;
    }
    v1[956] = v2;
  }
  return result;
}

uint64_t sub_100B7D038(uint64_t a1, float a2, float a3, float a4)
{
  *(float *)a1 = a2;
  *(float *)(a1 + 4) = a3;
  *(float *)(a1 + 8) = a4;
  unint64_t v5 = (unint64_t)(float)((float)(a4 - a3) / a2) + 1;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  int v7 = 0;
  sub_1004528EC((char **)(a1 + 24), v5, &v7);
  return a1;
}

void sub_100B7D0A4(_Unwind_Exception *exception_object)
{
  double v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B7D0C0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 56)
  {
    double v4 = *(void **)(i - 32);
    if (v4)
    {
      *(void *)(i - 24) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void sub_100B7D110(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100B7D0C0((uint64_t *)v2);
    double v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_100B7D164()
{
  xmmword_102480200 = 0u;
  *(_OWORD *)&qword_102480210 = 0u;
  xmmword_1024801F0 = 0u;
  uint64_t v0 = operator new(8uLL);
  *((void *)&xmmword_102480200 + 1) = v0;
  void *v0 = 0x800040002000100;
  qword_102480210 = (uint64_t)(v0 + 1);
  unk_102480218 = v0 + 1;
  unk_102480220 = 0u;
  unk_102480230 = 0u;
  unk_102480240 = 0u;
  *(_OWORD *)&qword_102480250 = 0u;
  qword_102480260 = 0;
  uint64_t v1 = operator new(6uLL);
  qword_102480258 = (uint64_t)(v1 + 3);
  qword_102480260 = (uint64_t)(v1 + 3);
  *(_DWORD *)uint64_t v1 = 67109376;
  v1[2] = 2048;
  qword_102480250 = (uint64_t)v1;
  unk_102480268 = 0u;
  unk_102480278 = 0u;
  unk_102480288 = 0u;
  unk_102480298 = 0u;
  unk_1024802A8 = 0u;
  *(_OWORD *)&qword_1024802B8 = 0u;
  uint64_t v2 = operator new(8uLL);
  qword_1024802B0 = (uint64_t)v2;
  *uint64_t v2 = 0x800040002000100;
  qword_1024802B8 = (uint64_t)(v2 + 1);
  unk_1024802C0 = v2 + 1;
  qword_1024802D0 = 0;
  unk_1024802D8 = 0;
  qword_1024802C8 = 0;
  double v3 = operator new(8uLL);
  qword_1024802C8 = (uint64_t)v3;
  *double v3 = 0x800040002000100;
  qword_1024802D0 = (uint64_t)(v3 + 1);
  unk_1024802D8 = v3 + 1;
  qword_1024802E8 = 0;
  unk_1024802F0 = 0;
  qword_1024802E0 = 0;
  double v4 = operator new(8uLL);
  qword_1024802E0 = (uint64_t)v4;
  *double v4 = 0x800040002000100;
  qword_1024802E8 = (uint64_t)(v4 + 1);
  unk_1024802F0 = v4 + 1;
  __cxa_atexit((void (*)(void *))sub_100B7C5C0, &xmmword_1024801F0, (void *)&_mh_execute_header);
  qword_102480300 = 0;
  unk_102480308 = 0;
  qword_1024802F8 = 0;
  unint64_t v5 = operator new(0x34uLL);
  qword_102480300 = (uint64_t)(v5 + 13);
  unk_102480308 = v5 + 13;
  v5[12] = 1119092736;
  *(_OWORD *)unint64_t v5 = xmmword_101D82348;
  *((_OWORD *)v5 + 1) = unk_101D82358;
  *((_OWORD *)v5 + 2) = xmmword_101D82368;
  qword_1024802F8 = (uint64_t)v5;
  __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_1024802F8, (void *)&_mh_execute_header);
  qword_102480318 = 0;
  unk_102480320 = 0;
  qword_102480310 = 0;
  float v6 = operator new(0x2CuLL);
  qword_102480318 = (uint64_t)v6 + 44;
  unk_102480320 = (char *)v6 + 44;
  *float v6 = xmmword_101D8237C;
  v6[1] = unk_101D8238C;
  *(_OWORD *)((char *)v6 + 28) = unk_101D82398;
  qword_102480310 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_102480310, (void *)&_mh_execute_header);
  qword_102480330 = 0;
  unk_102480338 = 0;
  qword_102480328 = 0;
  int v7 = operator new(0x54uLL);
  qword_102480330 = (uint64_t)(v7 + 21);
  unk_102480338 = v7 + 21;
  v7[20] = 1075419546;
  *((_OWORD *)v7 + 2) = xmmword_101D823C8;
  *((_OWORD *)v7 + 3) = unk_101D823D8;
  *((_OWORD *)v7 + 4) = xmmword_101D823E8;
  *(_OWORD *)int v7 = xmmword_101D823A8;
  *((_OWORD *)v7 + 1) = unk_101D823B8;
  qword_102480328 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_102480328, (void *)&_mh_execute_header);
  qword_102480348 = 0;
  unk_102480350 = 0;
  qword_102480340 = 0;
  char v8 = operator new(0x7CuLL);
  qword_102480348 = (uint64_t)v8 + 124;
  unk_102480350 = (char *)v8 + 124;
  void v8[4] = xmmword_101D8243C;
  v8[5] = unk_101D8244C;
  v8[6] = xmmword_101D8245C;
  *(_OWORD *)((char *)v8 + 108) = *(long long *)((char *)&xmmword_101D8245C + 12);
  *char v8 = xmmword_101D823FC;
  v8[1] = unk_101D8240C;
  double v8[2] = xmmword_101D8241C;
  v8[3] = unk_101D8242C;
  qword_102480340 = (uint64_t)v8;
  __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_102480340, (void *)&_mh_execute_header);
  qword_102480360 = 0;
  unk_102480368 = 0;
  qword_102480358 = 0;
  char v9 = operator new(0x5CuLL);
  qword_102480360 = (uint64_t)v9 + 92;
  unk_102480368 = (char *)v9 + 92;
  v9[2] = xmmword_101D82498;
  float v9[3] = unk_101D824A8;
  _DWORD v9[4] = xmmword_101D824B8;
  *(_OWORD *)((char *)v9 + 76) = *(long long *)((char *)&xmmword_101D824B8 + 12);
  *char v9 = xmmword_101D82478;
  v9[1] = unk_101D82488;
  qword_102480358 = (uint64_t)v9;
  __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_102480358, (void *)&_mh_execute_header);
  qword_102480378 = 0;
  unk_102480380 = 0;
  qword_102480370 = 0;
  double v10 = operator new(0x54uLL);
  qword_102480378 = (uint64_t)(v10 + 21);
  unk_102480380 = v10 + 21;
  v10[20] = 1172373504;
  *((_OWORD *)v10 + 2) = xmmword_101D824F4;
  *((_OWORD *)v10 + 3) = unk_101D82504;
  *((_OWORD *)v10 + 4) = xmmword_101D82514;
  *(_OWORD *)double v10 = xmmword_101D824D4;
  *((_OWORD *)v10 + 1) = unk_101D824E4;
  qword_102480370 = (uint64_t)v10;
  __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_102480370, (void *)&_mh_execute_header);
  qword_102480390 = 0;
  unk_102480398 = 0;
  qword_102480388 = 0;
  float v11 = operator new(0x54uLL);
  qword_102480390 = (uint64_t)(v11 + 21);
  unk_102480398 = v11 + 21;
  v11[20] = 100;
  *((_OWORD *)v11 + 2) = xmmword_101D82548;
  *((_OWORD *)v11 + 3) = unk_101D82558;
  *((_OWORD *)v11 + 4) = xmmword_101D82568;
  *(_OWORD *)float v11 = xmmword_101D82528;
  *((_OWORD *)v11 + 1) = unk_101D82538;
  qword_102480388 = (uint64_t)v11;
  __cxa_atexit((void (*)(void *))sub_100B7C604, &qword_102480388, (void *)&_mh_execute_header);
  qword_1024803A8 = 0;
  unk_1024803B0 = 0;
  qword_1024803A0 = 0;
  float v12 = operator new(0x4CuLL);
  qword_1024803A8 = (uint64_t)v12 + 76;
  unk_1024803B0 = (char *)v12 + 76;
  v12[2] = xmmword_101D8259C;
  v12[3] = unk_101D825AC;
  *(_OWORD *)((char *)v12 + 60) = unk_101D825B8;
  *float v12 = xmmword_101D8257C;
  v12[1] = unk_101D8258C;
  qword_1024803A0 = (uint64_t)v12;
  __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_1024803A0, (void *)&_mh_execute_header);
  sub_100134750(&qword_1024803B8, "CLElevationAWDAggregator");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024803B8, (void *)&_mh_execute_header);
  if (byte_1024803CF >= 0) {
    size_t v13 = byte_1024803CF;
  }
  else {
    size_t v13 = qword_1024803C0;
  }
  uint64_t v14 = sub_1001110E4((uint64_t)&unk_1024803D0, v13 + 16);
  if (*(char *)(v14 + 23) >= 0) {
    float v15 = (void *)v14;
  }
  else {
    float v15 = *(void **)v14;
  }
  if (v13)
  {
    if (byte_1024803CF >= 0) {
      float v16 = &qword_1024803B8;
    }
    else {
      float v16 = (uint64_t *)qword_1024803B8;
    }
    memmove(v15, v16, v13);
  }
  strcpy((char *)v15 + v13, "_NextMidnightUTC");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &unk_1024803D0, (void *)&_mh_execute_header);
}