void sub_100B7D664(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  void *v6;

  v3 = &qword_1024802E0;
  v4 = &qword_1024802E0;
  while (1)
  {
    v6 = (void *)*(v4 - 3);
    v4 -= 3;
    v5 = v6;
    if (v6)
    {
      *(v3 - 2) = (uint64_t)v5;
      operator delete(v5);
    }
    v3 = v4;
    if (v4 == v1) {
      _Unwind_Resume(exception_object);
    }
  }
}

id sub_100B7DCEC(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateIDSStatusAndNotify];
}

void sub_100B802CC(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100B802FC(id a1)
{
  qword_102419218 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Transport");
}

uint64_t sub_100B8032C(uint64_t a1)
{
  sub_101171D90(a1);
  *(_DWORD *)(v2 + 40) = 0xFFFF;
  *(void *)(v2 + 52) = 0;
  *(void *)(v2 + 44) = 0;
  *(_OWORD *)(v2 + 60) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v2 + 76) = _Q0;
  *(_OWORD *)(v2 + 92) = _Q0;
  *(_OWORD *)(v2 + 108) = _Q0;
  *(_DWORD *)(v2 + 124) = 0;
  *(void *)(v2 + 136) = 0;
  *(void *)(v2 + 144) = 0;
  *(void *)(v2 + 128) = 0xBFF0000000000000;
  *(_DWORD *)(v2 + 152) = 0;
  *(void *)(v2 + 156) = 0xBFF0000000000000;
  *(_DWORD *)(v2 + 164) = 0x7FFFFFFF;
  *(void *)(v2 + 176) = 0;
  *(void *)(v2 + 184) = 0;
  *(void *)(v2 + 168) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  sub_1000DBC34(v2 + 200);
  return a1;
}

uint64_t sub_100B803B8(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 96) < 0xCu) & (0xC02u >> *(_DWORD *)(a1 + 96));
}

void sub_100B803D4(uint64_t a1, long long *a2, char *__src)
{
  unsigned int v4 = *((_DWORD *)a2 + 24);
  BOOL v5 = v4 > 0xB;
  int v6 = (1 << v4) & 0xC02;
  if (v5 || v6 == 0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E8AC8);
    }
    v26 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
    {
      int v27 = *((_DWORD *)a2 + 24);
      *(_DWORD *)buf = 67240192;
      int v30 = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "unexpected location type %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 == -1) {
        goto LABEL_26;
      }
      goto LABEL_28;
    }
  }
  else if (*(double *)((char *)a2 + 76) == 0.0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E8AC8);
    }
    v8 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "location timestamp is not set!", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 == -1)
      {
LABEL_26:
        v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiReachIntersectionAnalytics::receiveRefLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
        return;
      }
LABEL_28:
      dispatch_once(&qword_1024193A0, &stru_1022E8AC8);
      goto LABEL_26;
    }
  }
  else if (*(double *)((char *)a2 + 20) <= 30.0)
  {
    long long v11 = *a2;
    *(_OWORD *)(a1 + 56) = a2[1];
    *(_OWORD *)(a1 + 40) = v11;
    long long v12 = a2[2];
    long long v13 = a2[3];
    long long v14 = a2[4];
    *(_OWORD *)(a1 + 120) = a2[5];
    *(_OWORD *)(a1 + 104) = v14;
    *(_OWORD *)(a1 + 88) = v13;
    *(_OWORD *)(a1 + 72) = v12;
    long long v15 = a2[6];
    long long v16 = a2[7];
    long long v17 = a2[8];
    *(_OWORD *)(a1 + 180) = *(long long *)((char *)a2 + 140);
    *(_OWORD *)(a1 + 168) = v17;
    *(_OWORD *)(a1 + 152) = v16;
    *(_OWORD *)(a1 + 136) = v15;
    memcpy((void *)(a1 + 200), __src, 0x201uLL);
    uint64_t v18 = *((void *)__src + 65);
    uint64_t v19 = *((void *)__src + 66);
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 720) = v18;
    v20 = *(std::__shared_weak_count **)(a1 + 728);
    *(void *)(a1 + 728) = v19;
    if (v20) {
      sub_1000DB0A0(v20);
    }
    long long v21 = *(_OWORD *)(__src + 536);
    long long v22 = *(_OWORD *)(__src + 568);
    *(_OWORD *)(a1 + 752) = *(_OWORD *)(__src + 552);
    *(_OWORD *)(a1 + 768) = v22;
    *(_OWORD *)(a1 + 736) = v21;
    long long v23 = *(_OWORD *)(__src + 584);
    long long v24 = *(_OWORD *)(__src + 600);
    long long v25 = *(_OWORD *)(__src + 616);
    *(void *)(a1 + 829) = *(void *)(__src + 629);
    *(_OWORD *)(a1 + 800) = v24;
    *(_OWORD *)(a1 + 816) = v25;
    *(_OWORD *)(a1 + 784) = v23;
  }
}

void sub_100B80750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, double a8)
{
  int v16 = rand();
  if (!(v16 % *sub_101413024()))
  {
    *(void *)buf = _NSConcreteStackBlock;
    uint64_t v23 = 3221225472;
    long long v24 = sub_100B813C4;
    long long v25 = &unk_1022E8AA8;
    uint64_t v26 = a1;
    uint64_t v27 = a2;
    uint64_t v28 = a4;
    double v29 = a8;
    uint64_t v30 = a3;
    uint64_t v31 = a5;
    char v32 = a6;
    char v33 = a7;
    AnalyticsSendEventLazy();
  }
  if sub_1000E6DB4(a1 + 40) && (sub_1000E6DB4(a2))
  {
    if (sub_1000E6DB4(a3) & 1) != 0 || (sub_1000E6DB4(a5))
    {
      if (vabdd_f64(*(double *)(a1 + 116), *(double *)(a2 + 76)) <= 1.0)
      {
        int v19 = rand();
        if (!(v19 % *sub_101413024()))
        {
          *(void *)buf = _NSConcreteStackBlock;
          uint64_t v23 = 3221225472;
          long long v24 = sub_100B80C1C;
          long long v25 = &unk_1022E8AA8;
          uint64_t v26 = a1;
          uint64_t v27 = a2;
          uint64_t v28 = a4;
          double v29 = a8;
          uint64_t v30 = a3;
          uint64_t v31 = a5;
          char v32 = a6;
          char v33 = a7;
          AnalyticsSendEventLazy();
        }
      }
      else
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022E8AC8);
        }
        long long v17 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "[WifiPositionCalculatorWithReachIntersectionAnalytics] aborted due to deltaTimeFromRef is greater than maximum threshold", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 == -1) {
            goto LABEL_31;
          }
          goto LABEL_33;
        }
      }
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E8AC8);
      }
      v20 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "[WifiPositionCalculatorWithReachIntersectionAnalytics] aborted due to invalid afterLocation and afterLocationConservative.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 == -1)
        {
LABEL_31:
          long long v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiReachIntersectionAnalytics::submitMetricsIfPossible(const CLDaemonLocation &, const CLDaemonLocation &, size_t, double, const CLDaemonLocation &, BOOL, BOOL)", "%s\n", v21);
          if (v21 != (char *)buf) {
            free(v21);
          }
          return;
        }
LABEL_33:
        dispatch_once(&qword_1024193A0, &stru_1022E8AC8);
        goto LABEL_31;
      }
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E8AC8);
    }
    uint64_t v18 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "[WifiPositionCalculatorWithReachIntersectionAnalytics] aborted due to invalid fRefLocation or invalid beforeLocation.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 == -1) {
        goto LABEL_31;
      }
      goto LABEL_33;
    }
  }
}

void *sub_100B80C1C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v4 = +[NSMutableDictionary dictionary];
  double v5 = vabdd_f64(*(double *)(v2 + 116), *(double *)(*(void *)(a1 + 40) + 76));
  int v6 = *(void **)(v2 + 720);
  if (v6) {
    uint64_t v7 = -1227133513 * ((v6[1] - *v6) >> 2);
  }
  else {
    uint64_t v7 = 0xFFFFFFFFLL;
  }
  v64[0] = @"deltaTimeFromGps";
  LODWORD(v3) = llround(v5);
  v65[0] = +[NSNumber numberWithInt:v3];
  v64[1] = @"gpsHorizontalAccuracy";
  LODWORD(v8) = llround(*(double *)(v2 + 60));
  v65[1] = +[NSNumber numberWithInt:v8];
  v64[2] = @"numSatelliteVisible";
  v65[2] = +[NSNumber numberWithInt:v7];
  v64[3] = @"locType";
  v65[3] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 136)];
  [v4 setDictionary:+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v65, v64, 4)];
  double v10 = *(double *)(v2 + 584);
  if (v10 > 0.0 && *(double *)(v2 + 672) > 0.0)
  {
    double v11 = *(double *)(v2 + 664) - *(double *)(v2 + 576);
    LODWORD(v9) = llround(v10);
    [v4 setObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v9) forKeyedSubscript:@"gpsGroundAltitudeUncertainty"];
    LODWORD(v12) = llround(*(double *)(v2 + 672));
    [v4 setObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v12) forKeyedSubscript:@"gpsAbsoluteAltitudeUncertainty"];
    LODWORD(v13) = llround(v11);
    [v4 setObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v13) forKeyedSubscript:@"gpsAltitudeAboveGround"];
  }
  sub_1000F1268((double *)v2, v2 + 40, *(void *)(a1 + 40));
  double v15 = v14;
  LODWORD(v16) = llround(v14);
  [v4 setObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v16) forKeyedSubscript:@"wifiFixErrorBeforeUseOfReachIntersection"];
  double v17 = *(double *)(*(void *)(a1 + 40) + 20);
  if (v17 > 0.0) {
    [v4 setObject:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v15 / v17) forKeyedSubscript:@"hErrRatioBeforeUseOfReachIntersection"];
  }
  [v4 setObject:+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(void *)(a1 + 48)) forKeyedSubscript:@"numOfInputCentroids"];
  [v4 setObject:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 56)) forKeyedSubscript:@"pairwiseIntersectionRatio"];
  if (sub_1000E6DB4(*(void *)(a1 + 64)))
  {
    sub_1000F1268((double *)v2, v2 + 40, *(void *)(a1 + 64));
    double v19 = v18;
    double v20 = v18 - v15;
    sub_1000F1268((double *)v2, *(void *)(a1 + 40), *(void *)(a1 + 64));
    double v22 = v21;
    LODWORD(v23) = llround(v19);
    [v4 setObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v23) forKeyedSubscript:@"wifiFixErrorAfterUseOfReachIntersection"];
    LODWORD(v24) = llround(v20);
    [v4 setObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v24) forKeyedSubscript:@"wifiFixErrorChangeByUseOfReachIntersection"];
    LODWORD(v25) = llround(v22);
    [v4 setObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v25) forKeyedSubscript:@"wifiFixDistanceBeforeAndAfterUseOfReachIntersection"];
    double v26 = *(double *)(*(void *)(a1 + 64) + 20);
    if (v26 > 0.0) {
      [v4 setObject:[+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v19 / v26)] forKeyedSubscript:@"hErrRatioAfterUseOfReachIntersection"];
    }
  }
  if (sub_1000E6DB4(*(void *)(a1 + 72)))
  {
    sub_1000F1268((double *)v2, v2 + 40, *(void *)(a1 + 72));
    double v28 = v27;
    double v29 = v27 - v15;
    sub_1000F1268((double *)v2, *(void *)(a1 + 40), *(void *)(a1 + 72));
    double v31 = v30;
    LODWORD(v32) = llround(v28);
    [v4 setObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v32) forKeyedSubscript:@"wifiFixErrorAfterUseOfReachIntersectionConservative"];
    LODWORD(v33) = llround(v29);
    [v4 setObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v33) forKeyedSubscript:@"wifiFixErrorChangeByUseOfReachIntersectionConservative"];
    LODWORD(v34) = llround(v31);
    [v4 setObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v34) forKeyedSubscript:@"wifiFixDistanceBeforeAndAfterUseOfReachIntersectionConservative"];
    double v35 = *(double *)(*(void *)(a1 + 72) + 20);
    if (v35 > 0.0) {
      [v4 setObject:[+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v28 / v35)] forKeyedSubscript:@"hErrRatioAfterUseOfReachIntersectionConservative"];
    }
    [v4 setObject:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80)) forKeyedSubscript:@"isOriginalLocUsedAfterUseOfReachIntersectionConservative"];
    [v4 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 81)) forKeyedSubscript:@"isOriginalLocInsideReachIntersection"];
  }
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  v36 = v4;
  id v37 = [v4 allKeys];
  id v38 = [v37 countByEnumeratingWithState:&v51 objects:v63 count:16];
  if (v38)
  {
    id v39 = v38;
    uint64_t v40 = *(void *)v52;
    do
    {
      v41 = 0;
      do
      {
        if (*(void *)v52 != v40) {
          objc_enumerationMutation(v37);
        }
        uint64_t v42 = *(void *)(*((void *)&v51 + 1) + 8 * (void)v41);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022E8AC8);
        }
        v43 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          id v44 = [v36 objectForKey:v42];
          *(_DWORD *)buf = 138478083;
          uint64_t v60 = v42;
          __int16 v61 = 2113;
          id v62 = v44;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "[WifiPositionCalculatorWithReachIntersectionAnalytics] %{private}@ -> %{private}@", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022E8AC8);
          }
          id v45 = [v36 objectForKey:v42];
          int v55 = 138478083;
          uint64_t v56 = v42;
          __int16 v57 = 2113;
          id v58 = v45;
          v46 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiReachIntersectionAnalytics::sendCoreAnalyticsEventForWifiFixErrorAndHorizontalErrorRatio(const CLDaemonLocation &, const CLDaemonLocation &, size_t, double, const CLDaemonLocation &, BOOL, BOOL)_block_invoke", "%s\n", v46);
          if (v46 != (char *)buf) {
            free(v46);
          }
        }
        v41 = (char *)v41 + 1;
      }
      while (v39 != v41);
      id v47 = [v37 countByEnumeratingWithState:&v51 objects:v63 count:16];
      id v39 = v47;
    }
    while (v47);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022E8AC8);
  }
  v48 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "[WifiPositionCalculatorWithReachIntersectionAnalytics] sent payload.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E8AC8);
    }
    LOWORD(v55) = 0;
    v50 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiReachIntersectionAnalytics::sendCoreAnalyticsEventForWifiFixErrorAndHorizontalErrorRatio(const CLDaemonLocation &, const CLDaemonLocation &, size_t, double, const CLDaemonLocation &, BOOL, BOOL)_block_invoke", "%s\n", v50);
    if (v50 != (char *)buf) {
      free(v50);
    }
  }
  return v36;
}

id sub_100B813C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = +[NSMutableDictionary dictionary];
  double v4 = vabdd_f64(*(double *)(v2 + 116), *(double *)(*(void *)(a1 + 40) + 76));
  v7[0] = @"deltaTimeFromGps";
  LODWORD(v5) = llround(v4);
  v8[0] = +[NSNumber numberWithInt:v5];
  v7[1] = @"validGpsLocation";
  v8[1] = +[NSNumber numberWithBool:sub_1000E6DB4(v2 + 40)];
  v7[2] = @"locType";
  v8[2] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 136)];
  [v3 setDictionary:+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 3)];
  [v3 setObject:+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(void *)(a1 + 48)) forKeyedSubscript:@"numOfInputCentroids"];
  [v3 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_1000E6DB4(*(void *)(a1 + 40))) forKeyedSubscript:@"validBeforeLocation"];
  if (sub_1000E6DB4(*(void *)(a1 + 40))) {
    [v3 setObject:[NSNumber numberWithDouble:*((double *)(*((void *)(a1 + 40) + 20)))] forKeyedSubscript:@"hUncBeforeLocation"];
  }
  [v3 setObject:[NSNumber numberWithDouble:*((double *)(a1 + 56))] forKeyedSubscript:@"pairwiseIntersectionRatio"];
  [v3 setObject:[NSNumber numberWithBool:*(void *)(a1 + 64)] forKeyedSubscript:@"validAfterLocation"];
  if (sub_1000E6DB4(*(void *)(a1 + 64)))
  {
    [v3 setObject:[NSNumber numberWithDouble:*((double *)(*((void *)(a1 + 64) + 20)))] forKeyedSubscript:@"hUncAfterLocation"];
    if (sub_1000E6DB4(*(void *)(a1 + 40)))
    {
      sub_1000F1268((double *)v2, *(void *)(a1 + 40), *(void *)(a1 + 64));
      [v3 setObject:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:") forKeyedSubscript:@"wifiFixDistanceBeforeAndAfterUseOfReachIntersection"];
    }
  }
  [v3 setObject:[NSNumber numberWithBool:sub_1000E6DB4(*(void *)(a1 + 72))] forKeyedSubscript:@"validAfterLocationConservative"];
  if (sub_1000E6DB4(*(void *)(a1 + 72)))
  {
    [v3 setObject:[NSNumber numberWithDouble:*((double *)(*((void *)(a1 + 72) + 20)))] forKeyedSubscript:@"hUncAfterLocationConservative"];
    [v3 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80)) forKeyedSubscript:@"isOriginalLocUsedAfterUseOfReachIntersectionConservative"];
    [v3 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 81)) forKeyedSubscript:@"isOriginalLocInsideReachIntersection"];
    if (sub_1000E6DB4(*(void *)(a1 + 40)))
    {
      sub_1000F1268((double *)v2, *(void *)(a1 + 40), *(void *)(a1 + 72));
      [v3 setObject:[+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:")] forKeyedSubscript:@"wifiFixDistanceBeforeAndAfterUseOfReachIntersectionConservative"];
    }
  }
  return v3;
}

void sub_100B816E0(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100B81710()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100B817C8(_Unwind_Exception *a1)
{
}

void sub_100B817E0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100B81888(_Unwind_Exception *a1)
{
}

double sub_100B818A0(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = a2;
  *(_DWORD *)(a1 + 108) = a3;
  return result;
}

uint64_t sub_100B818D8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100B81920@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _Q0 = vdupq_n_s32(0x7F7FFFFFu);
  *(void *)double v18 = _Q0.i64[0];
  *(_DWORD *)&v18[8] = 2139095039;
  *(void *)&long long v5 = 0x8000000080000000;
  *((void *)&v5 + 1) = 0x8000000080000000;
  *(_OWORD *)&v18[12] = v5;
  *(_DWORD *)&v18[28] = 0x7FFFFFFF;
  int32x4_t v19 = _Q0;
  *(void *)&long long v20 = _Q0.i64[0];
  *((void *)&v20 + 1) = 0x7FFFFFFF7F7FFFFFLL;
  char v21 = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  uint64_t v17 = _Q0.i64[0];
  sub_100B83B2C((uint64_t)v22, 1uLL, &v17);
  long long v10 = v20;
  *(int32x4_t *)(a2 + 32) = v19;
  *(_OWORD *)(a2 + 48) = v10;
  *(unsigned char *)(a2 + 64) = v21;
  long long v11 = *(_OWORD *)&v18[16];
  *(_OWORD *)a2 = *(_OWORD *)v18;
  *(_OWORD *)(a2 + 16) = v11;
  sub_100B832A0(a2 + 72, v22);
  if (*(void *)(a1 + 96))
  {
    uint64_t v14 = *(void *)(a1 + 88);
    uint64_t v13 = a1 + 88;
    uint64_t v12 = v14;
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(*(void *)(v13 - 8) + 28);
    if (v14)
    {
      do
      {
        uint64_t v15 = v12;
        uint64_t v12 = *(void *)(v12 + 8);
      }
      while (v12);
    }
    else
    {
      do
      {
        uint64_t v15 = *(void *)(v13 + 16);
        _ZF = *(void *)v15 == v13;
        uint64_t v13 = v15;
      }
      while (_ZF);
    }
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(v15 + 28);
  }
  return sub_10041F48C(v22);
}

void sub_100B81A28(_Unwind_Exception *a1)
{
  sub_10041F48C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100B81A3C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  int v3 = *(_DWORD *)(result + 104);
  int v4 = *(_DWORD *)(result + 108);
  v43[0] = v3;
  if (v3 <= v4)
  {
    uint64_t v5 = result;
    int v6 = (uint64_t **)(result + 56);
    uint64_t v7 = (void *)(result + 64);
    do
    {
      uint64_t v8 = *v7;
      if (*v7)
      {
        uint64_t v9 = v7;
        do
        {
          int v10 = *(_DWORD *)(v8 + 32);
          BOOL v11 = v10 < v3;
          if (v10 >= v3) {
            uint64_t v12 = (uint64_t *)v8;
          }
          else {
            uint64_t v12 = (uint64_t *)(v8 + 8);
          }
          if (!v11) {
            uint64_t v9 = (void *)v8;
          }
          uint64_t v8 = *v12;
        }
        while (*v12);
        if (v9 != v7 && v3 >= *((_DWORD *)v9 + 8))
        {
          long long v41 = 0u;
          long long v42 = 0u;
          long long v40 = 0u;
          *(void *)buf = v43;
          uint64_t v13 = sub_100B83C94(v6, v43, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
          unint64_t v14 = (unint64_t)v13[9];
          uint64_t v15 = v13[6];
          uint64_t v16 = &v15[v14 >> 8];
          if (v13[7] == v15) {
            uint64_t v17 = 0;
          }
          else {
            uint64_t v17 = *v16 + 16 * v14;
          }
LABEL_16:
          uint64_t v18 = v17 - 4096;
          while (1)
          {
            *(void *)buf = v43;
            int32x4_t v19 = sub_100B83C94(v6, v43, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
            long long v20 = v19[6];
            if (v19[7] == v20)
            {
              uint64_t v22 = 0;
            }
            else
            {
              unint64_t v21 = (unint64_t)v19[9] + (void)v19[10];
              uint64_t v22 = *(uint64_t *)((char *)v20 + ((v21 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v21;
            }
            if (v17 == v22) {
              break;
            }
            uint64_t v23 = (float *)(v17 + 8);
            sub_1000A1600(&v40, v23);
            v18 += 16;
            uint64_t v17 = (uint64_t)(v23 + 2);
            if (*v16 == v18)
            {
              uint64_t v24 = v16[1];
              ++v16;
              uint64_t v17 = v24;
              goto LABEL_16;
            }
          }
          if (*((void *)&v42 + 1))
          {
            uint64_t v25 = (float **)(*((void *)&v40 + 1) + 8 * ((unint64_t)v42 >> 10));
            if ((void)v41 == *((void *)&v40 + 1))
            {
              double v26 = 0;
              double v28 = 0;
              double v27 = (float **)(*((void *)&v40 + 1) + 8 * (((void)v42 + *((void *)&v42 + 1)) >> 10));
            }
            else
            {
              double v26 = &(*v25)[v42 & 0x3FF];
              double v27 = (float **)(*((void *)&v40 + 1) + 8 * (((void)v42 + *((void *)&v42 + 1)) >> 10));
              double v28 = &(*v27)[(v42 + *((void *)&v42 + 1)) & 0x3FF];
            }
            *(_DWORD *)buf = sub_100B83DE0(v25, v26, v27, v28);
            *(float *)&uint8_t buf[4] = (float)v43[0] + 0.5;
            sub_100B81EDC((void *)a2, buf);
            if (qword_1024190D0 != -1) {
              dispatch_once(&qword_1024190D0, &stru_1022E8AE8);
            }
            double v29 = qword_1024190D8;
            if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
            {
              unint64_t v30 = *(void *)(a2 + 40) + *(void *)(a2 + 32) - 1;
              double v31 = (float *)(*(void *)(*(void *)(a2 + 8) + ((v30 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v30 & 0x1FF));
              double v32 = v31[1];
              double v33 = *v31;
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = "PRTTSampleTemperature";
              __int16 v52 = 2048;
              double v53 = v32;
              __int16 v54 = 2080;
              int v55 = "PRTTSamplePressure";
              __int16 v56 = 2048;
              double v57 = v33;
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "%s,%f,%s,%f", buf, 0x2Au);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024190D0 != -1) {
                dispatch_once(&qword_1024190D0, &stru_1022E8AE8);
              }
              unint64_t v35 = *(void *)(a2 + 40) + *(void *)(a2 + 32) - 1;
              v36 = (float *)(*(void *)(*(void *)(a2 + 8) + ((v35 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v35 & 0x1FF));
              double v37 = v36[1];
              double v38 = *v36;
              v43[1] = 136315906;
              id v44 = "PRTTSampleTemperature";
              __int16 v45 = 2048;
              double v46 = v37;
              __int16 v47 = 2080;
              v48 = "PRTTSamplePressure";
              __int16 v49 = 2048;
              double v50 = v38;
              id v39 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "std::deque<CLMotionTypePressure> CLRobustSlopeEstimator::computePRTT()", "%s\n", v39);
              if (v39 != buf) {
                free(v39);
              }
            }
          }
          double result = sub_1003A7340(&v40);
        }
      }
      int v34 = v43[0];
      int v3 = ++v43[0];
    }
    while (v34 < *(_DWORD *)(v5 + 108));
  }
  return result;
}

void sub_100B81EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1003A7340((uint64_t *)va);
  sub_10041F48C(v5);
  _Unwind_Resume(a1);
}

void sub_100B81EDC(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100B845B0(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void sub_100B81F68(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  sub_100B81920(a1, a3);
  if (*(void *)(a1 + 72) >= (unint64_t)a2)
  {
    long long v96 = 0u;
    long long v97 = 0u;
    *(_OWORD *)buf = 0u;
    int v10 = *(void **)(a1 + 56);
    BOOL v11 = (void *)(a1 + 64);
    while (1)
    {
      uint64_t v12 = (void *)*v11;
      uint64_t v13 = (void *)(a1 + 64);
      if (*v11)
      {
        do
        {
          unint64_t v14 = v12;
          uint64_t v12 = (void *)v12[1];
        }
        while (v12);
      }
      else
      {
        do
        {
          unint64_t v14 = (void *)v13[2];
          BOOL v15 = *v14 == (void)v13;
          uint64_t v13 = v14;
        }
        while (v15);
      }
      if (v10 == v14) {
        break;
      }
      unint64_t v16 = v10[9];
      uint64_t v17 = v10[6];
      uint64_t v18 = v10[7];
      int32x4_t v19 = (void *)(v17 + 8 * (v16 >> 8));
      if (v18 == v17) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = *v19 + 16 * v16;
      }
      while (1)
      {
        if (v18 == v17)
        {
          uint64_t v36 = 0;
        }
        else
        {
          unint64_t v35 = v10[10] + v10[9];
          uint64_t v36 = *(void *)(v17 + ((v35 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v35;
        }
        uint64_t v23 = (void *)v10[1];
        if (v20 == v36) {
          break;
        }
        unint64_t v21 = v10;
        if (v23)
        {
          do
          {
            uint64_t v22 = v23;
            uint64_t v23 = (void *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            uint64_t v22 = (void *)v21[2];
            BOOL v15 = *v22 == (void)v21;
            unint64_t v21 = v22;
          }
          while (!v15);
        }
        if (v22 != v11)
        {
          do
          {
            unint64_t v24 = v22[9];
            uint64_t v25 = v22[6];
            uint64_t v26 = v22[7];
            double v27 = (void *)(v25 + 8 * (v24 >> 8));
            if (v26 == v25) {
              uint64_t v28 = 0;
            }
            else {
              uint64_t v28 = *v27 + 16 * v24;
            }
            while (1)
            {
              if (v26 == v25)
              {
                uint64_t v31 = 0;
              }
              else
              {
                unint64_t v30 = v22[10] + v22[9];
                uint64_t v31 = *(void *)(v25 + ((v30 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v30;
              }
              if (v28 == v31) {
                break;
              }
              *(float *)&long long v92 = (float)(*(float *)(v28 + 8) - *(float *)(v20 + 8))
                             / (float)(*(float *)(v28 + 12) - *(float *)(v20 + 12));
              sub_1000A1600(buf, (float *)&v92);
              v28 += 16;
              if (v28 - *v27 == 4096)
              {
                uint64_t v29 = v27[1];
                ++v27;
                uint64_t v28 = v29;
              }
              uint64_t v25 = v22[6];
              uint64_t v26 = v22[7];
            }
            double v32 = (void *)v22[1];
            if (v32)
            {
              do
              {
                double v33 = v32;
                double v32 = (void *)*v32;
              }
              while (v32);
            }
            else
            {
              do
              {
                double v33 = (void *)v22[2];
                BOOL v15 = *v33 == (void)v22;
                uint64_t v22 = v33;
              }
              while (!v15);
            }
            uint64_t v22 = v33;
          }
          while (v33 != v11);
        }
        v20 += 16;
        if (v20 - *v19 == 4096)
        {
          uint64_t v34 = v19[1];
          ++v19;
          uint64_t v20 = v34;
        }
        uint64_t v17 = v10[6];
        uint64_t v18 = v10[7];
      }
      double v37 = v10;
      if (v23)
      {
        do
        {
          int v10 = v23;
          uint64_t v23 = (void *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          int v10 = (void *)v37[2];
          BOOL v15 = *v10 == (void)v37;
          double v37 = v10;
        }
        while (!v15);
      }
    }
    double v38 = (float **)(*(void *)&buf[8] + 8 * ((unint64_t)v97 >> 10));
    if ((void)v96 == *(void *)&buf[8])
    {
      id v39 = 0;
      long long v41 = 0;
      long long v40 = (float **)(*(void *)&buf[8] + 8 * ((*((void *)&v97 + 1) + (void)v97) >> 10));
    }
    else
    {
      id v39 = &(*v38)[v97 & 0x3FF];
      long long v40 = (float **)(*(void *)&buf[8] + 8 * ((*((void *)&v97 + 1) + (void)v97) >> 10));
      long long v41 = &(*v40)[(*((void *)&v97 + 1) + v97) & 0x3FF];
    }
    float v42 = sub_100B83DE0(v38, v39, v40, v41);
    v43 = *(void ***)&buf[8];
    *((void *)&v97 + 1) = 0;
    unint64_t v44 = v96 - *(void *)&buf[8];
    if ((void)v96 - *(void *)&buf[8] >= 0x11uLL)
    {
      do
      {
        operator delete(*v43);
        v43 = (void **)(*(void *)&buf[8] + 8);
        *(void *)&uint8_t buf[8] = v43;
        unint64_t v44 = v96 - (void)v43;
      }
      while ((void)v96 - (void)v43 > 0x10uLL);
    }
    if (v44 >> 3 == 1)
    {
      uint64_t v45 = 512;
    }
    else
    {
      if (v44 >> 3 != 2) {
        goto LABEL_65;
      }
      uint64_t v45 = 1024;
    }
    *(void *)&long long v97 = v45;
LABEL_65:
    long long v93 = 0u;
    long long v94 = 0u;
    long long v92 = 0u;
    double v46 = *(void **)(a1 + 56);
    if (v46 == v11)
    {
      v59 = 0;
      uint64_t v57 = 0;
      uint64_t v58 = 0;
    }
    else
    {
      do
      {
        unint64_t v47 = v46[9];
        uint64_t v48 = v46[6];
        uint64_t v49 = v46[7];
        double v50 = (void *)(v48 + 8 * (v47 >> 8));
        if (v49 == v48) {
          uint64_t v51 = 0;
        }
        else {
          uint64_t v51 = *v50 + 16 * v47;
        }
        while (1)
        {
          if (v49 == v48)
          {
            uint64_t v54 = 0;
          }
          else
          {
            unint64_t v53 = v46[10] + v46[9];
            uint64_t v54 = *(void *)(v48 + ((v53 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v53;
          }
          if (v51 == v54) {
            break;
          }
          *(float *)&long long v89 = *(float *)(v51 + 8) + (float)((float)-v42 * *(float *)(v51 + 12));
          sub_1000A1600(&v92, (float *)&v89);
          v51 += 16;
          if (v51 - *v50 == 4096)
          {
            uint64_t v52 = v50[1];
            ++v50;
            uint64_t v51 = v52;
          }
          uint64_t v48 = v46[6];
          uint64_t v49 = v46[7];
        }
        int v55 = (void *)v46[1];
        if (v55)
        {
          do
          {
            __int16 v56 = v55;
            int v55 = (void *)*v55;
          }
          while (v55);
        }
        else
        {
          do
          {
            __int16 v56 = (void *)v46[2];
            BOOL v15 = *v56 == (void)v46;
            double v46 = v56;
          }
          while (!v15);
        }
        double v46 = v56;
      }
      while (v56 != v11);
      uint64_t v57 = v94;
      uint64_t v58 = v93;
      v59 = (float **)(*((void *)&v92 + 1) + 8 * ((unint64_t)v94 >> 10));
      if ((void)v93 != *((void *)&v92 + 1))
      {
        uint64_t v60 = &(*v59)[v94 & 0x3FF];
        __int16 v61 = (float **)(*((void *)&v92 + 1) + 8 * ((*((void *)&v94 + 1) + (void)v94) >> 10));
        id v62 = &(*v61)[(*((void *)&v94 + 1) + v94) & 0x3FF];
        goto LABEL_86;
      }
    }
    uint64_t v60 = 0;
    id v62 = 0;
    __int16 v61 = (float **)(v58 + 8 * ((unint64_t)(*((void *)&v94 + 1) + v57) >> 10));
LABEL_86:
    float v63 = sub_100B83DE0(v59, v60, v61, v62);
    long long v90 = 0u;
    long long v91 = 0u;
    long long v89 = 0u;
    uint64_t v64 = *((void *)&v92 + 1);
    uint64_t v65 = v93;
    v66 = (void *)(*((void *)&v92 + 1) + 8 * ((unint64_t)v94 >> 10));
    if ((void)v93 == *((void *)&v92 + 1)) {
      v67 = 0;
    }
    else {
      v67 = (float *)(*v66 + 4 * (v94 & 0x3FF));
    }
    while (1)
    {
      uint64_t v69 = v65 == v64
          ? 0
          : *(void *)(v64 + (((*((void *)&v94 + 1) + (void)v94) >> 7) & 0x1FFFFFFFFFFFFF8))
          + 4 * ((*((void *)&v94 + 1) + v94) & 0x3FF);
      if (v67 == (float *)v69) {
        break;
      }
      LODWORD(v88[0]) = vabds_f32(*v67, v63);
      sub_1000A1600(&v89, (float *)v88);
      if ((float *)((char *)++v67 - *v66) == (float *)4096)
      {
        v68 = (float *)v66[1];
        ++v66;
        v67 = v68;
      }
      uint64_t v64 = *((void *)&v92 + 1);
      uint64_t v65 = v93;
    }
    v70 = (float **)(*((void *)&v89 + 1) + 8 * ((unint64_t)v91 >> 10));
    if ((void)v90 == *((void *)&v89 + 1))
    {
      v71 = 0;
      v73 = 0;
      v72 = (float **)(*((void *)&v89 + 1) + 8 * ((*((void *)&v91 + 1) + (void)v91) >> 10));
    }
    else
    {
      v71 = &(*v70)[v91 & 0x3FF];
      v72 = (float **)(*((void *)&v89 + 1) + 8 * ((*((void *)&v91 + 1) + (void)v91) >> 10));
      v73 = &(*v72)[(*((void *)&v91 + 1) + v91) & 0x3FF];
    }
    float v74 = sub_100B83DE0(v70, v71, v72, v73);
    v75 = (void **)*((void *)&v89 + 1);
    v76 = (float **)(*((void *)&v89 + 1) + 8 * ((unint64_t)v91 >> 10));
    v77 = *v76;
    v78 = &(*v76)[v91 & 0x3FF];
    uint64_t v79 = *(void *)(*((void *)&v89 + 1) + (((*((void *)&v91 + 1) + (void)v91) >> 7) & 0x1FFFFFFFFFFFFF8))
        + 4 * ((*((void *)&v91 + 1) + v91) & 0x3FF);
    if (v78 != (float *)v79)
    {
      v80 = &(*v76)[v91 & 0x3FF];
      while (1)
      {
        if ((char *)++v80 - (char *)v77 == 4096)
        {
          v81 = v76[1];
          ++v76;
          v77 = v81;
          v80 = v81;
        }
        if (v80 == (float *)v79) {
          break;
        }
        if (*v78 < *v80) {
          v78 = v80;
        }
      }
    }
    float v82 = *v78;
    *((void *)&v91 + 1) = 0;
    unint64_t v83 = v90 - *((void *)&v89 + 1);
    if ((void)v90 - *((void *)&v89 + 1) >= 0x11uLL)
    {
      do
      {
        operator delete(*v75);
        v75 = (void **)(*((void *)&v89 + 1) + 8);
        *((void *)&v89 + 1) = v75;
        unint64_t v83 = v90 - (void)v75;
      }
      while ((void)v90 - (void)v75 > 0x10uLL);
    }
    if (v83 >> 3 == 1)
    {
      uint64_t v84 = 512;
    }
    else
    {
      if (v83 >> 3 != 2) {
        goto LABEL_114;
      }
      uint64_t v84 = 1024;
    }
    *(void *)&long long v91 = v84;
LABEL_114:
    v85 = (void **)*((void *)&v92 + 1);
    *((void *)&v94 + 1) = 0;
    unint64_t v86 = v93 - *((void *)&v92 + 1);
    if ((void)v93 - *((void *)&v92 + 1) >= 0x11uLL)
    {
      do
      {
        operator delete(*v85);
        v85 = (void **)(*((void *)&v92 + 1) + 8);
        *((void *)&v92 + 1) = v85;
        unint64_t v86 = v93 - (void)v85;
      }
      while ((void)v93 - (void)v85 > 0x10uLL);
    }
    if (v86 >> 3 == 1)
    {
      uint64_t v87 = 512;
    }
    else
    {
      if (v86 >> 3 != 2)
      {
LABEL_121:
        *(float *)a3 = v42;
        *(float *)(a3 + 4) = v74;
        *(float *)(a3 + 8) = v82;
        *(unsigned char *)(a3 + 64) = 1;
        sub_100B81A3C(a1, (uint64_t)v88);
        sub_100B848C8(a3 + 72, (uint64_t)v88);
        sub_10041F48C(v88);
        sub_1003A7340(&v89);
        sub_1003A7340(&v92);
        sub_1003A7340(buf);
        return;
      }
      uint64_t v87 = 1024;
    }
    *(void *)&long long v94 = v87;
    goto LABEL_121;
  }
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_1022E8AE8);
  }
  uint64_t v6 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 72);
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "CLRobustSlopeEstimator given only %zd bins", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022E8AE8);
    }
    uint64_t v8 = *(void *)(a1 + 72);
    LODWORD(v92) = 134217984;
    *(void *)((char *)&v92 + 4) = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLPressureStats CLRobustSlopeEstimator::computeStats(int)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
}

void sub_100B827E0(_Unwind_Exception *a1)
{
  sub_10041F48C((void *)(v1 + 72));
  _Unwind_Resume(a1);
}

void sub_100B82838(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = a1 + 8;
  uint64_t v5 = &a2->n128_f32[3];
  sub_1000A1600((void *)(a1 + 8), &a2->n128_f32[3]);
  unint64_t v6 = *(void *)(a1 + 48);
  if (v6 >= 0x14)
  {
    float v7 = *v5;
    int v8 = (int)*v5;
    if (*(_DWORD *)(a1 + 104) <= v8 && *(_DWORD *)(a1 + 108) >= v8)
    {
      unint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = v6 - 1;
      float v11 = *(float *)(*(void *)(*(void *)(a1 + 16) + (((v10 + v9) >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * ((v10 + v9) & 0x3FF))
          - *(float *)(*(void *)(*(void *)(a1 + 16) + ((v9 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v9 & 0x3FF));
      if (v11 != 0.0)
      {
        int v45 = (int)*v5;
        uint64_t v12 = *(void *)(a1 + 64);
        if (!v12) {
          goto LABEL_15;
        }
        uint64_t v13 = a1 + 64;
        do
        {
          int v14 = *(_DWORD *)(v12 + 32);
          BOOL v15 = v14 < v8;
          if (v14 >= v8) {
            unint64_t v16 = (uint64_t *)v12;
          }
          else {
            unint64_t v16 = (uint64_t *)(v12 + 8);
          }
          if (!v15) {
            uint64_t v13 = v12;
          }
          uint64_t v12 = *v16;
        }
        while (*v16);
        if (v13 == a1 + 64 || *(_DWORD *)(v13 + 32) > v8)
        {
LABEL_15:
          *(_OWORD *)v66 = 0u;
          memset(buf, 0, sizeof(buf));
          *(void *)double v46 = &v45;
          uint64_t v17 = sub_100B83C94((uint64_t **)(a1 + 56), &v45, (uint64_t)&unk_101D0B290, (_DWORD **)v46);
          sub_100B84BA4((uint64_t)(v17 + 5), (uint64_t)buf);
          sub_1000D80C4(buf);
          *(void *)buf = &v45;
          *((_DWORD *)sub_100125FD0((uint64_t **)(a1 + 80), &v45, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8) = 0;
          int v8 = v45;
          float v7 = *v5;
        }
        float v18 = powf(0.2, v11 * 0.05);
        if (v11 >= 0.0)
        {
          float v19 = v18;
          ++v8;
        }
        else
        {
          float v19 = powf(0.2, v11 * -0.05);
        }
        *(void *)buf = &v45;
        if (*((_DWORD *)sub_100125FD0((uint64_t **)(a1 + 80), &v45, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8) == 30
          && (float)((float)(1.0 - v19) * 2147500000.0) > (float)rand())
        {
          *(void *)buf = &v45;
          uint64_t v20 = sub_100125FD0((uint64_t **)(a1 + 80), &v45, (uint64_t)&unk_101D0B290, (unsigned int **)buf);
          --*((_DWORD *)v20 + 8);
          if (qword_1024190D0 != -1) {
            dispatch_once(&qword_1024190D0, &stru_1022E8AE8);
          }
          unint64_t v21 = qword_1024190D8;
          if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
          {
            *(void *)buf = &v45;
            uint64_t v22 = sub_100B83C94((uint64_t **)(a1 + 56), &v45, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
            uint64_t v23 = *(void *)(*(uint64_t *)((char *)v22[6] + (((unint64_t)v22[9] >> 5) & 0x7FFFFFFFFFFFFF8))
                            + 16 * v22[9]);
            *(void *)buf = &v45;
            int v24 = *((_DWORD *)sub_100125FD0((uint64_t **)(a1 + 80), &v45, (uint64_t)&unk_101D0B290, (unsigned int **)buf)
                  + 8);
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "PopSampleTime";
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v23;
            *(_WORD *)&buf[22] = 2080;
            *(void *)&buf[24] = "CalibrationBinCount";
            *(_WORD *)v66 = 1024;
            *(_DWORD *)&v66[2] = v24;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "%s,%f,%s,%d", buf, 0x26u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190D0 != -1) {
              dispatch_once(&qword_1024190D0, &stru_1022E8AE8);
            }
            *(void *)double v46 = &v45;
            long long v41 = sub_100B83C94((uint64_t **)(a1 + 56), &v45, (uint64_t)&unk_101D0B290, (_DWORD **)v46);
            unint64_t v42 = *(void *)(*(uint64_t *)((char *)v41[6] + (((unint64_t)v41[9] >> 5) & 0x7FFFFFFFFFFFFF8))
                            + 16 * v41[9]);
            *(void *)double v46 = &v45;
            int v43 = *((_DWORD *)sub_100125FD0((uint64_t **)(a1 + 80), &v45, (uint64_t)&unk_101D0B290, (unsigned int **)v46)
                  + 8);
            *(_DWORD *)double v46 = 136315906;
            *(void *)&v46[4] = "PopSampleTime";
            __int16 v47 = 2048;
            unint64_t v48 = v42;
            __int16 v49 = 2080;
            double v50 = "CalibrationBinCount";
            __int16 v51 = 1024;
            LODWORD(v52) = v43;
            unint64_t v44 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLRobustSlopeEstimator::addPoint(const CLPressure::Sample *)", "%s\n", v44);
            if (v44 != (char *)buf) {
              free(v44);
            }
          }
          *(void *)buf = &v45;
          uint64_t v25 = sub_100B83C94((uint64_t **)(a1 + 56), &v45, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
          *(int64x2_t *)(v25 + 9) = vaddq_s64(*(int64x2_t *)(v25 + 9), (int64x2_t)xmmword_101D0A740);
          sub_100096314((uint64_t)(v25 + 5), 1);
        }
        *(void *)buf = &v45;
        int v26 = *((_DWORD *)sub_100125FD0((uint64_t **)(a1 + 80), &v45, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
        double v27 = a2->n128_f64[0];
        if (v26 < 1 || v27 - *(float *)a1 > (float)((float)((float)((float)v8 - v7) / v11) / (float)(30 - v26)))
        {
          float v28 = v27;
          *(float *)a1 = v28;
          *(void *)buf = &v45;
          uint64_t v29 = sub_100B83C94((uint64_t **)(a1 + 56), &v45, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
          sub_100B83168(v29 + 5, a2);
          *(void *)buf = &v45;
          unint64_t v30 = sub_100125FD0((uint64_t **)(a1 + 80), &v45, (uint64_t)&unk_101D0B290, (unsigned int **)buf);
          ++*((_DWORD *)v30 + 8);
          if (qword_1024190D0 != -1) {
            dispatch_once(&qword_1024190D0, &stru_1022E8AE8);
          }
          uint64_t v31 = qword_1024190D8;
          if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
          {
            unint64_t v32 = a2->n128_u64[0];
            float v34 = a2->n128_f32[2];
            float v33 = a2->n128_f32[3];
            *(void *)buf = &v45;
            int v35 = *((_DWORD *)sub_100125FD0((uint64_t **)(a1 + 80), &v45, (uint64_t)&unk_101D0B290, (unsigned int **)buf)
                  + 8);
            *(_DWORD *)buf = 136317442;
            *(void *)&uint8_t buf[4] = "CalibrationSampleTime";
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v32;
            *(_WORD *)&buf[22] = 2080;
            *(void *)&buf[24] = "CalibrationSamplePressure";
            *(_WORD *)v66 = 2048;
            *(double *)&v66[2] = v34;
            *(_WORD *)&v66[10] = 2080;
            *(void *)&v66[12] = "CalibrationSampleTemperature";
            __int16 v67 = 2048;
            double v68 = v33;
            __int16 v69 = 2080;
            v70 = "CalibrationTemperatureRate";
            __int16 v71 = 2048;
            double v72 = v11;
            __int16 v73 = 2080;
            float v74 = "CalibrationBinCount";
            __int16 v75 = 1024;
            int v76 = v35;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "%s,%f,%s,%f,%s,%f,%s,%f,%s,%d", buf, 0x62u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190D0 != -1) {
              dispatch_once(&qword_1024190D0, &stru_1022E8AE8);
            }
            unint64_t v36 = a2->n128_u64[0];
            float v38 = a2->n128_f32[2];
            float v37 = a2->n128_f32[3];
            *(void *)double v46 = &v45;
            int v39 = *((_DWORD *)sub_100125FD0((uint64_t **)(a1 + 80), &v45, (uint64_t)&unk_101D0B290, (unsigned int **)v46)
                  + 8);
            *(_DWORD *)double v46 = 136317442;
            *(void *)&v46[4] = "CalibrationSampleTime";
            __int16 v47 = 2048;
            unint64_t v48 = v36;
            __int16 v49 = 2080;
            double v50 = "CalibrationSamplePressure";
            __int16 v51 = 2048;
            double v52 = v38;
            __int16 v53 = 2080;
            uint64_t v54 = "CalibrationSampleTemperature";
            __int16 v55 = 2048;
            double v56 = v37;
            __int16 v57 = 2080;
            uint64_t v58 = "CalibrationTemperatureRate";
            __int16 v59 = 2048;
            double v60 = v11;
            __int16 v61 = 2080;
            id v62 = "CalibrationBinCount";
            __int16 v63 = 1024;
            int v64 = v39;
            long long v40 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLRobustSlopeEstimator::addPoint(const CLPressure::Sample *)", "%s\n", v40);
            if (v40 != (char *)buf) {
              free(v40);
            }
          }
        }
        unint64_t v9 = *(void *)(a1 + 40);
        uint64_t v10 = *(void *)(a1 + 48) - 1;
      }
      *(void *)(a1 + 40) = v9 + 1;
      *(void *)(a1 + 48) = v10;
      sub_1000A1688(v4, 1);
    }
  }
}

void sub_100B8314C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
}

__n128 sub_100B83168(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100B84E10(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_100B831F4(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  uint64_t v2 = *(void ***)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 48) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v2 = (void **)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 512;
    goto LABEL_7;
  }
  if (v4 >> 3 == 2)
  {
    uint64_t v6 = 1024;
LABEL_7:
    *(void *)(a1 + 40) = v6;
  }
  sub_100B83AD0(a1 + 56, *(void **)(a1 + 64));
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 64) = 0;
  int v8 = *(void **)(a1 + 88);
  unint64_t v7 = (void *)(a1 + 88);
  *(v7 - 2) = 0;
  sub_1000F5BB0((uint64_t)(v7 - 1), v8);
  *(v7 - 1) = v7;
  *unint64_t v7 = 0;
  v7[1] = 0;
}

uint64_t sub_100B832A0(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v4 = a2[4];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  unint64_t v7 = (char *)(v5 + 8 * (v4 >> 9));
  if (v6 == v5)
  {
    int v8 = 0;
    float v11 = 0;
    uint64_t v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
  }
  else
  {
    int v8 = (uint64_t *)(*(void *)v7 + 8 * (v4 & 0x1FF));
    unint64_t v9 = a2[5] + v4;
    uint64_t v10 = (char *)(v5 + 8 * (v9 >> 9));
    float v11 = (uint64_t *)(*(void *)v10 + 8 * (v9 & 0x1FF));
  }
  sub_100B8334C((void *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_100B83338(_Unwind_Exception *a1)
{
  sub_1000D7EB4(v1);
  _Unwind_Resume(a1);
}

void *sub_100B8334C(void *a1, char *a2, uint64_t *a3, char *a4, uint64_t *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = (((uint64_t)a5 - *(void *)a4) >> 3) + ((a4 - a2) << 6) - (((uint64_t)a3 - *(void *)a2) >> 3);
  }
  return sub_100B83380(a1, a2, a3, v5);
}

void *sub_100B83380(void *a1, void *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = ((v9 - v8) << 6) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_100B834B0(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }
  uint64_t v13 = (void *)(v8 + 8 * (v11 >> 9));
  if (v9 == v8) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *v13 + 8 * (v11 & 0x1FF);
  }
  v22[0] = v8 + 8 * (v11 >> 9);
  v22[1] = v14;
  __n128 result = sub_100B83A3C((uint64_t)v22, a4);
  while (v14 != v16)
  {
    uint64_t v17 = (void *)(v13 == result ? v16 : *v13 + 4096);
    if ((void *)v14 == v17)
    {
      uint64_t v17 = (void *)v14;
    }
    else
    {
      float v18 = (void *)v14;
      do
      {
        uint64_t v19 = *a3++;
        *v18++ = v19;
        if ((uint64_t *)((char *)a3 - *a2) == (uint64_t *)4096)
        {
          uint64_t v20 = (uint64_t *)a2[1];
          ++a2;
          a3 = v20;
        }
      }
      while (v18 != v17);
    }
    a1[5] += ((uint64_t)v17 - v14) >> 3;
    if (v13 == result) {
      break;
    }
    uint64_t v21 = v13[1];
    ++v13;
    uint64_t v14 = v21;
  }
  return result;
}

void sub_100B834B0(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x1FF) != 0) {
    unint64_t v6 = (v5 >> 9) + 1;
  }
  else {
    unint64_t v6 = v5 >> 9;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 9) {
    unint64_t v8 = v7 >> 9;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          uint64_t v29 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v28);
          uint64_t v31 = &v29[8 * (v28 >> 2)];
          unint64_t v32 = (uint64_t *)a1[1];
          uint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            uint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            int v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)int v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          float v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            uint64_t v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          uint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            uint64_t v3 = (char *)a1[1];
          }
          double v27 = &v3[-8 * (v24 >> 1)];
          uint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)uint64_t v3 = v18;
      uint64_t v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_10017F0B4(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_1002D02D8((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 511;
          }
          else {
            uint64_t v64 = 512;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          __int16 v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          double v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              uint64_t v79 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              float v82 = (uint64_t *)a1[1];
              v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              uint64_t v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              __int16 v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      long long v91 = a1 + 3;
      if (v13) {
        BOOL v15 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v13);
      }
      else {
        BOOL v15 = 0;
      }
      uint64_t v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        sub_1000DA434(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        int v39 = (void *)a1[1];
        long long v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              __int16 v49 = (char *)sub_1000DA54C((uint64_t)v91, v48);
              __int16 v51 = (uint64_t *)__p[1];
              long long v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                long long v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                uint64_t v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)uint64_t v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              double v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                long long v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              int v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                long long v40 = (char *)__p[1];
              }
              __int16 v47 = &v40[-8 * (v44 >> 1)];
              long long v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)long long v40 = *v39;
          long long v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          int v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      __int16 v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1002D03F8((uint64_t)__p, v57);
      }
      __int16 v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_100B839C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100B83A3C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 3);
    if (v4 < 1) {
      result -= (unint64_t)(511 - v4) >> 9;
    }
    else {
      result += (unint64_t)v4 >> 9;
    }
  }
  return result;
}

void sub_100B83AA0(id a1)
{
  qword_1024190D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

void sub_100B83AD0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100B83AD0(a1, *a2);
    sub_100B83AD0(a1, a2[1]);
    sub_1000D80C4(a2 + 5);
    operator delete(a2);
  }
}

uint64_t sub_100B83B2C(uint64_t a1, unint64_t a2, void *a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (a2) {
    sub_100B83B7C((void *)a1, a2, a3);
  }
  return a1;
}

void sub_100B83B68(_Unwind_Exception *a1)
{
  sub_1000D7EB4(v1);
  _Unwind_Resume(a1);
}

void *sub_100B83B7C(void *a1, unint64_t a2, void *a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = ((v7 - v6) << 6) - 1;
  }
  unint64_t v9 = a1[5] + a1[4];
  unint64_t v10 = v8 - v9;
  BOOL v11 = a2 > v10;
  unint64_t v12 = a2 - v10;
  if (v11)
  {
    sub_100B834B0(a1, v12);
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
    unint64_t v9 = a1[4] + a1[5];
  }
  unint64_t v13 = (void *)(v6 + 8 * (v9 >> 9));
  if (v7 == v6) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *v13 + 8 * (v9 & 0x1FF);
  }
  v20[0] = v6 + 8 * (v9 >> 9);
  v20[1] = v14;
  __n128 result = sub_100B83A3C((uint64_t)v20, a2);
  while (v14 != v16)
  {
    uint64_t v17 = (void *)(v13 == result ? v16 : *v13 + 4096);
    if ((void *)v14 == v17)
    {
      uint64_t v17 = (void *)v14;
    }
    else
    {
      uint64_t v18 = (void *)v14;
      do
        *v18++ = *a3;
      while (v18 != v17);
    }
    a1[5] += ((uint64_t)v17 - v14) >> 3;
    if (v13 == result) {
      break;
    }
    uint64_t v19 = v13[1];
    ++v13;
    uint64_t v14 = v19;
  }
  return result;
}

uint64_t **sub_100B83C94(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1 + 1;
  unint64_t v9 = a1 + 1;
  if (v6)
  {
    int v10 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        int v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    unint64_t v12 = (char *)operator new(0x58uLL);
    v14[1] = v7;
    *((_DWORD *)v12 + 8) = **a4;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    char v15 = 1;
    sub_1000EDF90(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    sub_100B83D88((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void sub_100B83D88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1000D80C4(v2 + 5);
    }
    operator delete(v2);
  }
}

float sub_100B83DE0(float **a1, float *a2, float **a3, float *a4)
{
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  if (a2 == a4 || (uint64_t v6 = a4 - *a3 + (((char *)a3 - (char *)a1) << 7) - (a2 - *a1), v6 <= 0)) {
    sub_101A62948();
  }
  uint64_t v7 = (float **)sub_100B83EFC((uint64_t)&v16, (unint64_t)v6 >> 1);
  unint64_t v9 = v8;
  if (v8 != a4) {
    sub_100B83F60(v16, v17, v7, v8, a3, a4);
  }
  if ((v6 & 0x8000000000000001) == 1) {
    return *v9;
  }
  int v11 = v17;
  if (v17 == v9)
  {
    int v11 = v9;
  }
  else
  {
    unint64_t v12 = v16;
    unint64_t v13 = *v16;
    uint64_t v14 = v17;
    while (1)
    {
      if ((char *)++v14 - (char *)v13 == 4096)
      {
        char v15 = v12[1];
        ++v12;
        unint64_t v13 = v15;
        uint64_t v14 = v15;
      }
      if (v14 == v9) {
        break;
      }
      if (*v11 < *v14) {
        int v11 = v14;
      }
    }
  }
  return *v11 + (float)((float)(*v9 - *v11) * 0.5);
}

void *sub_100B83EFC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 2);
    if (v4 < 1) {
      result -= (unint64_t)(1023 - v4) >> 10;
    }
    else {
      result += (unint64_t)v4 >> 10;
    }
  }
  return result;
}

float **sub_100B83F60(float **result, float *a2, float **a3, float *a4, float **a5, float *a6)
{
  uint64_t v70 = result;
  uint64_t v71 = a2;
  if (a6 != a4)
  {
    uint64_t v6 = a6;
    int v10 = a2;
    do
    {
      if (v6 == v10) {
        break;
      }
      int v11 = *a5;
      uint64_t v12 = v6 - *a5 + (((char *)a5 - (char *)result) << 7) - (v10 - *result);
      if ((unint64_t)v12 < 2) {
        break;
      }
      if (v12 == 3)
      {
        uint64_t v65 = v10 + 1;
        v66 = v70;
        if ((char *)(v10 + 1) - (char *)*v70 == 4096)
        {
          v66 = v70 + 1;
          uint64_t v65 = v70[1];
        }
        if (v6 == v11)
        {
          uint64_t v67 = (uint64_t)*--a5;
          uint64_t v6 = (float *)(v67 + 4096);
        }
        return (float **)sub_100B84478((uint64_t)v70, v10, (uint64_t)v66, v65, (uint64_t)a5, v6 - 1);
      }
      if (v12 == 2)
      {
        if (v6 == v11) {
          uint64_t v6 = *(a5 - 1) + 1024;
        }
        float v68 = *(v6 - 1);
        if (v68 < *v10)
        {
          float v69 = *a2;
          *a2 = v68;
          *(v6 - 1) = v69;
        }
        return result;
      }
      if (v12 <= 7) {
        return sub_100B84500(v70, a2, a5, v6);
      }
      uint64_t v14 = sub_100B83EFC((uint64_t)&v70, (unint64_t)v12 >> 1);
      char v15 = v13;
      uint64_t v16 = a5;
      uint64_t v17 = (uint64_t)v6;
      if (v6 == *a5)
      {
        uint64_t v16 = a5 - 1;
        uint64_t v17 = (uint64_t)(*(a5 - 1) + 1024);
      }
      uint64_t v18 = (float *)(v17 - 4);
      int v19 = sub_100B84478((uint64_t)v70, v71, (uint64_t)v14, v13, (uint64_t)v16, (float *)(v17 - 4));
      __n128 result = v70;
      a2 = v71;
      float v20 = *v71;
      if (*v71 < *v15)
      {
LABEL_17:
        uint64_t v23 = a2 + 1;
        uint64_t v24 = *result;
        uint64_t v25 = *result;
        int64_t v26 = result;
        if ((char *)(a2 + 1) - (char *)*result == 4096)
        {
          int64_t v26 = result + 1;
          uint64_t v25 = result[1];
          uint64_t v23 = v25;
        }
        if (v26 < v16 || v26 == v16 && v23 < v18)
        {
          while (1)
          {
            float v27 = *v15;
            while (1)
            {
              float v28 = *v23;
              if (*v23 >= v27) {
                break;
              }
              if ((char *)++v23 - (char *)v25 == 4096)
              {
                uint64_t v29 = v26[1];
                ++v26;
                uint64_t v25 = v29;
                uint64_t v23 = v29;
              }
            }
            uint64_t v30 = *v16;
            do
            {
              if (v18 == v30)
              {
                uint64_t v31 = *--v16;
                uint64_t v30 = v31;
                uint64_t v18 = v31 + 1024;
              }
              float v32 = *--v18;
              float v33 = v32;
            }
            while (v32 >= v27);
            if (v26 >= v16 && (v26 != v16 || v23 >= v18)) {
              break;
            }
            BOOL v34 = v15 == v23;
            *v23++ = v33;
            *uint64_t v18 = v28;
            ++v19;
            if (v34) {
              char v15 = v18;
            }
            if ((char *)v23 - (char *)v25 == 4096)
            {
              int v35 = v26[1];
              ++v26;
              uint64_t v25 = v35;
              uint64_t v23 = v35;
            }
          }
        }
        if (v23 != v15)
        {
          int v36 = *(_DWORD *)v23;
          if (*v15 < *v23)
          {
            *uint64_t v23 = *v15;
            *(_DWORD *)char v15 = v36;
            ++v19;
          }
        }
        if (v23 == a4) {
          return result;
        }
        if (!v19)
        {
          if (v26 > a3 || (float v37 = v25, v38 = v23, v39 = v26, v23 > a4) && (float v37 = v25, v38 = v23, v39 = v26, v26 == a3))
          {
            long long v40 = a2;
            int64_t v41 = result;
            while (1)
            {
              uint64_t v42 = v40 + 1;
              if ((char *)(v40 + 1) - (char *)v24 == 4096)
              {
                uint64_t v43 = v41[1];
                ++v41;
                uint64_t v24 = v43;
                uint64_t v42 = v43;
              }
              if (v42 == v23) {
                break;
              }
              BOOL v44 = *v42 < *v40;
              long long v40 = v42;
              if (v44) {
                goto LABEL_42;
              }
            }
          }
          else
          {
            while (1)
            {
              int v45 = v38 + 1;
              if ((char *)(v38 + 1) - (char *)v37 == 4096)
              {
                int64_t v46 = v39[1];
                ++v39;
                float v37 = v46;
                int v45 = v46;
              }
              if (v45 == v6) {
                break;
              }
              BOOL v44 = *v45 < *v38;
              uint64_t v38 = v45;
              if (v44) {
                goto LABEL_42;
              }
            }
          }
          return result;
        }
LABEL_42:
        if (v26 <= a3)
        {
          if (v23 > a4 && v26 == a3)
          {
            int v10 = a2;
            uint64_t v6 = v23;
            a5 = a3;
          }
          else
          {
            a2 = v23 + 1;
            if ((char *)(v23 + 1) - (char *)v25 == 4096)
            {
              __int16 v63 = v26[1];
              ++v26;
              a2 = v63;
            }
            uint64_t v70 = v26;
            uint64_t v71 = a2;
            __n128 result = v26;
            int v10 = a2;
          }
        }
        else
        {
          int v10 = a2;
          uint64_t v6 = v23;
          a5 = v26;
        }
      }
      else
      {
        uint64_t v21 = *v16;
        while (1)
        {
          if (v18 == v21)
          {
            BOOL v22 = *--v16;
            uint64_t v21 = v22;
            uint64_t v18 = v22 + 1024;
          }
          if (v71 == --v18) {
            break;
          }
          if (*v18 < *v15)
          {
            float *v71 = *v18;
            *uint64_t v18 = v20;
            ++v19;
            goto LABEL_17;
          }
        }
        int v10 = v71 + 1;
        __int16 v47 = *v70;
        if ((char *)(v71 + 1) - (char *)*v70 == 4096)
        {
          __n128 result = v70 + 1;
          __int16 v47 = v70[1];
          int v10 = v47;
        }
        unint64_t v48 = *a5;
        __int16 v49 = a5;
        uint64_t v50 = v6;
        if (v6 == *a5)
        {
          __int16 v49 = a5 - 1;
          unint64_t v48 = *(a5 - 1);
          uint64_t v50 = v48 + 1024;
        }
        float v52 = *(v50 - 1);
        __int16 v51 = v50 - 1;
        float v53 = v52;
        if (v20 >= v52)
        {
          while (v10 != v51)
          {
            float v61 = *v10;
            if (v20 < *v10)
            {
              *v10++ = v53;
              *__int16 v51 = v61;
              if ((char *)v10 - (char *)v47 == 4096)
              {
                uint64_t v64 = result[1];
                ++result;
                __int16 v47 = v64;
                int v10 = v64;
              }
              goto LABEL_68;
            }
            if ((char *)++v10 - (char *)v47 == 4096)
            {
              long long v62 = result[1];
              ++result;
              __int16 v47 = v62;
              int v10 = v62;
            }
          }
          return result;
        }
LABEL_68:
        if (v10 == v51) {
          return result;
        }
        while (1)
        {
          float v54 = *a2;
          while (1)
          {
            float v55 = *v10;
            if (v54 < *v10) {
              break;
            }
            if ((char *)++v10 - (char *)v47 == 4096)
            {
              double v56 = result[1];
              ++result;
              __int16 v47 = v56;
              int v10 = v56;
            }
          }
          do
          {
            if (v51 == v48)
            {
              __int16 v57 = *--v49;
              unint64_t v48 = v57;
              __int16 v51 = v57 + 1024;
            }
            float v58 = *--v51;
            float v59 = v58;
          }
          while (v54 < v58);
          if (result >= v49 && (result != v49 || v10 >= v51)) {
            break;
          }
          *v10++ = v59;
          *__int16 v51 = v55;
          if ((char *)v10 - (char *)v47 == 4096)
          {
            long long v60 = result[1];
            ++result;
            __int16 v47 = v60;
            int v10 = v60;
          }
        }
        if (result > a3 || v10 > a4 && result == a3) {
          return result;
        }
        uint64_t v70 = result;
        uint64_t v71 = v10;
        a2 = v10;
      }
    }
    while (v6 != a4);
  }
  return result;
}

uint64_t sub_100B84478(uint64_t a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6)
{
  float v6 = *a4;
  float v7 = *a2;
  float v8 = *a6;
  if (*a4 < *a2)
  {
    if (v8 < v6)
    {
      *a2 = v8;
      *a6 = v7;
      return 1;
    }
    *a2 = v6;
    *a4 = v7;
    if (*a6 >= v7) {
      return 1;
    }
    *a4 = *a6;
    *a6 = v7;
    return 2;
  }
  if (v8 < v6)
  {
    *a4 = v8;
    *a6 = v6;
    float v9 = *a2;
    if (*a4 >= *a2) {
      return 1;
    }
    *a2 = *a4;
    *a4 = v9;
    return 2;
  }
  return 0;
}

float **sub_100B84500(float **result, float *a2, float **a3, float *a4)
{
  uint64_t v4 = (uint64_t)a4;
  if (*a3 == a4) {
    uint64_t v4 = (uint64_t)(*(a3 - 1) + 1024);
  }
  unint64_t v5 = (float *)(v4 - 4);
  while (a2 != v5)
  {
    if (a2 == a4)
    {
      float v7 = a4;
    }
    else
    {
      float v6 = *result;
      float v7 = a2;
      float v8 = a2;
      float v9 = result;
      while (1)
      {
        if ((char *)++v8 - (char *)v6 == 4096)
        {
          int v10 = v9[1];
          ++v9;
          float v6 = v10;
          float v8 = v10;
        }
        if (v8 == a4) {
          break;
        }
        if (*v8 < *v7) {
          float v7 = v8;
        }
      }
    }
    if (v7 != a2)
    {
      float v11 = *a2;
      *a2 = *v7;
      *float v7 = v11;
    }
    if ((char *)++a2 - (char *)*result == 4096)
    {
      uint64_t v12 = result[1];
      ++result;
      a2 = v12;
    }
  }
  return result;
}

void sub_100B845B0(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    float v6 = (char *)a1[3];
    a1[4] = v4;
    float v7 = (void *)a1[1];
    float v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    float v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)float v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)sub_1000DA54C(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      float v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      float v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        float v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      float v9 = (char *)a1[1];
    }
    float v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    BOOL v44 = (void *)a1[1];
    float v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    float v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      float v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      float v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        float v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        __int16 v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)__int16 v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        float v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  float v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  float v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100B8487C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100B848C8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v7 = *(void *)(a1 + 16);
      unint64_t v4 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v4;
      unint64_t v6 = v7 - (void)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    uint64_t v8 = 256;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    uint64_t v8 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v8;
  }
  sub_100B8496C((void **)a1);
  uint64_t result = sub_100B84B34(a1, a2);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100B8496C(void **a1)
{
  if (a1[5])
  {
    sub_10007F07C((uint64_t)a1, 0);
    sub_100B849F0(a1, 0);
  }
  else
  {
    BOOL v3 = a1[1];
    for (uint64_t i = (uint64_t)a1[2]; (void *)i != v3; a1[2] = (void *)i)
    {
      operator delete(*(void **)(i - 8));
      BOOL v3 = a1[1];
      uint64_t i = (uint64_t)a1[2] - 8;
    }
    a1[4] = 0;
  }

  sub_100B84A60(a1);
}

uint64_t sub_100B849F0(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_100B84A60(void **a1)
{
  uint64_t v3 = a1[3];
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (unsigned char *)*a1) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    uint64_t v10 = 0;
    int v7 = 0;
    goto LABEL_8;
  }
  int v7 = (char *)sub_1000DA54C(v2, v6);
  uint64_t v8 = a1[1];
  unint64_t v5 = a1[2];
  uint64_t v10 = &v7[8 * v9];
  uint64_t v11 = v5 - v8;
  if (v5 == v8)
  {
LABEL_8:
    BOOL v14 = v5;
    goto LABEL_9;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 8 * (v11 >> 3);
  do
  {
    *(void *)&v7[v12] = *(void *)&v8[v12];
    v12 += 8;
  }
  while (v13 != v12);
  unint64_t v5 = a1[1];
  BOOL v14 = a1[2];
LABEL_9:
  int64_t v15 = v14 - v5;
  uint64_t v16 = *a1;
  *a1 = v7;
  a1[1] = v7;
  a1[2] = &v7[v15];
  a1[3] = v10;
  if (v16)
  {
    operator delete(v16);
  }
}

uint64_t sub_100B84B34(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != v5) {
    *(void *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  sub_100B84A60((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

uint64_t sub_100B84BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v4 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v4;
      unint64_t v6 = v7 - (void)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    uint64_t v8 = 128;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    uint64_t v8 = 256;
LABEL_7:
    *(void *)(a1 + 32) = v8;
  }
  sub_100B84C48((void **)a1);
  uint64_t result = sub_100B84DA0(a1, a2);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100B84C48(void **a1)
{
  if (a1[5])
  {
    sub_100096314((uint64_t)a1, 0);
    sub_100446B90(a1, 0);
  }
  else
  {
    uint64_t v3 = a1[1];
    for (uint64_t i = (uint64_t)a1[2]; (void *)i != v3; a1[2] = (void *)i)
    {
      operator delete(*(void **)(i - 8));
      uint64_t v3 = a1[1];
      uint64_t i = (uint64_t)a1[2] - 8;
    }
    a1[4] = 0;
  }

  sub_100B84CCC(a1);
}

void sub_100B84CCC(void **a1)
{
  uint64_t v3 = a1[3];
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (unsigned char *)*a1) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    uint64_t v10 = 0;
    uint64_t v7 = 0;
    goto LABEL_8;
  }
  uint64_t v7 = (char *)sub_1000DA54C(v2, v6);
  uint64_t v8 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v10 = &v7[8 * v9];
  uint64_t v11 = v5 - v8;
  if (v5 == v8)
  {
LABEL_8:
    BOOL v14 = v5;
    goto LABEL_9;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 8 * (v11 >> 3);
  do
  {
    *(void *)&v7[v12] = *(void *)&v8[v12];
    v12 += 8;
  }
  while (v13 != v12);
  uint64_t v5 = a1[1];
  BOOL v14 = a1[2];
LABEL_9:
  int64_t v15 = v14 - v5;
  uint64_t v16 = *a1;
  *a1 = v7;
  a1[1] = v7;
  a1[2] = &v7[v15];
  a1[3] = v10;
  if (v16)
  {
    operator delete(v16);
  }
}

uint64_t sub_100B84DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != v5) {
    *(void *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  sub_100B84CCC((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

void sub_100B84E10(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    unint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)sub_1000DA54C(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      float v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    BOOL v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      float v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        __int16 v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)__int16 v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  float v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  float v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100B850DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100B85128(uint64_t a1)
{
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_1022E8B08);
  }
  unint64_t v2 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
  {
    double v3 = *(float *)(a1 + 11672);
    double v4 = *(float *)(a1 + 11676);
    double v5 = *(float *)(a1 + 11680);
    double v6 = *(float *)(a1 + 11684);
    double v7 = *(float *)(a1 + 11688);
    double v8 = *(float *)(a1 + 11692);
    double v9 = *(float *)(a1 + 11696);
    double v10 = *(float *)(a1 + 11700);
    double v11 = *(float *)(a1 + 11704);
    uint64_t v12 = *(void *)(a1 + 11728);
    int v13 = *(unsigned __int8 *)(a1 + 11720);
    int v14 = *(_DWORD *)(a1 + 11708);
    double v15 = *(float *)(a1 + 11712);
    double v16 = *(float *)(a1 + 11716);
    *(_DWORD *)buf = 134221312;
    double v19 = v3;
    __int16 v20 = 2048;
    double v21 = v4;
    __int16 v22 = 2048;
    double v23 = v5;
    __int16 v24 = 2048;
    double v25 = v6;
    __int16 v26 = 2048;
    double v27 = v7;
    __int16 v28 = 2048;
    double v29 = v8;
    __int16 v30 = 2048;
    double v31 = v9;
    __int16 v32 = 2048;
    double v33 = v10;
    __int16 v34 = 2048;
    double v35 = v11;
    __int16 v36 = 2048;
    uint64_t v37 = v12;
    __int16 v38 = 1024;
    int v39 = v13;
    __int16 v40 = 1024;
    int v41 = v14;
    __int16 v42 = 2048;
    double v43 = v15;
    __int16 v44 = 2048;
    double v45 = v16;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "KickFeatures,poseRangeX,%f,poseRangeZ,%f,pose,%f,yawRange,%f,accelXYKickRange,%f,totalAccelZ,%f,rotationZKickRange,%f,ratioAccelXYToRotZKickRange,%f,peakAccel,%f,startTime,%f,isKick,%d,gravityMedianCross,%d,powerVertToHor_2_14,%f,ratioAccelToGyroYZHighFreq,%f", buf, 0x86u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1022E8B08);
    }
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimKickingFeatureCalculator::logFeatures() const", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
}

uint64_t sub_100B85490(uint64_t result)
{
  uint64_t v1 = 0;
  int64x2_t v2 = vdupq_n_s64(1uLL);
  do
  {
    uint64_t v3 = result + v1;
    *(void *)uint64_t v3 = 0x10000000000;
    *(_DWORD *)(v3 + 1032) = 0;
    *(void *)(result + v1 + 1036) = 1065353216;
    *(int64x2_t *)(result + v1 + 1048) = v2;
    v1 += 1064;
  }
  while (v1 != 3192);
  uint64_t v4 = 0;
  int64x2_t v5 = vdupq_n_s64(1uLL);
  do
  {
    double v6 = (int64x2_t *)(result + v4);
    v6[199].i64[1] = 0x10000000000;
    v6[264].i32[0] = 0;
    *(void *)(result + 4228 + v4) = 1065353216;
    v6[265] = v5;
    v4 += 1064;
  }
  while (v4 != 2128);
  uint64_t v7 = 0;
  int64x2_t v8 = vdupq_n_s64(1uLL);
  do
  {
    double v9 = (int64x2_t *)(result + v7);
    v9[332].i64[1] = 0x10000000000;
    v9[397].i32[0] = 0;
    *(void *)(result + 6356 + v7) = 1065353216;
    v9[398] = v8;
    v7 += 1064;
  }
  while (v7 != 2128);
  uint64_t v10 = 0;
  *(void *)(result + 7448) = 0x10000000000;
  *(_DWORD *)(result + 8480) = 0;
  *(void *)(result + 8484) = 1065353216;
  *(int64x2_t *)(result + 8496) = vdupq_n_s64(1uLL);
  uint64_t v11 = result + 9544;
  do
  {
    uint64_t v12 = v11 + v10;
    *(void *)(v11 + v10 - 1032) = 0x10000000000;
    *(_DWORD *)uint64_t v12 = 0;
    *(void *)(v12 + 4) = 1065353216;
    *(int64x2_t *)(v12 + 16) = vdupq_n_s64(1uLL);
    v10 += 1064;
  }
  while (v10 != 2128);
  uint64_t v13 = 0;
  *(void *)(result + 10640) = 0x10000000000;
  *(_OWORD *)(result + 11672) = 0u;
  *(_OWORD *)(result + 11688) = 0u;
  *(_OWORD *)(result + 11704) = 0u;
  *(unsigned char *)(result + 11720) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(result + 11728) = _Q0;
  int64x2_t v19 = vdupq_n_s64(2uLL);
  *(_DWORD *)(result + 11744) = 0;
  do
  {
    __int16 v20 = (_DWORD *)(result + v13);
    v20[258] = 0;
    *(void *)(result + v13 + 1036) = 1061865576;
    *(int64x2_t *)(result + v13 + 1048) = v19;
    _DWORD *v20 = 0;
    v13 += 1064;
  }
  while (v13 != 3192);
  uint64_t v21 = 0;
  int64x2_t v22 = vdupq_n_s64(2uLL);
  do
  {
    double v23 = (int64x2_t *)(result + v21);
    v23[264].i32[0] = 0;
    *(void *)(result + 4228 + v21) = 1061865576;
    v23[265] = v22;
    v23[199].i32[2] = 0;
    v21 += 1064;
  }
  while (v21 != 2128);
  uint64_t v24 = 0;
  *(_DWORD *)(result + 8480) = 0;
  *(void *)(result + 8484) = 1061865576;
  *(int64x2_t *)(result + 8496) = vdupq_n_s64(2uLL);
  *(_DWORD *)(result + 7448) = 0;
  uint64_t v25 = result + 9544;
  do
  {
    uint64_t v26 = v25 + v24;
    *(_DWORD *)uint64_t v26 = 0;
    *(void *)(v26 + 4) = 1061865576;
    *(int64x2_t *)(v26 + 16) = vdupq_n_s64(2uLL);
    *(_DWORD *)(v25 + v24 - 1032) = 0;
    v24 += 1064;
  }
  while (v24 != 2128);
  uint64_t v27 = 0;
  int64x2_t v28 = vdupq_n_s64(2uLL);
  do
  {
    double v29 = (int64x2_t *)(result + v27);
    v29[397].i32[0] = 0;
    *(void *)(result + 6356 + v27) = 1061865576;
    v29[398] = v28;
    v29[332].i32[2] = 0;
    v27 += 1064;
  }
  while (v27 != 2128);
  *(_DWORD *)(result + 10640) = 0;
  return result;
}

BOOL sub_100B856B4(uint64_t a1, float *a2, double a3, double a4)
{
  int64x2_t v8 = (unsigned __int16 *)(a1 + 10640);
  sub_100B85824(a1 + 3192, a2[6], a2[8]);
  sub_100B9BDB0(a2 + 9, v24);
  uint64_t v22 = 1065353216;
  int v23 = 0;
  float v9 = sub_1004E301C((uint64_t)v24, (float *)&v22);
  sub_100B85824(a1 + 5320, v9, v10);
  sub_100B9BDB0(a2 + 9, v24);
  sub_1004E301C((uint64_t)v24, a2);
  sub_100B8590C((unsigned __int16 *)(a1 + 7448), v11);
  sub_100B85824(a1 + 8512, a2[1], a2[2]);
  sub_100B9BDB0(a2 + 9, v24);
  float v12 = sub_1004E301C((uint64_t)v24, a2 + 3);
  float v14 = v13;
  sub_100B859AC(a1, v12, v15, v13);
  uint64_t v16 = v8[1];
  unint64_t v17 = *(unsigned int *)(a1 + 10644);
  uint64_t v18 = *v8;
  if (v18 + v16 >= v17) {
    uint64_t v19 = *(unsigned int *)(a1 + 10644);
  }
  else {
    uint64_t v19 = 0;
  }
  *(float *)&v8[2 * (v18 + v16 - v19) + 4] = v14;
  if (v17 <= v16)
  {
    if (v18 + 1 < v17) {
      LOWORD(v17) = 0;
    }
    unsigned __int16 *v8 = v18 + 1 - v17;
  }
  else
  {
    v8[1] = v16 + 1;
  }
  int v20 = *(_DWORD *)(a1 + 11744) + 1;
  *(_DWORD *)(a1 + 11744) = v20;
  *(double *)(a1 + 11736) = a4;
  *(double *)(a1 + 11728) = a3;
  return (v20 & 0x7F) == 0 && sub_100B85A74(a1);
}

uint64_t sub_100B85824(uint64_t a1, float a2, float a3)
{
  uint64_t v4 = 0;
  *(float *)float v14 = a2;
  *(float *)&v14[1] = a3;
  char v5 = 1;
  do
  {
    char v6 = v5;
    uint64_t v7 = (unsigned __int16 *)(a1 + 1064 * v4);
    uint64_t result = sub_100B86564((uint64_t)(v7 + 516), (float *)&v14[v4]);
    uint64_t v9 = *((void *)v7 + 132) - 1;
    *((void *)v7 + 132) = v9;
    if (!v9)
    {
      *((void *)v7 + 132) = *(void *)(a1 + 1064 * v4 + 1048);
      uint64_t v10 = v7[1];
      unint64_t v11 = *((unsigned int *)v7 + 1);
      uint64_t v12 = *v7;
      if (v12 + v10 >= v11) {
        uint64_t v13 = *((unsigned int *)v7 + 1);
      }
      else {
        uint64_t v13 = 0;
      }
      *(_DWORD *)&v7[2 * (v12 + v10 - v13) + 4] = *((_DWORD *)v7 + 260);
      if (v11 <= v10)
      {
        if (v12 + 1 < v11) {
          LOWORD(v11) = 0;
        }
        *uint64_t v7 = v12 + 1 - v11;
      }
      else
      {
        v7[1] = v10 + 1;
      }
    }
    char v5 = 0;
    uint64_t v4 = 1;
  }
  while ((v6 & 1) != 0);
  return result;
}

uint64_t sub_100B8590C(unsigned __int16 *a1, float a2)
{
  float v9 = a2;
  uint64_t result = sub_100B86564((uint64_t)(a1 + 516), &v9);
  uint64_t v4 = *((void *)a1 + 132) - 1;
  *((void *)a1 + 132) = v4;
  if (!v4)
  {
    *((void *)a1 + 132) = *((void *)a1 + 131);
    uint64_t v5 = a1[1];
    unint64_t v6 = *((unsigned int *)a1 + 1);
    uint64_t v7 = *a1;
    if (v7 + v5 >= v6) {
      uint64_t v8 = *((unsigned int *)a1 + 1);
    }
    else {
      uint64_t v8 = 0;
    }
    *(_DWORD *)&a1[2 * (v7 + v5 - v8) + 4] = *((_DWORD *)a1 + 260);
    if (v6 <= v5)
    {
      if (v7 + 1 < v6) {
        LOWORD(v6) = 0;
      }
      *a1 = v7 + 1 - v6;
    }
    else
    {
      a1[1] = v5 + 1;
    }
  }
  return result;
}

uint64_t sub_100B859AC(uint64_t a1, float a2, float a3, float a4)
{
  uint64_t v5 = 0;
  *(float *)float v14 = a2;
  *(float *)&v14[1] = a3;
  *(float *)&_DWORD v14[2] = a4;
  unint64_t v6 = (float *)v14;
  do
  {
    uint64_t v7 = (unsigned __int16 *)(a1 + v5);
    uint64_t result = sub_100B86564(a1 + v5 + 1032, v6);
    uint64_t v9 = *(void *)(a1 + v5 + 1056) - 1;
    *(void *)(a1 + v5 + 1056) = v9;
    if (!v9)
    {
      *((void *)v7 + 132) = *((void *)v7 + 131);
      uint64_t v10 = v7[1];
      unint64_t v11 = *((unsigned int *)v7 + 1);
      uint64_t v12 = *v7;
      if (v12 + v10 >= v11) {
        uint64_t v13 = *((unsigned int *)v7 + 1);
      }
      else {
        uint64_t v13 = 0;
      }
      *(_DWORD *)&v7[2 * (v12 + v10 - v13) + 4] = *((_DWORD *)v7 + 260);
      if (v11 <= v10)
      {
        if (v12 + 1 < v11) {
          LOWORD(v11) = 0;
        }
        *uint64_t v7 = v12 + 1 - v11;
      }
      else
      {
        v7[1] = v10 + 1;
      }
    }
    v5 += 1064;
    ++v6;
  }
  while (v5 != 3192);
  return result;
}

BOOL sub_100B85A74(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int16 *)(a1 + 3194);
  if (v1 >= 0x100)
  {
    *(_DWORD *)(a1 + 11720) = 0;
    *(_OWORD *)(a1 + 11688) = 0u;
    *(_OWORD *)(a1 + 11704) = 0u;
    *(_OWORD *)(a1 + 11672) = 0u;
    sub_100B85D18((float32x2_t *)a1);
    sub_100B85BE8(a1);
    sub_100B85E18(a1);
    sub_100B862A8(a1);
    BOOL v3 = 0;
    if (*(float *)(a1 + 11672) >= 90.0 || *(float *)(a1 + 11676) >= 90.0) {
      goto LABEL_17;
    }
    if (fabsf(*(float *)(a1 + 11680)) >= 60.0 || *(float *)(a1 + 11684) >= 90.0) {
      goto LABEL_16;
    }
    float v6 = *(float *)(a1 + 11688);
    if (v6 <= 2.0 || v6 >= 25.0) {
      goto LABEL_16;
    }
    BOOL v3 = 0;
    float v9 = *(float *)(a1 + 11696);
    if (v9 <= 2.0) {
      goto LABEL_17;
    }
    if (v9 >= 50.0) {
      goto LABEL_17;
    }
    if (*(float *)(a1 + 11700) <= 0.4) {
      goto LABEL_17;
    }
    BOOL v3 = 0;
    float v10 = *(float *)(a1 + 11692);
    if (v10 <= 0.05 || v10 >= 20.0 || *(float *)(a1 + 11712) >= 1.6) {
      goto LABEL_17;
    }
    if ((*(_DWORD *)(a1 + 11708) - 3) <= 0x1F) {
      BOOL v3 = *(float *)(a1 + 11716) < 1.7;
    }
    else {
LABEL_16:
    }
      BOOL v3 = 0;
LABEL_17:
    *(unsigned char *)(a1 + 11720) = v3;
    sub_100B85128(a1);
  }
  return v1 > 0xFF;
}

void sub_100B85BE8(uint64_t a1)
{
  if (!*(_WORD *)(a1 + 3194))
  {
    float v12 = -INFINITY;
    goto LABEL_15;
  }
  unint64_t v2 = 0;
  float v3 = 0.0;
  float v4 = -3.4028e38;
  float v5 = 3.4028e38;
  float v6 = 0.0;
  do
  {
    float v7 = v6;
    float v8 = *(float *)sub_1004182C4((unsigned __int16 *)(a1 + 6384), v2);
    float v9 = (float *)sub_1004182C4((unsigned __int16 *)(a1 + 5320), v2);
    float v6 = atan2f(v8, *v9) * 57.296;
    float v10 = v6 - v7;
    if ((float)(v6 - v7) <= 180.0)
    {
      if (v10 >= -180.0) {
        goto LABEL_8;
      }
      float v11 = 360.0;
    }
    else
    {
      float v11 = -360.0;
    }
    float v10 = v10 + v11;
LABEL_8:
    float v3 = v3 + v10;
    if (v3 > v4) {
      float v4 = v3;
    }
    if (v3 < v5) {
      float v5 = v3;
    }
    ++v2;
  }
  while (v2 < *(unsigned __int16 *)(a1 + 3194));
  float v12 = v4 - v5;
LABEL_15:
  *(float *)(a1 + 11684) = v12;
}

void sub_100B85D18(float32x2_t *a1)
{
  if (a1[399].i16[1])
  {
    unint64_t v2 = 0;
    float32x2_t v3 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    float32x2_t v4 = (float32x2_t)0x80000000800000;
    float v5 = 0.0;
    float32x2_t v6 = (float32x2_t)vdup_n_s32(0x42652EE1u);
    do
    {
      float v7 = (float *)sub_1004182C4((unsigned __int16 *)&a1[399], v2);
      float v11 = asinf(*v7);
      float v8 = (float *)sub_1004182C4((unsigned __int16 *)&a1[532], v2);
      float32x2_t v9 = vmul_f32((float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(asinf(*v8)), LODWORD(v11)), v6);
      float v5 = v5 + v9.f32[0];
      float32x2_t v4 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v9, v4), (int8x8_t)v9, (int8x8_t)v4);
      float32x2_t v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v3, v9), (int8x8_t)v9, (int8x8_t)v3);
      ++v2;
    }
    while (v2 < a1[399].u16[1]);
    a1[1459] = vsub_f32(v4, v3);
    float v10 = v5 / (float)v2;
  }
  else
  {
    a1[1459] = (float32x2_t)0x7F0000007FLL;
    float v10 = 0.0;
  }
  a1[1460].f32[0] = v10;
}

void sub_100B85E18(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024803F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024803F8))
  {
    float v27 = sub_100D6A9FC(50, 0x80uLL, 0.5);
    dword_1024803F0 = sub_100D6A824(v27);
    __cxa_guard_release(&qword_1024803F8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102480408, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102480408))
  {
    float v28 = sub_100D6A9FC(50, 0x80uLL, 5.0);
    dword_102480400 = sub_100D6A824(v28);
    __cxa_guard_release(&qword_102480408);
  }
  sub_1014F0838(&v29);
  sub_1014F083C((uint64_t)&v29, v35, (unsigned __int16 *)v2);
  sub_1014F083C((uint64_t)&v29, v34, (unsigned __int16 *)(v2 + 1064));
  sub_1014F083C((uint64_t)&v29, v33, (unsigned __int16 *)(v2 + 2128));
  uint64_t v3 = 0;
  float v4 = 0.0;
  do
  {
    float v5 = *(float *)&v35[v3] + *(float *)&v34[v3];
    if ((float)(v5 + *(float *)&v33[v3]) > v4) {
      float v4 = v5 + *(float *)&v33[v3];
    }
    v32[v3++] = v5;
  }
  while (v3 != 128);
  *(float *)(v2 + 11688) = sub_100D6AA48(dword_1024803F0, dword_102480400, (uint64_t)v32);
  *(float *)(v2 + 11692) = sub_100D6AA48(0, 127, (uint64_t)v33);
  *(float *)(v2 + 11704) = v4;
  float v6 = sub_100D6A9FC(50, 0x80uLL, 2.0);
  unsigned int v7 = sub_100D6A824(v6);
  float v8 = sub_100D6A9FC(50, 0x80uLL, 14.0);
  unsigned int v9 = sub_100D6A824(v8);
  float v10 = 0.0;
  float v11 = 0.0;
  if (v7 <= v9)
  {
    unint64_t v12 = (int)v7;
    unint64_t v13 = (int)v7;
    do
      float v10 = v10 + *(float *)&v33[v13++];
    while (v13 <= (int)v9);
    float v14 = 0.0;
    unint64_t v15 = (int)v7;
    do
      float v14 = v14 + *(float *)&v35[v15++];
    while (v15 <= (int)v9);
    float v16 = 0.0;
    do
      float v16 = v16 + *(float *)&v34[v12++];
    while (v12 <= (int)v9);
    float v11 = (float)(v14 + v16) * 0.5;
  }
  float v17 = v10 / v11;
  if (v11 <= 0.2) {
    float v17 = 1.0;
  }
  *(float *)(v2 + 11712) = v17;
  sub_1014F083C((uint64_t)&v29, v32, (unsigned __int16 *)(v2 + 7448));
  float v18 = sub_100D6AA48(dword_1024803F0, dword_102480400, (uint64_t)v32);
  *(float *)(v2 + 11696) = v18;
  float v19 = 0.0;
  if (v18 > 0.0000011921) {
    float v19 = *(float *)(v2 + 11688) / v18;
  }
  *(float *)(v2 + 11700) = v19;
  sub_1014F083C((uint64_t)&v29, v31, (unsigned __int16 *)(v2 + 8512));
  sub_1014F083C((uint64_t)&v29, v30, (unsigned __int16 *)(v2 + 9576));
  for (uint64_t i = 0; i != 128; i += 4)
  {
    *(float32x4_t *)&v31[i + 128] = vaddq_f32(vaddq_f32(vmulq_f32(*(float32x4_t *)&v35[i], *(float32x4_t *)&v35[i]), vmulq_f32(*(float32x4_t *)&v34[i], *(float32x4_t *)&v34[i])), vmulq_f32(*(float32x4_t *)&v33[i], *(float32x4_t *)&v33[i]));
    *(float32x4_t *)&v32[i] = vaddq_f32(vmulq_f32(*(float32x4_t *)&v31[i], *(float32x4_t *)&v31[i]), vmulq_f32(*(float32x4_t *)&v30[i], *(float32x4_t *)&v30[i]));
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102480418, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102480418))
  {
    qword_102480410 = vcvtas_u32_f32(sub_100D6A9FC(50, 0x80uLL, 10.0));
    __cxa_guard_release(&qword_102480418);
  }
  uint64_t v21 = qword_102480410;
  float v22 = 0.0;
  float v23 = 0.0;
  float v24 = 0.0;
  if ((unint64_t)qword_102480410 <= 0x7F)
  {
    uint64_t v25 = qword_102480410;
    do
      float v23 = v23 + v32[v25++];
    while (v25 != 128);
    float v24 = 0.0;
    do
      float v24 = v24 + *(float *)&v31[v21++ + 128];
    while (v21 != 128);
  }
  float v26 = v24 / v23;
  if (v23 > 0.0) {
    float v22 = v26;
  }
  *(float *)(v2 + 11716) = v22;
}

void sub_100B86268(_Unwind_Exception *a1)
{
}

void sub_100B862A8(uint64_t a1)
{
  __p = 0;
  uint64_t v21 = 0;
  float v22 = 0;
  if (*(_WORD *)(a1 + 3194))
  {
    unint64_t v2 = 0;
    do
    {
      uint64_t v3 = (_DWORD *)sub_1004182C4((unsigned __int16 *)(a1 + 10640), v2);
      float v4 = v3;
      float v5 = v21;
      if (v21 >= v22)
      {
        unsigned int v7 = (char *)__p;
        uint64_t v8 = (v21 - (unsigned char *)__p) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          sub_1001D7FD4();
        }
        uint64_t v10 = v22 - (unsigned char *)__p;
        if ((v22 - (unsigned char *)__p) >> 1 > v9) {
          unint64_t v9 = v10 >> 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v11)
        {
          unint64_t v12 = (char *)sub_10017EA34((uint64_t)&v22, v11);
          unsigned int v7 = (char *)__p;
          float v5 = v21;
        }
        else
        {
          unint64_t v12 = 0;
        }
        unint64_t v13 = &v12[4 * v8];
        *(_DWORD *)unint64_t v13 = *v4;
        float v6 = v13 + 4;
        while (v5 != v7)
        {
          int v14 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v13 - 1) = v14;
          v13 -= 4;
        }
        __p = v13;
        uint64_t v21 = v6;
        float v22 = &v12[4 * v11];
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v21 = *v3;
        float v6 = v5 + 4;
      }
      uint64_t v21 = v6;
      ++v2;
    }
    while (v2 < *(unsigned __int16 *)(a1 + 3194));
  }
  float v15 = sub_100B8648C((uint64_t)&__p);
  float v16 = (char *)__p;
  if (*(_WORD *)(a1 + 3194) == 1)
  {
    *(_DWORD *)(a1 + 11708) = 0;
    if (!v16) {
      return;
    }
  }
  else
  {
    uint64_t v17 = 0;
    int v18 = 0;
    do
    {
      float v19 = *((float *)__p + v17);
      if (v19 > v15 && *((float *)__p + v17 + 1) <= v15)
      {
        ++v18;
        ++v17;
      }
      else
      {
        ++v17;
        if (v19 <= v15 && *((float *)__p + v17) > v15) {
          ++v18;
        }
      }
    }
    while (v17 != *(unsigned __int16 *)(a1 + 3194) - 1);
    *(_DWORD *)(a1 + 11708) = v18;
  }
  uint64_t v21 = v16;
  operator delete(v16);
}

void sub_100B86468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float sub_100B8648C(uint64_t a1)
{
  unsigned int v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  sub_10010F834(&v7, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  unint64_t v2 = v7;
  unint64_t v3 = (unint64_t)(v8 - v7) >> 1;
  float v4 = &v7[v3];
  if (v4 != v8)
  {
    sub_1004EF34C(v7, v4, v8, v1);
    unint64_t v2 = v7;
    unint64_t v3 = (unint64_t)(v8 - v7) >> 1;
  }
  float v5 = v2[v3];
  uint64_t v8 = v2;
  operator delete(v2);
  return v5;
}

void sub_100B86518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B86534(id a1)
{
  qword_102419008 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

uint64_t sub_100B86564(uint64_t result, float *a2)
{
  int v2 = *(_DWORD *)result;
  int v3 = *(_DWORD *)result + 1;
  *(_DWORD *)uint64_t result = v3;
  if (v2 > 2) {
    float v4 = *(float *)(result + 8) - (float)(*(float *)(result + 4) * (float)(*(float *)(result + 8) - *a2));
  }
  else {
    float v4 = (float)(1.0 / (float)v3) * (float)(*a2 + (float)(*(float *)(result + 8) * (float)v2));
  }
  *(float *)(result + 8) = v4;
  return result;
}

NSDictionary *__cdecl sub_100B86CE4(id a1)
{
  return (NSDictionary *)&off_102397568;
}

void sub_100B86F74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

id sub_100B8754C(uint64_t a1, int a2)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022E8CC8);
  }
  float v4 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    int v10 = 0;
    __int16 v11 = 2082;
    unint64_t v12 = "";
    __int16 v13 = 1026;
    int v14 = a2;
    __int16 v15 = 2050;
    uint64_t v16 = 11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"setAlwaysBeaconWildState\", \"isBeaconing\":%{public}hhd, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x22u);
  }
  id v5 = [*(id *)(*(void *)(a1 + 32) + 8) silo];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100B876B4;
  void v7[3] = &unk_1022BDC60;
  char v8 = a2;
  v7[4] = *(void *)(a1 + 32);
  return [v5 async:v7];
}

void *sub_100B876B4(void *result)
{
  float v1 = result;
  if (*((unsigned char *)result + 40))
  {
    *(void *)(result[4] + 256) = +[NSDate now];
    uint64_t v2 = v1[4];
    int v3 = *(void **)(v2 + 56);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_100B879A4;
    v21[3] = &unk_10229FED8;
    v21[4] = v2;
    [v3 setHandler:v21];
    uint64_t v4 = v1[4];
    id v5 = *(void **)(v4 + 56);
    (*(void (**)(void))(*(void *)(v4 + 496) + 104))();
    [v5 setNextFireDelay:];
    uint64_t v6 = v1[4];
    unsigned int v7 = *(void **)(v6 + 64);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    void v20[2] = sub_100B879E8;
    v20[3] = &unk_10229FED8;
    v20[4] = v6;
    [v7 setHandler:v20];
    uint64_t v8 = v1[4];
    uint64_t v9 = *(void **)(v8 + 64);
    (*(void (**)(void))(*(void *)(v8 + 496) + 120))();
    [v9 setNextFireDelay:];
    uint64_t v10 = v1[4];
    __int16 v11 = *(void **)(v10 + 72);
    if (v11)
    {
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_100B87A64;
      v19[3] = &unk_10229FED8;
      v19[4] = v10;
      [v11 setHandler:v19];
      uint64_t v12 = v1[4];
      __int16 v13 = *(void **)(v12 + 72);
      double v14 = (*(double (**)(void))(*(void *)(v12 + 496) + 112))();
      [v13 setNextFireDelay:v14 interval:(*(double (**)(uint64_t))(*(void *)(v1[4] + 496) + 112))(v1[4] + 496)];
      uint64_t v10 = v1[4];
    }
    uint64_t result = *(void **)(v10 + 80);
    if (result)
    {
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_100B87ACC;
      v18[3] = &unk_10229FED8;
      v18[4] = v10;
      [result setHandler:v18];
      uint64_t v15 = v1[4];
      uint64_t v16 = *(void **)(v15 + 80);
      double v17 = (*(double (**)(void))(*(void *)(v15 + 496) + 136))();
      return [v16 setNextFireDelay:v17 interval:(*(double (**)(uint64_t))(*(void *)(v1[4] + 496) + 136))(v1[4] + 496)];
    }
  }
  else
  {
    *(unsigned char *)(result[4] + 98) = 0;
    *(unsigned char *)(result[4] + 99) = 0;
  }
  return result;
}

id sub_100B879A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(void *)(v1 + 344) = 0;
  *(unsigned char *)(v1 + 352) = 0;
  *(void *)(v1 + 320) = 0;
  *(void *)(v1 + 328) = 0;
  *(_DWORD *)(v1 + 336) = 0;
  *(void *)(v1 + 364) = 0;
  *(void *)(v1 + 356) = 0;
  *(void *)(v1 + 384) = 0;
  *(void *)(v1 + 392) = 0;
  *(void *)(v1 + 376) = 0;
  *(_DWORD *)(v1 + 400) = 0;
  uint64_t v2 = *(unsigned char **)(a1 + 32);
  if (v2[97]) {
    return [v2 terminateBeaconing];
  }
  else {
    return _[v2 submitEmptyResult];
  }
}

id sub_100B879E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(v2 + 432) = 0;
  *(unsigned char *)(v2 + 440) = 0;
  *(void *)(v2 + 488) = 0;
  *(void *)(v2 + 408) = 0;
  *(void *)(v2 + 416) = 0;
  *(_DWORD *)(v2 + 424) = 0;
  *(void *)(v2 + 452) = 0;
  *(void *)(v2 + 444) = 0;
  *(void *)(v2 + 464) = 0;
  *(void *)(v2 + 472) = 0;
  *(_DWORD *)(v2 + 480) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 102) = 1;
  [*(id *)(*(void *)(a1 + 32) + 72) invalidate];
  int v3 = *(void **)(a1 + 32);

  return _[v3 queryForBAResult];
}

void *sub_100B87A64(void *result)
{
  uint64_t v1 = result[4];
  if (!*(unsigned char *)(v1 + 100))
  {
    uint64_t v2 = result;
    *(unsigned char *)(v1 + 100) = 1;
    *(void *)(result[4] + 264) = +[NSDate now];
    int v3 = (void *)v2[4];
    return _[v3 queryForBAResult];
  }
  return result;
}

void sub_100B87ACC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 98))
  {
    if (!*(unsigned char *)(v1 + 105))
    {
      int v3 = *(void **)(v1 + 88);
      if (v3)
      {
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472;
        v10[2] = sub_100B87DF4;
        v10[3] = &unk_10229FED8;
        v10[4] = v1;
        [v3 setHandler:v10];
        uint64_t v4 = *(void *)(a1 + 32);
        id v5 = *(void **)(v4 + 88);
        (*(void (**)(void))(*(void *)(v4 + 496) + 32))();
        [v5 setNextFireDelay:];
        *(unsigned char *)(*(void *)(a1 + 32) + 105) = 1;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022E8CA8);
        }
        uint64_t v6 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#wigo,on,BlueAvengerCrossValidation", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022E8CA8);
          }
          uint64_t v9 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "-[CLSubHarvesterAvengerCrossValidation receiveLocation:]_block_invoke", "%s\n", v9);
          if (v9 != (char *)buf) {
            free(v9);
          }
        }
        AnalyticsSendEventLazy();
        uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 776);
        *(_DWORD *)buf = 0;
        (*(void (**)(uint64_t, uint8_t *))(*(void *)v7 + 48))(v7, buf);
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022E8CC8);
        }
        uint64_t v8 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289282;
          int v12 = 0;
          __int16 v13 = 2082;
          double v14 = "";
          __int16 v15 = 2050;
          uint64_t v16 = 11;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"cross validation proactive location request\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
        }
      }
    }
  }
}

id sub_100B87DF4(uint64_t a1)
{
  return [*(id *)(a1 + 32) terminateActiveLocationRequest];
}

NSDictionary *__cdecl sub_100B87DFC(id a1)
{
  return (NSDictionary *)&off_102397590;
}

uint64_t sub_100B87E7C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_100B87EF8(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void *sub_100B880F0(void *result, char a2)
{
  if ((a2 & 1) == 0)
  {
    id v2 = [*(id *)(result[4] + 8) silo];
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100B88170;
    v3[3] = &unk_1022BBE00;
    char v4 = 0;
    return [v2 async:v3];
  }
  return result;
}

void sub_100B88170(uint64_t a1)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022E8CC8);
  }
  id v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_ERROR))
  {
    int v3 = *(unsigned __int8 *)(a1 + 32);
    int v6 = 68289538;
    int v7 = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 1026;
    int v11 = v3;
    __int16 v12 = 2050;
    uint64_t v13 = 11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"failed to disable setAlwaysBeaconWildState\", \"isBeaconing\":%{public}hhd, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v6, 0x22u);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022E8CC8);
    }
  }
  char v4 = qword_102419568;
  if (os_signpost_enabled((os_log_t)qword_102419568))
  {
    int v5 = *(unsigned __int8 *)(a1 + 32);
    int v6 = 68289538;
    int v7 = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 1026;
    int v11 = v5;
    __int16 v12 = 2050;
    uint64_t v13 = 11;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "failed to disable setAlwaysBeaconWildState", "{\"msg%{public}.0s\":\"failed to disable setAlwaysBeaconWildState\", \"isBeaconing\":%{public}hhd, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v6, 0x22u);
  }
}

void sub_100B895B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100B895D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100B89648;
  void v7[3] = &unk_1022E8B70;
  v7[6] = a3;
  v7[7] = a4;
  char v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v7[4] = a2;
  void v7[5] = v5;
  return [v4 enumerateObjectsUsingBlock:v7];
}

id *sub_100B89648(id *result, uint64_t a2, id a3)
{
  int v3 = result;
  if (result[6] == a3)
  {
    *(unsigned char *)result[7] = 1;
  }
  else
  {
    uint64_t result = (id *)[result[4] distanceFromLocation:a2];
    uint64_t v5 = *((void *)v3[5] + 1);
    if (v4 > *(double *)(v5 + 24)) {
      *(double *)(v5 + 24) = v4;
    }
  }
  return result;
}

void sub_100B89F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_100B89F34(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = [a2 lastPublishDate];
  if (a3 || !v6)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022E8CC8);
    }
    __int16 v12 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_ERROR))
    {
      int v15 = 68289282;
      int v16 = 0;
      __int16 v17 = 2082;
      int v18 = "";
      __int16 v19 = 2050;
      uint64_t v20 = 11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"unable to retrieve last publish date\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v15, 0x1Cu);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022E8CC8);
      }
    }
    uint64_t v13 = qword_102419568;
    if (os_signpost_enabled((os_log_t)qword_102419568))
    {
      int v15 = 68289282;
      int v16 = 0;
      __int16 v17 = 2082;
      int v18 = "";
      __int16 v19 = 2050;
      uint64_t v20 = 11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "unable to retrieve last publish date", "{\"msg%{public}.0s\":\"unable to retrieve last publish date\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v15, 0x1Cu);
    }
    double v14 = *(void **)(a1 + 32);
    __int16 v10 = +[NSDate distantPast];
    int v11 = v14;
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022E8CC8);
    }
    int v7 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_ERROR))
    {
      int v15 = 68289282;
      int v16 = 0;
      __int16 v17 = 2082;
      int v18 = "";
      __int16 v19 = 2050;
      uint64_t v20 = 11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"able to retrieve last publish date\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v15, 0x1Cu);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022E8CC8);
      }
    }
    __int16 v8 = qword_102419568;
    if (os_signpost_enabled((os_log_t)qword_102419568))
    {
      int v15 = 68289282;
      int v16 = 0;
      __int16 v17 = 2082;
      int v18 = "";
      __int16 v19 = 2050;
      uint64_t v20 = 11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "able to retrieve last publish date", "{\"msg%{public}.0s\":\"able to retrieve last publish date\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v15, 0x1Cu);
    }
    uint64_t v9 = *(void **)(a1 + 32);
    __int16 v10 = (NSDate *)[a2 lastPublishDate];
    int v11 = v9;
  }
  [v11 setRecentLastPublishDate:v10];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100B8A248(uint64_t a1, void *a2)
{
  if (a2)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022E8CC8);
    }
    double v4 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      [a2 coordinate];
      int v6 = (int)v5;
      [a2 coordinate];
      int v8 = (int)v7;
      [a2 horizontalAccuracy];
      v14[0] = 68290051;
      v14[1] = 0;
      __int16 v15 = 2082;
      int v16 = "";
      __int16 v17 = 1025;
      int v18 = v6;
      __int16 v19 = 1025;
      int v20 = v8;
      __int16 v21 = 1025;
      int v22 = (int)v9;
      __int16 v23 = 2050;
      uint64_t v24 = 11;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"fetch estimated device location at BA location time\", \"lat\":%{private}d, \"lng\":%{private}d, \"ucc\":%{private}d, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v14, 0x2Eu);
    }
    [a2 coordinate];
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 52) = v10;
    [a2 coordinate];
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 60) = v11;
    [a2 horizontalAccuracy];
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 68) = v12;
    [objc_msgSend(a2, "timestamp") timeIntervalSinceReferenceDate];
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 124) = v13;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100B8A3E8(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  if (*(double *)(*(void *)(*(void *)(a1 + 80) + 8) + 68) != -1.0)
  {
LABEL_15:
    [*(id *)(a1 + 40) calculateDispersion:[*(id *)(a1 + 40) getDeviceLocationsWithinBeaconingInterval]];
    uint64_t v14 = v13;
    [*(id *)(a1 + 40) calculateDispersion:*(void *)(a1 + 56)];
    uint64_t v16 = v15;
    [*(id *)(a1 + 48) distanceFromLocation:[objc_alloc((Class)CLLocation) initWithLatitude:*(double *)(*(void *)(*(void *)(a1 + 80) + 8) + 52) longitude:*(double *)(*(void *)(*(void *)(a1 + 80) + 8) + 60)]];
    double v18 = v17;
    uint64_t v19 = *(void *)(a1 + 40);
    if (!*(unsigned char *)(v19 + 97))
    {
      [*(id *)(v19 + 264) timeIntervalSinceDate:*(void *)(v19 + 256)];
      *(void *)(*(void *)(a1 + 40) + 288) = v20;
      [objc_msgSend(*(id *)(a1 + 64), "timestamp") timeIntervalSinceDate:*(void *)(*(void *)(a1 + 40) + 256)];
      *(void *)(*(void *)(a1 + 40) + 280) = v21;
      [*(id *)(*(void *)(a1 + 40) + 264) timeIntervalSinceDate:[*(id *)(a1 + 48) timestamp]];
      *(void *)(*(void *)(a1 + 40) + 296) = v22;
      *(unsigned char *)(*(void *)(a1 + 40) + 103) = [[*(id *)(*(void *)(a1 + 40) + 272) compare:*(id *)(a1 + 48)] timestamp] == (id)-1;
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022E8CC8);
      }
      __int16 v23 = qword_102419568;
      BOOL v24 = os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO);
      uint64_t v19 = *(void *)(a1 + 40);
      if (v24)
      {
        int v25 = (int)*(double *)(v19 + 288);
        int v26 = (int)*(double *)(v19 + 280);
        int v27 = (int)*(double *)(v19 + 296);
        *(void *)buf = 68290051;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 1025;
        *(_DWORD *)&buf[20] = v25;
        *(_WORD *)&buf[24] = 1025;
        *(_DWORD *)&buf[26] = v26;
        *(_WORD *)&buf[30] = 1025;
        LODWORD(v64) = v27;
        WORD2(v64) = 2050;
        *(void *)((char *)&v64 + 6) = 11;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"compute latency\", \"Time to download since beaconing start\":%{private}d, \"Time to observe since beaconing start\":%{private}d, \"location age\":%{private}d, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x2Eu);
        uint64_t v19 = *(void *)(a1 + 40);
      }
    }
    if (*(unsigned char *)(v19 + 98))
    {
      *(void *)(v19 + 320) = v16;
      [*(id *)(a1 + 48) horizontalAccuracy];
      *(void *)(*(void *)(a1 + 40) + 328) = v28;
      *(_DWORD *)(*(void *)(a1 + 40) + 336) = [*(id *)(a1 + 56) count];
      *(double *)(*(void *)(a1 + 40) + 344) = v18;
      *(unsigned char *)(*(void *)(a1 + 40) + 352) = 1;
      *(_DWORD *)(*(void *)(a1 + 40) + 356) = CLMotionActivity::isMoving((CLMotionActivity *)(*(void *)(a1 + 40)
                                                                                                + 112));
      *(void *)(*(void *)(a1 + 40) + 360) = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 68);
      *(_DWORD *)(*(void *)(a1 + 40) + 368) = *(_DWORD *)(*(void *)(a1 + 40) + 248);
      id v29 = [*(id *)(*(void *)(a1 + 40) + 256) laterDate:[*(id *)(a1 + 48) timestamp]];
      uint64_t v30 = *(void *)(a1 + 40);
      if (v29 == *(id *)(v30 + 256))
      {
        double v34 = 0.0;
      }
      else
      {
        id v31 = [[*(id *)(v30 + 264) laterDate:[*(id *)(a1 + 48) timestamp]];
        id v32 = [*(id *)(a1 + 48) timestamp];
        uint64_t v30 = *(void *)(a1 + 40);
        if (v31 == v32)
        {
          double v34 = *(double *)(v30 + 288);
        }
        else
        {
          [*(id *)(v30 + 256) timeIntervalSinceDate:[*(id *)(a1 + 48) timestamp]];
          double v34 = fabs(v33);
          uint64_t v30 = *(void *)(a1 + 40);
        }
      }
      *(double *)(v30 + 376) = v34;
      *(double *)(*(void *)(a1 + 40) + 384) = (double)(int)(*(double *)(*(void *)(*(void *)(a1 + 80) + 8)
                                                                          + 52)
                                                              * 10.0)
                                                / 10.0;
      *(double *)(*(void *)(a1 + 40) + 392) = (double)(int)(*(double *)(*(void *)(*(void *)(a1 + 80) + 8)
                                                                          + 60)
                                                              * 10.0)
                                                / 10.0;
      *(_DWORD *)(*(void *)(a1 + 40) + 400) = [*(id *)(a1 + 40) getTimeOfDayForAnalytics];
      double v56 = *(double **)(a1 + 40);
      v61[0] = @"baDispersion";
      v62[0] = +[NSNumber numberWithDouble:v56[40]];
      v61[1] = @"baEstimatedHorizontalAccuracy";
      v62[1] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 40) + 328)];
      v61[2] = @"countBALocations";
      v62[2] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 336)];
      v61[3] = @"deltaFindMyDistance";
      v62[3] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 40) + 344)];
      v61[4] = @"deviceFound";
      v62[4] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 40) + 352)];
      v61[5] = @"deviceMotionState";
      v62[5] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 356)];
      v61[6] = @"findMyEstimatedHorizontalAccuracy";
      v62[6] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 40) + 360)];
      v61[7] = @"sigEnv";
      v62[7] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 368)];
      v61[8] = @"timeToFindLatency";
      v62[8] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 40) + 376)];
      v61[9] = @"truncatedDeviceLocationLatitude";
      v62[9] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 40) + 384)];
      v61[10] = @"truncatedDeviceLocationLongitude";
      v62[10] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 40) + 392)];
      v61[11] = @"isActiveVisit";
      v62[11] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 40) + 101)];
      v61[12] = @"timeOfDay";
      v62[12] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 400)];
      [v56 logCoreAnalytics:[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v62, v61, 13)];
      [*(id *)(*(void *)(a1 + 40) + 72) invalidate];
      *(unsigned char *)(*(void *)(a1 + 40) + 97) = 1;
    }
    else if (*(unsigned char *)(v19 + 102))
    {
      *(void *)(v19 + 408) = v16;
      [*(id *)(a1 + 48) horizontalAccuracy];
      *(void *)(*(void *)(a1 + 40) + 416) = v35;
      *(_DWORD *)(*(void *)(a1 + 40) + 424) = [*(id *)(a1 + 56) count];
      *(double *)(*(void *)(a1 + 40) + 432) = v18;
      *(unsigned char *)(*(void *)(a1 + 40) + 440) = 1;
      *(_DWORD *)(*(void *)(a1 + 40) + 444) = CLMotionActivity::isMoving((CLMotionActivity *)(*(void *)(a1 + 40)
                                                                                                + 112));
      *(void *)(*(void *)(a1 + 40) + 448) = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 68);
      *(_DWORD *)(*(void *)(a1 + 40) + 456) = *(_DWORD *)(*(void *)(a1 + 40) + 248);
      *(double *)(*(void *)(a1 + 40) + 464) = (double)(int)(*(double *)(*(void *)(*(void *)(a1 + 80) + 8)
                                                                          + 52)
                                                              * 10.0)
                                                / 10.0;
      *(double *)(*(void *)(a1 + 40) + 472) = (double)(int)(*(double *)(*(void *)(*(void *)(a1 + 80) + 8)
                                                                          + 60)
                                                              * 10.0)
                                                / 10.0;
      *(_DWORD *)(*(void *)(a1 + 40) + 480) = [*(id *)(a1 + 40) getTimeOfDayForAnalytics];
      [*(id *)(a1 + 48) horizontalAccuracy];
      if (v36 != 0.0)
      {
        [*(id *)(a1 + 48) horizontalAccuracy];
        *(double *)(*(void *)(a1 + 40) + 488) = v18 * 100.0 / v37;
      }
      [*(id *)(*(void *)(a1 + 40) + 272) timeIntervalSinceDate:*(void *)(*(void *)(a1 + 40) + 256)];
      *(void *)(*(void *)(a1 + 40) + 304) = v38;
      [*(id *)(*(void *)(a1 + 40) + 272) compare:[*(id *)(a1 + 64) timestamp]] == (id)-1;
      double v39 = (*(double (**)(uint64_t))(*(void *)(*(void *)(a1 + 40) + 496) + 120))(*(void *)(a1 + 40) + 496);
      [objc_msgSend(*(id *)(a1 + 48), "timestamp") timeIntervalSinceDate:*(void *)(*(void *)(a1 + 40) + 256)];
      double v41 = v39 - v40;
      __int16 v42 = *(double **)(a1 + 40);
      v59[0] = @"baDispersion";
      v60[0] = +[NSNumber numberWithDouble:v42[51]];
      v59[1] = @"baEstimatedHorizontalAccuracy";
      v60[1] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 40) + 416)];
      v59[2] = @"countBALocations";
      v60[2] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 424)];
      v59[3] = @"deltaFindMyDistance";
      v60[3] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 40) + 432)];
      v59[4] = @"deviceFound";
      v60[4] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 40) + 440)];
      v59[5] = @"deviceMotionState";
      v60[5] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 444)];
      v59[6] = @"findMyEstimatedHorizontalAccuracy";
      v60[6] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 40) + 448)];
      v59[7] = @"sigEnv";
      v60[7] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 456)];
      v59[8] = @"truncatedDeviceLocationLatitude";
      v60[8] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 40) + 464)];
      v59[9] = @"truncatedDeviceLocationLongitude";
      v60[9] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 40) + 472)];
      v59[10] = @"isActiveVisit";
      v60[10] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 40) + 101)];
      v59[11] = @"timeOfDay";
      v60[11] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 40) + 480)];
      v59[12] = @"timeToObserveLatency";
      v60[12] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 40) + 280)];
      v59[13] = @"timeToDownloadLatency";
      v60[13] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 40) + 288)];
      v59[14] = @"baLocationAge";
      v60[14] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 40) + 296)];
      v59[15] = @"deviceBeenFound";
      v60[15] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 40) + 97)];
      v59[16] = @"distanceAccuracyRatio";
      v60[16] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 40) + 488)];
      v59[17] = @"firstDownloadFromBA";
      v60[17] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 40) + 103)];
      v59[18] = @"finalDownloadAllFromBA";
      v60[18] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 40) + 104)];
      v59[19] = @"selfPublishTime";
      v60[19] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 40) + 304)];
      v59[20] = @"baFinalLocationAge";
      v60[20] = +[NSNumber numberWithDouble:v41];
      v59[21] = @"baFinalLocationAgeBounded";
      v60[21] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 40) binLocationAge:v41]);
      v59[22] = @"baLocationAgeBounded";
      v60[22] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 40) binLocationAge:*(double *)(*(void *)(a1 + 40) + 296)]);
      v59[23] = @"selfPublishTimeBounded";
      v60[23] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 40) binTimeInterval:*(double *)(*(void *)(a1 + 40) + 304)]);
      v59[24] = @"timeToObserveLatencyBounded";
      v60[24] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 40) binTimeInterval:*(double *)(*(void *)(a1 + 40) + 280)]);
      v59[25] = @"baDispersionBounded";
      v60[25] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 40) binAccuracy:*(double *)(*(void *)(a1 + 40) + 408)]);
      v59[26] = @"baEstimatedHorizontalAccuracyBounded";
      v60[26] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 40) binAccuracy:*(double *)(*(void *)(a1 + 40) + 416)]);
      v59[27] = @"deltaFindMyDistanceBounded";
      v60[27] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 40) binAccuracy:*(double *)(*(void *)(a1 + 40) + 432)]);
      v59[28] = @"distanceAccuracyRatioBounded";
      v60[28] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 40) binRatio:*(double *)(*(void *)(a1 + 40) + 488)]);
      v59[29] = @"findMyEstimatedHorizontalAccuracyBounded";
      v60[29] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 40) binAccuracy:*(double *)(*(void *)(a1 + 40) + 448)]);
      [v42 logFinalCoreAnalytics:+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v60, v59, 30)];
      double v43 = *(void **)(a1 + 40);
      uint64_t v44 = *(void *)(a1 + 48);
      uint64_t v45 = *(void *)(a1 + 72);
      unint64_t v46 = *(_OWORD **)(*(void *)(a1 + 80) + 8);
      long long v47 = v46[5];
      long long v48 = v46[8];
      long long v49 = v46[9];
      *(_OWORD *)((char *)v58 + 12) = *(_OWORD *)((char *)v46 + 188);
      long long v50 = v46[10];
      long long v51 = v46[11];
      v57[6] = v49;
      v57[7] = v50;
      v58[0] = v51;
      long long v52 = v46[6];
      long long v53 = v46[7];
      v57[2] = v47;
      v57[3] = v52;
      v57[4] = v53;
      v57[5] = v48;
      long long v54 = v46[4];
      v57[0] = v46[3];
      v57[1] = v54;
      id v55 = [v43 collectLocationData:v45 outputLocation:v44 deviceLocation:v57];
      if ([v55 count])
      {
        [v55 setObject:[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(void *)(a1 + 40) + 248)) forKeyedSubscript:@"sigEnv"];
        [v55 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(*(id *)(a1 + 40), "getTimeOfDayForAnalytics"))] forKeyedSubscript:@"timeOfDay"];
        [v55 setObject:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%.2lf", v14), @"deviceDispersion" forKeyedSubscript];
        AnalyticsSendEventLazy();
      }
      [*(id *)(a1 + 40) terminateFinalCrossValidation];
    }
    else
    {
      [*(id *)(v19 + 72) invalidate];
      *(unsigned char *)(*(void *)(a1 + 40) + 97) = 1;
    }
    return;
  }
  if (*(void *)(*(void *)(a1 + 40) + 760) != *(void *)(*(void *)(a1 + 40) + 752))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022E8CC8);
    }
    id v2 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      *(void *)buf = 68289282;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(void *)&buf[20] = 11;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"find nearest device location with BA location time\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    }
    int v3 = *(void **)(a1 + 40);
    id v4 = [*(id *)(a1 + 48) timestamp];
    if (v3)
    {
      [v3 findNearestDeviceLocationWithBALocationTime:v4];
    }
    else
    {
      long long v69 = 0u;
      memset(v70, 0, 28);
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v64 = 0u;
      memset(buf, 0, sizeof(buf));
    }
    int v6 = *(_OWORD **)(*(void *)(a1 + 80) + 8);
    long long v7 = v65;
    long long v9 = v66;
    long long v8 = v67;
    v6[5] = v64;
    long long v10 = v68;
    long long v11 = v70[0];
    v6[10] = v69;
    v6[11] = v11;
    *(_OWORD *)((char *)v6 + 188) = *(_OWORD *)((char *)v70 + 12);
    v6[6] = v7;
    v6[7] = v9;
    v6[8] = v8;
    v6[9] = v10;
    long long v12 = *(_OWORD *)&buf[16];
    v6[3] = *(_OWORD *)buf;
    v6[4] = v12;
    goto LABEL_15;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022E8CC8);
  }
  double v5 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    *(void *)buf = 68289282;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(void *)&buf[20] = 11;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"no device location available in cache\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
  }
}

uint64_t sub_100B8B240(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_100B8B2BC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022E8CC8);
    }
    id v4 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      long long v12 = "";
      __int16 v13 = 2050;
      uint64_t v14 = 11;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"cross validation got UUID\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    }
    id v5 = [*(id *)(*(void *)(a1 + 32) + 8) silo];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100B8B554;
    void v8[3] = &unk_10229FEB0;
    v8[4] = *(void *)(a1 + 32);
    v8[5] = a2;
    [v5 async:v8];
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022E8CC8);
    }
    int v6 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      long long v12 = "";
      __int16 v13 = 2050;
      uint64_t v14 = 11;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"unable to retrieve owner UUID - stop cross validation inner loop\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022E8CC8);
      }
    }
    long long v7 = qword_102419568;
    if (os_signpost_enabled((os_log_t)qword_102419568))
    {
      *(_DWORD *)buf = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      long long v12 = "";
      __int16 v13 = 2050;
      uint64_t v14 = 11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "unable to retrieve owner UUID - stop cross validation inner loop", "{\"msg%{public}.0s\":\"unable to retrieve owner UUID - stop cross validation inner loop\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 100) = 0;
  }
}

id sub_100B8B554(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  int v3 = *(void **)(v2 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100B8B5C8;
  v5[3] = &unk_1022E8C60;
  v5[4] = v2;
  return [v3 beaconForUUID:v1 completion:v5];
}

void sub_100B8B5C8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022E8CC8);
    }
    id v4 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      long long v12 = "";
      __int16 v13 = 2050;
      uint64_t v14 = 11;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"cross validation got beacon\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    }
    id v5 = [*(id *)(*(void *)(a1 + 32) + 8) silo];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100B8B860;
    void v8[3] = &unk_10229FEB0;
    v8[4] = *(void *)(a1 + 32);
    v8[5] = a2;
    [v5 async:v8];
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022E8CC8);
    }
    int v6 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      long long v12 = "";
      __int16 v13 = 2050;
      uint64_t v14 = 11;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"unable to retrieve owner beacon - stop cross validation inner loop\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022E8CC8);
      }
    }
    long long v7 = qword_102419568;
    if (os_signpost_enabled((os_log_t)qword_102419568))
    {
      *(_DWORD *)buf = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      long long v12 = "";
      __int16 v13 = 2050;
      uint64_t v14 = 11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "unable to retrieve owner beacon - stop cross validation inner loop", "{\"msg%{public}.0s\":\"unable to retrieve owner beacon - stop cross validation inner loop\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 100) = 0;
  }
}

id sub_100B8B860(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100B8B8D4;
  v4[3] = &unk_1022E8C38;
  v4[4] = v2;
  return [v2 retrieveOwnerLocationsDuringValidationPeriod:v1 completion:v4];
}

id sub_100B8B8D4(uint64_t a1, uint64_t a2)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022E8CC8);
  }
  id v4 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    int v9 = 0;
    __int16 v10 = 2082;
    __int16 v11 = "";
    __int16 v12 = 2050;
    uint64_t v13 = 11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"cross validation got locations\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
  }
  id v5 = [*(id *)(*(void *)(a1 + 32) + 8) silo];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100B8BA2C;
  void v7[3] = &unk_10229FEB0;
  v7[4] = *(void *)(a1 + 32);
  void v7[5] = a2;
  return [v5 async:v7];
}

id sub_100B8BA2C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) processAvengerLocations:*(void *)(a1 + 40)];
}

void sub_100B8C5BC(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100B8C5EC(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_100B8D8F0(_Unwind_Exception *a1)
{
}

void sub_100B8E268(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100B8E298(id a1)
{
  NSFileAttributeKey v1 = NSFileProtectionKey;
  NSFileProtectionType v2 = NSFileProtectionCompleteUntilFirstUserAuthentication;
  qword_102480430 = +[NSDictionary dictionaryWithObjects:&v2 forKeys:&v1 count:1];
}

void sub_100B8E324(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

BOOL sub_100B8E38C()
{
  NSFileAttributeKey v1 = qword_102419528;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

id sub_100B8EBD4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) handleBackgroundTask:a2];
}

void sub_100B8F004(id a1)
{
  qword_1024193C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void *sub_100B8F034(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_100B8F9F8(a1, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4));
  return a1;
}

void sub_100B8F088(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 != v2)
  {
    double v3 = 0.0;
    do
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      double v3 = v3 + sub_1008B61D8(v1, &Current);
      v1 += 112;
    }
    while (v1 != v2);
  }
}

double sub_100B8F124(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  double v3 = -1.0;
  while (v1 != v2)
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    double v4 = sub_1008B61D8(v1, &Current);
    if (v3 < v4) {
      double v3 = v4;
    }
    v1 += 112;
  }
  return v3;
}

CFStringRef sub_100B8F188(int a1, uint64_t *a2)
{
  if (a1 < 1) {
    return &stru_10234F018;
  }
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return &stru_10234F018;
  }
  uint64_t v5 = v3 - v2;
  unint64_t v6 = (unint64_t)(v3 - v2) >> 3;
  if ((int)v6 <= a1) {
    int v7 = 0;
  }
  else {
    int v7 = rand() % ((int)v6 - a1 + 1);
  }
  sub_100134750(&v18, "");
  if (v7 < (int)v6)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v7;
    uint64_t v11 = 8 * v7;
    uint64_t v12 = v10 + 1;
    do
    {
      if (v9) {
        std::string::append(&v18, ", ");
      }
      sub_100B39278(&__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&v18, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v12 + v9 >= (int)(v5 >> 3)) {
        break;
      }
      ++v9;
      v11 += 8;
    }
    while ((int)v9 < a1);
  }
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v15 = &v18;
  }
  else {
    uint64_t v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  long long v8 = +[NSString stringWithCString:v15 encoding:4];
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  return (const __CFString *)v8;
}

void sub_100B8F2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B8F338(uint64_t *a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      if (sub_1008B61C8(v4, a3) > *a2)
      {
        unint64_t v9 = a4[1];
        if (v9 >= a4[2])
        {
          uint64_t v10 = sub_100B8FB04(a4, v4);
        }
        else
        {
          sub_1008B5818(a4[1], v4);
          uint64_t v10 = v9 + 112;
          a4[1] = v9 + 112;
        }
        a4[1] = v10;
      }
      v4 += 112;
    }
    while (v4 != v5);
  }
}

void sub_100B8F3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *(void *)(v10 + 8) = v11;
  a10 = (void **)v10;
  sub_100946620(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100B8F408@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t result = sub_1000E6DB4(a2);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (result)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = a1[1];
    while (v9 != v10)
    {
      uint64_t result = sub_1008B6958(v9, a2);
      if (v11 > a4)
      {
        unint64_t v12 = a3[1];
        if (v12 >= a3[2])
        {
          uint64_t result = sub_100B8FB04(a3, v9);
        }
        else
        {
          sub_1008B5818(a3[1], v9);
          uint64_t result = v12 + 112;
          a3[1] = v12 + 112;
        }
        a3[1] = result;
      }
      v9 += 112;
    }
  }
  return result;
}

void sub_100B8F4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *(void *)(v10 + 8) = v11;
  a10 = (void **)v10;
  sub_100946620(&a10);
  _Unwind_Resume(a1);
}

CFStringRef sub_100B8F4E8(uint64_t **a1, int a2)
{
  std::string __p = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = *v3;
      if (v5 >= v20)
      {
        long long v8 = (char *)__p;
        uint64_t v9 = (v5 - (unsigned char *)__p) >> 3;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 61) {
          sub_1001D7FD4();
        }
        uint64_t v11 = v20 - (unsigned char *)__p;
        if ((v20 - (unsigned char *)__p) >> 2 > v10) {
          unint64_t v10 = v11 >> 2;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12)
        {
          uint64_t v13 = (char *)sub_1000DA54C((uint64_t)&v20, v12);
          long long v8 = (char *)__p;
          uint64_t v5 = v19;
        }
        else
        {
          uint64_t v13 = 0;
        }
        uint64_t v14 = &v13[8 * v9];
        *(void *)uint64_t v14 = v6;
        int v7 = v14 + 8;
        while (v5 != v8)
        {
          uint64_t v15 = *((void *)v5 - 1);
          v5 -= 8;
          *((void *)v14 - 1) = v15;
          v14 -= 8;
        }
        std::string __p = v14;
        uint64_t v19 = v7;
        uint64_t v20 = &v13[8 * v12];
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        *(void *)uint64_t v5 = v6;
        int v7 = v5 + 8;
      }
      uint64_t v19 = v7;
      v3 += 14;
      uint64_t v5 = v7;
    }
    while (v3 != v4);
  }
  CFStringRef v16 = sub_100B8F188(a2, (uint64_t *)&__p);
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
  return v16;
}

void sub_100B8F630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B8F654(uint64_t **a1)
{
  sub_10010F274((uint64_t)v18);
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  sub_100132EFC(v19, (uint64_t)"count: ", 7);
  std::ostream::operator<<();
  if (v2 != v3)
  {
    uint64_t v4 = sub_100132EFC(v19, (uint64_t)", samples: ", 11);
    uint64_t v5 = (char *)[(__CFString *)(id)sub_100B8F4E8(a1, 5) UTF8String];
    sub_100134750(__p, v5);
    if ((v17 & 0x80u) == 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    if ((v17 & 0x80u) == 0) {
      uint64_t v7 = v17;
    }
    else {
      uint64_t v7 = (uint64_t)__p[1];
    }
    sub_100132EFC(v4, (uint64_t)v6, v7);
    if ((char)v17 < 0) {
      operator delete(__p[0]);
    }
    long long v8 = sub_100132EFC(v19, (uint64_t)", average age: ", 15);
    uint64_t v9 = *v8;
    *(uint64_t *)((char *)v8 + *(void *)(*v8 - 24) + 16) = 2;
    *(_DWORD *)((char *)v8 + *(void *)(v9 - 24) + 8) = *(_DWORD *)((unsigned char *)v8 + *(void *)(v9 - 24) + 8) & 0xFFFFFEFB | 4;
    sub_100B8F088((uint64_t *)a1);
    unint64_t v10 = (void *)std::ostream::operator<<();
    sub_100132EFC(v10, (uint64_t)"h", 1);
    uint64_t v11 = sub_100132EFC(v19, (uint64_t)", oldest age: ", 14);
    uint64_t v12 = *v11;
    *(uint64_t *)((char *)v11 + *(void *)(*v11 - 24) + 16) = 2;
    *(_DWORD *)((char *)v11 + *(void *)(v12 - 24) + 8) = *(_DWORD *)((unsigned char *)v11 + *(void *)(v12 - 24) + 8) & 0xFFFFFEFB | 4;
    sub_100B8F124((uint64_t *)a1);
    uint64_t v13 = (void *)std::ostream::operator<<();
    sub_100132EFC(v13, (uint64_t)"h", 1);
  }
  std::stringbuf::str();
  *(void *)((char *)v18
  v19[0] = v14;
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100B8F99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100B8F9D4(void *a1)
{
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 4);
}

void *sub_100B8F9F8(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_100420644(result, a4);
    uint64_t result = (void *)sub_100B8FA80((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100B8FA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100946620(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100B8FA80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_1008B5818(a4 + v7, a2 + v7);
      v7 += 112;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_100B8FAE0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 112;
    do
    {
      sub_1008B5A70(v4 + v2);
      v2 -= 112;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B8FB04(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x249249249249249) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x124924924924924) {
    unint64_t v9 = 0x249249249249249;
  }
  else {
    unint64_t v9 = v5;
  }
  unsigned __int8 v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100227C5C(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[112 * v4];
  CFStringRef v16 = &v10[112 * v9];
  sub_1008B5818(v14, a2);
  uint64_t v15 = v14 + 112;
  sub_100B8FC24(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100B8FCAC((uint64_t)&v13);
  return v11;
}

void sub_100B8FC10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100B8FCAC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100B8FC24(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 112;
    uint64_t result = sub_1008B595C(result - 112, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100B8FCAC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 112;
    sub_1008B5A70(i - 112);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100B8FCFC(uint64_t a1)
{
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)a1 = _Q0;
  *(void *)(a1 + 16) = 0xBFF0000000000000;
  unsigned __int8 v10 = 0;
  sub_10006ACBC((unsigned __int8 *)(a1 + 113), "CompassCalibrationLoggerEnabled", &v10, 0);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  if ((sub_1000A16E8() & 0x10) != 0)
  {
    uint64_t v7 = sub_1000D3E78();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100B8FDD0;
    v9[3] = &unk_1022A3020;
    v9[4] = a1;
    sub_1009E8E94(v7, (uint64_t)v9);
  }
  return a1;
}

void sub_100B8FDB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 128);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B8FDD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (uint64_t *)sub_100A26784();
  uint64_t v5 = 0x10000000BLL;
  char v6 = 0;
  sub_101A46D60(v2, (uint64_t)&v5, (uint64_t *)&v7);
  long long v3 = v7;
  long long v7 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 128);
  *(_OWORD *)(v1 + 120) = v3;
  if (v4)
  {
    sub_1000DB0A0(v4);
    if (*((void *)&v7 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v7 + 1));
    }
  }
  sub_100A2932C(*(uint64_t **)(v1 + 120), (uint64_t)sub_100B8FE58, v1);
}

void sub_100B8FE58(double *a1)
{
  if (IOHIDEventGetType() == 3)
  {
    int IntegerValue = IOHIDEventGetIntegerValue();
    int v3 = IOHIDEventGetIntegerValue();
    if (IntegerValue == 12)
    {
      int v4 = v3;
      BOOL v5 = IOHIDEventGetIntegerValue() == 1;
      unint64_t TimeStamp = IOHIDEventGetTimeStamp();
      double v7 = sub_1000D3D90(TimeStamp);
      sub_100B908DC(a1, v4, v5, v7);
    }
  }
}

uint64_t sub_100B8FF24(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  if (v2)
  {
    sub_1000DB0A0(v2);
    int v3 = *(std::__shared_weak_count **)(a1 + 128);
    if (v3) {
      sub_1000DB0A0(v3);
    }
  }
  return a1;
}

void sub_100B8FF68(uint64_t a1, uint64_t a2)
{
  int v4 = (_OWORD *)(a1 + 24);
  llround(CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 16));
  AnalyticsSendEventLazy();
  int v5 = *(char *)(a2 + 1);
  if (v5 >= 1 && *(unsigned __int8 *)(a1 + 25) == v5)
  {
    *(CFAbsoluteTime *)(a1 + 16) = CFAbsoluteTimeGetCurrent();
    long long v6 = *(_OWORD *)(a2 + 16);
    *int v4 = *(_OWORD *)a2;
    v4[1] = v6;
    long long v8 = *(_OWORD *)(a2 + 48);
    long long v7 = *(_OWORD *)(a2 + 64);
    long long v9 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)((char *)v4 + 73) = *(_OWORD *)(a2 + 73);
    v4[3] = v8;
    v4[4] = v7;
    v4[2] = v9;
  }
  else
  {
    *(CFAbsoluteTime *)(a1 + 16) = CFAbsoluteTimeGetCurrent();
    long long v10 = *(_OWORD *)(a2 + 16);
    *int v4 = *(_OWORD *)a2;
    v4[1] = v10;
    long long v12 = *(_OWORD *)(a2 + 48);
    long long v11 = *(_OWORD *)(a2 + 64);
    long long v13 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)((char *)v4 + 73) = *(_OWORD *)(a2 + 73);
    v4[3] = v12;
    v4[4] = v11;
    v4[2] = v13;
    sub_100B9031C(a1, 0);
  }
}

NSDictionary *sub_100B900EC(uint64_t a1)
{
  v11[0] = @"logTimestamp";
  v12[0] = +[NSNumber numberWithDouble:CFAbsoluteTimeGetCurrent() * 1000000.0];
  v11[1] = @"isAPAwake";
  v12[1] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 4)];
  v11[2] = @"quality";
  LODWORD(v2) = *(_DWORD *)(*(void *)(a1 + 32) + 53);
  v12[2] = +[NSNumber numberWithFloat:v2];
  v11[3] = @"temperature";
  LODWORD(v3) = *(_DWORD *)(*(void *)(a1 + 32) + 73);
  v12[3] = +[NSNumber numberWithFloat:v3];
  v11[4] = @"previousCalibrationTemperature";
  LODWORD(v4) = *(_DWORD *)(a1 + 40);
  v12[4] = +[NSNumber numberWithFloat:v4];
  v11[5] = @"timeSinceLastCalibration";
  v12[5] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 44)];
  v11[6] = @"biasShift";
  v12[6] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  v11[7] = @"isSaturation";
  v12[7] = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(*(void *)(a1 + 32) + 2)];
  v11[8] = @"previousCalibrationQuality";
  LODWORD(v5) = *(_DWORD *)(a1 + 52);
  v12[8] = +[NSNumber numberWithFloat:v5];
  v11[9] = @"previousCalibrationLevel";
  LODWORD(v6) = *(_DWORD *)(a1 + 56);
  v12[9] = +[NSNumber numberWithFloat:v6];
  v11[10] = @"calibrationLevel";
  v12[10] = +[NSNumber numberWithChar:*(char *)(*(void *)(a1 + 32) + 1)];
  v11[11] = @"minTempSinceLastCal";
  LODWORD(v7) = *(_DWORD *)(*(void *)(a1 + 32) + 77);
  v12[11] = +[NSNumber numberWithFloat:v7];
  v11[12] = @"maxTempSinceLastCal";
  LODWORD(v8) = *(_DWORD *)(*(void *)(a1 + 32) + 81);
  v12[12] = +[NSNumber numberWithFloat:v8];
  v11[13] = @"avgTempSinceLastCal";
  LODWORD(v9) = *(_DWORD *)(*(void *)(a1 + 32) + 85);
  v12[13] = +[NSNumber numberWithFloat:v9];
  return +[NSDictionary dictionaryWithObjects:v12 forKeys:v11 count:14];
}

void sub_100B9031C(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 114))
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022E8D90);
    }
    double v4 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
    {
      double v5 = *(float *)(a1 + 29);
      double v6 = *(float *)(a1 + 33);
      double v7 = *(float *)(a1 + 37);
      float v8 = *(float *)(a1 + 53);
      int v9 = *(char *)(a1 + 25);
      float v10 = *(float *)(a1 + 77);
      float v11 = *(float *)(a1 + 81);
      *(_DWORD *)buf = 134220800;
      float v12 = *(float *)(a1 + 85);
      int v13 = *(unsigned __int8 *)(a1 + 26);
      int v14 = *(unsigned __int8 *)(a1 + 27);
      int v15 = *(unsigned __int8 *)(a1 + 28);
      uint64_t v16 = *(void *)(a1 + 16);
      *(double *)&uint8_t buf[4] = v5;
      __int16 v82 = 2048;
      double v83 = v6;
      __int16 v84 = 2048;
      double v85 = v7;
      __int16 v86 = 2048;
      double v87 = (float)(1.0 / v8);
      __int16 v88 = 1024;
      int v89 = v9;
      __int16 v90 = 2048;
      double v91 = v10;
      __int16 v92 = 2048;
      double v93 = v11;
      __int16 v94 = 2048;
      double v95 = v12;
      __int16 v96 = 1024;
      int v97 = v13;
      __int16 v98 = 1024;
      int v99 = v14;
      __int16 v100 = 1024;
      int v101 = v15;
      __int16 v102 = 2048;
      uint64_t v103 = v16;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[CLCompassCalibrationLogger] Last CompassCalibration: bias.x,%.2f,.y,%.2f,.z,%.2f,radius,%.2f,level,%d,quality,%.2f,cost,%.2f,coverage,%.2f,saturations,%d,consistency,%d,apAwake,%d,cftime,%.3f", buf, 0x6Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022E8D90);
      }
      double v45 = *(float *)(a1 + 29);
      double v46 = *(float *)(a1 + 33);
      double v47 = *(float *)(a1 + 37);
      float v48 = *(float *)(a1 + 53);
      int v49 = *(char *)(a1 + 25);
      float v50 = *(float *)(a1 + 77);
      float v51 = *(float *)(a1 + 81);
      *(_DWORD *)std::string __p = 134220800;
      float v52 = *(float *)(a1 + 85);
      int v53 = *(unsigned __int8 *)(a1 + 26);
      int v54 = *(unsigned __int8 *)(a1 + 27);
      int v55 = *(unsigned __int8 *)(a1 + 28);
      uint64_t v56 = *(void *)(a1 + 16);
      *(double *)&__p[4] = v45;
      __int16 v59 = 2048;
      double v60 = v46;
      __int16 v61 = 2048;
      double v62 = v47;
      __int16 v63 = 2048;
      double v64 = (float)(1.0 / v48);
      __int16 v65 = 1024;
      int v66 = v49;
      __int16 v67 = 2048;
      double v68 = v50;
      __int16 v69 = 2048;
      double v70 = v51;
      __int16 v71 = 2048;
      double v72 = v52;
      __int16 v73 = 1024;
      int v74 = v53;
      __int16 v75 = 1024;
      int v76 = v54;
      __int16 v77 = 1024;
      int v78 = v55;
      __int16 v79 = 2048;
      uint64_t v80 = v56;
      __int16 v57 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompassCalibrationLogger::alertLastCal(BOOL)", "%s\n", v57);
      if (v57 != buf) {
        free(v57);
      }
    }
    CFStringRef v17 = sub_1004BD834(*(CFAbsoluteTime *)(a1 + 16));
    if ((*(unsigned char *)(a1 + 25) - 2) > 3u) {
      CFStringRef v18 = @"Uncalibrated";
    }
    else {
      CFStringRef v18 = *(&off_1022E8DB0 + (char)(*(unsigned char *)(a1 + 25) - 2));
    }
    int v19 = sub_10010145C();
    double v20 = *(float *)(a1 + 29);
    double v21 = *(float *)(a1 + 33);
    double v22 = *(float *)(a1 + 37);
    double v23 = 1.0 / *(float *)(a1 + 53);
    double v24 = -1.0;
    if (v19)
    {
      if (!*(unsigned char *)(a1 + 26)) {
        double v24 = *(float *)(a1 + 81);
      }
      float v25 = *(float *)(a1 + 93);
      float v26 = *(float *)(a1 + 85);
      sub_1000FECE0(v18, (uint64_t)buf);
      int v27 = SHIBYTE(v84);
      uint64_t v28 = *(unsigned char **)buf;
      float v29 = *(float *)(a1 + 77);
      sub_1000FECE0(v17, (uint64_t)__p);
      uint64_t v30 = buf;
      if (v27 < 0) {
        uint64_t v30 = v28;
      }
      if (v61 >= 0) {
        id v31 = __p;
      }
      else {
        id v31 = *(unsigned char **)__p;
      }
      CFStringRef v32 = CFStringCreateWithFormat(0, 0, @"B:%.0f,%.0f,%.0f\nR:%.0f Cost:%.1f\nPlan:%.2f Cov:%.1f\n%s Q:%.1f\n%s", *(void *)&v20, *(void *)&v21, *(void *)&v22, *(void *)&v23, *(void *)&v24, v25, v26, v30, v29, v31);
    }
    else
    {
      if (!*(unsigned char *)(a1 + 26)) {
        double v24 = *(float *)(a1 + 81);
      }
      float v33 = *(float *)(a1 + 93);
      float v34 = *(float *)(a1 + 85);
      sub_1000FECE0(v18, (uint64_t)buf);
      int v35 = SHIBYTE(v84);
      double v36 = *(unsigned char **)buf;
      float v37 = *(float *)(a1 + 77);
      uint64_t v38 = *(unsigned __int8 *)(a1 + 27);
      uint64_t v39 = *(unsigned __int8 *)(a1 + 28);
      sub_1000FECE0(v17, (uint64_t)__p);
      double v40 = buf;
      if (v35 < 0) {
        double v40 = v36;
      }
      if (v61 >= 0) {
        double v41 = __p;
      }
      else {
        double v41 = *(unsigned char **)__p;
      }
      CFStringRef v32 = CFStringCreateWithFormat(0, 0, @"Bias  [%.2f,%.2f,%.2f]\nRadius  %.2f\nCost  %.2f\nPlanarity  %.2f\nCoverage  %.2f\nLevel  %s\nQuality  %.2f\nConsistency  %d\nAP Awake  %d\n%s", *(void *)&v20, *(void *)&v21, *(void *)&v22, *(void *)&v23, *(void *)&v24, v33, v34, v40, v37, v38, v39, v41);
    }
    CFStringRef v42 = v32;
    if (SHIBYTE(v61) < 0) {
      operator delete(*(void **)__p);
    }
    if (SHIBYTE(v84) < 0) {
      operator delete(*(void **)buf);
    }
    if (a2) {
      CFStringRef v43 = @"Cur Compass Cal";
    }
    else {
      CFStringRef v43 = @"New Compass Cal";
    }
    if (*(double *)(a1 + 16) >= 0.0) {
      CFStringRef v44 = v42;
    }
    else {
      CFStringRef v44 = @"No Compass Cal Since locationd Start";
    }
    CFUserNotificationDisplayNotice(0.0, 0, 0, 0, 0, v43, v44, 0);
    CFRelease(v42);
    CFRelease(v17);
  }
}

void sub_100B90898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B908DC(double *a1, int a2, int a3, double a4)
{
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022E8D90);
  }
  float v8 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240448;
    int v13 = a2;
    __int16 v14 = 1026;
    int v15 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[CLCompassCalibrationLogger] ButtonPress,type,%{public}d,down,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022E8D90);
    }
    float v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompassCalibrationLogger::onButton(int, BOOL, const CFTimeInterval)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  int v9 = a1;
  if (a2 > 232)
  {
    if (a2 != 234)
    {
      if (a2 != 233) {
        return;
      }
      goto LABEL_12;
    }
  }
  else if (a2 != 48)
  {
    if (a2 != 64) {
      return;
    }
LABEL_12:
    int v9 = a1 + 1;
  }
  *int v9 = a4;
  if (a3)
  {
    double v10 = a1[1];
    if (vabdd_f64(*a1, v10) < 0.3 && *a1 >= 0.0 && v10 >= 0.0) {
      sub_100B9031C((uint64_t)a1, 1);
    }
  }
}

void sub_100B90B2C(id a1)
{
  qword_1024190A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

uint64_t sub_100B91C58(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    double v4 = &OBJC_IVAR___CLHidManager__delegate;
    double v5 = &OBJC_IVAR___CLHidManager__delegate;
    double v6 = &OBJC_IVAR___CLHidManager__delegate;
    double v7 = &OBJC_IVAR___CLHidManager__delegate;
    float v8 = &OBJC_IVAR___CLHidManager__delegate;
    int v9 = &OBJC_IVAR___CLHidManager__delegate;
    double v10 = &OBJC_IVAR___CLHidManager__delegate;
    float v11 = &OBJC_IVAR___CLHidManager__delegate;
    float v12 = &OBJC_IVAR___CLHidManager__delegate;
    do
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        uint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v17 = v16 + 1;
        if (v16 == -1 || v17 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
        v15 |= (unint64_t)(v18 & 0x7F) << v13;
        if ((v18 & 0x80) == 0) {
          goto LABEL_12;
        }
        v13 += 7;
        BOOL v19 = v14++ >= 9;
        if (v19)
        {
          unint64_t v15 = 0;
          uint64_t v20 = OBJC_IVAR___PBDataReader__error;
          int v21 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      uint64_t v20 = OBJC_IVAR___PBDataReader__error;
      int v21 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v15 = 0;
      }
LABEL_14:
      if (v21 || (v15 & 7) == 4) {
        break;
      }
      switch((v15 >> 3))
      {
        case 1u:
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + v4[173]) |= 8u;
          while (1)
          {
            uint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v27 = v26 + 1;
            if (v26 == -1 || v27 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v28 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if ((v28 & 0x80) == 0) {
              goto LABEL_75;
            }
            v23 += 7;
            BOOL v19 = v24++ >= 9;
            if (v19)
            {
              LODWORD(v25) = 0;
              goto LABEL_77;
            }
          }
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_75:
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v25) = 0;
          }
LABEL_77:
          uint64_t v65 = v5[174];
          goto LABEL_90;
        case 2u:
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v25 = 0;
          while (2)
          {
            uint64_t v31 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v32 = v31 + 1;
            if (v31 == -1 || v32 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v33 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32;
              v25 |= (unint64_t)(v33 & 0x7F) << v29;
              if (v33 < 0)
              {
                v29 += 7;
                BOOL v19 = v30++ >= 9;
                if (v19)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_81;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v25) = 0;
          }
LABEL_81:
          uint64_t v65 = v6[178];
          goto LABEL_90;
        case 3u:
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v36 = 0;
          while (2)
          {
            uint64_t v37 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v38 = v37 + 1;
            if (v37 == -1 || v38 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38;
              v36 |= (unint64_t)(v39 & 0x7F) << v34;
              if (v39 < 0)
              {
                v34 += 7;
                BOOL v19 = v35++ >= 9;
                if (v19)
                {
                  uint64_t v36 = 0;
                  goto LABEL_85;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v36 = 0;
          }
LABEL_85:
          BOOL v66 = v36 != 0;
          uint64_t v67 = v7[179];
          goto LABEL_95;
        case 4u:
          unint64_t v40 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v40 <= 0xFFFFFFFFFFFFFFF7 && v40 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v41 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + v20) = 1;
            uint64_t v41 = 0;
          }
          uint64_t v68 = v8[180];
          goto LABEL_104;
        case 5u:
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v25 = 0;
          while (2)
          {
            uint64_t v44 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v45 = v44 + 1;
            if (v44 == -1 || v45 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v46 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v44);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45;
              v25 |= (unint64_t)(v46 & 0x7F) << v42;
              if (v46 < 0)
              {
                v42 += 7;
                BOOL v19 = v43++ >= 9;
                if (v19)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_89;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v25) = 0;
          }
LABEL_89:
          uint64_t v65 = v9[181];
LABEL_90:
          *(_DWORD *)(a1 + v65) = v25;
          continue;
        case 6u:
          unint64_t v47 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v47 <= 0xFFFFFFFFFFFFFFFBLL && v47 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v48 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v47);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v47 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + v20) = 1;
            int v48 = 0;
          }
          uint64_t v69 = v10[182];
          goto LABEL_109;
        case 7u:
          unint64_t v49 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v49 <= 0xFFFFFFFFFFFFFFFBLL && v49 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v48 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v49);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v49 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + v20) = 1;
            int v48 = 0;
          }
          uint64_t v69 = v11[183];
          goto LABEL_109;
        case 9u:
          *(unsigned char *)(a1 + v4[173]) |= 1u;
          unint64_t v56 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v56 <= 0xFFFFFFFFFFFFFFF7 && v56 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v41 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v56);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v56 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v41 = 0;
          }
          uint64_t v68 = v12[175];
LABEL_104:
          *(void *)(a1 + v68) = v41;
          continue;
        case 0xAu:
          char v57 = 0;
          unsigned int v58 = 0;
          uint64_t v59 = 0;
          break;
        case 0xBu:
          *(unsigned char *)(a1 + v4[173]) |= 2u;
          unint64_t v63 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v63 <= 0xFFFFFFFFFFFFFFFBLL && v63 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v48 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v63);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v63 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            int v48 = 0;
          }
          uint64_t v69 = 40;
          goto LABEL_109;
        case 0xCu:
          *(unsigned char *)(a1 + v4[173]) |= 4u;
          unint64_t v64 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v64 <= 0xFFFFFFFFFFFFFFFBLL && v64 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v48 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v64);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v64 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            int v48 = 0;
          }
          uint64_t v69 = 44;
LABEL_109:
          *(_DWORD *)(a1 + v69) = v48;
          continue;
        default:
          float v50 = v5;
          float v51 = v6;
          float v52 = v7;
          int v53 = v4;
          uint64_t v70 = a1;
          int v54 = v8;
          uint64_t result = PBReaderSkipValueWithTag();
          float v8 = v54;
          a1 = v70;
          double v4 = v53;
          int v9 = &OBJC_IVAR___CLHidManager__delegate;
          double v7 = v52;
          double v10 = &OBJC_IVAR___CLHidManager__delegate;
          double v6 = v51;
          float v11 = &OBJC_IVAR___CLHidManager__delegate;
          double v5 = v50;
          float v12 = &OBJC_IVAR___CLHidManager__delegate;
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v60 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v61 = v60 + 1;
        if (v60 == -1 || v61 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v62 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v60);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v61;
        v59 |= (unint64_t)(v62 & 0x7F) << v57;
        if ((v62 & 0x80) == 0) {
          goto LABEL_92;
        }
        v57 += 7;
        BOOL v19 = v58++ >= 9;
        if (v19)
        {
          uint64_t v59 = 0;
          goto LABEL_94;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_92:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v59 = 0;
      }
LABEL_94:
      BOOL v66 = v59 != 0;
      uint64_t v67 = 53;
LABEL_95:
      *(unsigned char *)(a1 + v67) = v66;
    }
    while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length));
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100B92E88()
{
  uint64_t result = sub_1000A16E8();
  if ((result & 0x10) != 0) {
    operator new();
  }
  return result;
}

void sub_100B92ED4()
{
}

uint64_t sub_100B92EF8()
{
  if (qword_102480440 != -1) {
    dispatch_once(&qword_102480440, &stru_1022E8DF0);
  }
  return qword_10248AA88;
}

uint64_t sub_100B92F40(uint64_t a1)
{
  double v2 = (void *)sub_10074ED34(a1, 4);
  *double v2 = &off_1022E8E20;
  double v3 = (unsigned __int8 *)v2 + 36;
  *(unsigned char *)(a1 + 36) = sub_10074378C();
  unsigned __int8 v6 = 1;
  sub_10006ACBC((unsigned __int8 *)(a1 + 37), "EnableVisualLocalization", &v6, 0);
  sub_10006ACBC(v5, "AlwaysOnDeviceMotion9", v3, 0);
  *(unsigned char *)(a1 + 36) = v5[1];
  sub_10074EDB8((uint64_t *)a1);
  return a1;
}

void sub_100B92FE4(_Unwind_Exception *a1)
{
  sub_10074ED5C(v1);
  _Unwind_Resume(a1);
}

void sub_100B93004(void *a1)
{
  sub_10074ED5C(a1);

  operator delete();
}

BOOL sub_100B9303C(uint64_t a1)
{
  return (sub_1000A16E8() & 0x10) != 0 && *(unsigned char *)(a1 + 36) != 0;
}

BOOL sub_100B93078(uint64_t a1)
{
  return (sub_1000A16E8() & 0x10) != 0 && *(unsigned char *)(a1 + 38) != 0;
}

unint64_t sub_100B930B4()
{
  return ((unint64_t)sub_1000A16E8() >> 4) & 1;
}

uint64_t sub_100B930D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  sub_100B94894(a1 + 24, a3);
  *(unsigned char *)(a1 + 56) = 1;
  *(unsigned char *)(a1 + 168) = 0;
  if (*(void *)(a1 + 48))
  {
    if (qword_1024193D0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_101A7FDF4(qword_1024193D0 == -1);
    abort_report_np();
    __break(1u);
  }
  dispatch_once(&qword_1024193D0, &stru_1022E8E60);
LABEL_3:
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "initializing", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E8E60);
    }
    LOWORD(v13) = 0;
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssAssistanceMapVector::CLGnssAssistanceMapVector(id<CLIntersiloUniverse>, CLGnssAssistanceMapVectorCallback)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  int v12 = 0;
  sub_1000C7F88(buf);
  int v5 = sub_10006EF84(*(uint64_t *)buf, "GpsMapVectorAiding", &v12);
  if (v16) {
    sub_1000DB0A0(v16);
  }
  if (v5) {
    *(unsigned char *)(a1 + 56) = v12 == 1;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022E8E60);
  }
  unsigned __int8 v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(unsigned __int8 *)(a1 + 56);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "GpsMapVectorAiding,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E8E60);
    }
    int v10 = *(unsigned __int8 *)(a1 + 56);
    int v13 = 67109120;
    int v14 = v10;
    float v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssAssistanceMapVector::CLGnssAssistanceMapVector(id<CLIntersiloUniverse>, CLGnssAssistanceMapVectorCallback)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  if (*(unsigned char *)(a1 + 56)) {
    sub_101377314();
  }
  return a1;
}

void sub_100B93578(_Unwind_Exception *a1)
{
  sub_100855CA4(v2);
  uint64_t v4 = v1[1];
  v1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *v1;
  uint64_t *v1 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  _Unwind_Resume(a1);
}

void sub_100B93628(uint64_t a1, int *a2, double *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 16), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022E8E80);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    float v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistanceMapVector::onGpsAssistantNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022E8E80);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      unint64_t v15 = "";
      __int16 v16 = 2082;
      unint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistanceMapVector::onGpsAssistantNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100B93E84(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100B937E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B93804(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 16), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022E8E80);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    float v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistanceMapVector::onMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022E8E80);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      unint64_t v15 = "";
      __int16 v16 = 2082;
      unint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistanceMapVector::onMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100B945A0(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100B939C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100B939E4(uint64_t *a1)
{
  sub_100855CA4(a1 + 3);
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void *sub_100B93A74(void *result)
{
  if (*((unsigned char *)result + 56))
  {
    uint64_t v1 = result;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E8E60);
    }
    uint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLGnssAssistanceMapVector,start", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022E8E60);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMapVector::start()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    [*(id *)(*v1 + 16) register:*(void *)(*v1 + 8) forNotification:0 registrationInfo:0];
    if (sub_10073C750()) {
      [*(id *)(*v1 + 16) register:*(void *)(*v1 + 8) forNotification:1 registrationInfo:0];
    }
    return [*(id *)(v1[1] + 16) register:*(void *)(v1[1] + 8) forNotification:0 registrationInfo:0];
  }
  return result;
}

unsigned char *sub_100B93C54(unsigned char *result)
{
  if (result[56])
  {
    uint64_t v1 = result;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E8E60);
    }
    uint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLGnssAssistanceMapVector,stop", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022E8E60);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMapVector::stop()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    [*(id *)(*(void *)v1 + 16) unregister:*(void *)(*(void *)v1 + 8) forNotification:0];
    uint64_t result = (unsigned char *)sub_10073C750();
    if (result) {
      uint64_t result = [*(id *)(*(void *)v1 + 16) unregister:*(void *)(*(void *)v1 + 8) forNotification:1];
    }
    v1[168] = 0;
    uint64_t v3 = *((void *)v1 + 1);
    if (v3) {
      return [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:0];
    }
  }
  return result;
}

void sub_100B93E30(uint64_t a1, uint64_t a2, double a3)
{
  if (vabdd_f64(sub_1000D3E50(), *(double *)(a1 + 152)) < a3)
  {
    *(unsigned char *)(a2 + 176) = 1;
    *(void *)(a2 + 184) = *(void *)(a1 + 112);
  }
}

void sub_100B93E84(uint64_t a1, uint64_t a2, int *a3, double *a4)
{
  int v4 = *a3;
  if ((*a3 - 2) >= 2)
  {
    if (v4 == 1)
    {
      sub_100B94418(a1, a3, (uint64_t)a4);
    }
    else if (v4)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022E8E60);
      }
      unsigned __int8 v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *a3;
        *(_DWORD *)buf = 67109120;
        int v10 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Unsupported notification %d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022E8E60);
        }
        float v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMapVector::onGpsAssistantNotification(int, const CLGpsAssistant_Type::Notification &, const CLGpsAssistant_Type::NotificationData &)", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
    }
    else
    {
      sub_100B940E4(a1, a3, a4);
    }
  }
}

void sub_100B940E4(uint64_t a1, int *a2, double *a3)
{
  uint64_t v3 = *(void *)a3;
  uint64_t v4 = *((void *)a3 + 1);
  uint64_t v5 = *((void *)a3 + 2);
  uint64_t v6 = *((void *)a3 + 3);
  uint64_t v7 = *((void *)a3 + 4);
  double v8 = a3[5];
  double v9 = a3[6];
  double v10 = a3[7];
  double v11 = a3[8];
  long long v45 = *(_OWORD *)(a3 + 9);
  if (a3[11] <= 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E8E60);
    }
    unint64_t v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning machtime<=0", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022E8E60);
      }
      __int16 v22 = 0;
      __int16 v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMapVector::processGpsAssistantDirectionOfTravel(const CLGpsAssistant_Type::Notification &, const CLGpsAssistant_Type::NotificationData &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
  else
  {
    long long v20 = *(_OWORD *)(a3 + 11);
    uint64_t v19 = v3;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E8E60);
    }
    unint64_t v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68291331;
      int v24 = 0;
      __int16 v25 = 2082;
      uint64_t v26 = "";
      __int16 v27 = 2049;
      uint64_t v28 = v6;
      __int16 v29 = 2049;
      uint64_t v30 = v7;
      __int16 v31 = 1026;
      int v32 = (int)v9;
      __int16 v33 = 1026;
      int v34 = (int)v10;
      __int16 v35 = 1026;
      int v36 = (int)v11;
      __int16 v37 = 2049;
      uint64_t v38 = v4;
      __int16 v39 = 2049;
      uint64_t v40 = v5;
      __int16 v41 = 1026;
      int v42 = (int)v8;
      __int16 v43 = 1026;
      int v44 = (int)*(double *)&v20;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnss DOT\", \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"directionOfTravel\":%{public}d, \"directionOfTravelUnc\":%{public}d, \"roadWidth\":%{public}d, \"startLatitude\":\"%{private}.08f\", \"startLongitude\":\"%{private}.08f\", \"lengthOfLinearSegment\":%{public}d, \"machtime\":%{public}d}", buf, 0x58u);
    }
    *(void *)(a1 + 64) = v19;
    *(void *)(a1 + 72) = v4;
    *(void *)(a1 + 80) = v5;
    *(void *)(a1 + 88) = v6;
    *(void *)(a1 + 96) = v7;
    *(double *)(a1 + 104) = v8;
    *(double *)(a1 + 112) = v9;
    *(double *)(a1 + 120) = v10;
    *(double *)(a1 + 128) = v11;
    *(_OWORD *)(a1 + 136) = v45;
    *(_OWORD *)(a1 + 152) = v20;
    if (!*(unsigned char *)(a1 + 168))
    {
      int v16 = *a2;
      memcpy(__dst, a3, sizeof(__dst));
      sub_100B947E0(a1 + 24, v16);
    }
  }
}

void sub_100B94418(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 + 8);
  uint64_t v6 = *(void *)(a3 + 16);
  double v8 = *(double *)(a3 + 24);
  double v9 = *(double *)(a3 + 32);
  double v10 = *(double *)(a3 + 40);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022E8E60);
  }
  double v11 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t buf = 68290307;
    __int16 v15 = 2082;
    int v16 = "";
    __int16 v17 = 2049;
    uint64_t v18 = v7;
    __int16 v19 = 2049;
    uint64_t v20 = v6;
    __int16 v21 = 1026;
    int v22 = (int)v8;
    __int16 v23 = 1026;
    int v24 = (int)v9;
    __int16 v25 = 1026;
    int v26 = (int)v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnss MMP\", \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"uncEllipseSemiMajor\":%{public}d, \"uncEllipseSemiMinor\":%{public}d, \"uncEllipseAzimuth\":%{public}d}", (uint8_t *)&buf, 0x38u);
  }
  if (!*(unsigned char *)(a1 + 168))
  {
    int v12 = *a2;
    memcpy(__dst, (const void *)a3, sizeof(__dst));
    sub_100B947E0(a1 + 24, v12);
  }
}

void sub_100B945A0(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4)
{
  if (!*a3)
  {
    int v6 = *((_DWORD *)a4 + 2);
    BOOL v7 = v6 && v6 != 71 && (*a4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && *(double *)a4 > 0.0;
    *(unsigned char *)(a1 + 168) = v7;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E8E60);
    }
    double v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v9 = *((_DWORD *)a4 + 2);
      uint64_t v10 = *a4;
      int v11 = *(unsigned __int8 *)(a1 + 168);
      *(_DWORD *)uint64_t buf = 67109632;
      int v14 = v9;
      __int16 v15 = 2048;
      uint64_t v16 = v10;
      __int16 v17 = 1024;
      int v18 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "fitnessSession,%d,startTime,%.3lf,inFitnessSession,%d", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022E8E60);
      }
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMapVector::onMotionStateObserverNotification(int, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

uint64_t sub_100B947E0(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_100B94834(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100B94864(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100B94894(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_100B9492C(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1008B86EC((const void *)a1, a2);
  *uint64_t v3 = off_1022E8EB0;
  *(unsigned char *)(a1 + 121) = sub_100B95A40((uint64_t)v3);
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 124) = 0;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, (const void *)a1, (CFNotificationCallback)sub_100811098, @"com.apple.tcc.access.changed", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
  sub_1008B8F80(a1, v5);
  if (qword_102480448 != -1) {
    dispatch_once(&qword_102480448, &stru_1022E8FE0);
  }
  if (qword_102480450 && off_102473050[0]())
  {
    int v6 = CFNotificationCenterGetDarwinNotifyCenter();
    CFStringRef v7 = (const __CFString *)off_102473050[0]();
    CFNotificationCenterAddObserver(v6, (const void *)a1, (CFNotificationCallback)sub_100B94C00, v7, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
  if (qword_102480460 != -1) {
    dispatch_once(&qword_102480460, &stru_1022E9000);
  }
  if (qword_102480468)
  {
    if (off_102473058[0]())
    {
      double v8 = CFNotificationCenterGetDarwinNotifyCenter();
      CFStringRef v9 = +[NSString stringWithUTF8String:off_102473058[0]()];
      CFNotificationCenterAddObserver(v8, (const void *)a1, (CFNotificationCallback)sub_100B94E3C, v9, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    }
  }
  sub_10060F068();
}

void sub_100B94BA8(_Unwind_Exception *a1)
{
  uint64_t v3 = v1[16];
  v1[16] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_1008B8BE0(v1);
  _Unwind_Resume(a1);
}

void sub_100B94C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022E8FC0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    uint64_t v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFitnessTrackingNotifierCompanion::activationStateChanged", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022E8FC0);
    }
    int v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      __int16 v19 = "";
      __int16 v20 = 2082;
      __int16 v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFitnessTrackingNotifierCompanion::activationStateChanged\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100B96550;
  v13[3] = &unk_1022ACFE0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_100B94E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B94E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022E8FC0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    uint64_t v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFitnessTrackingNotifierCompanion::phoneFitnessModeChanged", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022E8FC0);
    }
    int v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      __int16 v19 = "";
      __int16 v20 = 2082;
      __int16 v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFitnessTrackingNotifierCompanion::phoneFitnessModeChanged\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100B966A0;
  v13[3] = &unk_1022ACFE0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_100B95058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B95078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022E8FC0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v8 = 1;
    char v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFitnessTrackingNotifierCompanion::onDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022E8FC0);
    }
    int v6 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      id v12 = "";
      __int16 v13 = 2082;
      int v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFitnessTrackingNotifierCompanion::onDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_100B9547C((_DWORD *)a4);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_100B9521C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9523C(_DWORD *a1)
{
  uint64_t result = sub_100B96388();
  if (a1[31] != result)
  {
    a1[31] = result;
    v7[0] = result;
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022E9040);
    }
    uint64_t v3 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      if (a1[31] == 1) {
        int v4 = "Enabled";
      }
      else {
        int v4 = "Disabled";
      }
      *(_DWORD *)uint64_t buf = 136446210;
      int v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CM Phone Fitness Mode, %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022E9040);
      }
      if (a1[31] == 1) {
        char v5 = "Enabled";
      }
      else {
        char v5 = "Disabled";
      }
      v7[1] = 136446210;
      char v8 = v5;
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessTrackingNotifierCompanion::updatePhoneFitnessMode()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    *(_DWORD *)uint64_t buf = 5;
    return (*(uint64_t (**)(_DWORD *, uint8_t *, _DWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, buf, v7, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_100B9547C(_DWORD *a1)
{
  CFBooleanRef v2 = (const __CFBoolean *)CFPreferencesCopyValue(@"EnableFitnessTracking", @"com.apple.nanolifestyle.privacy", @"mobile", kCFPreferencesAnyHost);
  if (v2)
  {
    CFBooleanRef v3 = v2;
    int Value = CFBooleanGetValue(v2);
    CFRelease(v3);
    if (Value) {
      int v5 = 1;
    }
    else {
      int v5 = 2;
    }
    if (v5 != a1[34])
    {
      a1[34] = v5;
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022E9020);
      }
      int v6 = qword_102419278;
      if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 138412802;
        CFStringRef v17 = @"com.apple.nanolifestyle.privacy";
        __int16 v18 = 2112;
        CFStringRef v19 = @"EnableFitnessTracking";
        __int16 v20 = 1026;
        int v21 = Value;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WatchAppFitnessTracking: %@ %@ isEnabled=%{public}d", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419270 != -1) {
          dispatch_once(&qword_102419270, &stru_1022E9020);
        }
        int v10 = 138412802;
        CFStringRef v11 = @"com.apple.nanolifestyle.privacy";
        __int16 v12 = 2112;
        CFStringRef v13 = @"EnableFitnessTracking";
        __int16 v14 = 1026;
        int v15 = Value;
        CFStringRef v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessTrackingNotifierCompanion::updateWatchAppFitnessTracking()", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      *(_DWORD *)uint64_t buf = a1[34];
      int v10 = 6;
      (*(void (**)(_DWORD *, int *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v10, buf, 1, 0xFFFFFFFFLL, 0);
    }
  }
  else
  {
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022E9020);
    }
    CFStringRef v7 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 138543362;
      CFStringRef v17 = @"EnableFitnessTracking";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "updateWatchAppFitnessTracking: %{public}@ returned nil", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022E9020);
      }
      int v10 = 138543362;
      CFStringRef v11 = @"EnableFitnessTracking";
      char v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessTrackingNotifierCompanion::updateWatchAppFitnessTracking()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

uint64_t sub_100B95860(void *a1)
{
  *a1 = off_1022E8EB0;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, @"com.apple.tcc.access.changed", 0);
  if (qword_102480448 != -1) {
    dispatch_once(&qword_102480448, &stru_1022E8FE0);
  }
  if (qword_102480450 && off_102473050[0]())
  {
    CFBooleanRef v3 = CFNotificationCenterGetDarwinNotifyCenter();
    CFStringRef v4 = (const __CFString *)off_102473050[0]();
    CFNotificationCenterRemoveObserver(v3, a1, v4, 0);
  }
  if (qword_102480460 != -1) {
    dispatch_once(&qword_102480460, &stru_1022E9000);
  }
  if (qword_102480468 && off_102473058[0]())
  {
    int v5 = CFNotificationCenterGetDarwinNotifyCenter();
    CFStringRef v6 = +[NSString stringWithUTF8String:off_102473058[0]()];
    CFNotificationCenterRemoveObserver(v5, a1, v6, 0);
  }
  uint64_t v7 = a1[16];
  if (v7)
  {
    [*(id *)(v7 + 16) unregister:*(void *)(v7 + 8) forNotification:11];
    uint64_t v8 = a1[16];
    a1[16] = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  else
  {
    a1[16] = 0;
  }

  return sub_1008B8BE0(a1);
}

void sub_100B95A08(void *a1)
{
  sub_100B95860(a1);

  operator delete();
}

BOOL sub_100B95A40(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 109))
  {
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022E9020);
    }
    uint64_t v1 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#SystemState, Overriding device activation status check.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022E9020);
      }
      CFStringRef v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLFitnessTrackingNotifierCompanion::isDeviceActivated() const", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return 1;
  }
  if (qword_102480448 != -1) {
    dispatch_once(&qword_102480448, &stru_1022E8FE0);
  }
  if (qword_102480450 && (off_102473068() & 1) != 0) {
    return 1;
  }
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022E9020);
  }
  CFBooleanRef v3 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#SystemState, Device is not activated, suspending activity tracking.", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022E9020);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLFitnessTrackingNotifierCompanion::isDeviceActivated() const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

uint64_t sub_100B95D50()
{
  if (!TCCAccessGetOverride())
  {
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022E9020);
    }
    uint64_t v0 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#SystemState, Failed to get TCC for motion, suspending activity tracking.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022E9020);
      }
      CFBooleanRef v2 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLFitnessTrackingNotifierCompanion::isFitnessTrackingEnabled() const", "%s\n", v2);
      if (v2 != (char *)buf) {
        free(v2);
      }
    }
  }
  return 1;
}

void sub_100B96038(uint64_t a1)
{
  int v2 = sub_1008B86E4(a1);
  v9[0] = v2;
  int v3 = *(unsigned __int8 *)(a1 + 121);
  v9[1] = *(unsigned char *)(a1 + 121);
  v9[2] = 0;
  BOOL v4 = 0;
  if (sub_1008B86E4(a1)) {
    BOOL v4 = *(unsigned char *)(a1 + 121) != 0;
  }
  v9[3] = v4;
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022E9020);
  }
  int v5 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67240704;
    int v16 = v2;
    __int16 v17 = 1026;
    int v18 = v3;
    __int16 v19 = 1026;
    BOOL v20 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#SystemState, Companion, Enabled, %{public}d, DeviceActivated, %{public}d, allowed, %{public}d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022E9020);
    }
    v10[0] = 67240704;
    v10[1] = v2;
    __int16 v11 = 1026;
    int v12 = v3;
    __int16 v13 = 1026;
    BOOL v14 = v4;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFitnessTrackingNotifierCompanion::notifyClients()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  *(_DWORD *)uint64_t buf = 0;
  if (sub_1001072EC(a1, (int *)buf, 1))
  {
    *(_DWORD *)uint64_t buf = 0;
    (*(void (**)(uint64_t, uint8_t *, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, buf, v9, 1, 0xFFFFFFFFLL, 0);
  }
  *(_DWORD *)uint64_t buf = 6;
  if (sub_1001072EC(a1, (int *)buf, 1))
  {
    *(_DWORD *)uint64_t buf = *(_DWORD *)(a1 + 136);
    v10[0] = 6;
    (*(void (**)(uint64_t, _DWORD *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, v10, buf, 1, 0xFFFFFFFFLL, 0);
  }
  uint64_t v7 = objc_alloc_init(ALActivityLog);
  [(ALActivityLog *)v7 setTimestamp:CFAbsoluteTimeGetCurrent()];
  [(ALActivityLog *)v7 setFitnessTracking:objc_alloc_init(ALCMFitnessTracking)];
  [(ALCMFitnessTracking *)[(ALActivityLog *)v7 fitnessTracking] setFitnessTrackingEnabled:v9[0]];
  [[+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance") proxyForService:@"CLActivityLogger"] logData:v7];
}

uint64_t sub_100B96388()
{
  if (qword_102480460 != -1) {
    dispatch_once(&qword_102480460, &stru_1022E9000);
  }
  if (!qword_102480468 || !off_102473060[0]()) {
    return 2;
  }
  BOOL v3 = 0;
  sub_10051F6A8((uint64_t)v2, @"com.apple.nanolifestyle", 1, @"mobile");
  uint64_t v0 = (const char *)[(id)off_102473060[0]() UTF8String];
  sub_1000D2988((uint64_t)v2, v0, &v3);
  sub_10051F740(v2);
  if (v3) {
    return 1;
  }
  else {
    return 2;
  }
}

void sub_100B96454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100B96468(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100B96498(id a1)
{
  qword_102480450 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/MobileActivation.framework/MobileActivation", 2);
}

uint64_t sub_100B964C4()
{
  if (qword_102480448 != -1) {
    dispatch_once(&qword_102480448, &stru_1022E8FE0);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)qword_102480450, "kNotificationActivationStateChanged");
  if (v0)
  {
    uint64_t result = *v0;
    qword_102480458 = result;
  }
  else
  {
    uint64_t result = qword_102480458;
  }
  off_102473050[0] = sub_100B96544;
  return result;
}

uint64_t sub_100B96544()
{
  return qword_102480458;
}

uint64_t sub_100B96550(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 32);
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)v1 + 208))(v1);
  if (v1[121] != result)
  {
    v1[121] = result;
    BOOL v3 = *(uint64_t (**)(unsigned char *))(*(void *)v1 + 224);
    return v3(v1);
  }
  return result;
}

void sub_100B965E8(id a1)
{
  qword_102480468 = (uint64_t)dlopen("/System/Library/Frameworks/HealthKit.framework/HealthKit", 2);
}

uint64_t sub_100B96614()
{
  if (qword_102480460 != -1) {
    dispatch_once(&qword_102480460, &stru_1022E9000);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)qword_102480468, "HKStandalonePhoneFitnessModeDidUpdateNotification");
  if (v0)
  {
    uint64_t result = *v0;
    qword_102480470 = result;
  }
  else
  {
    uint64_t result = qword_102480470;
  }
  off_102473058[0] = sub_100B96694;
  return result;
}

uint64_t sub_100B96694()
{
  return qword_102480470;
}

uint64_t sub_100B966A0(uint64_t a1)
{
  return sub_100B9523C(*(_DWORD **)(a1 + 32));
}

void sub_100B966A8(id a1)
{
  qword_102419278 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fitness");
}

uint64_t sub_100B966D8()
{
  if (qword_102480448 != -1) {
    dispatch_once(&qword_102480448, &stru_1022E8FE0);
  }
  uint64_t v0 = (uint64_t (*)())dlsym((void *)qword_102480450, "MAGetActivationState");
  off_102473068 = v0;

  return v0();
}

uint64_t sub_100B96740()
{
  if (qword_102480460 != -1) {
    dispatch_once(&qword_102480460, &stru_1022E9000);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)qword_102480468, "HKIsStandalonePhoneFitnessModeDefaultsKey");
  if (v0)
  {
    uint64_t result = *v0;
    qword_102480478 = result;
  }
  else
  {
    uint64_t result = qword_102480478;
  }
  off_102473060[0] = sub_100B967C0;
  return result;
}

uint64_t sub_100B967C0()
{
  return qword_102480478;
}

void sub_100B967CC(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100B967FC()
{
}

void sub_100B96858()
{
}

void sub_100B9687C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_1022E9070;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = 0x40D5180000000000;
  BOOL v4 = (void *)(a1 + 24);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  sub_1000C7F88(buf);
  sub_1000A699C(*(uint64_t *)buf, "CleanupInterval", v4);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  if (objc_opt_class())
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(LocalCenter, *(const void **)(a1 + 8), (CFNotificationCallback)sub_100B970C8, SSDeviceStoreFrontChangedNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
  sub_1007E0344();
}

void sub_100B96F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  uint64_t v30 = v27[8];
  v27[8] = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  uint64_t v31 = v27[7];
  v27[7] = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  uint64_t v32 = v27[6];
  v27[6] = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  uint64_t v33 = v27[5];
  v27[5] = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  uint64_t v34 = *v28;
  uint64_t *v28 = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B970C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022E90E0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    int v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTilesManager::onStoreFrontDidChangeNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022E90E0);
    }
    __int16 v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      __int16 v19 = "";
      __int16 v20 = 2082;
      int v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTilesManager::onStoreFrontDidChangeNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100B983F8;
  v13[3] = &unk_1022ACFE0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_100B972E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B97304(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022E90E0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTilesManager::onClientNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022E90E0);
    }
    CFStringRef v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTilesManager::onClientNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10105A714(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100B974D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B974F0(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022E90E0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTilesManager::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022E90E0);
    }
    CFStringRef v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTilesManager::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101057D84(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100B976BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B976DC(uint64_t a1, int *a2, unsigned __int8 *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022E90E0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTilesManager::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022E90E0);
    }
    CFStringRef v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTilesManager::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10105A4E0(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100B978A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B978C8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022E90E0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTilesManager::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022E90E0);
    }
    CFStringRef v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTilesManager::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101065724(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100B97A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100B97AB4(uint64_t a1, xpc_activity_t activity)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  if (state == 2)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E9100);
    }
    BOOL v4 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "TileMgr,timer handler triggered", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E9100);
      }
      LOWORD(v11) = 0;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesManagerExternal::CLTilesManagerExternal(CLTilesManager *, id<CLIntersiloUniverse>)_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    int v5 = [objc_msgSend(*(id *)(v2 + 16), "silo") queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100B97DFC;
    block[3] = &unk_1022A3020;
    block[4] = v2;
    dispatch_async(v5, block);
  }
  else
  {
    int v6 = state;
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E9100);
    }
    uint64_t v7 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "TileMgr,timer handler triggered with unexpected state %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022E9100);
      }
      int v11 = 67240192;
      int v12 = v6;
      CFStringRef v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesManagerExternal::CLTilesManagerExternal(CLTilesManager *, id<CLIntersiloUniverse>)_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

id sub_100B97DFC(uint64_t a1)
{
  return sub_100B97E04(*(void *)(a1 + 32));
}

id sub_100B97E04(uint64_t a1)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022E9100);
  }
  uint64_t v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TileMgr,CLTilesManagerExternal onCleanupAgedTiles triggered", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022E9100);
    }
    BOOL v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManagerExternal::onCleanupAgedTiles()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return sub_1010591DC(*(void *)(a1 + 8));
}

uint64_t sub_100B97FA0(uint64_t a1)
{
  *(void *)a1 = off_1022E9070;
  if (objc_opt_class())
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterRemoveObserver(LocalCenter, *(const void **)(a1 + 8), SSDeviceStoreFrontChangedNotification, 0);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022E9120);
  }
  BOOL v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "TileMgr,unregistering xpc activity", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E9120);
    }
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLTilesManagerExternal::~CLTilesManagerExternal()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  xpc_activity_unregister("com.apple.locationd.CLTilesManagerExternal");
  uint64_t v4 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return a1;
}

void sub_100B9827C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_100B9828C(uint64_t a1)
{
  sub_100B97FA0(a1);

  operator delete();
}

id sub_100B982C4()
{
  id result = (id)objc_opt_class();
  if (result)
  {
    id v1 = [[+[SSDevice currentDevice](SSDevice, "currentDevice") storeFrontIdentifierPromise];
    return _[v1 resultWithTimeout:0 error:5.0];
  }
  return result;
}

BOOL sub_100B98320(uint64_t a1)
{
  return [[[objc_msgSend(*(id *)(a1 + 16), "vendor") proxyForService:@"CLDataProtectionManager"] syncgetDataAvailability] != 1;
}

id sub_100B98354(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 16) vendor];

  return [v1 isServiceEnabled:@"CLSuggestedActionManager"];
}

id sub_100B98388(uint64_t a1)
{
  id v1 = [[objc_msgSend(*(id *)(a1 + 16), "vendor") proxyForService:@"CLClientManager"];
  if (byte_102480497 >= 0) {
    uint64_t v2 = &qword_102480480;
  }
  else {
    uint64_t v2 = (uint64_t *)qword_102480480;
  }
  BOOL v3 = +[NSString stringWithUTF8String:v2];

  return [v1 resetNotificationConsumedForIdentifier:v3];
}

uint64_t sub_100B983F8(void *a1)
{
  return sub_1010661D8(a1[4], a1[5], a1[6], a1[7], a1[8]);
}

void sub_100B9840C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100B9843C(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100B9846C(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100B9849C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D82758;
      v0[3] = unk_101D82768;
      v0[4] = xmmword_101D82778;
      v0[0] = xmmword_101D82738;
      v0[1] = unk_101D82748;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_100B9857C(_Unwind_Exception *a1)
{
}

void sub_100B98594()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_100B98614()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_100B986A4(_Unwind_Exception *a1)
{
}

uint64_t sub_100B986BC()
{
  sub_100134750(&qword_102480480, "TilesManager");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102480480, (void *)&_mh_execute_header);
}

void sub_100B9871C()
{
}

void sub_100B9872C()
{
}

void sub_100B9873C()
{
}

void sub_100B9874C(uint64_t a1)
{
  if (a1) {
    sub_100B99648(a1 - 8);
  }
  else {
    sub_100B99648(0);
  }
}

void sub_100B9875C(uint64_t a1)
{
  if (a1) {
    sub_100B99940(a1 - 8);
  }
  else {
    sub_100B99940(0);
  }
}

void sub_100B9876C(uint64_t a1)
{
  if (a1) {
    sub_100B99AD8(a1 - 8);
  }
  else {
    sub_100B99AD8(0);
  }
}

void sub_100B9877C(uint64_t a1)
{
  if (a1) {
    sub_100B98AAC(a1 - 8);
  }
  else {
    sub_100B98AAC(0);
  }
}

void sub_100B9878C()
{
  if (qword_102419180 != -1) {
    dispatch_once(&qword_102419180, &stru_1022E9298);
  }
  uint64_t v0 = qword_102419188;
  if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Session started", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_1022E9298);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiController::doStartSession(const EStartOfWorkout *)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
  sub_100B98934();
}

void sub_100B98934()
{
}

void sub_100B98A88()
{
}

void sub_100B98AAC(uint64_t a1)
{
  sub_100B98C38(a1);
  if (qword_102419180 != -1) {
    dispatch_once(&qword_102419180, &stru_1022E9298);
  }
  uint64_t v1 = qword_102419188;
  if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Session ended", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_1022E9298);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiController::doEndSession(const EEndOfWorkout *)", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
}

void sub_100B98C38(uint64_t a1)
{
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  if (*(double *)(a1 + 1520) == 2.22507386e-308)
  {
    sub_100B99F8C(a1);
    return;
  }
  if (qword_102419180 != -1) {
    dispatch_once(&qword_102419180, &stru_1022E9298);
  }
  uint64_t v2 = qword_102419188;
  if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Run stopped", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_1022E9298);
    }
    LOWORD(v69) = 0;
    int v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiController::finalizeRun()", "%s\n", v36);
    if (v36 != (char *)buf) {
      free(v36);
    }
  }
  BOOL v3 = *(void **)(a1 + 40);
  if (v3)
  {
    if ((*(uint64_t (**)(void *, long long *, double))(*v3 + 24))(v3, &v54, *(double *)(a1 + 104))) {
      goto LABEL_22;
    }
    BOOL v3 = *(void **)(a1 + 40);
  }
  long long v69 = 0u;
  long long v70 = 0u;
  memset(v58, 0, sizeof(v58));
  if (sub_100B9A0D8(v3, (uint64_t)&v69, v58, *(double *)(a1 + 104)))
  {
    uint64_t v4 = *((void *)&v70 + 1);
    if (*((void *)&v70 + 1) == *(void *)v70) {
      uint64_t v4 = *(void *)(v70 - 8) + 4096;
    }
    long long v5 = *(_OWORD *)(v4 - 64);
    long long v6 = *(_OWORD *)(v4 - 48);
    long long v7 = *(_OWORD *)(v4 - 16);
    long long v56 = *(_OWORD *)(v4 - 32);
    long long v57 = v7;
    long long v54 = v5;
    long long v55 = v6;
  }
  else
  {
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_1022E9298);
    }
    uint64_t v8 = qword_102419188;
    if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "last elevation entry not found", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419180 != -1) {
        dispatch_once(&qword_102419180, &stru_1022E9298);
      }
      uint64_t v40 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiController::finalizeRun()", "%s\n", v40);
      if (v40 != (char *)buf) {
        free(v40);
      }
    }
  }
LABEL_22:
  CFStringRef v9 = *(void **)(a1 + 48);
  if (!v9) {
    goto LABEL_25;
  }
  if (((*(uint64_t (**)(void *, long long *, double))(*v9 + 24))(v9, &v42, *(double *)(a1 + 104)) & 1) == 0)
  {
    CFStringRef v9 = *(void **)(a1 + 48);
LABEL_25:
    long long v69 = 0u;
    long long v70 = 0u;
    memset(v58, 0, sizeof(v58));
    if (sub_100174F3C(v9, (uint64_t)&v69, v58, *(double *)(a1 + 104)))
    {
      uint64_t v13 = *((void *)&v70 + 1);
      if (*((void *)&v70 + 1) == *(void *)v70) {
        uint64_t v13 = *(void *)(v70 - 8) + 4032;
      }
      long long v14 = *(_OWORD *)(v13 - 192);
      long long v15 = *(_OWORD *)(v13 - 176);
      long long v16 = *(_OWORD *)(v13 - 144);
      long long v44 = *(_OWORD *)(v13 - 160);
      long long v45 = v16;
      long long v42 = v14;
      long long v43 = v15;
      long long v17 = *(_OWORD *)(v13 - 128);
      long long v18 = *(_OWORD *)(v13 - 112);
      long long v19 = *(_OWORD *)(v13 - 80);
      long long v48 = *(_OWORD *)(v13 - 96);
      long long v49 = v19;
      long long v46 = v17;
      long long v47 = v18;
      long long v10 = *(_OWORD *)(v13 - 64);
      long long v11 = *(_OWORD *)(v13 - 48);
      long long v12 = *(_OWORD *)(v13 - 32);
      long long v20 = *(_OWORD *)(v13 - 16);
      long long v52 = v12;
      long long v53 = v20;
      long long v50 = v10;
      long long v51 = v11;
    }
    else
    {
      if (qword_102419180 != -1) {
        dispatch_once(&qword_102419180, &stru_1022E9298);
      }
      int v21 = qword_102419188;
      if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "last odometer entry not found", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419180 != -1) {
          dispatch_once(&qword_102419180, &stru_1022E9298);
        }
        __int16 v41 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiController::finalizeRun()", "%s\n", v41);
        if (v41 != (char *)buf) {
          free(v41);
        }
      }
    }
  }
  LODWORD(v10) = DWORD1(v55);
  LODWORD(v11) = v55;
  *(double *)&unint64_t v22 = (double)(unint64_t)v11;
  double v23 = (double)(unint64_t)v10 - *(double *)&v22;
  LODWORD(v22) = *(_DWORD *)(a1 + 268);
  LODWORD(v12) = *(_DWORD *)(a1 + 264);
  double v24 = (v23 + (double)(unint64_t)v12 - (double)v22) / 100.0;
  double v25 = fabs(v24);
  *(double *)&long long v11 = *(double *)&v45 - *(double *)(a1 + 360);
  double v26 = sqrt(*(double *)&v11 * *(double *)&v11 + v24 * v24);
  double v27 = *(double *)(a1 + 104);
  double v28 = *(double *)(a1 + 1520);
  if (v27 - v28 == 0.0) {
    double v29 = 0.0;
  }
  else {
    double v29 = v26 / (v27 - v28);
  }
  uint64_t v71 = 0;
  long long v69 = 0u;
  long long v70 = 0u;
  double v72 = v28;
  double v73 = v27;
  double v74 = v26;
  double v75 = v29;
  double v76 = *(double *)(a1 + 1536);
  double v30 = v76;
  long double v31 = atan2(v25, *(long double *)&v11);
  long double v77 = v31;
  double v78 = v25;
  BOOL v32 = v30 < 4.5 && v26 < 75.0;
  if (v32 || v24 == 0.0 || vabdd_f64(v27, v28) < 3.0)
  {
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_1022E9298);
    }
    __int16 v35 = qword_102419188;
    if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134219008;
      double v80 = v28;
      __int16 v81 = 2048;
      double v82 = v27;
      __int16 v83 = 2048;
      double v84 = v26;
      __int16 v85 = 2048;
      double v86 = v30;
      __int16 v87 = 2048;
      double v88 = v25;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Suppressing run,startTime,%f,endTime,%f,distance,%f,maxSpeed,%f,elevation,%f", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419180 != -1) {
        dispatch_once(&qword_102419180, &stru_1022E9298);
      }
      LODWORD(v58[0]) = 134219008;
      *(double *)((char *)v58 + 4) = v28;
      WORD6(v58[0]) = 2048;
      *(double *)((char *)v58 + 14) = v27;
      WORD3(v58[1]) = 2048;
      *((double *)&v58[1] + 1) = v26;
      __int16 v59 = 2048;
      double v60 = v30;
      __int16 v61 = 2048;
      double v62 = v25;
      __int16 v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiController::finalizeRun()", "%s\n", v39);
      if (v39 != (char *)buf) {
        free(v39);
      }
    }
    sub_10140B044(a1 + 504);
  }
  else
  {
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_1022E9298);
    }
    uint64_t v33 = qword_102419188;
    if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v34 = *(void *)(a1 + 1528);
      *(_DWORD *)uint64_t buf = 134219776;
      double v80 = v28;
      __int16 v81 = 2048;
      double v82 = v27;
      __int16 v83 = 2048;
      double v84 = v26;
      __int16 v85 = 2048;
      double v86 = v25;
      __int16 v87 = 2048;
      double v88 = v29;
      __int16 v89 = 2048;
      double v90 = v30;
      __int16 v91 = 2048;
      long double v92 = v31;
      __int16 v93 = 2048;
      uint64_t v94 = v34;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "End of run stats,startTime,%lf,endTime,%lf,runDistance,%f,runElevationDescent,%f,runAvgSpeed,%f,runMaxSpeed,%f,runSlope,%f,runMaxFilteredSpeed,%f", buf, 0x52u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419180 != -1) {
        dispatch_once(&qword_102419180, &stru_1022E9298);
      }
      uint64_t v37 = *(void *)(a1 + 1528);
      LODWORD(v58[0]) = 134219776;
      *(double *)((char *)v58 + 4) = v28;
      WORD6(v58[0]) = 2048;
      *(double *)((char *)v58 + 14) = v27;
      WORD3(v58[1]) = 2048;
      *((double *)&v58[1] + 1) = v26;
      __int16 v59 = 2048;
      double v60 = v25;
      __int16 v61 = 2048;
      double v62 = v29;
      __int16 v63 = 2048;
      double v64 = v30;
      __int16 v65 = 2048;
      long double v66 = v31;
      __int16 v67 = 2048;
      uint64_t v68 = v37;
      uint64_t v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiController::finalizeRun()", "%s\n", v38);
      if (v38 != (char *)buf) {
        free(v38);
      }
    }
    sub_100793910(*(void *)(a1 + 32), (uint64_t)&v69);
    sub_10140AAF0(a1 + 504, (double *)&v69, 1);
  }
  sub_100B99F8C(a1);
}

void sub_100B99648(uint64_t a1)
{
  if (*(double *)(a1 + 1520) == 2.22507386e-308)
  {
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_1022E9298);
    }
    uint64_t v2 = qword_102419188;
    if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Run started", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419180 != -1) {
        dispatch_once(&qword_102419180, &stru_1022E9298);
      }
      long long v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiController::doRun(const EInRun *)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    *(void *)(a1 + 1520) = *(void *)(a1 + 120);
  }
  if (*(double *)(a1 + 256) == 2.22507386e-308)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (v3) {
      (*(void (**)(uint64_t, uint64_t, double))(*(void *)v3 + 24))(v3, a1 + 248, *(double *)(a1 + 120));
    }
  }
  if (*(double *)(a1 + 312) == 2.22507386e-308)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    if (v4) {
      (*(void (**)(uint64_t, uint64_t, double))(*(void *)v4 + 24))(v4, a1 + 312, *(double *)(a1 + 120));
    }
  }
  int v5 = (*(uint64_t (**)(void, uint8_t *, double))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), buf, *(double *)(a1 + 120));
  double v6 = v12;
  if (v5) {
    BOOL v7 = v12 == -1.0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    double v8 = v13;
    double v9 = *(double *)(a1 + 1536);
    if (v13 > v9)
    {
      sub_10140B0A8(a1 + 504, v13);
      double v6 = v12;
      double v8 = v13;
      double v9 = *(double *)(a1 + 1536);
    }
    if (v6 < *(double *)(a1 + 1528)) {
      double v6 = *(double *)(a1 + 1528);
    }
    *(double *)(a1 + 1528) = v6;
    if (v8 < v9) {
      double v8 = v9;
    }
    *(double *)(a1 + 1536) = v8;
  }
}

void sub_100B99908()
{
}

void sub_100B99940(uint64_t a1)
{
  sub_100B98C38(a1);
  *(_DWORD *)(a1 + 128) = 3;
  if (qword_102419180 != -1) {
    dispatch_once(&qword_102419180, &stru_1022E9298);
  }
  uint64_t v2 = qword_102419188;
  if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "transitioning to low power mode: start of lift", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_1022E9298);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiController::doLowPower(const ELift *)", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
}

void sub_100B99AD8(uint64_t a1)
{
  sub_100B98C38(a1);
  *(_DWORD *)(a1 + 128) = 4;
  if (qword_102419180 != -1) {
    dispatch_once(&qword_102419180, &stru_1022E9298);
  }
  uint64_t v2 = qword_102419188;
  if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "transitioning to low power mode: sedentary", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_1022E9298);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiController::doLowPower(const ESedentaryTimeout *)", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
}

uint64_t sub_100B99C70(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = &unk_1022E9140;
  uint64_t v3 = a1 + 8;
  *(void *)(a1 + 16) = 10;
  *(_WORD *)(a1 + 24) = 512;
  *(void *)a1 = off_1022E9240;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 32) = a2;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  int64x2_t v5 = vdupq_n_s64(0x10000000000000uLL);
  *(int64x2_t *)(a1 + 104) = v5;
  *(void *)(a1 + 120) = 0x10000000000000;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 192) = 0x10000000000000;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(void *)(a1 + 256) = 0x10000000000000;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 312) = 0x10000000000000;
  *(_OWORD *)(a1 + 168) = 0u;
  sub_1014089BC(a1 + 504);
  *(int64x2_t *)(a1 + 1520) = v5;
  *(void *)(a1 + 1536) = 0x10000000000000;
  sub_1001A34E0(v3, 1, (uint64_t)&v6);
  return a1;
}

void sub_100B99DAC(_Unwind_Exception *a1)
{
  sub_10041F48C(v3);
  sub_10041F48C(v2);
  uint64_t v6 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *v4;
  *uint64_t v4 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  _Unwind_Resume(a1);
}

void *sub_100B99E30(void *a1)
{
  *a1 = off_1022E9240;
  sub_1001A34E0((uint64_t)(a1 + 1), 2, (uint64_t)&v5);
  sub_10041F48C(a1 + 17);
  sub_10041F48C(a1 + 7);
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_100B99EFC(void *a1)
{
  sub_100B99E30(a1);

  operator delete();
}

uint64_t sub_100B99F34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    sub_100B5C070(v2, *(double *)(v2 + 104), *(double *)(v2 + 112));
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    double v4 = *(double *)(result + 104);
    double v5 = *(double *)(result + 112);
    return sub_100528B3C(result, v4, v5);
  }
  return result;
}

int64x2_t sub_100B99F8C(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  *(void *)(a1 + 96) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 72);
      uint64_t v2 = (void **)(*(void *)(a1 + 64) + 8);
      *(void *)(a1 + 64) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 512;
  }
  *(void *)(a1 + 88) = v6;
LABEL_8:
  sub_100B9A258(a1);
  uint64_t v7 = *(void ***)(a1 + 144);
  uint64_t v8 = *(void *)(a1 + 152);
  *(void *)(a1 + 176) = 0;
  unint64_t v9 = v8 - (void)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      uint64_t v10 = *(void *)(a1 + 152);
      uint64_t v7 = (void **)(*(void *)(a1 + 144) + 8);
      *(void *)(a1 + 144) = v7;
      unint64_t v9 = v10 - (void)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 256;
    goto LABEL_14;
  }
  if (v9 >> 3 == 2)
  {
    uint64_t v11 = 512;
LABEL_14:
    *(void *)(a1 + 168) = v11;
  }
  *(_OWORD *)(a1 + 248) = xmmword_101D827F0;
  uint64_t v12 = a1 + 248;
  *(void *)(v12 - 128) = 0x10000000000000;
  *(_OWORD *)(v12 - 64) = xmmword_101D827F0;
  *(_OWORD *)(v12 - 48) = 0u;
  *(_OWORD *)(v12 - 32) = 0u;
  *(_OWORD *)(v12 - 16) = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(void *)(v12 + 64) = 0x10000000000000;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 168) = 0u;
  *(_OWORD *)(v12 + 184) = 0u;
  *(_OWORD *)(v12 + 200) = 0u;
  *(_OWORD *)(v12 + 216) = 0u;
  *(_OWORD *)(v12 + 232) = 0u;
  *(void *)(v12 + 248) = 0;
  *(void *)(v12 + 1288) = 0x10000000000000;
  int64x2_t result = vdupq_n_s64(0x10000000000000uLL);
  *(int64x2_t *)(v12 + 1272) = result;
  *(int64x2_t *)(v12 - 144) = result;
  *(_DWORD *)(v12 - 120) = 0;
  return result;
}

BOOL sub_100B9A0D8(void *a1, uint64_t a2, void *a3, double a4)
{
  uint64_t v4 = a1[4];
  uint64_t v5 = (void *)(v4 + 8 * (a1[7] >> 6));
  if (a1[5] == v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v5 + ((a1[7] & 0x3FLL) << 6);
  }
  *a3 = v5;
  a3[1] = v6;
  a3[2] = v5;
  a3[3] = v6;
  long long v7 = *((_OWORD *)a3 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v7;
  uint64_t v8 = a1[8];
  if (!v8) {
    return 0;
  }
  unint64_t v9 = a1[7] + v8;
  uint64_t v10 = a1[4];
  uint64_t v11 = a1[5];
  uint64_t v12 = (void *)(v10 + 8 * (v9 >> 6));
  if (*(double *)(*(void *)(v10 + (((v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) + (((v9 - 1) & 0x3F) << 6) + 8) < a4)
  {
    if (v11 == v10) {
      unint64_t v13 = 0;
    }
    else {
      unint64_t v13 = *v12 + ((v9 & 0x3F) << 6);
    }
    BOOL result = 0;
    *(void *)a2 = v12;
    *(void *)(a2 + 8) = v13;
    *(void *)(a2 + 16) = v12;
    *(void *)(a2 + 24) = v13;
    return result;
  }
  if (v11 == v10) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = *v12 + ((v9 & 0x3F) << 6);
  }
  uint64_t v16 = a3[3];
  if (v15 == v16)
  {
LABEL_22:
    unint64_t v21 = *(void *)(a2 + 24);
    return v21 != v16;
  }
  uint64_t v17 = *v12;
  unint64_t v18 = v15;
  long long v19 = v12;
  while (1)
  {
    uint64_t v20 = v18 - v17;
    if (v18 == v17) {
      break;
    }
    if (*(double *)(v18 - 56) <= a4) {
      goto LABEL_23;
    }
LABEL_21:
    v18 -= 64;
    if (v18 == v16) {
      goto LABEL_22;
    }
  }
  uint64_t v17 = *(v19 - 1);
  if (*(double *)(v17 + 4040) > a4)
  {
    unint64_t v18 = v17 + 4096;
    --v19;
    goto LABEL_21;
  }
LABEL_23:
  uint64_t v22 = v20 >> 6;
  if (v20 < -63)
  {
    unint64_t v25 = 62 - v22;
    char v23 = ~(_BYTE)v25;
    double v24 = &v19[-(v25 >> 6)];
  }
  else
  {
    char v23 = v22 + 1;
    double v24 = &v19[(unint64_t)(v22 + 1) >> 6];
  }
  unint64_t v21 = *v24 + ((unint64_t)(v23 & 0x3F) << 6);
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v15;
  *(void *)(a2 + 16) = v24;
  *(void *)(a2 + 24) = v21;
  uint64_t v16 = a3[3];
  return v21 != v16;
}

void sub_100B9A258(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  sub_10140A784(a1 + 504, 0);
}

uint64_t sub_100B9A2F0(uint64_t a1)
{
  if (qword_102419180 != -1) {
    dispatch_once(&qword_102419180, &stru_1022E9298);
  }
  uint64_t v2 = qword_102419188;
  if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "resuming tracking", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_1022E9298);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSkiController::resume()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return sub_1001A34E0(a1 + 8, 6, (uint64_t)buf);
}

uint64_t sub_100B9A494(uint64_t a1, __n128 a2)
{
  unint64_t v2 = a2.n128_u64[0];
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    (*(void (**)(uint64_t, __n128))(*(void *)v4 + 40))(v4, a2);
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t v6 = *(uint64_t (**)(__n128))(*(void *)result + 40);
    a2.n128_u64[0] = v2;
    return v6(a2);
  }
  return result;
}

uint64_t sub_100B9A53C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2
    || !*(void *)(a1 + 40)
    || !(*(unsigned int (**)(uint64_t, double))(*(void *)v2 + 48))(v2, *(double *)(a1 + 120)))
  {
    return 0;
  }
  v3.n128_u64[0] = *(void *)(a1 + 120);
  uint64_t v4 = *(uint64_t (**)(__n128))(**(void **)(a1 + 40) + 48);

  return v4(v3);
}

double sub_100B9A5E0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (void *)(a1 + 56);
  *(void *)uint64_t v10 = CFAbsoluteTimeGetCurrent();
  sub_10017CCF0(v4, (double *)v10);
  v5.n128_f64[0] = CFAbsoluteTimeGetCurrent();
  sub_100B9A494(a1, v5);
  sub_100B99F34(a1);
  if (*(void *)(a1 + 96)
    && (*(void *)(a1 + 120) = *(void *)(*(void *)(*(void *)(a1 + 64)
                                                      + ((*(void *)(a1 + 88) >> 6) & 0x3FFFFFFFFFFFFF8))
                                          + 8 * (*(void *)(a1 + 88) & 0x1FFLL)),
        sub_100B9A53C(a1)))
  {
    char v6 = 0;
    char v7 = 0;
    do
    {
      if (sub_100B9A778(a1)) {
        break;
      }
      sub_100B9AB58(a1, (uint64_t)v10, *(double *)(a1 + 120));
      char v7 = v10[0];
      long long v13 = *(_OWORD *)&v10[1];
      v14[0] = *(_OWORD *)v11;
      *(_OWORD *)((char *)v14 + 15) = *(_OWORD *)&v11[15];
      char v6 = v12;
      *(int64x2_t *)(a1 + 88) = vaddq_s64(*(int64x2_t *)(a1 + 88), (int64x2_t)xmmword_101D0A740);
      sub_10007F07C((uint64_t)v4, 1);
      if (!*(void *)(a1 + 96)) {
        break;
      }
      *(void *)(a1 + 120) = *(void *)(*(void *)(*(void *)(a1 + 64)
                                                    + ((*(void *)(a1 + 88) >> 6) & 0x3FFFFFFFFFFFFF8))
                                        + 8 * (*(void *)(a1 + 88) & 0x1FFLL));
    }
    while (sub_100B9A53C(a1));
  }
  else
  {
    char v6 = 0;
    char v7 = 0;
  }
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 128);
  *(unsigned char *)(a2 + 8) = v7;
  long long v8 = v14[0];
  *(_OWORD *)(a2 + 9) = v13;
  *(_OWORD *)(a2 + 25) = v8;
  double result = *(double *)((char *)v14 + 15);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)((char *)v14 + 15);
  *(unsigned char *)(a2 + 56) = v6;
  return result;
}

BOOL sub_100B9A778(uint64_t a1)
{
  sub_100B9B044(a1);
  uint64_t v2 = *(void *)(a1 + 176);
  if (!v2) {
    return 0;
  }
  double v3 = *(double *)(*(void *)(*(void *)(a1 + 144)
                             + (((unint64_t)(v2 + *(void *)(a1 + 168) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * ((v2 + *(void *)(a1 + 168) - 1) & 0x1FF));
  if (v3 <= -39.9287987)
  {
    uint64_t v8 = *(void *)(a1 + 120);
    *(void *)(a1 + 104) = v8;
    *(void *)(a1 + 112) = v8;
    sub_1001A34E0(a1 + 8, 0, (uint64_t)buf);
    return 0;
  }
  if (v3 < 39.9287987)
  {
    if (*(double *)(a1 + 120) - *(double *)(a1 + 112) >= 300.0)
    {
      int v4 = *(unsigned __int8 *)(a1 + 24);
      sub_100B9AC94((void *)a1);
      sub_1001A34E0(a1 + 8, 4, (uint64_t)&v15);
      if (qword_102419180 != -1) {
        dispatch_once(&qword_102419180, &stru_1022E9298);
      }
      __n128 v5 = qword_102419188;
      if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *(unsigned __int8 *)(a1 + 24);
        *(_DWORD *)uint64_t buf = 67109632;
        int v23 = v4;
        __int16 v24 = 1024;
        int v25 = 4;
        __int16 v26 = 1024;
        int v27 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "State from, %d, event, %d, to, %d", buf, 0x14u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419180 != -1) {
        dispatch_once(&qword_102419180, &stru_1022E9298);
      }
      int v7 = *(unsigned __int8 *)(a1 + 24);
      int v16 = 67109632;
      int v17 = v4;
      __int16 v18 = 1024;
      int v19 = 4;
      __int16 v20 = 1024;
      int v21 = v7;
LABEL_26:
      long long v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSkiController::processInputsAndTransition()", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
      return 1;
    }
    return 0;
  }
  BOOL result = sub_100B9B364((void *)a1);
  if (result)
  {
    int v10 = *(unsigned __int8 *)(a1 + 24);
    sub_100B9AC94((void *)a1);
    sub_1001A34E0(a1 + 8, 3, (uint64_t)&v15);
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_1022E9298);
    }
    uint64_t v11 = qword_102419188;
    if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *(unsigned __int8 *)(a1 + 24);
      *(_DWORD *)uint64_t buf = 67109632;
      int v23 = v10;
      __int16 v24 = 1024;
      int v25 = 3;
      __int16 v26 = 1024;
      int v27 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "State from, %d, event, %d, to, %d", buf, 0x14u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_1022E9298);
    }
    int v13 = *(unsigned __int8 *)(a1 + 24);
    int v16 = 67109632;
    int v17 = v10;
    __int16 v18 = 1024;
    int v19 = 3;
    __int16 v20 = 1024;
    int v21 = v13;
    goto LABEL_26;
  }
  return result;
}

void sub_100B9AB58(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  if ((*(unsigned int (**)(void, unsigned char *))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), v7)) {
    sub_10140A130(a1 + 504, (uint64_t)v7);
  }
  if ((*(unsigned int (**)(void, uint64_t *, double))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), v6, a3))
  {
    sub_10140A424(a1 + 504, v6);
  }
  sub_1014092F8(a1 + 504, a2);
}

uint64_t sub_100B9AC20(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

uint64_t sub_100B9AC50(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

void sub_100B9AC80(uint64_t a1, unsigned __int8 *a2)
{
}

uint64_t sub_100B9AC94(void *a1)
{
  sub_10048B72C((uint64_t)v13);
  uint64_t v2 = a1[18];
  if (a1[19] != v2)
  {
    unint64_t v3 = a1[21];
    int v4 = (void *)(v2 + 8 * (v3 >> 9));
    uint64_t v5 = *v4 + 8 * (v3 & 0x1FF);
    uint64_t v6 = *(void *)(v2 + (((a1[22] + v3) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[22] + v3) & 0x1FF);
    while (v5 != v6)
    {
      sub_100132EFC(v13, (uint64_t)", ", 2);
      std::ostream::operator<<();
      v5 += 8;
      if (v5 - *v4 == 4096)
      {
        uint64_t v7 = v4[1];
        ++v4;
        uint64_t v5 = v7;
      }
    }
  }
  if (qword_102419180 != -1) {
    dispatch_once(&qword_102419180, &stru_1022E9298);
  }
  uint64_t v8 = qword_102419188;
  if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str();
    unint64_t v9 = v20 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uint64_t buf = 136315138;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "ElevationBuffer%s", buf, 0xCu);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_1022E9298);
    }
    std::stringbuf::str();
    if (v16 >= 0) {
      uint64_t v11 = buf;
    }
    else {
      uint64_t v11 = *(unsigned char **)buf;
    }
    int v17 = 136315138;
    __int16 v18 = v11;
    int v12 = (char *)_os_log_send_and_compose_impl();
    if (v16 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiController::logElevationRateBuffer()", "%s\n", v12);
    if (v12 != (char *)__p) {
      free(v12);
    }
  }
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_100B9B018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10048B8C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100B9B044(uint64_t a1)
{
  if ((*(unsigned int (**)(void, long long *, double))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), &v20, *(double *)(a1 + 120)))
  {
    uint64_t v2 = (_OWORD *)(a1 + 184);
    double v3 = *(double *)(a1 + 192);
    if (v3 == 2.22507386e-308)
    {
      long long v4 = v21;
      *uint64_t v2 = v20;
      *(_OWORD *)(a1 + 200) = v4;
      long long v5 = v23;
      *(_OWORD *)(a1 + 216) = v22;
      *(_OWORD *)(a1 + 232) = v5;
      return;
    }
    double v6 = *((double *)&v20 + 1) - v3;
    if (v6 <= 6.0)
    {
      if (v6 > 4.0)
      {
        double v19 = ((double)(v21 - *(_DWORD *)(a1 + 200))
             - (double)(DWORD1(v21) - *(_DWORD *)(a1 + 204)))
            / v6;
        sub_10017CCF0((void *)(a1 + 136), &v19);
        long long v12 = v21;
        *uint64_t v2 = v20;
        *(_OWORD *)(a1 + 200) = v12;
        long long v13 = v23;
        *(_OWORD *)(a1 + 216) = v22;
        *(_OWORD *)(a1 + 232) = v13;
        if (qword_102419180 != -1) {
          dispatch_once(&qword_102419180, &stru_1022E9298);
        }
        char v14 = qword_102419188;
        if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 134217984;
          double v27 = v19;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "adding ElevationRate, %f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419180 != -1) {
            dispatch_once(&qword_102419180, &stru_1022E9298);
          }
          int v24 = 134217984;
          double v25 = v19;
          char v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiController::updateElevationRateBuffer()", "%s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
      }
      goto LABEL_23;
    }
    uint64_t v7 = *(void ***)(a1 + 144);
    uint64_t v8 = *(void *)(a1 + 152);
    *(void *)(a1 + 176) = 0;
    unint64_t v9 = v8 - (void)v7;
    if (v9 >= 0x11)
    {
      do
      {
        operator delete(*v7);
        uint64_t v10 = *(void *)(a1 + 152);
        uint64_t v7 = (void **)(*(void *)(a1 + 144) + 8);
        *(void *)(a1 + 144) = v7;
        unint64_t v9 = v10 - (void)v7;
      }
      while (v9 > 0x10);
    }
    if (v9 >> 3 == 1)
    {
      uint64_t v11 = 256;
    }
    else
    {
      if (v9 >> 3 != 2)
      {
LABEL_22:
        long long v16 = v21;
        *uint64_t v2 = v20;
        *(_OWORD *)(a1 + 200) = v16;
        long long v17 = v23;
        *(_OWORD *)(a1 + 216) = v22;
        *(_OWORD *)(a1 + 232) = v17;
        goto LABEL_23;
      }
      uint64_t v11 = 512;
    }
    *(void *)(a1 + 168) = v11;
    goto LABEL_22;
  }
LABEL_23:
  unint64_t v18 = *(void *)(a1 + 176);
  if (v18 >= 0xA)
  {
    do
    {
      *(void *)(a1 + 176) = v18 - 1;
      ++*(void *)(a1 + 168);
      sub_10007F07C(a1 + 136, 1);
      unint64_t v18 = *(void *)(a1 + 176);
    }
    while (v18 > 9);
  }
}

BOOL sub_100B9B364(void *a1)
{
  unint64_t v1 = a1[22];
  if (v1 < 9) {
    return 0;
  }
  uint64_t v2 = a1[18];
  if (a1[19] == v2) {
    return 0;
  }
  unint64_t v3 = a1[21];
  long long v4 = (double **)(v2 + 8 * (v3 >> 9));
  long long v5 = *v4;
  double v6 = &(*v4)[v3 & 0x1FF];
  uint64_t v7 = *(void *)(v2 + (((v3 + v1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v3 + v1) & 0x1FF);
  if (v6 == (double *)v7) {
    return 0;
  }
  unsigned int v8 = 0;
  do
  {
    double v9 = *v6++;
    if (v9 >= 39.9287987) {
      ++v8;
    }
    if ((char *)v6 - (char *)v5 == 4096)
    {
      uint64_t v10 = v4[1];
      ++v4;
      long long v5 = v10;
      double v6 = v10;
    }
  }
  while (v6 != (double *)v7);
  return v8 > 4;
}

void sub_100B9B3FC(id a1)
{
  qword_102419188 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Skiing");
}

uint64_t sub_100B9B42C(uint64_t a1)
{
  *(void *)a1 = &off_1022E9360;
  free(*(void **)(a1 + 8));
  sub_1006AAD08((void *)(a1 + 24));
  return a1;
}

void sub_100B9B47C(uint64_t a1)
{
  *(void *)a1 = &off_1022E9360;
  free(*(void **)(a1 + 8));
  sub_1006AAD08((void *)(a1 + 24));

  operator delete();
}

BOOL sub_100B9B4EC(uint64_t a1, double a2)
{
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4) {
    double v5 = *(double *)(*(void *)(*(void *)(a1 + 32) + 8 * ((v4 + *(void *)(a1 + 56) - 1) / 0x15uLL))
  }
                   + 192 * ((v4 + *(void *)(a1 + 56) - 1) % 0x15uLL));
  else {
    double v5 = -1.79769313e308;
  }
  if (v5 >= a2)
  {
    if (sub_100087C94(a1, (uint64_t)v11, v10, a2)) {
      return 1;
    }
    double v6 = (unsigned char *)(a1 + 80);
    goto LABEL_11;
  }
  double v6 = (unsigned char *)(a1 + 80);
  if (*(unsigned char *)(a1 + 80))
  {
    double v7 = *(double *)(a1 + 16);
    if (*(double *)(a1 + 72) - v7 < a2 && v7 + *(double *)(a1 + 88) > a2)
    {
      double v8 = *(double *)(a1 + 104);
      if (v8 - (*(double (**)(uint64_t, double))(*(void *)a1 + 56))(a1, a2) < a2) {
        return 0;
      }
    }
LABEL_11:
    if (*v6) {
      return 1;
    }
  }
  return *(unsigned char *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

void sub_100B9B64C(uint64_t a1)
{
  *(void *)a1 = &off_1022E9360;
  free(*(void **)(a1 + 8));
  sub_1006AAD08((void *)(a1 + 24));

  operator delete();
}

void sub_100B9B6BC(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100B9B6EC()
{
  sub_10010F274((uint64_t)v8);
  uint64_t v0 = sub_100132EFC(v9, (uint64_t)", ll, ", 6);
  uint64_t v1 = *v0;
  *(uint64_t *)((char *)v0 + *(void *)(*v0 - 24) + 24) = 12;
  *(uint64_t *)((char *)v0 + *(void *)(v1 - 24) + 16) = 8;
  *(_DWORD *)((char *)v0 + *(void *)(v1 - 24) + 8) = *(_DWORD *)((unsigned char *)v0 + *(void *)(v1 - 24) + 8) & 0xFFFFFEFB | 4;
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = sub_100132EFC(v2, (uint64_t)", ", 2);
  uint64_t v4 = *v3;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + 24) = 12;
  *(uint64_t *)((char *)v3 + *(void *)(v4 - 24) + 16) = 8;
  *(_DWORD *)((char *)v3 + *(void *)(v4 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v4 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  sub_100132EFC(v9, (uint64_t)", hAcc, ", 8);
  uint64_t v5 = v8[0];
  *(void *)((char *)&v8[2] + *(void *)(v8[0] - 24)) = 2;
  *(_DWORD *)((char *)&v8[1] + *(void *)(v5 - 24)) |= 4u;
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v8
  v9[0] = v6;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100B9B9F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100B9BA88()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D82844;
      v0[3] = unk_101D82854;
      v0[4] = xmmword_101D82864;
      v0[0] = xmmword_101D82824;
      v0[1] = unk_101D82834;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_100B9BB68(_Unwind_Exception *a1)
{
}

double sub_100B9BB80@<D0>(uint64_t a1@<X0>, float *a2@<X1>, float32x4_t *a3@<X8>, float32x4_t a4@<Q0>)
{
  float v4 = *(float *)(a1 + 8);
  a4.i32[0] = *(_DWORD *)(a1 + 12);
  float v5 = a2[1];
  float v6 = *(float *)(a1 + 4);
  float v7 = a2[2];
  float v8 = a2[3];
  float32_t v9 = (float)((float)((float)(v4 * v5) + (float)(a4.f32[0] * *a2)) - (float)(v6 * v7)) + (float)(*(float *)a1 * v8);
  float32_t v10 = (float)((float)((float)(a4.f32[0] * v5) - (float)(v4 * *a2)) + (float)(*(float *)a1 * v7)) + (float)(v6 * v8);
  float32_t v11 = (float)((float)((float)(v6 * *a2) - (float)(*(float *)a1 * v5)) + (float)(a4.f32[0] * v7)) + (float)(v4 * v8);
  float v12 = (float)((float)-(float)(v6 * v5) - (float)(*(float *)a1 * *a2)) - (float)(v4 * v7);
  a3->f32[0] = v9;
  a3->f32[1] = v10;
  a4.f32[0] = v12 + (float)(a4.f32[0] * v8);
  a3->f32[2] = v11;
  a3->i32[3] = a4.i32[0];
  *(void *)&double result = sub_100B9BEAC(a3, a4).u64[0];
  return result;
}

double sub_100B9BBE0@<D0>(float32x2_t *a1@<X0>, float32x4_t *a2@<X8>, float32x4_t a3@<Q0>)
{
  __int32 v3 = a1[1].i32[1];
  a3.f32[0] = -a1[1].f32[0];
  *(float32x2_t *)a2->f32 = vneg_f32(*a1);
  a2->i32[2] = a3.i32[0];
  a2->i32[3] = v3;
  *(void *)&double result = sub_100B9BEAC(a2, a3).u64[0];
  return result;
}

float sub_100B9BC00(float *a1)
{
  uint64_t v1 = 0;
  float v2 = a1[2];
  float v3 = a1[3];
  float v4 = a1[1];
  float result = (float)((float)(v3 * v4) - (float)(*a1 * v2)) + (float)((float)(v3 * v4) - (float)(*a1 * v2));
  float v6 = (float)-(float)(v3 * *a1) - (float)(v4 * v2);
  float v7 = (float)((float)((float)(v4 * v4) + (float)(*a1 * *a1)) * 2.0) + -1.0;
  *(float *)float32_t v11 = result;
  *(float *)&v11[1] = v6 + v6;
  *(float *)&_OWORD v11[2] = v7;
  float v8 = 0.0;
  do
  {
    float v8 = v8 + (float)(*(float *)&v11[v1] * *(float *)&v11[v1]);
    ++v1;
  }
  while (v1 != 3);
  if (sqrtf(v8) > 0.00000011921)
  {
    uint64_t v9 = 0;
    float v10 = 0.0;
    do
    {
      float v10 = v10 + (float)(*(float *)&v11[v9] * *(float *)&v11[v9]);
      ++v9;
    }
    while (v9 != 3);
    return result / sqrtf(v10);
  }
  return result;
}

float sub_100B9BCB0(float *a1)
{
  uint64_t v1 = 0;
  float v2 = a1[1];
  float v4 = a1[2];
  float v3 = a1[3];
  float result = (float)((float)((float)(*a1 * *a1) + (float)(v3 * v3)) * 2.0) + -1.0;
  float v6 = (float)((float)(*a1 * v2) - (float)(v3 * v4)) + (float)((float)(*a1 * v2) - (float)(v3 * v4));
  float v7 = (float)((float)(v3 * v2) + (float)(*a1 * v4)) + (float)((float)(v3 * v2) + (float)(*a1 * v4));
  v11[0] = result;
  v11[1] = v6;
  _OWORD v11[2] = v7;
  float v8 = 0.0;
  do
  {
    float v8 = v8 + (float)(v11[v1] * v11[v1]);
    ++v1;
  }
  while (v1 != 3);
  if (sqrtf(v8) > 0.00000011921)
  {
    uint64_t v9 = 0;
    float v10 = 0.0;
    do
    {
      float v10 = v10 + (float)(v11[v9] * v11[v9]);
      ++v9;
    }
    while (v9 != 3);
    return result / sqrtf(v10);
  }
  return result;
}

float sub_100B9BD60@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  return sub_100B9CE88(a1, a2, 1.0);
}

void sub_100B9BD68(float *a1, uint64_t a2)
{
  sub_100B9CE88(a1, v5, -1.0);
  *(float *)a2 = sub_1004E301C((uint64_t)v5, (float *)a2);
  *(_DWORD *)(a2 + 4) = v3;
  *(_DWORD *)(a2 + 8) = v4;
}

float sub_100B9BDB0@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  return sub_100B9CE88(a1, a2, -1.0);
}

float sub_100B9BDB8(float *a1, float a2, float a3, float a4)
{
  v5[0] = a2;
  v5[1] = a3;
  v5[2] = a4;
  sub_100B9CE88(a1, v6, -1.0);
  return sub_1004E301C((uint64_t)v6, v5);
}

double sub_100B9BDF4(float32x4_t *a1, float *a2)
{
  uint64_t v4 = 0;
  float v5 = 0.0;
  do
  {
    float v5 = v5 + (float)(a2[v4] * a2[v4]);
    ++v4;
  }
  while (v4 != 3);
  float v6 = sqrtf(v5);
  float v7 = 0.5;
  float v8 = v6 * 0.5;
  if ((float)(v6 * 0.5) > 0.0) {
    float v7 = (float)(sinf(v6 * 0.5) / v8) * 0.5;
  }
  a1->f32[0] = v7 * *a2;
  a1->f32[1] = v7 * a2[1];
  a1->f32[2] = v7 * a2[2];
  v9.f32[0] = cosf(v8);
  a1->i32[3] = v9.i32[0];

  *(void *)&double result = sub_100B9BEAC(a1, v9).u64[0];
  return result;
}

float32x4_t sub_100B9BEAC(float32x4_t *a1, float32x4_t result)
{
  result.f32[0] = sqrtf((float)((float)((float)(a1->f32[1] * a1->f32[1]) + (float)(a1->f32[0] * a1->f32[0]))+ (float)(a1->f32[2] * a1->f32[2]))+ (float)(a1->f32[3] * a1->f32[3]));
  float v2 = result.f32[0] + -1.0;
  if ((float)(result.f32[0] + -1.0) <= 0.0) {
    float v2 = -(float)(result.f32[0] + -1.0);
  }
  if (v2 >= 0.00000011921)
  {
    if (result.f32[0] == 0.0)
    {
      a1->i64[0] = 0;
      a1->i64[1] = 0x3F80000000000000;
    }
    else
    {
      double result = vdivq_f32(*a1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)result.f32, 0));
      *a1 = result;
    }
  }
  return result;
}

BOOL sub_100B9BF10(float *a1, float32x4_t *a2, uint64_t a3, float a4, float a5, float a6, float a7, float a8, float a9, double a10, double a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, float a18)
{
  float v169 = a4;
  float v170 = a5;
  float v171 = a6;
  float v166 = a7;
  float v167 = a8;
  float v168 = a9;
  unint64_t v164 = a17;
  float v165 = a18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024804A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024804A0))
  {
    dword_102480498 = 1043452116;
    __cxa_guard_release(&qword_1024804A0);
  }
  uint64_t v19 = 0;
  float v20 = 0.0;
  do
  {
    float v20 = v20 + (float)(*(float *)((char *)&v169 + v19) * *(float *)((char *)&v169 + v19));
    v19 += 4;
  }
  while (v19 != 12);
  if (sqrtf(v20) == 0.0) {
    return 0;
  }
  uint64_t v21 = 0;
  float v22 = 0.0;
  do
  {
    float v22 = v22 + (float)(*(float *)((char *)&v166 + v21) * *(float *)((char *)&v166 + v21));
    v21 += 4;
  }
  while (v21 != 12);
  if (sqrtf(v22) == 0.0) {
    return 0;
  }
  uint64_t v23 = 0;
  float v24 = v169;
  float v25 = v170;
  float v26 = v171;
  *(float *)uint64_t buf = v169;
  *(float *)&uint8_t buf[4] = v170;
  *(float *)&uint8_t buf[8] = v171;
  float v27 = 0.0;
  do
  {
    float v27 = v27 + (float)(*(float *)&buf[v23] * *(float *)&buf[v23]);
    v23 += 4;
  }
  while (v23 != 12);
  if (sqrtf(v27) > 0.00000011921)
  {
    uint64_t v28 = 0;
    float v29 = 0.0;
    do
    {
      float v29 = v29 + (float)(*(float *)&buf[v28] * *(float *)&buf[v28]);
      v28 += 4;
    }
    while (v28 != 12);
    float v30 = sqrtf(v29);
    float v24 = v169 / v30;
    float v25 = v170 / v30;
    float v26 = v171 / v30;
  }
  uint64_t v31 = 0;
  float v169 = v24;
  float v170 = v25;
  float v171 = v26;
  float v32 = v166;
  float v33 = v167;
  float v34 = v168;
  *(float *)uint64_t buf = v166;
  *(float *)&uint8_t buf[4] = v167;
  *(float *)&uint8_t buf[8] = v168;
  float v35 = 0.0;
  do
  {
    float v35 = v35 + (float)(*(float *)&buf[v31] * *(float *)&buf[v31]);
    v31 += 4;
  }
  while (v31 != 12);
  if (sqrtf(v35) > 0.00000011921)
  {
    uint64_t v36 = 0;
    float v37 = 0.0;
    do
    {
      float v37 = v37 + (float)(*(float *)&buf[v36] * *(float *)&buf[v36]);
      v36 += 4;
    }
    while (v36 != 12);
    float v38 = sqrtf(v37);
    float v32 = v166 / v38;
    float v33 = v167 / v38;
    float v34 = v168 / v38;
  }
  uint64_t v39 = 0;
  float v166 = v32;
  float v167 = v33;
  float v168 = v34;
  float v40 = (float)(v25 * v34) - (float)(v26 * v33);
  float v41 = (float)(v26 * v32) - (float)(v24 * v34);
  float v42 = (float)(v24 * v33) - (float)(v25 * v32);
  float v161 = v40;
  float v162 = v41;
  float v163 = v42;
  float v43 = 0.0;
  do
  {
    float v43 = v43 + (float)(*(float *)((char *)&v161 + v39) * *(float *)((char *)&v161 + v39));
    v39 += 4;
  }
  while (v39 != 12);
  float v44 = sqrtf(v43);
  if (v44 < *(float *)&dword_102480498)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022E9438);
    }
    long long v45 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      *(double *)&uint8_t buf[4] = v44;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "n and g are too close %f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022E9438);
      }
      LODWORD(v172) = 134217984;
      *(double *)((char *)&v172 + 4) = v44;
      v107 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CMOQuaternion::northAndGravity(CMVector<float, 3>, CMVector<float, 3>, CMVector<float, 3>, const float *, CMOQuaternion &, CMMatrix<float, 3> &)", "%s\n", v107);
      if (v107 != (char *)buf) {
        free(v107);
      }
    }
    return 0;
  }
  uint64_t v48 = 0;
  float v49 = v40 / v44;
  float v50 = v41 / v44;
  float v161 = v40 / v44;
  float v162 = v41 / v44;
  float v51 = v42 / v44;
  float v163 = v42 / v44;
  float v53 = *((float *)&v164 + 1);
  LODWORD(v52) = v164;
  float v54 = v165;
  *(void *)uint64_t buf = v164;
  *(float *)&uint8_t buf[8] = v165;
  float v55 = 0.0;
  do
  {
    float v55 = v55 + (float)(*(float *)&buf[v48] * *(float *)&buf[v48]);
    v48 += 4;
  }
  while (v48 != 12);
  if (sqrtf(v55) > 0.00000011921)
  {
    uint64_t v56 = 0;
    float v57 = 0.0;
    do
    {
      float v57 = v57 + (float)(*(float *)&buf[v56] * *(float *)&buf[v56]);
      v56 += 4;
    }
    while (v56 != 12);
    float v58 = sqrtf(v57);
    float v52 = *(float *)&v164 / v58;
    float v53 = *((float *)&v164 + 1) / v58;
    float v54 = v165 / v58;
  }
  uint64_t v59 = 0;
  unint64_t v164 = __PAIR64__(LODWORD(v53), LODWORD(v52));
  float v165 = v54;
  unint64_t v159 = 0;
  float v160 = -1.0;
  float v60 = (float)(v54 * -0.0) - v53;
  float v61 = 0.0;
  float v62 = v52 + (float)(v54 * 0.0);
  float v63 = (float)(v53 * -0.0) + (float)(v52 * 0.0);
  *(float *)uint64_t buf = v60;
  *(float *)&uint8_t buf[4] = v62;
  *(float *)&uint8_t buf[8] = v63;
  do
  {
    float v61 = v61 + (float)(*(float *)&buf[v59] * *(float *)&buf[v59]);
    v59 += 4;
  }
  while (v59 != 12);
  if (sqrtf(v61) > 0.00000011921)
  {
    uint64_t v64 = 0;
    float v65 = 0.0;
    do
    {
      float v65 = v65 + (float)(*(float *)&buf[v64] * *(float *)&buf[v64]);
      v64 += 4;
    }
    while (v64 != 12);
    float v66 = sqrtf(v65);
    float v60 = v60 / v66;
    float v62 = v62 / v66;
    float v63 = v63 / v66;
  }
  uint64_t v67 = 0;
  *(float *)v158 = v60;
  *(float *)&v158[1] = v62;
  *(float *)&v158[2] = v63;
  float v68 = (float)(v33 * v51) - (float)(v34 * v50);
  float v69 = (float)(v34 * v49) - (float)(v32 * v51);
  float v70 = (float)(v32 * v50) - (float)(v33 * v49);
  *(float *)uint64_t buf = v68;
  *(float *)&uint8_t buf[4] = v69;
  *(float *)&uint8_t buf[8] = v70;
  float v71 = 0.0;
  do
  {
    float v71 = v71 + (float)(*(float *)&buf[v67] * *(float *)&buf[v67]);
    v67 += 4;
  }
  while (v67 != 12);
  if (sqrtf(v71) > 0.00000011921)
  {
    uint64_t v72 = 0;
    float v73 = 0.0;
    do
    {
      float v73 = v73 + (float)(*(float *)&buf[v72] * *(float *)&buf[v72]);
      v72 += 4;
    }
    while (v72 != 12);
    float v74 = sqrtf(v73);
    float v68 = v68 / v74;
    float v69 = v69 / v74;
    float v70 = v70 / v74;
  }
  float v169 = v68;
  float v170 = v69;
  float v171 = v70;
  sub_100B9CC38((uint64_t)&v169, (uint64_t)&v164, (uint64_t)&v172);
  sub_100B9CC38((uint64_t)&v166, (uint64_t)&v159, (uint64_t)&v155);
  sub_100B9CC38((uint64_t)&v161, (uint64_t)v158, (uint64_t)v153);
  float v75 = (float)((float)(a1[1] * a1[1]) + (float)(*a1 * *a1)) + (float)((float)(*a1 + *a1) * a1[1]);
  if (v75 == 0.0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022E9438);
    }
    v108 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_FAULT, "Assertion failed: lambda2 != 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMOQuaternion.cpp, line 208,invalid weights.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022E9438);
      }
      LOWORD(v151[0]) = 0;
      v109 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CMOQuaternion::northAndGravity(CMVector<float, 3>, CMVector<float, 3>, CMVector<float, 3>, const float *, CMOQuaternion &, CMMatrix<float, 3> &)", "%s\n", v109);
      if (v109 != (char *)buf) {
        free(v109);
      }
    }
  }
  v151[0] = v153[0];
  v151[1] = v153[1];
  int v152 = v154;
  float v76 = *a1;
  long long v145 = v172;
  long long v146 = v173;
  int v147 = v174;
  int v133 = 0;
  float v77 = sqrtf(v75);
  float v134 = v171;
  float v135 = -v170;
  float v136 = -v171;
  int v137 = 0;
  float v138 = v169;
  float v139 = v170;
  float v140 = -v169;
  int v141 = 0;
  sub_100B5D33C((uint64_t)&v133, (uint64_t)v153, (uint64_t)v142);
  int v125 = 0;
  float v126 = v165;
  float v127 = -*((float *)&v164 + 1);
  float v128 = -v165;
  int v129 = 0;
  unint64_t v130 = v164;
  float v131 = -*(float *)&v164;
  int v132 = 0;
  sub_100B5D33C((uint64_t)v142, (uint64_t)&v125, (uint64_t)v143);
  for (unint64_t i = 0; i != 9; ++i)
    *((float *)&v145 + i) = *((float *)&v145 + i) - sub_10080FD50((uint64_t)v143, i);
  uint64_t v79 = 0;
  float v80 = 1.0 / v77;
  long long v148 = v145;
  long long v149 = v146;
  int v150 = v147;
  do
  {
    *(float *)((char *)&v148 + v79) = (float)(v80 * v76) * *(float *)((char *)&v148 + v79);
    v79 += 4;
  }
  while (v79 != 36);
  unint64_t v81 = 0;
  *(_OWORD *)uint64_t buf = v148;
  long long v176 = v149;
  int v177 = v150;
  do
  {
    *((float *)v151 + v81) = sub_10080FD50((uint64_t)buf, v81) + *((float *)v151 + v81);
    ++v81;
  }
  while (v81 != 9);
  float v82 = a1[1];
  long long v119 = v155;
  long long v120 = v156;
  int v121 = v157;
  int v133 = 0;
  float v134 = v168;
  float v135 = -v167;
  float v136 = -v168;
  int v137 = 0;
  float v138 = v166;
  float v139 = v167;
  float v140 = -v166;
  int v141 = 0;
  sub_100B5D33C((uint64_t)&v133, (uint64_t)v153, (uint64_t)v142);
  int v125 = 0;
  float v126 = v160;
  float v127 = -*((float *)&v159 + 1);
  float v128 = -v160;
  int v129 = 0;
  unint64_t v130 = v159;
  float v131 = -*(float *)&v159;
  int v132 = 0;
  sub_100B5D33C((uint64_t)v142, (uint64_t)&v125, (uint64_t)v143);
  for (unint64_t j = 0; j != 9; ++j)
    *((float *)&v119 + j) = *((float *)&v119 + j) - sub_10080FD50((uint64_t)v143, j);
  uint64_t v84 = 0;
  long long v122 = v119;
  long long v123 = v120;
  int v124 = v121;
  do
  {
    *(float *)((char *)&v122 + v84) = (float)(v80 * v82) * *(float *)((char *)&v122 + v84);
    v84 += 4;
  }
  while (v84 != 36);
  unint64_t v85 = 0;
  *(_OWORD *)uint64_t buf = v122;
  long long v176 = v123;
  int v177 = v124;
  do
  {
    v86.f32[0] = sub_10080FD50((uint64_t)buf, v85) + *((float *)v151 + v85);
    *((_DWORD *)v151 + v85++) = v86.i32[0];
  }
  while (v85 != 9);
  sub_100B9CCCC(a2, (float *)v151, v86);
  uint64_t v87 = 0;
  float v88 = *a1;
  long long v113 = v172;
  long long v114 = v173;
  int v115 = v174;
  do
  {
    *(float *)((char *)&v113 + v87) = v88 * *(float *)((char *)&v113 + v87);
    v87 += 4;
  }
  while (v87 != 36);
  uint64_t v89 = 0;
  int v118 = v115;
  long long v116 = v113;
  long long v117 = v114;
  float v90 = a1[1];
  int v112 = v157;
  long long v110 = v155;
  long long v111 = v156;
  do
  {
    *(float *)((char *)&v110 + v89) = v90 * *(float *)((char *)&v110 + v89);
    v89 += 4;
  }
  while (v89 != 36);
  unint64_t v91 = 0;
  *(_OWORD *)uint64_t buf = v110;
  long long v176 = v111;
  int v177 = v112;
  do
  {
    *((float *)&v116 + v91) = sub_10080FD50((uint64_t)buf, v91) + *((float *)&v116 + v91);
    ++v91;
  }
  while (v91 != 9);
  uint64_t v92 = 0;
  v143[0] = v116;
  v143[1] = v117;
  int v144 = v118;
  float v93 = 0.0;
  do
  {
    float v93 = v93 + (float)(*(float *)((char *)v143 + v92) * *(float *)((char *)v143 + v92));
    v92 += 4;
  }
  while (v92 != 36);
  float v94 = sqrtf(v93);
  float v95 = (float)(v75 - (float)(v94 * v94)) * 0.5;
  BOOL v46 = v95 != 0.0;
  if (v95 == 0.0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022E9438);
    }
    v105 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEBUG, "kappa zero!", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022E9438);
      }
      v142[0] = 0;
      v106 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CMOQuaternion::northAndGravity(CMVector<float, 3>, CMVector<float, 3>, CMVector<float, 3>, const float *, CMOQuaternion &, CMMatrix<float, 3> &)", "%s\n", v106);
      if (v106 != (char *)buf) {
        free(v106);
      }
    }
  }
  else
  {
    unint64_t v96 = 0;
    float v97 = v80 * (float)(1.0 / v95);
    do
    {
      for (unint64_t k = 0; k != 3; ++k)
      {
        unint64_t v99 = 0;
        *(_DWORD *)sub_1004E45A0(a3, v96, k) = 0;
        do
        {
          float v100 = sub_1004E4240((uint64_t)v143, v96, v99);
          float v101 = sub_1004E4240((uint64_t)v143, k, v99);
          __int16 v102 = (float *)sub_1004E45A0(a3, v96, k);
          *__int16 v102 = *v102 + (float)(v100 * v101);
          ++v99;
        }
        while (v99 != 3);
        uint64_t v103 = (float *)sub_1004E45A0(a3, v96, k);
        *uint64_t v103 = v97 * *v103;
      }
      v104 = (float *)sub_1004E45A0(a3, v96, v96);
      float *v104 = v80 + *v104;
      ++v96;
    }
    while (v96 != 3);
  }
  return v46;
}

float *sub_100B9CC38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  for (unint64_t i = 0; i != 3; ++i)
  {
    for (unint64_t j = 0; j != 3; ++j)
    {
      float v8 = sub_1004E30E4(a1, i);
      float v9 = v8 * sub_1004E30E4(a2, j);
      double result = (float *)sub_1004E45A0(a3, i, j);
      *double result = v9;
    }
  }
  return result;
}

double sub_100B9CCCC(float32x4_t *a1, float *a2, float32x4_t a3)
{
  float v3 = *a2;
  float v4 = a2[4];
  float v5 = a2[8];
  float v6 = (float)(*a2 + v4) + v5;
  if (v6 <= 0.0)
  {
    if (v3 > v4)
    {
      BOOL v8 = v3 == v5;
      BOOL v9 = v3 < v5;
    }
    else
    {
      BOOL v8 = 1;
      BOOL v9 = 0;
    }
    if (v9 || v8)
    {
      if (v4 <= v5)
      {
        float v15 = (float)((float)((float)-v3 - v4) + v5) + 1.0;
        float v16 = 0.5 / sqrtf(v15);
        a1->f32[2] = v15 * v16;
        a1->f32[3] = v16 * (float)(a2[3] - a2[1]);
        a1->f32[0] = v16 * (float)(a2[2] + a2[6]);
        a3.f32[0] = v16 * (float)(a2[7] + a2[5]);
        a1->i32[1] = a3.i32[0];
      }
      else
      {
        float v10 = (float)((float)(v4 - v3) - v5) + 1.0;
        float v11 = 0.5 / sqrtf(v10);
        a1->f32[1] = v10 * v11;
        a1->f32[0] = v11 * (float)(a2[3] + a2[1]);
        a1->f32[3] = v11 * (float)(a2[2] - a2[6]);
        a3.f32[0] = v11 * (float)(a2[7] + a2[5]);
        a1->i32[2] = a3.i32[0];
      }
    }
    else
    {
      float v13 = (float)((float)(v3 - v4) - v5) + 1.0;
      float v14 = 0.5 / sqrtf(v13);
      a1->f32[0] = v13 * v14;
      a1->f32[1] = v14 * (float)(a2[3] + a2[1]);
      a1->f32[2] = v14 * (float)(a2[2] + a2[6]);
      a3.f32[0] = v14 * (float)(a2[7] - a2[5]);
      a1->i32[3] = a3.i32[0];
    }
  }
  else
  {
    float v7 = 0.5 / sqrtf(v6 + 1.0);
    a1->f32[3] = (float)(v6 + 1.0) * v7;
    a1->f32[2] = v7 * (float)(a2[3] - a2[1]);
    a1->f32[1] = v7 * (float)(a2[2] - a2[6]);
    a3.f32[0] = v7 * (float)(a2[7] - a2[5]);
    a1->i32[0] = a3.i32[0];
  }
  *(void *)&double result = sub_100B9BEAC(a1, a3).u64[0];
  return result;
}

float sub_100B9CE88@<S0>(float *a1@<X0>, float *a2@<X8>, float a3@<S0>)
{
  float v4 = a1[2];
  float v3 = a1[3];
  float v5 = v3 + v3;
  float v6 = *a1;
  float v7 = a1[1];
  float v8 = v7 + v7;
  float v9 = v3 * (float)(v3 + v3);
  float v10 = (float)((float)(v7 + v7) * v7) + -1.0;
  float v11 = (float)((float)(v4 + v4) * v4) + -1.0;
  float v12 = (float)(v6 + v6) * v7;
  float v13 = (float)(v6 + v6) * v4;
  float v14 = v3 * (float)(v6 + v6);
  float v15 = v8 * v4;
  float v16 = v3 * v8;
  float v17 = v5 * v4;
  float v18 = v9 + (float)((float)((float)(v6 + v6) * v6) + -1.0);
  float v19 = v12 - (float)(v17 * a3);
  float v20 = v13 + (float)(v16 * a3);
  float v21 = v12 + (float)(v17 * a3);
  float v22 = v9 + v10;
  float v23 = v15 - (float)(v14 * a3);
  float v24 = v13 - (float)(v16 * a3);
  float result = v15 + (float)(v14 * a3);
  *a2 = v18;
  a2[1] = v19;
  a2[2] = v20;
  a2[3] = v21;
  a2[4] = v22;
  a2[5] = v23;
  a2[6] = v24;
  a2[7] = result;
  a2[8] = v9 + v11;
  return result;
}

void sub_100B9CF08(float *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024804B0, memory_order_acquire) & 1) == 0)
  {
    float v17 = a1;
    int v16 = __cxa_guard_acquire(&qword_1024804B0);
    a1 = v17;
    if (v16)
    {
      dword_1024804A8 = 1043452116;
      __cxa_guard_release(&qword_1024804B0);
      a1 = v17;
    }
  }
  float v2 = sub_100B9BC00(a1);
  float v4 = v3;
  uint64_t v5 = 0;
  float v6 = sqrtf((float)(v3 * v3) + (float)(v2 * v2));
  float v7 = 1.0;
  if (v1 <= v6) {
    float v7 = -1.0;
  }
  uint64_t v20 = 0x3F80000000000000;
  int v21 = 0;
  float v8 = v1 * v7;
  float v9 = (float)(v1 * -0.0) + (float)(v4 * v7);
  float v10 = -(float)(v2 * v7);
  float v11 = 0.0;
  float v12 = v10 + (float)(v1 * 0.0);
  float v13 = (float)(v4 * -0.0) + (float)(v2 * 0.0);
  *(float *)float v19 = v9;
  *(float *)&v19[1] = v12;
  *(float *)&v19[2] = v13;
  do
  {
    float v11 = v11 + (float)(*(float *)&v19[v5] * *(float *)&v19[v5]);
    ++v5;
  }
  while (v5 != 3);
  float v14 = sqrtf(v11);
  if (v14 > *(float *)&dword_1024804A8)
  {
    float v15 = (float)-atan2f(v6, v8) / v14;
    v22[0] = v9 * v15;
    v22[1] = v15 * v12;
    void v22[2] = v15 * v13;
    sub_100B9BDF4(&v18, v22);
    sub_100B9CE88(v18.f32, v22, -1.0);
    sub_1004E301C((uint64_t)v22, (float *)&v20);
  }
}

float sub_100B9D07C(float *a1)
{
  sub_100B9CF08(a1);
  float v5 = sub_100B9BDB8(a1, v2, v3, v4);
  for (float result = atan2f(-v6, v5) * 57.296; result < 0.0; float result = result + 360.0)
    ;
  for (; result >= 360.0; float result = result + -360.0)
    ;
  return result;
}

void sub_100B9D10C(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void *sub_100B9D13C(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_100B9D25C((uint64_t)a1, "VO2MaxCloudKitSyncEngineMetadata", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_1022E9468;
  a1[9] = off_1022E9510;
  sub_100F03BA0(a1 + 42, 0, 0);
  sub_100F03BA0(a1 + 44, 0, 0);
  (*(void (**)(void *))(*a1 + 112))(a1);
  return a1;
}

void sub_100B9D230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9D25C(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  float v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 8));
  *float v12 = &off_1022B2C68;
  *(void *)a1 = off_1022E96A0;
  *(void *)(a1 + 72) = off_1022E9748;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_1022E96A0;
  *(void *)(a1 + 72) = off_1022E9748;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 224) = 0;
  *(int64x2_t *)(a1 + 232) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 12000;
  *(void *)(a1 + 264) = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 272));
  *(void *)(a1 + 272) = &off_1022B2C68;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_100B9D680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *float v27 = v30;
  sub_1003BE1F8(v31);
  sub_1002CDF4C(v29);
  sub_1011F8AE0(v28);
  *float v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_100B9D714()
{
}

void *sub_100B9D71C(void *a1)
{
  *a1 = off_1022E96A0;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_1022E9748;
  a1[33] = off_1022B2C20;
  sub_1003BE1F8(a1 + 34);
  sub_1002CDF4C(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022B2C20;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_100B9D7E0(uint64_t a1)
{
  return sub_100B9D71C((void *)(a1 - 72));
}

void sub_100B9D7E8(void *a1)
{
  sub_100B9D71C(a1);

  operator delete();
}

void sub_100B9D820(uint64_t a1)
{
  sub_100B9D71C((void *)(a1 - 72));

  operator delete();
}

uint64_t sub_100B9D85C(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"INSERT INTO VO2MaxCloudKitSyncEngineMetadata (startTime, lastUpdateTime, metadata) VALUES (?, ?, ?)");
  }
  return 0;
}

void sub_100B9D960(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9D978(uint64_t a1, uint64_t a2, sqlite3_int64 a3)
{
  uint64_t v5 = a1;
  if (!sub_100082064(a1 + 72)) {
    goto LABEL_11;
  }
  sub_100082068((void *)(v5 + 352), &v14);
  char v6 = (sqlite3_stmt *)sub_10014D19C(v14);
  if (sub_100055D58(v6, 1, *(double *)(a2 + 8))
    && (float v7 = (sqlite3_stmt *)sub_10014D19C(v14), sub_100055D58(v7, 2, *(double *)(a2 + 16)))
    && (float v8 = (sqlite3_stmt *)sub_10014D19C(v14), sub_100604C54(v8, 3, *(void **)(a2 + 24)))
    && (float v9 = (sqlite3_stmt *)sub_10014D19C(v14), sub_10014DBB4(v9, 4, a3)))
  {
    uint64_t v5 = *(void *)(v5 + 80);
    float v10 = (sqlite3_stmt *)sub_10014D19C(v14);
    LOBYTE(v5) = sub_10001FEB0(v5, v10);
    int v11 = 0;
  }
  else
  {
    int v11 = 1;
  }
  uint64_t v12 = v14;
  uint64_t v14 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  if (v11) {
LABEL_11:
  }
    LOBYTE(v5) = 0;
  return v5 & 1;
}

void sub_100B9DA8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9DAA8(uint64_t *a1)
{
  uint64_t result = sub_10014C3C0(a1[10]);
  if (result)
  {
    sub_100B9DB28((uint64_t)a1);
    sub_1005F7B0C(a1[10], "VO2MaxCloudKitSyncEngineMetadata", (const char **)&off_1022E95A0, (const std::string::value_type **)&off_102473070, 0);
    a1[42] = sub_100601D1C(a1[10], (uint64_t)"SELECT * FROM VO2MaxCloudKitSyncEngineMetadata ORDER BY id DESC LIMIT 1");
    a1[43] = v3;
    uint64_t result = sub_100601D1C(a1[10], (uint64_t)"UPDATE VO2MaxCloudKitSyncEngineMetadata SET startTime = ?, lastUpdateTime = ?, metadata = ? WHERE id = ?");
    a1[44] = result;
    a1[45] = v4;
  }
  return result;
}

uint64_t sub_100B9DB28(uint64_t a1)
{
  uint64_t result = sub_1005F93E4(*(void *)(a1 + 80), "VO2MaxCloudKitSyncEngineMetadata");
  if (result)
  {
    uint64_t v3 = "startTime";
    int v4 = 5;
    __int16 v5 = 0;
    char v6 = 0;
    char v7 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "VO2MaxCloudKitSyncEngineMetadata", (uint64_t)"startTime", (uint64_t)&v3);
  }
  return result;
}

void sub_100B9E020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a23);
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  sub_101A129A8((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void *sub_100B9E0C8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "VO2MaxCloudKitSyncEngineMetadata");
}

void *sub_100B9E0D8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "VO2MaxCloudKitSyncEngineMetadata");
}

uint64_t sub_100B9E0E8(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"INSERT INTO VO2MaxCloudKitSyncEngineMetadata (startTime, lastUpdateTime, metadata) VALUES (?, ?, ?)");
  }
  return result;
}

void sub_100B9E1CC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9E1E4(uint64_t a1, uint64_t a2)
{
  if (!sub_100082064(a1 + 72)) {
    return 2;
  }
  sub_100082068((void *)(a1 + 336), &v16);
  int v4 = (sqlite3_stmt *)sub_10014D19C(v16);
  int v5 = sqlite3_step(v4);
  if (v5 == 101)
  {
    uint64_t v13 = 1;
  }
  else if (v5 == 100)
  {
    char v6 = (sqlite3_stmt *)sub_10014D19C(v16);
    *(void *)a2 = sqlite3_column_int(v6, 0);
    char v7 = (sqlite3_stmt *)sub_10014D19C(v16);
    *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
    float v8 = (sqlite3_stmt *)sub_10014D19C(v16);
    *(double *)(a2 + 16) = sqlite3_column_double(v8, 2);
    float v9 = (sqlite3_stmt *)sub_10014D19C(v16);
    float v10 = sqlite3_column_blob(v9, 3);
    int v11 = (sqlite3_stmt *)sub_10014D19C(v16);
    id v12 = [objc_alloc((Class)NSData) initWithBytes:v10 length:sqlite3_column_bytes(v11, 3)];
    uint64_t v13 = 0;
    *(void *)(a2 + 24) = v12;
  }
  else
  {
    uint64_t v13 = 2;
  }
  uint64_t v14 = v16;
  uint64_t v16 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  return v13;
}

void sub_100B9E324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100B9E340(uint64_t a1, void *a2)
{
  if (!sub_1005F9734(*(void *)(a1 + 80), (char *)a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022E9788);
    }
    int v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022E9788);
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      uint64_t v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<VO2MaxCloudKitSyncEngineMetadata>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxCloudKitSyncEngineMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", (const char *)v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    memset(__p, 0, 24);
    sub_100134750(buf, (char *)a2);
    int v5 = std::string::append(buf, "AutoIncr");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v22 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)int v21 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_100134750(buf, (char *)a2);
    char v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v8 = HIBYTE(__p[2]);
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    float v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      float v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        float v10 = __p;
      }
      else {
        float v10 = (void **)__p[0];
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v22 >= 0) {
      int v11 = v21;
    }
    else {
      int v11 = (void **)v21[0];
    }
    if (v22 >= 0) {
      std::string::size_type v12 = HIBYTE(v22);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    uint64_t v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    uint64_t v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v14;
    __p[1] = v23.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v23.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      char v15 = HIBYTE(__p[2]);
      uint64_t v14 = __p[0];
    }
    if (v15 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)v14;
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)v16);
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 88);
  }
  sub_10003CC68(v17, v18);
  return 0;
}

void sub_100B9F56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100B9F8CC(void *a1, void *a2)
{
  int v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A7FFB4(v4);
    sub_1001D7FD4();
  }
  std::string::size_type v12 = v15[1];
  operator delete(v15[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v15);
    long long v6 = sub_100132EFC(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      char v7 = __p;
    }
    else {
      char v7 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    float v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      int v11 = __p;
    }
    else {
      int v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_100B9FCA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  sub_101A129A8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100B9FD24(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17[0]) < 0)
  {
    uint64_t v10 = v16[1];
    operator delete(v16[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v16);
        int v4 = sub_100132EFC(v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          int v5 = __p;
        }
        else {
          int v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        char v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          float v9 = __p;
        }
        else {
          float v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17[0]))
  {
    goto LABEL_3;
  }
  sub_101A80124(v3);
  uint64_t v15 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v16
  v17[0] = v11;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_100BA0140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100BA01C0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_100BA1C14(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022E9788);
  }
  int v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022E9788);
    }
    char v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022E9788);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<VO2MaxCloudKitSyncEngineMetadata>::setDatabaseAccessible() [T = VO2MaxCloudKitSyncEngineMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_100BA0914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_100BA0948(uint64_t a1, uint64_t a2, char a3)
{
  v31[0] = (id)os_transaction_create();
  v31[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v31);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  uint64_t v28 = 0;
  int64x2_t v29 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  uint64_t v30 = 0;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 104))(a1, &v28);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022E9788);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022E9788);
        }
        LOWORD(v32) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<VO2MaxCloudKitSyncEngineMetadata>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxCloudKitSyncEngineMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *(double *)(a2 + 8);
    double v8 = *(double *)v29.i64;
    double v9 = v7 - *(double *)v29.i64;
    if (v7 - *(double *)v29.i64 < 0.0) {
      double v9 = -(v7 - *(double *)v29.i64);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022E9788);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 8);
        *(_DWORD *)uint64_t buf = 134349312;
        double v37 = *(double *)v29.i64;
        __int16 v38 = 2050;
        uint64_t v39 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022E9788);
        }
        uint64_t v22 = *(void *)(a2 + 8);
        int v32 = 134349312;
        double v33 = *(double *)v29.i64;
        __int16 v34 = 2050;
        uint64_t v35 = v22;
        std::string v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxCloudKitSyncEngineMetadata>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxCloudKitSyncEngineMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
      CLWriteStackshot();
      double v7 = *(double *)(a2 + 8);
      double v8 = *(double *)v29.i64;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022E9788);
        }
        std::string::size_type v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 8);
          *(_DWORD *)uint64_t buf = 134217984;
          double v37 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022E9788);
          }
          double v24 = *(double *)(a2 + 8);
          int v32 = 134217984;
          double v33 = v24;
          float v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxCloudKitSyncEngineMetadata>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxCloudKitSyncEngineMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v25);
          if (v25 != (char *)buf) {
            free(v25);
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v27 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_1022E9788);
        double v17 = v27;
      }
      double v18 = v16 - v17;
      uint64_t v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 134217984;
        double v37 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022E9788);
        }
        int v32 = 134217984;
        double v33 = v18;
        float v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxCloudKitSyncEngineMetadata>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxCloudKitSyncEngineMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, &v28, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v20;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v31);
}

void sub_100BA115C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BA1188(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A80294(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  std::string::size_type v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_100BA14FC(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A80404(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      int v5 = __p;
    }
    else {
      int v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_100BA1828(uint64_t a1)
{
  return sub_100BA01C0(a1 - 72);
}

uint64_t sub_100BA1830(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A80574(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_100BA1B54(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100BA1B84(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_100BA1C14(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_100BA1C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BA1CB0(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_100BA21DC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (2)
    {
      if (!*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error))
      {
        char v4 = 0;
        unsigned int v5 = 0;
        uint64_t v6 = 0;
        while (1)
        {
          uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v8 = v7 + 1;
          if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
          v6 |= (unint64_t)(v9 & 0x7F) << v4;
          if ((v9 & 0x80) == 0) {
            goto LABEL_11;
          }
          v4 += 7;
          BOOL v10 = v5++ >= 9;
          if (v10)
          {
            LODWORD(v6) = 0;
            uint64_t v11 = OBJC_IVAR___PBDataReader__error;
            int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
            goto LABEL_13;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
        uint64_t v11 = OBJC_IVAR___PBDataReader__error;
        int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v6) = 0;
        }
LABEL_13:
        int v13 = v6 & 7;
        if (!v12 && v13 != 4)
        {
          switch((unsigned __int16)(v6 >> 3))
          {
            case 1u:
              char v15 = 0;
              unsigned int v16 = 0;
              uint64_t v17 = 0;
              *(unsigned char *)(a1 + 80) |= 2u;
              while (1)
              {
                uint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                unint64_t v19 = v18 + 1;
                if (v18 == -1 || v19 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                  break;
                }
                char v20 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
                *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19;
                v17 |= (unint64_t)(v20 & 0x7F) << v15;
                if ((v20 & 0x80) == 0) {
                  goto LABEL_57;
                }
                v15 += 7;
                BOOL v10 = v16++ >= 9;
                if (v10)
                {
                  uint64_t v17 = 0;
                  goto LABEL_59;
                }
              }
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_57:
              if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                uint64_t v17 = 0;
              }
LABEL_59:
              *(void *)(a1 + 64) = v17;
              goto LABEL_79;
            case 2u:
              *(unsigned char *)(a1 + 80) |= 1u;
              unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                uint64_t v22 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
                *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                uint64_t v22 = 0;
              }
              uint64_t v40 = 56;
              goto LABEL_76;
            case 3u:
              *(unsigned char *)(a1 + 80) |= 4u;
              unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                uint64_t v22 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
                *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                uint64_t v22 = 0;
              }
              uint64_t v40 = 72;
LABEL_76:
              *(void *)(a1 + v40) = v22;
              goto LABEL_79;
            case 4u:
              if (v13 != 2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v35 = 0;
                while (1)
                {
                  uint64_t v36 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                  unint64_t v37 = v36 + 1;
                  if (v36 == -1 || v37 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                    break;
                  }
                  char v38 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37;
                  v35 |= (unint64_t)(v38 & 0x7F) << v33;
                  if (v38 < 0)
                  {
                    v33 += 7;
                    BOOL v10 = v34++ >= 9;
                    if (!v10) {
                      continue;
                    }
                  }
                  goto LABEL_71;
                }
                *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_71:
                PBRepeatedUInt64Add();
                goto LABEL_79;
              }
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
                   && !*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error))
              {
                char v24 = 0;
                unsigned int v25 = 0;
                uint64_t v26 = 0;
                while (1)
                {
                  uint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                  unint64_t v28 = v27 + 1;
                  if (v27 == -1 || v28 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                    break;
                  }
                  char v29 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28;
                  v26 |= (unint64_t)(v29 & 0x7F) << v24;
                  if (v29 < 0)
                  {
                    v24 += 7;
                    BOOL v10 = v25++ >= 9;
                    if (!v10) {
                      continue;
                    }
                  }
                  goto LABEL_45;
                }
                *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
                PBRepeatedUInt64Add();
              }
              goto LABEL_55;
            case 5u:
              if (v13 == 2)
              {
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (1)
                {
                  uint64_t v30 = (unint64_t *)(a2 + OBJC_IVAR___PBDataReader__pos);
                  unint64_t v31 = *v30;
                  unint64_t v32 = *(void *)(a2 + OBJC_IVAR___PBDataReader__length);
                  if (*v30 >= v32 || *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                    break;
                  }
                  if (v31 > 0xFFFFFFFFFFFFFFF7 || v31 + 8 > v32) {
                    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                  }
                  else {
                    *uint64_t v30 = v31 + 8;
                  }
                  PBRepeatedDoubleAdd();
                }
LABEL_55:
                PBReaderRecallMark();
              }
              else
              {
                unint64_t v39 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v39 <= 0xFFFFFFFFFFFFFFF7 && v39 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v39 + 8;
                }
                else {
                  *(unsigned char *)(a2 + v11) = 1;
                }
                PBRepeatedDoubleAdd();
              }
LABEL_79:
              if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
              }
              continue;
            default:
              if (PBReaderSkipValueWithTag()) {
                goto LABEL_79;
              }
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void *sub_100BA30D8(void *a1, uint64_t a2, uint64_t a3)
{
  sub_100418AD4((uint64_t)v6, a3);
  sub_10070665C(a1, a2, (uint64_t)v6);
  sub_100418A50(v6);
  *a1 = off_1022E97D8;
  return a1;
}

void sub_100BA3174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100418A50((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BA3194(uint64_t result, double a2)
{
  double v2 = a2 + -300.0 + 60.0;
  if (v2 < *(double *)(result + 40)) {
    double v2 = *(double *)(result + 40);
  }
  *(double *)(result + 40) = v2;
  return result;
}

void *sub_100BA31C0(uint64_t a1)
{
  char v18 = 0;
  double v16 = 0.0;
  double v17 = 0.0;
  uint64_t v14 = 0;
  double v15 = 0.0;
  double v2 = (double *)(a1 + 40);
  uint64_t v3 = operator new(0x28uLL);
  *uint64_t v3 = off_1022E9828;
  v3[1] = &v17;
  v3[2] = &v16;
  v3[3] = &v15;
  void v3[4] = &v18;
  _DWORD v19[3] = v3;
  char v4 = sub_1007066AC(a1, v2, &v14, (uint64_t)v19, 300.0);
  uint64_t result = sub_100418CB0(v19);
  if (v4)
  {
    if (v15 < 270.0 || (double v6 = v17, v17 / 300.0 < 0.800000012))
    {
      *double v2 = *(double *)(v14 + 8);
    }
    else
    {
      double v7 = v16;
      double v8 = *v2;
      double v9 = *v2 + 300.0;
      *double v2 = *v2 + 60.0;
      if (v8 < v9)
      {
        double v10 = v7 / v6;
        do
        {
          *(double *)int v12 = v8;
          double v8 = v8 + 60.0;
          *(double *)&v12[1] = v8;
          *(double *)&v12[2] = v10;
          uint64_t v13 = 65544;
          BYTE3(v13) = v18;
          uint64_t v11 = *(void *)(a1 + 32);
          if (!v11) {
            sub_10015E48C();
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v11 + 48))(v11, v12);
        }
        while (v8 < v9);
      }
    }
  }
  return result;
}

void sub_100BA3380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_100418CB0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100BA33A0()
{
}

__n128 sub_100BA33B4(uint64_t a1)
{
  double v2 = (char *)operator new(0x28uLL);
  *(void *)double v2 = off_1022E9828;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100BA3408(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022E9828;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_100BA3440(uint64_t a1, uint64_t a2, double *a3)
{
  double v3 = *a3;
  float v4 = *(float *)(a2 + 24) * 2.2;
  if (v4 < 3.5) {
    float v4 = 3.5;
  }
  if (*(double *)(a2 + 16) >= v4)
  {
    unsigned int v5 = *(double **)(a1 + 16);
    **(double **)(a1 + 8) = v3 + **(double **)(a1 + 8);
    *unsigned int v5 = *v5 + *(double *)(a2 + 16) * v3;
    **(unsigned char **)(a1 + 32) = (**(unsigned __int8 **)(a1 + 32) | *(unsigned __int8 *)(a2 + 29)) != 0;
  }
  if (!*(unsigned char *)(a2 + 28)) {
    double v3 = 0.0;
  }
  double v6 = *(double **)(a1 + 24);
  double result = *v6 + v3;
  *double v6 = result;
  return result;
}

uint64_t sub_100BA34D0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100BA3510()
{
}

uint64_t sub_100BA351C(uint64_t a1)
{
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 56) = 0xBFF0000000000000;
  sub_1015775C8(a1 + 64, 0);
  sub_100BA359C(a1);
  return a1;
}

void sub_100BA3578(_Unwind_Exception *a1)
{
  sub_1015776E4(v2);
  sub_1002CDF4C(v1);
  _Unwind_Resume(a1);
}

void sub_100BA359C(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 64;
    goto LABEL_7;
  }
  if (v4 >> 3 == 2)
  {
    uint64_t v6 = 128;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  *(void *)(a1 + 784) = 0;
  *(unsigned char *)(a1 + 808) = 0;
  uuid_clear((unsigned __int8 *)(a1 + 792));
  *(unsigned char *)(a1 + 49) = 0;
  *(void *)(a1 + 56) = 0xBFF0000000000000;
}

void sub_100BA3634(int64x2_t *a1, int *a2)
{
  unint64_t v4 = a1[2].u64[1];
  if (v4 >= 0x79)
  {
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022E9898);
    }
    uint64_t v5 = qword_102419228;
    if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = a1[2].i64[1];
      uint64_t v7 = *(void *)(*(void *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 4) & 0xFFFFFFFFFFFFFF8))
                     + 32 * (a1[2].i64[0] & 0x7F)
                     + 8);
      *(_DWORD *)uint64_t buf = 67240448;
      *(_DWORD *)unint64_t v21 = v6;
      *(_WORD *)&v21[4] = 2050;
      *(void *)&v21[6] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "HRBuffer full (size %{public}d), dropping sample from %{public}lf", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022E9898);
      }
      char v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVO2MaxInputCollector::feedRawHeartRate(const CLCatherineData &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101D0A740);
    sub_1002D0514((uint64_t)a1, 1);
    a1[3].i8[0] = 0;
    unint64_t v4 = a1[2].u64[1];
  }
  if (v4
    && *(double *)(*(void *)(a1->i64[1] + (((v4 + a1[2].i64[0] - 1) >> 4) & 0xFFFFFFFFFFFFFF8))
                 + 32 * ((v4 + a1[2].i64[0] - 1) & 0x7F)
                 + 8) > *((double *)a2 + 5))
  {
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022E9898);
    }
    double v8 = qword_102419228;
    if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *((void *)a2 + 5);
      unint64_t v10 = a1[2].i64[1] + a1[2].i64[0] - 1;
      uint64_t v11 = *(void *)(*(void *)(a1->i64[1] + ((v10 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v10 & 0x7F) + 8);
      *(_DWORD *)uint64_t buf = 134349312;
      *(void *)unint64_t v21 = v9;
      *(_WORD *)&v21[8] = 2050;
      *(void *)&v21[10] = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning, received out of order HR, new time %{public}lf, previous time %{public}lf", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022E9898);
      }
      unint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVO2MaxInputCollector::feedRawHeartRate(const CLCatherineData &)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
  *(_DWORD *)uint64_t buf = *a2;
  *(void *)&v21[4] = *((void *)a2 + 5);
  *(int8x16_t *)&v21[12] = vextq_s8(*(int8x16_t *)(a2 + 2), *(int8x16_t *)(a2 + 2), 8uLL);
  sub_100BA3C28(a1, (uint64_t)buf);
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_1022E9898);
  }
  int v12 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEBUG))
  {
    int v13 = *a2;
    uint64_t v14 = *((void *)a2 + 1);
    uint64_t v15 = *((void *)a2 + 2);
    uint64_t v16 = *((void *)a2 + 5);
    *(_DWORD *)uint64_t buf = 134284289;
    *(void *)unint64_t v21 = v14;
    *(_WORD *)&v21[8] = 1026;
    *(_DWORD *)&v21[10] = v13;
    *(_WORD *)&v21[14] = 2049;
    *(void *)&v21[16] = v15;
    *(_WORD *)&v21[24] = 2050;
    *(void *)&v21[26] = v16;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "HRCollected,hr,%{private}f,source,%{public}d,conf,%{private}f,startTime,%{public}lf\n", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022E9898);
    }
    double v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVO2MaxInputCollector::feedRawHeartRate(const CLCatherineData &)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
}

__n128 sub_100BA3C28(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100BA47A4(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  double v8 = (_OWORD *)(*(void *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  _OWORD *v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

void sub_100BA3CB8(int64x2_t *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>, double a10@<D4>)
{
  int v20 = sub_100BA4074(a1, &v35, a6);
  *(void *)(a5 + 32) = 0xFFEFFFFFFFFFFFFFLL;
  *(void *)(a5 + 48) = 0xFFEFFFFFFFFFFFFFLL;
  if (v20)
  {
    float v21 = a7;
    *(float *)(a5 + 24) = v21;
    *(double *)(a5 + 32) = a6;
    uint64_t v22 = v36;
    float v23 = v37;
    if (v35 == 4) {
      float v23 = 1.0;
    }
    float v24 = v38;
    *(float *)(a5 + 40) = v24;
    *(float *)(a5 + 44) = v23;
    *(void *)(a5 + 48) = v22;
    *(double *)(a5 + 64) = a8;
    *(_DWORD *)(a5 + 56) = a2;
    *(_DWORD *)(a5 + 76) = 0;
    *(unsigned char *)(a5 + 72) = a3;
    *(unsigned char *)(a5 + 73) = sub_100BA45F8((uint64_t)a1, a6);
    *(void *)(a5 + 80) = a1[49].i64[0];
    *(double *)(a5 + 88) = a9;
    *(double *)(a5 + 96) = a10;
    *(unsigned char *)(a5 + 104) = a4;
    uuid_copy((unsigned __int8 *)(a5 + 8), &a1[49].u8[8]);
  }
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_1022E9898);
  }
  unsigned int v25 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEBUG))
  {
    double v26 = v37;
    double v27 = v38;
    uint64_t v28 = v36;
    BOOL v29 = sub_100BA45F8((uint64_t)a1, a6);
    *(_DWORD *)uint64_t buf = 134286849;
    double v68 = a7;
    __int16 v69 = 1024;
    int v70 = 0;
    __int16 v71 = 2048;
    double v72 = a6;
    __int16 v73 = 2049;
    double v74 = v27;
    __int16 v75 = 2050;
    double v76 = v26;
    __int16 v77 = 2050;
    uint64_t v78 = v28;
    __int16 v79 = 2049;
    double v80 = a8;
    __int16 v81 = 1025;
    int v82 = a2;
    __int16 v83 = 1025;
    int v84 = a3;
    __int16 v85 = 1025;
    BOOL v86 = v29;
    __int16 v87 = 1026;
    int v88 = v20;
    __int16 v89 = 2049;
    double v90 = a9;
    __int16 v91 = 2049;
    double v92 = a10;
    __int16 v93 = 1025;
    int v94 = a4;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "MetsCollected,mets,%{private}f,source,%d,metComputeTime,%f,hr,%{private}f,hrConfidence,%{public}f,hrTime,%{public}f,grade,%{private}f,gradeType,%{private}d,gps,%{private}d,stride,%{private}d,valid,%{public}d,cadence,%{private}f,pace,%{private}f,stroller,%{private}d", buf, 0x76u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022E9898);
    }
    double v31 = v37;
    double v30 = v38;
    uint64_t v32 = v36;
    BOOL v33 = sub_100BA45F8((uint64_t)a1, a6);
    int v39 = 134286849;
    double v40 = a7;
    __int16 v41 = 1024;
    int v42 = 0;
    __int16 v43 = 2048;
    double v44 = a6;
    __int16 v45 = 2049;
    double v46 = v30;
    __int16 v47 = 2050;
    double v48 = v31;
    __int16 v49 = 2050;
    uint64_t v50 = v32;
    __int16 v51 = 2049;
    double v52 = a8;
    __int16 v53 = 1025;
    int v54 = a2;
    __int16 v55 = 1025;
    int v56 = a3;
    __int16 v57 = 1025;
    BOOL v58 = v33;
    __int16 v59 = 1026;
    int v60 = v20;
    __int16 v61 = 2049;
    double v62 = a9;
    __int16 v63 = 2049;
    double v64 = a10;
    __int16 v65 = 1025;
    int v66 = a4;
    unsigned int v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "VO2MaxInput CLVO2MaxInputCollector::feedCalorieUpdate(CFAbsoluteTime, double, GradeType, double, BOOL, double, double, BOOL)", "%s\n", v34);
    if (v34 != (char *)buf) {
      free(v34);
    }
  }
}

uint64_t sub_100BA4074(int64x2_t *a1, int *a2, double a3)
{
  uint64_t v3 = a1[2].i64[1];
  if (!v3) {
    return 0;
  }
  while (1)
  {
    uint64_t v6 = a1->i64[1];
    unint64_t v7 = a1[2].u64[0];
    uint64_t v8 = *(void *)(v6 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8));
    unint64_t v9 = v7 & 0x7F;
    long long v10 = (double *)(v8 + 32 * v9);
    double v11 = v10[1];
    if (v3 != 1)
    {
      double v12 = vabdd_f64(a3, v11);
      if (v12 < 5.0) {
        break;
      }
    }
    if (v3 == 1) {
      goto LABEL_20;
    }
LABEL_8:
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022E9898);
    }
    int v13 = qword_102419228;
    if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEBUG))
    {
      int v14 = *(_DWORD *)v10;
      uint64_t v15 = *(void *)(v8 + 32 * v9 + 16);
      uint64_t v16 = *(void *)(v8 + 32 * v9 + 24);
      uint64_t v17 = *((void *)v10 + 1);
      uint64_t v18 = a1[2].i64[1];
      *(_DWORD *)uint64_t buf = 134284545;
      uint64_t v33 = v16;
      __int16 v34 = 1026;
      int v35 = v14;
      __int16 v36 = 2050;
      uint64_t v37 = v15;
      __int16 v38 = 2050;
      uint64_t v39 = v17;
      __int16 v40 = 1026;
      LODWORD(v41) = v18;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "HRRejected,hr,%{private}f,source,%{public}d,conf,%{public}f,startTime,%{public}f,bufSize,%{public}d\n", buf, 0x2Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022E9898);
      }
      unint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLVO2MaxInputCollector::getMostRecentHRSample(CFAbsoluteTime, HRSample &)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101D0A740);
    sub_1002D0514((uint64_t)a1, 1);
    a1[3].i8[0] = 0;
    uint64_t v3 = a1[2].i64[1];
    if (!v3) {
      return 0;
    }
  }
  if (a1[3].i8[0]
    && v12 >= vabdd_f64(a3, *(double *)(*(void *)(v6 + (((v7 + 1) >> 4) & 0xFFFFFFFFFFFFFF8))+ 32 * (((_BYTE)v7 + 1) & 0x7F)+ 8)))
  {
    goto LABEL_8;
  }
LABEL_20:
  long long v21 = *((_OWORD *)v10 + 1);
  *(_OWORD *)a2 = *(_OWORD *)v10;
  *((_OWORD *)a2 + 1) = v21;
  a1[3].i8[0] = 1;
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_1022E9898);
  }
  uint64_t v22 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v23 = *((void *)a2 + 2);
    uint64_t v24 = *((void *)a2 + 3);
    int v25 = *a2;
    uint64_t v26 = *((void *)a2 + 1);
    unint64_t v27 = a1[2].u64[1];
    int v28 = a1[3].u8[0];
    if (v27 >= 2) {
      uint64_t v29 = *(void *)(*(void *)(a1->i64[1] + (((unint64_t)(a1[2].i64[0] + 1) >> 4) & 0xFFFFFFFFFFFFFF8))
    }
                      + 32 * ((a1[2].i64[0] + 1) & 0x7F)
                      + 8);
    else {
      uint64_t v29 = 0;
    }
    *(_DWORD *)uint64_t buf = 134285569;
    uint64_t v33 = v24;
    __int16 v34 = 1026;
    int v35 = v25;
    __int16 v36 = 2050;
    uint64_t v37 = v23;
    __int16 v38 = 2050;
    uint64_t v39 = v26;
    __int16 v40 = 2050;
    double v41 = a3;
    __int16 v42 = 2050;
    double v43 = v11;
    __int16 v44 = 1026;
    int v45 = v27;
    __int16 v46 = 1026;
    int v47 = v28;
    __int16 v48 = 2050;
    uint64_t v49 = v29;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "HRSelected,hr,%{private}f,source,%{public}d,conf,%{public}f,startTime,%{public}f,time,%{public}f,oldestTime,%{public}f,bufSize,%{public}d,fOldestHRUsed,%{public}d,secondSampleTime,%{public}f\n", buf, 0x50u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022E9898);
    }
    double v30 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLVO2MaxInputCollector::getMostRecentHRSample(CFAbsoluteTime, HRSample &)", "%s\n", v30);
    if (v30 != (char *)buf) {
      free(v30);
    }
  }
  return 1;
}

BOOL sub_100BA45F8(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 808)) {
    return 0;
  }
  if (vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 56)) > 30.0)
  {
    sub_1000E1294((uint64_t *)v9, (uint64_t)"CLVO2MaxInputCollector::strideCalConverged", 0);
    uint64_t v8 = 0;
    long long v6 = 0u;
    long long v7 = 0u;
    long long v5 = 0u;
    sub_1015797B4(a1 + 64, 0, (uint64_t)&v5, a2 + -30.0, a2);
    *(unsigned char *)(a1 + 49) = [[+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance") proxyForService:@"CLStepCountNotifier"] syncgetIsStrideCalibrationConvergedMedianForSpeed:*((double *)&v6) / (a2 - (a2 + -30.0)));
    *(CFAbsoluteTime *)(a1 + 56) = CFAbsoluteTimeGetCurrent();
    sub_1000E1098(v9);
  }
  return *(unsigned char *)(a1 + 49) != 0;
}

void sub_100BA46E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BA4700(uint64_t a1, uint64_t a2)
{
  +[CMWorkout CLMotionActivityTypeFromCMWorkoutType:*(void *)(a2 + 112)];
  if (CLMotionActivity::isTypePedestrian()) {
    char isTypeIndoorPedestrian = 1;
  }
  else {
    char isTypeIndoorPedestrian = CLMotionActivity::isTypeIndoorPedestrian();
  }
  *(unsigned char *)(a1 + 808) = isTypeIndoorPedestrian;
  uuid_copy((unsigned __int8 *)(a1 + 792), (const unsigned __int8 *)(a2 + 64));
  uint64_t result = sub_101014448(*(void *)(a2 + 112), *(void *)(a2 + 120));
  *(void *)(a1 + 784) = result;
  return result;
}

void sub_100BA4774(id a1)
{
  qword_102419228 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

void sub_100BA47A4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    long long v6 = (char *)a1[3];
    a1[4] = v4;
    long long v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      __int16 v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    __int16 v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      __int16 v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        __int16 v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)__int16 v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  __int16 v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100BA4A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BA4ABC()
{
  sub_100134750(qword_1024804B8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024804B8, (void *)&_mh_execute_header);
}

uint64_t sub_100BA4B1C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a2;
  *(unsigned char *)(a1 + 64) = 0;
  if (qword_102419260 != -1) {
    dispatch_once(&qword_102419260, &stru_1022E98B8);
  }
  BOOL v3 = qword_102419268;
  if (os_log_type_enabled((os_log_t)qword_102419268, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLExerciseMinuteController::CLExerciseMinuteController called", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419260 != -1) {
      dispatch_once(&qword_102419260, &stru_1022E98B8);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLExerciseMinuteController::CLExerciseMinuteController(CLGenericFitnessEstimatorProtocol *)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (sub_10010145C()) {
    operator new();
  }
  sub_100103240();
  *(unsigned char *)(a1 + 64) = sub_10010145C();
  return a1;
}

void sub_100BA4EB8(_Unwind_Exception *a1)
{
  sub_100BA58D0(v2, *(void **)(v1 + 40));
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100BA4F8C(uint64_t a1, uint64_t *a2)
{
  int v4 = sub_100BA5510(a1, (long long *)a2);
  if (qword_102419260 != -1) {
    dispatch_once(&qword_102419260, &stru_1022E98B8);
  }
  uint64_t v5 = qword_102419268;
  if (os_log_type_enabled((os_log_t)qword_102419268, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *a2;
    int v7 = (int)(*(double *)a2 / 60.0);
    *(_DWORD *)uint64_t buf = 134350593;
    double v8 = (double)v7;
    uint64_t v9 = a2[2];
    int v10 = *((unsigned __int16 *)a2 + 12);
    int v11 = *((unsigned __int8 *)a2 + 26);
    int v12 = *((unsigned __int8 *)a2 + 27);
    *(double *)&uint8_t buf[4] = v8 * 60.0;
    __int16 v19 = 2050;
    uint64_t v20 = v6;
    __int16 v21 = 2049;
    uint64_t v22 = v9;
    __int16 v23 = 1026;
    int v24 = v10;
    __int16 v25 = 1026;
    int v26 = v11;
    __int16 v27 = 1026;
    int v28 = v12;
    __int16 v29 = 1026;
    int v30 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "ExerciseMinute, adjustedStartTime, %{public}.3f, startTime, %{public}.3f, averageIntensity, %{private}f, awardMode, %{public}d, inWorkoutSession, %{public}d, hasElevationCredit, %{public}d, duplicate, %{public}d", buf, 0x38u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419260 != -1) {
      dispatch_once(&qword_102419260, &stru_1022E98B8);
    }
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLExerciseMinuteController::recordExerciseMinute(const ExerciseMinute &)", "%s\n", v17);
    if (v17 != buf) {
      free(v17);
    }
  }
  if (*(unsigned char *)(a1 + 64)) {
    char v13 = v4;
  }
  else {
    char v13 = 1;
  }
  if ((v13 & 1) == 0)
  {
    BOOL v14 = *(void (****)(void, unsigned char *))(a1 + 56);
    if (v14)
    {
      *(double *)uint64_t buf = (double)(int)(*(double *)a2 / 60.0) * 60.0;
      (**v14)(v14, buf);
    }
    if (*((unsigned char *)a2 + 26))
    {
      uint64_t v15 = sub_100C3AE20();
      sub_100C3B1A8(v15, *((unsigned __int8 *)a2 + 27));
    }
    uint64_t v16 = (dispatch_queue_t *)sub_10019F4CC();
    sub_100F2AD84(v16, *((unsigned char *)a2 + 26));
  }
}

uint64_t sub_100BA52A0(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  BOOL v3 = (void *)(a1 + 40);
  sub_100BA58D0(a1 + 32, *(void **)(a1 + 40));
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 48) = 0;
  *BOOL v3 = 0;
  sub_100BA58D0(v2, 0);
  sub_1000F5BB0(a1, *(void **)(a1 + 8));
  return a1;
}

void sub_100BA5308(uint64_t a1, uint64_t a2)
{
  if (qword_102419260 != -1) {
    dispatch_once(&qword_102419260, &stru_1022E98B8);
  }
  int v4 = qword_102419268;
  if (os_log_type_enabled((os_log_t)qword_102419268, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLExerciseMinuteController::feedBodyMetrics called", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419260 != -1) {
      dispatch_once(&qword_102419260, &stru_1022E98B8);
    }
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLExerciseMinuteController::feedBodyMetrics(const CLBodyMetrics &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    unsigned int v6 = *(unsigned __int8 *)(a1 + 24);
    uint64_t v7 = a1 + 40;
    do
    {
      unsigned int v8 = *(unsigned __int8 *)(v5 + 32);
      BOOL v9 = v8 >= v6;
      if (v8 >= v6) {
        int v10 = (uint64_t *)v5;
      }
      else {
        int v10 = (uint64_t *)(v5 + 8);
      }
      if (v9) {
        uint64_t v7 = v5;
      }
      uint64_t v5 = *v10;
    }
    while (*v10);
    if (v7 != a1 + 40 && v6 >= *(unsigned __int8 *)(v7 + 32)) {
      (*(void (**)(void, uint64_t))(**(void **)(v7 + 40) + 24))(*(void *)(v7 + 40), a2);
    }
  }
}

uint64_t sub_100BA5510(uint64_t a1, long long *a2)
{
  double v4 = (double)(int)(*(double *)a2 / 60.0) * 60.0;
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5) {
    goto LABEL_13;
  }
  uint64_t v6 = a1 + 8;
  do
  {
    uint64_t v7 = (uint64_t *)(v5 + 8);
    if (*(double *)(v5 + 32) >= v4)
    {
      uint64_t v7 = (uint64_t *)v5;
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v7;
  }
  while (*v7);
  if (v6 == a1 + 8 || v4 < *(double *)(v6 + 32))
  {
LABEL_13:
    *(double *)uint64_t v22 = (double)(int)(*(double *)a2 / 60.0) * 60.0;
    *(void *)uint64_t buf = v22;
    int v10 = sub_100BA5AB4((uint64_t **)a1, (double *)v22, (uint64_t)&unk_101D0B290, (void **)buf);
    unsigned int v21 = 0;
    long long v11 = *a2;
    *(_OWORD *)(v10 + 7) = a2[1];
    *(_OWORD *)(v10 + 5) = v11;
  }
  else
  {
    *(_WORD *)(v6 + 64) |= *((_WORD *)a2 + 12);
    char v8 = *(unsigned char *)(v6 + 66);
    if (!v8) {
      char v8 = *((unsigned char *)a2 + 26);
    }
    *(unsigned char *)(v6 + 66) = v8;
    char v9 = *(unsigned char *)(v6 + 67);
    if (!v9) {
      char v9 = *((unsigned char *)a2 + 27);
    }
    *(unsigned char *)(v6 + 67) = v9;
    unsigned int v21 = 1;
  }
  if (*(void *)(a1 + 16) >= 8uLL)
  {
    do
    {
      double v12 = *(double *)(*(void *)a1 + 40);
      uint64_t v13 = *(void *)(*(void *)a1 + 56);
      int v14 = *(unsigned __int16 *)(*(void *)a1 + 64);
      int v15 = *(unsigned __int8 *)(*(void *)a1 + 66);
      int v16 = *(unsigned __int8 *)(*(void *)a1 + 67);
      if (qword_102419260 != -1) {
        dispatch_once(&qword_102419260, &stru_1022E98B8);
      }
      uint64_t v17 = qword_102419268;
      if (os_log_type_enabled((os_log_t)qword_102419268, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 134350337;
        *(double *)&uint8_t buf[4] = (double)(int)(v12 / 60.0) * 60.0;
        __int16 v34 = 2050;
        double v35 = v12;
        __int16 v36 = 2049;
        uint64_t v37 = v13;
        __int16 v38 = 1026;
        int v39 = v14;
        __int16 v40 = 1026;
        int v41 = v15;
        __int16 v42 = 1026;
        int v43 = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Purging ExerciseMinute, adjustedStartTime, %{public}.3f, startTime, %{public}.3f, averageIntensity, %{private}f, awardMode, %{public}d, inWorkoutSession, %{public}d, hasElevationCredit, %{public}d", buf, 0x32u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419260 != -1) {
          dispatch_once(&qword_102419260, &stru_1022E98B8);
        }
        *(_DWORD *)uint64_t v22 = 134350337;
        *(double *)&v22[4] = (double)(int)(v12 / 60.0) * 60.0;
        __int16 v23 = 2050;
        double v24 = v12;
        __int16 v25 = 2049;
        uint64_t v26 = v13;
        __int16 v27 = 1026;
        int v28 = v14;
        __int16 v29 = 1026;
        int v30 = v15;
        __int16 v31 = 1026;
        int v32 = v16;
        __int16 v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLExerciseMinuteController::updateExerciseMinuteMap(const ExerciseMinute &)", "%s\n", v19);
        if (v19 != buf) {
          free(v19);
        }
      }
      uint64_t v18 = *(uint64_t **)a1;
      sub_1000F0A30((uint64_t **)a1, *(uint64_t **)a1);
      operator delete(v18);
    }
    while (*(void *)(a1 + 16) > 7uLL);
  }
  return v21;
}

void sub_100BA58A0(id a1)
{
  qword_102419268 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ExerciseMinutes");
}

void sub_100BA58D0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100BA58D0(a1, *a2);
    sub_100BA58D0(a1, a2[1]);
    uint64_t v4 = a2[5];
    a2[5] = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    operator delete(a2);
  }
}

__n128 sub_100BA5954(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1022E98E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100BA59A8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022E98E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100BA59E0(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  BOOL v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t sub_100BA5A08(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BA5A48()
{
}

void sub_100BA5A54(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    BOOL v3 = (void **)(a2 + 56);
    sub_10070704C(&v3);
    sub_1002CDF4C((void *)(a2 + 8));
    operator delete();
  }
}

uint64_t **sub_100BA5AB4(uint64_t **a1, double *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    double v8 = *a2;
    while (1)
    {
      while (1)
      {
        char v9 = (uint64_t **)v6;
        double v10 = *((double *)v6 + 4);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = (uint64_t *)*v6;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = (uint64_t *)v6[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    char v9 = a1 + 1;
LABEL_10:
    long long v11 = (char *)operator new(0x48uLL);
    *((void *)v11 + 4) = **a4;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    sub_1000EDF90(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_100BA5B80()
{
  sub_100134750(qword_1024804D0, "Acc800Fp");
  dword_1024804E8 = 800;
  __cxa_atexit((void (*)(void *))sub_10058C198, qword_1024804D0, (void *)&_mh_execute_header);
  sub_100134750(qword_1024804F0, "DmFp");
  dword_102480508 = 200;

  return __cxa_atexit((void (*)(void *))sub_10058C198, qword_1024804F0, (void *)&_mh_execute_header);
}

uint64_t sub_100BA5C28(unsigned int a1)
{
  if (a1 > 0xE) {
    return 102;
  }
  else {
    return dword_101D82CC4[a1];
  }
}

CFStringRef sub_100BA5C48(unsigned int a1)
{
  if (a1 > 0xE) {
    return @"CLSubHarvesterApp";
  }
  else {
    return *(&off_1022E99B8 + (int)a1);
  }
}

void *sub_100BA5C6C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  switch(a1)
  {
    case 1:
      BOOL v3 = "CLSubHarvesterCell";
      goto LABEL_16;
    case 2:
      BOOL v3 = "CLSubHarvesterWifi";
      goto LABEL_16;
    case 3:
      BOOL v3 = "CLSubHarvesterTracks";
      goto LABEL_16;
    case 4:
      BOOL v3 = "CLSubHarvesterRealtime";
      goto LABEL_16;
    case 5:
      BOOL v3 = "CLSubHarvesterApp";
      goto LABEL_16;
    case 6:
      BOOL v3 = "CLSubHarvesterPass";
      goto LABEL_16;
    case 7:
      BOOL v3 = "CLSubHarvesterIndoor";
      goto LABEL_16;
    case 8:
      BOOL v3 = "CLSubHarvesterPressure";
      goto LABEL_16;
    case 9:
      BOOL v3 = "CLSubHarvesterPoi";
      goto LABEL_16;
    case 10:
      BOOL v3 = "CLSubHarvesterTrace";
      goto LABEL_16;
    case 11:
      BOOL v3 = "CLSubHarvesterAvenger";
      goto LABEL_16;
    case 12:
      BOOL v3 = "kCLSubHarvesterAltimeter";
      goto LABEL_16;
    case 13:
      BOOL v3 = "kCLSubHarvesterIonosphere";
      goto LABEL_16;
    case 14:
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022E9998);
      }
      uint64_t v5 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Unknown SubHarvester requesting description string", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022E9998);
        }
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "std::string subHarvesterIdentifierToString(CLSubHarvesterIdentifier)", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
      return sub_100134750(a2, "Unknown");
    default:
      BOOL v3 = "CLSubHarvesterCellLegacy";
LABEL_16:
      return sub_100134750(a2, v3);
  }
}

void sub_100BA6090(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_100BA60C0(uint64_t a1, void *a2, int a3, double a4, double a5)
{
  uint64_t v6 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  *(_DWORD *)(a1 + 32) = a3;
  sub_101136D78(a3, (std::string *)(a1 + 40));
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 108) = xmmword_101D82D00;
  *(_DWORD *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 124) = unk_101D82D10;
  *(_OWORD *)(a1 + 140) = xmmword_101D82D20;
  *(_OWORD *)(a1 + 152) = *(long long *)((char *)&xmmword_101D82D20 + 12);
  return a1;
}

void sub_100BA6148(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BA6160(uint64_t a1, long long *a2)
{
  if (qword_1024191F0 != -1) {
    dispatch_once(&qword_1024191F0, &stru_1022E9A50);
  }
  uint64_t v4 = qword_1024191F8;
  if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a1 + 63) < 0)
    {
      sub_1000DC48C(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 40);
      uint64_t v19 = *(void *)(a1 + 56);
    }
    uint64_t v5 = __p;
    if (v19 < 0) {
      uint64_t v5 = (void **)__p[0];
    }
    uint64_t v6 = "update";
    if (!*(unsigned char *)(a1 + 104)) {
      uint64_t v6 = "init";
    }
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "BoutDetector (%{public}s): Received user info (%s)", buf, 0x16u);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022E9A50);
    }
    if (*(char *)(a1 + 63) < 0)
    {
      sub_1000DC48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)uint64_t buf = *(_OWORD *)(a1 + 40);
      *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
    }
    double v10 = buf;
    if (buf[23] < 0) {
      double v10 = *(unsigned char **)buf;
    }
    long long v11 = "update";
    if (!*(unsigned char *)(a1 + 104)) {
      long long v11 = "init";
    }
    int v14 = 136446466;
    int v15 = v10;
    __int16 v16 = 2080;
    uint64_t v17 = v11;
    double v12 = (char *)_os_log_send_and_compose_impl();
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::BoutDetector::handleUserInfoUpdate(const CLBodyMetrics &)", "%s\n", v12);
    if (v12 != (char *)__p) {
      free(v12);
    }
  }
  long long v7 = *a2;
  long long v8 = a2[1];
  long long v9 = *(long long *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 140) = a2[2];
  *(_OWORD *)(a1 + 152) = v9;
  *(_OWORD *)(a1 + 124) = v8;
  *(_OWORD *)(a1 + 108) = v7;
  *(unsigned char *)(a1 + 104) = 1;
  if (*(_DWORD *)(a1 + 148))
  {
    if (*(double *)(a1 + 80) != 0.0) {
      sub_100BA644C(a1, 3);
    }
  }
}

void sub_100BA644C(uint64_t a1, int a2)
{
  double v3 = *(double *)(a1 + 80);
  if (v3 != 0.0)
  {
    uint64_t v4 = (uint64_t *)(a1 + 72);
    double v5 = *(double *)(a1 + 72);
    uint64_t v6 = (_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 96) = a2;
    double v7 = v3 - v5;
    if (v7 >= 0.0001 && v7 <= *(double *)(a1 + 16))
    {
      (*(void (**)(void))(**(void **)a1 + 16))();
      if (*(_DWORD *)(a1 + 64)) {
        goto LABEL_79;
      }
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022E9A50);
      }
      long long v11 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1000DC48C(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 40);
          *(void *)&__p[16] = *(void *)(a1 + 56);
        }
        uint64_t v19 = __p;
        if (__p[23] < 0) {
          uint64_t v19 = *(unsigned char **)__p;
        }
        uint64_t v20 = *v4;
        *(_DWORD *)uint64_t buf = 136446466;
        *(void *)&uint8_t buf[4] = v19;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&buf[14] = v20;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "BoutDetector (%{public}s): Failed to write new bout %{public}.2f", buf, 0x16u);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_79;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022E9A50);
      }
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1000DC48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)uint64_t buf = *(_OWORD *)(a1 + 40);
        *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
      }
      int v32 = buf;
      if (buf[23] < 0) {
        int v32 = *(unsigned char **)buf;
      }
      uint64_t v33 = *v4;
      *(_DWORD *)__dst = 136446466;
      *(void *)&__dst[4] = v32;
      *(_WORD *)&__dst[12] = 2050;
      *(void *)&__dst[14] = v33;
      int v28 = (char *)_os_log_send_and_compose_impl();
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    else if (fabs(v7) >= 0.0001)
    {
      if (v7 >= 0.0)
      {
        if (v7 <= *(double *)(a1 + 16)) {
          goto LABEL_79;
        }
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022E9A50);
        }
        double v12 = qword_1024191F8;
        if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_FAULT))
        {
          if (*(char *)(a1 + 63) < 0)
          {
            sub_1000DC48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
          }
          else
          {
            *(_OWORD *)uint64_t buf = *(_OWORD *)(a1 + 40);
            *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
          }
          unsigned int v21 = buf;
          if (buf[23] < 0) {
            unsigned int v21 = *(unsigned char **)buf;
          }
          uint64_t v22 = *(void *)(a1 + 72);
          uint64_t v23 = *(void *)(a1 + 80);
          *(_DWORD *)std::string __p = 136446723;
          *(void *)&__p[4] = v21;
          *(_WORD *)&unsigned char __p[12] = 2049;
          *(void *)&__p[14] = v22;
          *(_WORD *)&__p[22] = 2049;
          uint64_t v41 = v23;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "BoutDetector (%{public}s): exceeded max duration. Should not be possible. startTime,%{private}.3f,endTime,%{private}.3f", __p, 0x20u);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_79;
        }
        bzero(__p, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022E9A50);
        }
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1000DC48C(__dst, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
          *(void *)&__dst[16] = *(void *)(a1 + 56);
        }
        __int16 v34 = __dst;
        if (__dst[23] < 0) {
          __int16 v34 = *(unsigned char **)__dst;
        }
        uint64_t v35 = *(void *)(a1 + 72);
        uint64_t v36 = *(void *)(a1 + 80);
        *(_DWORD *)uint64_t buf = 136446723;
        *(void *)&uint8_t buf[4] = v34;
        *(_WORD *)&unsigned char buf[12] = 2049;
        *(void *)&buf[14] = v35;
        *(_WORD *)&buf[22] = 2049;
        uint64_t v39 = v36;
        int v28 = (char *)_os_log_send_and_compose_impl();
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
      }
      else
      {
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022E9A50);
        }
        double v10 = qword_1024191F8;
        if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(a1 + 63) < 0)
          {
            sub_1000DC48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
          }
          else
          {
            *(_OWORD *)uint64_t buf = *(_OWORD *)(a1 + 40);
            *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
          }
          __int16 v16 = buf;
          if (buf[23] < 0) {
            __int16 v16 = *(unsigned char **)buf;
          }
          uint64_t v17 = *(void *)(a1 + 72);
          uint64_t v18 = *(void *)(a1 + 80);
          *(_DWORD *)std::string __p = 136446722;
          *(void *)&__p[4] = v16;
          *(_WORD *)&unsigned char __p[12] = 2050;
          *(void *)&__p[14] = v17;
          *(_WORD *)&__p[22] = 2050;
          uint64_t v41 = v18;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "BoutDetector (%{public}s): duration is negative. Time likely rolled back. startTime,%{public}.2f,endTime,%{public}.2f", __p, 0x20u);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_79;
        }
        bzero(__p, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022E9A50);
        }
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1000DC48C(__dst, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
          *(void *)&__dst[16] = *(void *)(a1 + 56);
        }
        __int16 v29 = __dst;
        if (__dst[23] < 0) {
          __int16 v29 = *(unsigned char **)__dst;
        }
        uint64_t v30 = *(void *)(a1 + 72);
        uint64_t v31 = *(void *)(a1 + 80);
        *(_DWORD *)uint64_t buf = 136446722;
        *(void *)&uint8_t buf[4] = v29;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&buf[14] = v30;
        *(_WORD *)&buf[22] = 2050;
        uint64_t v39 = v31;
        int v28 = (char *)_os_log_send_and_compose_impl();
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
      }
    }
    else
    {
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022E9A50);
      }
      long long v8 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1000DC48C(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 40);
          *(void *)&__p[16] = *(void *)(a1 + 56);
        }
        int v14 = __p;
        if (__p[23] < 0) {
          int v14 = *(unsigned char **)__p;
        }
        uint64_t v15 = *v4;
        *(_DWORD *)uint64_t buf = 136446466;
        *(void *)&uint8_t buf[4] = v14;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&buf[14] = v15;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "BoutDetector (%{public}s): zero-length bout (%{public}.2f). Ignoring.", buf, 0x16u);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_79;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022E9A50);
      }
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1000DC48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)uint64_t buf = *(_OWORD *)(a1 + 40);
        *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
      }
      uint64_t v26 = buf;
      if (buf[23] < 0) {
        uint64_t v26 = *(unsigned char **)buf;
      }
      uint64_t v27 = *v4;
      *(_DWORD *)__dst = 136446466;
      *(void *)&__dst[4] = v26;
      *(_WORD *)&__dst[12] = 2050;
      *(void *)&__dst[14] = v27;
      int v28 = (char *)_os_log_send_and_compose_impl();
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobility::BoutDetector::stopBout(BoutTerminationReason)", "%s\n", v28);
    if (v28 != __p) {
      free(v28);
    }
LABEL_79:
    *uint64_t v6 = 0;
    *(_OWORD *)uint64_t v4 = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    return;
  }
  if (qword_1024191F0 != -1) {
    dispatch_once(&qword_1024191F0, &stru_1022E9A50);
  }
  long long v9 = qword_1024191F8;
  if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(a1 + 63) < 0)
    {
      sub_1000DC48C(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 40);
      *(void *)&__p[16] = *(void *)(a1 + 56);
    }
    uint64_t v13 = __p;
    if (__p[23] < 0) {
      uint64_t v13 = *(unsigned char **)__p;
    }
    *(_DWORD *)uint64_t buf = 136446210;
    *(void *)&uint8_t buf[4] = v13;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "BoutDetector (%{public}s): Cannot stop bout, no bout in progress", buf, 0xCu);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022E9A50);
    }
    if (*(char *)(a1 + 63) < 0)
    {
      sub_1000DC48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)uint64_t buf = *(_OWORD *)(a1 + 40);
      *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
    }
    double v24 = buf;
    if (buf[23] < 0) {
      double v24 = *(unsigned char **)buf;
    }
    *(_DWORD *)__dst = 136446210;
    *(void *)&__dst[4] = v24;
    __int16 v25 = (char *)_os_log_send_and_compose_impl();
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobility::BoutDetector::stopBout(BoutTerminationReason)", "%s\n", v25);
    if (v25 != __p) {
      free(v25);
    }
  }
}

void sub_100BA6F58(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 80) == 0.0)
  {
    *(_DWORD *)(a1 + 100) = *(_DWORD *)(a1 + 32);
    *(double *)(a1 + 72) = a2;
    *(double *)(a1 + 80) = a2;
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022E9A50);
    }
    double v5 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1000DC48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)uint64_t buf = *(_OWORD *)(a1 + 40);
        *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
      }
      long long v8 = buf;
      if (buf[23] < 0) {
        long long v8 = *(unsigned char **)buf;
      }
      uint64_t v9 = *(void *)(a1 + 72);
      *(_DWORD *)std::string __p = 136446466;
      *(void *)&__p[4] = v8;
      *(_WORD *)&unsigned char __p[12] = 2050;
      *(void *)&__p[14] = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "BoutDetector (%{public}s): Identified potential walking bout... marking as in progress (start: %{public}.2f)", __p, 0x16u);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022E9A50);
      }
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1000DC48C(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 40);
        *(void *)&__p[16] = *(void *)(a1 + 56);
      }
      uint64_t v13 = __p;
      if (__p[23] < 0) {
        uint64_t v13 = *(unsigned char **)__p;
      }
      uint64_t v14 = *(void *)(a1 + 72);
      *(_DWORD *)__dst = 136446466;
      *(void *)&__dst[4] = v13;
      *(_WORD *)&__dst[12] = 2050;
      *(void *)&__dst[14] = v14;
      double v12 = (char *)_os_log_send_and_compose_impl();
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::BoutDetector::startBout(CFAbsoluteTime)", "%s\n", v12);
      goto LABEL_45;
    }
  }
  else
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022E9A50);
    }
    uint64_t v4 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1000DC48C(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 40);
        *(void *)&__p[16] = *(void *)(a1 + 56);
      }
      uint64_t v6 = __p;
      if (__p[23] < 0) {
        uint64_t v6 = *(unsigned char **)__p;
      }
      uint64_t v7 = *(void *)(a1 + 72);
      *(_DWORD *)uint64_t buf = 136446722;
      *(void *)&uint8_t buf[4] = v6;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&buf[14] = v7;
      *(_WORD *)&buf[22] = 2050;
      double v19 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "BoutDetector (%{public}s): bout already in progress (%{public}.2f), cannot start bout at startTime %{public}.2f", buf, 0x20u);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022E9A50);
      }
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1000DC48C(__dst, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
        *(void *)&__dst[16] = *(void *)(a1 + 56);
      }
      double v10 = __dst;
      if (__dst[23] < 0) {
        double v10 = *(unsigned char **)__dst;
      }
      uint64_t v11 = *(void *)(a1 + 72);
      *(_DWORD *)std::string __p = 136446722;
      *(void *)&__p[4] = v10;
      *(_WORD *)&unsigned char __p[12] = 2050;
      *(void *)&__p[14] = v11;
      *(_WORD *)&__p[22] = 2050;
      double v17 = a2;
      double v12 = (char *)_os_log_send_and_compose_impl();
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobility::BoutDetector::startBout(CFAbsoluteTime)", "%s\n", v12);
LABEL_45:
      if (v12 != buf) {
        free(v12);
      }
    }
  }
}

void sub_100BA73F8(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 80) == 0.0)
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022E9A50);
    }
    uint64_t v7 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1000DC48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)uint64_t buf = *(_OWORD *)(a1 + 40);
        *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
      }
      double v10 = buf;
      if (buf[23] < 0) {
        double v10 = *(unsigned char **)buf;
      }
      *(_DWORD *)std::string __p = 136446210;
      *(void *)&__p[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "BoutDetector (%{public}s): Cannot extend bout, no bout in progress", __p, 0xCu);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022E9A50);
      }
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1000DC48C(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 40);
        *(void *)&__p[16] = *(void *)(a1 + 56);
      }
      uint64_t v14 = __p;
      if (__p[23] < 0) {
        uint64_t v14 = *(unsigned char **)__p;
      }
      LODWORD(__dst[0]) = 136446210;
      *(void **)((char *)__dst + 4) = v14;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobility::BoutDetector::extendBout(CFAbsoluteTime)", "%s\n", v13);
      goto LABEL_45;
    }
  }
  else
  {
    *(double *)(a1 + 80) = a2;
    double v4 = *(double *)(a1 + 72);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022E9A50);
    }
    double v5 = a2 - v4;
    uint64_t v6 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1000DC48C(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 40);
        *(void *)&__p[16] = *(void *)(a1 + 56);
      }
      long long v8 = __p;
      if (__p[23] < 0) {
        long long v8 = *(unsigned char **)__p;
      }
      uint64_t v9 = *(void *)(a1 + 72);
      *(_DWORD *)uint64_t buf = 136446722;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      double v20 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "BoutDetector (%{public}s): ExtendingBout,startTime,%{public}.2f,duration,%{public}.2f", buf, 0x20u);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022E9A50);
      }
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1000DC48C(__dst, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
        uint64_t v16 = *(void *)(a1 + 56);
      }
      uint64_t v11 = __dst;
      if (v16 < 0) {
        uint64_t v11 = (void **)__dst[0];
      }
      uint64_t v12 = *(void *)(a1 + 72);
      *(_DWORD *)std::string __p = 136446722;
      *(void *)&__p[4] = v11;
      *(_WORD *)&unsigned char __p[12] = 2050;
      *(void *)&__p[14] = v12;
      *(_WORD *)&__p[22] = 2050;
      double v18 = v5;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v16) < 0) {
        operator delete(__dst[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::BoutDetector::extendBout(CFAbsoluteTime)", "%s\n", v13);
LABEL_45:
      if (v13 != buf) {
        free(v13);
      }
    }
  }
}

void sub_100BA7878(uint64_t a1, double a2)
{
  double v3 = *(double *)(a1 + 80);
  if (v3 != 0.0 && v3 > a2)
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022E9A50);
    }
    uint64_t v6 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1000DC48C(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 40);
        *(void *)&__p[16] = *(void *)(a1 + 56);
      }
      uint64_t v7 = __p;
      if (__p[23] < 0) {
        uint64_t v7 = *(unsigned char **)__p;
      }
      uint64_t v8 = *(void *)(a1 + 72);
      *(_DWORD *)uint64_t buf = 136446722;
      double v17 = v7;
      __int16 v18 = 2050;
      uint64_t v19 = v8;
      __int16 v20 = 2050;
      double v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "BoutDetector (%{public}s): Ending bout (%{public}.2f) due to timeRollback time (%{public}.2f)", buf, 0x20u);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022E9A50);
      }
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1000DC48C(__dst, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
        uint64_t v13 = *(void *)(a1 + 56);
      }
      uint64_t v9 = __dst;
      if (v13 < 0) {
        uint64_t v9 = (void **)__dst[0];
      }
      uint64_t v10 = *(void *)(a1 + 72);
      *(_DWORD *)std::string __p = 136446722;
      *(void *)&__p[4] = v9;
      *(_WORD *)&unsigned char __p[12] = 2050;
      *(void *)&__p[14] = v10;
      *(_WORD *)&__p[22] = 2050;
      double v15 = a2;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v13) < 0) {
        operator delete(__dst[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::BoutDetector::checkTimeRollback(CFAbsoluteTime)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    sub_100BA644C(a1, 4);
  }
}

void sub_100BA7B24(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 80) != 0.0)
  {
    double v3 = a2 - *(double *)(a1 + 72);
    if (v3 > *(double *)(a1 + 16))
    {
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022E9A50);
      }
      double v4 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_INFO))
      {
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1000DC48C(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 40);
          *(void *)&__p[16] = *(void *)(a1 + 56);
        }
        double v5 = __p;
        if (__p[23] < 0) {
          double v5 = *(unsigned char **)__p;
        }
        uint64_t v6 = *(void *)(a1 + 72);
        *(_DWORD *)uint64_t buf = 136446722;
        double v15 = v5;
        __int16 v16 = 2050;
        uint64_t v17 = v6;
        __int16 v18 = 2050;
        double v19 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "BoutDetector (%{public}s): Ending bout (%{public}.2f) due to maxBoutDuration (%{public}.2f)", buf, 0x20u);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022E9A50);
        }
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1000DC48C(__dst, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
          uint64_t v11 = *(void *)(a1 + 56);
        }
        uint64_t v7 = __dst;
        if (v11 < 0) {
          uint64_t v7 = (void **)__dst[0];
        }
        uint64_t v8 = *(void *)(a1 + 72);
        *(_DWORD *)std::string __p = 136446722;
        *(void *)&__p[4] = v7;
        *(_WORD *)&unsigned char __p[12] = 2050;
        *(void *)&__p[14] = v8;
        *(_WORD *)&__p[22] = 2050;
        double v13 = v3;
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v11) < 0) {
          operator delete(__dst[0]);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::BoutDetector::checkMaxBoutDuration(CFAbsoluteTime)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      sub_100BA644C(a1, 2);
    }
  }
}

void sub_100BA7DDC(id a1)
{
  qword_1024191F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

uint64_t sub_100BA7E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 166096;
  uint64_t v4 = sub_10096A580(a1, a2);
  *(void *)uint64_t v4 = off_1022E9A98;
  *(_OWORD *)(v4 + 166080) = 0u;
  *(_OWORD *)uint64_t v3 = xmmword_101D82D40;
  *(void *)(v3 + 16) = 0x800000001;
  *(unsigned char *)(v3 + 24) = 0;
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_1022E9AD0);
  }
  double v5 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLSwimAlgSimulator Instantiated", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1022E9AD0);
    }
    LOWORD(v13[0]) = 0;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLSwimAlgSimulator::CLSwimAlgSimulator(CLSwimDataStore *, float)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  int v12 = *(_DWORD *)(v3 + 16);
  uint64_t v6 = sub_1000D3E78();
  sub_10006B564(v6, buf);
  sub_10006EF84(*(uint64_t *)buf, "SimulateSwimmingStyle", &v12);
  if (v15) {
    sub_1000DB0A0(v15);
  }
  *(_DWORD *)(v3 + 16) = v12;
  uint64_t v7 = sub_1000D3E78();
  sub_10006B564(v7, buf);
  sub_1000D2988(*(uint64_t *)buf, "SimulateSwimmingLapInsertion", (BOOL *)(v3 + 24));
  if (v15) {
    sub_1000DB0A0(v15);
  }
  double v8 = *(double *)v3;
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 8) + 40))(buf);
  double v9 = v16;
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 40))(v13);
  *(double *)(v3 + 8) = v8 * (v9 / *(double *)&v13[4]);
  return a1;
}

void sub_100BA80F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26 = off_1022D4F38;
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BA8150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_10041DA28(*(void *)(a1 + 8)))
  {
    double v6 = *(double *)(a2 + 56);
    if (vabdd_f64(v6, *(double *)(a1 + 166080)) > *(double *)(a1 + 166096))
    {
      sub_10041C4AC(*(void *)(a1 + 8), *(_DWORD *)(a1 + 166112), 1, v6);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_1022E9AD0);
      }
      uint64_t v7 = qword_102419008;
      if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Simulated stroke", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419000 != -1) {
          dispatch_once(&qword_102419000, &stru_1022E9AD0);
        }
        __int16 v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLSwimAlgResultFlags CLSwimAlgSimulator::processFusion(const CLSwimFusionInput &, CLSwimEntry &)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
      double v6 = *(double *)(a2 + 56);
      *(double *)(a1 + 166080) = v6;
    }
    double v8 = vabdd_f64(v6, *(double *)(a1 + 720));
    if (v8 > sub_10096BB54(a1) && sub_10096BBA4(a1, a3))
    {
      *(void *)(a1 + 720) = *(void *)(a2 + 56);
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v9 = 0;
    }
    if (!(*(unsigned int (**)(void))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8))) {
      goto LABEL_35;
    }
    double v10 = (*(float (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8)) <= 0.00000011921
        ? 33.3300018
        : (*(float (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
    double v11 = v10 * *(double *)(a1 + 166104);
    double v12 = *(double *)(a2 + 56);
    if (vabdd_f64(v12, *(double *)(a1 + 166088)) <= v11) {
      goto LABEL_35;
    }
    if (*(unsigned char *)(a1 + 166120) && (*(_DWORD *)(a1 + 166116) & 0x80000000) != 0)
    {
      *(double *)(a1 + 166088) = v12;
    }
    else
    {
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_1022E9AD0);
      }
      double v13 = qword_102419008;
      if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Simulated turn", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419000 != -1) {
          dispatch_once(&qword_102419000, &stru_1022E9AD0);
        }
        double v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLSwimAlgResultFlags CLSwimAlgSimulator::processFusion(const CLSwimFusionInput &, CLSwimEntry &)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      if (sub_10096B988((uint64_t *)a1, *(double *)(a2 + 56), *(double *)(a2 + 56))) {
        int v14 = 2;
      }
      else {
        int v14 = 0;
      }
      uint64_t v9 = v14 | v9;
      int v15 = *(unsigned __int8 *)(a1 + 166120);
      *(void *)(a1 + 166088) = *(void *)(a2 + 56);
      if (!v15) {
        goto LABEL_35;
      }
    }
    int v16 = *(_DWORD *)(a1 + 166116) - 1;
    if (*(_DWORD *)(a1 + 166116) == -2) {
      int v16 = 8;
    }
    *(_DWORD *)(a1 + 166116) = v16;
LABEL_35:
    sub_10041EAB4(*(void *)(a1 + 8), *(double *)(a2 + 64), *(double *)(a2 + 56));
    return v9;
  }
  return 0;
}

uint64_t sub_100BA85DC(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v5 = 0u;
  memset(v4, 0, sizeof(v4));
  uint64_t result = (*(uint64_t (**)(void, _OWORD *))(**(void **)(a1 + 8) + 120))(*(void *)(a1 + 8), v4);
  if (((BYTE12(v5) + 1) & 3) == 0) {
    *(unsigned char *)(a2 + 20) = 1;
  }
  return result;
}

void *sub_100BA8690(void *result)
{
  *uint64_t result = off_1022D4F38;
  return result;
}

void sub_100BA86B0(void *a1)
{
  *a1 = off_1022D4F38;
  operator delete();
}

void sub_100BA86E0(id a1)
{
  qword_102419008 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

uint64_t sub_100BA8710(_DWORD *a1)
{
  sub_10010F274((uint64_t)v15);
  uint64_t v2 = sub_100132EFC(v16, (uint64_t)"lastStatus, ", 12);
  unsigned int v3 = *a1 + 1;
  if (v3 > 4) {
    uint64_t v4 = "---";
  }
  else {
    uint64_t v4 = off_1022E9C60[v3];
  }
  size_t v5 = strlen(v4);
  sub_100132EFC(v2, (uint64_t)v4, v5);
  sub_100132EFC(v16, (uint64_t)", started, ", 11);
  std::ostream::operator<<();
  sub_100132EFC(v16, (uint64_t)", monitoring settled, ", 22);
  std::ostream::operator<<();
  long long v6 = sub_100132EFC(v16, (uint64_t)", activeTech, ", 14);
  p_p = &__p;
  sub_10002931C(a1[2], &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  size_t v8 = strlen((const char *)p_p);
  sub_100132EFC(v6, (uint64_t)p_p, v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_100132EFC(v16, (uint64_t)", lastDistance, ", 16);
  uint64_t v9 = v15[0];
  *(void *)((char *)&v15[2] + *(void *)(v15[0] - 24)) = 1;
  *(_DWORD *)((char *)&v15[1] + *(void *)(v9 - 24)) |= 4u;
  std::ostream::operator<<();
  sub_100132EFC(v16, (uint64_t)", lastTechCheckDis, ", 20);
  uint64_t v10 = v15[0];
  *(void *)((char *)&v15[2] + *(void *)(v15[0] - 24)) = 1;
  *(_DWORD *)((char *)&v15[1] + *(void *)(v10 - 24)) |= 4u;
  std::ostream::operator<<();
  sub_100132EFC(v16, (uint64_t)", lastLocCheck, ", 16);
  uint64_t v11 = v15[0];
  *(void *)((char *)&v15[2] + *(void *)(v15[0] - 24)) = 1;
  *(_DWORD *)((char *)&v15[1] + *(void *)(v11 - 24)) |= 4u;
  std::ostream::operator<<();
  sub_100132EFC(v16, (uint64_t)", settledInsideStatus, ", 23);
  std::ostream::operator<<();
  sub_100132EFC(v16, (uint64_t)", lastProximityStateTimestamp, ", 31);
  std::ostream::operator<<();
  sub_100132EFC(v16, (uint64_t)", lastProximityState, ", 22);
  std::ostream::operator<<();
  sub_100132EFC(v16, (uint64_t)", lastApproachingState, ", 24);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v15
  v16[0] = v12;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100BA8B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100BA8B94(uint64_t a1, _DWORD *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a2[17] != 2 && *a2 == 0 && (~*(_DWORD *)(a1 + 160) & 5) == 0) {
    uint64_t v16 = 16;
  }
  else {
    uint64_t v16 = 0;
  }
  if ((a4 & 8) != 0 && (*(double *)(a1 + 96) >= 7000.0 || (*(void *)(a1 + 160) & 0x20) != 0)) {
    return v16 | 8;
  }
  if (a4)
  {
    uint64_t v18 = *(void *)(a5 + 24);
    if (!v18) {
      goto LABEL_36;
    }
    uint64_t v16 = v16 | 1;
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18 + 48))(v18, a1, a3)) {
      return v16;
    }
  }
  if ((a4 & 2) != 0)
  {
    uint64_t v19 = *(void *)(a6 + 24);
    if (!v19) {
      goto LABEL_36;
    }
    uint64_t v16 = v16 | 2;
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19 + 48))(v19, a1, a3)) {
      return v16;
    }
  }
  BOOL v21 = *(double *)(a1 + 96) > 400.0 || *(unsigned char *)(a1 + 188) != 0 || *(_DWORD *)(a1 + 180) == 2;
  if (!v21
    && *(void *)(a1 + 232) == *(void *)(a1 + 224)
    && (a4 & 4) != 0
    && (*(void *)(a1 + 160) & 0x20) == 0
    && (a8 & 1) == 0)
  {
    uint64_t v22 = *(void *)(a7 + 24);
    if (v22)
    {
      uint64_t v16 = v16 | 4;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v22 + 48))(v22, a1, a3);
      return v16;
    }
LABEL_36:
    sub_10015E48C();
  }
  return v16;
}

BOOL sub_100BA8D78(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if ((*(_DWORD *)(a1 + 96) & 0xFFFFFFF7) != 1)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022E9B10);
    }
    uint64_t v10 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      int v11 = *(_DWORD *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)__int16 v29 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Location type %d is not a GNSS type.", buf, 8u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 == -1)
    {
LABEL_55:
      uint64_t v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLFenceMonitorLogic::inflateGpsUncertaintyForSignalStrength(const CLDaemonLocation &, const CLDaemonLocationPrivate &, double &)", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
      return 0;
    }
LABEL_62:
    dispatch_once(&qword_1024193C0, &stru_1022E9B10);
    goto LABEL_55;
  }
  double v6 = *(double *)(a1 + 20);
  if (v6 <= *((double *)sub_101143458() + 3))
  {
    uint64_t v12 = *(void **)(a2 + 520);
    if (v12) {
      int v13 = *v12 != v12[1];
    }
    else {
      int v13 = 0;
    }
    if (!*sub_101143458() && (v13 & 1) == 0)
    {
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022E9B10);
      }
      int v14 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Unable to inflate GNSS uncertainty, signal strength not available.", buf, 2u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 == -1) {
        goto LABEL_55;
      }
      goto LABEL_62;
    }
    if (v13)
    {
      int v15 = *(uint64_t **)(a2 + 520);
      uint64_t v16 = *v15;
      uint64_t v17 = v15[1];
      if (*v15 != v17)
      {
        int v18 = 0;
        int v13 = 0;
        int v19 = 0;
        do
        {
          int v20 = *(unsigned __int8 *)(v16 + 24);
          if (*(unsigned char *)(v16 + 24))
          {
            double v21 = *(float *)(v16 + 16);
            if (*((double *)sub_101143458() + 2) < v21) {
              ++v18;
            }
          }
          v13 += v20;
          v16 += 28;
          ++v19;
        }
        while (v16 != v17);
        goto LABEL_39;
      }
      int v19 = 0;
      int v13 = 0;
    }
    else
    {
      int v19 = 0;
    }
    int v18 = 0;
LABEL_39:
    if (v13 <= *((_DWORD *)sub_101143458() + 1) || v18 <= *((_DWORD *)sub_101143458() + 2))
    {
      uint64_t v23 = *(void *)(a1 + 20);
      *a3 = *((void *)sub_101143458() + 3);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022E9B10);
      }
      double v24 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = *a3;
        *(_DWORD *)uint64_t buf = 134284545;
        *(void *)__int16 v29 = v23;
        *(_WORD *)&v29[8] = 2049;
        uint64_t v30 = v25;
        __int16 v31 = 1025;
        int v32 = v19;
        __int16 v33 = 1025;
        int v34 = v13;
        __int16 v35 = 1025;
        int v36 = v18;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Inflating GNSS uncertainty for bad signal condition %{private}.2f -> %{private}.2f: %{private}d total signals (%{private}d tracked, %{private}d strong)", buf, 0x28u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022E9B10);
        }
        uint64_t v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLFenceMonitorLogic::inflateGpsUncertaintyForSignalStrength(const CLDaemonLocation &, const CLDaemonLocationPrivate &, double &)", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
      return 1;
    }
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022E9B10);
    }
    uint64_t v22 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67175169;
      *(_DWORD *)__int16 v29 = v19;
      *(_WORD *)&v29[4] = 1025;
      *(_DWORD *)&v29[6] = v13;
      LOWORD(v30) = 1025;
      *(_DWORD *)((char *)&v30 + 2) = v18;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "GNSS uncertainty unchanged based on signal strength: %{private}d total signals (%{private}d tracked, %{private}d strong)", buf, 0x14u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 == -1) {
      goto LABEL_55;
    }
    goto LABEL_62;
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022E9B10);
  }
  long long v7 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 20);
    *(_DWORD *)uint64_t buf = 134283521;
    *(void *)__int16 v29 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Location uncertainty %{private}.2f above threshold, no reason to inflate uncertainty", buf, 0xCu);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 == -1) {
      goto LABEL_55;
    }
    goto LABEL_62;
  }
  return result;
}

BOOL sub_100BA94C0(uint64_t **a1)
{
  sub_100BA97E4(a1, (char **)&v21);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v20 = 0;
  if ((sub_100BAB6B4((uint64_t)&v21, (uint64_t)__p) & 1) == 0)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022E9B10);
    }
    int v13 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = __p;
      if (v20 < 0) {
        int v14 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Input is not valid: %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022E9B10);
      }
      uint64_t v17 = __p;
      if (v20 < 0) {
        uint64_t v17 = (void **)__p[0];
      }
      int v24 = 136446210;
      uint64_t v25 = v17;
      int v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLFenceMonitorLogic::isSimplePolygon(const std::vector<CLClientLocationCoordinate> &)", "%s\n", v18);
      if (v18 != buf) {
        free(v18);
      }
    }
    goto LABEL_32;
  }
  uint64_t v1 = (double *)v21;
  uint64_t v2 = v22;
  if (v21 == v22) {
    goto LABEL_32;
  }
  if ((unint64_t)((char *)v22 - (unsigned char *)v21) >= 0x20 && (char *)v21 + 16 != (char *)v22)
  {
    do
    {
      int v4 = sub_100BAC7EC(v1, v1 + 2);
      if (v1 + 4 == v2) {
        int v5 = 1;
      }
      else {
        int v5 = v4;
      }
      v1 += 2;
    }
    while (v5 != 1);
    if (v4)
    {
LABEL_32:
      BOOL v15 = 0;
      goto LABEL_35;
    }
  }
  long long v7 = (double **)v23[0];
  double v6 = (double **)v23[1];
  while (v7 != v6)
  {
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    if (*v7 == v9) {
      goto LABEL_34;
    }
    if ((unint64_t)((char *)v9 - (char *)v8) >= 0x20 && v8 + 2 != v9)
    {
      do
      {
        int v11 = sub_100BAC7EC(v8, v8 + 2);
        if (v8 + 4 == v9) {
          int v12 = 1;
        }
        else {
          int v12 = v11;
        }
        v8 += 2;
      }
      while (v12 != 1);
      if (v11) {
        goto LABEL_34;
      }
    }
    v7 += 3;
  }
  long long v7 = v6;
LABEL_34:
  BOOL v15 = v7 == v6;
LABEL_35:
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  *(void *)uint64_t buf = v23;
  sub_1001DCABC((void ***)buf);
  if (v21)
  {
    uint64_t v22 = (double *)v21;
    operator delete(v21);
  }
  return v15;
}

void sub_100BA97AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_100BA9974((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_100BA97E4(uint64_t **a1@<X0>, char **a2@<X8>)
{
  *((_OWORD *)a2 + 1) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *(_OWORD *)a2 = 0u;
  unsigned int v3 = *a1;
  int v4 = a1[1];
  if (*a1 != v4)
  {
    int v5 = 0;
    double v6 = a2 + 2;
    do
    {
      uint64_t v7 = *v3;
      uint64_t v8 = v3[1];
      if ((unint64_t)v5 >= *v6)
      {
        uint64_t v9 = (v5 - *a2) >> 4;
        if ((unint64_t)(v9 + 1) >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v10 = *v6 - (void)*a2;
        uint64_t v11 = v10 >> 3;
        if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          int v13 = (char *)sub_1000C571C((uint64_t)(a2 + 2), v12);
        }
        else {
          int v13 = 0;
        }
        int v14 = &v13[16 * v9];
        *(void *)int v14 = v8;
        *((void *)v14 + 1) = v7;
        uint64_t v16 = *a2;
        BOOL v15 = a2[1];
        uint64_t v17 = v14;
        if (v15 != *a2)
        {
          do
          {
            *((_OWORD *)v17 - 1) = *((_OWORD *)v15 - 1);
            v17 -= 16;
            v15 -= 16;
          }
          while (v15 != v16);
          BOOL v15 = *a2;
        }
        int v5 = v14 + 16;
        *a2 = v17;
        a2[1] = v14 + 16;
        a2[2] = &v13[16 * v12];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *(void *)int v5 = v8;
        *((void *)v5 + 1) = v7;
        v5 += 16;
      }
      a2[1] = v5;
      v3 += 2;
    }
    while (v3 != v4);
  }
  uint64_t v20 = 0x3FF0000000000000;
  sub_10075CAE8((double **)a2, (double *)&v20);
  int v18 = (double **)a2[3];
  int v19 = (double **)a2[4];
  while (v18 != v19)
  {
    sub_10075CCB4(v18, (double *)&v20);
    v18 += 3;
  }
}

void sub_100BA9954(_Unwind_Exception *a1)
{
  sub_100BA9974(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BA9974(uint64_t a1)
{
  int v4 = (void **)(a1 + 24);
  sub_1001DCABC(&v4);
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

BOOL sub_100BA99C0(uint64_t a1)
{
  unsigned int v3 = *(double **)(a1 + 224);
  int v4 = *(double **)(a1 + 232);
  uint64_t v2 = (uint64_t **)(a1 + 224);
  if (v4 == v3)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022E9B10);
    }
    double v6 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v7 = (uint64_t)(*(void *)(a1 + 232) - *(void *)(a1 + 224)) >> 4;
      *(_DWORD *)uint64_t buf = 134283521;
      uint64_t v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Only check polygonal fences, %{private}lu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022E9B10);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLFenceMonitorLogic::isCompliant(const CLFenceManager_Type::Fence &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    return 0;
  }
  if (*v3 != *(v4 - 2) || v3[1] != *(v4 - 1)) {
    return 0;
  }

  return sub_100BA94C0(v2);
}

uint64_t sub_100BA9BF4(int8x16_t *a1, uint64_t **a2)
{
  int8x16_t v6 = vextq_s8(*a1, *a1, 8uLL);
  sub_100BA97E4(a2, (char **)__p);
  unsigned int v2 = sub_10075D7F8((double *)v6.i64, (uint64_t)__p);
  uint64_t v7 = (void **)&v5;
  sub_1001DCABC(&v7);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v2 >> 31;
}

void sub_100BA9C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100BA9C80(int8x16_t *a1, uint64_t **a2, double a3)
{
  if (sub_100BA9BF4(a1, a2))
  {
    if (sub_100BA9CFC(a1, (uint64_t)a2, 0) >= a3) {
      return 1;
    }
    return 0xFFFFFFFFLL;
  }
  if (sub_100BA9CFC(a1, (uint64_t)a2, 1) < a3) {
    return 0xFFFFFFFFLL;
  }
  return 0;
}

double sub_100BA9CFC(int8x16_t *a1, uint64_t a2, int a3)
{
  uint64_t v3 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4;
  if ((unint64_t)(v3 - 102) > 0xFFFFFFFFFFFFFF9DLL)
  {
    sub_100BA97E4((uint64_t **)a2, (char **)&__p);
    int8x16_t v17 = vextq_s8(*a1, *a1, 8uLL);
    double v16 = 1.79769313e308;
    if (a3)
    {
      *(void *)uint64_t buf = &v16;
      *(void *)&uint8_t buf[8] = &v17;
      *(void *)int v18 = buf;
      sub_100BAA33C((uint64_t)&__p, (double ***)v18);
      uint64_t v8 = (uint64_t)v22;
      uint64_t v9 = v23;
      while ((void *)v8 != v9)
      {
        sub_100BAA33C(v8, (double ***)v18);
        v8 += 24;
      }
    }
    else
    {
      if ((void)__p == *((void *)&__p + 1))
      {
        for (unint64_t i = v22; ; i += 3)
        {
          if (i == v23)
          {
            *(void *)int v18 = &off_1022E9C48;
            *(void *)uint64_t buf = "/AppleInternal/Library/BuildRoots/7a5643da-a7fb-11ef-987a-36218cb420d5/Applications/Xcode.a"
                             "pp/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/"
                             "usr/local/include/boost/geometry/algorithms/detail/throw_on_empty_input.hpp";
            *(void *)&uint8_t buf[8] = "void boost::geometry::detail::throw_on_empty_input(const Geometry &) [Geometry = boost:"
                                 ":geometry::model::polygon<boost::geometry::model::point<double, 2, boost::geometry::cs:"
                                 ":spherical_equatorial<boost::geometry::degree>>>]";
            *(void *)&uint8_t buf[16] = 54;
            sub_100BAA4A8((uint64_t)v18, (int8x16_t *)buf);
          }
          if (*i != i[1]) {
            break;
          }
        }
      }
      *(void *)uint64_t buf = 0x3FF0000000000000;
      sub_100BAB32C((double *)v17.i64, (uint64_t)&__p, (double *)buf);
      double v16 = v10 * 6378135.0;
    }
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022E9B10);
    }
    uint64_t v11 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134283777;
      *(double *)&uint8_t buf[4] = v16;
      *(_WORD *)&unsigned char buf[12] = 1025;
      *(_DWORD *)&buf[14] = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Fence: distance to nearest point %{private}.02lf (%{private}d)", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022E9B10);
      }
      *(_DWORD *)int v18 = 134283777;
      *(double *)&v18[4] = v16;
      __int16 v19 = 1025;
      int v20 = a3;
      BOOL v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "double distanceToNearestPointOnPolygon(const CLClientLocationCoordinate &, const std::vector<CLClientLocationCoordinate> &, BOOL)", "%s\n", v15);
      if (v15 != buf) {
        free(v15);
      }
    }
    double v5 = v16;
    *(void *)uint64_t buf = &v22;
    sub_1001DCABC((void ***)buf);
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022E9B10);
    }
    int v4 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Attempting to calculate distance to an invalid polygon, %{public}lu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022E9B10);
      }
      LODWORD(__p) = 134349056;
      *(void *)((char *)&__p + 4) = v3;
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "double distanceToNearestPointOnPolygon(const CLClientLocationCoordinate &, const std::vector<CLClientLocationCoordinate> &, BOOL)", "%s\n", v14);
      if (v14 != buf) {
        free(v14);
      }
    }
    return 1.79769313e308;
  }
  return v5;
}

void sub_100BAA174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

double sub_100BAA1A8(double *a1, uint64_t a2, double *a3)
{
  double v4 = sub_1001ABE80(a1, a2, a3);
  if (*(void *)(a2 + 232) == *(void *)(a2 + 224)) {
    return v4 - sub_100044A78(a2);
  }
  return v4;
}

void sub_100BAA2DC(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100BAA30C(id a1)
{
  qword_1024193C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_100BAA33C(uint64_t a1, double ***a2)
{
  unsigned int v2 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  if (*(void **)a1 != v3)
  {
    if (v2 + 2 == v3)
    {
      unint64_t v12 = *a2;
      int v14 = **a2;
      int v13 = (*a2)[1];
      uint64_t v15 = v2[1];
      *(void *)&long long v20 = *v2;
      *((void *)&v20 + 1) = v15;
      uint64_t v21 = v20;
      uint64_t v22 = v15;
      uint64_t v19 = 0x3FF0000000000000;
      double v16 = sub_100BAAC00((uint64_t)&v19, v13, (double *)&v20, (double *)&v21);
      long double v17 = asin(sqrt(v16));
      double v18 = (v17 + v17) * 6378135.0;
      if (v18 >= *v14) {
        double v18 = *v14;
      }
      **unint64_t v12 = v18;
    }
    else
    {
      do
      {
        double v5 = *a2;
        uint64_t v7 = **a2;
        int8x16_t v6 = (*a2)[1];
        long long v20 = *(_OWORD *)v2;
        uint64_t v21 = v2[2];
        uint64_t v22 = v2[3];
        uint64_t v19 = 0x3FF0000000000000;
        double v8 = sub_100BAAC00((uint64_t)&v19, v6, (double *)&v20, (double *)&v21);
        long double v9 = asin(sqrt(v8));
        double v10 = (v9 + v9) * 6378135.0;
        if (v10 >= *v7) {
          double v10 = *v7;
        }
        **double v5 = v10;
        uint64_t v11 = v2 + 4;
        v2 += 2;
      }
      while (v11 != v3);
    }
  }
}

void sub_100BAA4A8(uint64_t a1, int8x16_t *a2)
{
  exception = __cxa_allocate_exception(0x38uLL);
  sub_100BAA514((uint64_t)exception, a1, a2);
}

void sub_100BAA4FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int8x16_t sub_100BAA514(uint64_t a1, uint64_t a2, int8x16_t *a3)
{
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = &off_1022E9BD0;
  *(void *)(a1 + 8) = off_1022E9C00;
  *(void *)(a1 + 16) = off_1022E9C28;
  *(_DWORD *)(a1 + 48) = a3[1].i32[0];
  int8x16_t result = vextq_s8(*a3, *a3, 8uLL);
  *(int8x16_t *)(a1 + 32) = result;
  return result;
}

uint64_t sub_100BAA590(uint64_t a1)
{
  *(void *)(a1 + 16) = &off_10229E700;
  sub_1001E79C0((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

void sub_100BAA5E4()
{
}

void sub_100BAA7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1001E79C0(&a9);
  sub_1001E79C0(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void sub_100BAA81C(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x38uLL);
  sub_100BAAAD0((uint64_t)exception, a1);
}

void sub_100BAA864(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100BAA878(uint64_t a1)
{
  *(void *)(a1 + 16) = &off_10229E700;
  sub_1001E79C0((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));

  operator delete();
}

void sub_100BAA8EC(uint64_t a1)
{
  *(void *)(a1 + 8) = &off_10229E700;
  sub_1001E79C0((uint64_t *)(a1 + 16));

  std::exception::~exception((std::exception *)a1);
}

void sub_100BAA948(uint64_t a1)
{
  *(void *)(a1 + 8) = &off_10229E700;
  sub_1001E79C0((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);

  operator delete();
}

const char *sub_100BAA9C0()
{
  return "Boost.Geometry Empty-Input exception";
}

void sub_100BAA9CC(void *a1)
{
  *a1 = &off_10229E700;
  sub_1001E79C0(a1 + 1);

  std::exception::~exception((std::exception *)a1 - 1);
}

void sub_100BAAA24(void *a1)
{
  *a1 = &off_10229E700;
  sub_1001E79C0(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 1);

  operator delete();
}

void sub_100BAAA98(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

uint64_t sub_100BAAAD0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10229E6D0;
  *(void *)(a1 + 8) = &off_1022E9C48;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &off_10229E700;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &off_1022E9BD0;
  *(void *)(a1 + 8) = off_1022E9C00;
  *(void *)(a1 + 16) = off_1022E9C28;
  return a1;
}

void sub_100BAABEC(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

long double sub_100BAAC00(uint64_t a1, double *a2, double *a3, double *a4)
{
  double v7 = sub_100BAB0A4(a3, a2);
  double v8 = sub_100BAB0A4(a3, a4);
  if (v8 != 0.0)
  {
    double v10 = v8;
    if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_7;
    }
    double v11 = fabs(v8);
    double v12 = 2.22044605e-16;
    if (v11 >= 1.0) {
      double v12 = v11 * 2.22044605e-16;
    }
    if (v11 > v12)
    {
LABEL_7:
      double v53 = v7;
      double v51 = sub_100BAB0A4(a4, a2);
      double v13 = *a3;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_10241D6E0))
      {
        qword_10241D6D8 = 0x3F91DF46A2529D39;
        __cxa_guard_release(&qword_10241D6E0);
      }
      double v52 = v10;
      double v14 = *(double *)&qword_10241D6D8;
      double v15 = a3[1];
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
      {
        double v38 = v15;
        int v39 = __cxa_guard_acquire(&qword_10241D6E0);
        double v15 = v38;
        if (v39)
        {
          qword_10241D6D8 = 0x3F91DF46A2529D39;
          __cxa_guard_release(&qword_10241D6E0);
          double v15 = v38;
        }
      }
      double v16 = *(double *)&qword_10241D6D8;
      double v17 = *a4;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
      {
        double v40 = v15;
        int v41 = __cxa_guard_acquire(&qword_10241D6E0);
        double v15 = v40;
        if (v41)
        {
          qword_10241D6D8 = 0x3F91DF46A2529D39;
          __cxa_guard_release(&qword_10241D6E0);
          double v15 = v40;
        }
      }
      double v18 = *(double *)&qword_10241D6D8;
      double v19 = a4[1];
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
      {
        double v42 = v15;
        int v43 = __cxa_guard_acquire(&qword_10241D6E0);
        double v15 = v42;
        if (v43)
        {
          qword_10241D6D8 = 0x3F91DF46A2529D39;
          __cxa_guard_release(&qword_10241D6E0);
          double v15 = v42;
        }
      }
      double v20 = *(double *)&qword_10241D6D8;
      double v21 = *a2;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
      {
        double v50 = v15;
        int v44 = __cxa_guard_acquire(&qword_10241D6E0);
        double v15 = v50;
        if (v44)
        {
          qword_10241D6D8 = 0x3F91DF46A2529D39;
          __cxa_guard_release(&qword_10241D6E0);
          double v15 = v50;
        }
      }
      double v22 = v13 * v14;
      double v23 = v15 * v16;
      double v47 = v19 * v20;
      double v49 = v17 * v18;
      double v24 = v21 * *(double *)&qword_10241D6D8;
      double v25 = a2[1];
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_10241D6E0))
      {
        qword_10241D6D8 = 0x3F91DF46A2529D39;
        __cxa_guard_release(&qword_10241D6E0);
      }
      double v26 = v25 * *(double *)&qword_10241D6D8;
      __double2 v27 = __sincos_stret(v24 - v22);
      __double2 v28 = __sincos_stret(v23);
      double v45 = v24;
      __double2 v29 = __sincos_stret(v26);
      double v46 = atan2(v27.__sinval * v29.__cosval, v27.__cosval * -(v28.__sinval * v29.__cosval) + v28.__cosval * v29.__sinval);
      __double2 v30 = __sincos_stret(v49 - v22);
      __double2 v31 = __sincos_stret(v47);
      double v48 = atan2(v30.__sinval * v31.__cosval, v30.__cosval * -(v28.__sinval * v31.__cosval) + v28.__cosval * v31.__sinval);
      long double v32 = atan2(v28.__cosval * v30.__sinval, v28.__cosval * v31.__sinval * v30.__cosval - v28.__sinval * v31.__cosval)
          + -3.14159265;
      __double2 v33 = __sincos_stret(v45 - v49);
      long double v34 = atan2(v33.__sinval * v29.__cosval, v33.__cosval * -(v31.__sinval * v29.__cosval) + v31.__cosval * v29.__sinval)- v32;
      double v7 = v53;
      long double v35 = v53 * cos(v46 - v48) / v52;
      double v36 = cos(v34);
      if (v35 <= 0.0 || v51 * v36 / v52 <= 0.0)
      {
        if (v51 < v53) {
          return v51;
        }
      }
      else
      {
        long double v37 = sin(v46 - v48);
        return v53 * v37 * (v37 - v53 * v37) / (sqrt(0.25 - v53 * v37 * (v37 - v53 * v37)) + 0.5);
      }
    }
  }
  return v7;
}

long double sub_100BAB0A4(double *a1, double *a2)
{
  double v2 = *a1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
  {
    __double2 v28 = a2;
    long double v32 = a1;
    int v19 = __cxa_guard_acquire(&qword_10241D6E0);
    a2 = v28;
    a1 = v32;
    if (v19)
    {
      qword_10241D6D8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_10241D6E0);
      a2 = v28;
      a1 = v32;
    }
  }
  double v3 = *(double *)&qword_10241D6D8;
  double v4 = a1[1];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
  {
    __double2 v29 = a2;
    double v33 = v3;
    int v20 = __cxa_guard_acquire(&qword_10241D6E0);
    double v3 = v33;
    a2 = v29;
    if (v20)
    {
      qword_10241D6D8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_10241D6E0);
      double v3 = v33;
      a2 = v29;
    }
  }
  double v5 = *(double *)&qword_10241D6D8;
  double v6 = *a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
  {
    __double2 v30 = a2;
    double v34 = v3;
    double v24 = v6;
    double v26 = v5;
    int v21 = __cxa_guard_acquire(&qword_10241D6E0);
    double v6 = v24;
    double v5 = v26;
    double v3 = v34;
    a2 = v30;
    if (v21)
    {
      qword_10241D6D8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_10241D6E0);
      double v6 = v24;
      double v5 = v26;
      double v3 = v34;
      a2 = v30;
    }
  }
  double v7 = *(double *)&qword_10241D6D8;
  double v8 = a2[1];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
  {
    double v31 = v8;
    double v35 = v3;
    double v25 = v6;
    double v27 = v5;
    double v23 = v7;
    int v22 = __cxa_guard_acquire(&qword_10241D6E0);
    double v7 = v23;
    double v6 = v25;
    double v5 = v27;
    double v8 = v31;
    double v3 = v35;
    if (v22)
    {
      qword_10241D6D8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_10241D6E0);
      double v7 = v23;
      double v6 = v25;
      double v5 = v27;
      double v8 = v31;
      double v3 = v35;
    }
  }
  double v9 = v6 * v7;
  long double v10 = v4 * v5;
  double v11 = v2 * v3;
  long double v12 = v8 * *(double *)&qword_10241D6D8;
  long double v13 = sin((v8 * *(double *)&qword_10241D6D8 - v10) * 0.5);
  long double v14 = v13 * v13;
  double v15 = cos(v10);
  long double v16 = v15 * cos(v12);
  long double v17 = sin((v9 - v11) * 0.5);
  return v14 + v16 * (v17 * v17);
}

void sub_100BAB32C(double *a1, uint64_t a2, double *a3)
{
  double v5 = *(double **)a2;
  double v6 = *(double **)(a2 + 8);
  if ((unint64_t)v6 - *(void *)a2 >= 0x40)
  {
    char v16 = 0;
    double v17 = 0.0;
    uint64_t v18 = 0;
    char v19 = 0;
    if (v5 + 2 != v6)
    {
      do
      {
        if (!sub_10075D9A4((uint64_t)&v16, a1, v5, v5 + 2, (uint64_t)&v17)) {
          break;
        }
        double v8 = v5 + 4;
        v5 += 2;
      }
      while (v8 != v6);
      if (v19) {
        goto LABEL_6;
      }
      if (v18 && HIDWORD(v18) && (int)v18 >= 1)
      {
        if (!(LODWORD(v17) + HIDWORD(v17))) {
          goto LABEL_13;
        }
LABEL_6:
        sub_100BAB4E8(a1, *(double ***)(a2 + 24), *(double ***)(a2 + 32), a3);
        return;
      }
      if (LODWORD(v17)) {
        goto LABEL_6;
      }
    }
LABEL_13:
    double v5 = *(double **)a2;
    double v6 = *(double **)(a2 + 8);
  }
  if (v6 != v5)
  {
    double v17 = *a3;
    double v9 = v5 + 2;
    if (v5 + 2 == v6)
    {
      sub_100BAAC00((uint64_t)&v17, a1, v5, v5);
      long double v12 = v5;
    }
    else
    {
      double v10 = sub_100BAAC00((uint64_t)&v17, a1, v5, v5 + 2);
      if (v5 + 4 == v6)
      {
LABEL_22:
        long double v12 = v5 + 2;
      }
      else
      {
        double v11 = v10;
        while (1)
        {
          long double v12 = v9 + 2;
          double v13 = sub_100BAAC00((uint64_t)&v17, a1, v9, v9 + 2);
          if (v13 == 0.0) {
            break;
          }
          if (v13 < v11)
          {
            double v11 = v13;
            double v5 = v9;
          }
          long double v14 = v9 + 4;
          v9 += 2;
          if (v14 == v6) {
            goto LABEL_22;
          }
        }
        double v5 = v9;
      }
    }
    double v17 = *a3;
    double v15 = sub_100BAAC00((uint64_t)&v17, a1, v5, v12);
    asin(sqrt(v15));
  }
}

long double sub_100BAB4E8(double *a1, double **a2, double **a3, double *a4)
{
  double v4 = 0.0;
  if (a2 == a3) {
    return v4;
  }
  double v7 = a2;
  while (1)
  {
    double v9 = *v7;
    double v10 = v7[1];
    if ((unint64_t)((char *)v10 - (char *)*v7) < 0x40) {
      goto LABEL_14;
    }
    char v24 = 0;
    double v25 = 0.0;
    uint64_t v26 = 0;
    char v27 = 0;
    if (v9 + 2 == v10) {
      goto LABEL_14;
    }
    do
    {
      if (!sub_10075D9A4((uint64_t)&v24, a1, v9, v9 + 2, (uint64_t)&v25)) {
        break;
      }
      double v11 = v9 + 4;
      v9 += 2;
    }
    while (v11 != v10);
    if (v27) {
      goto LABEL_14;
    }
    if (!v26 || !HIDWORD(v26) || (int)v26 < 1) {
      break;
    }
    if (LODWORD(v25) + HIDWORD(v25)) {
      goto LABEL_16;
    }
LABEL_14:
    v7 += 3;
    if (v7 == a3) {
      return v4;
    }
  }
  if (!LODWORD(v25)) {
    goto LABEL_14;
  }
LABEL_16:
  double v13 = *v7;
  long double v14 = v7[1];
  if (v14 != *v7)
  {
    double v25 = *a4;
    double v15 = v13 + 2;
    if (v13 + 2 == v14)
    {
      sub_100BAAC00((uint64_t)&v25, a1, v13, v13);
      uint64_t v18 = v13;
    }
    else
    {
      double v16 = sub_100BAAC00((uint64_t)&v25, a1, v13, v13 + 2);
      if (v13 + 4 == v14)
      {
LABEL_24:
        uint64_t v18 = v13 + 2;
      }
      else
      {
        double v17 = v16;
        while (1)
        {
          uint64_t v18 = v15 + 2;
          double v19 = sub_100BAAC00((uint64_t)&v25, a1, v15, v15 + 2);
          if (v19 == 0.0) {
            break;
          }
          if (v19 < v17)
          {
            double v17 = v19;
            double v13 = v15;
          }
          int v20 = v15 + 4;
          v15 += 2;
          if (v20 == v14) {
            goto LABEL_24;
          }
        }
        double v13 = v15;
      }
    }
    double v25 = *a4;
    double v21 = v25;
    double v22 = sub_100BAAC00((uint64_t)&v25, a1, v13, v18);
    long double v23 = asin(sqrt(v22));
    return v21 * (v23 + v23);
  }
  return v4;
}

uint64_t sub_100BAB6B4(uint64_t a1, uint64_t a2)
{
  sub_10048B72C((uint64_t)v9);
  double v8 = (std::string *)v9;
  uint64_t v4 = sub_100BAB838(a1, &v8, (uint64_t)&v6);
  std::stringbuf::str();
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = v6;
  *(void *)(a2 + 16) = v7;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return v4;
}

void sub_100BAB820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_10048B8C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BAB838(uint64_t a1, std::string **a2, uint64_t a3)
{
  if (sub_100BABDBC((double **)a1, a2, a3))
  {
    long long v6 = *(double ***)(a1 + 24);
    uint64_t v7 = *(double ***)(a1 + 32);
    while (v6 != v7)
    {
      if ((sub_100BAE000(v6, a2, a3) & 1) == 0) {
        return 0;
      }
      v6 += 3;
    }
    long long v18 = 0u;
    long long v19 = 0u;
    long long v17 = 0u;
    BOOL v9 = sub_100BABA2C(a1, &v17, a2, a3);
    if ((void)v18 == *((void *)&v17 + 1))
    {
      if (!v9) {
        goto LABEL_15;
      }
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v10 = (void *)(*((void *)&v17 + 1) + 8 * ((*((void *)&v19 + 1) + (void)v19) / 0x14uLL));
    }
    else
    {
      if (!v9) {
        goto LABEL_15;
      }
      char v10 = (void *)(*((void *)&v17 + 1) + 8 * ((*((void *)&v19 + 1) + (void)v19) / 0x14uLL));
      uint64_t v11 = *(void *)(*((void *)&v17 + 1) + 8 * ((unint64_t)v19 / 0x14))
          + 200 * ((unint64_t)v19 % 0x14);
      uint64_t v12 = *v10 + 200 * ((*((void *)&v19 + 1) + (void)v19) % 0x14uLL);
    }
    if (sub_100BB9E70(*(void *)(a1 + 24), *(void *)(a1 + 32), (double **)a1, (void *)(*((void *)&v17 + 1) + 8 * ((unint64_t)v19 / 0x14)), v11, (uint64_t)v10, v12, a2, a3))
    {
      if ((void)v18 == *((void *)&v17 + 1))
      {
        uint64_t v13 = 0;
        uint64_t v15 = 0;
        long double v14 = (void *)(*((void *)&v17 + 1) + 8 * ((*((void *)&v19 + 1) + (void)v19) / 0x14uLL));
      }
      else
      {
        uint64_t v13 = *(void *)(*((void *)&v17 + 1) + 8 * ((unint64_t)v19 / 0x14))
            + 200 * ((unint64_t)v19 % 0x14);
        long double v14 = (void *)(*((void *)&v17 + 1) + 8 * ((*((void *)&v19 + 1) + (void)v19) / 0x14uLL));
        uint64_t v15 = *v14 + 200 * ((*((void *)&v19 + 1) + (void)v19) % 0x14uLL);
      }
      uint64_t v8 = sub_100BABB8C(a1, (void *)(*((void *)&v17 + 1) + 8 * ((unint64_t)v19 / 0x14)), v13, (uint64_t)v14, v15, a2);
      goto LABEL_18;
    }
LABEL_15:
    uint64_t v8 = 0;
LABEL_18:
    sub_100BCA160(&v17);
    return v8;
  }
  return 0;
}

void sub_100BABA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100BCA160((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_100BABA2C(uint64_t a1, void *a2, std::string **a3, uint64_t a4)
{
  __int16 v11 = 0;
  long long __p = 0;
  long long v18 = 0;
  uint64_t v19 = 0;
  sub_100BAE2C8(a1, (uint64_t)&v11 + 1, (float64x2_t **)&__p, a4, 0, 0xAuLL);
  v14[0] = a1;
  v14[1] = a4;
  _OWORD v14[2] = (char *)&v11 + 1;
  _DWORD v14[3] = a2;
  v14[4] = &v11;
  int v15 = 0;
  char v16 = 1;
  uint64_t v12 = a4;
  uint64_t v13 = a4;
  sub_100BB0E78((uint64_t *)&__p, (uint64_t)v14, (uint64_t)&v13, (uint64_t)&v12, 0x10uLL);
  if (__p)
  {
    long long v18 = __p;
    operator delete(__p);
  }
  int v8 = v11;
  if ((_BYTE)v11)
  {
    uint64_t v9 = a2[1];
    if (a2[2] == v9
      || *(void *)(v9 + 8 * (a2[4] / 0x14uLL)) + 200 * (a2[4] % 0x14uLL) == *(void *)(v9
                                                                                        + 8
                                                                                        * ((a2[5] + a2[4])
                                                                                         / 0x14uLL))
                                                                            + 200 * ((a2[5] + a2[4]) % 0x14uLL))
    {
      sub_101A80D40();
    }
    sub_100BAC5C8(a3, 21);
    sub_100BB9944(*a3, a2);
  }
  else
  {
    sub_100BAC5C8(a3, 0);
  }
  return v8 == 0;
}

void sub_100BABB6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BABB8C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, std::string **a6)
{
  sub_100BC91DC(v20, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3) + 1);
  if (a3 != a5)
  {
    while (1)
    {
      long long v24 = (unint64_t)(*(void *)(a3 + 64) + 1);
      char v10 = sub_100BC9358(&v21, &v24, &v24);
      long long v24 = (unint64_t)(*(void *)(a3 + 144) + 1);
      __int16 v11 = sub_100BC9358(&v21, &v24, &v24);
      uint64_t v12 = sub_100BC8EB8((uint64_t)v20, a3);
      uint64_t v13 = (uint64_t)v12;
      *(void *)&long long v24 = v10;
      uint64_t v25 = (uint64_t)v12;
      if (v22 == (void **)v10) {
        break;
      }
      if (v22 == (void **)v12)
      {
        int v18 = 203;
        uint64_t v19 = "v2 != m_vertices.end()";
LABEL_14:
        __assert_rtn("add_edge", "complement_graph.hpp", v18, v19);
      }
      sub_100BC9960((uint64_t **)(v23 + 24 * v10[4]), (uint64_t)&v25, &v25);
      sub_100BC9960((uint64_t **)(v23 + 24 * *(void *)(v25 + 32)), (uint64_t)&v24, (uint64_t *)&v24);
      *(void *)&long long v24 = v11;
      uint64_t v25 = v13;
      if (v22 == (void **)v11) {
        break;
      }
      sub_100BC9960((uint64_t **)(v23 + 24 * v11[4]), (uint64_t)&v25, &v25);
      sub_100BC9960((uint64_t **)(v23 + 24 * *(void *)(v25 + 32)), (uint64_t)&v24, (uint64_t *)&v24);
      a3 += 200;
      if (a3 - *a2 == 4000)
      {
        uint64_t v14 = a2[1];
        ++a2;
        a3 = v14;
      }
      if (a3 == a5) {
        goto LABEL_8;
      }
    }
    int v18 = 202;
    uint64_t v19 = "v1 != m_vertices.end()";
    goto LABEL_14;
  }
LABEL_8:
  int v15 = sub_100BC909C(v20);
  if (v15) {
    int v16 = 32;
  }
  else {
    int v16 = 0;
  }
  sub_100BAC5C8(a6, v16);
  *(void *)&long long v24 = &v23;
  sub_100BC92CC((void ***)&v24);
  sub_1000F5BB0((uint64_t)&v21, v22[0]);
  return v15 ^ 1u;
}

void sub_100BABD98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100BC9194((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BABDBC(double **a1, std::string **a2, uint64_t a3)
{
  long long v6 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 == v7)
  {
    sub_100BAC5C8(a2, 0);
  }
  else
  {
    do
    {
      BOOL v8 = (*(void *)v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && ((void)v6[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
      int v9 = !v8;
      if (!v8) {
        break;
      }
      v6 += 2;
    }
    while (v6 != v7);
    if (v9) {
      int v10 = 60;
    }
    else {
      int v10 = 0;
    }
    sub_100BAC5C8(a2, v10);
    uint64_t result = 0;
    if (v9) {
      return result;
    }
  }
  uint64_t v12 = a1[1];
  if ((unint64_t)((char *)v12 - (char *)*a1) <= 0x3F)
  {
    uint64_t v13 = a2;
    int v14 = 10;
LABEL_21:
    sub_100BAC5C8(v13, v14);
    return 0;
  }
  v19[0] = *a1;
  v19[1] = v12;
  if (sub_100BABF30(v19) <= 3)
  {
    uint64_t v13 = a2;
    int v14 = 11;
    goto LABEL_21;
  }
  uint64_t result = sub_100BAC0C0(a1, a2);
  if (result)
  {
    int v15 = *a1;
    int v16 = a1[1];
    if ((unint64_t)((char *)v16 - (char *)*a1) >= 0x20)
    {
      long long v17 = v15 + 2;
      while (v17 != v16 && (sub_100BAC7EC(v15, v15 + 2) & 1) == 0)
      {
        long long v17 = v15 + 4;
        v15 += 2;
      }
    }
    sub_100BAC5C8(a2, 0);
    char v18 = sub_100BAC224(a1, a2, a3);
    uint64_t result = 0;
    if ((v18 & 1) == 0) {
      return sub_100BAC474(a1, a2);
    }
  }
  return result;
}

unint64_t sub_100BABF30(double **a1)
{
  double v2 = *a1;
  uint64_t v1 = a1[1];
  unint64_t v3 = (char *)v1 - (char *)*a1;
  if (v3 < 0x20) {
    return v3 >> 4;
  }
  unint64_t v6 = 0;
  do
  {
    unint64_t v4 = v6 + 1;
    if (v2 == v1) {
      break;
    }
    uint64_t v7 = v2;
    while (1)
    {
      double v23 = *v7;
      double v22 = v7[1];
      sub_10075D084(&v23, &v22, 1);
      double v8 = v22;
      double v9 = v23;
      double v10 = *v2;
      double v22 = v2[1];
      double v23 = v10;
      sub_10075D084(&v23, &v22, 1);
      if (v9 != v23)
      {
        if ((*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          break;
        }
        double v12 = vabdd_f64(v9, v23);
        double v13 = fabs(v9);
        double v14 = fabs(v23);
        if (v13 >= v14) {
          double v14 = v13;
        }
        double v15 = v14 >= 1.0 ? v14 * 2.22044605e-16 : 2.22044605e-16;
        if (v12 > v15) {
          break;
        }
      }
      if (v8 != v22)
      {
        if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          break;
        }
        double v17 = vabdd_f64(v8, v22);
        double v18 = fabs(v8);
        double v19 = fabs(v22);
        if (v18 >= v19) {
          double v19 = v18;
        }
        double v20 = v19 >= 1.0 ? v19 * 2.22044605e-16 : 2.22044605e-16;
        if (v17 > v20) {
          break;
        }
      }
      v7 += 2;
      if (v7 == v1) {
        return v4;
      }
    }
    if (v7 == v1) {
      break;
    }
    double v2 = v7;
  }
  while (v6++ < 4);
  return v4;
}

uint64_t sub_100BAC0C0(double **a1, std::string **a2)
{
  double v2 = *a1;
  unint64_t v3 = a1[1];
  if (*a1 == v3) {
    sub_101A80D6C();
  }
  double v5 = *v2;
  double v19 = v2[1];
  double v20 = v5;
  sub_10075D084(&v20, &v19, 1);
  double v6 = v19;
  double v7 = v20;
  double v20 = *(v3 - 2);
  double v19 = *(v3 - 1);
  sub_10075D084(&v20, &v19, 1);
  if (v7 != v20)
  {
    if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_22;
    }
    double v10 = vabdd_f64(v7, v20);
    double v11 = fabs(v7);
    double v12 = fabs(v20);
    if (v11 >= v12) {
      double v12 = v11;
    }
    double v13 = v12 >= 1.0 ? v12 * 2.22044605e-16 : 2.22044605e-16;
    if (v10 > v13) {
      goto LABEL_22;
    }
  }
  if (v6 == v19) {
    goto LABEL_4;
  }
  if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    goto LABEL_22;
  }
  double v14 = vabdd_f64(v6, v19);
  double v15 = fabs(v6);
  double v16 = fabs(v19);
  if (v15 >= v16) {
    double v16 = v15;
  }
  double v17 = v16 >= 1.0 ? v16 * 2.22044605e-16 : 2.22044605e-16;
  if (v14 <= v17)
  {
LABEL_4:
    int v8 = 0;
    uint64_t v9 = 1;
  }
  else
  {
LABEL_22:
    uint64_t v9 = 0;
    int v8 = 20;
  }
  sub_100BAC5C8(a2, v8);
  return v9;
}

uint64_t sub_100BAC224(double **a1, std::string **a2, uint64_t a3)
{
  double v6 = *a1;
  double v5 = a1[1];
  uint64_t v25 = v6;
  uint64_t v26 = v5;
  double v7 = sub_100BACA5C(v6, v5);
  if (v5 != v7)
  {
    int v8 = v7;
    uint64_t v9 = sub_100BACA5C(v7, v5);
    if (v5 != v9)
    {
      do
      {
        double v10 = v9;
        if (!sub_10075DD40(v9, v8, v6))
        {
          long long v11 = *(_OWORD *)v10;
          long long v12 = *(_OWORD *)v6;
          long long v28 = *(_OWORD *)v8;
          long long v29 = v11;
          long long v27 = v12;
          if ((int)sub_100BACCA4((double *)&v29, (double *)&v28, (double *)&v27) <= 0)
          {
            sub_100BAC5C8(a2, 12);
            sub_100BAD5A4(*a2, 0, (uint64_t)v8);
            return 1;
          }
        }
        uint64_t v9 = sub_100BACA5C(v10, v26);
        double v6 = v8;
        int v8 = v10;
      }
      while (v5 != v9);
      if (v25 == v26) {
        sub_101A80D6C();
      }
      uint64_t v13 = *((void *)v25 + 1);
      *(double *)&long long v29 = *v25;
      *(void *)&long long v28 = v13;
      sub_10075D084((double *)&v29, (double *)&v28, 1);
      double v14 = *(double *)&v29;
      double v15 = *(double *)&v28;
      *(double *)&long long v29 = *(v26 - 2);
      *(double *)&long long v28 = *(v26 - 1);
      sub_10075D084((double *)&v29, (double *)&v28, 1);
      if (v14 == *(double *)&v29) {
        goto LABEL_27;
      }
      if ((*(void *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && ((unint64_t)v29 & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v17 = vabdd_f64(v14, *(double *)&v29);
        double v18 = fabs(v14);
        double v19 = fabs(*(double *)&v29);
        if (v18 >= v19) {
          double v19 = v18;
        }
        double v20 = v19 >= 1.0 ? v19 * 2.22044605e-16 : 2.22044605e-16;
        if (v17 <= v20)
        {
LABEL_27:
          if (v15 == *(double *)&v28) {
            return sub_100BACBC0((uint64_t *)&v25, a2, a3, 0);
          }
          if ((*(void *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && ((unint64_t)v28 & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL)
          {
            double v21 = vabdd_f64(v15, *(double *)&v28);
            double v22 = fabs(v15);
            double v23 = fabs(*(double *)&v28);
            if (v22 >= v23) {
              double v23 = v22;
            }
            double v24 = v23 >= 1.0 ? v23 * 2.22044605e-16 : 2.22044605e-16;
            if (v21 <= v24) {
              return sub_100BACBC0((uint64_t *)&v25, a2, a3, 0);
            }
          }
        }
      }
    }
  }
  sub_100BAC5C8(a2, 0);
  return 0;
}

uint64_t sub_100BAC474(void *a1, std::string **a2)
{
  unint64_t v3 = (double *)a1[1];
  unint64_t v4 = (double *)(*a1 + 16);
  if ((unint64_t)v3 - *a1 < 0x40 || v4 == v3) {
    goto LABEL_27;
  }
  unint64_t v6 = 0;
  double v7 = 0.0;
  do
  {
    double v8 = *(v4 - 2);
    double v9 = *v4;
    if (v8 != *v4)
    {
      if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_11;
      }
      double v11 = vabdd_f64(v8, v9);
      double v12 = fabs(v8);
      double v13 = fabs(v9);
      if (v12 < v13) {
        double v12 = v13;
      }
      double v14 = v12 >= 1.0 ? v12 * 2.22044605e-16 : 2.22044605e-16;
      if (v11 > v14)
      {
LABEL_11:
        double v7 = v7 + sub_10075D2F4(v4 - 2, v4);
        v6 += sub_10075D548(v4 - 2, v4);
      }
    }
    v4 += 2;
  }
  while (v4 != v3);
  if (v6)
  {
    double v15 = (double)((v6 >> 1) + 1);
    double v16 = fabs(v7);
    double v17 = -v16;
    double v18 = -(v16 - v15 * 6.28318531);
    double v19 = -(v17 + v15 * 6.28318531);
    if (v7 <= 0.0) {
      double v7 = v18;
    }
    else {
      double v7 = v19;
    }
  }
  if (v7 <= 0.0)
  {
LABEL_27:
    uint64_t v21 = 0;
    int v20 = 22;
  }
  else
  {
    int v20 = 0;
    uint64_t v21 = 1;
  }
  sub_100BAC5C8(a2, v20);
  return v21;
}

void *sub_100BAC5C8(std::string **a1, int a2)
{
  unint64_t v4 = *a1;
  sub_100134750(&__str, "");
  std::string::operator=(v4 + 3, &__str);
  sub_100450DEC((uint64_t)&v4->__r_.__value_.__l.__size_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::ios_base::clear((std::ios_base *)((char *)*a1 + *(void *)((*a1)->__r_.__value_.__r.__words[0] - 24)), 0);
  double v5 = *a1;
  if (a2 > 39)
  {
    switch(a2)
    {
      case '(':
        unint64_t v6 = "Multi-polygon has intersecting interiors";
        break;
      case '2':
        unint64_t v6 = "Box has corners in wrong order";
        break;
      case '<':
        unint64_t v6 = "Geometry has point(s) with invalid coordinate(s)";
        break;
      default:
LABEL_12:
        unint64_t v6 = "";
        break;
    }
  }
  else
  {
    switch(a2)
    {
      case 10:
        unint64_t v6 = "Geometry has too few points";
        break;
      case 11:
        unint64_t v6 = "Geometry has wrong topological dimension";
        break;
      case 12:
        unint64_t v6 = "Geometry has spikes";
        break;
      case 13:
        unint64_t v6 = "Geometry has duplicate (consecutive) points";
        break;
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
        goto LABEL_12;
      case 20:
        unint64_t v6 = "Geometry is defined as closed but is open";
        break;
      case 21:
        unint64_t v6 = "Geometry has invalid self-intersections";
        break;
      case 22:
        unint64_t v6 = "Geometry has wrong orientation";
        break;
      case 30:
        unint64_t v6 = "Geometry has interior rings defined outside the outer boundary";
        break;
      case 31:
        unint64_t v6 = "Geometry has nested interior rings";
        break;
      case 32:
        unint64_t v6 = "Geometry has disconnected interior";
        break;
      default:
        if (a2) {
          goto LABEL_12;
        }
        unint64_t v6 = "Geometry is valid";
        break;
    }
  }
  size_t v7 = strlen(v6);
  return sub_100132EFC(v5, (uint64_t)v6, v7);
}

void sub_100BAC774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BAC7EC(double *a1, double *a2)
{
  double v3 = *a1;
  double v2 = a1[1];
  double v5 = *a2;
  double v4 = a2[1];
  if (*a1 == *a2) {
    goto LABEL_2;
  }
  double v7 = fabs(v5);
  if ((*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    BOOL v12 = fabs(v3) == 180.0;
  }
  else
  {
    if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v8 = vabdd_f64(v3, v5);
      double v9 = fabs(v3);
      if (v9 < v7) {
        double v9 = v7;
      }
      double v10 = v9 >= 1.0 ? v9 * 2.22044605e-16 : 2.22044605e-16;
      if (v8 <= v10) {
        goto LABEL_2;
      }
    }
    double v11 = fabs(v3);
    BOOL v12 = v11 == 180.0;
    if (v11 != 180.0)
    {
      double v13 = fabs(v11 + -180.0);
      if (v11 < 180.0) {
        double v11 = 180.0;
      }
      if (v11 >= 1.0) {
        double v14 = v11 * 2.22044605e-16;
      }
      else {
        double v14 = 2.22044605e-16;
      }
      BOOL v12 = v13 <= v14;
    }
  }
  if (v7 == 180.0)
  {
    BOOL v16 = 1;
  }
  else
  {
    if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_35;
    }
    double v17 = fabs(v7 + -180.0);
    if (v7 < 180.0) {
      double v7 = 180.0;
    }
    if (v7 >= 1.0) {
      double v18 = v7 * 2.22044605e-16;
    }
    else {
      double v18 = 2.22044605e-16;
    }
    BOOL v16 = v17 <= v18;
  }
  if (v12 && v16)
  {
LABEL_2:
    if (v2 == v4) {
      return 1;
    }
    if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v22 = vabdd_f64(v2, v4);
      double v23 = fabs(v2);
      double v24 = fabs(v4);
      if (v23 < v24) {
        double v23 = v24;
      }
      double v25 = v23 >= 1.0 ? v23 * 2.22044605e-16 : 2.22044605e-16;
      if (v22 <= v25) {
        return 1;
      }
    }
    return 0;
  }
LABEL_35:
  if (v2 == v4)
  {
    double v19 = fabs(v2);
  }
  else
  {
    if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      return 0;
    }
    double v26 = vabdd_f64(v2, v4);
    double v19 = fabs(v2);
    double v27 = fabs(v4);
    if (v19 >= v27) {
      double v27 = v19;
    }
    double v28 = v27 >= 1.0 ? v27 * 2.22044605e-16 : 2.22044605e-16;
    if (v26 > v28) {
      return 0;
    }
  }
  if (v19 == 90.0) {
    goto LABEL_2;
  }
  if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v20 = fabs(v19 + -90.0);
    if (v19 < 90.0) {
      double v19 = 90.0;
    }
    double v21 = v19 >= 1.0 ? v19 * 2.22044605e-16 : 2.22044605e-16;
    if (v20 <= v21) {
      goto LABEL_2;
    }
  }
  return 0;
}

double *sub_100BACA5C(double *a1, double *a2)
{
  double v2 = a2;
  if (a1 != a2)
  {
    double v4 = a1 + 2;
    if (a1 + 2 == a2) {
      return v2;
    }
    while (1)
    {
      double v20 = *v4;
      double v19 = v4[1];
      sub_10075D084(&v20, &v19, 1);
      double v5 = v19;
      double v6 = v20;
      double v7 = *a1;
      double v19 = a1[1];
      double v20 = v7;
      sub_10075D084(&v20, &v19, 1);
      if (v6 != v20)
      {
        if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          break;
        }
        double v9 = vabdd_f64(v6, v20);
        double v10 = fabs(v6);
        double v11 = fabs(v20);
        if (v10 >= v11) {
          double v11 = v10;
        }
        double v12 = v11 >= 1.0 ? v11 * 2.22044605e-16 : 2.22044605e-16;
        if (v9 > v12) {
          break;
        }
      }
      if (v5 != v19)
      {
        if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          break;
        }
        double v14 = vabdd_f64(v5, v19);
        double v15 = fabs(v5);
        double v16 = fabs(v19);
        if (v15 >= v16) {
          double v16 = v15;
        }
        double v17 = v16 >= 1.0 ? v16 * 2.22044605e-16 : 2.22044605e-16;
        if (v14 > v17) {
          break;
        }
      }
      v4 += 2;
      if (v4 == v2) {
        return v2;
      }
    }
    return v4;
  }
  return v2;
}

uint64_t sub_100BACBC0(uint64_t *a1, std::string **a2, uint64_t a3, int a4)
{
  double v7 = (double *)*a1;
  uint64_t v8 = sub_100BADE90(a1[1], *a1);
  double v9 = sub_100BACA5C(v7, (double *)a1[1]);
  if (sub_10075DD40(v9, v7, (double *)(v8 - 16))
    || (long long v10 = *(_OWORD *)v9,
        long long v11 = *(_OWORD *)(v8 - 16),
        long long v15 = *(_OWORD *)v7,
        long long v16 = v10,
        long long v14 = v11,
        (int)sub_100BACCA4((double *)&v16, (double *)&v15, (double *)&v14) > 0))
  {
    sub_100BAC5C8(a2, 0);
    return 0;
  }
  else
  {
    if (a4) {
      int v13 = 0;
    }
    else {
      int v13 = 12;
    }
    sub_100BAC5C8(a2, v13);
    sub_100BAD5A4(*a2, a4, (uint64_t)v7);
    return a4 ^ 1u;
  }
}

uint64_t sub_100BACCA4(double *a1, double *a2, double *a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102473088, memory_order_acquire) & 1) == 0)
  {
    __int16 v85 = a1;
    BOOL v86 = a3;
    __int16 v87 = a2;
    int v88 = __cxa_guard_acquire(&qword_102473088);
    a2 = v87;
    a3 = v86;
    int v89 = v88;
    a1 = v85;
    if (v89)
    {
      qword_102473080 = 0x4056800000000000;
      __cxa_guard_release(&qword_102473088);
      a1 = v85;
      a2 = v87;
      a3 = v86;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102473098, memory_order_acquire) & 1) == 0)
  {
    double v90 = a1;
    __int16 v91 = a3;
    double v92 = a2;
    int v93 = __cxa_guard_acquire(&qword_102473098);
    a2 = v92;
    a3 = v91;
    int v94 = v93;
    a1 = v90;
    if (v94)
    {
      qword_102473090 = 0x4056800000000000;
      __cxa_guard_release(&qword_102473098);
      a1 = v90;
      a2 = v92;
      a3 = v91;
    }
  }
  double v3 = *a1;
  double v4 = a1[1];
  double v6 = *a2;
  double v5 = a2[1];
  double v8 = *a3;
  double v7 = a3[1];
  if (*a2 == *a1) {
    goto LABEL_15;
  }
  if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v29 = vabdd_f64(v6, v3);
    double v30 = fabs(v6);
    double v31 = fabs(v3);
    if (v30 < v31) {
      double v30 = v31;
    }
    double v32 = v30 >= 1.0 ? v30 * 2.22044605e-16 : 2.22044605e-16;
    if (v29 <= v32)
    {
LABEL_15:
      if (v5 == v4) {
        return 0;
      }
      if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v10 = vabdd_f64(v5, v4);
        double v11 = fabs(v5);
        double v12 = fabs(v4);
        if (v11 < v12) {
          double v11 = v12;
        }
        double v13 = v11 >= 1.0 ? v11 * 2.22044605e-16 : 2.22044605e-16;
        if (v10 <= v13) {
          return 0;
        }
      }
    }
  }
  if (v6 == v8) {
    goto LABEL_40;
  }
  if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v16 = vabdd_f64(v6, v8);
    double v17 = fabs(v6);
    double v18 = fabs(v8);
    if (v17 < v18) {
      double v17 = v18;
    }
    double v19 = v17 >= 1.0 ? v17 * 2.22044605e-16 : 2.22044605e-16;
    if (v16 <= v19)
    {
LABEL_40:
      if (v5 == v7) {
        return 0;
      }
      if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v20 = vabdd_f64(v5, v7);
        double v21 = fabs(v5);
        double v22 = fabs(v7);
        if (v21 < v22) {
          double v21 = v22;
        }
        double v23 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
        if (v20 <= v23) {
          return 0;
        }
      }
    }
  }
  double v24 = fabs(v4);
  if (*(double *)&qword_102473080 == v24)
  {
    BOOL v25 = 1;
  }
  else if ((qword_102473080 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL {
         || (*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  }
  {
    BOOL v25 = 0;
  }
  else
  {
    double v26 = vabdd_f64(*(double *)&qword_102473080, v24);
    double v27 = fabs(*(double *)&qword_102473080);
    if (v27 >= v24) {
      double v24 = v27;
    }
    if (v24 >= 1.0) {
      double v28 = v24 * 2.22044605e-16;
    }
    else {
      double v28 = 2.22044605e-16;
    }
    BOOL v25 = v26 <= v28;
  }
  double v33 = fabs(v5);
  if (*(double *)&qword_102473080 == v33)
  {
    BOOL v34 = 1;
  }
  else if ((qword_102473080 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL {
         || (*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  }
  {
    BOOL v34 = 0;
  }
  else
  {
    double v35 = vabdd_f64(*(double *)&qword_102473080, v33);
    double v36 = fabs(*(double *)&qword_102473080);
    if (v36 < v33) {
      double v36 = v33;
    }
    if (v36 >= 1.0) {
      double v37 = v36 * 2.22044605e-16;
    }
    else {
      double v37 = 2.22044605e-16;
    }
    BOOL v34 = v35 <= v37;
  }
  double v38 = fabs(v7);
  if (*(double *)&qword_102473090 != v38)
  {
    if ((qword_102473090 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      BOOL v39 = 0;
      if (!v34) {
        goto LABEL_95;
      }
    }
    else
    {
      double v40 = vabdd_f64(*(double *)&qword_102473090, v38);
      double v41 = fabs(*(double *)&qword_102473090);
      if (v41 >= v38) {
        double v38 = v41;
      }
      if (v38 >= 1.0) {
        double v42 = v38 * 2.22044605e-16;
      }
      else {
        double v42 = 2.22044605e-16;
      }
      BOOL v39 = v40 <= v42;
      if (!v34) {
        goto LABEL_95;
      }
    }
    goto LABEL_83;
  }
  BOOL v39 = 1;
  if (v34)
  {
LABEL_83:
    if (!v25) {
      goto LABEL_94;
    }
    char v43 = (v4 >= 0.0) ^ (v5 < 0.0);
    if (v4 > 0.0) {
      char v43 = 0;
    }
    if (v5 > 0.0) {
      char v43 = v4 > 0.0;
    }
    if ((v43 & 1) == 0)
    {
LABEL_94:
      if (!v39) {
        goto LABEL_95;
      }
      char v44 = (v5 < 0.0) ^ (v7 >= 0.0);
      if (v7 > 0.0) {
        char v44 = 0;
      }
      if (v5 > 0.0) {
        char v44 = v7 > 0.0;
      }
      if ((v44 & 1) == 0) {
        goto LABEL_95;
      }
    }
    return 0;
  }
LABEL_95:
  double v45 = vabdd_f64(v3, v6);
  double v46 = 180.0;
  if (v45 == 180.0) {
    goto LABEL_96;
  }
  double v47 = v3 - v6;
  if (COERCE__INT64(fabs(v3 - v6)) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v55 = fabs(v45 + -180.0);
    double v46 = 180.0;
    if (v45 < 180.0) {
      double v45 = 180.0;
    }
    double v56 = v45 >= 1.0 ? v45 * 2.22044605e-16 : 2.22044605e-16;
    if (v55 <= v56) {
      goto LABEL_96;
    }
  }
  double v46 = 180.0;
  if (v47 <= 180.0)
  {
    if (v47 >= -180.0) {
      goto LABEL_97;
    }
    double v46 = fmod(v47 + -180.0, 360.0) + 180.0;
    goto LABEL_96;
  }
  double v57 = fmod(v47 + 180.0, 360.0);
  double v47 = v57 + -180.0;
  if (v57 + -180.0 == -180.0) {
    goto LABEL_96;
  }
  unint64_t v58 = COERCE__INT64(fabs(v57 + -180.0)) - 1;
  BOOL v59 = (unint64_t)(COERCE__INT64(fabs(v57 + -180.0)) - 0x10000000000000) >> 53 > 0x3FE
     && v58 > 0xFFFFFFFFFFFFELL;
  if (!v59 || *(void *)&v47 == 0)
  {
    double v46 = 180.0;
    double v61 = fabs(v47 + 180.0);
    double v62 = fabs(v47);
    if (v62 < 180.0) {
      double v62 = 180.0;
    }
    double v63 = v62 >= 1.0 ? v62 * 2.22044605e-16 : 2.22044605e-16;
    if (v61 <= v63) {
LABEL_96:
    }
      double v47 = v46;
  }
LABEL_97:
  double v48 = vabdd_f64(v8, v6);
  double v49 = 180.0;
  if (v48 == 180.0) {
    goto LABEL_98;
  }
  double v50 = v8 - v6;
  if ((*(void *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v64 = fabs(v48 + -180.0);
    double v49 = 180.0;
    if (v48 < 180.0) {
      double v48 = 180.0;
    }
    double v65 = v48 >= 1.0 ? v48 * 2.22044605e-16 : 2.22044605e-16;
    if (v64 <= v65) {
      goto LABEL_98;
    }
  }
  double v49 = 180.0;
  if (v50 > 180.0)
  {
    double v66 = fmod(v50 + 180.0, 360.0);
    double v50 = v66 + -180.0;
    if (v66 + -180.0 != -180.0)
    {
      unint64_t v67 = COERCE__INT64(fabs(v66 + -180.0)) - 1;
      BOOL v68 = (unint64_t)(COERCE__INT64(fabs(v66 + -180.0)) - 0x10000000000000) >> 53 > 0x3FE
         && v67 > 0xFFFFFFFFFFFFELL;
      if (v68 && *(void *)&v50 != 0) {
        goto LABEL_99;
      }
      double v49 = 180.0;
      double v70 = fabs(v50 + 180.0);
      double v71 = fabs(v50);
      if (v71 < 180.0) {
        double v71 = 180.0;
      }
      double v72 = v71 >= 1.0 ? v71 * 2.22044605e-16 : 2.22044605e-16;
      if (v70 > v72) {
        goto LABEL_99;
      }
    }
    goto LABEL_98;
  }
  if (v50 < -180.0)
  {
    double v49 = fmod(v50 + -180.0, 360.0) + 180.0;
LABEL_98:
    double v50 = v49;
  }
LABEL_99:
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024730A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024730A8))
  {
    qword_1024730A0 = 0x4066800000000000;
    __cxa_guard_release(&qword_1024730A8);
  }
  double v51 = fabs(v47);
  double v52 = *(double *)&qword_1024730A0;
  if (v51 == *(double *)&qword_1024730A0) {
    goto LABEL_101;
  }
  double v54 = v4 - v5;
  if ((*(void *)&v47 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (qword_1024730A0 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    goto LABEL_160;
  }
  double v73 = vabdd_f64(v51, *(double *)&qword_1024730A0);
  double v74 = fabs(*(double *)&qword_1024730A0);
  if (v51 >= v74) {
    double v74 = v51;
  }
  double v75 = v74 >= 1.0 ? v74 * 2.22044605e-16 : 2.22044605e-16;
  if (v73 <= v75)
  {
LABEL_101:
    int v53 = 0;
    if (v4 + v5 < 0.0) {
      double v52 = -*(double *)&qword_1024730A0;
    }
    double v54 = v52 - (v4 + v5);
  }
  else
  {
LABEL_160:
    int v53 = 1;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024730A8, memory_order_acquire) & 1) == 0)
  {
    double v95 = v54;
    int v96 = __cxa_guard_acquire(&qword_1024730A8);
    double v54 = v95;
    if (v96)
    {
      qword_1024730A0 = 0x4066800000000000;
      __cxa_guard_release(&qword_1024730A8);
      double v54 = v95;
    }
  }
  double v76 = fabs(v50);
  if (v76 == *(double *)&qword_1024730A0) {
    goto LABEL_163;
  }
  double v78 = v7 - v5;
  if ((*(void *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (qword_1024730A0 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v79 = vabdd_f64(v76, *(double *)&qword_1024730A0);
    double v80 = fabs(*(double *)&qword_1024730A0);
    if (v76 >= v80) {
      double v80 = v76;
    }
    double v81 = v80 >= 1.0 ? v80 * 2.22044605e-16 : 2.22044605e-16;
    if (v79 <= v81)
    {
LABEL_163:
      double v77 = v5 + v7;
      if (v5 + v7 >= 0.0) {
        double v78 = *(double *)&qword_1024730A0 - v77;
      }
      else {
        double v78 = -*(double *)&qword_1024730A0 - v77;
      }
      double v76 = 0.0;
    }
  }
  if (v53) {
    double v82 = v51;
  }
  else {
    double v82 = 0.0;
  }
  if (v76 >= v82) {
    double v76 = v82;
  }
  if (v25 || v34 || v39) {
    double v76 = 0.0;
  }
  double v83 = fabs(v54);
  double v84 = fabs(v78);
  if (v84 < v83) {
    double v83 = v84;
  }
  if (v76 >= v83)
  {
    double v54 = v47;
    double v78 = v50;
  }
  if (v78 > 0.0 != v54 <= 0.0) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 1;
  }
}

void sub_100BAD5A4(void *a1, char a2, uint64_t a3)
{
  if ((a2 & 1) == 0)
  {
    double v4 = sub_100132EFC(a1, (uint64_t)". A spike point was found with apex at ", 39);
    sub_100134750(v22, ", ");
    sub_100134750(v20, "(");
    sub_100134750(v18, ")");
    sub_100134750(v16, ", ");
    sub_100134750(v14, "(");
    sub_100134750(v12, ")");
    sub_100134750(v10, ", ");
    sub_100BAD890(a3, (long long *)v22, (long long *)v20, (long long *)v18, (long long *)v16, (long long *)v14, (long long *)v12, (long long *)v10, (uint64_t)&v24);
    uint64_t v5 = v24;
    if ((v28 & 0x80u) == 0) {
      double v6 = v27;
    }
    else {
      double v6 = (void **)v27[0];
    }
    if ((v28 & 0x80u) == 0) {
      uint64_t v7 = v28;
    }
    else {
      uint64_t v7 = (uint64_t)v27[1];
    }
    sub_100132EFC(v4, (uint64_t)v6, v7);
    sub_100BAD958(v4, v5, (uint64_t)&v25);
    if ((v30 & 0x80u) == 0) {
      double v8 = v29;
    }
    else {
      double v8 = (void **)v29[0];
    }
    if ((v30 & 0x80u) == 0) {
      uint64_t v9 = v30;
    }
    else {
      uint64_t v9 = (uint64_t)v29[1];
    }
    sub_100132EFC(v4, (uint64_t)v8, v9);
    std::ostream::flush();
    if (v38 < 0) {
      operator delete(__p);
    }
    if (v36 < 0) {
      operator delete(v35);
    }
    if (v34 < 0) {
      operator delete(v33);
    }
    if (v32 < 0) {
      operator delete(v31);
    }
    if ((char)v30 < 0) {
      operator delete(v29[0]);
    }
    if ((char)v28 < 0) {
      operator delete(v27[0]);
    }
    if (v26 < 0) {
      operator delete(v25);
    }
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    if (v23 < 0) {
      operator delete(v22[0]);
    }
  }
}

void sub_100BAD7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BAD890(uint64_t a1@<X0>, long long *a2@<X1>, long long *a3@<X2>, long long *a4@<X3>, long long *a5@<X4>, long long *a6@<X5>, long long *a7@<X6>, long long *a8@<X7>, uint64_t a9@<X8>)
{
  sub_100BADA60((char *)__dst, a2, a3, a4, a5, a6, a7, a8);
  *(void *)a9 = a1;
  sub_100BADC78((char *)(a9 + 8), (long long *)__dst);
  if (v24 < 0) {
    operator delete(__p);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  if (v20 < 0) {
    operator delete(v19);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(__dst[0]);
  }
}

void sub_100BAD944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100628000((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100BAD958(void *a1, uint64_t a2, uint64_t a3)
{
  sub_100134750(__p, "");
  if (v10 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  if (v10 >= 0) {
    uint64_t v6 = HIBYTE(v10);
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  sub_100132EFC(a1, (uint64_t)v5, v6);
  std::ostream::operator<<();
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a3;
    uint64_t v10 = *(void *)(a3 + 16);
  }
  if (v10 >= 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  if (v10 >= 0) {
    uint64_t v8 = HIBYTE(v10);
  }
  else {
    uint64_t v8 = (uint64_t)__p[1];
  }
  sub_100132EFC(a1, (uint64_t)v7, v8);
  std::ostream::operator<<();
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100BADA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100BADA60(char *__dst, long long *a2, long long *a3, long long *a4, long long *a5, long long *a6, long long *a7, long long *a8)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v15 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v15;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C(__dst + 24, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v16 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v16;
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_1000DC48C(__dst + 48, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v17 = *a4;
    *((void *)__dst + 8) = *((void *)a4 + 2);
    *((_OWORD *)__dst + 3) = v17;
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_1000DC48C(__dst + 72, *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v18 = *a5;
    *((void *)__dst + 11) = *((void *)a5 + 2);
    *(_OWORD *)(__dst + 72) = v18;
  }
  if (*((char *)a6 + 23) < 0)
  {
    sub_1000DC48C(__dst + 96, *(void **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v19 = *a6;
    *((void *)__dst + 14) = *((void *)a6 + 2);
    *((_OWORD *)__dst + 6) = v19;
  }
  if (*((char *)a7 + 23) < 0)
  {
    sub_1000DC48C(__dst + 120, *(void **)a7, *((void *)a7 + 1));
  }
  else
  {
    long long v20 = *a7;
    *((void *)__dst + 17) = *((void *)a7 + 2);
    *(_OWORD *)(__dst + 120) = v20;
  }
  char v21 = __dst + 144;
  if (*((char *)a8 + 23) < 0)
  {
    sub_1000DC48C(v21, *(void **)a8, *((void *)a8 + 1));
  }
  else
  {
    long long v22 = *a8;
    *((void *)__dst + 20) = *((void *)a8 + 2);
    *(_OWORD *)char v21 = v22;
  }
  return __dst;
}

void sub_100BADBE4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100BADC78(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_1000DC48C(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_1000DC48C(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_1000DC48C(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_1000DC48C(__dst + 96, *((void **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *((_OWORD *)__dst + 6) = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    sub_1000DC48C(__dst + 120, *((void **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v9 = *(long long *)((char *)a2 + 120);
    *((void *)__dst + 17) = *((void *)a2 + 17);
    *(_OWORD *)(__dst + 120) = v9;
  }
  uint64_t v10 = __dst + 144;
  if (*((char *)a2 + 167) < 0)
  {
    sub_1000DC48C(v10, *((void **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v11 = a2[9];
    *((void *)__dst + 20) = *((void *)a2 + 20);
    *(_OWORD *)uint64_t v10 = v11;
  }
  return __dst;
}

void sub_100BADDFC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BADE90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a1 != a2)
  {
    uint64_t v4 = a1 - 16;
    if (a1 - 16 == a2) {
      return v2;
    }
    uint64_t v5 = a1 - 16;
    while (1)
    {
      double v6 = *(double *)(v5 - 16);
      v5 -= 16;
      double v21 = v6;
      double v20 = *(double *)(v5 + 8);
      sub_10075D084(&v21, &v20, 1);
      double v7 = v20;
      double v8 = v21;
      double v21 = *(double *)(a1 - 16);
      double v20 = *(double *)(a1 - 8);
      sub_10075D084(&v21, &v20, 1);
      if (v8 != v21)
      {
        if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          break;
        }
        double v10 = vabdd_f64(v8, v21);
        double v11 = fabs(v8);
        double v12 = fabs(v21);
        if (v11 >= v12) {
          double v12 = v11;
        }
        double v13 = v12 >= 1.0 ? v12 * 2.22044605e-16 : 2.22044605e-16;
        if (v10 > v13) {
          break;
        }
      }
      if (v7 != v20)
      {
        if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          break;
        }
        double v15 = vabdd_f64(v7, v20);
        double v16 = fabs(v7);
        double v17 = fabs(v20);
        if (v16 >= v17) {
          double v17 = v16;
        }
        double v18 = v17 >= 1.0 ? v17 * 2.22044605e-16 : 2.22044605e-16;
        if (v15 > v18) {
          break;
        }
      }
      uint64_t v4 = v5;
      if (v5 == v2) {
        return v2;
      }
    }
    return v4;
  }
  return v2;
}

uint64_t sub_100BAE000(double **a1, std::string **a2, uint64_t a3)
{
  double v6 = *a1;
  double v7 = a1[1];
  if (*a1 == v7)
  {
    sub_100BAC5C8(a2, 0);
  }
  else
  {
    do
    {
      BOOL v8 = (*(void *)v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && ((void)v6[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
      int v9 = !v8;
      if (!v8) {
        break;
      }
      v6 += 2;
    }
    while (v6 != v7);
    if (v9) {
      int v10 = 60;
    }
    else {
      int v10 = 0;
    }
    sub_100BAC5C8(a2, v10);
    uint64_t result = 0;
    if (v9) {
      return result;
    }
  }
  double v12 = a1[1];
  if ((unint64_t)((char *)v12 - (char *)*a1) <= 0x3F)
  {
    double v13 = a2;
    int v14 = 10;
LABEL_21:
    sub_100BAC5C8(v13, v14);
    return 0;
  }
  v19[0] = *a1;
  v19[1] = v12;
  if (sub_100BABF30(v19) <= 3)
  {
    double v13 = a2;
    int v14 = 11;
    goto LABEL_21;
  }
  uint64_t result = sub_100BAC0C0(a1, a2);
  if (result)
  {
    double v15 = *a1;
    double v16 = a1[1];
    if ((unint64_t)((char *)v16 - (char *)*a1) >= 0x20)
    {
      double v17 = v15 + 2;
      while (v17 != v16 && (sub_100BAC7EC(v15, v15 + 2) & 1) == 0)
      {
        double v17 = v15 + 4;
        v15 += 2;
      }
    }
    sub_100BAC5C8(a2, 0);
    char v18 = sub_100BAC224(a1, a2, a3);
    uint64_t result = 0;
    if ((v18 & 1) == 0) {
      return sub_100BAE174(a1, a2);
    }
  }
  return result;
}

uint64_t sub_100BAE174(void *a1, std::string **a2)
{
  double v3 = (double *)a1[1];
  uint64_t v4 = (double *)(*a1 + 16);
  if ((unint64_t)v3 - *a1 < 0x40 || v4 == v3) {
    goto LABEL_27;
  }
  unint64_t v6 = 0;
  double v7 = 0.0;
  do
  {
    double v8 = *(v4 - 2);
    double v9 = *v4;
    if (v8 != *v4)
    {
      if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_11;
      }
      double v11 = vabdd_f64(v8, v9);
      double v12 = fabs(v8);
      double v13 = fabs(v9);
      if (v12 < v13) {
        double v12 = v13;
      }
      double v14 = v12 >= 1.0 ? v12 * 2.22044605e-16 : 2.22044605e-16;
      if (v11 > v14)
      {
LABEL_11:
        double v7 = v7 + sub_10075D2F4(v4 - 2, v4);
        v6 += sub_10075D548(v4 - 2, v4);
      }
    }
    v4 += 2;
  }
  while (v4 != v3);
  if (v6)
  {
    double v15 = (double)((v6 >> 1) + 1);
    double v16 = fabs(v7);
    double v17 = -v16;
    double v18 = -(v16 - v15 * 6.28318531);
    double v19 = -(v17 + v15 * 6.28318531);
    if (v7 <= 0.0) {
      double v7 = v18;
    }
    else {
      double v7 = v19;
    }
  }
  if (v7 >= 0.0)
  {
LABEL_27:
    uint64_t v21 = 0;
    int v20 = 22;
  }
  else
  {
    int v20 = 0;
    uint64_t v21 = 1;
  }
  sub_100BAC5C8(a2, v20);
  return v21;
}

void sub_100BAE2C8(uint64_t a1, uint64_t a2, float64x2_t **a3, uint64_t a4, int a5, unint64_t a6)
{
  a3[1] = *a3;
  uint64_t v11 = a5;
  double v12 = *(double **)a1;
  double v13 = *(double **)(a1 + 8);
  if ((unint64_t)v13 - *(void *)a1 >= 0x20)
  {
    uint64_t v31 = a5;
    uint64_t v32 = -1;
    uint64_t v33 = -1;
    sub_100BAE40C(a3, v12, v13, a2, a4, (uint64_t)&v31, a6);
  }
  double v15 = *(double ***)(a1 + 24);
  double v14 = *(double ***)(a1 + 32);
  if (v15 != v14)
  {
    uint64_t v16 = 0;
    do
    {
      double v17 = *v15;
      double v18 = v15[1];
      if ((unint64_t)((char *)v18 - (char *)*v15) >= 0x20)
      {
        uint64_t v31 = v11;
        uint64_t v32 = -1;
        uint64_t v33 = v16;
        sub_100BAE40C(a3, v17, v18, a2, a4, (uint64_t)&v31, a6);
        double v14 = *(double ***)(a1 + 32);
      }
      ++v16;
      v15 += 3;
    }
    while (v15 != v14);
  }
  double v19 = *a3;
  int v20 = a3[1];
  if (*a3 != v20)
  {
    __asm { FMOV            V0.2D, #1.0 }
    do
    {
      float64x2_t v26 = v19[2];
      float64x2_t v27 = v19[3];
      float64x2_t v28 = vabsq_f64(v26);
      float64x2_t v29 = vsubq_f64(v26, (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(_Q0, v28), (int8x16_t)xmmword_101D82D90, (int8x16_t)vmulq_f64(v28, (float64x2_t)xmmword_101D82D90)));
      float64x2_t v30 = vabsq_f64(v27);
      v19[2] = v29;
      _DWORD v19[3] = vaddq_f64(v27, (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(_Q0, v30), (int8x16_t)xmmword_101D82D90, (int8x16_t)vmulq_f64(v30, (float64x2_t)xmmword_101D82D90)));
      double v19 = (float64x2_t *)((char *)v19 + 120);
    }
    while (v19 != v20);
  }
}

void sub_100BAE40C(void *a1, double *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  if (a3 == a2) {
    return;
  }
  double v7 = a2;
  v116.i64[0] = -1;
  v116.i64[1] = -1;
  int64x2_t v117 = 0uLL;
  v118.i8[0] = 0;
  v118.i64[1] = -1;
  LOWORD(v119) = 0;
  int64x2_t v104 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  int64x2_t v105 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int64x2_t v114 = v105;
  int64x2_t v115 = v104;
  *(void *)long long v113 = 0;
  memset(&v113[8], 255, 24);
  double v9 = (char *)a1[1];
  unint64_t v10 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v9[-*a1] >> 3);
  long long v112 = *(_OWORD *)a2;
  uint64_t v11 = a2 + 2;
  if (a2 + 2 == a3) {
    goto LABEL_121;
  }
  unint64_t v102 = v10;
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v106 = ((char *)a3 - (char *)a2) >> 4;
  v108 = a1 + 2;
  char v109 = 1;
  do
  {
    double v15 = v7[3];
    double v7 = v11;
    *((double *)&v111 + 1) = v15;
    double v16 = *v11;
    *(double *)&long long v111 = v16;
    double v17 = *(double *)&v112;
    double v18 = vabdd_f64(v16, *(double *)&v112);
    double v19 = 180.0;
    if (v18 == 180.0) {
      goto LABEL_5;
    }
    double v20 = v16 - *(double *)&v112;
    if (COERCE__INT64(fabs(v16 - *(double *)&v112)) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v26 = fabs(v18 + -180.0);
      if (v18 < 180.0) {
        double v18 = 180.0;
      }
      double v27 = v18 >= 1.0 ? v18 * 2.22044605e-16 : 2.22044605e-16;
      BOOL v28 = v26 > v27;
      double v19 = 180.0;
      if (!v28) {
        goto LABEL_5;
      }
    }
    if (v20 <= 180.0)
    {
      if (v20 < -180.0)
      {
        double v19 = fmod(v20 + -180.0, 360.0) + 180.0;
LABEL_5:
        double v20 = v19;
      }
    }
    else
    {
      double v20 = fmod(v20 + 180.0, 360.0) + -180.0;
      double v19 = 180.0;
      if (v20 == -180.0) {
        goto LABEL_5;
      }
      BOOL v28 = ((*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
         && (*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
      if (!v28 || *(void *)&v20 == 0)
      {
        double v30 = fabs(v20 + 180.0);
        double v31 = fabs(v20);
        if (v31 < 180.0) {
          double v31 = 180.0;
        }
        double v32 = v31 >= 1.0 ? v31 * 2.22044605e-16 : 2.22044605e-16;
        BOOL v28 = v30 > v32;
        double v19 = 180.0;
        if (!v28) {
          goto LABEL_5;
        }
      }
    }
    if (v20 >= 0.0) {
      int v21 = 0;
    }
    else {
      int v21 = -1;
    }
    if (v20 > 0.0) {
      int v22 = 1;
    }
    else {
      int v22 = v21;
    }
    if (v15 >= *((double *)&v112 + 1)) {
      int v23 = 0;
    }
    else {
      int v23 = -1;
    }
    if (v15 > *((double *)&v112 + 1)) {
      int v24 = 1;
    }
    else {
      int v24 = v23;
    }
    if (v22) {
      goto LABEL_72;
    }
    if (v17 != v16)
    {
      if ((*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_71;
      }
      double v34 = vabdd_f64(v17, v16);
      double v35 = fabs(v17);
      double v36 = fabs(v16);
      if (v35 < v36) {
        double v35 = v36;
      }
      double v37 = v35 >= 1.0 ? v35 * 2.22044605e-16 : 2.22044605e-16;
      if (v34 > v37) {
        goto LABEL_71;
      }
    }
    if (*((double *)&v112 + 1) != v15)
    {
      if ((*((void *)&v112 + 1) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_71;
      }
      double v38 = vabdd_f64(*((double *)&v112 + 1), v15);
      double v39 = fabs(*((double *)&v112 + 1));
      double v40 = fabs(v15);
      if (v39 < v40) {
        double v39 = v40;
      }
      double v41 = v39 >= 1.0 ? v39 * 2.22044605e-16 : 2.22044605e-16;
      if (v38 > v41)
      {
LABEL_71:
        int v22 = 0;
LABEL_72:
        int v25 = 0;
        if (!v12) {
          goto LABEL_96;
        }
        goto LABEL_73;
      }
    }
    int v25 = 1;
    int v22 = -99;
    int v24 = -99;
    if (!v12) {
      goto LABEL_96;
    }
LABEL_73:
    if (v22 == *(_DWORD *)v113 && v12 <= a7 && v24 == *(_DWORD *)&v113[4])
    {
      v123[0] = (double *)&v112;
      v123[1] = (double *)&v111;
      sub_100BAF4AC((double *)v114.i64, v123);
      goto LABEL_99;
    }
    unint64_t v42 = a1[1];
    if (!v118.i8[0]) {
      unint64_t v102 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v42 - *a1) >> 3);
    }
    if (v42 >= *v108)
    {
      unint64_t v50 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v42 - *a1) >> 3);
      unint64_t v51 = v50 + 1;
      if (v50 + 1 > 0x222222222222222) {
        goto LABEL_125;
      }
      if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)(*v108 - *a1) >> 3) > v51) {
        unint64_t v51 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(*v108 - *a1) >> 3);
      }
      if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*v108 - *a1) >> 3) >= 0x111111111111111) {
        unint64_t v52 = 0x222222222222222;
      }
      else {
        unint64_t v52 = v51;
      }
      if (v52) {
        int v53 = (char *)sub_10029BE4C((uint64_t)v108, v52);
      }
      else {
        int v53 = 0;
      }
      double v54 = (int64x2_t *)&v53[120 * v50];
      int64x2_t v55 = *(int64x2_t *)v113;
      int64x2_t v56 = *(int64x2_t *)&v113[16];
      int64x2_t v57 = v115;
      v54[2] = v114;
      v54[3] = v57;
      *double v54 = v55;
      v54[1] = v56;
      int64x2_t v58 = v116;
      int64x2_t v59 = v117;
      int64x2_t v60 = v118;
      v54[7].i64[0] = v119;
      v54[5] = v59;
      v54[6] = v60;
      v54[4] = v58;
      double v62 = (char *)*a1;
      double v61 = (char *)a1[1];
      double v63 = v54;
      if (v61 != (char *)*a1)
      {
        do
        {
          int64x2_t v64 = *(int64x2_t *)(v61 - 120);
          int64x2_t v65 = *(int64x2_t *)(v61 - 104);
          int64x2_t v66 = *(int64x2_t *)(v61 - 88);
          *(int64x2_t *)((char *)v63 - 72) = *(int64x2_t *)(v61 - 72);
          *(int64x2_t *)((char *)v63 - 88) = v66;
          *(int64x2_t *)((char *)v63 - 104) = v65;
          *(int64x2_t *)((char *)v63 - 120) = v64;
          int64x2_t v67 = *(int64x2_t *)(v61 - 56);
          int64x2_t v68 = *(int64x2_t *)(v61 - 40);
          int64x2_t v69 = *(int64x2_t *)(v61 - 24);
          v63[-1].i16[4] = *((_WORD *)v61 - 4);
          *(int64x2_t *)((char *)v63 - 24) = v69;
          *(int64x2_t *)((char *)v63 - 40) = v68;
          *(int64x2_t *)((char *)v63 - 56) = v67;
          double v63 = (int64x2_t *)((char *)v63 - 120);
          v61 -= 120;
        }
        while (v61 != v62);
        double v61 = (char *)*a1;
      }
      double v49 = &v54[7].i8[8];
      *a1 = v63;
      a1[1] = (char *)v54 + 120;
      a1[2] = &v53[120 * v52];
      if (v61) {
        operator delete(v61);
      }
    }
    else
    {
      long long v43 = *(_OWORD *)v113;
      long long v44 = *(_OWORD *)&v113[16];
      int64x2_t v45 = v115;
      *(int64x2_t *)(v42 + 32) = v114;
      *(int64x2_t *)(v42 + 48) = v45;
      *(_OWORD *)unint64_t v42 = v43;
      *(_OWORD *)(v42 + 16) = v44;
      int64x2_t v46 = v116;
      int64x2_t v47 = v117;
      int64x2_t v48 = v118;
      *(void *)(v42 + 112) = v119;
      *(int64x2_t *)(v42 + 80) = v47;
      *(int64x2_t *)(v42 + 96) = v48;
      *(int64x2_t *)(v42 + 64) = v46;
      double v49 = (char *)(v42 + 120);
    }
    a1[1] = v49;
    memset(&v113[8], 255, 24);
    v116.i64[0] = -1;
    v116.i64[1] = -1;
    int64x2_t v117 = 0uLL;
    v118.i8[0] = 0;
    *(void *)long long v113 = 0;
    int64x2_t v114 = v105;
    int64x2_t v115 = v104;
    v118.i64[1] = -1;
    LOWORD(v119) = 0;
LABEL_96:
    *(_OWORD *)&v113[8] = *(_OWORD *)a6;
    *(void *)&v113[24] = *(void *)(a6 + 16);
    v118.i8[0] = v25;
    v118.i64[1] = v13;
    v116.i64[0] = v14;
    v117.i64[1] = v106;
    if (!(v25 & 1 | ((v109 & 1) == 0)))
    {
      char v109 = 0;
      LOBYTE(v119) = 1;
    }
    *(_DWORD *)long long v113 = v22;
    *(_DWORD *)&v113[4] = v24;
    long long v70 = v111;
    uint64_t v122 = *((void *)&v112 + 1);
    v123[0] = (double *)v112;
    sub_10075D084((double *)v123, (double *)&v122, 1);
    uint64_t v72 = v122;
    double v71 = v123[0];
    uint64_t v122 = *((void *)&v70 + 1);
    v123[0] = (double *)v70;
    sub_10075D084((double *)v123, (double *)&v122, 1);
    uint64_t v74 = v122;
    double v73 = v123[0];
    uint64_t v122 = v72;
    v123[0] = v71;
    uint64_t v120 = v74;
    int v121 = v73;
    sub_100BAEC78((double *)v123, (double *)&v122, (double *)&v121, (double *)&v120);
    v114.i64[0] = (uint64_t)v123[0];
    v114.i64[1] = v122;
    v115.i64[0] = (uint64_t)v121;
    v115.i64[1] = v120;
LABEL_99:
    ++v14;
    unint64_t v12 = v117.i64[0] + 1;
    v116.i64[1] = v14;
    ++v117.i64[0];
    v13 += v25 ^ 1u;
    long long v112 = v111;
    uint64_t v11 = v7 + 2;
  }
  while (v7 + 2 != a3);
  double v9 = (char *)a1[1];
  if (v12)
  {
    unint64_t v10 = v102;
    if (!v118.i8[0]) {
      unint64_t v10 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v9[-*a1] >> 3);
    }
    if ((unint64_t)v9 >= *v108)
    {
      unint64_t v81 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v9[-*a1] >> 3);
      if (v81 + 1 > 0x222222222222222) {
LABEL_125:
      }
        sub_1001D7FD4();
      unint64_t v82 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(*v108 - *a1) >> 3);
      if (v82 <= v81 + 1) {
        unint64_t v82 = v81 + 1;
      }
      if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*v108 - *a1) >> 3) >= 0x111111111111111) {
        unint64_t v83 = 0x222222222222222;
      }
      else {
        unint64_t v83 = v82;
      }
      if (v83) {
        double v84 = (char *)sub_10029BE4C((uint64_t)v108, v83);
      }
      else {
        double v84 = 0;
      }
      __int16 v85 = (int64x2_t *)&v84[120 * v81];
      BOOL v86 = &v84[120 * v83];
      int64x2_t v87 = *(int64x2_t *)v113;
      int64x2_t v88 = *(int64x2_t *)&v113[16];
      int64x2_t v89 = v115;
      v85[2] = v114;
      v85[3] = v89;
      int64x2_t *v85 = v87;
      v85[1] = v88;
      int64x2_t v90 = v116;
      int64x2_t v91 = v117;
      int64x2_t v92 = v118;
      v85[7].i64[0] = v119;
      v85[5] = v91;
      v85[6] = v92;
      v85[4] = v90;
      double v9 = &v85[7].i8[8];
      int v94 = (char *)*a1;
      int v93 = (char *)a1[1];
      if (v93 != (char *)*a1)
      {
        do
        {
          int64x2_t v95 = *(int64x2_t *)(v93 - 120);
          int64x2_t v96 = *(int64x2_t *)(v93 - 104);
          int64x2_t v97 = *(int64x2_t *)(v93 - 88);
          *(int64x2_t *)((char *)v85 - 72) = *(int64x2_t *)(v93 - 72);
          *(int64x2_t *)((char *)v85 - 88) = v97;
          *(int64x2_t *)((char *)v85 - 104) = v96;
          *(int64x2_t *)((char *)v85 - 120) = v95;
          int64x2_t v98 = *(int64x2_t *)(v93 - 56);
          int64x2_t v99 = *(int64x2_t *)(v93 - 40);
          int64x2_t v100 = *(int64x2_t *)(v93 - 24);
          v85[-1].i16[4] = *((_WORD *)v93 - 4);
          *(int64x2_t *)((char *)v85 - 24) = v100;
          *(int64x2_t *)((char *)v85 - 40) = v99;
          *(int64x2_t *)((char *)v85 - 56) = v98;
          __int16 v85 = (int64x2_t *)((char *)v85 - 120);
          v93 -= 120;
        }
        while (v93 != v94);
        int v93 = (char *)*a1;
      }
      *a1 = v85;
      a1[1] = v9;
      a1[2] = v86;
      if (v93) {
        operator delete(v93);
      }
    }
    else
    {
      long long v75 = *(_OWORD *)v113;
      long long v76 = *(_OWORD *)&v113[16];
      int64x2_t v77 = v115;
      *((int64x2_t *)v9 + 2) = v114;
      *((int64x2_t *)v9 + 3) = v77;
      *(_OWORD *)double v9 = v75;
      *((_OWORD *)v9 + 1) = v76;
      int64x2_t v78 = v116;
      int64x2_t v79 = v117;
      int64x2_t v80 = v118;
      *((void *)v9 + 14) = v119;
      *((int64x2_t *)v9 + 5) = v79;
      *((int64x2_t *)v9 + 6) = v80;
      *((int64x2_t *)v9 + 4) = v78;
      v9 += 120;
    }
    a1[1] = v9;
  }
  else
  {
    unint64_t v10 = v102;
  }
LABEL_121:
  float v101 = (char *)*a1;
  if (v10 < 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v9[-*a1] >> 3) && !v101[120 * v10 + 96]) {
    v101[120 * v10 + 113] = 1;
  }
}

void sub_100BAEC78(double *a1, double *a2, double *a3, double *a4)
{
  sub_100BAEF08(a1, a2, a3, a4);
  double v8 = *a1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241D6E0))
  {
    qword_10241D6D8 = 0x3F91DF46A2529D39;
    __cxa_guard_release(&qword_10241D6E0);
  }
  double v9 = *(double *)&qword_10241D6D8;
  double v10 = *a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241D6E0))
  {
    qword_10241D6D8 = 0x3F91DF46A2529D39;
    __cxa_guard_release(&qword_10241D6E0);
  }
  double v11 = *(double *)&qword_10241D6D8;
  double v12 = *a3;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241D6E0))
  {
    qword_10241D6D8 = 0x3F91DF46A2529D39;
    __cxa_guard_release(&qword_10241D6E0);
  }
  double v13 = *(double *)&qword_10241D6D8;
  double v14 = *a4;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
  {
    double v23 = v14;
    double v24 = v13;
    int v22 = __cxa_guard_acquire(&qword_10241D6E0);
    double v14 = v23;
    double v13 = v24;
    if (v22)
    {
      qword_10241D6D8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_10241D6E0);
      double v14 = v23;
      double v13 = v24;
    }
  }
  double v15 = v8 * v9;
  double v16 = v14 * *(double *)&qword_10241D6D8;
  __double2 v17 = __sincos_stret(v12 * v13 - v15);
  __double2 v18 = __sincos_stret(v10 * v11);
  __double2 v19 = __sincos_stret(v16);
  double v20 = atan2(v17.__sinval * v19.__cosval, v17.__cosval * -(v18.__sinval * v19.__cosval) + v18.__cosval * v19.__sinval);
  double v21 = atan2(v18.__cosval * v17.__sinval, v18.__cosval * v19.__sinval * v17.__cosval - v18.__sinval * v19.__cosval);

  sub_100BAF0E0(a1, a2, a3, a4, v20, v21);
}

void *sub_100BAEF08(void *result, double *a2, void *a3, double *a4)
{
  double v4 = fabs(*a2);
  double v5 = 90.0;
  if (v4 == 90.0)
  {
    BOOL v6 = 1;
  }
  else if ((*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    BOOL v6 = 0;
  }
  else
  {
    double v7 = fabs(v4 + -90.0);
    if (v4 < 90.0) {
      double v4 = 90.0;
    }
    if (v4 >= 1.0) {
      double v8 = v4 * 2.22044605e-16;
    }
    else {
      double v8 = 2.22044605e-16;
    }
    BOOL v6 = v7 <= v8;
  }
  double v9 = fabs(*a4);
  if (v9 == 90.0)
  {
    BOOL v10 = 1;
  }
  else
  {
    if ((*(void *)a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      BOOL v10 = 0;
      BOOL v13 = !v6;
      int v14 = 1;
      goto LABEL_24;
    }
    double v11 = fabs(v9 + -90.0);
    if (v9 >= 90.0) {
      double v5 = v9;
    }
    if (v5 >= 1.0) {
      double v12 = v5 * 2.22044605e-16;
    }
    else {
      double v12 = 2.22044605e-16;
    }
    BOOL v10 = v11 <= v12;
  }
  BOOL v13 = !v6;
  int v14 = !v10;
  if (v6 && (v14 & 1) == 0)
  {
    *uint64_t result = 0;
    *a3 = 0;
    goto LABEL_29;
  }
LABEL_24:
  if (v13 || v10)
  {
    if (((v6 | v14) & 1) == 0) {
      *a3 = *result;
    }
  }
  else
  {
    BOOL v10 = 0;
    *uint64_t result = *a3;
  }
LABEL_29:
  double v15 = *(double *)result;
  double v16 = *(double *)a3;
  if (*(double *)result == *(double *)a3)
  {
    double v17 = *a2;
    double v18 = *a4;
    if (*a2 <= *a4) {
      return result;
    }
    goto LABEL_37;
  }
  if (v6 || v10) {
    sub_101A80D98();
  }
  if (v15 > v16)
  {
    *(double *)uint64_t result = v16;
    *(double *)a3 = v15;
    double v19 = *a2;
    *a2 = *a4;
    *a4 = v19;
    double v15 = *(double *)result;
    double v16 = *(double *)a3;
  }
  if (vabdd_f64(v15, v16) > 180.0)
  {
    double v20 = v15 + 360.0;
    *(double *)uint64_t result = v20;
    *uint64_t result = *a3;
    *(double *)a3 = v20;
    double v17 = *a2;
    double v18 = *a4;
LABEL_37:
    *a2 = v18;
    *a4 = v17;
  }
  return result;
}

void sub_100BAF0E0(double *a1, double *a2, double *a3, double *a4, double a5, double a6)
{
  if (*a1 > *a3) {
    sub_101A80DC4();
  }
  double v9 = *a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
  {
    double v34 = a6;
    int v29 = __cxa_guard_acquire(&qword_10241D6E0);
    a6 = v34;
    if (v29)
    {
      qword_10241D6D8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_10241D6E0);
      a6 = v34;
    }
  }
  double v10 = *(double *)&qword_10241D6D8;
  double v11 = *a4;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
  {
    double v33 = v11;
    double v35 = a6;
    double v32 = v10;
    int v30 = __cxa_guard_acquire(&qword_10241D6E0);
    double v10 = v32;
    double v11 = v33;
    a6 = v35;
    if (v30)
    {
      qword_10241D6D8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_10241D6E0);
      double v10 = v32;
      double v11 = v33;
      a6 = v35;
    }
  }
  if (a5 != a6)
  {
    if ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_14;
    }
    double v12 = vabdd_f64(a5, a6);
    double v13 = fabs(a5);
    double v14 = fabs(a6);
    if (v13 < v14) {
      double v13 = v14;
    }
    double v15 = v13 >= 1.0 ? v13 * 2.22044605e-16 : 2.22044605e-16;
    if (v12 > v15)
    {
LABEL_14:
      double v16 = *a2;
      if (*a2 <= *a4)
      {
        double v17 = v9 * v10;
        double v18 = a6;
      }
      else
      {
        double v17 = v11 * *(double *)&qword_10241D6D8;
        *a2 = *a4;
        *a4 = v16;
        double v18 = a5;
        a5 = a6;
      }
      if (a5 == v18) {
        goto LABEL_46;
      }
      if ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(void *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v19 = vabdd_f64(a5, v18);
        double v20 = fabs(a5);
        double v21 = fabs(v18);
        if (v20 < v21) {
          double v20 = v21;
        }
        double v22 = v20 >= 1.0 ? v20 * 2.22044605e-16 : 2.22044605e-16;
        if (v19 <= v22) {
LABEL_46:
        }
          sub_101A80DF0();
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024730B8, memory_order_acquire) & 1) == 0)
      {
        double v36 = v17;
        int v31 = __cxa_guard_acquire(&qword_1024730B8);
        double v17 = v36;
        if (v31)
        {
          qword_1024730B0 = 0x3FF921FB54442D18;
          __cxa_guard_release(&qword_1024730B8);
          double v17 = v36;
        }
      }
      if (a5 >= v18)
      {
        if (a5 <= *(double *)&qword_1024730B0 || *(double *)&qword_1024730B0 <= v18) {
          return;
        }
      }
      else if (a5 >= *(double *)&qword_1024730B0 || *(double *)&qword_1024730B0 >= v18)
      {
        return;
      }
      double v25 = cos(v17);
      long double v26 = sin(a5);
      double v27 = acos(fabs(v25 * v26));
      if (*a2 + *a4 >= 0.0)
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024730C8, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_1024730C8))
        {
          qword_1024730C0 = 0x404CA5DC1A63C1F8;
          __cxa_guard_release(&qword_1024730C8);
        }
        if (*a4 < v27 * *(double *)&qword_1024730C0) {
          *a4 = v27 * *(double *)&qword_1024730C0;
        }
      }
      else
      {
        double v28 = -v27;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024730C8, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_1024730C8))
        {
          qword_1024730C0 = 0x404CA5DC1A63C1F8;
          __cxa_guard_release(&qword_1024730C8);
        }
        if (*a2 > *(double *)&qword_1024730C0 * v28) {
          *a2 = *(double *)&qword_1024730C0 * v28;
        }
      }
    }
  }
}

void sub_100BAF4AC(double *a1, double **a2)
{
  double v3 = a2[1];
  double v4 = **a2;
  double v5 = *v3;
  double v6 = v3[1];
  double v25 = (*a2)[1];
  v26[0] = v4;
  sub_10075D084(v26, &v25, 1);
  double v8 = v25;
  double v7 = v26[0];
  double v25 = v6;
  v26[0] = v5;
  sub_10075D084(v26, &v25, 1);
  double v9 = v25;
  double v24 = v8;
  double v25 = v7;
  double v22 = v9;
  double v23 = v26[0];
  sub_100BAEC78(&v25, &v24, &v23, &v22);
  v26[0] = v25;
  v26[1] = v24;
  v26[2] = v23;
  v26[3] = v22;
  double v10 = *a1;
  double v11 = 1.79769313e308;
  double v12 = a1[2];
  double v13 = a1[3];
  if (*a1 == 1.79769313e308 && a1[1] == 1.79769313e308 && v12 == -1.79769313e308 && v13 == -1.79769313e308)
  {
    double v14 = -1.79769313e308;
    double v15 = -1.79769313e308;
    double v16 = 1.79769313e308;
  }
  else
  {
    double v24 = a1[1];
    double v25 = v10;
    double v22 = v13;
    double v23 = v12;
    double v17 = vabdd_f64(v10, v12);
    if (v17 < 360.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(v10 - v12)) > 0x7FEFFFFFFFFFFFFFLL)
      {
        BOOL v18 = 0;
      }
      else
      {
        double v19 = vabdd_f64(360.0, v17);
        double v20 = fmax(v17, 360.0);
        if (v20 >= 1.0) {
          double v21 = v20 * 2.22044605e-16;
        }
        else {
          double v21 = 2.22044605e-16;
        }
        BOOL v18 = v19 <= v21;
      }
    }
    else
    {
      BOOL v18 = 1;
    }
    sub_100BAFBC0(&v25, &v24, &v23, &v22, v18);
    double v11 = v24;
    double v16 = v25;
    double v14 = v22;
    double v15 = v23;
  }
  v26[4] = v16;
  v26[5] = v11;
  v26[6] = v15;
  v26[7] = v14;
  sub_100BAF668((uint64_t)v26, a1);
}

void sub_100BAF668(uint64_t a1, void *a2)
{
  uint64_t v46 = sub_100BB0378(a1, a1 + 64);
  double v4 = *(double *)(a1 + 24);
  double v5 = *(double *)(a1 + 56);
  uint64_t v6 = a1;
  if (v4 < v5)
  {
    if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_6;
    }
    double v42 = vabdd_f64(v5, v4);
    double v43 = fabs(v5);
    double v44 = fabs(v4);
    if (v43 >= v44) {
      double v44 = v43;
    }
    double v45 = v44 >= 1.0 ? v44 * 2.22044605e-16 : 2.22044605e-16;
    uint64_t v6 = a1;
    if (v42 > v45) {
LABEL_6:
    }
      uint64_t v6 = a1 + 32;
  }
  double v8 = 0;
  uint64_t v9 = 0;
  long long __p = 0;
  double v54 = 0;
  v55[0] = 0;
  float64x2_t v49 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  float64x2_t v48 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  do
  {
    double v10 = (float64x2_t *)(a1 + 32 * v9);
    float64x2_t v11 = *v10;
    float64x2_t v50 = v10[1];
    if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(*v10, v48), (int32x4_t)vceqq_f64(v50, v49))))))
    {
      float64x2_t v47 = *v10;
      if (v11.f64[1] != 90.0)
      {
        if ((*(void *)&v11.f64[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
          goto LABEL_17;
        }
        v11.f64[0] = fabs(v11.f64[1] + -90.0);
        double v12 = fabs(v11.f64[1]);
        if (v12 < 90.0) {
          double v12 = 90.0;
        }
        double v13 = v12 >= 1.0 ? v12 * 2.22044605e-16 : 2.22044605e-16;
        if (v11.f64[0] > v13)
        {
LABEL_17:
          if (v50.f64[1] != -90.0)
          {
            if ((*(void *)&v50.f64[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
              goto LABEL_34;
            }
            double v14 = fabs(v50.f64[1] + 90.0);
            double v15 = fabs(v50.f64[1]);
            if (v15 < 90.0) {
              double v15 = 90.0;
            }
            double v16 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
            if (v14 > v16)
            {
LABEL_34:
              if (v50.f64[0] <= 180.0) {
                goto LABEL_26;
              }
              if ((*(void *)&v50.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
                goto LABEL_35;
              }
              double v17 = fabs(v50.f64[0] + -180.0);
              double v18 = fabs(v50.f64[0]);
              if (v18 < 180.0) {
                double v18 = 180.0;
              }
              double v19 = v18 >= 1.0 ? v18 * 2.22044605e-16 : 2.22044605e-16;
              if (v17 <= v19)
              {
LABEL_26:
                if ((unint64_t)v8 < v55[0])
                {
                  void *v8 = *(void *)&v47.f64[0];
                  v8[1] = *(void *)&v50.f64[0];
                  v8 += 2;
LABEL_79:
                  double v54 = (char *)v8;
                  goto LABEL_80;
                }
                uint64_t v21 = ((char *)v8 - (unsigned char *)__p) >> 4;
                if ((unint64_t)(v21 + 1) >> 60) {
                  sub_1001D7FD4();
                }
                unint64_t v22 = (uint64_t)(v55[0] - (void)__p) >> 3;
                if (v22 <= v21 + 1) {
                  unint64_t v22 = v21 + 1;
                }
                if (v55[0] - (void)__p >= 0x7FFFFFFFFFFFFFF0uLL) {
                  unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v23 = v22;
                }
                if (v23) {
                  double v24 = (char *)sub_1000C571C((uint64_t)v55, v23);
                }
                else {
                  double v24 = 0;
                }
                int v29 = &v24[16 * v21];
                *(float64_t *)int v29 = v47.f64[0];
                *((void *)v29 + 1) = *(void *)&v50.f64[0];
                int v31 = (char *)__p;
                int v30 = v54;
                double v32 = v29;
                if (v54 != __p)
                {
                  do
                  {
                    *((_OWORD *)v32 - 1) = *((_OWORD *)v30 - 1);
                    v32 -= 16;
                    v30 -= 16;
                  }
                  while (v30 != v31);
LABEL_76:
                  int v30 = (char *)__p;
                }
              }
              else
              {
LABEL_35:
                if ((unint64_t)v8 >= v55[0])
                {
                  uint64_t v25 = ((char *)v8 - (unsigned char *)__p) >> 4;
                  if ((unint64_t)(v25 + 1) >> 60) {
                    sub_1001D7FD4();
                  }
                  unint64_t v26 = (uint64_t)(v55[0] - (void)__p) >> 3;
                  if (v26 <= v25 + 1) {
                    unint64_t v26 = v25 + 1;
                  }
                  if (v55[0] - (void)__p >= 0x7FFFFFFFFFFFFFF0uLL) {
                    unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v27 = v26;
                  }
                  if (v27) {
                    double v28 = (char *)sub_1000C571C((uint64_t)v55, v27);
                  }
                  else {
                    double v28 = 0;
                  }
                  double v33 = &v28[16 * v25];
                  *(float64_t *)double v33 = v47.f64[0];
                  *((void *)v33 + 1) = 0x4066800000000000;
                  double v35 = (char *)__p;
                  double v34 = v54;
                  double v36 = v33;
                  if (v54 != __p)
                  {
                    do
                    {
                      *((_OWORD *)v36 - 1) = *((_OWORD *)v34 - 1);
                      v36 -= 16;
                      v34 -= 16;
                    }
                    while (v34 != v35);
                    double v34 = (char *)__p;
                  }
                  double v20 = v33 + 16;
                  long long __p = v36;
                  double v54 = v33 + 16;
                  v55[0] = &v28[16 * v27];
                  if (v34) {
                    operator delete(v34);
                  }
                }
                else
                {
                  void *v8 = *(void *)&v47.f64[0];
                  v8[1] = 0x4066800000000000;
                  double v20 = v8 + 2;
                }
                double v54 = (char *)v20;
                double v37 = v50.f64[0] + -360.0;
                if ((unint64_t)v20 < v55[0])
                {
                  void *v20 = 0xC066800000000000;
                  *((double *)v20 + 1) = v37;
                  double v8 = v20 + 2;
                  goto LABEL_79;
                }
                uint64_t v38 = ((char *)v20 - (unsigned char *)__p) >> 4;
                if ((unint64_t)(v38 + 1) >> 60) {
                  sub_1001D7FD4();
                }
                unint64_t v39 = (uint64_t)(v55[0] - (void)__p) >> 3;
                if (v39 <= v38 + 1) {
                  unint64_t v39 = v38 + 1;
                }
                if (v55[0] - (void)__p >= 0x7FFFFFFFFFFFFFF0uLL) {
                  unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v23 = v39;
                }
                if (v23) {
                  double v24 = (char *)sub_1000C571C((uint64_t)v55, v23);
                }
                else {
                  double v24 = 0;
                }
                int v29 = &v24[16 * v38];
                *(void *)int v29 = 0xC066800000000000;
                *((double *)v29 + 1) = v37;
                double v40 = (char *)__p;
                int v30 = v54;
                double v32 = v29;
                if (v54 != __p)
                {
                  do
                  {
                    *((_OWORD *)v32 - 1) = *((_OWORD *)v30 - 1);
                    v32 -= 16;
                    v30 -= 16;
                  }
                  while (v30 != v40);
                  goto LABEL_76;
                }
              }
              double v8 = v29 + 16;
              long long __p = v32;
              double v54 = v29 + 16;
              v55[0] = &v24[16 * v23];
              if (v30) {
                operator delete(v30);
              }
              goto LABEL_79;
            }
          }
        }
      }
    }
LABEL_80:
    ++v9;
  }
  while (v9 != 2);
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  sub_100BAFEFC((uint64_t *)&__p, (double *)&v52, (double *)&v51);
  uint64_t v41 = v51;
  *a2 = v52;
  a2[1] = *(void *)(v46 + 8);
  a2[2] = v41;
  a2[3] = *(void *)(v6 + 24);
  if (__p)
  {
    double v54 = (char *)__p;
    operator delete(__p);
  }
}

void sub_100BAFB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_100BAFBC0(double *a1, double *a2, double *a3, double *a4, int a5)
{
  sub_10075D084(a1, a2, 0);
  sub_10075D084(a3, a4, 0);
  double v10 = *a2;
  if (*a2 == -90.0) {
    goto LABEL_9;
  }
  if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v15 = 90.0;
    double v16 = fabs(v10 + 90.0);
    double v17 = fabs(v10);
    if (v17 >= 90.0) {
      double v15 = v17;
    }
    double v18 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v16 <= v18)
    {
LABEL_9:
      double v11 = *a4;
      if (*a4 == -90.0) {
        goto LABEL_20;
      }
      if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v12 = fabs(v11 + 90.0);
        double v13 = fabs(v11);
        if (v13 < 90.0) {
          double v13 = 90.0;
        }
        double v14 = v13 >= 1.0 ? v13 * 2.22044605e-16 : 2.22044605e-16;
        if (v12 <= v14) {
          goto LABEL_20;
        }
      }
    }
  }
  if (v10 != 90.0)
  {
    if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_60;
    }
    double v33 = fabs(v10 + -90.0);
    double v34 = fabs(v10);
    if (v34 < 90.0) {
      double v34 = 90.0;
    }
    double v35 = v34 >= 1.0 ? v34 * 2.22044605e-16 : 2.22044605e-16;
    if (v33 > v35) {
      goto LABEL_60;
    }
  }
  double v19 = *a4;
  if (*a4 == 90.0) {
    goto LABEL_20;
  }
  if ((*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    goto LABEL_60;
  }
  double v36 = fabs(v19 + -90.0);
  double v37 = fabs(v19);
  if (v37 < 90.0) {
    double v37 = 90.0;
  }
  double v38 = v37 >= 1.0 ? v37 * 2.22044605e-16 : 2.22044605e-16;
  if (v36 <= v38)
  {
LABEL_20:
    *a3 = 0.0;
    *a1 = 0.0;
    double v20 = 0.0;
  }
  else
  {
LABEL_60:
    if (a5)
    {
      *a1 = -180.0;
      double v39 = 180.0;
LABEL_64:
      *a3 = v39;
      double v20 = *a1;
      goto LABEL_21;
    }
    double v20 = *a1;
    if (*a1 > *a3)
    {
      double v39 = *a3 + 360.0;
      goto LABEL_64;
    }
  }
LABEL_21:
  double v21 = *a3;
  if (*a3 < v20)
  {
    if ((*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_65;
    }
    double v22 = vabdd_f64(v20, v21);
    double v23 = fabs(v20);
    double v24 = fabs(v21);
    if (v23 < v24) {
      double v23 = v24;
    }
    double v25 = v23 >= 1.0 ? v23 * 2.22044605e-16 : 2.22044605e-16;
    if (v22 > v25) {
LABEL_65:
    }
      sub_101A80E74();
  }
  if (v20 < -180.0)
  {
    if ((*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || ((v26 = vabdd_f64(-180.0, v20), double v27 = fmax(fabs(v20), 180.0), v27 >= 1.0)
        ? (double v28 = v27 * 2.22044605e-16)
        : (double v28 = 2.22044605e-16),
          v26 > v28))
    {
      sub_101A80E48();
    }
  }
  double v29 = v21 - v20;
  double result = 360.0;
  if (v29 > 360.0)
  {
    if ((*(void *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_67;
    }
    double v31 = fabs(v29 + -360.0);
    double v32 = fabs(v29);
    if (v32 >= 360.0) {
      double result = v32;
    }
    double result = result >= 1.0 ? result * 2.22044605e-16 : 2.22044605e-16;
    if (v31 > result) {
LABEL_67:
    }
      sub_101A80E1C();
  }
  return result;
}

void sub_100BAFEFC(uint64_t *a1, double *a2, double *a3)
{
  *a3 = 0.0;
  *a2 = 0.0;
  double v5 = (void *)*a1;
  uint64_t v6 = (void *)a1[1];
  if (v5 != v6)
  {
    *a2 = *(double *)sub_100BB0554(v5, v6);
    uint64_t v8 = *a1;
    uint64_t v9 = a1[1];
    uint64_t v10 = *a1 + 16;
    if (*a1 != v9 && v10 != v9)
    {
      do
      {
        double v49 = *(double *)(v8 + 8);
        double v50 = *(double *)(v10 + 8);
        if (v49 < v50)
        {
          if ((*(void *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(void *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            goto LABEL_87;
          }
          double v52 = vabdd_f64(v50, v49);
          double v53 = fabs(v50);
          double v54 = fabs(v49);
          if (v53 >= v54) {
            double v54 = v53;
          }
          double v55 = v54 >= 1.0 ? v54 * 2.22044605e-16 : 2.22044605e-16;
          if (v52 > v55) {
LABEL_87:
          }
            uint64_t v8 = v10;
        }
        v10 += 16;
      }
      while (v10 != v9);
    }
    double v12 = *(double *)(v8 + 8);
    *a3 = v12;
    double v13 = v12 - *a2;
    if (v13 > 180.0)
    {
      if ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
        goto LABEL_61;
      }
      double v14 = fabs(v13 + -180.0);
      double v15 = fabs(v13);
      if (v15 < 180.0) {
        double v15 = 180.0;
      }
      double v16 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
      if (v14 > v16)
      {
LABEL_61:
        double v56 = 0.0;
        double v57 = 0.0;
        double v17 = sub_100BB040C(a1, &v57, &v56);
        double v18 = *a3;
        double v19 = *a2;
        if (*a3 < *a2)
        {
          if ((*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(void *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            goto LABEL_100;
          }
          double v20 = vabdd_f64(v19, v18);
          double v21 = fabs(v19);
          double v22 = fabs(v18);
          if (v21 < v22) {
            double v21 = v22;
          }
          double v23 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
          if (v20 > v23) {
LABEL_100:
          }
            sub_101A80F7C();
        }
        if (v18 > 180.0)
        {
          if ((*(void *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
            goto LABEL_102;
          }
          double v24 = fabs(v18 + -180.0);
          double v25 = fabs(v18);
          if (v25 < 180.0) {
            double v25 = 180.0;
          }
          double v26 = v25 >= 1.0 ? v25 * 2.22044605e-16 : 2.22044605e-16;
          if (v24 > v26) {
LABEL_102:
          }
            sub_101A80F50();
        }
        if (v19 < -180.0)
        {
          if ((*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || ((double v27 = vabdd_f64(-180.0, v19), v28 = fmax(fabs(v19), 180.0), v28 >= 1.0)
              ? (double v29 = v28 * 2.22044605e-16)
              : (double v29 = 2.22044605e-16),
                v27 > v29))
          {
            sub_101A80F24();
          }
        }
        double v30 = v57;
        if (v56 < v57)
        {
          if ((*(void *)&v57 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(void *)&v56 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            goto LABEL_101;
          }
          double v31 = vabdd_f64(v57, v56);
          double v32 = fabs(v57);
          double v33 = fabs(v56);
          if (v32 < v33) {
            double v32 = v33;
          }
          double v34 = v32 >= 1.0 ? v32 * 2.22044605e-16 : 2.22044605e-16;
          if (v31 > v34) {
LABEL_101:
          }
            sub_101A80EF8();
        }
        if (v56 > 180.0)
        {
          if ((*(void *)&v56 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
            goto LABEL_104;
          }
          double v35 = fabs(v56 + -180.0);
          double v36 = fabs(v56);
          if (v36 < 180.0) {
            double v36 = 180.0;
          }
          double v37 = v36 >= 1.0 ? v36 * 2.22044605e-16 : 2.22044605e-16;
          if (v35 > v37) {
LABEL_104:
          }
            sub_101A80ECC();
        }
        if (v57 < -180.0)
        {
          if ((*(void *)&v57 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || ((double v38 = vabdd_f64(-180.0, v57), v39 = fmax(fabs(v57), 180.0), v39 >= 1.0)
              ? (double v40 = v39 * 2.22044605e-16)
              : (double v40 = 2.22044605e-16),
                v38 > v40))
          {
            sub_101A80EA0();
          }
        }
        if (v17 > 0.0)
        {
          if ((*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            if (v19 + 360.0 - v18 >= v17) {
              return;
            }
          }
          else
          {
            double v41 = fabs(v17);
            double v42 = 2.22044605e-16;
            if (v41 >= 1.0) {
              double v42 = v41 * 2.22044605e-16;
            }
            if (v41 <= v42) {
              return;
            }
            double v43 = v19 + 360.0 - v18;
            if (v43 >= v17) {
              return;
            }
            BOOL v44 = ((*(void *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
               && (*(void *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
            if (!v44 || *(void *)&v43 == 0)
            {
              double v46 = vabdd_f64(v17, v43);
              double v47 = fabs(v43);
              if (v41 >= v47) {
                double v47 = v41;
              }
              double v48 = v47 >= 1.0 ? v47 * 2.22044605e-16 : 2.22044605e-16;
              if (v46 <= v48) {
                return;
              }
            }
          }
          *a2 = v56;
          *a3 = v30 + 360.0;
        }
      }
    }
  }
}

uint64_t sub_100BB0378(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    for (uint64_t i = result + 32; i != a2; i += 32)
    {
      double v3 = *(double *)(i + 8);
      double v4 = *(double *)(result + 8);
      if (v3 < v4)
      {
        if ((*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_8;
        }
        double v6 = vabdd_f64(v4, v3);
        double v7 = fabs(v4);
        double v8 = fabs(v3);
        if (v7 >= v8) {
          double v8 = v7;
        }
        double v9 = v8 >= 1.0 ? v8 * 2.22044605e-16 : 2.22044605e-16;
        if (v6 > v9) {
LABEL_8:
        }
          double result = i;
      }
    }
  }
  return result;
}

double sub_100BB040C(uint64_t *a1, double *a2, double *a3)
{
  double v16 = 0;
  double v17 = 0;
  uint64_t v18 = 0;
  uint64_t v13 = 0;
  double v14 = 0.0;
  double v15 = 0.0;
  sub_100BB05E8(a1, (uint64_t *)&v16);
  while (1)
  {
    double v5 = v16;
    double v6 = v17;
    if (v16 == v17) {
      break;
    }
    long long v19 = *(_OWORD *)v16;
    if ((char *)v17 - (char *)v16 >= 17)
    {
      long long v21 = *(_OWORD *)v16;
      double v7 = sub_100BB0BE0(v16, (uint64_t)&v20, (unint64_t)((char *)v17 - (char *)v16) >> 4);
      double v8 = v6 - 2;
      if (v6 - 2 == v7)
      {
        *double v7 = v21;
        *((unsigned char *)v7 + 8) = BYTE8(v21);
      }
      else
      {
        uint64_t v9 = *v8;
        *((unsigned char *)v7 + 8) = *((unsigned char *)v6 - 8);
        *double v7 = v9;
        uint64_t *v8 = v21;
        *((unsigned char *)v6 - 8) = BYTE8(v21);
        sub_100BB0CE8((uint64_t)v5, (uint64_t)(v7 + 2), (uint64_t)&v20, ((char *)(v7 + 2) - (char *)v5) >> 4);
      }
      double v6 = v17;
    }
    double v17 = v6 - 2;
    sub_100BB06D8((uint64_t)&v13, &v19, (uint64_t *)&v16);
  }
  double v10 = v14;
  double v11 = v15;
  *a2 = v14;
  *a3 = v11;
  if (v5)
  {
    double v17 = v5;
    operator delete(v5);
  }
  return v11 - v10;
}

void sub_100BB0534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100BB0554(void *result, void *a2)
{
  if (result != a2)
  {
    for (uint64_t i = result + 2; i != a2; i += 2)
    {
      double v3 = *(double *)i;
      double v4 = *(double *)result;
      if (*(double *)i < *(double *)result)
      {
        if ((*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_8;
        }
        double v6 = vabdd_f64(v4, v3);
        double v7 = fabs(v4);
        double v8 = fabs(v3);
        if (v7 >= v8) {
          double v8 = v7;
        }
        double v9 = v8 >= 1.0 ? v8 * 2.22044605e-16 : 2.22044605e-16;
        if (v6 > v9) {
LABEL_8:
        }
          double result = i;
      }
    }
  }
  return result;
}

void sub_100BB05E8(uint64_t *a1, uint64_t *a2)
{
  if (*a2 != a2[1]) {
    sub_101A80FA8();
  }
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 4;
  double v17 = 0;
  uint64_t v18 = 0;
  double v16 = 0;
  sub_100BB084C((char *)&v16, v3, v4, v5);
  uint64_t v7 = (uint64_t)v16;
  double v6 = v17;
  uint64_t v8 = v17 - v16;
  if (v17 - v16 >= 17)
  {
    uint64_t v9 = v8 >> 4;
    unint64_t v10 = (unint64_t)((v8 >> 4) - 2) >> 1;
    unint64_t v11 = v10 + 1;
    double v12 = (uint64_t *)&v16[16 * v10];
    do
    {
      sub_100BB08D0(v7, (uint64_t)&v19, v9, v12);
      v12 -= 2;
      --v11;
    }
    while (v11);
    uint64_t v7 = (uint64_t)v16;
    double v6 = v17;
  }
  uint64_t v13 = (unsigned char *)*a2;
  *a2 = v7;
  a2[1] = (uint64_t)v6;
  uint64_t v14 = v18;
  uint64_t v15 = a2[2];
  double v16 = v13;
  uint64_t v18 = v15;
  a2[2] = v14;
  if (v13)
  {
    double v17 = v13;
    operator delete(v13);
  }
}

void sub_100BB06BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BB06D8(uint64_t result, unsigned char *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  if (a2[8])
  {
    *(void *)double result = v4 + 1;
    uint64_t v5 = *(void *)a2;
    unint64_t v6 = a3[2];
    unint64_t v7 = a3[1];
    if (v7 >= v6)
    {
      uint64_t v13 = (uint64_t)(v7 - *a3) >> 4;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60) {
        sub_1001D7FD4();
      }
      uint64_t v15 = v6 - *a3;
      if (v15 >> 3 > v14) {
        unint64_t v14 = v15 >> 3;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16) {
        double v17 = (char *)sub_1000C571C((uint64_t)(a3 + 2), v16);
      }
      else {
        double v17 = 0;
      }
      uint64_t v18 = &v17[16 * v13];
      char v19 = &v17[16 * v16];
      *(void *)uint64_t v18 = v5;
      v18[8] = 0;
      uint64_t v8 = (uint64_t)(v18 + 16);
      long long v21 = (unsigned char *)*a3;
      char v20 = (unsigned char *)a3[1];
      if (v20 != (unsigned char *)*a3)
      {
        do
        {
          uint64_t v22 = *((void *)v20 - 2);
          v20 -= 16;
          char v23 = v20[8];
          *((void *)v18 - 2) = v22;
          v18 -= 16;
          v18[8] = v23;
        }
        while (v20 != v21);
        char v20 = (unsigned char *)*a3;
      }
      *a3 = (uint64_t)v18;
      a3[1] = v8;
      a3[2] = (uint64_t)v19;
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *(void *)unint64_t v7 = v5;
      *(unsigned char *)(v7 + 8) = 0;
      uint64_t v8 = v7 + 16;
    }
    a3[1] = v8;
    return sub_100BB0CE8(*a3, v8, (uint64_t)&v24, (v8 - *a3) >> 4);
  }
  else
  {
    uint64_t v9 = v4 - 1;
    *(void *)double result = v9;
    if (!v9)
    {
      uint64_t v10 = *a3;
      if (*a3 != a3[1])
      {
        if (!*(unsigned char *)(v10 + 8)) {
          sub_101A80FD4();
        }
        double v11 = **(double **)v10;
        double v12 = *(double *)(*(void *)a2 + 8);
        if (v11 - v12 > *(double *)(result + 16) - *(double *)(result + 8))
        {
          *(double *)(result + 8) = v12;
          *(double *)(result + 16) = v11;
        }
      }
    }
  }
  return result;
}

char *sub_100BB084C(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    double result = sub_10022F168(result, a4);
    for (uint64_t i = *((void *)v6 + 1); a2 != a3; i += 16)
    {
      *(void *)uint64_t i = a2;
      *(unsigned char *)(i + 8) = 1;
      a2 += 16;
    }
    *((void *)v6 + 1) = i;
  }
  return result;
}

void sub_100BB08B4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BB08D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 < 2) {
    return result;
  }
  uint64_t v4 = (uint64_t)a4 - result;
  int64_t v5 = (unint64_t)(a3 - 2) >> 1;
  if (v5 < ((uint64_t)a4 - result) >> 4) {
    return result;
  }
  uint64_t v6 = v4 >> 3;
  uint64_t v7 = (v4 >> 3) | 1;
  uint64_t v8 = (uint64_t *)(result + 16 * v7);
  uint64_t v9 = v6 + 2;
  if (v9 >= a3) {
    goto LABEL_11;
  }
  double v10 = *(double *)(v8[2] + 8 * (*((unsigned char *)v8 + 24) == 0));
  double v11 = *(double *)(*v8 + 8 * (*((unsigned char *)v8 + 8) == 0));
  if (v10 != v11)
  {
    if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_65;
    }
    double v45 = vabdd_f64(v10, v11);
    double v46 = fabs(v10);
    double v47 = fabs(v11);
    if (v46 < v47) {
      double v46 = v47;
    }
    double v48 = v46 >= 1.0 ? v46 * 2.22044605e-16 : 2.22044605e-16;
    if (v45 > v48)
    {
LABEL_65:
      if (v10 >= v11) {
        goto LABEL_11;
      }
LABEL_10:
      v8 += 2;
      uint64_t v7 = v9;
      goto LABEL_11;
    }
  }
  if (*((unsigned char *)v8 + 24)) {
    BOOL v12 = *((unsigned char *)v8 + 8) == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12) {
    goto LABEL_10;
  }
LABEL_11:
  int v13 = *((unsigned __int8 *)a4 + 8);
  BOOL v14 = *((unsigned char *)a4 + 8) == 0;
  uint64_t v15 = *a4;
  double v16 = *(double *)(*a4 + 8 * (*((unsigned char *)a4 + 8) == 0));
  double v17 = *(double *)(*v8 + 8 * (*((unsigned char *)v8 + 8) == 0));
  if (v16 == v17) {
    goto LABEL_85;
  }
  if ((*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    goto LABEL_19;
  }
  double v41 = vabdd_f64(v16, v17);
  double v42 = fabs(v16);
  double v43 = fabs(v17);
  if (v42 < v43) {
    double v42 = v43;
  }
  double v44 = v42 >= 1.0 ? v42 * 2.22044605e-16 : 2.22044605e-16;
  if (v41 <= v44)
  {
LABEL_85:
    if (*((unsigned char *)a4 + 8) && !*((unsigned char *)v8 + 8)) {
      return result;
    }
  }
  else
  {
LABEL_19:
    if (v16 < v17) {
      return result;
    }
  }
  uint64_t v19 = *v8;
  *((unsigned char *)a4 + 8) = *((unsigned char *)v8 + 8);
  *a4 = v19;
  if (v5 < v7) {
    goto LABEL_68;
  }
  uint64_t v20 = 8 * v14;
  while (1)
  {
    long long v21 = v8;
    uint64_t v22 = 2 * v7;
    uint64_t v7 = (2 * v7) | 1;
    uint64_t v8 = (uint64_t *)(result + 16 * v7);
    uint64_t v23 = v22 + 2;
    if (v23 < a3)
    {
      double v24 = *(double *)(v8[2] + 8 * (*((unsigned char *)v8 + 24) == 0));
      double v25 = *(double *)(*v8 + 8 * (*((unsigned char *)v8 + 8) == 0));
      if (v24 == v25) {
        goto LABEL_86;
      }
      if ((*(void *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_45;
      }
      double v36 = vabdd_f64(v24, v25);
      double v37 = fabs(v24);
      double v38 = fabs(v25);
      if (v37 < v38) {
        double v37 = v38;
      }
      double v39 = v37 >= 1.0 ? v37 * 2.22044605e-16 : 2.22044605e-16;
      if (v36 <= v39)
      {
LABEL_86:
        if (*((unsigned char *)v8 + 24)) {
          BOOL v26 = *((unsigned char *)v8 + 8) == 0;
        }
        else {
          BOOL v26 = 0;
        }
        if (!v26) {
          goto LABEL_30;
        }
      }
      else
      {
LABEL_45:
        if (v24 >= v25) {
          goto LABEL_30;
        }
      }
      v8 += 2;
      uint64_t v7 = v23;
    }
LABEL_30:
    double v27 = *(double *)(v15 + v20);
    double v28 = *(double *)(*v8 + 8 * (*((unsigned char *)v8 + 8) == 0));
    if (v27 == v28) {
      break;
    }
    if ((*(void *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(void *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v32 = vabdd_f64(v27, v28);
      double v33 = fabs(v27);
      double v34 = fabs(v28);
      if (v33 < v34) {
        double v33 = v34;
      }
      double v35 = v33 >= 1.0 ? v33 * 2.22044605e-16 : 2.22044605e-16;
      if (v32 <= v35) {
        break;
      }
    }
    if (v27 < v28) {
      goto LABEL_67;
    }
LABEL_39:
    uint64_t v30 = *v8;
    *((unsigned char *)v21 + 8) = *((unsigned char *)v8 + 8);
    *long long v21 = v30;
    if (v5 < v7) {
      goto LABEL_68;
    }
  }
  if (!v13 || *((unsigned char *)v8 + 8)) {
    goto LABEL_39;
  }
LABEL_67:
  uint64_t v8 = v21;
LABEL_68:
  uint64_t *v8 = v15;
  *((unsigned char *)v8 + 8) = v13;
  return result;
}

uint64_t *sub_100BB0BE0(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = result;
    result += 2 * v3 + 2;
    uint64_t v7 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v8 = v7 + 2;
    if (v8 >= a3) {
      goto LABEL_12;
    }
    double v9 = *(double *)(result[2] + 8 * (*((unsigned char *)result + 24) == 0));
    double v10 = *(double *)(*result + 8 * (*((unsigned char *)result + 8) == 0));
    if (v9 == v10) {
      goto LABEL_29;
    }
    if ((*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_18;
    }
    double v14 = vabdd_f64(v9, v10);
    double v15 = fabs(v9);
    double v16 = fabs(v10);
    if (v15 < v16) {
      double v15 = v16;
    }
    double v17 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v14 <= v17)
    {
LABEL_29:
      if (*((unsigned char *)result + 24)) {
        BOOL v11 = *((unsigned char *)result + 8) == 0;
      }
      else {
        BOOL v11 = 0;
      }
      if (v11)
      {
LABEL_11:
        result += 2;
        uint64_t v3 = v8;
      }
    }
    else
    {
LABEL_18:
      if (v9 < v10) {
        goto LABEL_11;
      }
    }
LABEL_12:
    uint64_t v12 = *result;
    *((unsigned char *)v6 + 8) = *((unsigned char *)result + 8);
    *uint64_t v6 = v12;
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_100BB0CE8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (uint64_t *)(result + 16 * (v4 >> 1));
    uint64_t v9 = *(void *)(a2 - 16);
    uint64_t v7 = a2 - 16;
    uint64_t v8 = v9;
    int v10 = *(unsigned __int8 *)(v7 + 8);
    BOOL v11 = *(unsigned char *)(v7 + 8) == 0;
    double v12 = *(double *)(v9 + 8 * (*(unsigned char *)(v7 + 8) == 0));
    double v13 = *(double *)(*v6 + 8 * (*((unsigned char *)v6 + 8) == 0));
    if (v12 == v13) {
      goto LABEL_42;
    }
    if ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_10;
    }
    double v27 = vabdd_f64(v12, v13);
    double v28 = fabs(v12);
    double v29 = fabs(v13);
    if (v28 < v29) {
      double v28 = v29;
    }
    double v30 = v28 >= 1.0 ? v28 * 2.22044605e-16 : 2.22044605e-16;
    if (v27 <= v30)
    {
LABEL_42:
      if (!*(unsigned char *)(v7 + 8) || *((unsigned char *)v6 + 8)) {
        return result;
      }
    }
    else
    {
LABEL_10:
      if (v12 >= v13) {
        return result;
      }
    }
    uint64_t v15 = *v6;
    *(unsigned char *)(v7 + 8) = *((unsigned char *)v6 + 8);
    *(void *)uint64_t v7 = v15;
    if (v4 >= 2)
    {
      uint64_t v17 = 8 * v11;
      while (1)
      {
        unint64_t v18 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        double v16 = (uint64_t *)(result + 16 * v5);
        double v19 = *(double *)(v8 + v17);
        double v20 = *(double *)(*v16 + 8 * (*((unsigned char *)v16 + 8) == 0));
        if (v19 == v20) {
          goto LABEL_43;
        }
        if ((*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_23;
        }
        double v23 = vabdd_f64(v19, v20);
        double v24 = fabs(v19);
        double v25 = fabs(v20);
        if (v24 < v25) {
          double v24 = v25;
        }
        double v26 = v24 >= 1.0 ? v24 * 2.22044605e-16 : 2.22044605e-16;
        if (v23 <= v26)
        {
LABEL_43:
          if (!v10 || *((unsigned char *)v16 + 8)) {
            break;
          }
        }
        else
        {
LABEL_23:
          if (v19 >= v20) {
            break;
          }
        }
        uint64_t v22 = *v16;
        *((unsigned char *)v6 + 8) = *((unsigned char *)v16 + 8);
        *uint64_t v6 = v22;
        uint64_t v6 = (uint64_t *)(result + 16 * v5);
        if (v18 <= 1) {
          goto LABEL_13;
        }
      }
    }
    double v16 = v6;
LABEL_13:
    *double v16 = v8;
    *((unsigned char *)v16 + 8) = v10;
  }
  return result;
}

uint64_t sub_100BB0E78(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  if (0xEEEEEEEEEEEEEEEFLL * ((v7 - *a1) >> 3) <= a5)
  {
    if (v8 == v7)
    {
      return 1;
    }
    else
    {
      while (1)
      {
        uint64_t v23 = v8;
        v8 += 120;
        uint64_t v24 = v8;
        if (v8 != v7) {
          break;
        }
LABEL_26:
        uint64_t v22 = 1;
        if (v8 == v7) {
          return v22;
        }
      }
      while ((sub_100BB1588(a2, v23, v24) & 1) != 0)
      {
        uint64_t v7 = v24 + 120;
        uint64_t v24 = v7;
        if (v7 == a1[1]) {
          goto LABEL_26;
        }
      }
      return 0;
    }
  }
  else
  {
    long long __p = 0;
    double v28 = 0;
    double v29 = 0;
    v26[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v26[1] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    if (v8 != v7)
    {
      do
      {
        sub_100BB17D8((double *)v26, (double *)(v8 + 32));
        double v12 = v28;
        if (v28 >= v29)
        {
          uint64_t v14 = (v28 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v14 + 1) >> 61) {
            sub_1001D7FD4();
          }
          unint64_t v15 = (v29 - (unsigned char *)__p) >> 2;
          if (v15 <= v14 + 1) {
            unint64_t v15 = v14 + 1;
          }
          if ((unint64_t)(v29 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16) {
            uint64_t v17 = (char *)sub_1000DA54C((uint64_t)&v29, v16);
          }
          else {
            uint64_t v17 = 0;
          }
          unint64_t v18 = (uint64_t *)&v17[8 * v14];
          *unint64_t v18 = v8;
          double v13 = (char *)(v18 + 1);
          double v20 = (char *)__p;
          double v19 = v28;
          if (v28 != __p)
          {
            do
            {
              uint64_t v21 = *((void *)v19 - 1);
              v19 -= 8;
              *--unint64_t v18 = v21;
            }
            while (v19 != v20);
            double v19 = (char *)__p;
          }
          long long __p = v18;
          double v28 = v13;
          double v29 = &v17[8 * v16];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *(void *)double v28 = v8;
          double v13 = v12 + 8;
        }
        double v28 = v13;
        v8 += 120;
      }
      while (v8 != a1[1]);
    }
    uint64_t v22 = sub_100BB10AC((double *)v26, (uint64_t **)&__p, 0, a5, a2, a3, a4, (uint64_t)&v30);
    if (__p)
    {
      double v28 = (char *)__p;
      operator delete(__p);
    }
  }
  return v22;
}

void sub_100BB108C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BB10AC(double *a1, uint64_t **a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v14 = (*a1 + a1[2]) * 0.5;
  long long v15 = *((_OWORD *)a1 + 1);
  long long v50 = *(_OWORD *)a1;
  uint64_t v52 = *((void *)&v15 + 1);
  v48[1] = *((double *)&v50 + 1);
  long long v49 = v15;
  double v51 = v14;
  v48[0] = v14;
  double v45 = 0;
  double v46 = 0;
  uint64_t v47 = 0;
  double v42 = 0;
  double v43 = 0;
  uint64_t v44 = 0;
  long long __p = 0;
  double v40 = 0;
  uint64_t v41 = 0;
  sub_100BB19D4((double *)&v50, v48, a2, &v45, &v42, &__p);
  unint64_t v16 = (uint64_t *)__p;
  if (__p == v40) {
    goto LABEL_37;
  }
  int64x2_t v37 = 0u;
  int64x2_t v38 = 0u;
  int64x2_t v53 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int64x2_t v54 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  uint64_t v17 = -(uint64_t)__p;
  do
  {
    sub_100BB17D8((double *)v53.i64, (double *)(*v16++ + 32));
    v17 -= 8;
  }
  while (v16 != v40);
  int64x2_t v37 = v53;
  int64x2_t v38 = v54;
  unint64_t v18 = (uint64_t *)__p;
  if (a3 > 0x63 || (-v17 - (uint64_t)__p) >> 3 < a4)
  {
    if (v16 != __p)
    {
      while (1)
      {
        double v19 = v18++;
        double v20 = v18;
        if (v18 != v16) {
          break;
        }
LABEL_12:
        if (v18 == v16) {
          goto LABEL_13;
        }
      }
      while ((sub_100BB1588(a5, *v19, *v20) & 1) != 0)
      {
        unint64_t v16 = v20 + 1;
        double v20 = v16;
        if (v16 == v40) {
          goto LABEL_12;
        }
      }
      goto LABEL_40;
    }
  }
  else
  {
    if (!sub_100BB1FFC((double *)v37.i64, (uint64_t **)&__p, a3 + 1, a4, a5, a6, a7, a8)) {
      goto LABEL_40;
    }
    unint64_t v16 = v40;
  }
LABEL_13:
  uint64_t v21 = (uint64_t *)__p;
  if (a4 <= ((char *)v16 - (unsigned char *)__p) >> 3 && a3 <= 0x63 && ((char *)v46 - (unsigned char *)v45) >> 3 >= a4)
  {
    if (sub_100BB2CDC((double *)v37.i64, (uint64_t **)&__p, (uint64_t **)&v45, a3 + 1, a4, a5, a6, a7, a6, a7, a8))
    {
      unint64_t v16 = v40;
      goto LABEL_25;
    }
LABEL_40:
    uint64_t v29 = 0;
    goto LABEL_41;
  }
  if (__p != v16)
  {
    uint64_t v22 = v46;
    if (v45 != v46)
    {
      while (1)
      {
        uint64_t v23 = (uint64_t *)v45;
        if (v45 != v22) {
          break;
        }
LABEL_24:
        if (++v21 == v16) {
          goto LABEL_25;
        }
      }
      while ((sub_100BB1588(a5, *v21, *v23) & 1) != 0)
      {
        if (++v23 == v46)
        {
          unint64_t v16 = v40;
          uint64_t v22 = v23;
          goto LABEL_24;
        }
      }
      goto LABEL_40;
    }
  }
LABEL_25:
  uint64_t v24 = (uint64_t *)__p;
  if (a4 > ((char *)v16 - (unsigned char *)__p) >> 3 || a3 > 0x63 || ((char *)v43 - (unsigned char *)v42) >> 3 < a4)
  {
    if (__p != v16)
    {
      double v25 = v43;
      if (v42 != v43)
      {
        while (1)
        {
          double v26 = (uint64_t *)v42;
          if (v42 != v25) {
            break;
          }
LABEL_36:
          if (++v24 == v16) {
            goto LABEL_37;
          }
        }
        while ((sub_100BB1588(a5, *v24, *v26) & 1) != 0)
        {
          if (++v26 == v43)
          {
            unint64_t v16 = v40;
            double v25 = v26;
            goto LABEL_36;
          }
        }
        goto LABEL_40;
      }
    }
  }
  else if ((sub_100BB2CDC((double *)v37.i64, (uint64_t **)&__p, (uint64_t **)&v42, a3 + 1, a4, a5, a6, a7, a6, a7, a8) & 1) == 0)
  {
    goto LABEL_40;
  }
LABEL_37:
  double v28 = (uint64_t *)v45;
  double v27 = v46;
  if (a3 > 0x63 || ((char *)v46 - (unsigned char *)v45) >> 3 < a4)
  {
LABEL_51:
    while (v28 != v27)
    {
      double v31 = v28++;
      double v32 = v28;
      if (v28 != v27)
      {
        while ((sub_100BB1588(a5, *v31, *v32) & 1) != 0)
        {
          double v27 = v32 + 1;
          double v32 = v27;
          if (v27 == v46) {
            goto LABEL_51;
          }
        }
        goto LABEL_40;
      }
    }
  }
  else if (!sub_100BB1FFC((double *)&v50, (uint64_t **)&v45, a3 + 1, a4, a5, a6, a7, a8))
  {
    goto LABEL_40;
  }
  double v34 = (uint64_t *)v42;
  double v33 = v43;
  if (a3 > 0x63 || ((char *)v43 - (unsigned char *)v42) >> 3 < a4)
  {
    if (v42 != v43)
    {
      while (1)
      {
        double v35 = v34++;
        double v36 = v34;
        if (v34 != v33) {
          break;
        }
LABEL_59:
        uint64_t v29 = 1;
        if (v34 == v33) {
          goto LABEL_41;
        }
      }
      while ((sub_100BB1588(a5, *v35, *v36) & 1) != 0)
      {
        double v33 = v36 + 1;
        double v36 = v33;
        if (v33 == v43) {
          goto LABEL_59;
        }
      }
      goto LABEL_40;
    }
    uint64_t v29 = 1;
  }
  else
  {
    uint64_t v29 = sub_100BB1FFC(v48, (uint64_t **)&v42, a3 + 1, a4, a5, a6, a7, a8);
  }
LABEL_41:
  if (__p)
  {
    double v40 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v42)
  {
    double v43 = (uint64_t *)v42;
    operator delete(v42);
  }
  if (v45)
  {
    double v46 = (uint64_t *)v45;
    operator delete(v45);
  }
  return v29;
}

void sub_100BB1530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a24) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BB1588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = *(double *)(a2 + 32);
  double v7 = *(double *)(a2 + 48);
  if (v7 - v6 < 360.0)
  {
    double v8 = *(double *)(a3 + 32);
    double v9 = *(double *)(a3 + 48);
    double v10 = v9 - v8;
    if (v9 - v8 < 360.0)
    {
      double v11 = vabdd_f64(v8, v6);
      double v12 = 180.0;
      if (v11 != 180.0)
      {
        double v13 = v8 - v6;
        if ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
          goto LABEL_23;
        }
        double v17 = fabs(v11 + -180.0);
        double v12 = 180.0;
        if (v11 < 180.0) {
          double v11 = 180.0;
        }
        double v18 = v11 >= 1.0 ? v11 * 2.22044605e-16 : 2.22044605e-16;
        if (v17 > v18)
        {
LABEL_23:
          double v12 = 180.0;
          if (v13 <= 180.0)
          {
            if (v13 >= -180.0) {
              goto LABEL_5;
            }
            double v12 = fmod(v13 + -180.0, 360.0) + 180.0;
          }
          else
          {
            double v13 = fmod(v13 + 180.0, 360.0) + -180.0;
            if (v13 != -180.0)
            {
              BOOL v19 = ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
                 && (*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
              if (v19 && *(void *)&v13 != 0) {
                goto LABEL_5;
              }
              double v12 = 180.0;
              double v21 = fabs(v13 + 180.0);
              double v22 = fabs(v13);
              if (v22 < 180.0) {
                double v22 = 180.0;
              }
              double v23 = v22 >= 1.0 ? v22 * 2.22044605e-16 : 2.22044605e-16;
              if (v21 > v23)
              {
LABEL_5:
                if (v13 < 0.0) {
                  double v13 = v13 + 360.0;
                }
                double v14 = v6 + v13;
                double v15 = v10 + v6 + v13 + -360.0;
                if (vabdd_f64(v15, v9) < 180.0) {
                  double v15 = v9;
                }
                if (v14 > v7 && v15 < v6) {
                  return 1;
                }
                goto LABEL_11;
              }
            }
          }
        }
      }
      double v13 = v12;
      goto LABEL_5;
    }
  }
LABEL_11:
  if (*(double *)(a2 + 56) >= *(double *)(a3 + 40)
    && *(double *)(a2 + 40) <= *(double *)(a3 + 56)
    && !(*(unsigned __int8 *)(a2 + 96) | *(unsigned __int8 *)(a3 + 96)))
  {
    return sub_100BB34E0(*(_DWORD *)(a1 + 40), *(void **)a1, a2, *(_DWORD *)(a1 + 40), *(long long ***)a1, a3, 0, *(unsigned __int8 *)(a1 + 44), *(void *)(a1 + 8), *(void *)(a1 + 16), *(void **)(a1 + 24), *(unsigned char **)(a1 + 32));
  }
  return 1;
}

void sub_100BB17D8(double *a1, double *a2)
{
  double v3 = *a2;
  double v4 = a2[2];
  double v5 = a2[3];
  double v6 = 1.79769313e308;
  if (*a2 == 1.79769313e308 && a2[1] == 1.79769313e308 && v4 == -1.79769313e308 && v5 == -1.79769313e308)
  {
    double v12 = -1.79769313e308;
    double v13 = -1.79769313e308;
    double v14 = 1.79769313e308;
  }
  else
  {
    double v36 = a2[1];
    v37[0] = v3;
    double v34 = v5;
    double v35 = v4;
    double v10 = vabdd_f64(v3, v4);
    if (v10 < 360.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(v3 - v4)) > 0x7FEFFFFFFFFFFFFFLL)
      {
        BOOL v11 = 0;
      }
      else
      {
        double v15 = vabdd_f64(360.0, v10);
        double v16 = fmax(v10, 360.0);
        if (v16 >= 1.0) {
          double v17 = v16 * 2.22044605e-16;
        }
        else {
          double v17 = 2.22044605e-16;
        }
        BOOL v11 = v15 <= v17;
      }
    }
    else
    {
      BOOL v11 = 1;
    }
    sub_100BAFBC0(v37, &v36, &v35, &v34, v11);
    double v6 = v36;
    double v14 = v37[0];
    double v12 = v34;
    double v13 = v35;
  }
  v37[0] = v14;
  v37[1] = v6;
  v37[2] = v13;
  v37[3] = v12;
  double v18 = *a1;
  double v19 = a1[2];
  double v20 = a1[3];
  double v21 = 1.79769313e308;
  if (*a1 == 1.79769313e308 && a1[1] == 1.79769313e308 && v19 == -1.79769313e308 && v20 == -1.79769313e308)
  {
    double v27 = -1.79769313e308;
    double v28 = -1.79769313e308;
    double v29 = 1.79769313e308;
  }
  else
  {
    double v35 = a1[1];
    double v36 = v18;
    double v33 = v20;
    double v34 = v19;
    double v25 = vabdd_f64(v18, v19);
    if (v25 < 360.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(v18 - v19)) > 0x7FEFFFFFFFFFFFFFLL)
      {
        BOOL v26 = 0;
      }
      else
      {
        double v30 = vabdd_f64(360.0, v25);
        double v31 = fmax(v25, 360.0);
        if (v31 >= 1.0) {
          double v32 = v31 * 2.22044605e-16;
        }
        else {
          double v32 = 2.22044605e-16;
        }
        BOOL v26 = v30 <= v32;
      }
    }
    else
    {
      BOOL v26 = 1;
    }
    sub_100BAFBC0(&v36, &v35, &v34, &v33, v26);
    double v21 = v35;
    double v29 = v36;
    double v27 = v33;
    double v28 = v34;
  }
  v37[4] = v29;
  v37[5] = v21;
  v37[6] = v28;
  v37[7] = v27;
  sub_100BAF668((uint64_t)v37, a1);
}

void sub_100BB19D4(double *a1, double *a2, uint64_t **a3, void **a4, void **a5, void **a6)
{
  double v6 = *a3;
  if (*a3 != a3[1])
  {
    uint64_t v82 = (uint64_t)(a6 + 2);
    uint64_t v83 = (uint64_t)(a5 + 2);
    uint64_t v84 = (uint64_t)(a4 + 2);
    while (1)
    {
      uint64_t v13 = *v6;
      double v14 = *a1;
      double v15 = a1[2];
      double v16 = *(double *)(*v6 + 32);
      double v17 = *(double *)(*v6 + 48);
      double v18 = v17 - v16;
      if (v15 - *a1 < 360.0 && v18 < 360.0) {
        break;
      }
LABEL_13:
      if (a1[3] >= *(double *)(v13 + 40))
      {
        BOOL v24 = a1[1] <= *(double *)(v13 + 56);
        goto LABEL_16;
      }
LABEL_14:
      BOOL v24 = 0;
LABEL_16:
      double v25 = *a2;
      double v26 = a2[2];
      if (v26 - *a2 < 360.0 && v18 < 360.0)
      {
        double v27 = vabdd_f64(v16, v25);
        double v28 = 180.0;
        if (v27 == 180.0) {
          goto LABEL_19;
        }
        double v29 = v16 - v25;
        if (COERCE__INT64(fabs(v16 - v25)) > 0x7FEFFFFFFFFFFFFFLL) {
          goto LABEL_73;
        }
        double v47 = fabs(v27 + -180.0);
        if (v27 < 180.0) {
          double v27 = 180.0;
        }
        double v48 = v27 >= 1.0 ? v27 * 2.22044605e-16 : 2.22044605e-16;
        BOOL v42 = v47 > v48;
        double v28 = 180.0;
        if (v42)
        {
LABEL_73:
          if (v29 <= 180.0)
          {
            if (v29 < -180.0)
            {
              double v28 = fmod(v29 + -180.0, 360.0) + 180.0;
              goto LABEL_19;
            }
          }
          else
          {
            double v29 = fmod(v29 + 180.0, 360.0) + -180.0;
            double v28 = 180.0;
            if (v29 == -180.0) {
              goto LABEL_19;
            }
            BOOL v49 = ((*(void *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
               && (*(void *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
            if (!v49 || *(void *)&v29 == 0)
            {
              double v51 = fabs(v29 + 180.0);
              double v52 = fabs(v29);
              if (v52 < 180.0) {
                double v52 = 180.0;
              }
              double v53 = v52 >= 1.0 ? v52 * 2.22044605e-16 : 2.22044605e-16;
              BOOL v42 = v51 > v53;
              double v28 = 180.0;
              if (!v42) {
                goto LABEL_19;
              }
            }
          }
        }
        else
        {
LABEL_19:
          double v29 = v28;
        }
        if (v29 < 0.0) {
          double v29 = v29 + 360.0;
        }
        double v30 = v25 + v29;
        double v31 = v18 + v25 + v29 + -360.0;
        if (vabdd_f64(v31, v17) < 180.0) {
          double v31 = v17;
        }
        if (v30 > v26 && v31 < v25) {
          goto LABEL_28;
        }
      }
      if (a2[3] >= *(double *)(v13 + 40) && a2[1] <= *(double *)(v13 + 56))
      {
        if (v24)
        {
          double v55 = a6[1];
          unint64_t v54 = (unint64_t)a6[2];
          if ((unint64_t)v55 >= v54)
          {
            uint64_t v64 = ((char *)v55 - (unsigned char *)*a6) >> 3;
            if ((unint64_t)(v64 + 1) >> 61) {
              sub_1001D7FD4();
            }
            uint64_t v65 = v54 - (void)*a6;
            uint64_t v66 = v65 >> 2;
            if (v65 >> 2 <= (unint64_t)(v64 + 1)) {
              uint64_t v66 = v64 + 1;
            }
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v67 = v66;
            }
            if (v67)
            {
              int64x2_t v68 = (char *)sub_1000DA54C(v82, v67);
              uint64_t v13 = *v6;
            }
            else
            {
              int64x2_t v68 = 0;
            }
            uint64_t v74 = &v68[8 * v64];
            *(void *)uint64_t v74 = v13;
            double v56 = v74 + 8;
            long long v76 = (char *)*a6;
            long long v75 = (char *)a6[1];
            if (v75 != *a6)
            {
              do
              {
                uint64_t v77 = *((void *)v75 - 1);
                v75 -= 8;
                *((void *)v74 - 1) = v77;
                v74 -= 8;
              }
              while (v75 != v76);
              long long v75 = (char *)*a6;
            }
            *a6 = v74;
            a6[1] = v56;
            a6[2] = &v68[8 * v67];
            if (v75) {
              operator delete(v75);
            }
          }
          else
          {
            *double v55 = v13;
            double v56 = v55 + 1;
          }
          a6[1] = v56;
        }
        else
        {
          int64x2_t v58 = a5[1];
          unint64_t v57 = (unint64_t)a5[2];
          if ((unint64_t)v58 >= v57)
          {
            uint64_t v69 = ((char *)v58 - (unsigned char *)*a5) >> 3;
            if ((unint64_t)(v69 + 1) >> 61) {
              sub_1001D7FD4();
            }
            uint64_t v70 = v57 - (void)*a5;
            uint64_t v71 = v70 >> 2;
            if (v70 >> 2 <= (unint64_t)(v69 + 1)) {
              uint64_t v71 = v69 + 1;
            }
            if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v72 = v71;
            }
            if (v72)
            {
              double v73 = (char *)sub_1000DA54C(v83, v72);
              uint64_t v13 = *v6;
            }
            else
            {
              double v73 = 0;
            }
            int64x2_t v78 = &v73[8 * v69];
            *(void *)int64x2_t v78 = v13;
            int64x2_t v59 = v78 + 8;
            int64x2_t v80 = (char *)*a5;
            int64x2_t v79 = (char *)a5[1];
            if (v79 != *a5)
            {
              do
              {
                uint64_t v81 = *((void *)v79 - 1);
                v79 -= 8;
                *((void *)v78 - 1) = v81;
                v78 -= 8;
              }
              while (v79 != v80);
              int64x2_t v79 = (char *)*a5;
            }
            *a5 = v78;
            a5[1] = v59;
            a5[2] = &v73[8 * v72];
            if (v79) {
              operator delete(v79);
            }
          }
          else
          {
            *int64x2_t v58 = v13;
            int64x2_t v59 = v58 + 1;
          }
          a5[1] = v59;
        }
        goto LABEL_103;
      }
LABEL_28:
      if (v24)
      {
        double v33 = a4[1];
        unint64_t v32 = (unint64_t)a4[2];
        if ((unint64_t)v33 >= v32)
        {
          uint64_t v35 = ((char *)v33 - (unsigned char *)*a4) >> 3;
          if ((unint64_t)(v35 + 1) >> 61) {
            sub_1001D7FD4();
          }
          uint64_t v36 = v32 - (void)*a4;
          uint64_t v37 = v36 >> 2;
          if (v36 >> 2 <= (unint64_t)(v35 + 1)) {
            uint64_t v37 = v35 + 1;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v37;
          }
          if (v38)
          {
            double v39 = (char *)sub_1000DA54C(v84, v38);
            uint64_t v13 = *v6;
          }
          else
          {
            double v39 = 0;
          }
          int64x2_t v60 = &v39[8 * v35];
          *(void *)int64x2_t v60 = v13;
          double v34 = v60 + 8;
          double v62 = (char *)*a4;
          double v61 = (char *)a4[1];
          if (v61 != *a4)
          {
            do
            {
              uint64_t v63 = *((void *)v61 - 1);
              v61 -= 8;
              *((void *)v60 - 1) = v63;
              v60 -= 8;
            }
            while (v61 != v62);
            double v61 = (char *)*a4;
          }
          *a4 = v60;
          a4[1] = v34;
          a4[2] = &v39[8 * v38];
          if (v61) {
            operator delete(v61);
          }
        }
        else
        {
          *double v33 = v13;
          double v34 = v33 + 1;
        }
        a4[1] = v34;
      }
LABEL_103:
      if (++v6 == a3[1]) {
        return;
      }
    }
    double v19 = vabdd_f64(v16, v14);
    double v20 = 180.0;
    if (v19 == 180.0) {
      goto LABEL_6;
    }
    double v21 = v16 - v14;
    if (COERCE__INT64(fabs(v16 - v14)) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v40 = fabs(v19 + -180.0);
      if (v19 < 180.0) {
        double v19 = 180.0;
      }
      double v41 = v19 >= 1.0 ? v19 * 2.22044605e-16 : 2.22044605e-16;
      BOOL v42 = v40 > v41;
      double v20 = 180.0;
      if (!v42) {
        goto LABEL_6;
      }
    }
    if (v21 <= 180.0)
    {
      if (v21 < -180.0)
      {
        double v20 = fmod(v21 + -180.0, 360.0) + 180.0;
LABEL_6:
        double v21 = v20;
      }
    }
    else
    {
      double v21 = fmod(v21 + 180.0, 360.0) + -180.0;
      double v20 = 180.0;
      if (v21 == -180.0) {
        goto LABEL_6;
      }
      BOOL v42 = ((*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
         && (*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
      if (!v42 || *(void *)&v21 == 0)
      {
        double v44 = fabs(v21 + 180.0);
        double v45 = fabs(v21);
        if (v45 < 180.0) {
          double v45 = 180.0;
        }
        double v46 = v45 >= 1.0 ? v45 * 2.22044605e-16 : 2.22044605e-16;
        BOOL v42 = v44 > v46;
        double v20 = 180.0;
        if (!v42) {
          goto LABEL_6;
        }
      }
    }
    if (v21 < 0.0) {
      double v21 = v21 + 360.0;
    }
    double v22 = v14 + v21;
    double v23 = v18 + v14 + v21 + -360.0;
    if (vabdd_f64(v23, v17) < 180.0) {
      double v23 = v17;
    }
    if (v22 > v15 && v23 < v14) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
}

uint64_t sub_100BB1FFC(double *a1, uint64_t **a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v14 = a1[1];
  double v15 = a1[3];
  long long v52 = *(_OWORD *)a1;
  double v16 = (v14 + v15) * 0.5;
  uint64_t v53 = *((void *)a1 + 2);
  long long v17 = *((_OWORD *)a1 + 1);
  *(void *)&v50[0] = v52;
  long long v51 = v17;
  double v54 = v16;
  v50[1] = v16;
  double v47 = 0;
  double v48 = 0;
  uint64_t v49 = 0;
  double v44 = 0;
  double v45 = 0;
  uint64_t v46 = 0;
  long long __p = 0;
  BOOL v42 = 0;
  uint64_t v43 = 0;
  sub_100BB19D4((double *)&v52, v50, a2, &v47, &v44, &__p);
  double v18 = (uint64_t *)__p;
  if (__p == v42) {
    goto LABEL_37;
  }
  int64x2_t v39 = 0u;
  int64x2_t v40 = 0u;
  int64x2_t v55 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int64x2_t v56 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  uint64_t v19 = -(uint64_t)__p;
  do
  {
    sub_100BB17D8((double *)v55.i64, (double *)(*v18++ + 32));
    v19 -= 8;
  }
  while (v18 != v42);
  int64x2_t v39 = v55;
  int64x2_t v40 = v56;
  double v20 = (uint64_t *)__p;
  if (a3 > 0x63 || (-v19 - (uint64_t)__p) >> 3 < a4)
  {
    if (v18 != __p)
    {
      while (1)
      {
        double v21 = v20++;
        double v22 = v20;
        if (v20 != v18) {
          break;
        }
LABEL_12:
        if (v20 == v18) {
          goto LABEL_13;
        }
      }
      while ((sub_100BB1588(a5, *v21, *v22) & 1) != 0)
      {
        double v18 = v22 + 1;
        double v22 = v18;
        if (v18 == v42) {
          goto LABEL_12;
        }
      }
      goto LABEL_40;
    }
  }
  else
  {
    if (!sub_100BB10AC(&v39, &__p, a3 + 1, a4, a5, a6, a7, a8)) {
      goto LABEL_40;
    }
    double v18 = v42;
  }
LABEL_13:
  double v23 = (uint64_t *)__p;
  if (a4 <= ((char *)v18 - (unsigned char *)__p) >> 3 && a3 <= 0x63 && ((char *)v48 - (unsigned char *)v47) >> 3 >= a4)
  {
    if (sub_100BB24E4((double *)v39.i64, (uint64_t **)&__p, (uint64_t **)&v47, a3 + 1, a4, a5, a6, a7, a6, a7, a8))
    {
      double v18 = v42;
      goto LABEL_25;
    }
LABEL_40:
    uint64_t v31 = 0;
    goto LABEL_41;
  }
  if (__p != v18)
  {
    BOOL v24 = v48;
    if (v47 != v48)
    {
      while (1)
      {
        double v25 = (uint64_t *)v47;
        if (v47 != v24) {
          break;
        }
LABEL_24:
        if (++v23 == v18) {
          goto LABEL_25;
        }
      }
      while ((sub_100BB1588(a5, *v23, *v25) & 1) != 0)
      {
        if (++v25 == v48)
        {
          double v18 = v42;
          BOOL v24 = v25;
          goto LABEL_24;
        }
      }
      goto LABEL_40;
    }
  }
LABEL_25:
  double v26 = (uint64_t *)__p;
  if (a4 > ((char *)v18 - (unsigned char *)__p) >> 3 || a3 > 0x63 || ((char *)v45 - (unsigned char *)v44) >> 3 < a4)
  {
    if (__p != v18)
    {
      double v27 = v45;
      if (v44 != v45)
      {
        while (1)
        {
          double v28 = (uint64_t *)v44;
          if (v44 != v27) {
            break;
          }
LABEL_36:
          if (++v26 == v18) {
            goto LABEL_37;
          }
        }
        while ((sub_100BB1588(a5, *v26, *v28) & 1) != 0)
        {
          if (++v28 == v45)
          {
            double v18 = v42;
            double v27 = v28;
            goto LABEL_36;
          }
        }
        goto LABEL_40;
      }
    }
  }
  else if ((sub_100BB24E4((double *)v39.i64, (uint64_t **)&__p, (uint64_t **)&v44, a3 + 1, a4, a5, a6, a7, a6, a7, a8) & 1) == 0)
  {
    goto LABEL_40;
  }
LABEL_37:
  double v30 = (uint64_t *)v47;
  double v29 = v48;
  if (a3 > 0x63 || ((char *)v48 - (unsigned char *)v47) >> 3 < a4)
  {
LABEL_51:
    while (v30 != v29)
    {
      double v33 = v30++;
      double v34 = v30;
      if (v30 != v29)
      {
        while ((sub_100BB1588(a5, *v33, *v34) & 1) != 0)
        {
          double v29 = v34 + 1;
          double v34 = v29;
          if (v29 == v48) {
            goto LABEL_51;
          }
        }
        goto LABEL_40;
      }
    }
  }
  else if (!sub_100BB10AC(&v52, &v47, a3 + 1, a4, a5, a6, a7, a8))
  {
    goto LABEL_40;
  }
  uint64_t v36 = (uint64_t *)v44;
  uint64_t v35 = v45;
  if (a3 > 0x63 || ((char *)v45 - (unsigned char *)v44) >> 3 < a4)
  {
    if (v44 != v45)
    {
      while (1)
      {
        uint64_t v37 = v36++;
        unint64_t v38 = v36;
        if (v36 != v35) {
          break;
        }
LABEL_59:
        uint64_t v31 = 1;
        if (v36 == v35) {
          goto LABEL_41;
        }
      }
      while ((sub_100BB1588(a5, *v37, *v38) & 1) != 0)
      {
        uint64_t v35 = v38 + 1;
        unint64_t v38 = v35;
        if (v35 == v45) {
          goto LABEL_59;
        }
      }
      goto LABEL_40;
    }
    uint64_t v31 = 1;
  }
  else
  {
    uint64_t v31 = sub_100BB10AC(v50, &v44, a3 + 1, a4, a5, a6, a7, a8);
  }
LABEL_41:
  if (__p)
  {
    BOOL v42 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v44)
  {
    double v45 = (uint64_t *)v44;
    operator delete(v44);
  }
  if (v47)
  {
    double v48 = (uint64_t *)v47;
    operator delete(v47);
  }
  return v31;
}

void sub_100BB248C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a24) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BB24E4(double *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  double v17 = (*a1 + a1[2]) * 0.5;
  long long v18 = *((_OWORD *)a1 + 1);
  long long v77 = *(_OWORD *)a1;
  uint64_t v79 = *((void *)&v18 + 1);
  v75[1] = *((double *)&v77 + 1);
  long long v76 = v18;
  double v78 = v17;
  v75[0] = v17;
  unint64_t v72 = 0;
  double v73 = 0;
  uint64_t v74 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  uint64_t v66 = 0;
  unint64_t v67 = 0;
  uint64_t v68 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  int64x2_t v60 = 0;
  double v61 = 0;
  uint64_t v62 = 0;
  long long __p = 0;
  int64x2_t v58 = 0;
  uint64_t v59 = 0;
  sub_100BB19D4((double *)&v77, v75, a2, &v72, &v69, &v66);
  sub_100BB19D4((double *)&v77, v75, a3, &v63, &v60, &__p);
  double v20 = (uint64_t *)v66;
  uint64_t v19 = v67;
  if (v66 != v67)
  {
    double v21 = v58;
    if (a5 > ((char *)v67 - (unsigned char *)v66) >> 3 || a4 > 0x63 || ((char *)v58 - (unsigned char *)__p) >> 3 < a5)
    {
      if (__p != v58)
      {
        while (1)
        {
          double v22 = (uint64_t *)__p;
          if (__p != v21) {
            break;
          }
LABEL_8:
          if (++v20 == v19) {
            goto LABEL_18;
          }
        }
        while ((sub_100BB1588(a6, *v20, *v22) & 1) != 0)
        {
          if (++v22 == v58)
          {
            uint64_t v19 = v67;
            double v21 = v22;
            goto LABEL_8;
          }
        }
        goto LABEL_95;
      }
    }
    else
    {
      int64x2_t v55 = 0u;
      int64x2_t v56 = 0u;
      int64x2_t v80 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      int64x2_t v81 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      do
        sub_100BB17D8((double *)v80.i64, (double *)(*v20++ + 32));
      while (v20 != v67);
      uint64_t v24 = v80.i64[1];
      uint64_t v23 = v80.i64[0];
      uint64_t v26 = v81.i64[1];
      uint64_t v25 = v81.i64[0];
      double v27 = (uint64_t *)__p;
      if (__p != v58)
      {
        do
          sub_100BB17D8((double *)v80.i64, (double *)(*v27++ + 32));
        while (v27 != v58);
        uint64_t v24 = v80.i64[1];
        uint64_t v23 = v80.i64[0];
        uint64_t v26 = v81.i64[1];
        uint64_t v25 = v81.i64[0];
      }
      v55.i64[0] = v23;
      v55.i64[1] = v24;
      v56.i64[0] = v25;
      v56.i64[1] = v26;
      if ((sub_100BB2CDC((double *)v55.i64, (uint64_t **)&v66, (uint64_t **)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0) {
        goto LABEL_95;
      }
    }
LABEL_18:
    double v28 = v64;
    if (a5 > ((char *)v64 - (unsigned char *)v63) >> 3)
    {
      double v30 = (uint64_t *)v66;
      double v29 = v67;
      goto LABEL_21;
    }
    double v30 = (uint64_t *)v66;
    double v29 = v67;
    if (a5 > ((char *)v61 - (unsigned char *)v60) >> 3 || a4 > 0x63 || ((char *)v67 - (unsigned char *)v66) >> 3 < a5)
    {
LABEL_21:
      if (v63 != v64 && v30 != v29)
      {
        while (1)
        {
          uint64_t v31 = (uint64_t *)v63;
          if (v63 != v28) {
            break;
          }
LABEL_27:
          if (++v30 == v29)
          {
            double v30 = (uint64_t *)v66;
            goto LABEL_29;
          }
        }
        while ((sub_100BB1588(a6, *v30, *v31) & 1) != 0)
        {
          if (++v31 == v64)
          {
            double v29 = v67;
            double v28 = v31;
            goto LABEL_27;
          }
        }
        goto LABEL_95;
      }
LABEL_29:
      if (v30 != v29)
      {
        unint64_t v32 = v61;
        if (v60 != v61)
        {
          while (1)
          {
            double v33 = (uint64_t *)v60;
            if (v60 != v32) {
              break;
            }
LABEL_35:
            if (++v30 == v29) {
              goto LABEL_44;
            }
          }
          while ((sub_100BB1588(a6, *v30, *v33) & 1) != 0)
          {
            if (++v33 == v61)
            {
              double v29 = v67;
              unint64_t v32 = v33;
              goto LABEL_35;
            }
          }
          goto LABEL_95;
        }
      }
      goto LABEL_44;
    }
    int64x2_t v55 = 0u;
    int64x2_t v56 = 0u;
    int64x2_t v34 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int64x2_t v35 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    int64x2_t v80 = v34;
    int64x2_t v81 = v35;
    if (v66 != v67)
    {
      do
        sub_100BB17D8((double *)v80.i64, (double *)(*v30++ + 32));
      while (v30 != v67);
      int64x2_t v34 = v80;
      int64x2_t v35 = v81;
    }
    int64x2_t v55 = v34;
    int64x2_t v56 = v35;
    if (!sub_100BB2CDC((double *)v55.i64, (uint64_t **)&v66, (uint64_t **)&v63, a4 + 1, a5, a6, a7, a8, a9, a10, a11)|| (sub_100BB2CDC((double *)v55.i64, (uint64_t **)&v66, (uint64_t **)&v60, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_95;
    }
  }
LABEL_44:
  uint64_t v37 = (uint64_t *)__p;
  uint64_t v36 = v58;
  if (__p == v58) {
    goto LABEL_58;
  }
  int64x2_t v39 = (uint64_t *)v72;
  unint64_t v38 = v73;
  if (a5 > ((char *)v73 - (unsigned char *)v72) >> 3
    || a5 > ((char *)v70 - (unsigned char *)v69) >> 3
    || a4 > 0x63
    || ((char *)v58 - (unsigned char *)__p) >> 3 < a5)
  {
    while (v39 != v38)
    {
      int64x2_t v40 = (uint64_t *)__p;
      if (__p != v36)
      {
        while ((sub_100BB1588(a6, *v39, *v40) & 1) != 0)
        {
          if (++v40 == v58)
          {
            unint64_t v38 = v73;
            uint64_t v36 = v40;
            goto LABEL_52;
          }
        }
        goto LABEL_95;
      }
LABEL_52:
      ++v39;
    }
    BOOL v42 = (uint64_t *)v69;
    double v41 = v70;
    if (v69 == v70 || __p == v36) {
      goto LABEL_58;
    }
    while (1)
    {
      long long v50 = (uint64_t *)__p;
      if (__p != v36) {
        break;
      }
LABEL_79:
      if (++v42 == v41) {
        goto LABEL_58;
      }
    }
    while ((sub_100BB1588(a6, *v42, *v50) & 1) != 0)
    {
      if (++v50 == v58)
      {
        double v41 = v70;
        uint64_t v36 = v50;
        goto LABEL_79;
      }
    }
    goto LABEL_95;
  }
  int64x2_t v55 = 0u;
  int64x2_t v56 = 0u;
  int64x2_t v80 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int64x2_t v81 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  do
    sub_100BB17D8((double *)v80.i64, (double *)(*v37++ + 32));
  while (v37 != v58);
  int64x2_t v55 = v80;
  int64x2_t v56 = v81;
  if (sub_100BB2CDC((double *)v55.i64, (uint64_t **)&v72, (uint64_t **)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11))
  {
    if (sub_100BB2CDC((double *)v55.i64, (uint64_t **)&v69, (uint64_t **)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11))
    {
LABEL_58:
      double v45 = (uint64_t *)v72;
      double v44 = v73;
      if (a5 > ((char *)v73 - (unsigned char *)v72) >> 3 || a4 > 0x63 || ((char *)v64 - (unsigned char *)v63) >> 3 < a5)
      {
        if (v72 != v73)
        {
          uint64_t v46 = v64;
          if (v63 != v64)
          {
            while (1)
            {
              double v47 = (uint64_t *)v63;
              if (v63 != v46) {
                break;
              }
LABEL_69:
              if (++v45 == v44) {
                goto LABEL_70;
              }
            }
            while ((sub_100BB1588(a6, *v45, *v47) & 1) != 0)
            {
              if (++v47 == v64)
              {
                double v44 = v73;
                uint64_t v46 = v47;
                goto LABEL_69;
              }
            }
            goto LABEL_95;
          }
        }
      }
      else if ((sub_100BB2CDC((double *)&v77, (uint64_t **)&v72, (uint64_t **)&v63, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_95;
      }
LABEL_70:
      uint64_t v49 = (uint64_t *)v69;
      double v48 = v70;
      if (a5 > ((char *)v70 - (unsigned char *)v69) >> 3 || a4 > 0x63 || ((char *)v61 - (unsigned char *)v60) >> 3 < a5)
      {
        if (v69 != v70)
        {
          long long v51 = v61;
          if (v60 != v61)
          {
            while (1)
            {
              long long v52 = (uint64_t *)v60;
              if (v60 != v51) {
                break;
              }
LABEL_87:
              if (++v49 == v48) {
                goto LABEL_88;
              }
            }
            while ((sub_100BB1588(a6, *v49, *v52) & 1) != 0)
            {
              if (++v52 == v61)
              {
                double v48 = v70;
                long long v51 = v52;
                goto LABEL_87;
              }
            }
            goto LABEL_95;
          }
        }
      }
      else if ((sub_100BB2CDC(v75, (uint64_t **)&v69, (uint64_t **)&v60, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_95;
      }
LABEL_88:
      uint64_t v53 = 1;
      goto LABEL_96;
    }
  }
LABEL_95:
  uint64_t v53 = 0;
LABEL_96:
  if (__p)
  {
    int64x2_t v58 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v60)
  {
    double v61 = (uint64_t *)v60;
    operator delete(v60);
  }
  if (v63)
  {
    uint64_t v64 = (uint64_t *)v63;
    operator delete(v63);
  }
  if (v66)
  {
    unint64_t v67 = (uint64_t *)v66;
    operator delete(v66);
  }
  if (v69)
  {
    uint64_t v70 = (uint64_t *)v69;
    operator delete(v69);
  }
  if (v72)
  {
    double v73 = (uint64_t *)v72;
    operator delete(v72);
  }
  return v53;
}

void sub_100BB2C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    operator delete(a29);
  }
  if (a32) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BB2CDC(double *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  long long v17 = *(_OWORD *)a1;
  double v18 = (a1[1] + a1[3]) * 0.5;
  uint64_t v79 = *((void *)a1 + 2);
  long long v19 = *((_OWORD *)a1 + 1);
  *(void *)&v76[0] = v17;
  long long v77 = v19;
  long long v78 = v17;
  double v80 = v18;
  v76[1] = v18;
  double v73 = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  unint64_t v67 = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  double v61 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  long long __p = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  sub_100BB19D4((double *)&v78, v76, a2, &v73, &v70, &v67);
  sub_100BB19D4((double *)&v78, v76, a3, &v64, &v61, &__p);
  double v21 = (uint64_t *)v67;
  double v20 = v68;
  if (v67 != v68)
  {
    double v22 = v59;
    if (a5 > ((char *)v68 - (unsigned char *)v67) >> 3 || a4 > 0x63 || ((char *)v59 - (unsigned char *)__p) >> 3 < a5)
    {
      if (__p != v59)
      {
        while (1)
        {
          uint64_t v23 = (uint64_t *)__p;
          if (__p != v22) {
            break;
          }
LABEL_8:
          if (++v21 == v20) {
            goto LABEL_18;
          }
        }
        while ((sub_100BB1588(a6, *v21, *v23) & 1) != 0)
        {
          if (++v23 == v59)
          {
            double v20 = v68;
            double v22 = v23;
            goto LABEL_8;
          }
        }
        goto LABEL_95;
      }
    }
    else
    {
      int64x2_t v56 = 0u;
      int64x2_t v57 = 0u;
      int64x2_t v81 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      int64x2_t v82 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      do
        sub_100BB17D8((double *)v81.i64, (double *)(*v21++ + 32));
      while (v21 != v68);
      uint64_t v25 = v81.i64[1];
      uint64_t v24 = v81.i64[0];
      uint64_t v27 = v82.i64[1];
      uint64_t v26 = v82.i64[0];
      double v28 = (uint64_t *)__p;
      if (__p != v59)
      {
        do
          sub_100BB17D8((double *)v81.i64, (double *)(*v28++ + 32));
        while (v28 != v59);
        uint64_t v25 = v81.i64[1];
        uint64_t v24 = v81.i64[0];
        uint64_t v27 = v82.i64[1];
        uint64_t v26 = v82.i64[0];
      }
      v56.i64[0] = v24;
      v56.i64[1] = v25;
      v57.i64[0] = v26;
      v57.i64[1] = v27;
      if ((sub_100BB24E4(&v56, &v67, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0) {
        goto LABEL_95;
      }
    }
LABEL_18:
    double v29 = v65;
    if (a5 > ((char *)v65 - (unsigned char *)v64) >> 3)
    {
      uint64_t v31 = (uint64_t *)v67;
      double v30 = v68;
      goto LABEL_21;
    }
    uint64_t v31 = (uint64_t *)v67;
    double v30 = v68;
    if (a5 > ((char *)v62 - (unsigned char *)v61) >> 3 || a4 > 0x63 || ((char *)v68 - (unsigned char *)v67) >> 3 < a5)
    {
LABEL_21:
      if (v64 != v65 && v31 != v30)
      {
        while (1)
        {
          unint64_t v32 = (uint64_t *)v64;
          if (v64 != v29) {
            break;
          }
LABEL_27:
          if (++v31 == v30)
          {
            uint64_t v31 = (uint64_t *)v67;
            goto LABEL_29;
          }
        }
        while ((sub_100BB1588(a6, *v31, *v32) & 1) != 0)
        {
          if (++v32 == v65)
          {
            double v30 = v68;
            double v29 = v32;
            goto LABEL_27;
          }
        }
        goto LABEL_95;
      }
LABEL_29:
      if (v31 != v30)
      {
        double v33 = v62;
        if (v61 != v62)
        {
          while (1)
          {
            int64x2_t v34 = (uint64_t *)v61;
            if (v61 != v33) {
              break;
            }
LABEL_35:
            if (++v31 == v30) {
              goto LABEL_44;
            }
          }
          while ((sub_100BB1588(a6, *v31, *v34) & 1) != 0)
          {
            if (++v34 == v62)
            {
              double v30 = v68;
              double v33 = v34;
              goto LABEL_35;
            }
          }
          goto LABEL_95;
        }
      }
      goto LABEL_44;
    }
    int64x2_t v56 = 0u;
    int64x2_t v57 = 0u;
    int64x2_t v35 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int64x2_t v36 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    int64x2_t v81 = v35;
    int64x2_t v82 = v36;
    if (v67 != v68)
    {
      do
        sub_100BB17D8((double *)v81.i64, (double *)(*v31++ + 32));
      while (v31 != v68);
      int64x2_t v35 = v81;
      int64x2_t v36 = v82;
    }
    int64x2_t v56 = v35;
    int64x2_t v57 = v36;
    if (!sub_100BB24E4(&v56, &v67, &v64, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      || (sub_100BB24E4(&v56, &v67, &v61, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_95;
    }
  }
LABEL_44:
  unint64_t v38 = (uint64_t *)__p;
  uint64_t v37 = v59;
  if (__p == v59) {
    goto LABEL_58;
  }
  int64x2_t v40 = (uint64_t *)v73;
  int64x2_t v39 = v74;
  if (a5 > ((char *)v74 - (unsigned char *)v73) >> 3
    || a5 > ((char *)v71 - (unsigned char *)v70) >> 3
    || a4 > 0x63
    || ((char *)v59 - (unsigned char *)__p) >> 3 < a5)
  {
    while (v40 != v39)
    {
      double v41 = (uint64_t *)__p;
      if (__p != v37)
      {
        while ((sub_100BB1588(a6, *v40, *v41) & 1) != 0)
        {
          if (++v41 == v59)
          {
            int64x2_t v39 = v74;
            uint64_t v37 = v41;
            goto LABEL_52;
          }
        }
        goto LABEL_95;
      }
LABEL_52:
      ++v40;
    }
    uint64_t v43 = (uint64_t *)v70;
    BOOL v42 = v71;
    if (v70 == v71 || __p == v37) {
      goto LABEL_58;
    }
    while (1)
    {
      long long v51 = (uint64_t *)__p;
      if (__p != v37) {
        break;
      }
LABEL_79:
      if (++v43 == v42) {
        goto LABEL_58;
      }
    }
    while ((sub_100BB1588(a6, *v43, *v51) & 1) != 0)
    {
      if (++v51 == v59)
      {
        BOOL v42 = v71;
        uint64_t v37 = v51;
        goto LABEL_79;
      }
    }
    goto LABEL_95;
  }
  int64x2_t v56 = 0u;
  int64x2_t v57 = 0u;
  int64x2_t v81 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int64x2_t v82 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  do
    sub_100BB17D8((double *)v81.i64, (double *)(*v38++ + 32));
  while (v38 != v59);
  int64x2_t v56 = v81;
  int64x2_t v57 = v82;
  if (sub_100BB24E4(&v56, &v73, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11))
  {
    if (sub_100BB24E4(&v56, &v70, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11))
    {
LABEL_58:
      uint64_t v46 = (uint64_t *)v73;
      double v45 = v74;
      if (a5 > ((char *)v74 - (unsigned char *)v73) >> 3 || a4 > 0x63 || ((char *)v65 - (unsigned char *)v64) >> 3 < a5)
      {
        if (v73 != v74)
        {
          double v47 = v65;
          if (v64 != v65)
          {
            while (1)
            {
              double v48 = (uint64_t *)v64;
              if (v64 != v47) {
                break;
              }
LABEL_69:
              if (++v46 == v45) {
                goto LABEL_70;
              }
            }
            while ((sub_100BB1588(a6, *v46, *v48) & 1) != 0)
            {
              if (++v48 == v65)
              {
                double v45 = v74;
                double v47 = v48;
                goto LABEL_69;
              }
            }
            goto LABEL_95;
          }
        }
      }
      else if ((sub_100BB24E4(&v78, &v73, &v64, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_95;
      }
LABEL_70:
      long long v50 = (uint64_t *)v70;
      uint64_t v49 = v71;
      if (a5 > ((char *)v71 - (unsigned char *)v70) >> 3 || a4 > 0x63 || ((char *)v62 - (unsigned char *)v61) >> 3 < a5)
      {
        if (v70 != v71)
        {
          long long v52 = v62;
          if (v61 != v62)
          {
            while (1)
            {
              uint64_t v53 = (uint64_t *)v61;
              if (v61 != v52) {
                break;
              }
LABEL_87:
              if (++v50 == v49) {
                goto LABEL_88;
              }
            }
            while ((sub_100BB1588(a6, *v50, *v53) & 1) != 0)
            {
              if (++v53 == v62)
              {
                uint64_t v49 = v71;
                long long v52 = v53;
                goto LABEL_87;
              }
            }
            goto LABEL_95;
          }
        }
      }
      else if ((sub_100BB24E4(v76, &v70, &v61, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_95;
      }
LABEL_88:
      uint64_t v54 = 1;
      goto LABEL_96;
    }
  }
LABEL_95:
  uint64_t v54 = 0;
LABEL_96:
  if (__p)
  {
    uint64_t v59 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v61)
  {
    uint64_t v62 = (uint64_t *)v61;
    operator delete(v61);
  }
  if (v64)
  {
    uint64_t v65 = (uint64_t *)v64;
    operator delete(v64);
  }
  if (v67)
  {
    uint64_t v68 = (uint64_t *)v67;
    operator delete(v67);
  }
  if (v70)
  {
    uint64_t v71 = (uint64_t *)v70;
    operator delete(v70);
  }
  if (v73)
  {
    uint64_t v74 = (uint64_t *)v73;
    operator delete(v73);
  }
  return v54;
}

void sub_100BB343C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    operator delete(a29);
  }
  if (a32) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BB34E0(int a1, void *a2, uint64_t a3, int a4, long long **a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, unsigned char *a12)
{
  double v12 = (void *)a6;
  int v13 = a4;
  uint64_t v14 = a3;
  if ((!*(unsigned char *)(a3 + 96) || (unint64_t)(*(void *)(a3 + 80) + 1) >= *(void *)(a3 + 88))
    && (!*(unsigned char *)(a6 + 96) || (unint64_t)(*(void *)(a6 + 80) + 1) >= *(void *)(a6 + 88)))
  {
    unint64_t v15 = *(void *)(a3 + 24);
    if ((v15 & 0x8000000000000000) == 0)
    {
      uint64_t v16 = a2[3];
      if (0xAAAAAAAAAAAAAAABLL * ((a2[4] - v16) >> 3) < v15) {
        sub_101A81000();
      }
      a2 = (void *)(v16 + 24 * v15);
    }
    long long v17 = (_OWORD *)*a2;
    unint64_t v18 = *(void *)(a6 + 24);
    long long v78 = (_OWORD *)a2[1];
    if ((v18 & 0x8000000000000000) == 0)
    {
      long long v19 = a5[3];
      if (0xAAAAAAAAAAAAAAABLL * (((char *)a5[4] - (char *)v19) >> 3) < v18) {
        sub_101A81000();
      }
      a5 = (long long **)v19 + 3 * v18;
    }
    BOOL v86 = *a5;
    uint64_t v83 = a5[1];
    double v20 = (double *)(a6 + 32);
    int v87 = *(_DWORD *)a6;
    int v21 = *(_DWORD *)a3;
    uint64_t v22 = *(void *)(a3 + 104);
    uint64_t v23 = *(void *)(a3 + 64);
    uint64_t v24 = *(void *)(a3 + 72);
    uint64_t v25 = &v17[v23];
    long long v77 = (_OWORD *)*a2;
    if (v23 != v24)
    {
      uint64_t v27 = (double *)(a3 + 32);
      uint64_t v28 = 16 * v24 - 16 * v23;
      double v29 = v25;
      while (1)
      {
        long long v30 = v29[1];
        ++v29;
        long long v89 = v30;
        if (!sub_100BB3DF4(v21, (double *)&v89, v27, v20)) {
          break;
        }
        ++v23;
        ++v22;
        uint64_t v25 = v29;
        v28 -= 16;
        if (!v28) {
          return 1;
        }
      }
      double v12 = (void *)a6;
      int v13 = a4;
      uint64_t v14 = a3;
      long long v17 = v77;
    }
    uint64_t v74 = &v17[v24];
    if (v25 != v74)
    {
      uint64_t v31 = &v17[v25 != v17];
      unint64_t v32 = v78;
      int64x2_t v82 = v25 + 1;
      if (v25 + 1 != v78) {
        uint64_t v31 = v25 + 1;
      }
      double v33 = v31 + 1;
      int64x2_t v34 = &v17[v31 != v17];
      if (v33 != v78) {
        int64x2_t v34 = v33;
      }
      int64x2_t v81 = v34;
      int64x2_t v35 = (double *)(v14 + 32);
      int v36 = -v21;
      uint64_t v75 = v13;
      long long v76 = v12;
      int64x2_t v88 = (double *)(v14 + 32);
      int v70 = -v21;
      while (1)
      {
        long long v89 = *v25;
        if (sub_100BB3DF4(v36, (double *)&v89, v35, v20)) {
          return 1;
        }
        v105[0] = v14;
        v105[1] = v23;
        v105[2] = v25;
        v105[3] = v82;
        v105[4] = v81;
        v105[5] = v17;
        v105[6] = v32;
        char v106 = 1;
        char v107 = 0;
        uint64_t v38 = v12[8];
        uint64_t v37 = v12[9];
        int64x2_t v39 = &v86[v38];
        uint64_t v40 = v12[13];
        if (v38 != v37)
        {
          uint64_t v64 = 16 * v37 - 16 * v38;
          uint64_t v65 = &v86[v38];
          while (1)
          {
            long long v66 = v65[1];
            ++v65;
            long long v89 = v66;
            if (!sub_100BB3DF4(v87, (double *)&v89, v20, v88)) {
              break;
            }
            ++v38;
            ++v40;
            int64x2_t v39 = v65;
            v64 -= 16;
            if (!v64) {
              goto LABEL_78;
            }
          }
        }
        double v73 = &v86[v37];
        if (v39 != v73) {
          break;
        }
LABEL_78:
        ++v22;
        double v12 = v76;
LABEL_79:
        ++v25;
        unint64_t v67 = v82;
        ++v23;
        uint64_t v68 = v81 + 1;
        long long v17 = v77;
        unint64_t v32 = v78;
        if (v81 + 1 == v78) {
          uint64_t v68 = &v77[v81 != v77];
        }
        int64x2_t v81 = v68;
        ++v82;
        uint64_t result = 1;
        uint64_t v14 = a3;
        int64x2_t v35 = v88;
        int v36 = v70;
        if (v67 == v74) {
          return result;
        }
      }
      double v41 = &v86[v39 != v86];
      BOOL v42 = v39 + 1;
      if (v39 + 1 != v83) {
        double v41 = v39 + 1;
      }
      uint64_t v43 = v41 + 1;
      double v44 = &v86[v41 != v86];
      if (v43 != v83) {
        double v44 = v43;
      }
      double v80 = v44;
      ++v22;
      double v12 = v76;
      while (1)
      {
        long long v89 = *v39;
        if (sub_100BB3DF4(-v87, (double *)&v89, v20, v88)) {
          goto LABEL_79;
        }
        *(void *)&long long v45 = -1;
        *((void *)&v45 + 1) = -1;
        if (a1 == a4 && *(void *)(a3 + 16) == v76[2] && *(void *)(a3 + 24) == v76[3])
        {
          if (a7)
          {
            if (v23 >= v38 || (a8 & 1) == 0)
            {
              if (v23 >= v38) {
                goto LABEL_70;
              }
              goto LABEL_44;
            }
LABEL_41:
            if (v40 == v22 || !v23 && *(void *)(a3 + 88) - 2 <= v38) {
              goto LABEL_70;
            }
            goto LABEL_44;
          }
          if (a8) {
            goto LABEL_41;
          }
        }
LABEL_44:
        uint64_t v46 = 0;
        v102[0] = v76;
        v102[1] = v38;
        v102[2] = v39;
        v102[3] = v42;
        v102[4] = v80;
        v102[5] = v86;
        v102[6] = v83;
        char v103 = 0;
        char v104 = 0;
        int v90 = 0;
        char v91 = 0;
        uint64_t v92 = -1;
        __int16 v93 = 0;
        do
        {
          double v47 = (char *)&v89 + v46;
          *((_DWORD *)v47 + 10) = 0;
          *((_OWORD *)v47 + 3) = v45;
          *((_OWORD *)v47 + 4) = v45;
          *((void *)v47 + 10) = -1;
          *(_OWORD *)(v47 + 88) = xmmword_101D82650;
          v46 += 80;
          *((void *)v47 + 13) = 0;
          *((void *)v47 + 14) = 0;
        }
        while (v46 != 160);
        uint64_t v94 = a1;
        long long v95 = *(_OWORD *)(a3 + 16);
        uint64_t v96 = v23;
        uint64_t v97 = -1;
        uint64_t v98 = v75;
        long long v99 = *((_OWORD *)v76 + 1);
        uint64_t v100 = v38;
        uint64_t v101 = -1;
        unint64_t v48 = a11[5];
        sub_100BB3B5C((uint64_t)v105, (uint64_t)v102, (uint64_t)&v89, a9, a10, a11);
        if (a11[5] < v48) {
          sub_101A81000();
        }
        unint64_t v49 = a11[4];
        uint64_t v50 = a11[1];
        long long v51 = (void *)(v50 + 8 * (v49 / 0x14));
        if (a11[2] == v50) {
          unint64_t v52 = 0;
        }
        else {
          unint64_t v52 = *v51 + 200 * (v49 % 0x14);
        }
        v108 = v51;
        unint64_t v109 = v52;
        sub_100BB98A0(&v108, v48);
        uint64_t v53 = a11[1];
        if (a11[2] == v53)
        {
          unint64_t v55 = 0;
        }
        else
        {
          unint64_t v54 = a11[5] + a11[4];
          unint64_t v55 = *(void *)(v53 + 8 * (v54 / 0x14)) + 200 * (v54 % 0x14);
        }
        unint64_t v56 = v109;
        if (v55 != v109)
        {
          int64x2_t v57 = v108;
          while (*(void *)(v56 + 64) != *(void *)(v56 + 144))
          {
            int v58 = *(_DWORD *)(v56 + 16);
            int v59 = *(_DWORD *)(v56 + 40);
            BOOL v60 = v58 == 4 && v59 == 2;
            if (!v60 && (v58 != 3 || v59 != 2)) {
              break;
            }
            if (*(_DWORD *)(v56 + 120) != 2) {
              break;
            }
            v56 += 200;
            if (v56 - *v57 == 4000)
            {
              unint64_t v62 = v57[1];
              ++v57;
              unint64_t v56 = v62;
            }
            if (v56 == v55) {
              goto LABEL_69;
            }
          }
          uint64_t result = 0;
          *a12 = 1;
          return result;
        }
LABEL_69:
        *a12 = 0;
LABEL_70:
        ++v39;
        ++v38;
        uint64_t v63 = v80 + 1;
        if (v80 + 1 == v83) {
          uint64_t v63 = &v86[v80 != v86];
        }
        double v80 = v63;
        ++v40;
        BOOL v60 = v42++ == v73;
        if (v60) {
          goto LABEL_79;
        }
      }
    }
  }
  return 1;
}

void *sub_100BB3B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  double v6 = a6;
  long long v45 = a6;
  v29[0] = a1;
  v29[1] = a2;
  v30[1] = a1;
  v30[2] = a2;
  v31[1] = a2;
  id v31[2] = a1;
  sub_100BB5548(a1, a2, (uint64_t)&v32);
  uint64_t v43 = a4;
  uint64_t v44 = a5;
  if (v38 == 100) {
    return v6;
  }
  long long v12 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)uint64_t v27 = *(_OWORD *)(a3 + 160);
  *(_OWORD *)&v27[16] = v12;
  uint64_t v28 = *(void *)(a3 + 192);
  long long v13 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a3 + 96);
  long long v24 = v13;
  long long v14 = *(_OWORD *)(a3 + 144);
  long long v25 = *(_OWORD *)(a3 + 128);
  long long v26 = v14;
  long long v15 = *(_OWORD *)(a3 + 48);
  v22[0] = *(_OWORD *)(a3 + 32);
  v22[1] = v15;
  long long v16 = *(_OWORD *)(a3 + 80);
  void v22[2] = *(_OWORD *)(a3 + 64);
  *(_OWORD *)uint64_t v23 = v16;
  long long v17 = *(_OWORD *)(a3 + 16);
  long long v20 = *(_OWORD *)a3;
  long long v21 = v17;
  if (v38 > 0x6Cu)
  {
    if (v38 == 116)
    {
      sub_100BB4AD0(a1, a2, (uint64_t)&v20, (long long *)&v32, (uint64_t)&v38, (uint64_t)v30);
LABEL_21:
      sub_100BB927C(v6, (uint64_t)&v20);
      return v6;
    }
    if (v38 == 109)
    {
      if (v42 == 1) {
        sub_100BB4478(a1, a2, (uint64_t)&v20, (long long *)&v32, (uint64_t)&v38, (uint64_t)v30);
      }
      else {
        sub_100BB47A4(a2, a1, (uint64_t)&v20, (long long *)&v32, (uint64_t)&v38, (uint64_t)v31);
      }
      goto LABEL_21;
    }
  }
  else
  {
    if (v38 == 99)
    {
      if (!v39)
      {
        if (v41)
        {
          sub_100BB4FC4(a1, a2, (uint64_t)&v20, (uint64_t)&v32, (uint64_t)&v38, (uint64_t)v30);
        }
        else
        {
          sub_100BB52AC(a1, a2, (uint64_t)&v20, (uint64_t)&v32, (uint64_t)&v38, (uint64_t)v30);
          LODWORD(v21) = 5;
        }
        goto LABEL_21;
      }
      sub_100BB9674(a1, a2, &v20, &v45, (uint64_t)v29, (uint64_t)v30, (void (*)(long long *))nullsub_954);
      return v45;
    }
    if (v38 == 105)
    {
      LODWORD(v21) = 2;
      if (!v32) {
        sub_101A8102C();
      }
      long long v20 = v33;
      *(_OWORD *)&v23[8] = v34;
      *(void *)&v23[24] = v35;
      *(_OWORD *)&v27[8] = v36;
      *(void *)&v27[24] = v37;
      BOOL v18 = v40 == 1;
      DWORD2(v22[5 * (v40 != 1)]) = 1;
      DWORD2(v22[5 * v18]) = 2;
      goto LABEL_21;
    }
  }
  if (v38 == 101 && !v39)
  {
    sub_100BB52AC(a1, a2, (uint64_t)&v20, (uint64_t)&v32, (uint64_t)&v38, (uint64_t)v30);
    goto LABEL_21;
  }
  return v6;
}

BOOL sub_100BB3DF4(int a1, double *a2, double *a3, double *a4)
{
  BOOL result = 0;
  double v6 = *a2;
  double v7 = *a4;
  double v8 = a4[2];
  BOOL v9 = *a2 > v8 || v6 < v7;
  if (v9 && v8 - v7 < 360.0)
  {
    double v11 = v6 - v7;
    double v12 = vabdd_f64(v6, v7);
    double v13 = 180.0;
    if (v12 != 180.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(v6 - v7)) > 0x7FEFFFFFFFFFFFFFLL
        || ((v21 = fabs(v12 + -180.0), double v13 = 180.0, v12 >= 180.0) ? (v22 = v12) : (v22 = 180.0),
            v22 >= 1.0 ? (double v23 = v22 * 2.22044605e-16) : (double v23 = 2.22044605e-16),
            v21 > v23))
      {
        double v13 = 180.0;
        if (v11 <= 180.0)
        {
          double v14 = v6 - v7;
          if (v11 >= -180.0) {
            goto LABEL_9;
          }
          double v13 = fmod(v11 + -180.0, 360.0) + 180.0;
        }
        else
        {
          double v14 = fmod(v11 + 180.0, 360.0) + -180.0;
          if (v14 != -180.0)
          {
            BOOL v24 = ((*(void *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
               && (*(void *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
            if (v24 && *(void *)&v14 != 0) {
              goto LABEL_9;
            }
            double v13 = 180.0;
            double v26 = fabs(v14 + 180.0);
            double v27 = fabs(v14);
            if (v27 < 180.0) {
              double v27 = 180.0;
            }
            double v28 = v27 >= 1.0 ? v27 * 2.22044605e-16 : 2.22044605e-16;
            if (v26 > v28)
            {
LABEL_9:
              if (v14 < 0.0) {
                double v14 = v14 + 360.0;
              }
              if (v7 + v14 <= v8) {
                return 0;
              }
              if (a1 != -1)
              {
                if (a1 == 1)
                {
                  double v15 = 180.0;
                  if (v12 != 180.0)
                  {
                    if (COERCE_UNSIGNED_INT64(fabs(v6 - v7)) > 0x7FEFFFFFFFFFFFFFLL
                      || ((v36 = fabs(v12 + -180.0), double v15 = 180.0, v12 >= 180.0) ? (v37 = v12) : (v37 = 180.0),
                          v37 >= 1.0 ? (double v38 = v37 * 2.22044605e-16) : (double v38 = 2.22044605e-16),
                          v36 > v38))
                    {
                      double v15 = 180.0;
                      if (v11 <= 180.0)
                      {
                        if (v11 >= -180.0) {
                          goto LABEL_16;
                        }
                        double v15 = fmod(v11 + -180.0, 360.0) + 180.0;
                      }
                      else
                      {
                        double v39 = fmod(v11 + 180.0, 360.0);
                        double v11 = v39 + -180.0;
                        if (v39 + -180.0 != -180.0)
                        {
                          unint64_t v40 = COERCE__INT64(fabs(v39 + -180.0)) - 1;
                          BOOL v41 = (unint64_t)(COERCE__INT64(fabs(v39 + -180.0)) - 0x10000000000000) >> 53 > 0x3FE
                             && v40 > 0xFFFFFFFFFFFFELL;
                          if (v41 && *(void *)&v11 != 0) {
                            goto LABEL_16;
                          }
                          double v15 = 180.0;
                          double v43 = fabs(v11 + 180.0);
                          double v44 = fabs(v11);
                          if (v44 < 180.0) {
                            double v44 = 180.0;
                          }
                          double v45 = v44 >= 1.0 ? v44 * 2.22044605e-16 : 2.22044605e-16;
                          if (v43 > v45)
                          {
LABEL_16:
                            double v16 = vabdd_f64(*a3, v7);
                            double v17 = 180.0;
                            if (v16 != 180.0)
                            {
                              double v18 = *a3 - v7;
                              if (COERCE_UNSIGNED_INT64(fabs(v18)) > 0x7FEFFFFFFFFFFFFFLL) {
                                goto LABEL_92;
                              }
                              double v46 = fabs(v16 + -180.0);
                              double v17 = 180.0;
                              if (v16 < 180.0) {
                                double v16 = 180.0;
                              }
                              double v47 = v16 >= 1.0 ? v16 * 2.22044605e-16 : 2.22044605e-16;
                              if (v46 > v47)
                              {
LABEL_92:
                                double v17 = 180.0;
                                if (v18 <= 180.0)
                                {
                                  if (v18 >= -180.0) {
                                    goto LABEL_18;
                                  }
                                  double v17 = fmod(v18 + -180.0, 360.0) + 180.0;
                                }
                                else
                                {
                                  double v18 = fmod(v18 + 180.0, 360.0) + -180.0;
                                  if (v18 != -180.0)
                                  {
                                    BOOL v48 = ((*(void *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
                                       && (*(void *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
                                    if (v48 && *(void *)&v18 != 0) {
                                      goto LABEL_18;
                                    }
                                    double v17 = 180.0;
                                    double v50 = fabs(v18 + 180.0);
                                    double v51 = fabs(v18);
                                    if (v51 < 180.0) {
                                      double v51 = 180.0;
                                    }
                                    double v52 = v51 >= 1.0 ? v51 * 2.22044605e-16 : 2.22044605e-16;
                                    if (v50 > v52) {
                                      goto LABEL_18;
                                    }
                                  }
                                }
                              }
                            }
                            double v18 = v17;
LABEL_18:
                            BOOL v19 = v11 < 0.0;
                            if (v18 > 0.0) {
                              BOOL v19 = 0;
                            }
                            BOOL v20 = v18 > v11;
                            return !v20 && v19;
                          }
                        }
                      }
                    }
                  }
                  double v11 = v15;
                  goto LABEL_16;
                }
                return 0;
              }
              double v29 = vabdd_f64(v6, v8);
              double v30 = 180.0;
              if (v29 != 180.0)
              {
                double v31 = v6 - v8;
                if (COERCE__INT64(fabs(v6 - v8)) > 0x7FEFFFFFFFFFFFFFLL) {
                  goto LABEL_116;
                }
                double v53 = fabs(v29 + -180.0);
                double v30 = 180.0;
                if (v29 < 180.0) {
                  double v29 = 180.0;
                }
                double v54 = v29 >= 1.0 ? v29 * 2.22044605e-16 : 2.22044605e-16;
                if (v53 > v54)
                {
LABEL_116:
                  double v30 = 180.0;
                  if (v31 <= 180.0)
                  {
                    if (v31 >= -180.0) {
                      goto LABEL_49;
                    }
                    double v30 = fmod(v31 + -180.0, 360.0) + 180.0;
                  }
                  else
                  {
                    double v55 = fmod(v31 + 180.0, 360.0);
                    double v31 = v55 + -180.0;
                    if (v55 + -180.0 != -180.0)
                    {
                      unint64_t v56 = COERCE__INT64(fabs(v55 + -180.0)) - 1;
                      BOOL v57 = (unint64_t)(COERCE__INT64(fabs(v55 + -180.0)) - 0x10000000000000) >> 53 > 0x3FE
                         && v56 > 0xFFFFFFFFFFFFELL;
                      if (v57 && *(void *)&v31 != 0) {
                        goto LABEL_49;
                      }
                      double v30 = 180.0;
                      double v59 = fabs(v31 + 180.0);
                      double v60 = fabs(v31);
                      if (v60 < 180.0) {
                        double v60 = 180.0;
                      }
                      double v61 = v60 >= 1.0 ? v60 * 2.22044605e-16 : 2.22044605e-16;
                      if (v59 > v61)
                      {
LABEL_49:
                        double v32 = a3[2];
                        double v33 = vabdd_f64(v32, v8);
                        double v34 = 180.0;
                        if (v33 != 180.0)
                        {
                          double v35 = v32 - v8;
                          if ((*(void *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
                            goto LABEL_140;
                          }
                          double v62 = fabs(v33 + -180.0);
                          double v34 = 180.0;
                          if (v33 < 180.0) {
                            double v33 = 180.0;
                          }
                          double v63 = v33 >= 1.0 ? v33 * 2.22044605e-16 : 2.22044605e-16;
                          if (v62 > v63)
                          {
LABEL_140:
                            double v34 = 180.0;
                            if (v35 <= 180.0)
                            {
                              if (v35 >= -180.0) {
                                goto LABEL_51;
                              }
                              double v34 = fmod(v35 + -180.0, 360.0) + 180.0;
                            }
                            else
                            {
                              double v35 = fmod(v35 + 180.0, 360.0) + -180.0;
                              if (v35 != -180.0)
                              {
                                BOOL v64 = ((*(void *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
                                   && (*(void *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
                                if (v64 && *(void *)&v35 != 0) {
                                  goto LABEL_51;
                                }
                                double v34 = 180.0;
                                double v66 = fabs(v35 + 180.0);
                                double v67 = fabs(v35);
                                if (v67 < 180.0) {
                                  double v67 = 180.0;
                                }
                                double v68 = v67 >= 1.0 ? v67 * 2.22044605e-16 : 2.22044605e-16;
                                if (v66 > v68) {
                                  goto LABEL_51;
                                }
                              }
                            }
                          }
                        }
                        double v35 = v34;
LABEL_51:
                        BOOL v19 = v31 > 0.0;
                        if (v35 < 0.0) {
                          BOOL v19 = 0;
                        }
                        BOOL v20 = v31 > v35;
                        return !v20 && v19;
                      }
                    }
                  }
                }
              }
              double v31 = v30;
              goto LABEL_49;
            }
          }
        }
      }
    }
    double v14 = v13;
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_100BB4478(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = 0;
  *(_DWORD *)(a3 + 16) = 4;
  *(_OWORD *)a3 = *(long long *)((char *)a4 + 8);
  uint64_t v9 = a3 + 40;
  char v10 = 1;
  __asm { FMOV            V1.2D, #1.0 }
  do
  {
    char v15 = v10;
    int v16 = *(_DWORD *)(a5 + 4 * v8 + 36);
    if (v16 == -1)
    {
      uint64_t v18 = v9 + 80 * v8;
      *(_OWORD *)(v18 + 48) = xmmword_101D82650;
      *(void *)(v18 + 64) = 0;
    }
    else if (v16 == 1)
    {
      uint64_t v17 = v9 + 80 * v8;
      *(_OWORD *)(v17 + 48) = _Q1;
      *(void *)(v17 + 64) = 0x412E848000000000;
    }
    else
    {
      if (v15) {
        BOOL v19 = (long long *)((char *)a4 + 40);
      }
      else {
        BOOL v19 = a4 + 4;
      }
      long long v20 = *v19;
      uint64_t v21 = v9 + 80 * v8;
      *(void *)(v21 + 64) = *((void *)v19 + 2);
      *(_OWORD *)(v21 + 48) = v20;
    }
    char v10 = 0;
    uint64_t v8 = 1;
  }
  while ((v15 & 1) != 0);
  int v22 = *(_DWORD *)(a5 + 28);
  uint64_t v23 = *(void *)(a6 + 8);
  uint64_t v24 = *(void *)(a6 + 16);
  double v26 = *(double **)(v23 + 16);
  long long v25 = *(double **)(v23 + 24);
  if (!*(unsigned char *)(v24 + 80))
  {
    sub_100BB81C4(*(void *)(a6 + 16), *(double **)(v24 + 24), v24 + 32);
    *(_OWORD *)(v24 + 64) = *(_OWORD *)*(void *)(v24 + 32);
    *(unsigned char *)(v24 + 80) = 1;
  }
  uint64_t result = sub_10075DD40(v26, v25, (double *)(v24 + 64));
  int v28 = result;
  if (v22 + result)
  {
    uint64_t v29 = *(void *)(a6 + 16);
    double v30 = *(double **)(v29 + 16);
    double v31 = *(double **)(v29 + 24);
    if (!*(unsigned char *)(v29 + 80))
    {
      sub_100BB81C4(*(void *)(a6 + 16), *(double **)(v29 + 24), v29 + 32);
      *(_OWORD *)(v29 + 64) = *(_OWORD *)*(void *)(v29 + 32);
      *(unsigned char *)(v29 + 80) = 1;
    }
    int v32 = sub_10075DD40(v30, v31, (double *)(v29 + 64));
    uint64_t v33 = *(void *)(a6 + 16);
    double v34 = *(double **)(v33 + 24);
    if (!*(unsigned char *)(v33 + 80))
    {
      sub_100BB81C4(*(void *)(a6 + 16), *(double **)(v33 + 24), v33 + 32);
      *(_OWORD *)(v33 + 64) = *(_OWORD *)*(void *)(v33 + 32);
      *(unsigned char *)(v33 + 80) = 1;
    }
    uint64_t result = sub_10075DD40(v34, (double *)(v33 + 64), *(double **)(*(void *)(a6 + 8) + 24));
    if ((v28 & v22) == 0xFFFFFFFF && v32 == 1)
    {
      *(_DWORD *)(a3 + 40) = 2;
      *(_DWORD *)(a3 + 120) = 2;
      *(unsigned char *)(a3 + 20) = 1;
    }
    else
    {
      int v36 = result;
      if (v22 == 1 && v28 == 1 && v32 == -1)
      {
        *(_DWORD *)(a3 + 40) = 1;
        if (result == -1) {
          int v37 = 1;
        }
        else {
          int v37 = 3;
        }
        *(_DWORD *)(a3 + 120) = v37;
        *(unsigned char *)(a3 + 20) = 1;
      }
      else if (v22 == v28 && v22 == v32)
      {
        unsigned int v38 = (v32 == 1) ^ (result == 0);
        if (result * v22 == -1)
        {
          int v39 = sub_10075DD40(*(double **)(*(void *)(a6 + 8) + 16), *(double **)(*(void *)(a6 + 8) + 24), *(double **)(*(void *)(a6 + 16) + 24));
          uint64_t result = sub_100BB9200(a6);
          if (result * v39 == 1)
          {
            uint64_t result = sub_10075DD40(*(double **)(*(void *)(a6 + 16) + 16), *(double **)(*(void *)(a6 + 16) + 24), *(double **)(*(void *)(a6 + 8) + 24));
            if (result * v36 == -1) {
              v38 ^= 1u;
            }
          }
        }
        *(_DWORD *)(v9 + 80 * v38) = 1;
        *(_DWORD *)(v9 + 80 * (v38 ^ 1)) = 2;
        *(unsigned char *)(a3 + 20) = 1;
      }
      else if (v28)
      {
        *(_DWORD *)(a3 + 16) = 8;
      }
      else
      {
        if (v22 == v32)
        {
          int v40 = 4;
          *(_DWORD *)(a3 + 40) = 4;
        }
        else
        {
          if (v32 == 1) {
            int v41 = 2;
          }
          else {
            int v41 = 1;
          }
          *(_DWORD *)(a3 + 40) = v41;
          int v40 = 3;
        }
        *(_DWORD *)(a3 + 120) = v40;
      }
    }
  }
  else
  {
    *(_DWORD *)(v9 + 80 * (result != -1)) = 1;
    *(_DWORD *)(v9 + 80 * (result == -1)) = 2;
  }
  return result;
}

uint64_t sub_100BB47A4(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = 0;
  *(_DWORD *)(a3 + 16) = 4;
  *(_OWORD *)a3 = *(long long *)((char *)a4 + 8);
  uint64_t v9 = a3 + 40;
  char v10 = 1;
  __asm { FMOV            V1.2D, #1.0 }
  do
  {
    char v15 = v10;
    int v16 = *(_DWORD *)(a5 + 4 * v8 + 36);
    if (v16 == -1)
    {
      uint64_t v18 = v9 + 80 * v8;
      *(_OWORD *)(v18 + 48) = xmmword_101D82650;
      *(void *)(v18 + 64) = 0;
    }
    else if (v16 == 1)
    {
      uint64_t v17 = v9 + 80 * v8;
      *(_OWORD *)(v17 + 48) = _Q1;
      *(void *)(v17 + 64) = 0x412E848000000000;
    }
    else
    {
      if (v15) {
        BOOL v19 = (long long *)((char *)a4 + 40);
      }
      else {
        BOOL v19 = a4 + 4;
      }
      long long v20 = *v19;
      uint64_t v21 = v9 + 80 * v8;
      *(void *)(v21 + 64) = *((void *)v19 + 2);
      *(_OWORD *)(v21 + 48) = v20;
    }
    char v10 = 0;
    uint64_t v8 = 1;
  }
  while ((v15 & 1) != 0);
  int v22 = *(_DWORD *)(a5 + 20);
  uint64_t v23 = *(void *)(a6 + 8);
  uint64_t v24 = *(void *)(a6 + 16);
  double v26 = *(double **)(v23 + 16);
  long long v25 = *(double **)(v23 + 24);
  if (!*(unsigned char *)(v24 + 80))
  {
    sub_100BB81C4(*(void *)(a6 + 16), *(double **)(v24 + 24), v24 + 32);
    *(_OWORD *)(v24 + 64) = *(_OWORD *)*(void *)(v24 + 32);
    *(unsigned char *)(v24 + 80) = 1;
  }
  uint64_t result = sub_10075DD40(v26, v25, (double *)(v24 + 64));
  int v28 = result;
  if (!(v22 + result))
  {
    *(_DWORD *)(v9 + 80 * (result == -1)) = 1;
    *(_DWORD *)(v9 + 80 * (result != -1)) = 2;
    return result;
  }
  uint64_t v29 = *(void *)(a6 + 16);
  double v30 = *(double **)(v29 + 16);
  double v31 = *(double **)(v29 + 24);
  if (!*(unsigned char *)(v29 + 80))
  {
    sub_100BB81C4(*(void *)(a6 + 16), *(double **)(v29 + 24), v29 + 32);
    *(_OWORD *)(v29 + 64) = *(_OWORD *)*(void *)(v29 + 32);
    *(unsigned char *)(v29 + 80) = 1;
  }
  int v32 = sub_10075DD40(v30, v31, (double *)(v29 + 64));
  uint64_t v33 = *(void *)(a6 + 16);
  double v34 = *(double **)(v33 + 24);
  if (!*(unsigned char *)(v33 + 80))
  {
    sub_100BB81C4(*(void *)(a6 + 16), *(double **)(v33 + 24), v33 + 32);
    *(_OWORD *)(v33 + 64) = *(_OWORD *)*(void *)(v33 + 32);
    *(unsigned char *)(v33 + 80) = 1;
  }
  uint64_t result = sub_10075DD40(v34, (double *)(v33 + 64), *(double **)(*(void *)(a6 + 8) + 24));
  if ((v28 & v22) == 0xFFFFFFFF && v32 == 1)
  {
    *(_DWORD *)(a3 + 40) = 2;
    *(_DWORD *)(a3 + 120) = 2;
LABEL_31:
    *(unsigned char *)(a3 + 20) = 1;
    return result;
  }
  int v36 = result;
  if (v22 == 1 && v28 == 1 && v32 == -1)
  {
    if (result == -1) {
      int v37 = 1;
    }
    else {
      int v37 = 3;
    }
    *(_DWORD *)(a3 + 40) = v37;
    *(_DWORD *)(a3 + 120) = 1;
    goto LABEL_31;
  }
  if (v22 == v28 && v22 == v32)
  {
    unsigned int v38 = (v32 == 1) ^ (result != 0);
    if (result * v22 == -1)
    {
      int v39 = sub_10075DD40(*(double **)(*(void *)(a6 + 8) + 16), *(double **)(*(void *)(a6 + 8) + 24), *(double **)(*(void *)(a6 + 16) + 24));
      uint64_t result = sub_100BB9200(a6);
      if (result * v39 == 1)
      {
        uint64_t result = sub_10075DD40(*(double **)(*(void *)(a6 + 16) + 16), *(double **)(*(void *)(a6 + 16) + 24), *(double **)(*(void *)(a6 + 8) + 24));
        if (result * v36 == -1) {
          v38 ^= 1u;
        }
      }
    }
    *(_DWORD *)(v9 + 80 * v38) = 1;
    *(_DWORD *)(v9 + 80 * (v38 ^ 1)) = 2;
    *(unsigned char *)(a3 + 20) = 1;
  }
  else if (v28)
  {
    *(_DWORD *)(a3 + 16) = 8;
  }
  else if (v22 == v32)
  {
    *(_DWORD *)(a3 + 40) = 4;
    *(_DWORD *)(a3 + 120) = 4;
  }
  else
  {
    if (v32 == 1) {
      int v40 = 2;
    }
    else {
      int v40 = 1;
    }
    *(_DWORD *)(a3 + 120) = v40;
    *(_DWORD *)(a3 + 40) = 3;
  }
  return result;
}

uint64_t sub_100BB4AD0(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  *(_DWORD *)(a3 + 16) = 3;
  *(_OWORD *)a3 = *(long long *)((char *)a4 + 8);
  uint64_t v10 = a3 + 40;
  char v11 = 1;
  __asm { FMOV            V1.2D, #1.0 }
  do
  {
    char v16 = v11;
    int v17 = *(_DWORD *)(a5 + 4 * v9 + 36);
    if (v17 == -1)
    {
      uint64_t v19 = v10 + 80 * v9;
      *(_OWORD *)(v19 + 48) = xmmword_101D82650;
      *(void *)(v19 + 64) = 0;
    }
    else if (v17 == 1)
    {
      uint64_t v18 = v10 + 80 * v9;
      *(_OWORD *)(v18 + 48) = _Q1;
      *(void *)(v18 + 64) = 0x412E848000000000;
    }
    else
    {
      if (v16) {
        long long v20 = (long long *)((char *)a4 + 40);
      }
      else {
        long long v20 = a4 + 4;
      }
      long long v21 = *v20;
      uint64_t v22 = v10 + 80 * v9;
      *(void *)(v22 + 64) = *((void *)v20 + 2);
      *(_OWORD *)(v22 + 48) = v21;
    }
    char v11 = 0;
    uint64_t v9 = 1;
  }
  while ((v16 & 1) != 0);
  uint64_t v24 = *(void *)(a6 + 8);
  uint64_t v23 = *(void *)(a6 + 16);
  double v26 = *(double **)(v23 + 16);
  long long v25 = *(double **)(v23 + 24);
  if (!*(unsigned char *)(v24 + 80))
  {
    sub_100BB81C4(*(void *)(a6 + 8), *(double **)(v24 + 24), v24 + 32);
    *(_OWORD *)(v24 + 64) = *(_OWORD *)*(void *)(v24 + 32);
    *(unsigned char *)(v24 + 80) = 1;
  }
  int v27 = sub_10075DD40(v26, v25, (double *)(v24 + 64));
  int v28 = *(_DWORD *)(a5 + 28);
  uint64_t v29 = *(void *)(a6 + 8);
  uint64_t v30 = *(void *)(a6 + 16);
  int v32 = *(double **)(v29 + 16);
  double v31 = *(double **)(v29 + 24);
  if (!*(unsigned char *)(v30 + 80))
  {
    sub_100BB81C4(*(void *)(a6 + 16), *(double **)(v30 + 24), v30 + 32);
    *(_OWORD *)(v30 + 64) = *(_OWORD *)*(void *)(v30 + 32);
    *(unsigned char *)(v30 + 80) = 1;
  }
  int v33 = sub_10075DD40(v32, v31, (double *)(v30 + 64));
  if (v33 * v28 == -1)
  {
    uint64_t v52 = *(void *)(a6 + 8);
    double v53 = *(double **)(v52 + 16);
    double v54 = *(double **)(v52 + 24);
    if (!*(unsigned char *)(v52 + 80))
    {
      sub_100BB81C4(*(void *)(a6 + 8), *(double **)(v52 + 24), v52 + 32);
      *(_OWORD *)(v52 + 64) = *(_OWORD *)*(void *)(v52 + 32);
      *(unsigned char *)(v52 + 80) = 1;
    }
    uint64_t result = sub_10075DD40(v53, v54, (double *)(v52 + 64));
    if (result == v28)
    {
      if (!v27)
      {
        *(_DWORD *)(a3 + 40) = 3;
        BOOL v60 = v33 == 1;
        goto LABEL_105;
      }
      if (v27 == v33)
      {
        if (v33 == 1) {
          int v55 = 1;
        }
        else {
          int v55 = 2;
        }
        *(_DWORD *)(a3 + 40) = v55;
        goto LABEL_103;
      }
    }
    if (result == v33)
    {
      uint64_t v56 = *(void *)(a6 + 16);
      BOOL v57 = *(double **)(v56 + 24);
      if (!*(unsigned char *)(v56 + 80))
      {
        sub_100BB81C4(*(void *)(a6 + 16), *(double **)(v56 + 24), v56 + 32);
        *(_OWORD *)(v56 + 64) = *(_OWORD *)*(void *)(v56 + 32);
        *(unsigned char *)(v56 + 80) = 1;
      }
      uint64_t v58 = *(void *)(a6 + 8);
      if (!*(unsigned char *)(v58 + 80))
      {
        sub_100BB81C4(v58, *(double **)(v58 + 24), v58 + 32);
        *(_OWORD *)(v58 + 64) = *(_OWORD *)*(void *)(v58 + 32);
        *(unsigned char *)(v58 + 80) = 1;
      }
      uint64_t result = sub_10075DD40(v57, (double *)(v56 + 64), (double *)(v58 + 64));
      if (!result) {
        goto LABEL_72;
      }
      if (result == v33)
      {
        if (v33 == 1) {
          int v59 = 1;
        }
        else {
          int v59 = 2;
        }
        *(_DWORD *)(a3 + 40) = v59;
        if (v33 == 1) {
          int v55 = 2;
        }
        else {
          int v55 = 1;
        }
        goto LABEL_103;
      }
    }
    BOOL v60 = v33 == 1;
    if (v33 == 1) {
      int v61 = 2;
    }
    else {
      int v61 = 1;
    }
    *(_DWORD *)(a3 + 40) = v61;
LABEL_105:
    if (v60) {
      int v51 = 1;
    }
    else {
      int v51 = 2;
    }
    goto LABEL_108;
  }
  uint64_t v34 = *(void *)(a6 + 16);
  double v35 = *(double **)(v34 + 24);
  if (!*(unsigned char *)(v34 + 80))
  {
    sub_100BB81C4(*(void *)(a6 + 16), *(double **)(v34 + 24), v34 + 32);
    *(_OWORD *)(v34 + 64) = *(_OWORD *)*(void *)(v34 + 32);
    *(unsigned char *)(v34 + 80) = 1;
  }
  uint64_t v36 = *(void *)(a6 + 8);
  if (!*(unsigned char *)(v36 + 80))
  {
    sub_100BB81C4(*(void *)(a6 + 8), *(double **)(v36 + 24), v36 + 32);
    *(_OWORD *)(v36 + 64) = *(_OWORD *)*(void *)(v36 + 32);
    *(unsigned char *)(v36 + 80) = 1;
  }
  int v37 = sub_10075DD40(v35, (double *)(v34 + 64), (double *)(v36 + 64));
  uint64_t v38 = *(void *)(a6 + 8);
  int v39 = *(double **)(v38 + 16);
  int v40 = *(double **)(v38 + 24);
  if (!*(unsigned char *)(v38 + 80))
  {
    sub_100BB81C4(*(void *)(a6 + 8), *(double **)(v38 + 24), v38 + 32);
    *(_OWORD *)(v38 + 64) = *(_OWORD *)*(void *)(v38 + 32);
    *(unsigned char *)(v38 + 80) = 1;
  }
  int v41 = sub_10075DD40(v39, v40, (double *)(v38 + 64));
  uint64_t v42 = *(void *)(a6 + 16);
  double v43 = *(double **)(v42 + 16);
  double v44 = *(double **)(v42 + 24);
  if (!*(unsigned char *)(v42 + 80))
  {
    sub_100BB81C4(v42, *(double **)(v42 + 24), v42 + 32);
    *(_OWORD *)(v42 + 64) = *(_OWORD *)*(void *)(v42 + 32);
    *(unsigned char *)(v42 + 80) = 1;
  }
  uint64_t result = sub_10075DD40(v43, v44, (double *)(v42 + 64));
  if (v33) {
    _ZF = 1;
  }
  else {
    _ZF = result * v28 == 1;
  }
  int v47 = !_ZF;
  if (v41 != v28 && v41 != v33 && (v33 | v28 || v41 == -1))
  {
    if (result == 1) {
      int v62 = 2;
    }
    else {
      int v62 = 1;
    }
    *(_DWORD *)(a3 + 40) = v62;
    if (v33 == 1 || v28 == 1) {
      int v64 = 1;
    }
    else {
      int v64 = 2;
    }
    if (v47) {
      int v64 = 3;
    }
    *(_DWORD *)(a3 + 120) = v64;
    if ((v47 & 1) == 0) {
      goto LABEL_89;
    }
    return result;
  }
  if (v37) {
    char v48 = 1;
  }
  else {
    char v48 = v47;
  }
  if ((v48 & 1) == 0)
  {
LABEL_72:
    int v51 = 4;
    *(_DWORD *)(a3 + 40) = 4;
LABEL_108:
    *(_DWORD *)(a3 + 120) = v51;
    return result;
  }
  if (!v27)
  {
    *(_DWORD *)(a3 + 40) = 3;
    if (result == 1) {
      int v65 = 2;
    }
    else {
      int v65 = 1;
    }
    if (v47) {
      int v51 = 3;
    }
    else {
      int v51 = v65;
    }
    goto LABEL_108;
  }
  if (v27 == v37 && result * v27 != -1)
  {
    if (result == 1) {
      int v49 = 1;
    }
    else {
      int v49 = 2;
    }
    *(_DWORD *)(a3 + 40) = v49;
    if (result == 1) {
      int v50 = 2;
    }
    else {
      int v50 = 1;
    }
    if (v47) {
      int v51 = 3;
    }
    else {
      int v51 = v50;
    }
    goto LABEL_108;
  }
  if (!(v37 + result))
  {
    if (result == 1) {
      int v66 = 2;
    }
    else {
      int v66 = 1;
    }
    *(_DWORD *)(a3 + 40) = v66;
    if (result == 1) {
      int v55 = 1;
    }
    else {
      int v55 = 2;
    }
LABEL_103:
    *(_DWORD *)(a3 + 120) = v55;
    *(unsigned char *)(a3 + 20) = 1;
    return result;
  }
  if (v27 == -(int)result)
  {
    if (result == 1) {
      int v67 = 2;
    }
    else {
      int v67 = 1;
    }
    *(_DWORD *)(a3 + 40) = v67;
    *(_DWORD *)(a3 + 120) = v67;
    if (v47)
    {
      int v51 = 3;
      goto LABEL_108;
    }
LABEL_89:
    *(unsigned char *)(a3 + 20) = 1;
  }
  return result;
}

double sub_100BB4FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v10 = *(double *)(a4 + 80);
  double v11 = *(double *)(a4 + 136);
  if (vabdd_f64(v10, v11) >= 50.0)
  {
    BOOL v16 = v10 < v11;
  }
  else
  {
    double v12 = *(double *)(a4 + 72);
    if (v12 == 0.0) {
      sub_101A81058();
    }
    double v13 = *(double *)(a4 + 128);
    if (v13 == 0.0) {
      sub_101A81084();
    }
    double v14 = *(double *)(a4 + 64) / v12;
    double v15 = *(double *)(a4 + 120) / v13;
    if (v14 == v15)
    {
      BOOL v16 = 0;
    }
    else if ((*(void *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL {
           || (*(void *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    }
    {
      BOOL v16 = 1;
    }
    else
    {
      double v17 = vabdd_f64(v14, v15);
      double v18 = fabs(v14);
      double v19 = fabs(v15);
      if (v18 < v19) {
        double v18 = v19;
      }
      if (v18 >= 1.0) {
        double v20 = v18 * 2.22044605e-16;
      }
      else {
        double v20 = 2.22044605e-16;
      }
      BOOL v16 = v17 > v20;
    }
    if (v14 >= v15) {
      BOOL v16 = 0;
    }
  }
  *(_DWORD *)(a3 + 16) = 5;
  if (*(void *)a4 <= (unint64_t)v16) {
    sub_101A8102C();
  }
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 16 * v16 + 8);
  uint64_t v21 = a4 + 56 * v16;
  long long v22 = *(_OWORD *)(v21 + 40);
  *(void *)(a3 + 104) = *(void *)(v21 + 56);
  *(_OWORD *)(a3 + 88) = v22;
  long long v23 = *(_OWORD *)(v21 + 64);
  *(void *)(a3 + 184) = *(void *)(v21 + 80);
  *(_OWORD *)(a3 + 168) = v23;
  int v24 = *(_DWORD *)(a5 + 36);
  if (!v24) {
    sub_101A810B0();
  }
  uint64_t v25 = *(void *)(a6 + 8);
  double v26 = *(double **)(v25 + 16);
  int v27 = *(double **)(v25 + 24);
  if (!*(unsigned char *)(v25 + 80))
  {
    sub_100BB81C4(*(void *)(a6 + 8), *(double **)(v25 + 24), v25 + 32);
    *(_OWORD *)(v25 + 64) = *(_OWORD *)*(void *)(v25 + 32);
    *(unsigned char *)(v25 + 80) = 1;
  }
  int v28 = sub_10075DD40(v26, v27, (double *)(v25 + 64));
  uint64_t v29 = *(void *)(a6 + 16);
  uint64_t v30 = *(double **)(v29 + 16);
  double v31 = *(double **)(v29 + 24);
  if (!*(unsigned char *)(v29 + 80))
  {
    sub_100BB81C4(v29, *(double **)(v29 + 24), v29 + 32);
    *(_OWORD *)(v29 + 64) = *(_OWORD *)*(void *)(v29 + 32);
    *(unsigned char *)(v29 + 80) = 1;
  }
  int v32 = sub_10075DD40(v30, v31, (double *)(v29 + 64));
  int v33 = v32;
  if (v24 == 1) {
    int v34 = v28;
  }
  else {
    int v34 = v32;
  }
  if (v34 * v24 == 1) {
    int v35 = 1;
  }
  else {
    int v35 = 2;
  }
  if (v34 * v24 == 1) {
    int v36 = 2;
  }
  else {
    int v36 = 1;
  }
  if (v34)
  {
    int v37 = v36;
  }
  else
  {
    int v35 = 4;
    int v37 = 4;
  }
  *(_DWORD *)(a3 + 40) = v35;
  *(_DWORD *)(a3 + 120) = v37;
  if (v28)
  {
    uint64_t v38 = *(double **)(a1 + 24);
    double v39 = *(double *)a3;
    double v40 = *(double *)(a3 + 8);
    double v41 = *v38;
    double v42 = v38[1];
  }
  else
  {
    if (!*(unsigned char *)(a1 + 80))
    {
      sub_100BB81C4(a1, *(double **)(a1 + 24), a1 + 32);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)*(void *)(a1 + 32);
      *(unsigned char *)(a1 + 80) = 1;
    }
    double v39 = *(double *)a3;
    double v40 = *(double *)(a3 + 8);
    double v41 = *(double *)(a1 + 64);
    double v42 = *(double *)(a1 + 72);
  }
  *(double *)(a3 + 112) = (v40 - v42) * (v40 - v42) + (v39 - v41) * (v39 - v41);
  if (v33)
  {
    double v43 = *(double **)(a2 + 24);
    double v44 = *v43;
    double v45 = v43[1];
  }
  else
  {
    if (!*(unsigned char *)(a2 + 80))
    {
      sub_100BB81C4(a2, *(double **)(a2 + 24), a2 + 32);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)*(void *)(a2 + 32);
      *(unsigned char *)(a2 + 80) = 1;
      double v39 = *(double *)a3;
      double v40 = *(double *)(a3 + 8);
    }
    double v44 = *(double *)(a2 + 64);
    double v45 = *(double *)(a2 + 72);
  }
  double result = (v40 - v45) * (v40 - v45) + (v39 - v44) * (v39 - v44);
  *(double *)(a3 + 192) = result;
  return result;
}

uint64_t sub_100BB52AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v8 = *(double *)(a4 + 80);
  double v9 = *(double *)(a4 + 136);
  if (vabdd_f64(v8, v9) >= 50.0)
  {
    BOOL v14 = v8 < v9;
  }
  else
  {
    double v10 = *(double *)(a4 + 72);
    if (v10 == 0.0) {
      sub_101A81058();
    }
    double v11 = *(double *)(a4 + 128);
    if (v11 == 0.0) {
      sub_101A81084();
    }
    double v12 = *(double *)(a4 + 64) / v10;
    double v13 = *(double *)(a4 + 120) / v11;
    if (v12 == v13)
    {
      BOOL v14 = 0;
    }
    else if ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL {
           || (*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    }
    {
      BOOL v14 = 1;
    }
    else
    {
      double v15 = vabdd_f64(v12, v13);
      double v16 = fabs(v12);
      double v17 = fabs(v13);
      if (v16 < v17) {
        double v16 = v17;
      }
      if (v16 >= 1.0) {
        double v18 = v16 * 2.22044605e-16;
      }
      else {
        double v18 = 2.22044605e-16;
      }
      BOOL v14 = v15 > v18;
    }
    if (v12 >= v13) {
      BOOL v14 = 0;
    }
  }
  *(_DWORD *)(a3 + 16) = 6;
  if (*(void *)a4 <= (unint64_t)v14) {
    sub_101A8102C();
  }
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 16 * v14 + 8);
  uint64_t v19 = a4 + 56 * v14;
  long long v20 = *(_OWORD *)(v19 + 40);
  *(void *)(a3 + 104) = *(void *)(v19 + 56);
  *(_OWORD *)(a3 + 88) = v20;
  long long v21 = *(_OWORD *)(v19 + 64);
  *(void *)(a3 + 184) = *(void *)(v19 + 80);
  *(_OWORD *)(a3 + 168) = v21;
  uint64_t v22 = *(void *)(a6 + 16);
  long long v23 = *(double **)(v22 + 24);
  if (!*(unsigned char *)(v22 + 80))
  {
    sub_100BB81C4(*(void *)(a6 + 16), *(double **)(v22 + 24), v22 + 32);
    *(_OWORD *)(v22 + 64) = *(_OWORD *)*(void *)(v22 + 32);
    *(unsigned char *)(v22 + 80) = 1;
  }
  uint64_t v24 = *(void *)(a6 + 8);
  if (!*(unsigned char *)(v24 + 80))
  {
    sub_100BB81C4(*(void *)(a6 + 8), *(double **)(v24 + 24), v24 + 32);
    *(_OWORD *)(v24 + 64) = *(_OWORD *)*(void *)(v24 + 32);
    *(unsigned char *)(v24 + 80) = 1;
  }
  int v25 = sub_10075DD40(v23, (double *)(v22 + 64), (double *)(v24 + 64));
  uint64_t v26 = *(void *)(a6 + 8);
  int v27 = *(double **)(v26 + 16);
  int v28 = *(double **)(v26 + 24);
  if (!*(unsigned char *)(v26 + 80))
  {
    sub_100BB81C4(*(void *)(a6 + 8), *(double **)(v26 + 24), v26 + 32);
    *(_OWORD *)(v26 + 64) = *(_OWORD *)*(void *)(v26 + 32);
    *(unsigned char *)(v26 + 80) = 1;
  }
  int v29 = sub_10075DD40(v27, v28, (double *)(v26 + 64));
  uint64_t v30 = *(void *)(a6 + 8);
  uint64_t v31 = *(void *)(a6 + 16);
  int v33 = *(double **)(v30 + 16);
  int v32 = *(double **)(v30 + 24);
  if (!*(unsigned char *)(v31 + 80))
  {
    sub_100BB81C4(v31, *(double **)(v31 + 24), v31 + 32);
    *(_OWORD *)(v31 + 64) = *(_OWORD *)*(void *)(v31 + 32);
    *(unsigned char *)(v31 + 80) = 1;
  }
  uint64_t result = sub_10075DD40(v33, v32, (double *)(v31 + 64));
  if (v25 || v29 != result)
  {
    if (result * v29 == -1) {
      BOOL v36 = v29 == -1;
    }
    else {
      BOOL v36 = v25 == -1;
    }
    if (v36) {
      int v37 = 2;
    }
    else {
      int v37 = 1;
    }
    *(_DWORD *)(a3 + 40) = v37;
    if (v36) {
      int v35 = 1;
    }
    else {
      int v35 = 2;
    }
  }
  else
  {
    int v35 = 4;
    *(_DWORD *)(a3 + 40) = 4;
  }
  *(_DWORD *)(a3 + 120) = v35;
  return result;
}

void sub_100BB5548(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  double v7 = *(void **)(a2 + 16);
  double v6 = *(void **)(a2 + 24);
  v276[0] = v5;
  v276[1] = v4;
  v275[0] = v7;
  v275[1] = v6;
  uint64_t v8 = *(void *)(v5 + 8);
  *(void *)&long long v281 = *(void *)v5;
  char v277 = 0;
  *(void *)&v290[0] = v8;
  sub_10075D084((double *)&v281, (double *)v290, 1);
  double v9 = *(double *)&v281;
  double v10 = *(double *)v290;
  uint64_t v11 = *(void *)(v4 + 8);
  *(void *)&long long v281 = *(void *)v4;
  *(void *)&v290[0] = v11;
  sub_10075D084((double *)&v281, (double *)v290, 1);
  if (v9 != *(double *)&v281)
  {
    if ((*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || ((unint64_t)v281 & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_21;
    }
    double v13 = vabdd_f64(v9, *(double *)&v281);
    double v14 = fabs(v9);
    double v15 = fabs(*(double *)&v281);
    if (v14 >= v15) {
      double v15 = v14;
    }
    double v16 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v13 > v16) {
      goto LABEL_21;
    }
  }
  if (v10 == *(double *)v290) {
    goto LABEL_3;
  }
  if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(void *)&v290[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    goto LABEL_21;
  }
  double v17 = vabdd_f64(v10, *(double *)v290);
  double v18 = fabs(v10);
  double v19 = fabs(*(double *)v290);
  if (v18 >= v19) {
    double v19 = v18;
  }
  double v20 = v19 >= 1.0 ? v19 * 2.22044605e-16 : 2.22044605e-16;
  if (v17 <= v20) {
LABEL_3:
  }
    int v12 = 1;
  else {
LABEL_21:
  }
    int v12 = 0;
  uint64_t v21 = v7[1];
  *(void *)&long long v281 = *v7;
  *(void *)&v290[0] = v21;
  sub_10075D084((double *)&v281, (double *)v290, 1);
  double v22 = *(double *)&v281;
  double v23 = *(double *)v290;
  uint64_t v24 = v6[1];
  *(void *)&long long v281 = *v6;
  *(void *)&v290[0] = v24;
  sub_10075D084((double *)&v281, (double *)v290, 1);
  if (v22 != *(double *)&v281)
  {
    if ((*(void *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || ((unint64_t)v281 & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_51;
    }
    double v31 = vabdd_f64(v22, *(double *)&v281);
    double v32 = fabs(v22);
    double v33 = fabs(*(double *)&v281);
    if (v32 >= v33) {
      double v33 = v32;
    }
    double v34 = v33 >= 1.0 ? v33 * 2.22044605e-16 : 2.22044605e-16;
    if (v31 > v34) {
      goto LABEL_51;
    }
  }
  if (v23 == *(double *)v290)
  {
    if (v12) {
      goto LABEL_25;
    }
    BOOL v39 = 1;
  }
  else
  {
    if ((*(void *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v290[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
LABEL_51:
      BOOL v39 = 0;
      goto LABEL_53;
    }
    double v35 = vabdd_f64(v23, *(double *)v290);
    double v36 = fabs(v23);
    double v37 = fabs(*(double *)v290);
    if (v36 >= v37) {
      double v37 = v36;
    }
    if (v37 >= 1.0) {
      double v38 = v37 * 2.22044605e-16;
    }
    else {
      double v38 = 2.22044605e-16;
    }
    BOOL v39 = v35 <= v38;
    if (v35 <= v38) {
      char v40 = v12;
    }
    else {
      char v40 = 0;
    }
    if (v40)
    {
LABEL_25:
      uint64_t v25 = *(void *)(v5 + 8);
      *(void *)&long long v281 = *(void *)v5;
      *(void *)&v290[0] = v25;
      sub_10075D084((double *)&v281, (double *)v290, 1);
      double v26 = *(double *)&v281;
      double v27 = *(double *)v290;
      uint64_t v28 = v6[1];
      *(void *)&long long v281 = *v6;
      *(void *)&v290[0] = v28;
      sub_10075D084((double *)&v281, (double *)v290, 1);
      if (v26 != *(double *)&v281)
      {
        if ((*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || ((unint64_t)v281 & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_180;
        }
        double v110 = vabdd_f64(v26, *(double *)&v281);
        double v111 = fabs(v26);
        double v112 = fabs(*(double *)&v281);
        if (v111 >= v112) {
          double v112 = v111;
        }
        double v113 = v112 >= 1.0 ? v112 * 2.22044605e-16 : 2.22044605e-16;
        if (v110 > v113) {
          goto LABEL_180;
        }
      }
      if (v27 != *(double *)v290)
      {
        if ((*(void *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v290[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_180;
        }
        double v132 = vabdd_f64(v27, *(double *)v290);
        double v133 = fabs(v27);
        double v134 = fabs(*(double *)v290);
        if (v133 >= v134) {
          double v134 = v133;
        }
        double v135 = v134 >= 1.0 ? v134 * 2.22044605e-16 : 2.22044605e-16;
        if (v132 > v135)
        {
LABEL_180:
          *(void *)&long long v281 = 0;
          uint64_t v136 = 40;
          do
          {
            int v137 = (char *)&v281 + v136;
            *(_OWORD *)int v137 = xmmword_101D82650;
            *((void *)v137 + 2) = 0;
            *((void *)v137 + 3) = 0;
            *((_OWORD *)v137 + 2) = xmmword_101D1C450;
            v137[48] = 0;
            v136 += 56;
          }
          while (v137 + 56 != (char *)v290);
          goto LABEL_457;
        }
      }
      uint64_t v29 = 40;
      do
      {
        uint64_t v30 = (char *)&v281 + v29;
        *(_OWORD *)uint64_t v30 = xmmword_101D82650;
        *((void *)v30 + 2) = 0;
        *((void *)v30 + 3) = 0;
        *((_OWORD *)v30 + 2) = xmmword_101D1C450;
        v30[48] = 0;
        v29 += 56;
      }
      while (v30 + 56 != (char *)v290);
      goto LABEL_71;
    }
  }
LABEL_53:
  double v272 = sub_100BB7220((double *)v5);
  double v273 = v41;
  double v274 = v42;
  double v269 = sub_100BB7220((double *)v4);
  double v270 = v43;
  double v271 = v44;
  double v266 = sub_100BB7220((double *)v7);
  double v267 = v45;
  double v268 = v46;
  double v47 = sub_100BB7220((double *)v6);
  double v263 = v47;
  double v264 = v48;
  double v265 = v49;
  unint64_t v261 = 0;
  unint64_t v262 = 0;
  double v50 = v267;
  double v51 = v268;
  double v52 = v267 * v49 - v268 * v48;
  double v53 = v266;
  double v54 = v268 * v47 - v266 * v49;
  double v55 = v266 * v48 - v267 * v47;
  double v258 = v52;
  double v259 = v54;
  double v260 = v55;
  double v257 = 0.0;
  if (v39)
  {
    int v56 = 0;
    int v57 = 0;
    char v58 = 0;
    char v59 = 1;
    goto LABEL_57;
  }
  double v60 = 1.0 - (v49 * v268 + v267 * v48 + v266 * v47);
  double v257 = v60;
  if (v60 == 0.0) {
    goto LABEL_56;
  }
  unint64_t v85 = COERCE__INT64(fabs(1.0 - (v49 * v268 + v267 * v48 + v266 * v47))) - 1;
  BOOL v86 = (unint64_t)(COERCE__INT64(fabs(1.0 - (v49 * v268 + v267 * v48 + v266 * v47))) - 0x10000000000000) >> 53 > 0x3FE
     && v85 > 0xFFFFFFFFFFFFELL;
  if (!v86 || *(void *)&v60 == 0)
  {
    double v88 = fabs(v60);
    double v89 = 2.22044605e-16;
    if (v88 >= 1.0) {
      double v89 = v88 * 2.22044605e-16;
    }
    if (v88 <= v89)
    {
LABEL_56:
      int v56 = 0;
      int v57 = 0;
      double v257 = 0.0;
      char v59 = 1;
      char v58 = 1;
      goto LABEL_57;
    }
  }
  double v90 = v55 * v274 + v54 * v273 + v52 * v272;
  if (v90 == 0.0) {
    goto LABEL_85;
  }
  if (COERCE_UNSIGNED_INT64(fabs(v55 * v274 + v54 * v273 + v52 * v272)) >= 0x7FF0000000000000)
  {
    if (v90 > 0.0) {
      int v57 = 1;
    }
    else {
      int v57 = -1;
    }
  }
  else
  {
    double v162 = fabs(v90);
    double v163 = 2.22044605e-16;
    if (v162 >= 1.0) {
      double v163 = v162 * 2.22044605e-16;
    }
    if (v90 > 0.0) {
      int v57 = 1;
    }
    else {
      int v57 = -1;
    }
    if (v162 <= v163) {
LABEL_85:
    }
      int v57 = 0;
  }
  double v184 = v55 * v271 + v54 * v270 + v52 * v269;
  if (v184 != 0.0)
  {
    if (COERCE_UNSIGNED_INT64(fabs(v55 * v271 + v54 * v270 + v52 * v269)) >= 0x7FF0000000000000)
    {
      if (v184 > 0.0) {
        int v56 = 1;
      }
      else {
        int v56 = -1;
      }
      goto LABEL_312;
    }
    double v185 = fabs(v184);
    double v186 = 2.22044605e-16;
    if (v185 >= 1.0) {
      double v186 = v185 * 2.22044605e-16;
    }
    if (v184 > 0.0) {
      int v56 = 1;
    }
    else {
      int v56 = -1;
    }
    if (v185 > v186) {
      goto LABEL_312;
    }
  }
  int v56 = 0;
LABEL_312:
  unint64_t v261 = __PAIR64__(v56, v57);
  if (v56 * v57 == 1)
  {
    *(void *)&long long v281 = 0;
    uint64_t v187 = 40;
    do
    {
      v188 = (char *)&v281 + v187;
      *(_OWORD *)v188 = xmmword_101D82650;
      *((void *)v188 + 2) = 0;
      *((void *)v188 + 3) = 0;
      *((_OWORD *)v188 + 2) = xmmword_101D1C450;
      v188[48] = 0;
      v187 += 56;
    }
    while (v188 + 56 != (char *)v290);
    goto LABEL_457;
  }
  char v59 = 0;
  char v58 = 0;
LABEL_57:
  double v62 = v273;
  double v61 = v274;
  double v63 = v272;
  double v64 = v273 * v271 - v274 * v270;
  double v65 = v274 * v269 - v272 * v271;
  double v66 = v272 * v270 - v273 * v269;
  double v254 = v64;
  double v255 = v65;
  double v256 = v66;
  *((void *)&v253 + 1) = 0;
  if (v12)
  {
    int v67 = 0;
    int v68 = 0;
    goto LABEL_61;
  }
  double v69 = 1.0 - (v271 * v274 + v273 * v270 + v272 * v269);
  *((double *)&v253 + 1) = v69;
  if (v69 == 0.0) {
    goto LABEL_60;
  }
  unint64_t v91 = COERCE__INT64(fabs(1.0 - (v271 * v274 + v273 * v270 + v272 * v269))) - 1;
  BOOL v92 = (unint64_t)(COERCE__INT64(fabs(1.0 - (v271 * v274 + v273 * v270 + v272 * v269))) - 0x10000000000000) >> 53 > 0x3FE
     && v91 > 0xFFFFFFFFFFFFELL;
  if (!v92 || *(void *)&v69 == 0)
  {
    double v94 = fabs(v69);
    double v95 = 2.22044605e-16;
    if (v94 >= 1.0) {
      double v95 = v94 * 2.22044605e-16;
    }
    if (v94 <= v95)
    {
LABEL_60:
      int v67 = 0;
      int v68 = 0;
      *((void *)&v253 + 1) = 0;
      char v58 = 1;
      goto LABEL_61;
    }
  }
  double v96 = v268 * v66 + v65 * v267 + v64 * v266;
  if (v96 == 0.0) {
    goto LABEL_98;
  }
  if (COERCE_UNSIGNED_INT64(fabs(v268 * v66 + v65 * v267 + v64 * v266)) >= 0x7FF0000000000000)
  {
    if (v96 > 0.0) {
      int v68 = 1;
    }
    else {
      int v68 = -1;
    }
  }
  else
  {
    double v164 = fabs(v96);
    double v165 = 2.22044605e-16;
    if (v164 >= 1.0) {
      double v165 = v164 * 2.22044605e-16;
    }
    if (v96 > 0.0) {
      int v68 = 1;
    }
    else {
      int v68 = -1;
    }
    if (v164 <= v165) {
LABEL_98:
    }
      int v68 = 0;
  }
  double v189 = v49 * v66 + v65 * v48 + v64 * v47;
  if (v189 != 0.0)
  {
    if ((*(void *)&v189 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v189 > 0.0) {
        int v67 = 1;
      }
      else {
        int v67 = -1;
      }
      goto LABEL_333;
    }
    double v190 = fabs(v189);
    double v191 = 2.22044605e-16;
    if (v190 >= 1.0) {
      double v191 = v190 * 2.22044605e-16;
    }
    if (v189 > 0.0) {
      int v67 = 1;
    }
    else {
      int v67 = -1;
    }
    if (v190 > v191) {
      goto LABEL_333;
    }
  }
  int v67 = 0;
LABEL_333:
  unint64_t v262 = __PAIR64__(v67, v68);
  if (v67 * v68 == 1)
  {
    *(void *)&long long v281 = 0;
    uint64_t v192 = 40;
    do
    {
      v193 = (char *)&v281 + v192;
      *(_OWORD *)v193 = xmmword_101D82650;
      *((void *)v193 + 2) = 0;
      *((void *)v193 + 3) = 0;
      *((_OWORD *)v193 + 2) = xmmword_101D1C450;
      v193[48] = 0;
      v192 += 56;
    }
    while (v193 + 56 != (char *)v290);
    goto LABEL_457;
  }
  double v194 = sqrt(v66 * v66 + v65 * v65 + v64 * v64);
  if (v194 != 0.0)
  {
    if (*(void *)&v194 >> 52 > 0x7FEuLL) {
      goto LABEL_345;
    }
    double v195 = fabs(v194);
    double v196 = 2.22044605e-16;
    if (v195 >= 1.0) {
      double v196 = v195 * 2.22044605e-16;
    }
    if (v195 > v196)
    {
LABEL_345:
      int v70 = 0;
      double v64 = v64 / v194;
      double v65 = v65 / v194;
      double v254 = v64;
      double v255 = v65;
      double v66 = v66 / v194;
      double v256 = v66;
      if ((v59 & 1) == 0) {
        goto LABEL_62;
      }
LABEL_66:
      if (!v70)
      {
        int v84 = 1;
        goto LABEL_104;
      }
      uint64_t v72 = *(void *)(v5 + 8);
      *(void *)&long long v281 = *(void *)v5;
      *(void *)&v290[0] = v72;
      sub_10075D084((double *)&v281, (double *)v290, 1);
      double v73 = *(double *)&v281;
      double v74 = *(double *)v290;
      uint64_t v75 = v6[1];
      *(void *)&long long v281 = *v6;
      *(void *)&v290[0] = v75;
      sub_10075D084((double *)&v281, (double *)v290, 1);
      if (v73 != *(double *)&v281)
      {
        if ((*(void *)&v73 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || ((unint64_t)v281 & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_169;
        }
        double v106 = vabdd_f64(v73, *(double *)&v281);
        double v107 = fabs(v73);
        double v108 = fabs(*(double *)&v281);
        if (v107 >= v108) {
          double v108 = v107;
        }
        double v109 = v108 >= 1.0 ? v108 * 2.22044605e-16 : 2.22044605e-16;
        if (v106 > v109) {
          goto LABEL_169;
        }
      }
      if (v74 != *(double *)v290)
      {
        if ((*(void *)&v74 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v290[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_169;
        }
        double v126 = vabdd_f64(v74, *(double *)v290);
        double v127 = fabs(v74);
        double v128 = fabs(*(double *)v290);
        if (v127 >= v128) {
          double v128 = v127;
        }
        double v129 = v128 >= 1.0 ? v128 * 2.22044605e-16 : 2.22044605e-16;
        if (v126 > v129)
        {
LABEL_169:
          *(void *)&long long v281 = 0;
          uint64_t v130 = 40;
          do
          {
            float v131 = (char *)&v281 + v130;
            *(_OWORD *)float v131 = xmmword_101D82650;
            *((void *)v131 + 2) = 0;
            *((void *)v131 + 3) = 0;
            *((_OWORD *)v131 + 2) = xmmword_101D1C450;
            v131[48] = 0;
            v130 += 56;
          }
          while (v131 + 56 != (char *)v290);
          goto LABEL_457;
        }
      }
      uint64_t v76 = 40;
      do
      {
        long long v77 = (char *)&v281 + v76;
        *(_OWORD *)long long v77 = xmmword_101D82650;
        *((void *)v77 + 2) = 0;
        *((void *)v77 + 3) = 0;
        *((_OWORD *)v77 + 2) = xmmword_101D1C450;
        v77[48] = 0;
        v76 += 56;
      }
      while (v77 + 56 != (char *)v290);
LABEL_71:
      *(void *)&long long v281 = 1;
      *((void *)&v281 + 1) = *(void *)v276[0];
      *(void *)&long long v282 = *(void *)(v276[0] + 8);
      memset((char *)v290 + 2, 0, 40);
      long long v78 = v287;
      *(_OWORD *)(a3 + 96) = v286;
      *(_OWORD *)(a3 + 112) = v78;
      *(_OWORD *)(a3 + 128) = v288;
      long long v79 = *(_OWORD *)&v283[16];
      *(_OWORD *)(a3 + 32) = *(_OWORD *)v283;
      *(_OWORD *)(a3 + 48) = v79;
      long long v80 = v285;
      *(_OWORD *)(a3 + 64) = v284;
      *(_OWORD *)(a3 + 80) = v80;
      long long v81 = v282;
      *(_OWORD *)a3 = v281;
      *(_OWORD *)(a3 + 16) = v81;
      long long v82 = v290[1];
      *(_OWORD *)(a3 + 154) = v290[0];
      *(void *)(a3 + 144) = v289;
      __int16 v83 = 48;
LABEL_458:
      *(_WORD *)(a3 + 152) = v83;
LABEL_459:
      *(_OWORD *)(a3 + 170) = v82;
      *(_OWORD *)(a3 + 180) = *(_OWORD *)((char *)&v290[1] + 10);
      return;
    }
  }
  if (!v57 || !v56)
  {
    int v56 = 0;
    int v57 = 0;
    unint64_t v261 = 0;
  }
LABEL_61:
  int v70 = 1;
  if (v59) {
    goto LABEL_66;
  }
LABEL_62:
  double v71 = sqrt(v55 * v55 + v54 * v54 + v52 * v52);
  if (v71 == 0.0) {
    goto LABEL_64;
  }
  if (*(void *)&v71 >> 52 <= 0x7FEuLL)
  {
    double v97 = fabs(v71);
    double v98 = 2.22044605e-16;
    if (v97 >= 1.0) {
      double v98 = v97 * 2.22044605e-16;
    }
    if (v97 <= v98)
    {
LABEL_64:
      if (!v68 || !v67)
      {
        int v67 = 0;
        int v68 = 0;
        unint64_t v262 = 0;
      }
      goto LABEL_66;
    }
  }
  int v84 = 0;
  double v52 = v52 / v71;
  double v54 = v54 / v71;
  double v258 = v52;
  double v259 = v54;
  double v55 = v55 / v71;
  double v260 = v55;
LABEL_104:
  int v99 = v68 | v67;
  if (!(v57 | v56))
  {
    if (!v99) {
      goto LABEL_137;
    }
    int64x2_t v105 = (char *)&v262 + 4;
    LODWORD(v262) = 0;
LABEL_136:
    *(_DWORD *)int64x2_t v105 = 0;
LABEL_137:
    double v100 = v66 * v55 + v65 * v54 + v64 * v52;
    if (!v70)
    {
LABEL_108:
      if (v84)
      {
        double v247 = 0.0;
        if (sub_100BB7354((double *)v5, (double *)v4, (double *)v7, (uint64_t)v6, &v272, (uint64_t)&v269, &v254, &v266, &v263, (double *)&v253 + 1, &v247, v58))
        {
          double v102 = v247;
          double v103 = *((double *)&v253 + 1);
          double v278 = v247;
          double v279 = *((double *)&v253 + 1);
          if (*((double *)&v253 + 1) < 0.0)
          {
            double v102 = -v247;
            double v103 = -*((double *)&v253 + 1);
            double v278 = -v247;
            double v279 = -*((double *)&v253 + 1);
          }
          double v104 = 0.0;
          if (v103 != 0.0) {
            double v104 = v102 * 1000000.0 / v103;
          }
          double v280 = v104;
          sub_100BB8370(v275, (uint64_t)&v278, 0, a3);
          return;
        }
        *(void *)&long long v281 = 0;
        uint64_t v142 = 40;
        do
        {
          v143 = (char *)&v281 + v142;
          *(_OWORD *)v143 = xmmword_101D82650;
          *((void *)v143 + 2) = 0;
          *((void *)v143 + 3) = 0;
          *((_OWORD *)v143 + 2) = xmmword_101D1C450;
          v143[48] = 0;
          v142 += 56;
        }
        while (v143 + 56 != (char *)v290);
LABEL_457:
        memset((char *)v290 + 2, 0, 40);
        long long v233 = v287;
        *(_OWORD *)(a3 + 96) = v286;
        *(_OWORD *)(a3 + 112) = v233;
        *(_OWORD *)(a3 + 128) = v288;
        long long v234 = *(_OWORD *)&v283[16];
        *(_OWORD *)(a3 + 32) = *(_OWORD *)v283;
        *(_OWORD *)(a3 + 48) = v234;
        long long v235 = v285;
        *(_OWORD *)(a3 + 64) = v284;
        *(_OWORD *)(a3 + 80) = v235;
        long long v236 = v282;
        *(_OWORD *)a3 = v281;
        *(_OWORD *)(a3 + 16) = v236;
        long long v82 = v290[1];
        *(_OWORD *)(a3 + 154) = v290[0];
        *(void *)(a3 + 144) = v289;
        __int16 v83 = 100;
        goto LABEL_458;
      }
      double v251 = 0.0;
      double v252 = 0.0;
      double v250 = 0.0;
      if ((v53 * -v62 + v63 * v50) * v66 + v65 * (v51 * -v63 + v61 * v53) + v64 * (v50 * -v61 + v62 * v51) >= 0.0) {
        double v123 = 1.0 - (v51 * v61 + v62 * v50 + v63 * v53);
      }
      else {
        double v123 = -(1.0 - (v51 * v61 + v62 * v50 + v63 * v53));
      }
      if (v123 <= -2.0) {
        double v123 = v123 + 4.0;
      }
      *(double *)&long long v253 = v123;
      if (sub_100BB8624((double *)&v253, (double *)v5, (double *)v7))
      {
        *(void *)&long long v253 = 0;
      }
      else
      {
        *(double *)&long long v281 = *((double *)&v253 + 1) - *(double *)&v253;
        if (sub_100BB8624((double *)&v281, (double *)v4, (double *)v7)) {
          *(void *)&long long v253 = *((void *)&v253 + 1);
        }
      }
      double v144 = 1.0 - (v265 * v274 + v273 * v264 + v272 * v263);
      if ((v272 * v264 - v273 * v263) * v256 + v255 * (v274 * v263 - v272 * v265) + v254 * (v273 * v265 - v274 * v264) < 0.0) {
        double v144 = -v144;
      }
      if (v144 <= -2.0) {
        double v144 = v144 + 4.0;
      }
      double v252 = v144;
      if (sub_100BB8624(&v252, (double *)v5, (double *)v6))
      {
        double v252 = 0.0;
      }
      else
      {
        *(double *)&long long v281 = *((double *)&v253 + 1) - v252;
        if (sub_100BB8624((double *)&v281, (double *)v4, (double *)v6)) {
          double v252 = *((double *)&v253 + 1);
        }
      }
      double v145 = 1.0 - (v274 * v268 + v267 * v273 + v266 * v272);
      if ((v266 * v273 - v267 * v272) * v260 + v259 * (v268 * v272 - v266 * v274) + v258 * (v267 * v274 - v268 * v273) < 0.0) {
        double v145 = -v145;
      }
      if (v145 <= -2.0) {
        double v145 = v145 + 4.0;
      }
      double v251 = v145;
      if (sub_100BB8624(&v251, (double *)v7, (double *)v5))
      {
        double v251 = 0.0;
      }
      else
      {
        *(double *)&long long v281 = v257 - v251;
        if (sub_100BB8624((double *)&v281, (double *)v6, (double *)v5)) {
          double v251 = v257;
        }
      }
      double v146 = 1.0 - (v271 * v268 + v267 * v270 + v266 * v269);
      if ((v266 * v270 - v267 * v269) * v260 + v259 * (v268 * v269 - v266 * v271) + v258 * (v267 * v271 - v268 * v270) < 0.0) {
        double v146 = -v146;
      }
      if (v146 <= -2.0) {
        double v146 = v146 + 4.0;
      }
      double v250 = v146;
      if (sub_100BB8624(&v250, (double *)v7, (double *)v4))
      {
        double v250 = 0.0;
      }
      else
      {
        *(double *)&long long v281 = v257 - v250;
        if (sub_100BB8624((double *)&v281, (double *)v6, (double *)v4))
        {
          double v147 = v257;
          double v250 = v257;
          goto LABEL_222;
        }
      }
      double v147 = v257;
LABEL_222:
      double v278 = v251;
      double v279 = v147;
      double v148 = v251;
      double v149 = v147;
      if (v147 < 0.0)
      {
        double v148 = -v251;
        double v149 = -v147;
        double v278 = -v251;
        double v279 = -v147;
      }
      double v150 = 0.0;
      if (v149 != 0.0) {
        double v150 = v148 * 1000000.0 / v149;
      }
      double v280 = v150;
      double v247 = v250;
      double v248 = v147;
      double v151 = v250;
      double v152 = v147;
      if (v147 < 0.0)
      {
        double v151 = -v250;
        double v152 = -v147;
        double v247 = -v250;
        double v248 = -v147;
      }
      double v153 = 0.0;
      if (v152 != 0.0) {
        double v153 = v151 * 1000000.0 / v152;
      }
      double v249 = v153;
      double v154 = *((double *)&v253 + 1);
      long long v245 = v253;
      double v156 = *((double *)&v253 + 1);
      double v155 = *(double *)&v253;
      if (*((double *)&v253 + 1) < 0.0)
      {
        double v155 = -*(double *)&v253;
        double v156 = -*((double *)&v253 + 1);
        *(double *)&long long v245 = -*(double *)&v253;
        *((double *)&v245 + 1) = -*((double *)&v253 + 1);
      }
      double v157 = 0.0;
      if (v156 != 0.0) {
        double v157 = v155 * 1000000.0 / v156;
      }
      double v246 = v157;
      *(double *)&long long v243 = v252;
      *((void *)&v243 + 1) = *((void *)&v253 + 1);
      double v158 = v252;
      double v159 = *((double *)&v253 + 1);
      if (*((double *)&v253 + 1) < 0.0)
      {
        double v158 = -v252;
        double v159 = -*((double *)&v253 + 1);
        *(double *)&long long v243 = -v252;
        *((double *)&v243 + 1) = -*((double *)&v253 + 1);
      }
      double v160 = 0.0;
      if (v159 != 0.0) {
        double v160 = v158 * 1000000.0 / v159;
      }
      double v244 = v160;
      if (*(double *)&v253 == 0.0
        || ((unint64_t)v253 & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL
        && ((double v166 = vabdd_f64(0.0, *(double *)&v253), v167 = fmax(fabs(*(double *)&v253), 0.0), v167 >= 1.0)
          ? (double v168 = v167 * 2.22044605e-16)
          : (double v168 = 2.22044605e-16),
            v166 <= v168))
      {
        unsigned int v161 = 1;
        goto LABEL_263;
      }
      if (v252 == 0.0
        || (*(void *)&v252 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && ((double v197 = vabdd_f64(0.0, v252), v198 = fmax(fabs(v252), 0.0), v198 >= 1.0)
          ? (double v199 = v198 * 2.22044605e-16)
          : (double v199 = 2.22044605e-16),
            v197 <= v199))
      {
        unsigned int v161 = 3;
        goto LABEL_263;
      }
      if (*(double *)&v253 >= v252)
      {
        if (*(double *)&v253 >= 0.0)
        {
          if (v252 <= 0.0) {
            unsigned int v161 = 2;
          }
          else {
            unsigned int v161 = 4;
          }
LABEL_263:
          if (*((double *)&v253 + 1) == *(double *)&v253)
          {
LABEL_264:
            unsigned int v169 = 1;
            goto LABEL_367;
          }
          if ((*((void *)&v253 + 1) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            if (*((double *)&v253 + 1) != v252) {
              goto LABEL_281;
            }
          }
          else
          {
            if (((unint64_t)v253 & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL)
            {
              double v170 = vabdd_f64(*((double *)&v253 + 1), *(double *)&v253);
              double v171 = fabs(*((double *)&v253 + 1));
              double v172 = fabs(*(double *)&v253);
              if (v171 < v172) {
                double v171 = v172;
              }
              double v173 = v171 >= 1.0 ? v171 * 2.22044605e-16 : 2.22044605e-16;
              if (v170 <= v173) {
                goto LABEL_264;
              }
            }
            if (*((double *)&v253 + 1) != v252)
            {
              if ((*(void *)&v252 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
                goto LABEL_281;
              }
              double v174 = vabdd_f64(*((double *)&v253 + 1), v252);
              double v175 = fabs(*((double *)&v253 + 1));
              double v176 = fabs(v252);
              if (v175 < v176) {
                double v175 = v176;
              }
              double v177 = v175 >= 1.0 ? v175 * 2.22044605e-16 : 2.22044605e-16;
              if (v174 > v177)
              {
LABEL_281:
                if (*(double *)&v253 >= v252)
                {
                  if (*((double *)&v253 + 1) <= *(double *)&v253)
                  {
                    if (*((double *)&v253 + 1) >= v252) {
                      unsigned int v169 = 2;
                    }
                    else {
                      unsigned int v169 = 4;
                    }
                    goto LABEL_367;
                  }
                }
                else if (*((double *)&v253 + 1) >= *(double *)&v253)
                {
                  if (*((double *)&v253 + 1) <= v252) {
                    unsigned int v169 = 2;
                  }
                  else {
                    unsigned int v169 = 4;
                  }
                  goto LABEL_367;
                }
                unsigned int v169 = 0;
LABEL_367:
                if (v251 == 0.0
                  || (*(void *)&v251 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                  && ((double v201 = vabdd_f64(0.0, v251), v202 = fmax(fabs(v251), 0.0), v202 >= 1.0)
                    ? (double v203 = v202 * 2.22044605e-16)
                    : (double v203 = 2.22044605e-16),
                      v201 <= v203))
                {
                  int v200 = 1;
                  goto LABEL_376;
                }
                if (v250 == 0.0
                  || (*(void *)&v250 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                  && ((double v213 = vabdd_f64(0.0, v250), v214 = fmax(fabs(v250), 0.0), v214 >= 1.0)
                    ? (double v215 = v214 * 2.22044605e-16)
                    : (double v215 = 2.22044605e-16),
                      v213 <= v215))
                {
                  int v200 = 3;
                  goto LABEL_376;
                }
                if (v251 >= v250)
                {
                  if (v251 >= 0.0)
                  {
                    if (v250 <= 0.0) {
                      int v200 = 2;
                    }
                    else {
                      int v200 = 4;
                    }
LABEL_376:
                    if (v147 == v251)
                    {
LABEL_377:
                      int v204 = 1;
                      goto LABEL_418;
                    }
                    if ((*(void *)&v147 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                    {
                      if (v147 != v250) {
                        goto LABEL_394;
                      }
                    }
                    else
                    {
                      if ((*(void *)&v251 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
                      {
                        double v205 = vabdd_f64(v147, v251);
                        double v206 = fabs(v147);
                        double v207 = fabs(v251);
                        if (v206 < v207) {
                          double v206 = v207;
                        }
                        double v208 = v206 >= 1.0 ? v206 * 2.22044605e-16 : 2.22044605e-16;
                        if (v205 <= v208) {
                          goto LABEL_377;
                        }
                      }
                      if (v147 != v250)
                      {
                        if ((*(void *)&v250 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
                          goto LABEL_394;
                        }
                        double v209 = vabdd_f64(v147, v250);
                        double v210 = fabs(v147);
                        double v211 = fabs(v250);
                        if (v210 < v211) {
                          double v210 = v211;
                        }
                        double v212 = v210 >= 1.0 ? v210 * 2.22044605e-16 : 2.22044605e-16;
                        if (v209 > v212)
                        {
LABEL_394:
                          if (v251 >= v250)
                          {
                            if (v147 <= v251)
                            {
                              if (v147 >= v250) {
                                int v204 = 2;
                              }
                              else {
                                int v204 = 4;
                              }
LABEL_418:
                              if (v161 == 3)
                              {
                                double v278 = v147;
                                double v279 = v147;
                                double v223 = v147;
                                if (v147 < 0.0)
                                {
                                  double v223 = -v147;
                                  double v278 = -v147;
                                  double v279 = -v147;
                                }
                                double v224 = 0.0;
                                double v225 = 0.0;
                                if (v223 != 0.0) {
                                  double v225 = v223 * 1000000.0 / v223;
                                }
                                double v280 = v225;
                                *(void *)&long long v243 = 0;
                                double v226 = *((double *)&v253 + 1);
                                *((void *)&v243 + 1) = *((void *)&v253 + 1);
                                if (*((double *)&v253 + 1) < 0.0)
                                {
                                  *(void *)&long long v243 = 0x8000000000000000;
                                  double v226 = -*((double *)&v253 + 1);
                                  *((double *)&v243 + 1) = -*((double *)&v253 + 1);
                                  double v224 = -0.0;
                                }
                                double v227 = v224 / v226;
                                if (v226 == 0.0) {
                                  double v227 = 0.0;
                                }
                                double v244 = v227;
                              }
                              else if (v161 == 1)
                              {
                                double v278 = 0.0;
                                double v279 = v147;
                                double v216 = 0.0;
                                double v217 = 0.0;
                                double v218 = v147;
                                if (v147 < 0.0)
                                {
                                  double v278 = -0.0;
                                  double v218 = -v147;
                                  double v279 = -v147;
                                  double v217 = -0.0;
                                }
                                double v219 = v217 / v218;
                                if (v218 == 0.0) {
                                  double v220 = 0.0;
                                }
                                else {
                                  double v220 = v219;
                                }
                                double v280 = v220;
                                *(void *)&long long v245 = 0;
                                *((void *)&v245 + 1) = *((void *)&v253 + 1);
                                double v221 = *((double *)&v253 + 1);
                                if (*((double *)&v253 + 1) < 0.0)
                                {
                                  *(void *)&long long v245 = 0x8000000000000000;
                                  double v221 = -*((double *)&v253 + 1);
                                  *((double *)&v245 + 1) = -*((double *)&v253 + 1);
                                  double v216 = -0.0;
                                }
                                double v222 = v216 / v221;
                                if (v221 == 0.0) {
                                  double v222 = 0.0;
                                }
                                double v246 = v222;
                              }
                              if (v169 == 3)
                              {
                                double v247 = v147;
                                double v248 = v147;
                                if (v147 < 0.0)
                                {
                                  double v147 = -v147;
                                  double v247 = v147;
                                  double v248 = v147;
                                }
                                double v229 = 0.0;
                                if (v147 != 0.0) {
                                  double v229 = v147 * 1000000.0 / v147;
                                }
                                double v249 = v229;
                                *(void *)&long long v243 = *((void *)&v253 + 1);
                                *((void *)&v243 + 1) = *((void *)&v253 + 1);
                                if (*((double *)&v253 + 1) < 0.0)
                                {
                                  double v154 = -*((double *)&v253 + 1);
                                  *(double *)&long long v243 = -*((double *)&v253 + 1);
                                  *((double *)&v243 + 1) = -*((double *)&v253 + 1);
                                }
                                double v230 = 0.0;
                                if (v154 != 0.0) {
                                  double v230 = v154 * 1000000.0 / v154;
                                }
                                double v244 = v230;
                              }
                              else if (v169 == 1)
                              {
                                double v247 = 0.0;
                                double v248 = v147;
                                if (v147 >= 0.0)
                                {
                                  double v228 = 0.0;
                                }
                                else
                                {
                                  double v247 = -0.0;
                                  double v147 = -v147;
                                  double v248 = v147;
                                  double v228 = -0.0;
                                }
                                double v237 = v228 / v147;
                                if (v147 == 0.0) {
                                  double v238 = 0.0;
                                }
                                else {
                                  double v238 = v237;
                                }
                                double v249 = v238;
                                *(void *)&long long v245 = *((void *)&v253 + 1);
                                *((void *)&v245 + 1) = *((void *)&v253 + 1);
                                if (*((double *)&v253 + 1) < 0.0)
                                {
                                  double v154 = -*((double *)&v253 + 1);
                                  *(double *)&long long v245 = -*((double *)&v253 + 1);
                                  *((double *)&v245 + 1) = -*((double *)&v253 + 1);
                                }
                                double v239 = 0.0;
                                if (v154 != 0.0) {
                                  double v239 = v154 * 1000000.0 / v154;
                                }
                                double v246 = v239;
                              }
                              else if (!(v161 | v169) || v161 >= 4 && v169 >= 4)
                              {
                                *(void *)&long long v281 = 0;
                                uint64_t v231 = 40;
                                do
                                {
                                  v232 = (char *)&v281 + v231;
                                  *(_OWORD *)v232 = xmmword_101D82650;
                                  *((void *)v232 + 2) = 0;
                                  *((void *)v232 + 3) = 0;
                                  *((_OWORD *)v232 + 2) = xmmword_101D1C450;
                                  v232[48] = 0;
                                  v231 += 56;
                                }
                                while (v232 + 56 != (char *)v290);
                                goto LABEL_457;
                              }
                              sub_100BB7554((uint64_t)v276, (uint64_t)v275, v100 < 0.0, v161, v169, v200, v204, (uint64_t)&v278, a3, (uint64_t)&v247, &v245, &v243);
                              return;
                            }
                          }
                          else if (v147 >= v251)
                          {
                            if (v147 <= v250) {
                              int v204 = 2;
                            }
                            else {
                              int v204 = 4;
                            }
                            goto LABEL_418;
                          }
                          int v204 = 0;
                          goto LABEL_418;
                        }
                      }
                    }
                    int v204 = 3;
                    goto LABEL_418;
                  }
                }
                else if (v251 <= 0.0)
                {
                  if (v250 >= 0.0) {
                    int v200 = 2;
                  }
                  else {
                    int v200 = 4;
                  }
                  goto LABEL_376;
                }
                int v200 = 0;
                goto LABEL_376;
              }
            }
          }
          unsigned int v169 = 3;
          goto LABEL_367;
        }
      }
      else if (*(double *)&v253 <= 0.0)
      {
        if (v252 >= 0.0) {
          unsigned int v161 = 2;
        }
        else {
          unsigned int v161 = 4;
        }
        goto LABEL_263;
      }
      unsigned int v161 = 0;
      goto LABEL_263;
    }
LABEL_138:
    double v278 = 0.0;
    if (sub_100BB7354((double *)v7, (double *)v6, (double *)v5, v4, &v266, (uint64_t)&v263, &v258, &v272, &v269, &v257, &v278, v58))
    {
      if (v257 >= 0.0) {
        double v114 = v278;
      }
      else {
        double v114 = -v278;
      }
      if (v257 >= 0.0) {
        double v115 = v257;
      }
      else {
        double v115 = -v257;
      }
      double v116 = 0.0;
      if (v115 != 0.0) {
        double v116 = v114 * 1000000.0 / v115;
      }
      uint64_t v117 = 40;
      do
      {
        int64x2_t v118 = (char *)&v281 + v117;
        *(_OWORD *)int64x2_t v118 = xmmword_101D82650;
        *((void *)v118 + 2) = 0;
        *((void *)v118 + 3) = 0;
        *((_OWORD *)v118 + 2) = xmmword_101D1C450;
        v118[48] = 0;
        v117 += 56;
      }
      while (v118 + 56 != (char *)v290);
      *(void *)&long long v281 = 1;
      *((void *)&v281 + 1) = *(void *)v276[0];
      *(void *)&long long v282 = *(void *)(v276[0] + 8);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024730E8, memory_order_acquire) & 1) == 0)
      {
        double v242 = v115;
        double v240 = v116;
        int v241 = __cxa_guard_acquire(&qword_1024730E8);
        double v116 = v240;
        double v115 = v242;
        if (v241)
        {
          xmmword_1024730D0 = xmmword_101D82650;
          qword_1024730E0 = 0;
          __cxa_guard_release(&qword_1024730E8);
          double v116 = v240;
          double v115 = v242;
        }
      }
      BYTE8(v285) = 1;
      *(_OWORD *)&v283[8] = xmmword_1024730D0;
      *(void *)&v283[24] = qword_1024730E0;
      *(double *)&long long v284 = v114;
      *((double *)&v284 + 1) = v115;
      *(double *)&long long v285 = v116;
      memset((char *)v290 + 2, 0, 40);
      long long v119 = v287;
      *(_OWORD *)(a3 + 96) = v286;
      *(_OWORD *)(a3 + 112) = v119;
      *(_OWORD *)(a3 + 128) = v288;
      *(void *)(a3 + 144) = v289;
      long long v120 = *(_OWORD *)&v283[16];
      *(_OWORD *)(a3 + 32) = *(_OWORD *)v283;
      *(_OWORD *)(a3 + 48) = v120;
      long long v121 = v285;
      *(_OWORD *)(a3 + 64) = v284;
      *(_OWORD *)(a3 + 80) = v121;
      long long v122 = v282;
      *(_OWORD *)a3 = v281;
      *(_OWORD *)(a3 + 16) = v122;
      *(_WORD *)(a3 + 152) = 48;
      long long v82 = v290[1];
      *(_OWORD *)(a3 + 154) = v290[0];
      goto LABEL_459;
    }
    *(void *)&long long v281 = 0;
    uint64_t v124 = 40;
    do
    {
      int v125 = (char *)&v281 + v124;
      *(_OWORD *)int v125 = xmmword_101D82650;
      *((void *)v125 + 2) = 0;
      *((void *)v125 + 3) = 0;
      *((_OWORD *)v125 + 2) = xmmword_101D1C450;
      v125[48] = 0;
      v124 += 56;
    }
    while (v125 + 56 != (char *)v290);
    goto LABEL_457;
  }
  if (!v99)
  {
    int64x2_t v105 = (char *)&v261 + 4;
    LODWORD(v261) = 0;
    goto LABEL_136;
  }
  double v100 = v66 * v55 + v65 * v54 + v64 * v52;
  double v101 = fabs(v100);
  if (v101 == 1.0
    || COERCE_UNSIGNED_INT64(fabs(v66 * v55 + v65 * v54 + v64 * v52)) <= 0x7FEFFFFFFFFFFFFFLL
    && ((double v138 = fabs(v101 + -1.0), v101 >= 1.0) ? (v139 = v101 * 2.22044605e-16) : (v139 = 2.22044605e-16), v138 <= v139))
  {
    unint64_t v261 = 0;
    unint64_t v262 = 0;
    if (!v70) {
      goto LABEL_108;
    }
    goto LABEL_138;
  }
  if ((v70 | v84) == 1)
  {
    *(void *)&long long v281 = 0;
    uint64_t v140 = 40;
    do
    {
      int v141 = (char *)&v281 + v140;
      *(_OWORD *)int v141 = xmmword_101D82650;
      *((void *)v141 + 2) = 0;
      *((void *)v141 + 3) = 0;
      *((_OWORD *)v141 + 2) = xmmword_101D1C450;
      v141[48] = 0;
      v140 += 56;
    }
    while (v141 + 56 != (char *)v290);
    goto LABEL_457;
  }
  LODWORD(v245) = 0;
  double v278 = 0.0;
  double v247 = 0.0;
  if (sub_100BB7768((double *)v5, (double *)v4, (double *)v7, (double *)v6, &v272, &v269, &v266, &v263, &v254, &v258, (uint64_t)&v277, &v261, (double *)&v253 + 1, &v257, (double *)v290, &v278, &v247, (int *)&v245))
  {
    *(void *)&long long v285 = &v277;
    double v178 = v278;
    double v179 = *((double *)&v253 + 1);
    *((double *)&v282 + 1) = v278;
    *(void *)v283 = *((void *)&v253 + 1);
    if (*((double *)&v253 + 1) < 0.0)
    {
      double v178 = -v278;
      double v179 = -*((double *)&v253 + 1);
      *((double *)&v282 + 1) = -v278;
      *(double *)v283 = -*((double *)&v253 + 1);
    }
    double v180 = 0.0;
    if (v179 != 0.0) {
      double v180 = v178 * 1000000.0 / v179;
    }
    double v181 = v247;
    *(double *)&v283[8] = v180;
    *(double *)&v283[16] = v247;
    double v182 = v257;
    *(double *)&v283[24] = v257;
    if (v257 < 0.0)
    {
      double v181 = -v247;
      double v182 = -v257;
      *(double *)&v283[16] = -v247;
      *(double *)&v283[24] = -v257;
    }
    double v183 = 0.0;
    if (v182 != 0.0) {
      double v183 = v181 * 1000000.0 / v182;
    }
    *(double *)&long long v284 = v183;
    long long v281 = v290[0];
    *(void *)&long long v282 = *(void *)&v290[1];
    DWORD2(v284) = v245;
    sub_100BB7F98((int *)&v261, (uint64_t)&v281, v276, (uint64_t *)v275, a3);
  }
  else
  {
    sub_100BB7134(a3);
  }
}

double sub_100BB7134@<D0>(uint64_t a1@<X8>)
{
  *(void *)&v9[0] = 0;
  uint64_t v1 = 40;
  do
  {
    uint64_t v2 = (char *)v9 + v1;
    *(_OWORD *)uint64_t v2 = xmmword_101D82650;
    *((void *)v2 + 2) = 0;
    *((void *)v2 + 3) = 0;
    *((_OWORD *)v2 + 2) = xmmword_101D1C450;
    v2[48] = 0;
    v1 += 56;
  }
  while (v2 + 56 != v11);
  memset(&v11[8], 0, 32);
  long long v3 = v9[7];
  *(_OWORD *)(a1 + 96) = v9[6];
  *(_OWORD *)(a1 + 112) = v3;
  *(_OWORD *)(a1 + 128) = v9[8];
  long long v4 = v9[3];
  *(_OWORD *)(a1 + 32) = v9[2];
  *(_OWORD *)(a1 + 48) = v4;
  long long v5 = v9[5];
  *(_OWORD *)(a1 + 64) = v9[4];
  *(_OWORD *)(a1 + 80) = v5;
  long long v6 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)&v11[22];
  *(_OWORD *)(a1 + 154) = *(_OWORD *)&v11[6];
  *(void *)&v11[40] = 0;
  *(void *)(a1 + 144) = v10;
  *(_WORD *)(a1 + 152) = 100;
  *(_OWORD *)(a1 + 170) = v7;
  double result = *(double *)&v11[32];
  *(_OWORD *)(a1 + 180) = *(_OWORD *)&v11[32];
  return result;
}

double sub_100BB7220(double *a1)
{
  double v1 = *a1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v8 = a1;
    int v7 = __cxa_guard_acquire(&qword_10241D6E0);
    a1 = v8;
    if (v7)
    {
      qword_10241D6D8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_10241D6E0);
      a1 = v8;
    }
  }
  double v2 = *(double *)&qword_10241D6D8;
  double v3 = a1[1];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241D6E0))
  {
    qword_10241D6D8 = 0x3F91DF46A2529D39;
    __cxa_guard_release(&qword_10241D6E0);
  }
  double v4 = v1 * v2;
  double cosval = __sincos_stret(v3 * *(double *)&qword_10241D6D8).__cosval;
  return __sincos_stret(v4).__cosval * cosval;
}

BOOL sub_100BB7354(double *a1, double *a2, double *a3, uint64_t a4, double *a5, uint64_t a6, double *a7, double *a8, double *a9, double *a10, double *a11, char a12)
{
  char v29 = 1;
  double v17 = 1.0 - sub_100BB87B4(a7, a5, a8, (BOOL *)&v29);
  *a11 = v17;
  if (!v29)
  {
    double v17 = -v17;
    *a11 = v17;
  }
  if (v17 <= -2.0) {
    *a11 = v17 + 4.0;
  }
  if (sub_100BB8624(a11, a1, a3)) {
    goto LABEL_6;
  }
  double v28 = *a10 - *a11;
  if (sub_100BB8624(&v28, a2, a3))
  {
    double v18 = *a10;
    goto LABEL_9;
  }
  if (a12)
  {
    char v30 = 1;
    double v20 = 1.0 - sub_100BB87B4(a7, a5, a9, (BOOL *)&v30);
    if (!v30) {
      double v20 = -v20;
    }
    double v21 = v20 + 4.0;
    if (v20 > -2.0) {
      double v21 = v20;
    }
    if (v21 == 0.0) {
      goto LABEL_6;
    }
    if ((*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v22 = fabs(v21);
      double v23 = 2.22044605e-16;
      if (v22 >= 1.0) {
        double v23 = v22 * 2.22044605e-16;
      }
      if (v22 <= v23)
      {
LABEL_6:
        *a11 = 0.0;
        return 1;
      }
    }
    double v18 = *a10;
    double v24 = *a10 - v21;
    if (v24 == 0.0) {
      goto LABEL_9;
    }
    if ((*(void *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v25 = fabs(v24);
      double v26 = 2.22044605e-16;
      if (v25 >= 1.0) {
        double v26 = v25 * 2.22044605e-16;
      }
      if (v25 <= v26)
      {
LABEL_9:
        *a11 = v18;
        return 1;
      }
    }
  }
  else
  {
    double v18 = *a10;
  }
  double v27 = *a11;
  if (v18 < 0.0) {
    double v27 = -*a11;
  }
  if (v27 < 0.0) {
    return 0;
  }
  if (v18 < 0.0) {
    double v18 = -v18;
  }
  return v27 <= v18;
}

void sub_100BB7554(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, long long *a11, long long *a12)
{
  if ((a5 & 0xFFFFFFFD) == 1) {
    int v16 = 0;
  }
  else {
    int v16 = -1;
  }
  BOOL v17 = (a4 - 4) < 0xFFFFFFFD;
  BOOL v18 = (a4 & 0xFFFFFFFD) != 1;
  BOOL v19 = (a4 & 0xFFFFFFFD) != 1 || (a4 - 4) < 0xFFFFFFFD;
  if ((a4 - 4) <= 0xFFFFFFFC) {
    BOOL v18 = 0;
  }
  if (a5 == 2) {
    int v20 = 1;
  }
  else {
    int v20 = v16;
  }
  if (a5 == 2) {
    BOOL v21 = v18;
  }
  else {
    BOOL v21 = (a4 - 4) < 0xFFFFFFFD;
  }
  unsigned int v22 = a5 - 1;
  if ((a5 & 0xFFFFFFFD) == 1) {
    int v23 = !v19;
  }
  else {
    int v23 = v21;
  }
  if ((a5 & 0xFFFFFFFD) != 1 || v22 >= 3) {
    int v25 = !v19;
  }
  else {
    int v25 = v23 + 1;
  }
  sub_100BB880C(a1, a2, a4, a5, a6, a7, a8, (uint64_t)v43, a10, a11, a12);
  memset(&v45[2], 0, 32);
  unsigned int v26 = a7 & 0xFFFFFFFD;
  BOOL v27 = (a6 - 4) < 0xFFFFFFFD;
  BOOL v28 = (a6 & 0xFFFFFFFD) != 1;
  BOOL v29 = (a6 & 0xFFFFFFFD) != 1 || (a6 - 4) < 0xFFFFFFFD;
  if ((a6 - 4) <= 0xFFFFFFFC) {
    BOOL v28 = 0;
  }
  int v30 = !v29;
  if (a7 != 2) {
    BOOL v28 = (a6 - 4) < 0xFFFFFFFD;
  }
  unsigned int v31 = a7 - 1;
  if (v26 == 1) {
    int v32 = v30;
  }
  else {
    int v32 = v28;
  }
  if (v26 == 1 && v31 < 3) {
    int v30 = v32 + 1;
  }
  BOOL v34 = v23 == 0;
  if (v22 < 3) {
    BOOL v34 = v17;
  }
  BOOL v35 = v32 == 0;
  if (v31 >= 3) {
    BOOL v27 = v35;
  }
  if (v25 == 1 && v30 == 1 && v34 && v27)
  {
    if (a3)
    {
      if (v20) {
        char v36 = 102;
      }
      else {
        char v36 = 116;
      }
    }
    else
    {
      char v36 = 97;
    }
  }
  else
  {
    char v36 = 99;
    if (v25 == 2 && v30 == 2) {
      char v36 = 101;
    }
  }
  long long v37 = v43[7];
  *(_OWORD *)(a9 + 96) = v43[6];
  *(_OWORD *)(a9 + 112) = v37;
  *(_OWORD *)(a9 + 128) = v43[8];
  long long v38 = v43[3];
  *(_OWORD *)(a9 + 32) = v43[2];
  *(_OWORD *)(a9 + 48) = v38;
  long long v39 = v43[5];
  *(_OWORD *)(a9 + 64) = v43[4];
  *(_OWORD *)(a9 + 80) = v39;
  long long v40 = v43[1];
  *(_OWORD *)a9 = v43[0];
  *(_OWORD *)(a9 + 16) = v40;
  long long v41 = *(_OWORD *)&v45[16];
  *(_OWORD *)(a9 + 154) = *(_OWORD *)v45;
  if (v26 == 1) {
    int v42 = 0;
  }
  else {
    int v42 = -1;
  }
  if (a7 == 2) {
    int v42 = 1;
  }
  *(void *)(a9 + 144) = v44;
  *(unsigned char *)(a9 + 152) = v36;
  *(unsigned char *)(a9 + 153) = a3;
  *(_OWORD *)(a9 + 170) = v41;
  *(_WORD *)(a9 + 186) = *(_WORD *)&v45[32];
  *(_DWORD *)(a9 + 188) = v20;
  *(_DWORD *)(a9 + 192) = v42;
}

uint64_t sub_100BB7768(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, uint64_t a11, _DWORD *a12, double *a13, double *a14, double *a15, double *a16, double *a17, int *a18)
{
  sub_100BB8FCC(a9, a10, (double *)&v99, (double *)&v97);
  double v24 = a5[1];
  double v23 = a5[2];
  double v25 = (*a5 * *((double *)&v99 + 1) - v24 * *(double *)&v99) * a9[2]
      + a9[1] * (v23 * *(double *)&v99 - *a5 * v100)
      + *a9 * (v24 * v100 - v23 * *((double *)&v99 + 1));
  double v26 = 1.0 - (v100 * v23 + v24 * *((double *)&v99 + 1) + *a5 * *(double *)&v99);
  if (v25 < 0.0) {
    double v26 = -v26;
  }
  if (v26 <= -2.0) {
    double v26 = v26 + 4.0;
  }
  *a16 = v26;
  *(_OWORD *)a15 = v99;
  a15[2] = v100;
  double v27 = *a16;
  __int16 v93 = a6;
  if (*a16 >= 0.0)
  {
    if (v27 <= *a13) {
      goto LABEL_19;
    }
    double v28 = v27 - *a13;
  }
  else
  {
    double v28 = -v27;
  }
  if (v28 > 0.0)
  {
    if (v27 + -2.0 <= -2.0) {
      double v29 = v27 + -2.0 + 4.0;
    }
    else {
      double v29 = v27 + -2.0;
    }
    if (v29 >= 0.0)
    {
      double v30 = 0.0;
      if (v29 > *a13) {
        double v30 = v29 - *a13;
      }
    }
    else
    {
      double v30 = -v29;
    }
    if (v30 < v28)
    {
      *a16 = v29;
      *(_OWORD *)a15 = v97;
      *((void *)a15 + 2) = v98;
      double v27 = *a16;
    }
  }
LABEL_19:
  double v31 = -*a13;
  if (*a13 >= 0.0) {
    double v31 = *a13;
  }
  double v32 = -v27;
  if (*a13 >= 0.0) {
    double v32 = v27;
  }
  BOOL v33 = v32 <= v31 && v32 >= 0.0;
  double v34 = fabs(v27);
  double v35 = vabdd_f64(*a13, v27);
  if (v35 > 0.00000001 && v34 > 0.00000001 && !v33) {
    return 0;
  }
  LOBYTE(v102[0]) = 1;
  double v37 = 1.0 - sub_100BB87B4(a10, a7, a15, (BOOL *)v102);
  *a17 = v37;
  if (!LOBYTE(v102[0]))
  {
    double v37 = -v37;
    *a17 = v37;
  }
  if (v37 <= -2.0)
  {
    double v37 = v37 + 4.0;
    *a17 = v37;
  }
  double v38 = -*a14;
  if (*a14 >= 0.0) {
    double v38 = *a14;
  }
  double v39 = -v37;
  if (*a14 >= 0.0) {
    double v39 = v37;
  }
  BOOL v40 = v39 <= v38 && v39 >= 0.0;
  double v41 = fabs(v37);
  double v42 = vabdd_f64(*a14, v37);
  if (v42 > 0.00000001 && v41 > 0.00000001 && !v40) {
    return 0;
  }
  if (v34 <= 0.00000001)
  {
    if (v41 > 0.00000001) {
      goto LABEL_88;
    }
    double v44 = *a1;
    double v101 = a1[1];
    v102[0] = v44;
    sub_10075D084(v102, &v101, 1);
    double v45 = v101;
    double v46 = v102[0];
    double v47 = *a3;
    double v101 = a3[1];
    v102[0] = v47;
    sub_10075D084(v102, &v101, 1);
    if (v46 != v102[0])
    {
      if ((*(void *)&v46 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v102[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_88;
      }
      double v48 = vabdd_f64(v46, v102[0]);
      double v49 = fabs(v46);
      double v50 = fabs(v102[0]);
      if (v49 >= v50) {
        double v50 = v49;
      }
      double v51 = v50 >= 1.0 ? v50 * 2.22044605e-16 : 2.22044605e-16;
      if (v48 > v51) {
        goto LABEL_88;
      }
    }
    if (v45 == v101) {
      goto LABEL_50;
    }
    if ((*(void *)&v45 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v101 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_88;
    }
    double v52 = vabdd_f64(v45, v101);
    double v53 = fabs(v45);
    double v54 = fabs(v101);
    if (v53 >= v54) {
      double v54 = v53;
    }
    double v55 = v54 >= 1.0 ? v54 * 2.22044605e-16 : 2.22044605e-16;
    if (v52 <= v55)
    {
LABEL_50:
      *a16 = 0.0;
      *a17 = 0.0;
    }
    else
    {
LABEL_88:
      if (v42 > 0.00000001) {
        goto LABEL_89;
      }
      double v56 = *a1;
      double v101 = a1[1];
      v102[0] = v56;
      sub_10075D084(v102, &v101, 1);
      double v57 = v101;
      double v58 = v102[0];
      double v59 = *a4;
      double v101 = a4[1];
      v102[0] = v59;
      sub_10075D084(v102, &v101, 1);
      if (v58 != v102[0])
      {
        if ((*(void *)&v58 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v102[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_89;
        }
        double v60 = vabdd_f64(v58, v102[0]);
        double v61 = fabs(v58);
        double v62 = fabs(v102[0]);
        if (v61 >= v62) {
          double v62 = v61;
        }
        double v63 = v62 >= 1.0 ? v62 * 2.22044605e-16 : 2.22044605e-16;
        if (v60 > v63) {
          goto LABEL_89;
        }
      }
      if (v57 != v101)
      {
        if ((*(void *)&v57 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v101 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_89;
        }
        double v64 = vabdd_f64(v57, v101);
        double v65 = fabs(v57);
        double v66 = fabs(v101);
        if (v65 >= v66) {
          double v66 = v65;
        }
        double v67 = v66 >= 1.0 ? v66 * 2.22044605e-16 : 2.22044605e-16;
        if (v64 > v67) {
          goto LABEL_89;
        }
      }
      *a16 = 0.0;
      *a17 = *a14;
    }
LABEL_143:
    uint64_t result = 1;
    *a18 = 1;
    return result;
  }
LABEL_89:
  if (v35 <= 0.00000001)
  {
    if (v41 > 0.00000001) {
      goto LABEL_131;
    }
    double v68 = *a2;
    double v101 = a2[1];
    v102[0] = v68;
    sub_10075D084(v102, &v101, 1);
    double v69 = v101;
    double v70 = v102[0];
    double v71 = *a3;
    double v101 = a3[1];
    v102[0] = v71;
    sub_10075D084(v102, &v101, 1);
    if (v70 != v102[0])
    {
      if ((*(void *)&v70 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v102[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_131;
      }
      double v72 = vabdd_f64(v70, v102[0]);
      double v73 = fabs(v70);
      double v74 = fabs(v102[0]);
      if (v73 >= v74) {
        double v74 = v73;
      }
      double v75 = v74 >= 1.0 ? v74 * 2.22044605e-16 : 2.22044605e-16;
      if (v72 > v75) {
        goto LABEL_131;
      }
    }
    if (v69 == v101) {
      goto LABEL_93;
    }
    if ((*(void *)&v69 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v101 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_131;
    }
    double v76 = vabdd_f64(v69, v101);
    double v77 = fabs(v69);
    double v78 = fabs(v101);
    if (v77 >= v78) {
      double v78 = v77;
    }
    double v79 = v78 >= 1.0 ? v78 * 2.22044605e-16 : 2.22044605e-16;
    if (v76 <= v79)
    {
LABEL_93:
      *a16 = *a13;
      *a17 = 0.0;
    }
    else
    {
LABEL_131:
      if (v42 > 0.00000001) {
        goto LABEL_132;
      }
      double v80 = *a2;
      double v101 = a2[1];
      v102[0] = v80;
      sub_10075D084(v102, &v101, 1);
      double v81 = v101;
      double v82 = v102[0];
      double v83 = *a4;
      double v101 = a4[1];
      v102[0] = v83;
      sub_10075D084(v102, &v101, 1);
      if (v82 != v102[0])
      {
        if ((*(void *)&v82 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v102[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_132;
        }
        double v84 = vabdd_f64(v82, v102[0]);
        double v85 = fabs(v82);
        double v86 = fabs(v102[0]);
        if (v85 >= v86) {
          double v86 = v85;
        }
        double v87 = v86 >= 1.0 ? v86 * 2.22044605e-16 : 2.22044605e-16;
        if (v84 > v87) {
          goto LABEL_132;
        }
      }
      if (v81 != v101)
      {
        if ((*(void *)&v81 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v101 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_132;
        }
        double v88 = vabdd_f64(v81, v101);
        double v89 = fabs(v81);
        double v90 = fabs(v101);
        if (v89 >= v90) {
          double v90 = v89;
        }
        double v91 = v90 >= 1.0 ? v90 * 2.22044605e-16 : 2.22044605e-16;
        if (v88 > v91) {
          goto LABEL_132;
        }
      }
      *a16 = *a13;
      *a17 = *a14;
    }
LABEL_147:
    int v92 = 2;
    goto LABEL_148;
  }
LABEL_132:
  if (v33)
  {
    if (v41 <= 0.00000001 && !a12[2])
    {
      sub_100BB85A8(a5, (uint64_t)v93, a9, a7, a16);
      *a17 = 0.0;
      int v92 = 3;
LABEL_148:
      *a18 = v92;
      return 1;
    }
    if (v42 <= 0.00000001 && !a12[3])
    {
      sub_100BB85A8(a5, (uint64_t)v93, a9, a8, a16);
      *a17 = *a14;
      int v92 = 4;
      goto LABEL_148;
    }
  }
  if (v40)
  {
    if (v34 <= 0.00000001 && !*a12)
    {
      *a16 = 0.0;
      sub_100BB85A8(a7, (uint64_t)a8, a10, a5, a17);
      goto LABEL_143;
    }
    if (v35 <= 0.00000001 && !a12[1])
    {
      *a16 = *a13;
      sub_100BB85A8(a7, (uint64_t)a8, a10, v93, a17);
      goto LABEL_147;
    }
  }
  *a18 = 0;
  return v33 & v40;
}

__n128 sub_100BB7F98@<Q0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = 40;
  do
  {
    double v9 = (char *)v23 + v8;
    *(_OWORD *)double v9 = xmmword_101D82650;
    *((void *)v9 + 2) = 0;
    *((void *)v9 + 3) = 0;
    *((_OWORD *)v9 + 2) = xmmword_101D1C450;
    v9[48] = 0;
    v8 += 56;
  }
  while (v9 + 56 != (char *)&v31);
  *(void *)&v23[0] = 1;
  sub_100BB9048(a2, (uint64_t)v23 + 8, a3, a4);
  BYTE8(v26) = 1;
  *(_OWORD *)&v24[8] = *(_OWORD *)(a2 + 24);
  *(void *)&v24[24] = *(void *)(a2 + 40);
  long long v25 = *(_OWORD *)(a2 + 48);
  *(void *)&long long v26 = *(void *)(a2 + 64);
  int v10 = *a1;
  int v11 = a1[2];
  int v12 = a1[3];
  if (!(*a1 | v11))
  {
    int v11 = -1;
    if (v12 == 1) {
      int v14 = -1;
    }
    else {
      int v14 = 1;
    }
    if (v12 == 1) {
      int v15 = 1;
    }
    else {
      int v15 = -1;
    }
    char v16 = 102;
    goto LABEL_25;
  }
  int v13 = a1[1];
  if (!(v13 | v12))
  {
    if (v11 == 1) {
      int v14 = -1;
    }
    else {
      int v14 = 1;
    }
    if (v11 == 1) {
      int v15 = 1;
    }
    else {
      int v15 = -1;
    }
    int v11 = 1;
    char v16 = 116;
    int v10 = 1;
    goto LABEL_43;
  }
  if (!(v13 | v11))
  {
    if (v12 == 1) {
      int v14 = 1;
    }
    else {
      int v14 = -1;
    }
    int v10 = -1;
    int v11 = 1;
    goto LABEL_41;
  }
  if (!(v10 | v12))
  {
    if (v11 == 1) {
      int v14 = 1;
    }
    else {
      int v14 = -1;
    }
    int v10 = 1;
    int v11 = -1;
LABEL_41:
    char v16 = 97;
    goto LABEL_42;
  }
  if (v11)
  {
    if (v10)
    {
      if (v12)
      {
        if (v13)
        {
          int v11 = -1;
          if (v12 == 1) {
            int v14 = -1;
          }
          else {
            int v14 = 1;
          }
          if (v12 == 1) {
            int v15 = 1;
          }
          else {
            int v15 = -1;
          }
          char v16 = 105;
LABEL_25:
          int v10 = -1;
          goto LABEL_43;
        }
        int v10 = 0;
        if (v12 == 1) {
          int v14 = 1;
        }
        else {
          int v14 = -1;
        }
        int v11 = 1;
      }
      else
      {
        int v11 = 0;
        if (v13 == 1) {
          int v14 = 1;
        }
        else {
          int v14 = -1;
        }
        int v10 = 1;
      }
      char v16 = 109;
LABEL_42:
      int v15 = v14;
      goto LABEL_43;
    }
    BOOL v22 = v12 == 1;
    int v11 = -1;
    if (v12 == 1) {
      int v14 = -1;
    }
    else {
      int v14 = 1;
    }
  }
  else
  {
    BOOL v22 = v12 == 1;
    int v10 = -1;
    if (v12 == 1) {
      int v14 = -1;
    }
    else {
      int v14 = 1;
    }
  }
  if (v22) {
    int v15 = a1[3];
  }
  else {
    int v15 = -1;
  }
  char v16 = 115;
LABEL_43:
  long long v17 = v28;
  *(_OWORD *)(a5 + 96) = v27;
  *(_OWORD *)(a5 + 112) = v17;
  *(_OWORD *)(a5 + 128) = v29;
  *(void *)(a5 + 144) = v30;
  long long v18 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a5 + 32) = *(_OWORD *)v24;
  *(_OWORD *)(a5 + 48) = v18;
  long long v19 = v26;
  *(_OWORD *)(a5 + 64) = v25;
  *(_OWORD *)(a5 + 80) = v19;
  long long v20 = v23[1];
  *(_OWORD *)a5 = v23[0];
  *(_OWORD *)(a5 + 16) = v20;
  *(unsigned char *)(a5 + 152) = v16;
  *(unsigned char *)(a5 + 153) = 0;
  *(_DWORD *)(a5 + 156) = v11;
  *(_DWORD *)(a5 + 160) = v10;
  *(_DWORD *)(a5 + 164) = v14;
  *(_DWORD *)(a5 + 168) = v15;
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)(a5 + 172) = *(_OWORD *)a1;
  *(_DWORD *)(a5 + 188) = v11;
  *(_DWORD *)(a5 + 192) = v10;
  return result;
}

void sub_100BB81C4(uint64_t a1, double *a2, uint64_t a3)
{
  unint64_t v5 = 0;
  double v7 = *a2;
  double v6 = a2[1];
  uint64_t v8 = *(double **)a3;
  while (1)
  {
    double v9 = *v8;
    double v10 = v8[1];
    double v25 = v6;
    double v26 = v7;
    sub_10075D084(&v26, &v25, 1);
    double v11 = v25;
    double v12 = v26;
    double v25 = v10;
    double v26 = v9;
    sub_10075D084(&v26, &v25, 1);
    if (v12 != v26)
    {
      if ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        break;
      }
      double v14 = vabdd_f64(v12, v26);
      double v15 = fabs(v12);
      double v16 = fabs(v26);
      if (v15 >= v16) {
        double v16 = v15;
      }
      double v17 = v16 >= 1.0 ? v16 * 2.22044605e-16 : 2.22044605e-16;
      if (v14 > v17) {
        break;
      }
    }
    if (v11 != v25)
    {
      if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        break;
      }
      double v19 = vabdd_f64(v11, v25);
      double v20 = fabs(v11);
      double v21 = fabs(v25);
      if (v20 >= v21) {
        double v21 = v20;
      }
      double v22 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
      if (v19 > v22) {
        break;
      }
    }
    if (v5 >= *(void *)(*(void *)a1 + 88)) {
      break;
    }
    double v23 = *(double **)a3;
    uint64_t v8 = (double *)(*(void *)a3 + 16);
    *(void *)a3 = v8;
    if (v8 == *(double **)(a3 + 16))
    {
      double v24 = *(double **)(a3 + 8);
      *(void *)a3 = v24;
      if (*(unsigned char *)(a3 + 24))
      {
        uint64_t v8 = v24 + 2;
        *(void *)a3 = v24 + 2;
        if (v23 == v24)
        {
          *(void *)a3 = v24;
          uint64_t v8 = v23;
        }
      }
      else
      {
        uint64_t v8 = v24;
      }
    }
    ++v5;
  }
}

__n128 sub_100BB8370@<Q0>(void **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = 40;
  do
  {
    unint64_t v5 = (char *)&v20 + v4;
    *(_OWORD *)unint64_t v5 = xmmword_101D82650;
    *((void *)v5 + 2) = 0;
    *((void *)v5 + 3) = 0;
    *((_OWORD *)v5 + 2) = xmmword_101D1C450;
    v5[48] = 0;
    v4 += 56;
  }
  while (v5 + 56 != v29);
  *(void *)&long long v20 = 1;
  double v6 = *a1;
  *((void *)&v20 + 1) = **a1;
  *(void *)&long long v21 = v6[1];
  unsigned __int8 explicit = atomic_load_explicit((atomic_uchar *volatile)&qword_1024730E8, memory_order_acquire);
  if (a3)
  {
    if ((explicit & 1) == 0)
    {
      uint64_t v16 = a2;
      uint64_t v18 = a4;
      int v14 = __cxa_guard_acquire(&qword_1024730E8);
      a2 = v16;
      a4 = v18;
      if (v14)
      {
        xmmword_1024730D0 = xmmword_101D82650;
        qword_1024730E0 = 0;
        __cxa_guard_release(&qword_1024730E8);
        a2 = v16;
        a4 = v18;
      }
    }
    BYTE8(v24) = 1;
    *(_OWORD *)&v22[8] = xmmword_1024730D0;
    *(void *)&v22[24] = qword_1024730E0;
    long long v23 = *(_OWORD *)a2;
    *(void *)&long long v24 = *(void *)(a2 + 16);
  }
  else
  {
    if ((explicit & 1) == 0)
    {
      uint64_t v17 = a2;
      uint64_t v19 = a4;
      int v15 = __cxa_guard_acquire(&qword_1024730E8);
      a2 = v17;
      a4 = v19;
      if (v15)
      {
        xmmword_1024730D0 = xmmword_101D82650;
        qword_1024730E0 = 0;
        __cxa_guard_release(&qword_1024730E8);
        a2 = v17;
        a4 = v19;
      }
    }
    BYTE8(v24) = 1;
    *(_OWORD *)&v22[8] = *(_OWORD *)a2;
    *(void *)&v22[24] = *(void *)(a2 + 16);
    long long v23 = xmmword_1024730D0;
    *(void *)&long long v24 = qword_1024730E0;
  }
  memset(&v29[8], 0, 32);
  long long v8 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v8;
  *(_OWORD *)(a4 + 128) = v27;
  long long v9 = *(_OWORD *)&v22[16];
  *(_OWORD *)(a4 + 32) = *(_OWORD *)v22;
  *(_OWORD *)(a4 + 48) = v9;
  long long v10 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v10;
  long long v11 = v21;
  *(_OWORD *)a4 = v20;
  *(_OWORD *)(a4 + 16) = v11;
  long long v12 = *(_OWORD *)&v29[22];
  *(_OWORD *)(a4 + 154) = *(_OWORD *)&v29[6];
  *(void *)&v29[40] = 0;
  *(void *)(a4 + 144) = v28;
  *(_WORD *)(a4 + 152) = 48;
  *(_OWORD *)(a4 + 170) = v12;
  __n128 result = *(__n128 *)&v29[32];
  *(_OWORD *)(a4 + 180) = *(_OWORD *)&v29[32];
  return result;
}

double sub_100BB85A8(double *a1, uint64_t a2, double *a3, double *a4, double *a5)
{
  char v7 = 1;
  double result = 1.0 - sub_100BB87B4(a3, a1, a4, (BOOL *)&v7);
  *a5 = result;
  if (!v7)
  {
    double result = -result;
    *a5 = result;
  }
  if (result <= -2.0)
  {
    double result = result + 4.0;
    *a5 = result;
  }
  return result;
}

BOOL sub_100BB8624(double *a1, double *a2, double *a3)
{
  double v3 = *a1;
  double v4 = fabs(*a1);
  if (v4 > 0.00000001) {
    return 0;
  }
  if (v3 == 0.0) {
    return 1;
  }
  if ((*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v7 = 2.22044605e-16;
    if (v4 >= 1.0) {
      double v7 = v4 * 2.22044605e-16;
    }
    if (v4 <= v7) {
      return 1;
    }
  }
  double v8 = *a2;
  double v20 = a2[1];
  double v21 = v8;
  sub_10075D084(&v21, &v20, 1);
  double v9 = v20;
  double v10 = v21;
  double v11 = *a3;
  double v20 = a3[1];
  double v21 = v11;
  sub_10075D084(&v21, &v20, 1);
  if (v10 != v21)
  {
    if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      return 0;
    }
    double v16 = vabdd_f64(v10, v21);
    double v17 = fabs(v10);
    double v18 = fabs(v21);
    if (v17 >= v18) {
      double v18 = v17;
    }
    double v19 = v18 >= 1.0 ? v18 * 2.22044605e-16 : 2.22044605e-16;
    if (v16 > v19) {
      return 0;
    }
  }
  if (v9 == v20) {
    return 1;
  }
  if ((*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return 0;
  }
  double v12 = vabdd_f64(v9, v20);
  double v13 = fabs(v9);
  double v14 = fabs(v20);
  if (v13 >= v14) {
    double v14 = v13;
  }
  double v15 = v14 >= 1.0 ? v14 * 2.22044605e-16 : 2.22044605e-16;
  return v12 <= v15;
}

double sub_100BB87B4(double *a1, double *a2, double *a3, BOOL *a4)
{
  double v5 = a3[1];
  double v4 = a3[2];
  double v7 = a2[1];
  double v6 = a2[2];
  double v8 = *a3;
  double v9 = *a2;
  *a4 = (*a2 * v5 - v7 * *a3) * a1[2] + a1[1] * (v6 * *a3 - *a2 * v4) + *a1 * (v7 * v4 - v6 * v5) >= 0.0;
  return v4 * v6 + v7 * v5 + v9 * v8;
}

void sub_100BB880C(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W3>, int a4@<W4>, int a5@<W5>, int a6@<W6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, long long *a10, long long *a11)
{
  double v12 = a10;
  double v11 = a11;
  uint64_t v13 = a9;
  *(void *)a8 = 0;
  double v14 = (long long *)(a8 + 40);
  uint64_t v15 = 40;
  long long v16 = xmmword_101D82650;
  do
  {
    uint64_t v17 = a8 + v15;
    *(_OWORD *)uint64_t v17 = xmmword_101D82650;
    *(void *)(v17 + 16) = 0;
    *(void *)(v17 + 24) = 0;
    *(_OWORD *)(v17 + 32) = xmmword_101D1C450;
    *(unsigned char *)(v17 + 48) = 0;
    v15 += 56;
  }
  while (v17 + 56 != a8 + 152);
  double v133 = 0.0;
  double v134 = 0.0;
  long long v135 = xmmword_101D1C450;
  long long v132 = xmmword_101D82650;
  if ((a3 - 1) > 2)
  {
    unsigned int v20 = 0;
  }
  else
  {
    double v18 = *(void **)a1;
    *(void *)(a8 + 8) = **(void **)a1;
    *(void *)(a8 + 16) = v18[1];
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024730E8, memory_order_acquire) & 1) == 0)
    {
      uint64_t v86 = a1;
      double v115 = (long long *)(a8 + 40);
      uint64_t v121 = a8;
      uint64_t v103 = a2;
      int v109 = a6;
      int v83 = a4;
      int v94 = a5;
      uint64_t v79 = a7;
      int v62 = __cxa_guard_acquire(&qword_1024730E8);
      long long v16 = xmmword_101D82650;
      uint64_t v13 = a9;
      a2 = v103;
      a8 = v121;
      double v11 = a11;
      double v14 = v115;
      a7 = v79;
      a5 = v94;
      a4 = v83;
      a6 = v109;
      int v63 = v62;
      a1 = v86;
      double v12 = a10;
      if (v63)
      {
        xmmword_1024730D0 = xmmword_101D82650;
        qword_1024730E0 = 0;
        __cxa_guard_release(&qword_1024730E8);
        long long v16 = xmmword_101D82650;
        a1 = v86;
        double v12 = a10;
        uint64_t v13 = a9;
        a2 = v103;
        a8 = v121;
        double v11 = a11;
        double v14 = v115;
        a7 = v79;
        a5 = v94;
        a4 = v83;
        a6 = v109;
      }
    }
    uint64_t v19 = qword_1024730E0;
    *(unsigned char *)(a8 + 88) = 1;
    *(_OWORD *)(a8 + 40) = xmmword_1024730D0;
    *(void *)(a8 + 56) = v19;
    *(_OWORD *)(a8 + 64) = *(_OWORD *)a7;
    *(void *)(a8 + 80) = *(void *)(a7 + 16);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024730E8, memory_order_acquire) & 1) == 0)
    {
      uint64_t v87 = a1;
      double v90 = v12;
      double v116 = v14;
      uint64_t v122 = a8;
      uint64_t v100 = v13;
      uint64_t v104 = a2;
      int v110 = a6;
      int v84 = a4;
      int v95 = a5;
      double v127 = v11;
      long long v81 = v16;
      int v64 = __cxa_guard_acquire(&qword_1024730E8);
      long long v16 = v81;
      uint64_t v13 = v100;
      a2 = v104;
      a8 = v122;
      double v11 = v127;
      double v14 = v116;
      a5 = v95;
      a4 = v84;
      a6 = v110;
      int v65 = v64;
      a1 = v87;
      double v12 = v90;
      if (v65)
      {
        xmmword_1024730D0 = v81;
        qword_1024730E0 = 0;
        __cxa_guard_release(&qword_1024730E8);
        long long v16 = v81;
        a1 = v87;
        double v12 = v90;
        uint64_t v13 = v100;
        a2 = v104;
        a8 = v122;
        double v11 = v127;
        double v14 = v116;
        a5 = v95;
        a4 = v84;
        a6 = v110;
      }
    }
    long long v132 = xmmword_1024730D0;
    double v133 = *(double *)&qword_1024730E0;
    unsigned int v20 = 1;
  }
  if (a5 == 2)
  {
    unsigned int v21 = v20;
    uint64_t v22 = a8 + 16 * v20;
    long long v23 = *(void **)a2;
    *(void *)(v22 + 8) = **(void **)a2;
    *(void *)(v22 + 16) = v23[1];
    uint64_t v24 = a8 + 56 * v20 + 40;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024730E8, memory_order_acquire) & 1) == 0)
    {
      uint64_t v88 = a1;
      double v91 = v12;
      uint64_t v117 = v14;
      uint64_t v123 = a8;
      uint64_t v101 = v13;
      uint64_t v105 = a2;
      int v111 = a6;
      int v85 = a4;
      unsigned int v96 = v20;
      double v128 = v11;
      unsigned int v78 = v20;
      uint64_t v80 = a8 + 56 * v20 + 40;
      long long v82 = v16;
      int v66 = __cxa_guard_acquire(&qword_1024730E8);
      unsigned int v21 = v78;
      uint64_t v24 = v80;
      uint64_t v13 = v101;
      a2 = v105;
      a8 = v123;
      double v11 = v128;
      unsigned int v20 = v96;
      double v14 = v117;
      a4 = v85;
      a6 = v111;
      int v67 = v66;
      a1 = v88;
      double v12 = v91;
      if (v67)
      {
        xmmword_1024730D0 = v82;
        qword_1024730E0 = 0;
        __cxa_guard_release(&qword_1024730E8);
        unsigned int v21 = v78;
        uint64_t v24 = v80;
        a1 = v88;
        double v12 = v91;
        uint64_t v13 = v101;
        a2 = v105;
        a8 = v123;
        double v11 = v128;
        unsigned int v20 = v96;
        double v14 = v117;
        a4 = v85;
        a6 = v111;
      }
    }
    uint64_t v25 = qword_1024730E0;
    uint64_t v26 = a8 + 56 * v21;
    *(unsigned char *)(v26 + 88) = 1;
    long long v27 = xmmword_1024730D0;
    long long v28 = *v12;
    *(_OWORD *)uint64_t v24 = *v12;
    uint64_t v29 = *((void *)v12 + 2);
    *(void *)(v24 + 16) = v29;
    *(_OWORD *)(v26 + 64) = v27;
    *(void *)(v26 + 80) = v25;
    uint64_t v30 = (char *)&v132 + 24 * v21;
    *(_OWORD *)uint64_t v30 = v28;
    *((void *)v30 + 2) = v29;
    ++v20;
  }
  if ((a4 - 1) <= 2 && v20 <= 1)
  {
    unsigned int v31 = v20;
    uint64_t v32 = a8 + 16 * v20;
    BOOL v33 = *(void **)(a1 + 8);
    *(void *)(v32 + 8) = *v33;
    *(void *)(v32 + 16) = v33[1];
    uint64_t v34 = a8 + 56 * v20 + 40;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102473108, memory_order_acquire) & 1) == 0)
    {
      int64x2_t v118 = v14;
      uint64_t v124 = a8;
      uint64_t v102 = v13;
      uint64_t v106 = a2;
      int v112 = a6;
      unsigned int v97 = v20;
      double v129 = v11;
      uint64_t v89 = a8 + 56 * v20 + 40;
      unsigned int v92 = v20;
      int v68 = __cxa_guard_acquire(&qword_102473108);
      uint64_t v34 = v89;
      unsigned int v31 = v92;
      uint64_t v13 = v102;
      a2 = v106;
      a8 = v124;
      double v11 = v129;
      unsigned int v20 = v97;
      double v14 = v118;
      a6 = v112;
      if (v68)
      {
        __asm { FMOV            V0.2D, #1.0 }
        xmmword_1024730F0 = _Q0;
        qword_102473100 = 0x412E848000000000;
        __cxa_guard_release(&qword_102473108);
        uint64_t v34 = v89;
        unsigned int v31 = v92;
        uint64_t v13 = v102;
        a2 = v106;
        a8 = v124;
        double v11 = v129;
        unsigned int v20 = v97;
        double v14 = v118;
        a6 = v112;
      }
    }
    uint64_t v35 = qword_102473100;
    uint64_t v36 = a8 + 56 * v31;
    *(unsigned char *)(v36 + 88) = 1;
    *(_OWORD *)uint64_t v34 = xmmword_1024730F0;
    *(void *)(v34 + 16) = v35;
    *(_OWORD *)(v36 + 64) = *(_OWORD *)v13;
    *(void *)(v36 + 80) = *(void *)(v13 + 16);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102473108, memory_order_acquire) & 1) == 0)
    {
      long long v119 = v14;
      uint64_t v125 = a8;
      uint64_t v107 = a2;
      int v113 = a6;
      unsigned int v98 = v20;
      uint64_t v130 = v11;
      unsigned int v93 = v31;
      int v74 = __cxa_guard_acquire(&qword_102473108);
      unsigned int v31 = v93;
      a8 = v125;
      double v11 = v130;
      unsigned int v20 = v98;
      double v14 = v119;
      a6 = v113;
      a2 = v107;
      if (v74)
      {
        __asm { FMOV            V0.2D, #1.0 }
        xmmword_1024730F0 = _Q0;
        qword_102473100 = 0x412E848000000000;
        __cxa_guard_release(&qword_102473108);
        unsigned int v31 = v93;
        a8 = v125;
        double v11 = v130;
        unsigned int v20 = v98;
        double v14 = v119;
        a6 = v113;
        a2 = v107;
      }
    }
    uint64_t v37 = qword_102473100;
    double v38 = (char *)&v132 + 24 * v31;
    *(_OWORD *)double v38 = xmmword_1024730F0;
    *((void *)v38 + 2) = v37;
    ++v20;
  }
  if (a6 == 2 && v20 <= 1)
  {
    unsigned int v39 = v20;
    uint64_t v40 = a8 + 16 * v20;
    double v41 = *(void **)(a2 + 8);
    *(void *)(v40 + 8) = *v41;
    *(void *)(v40 + 16) = v41[1];
    uint64_t v42 = a8 + 56 * v20 + 40;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102473108, memory_order_acquire) & 1) == 0)
    {
      long long v120 = v14;
      uint64_t v126 = a8;
      unsigned int v99 = v20;
      float v131 = v11;
      uint64_t v108 = a8 + 56 * v20 + 40;
      unsigned int v114 = v20;
      int v76 = __cxa_guard_acquire(&qword_102473108);
      uint64_t v42 = v108;
      unsigned int v39 = v114;
      a8 = v126;
      double v11 = v131;
      unsigned int v20 = v99;
      double v14 = v120;
      if (v76)
      {
        __asm { FMOV            V0.2D, #1.0 }
        xmmword_1024730F0 = _Q0;
        qword_102473100 = 0x412E848000000000;
        __cxa_guard_release(&qword_102473108);
        uint64_t v42 = v108;
        unsigned int v39 = v114;
        a8 = v126;
        double v11 = v131;
        unsigned int v20 = v99;
        double v14 = v120;
      }
    }
    uint64_t v43 = qword_102473100;
    uint64_t v44 = a8 + 56 * v39;
    *(unsigned char *)(v44 + 88) = 1;
    long long v45 = xmmword_1024730F0;
    long long v46 = *v11;
    *(_OWORD *)uint64_t v42 = *v11;
    uint64_t v47 = *((void *)v11 + 2);
    *(void *)(v42 + 16) = v47;
    *(_OWORD *)(v44 + 64) = v45;
    *(void *)(v44 + 80) = v43;
    double v48 = (char *)&v132 + 24 * v39;
    *(_OWORD *)double v48 = v46;
    *((void *)v48 + 2) = v47;
    ++v20;
  }
  if (v20 == 2)
  {
    if (vabdd_f64(*((double *)&v135 + 1), v133) >= 50.0)
    {
      if (*((double *)&v135 + 1) >= v133) {
        goto LABEL_39;
      }
      goto LABEL_38;
    }
    if (*(double *)&v135 == 0.0) {
      sub_101A81058();
    }
    if (*((double *)&v132 + 1) == 0.0) {
      sub_101A81084();
    }
    double v49 = v134 / *(double *)&v135;
    double v50 = *(double *)&v132 / *((double *)&v132 + 1);
    if (v134 / *(double *)&v135 != *(double *)&v132 / *((double *)&v132 + 1))
    {
      if (COERCE_UNSIGNED_INT64(fabs(v134 / *(double *)&v135)) > 0x7FEFFFFFFFFFFFFFLL
        || COERCE_UNSIGNED_INT64(fabs(*(double *)&v132 / *((double *)&v132 + 1))) > 0x7FEFFFFFFFFFFFFFLL)
      {
        BOOL v55 = 1;
      }
      else
      {
        double v51 = vabdd_f64(v49, v50);
        double v52 = fabs(v49);
        double v53 = fabs(v50);
        if (v52 < v53) {
          double v52 = v53;
        }
        double v54 = v52 >= 1.0 ? v52 * 2.22044605e-16 : 2.22044605e-16;
        BOOL v55 = v51 > v54;
      }
      if (v49 < v50 && v55)
      {
LABEL_38:
        uint64_t v56 = *((void *)v14 + 6);
        long long v58 = v14[1];
        long long v57 = v14[2];
        long long v59 = *v14;
        long long v60 = *(_OWORD *)(a8 + 112);
        *double v14 = *(_OWORD *)(a8 + 96);
        v14[1] = v60;
        _OWORD v14[2] = *(_OWORD *)(a8 + 128);
        *((unsigned char *)v14 + 48) = *(unsigned char *)(a8 + 144);
        *(_OWORD *)(a8 + 96) = v59;
        *(_OWORD *)(a8 + 112) = v58;
        *(_OWORD *)(a8 + 128) = v57;
        *(unsigned char *)(a8 + 144) = v56;
        long long v61 = *(_OWORD *)(a8 + 8);
        *(_OWORD *)(a8 + 8) = *(_OWORD *)(a8 + 24);
        *(_OWORD *)(a8 + 24) = v61;
      }
    }
  }
LABEL_39:
  *(void *)a8 = v20;
}

uint64_t sub_100BB8FCC(double *a1, double *a2, double *a3, double *a4)
{
  double v5 = a2[1];
  double v4 = a2[2];
  double v7 = a1[1];
  double v6 = a1[2];
  double v8 = v7 * v4 - v6 * v5;
  double v9 = v6 * *a2 - *a1 * v4;
  double v10 = *a1 * v5 - v7 * *a2;
  a3[1] = v9;
  a3[2] = v10;
  double v11 = sqrt(v10 * v10 + v9 * v9 + v8 * v8);
  *a3 = v8 / v11;
  *a4 = -(v8 / v11);
  double v12 = a3[1] / v11;
  a3[1] = v12;
  a4[1] = -v12;
  double v13 = a3[2] / v11;
  a3[2] = v13;
  a4[2] = -v13;
  return 1;
}

double sub_100BB9048(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  switch(*(_DWORD *)(a1 + 72))
  {
    case 0:
      double result = sub_100BB90DC((void *)a1);
      *(double *)a2 = result;
      *(void *)(a2 + 8) = v6;
      return result;
    case 1:
      uint64_t v7 = *a3;
      goto LABEL_7;
    case 2:
      uint64_t v7 = a3[1];
      goto LABEL_7;
    case 3:
      uint64_t v7 = *a4;
      goto LABEL_7;
    default:
      uint64_t v7 = a4[1];
LABEL_7:
      *(void *)a2 = *(void *)v7;
      double result = *(double *)(v7 + 8);
      *(double *)(a2 + 8) = result;
      return result;
  }
}

double sub_100BB90DC(void *a1)
{
  long double v2 = *(double *)a1;
  long double v1 = *((double *)a1 + 1);
  long double v3 = *((double *)a1 + 2);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024730C8, memory_order_acquire) & 1) == 0)
  {
    double v11 = v2;
    double v7 = v1;
    int v8 = __cxa_guard_acquire(&qword_1024730C8);
    long double v1 = v7;
    long double v2 = v11;
    if (v8)
    {
      qword_1024730C0 = 0x404CA5DC1A63C1F8;
      __cxa_guard_release(&qword_1024730C8);
      long double v1 = v7;
      long double v2 = v11;
    }
  }
  double v4 = *(double *)&qword_1024730C0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024730C8, memory_order_acquire) & 1) == 0)
  {
    double v10 = v1;
    double v12 = v2;
    int v9 = __cxa_guard_acquire(&qword_1024730C8);
    long double v1 = v10;
    long double v2 = v12;
    if (v9)
    {
      qword_1024730C0 = 0x404CA5DC1A63C1F8;
      __cxa_guard_release(&qword_1024730C8);
      long double v1 = v10;
      long double v2 = v12;
    }
  }
  long double v5 = v4 * atan2(v1, v2);
  double v13 = asin(v3) * *(double *)&qword_1024730C0;
  double v14 = v5;
  sub_10075D084(&v14, &v13, 1);
  return v14;
}

uint64_t sub_100BB9200(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  long double v3 = *(double **)(v2 + 24);
  if (!*(unsigned char *)(v2 + 80))
  {
    sub_100BB81C4(*(void *)(a1 + 8), *(double **)(v2 + 24), v2 + 32);
    *(_OWORD *)(v2 + 64) = *(_OWORD *)*(void *)(v2 + 32);
    *(unsigned char *)(v2 + 80) = 1;
  }
  double v4 = *(double **)(*(void *)(a1 + 16) + 24);

  return sub_10075DD40(v3, (double *)(v2 + 64), v4);
}

__n128 sub_100BB927C(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 20 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100BB935C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x14)) + 200 * (v7 % 0x14);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  long long v9 = *(_OWORD *)(a2 + 16);
  long long v10 = *(_OWORD *)(a2 + 32);
  long long v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 64) = v11;
  *(_OWORD *)(v8 + 16) = v9;
  *(_OWORD *)(v8 + 32) = v10;
  long long v12 = *(_OWORD *)(a2 + 80);
  long long v13 = *(_OWORD *)(a2 + 96);
  long long v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v8 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v8 + 128) = v14;
  *(_OWORD *)(v8 + 80) = v12;
  *(_OWORD *)(v8 + 96) = v13;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v16 = *(_OWORD *)(a2 + 160);
  long long v17 = *(_OWORD *)(a2 + 176);
  *(void *)(v8 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(v8 + 160) = v16;
  *(_OWORD *)(v8 + 176) = v17;
  *(__n128 *)(v8 + 144) = result;
  ++a1[5];
  return result;
}

void sub_100BB935C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x14;
  unint64_t v4 = v2 - 20;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFA0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFA0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFA0uLL);
  sub_1000DA434(&v54, &v53);
  long long v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100BB9628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_100BB9674(uint64_t a1, uint64_t a2, long long *a3, void **a4, uint64_t a5, uint64_t a6, void (*a7)(long long *))
{
  long long v11 = a3[11];
  *(_OWORD *)uint64_t v42 = a3[10];
  *(_OWORD *)&v42[16] = v11;
  uint64_t v43 = *((void *)a3 + 24);
  long long v12 = a3[7];
  *(_OWORD *)&v38[16] = a3[6];
  long long v39 = v12;
  long long v13 = a3[9];
  long long v40 = a3[8];
  long long v41 = v13;
  long long v14 = a3[3];
  long long v35 = a3[2];
  long long v36 = v14;
  long long v15 = a3[5];
  long long v37 = a3[4];
  *(_OWORD *)double v38 = v15;
  long long v16 = a3[1];
  long long v33 = *a3;
  long long v34 = v16;
  int v17 = *(_DWORD *)(a5 + 256);
  if (*(_DWORD *)(a5 + 252) != 1) {
    goto LABEL_12;
  }
  uint64_t v18 = *(void *)(a6 + 8);
  uint64_t v19 = *(double **)(v18 + 16);
  int64_t v20 = *(double **)(v18 + 24);
  if (!*(unsigned char *)(v18 + 80))
  {
    sub_100BB81C4(*(void *)(a6 + 8), *(double **)(v18 + 24), v18 + 32);
    *(_OWORD *)(v18 + 64) = *(_OWORD *)*(void *)(v18 + 32);
    *(unsigned char *)(v18 + 80) = 1;
  }
  int v21 = sub_10075DD40(v19, v20, (double *)(v18 + 64));
  switch(v21)
  {
    case 1:
      int v22 = 2;
      break;
    case 0:
      goto LABEL_12;
    case -1:
      int v22 = 1;
      break;
    default:
      goto LABEL_10;
  }
  DWORD2(v35) = v22;
LABEL_10:
  DWORD2(v39) = 3;
  LODWORD(v34) = 5;
  if (*(void *)(a5 + 64) <= 1uLL) {
    sub_101A8102C();
  }
  long long v33 = *(_OWORD *)(a5 + 88);
  *(_OWORD *)&v38[8] = *(_OWORD *)(a5 + 160);
  uint64_t v23 = *(void *)(a5 + 176);
  *(_OWORD *)&v42[8] = *(_OWORD *)(a5 + 184);
  uint64_t v24 = *(void *)(a5 + 200);
  *(void *)&v38[24] = v23;
  *(void *)&v42[24] = v24;
  a7(&v33);
  *(void *)&long long v16 = sub_100BB927C(*a4, (uint64_t)&v33).n128_u64[0];
LABEL_12:
  if (v17 != 1) {
    return *(double *)&v16;
  }
  uint64_t v25 = *(void *)(a6 + 16);
  uint64_t v26 = *(double **)(v25 + 16);
  long long v27 = *(double **)(v25 + 24);
  if (!*(unsigned char *)(v25 + 80))
  {
    sub_100BB81C4(v25, *(double **)(v25 + 24), v25 + 32);
    *(_OWORD *)(v25 + 64) = *(_OWORD *)*(void *)(v25 + 32);
    *(unsigned char *)(v25 + 80) = 1;
  }
  int v28 = sub_10075DD40(v26, v27, (double *)(v25 + 64));
  switch(v28)
  {
    case 1:
      int v29 = 2;
      break;
    case 0:
      return *(double *)&v16;
    case -1:
      int v29 = 1;
      break;
    default:
      goto LABEL_21;
  }
  DWORD2(v39) = v29;
LABEL_21:
  DWORD2(v35) = 3;
  LODWORD(v34) = 5;
  if (!*(void *)(a5 + 64)) {
    sub_101A8102C();
  }
  long long v33 = *(_OWORD *)(a5 + 72);
  *(_OWORD *)&v38[8] = *(_OWORD *)(a5 + 104);
  uint64_t v30 = *(void *)(a5 + 120);
  *(_OWORD *)&v42[8] = *(_OWORD *)(a5 + 128);
  uint64_t v31 = *(void *)(a5 + 144);
  *(void *)&v38[24] = v30;
  *(void *)&v42[24] = v31;
  a7(&v33);
  *(void *)&long long v16 = sub_100BB927C(*a4, (uint64_t)&v33).n128_u64[0];
  return *(double *)&v16;
}

void *sub_100BB98A0(void *result, uint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = (void *)*result;
    unint64_t v3 = a2 - 0x70A3D70A3D70A3D7 * ((uint64_t)(result[1] - *(void *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 19 - v3;
      uint64_t v6 = &v2[-(v5 / 0x14)];
      *__n128 result = v6;
      unint64_t v4 = *v6 + 200 * (20 * (v5 / 0x14) - v5) + 3800;
    }
    else
    {
      *__n128 result = &v2[v3 / 0x14];
      unint64_t v4 = v2[v3 / 0x14] + 200 * (v3 % 0x14);
    }
    result[1] = v4;
  }
  return result;
}

void *sub_100BB9944(void *a1, void *a2)
{
  uint64_t v2 = a2[1];
  if (a2[2] == v2
    || (unint64_t v3 = a2[4],
        uint64_t v4 = *(void *)(v2 + 8 * (v3 / 0x14)),
        unint64_t v5 = v3 % 0x14,
        uint64_t v6 = v4 + 200 * (v3 % 0x14),
        v6 == *(void *)(v2 + 8 * ((a2[5] + v3) / 0x14)) + 200 * ((a2[5] + v3) % 0x14)))
  {
    sub_101A80D6C();
  }
  unint64_t v8 = sub_100132EFC(a1, (uint64_t)". A self-intersection point was found at ", 41);
  sub_100134750(v48, ", ");
  sub_100134750(v46, "(");
  sub_100134750(v44, ")");
  sub_100134750(v42, ", ");
  sub_100134750(v40, "(");
  sub_100134750(v38, ")");
  sub_100134750(v36, ", ");
  sub_100BAD890(v6, (long long *)v48, (long long *)v46, (long long *)v44, (long long *)v42, (long long *)v40, (long long *)v38, (long long *)v36, (uint64_t)&v50);
  uint64_t v9 = v50;
  if ((v54 & 0x80u) == 0) {
    uint64_t v10 = v53;
  }
  else {
    uint64_t v10 = (void **)v53[0];
  }
  if ((v54 & 0x80u) == 0) {
    uint64_t v11 = v54;
  }
  else {
    uint64_t v11 = (uint64_t)v53[1];
  }
  sub_100132EFC(v8, (uint64_t)v10, v11);
  sub_100BAD958(v8, v9, (uint64_t)&v51);
  if ((v56 & 0x80u) == 0) {
    long long v12 = v55;
  }
  else {
    long long v12 = (void **)v55[0];
  }
  if ((v56 & 0x80u) == 0) {
    uint64_t v13 = v56;
  }
  else {
    uint64_t v13 = (uint64_t)v55[1];
  }
  sub_100132EFC(v8, (uint64_t)v12, v13);
  std::ostream::flush();
  if (v64 < 0) {
    operator delete(__p);
  }
  if (v62 < 0) {
    operator delete(v61);
  }
  if (v60 < 0) {
    operator delete(v59);
  }
  if (v58 < 0) {
    operator delete(v57);
  }
  if ((char)v56 < 0) {
    operator delete(v55[0]);
  }
  if ((char)v54 < 0) {
    operator delete(v53[0]);
  }
  if (v52 < 0) {
    operator delete(v51);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  if (v49 < 0) {
    operator delete(v48[0]);
  }
  long long v14 = sub_100132EFC(a1, (uint64_t)"; method: ", 10);
  uint64_t v15 = *(int *)(v4 + 200 * v5 + 16);
  char v16 = 63;
  if (v15 <= 8) {
    char v16 = aDitmces[v15];
  }
  LOBYTE(v50) = v16;
  int v17 = sub_100132EFC(v14, (uint64_t)&v50, 1);
  uint64_t v18 = sub_100132EFC(v17, (uint64_t)"; operations: ", 14);
  uint64_t v19 = v4 + 200 * v5;
  unint64_t v20 = *(unsigned int *)(v19 + 40);
  if (v20 >= 6) {
    char v21 = 63;
  }
  else {
    char v21 = 0x6F637869752DuLL >> (8 * v20);
  }
  LOBYTE(v50) = v21;
  int v22 = sub_100132EFC(v18, (uint64_t)&v50, 1);
  uint64_t v23 = sub_100132EFC(v22, (uint64_t)"/", 1);
  unint64_t v24 = *(unsigned int *)(v19 + 120);
  if (v24 >= 6) {
    char v25 = 63;
  }
  else {
    char v25 = 0x6F637869752DuLL >> (8 * v24);
  }
  LOBYTE(v50) = v25;
  uint64_t v26 = sub_100132EFC(v23, (uint64_t)&v50, 1);
  sub_100132EFC(v26, (uint64_t)"; segment IDs {source, multi, ring, segment}: ", 46);
  sub_100132EFC(a1, (uint64_t)"{", 1);
  long long v27 = (void *)std::ostream::operator<<();
  sub_100132EFC(v27, (uint64_t)", ", 2);
  int v28 = (void *)std::ostream::operator<<();
  sub_100132EFC(v28, (uint64_t)", ", 2);
  int v29 = (void *)std::ostream::operator<<();
  sub_100132EFC(v29, (uint64_t)", ", 2);
  uint64_t v30 = (void *)std::ostream::operator<<();
  sub_100132EFC(v30, (uint64_t)"}", 1);
  sub_100132EFC(a1, (uint64_t)"/", 1);
  sub_100132EFC(a1, (uint64_t)"{", 1);
  uint64_t v31 = (void *)std::ostream::operator<<();
  sub_100132EFC(v31, (uint64_t)", ", 2);
  long long v32 = (void *)std::ostream::operator<<();
  sub_100132EFC(v32, (uint64_t)", ", 2);
  long long v33 = (void *)std::ostream::operator<<();
  sub_100132EFC(v33, (uint64_t)", ", 2);
  long long v34 = (void *)std::ostream::operator<<();
  return sub_100132EFC(v34, (uint64_t)"}", 1);
}

void sub_100BB9DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100BB9E70(uint64_t a1, uint64_t a2, double **a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, std::string **a8, uint64_t a9)
{
  uint64_t v10 = a5;
  v69[0] = 0;
  v69[1] = 0;
  uint64_t v13 = v69;
  int v68 = (uint64_t *)v69;
  if (a5 != a7)
  {
    uint64_t v14 = a5;
    uint64_t v15 = a4;
    while (1)
    {
      char v16 = (uint64_t *)(v14 + 144);
      uint64_t v17 = *(void *)(v14 + 144);
      if (*(void *)(v14 + 64) == -1) {
        break;
      }
      if (v17 == -1)
      {
        char v16 = (uint64_t *)(v14 + 64);
LABEL_7:
        sub_100611BF4(&v68, v16, v16);
      }
      v14 += 200;
      if (v14 - *v15 == 4000)
      {
        uint64_t v18 = v15[1];
        ++v15;
        uint64_t v14 = v18;
      }
      if (v14 == a7) {
        goto LABEL_11;
      }
    }
    if (v17 == -1) {
      __assert_rtn("are_holes_inside", "polygon.hpp", 284, "tit->operations[1].seg_id.ring_index != -1");
    }
    goto LABEL_7;
  }
LABEL_11:
  if (a1 != a2)
  {
    uint64_t v19 = 0;
    uint64_t v20 = a1;
    uint64_t v59 = a2;
    do
    {
      char v21 = v69[0];
      if (!v69[0]) {
        goto LABEL_22;
      }
      int v22 = v13;
      do
      {
        uint64_t v23 = v21;
        unint64_t v24 = v22;
        uint64_t v25 = v21[4];
        uint64_t v26 = v21 + 1;
        if (v25 >= v19)
        {
          uint64_t v26 = v23;
          int v22 = (void **)v23;
        }
        char v21 = (void *)*v26;
      }
      while (v21);
      if (v22 == v13) {
        goto LABEL_22;
      }
      if (v25 < v19) {
        uint64_t v23 = v24;
      }
      if (v19 < v23[4])
      {
LABEL_22:
        long long v27 = *(double **)v20;
        if (*(void *)v20 == *(void *)(v20 + 8)) {
          __assert_rtn("front", "range.hpp", 121, "!boost::empty(rng)");
        }
        int v28 = v13;
        uint64_t v30 = *a3;
        int v29 = a3[1];
        if ((unint64_t)((char *)v29 - (char *)*a3) < 0x40
          || (LOBYTE(__p) = 0, long long v63 = 0uLL, LOBYTE(v64) = 0, v30 + 2 == v29))
        {
LABEL_76:
          sub_100BAC5C8(a8, 30);
          BOOL v54 = 0;
          goto LABEL_77;
        }
        do
        {
          BOOL v31 = sub_10075D9A4((uint64_t)&__p, v27, v30, v30 + 2, (uint64_t)&v63);
          BOOL v32 = v30 + 4 != v29 && v31;
          v30 += 2;
        }
        while (v32);
        a2 = v59;
        if (!(_BYTE)v64)
        {
          if (DWORD2(v63) && HIDWORD(v63) && SDWORD2(v63) >= 1)
          {
            if (!(v63 + DWORD1(v63))) {
              goto LABEL_76;
            }
          }
          else if (!v63)
          {
            goto LABEL_76;
          }
        }
        uint64_t v13 = v28;
      }
      v20 += 24;
      ++v19;
    }
    while (v20 != a2);
  }
  long long v33 = a4;
  while (v10 != a7)
  {
    sub_100611BF4(&v68, (uint64_t *)(v10 + 64), (uint64_t *)(v10 + 64));
    sub_100611BF4(&v68, (uint64_t *)(v10 + 144), (uint64_t *)(v10 + 144));
    v10 += 200;
    if (v10 - *v33 == 4000)
    {
      uint64_t v34 = v33[1];
      ++v33;
      uint64_t v10 = v34;
    }
  }
  long long __p = 0;
  int v66 = 0;
  int v67 = 0;
  if (a1 != a2)
  {
    long long v35 = 0;
    uint64_t v36 = 0;
    do
    {
      char v37 = v69[0];
      if (!v69[0]) {
        goto LABEL_53;
      }
      double v38 = v13;
      do
      {
        char v39 = v37;
        long long v40 = v38;
        uint64_t v41 = v37[4];
        uint64_t v42 = v37 + 1;
        if (v41 >= v36)
        {
          uint64_t v42 = v39;
          double v38 = (void **)v39;
        }
        char v37 = (void *)*v42;
      }
      while (v37);
      if (v38 == v13) {
        goto LABEL_53;
      }
      if (v41 < v36) {
        char v39 = v40;
      }
      if (v36 < v39[4])
      {
LABEL_53:
        if (v35 >= v67)
        {
          unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((v35 - (unsigned char *)__p) >> 4);
          unint64_t v45 = v44 + 1;
          if (v44 + 1 > 0x555555555555555) {
            sub_1001D7FD4();
          }
          if (0x5555555555555556 * ((v67 - (unsigned char *)__p) >> 4) > v45) {
            unint64_t v45 = 0x5555555555555556 * ((v67 - (unsigned char *)__p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v67 - (unsigned char *)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v46 = 0x555555555555555;
          }
          else {
            unint64_t v46 = v45;
          }
          if (v46) {
            char v47 = (char *)sub_10014F86C((uint64_t)&v67, v46);
          }
          else {
            char v47 = 0;
          }
          double v48 = &v47[48 * v44];
          *(void *)double v48 = a1;
          v48[40] = 0;
          uint64_t v50 = (char *)__p;
          char v49 = v66;
          double v51 = v48;
          if (v66 != __p)
          {
            do
            {
              long long v52 = *((_OWORD *)v49 - 3);
              long long v53 = *((_OWORD *)v49 - 2);
              *(_OWORD *)(v51 - 23) = *(_OWORD *)(v49 - 23);
              *((_OWORD *)v51 - 3) = v52;
              *((_OWORD *)v51 - 2) = v53;
              v51 -= 48;
              v49 -= 48;
            }
            while (v49 != v50);
            char v49 = v50;
          }
          long long v35 = v48 + 48;
          long long __p = v51;
          int v66 = v48 + 48;
          int v67 = &v47[48 * v46];
          if (v49) {
            operator delete(v49);
          }
        }
        else
        {
          *(void *)long long v35 = a1;
          long long v43 = v63;
          *(_OWORD *)(v35 + 24) = v64;
          *(_OWORD *)(v35 + 8) = v43;
          v35[40] = 0;
          v35 += 48;
        }
        int v66 = v35;
      }
      a1 += 24;
      ++v36;
    }
    while (a1 != a2);
  }
  LOBYTE(v63) = 0;
  *((void *)&v63 + 1) = a9;
  uint64_t v61 = a9;
  uint64_t v62 = a9;
  sub_100BBA33C((uint64_t *)&__p, (uint64_t)&v63, (uint64_t)&v62, (uint64_t)&v61, 0x10uLL);
  BOOL v54 = (_BYTE)v63 == 0;
  if ((_BYTE)v63) {
    int v55 = 31;
  }
  else {
    int v55 = 0;
  }
  sub_100BAC5C8(a8, v55);
  if (__p)
  {
    int v66 = (char *)__p;
    operator delete(__p);
  }
LABEL_77:
  sub_1000F5BB0((uint64_t)&v68, v69[0]);
  return v54;
}

void sub_100BBA2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,void *a23)
{
}

uint64_t sub_100BBA33C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8 = *a1;
  unint64_t v7 = (double ***)a1[1];
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 4) <= a5)
  {
    if ((double ***)v8 == v7)
    {
      return 1;
    }
    else
    {
      while (1)
      {
        uint64_t v13 = (double ***)v8;
        v8 += 48;
        if ((double ***)v8 != v7) {
          break;
        }
LABEL_19:
        if ((double ***)v8 == v7) {
          return 1;
        }
      }
      unint64_t v7 = (double ***)v8;
      while (1)
      {
        if (!*(unsigned char *)a2)
        {
          uint64_t v14 = *v13;
          uint64_t v15 = *v7;
          char v16 = *(unsigned __int8 **)(a2 + 8);
          strcpy((char *)v23, "FFFFFFFFF");
          sub_100BBD3DC(v14, v15, (unsigned __int8 *)v23, v16);
          if (!BYTE9(v23[0]))
          {
            BOOL v17 = LOBYTE(v23[0]) != 84 && LOBYTE(v23[0]) - 48 >= 0xA;
            if (!v17
              || BYTE1(v23[0]) == 84
              || BYTE1(v23[0]) - 48 <= 9
              || BYTE3(v23[0]) == 84
              || BYTE3(v23[0]) - 48 < 0xA)
            {
              break;
            }
          }
        }
        v7 += 6;
        if (v7 == (double ***)a1[1]) {
          goto LABEL_19;
        }
      }
      uint64_t v12 = 0;
      *(unsigned char *)a2 = 1;
    }
  }
  else
  {
    long long __p = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    v23[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v23[1] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    sub_100BBA538(a1, (double *)v23, &__p);
    uint64_t v12 = sub_100BBA66C((double *)v23, (uint64_t **)&__p, 0, a5, a2, a3, a4, (uint64_t)&v22);
    if (__p)
    {
      uint64_t v20 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_100BBA514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BBA538(uint64_t *a1, double *a2, void **a3)
{
  uint64_t v3 = *a1;
  if (*a1 != a1[1])
  {
    uint64_t v7 = (uint64_t)(a3 + 2);
    do
    {
      uint64_t v8 = (double *)sub_100BBABC4(v3);
      sub_100BB17D8(a2, v8);
      uint64_t v10 = (uint64_t *)a3[1];
      unint64_t v9 = (unint64_t)a3[2];
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v12 = ((char *)v10 - (unsigned char *)*a3) >> 3;
        if ((unint64_t)(v12 + 1) >> 61) {
          sub_1001D7FD4();
        }
        uint64_t v13 = v9 - (void)*a3;
        uint64_t v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
          uint64_t v14 = v12 + 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          char v16 = (char *)sub_1000DA54C(v7, v15);
        }
        else {
          char v16 = 0;
        }
        BOOL v17 = (uint64_t *)&v16[8 * v12];
        *BOOL v17 = v3;
        uint64_t v11 = v17 + 1;
        uint64_t v19 = (char *)*a3;
        uint64_t v18 = (char *)a3[1];
        if (v18 != *a3)
        {
          do
          {
            uint64_t v20 = *((void *)v18 - 1);
            v18 -= 8;
            *--BOOL v17 = v20;
          }
          while (v18 != v19);
          uint64_t v18 = (char *)*a3;
        }
        *a3 = v17;
        a3[1] = v11;
        a3[2] = &v16[8 * v15];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *uint64_t v10 = v3;
        uint64_t v11 = v10 + 1;
      }
      a3[1] = v11;
      v3 += 48;
    }
    while (v3 != a1[1]);
  }
}

uint64_t sub_100BBA66C(double *a1, uint64_t **a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v13 = (*a1 + a1[2]) * 0.5;
  long long v14 = *((_OWORD *)a1 + 1);
  long long v54 = *(_OWORD *)a1;
  uint64_t v56 = *((void *)&v14 + 1);
  v52[1] = *((double *)&v54 + 1);
  long long v53 = v14;
  double v55 = v13;
  v52[0] = v13;
  char v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  unint64_t v46 = 0;
  char v47 = 0;
  uint64_t v48 = 0;
  long long __p = 0;
  unint64_t v44 = 0;
  uint64_t v45 = 0;
  sub_100BBAECC((double *)&v54, v52, a2, &v49, &v46, &__p, a7);
  unint64_t v15 = (uint64_t *)__p;
  if (__p != v44)
  {
    int64x2_t v41 = 0u;
    int64x2_t v42 = 0u;
    int64x2_t v57 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int64x2_t v58 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    uint64_t v16 = -(uint64_t)__p;
    do
    {
      BOOL v17 = (double *)sub_100BBABC4(*v15);
      sub_100BB17D8((double *)v57.i64, v17);
      ++v15;
      v16 -= 8;
    }
    while (v15 != v44);
    int64x2_t v41 = v57;
    int64x2_t v42 = v58;
    uint64_t v18 = (double ****)__p;
    if (a3 > 0x63 || -((uint64_t)__p + v16) >> 3 < a4)
    {
      if (v15 != __p)
      {
        while (1)
        {
          uint64_t v19 = v18++;
          if (v18 != (double ****)v15) {
            break;
          }
LABEL_23:
          if (v18 == (double ****)v15) {
            goto LABEL_24;
          }
        }
        unint64_t v15 = (uint64_t *)v18;
        while (1)
        {
          if (!*(unsigned char *)a5)
          {
            uint64_t v20 = **v19;
            uint64_t v21 = *(double ***)*v15;
            char v22 = *(unsigned __int8 **)(a5 + 8);
            strcpy(v57.i8, "FFFFFFFFF");
            sub_100BBD3DC(v20, v21, (unsigned __int8 *)&v57, v22);
            if (!v57.i8[9])
            {
              BOOL v23 = v57.u8[0] != 84 && v57.u8[0] - 48 >= 0xA;
              if (!v23
                || v57.u8[1] == 84
                || v57.u8[1] - 48 <= 9
                || v57.u8[3] == 84
                || v57.u8[3] - 48 < 0xA)
              {
                break;
              }
            }
          }
          if (++v15 == v44) {
            goto LABEL_23;
          }
        }
        *(unsigned char *)a5 = 1;
        goto LABEL_50;
      }
    }
    else if (!sub_100BBB56C((double *)v41.i64, (uint64_t **)&__p, a3 + 1, a4, a5, a6, a7, a8))
    {
LABEL_50:
      uint64_t v33 = 0;
      goto LABEL_69;
    }
LABEL_24:
    if (!sub_100BBB1BC((double *)v41.i64, (uint64_t **)&__p, (uint64_t **)&v49, a3, a4, a5, a6, a7, a8)
      || (sub_100BBB1BC((double *)v41.i64, (uint64_t **)&__p, (uint64_t **)&v46, a3, a4, a5, a6, a7, a8) & 1) == 0)
    {
      goto LABEL_50;
    }
  }
  uint64_t v25 = (double ****)v49;
  unint64_t v24 = v50;
  if (a3 > 0x63 || ((char *)v50 - (unsigned char *)v49) >> 3 < a4)
  {
    if (v49 != v50)
    {
      while (1)
      {
        uint64_t v26 = v25++;
        if (v25 != v24) {
          break;
        }
LABEL_45:
        if (v25 == v24) {
          goto LABEL_46;
        }
      }
      unint64_t v24 = v25;
      while (1)
      {
        if (!*(unsigned char *)a5)
        {
          long long v27 = **v26;
          int v28 = **v24;
          int v29 = *(unsigned __int8 **)(a5 + 8);
          strcpy(v57.i8, "FFFFFFFFF");
          sub_100BBD3DC(v27, v28, (unsigned __int8 *)&v57, v29);
          if (!v57.i8[9])
          {
            BOOL v30 = v57.u8[0] != 84 && v57.u8[0] - 48 >= 0xA;
            if (!v30
              || v57.u8[1] == 84
              || v57.u8[1] - 48 <= 9
              || v57.u8[3] == 84
              || v57.u8[3] - 48 < 0xA)
            {
              goto LABEL_68;
            }
          }
        }
        if (++v24 == v50) {
          goto LABEL_45;
        }
      }
    }
  }
  else if (!sub_100BBB56C((double *)&v54, (uint64_t **)&v49, a3 + 1, a4, a5, a6, a7, a8))
  {
    goto LABEL_50;
  }
LABEL_46:
  BOOL v32 = (double ****)v46;
  BOOL v31 = v47;
  if (a3 <= 0x63 && ((char *)v47 - (unsigned char *)v46) >> 3 >= a4)
  {
    uint64_t v33 = sub_100BBB56C(v52, (uint64_t **)&v46, a3 + 1, a4, a5, a6, a7, a8);
    goto LABEL_69;
  }
  if (v46 != v47)
  {
    while (1)
    {
      uint64_t v34 = v32++;
      if (v32 != v31) {
        break;
      }
LABEL_66:
      uint64_t v33 = 1;
      if (v32 == v31) {
        goto LABEL_69;
      }
    }
    BOOL v31 = v32;
    while (1)
    {
      if (!*(unsigned char *)a5)
      {
        long long v35 = **v34;
        uint64_t v36 = **v31;
        char v37 = *(unsigned __int8 **)(a5 + 8);
        strcpy(v57.i8, "FFFFFFFFF");
        sub_100BBD3DC(v35, v36, (unsigned __int8 *)&v57, v37);
        if (!v57.i8[9])
        {
          BOOL v38 = v57.u8[0] != 84 && v57.u8[0] - 48 >= 0xA;
          if (!v38
            || v57.u8[1] == 84
            || v57.u8[1] - 48 <= 9
            || v57.u8[3] == 84
            || v57.u8[3] - 48 < 0xA)
          {
            break;
          }
        }
      }
      if (++v31 == v47) {
        goto LABEL_66;
      }
    }
LABEL_68:
    uint64_t v33 = 0;
    *(unsigned char *)a5 = 1;
    goto LABEL_69;
  }
  uint64_t v33 = 1;
LABEL_69:
  if (__p)
  {
    unint64_t v44 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v46)
  {
    char v47 = (double ****)v46;
    operator delete(v46);
  }
  if (v49)
  {
    uint64_t v50 = (double ****)v49;
    operator delete(v49);
  }
  return v33;
}

void sub_100BBAB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BBABC4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    uint64_t v2 = **(double ***)a1;
    uint64_t v3 = *(void *)(*(void *)a1 + 8);
    if ((unint64_t)(v3 - (void)v2) <= 0x1F) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = -1;
    }
    sub_100BBAC3C(v2, (unint64_t)(v3 - (void)v2) < 0x20, (double *)(v3 + 16 * v4), (unint64_t)(v3 - (void)v2) < 0x20, (uint64_t)v7);
    long long v5 = v7[1];
    *(_OWORD *)(a1 + 8) = v7[0];
    *(_OWORD *)(a1 + 24) = v5;
    *(unsigned char *)(a1 + 40) = 1;
  }
  return a1 + 8;
}

void sub_100BBAC3C(double *a1, unsigned __int8 a2, double *a3, uint64_t a4, uint64_t a5)
{
  *(int64x2_t *)a5 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a5 + 16) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  if (a1 != a3)
  {
    uint64_t v7 = a2;
    uint64_t v8 = a1 + 2;
    unint64_t v9 = a2 ? a1 : a1 + 2;
    v32[0] = a1;
    v32[1] = v9;
    sub_100BBAE14(v32, (double *)a5);
    if (v8 != a3)
    {
      uint64_t v10 = v8;
      do
      {
        if (v7) {
          uint64_t v11 = v8;
        }
        else {
          uint64_t v11 = v8 + 2;
        }
        v27[0] = v8;
        v27[1] = v11;
        sub_100BBAE14(v27, (double *)v32);
        double v12 = *(double *)a5;
        double v13 = *(double *)(a5 + 16);
        double v14 = *(double *)(a5 + 24);
        uint64_t v15 = 0x7FEFFFFFFFFFFFFFLL;
        if (*(double *)a5 == 1.79769313e308
          && *(double *)(a5 + 8) == 1.79769313e308
          && v13 == -1.79769313e308
          && v14 == -1.79769313e308)
        {
          uint64_t v21 = (double *)0xFFEFFFFFFFFFFFFFLL;
          char v22 = (double *)0xFFEFFFFFFFFFFFFFLL;
          uint64_t v23 = 0x7FEFFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v30 = *(void *)(a5 + 8);
          uint64_t v31 = *(void *)&v12;
          double v28 = v14;
          double v29 = v13;
          double v19 = vabdd_f64(v12, v13);
          if (v19 < 360.0)
          {
            if (COERCE_UNSIGNED_INT64(fabs(v12 - v13)) > 0x7FEFFFFFFFFFFFFFLL)
            {
              BOOL v20 = 0;
            }
            else
            {
              double v24 = vabdd_f64(360.0, v19);
              double v25 = fmax(v19, 360.0);
              if (v25 >= 1.0) {
                double v26 = v25 * 2.22044605e-16;
              }
              else {
                double v26 = 2.22044605e-16;
              }
              BOOL v20 = v24 <= v26;
            }
          }
          else
          {
            BOOL v20 = 1;
          }
          sub_100BAFBC0((double *)&v31, (double *)&v30, &v29, &v28, v20);
          uint64_t v15 = v30;
          uint64_t v23 = v31;
          uint64_t v21 = *(double **)&v28;
          char v22 = *(double **)&v29;
        }
        v10 += 2;
        v32[4] = (double *)v23;
        v32[5] = (double *)v15;
        v32[6] = v22;
        v32[7] = v21;
        sub_100BAF668((uint64_t)v32, (void *)a5);
        v8 += 2;
      }
      while (v10 != a3);
    }
  }
}

double sub_100BBAE14(double **a1, double *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    sub_101A810DC();
  }
  uint64_t v3 = a1[1];
  if (!v3) {
    sub_101A81108();
  }
  double v5 = *v2;
  double v6 = *v3;
  uint64_t v7 = *((void *)v3 + 1);
  uint64_t v18 = *((void *)v2 + 1);
  double v19 = v5;
  sub_10075D084(&v19, (double *)&v18, 1);
  uint64_t v9 = v18;
  double v8 = v19;
  uint64_t v18 = v7;
  double v19 = v6;
  sub_10075D084(&v19, (double *)&v18, 1);
  uint64_t v11 = v18;
  double v10 = v19;
  uint64_t v18 = v9;
  double v19 = v8;
  uint64_t v16 = v11;
  double v17 = v10;
  sub_100BAEC78(&v19, (double *)&v18, &v17, (double *)&v16);
  uint64_t v13 = v18;
  double result = v19;
  uint64_t v15 = v16;
  double v14 = v17;
  *a2 = v19;
  *((void *)a2 + 1) = v13;
  a2[2] = v14;
  *((void *)a2 + 3) = v15;
  return result;
}

void sub_100BBAECC(double *a1, double *a2, uint64_t **a3, void **a4, void **a5, void **a6, uint64_t a7)
{
  uint64_t v7 = *a3;
  if (*a3 != a3[1])
  {
    uint64_t v54 = (uint64_t)(a5 + 2);
    uint64_t v55 = (uint64_t)(a4 + 2);
    uint64_t v56 = (uint64_t)(a6 + 2);
    do
    {
      BOOL v15 = sub_100BBB35C(a7, a1, *v7);
      BOOL v16 = sub_100BBB35C(a7, a2, *v7);
      if (!v15 || !v16)
      {
        if (v15)
        {
          double v19 = (uint64_t *)a4[1];
          unint64_t v18 = (unint64_t)a4[2];
          if ((unint64_t)v19 >= v18)
          {
            uint64_t v32 = ((char *)v19 - (unsigned char *)*a4) >> 3;
            if ((unint64_t)(v32 + 1) >> 61) {
              sub_1001D7FD4();
            }
            uint64_t v33 = v18 - (void)*a4;
            uint64_t v34 = v33 >> 2;
            if (v33 >> 2 <= (unint64_t)(v32 + 1)) {
              uint64_t v34 = v32 + 1;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v35 = v34;
            }
            if (v35) {
              uint64_t v36 = (char *)sub_1000DA54C(v55, v35);
            }
            else {
              uint64_t v36 = 0;
            }
            unint64_t v46 = (uint64_t *)&v36[8 * v32];
            uint64_t *v46 = *v7;
            BOOL v20 = v46 + 1;
            uint64_t v48 = (char *)*a4;
            char v47 = (char *)a4[1];
            if (v47 != *a4)
            {
              do
              {
                uint64_t v49 = *((void *)v47 - 1);
                v47 -= 8;
                *--unint64_t v46 = v49;
              }
              while (v47 != v48);
              char v47 = (char *)*a4;
            }
            *a4 = v46;
            a4[1] = v20;
            a4[2] = &v36[8 * v35];
            if (v47) {
              operator delete(v47);
            }
          }
          else
          {
            *double v19 = *v7;
            BOOL v20 = v19 + 1;
          }
          a4[1] = v20;
        }
        else if (v16)
        {
          double v25 = (uint64_t *)a5[1];
          unint64_t v24 = (unint64_t)a5[2];
          if ((unint64_t)v25 >= v24)
          {
            uint64_t v41 = ((char *)v25 - (unsigned char *)*a5) >> 3;
            if ((unint64_t)(v41 + 1) >> 61) {
              sub_1001D7FD4();
            }
            uint64_t v42 = v24 - (void)*a5;
            uint64_t v43 = v42 >> 2;
            if (v42 >> 2 <= (unint64_t)(v41 + 1)) {
              uint64_t v43 = v41 + 1;
            }
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v44 = v43;
            }
            if (v44) {
              uint64_t v45 = (char *)sub_1000DA54C(v54, v44);
            }
            else {
              uint64_t v45 = 0;
            }
            uint64_t v50 = (uint64_t *)&v45[8 * v41];
            uint64_t *v50 = *v7;
            double v26 = v50 + 1;
            long long v52 = (char *)*a5;
            uint64_t v51 = (char *)a5[1];
            if (v51 != *a5)
            {
              do
              {
                uint64_t v53 = *((void *)v51 - 1);
                v51 -= 8;
                *--uint64_t v50 = v53;
              }
              while (v51 != v52);
              uint64_t v51 = (char *)*a5;
            }
            *a5 = v50;
            a5[1] = v26;
            a5[2] = &v45[8 * v44];
            if (v51) {
              operator delete(v51);
            }
          }
          else
          {
            *double v25 = *v7;
            double v26 = v25 + 1;
          }
          a5[1] = v26;
        }
      }
      else
      {
        char v22 = (uint64_t *)a6[1];
        unint64_t v21 = (unint64_t)a6[2];
        if ((unint64_t)v22 >= v21)
        {
          uint64_t v27 = ((char *)v22 - (unsigned char *)*a6) >> 3;
          if ((unint64_t)(v27 + 1) >> 61) {
            sub_1001D7FD4();
          }
          uint64_t v28 = v21 - (void)*a6;
          uint64_t v29 = v28 >> 2;
          if (v28 >> 2 <= (unint64_t)(v27 + 1)) {
            uint64_t v29 = v27 + 1;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v29;
          }
          if (v30) {
            uint64_t v31 = (char *)sub_1000DA54C(v56, v30);
          }
          else {
            uint64_t v31 = 0;
          }
          char v37 = (uint64_t *)&v31[8 * v27];
          *char v37 = *v7;
          uint64_t v23 = v37 + 1;
          char v39 = (char *)*a6;
          BOOL v38 = (char *)a6[1];
          if (v38 != *a6)
          {
            do
            {
              uint64_t v40 = *((void *)v38 - 1);
              v38 -= 8;
              *--char v37 = v40;
            }
            while (v38 != v39);
            BOOL v38 = (char *)*a6;
          }
          *a6 = v37;
          a6[1] = v23;
          a6[2] = &v31[8 * v30];
          if (v38) {
            operator delete(v38);
          }
        }
        else
        {
          *char v22 = *v7;
          uint64_t v23 = v22 + 1;
        }
        a6[1] = v23;
      }
      ++v7;
    }
    while (v7 != a3[1]);
  }
}

uint64_t sub_100BBB1BC(double *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = *a2;
  double v12 = a2[1];
  if (a5 <= v12 - *a2 && a4 <= 0x63 && a3[1] - *a3 >= a5) {
    return sub_100BBC820(a1, a2, a3, a4 + 1, a5, a6, a7, a8, a7, a8, a9);
  }
  if (v13 == v12) {
    return 1;
  }
  double v14 = a3[1];
  if (*a3 == v14) {
    return 1;
  }
  while (*a3 == v14)
  {
LABEL_19:
    if (++v13 == v12) {
      return 1;
    }
  }
  double v14 = *a3;
  while (1)
  {
    if (!*(unsigned char *)a6)
    {
      BOOL v15 = *(double ***)*v13;
      BOOL v16 = *(double ***)*v14;
      double v17 = *(unsigned __int8 **)(a6 + 8);
      strcpy(v20, "FFFFFFFFF");
      sub_100BBD3DC(v15, v16, (unsigned __int8 *)v20, v17);
      if (!v20[9])
      {
        BOOL v18 = v20[0] != 84 && v20[0] - 48 >= 0xA;
        if (!v18
          || v20[1] == 84
          || v20[1] - 48 <= 9
          || v20[3] == 84
          || v20[3] - 48 <= 9)
        {
          break;
        }
      }
    }
    if (++v14 == a3[1])
    {
      double v12 = a2[1];
      goto LABEL_19;
    }
  }
  uint64_t result = 0;
  *(unsigned char *)a6 = 1;
  return result;
}

BOOL sub_100BBB35C(uint64_t a1, double *a2, uint64_t a3)
{
  uint64_t v4 = (double *)sub_100BBABC4(a3);
  double v5 = *v4;
  double v6 = v4[2];
  if (v6 - *v4 >= 360.0) {
    return v4[3] >= a2[1] && v4[1] <= a2[3];
  }
  double v7 = *a2;
  double v8 = a2[2];
  double v9 = v8 - *a2;
  if (v9 >= 360.0) {
    return v4[3] >= a2[1] && v4[1] <= a2[3];
  }
  double v10 = vabdd_f64(v7, v5);
  double v11 = 180.0;
  if (v10 == 180.0) {
    goto LABEL_4;
  }
  double v12 = v7 - v5;
  if ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v16 = fabs(v10 + -180.0);
    double v11 = 180.0;
    if (v10 < 180.0) {
      double v10 = 180.0;
    }
    double v17 = v10 >= 1.0 ? v10 * 2.22044605e-16 : 2.22044605e-16;
    if (v16 <= v17) {
      goto LABEL_4;
    }
  }
  double v11 = 180.0;
  if (v12 <= 180.0)
  {
    if (v12 >= -180.0) {
      goto LABEL_5;
    }
    double v11 = fmod(v12 + -180.0, 360.0) + 180.0;
LABEL_4:
    double v12 = v11;
    goto LABEL_5;
  }
  double v12 = fmod(v12 + 180.0, 360.0) + -180.0;
  if (v12 == -180.0) {
    goto LABEL_4;
  }
  BOOL v18 = ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
     && (*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
  if (!v18 || *(void *)&v12 == 0)
  {
    double v11 = 180.0;
    double v20 = fabs(v12 + 180.0);
    double v21 = fabs(v12);
    if (v21 < 180.0) {
      double v21 = 180.0;
    }
    double v22 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
    if (v20 <= v22) {
      goto LABEL_4;
    }
  }
LABEL_5:
  if (v12 < 0.0) {
    double v12 = v12 + 360.0;
  }
  double v13 = v5 + v12;
  double v14 = v9 + v5 + v12 + -360.0;
  if (vabdd_f64(v14, v8) < 180.0) {
    double v14 = v8;
  }
  if (v13 > v6 && v14 < v5) {
    return 0;
  }
  return v4[3] >= a2[1] && v4[1] <= a2[3];
}

uint64_t sub_100BBB56C(double *a1, uint64_t **a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v13 = *(_OWORD *)a1;
  double v14 = (a1[1] + a1[3]) * 0.5;
  uint64_t v56 = *((void *)a1 + 2);
  long long v15 = *((_OWORD *)a1 + 1);
  *(void *)&v53[0] = v13;
  long long v54 = v15;
  long long v55 = v13;
  double v57 = v14;
  v53[1] = v14;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  char v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  long long __p = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  sub_100BBAECC((double *)&v55, v53, a2, &v50, &v47, &__p, a7);
  double v16 = (uint64_t *)__p;
  if (__p != v45)
  {
    int64x2_t v42 = 0u;
    int64x2_t v43 = 0u;
    int64x2_t v58 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int64x2_t v59 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    uint64_t v17 = -(uint64_t)__p;
    do
    {
      BOOL v18 = (double *)sub_100BBABC4(*v16);
      sub_100BB17D8((double *)v58.i64, v18);
      ++v16;
      v17 -= 8;
    }
    while (v16 != v45);
    int64x2_t v42 = v58;
    int64x2_t v43 = v59;
    double v19 = (double ****)__p;
    if (a3 > 0x63 || -((uint64_t)__p + v17) >> 3 < a4)
    {
      if (v16 != __p)
      {
        while (1)
        {
          double v20 = v19++;
          if (v19 != (double ****)v16) {
            break;
          }
LABEL_23:
          if (v19 == (double ****)v16) {
            goto LABEL_24;
          }
        }
        double v16 = (uint64_t *)v19;
        while (1)
        {
          if (!*(unsigned char *)a5)
          {
            double v21 = **v20;
            double v22 = *(double ***)*v16;
            uint64_t v23 = *(unsigned __int8 **)(a5 + 8);
            strcpy(v58.i8, "FFFFFFFFF");
            sub_100BBD3DC(v21, v22, (unsigned __int8 *)&v58, v23);
            if (!v58.i8[9])
            {
              BOOL v24 = v58.u8[0] != 84 && v58.u8[0] - 48 >= 0xA;
              if (!v24
                || v58.u8[1] == 84
                || v58.u8[1] - 48 <= 9
                || v58.u8[3] == 84
                || v58.u8[3] - 48 < 0xA)
              {
                break;
              }
            }
          }
          if (++v16 == v45) {
            goto LABEL_23;
          }
        }
        *(unsigned char *)a5 = 1;
        goto LABEL_50;
      }
    }
    else if (!sub_100BBA66C(&v42, &__p, a3 + 1, a4, a5, a6, a7, a8))
    {
LABEL_50:
      uint64_t v34 = 0;
      goto LABEL_69;
    }
LABEL_24:
    if (!sub_100BBBAD0((double *)v42.i64, (uint64_t **)&__p, (uint64_t **)&v50, a3, a4, a5, a6, a7, a8)
      || (sub_100BBBAD0((double *)v42.i64, (uint64_t **)&__p, (uint64_t **)&v47, a3, a4, a5, a6, a7, a8) & 1) == 0)
    {
      goto LABEL_50;
    }
  }
  double v26 = (double ****)v50;
  double v25 = v51;
  if (a3 > 0x63 || ((char *)v51 - (unsigned char *)v50) >> 3 < a4)
  {
    if (v50 != v51)
    {
      while (1)
      {
        uint64_t v27 = v26++;
        if (v26 != v25) {
          break;
        }
LABEL_45:
        if (v26 == v25) {
          goto LABEL_46;
        }
      }
      double v25 = v26;
      while (1)
      {
        if (!*(unsigned char *)a5)
        {
          uint64_t v28 = **v27;
          uint64_t v29 = **v25;
          unint64_t v30 = *(unsigned __int8 **)(a5 + 8);
          strcpy(v58.i8, "FFFFFFFFF");
          sub_100BBD3DC(v28, v29, (unsigned __int8 *)&v58, v30);
          if (!v58.i8[9])
          {
            BOOL v31 = v58.u8[0] != 84 && v58.u8[0] - 48 >= 0xA;
            if (!v31
              || v58.u8[1] == 84
              || v58.u8[1] - 48 <= 9
              || v58.u8[3] == 84
              || v58.u8[3] - 48 < 0xA)
            {
              goto LABEL_68;
            }
          }
        }
        if (++v25 == v51) {
          goto LABEL_45;
        }
      }
    }
  }
  else if (!sub_100BBA66C(&v55, &v50, a3 + 1, a4, a5, a6, a7, a8))
  {
    goto LABEL_50;
  }
LABEL_46:
  uint64_t v33 = (double ****)v47;
  uint64_t v32 = v48;
  if (a3 <= 0x63 && ((char *)v48 - (unsigned char *)v47) >> 3 >= a4)
  {
    uint64_t v34 = sub_100BBA66C(v53, &v47, a3 + 1, a4, a5, a6, a7, a8);
    goto LABEL_69;
  }
  if (v47 != v48)
  {
    while (1)
    {
      unint64_t v35 = v33++;
      if (v33 != v32) {
        break;
      }
LABEL_66:
      uint64_t v34 = 1;
      if (v33 == v32) {
        goto LABEL_69;
      }
    }
    uint64_t v32 = v33;
    while (1)
    {
      if (!*(unsigned char *)a5)
      {
        uint64_t v36 = **v35;
        char v37 = **v32;
        BOOL v38 = *(unsigned __int8 **)(a5 + 8);
        strcpy(v58.i8, "FFFFFFFFF");
        sub_100BBD3DC(v36, v37, (unsigned __int8 *)&v58, v38);
        if (!v58.i8[9])
        {
          BOOL v39 = v58.u8[0] != 84 && v58.u8[0] - 48 >= 0xA;
          if (!v39
            || v58.u8[1] == 84
            || v58.u8[1] - 48 <= 9
            || v58.u8[3] == 84
            || v58.u8[3] - 48 < 0xA)
          {
            break;
          }
        }
      }
      if (++v32 == v48) {
        goto LABEL_66;
      }
    }
LABEL_68:
    uint64_t v34 = 0;
    *(unsigned char *)a5 = 1;
    goto LABEL_69;
  }
  uint64_t v34 = 1;
LABEL_69:
  if (__p)
  {
    uint64_t v45 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v47)
  {
    uint64_t v48 = (double ****)v47;
    operator delete(v47);
  }
  if (v50)
  {
    uint64_t v51 = (double ****)v50;
    operator delete(v50);
  }
  return v34;
}

void sub_100BBBA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BBBAD0(double *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v13 = *a2;
  double v12 = a2[1];
  if (a5 <= v12 - *a2 && a4 <= 0x63 && a3[1] - *a3 >= a5) {
    return sub_100BBBC70(a1, a2, a3, a4 + 1, a5, a6, a7, a8, a7, a8, a9);
  }
  if (v13 == v12) {
    return 1;
  }
  double v14 = a3[1];
  if (*a3 == v14) {
    return 1;
  }
  while (*a3 == v14)
  {
LABEL_19:
    if (++v13 == v12) {
      return 1;
    }
  }
  double v14 = *a3;
  while (1)
  {
    if (!*(unsigned char *)a6)
    {
      long long v15 = *(double ***)*v13;
      double v16 = *(double ***)*v14;
      uint64_t v17 = *(unsigned __int8 **)(a6 + 8);
      strcpy(v20, "FFFFFFFFF");
      sub_100BBD3DC(v15, v16, (unsigned __int8 *)v20, v17);
      if (!v20[9])
      {
        BOOL v18 = v20[0] != 84 && v20[0] - 48 >= 0xA;
        if (!v18
          || v20[1] == 84
          || v20[1] - 48 <= 9
          || v20[3] == 84
          || v20[3] - 48 <= 9)
        {
          break;
        }
      }
    }
    if (++v14 == a3[1])
    {
      double v12 = a2[1];
      goto LABEL_19;
    }
  }
  uint64_t result = 0;
  *(unsigned char *)a6 = 1;
  return result;
}

uint64_t sub_100BBBC70(double *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  double v16 = (*a1 + a1[2]) * 0.5;
  long long v17 = *((_OWORD *)a1 + 1);
  long long v102 = *(_OWORD *)a1;
  uint64_t v104 = *((void *)&v17 + 1);
  v100[1] = *((double *)&v102 + 1);
  long long v101 = v17;
  double v103 = v16;
  v100[0] = v16;
  unsigned int v97 = 0;
  unsigned int v98 = 0;
  uint64_t v99 = 0;
  int v94 = 0;
  int v95 = 0;
  uint64_t v96 = 0;
  double v91 = 0;
  unsigned int v92 = 0;
  uint64_t v93 = 0;
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  int v85 = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  long long __p = 0;
  int v83 = 0;
  uint64_t v84 = 0;
  sub_100BBAECC((double *)&v102, v100, a2, &v97, &v94, &v91, a8);
  sub_100BBAECC((double *)&v102, v100, a3, &v88, &v85, &__p, a10);
  double v19 = (uint64_t *)v91;
  BOOL v18 = v92;
  if (v91 == v92) {
    goto LABEL_77;
  }
  double v20 = v83;
  if (a5 > ((char *)v92 - (unsigned char *)v91) >> 3 || a4 > 0x63 || ((char *)v83 - (unsigned char *)__p) >> 3 < a5)
  {
    if (__p != v83)
    {
      while (__p == v20)
      {
LABEL_28:
        if (++v19 == v18) {
          goto LABEL_29;
        }
      }
      double v20 = (double ****)__p;
      while (1)
      {
        if (!*(unsigned char *)a6)
        {
          uint64_t v28 = *(double ***)*v19;
          uint64_t v29 = **v20;
          unint64_t v30 = *(unsigned __int8 **)(a6 + 8);
          strcpy(v105.i8, "FFFFFFFFF");
          sub_100BBD3DC(v28, v29, (unsigned __int8 *)&v105, v30);
          if (!v105.i8[9])
          {
            BOOL v31 = v105.u8[0] != 84 && v105.u8[0] - 48 >= 0xA;
            if (!v31
              || v105.u8[1] == 84
              || v105.u8[1] - 48 <= 9
              || v105.u8[3] == 84
              || v105.u8[3] - 48 < 0xA)
            {
              goto LABEL_173;
            }
          }
        }
        if (++v20 == v83)
        {
          BOOL v18 = v92;
          goto LABEL_28;
        }
      }
    }
  }
  else
  {
    int64x2_t v80 = 0u;
    int64x2_t v81 = 0u;
    int64x2_t v105 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int64x2_t v106 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    do
    {
      double v21 = (double *)sub_100BBABC4(*v19);
      sub_100BB17D8((double *)v105.i64, v21);
      ++v19;
    }
    while (v19 != v92);
    uint64_t v23 = v105.i64[1];
    uint64_t v22 = v105.i64[0];
    uint64_t v25 = v106.i64[1];
    uint64_t v24 = v106.i64[0];
    double v26 = (uint64_t *)__p;
    if (__p != v83)
    {
      do
      {
        uint64_t v27 = (double *)sub_100BBABC4(*v26);
        sub_100BB17D8((double *)v105.i64, v27);
        ++v26;
      }
      while (v26 != (uint64_t *)v83);
      uint64_t v23 = v105.i64[1];
      uint64_t v22 = v105.i64[0];
      uint64_t v25 = v106.i64[1];
      uint64_t v24 = v106.i64[0];
    }
    v80.i64[0] = v22;
    v80.i64[1] = v23;
    v81.i64[0] = v24;
    v81.i64[1] = v25;
    if ((sub_100BBC820(&v80, &v91, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0) {
      goto LABEL_155;
    }
  }
LABEL_29:
  uint64_t v32 = v89;
  if (a5 > ((char *)v89 - (unsigned char *)v88) >> 3)
  {
    uint64_t v34 = (uint64_t *)v91;
    uint64_t v33 = v92;
    goto LABEL_32;
  }
  uint64_t v34 = (uint64_t *)v91;
  uint64_t v33 = v92;
  if (a5 > ((char *)v86 - (unsigned char *)v85) >> 3 || a4 > 0x63 || ((char *)v92 - (unsigned char *)v91) >> 3 < a5)
  {
LABEL_32:
    if (v88 != v89 && v34 != v33)
    {
      while (v88 == v32)
      {
LABEL_49:
        if (++v34 == v33)
        {
          uint64_t v34 = (uint64_t *)v91;
          goto LABEL_51;
        }
      }
      uint64_t v32 = (double ****)v88;
      while (1)
      {
        if (!*(unsigned char *)a6)
        {
          unint64_t v35 = *(double ***)*v34;
          uint64_t v36 = **v32;
          char v37 = *(unsigned __int8 **)(a6 + 8);
          strcpy(v105.i8, "FFFFFFFFF");
          sub_100BBD3DC(v35, v36, (unsigned __int8 *)&v105, v37);
          if (!v105.i8[9])
          {
            BOOL v38 = v105.u8[0] != 84 && v105.u8[0] - 48 >= 0xA;
            if (!v38
              || v105.u8[1] == 84
              || v105.u8[1] - 48 <= 9
              || v105.u8[3] == 84
              || v105.u8[3] - 48 < 0xA)
            {
              goto LABEL_173;
            }
          }
        }
        if (++v32 == v89)
        {
          uint64_t v33 = v92;
          goto LABEL_49;
        }
      }
    }
LABEL_51:
    if (v34 != v33)
    {
      BOOL v39 = v86;
      if (v85 != v86)
      {
        while (v85 == v39)
        {
LABEL_68:
          if (++v34 == v33) {
            goto LABEL_77;
          }
        }
        BOOL v39 = (double ****)v85;
        while (1)
        {
          if (!*(unsigned char *)a6)
          {
            uint64_t v40 = *(double ***)*v34;
            uint64_t v41 = **v39;
            int64x2_t v42 = *(unsigned __int8 **)(a6 + 8);
            strcpy(v105.i8, "FFFFFFFFF");
            sub_100BBD3DC(v40, v41, (unsigned __int8 *)&v105, v42);
            if (!v105.i8[9])
            {
              BOOL v43 = v105.u8[0] != 84 && v105.u8[0] - 48 >= 0xA;
              if (!v43
                || v105.u8[1] == 84
                || v105.u8[1] - 48 <= 9
                || v105.u8[3] == 84
                || v105.u8[3] - 48 < 0xA)
              {
                goto LABEL_173;
              }
            }
          }
          if (++v39 == v86)
          {
            uint64_t v33 = v92;
            goto LABEL_68;
          }
        }
      }
    }
    goto LABEL_77;
  }
  int64x2_t v80 = 0u;
  int64x2_t v81 = 0u;
  int64x2_t v44 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int64x2_t v45 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  int64x2_t v105 = v44;
  int64x2_t v106 = v45;
  if (v91 != v92)
  {
    do
    {
      uint64_t v46 = (double *)sub_100BBABC4(*v34);
      sub_100BB17D8((double *)v105.i64, v46);
      ++v34;
    }
    while (v34 != v92);
    int64x2_t v44 = v105;
    int64x2_t v45 = v106;
  }
  int64x2_t v80 = v44;
  int64x2_t v81 = v45;
  if (!sub_100BBC820(&v80, &v91, &v88, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    || (sub_100BBC820(&v80, &v91, &v85, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_155;
  }
LABEL_77:
  char v47 = (uint64_t *)__p;
  uint64_t v48 = v83;
  if (__p != v83)
  {
    uint64_t v50 = (double ****)v97;
    uint64_t v49 = v98;
    if (a5 > ((char *)v98 - (unsigned char *)v97) >> 3
      || a5 > ((char *)v95 - (unsigned char *)v94) >> 3
      || a4 > 0x63
      || ((char *)v83 - (unsigned char *)__p) >> 3 < a5)
    {
      if (v97 != v98)
      {
        while (__p == v48)
        {
LABEL_96:
          if (++v50 == v49) {
            goto LABEL_97;
          }
        }
        uint64_t v48 = (double ****)__p;
        while (1)
        {
          if (!*(unsigned char *)a6)
          {
            uint64_t v51 = **v50;
            uint64_t v52 = **v48;
            uint64_t v53 = *(unsigned __int8 **)(a6 + 8);
            strcpy(v105.i8, "FFFFFFFFF");
            sub_100BBD3DC(v51, v52, (unsigned __int8 *)&v105, v53);
            if (!v105.i8[9])
            {
              BOOL v54 = v105.u8[0] != 84 && v105.u8[0] - 48 >= 0xA;
              if (!v54
                || v105.u8[1] == 84
                || v105.u8[1] - 48 <= 9
                || v105.u8[3] == 84
                || v105.u8[3] - 48 < 0xA)
              {
                goto LABEL_173;
              }
            }
          }
          if (++v48 == v83)
          {
            uint64_t v49 = v98;
            goto LABEL_96;
          }
        }
      }
LABEL_97:
      uint64_t v56 = (double ****)v94;
      long long v55 = v95;
      if (v94 != v95 && __p != v48)
      {
        while (__p == v48)
        {
LABEL_171:
          if (++v56 == v55) {
            goto LABEL_102;
          }
        }
        uint64_t v48 = (double ****)__p;
        while (1)
        {
          if (!*(unsigned char *)a6)
          {
            int v74 = **v56;
            double v75 = **v48;
            int v76 = *(unsigned __int8 **)(a6 + 8);
            strcpy(v105.i8, "FFFFFFFFF");
            sub_100BBD3DC(v74, v75, (unsigned __int8 *)&v105, v76);
            if (!v105.i8[9])
            {
              BOOL v77 = v105.u8[0] != 84 && v105.u8[0] - 48 >= 0xA;
              if (!v77
                || v105.u8[1] == 84
                || v105.u8[1] - 48 <= 9
                || v105.u8[3] == 84
                || v105.u8[3] - 48 < 0xA)
              {
                goto LABEL_173;
              }
            }
          }
          if (++v48 == v83)
          {
            long long v55 = v95;
            goto LABEL_171;
          }
        }
      }
    }
    else
    {
      int64x2_t v80 = 0u;
      int64x2_t v81 = 0u;
      int64x2_t v105 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      int64x2_t v106 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      do
      {
        double v73 = (double *)sub_100BBABC4(*v47);
        sub_100BB17D8((double *)v105.i64, v73);
        ++v47;
      }
      while (v47 != (uint64_t *)v83);
      int64x2_t v80 = v105;
      int64x2_t v81 = v106;
      if (!sub_100BBC820(&v80, &v97, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
        || (sub_100BBC820(&v80, &v94, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_155;
      }
    }
  }
LABEL_102:
  int64x2_t v59 = (double ****)v97;
  int64x2_t v58 = v98;
  if (a5 > ((char *)v98 - (unsigned char *)v97) >> 3 || a4 > 0x63 || ((char *)v89 - (unsigned char *)v88) >> 3 < a5)
  {
    if (v97 != v98)
    {
      char v60 = v89;
      if (v88 != v89)
      {
        while (v88 == v60)
        {
LABEL_120:
          if (++v59 == v58) {
            goto LABEL_125;
          }
        }
        char v60 = (double ****)v88;
        while (1)
        {
          if (!*(unsigned char *)a6)
          {
            uint64_t v61 = **v59;
            uint64_t v62 = **v60;
            long long v63 = *(unsigned __int8 **)(a6 + 8);
            strcpy(v105.i8, "FFFFFFFFF");
            sub_100BBD3DC(v61, v62, (unsigned __int8 *)&v105, v63);
            if (!v105.i8[9])
            {
              BOOL v64 = v105.u8[0] != 84 && v105.u8[0] - 48 >= 0xA;
              if (!v64
                || v105.u8[1] == 84
                || v105.u8[1] - 48 <= 9
                || v105.u8[3] == 84
                || v105.u8[3] - 48 < 0xA)
              {
                goto LABEL_173;
              }
            }
          }
          if (++v60 == v89)
          {
            int64x2_t v58 = v98;
            goto LABEL_120;
          }
        }
      }
    }
  }
  else if ((sub_100BBC820(&v102, &v97, &v88, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_155;
  }
LABEL_125:
  int v66 = (double ****)v94;
  int v65 = v95;
  if (a5 <= ((char *)v95 - (unsigned char *)v94) >> 3 && a4 <= 0x63 && ((char *)v86 - (unsigned char *)v85) >> 3 >= a5)
  {
    if (sub_100BBC820(v100, &v94, &v85, a4 + 1, a5, a6, a7, a8, a9, a10, a11))
    {
LABEL_148:
      uint64_t v72 = 1;
      goto LABEL_174;
    }
LABEL_155:
    uint64_t v72 = 0;
    goto LABEL_174;
  }
  if (v94 == v95) {
    goto LABEL_148;
  }
  int v67 = v86;
  if (v85 == v86) {
    goto LABEL_148;
  }
  while (v85 == v67)
  {
LABEL_143:
    if (++v66 == v65) {
      goto LABEL_148;
    }
  }
  int v67 = (double ****)v85;
  while (1)
  {
    if (!*(unsigned char *)a6)
    {
      int v68 = **v66;
      double v69 = **v67;
      double v70 = *(unsigned __int8 **)(a6 + 8);
      strcpy(v105.i8, "FFFFFFFFF");
      sub_100BBD3DC(v68, v69, (unsigned __int8 *)&v105, v70);
      if (!v105.i8[9])
      {
        BOOL v71 = v105.u8[0] != 84 && v105.u8[0] - 48 >= 0xA;
        if (!v71
          || v105.u8[1] == 84
          || v105.u8[1] - 48 <= 9
          || v105.u8[3] == 84
          || v105.u8[3] - 48 < 0xA)
        {
          break;
        }
      }
    }
    if (++v67 == v86)
    {
      int v65 = v95;
      goto LABEL_143;
    }
  }
LABEL_173:
  uint64_t v72 = 0;
  *(unsigned char *)a6 = 1;
LABEL_174:
  if (__p)
  {
    int v83 = (double ****)__p;
    operator delete(__p);
  }
  if (v85)
  {
    uint64_t v86 = (double ****)v85;
    operator delete(v85);
  }
  if (v88)
  {
    uint64_t v89 = (double ****)v88;
    operator delete(v88);
  }
  if (v91)
  {
    unsigned int v92 = (uint64_t *)v91;
    operator delete(v91);
  }
  if (v94)
  {
    int v95 = (double ****)v94;
    operator delete(v94);
  }
  if (v97)
  {
    unsigned int v98 = (double ****)v97;
    operator delete(v97);
  }
  return v72;
}

void sub_100BBC77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a25) {
    operator delete(a25);
  }
  if (a28) {
    operator delete(a28);
  }
  if (a31) {
    operator delete(a31);
  }
  if (a34) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BBC820(double *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  long long v16 = *(_OWORD *)a1;
  double v17 = (a1[1] + a1[3]) * 0.5;
  uint64_t v104 = *((void *)a1 + 2);
  long long v18 = *((_OWORD *)a1 + 1);
  *(void *)&v101[0] = v16;
  long long v102 = v18;
  long long v103 = v16;
  double v105 = v17;
  v101[1] = v17;
  unsigned int v98 = 0;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  int v95 = 0;
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  unsigned int v92 = 0;
  uint64_t v93 = 0;
  uint64_t v94 = 0;
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  long long __p = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  sub_100BBAECC((double *)&v103, v101, a2, &v98, &v95, &v92, a8);
  sub_100BBAECC((double *)&v103, v101, a3, &v89, &v86, &__p, a10);
  double v20 = (uint64_t *)v92;
  double v19 = v93;
  if (v92 == v93) {
    goto LABEL_77;
  }
  double v21 = v84;
  if (a5 > ((char *)v93 - (unsigned char *)v92) >> 3 || a4 > 0x63 || ((char *)v84 - (unsigned char *)__p) >> 3 < a5)
  {
    if (__p != v84)
    {
      while (__p == v21)
      {
LABEL_28:
        if (++v20 == v19) {
          goto LABEL_29;
        }
      }
      double v21 = (double ****)__p;
      while (1)
      {
        if (!*(unsigned char *)a6)
        {
          uint64_t v29 = *(double ***)*v20;
          unint64_t v30 = **v21;
          BOOL v31 = *(unsigned __int8 **)(a6 + 8);
          strcpy(v106.i8, "FFFFFFFFF");
          sub_100BBD3DC(v29, v30, (unsigned __int8 *)&v106, v31);
          if (!v106.i8[9])
          {
            BOOL v32 = v106.u8[0] != 84 && v106.u8[0] - 48 >= 0xA;
            if (!v32
              || v106.u8[1] == 84
              || v106.u8[1] - 48 <= 9
              || v106.u8[3] == 84
              || v106.u8[3] - 48 < 0xA)
            {
              goto LABEL_173;
            }
          }
        }
        if (++v21 == v84)
        {
          double v19 = v93;
          goto LABEL_28;
        }
      }
    }
  }
  else
  {
    int64x2_t v81 = 0u;
    int64x2_t v82 = 0u;
    int64x2_t v106 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int64x2_t v107 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    do
    {
      uint64_t v22 = (double *)sub_100BBABC4(*v20);
      sub_100BB17D8((double *)v106.i64, v22);
      ++v20;
    }
    while (v20 != v93);
    uint64_t v24 = v106.i64[1];
    uint64_t v23 = v106.i64[0];
    uint64_t v26 = v107.i64[1];
    uint64_t v25 = v107.i64[0];
    uint64_t v27 = (uint64_t *)__p;
    if (__p != v84)
    {
      do
      {
        uint64_t v28 = (double *)sub_100BBABC4(*v27);
        sub_100BB17D8((double *)v106.i64, v28);
        ++v27;
      }
      while (v27 != (uint64_t *)v84);
      uint64_t v24 = v106.i64[1];
      uint64_t v23 = v106.i64[0];
      uint64_t v26 = v107.i64[1];
      uint64_t v25 = v107.i64[0];
    }
    v81.i64[0] = v23;
    v81.i64[1] = v24;
    v82.i64[0] = v25;
    v82.i64[1] = v26;
    if ((sub_100BBBC70((double *)v81.i64, (uint64_t **)&v92, (uint64_t **)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0) {
      goto LABEL_155;
    }
  }
LABEL_29:
  uint64_t v33 = v90;
  if (a5 > ((char *)v90 - (unsigned char *)v89) >> 3)
  {
    unint64_t v35 = (uint64_t *)v92;
    uint64_t v34 = v93;
    goto LABEL_32;
  }
  unint64_t v35 = (uint64_t *)v92;
  uint64_t v34 = v93;
  if (a5 > ((char *)v87 - (unsigned char *)v86) >> 3 || a4 > 0x63 || ((char *)v93 - (unsigned char *)v92) >> 3 < a5)
  {
LABEL_32:
    if (v89 != v90 && v35 != v34)
    {
      while (v89 == v33)
      {
LABEL_49:
        if (++v35 == v34)
        {
          unint64_t v35 = (uint64_t *)v92;
          goto LABEL_51;
        }
      }
      uint64_t v33 = (double ****)v89;
      while (1)
      {
        if (!*(unsigned char *)a6)
        {
          uint64_t v36 = *(double ***)*v35;
          char v37 = **v33;
          BOOL v38 = *(unsigned __int8 **)(a6 + 8);
          strcpy(v106.i8, "FFFFFFFFF");
          sub_100BBD3DC(v36, v37, (unsigned __int8 *)&v106, v38);
          if (!v106.i8[9])
          {
            BOOL v39 = v106.u8[0] != 84 && v106.u8[0] - 48 >= 0xA;
            if (!v39
              || v106.u8[1] == 84
              || v106.u8[1] - 48 <= 9
              || v106.u8[3] == 84
              || v106.u8[3] - 48 < 0xA)
            {
              goto LABEL_173;
            }
          }
        }
        if (++v33 == v90)
        {
          uint64_t v34 = v93;
          goto LABEL_49;
        }
      }
    }
LABEL_51:
    if (v35 != v34)
    {
      uint64_t v40 = v87;
      if (v86 != v87)
      {
        while (v86 == v40)
        {
LABEL_68:
          if (++v35 == v34) {
            goto LABEL_77;
          }
        }
        uint64_t v40 = (double ****)v86;
        while (1)
        {
          if (!*(unsigned char *)a6)
          {
            uint64_t v41 = *(double ***)*v35;
            int64x2_t v42 = **v40;
            BOOL v43 = *(unsigned __int8 **)(a6 + 8);
            strcpy(v106.i8, "FFFFFFFFF");
            sub_100BBD3DC(v41, v42, (unsigned __int8 *)&v106, v43);
            if (!v106.i8[9])
            {
              BOOL v44 = v106.u8[0] != 84 && v106.u8[0] - 48 >= 0xA;
              if (!v44
                || v106.u8[1] == 84
                || v106.u8[1] - 48 <= 9
                || v106.u8[3] == 84
                || v106.u8[3] - 48 < 0xA)
              {
                goto LABEL_173;
              }
            }
          }
          if (++v40 == v87)
          {
            uint64_t v34 = v93;
            goto LABEL_68;
          }
        }
      }
    }
    goto LABEL_77;
  }
  int64x2_t v81 = 0u;
  int64x2_t v82 = 0u;
  int64x2_t v45 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int64x2_t v46 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  int64x2_t v106 = v45;
  int64x2_t v107 = v46;
  if (v92 != v93)
  {
    do
    {
      char v47 = (double *)sub_100BBABC4(*v35);
      sub_100BB17D8((double *)v106.i64, v47);
      ++v35;
    }
    while (v35 != v93);
    int64x2_t v45 = v106;
    int64x2_t v46 = v107;
  }
  int64x2_t v81 = v45;
  int64x2_t v82 = v46;
  if (!sub_100BBBC70((double *)v81.i64, (uint64_t **)&v92, (uint64_t **)&v89, a4 + 1, a5, a6, a7, a8, a9, a10, a11)|| (sub_100BBBC70((double *)v81.i64, (uint64_t **)&v92, (uint64_t **)&v86, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_155;
  }
LABEL_77:
  uint64_t v48 = (uint64_t *)__p;
  uint64_t v49 = v84;
  if (__p != v84)
  {
    uint64_t v51 = (double ****)v98;
    uint64_t v50 = v99;
    if (a5 > ((char *)v99 - (unsigned char *)v98) >> 3
      || a5 > ((char *)v96 - (unsigned char *)v95) >> 3
      || a4 > 0x63
      || ((char *)v84 - (unsigned char *)__p) >> 3 < a5)
    {
      if (v98 != v99)
      {
        while (__p == v49)
        {
LABEL_96:
          if (++v51 == v50) {
            goto LABEL_97;
          }
        }
        uint64_t v49 = (double ****)__p;
        while (1)
        {
          if (!*(unsigned char *)a6)
          {
            uint64_t v52 = **v51;
            uint64_t v53 = **v49;
            BOOL v54 = *(unsigned __int8 **)(a6 + 8);
            strcpy(v106.i8, "FFFFFFFFF");
            sub_100BBD3DC(v52, v53, (unsigned __int8 *)&v106, v54);
            if (!v106.i8[9])
            {
              BOOL v55 = v106.u8[0] != 84 && v106.u8[0] - 48 >= 0xA;
              if (!v55
                || v106.u8[1] == 84
                || v106.u8[1] - 48 <= 9
                || v106.u8[3] == 84
                || v106.u8[3] - 48 < 0xA)
              {
                goto LABEL_173;
              }
            }
          }
          if (++v49 == v84)
          {
            uint64_t v50 = v99;
            goto LABEL_96;
          }
        }
      }
LABEL_97:
      double v57 = (double ****)v95;
      uint64_t v56 = v96;
      if (v95 != v96 && __p != v49)
      {
        while (__p == v49)
        {
LABEL_171:
          if (++v57 == v56) {
            goto LABEL_102;
          }
        }
        uint64_t v49 = (double ****)__p;
        while (1)
        {
          if (!*(unsigned char *)a6)
          {
            double v75 = **v57;
            int v76 = **v49;
            BOOL v77 = *(unsigned __int8 **)(a6 + 8);
            strcpy(v106.i8, "FFFFFFFFF");
            sub_100BBD3DC(v75, v76, (unsigned __int8 *)&v106, v77);
            if (!v106.i8[9])
            {
              BOOL v78 = v106.u8[0] != 84 && v106.u8[0] - 48 >= 0xA;
              if (!v78
                || v106.u8[1] == 84
                || v106.u8[1] - 48 <= 9
                || v106.u8[3] == 84
                || v106.u8[3] - 48 < 0xA)
              {
                goto LABEL_173;
              }
            }
          }
          if (++v49 == v84)
          {
            uint64_t v56 = v96;
            goto LABEL_171;
          }
        }
      }
    }
    else
    {
      int64x2_t v81 = 0u;
      int64x2_t v82 = 0u;
      int64x2_t v106 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      int64x2_t v107 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      do
      {
        int v74 = (double *)sub_100BBABC4(*v48);
        sub_100BB17D8((double *)v106.i64, v74);
        ++v48;
      }
      while (v48 != (uint64_t *)v84);
      int64x2_t v81 = v106;
      int64x2_t v82 = v107;
      if (!sub_100BBBC70((double *)v81.i64, (uint64_t **)&v98, (uint64_t **)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)|| (sub_100BBBC70((double *)v81.i64, (uint64_t **)&v95, (uint64_t **)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_155;
      }
    }
  }
LABEL_102:
  char v60 = (double ****)v98;
  int64x2_t v59 = v99;
  if (a5 > ((char *)v99 - (unsigned char *)v98) >> 3 || a4 > 0x63 || ((char *)v90 - (unsigned char *)v89) >> 3 < a5)
  {
    if (v98 != v99)
    {
      uint64_t v61 = v90;
      if (v89 != v90)
      {
        while (v89 == v61)
        {
LABEL_120:
          if (++v60 == v59) {
            goto LABEL_125;
          }
        }
        uint64_t v61 = (double ****)v89;
        while (1)
        {
          if (!*(unsigned char *)a6)
          {
            uint64_t v62 = **v60;
            long long v63 = **v61;
            BOOL v64 = *(unsigned __int8 **)(a6 + 8);
            strcpy(v106.i8, "FFFFFFFFF");
            sub_100BBD3DC(v62, v63, (unsigned __int8 *)&v106, v64);
            if (!v106.i8[9])
            {
              BOOL v65 = v106.u8[0] != 84 && v106.u8[0] - 48 >= 0xA;
              if (!v65
                || v106.u8[1] == 84
                || v106.u8[1] - 48 <= 9
                || v106.u8[3] == 84
                || v106.u8[3] - 48 < 0xA)
              {
                goto LABEL_173;
              }
            }
          }
          if (++v61 == v90)
          {
            int64x2_t v59 = v99;
            goto LABEL_120;
          }
        }
      }
    }
  }
  else if ((sub_100BBBC70((double *)&v103, (uint64_t **)&v98, (uint64_t **)&v89, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_155;
  }
LABEL_125:
  int v67 = (double ****)v95;
  int v66 = v96;
  if (a5 <= ((char *)v96 - (unsigned char *)v95) >> 3 && a4 <= 0x63 && ((char *)v87 - (unsigned char *)v86) >> 3 >= a5)
  {
    if (sub_100BBBC70(v101, (uint64_t **)&v95, (uint64_t **)&v86, a4 + 1, a5, a6, a7, a8, a9, a10, a11))
    {
LABEL_148:
      uint64_t v73 = 1;
      goto LABEL_174;
    }
LABEL_155:
    uint64_t v73 = 0;
    goto LABEL_174;
  }
  if (v95 == v96) {
    goto LABEL_148;
  }
  int v68 = v87;
  if (v86 == v87) {
    goto LABEL_148;
  }
  while (v86 == v68)
  {
LABEL_143:
    if (++v67 == v66) {
      goto LABEL_148;
    }
  }
  int v68 = (double ****)v86;
  while (1)
  {
    if (!*(unsigned char *)a6)
    {
      double v69 = **v67;
      double v70 = **v68;
      BOOL v71 = *(unsigned __int8 **)(a6 + 8);
      strcpy(v106.i8, "FFFFFFFFF");
      sub_100BBD3DC(v69, v70, (unsigned __int8 *)&v106, v71);
      if (!v106.i8[9])
      {
        BOOL v72 = v106.u8[0] != 84 && v106.u8[0] - 48 >= 0xA;
        if (!v72
          || v106.u8[1] == 84
          || v106.u8[1] - 48 <= 9
          || v106.u8[3] == 84
          || v106.u8[3] - 48 < 0xA)
        {
          break;
        }
      }
    }
    if (++v68 == v87)
    {
      int v66 = v96;
      goto LABEL_143;
    }
  }
LABEL_173:
  uint64_t v73 = 0;
  *(unsigned char *)a6 = 1;
LABEL_174:
  if (__p)
  {
    uint64_t v84 = (double ****)__p;
    operator delete(__p);
  }
  if (v86)
  {
    uint64_t v87 = (double ****)v86;
    operator delete(v86);
  }
  if (v89)
  {
    uint64_t v90 = (double ****)v89;
    operator delete(v89);
  }
  if (v92)
  {
    uint64_t v93 = (uint64_t *)v92;
    operator delete(v92);
  }
  if (v95)
  {
    uint64_t v96 = (double ****)v95;
    operator delete(v95);
  }
  if (v98)
  {
    uint64_t v99 = (double ****)v98;
    operator delete(v98);
  }
  return v73;
}

void sub_100BBD338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a25) {
    operator delete(a25);
  }
  if (a28) {
    operator delete(a28);
  }
  if (a31) {
    operator delete(a31);
  }
  if (a34) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BBD3DC(double **a1, double **a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  if (!a3[9])
  {
    BOOL v31 = 0;
    BOOL v32 = 0;
    uint64_t v33 = 0;
    v30[0] = a3;
    v30[1] = a1;
    v30[2] = a2;
    LOBYTE(v21) = 0;
    sub_100BBE240(0, a1, 1, a2, (uint64_t)a4, (uint64_t)&v21, (uint64_t)&v31, (uint64_t)v30);
    double v8 = v31;
    if (a3[9]) {
      goto LABEL_34;
    }
    v28[0] = a3;
    v28[1] = a4;
    v28[2] = (unsigned __int8 *)a2;
    BOOL v9 = *a3 == 70 || a3[3] == 70;
    BOOL v10 = !v9;
    int v29 = v10 | 2;
    if (v31 == v32)
    {
      sub_100BC06B8(v28, (uint64_t)a1);
      double v8 = v31;
      if (a3[9]) {
        goto LABEL_34;
      }
    }
    v26[0] = a3;
    v26[1] = a4;
    _OWORD v26[2] = (unsigned __int8 *)a1;
    BOOL v12 = *a3 != 70 && a3[1] != 70;
    int v27 = v12 | 2;
    if (v8 != v32 || (sub_100BC0814(v26, (uint64_t)a2), !a3[9]))
    {
      if (v31 != v32)
      {
        if (*a3 == 70 || a3[3] == 70)
        {
          sub_100BBD688((uint64_t)v31, v32);
          double v21 = 0;
          memset(v22, 0, 14);
          sub_100BBD6E0((uint64_t)a3, (uint64_t)&v21, (uint64_t)v31, (uint64_t)v32);
          if (a3[9]) {
            goto LABEL_33;
          }
          int v17 = *a3;
          int v18 = a3[3];
          if (v17 == 70 || v18 == 70)
          {
            double v21 = a1;
            v22[0] = a2;
            LOBYTE(v22[1]) = 0;
            uint64_t v23 = a3;
            uint64_t v24 = a4;
            BOOL v19 = v17 != 70;
            if (v18 == 70) {
              int v20 = 2;
            }
            else {
              int v20 = 6;
            }
            int v25 = v20 | v19;
            sub_100BBD784((uint64_t)&v21, v31, v32);
            if (a3[9]) {
              goto LABEL_33;
            }
            if (*a3 == 70) {
              goto LABEL_21;
            }
          }
        }
        if (a3[1] == 70)
        {
LABEL_21:
          sub_100BBDC68((uint64_t)v31, v32);
          double v21 = 0;
          memset(v22, 0, 14);
          sub_100BBDCC0((uint64_t)a3, (uint64_t)&v21, (uint64_t)v31, (uint64_t)v32);
          if (!a3[9])
          {
            int v13 = *a3;
            int v14 = a3[1];
            if (v13 == 70 || v14 == 70)
            {
              double v21 = a2;
              v22[0] = a1;
              LOBYTE(v22[1]) = 0;
              uint64_t v23 = a3;
              uint64_t v24 = a4;
              BOOL v15 = v13 != 70;
              if (v14 == 70) {
                int v16 = 2;
              }
              else {
                int v16 = 6;
              }
              int v25 = v16 | v15;
              sub_100BBDD64((uint64_t)&v21, v31, v32);
            }
          }
        }
      }
    }
LABEL_33:
    double v8 = v31;
LABEL_34:
    if (v8)
    {
      BOOL v32 = v8;
      operator delete(v8);
    }
  }
}

void sub_100BBD654(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(void *)(v1 - 64) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_100BBD688(uint64_t a1, void *a2)
{
  unint64_t v2 = 126 - 2 * __clz(0x8F5C28F5C28F5C29 * (((uint64_t)a2 - a1) >> 3));
  if (a2 == (void *)a1) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v2;
  }
  return sub_100BC0970(a1, a2, (uint64_t)&v5, v3, 1);
}

uint64_t sub_100BBD6E0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v5 = a3;
    double v7 = (unsigned __int8 *)result;
    uint64_t v8 = a3;
    while (1)
    {
      uint64_t result = sub_100BC475C(a2, v7, v5);
      if (v7[9]) {
        break;
      }
      v8 += 200;
      v5 += 200;
      if (v8 == a4)
      {
        return sub_100BC48A8(a2, v7);
      }
    }
  }
  return result;
}

uint64_t sub_100BBD784(uint64_t result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    uint64_t v6 = a2[8];
    uint64_t v42 = -1;
    if ((v6 & 0x8000000000000000) == 0)
    {
      do
      {
        uint64_t result = sub_100BC4AB8(v5);
        ++v42;
      }
      while (v42 < v6);
    }
    double v7 = v4 + 25;
    if (v4 + 25 == a3)
    {
      uint64_t v8 = v4;
LABEL_65:
      int v32 = *(_DWORD *)(v5 + 40);
      if ((~v32 & 6) != 0)
      {
        if (v8 != a3)
        {
          LOBYTE(v33) = 0;
          char v34 = 0;
          unint64_t v35 = v8;
          do
          {
            while (1)
            {
              int v36 = *((_DWORD *)v35 + 10);
              if (v36 != 2) {
                break;
              }
              if (*((_DWORD *)v35 + 30) != 2) {
                goto LABEL_89;
              }
              char v34 = 1;
              BOOL v16 = v35 == v4;
              v35 += 25;
              if (v16) {
                goto LABEL_79;
              }
            }
            if (v36 != 1) {
              goto LABEL_89;
            }
            int v33 = *((_DWORD *)v35 + 30);
            if (v33 != 1) {
              goto LABEL_89;
            }
            BOOL v16 = v35 == v4;
            v35 += 25;
          }
          while (!v16);
          if ((v34 & 1) == 0) {
            goto LABEL_84;
          }
          LOBYTE(v33) = 1;
LABEL_79:
          char v37 = *(unsigned __int8 **)(v5 + 24);
          if (*v37 - 58 <= 0xFFFFFFF7)
          {
            *char v37 = 50;
            int v32 = *(_DWORD *)(v5 + 40);
            char v37 = *(unsigned __int8 **)(v5 + 24);
          }
          int v38 = v32 | 1;
          *(_DWORD *)(v5 + 40) = v38;
          if (v37[3] - 58 <= 0xFFFFFFF6)
          {
            v37[3] = 49;
            int v38 = *(_DWORD *)(v5 + 40);
          }
          int v32 = v38 | 4;
          *(_DWORD *)(v5 + 40) = v32;
          if (v33)
          {
LABEL_84:
            v32 |= 2u;
            *(_DWORD *)(v5 + 40) = v32;
          }
        }
        BOOL v39 = v32 == 7 || *(unsigned char *)(*(void *)(v5 + 24) + 9) != 0;
        *(unsigned char *)(v5 + 16) = v39;
      }
LABEL_89:
      uint64_t v40 = v8[8];
      uint64_t v46 = v40 + 1;
      if (v40 <= -2)
      {
        do
        {
          uint64_t result = sub_100BC4AB8(v5);
          uint64_t v41 = v46++;
        }
        while (v41 < -1);
      }
    }
    else
    {
      uint64_t v8 = v4;
      while (1)
      {
        uint64_t v4 = v7;
        if (v8[7] == v8[32])
        {
          uint64_t v9 = v8[8];
          uint64_t v10 = v8[33];
          if (v9 != v10)
          {
            int v11 = *(_DWORD *)(v5 + 40);
            if ((~v11 & 6) != 0)
            {
              LOBYTE(v12) = 0;
              char v13 = 0;
              int v14 = v8;
              do
              {
                while (1)
                {
                  int v15 = *((_DWORD *)v14 + 10);
                  if (v15 != 2) {
                    break;
                  }
                  if (*((_DWORD *)v14 + 30) != 2) {
                    goto LABEL_61;
                  }
                  char v13 = 1;
                  BOOL v16 = v14 == v8;
                  v14 += 25;
                  if (v16) {
                    goto LABEL_21;
                  }
                }
                if (v15 != 1) {
                  goto LABEL_61;
                }
                int v12 = *((_DWORD *)v14 + 30);
                if (v12 != 1) {
                  goto LABEL_61;
                }
                BOOL v16 = v14 == v8;
                v14 += 25;
              }
              while (!v16);
              if ((v13 & 1) == 0) {
                goto LABEL_26;
              }
              LOBYTE(v12) = 1;
LABEL_21:
              int v17 = *(unsigned __int8 **)(v5 + 24);
              if (*v17 - 58 <= 0xFFFFFFF7)
              {
                *int v17 = 50;
                int v11 = *(_DWORD *)(v5 + 40);
                int v17 = *(unsigned __int8 **)(v5 + 24);
              }
              int v18 = v11 | 1;
              *(_DWORD *)(v5 + 40) = v18;
              if (v17[3] - 58 <= 0xFFFFFFF6)
              {
                v17[3] = 49;
                int v18 = *(_DWORD *)(v5 + 40);
              }
              int v11 = v18 | 4;
              if (v12) {
LABEL_26:
              }
                v11 |= 2u;
              *(_DWORD *)(v5 + 40) = v11;
              BOOL v19 = v11 == 7 || *(unsigned char *)(*(void *)(v5 + 24) + 9) != 0;
              *(unsigned char *)(v5 + 16) = v19;
              uint64_t v9 = v8[8];
              uint64_t v10 = v8[33];
            }
LABEL_61:
            for (uint64_t i = v9 + 1; ; uint64_t i = v45 + 1)
            {
              uint64_t v45 = i;
              if (i >= v10) {
                break;
              }
              uint64_t result = sub_100BC4AB8(v5);
            }
          }
        }
        else
        {
          int v20 = *(_DWORD *)(v5 + 40);
          if ((~v20 & 6) != 0)
          {
            LOBYTE(v21) = 0;
            char v22 = 0;
            uint64_t v23 = v8;
            do
            {
              while (1)
              {
                int v24 = *((_DWORD *)v23 + 10);
                if (v24 != 2) {
                  break;
                }
                if (*((_DWORD *)v23 + 30) != 2) {
                  goto LABEL_52;
                }
                char v22 = 1;
                BOOL v16 = v23 == v8;
                v23 += 25;
                if (v16) {
                  goto LABEL_42;
                }
              }
              if (v24 != 1) {
                goto LABEL_52;
              }
              int v21 = *((_DWORD *)v23 + 30);
              if (v21 != 1) {
                goto LABEL_52;
              }
              BOOL v16 = v23 == v8;
              v23 += 25;
            }
            while (!v16);
            if ((v22 & 1) == 0) {
              goto LABEL_47;
            }
            LOBYTE(v21) = 1;
LABEL_42:
            int v25 = *(unsigned __int8 **)(v5 + 24);
            if (*v25 - 58 <= 0xFFFFFFF7)
            {
              *int v25 = 50;
              int v20 = *(_DWORD *)(v5 + 40);
              int v25 = *(unsigned __int8 **)(v5 + 24);
            }
            int v26 = v20 | 1;
            *(_DWORD *)(v5 + 40) = v26;
            if (v25[3] - 58 <= 0xFFFFFFF6)
            {
              v25[3] = 49;
              int v26 = *(_DWORD *)(v5 + 40);
            }
            int v20 = v26 | 4;
            if (v21) {
LABEL_47:
            }
              v20 |= 2u;
            *(_DWORD *)(v5 + 40) = v20;
            BOOL v27 = v20 == 7 || *(unsigned char *)(*(void *)(v5 + 24) + 9) != 0;
            *(unsigned char *)(v5 + 16) = v27;
          }
LABEL_52:
          uint64_t v28 = v8[8];
          uint64_t v43 = v28 + 1;
          if (v28 <= -2)
          {
            do
            {
              uint64_t result = sub_100BC4AB8(v5);
              uint64_t v29 = v43++;
            }
            while (v29 < -1);
          }
          uint64_t v30 = v8[33];
          uint64_t v44 = -1;
          if ((v30 & 0x8000000000000000) == 0)
          {
            do
            {
              uint64_t result = sub_100BC4AB8(v5);
              ++v44;
            }
            while (v44 < v30);
          }
        }
        if (*(unsigned char *)(v5 + 16)) {
          break;
        }
        v8 += 25;
        double v7 = v4 + 25;
        if (v4 + 25 == a3) {
          goto LABEL_65;
        }
      }
    }
  }
  return result;
}

double sub_100BBDC68(uint64_t a1, void *a2)
{
  unint64_t v2 = 126 - 2 * __clz(0x8F5C28F5C28F5C29 * (((uint64_t)a2 - a1) >> 3));
  if (a2 == (void *)a1) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v2;
  }
  return sub_100BC4C20(a1, a2, (uint64_t)&v5, v3, 1);
}

uint64_t sub_100BBDCC0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v5 = a3;
    double v7 = (unsigned __int8 *)result;
    uint64_t v8 = a3;
    while (1)
    {
      uint64_t result = sub_100BC89F4(a2, v7, v5);
      if (v7[9]) {
        break;
      }
      v8 += 200;
      v5 += 200;
      if (v8 == a4)
      {
        return sub_100BC8B40(a2, v7);
      }
    }
  }
  return result;
}

uint64_t sub_100BBDD64(uint64_t result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    uint64_t v6 = a2[18];
    uint64_t v42 = -1;
    if ((v6 & 0x8000000000000000) == 0)
    {
      do
      {
        uint64_t result = sub_100BC8D50(v5);
        ++v42;
      }
      while (v42 < v6);
    }
    double v7 = v4 + 25;
    if (v4 + 25 == a3)
    {
      uint64_t v8 = v4;
LABEL_65:
      int v32 = *(_DWORD *)(v5 + 40);
      if ((~v32 & 6) != 0)
      {
        if (v8 != a3)
        {
          LOBYTE(v33) = 0;
          char v34 = 0;
          unint64_t v35 = v8;
          do
          {
            while (1)
            {
              int v36 = *((_DWORD *)v35 + 10);
              if (v36 != 2) {
                break;
              }
              if (*((_DWORD *)v35 + 30) != 2) {
                goto LABEL_89;
              }
              char v34 = 1;
              BOOL v16 = v35 == v4;
              v35 += 25;
              if (v16) {
                goto LABEL_79;
              }
            }
            if (v36 != 1) {
              goto LABEL_89;
            }
            int v33 = *((_DWORD *)v35 + 30);
            if (v33 != 1) {
              goto LABEL_89;
            }
            BOOL v16 = v35 == v4;
            v35 += 25;
          }
          while (!v16);
          if ((v34 & 1) == 0) {
            goto LABEL_84;
          }
          LOBYTE(v33) = 1;
LABEL_79:
          char v37 = *(unsigned __int8 **)(v5 + 24);
          if (*v37 - 58 <= 0xFFFFFFF7)
          {
            *char v37 = 50;
            int v32 = *(_DWORD *)(v5 + 40);
            char v37 = *(unsigned __int8 **)(v5 + 24);
          }
          int v38 = v32 | 1;
          *(_DWORD *)(v5 + 40) = v38;
          if (v37[1] - 58 <= 0xFFFFFFF6)
          {
            v37[1] = 49;
            int v38 = *(_DWORD *)(v5 + 40);
          }
          int v32 = v38 | 4;
          *(_DWORD *)(v5 + 40) = v32;
          if (v33)
          {
LABEL_84:
            v32 |= 2u;
            *(_DWORD *)(v5 + 40) = v32;
          }
        }
        BOOL v39 = v32 == 7 || *(unsigned char *)(*(void *)(v5 + 24) + 9) != 0;
        *(unsigned char *)(v5 + 16) = v39;
      }
LABEL_89:
      uint64_t v40 = v8[18];
      uint64_t v46 = v40 + 1;
      if (v40 <= -2)
      {
        do
        {
          uint64_t result = sub_100BC8D50(v5);
          uint64_t v41 = v46++;
        }
        while (v41 < -1);
      }
    }
    else
    {
      uint64_t v8 = v4;
      while (1)
      {
        uint64_t v4 = v7;
        if (v8[17] == v8[42])
        {
          uint64_t v9 = v8[18];
          uint64_t v10 = v8[43];
          if (v9 != v10)
          {
            int v11 = *(_DWORD *)(v5 + 40);
            if ((~v11 & 6) != 0)
            {
              LOBYTE(v12) = 0;
              char v13 = 0;
              int v14 = v8;
              do
              {
                while (1)
                {
                  int v15 = *((_DWORD *)v14 + 10);
                  if (v15 != 2) {
                    break;
                  }
                  if (*((_DWORD *)v14 + 30) != 2) {
                    goto LABEL_61;
                  }
                  char v13 = 1;
                  BOOL v16 = v14 == v8;
                  v14 += 25;
                  if (v16) {
                    goto LABEL_21;
                  }
                }
                if (v15 != 1) {
                  goto LABEL_61;
                }
                int v12 = *((_DWORD *)v14 + 30);
                if (v12 != 1) {
                  goto LABEL_61;
                }
                BOOL v16 = v14 == v8;
                v14 += 25;
              }
              while (!v16);
              if ((v13 & 1) == 0) {
                goto LABEL_26;
              }
              LOBYTE(v12) = 1;
LABEL_21:
              int v17 = *(unsigned __int8 **)(v5 + 24);
              if (*v17 - 58 <= 0xFFFFFFF7)
              {
                *int v17 = 50;
                int v11 = *(_DWORD *)(v5 + 40);
                int v17 = *(unsigned __int8 **)(v5 + 24);
              }
              int v18 = v11 | 1;
              *(_DWORD *)(v5 + 40) = v18;
              if (v17[1] - 58 <= 0xFFFFFFF6)
              {
                v17[1] = 49;
                int v18 = *(_DWORD *)(v5 + 40);
              }
              int v11 = v18 | 4;
              if (v12) {
LABEL_26:
              }
                v11 |= 2u;
              *(_DWORD *)(v5 + 40) = v11;
              BOOL v19 = v11 == 7 || *(unsigned char *)(*(void *)(v5 + 24) + 9) != 0;
              *(unsigned char *)(v5 + 16) = v19;
              uint64_t v9 = v8[18];
              uint64_t v10 = v8[43];
            }
LABEL_61:
            for (uint64_t i = v9 + 1; ; uint64_t i = v45 + 1)
            {
              uint64_t v45 = i;
              if (i >= v10) {
                break;
              }
              uint64_t result = sub_100BC8D50(v5);
            }
          }
        }
        else
        {
          int v20 = *(_DWORD *)(v5 + 40);
          if ((~v20 & 6) != 0)
          {
            LOBYTE(v21) = 0;
            char v22 = 0;
            uint64_t v23 = v8;
            do
            {
              while (1)
              {
                int v24 = *((_DWORD *)v23 + 10);
                if (v24 != 2) {
                  break;
                }
                if (*((_DWORD *)v23 + 30) != 2) {
                  goto LABEL_52;
                }
                char v22 = 1;
                BOOL v16 = v23 == v8;
                v23 += 25;
                if (v16) {
                  goto LABEL_42;
                }
              }
              if (v24 != 1) {
                goto LABEL_52;
              }
              int v21 = *((_DWORD *)v23 + 30);
              if (v21 != 1) {
                goto LABEL_52;
              }
              BOOL v16 = v23 == v8;
              v23 += 25;
            }
            while (!v16);
            if ((v22 & 1) == 0) {
              goto LABEL_47;
            }
            LOBYTE(v21) = 1;
LABEL_42:
            int v25 = *(unsigned __int8 **)(v5 + 24);
            if (*v25 - 58 <= 0xFFFFFFF7)
            {
              *int v25 = 50;
              int v20 = *(_DWORD *)(v5 + 40);
              int v25 = *(unsigned __int8 **)(v5 + 24);
            }
            int v26 = v20 | 1;
            *(_DWORD *)(v5 + 40) = v26;
            if (v25[1] - 58 <= 0xFFFFFFF6)
            {
              v25[1] = 49;
              int v26 = *(_DWORD *)(v5 + 40);
            }
            int v20 = v26 | 4;
            if (v21) {
LABEL_47:
            }
              v20 |= 2u;
            *(_DWORD *)(v5 + 40) = v20;
            BOOL v27 = v20 == 7 || *(unsigned char *)(*(void *)(v5 + 24) + 9) != 0;
            *(unsigned char *)(v5 + 16) = v27;
          }
LABEL_52:
          uint64_t v28 = v8[18];
          uint64_t v43 = v28 + 1;
          if (v28 <= -2)
          {
            do
            {
              uint64_t result = sub_100BC8D50(v5);
              uint64_t v29 = v43++;
            }
            while (v29 < -1);
          }
          uint64_t v30 = v8[43];
          uint64_t v44 = -1;
          if ((v30 & 0x8000000000000000) == 0)
          {
            do
            {
              uint64_t result = sub_100BC8D50(v5);
              ++v44;
            }
            while (v44 < v30);
          }
        }
        if (*(unsigned char *)(v5 + 16)) {
          break;
        }
        v8 += 25;
        double v7 = v4 + 25;
        if (v4 + 25 == a3) {
          goto LABEL_65;
        }
      }
    }
  }
  return result;
}

void sub_100BBE240(int a1, double **a2, int a3, double **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v53 = 0;
  BOOL v54 = 0;
  uint64_t v55 = 0;
  long long __p = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  BOOL v16 = *a2;
  int v17 = a2[1];
  if ((unint64_t)((char *)v17 - (char *)v16) > 0x1F)
  {
    uint64_t v42 = 0;
    uint64_t v43 = -1;
    uint64_t v44 = -1;
    sub_100BAE40C(&v53, v16, v17, a6, a5, (uint64_t)&v42, 0xAuLL);
    int v18 = v53;
    BOOL v19 = v54;
    if (v53 != v54)
    {
      __asm { FMOV            V0.2D, #1.0 }
      do
      {
        float64x2_t v25 = *(float64x2_t *)(v18 + 4);
        float64x2_t v26 = *(float64x2_t *)(v18 + 6);
        float64x2_t v27 = vabsq_f64(v25);
        float64x2_t v28 = vsubq_f64(v25, (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(_Q0, v27), (int8x16_t)xmmword_101D82D90, (int8x16_t)vmulq_f64(v27, (float64x2_t)xmmword_101D82D90)));
        float64x2_t v29 = vabsq_f64(v26);
        *((float64x2_t *)v18 + 2) = v28;
        *((float64x2_t *)v18 + 3) = vaddq_f64(v26, (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(_Q0, v29), (int8x16_t)xmmword_101D82D90, (int8x16_t)vmulq_f64(v29, (float64x2_t)xmmword_101D82D90)));
        v18 += 15;
      }
      while (v18 != v19);
    }
  }
  uint64_t v51 = 0;
  uint64_t v30 = *a4;
  BOOL v31 = a4[1];
  if ((unint64_t)((char *)v31 - (char *)*a4) > 0x1F)
  {
    uint64_t v42 = 1;
    uint64_t v43 = -1;
    uint64_t v44 = -1;
    sub_100BAE40C(&__p, v30, v31, a6, a5, (uint64_t)&v42, 0xAuLL);
    int v32 = (float64x2_t *)__p;
    int v33 = v51;
    if (__p != v51)
    {
      __asm { FMOV            V0.2D, #1.0 }
      do
      {
        float64x2_t v35 = v32[2];
        float64x2_t v36 = v32[3];
        float64x2_t v37 = vabsq_f64(v35);
        float64x2_t v38 = vsubq_f64(v35, (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(_Q0, v37), (int8x16_t)xmmword_101D82D90, (int8x16_t)vmulq_f64(v37, (float64x2_t)xmmword_101D82D90)));
        float64x2_t v39 = vabsq_f64(v36);
        v32[2] = v38;
        v32[3] = vaddq_f64(v36, (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(_Q0, v39), (int8x16_t)xmmword_101D82D90, (int8x16_t)vmulq_f64(v39, (float64x2_t)xmmword_101D82D90)));
        int v32 = (float64x2_t *)((char *)v32 + 120);
      }
      while (v32 != v33);
    }
  }
  LODWORD(v42) = a1;
  uint64_t v43 = (uint64_t)a2;
  LODWORD(v44) = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a5;
  uint64_t v47 = a6;
  uint64_t v48 = a7;
  uint64_t v49 = a8;
  uint64_t v40 = a5;
  uint64_t v41 = a5;
  sub_100BBE458(&v53, (double **)&__p, (uint64_t)&v42, (uint64_t)&v41, (uint64_t)&v40, (uint64_t)&v41, (uint64_t)&v40, 0x10uLL);
  if (__p)
  {
    uint64_t v51 = (float64x2_t *)__p;
    operator delete(__p);
  }
  if (v53)
  {
    BOOL v54 = v53;
    operator delete(v53);
  }
}

void sub_100BBE428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  char v22 = *(void **)(v20 - 88);
  if (v22)
  {
    *(void *)(v20 - 80) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BBE458(double **a1, double **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  int v12 = *a1;
  int v11 = a1[1];
  if (0xEEEEEEEEEEEEEEEFLL * (v11 - *a1) <= a8 || (v15 = *a2, int v14 = a2[1], 0xEEEEEEEEEEEEEEEFLL * (v14 - *a2) <= a8))
  {
    if (v12 == v11)
    {
      return 1;
    }
    else
    {
      float64x2_t v38 = a2[1];
      while (1)
      {
        float64x2_t v39 = *a2;
        if (*a2 != v38) {
          break;
        }
LABEL_50:
        v12 += 15;
        if (v12 == v11) {
          return 1;
        }
      }
      while ((sub_100BBEFB8(a3, v12, v39) & 1) != 0)
      {
        v39 += 15;
        if (v39 == a2[1])
        {
          int v11 = a1[1];
          float64x2_t v38 = v39;
          goto LABEL_50;
        }
      }
      return 0;
    }
  }
  else
  {
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    long long __p = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    v44[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v44[1] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    if (v12 != v11)
    {
      do
      {
        sub_100BB17D8((double *)v44, v12 + 4);
        int v17 = v49;
        if (v49 >= v50)
        {
          uint64_t v19 = (v49 - (unsigned char *)v48) >> 3;
          if ((unint64_t)(v19 + 1) >> 61) {
LABEL_54:
          }
            sub_1001D7FD4();
          unint64_t v20 = (v50 - (unsigned char *)v48) >> 2;
          if (v20 <= v19 + 1) {
            unint64_t v20 = v19 + 1;
          }
          if ((unint64_t)(v50 - (unsigned char *)v48) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21) {
            char v22 = (char *)sub_1000DA54C((uint64_t)&v50, v21);
          }
          else {
            char v22 = 0;
          }
          uint64_t v23 = (double **)&v22[8 * v19];
          *uint64_t v23 = v12;
          int v18 = (char *)(v23 + 1);
          float64x2_t v25 = (char *)v48;
          int v24 = v49;
          if (v49 != v48)
          {
            do
            {
              float64x2_t v26 = (double *)*((void *)v24 - 1);
              v24 -= 8;
              *--uint64_t v23 = v26;
            }
            while (v24 != v25);
            int v24 = (char *)v48;
          }
          uint64_t v48 = v23;
          uint64_t v49 = v18;
          uint64_t v50 = &v22[8 * v21];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *(void *)uint64_t v49 = v12;
          int v18 = v17 + 8;
        }
        uint64_t v49 = v18;
        v12 += 15;
      }
      while (v12 != a1[1]);
      int v15 = *a2;
      int v14 = a2[1];
    }
    if (v15 != v14)
    {
      do
      {
        sub_100BB17D8((double *)v44, v15 + 4);
        float64x2_t v27 = v46;
        if (v46 >= v47)
        {
          uint64_t v29 = (v46 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v29 + 1) >> 61) {
            goto LABEL_54;
          }
          unint64_t v30 = (v47 - (unsigned char *)__p) >> 2;
          if (v30 <= v29 + 1) {
            unint64_t v30 = v29 + 1;
          }
          if ((unint64_t)(v47 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v30;
          }
          if (v31) {
            int v32 = (char *)sub_1000DA54C((uint64_t)&v47, v31);
          }
          else {
            int v32 = 0;
          }
          int v33 = (double **)&v32[8 * v29];
          *int v33 = v15;
          float64x2_t v28 = (char *)(v33 + 1);
          float64x2_t v35 = (char *)__p;
          char v34 = v46;
          if (v46 != __p)
          {
            do
            {
              float64x2_t v36 = (double *)*((void *)v34 - 1);
              v34 -= 8;
              *--int v33 = v36;
            }
            while (v34 != v35);
            char v34 = (char *)__p;
          }
          long long __p = v33;
          uint64_t v46 = v28;
          uint64_t v47 = &v32[8 * v31];
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          *(void *)uint64_t v46 = v15;
          float64x2_t v28 = v27 + 8;
        }
        uint64_t v46 = v28;
        v15 += 15;
      }
      while (v15 != a2[1]);
    }
    uint64_t v37 = sub_100BBE7C0((double *)v44, (uint64_t **)&v48, (uint64_t **)&__p, 0, a8, a3, a4, a5, a6, a7, (uint64_t)&v51);
    if (__p)
    {
      uint64_t v46 = (char *)__p;
      operator delete(__p);
    }
    if (v48)
    {
      uint64_t v49 = (char *)v48;
      operator delete(v48);
    }
  }
  return v37;
}

void sub_100BBE78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BBE7C0(double *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  double v17 = (*a1 + a1[2]) * 0.5;
  long long v18 = *((_OWORD *)a1 + 1);
  long long v77 = *(_OWORD *)a1;
  uint64_t v79 = *((void *)&v18 + 1);
  v75[1] = *((double *)&v77 + 1);
  long long v76 = v18;
  double v78 = v17;
  v75[0] = v17;
  BOOL v72 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  double v69 = 0;
  double v70 = 0;
  uint64_t v71 = 0;
  int v66 = 0;
  int v67 = 0;
  uint64_t v68 = 0;
  long long v63 = 0;
  BOOL v64 = 0;
  uint64_t v65 = 0;
  char v60 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  long long __p = 0;
  int64x2_t v58 = 0;
  uint64_t v59 = 0;
  sub_100BB19D4((double *)&v77, v75, a2, &v72, &v69, &v66);
  sub_100BB19D4((double *)&v77, v75, a3, &v63, &v60, &__p);
  unint64_t v20 = (double **)v66;
  uint64_t v19 = v67;
  if (v66 != v67)
  {
    unint64_t v21 = v58;
    if (a5 > ((char *)v67 - (unsigned char *)v66) >> 3 || a4 > 0x63 || ((char *)v58 - (unsigned char *)__p) >> 3 < a5)
    {
      if (__p != v58)
      {
        while (1)
        {
          char v22 = (double **)__p;
          if (__p != v21) {
            break;
          }
LABEL_8:
          if (++v20 == v19) {
            goto LABEL_18;
          }
        }
        while ((sub_100BBEFB8(a6, *v20, *v22) & 1) != 0)
        {
          if (++v22 == v58)
          {
            uint64_t v19 = v67;
            unint64_t v21 = v22;
            goto LABEL_8;
          }
        }
        goto LABEL_95;
      }
    }
    else
    {
      int64x2_t v55 = 0u;
      int64x2_t v56 = 0u;
      int64x2_t v80 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      int64x2_t v81 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      do
        sub_100BB17D8((double *)v80.i64, *v20++ + 4);
      while (v20 != v67);
      uint64_t v24 = v80.i64[1];
      uint64_t v23 = v80.i64[0];
      uint64_t v26 = v81.i64[1];
      uint64_t v25 = v81.i64[0];
      float64x2_t v27 = (double **)__p;
      if (__p != v58)
      {
        do
          sub_100BB17D8((double *)v80.i64, *v27++ + 4);
        while (v27 != v58);
        uint64_t v24 = v80.i64[1];
        uint64_t v23 = v80.i64[0];
        uint64_t v26 = v81.i64[1];
        uint64_t v25 = v81.i64[0];
      }
      v55.i64[0] = v23;
      v55.i64[1] = v24;
      v56.i64[0] = v25;
      v56.i64[1] = v26;
      if ((sub_100BBF1F8((double *)v55.i64, (uint64_t **)&v66, (uint64_t **)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0) {
        goto LABEL_95;
      }
    }
LABEL_18:
    float64x2_t v28 = v64;
    if (a5 > ((char *)v64 - (unsigned char *)v63) >> 3)
    {
      unint64_t v30 = (double **)v66;
      uint64_t v29 = v67;
      goto LABEL_21;
    }
    unint64_t v30 = (double **)v66;
    uint64_t v29 = v67;
    if (a5 > ((char *)v61 - (unsigned char *)v60) >> 3 || a4 > 0x63 || ((char *)v67 - (unsigned char *)v66) >> 3 < a5)
    {
LABEL_21:
      if (v63 != v64 && v30 != v29)
      {
        while (1)
        {
          unint64_t v31 = (double **)v63;
          if (v63 != v28) {
            break;
          }
LABEL_27:
          if (++v30 == v29)
          {
            unint64_t v30 = (double **)v66;
            goto LABEL_29;
          }
        }
        while ((sub_100BBEFB8(a6, *v30, *v31) & 1) != 0)
        {
          if (++v31 == v64)
          {
            uint64_t v29 = v67;
            float64x2_t v28 = v31;
            goto LABEL_27;
          }
        }
        goto LABEL_95;
      }
LABEL_29:
      if (v30 != v29)
      {
        int v32 = v61;
        if (v60 != v61)
        {
          while (1)
          {
            int v33 = (double **)v60;
            if (v60 != v32) {
              break;
            }
LABEL_35:
            if (++v30 == v29) {
              goto LABEL_44;
            }
          }
          while ((sub_100BBEFB8(a6, *v30, *v33) & 1) != 0)
          {
            if (++v33 == v61)
            {
              uint64_t v29 = v67;
              int v32 = v33;
              goto LABEL_35;
            }
          }
          goto LABEL_95;
        }
      }
      goto LABEL_44;
    }
    int64x2_t v55 = 0u;
    int64x2_t v56 = 0u;
    int64x2_t v34 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int64x2_t v35 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    int64x2_t v80 = v34;
    int64x2_t v81 = v35;
    if (v66 != v67)
    {
      do
        sub_100BB17D8((double *)v80.i64, *v30++ + 4);
      while (v30 != v67);
      int64x2_t v34 = v80;
      int64x2_t v35 = v81;
    }
    int64x2_t v55 = v34;
    int64x2_t v56 = v35;
    if (!sub_100BBF1F8((double *)v55.i64, (uint64_t **)&v66, (uint64_t **)&v63, a4 + 1, a5, a6, a7, a8, a9, a10, a11)|| (sub_100BBF1F8((double *)v55.i64, (uint64_t **)&v66, (uint64_t **)&v60, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_95;
    }
  }
LABEL_44:
  uint64_t v37 = (double **)__p;
  float64x2_t v36 = v58;
  if (__p == v58) {
    goto LABEL_58;
  }
  float64x2_t v39 = (double **)v72;
  float64x2_t v38 = v73;
  if (a5 > ((char *)v73 - (unsigned char *)v72) >> 3
    || a5 > ((char *)v70 - (unsigned char *)v69) >> 3
    || a4 > 0x63
    || ((char *)v58 - (unsigned char *)__p) >> 3 < a5)
  {
    while (v39 != v38)
    {
      uint64_t v40 = (double **)__p;
      if (__p != v36)
      {
        while ((sub_100BBEFB8(a6, *v39, *v40) & 1) != 0)
        {
          if (++v40 == v58)
          {
            float64x2_t v38 = v73;
            float64x2_t v36 = v40;
            goto LABEL_52;
          }
        }
        goto LABEL_95;
      }
LABEL_52:
      ++v39;
    }
    uint64_t v42 = (double **)v69;
    uint64_t v41 = v70;
    if (v69 == v70 || __p == v36) {
      goto LABEL_58;
    }
    while (1)
    {
      uint64_t v50 = (double **)__p;
      if (__p != v36) {
        break;
      }
LABEL_79:
      if (++v42 == v41) {
        goto LABEL_58;
      }
    }
    while ((sub_100BBEFB8(a6, *v42, *v50) & 1) != 0)
    {
      if (++v50 == v58)
      {
        uint64_t v41 = v70;
        float64x2_t v36 = v50;
        goto LABEL_79;
      }
    }
    goto LABEL_95;
  }
  int64x2_t v55 = 0u;
  int64x2_t v56 = 0u;
  int64x2_t v80 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int64x2_t v81 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  do
    sub_100BB17D8((double *)v80.i64, *v37++ + 4);
  while (v37 != v58);
  int64x2_t v55 = v80;
  int64x2_t v56 = v81;
  if (sub_100BBF1F8((double *)v55.i64, (uint64_t **)&v72, (uint64_t **)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11))
  {
    if (sub_100BBF1F8((double *)v55.i64, (uint64_t **)&v69, (uint64_t **)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11))
    {
LABEL_58:
      uint64_t v45 = (double **)v72;
      uint64_t v44 = v73;
      if (a5 > ((char *)v73 - (unsigned char *)v72) >> 3 || a4 > 0x63 || ((char *)v64 - (unsigned char *)v63) >> 3 < a5)
      {
        if (v72 != v73)
        {
          uint64_t v46 = v64;
          if (v63 != v64)
          {
            while (1)
            {
              uint64_t v47 = (double **)v63;
              if (v63 != v46) {
                break;
              }
LABEL_69:
              if (++v45 == v44) {
                goto LABEL_70;
              }
            }
            while ((sub_100BBEFB8(a6, *v45, *v47) & 1) != 0)
            {
              if (++v47 == v64)
              {
                uint64_t v44 = v73;
                uint64_t v46 = v47;
                goto LABEL_69;
              }
            }
            goto LABEL_95;
          }
        }
      }
      else if ((sub_100BBF1F8((double *)&v77, (uint64_t **)&v72, (uint64_t **)&v63, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_95;
      }
LABEL_70:
      uint64_t v49 = (double **)v69;
      uint64_t v48 = v70;
      if (a5 > ((char *)v70 - (unsigned char *)v69) >> 3 || a4 > 0x63 || ((char *)v61 - (unsigned char *)v60) >> 3 < a5)
      {
        if (v69 != v70)
        {
          char v51 = v61;
          if (v60 != v61)
          {
            while (1)
            {
              uint64_t v52 = (double **)v60;
              if (v60 != v51) {
                break;
              }
LABEL_87:
              if (++v49 == v48) {
                goto LABEL_88;
              }
            }
            while ((sub_100BBEFB8(a6, *v49, *v52) & 1) != 0)
            {
              if (++v52 == v61)
              {
                uint64_t v48 = v70;
                char v51 = v52;
                goto LABEL_87;
              }
            }
            goto LABEL_95;
          }
        }
      }
      else if ((sub_100BBF1F8(v75, (uint64_t **)&v69, (uint64_t **)&v60, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_95;
      }
LABEL_88:
      uint64_t v53 = 1;
      goto LABEL_96;
    }
  }
LABEL_95:
  uint64_t v53 = 0;
LABEL_96:
  if (__p)
  {
    int64x2_t v58 = (double **)__p;
    operator delete(__p);
  }
  if (v60)
  {
    uint64_t v61 = (double **)v60;
    operator delete(v60);
  }
  if (v63)
  {
    BOOL v64 = (double **)v63;
    operator delete(v63);
  }
  if (v66)
  {
    int v67 = (double **)v66;
    operator delete(v66);
  }
  if (v69)
  {
    double v70 = (double **)v69;
    operator delete(v69);
  }
  if (v72)
  {
    uint64_t v73 = (double **)v72;
    operator delete(v72);
  }
  return v53;
}

void sub_100BBEF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    operator delete(a29);
  }
  if (a32) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BBEFB8(uint64_t a1, double *a2, double *a3)
{
  double v6 = a2[4];
  double v7 = a2[6];
  if (v7 - v6 >= 360.0) {
    goto LABEL_11;
  }
  double v8 = a3[4];
  double v9 = a3[6];
  double v10 = v9 - v8;
  if (v9 - v8 >= 360.0) {
    goto LABEL_11;
  }
  double v11 = vabdd_f64(v8, v6);
  double v12 = 180.0;
  if (v11 == 180.0) {
    goto LABEL_4;
  }
  double v13 = v8 - v6;
  if ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v17 = fabs(v11 + -180.0);
    double v12 = 180.0;
    if (v11 < 180.0) {
      double v11 = 180.0;
    }
    double v18 = v11 >= 1.0 ? v11 * 2.22044605e-16 : 2.22044605e-16;
    if (v17 <= v18) {
      goto LABEL_4;
    }
  }
  double v12 = 180.0;
  if (v13 <= 180.0)
  {
    if (v13 >= -180.0) {
      goto LABEL_5;
    }
    double v12 = fmod(v13 + -180.0, 360.0) + 180.0;
LABEL_4:
    double v13 = v12;
    goto LABEL_5;
  }
  double v13 = fmod(v13 + 180.0, 360.0) + -180.0;
  if (v13 == -180.0) {
    goto LABEL_4;
  }
  BOOL v19 = ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
     && (*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
  if (!v19 || *(void *)&v13 == 0)
  {
    double v12 = 180.0;
    double v21 = fabs(v13 + 180.0);
    double v22 = fabs(v13);
    if (v22 < 180.0) {
      double v22 = 180.0;
    }
    double v23 = v22 >= 1.0 ? v22 * 2.22044605e-16 : 2.22044605e-16;
    if (v21 <= v23) {
      goto LABEL_4;
    }
  }
LABEL_5:
  if (v13 < 0.0) {
    double v13 = v13 + 360.0;
  }
  double v14 = v6 + v13;
  double v15 = v10 + v6 + v13 + -360.0;
  if (vabdd_f64(v15, v9) < 180.0) {
    double v15 = v9;
  }
  if (v14 > v7 && v15 < v6) {
    return 1;
  }
LABEL_11:
  if (a2[7] < a3[5] || a2[5] > a3[7]) {
    return 1;
  }
  return sub_100BBF9FC(*(_DWORD *)a1, *(void **)(a1 + 8), (uint64_t)a2, *(_DWORD *)(a1 + 16), *(long long ***)(a1 + 24), (uint64_t)a3, 0, 0, *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned __int8 ***)(a1 + 56));
}

uint64_t sub_100BBF1F8(double *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  long long v17 = *(_OWORD *)a1;
  double v18 = (a1[1] + a1[3]) * 0.5;
  uint64_t v79 = *((void *)a1 + 2);
  long long v19 = *((_OWORD *)a1 + 1);
  *(void *)&v76[0] = v17;
  long long v77 = v19;
  long long v78 = v17;
  double v80 = v18;
  v76[1] = v18;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  double v70 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  int v67 = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  BOOL v64 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  long long __p = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  sub_100BB19D4((double *)&v78, v76, a2, &v73, &v70, &v67);
  sub_100BB19D4((double *)&v78, v76, a3, &v64, &v61, &__p);
  double v21 = (double **)v67;
  unint64_t v20 = v68;
  if (v67 != v68)
  {
    double v22 = v59;
    if (a5 > ((char *)v68 - (unsigned char *)v67) >> 3 || a4 > 0x63 || ((char *)v59 - (unsigned char *)__p) >> 3 < a5)
    {
      if (__p != v59)
      {
        while (1)
        {
          double v23 = (double **)__p;
          if (__p != v22) {
            break;
          }
LABEL_8:
          if (++v21 == v20) {
            goto LABEL_18;
          }
        }
        while ((sub_100BBEFB8(a6, *v21, *v23) & 1) != 0)
        {
          if (++v23 == v59)
          {
            unint64_t v20 = v68;
            double v22 = v23;
            goto LABEL_8;
          }
        }
        goto LABEL_95;
      }
    }
    else
    {
      int64x2_t v56 = 0u;
      int64x2_t v57 = 0u;
      int64x2_t v81 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      int64x2_t v82 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      do
        sub_100BB17D8((double *)v81.i64, *v21++ + 4);
      while (v21 != v68);
      uint64_t v25 = v81.i64[1];
      uint64_t v24 = v81.i64[0];
      uint64_t v27 = v82.i64[1];
      uint64_t v26 = v82.i64[0];
      float64x2_t v28 = (double **)__p;
      if (__p != v59)
      {
        do
          sub_100BB17D8((double *)v81.i64, *v28++ + 4);
        while (v28 != v59);
        uint64_t v25 = v81.i64[1];
        uint64_t v24 = v81.i64[0];
        uint64_t v27 = v82.i64[1];
        uint64_t v26 = v82.i64[0];
      }
      v56.i64[0] = v24;
      v56.i64[1] = v25;
      v57.i64[0] = v26;
      v57.i64[1] = v27;
      if ((sub_100BBE7C0(&v56, &v67, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0) {
        goto LABEL_95;
      }
    }
LABEL_18:
    uint64_t v29 = v65;
    if (a5 > ((char *)v65 - (unsigned char *)v64) >> 3)
    {
      unint64_t v31 = (double **)v67;
      unint64_t v30 = v68;
      goto LABEL_21;
    }
    unint64_t v31 = (double **)v67;
    unint64_t v30 = v68;
    if (a5 > ((char *)v62 - (unsigned char *)v61) >> 3 || a4 > 0x63 || ((char *)v68 - (unsigned char *)v67) >> 3 < a5)
    {
LABEL_21:
      if (v64 != v65 && v31 != v30)
      {
        while (1)
        {
          int v32 = (double **)v64;
          if (v64 != v29) {
            break;
          }
LABEL_27:
          if (++v31 == v30)
          {
            unint64_t v31 = (double **)v67;
            goto LABEL_29;
          }
        }
        while ((sub_100BBEFB8(a6, *v31, *v32) & 1) != 0)
        {
          if (++v32 == v65)
          {
            unint64_t v30 = v68;
            uint64_t v29 = v32;
            goto LABEL_27;
          }
        }
        goto LABEL_95;
      }
LABEL_29:
      if (v31 != v30)
      {
        int v33 = v62;
        if (v61 != v62)
        {
          while (1)
          {
            int64x2_t v34 = (double **)v61;
            if (v61 != v33) {
              break;
            }
LABEL_35:
            if (++v31 == v30) {
              goto LABEL_44;
            }
          }
          while ((sub_100BBEFB8(a6, *v31, *v34) & 1) != 0)
          {
            if (++v34 == v62)
            {
              unint64_t v30 = v68;
              int v33 = v34;
              goto LABEL_35;
            }
          }
          goto LABEL_95;
        }
      }
      goto LABEL_44;
    }
    int64x2_t v56 = 0u;
    int64x2_t v57 = 0u;
    int64x2_t v35 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int64x2_t v36 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    int64x2_t v81 = v35;
    int64x2_t v82 = v36;
    if (v67 != v68)
    {
      do
        sub_100BB17D8((double *)v81.i64, *v31++ + 4);
      while (v31 != v68);
      int64x2_t v35 = v81;
      int64x2_t v36 = v82;
    }
    int64x2_t v56 = v35;
    int64x2_t v57 = v36;
    if (!sub_100BBE7C0(&v56, &v67, &v64, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      || (sub_100BBE7C0(&v56, &v67, &v61, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_95;
    }
  }
LABEL_44:
  float64x2_t v38 = (double **)__p;
  uint64_t v37 = v59;
  if (__p == v59) {
    goto LABEL_58;
  }
  uint64_t v40 = (double **)v73;
  float64x2_t v39 = v74;
  if (a5 > ((char *)v74 - (unsigned char *)v73) >> 3
    || a5 > ((char *)v71 - (unsigned char *)v70) >> 3
    || a4 > 0x63
    || ((char *)v59 - (unsigned char *)__p) >> 3 < a5)
  {
    while (v40 != v39)
    {
      uint64_t v41 = (double **)__p;
      if (__p != v37)
      {
        while ((sub_100BBEFB8(a6, *v40, *v41) & 1) != 0)
        {
          if (++v41 == v59)
          {
            float64x2_t v39 = v74;
            uint64_t v37 = v41;
            goto LABEL_52;
          }
        }
        goto LABEL_95;
      }
LABEL_52:
      ++v40;
    }
    uint64_t v43 = (double **)v70;
    uint64_t v42 = v71;
    if (v70 == v71 || __p == v37) {
      goto LABEL_58;
    }
    while (1)
    {
      char v51 = (double **)__p;
      if (__p != v37) {
        break;
      }
LABEL_79:
      if (++v43 == v42) {
        goto LABEL_58;
      }
    }
    while ((sub_100BBEFB8(a6, *v43, *v51) & 1) != 0)
    {
      if (++v51 == v59)
      {
        uint64_t v42 = v71;
        uint64_t v37 = v51;
        goto LABEL_79;
      }
    }
    goto LABEL_95;
  }
  int64x2_t v56 = 0u;
  int64x2_t v57 = 0u;
  int64x2_t v81 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int64x2_t v82 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  do
    sub_100BB17D8((double *)v81.i64, *v38++ + 4);
  while (v38 != v59);
  int64x2_t v56 = v81;
  int64x2_t v57 = v82;
  if (sub_100BBE7C0(&v56, &v73, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11))
  {
    if (sub_100BBE7C0(&v56, &v70, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11))
    {
LABEL_58:
      uint64_t v46 = (double **)v73;
      uint64_t v45 = v74;
      if (a5 > ((char *)v74 - (unsigned char *)v73) >> 3 || a4 > 0x63 || ((char *)v65 - (unsigned char *)v64) >> 3 < a5)
      {
        if (v73 != v74)
        {
          uint64_t v47 = v65;
          if (v64 != v65)
          {
            while (1)
            {
              uint64_t v48 = (double **)v64;
              if (v64 != v47) {
                break;
              }
LABEL_69:
              if (++v46 == v45) {
                goto LABEL_70;
              }
            }
            while ((sub_100BBEFB8(a6, *v46, *v48) & 1) != 0)
            {
              if (++v48 == v65)
              {
                uint64_t v45 = v74;
                uint64_t v47 = v48;
                goto LABEL_69;
              }
            }
            goto LABEL_95;
          }
        }
      }
      else if ((sub_100BBE7C0(&v78, &v73, &v64, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_95;
      }
LABEL_70:
      uint64_t v50 = (double **)v70;
      uint64_t v49 = v71;
      if (a5 > ((char *)v71 - (unsigned char *)v70) >> 3 || a4 > 0x63 || ((char *)v62 - (unsigned char *)v61) >> 3 < a5)
      {
        if (v70 != v71)
        {
          uint64_t v52 = v62;
          if (v61 != v62)
          {
            while (1)
            {
              uint64_t v53 = (double **)v61;
              if (v61 != v52) {
                break;
              }
LABEL_87:
              if (++v50 == v49) {
                goto LABEL_88;
              }
            }
            while ((sub_100BBEFB8(a6, *v50, *v53) & 1) != 0)
            {
              if (++v53 == v62)
              {
                uint64_t v49 = v71;
                uint64_t v52 = v53;
                goto LABEL_87;
              }
            }
            goto LABEL_95;
          }
        }
      }
      else if ((sub_100BBE7C0(v76, &v70, &v61, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_95;
      }
LABEL_88:
      uint64_t v54 = 1;
      goto LABEL_96;
    }
  }
LABEL_95:
  uint64_t v54 = 0;
LABEL_96:
  if (__p)
  {
    uint64_t v59 = (double **)__p;
    operator delete(__p);
  }
  if (v61)
  {
    uint64_t v62 = (double **)v61;
    operator delete(v61);
  }
  if (v64)
  {
    uint64_t v65 = (double **)v64;
    operator delete(v64);
  }
  if (v67)
  {
    uint64_t v68 = (double **)v67;
    operator delete(v67);
  }
  if (v70)
  {
    uint64_t v71 = (double **)v70;
    operator delete(v70);
  }
  if (v73)
  {
    uint64_t v74 = (double **)v73;
    operator delete(v73);
  }
  return v54;
}

void sub_100BBF958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    operator delete(a29);
  }
  if (a32) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BBF9FC(int a1, void *a2, uint64_t a3, int a4, long long **a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 **a12)
{
  uint64_t i = (void *)a6;
  double v13 = (double *)a3;
  if (*(unsigned char *)(a3 + 96) && (unint64_t)(*(void *)(a3 + 80) + 1) < *(void *)(a3 + 88)
    || *(unsigned char *)(a6 + 96) && (unint64_t)(*(void *)(a6 + 80) + 1) < *(void *)(a6 + 88))
  {
    return 1;
  }
  double v14 = (_OWORD *)*a2;
  double v15 = (_OWORD *)a2[1];
  uint64_t v66 = a5[1];
  int v67 = *a5;
  int v64 = *(_DWORD *)a6;
  double v70 = (double *)(a6 + 32);
  int v16 = *(_DWORD *)a3;
  uint64_t v17 = *(void *)(a3 + 104);
  uint64_t v19 = *(void *)(a3 + 64);
  uint64_t v18 = *(void *)(a3 + 72);
  unint64_t v20 = (_OWORD *)(*a2 + 16 * v19);
  if (v19 != v18)
  {
    uint64_t v68 = *(void *)(a3 + 72);
    double v21 = &v14[v19];
    uint64_t v22 = 16 * v18 - 16 * v19;
    double v23 = v21;
    while (1)
    {
      long long v24 = v21[1];
      ++v21;
      long long v71 = v24;
      if (!sub_100BB3DF4(v16, (double *)&v71, v13 + 4, v70)) {
        break;
      }
      ++v19;
      ++v17;
      double v23 = v21;
      v22 -= 16;
      if (!v22) {
        return 1;
      }
    }
    uint64_t i = (void *)a6;
    unint64_t v20 = v23;
    uint64_t v18 = v68;
  }
  uint64_t result = 1;
  uint64_t v52 = &v14[v18];
  if (v20 != v52)
  {
    uint64_t v26 = &v14[v20 != v14];
    int64x2_t v57 = v20 + 1;
    if (v20 + 1 != v15) {
      uint64_t v26 = v20 + 1;
    }
    uint64_t v27 = v26 + 1;
    float64x2_t v28 = &v14[v26 != v14];
    if (v27 != v15) {
      float64x2_t v28 = v27;
    }
    int64x2_t v56 = v28;
    uint64_t v69 = v13 + 4;
    uint64_t v65 = v13;
    uint64_t v50 = v15;
    char v51 = v14;
    while (1)
    {
      long long v71 = *v20;
      if (sub_100BB3DF4(-v16, (double *)&v71, v69, v70)) {
        return 1;
      }
      v87[0] = v13;
      v87[1] = v19;
      int64x2_t v55 = v20;
      v87[2] = v20;
      v87[3] = v57;
      v87[4] = v56;
      v87[5] = v14;
      v87[6] = v15;
      char v88 = 1;
      char v89 = 0;
      uint64_t v29 = i[8];
      uint64_t v30 = i[9];
      unint64_t v31 = &v67[v29];
      uint64_t v32 = i[13];
      uint64_t v58 = v17;
      if (v29 != v30)
      {
        uint64_t v45 = 16 * v30 - 16 * v29;
        uint64_t v46 = &v67[v29];
        while (1)
        {
          long long v47 = v46[1];
          ++v46;
          long long v71 = v47;
          if (!sub_100BB3DF4(v64, (double *)&v71, v70, v69)) {
            break;
          }
          ++v29;
          ++v32;
          unint64_t v31 = v46;
          v45 -= 16;
          if (!v45) {
            goto LABEL_61;
          }
        }
      }
      uint64_t v60 = &v67[v30];
      if (v31 != v60) {
        break;
      }
LABEL_61:
      uint64_t v17 = v58 + 1;
      uint64_t i = (void *)a6;
      double v13 = v65;
      double v15 = v50;
      double v14 = v51;
LABEL_62:
      unint64_t v20 = v55 + 1;
      uint64_t v48 = v57;
      ++v19;
      uint64_t v49 = v56 + 1;
      if (v56 + 1 == v15) {
        uint64_t v49 = &v14[v56 != v14];
      }
      int64x2_t v56 = v49;
      ++v57;
      if (v48 == v52) {
        return 1;
      }
    }
    int v33 = v31 + 1;
    int64x2_t v34 = &v67[v31 != v67];
    if (v31 + 1 != v66) {
      int64x2_t v34 = v31 + 1;
    }
    int64x2_t v35 = v34 + 1;
    int64x2_t v36 = &v67[v34 != v67];
    if (v35 == v66) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = v35;
    }
    uint64_t v59 = v58 + 1;
    uint64_t i = (void *)a6;
    while (1)
    {
      long long v71 = *v31;
      if (sub_100BB3DF4(-v64, (double *)&v71, v70, v69))
      {
LABEL_57:
        double v13 = v65;
        double v15 = v50;
        double v14 = v51;
        uint64_t v17 = v59;
        goto LABEL_62;
      }
      *(void *)&long long v38 = -1;
      *((void *)&v38 + 1) = -1;
      if (a1 == a4 && *((void *)v65 + 2) == i[2] && *((void *)v65 + 3) == i[3])
      {
        if (a7)
        {
          if (v19 < v29 && (a8 & 1) != 0)
          {
LABEL_37:
            if (v32 == v59 || !v19 && *((void *)v65 + 11) - 2 <= v29) {
              goto LABEL_52;
            }
            goto LABEL_40;
          }
          if (v19 >= v29) {
            goto LABEL_52;
          }
        }
        else if (a8)
        {
          goto LABEL_37;
        }
      }
LABEL_40:
      uint64_t v39 = 0;
      v84[0] = i;
      v84[1] = v29;
      v84[2] = v31;
      v84[3] = v33;
      v84[4] = v37;
      v84[5] = v67;
      v84[6] = v66;
      char v85 = 0;
      char v86 = 0;
      int v72 = 0;
      char v73 = 0;
      uint64_t v74 = -1;
      __int16 v75 = 0;
      do
      {
        uint64_t v40 = (char *)&v71 + v39;
        *((_DWORD *)v40 + 10) = 0;
        *((_OWORD *)v40 + 3) = v38;
        *((_OWORD *)v40 + 4) = v38;
        *((void *)v40 + 10) = -1;
        *(_OWORD *)(v40 + 88) = xmmword_101D82650;
        v39 += 80;
        *((void *)v40 + 13) = 0;
        *((void *)v40 + 14) = 0;
      }
      while (v39 != 160);
      uint64_t v76 = a1;
      long long v77 = *((_OWORD *)v65 + 1);
      uint64_t v78 = v19;
      uint64_t v79 = -1;
      uint64_t v80 = a4;
      long long v81 = *((_OWORD *)i + 1);
      uint64_t v82 = v29;
      uint64_t v83 = -1;
      unint64_t v41 = 0x8F5C28F5C28F5C29 * ((uint64_t)(*(void *)(a11 + 8) - *(void *)a11) >> 3);
      sub_100BBFF8C((uint64_t)v87, (uint64_t)v84, (uint64_t)&v71, a9, a10, (void **)a11);
      uint64_t v42 = *(void *)(a11 + 8);
      if (0x8F5C28F5C28F5C29 * ((v42 - *(void *)a11) >> 3) < v41) {
        sub_101A81000();
      }
      uint64_t v43 = *(void *)a11 + 200 * v41;
      for (uint64_t i = (void *)a6; v43 != v42; v43 += 200)
      {
        if (*(_DWORD *)(v43 + 40) == 4 && **a12 - 58 <= 0xFFFFFFF7) {
          **a12 = 50;
        }
        if (*(_DWORD *)(v43 + 120) == 4 && **a12 - 58 <= 0xFFFFFFF7) {
          **a12 = 50;
        }
      }
      if ((*a12)[9]) {
        return 0;
      }
LABEL_52:
      ++v31;
      ++v29;
      if (v37 + 1 == v66) {
        uint64_t v37 = &v67[v37 != v67];
      }
      else {
        ++v37;
      }
      ++v32;
      if (v33++ == v60) {
        goto LABEL_57;
      }
    }
  }
  return result;
}

void **sub_100BBFF8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6)
{
  double v6 = a6;
  uint64_t v46 = a6;
  v30[0] = a1;
  v30[1] = a2;
  v31[1] = a1;
  id v31[2] = a2;
  v32[1] = a2;
  v32[2] = a1;
  sub_100BB5548(a1, a2, (uint64_t)&v33);
  uint64_t v44 = a4;
  uint64_t v45 = a5;
  if (v39 == 100) {
    return v6;
  }
  long long v12 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)float64x2_t v28 = *(_OWORD *)(a3 + 160);
  *(_OWORD *)&v28[16] = v12;
  uint64_t v29 = *(void *)(a3 + 192);
  long long v13 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)&v24[16] = *(_OWORD *)(a3 + 96);
  long long v25 = v13;
  long long v14 = *(_OWORD *)(a3 + 144);
  long long v26 = *(_OWORD *)(a3 + 128);
  long long v27 = v14;
  long long v15 = *(_OWORD *)(a3 + 48);
  v23[0] = *(_OWORD *)(a3 + 32);
  v23[1] = v15;
  long long v16 = *(_OWORD *)(a3 + 80);
  _OWORD v23[2] = *(_OWORD *)(a3 + 64);
  *(_OWORD *)long long v24 = v16;
  long long v17 = *(_OWORD *)(a3 + 16);
  long long v21 = *(_OWORD *)a3;
  long long v22 = v17;
  if (v39 > 0x6Cu)
  {
    if (v39 == 116)
    {
      sub_100BB4AD0(a1, a2, (uint64_t)&v21, (long long *)&v33, (uint64_t)&v39, (uint64_t)v31);
LABEL_21:
      unint64_t v20 = v6;
      sub_100BC022C(&v20, (uint64_t)&v21);
      return v6;
    }
    if (v39 == 109)
    {
      if (v43 == 1) {
        sub_100BB4478(a1, a2, (uint64_t)&v21, (long long *)&v33, (uint64_t)&v39, (uint64_t)v31);
      }
      else {
        sub_100BB47A4(a2, a1, (uint64_t)&v21, (long long *)&v33, (uint64_t)&v39, (uint64_t)v32);
      }
      goto LABEL_21;
    }
  }
  else
  {
    if (v39 == 99)
    {
      if (!v40)
      {
        if (v42)
        {
          sub_100BB4FC4(a1, a2, (uint64_t)&v21, (uint64_t)&v33, (uint64_t)&v39, (uint64_t)v31);
        }
        else
        {
          sub_100BB52AC(a1, a2, (uint64_t)&v21, (uint64_t)&v33, (uint64_t)&v39, (uint64_t)v31);
          LODWORD(v22) = 5;
        }
        goto LABEL_21;
      }
      sub_100BC047C(a1, a2, &v21, &v46, (uint64_t)v30, (uint64_t)v31, (void (*)(long long *))nullsub_955);
      return v46;
    }
    if (v39 == 105)
    {
      LODWORD(v22) = 2;
      if (!v33) {
        sub_101A8102C();
      }
      long long v21 = v34;
      *(_OWORD *)&v24[8] = v35;
      *(_OWORD *)&v28[8] = v37;
      *(void *)&v24[24] = v36;
      *(void *)&v28[24] = v38;
      BOOL v18 = v41 == 1;
      DWORD2(v23[5 * (v41 != 1)]) = 1;
      DWORD2(v23[5 * v18]) = 2;
      goto LABEL_21;
    }
  }
  if (v39 == 101 && !v40)
  {
    sub_100BB52AC(a1, a2, (uint64_t)&v21, (uint64_t)&v33, (uint64_t)&v39, (uint64_t)v31);
    goto LABEL_21;
  }
  return v6;
}

void ***sub_100BC022C(void ***a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (char *)(*a1)[1];
  double v6 = *a1;
  double v9 = (char *)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  double v8 = v9;
  if (v5 >= v9)
  {
    unint64_t v20 = 0x8F5C28F5C28F5C29 * ((v5 - (unsigned char *)*v4) >> 3);
    unint64_t v21 = v20 + 1;
    if (v20 + 1 > 0x147AE147AE147AELL) {
      sub_1001D7FD4();
    }
    unint64_t v22 = 0x8F5C28F5C28F5C29 * ((v8 - (unsigned char *)*v4) >> 3);
    if (2 * v22 > v21) {
      unint64_t v21 = 2 * v22;
    }
    if (v22 >= 0xA3D70A3D70A3D7) {
      unint64_t v23 = 0x147AE147AE147AELL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23) {
      long long v24 = (char *)sub_100BC0430(v7, v23);
    }
    else {
      long long v24 = 0;
    }
    long long v25 = &v24[200 * v20];
    long long v26 = &v24[200 * v23];
    *(_OWORD *)long long v25 = *(_OWORD *)a2;
    long long v27 = *(_OWORD *)(a2 + 16);
    long long v28 = *(_OWORD *)(a2 + 32);
    long long v29 = *(_OWORD *)(a2 + 64);
    *((_OWORD *)v25 + 3) = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v25 + 4) = v29;
    *((_OWORD *)v25 + 1) = v27;
    *((_OWORD *)v25 + 2) = v28;
    long long v30 = *(_OWORD *)(a2 + 80);
    long long v31 = *(_OWORD *)(a2 + 96);
    long long v32 = *(_OWORD *)(a2 + 128);
    *((_OWORD *)v25 + 7) = *(_OWORD *)(a2 + 112);
    *((_OWORD *)v25 + 8) = v32;
    *((_OWORD *)v25 + 5) = v30;
    *((_OWORD *)v25 + 6) = v31;
    long long v33 = *(_OWORD *)(a2 + 144);
    long long v34 = *(_OWORD *)(a2 + 160);
    long long v35 = *(_OWORD *)(a2 + 176);
    *((void *)v25 + 24) = *(void *)(a2 + 192);
    *((_OWORD *)v25 + 10) = v34;
    *((_OWORD *)v25 + 11) = v35;
    *((_OWORD *)v25 + 9) = v33;
    uint64_t v19 = v25 + 200;
    long long v37 = (char *)*v4;
    uint64_t v36 = (char *)v4[1];
    if (v36 != *v4)
    {
      do
      {
        *(_OWORD *)(v25 - 200) = *(_OWORD *)(v36 - 200);
        long long v38 = *(_OWORD *)(v36 - 184);
        long long v39 = *(_OWORD *)(v36 - 168);
        long long v40 = *(_OWORD *)(v36 - 152);
        *(_OWORD *)(v25 - 136) = *(_OWORD *)(v36 - 136);
        *(_OWORD *)(v25 - 152) = v40;
        *(_OWORD *)(v25 - 168) = v39;
        *(_OWORD *)(v25 - 184) = v38;
        long long v41 = *(_OWORD *)(v36 - 120);
        long long v42 = *(_OWORD *)(v36 - 104);
        long long v43 = *(_OWORD *)(v36 - 88);
        *(_OWORD *)(v25 - 72) = *(_OWORD *)(v36 - 72);
        *(_OWORD *)(v25 - 88) = v43;
        *(_OWORD *)(v25 - 104) = v42;
        *(_OWORD *)(v25 - 120) = v41;
        long long v44 = *(_OWORD *)(v36 - 56);
        long long v45 = *(_OWORD *)(v36 - 40);
        long long v46 = *(_OWORD *)(v36 - 24);
        *((void *)v25 - 1) = *((void *)v36 - 1);
        *(_OWORD *)(v25 - 24) = v46;
        *(_OWORD *)(v25 - 40) = v45;
        *(_OWORD *)(v25 - 56) = v44;
        v25 -= 200;
        v36 -= 200;
      }
      while (v36 != v37);
      uint64_t v36 = (char *)*v4;
    }
    *uint64_t v4 = v25;
    v4[1] = v19;
    v4[2] = v26;
    if (v36) {
      operator delete(v36);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
    long long v10 = *(_OWORD *)(a2 + 16);
    long long v11 = *(_OWORD *)(a2 + 32);
    long long v12 = *(_OWORD *)(a2 + 64);
    *((_OWORD *)v5 + 3) = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v5 + 4) = v12;
    *((_OWORD *)v5 + 1) = v10;
    *((_OWORD *)v5 + 2) = v11;
    long long v13 = *(_OWORD *)(a2 + 80);
    long long v14 = *(_OWORD *)(a2 + 96);
    long long v15 = *(_OWORD *)(a2 + 128);
    *((_OWORD *)v5 + 7) = *(_OWORD *)(a2 + 112);
    *((_OWORD *)v5 + 8) = v15;
    *((_OWORD *)v5 + 5) = v13;
    *((_OWORD *)v5 + 6) = v14;
    long long v16 = *(_OWORD *)(a2 + 144);
    long long v17 = *(_OWORD *)(a2 + 160);
    long long v18 = *(_OWORD *)(a2 + 176);
    *((void *)v5 + 24) = *(void *)(a2 + 192);
    *((_OWORD *)v5 + 10) = v17;
    *((_OWORD *)v5 + 11) = v18;
    *((_OWORD *)v5 + 9) = v16;
    uint64_t v19 = v5 + 200;
  }
  v4[1] = v19;
  return a1;
}

void *sub_100BC0430(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x147AE147AE147AFLL) {
    sub_1001D7FA0();
  }
  return operator new(200 * a2);
}

void sub_100BC047C(uint64_t a1, uint64_t a2, long long *a3, void ***a4, uint64_t a5, uint64_t a6, void (*a7)(long long *))
{
  long long v11 = a3[11];
  *(_OWORD *)long long v42 = a3[10];
  *(_OWORD *)&v42[16] = v11;
  uint64_t v43 = *((void *)a3 + 24);
  long long v12 = a3[7];
  *(_OWORD *)&v38[16] = a3[6];
  long long v39 = v12;
  long long v13 = a3[9];
  long long v40 = a3[8];
  long long v41 = v13;
  long long v14 = a3[3];
  long long v35 = a3[2];
  long long v36 = v14;
  long long v15 = a3[5];
  long long v37 = a3[4];
  *(_OWORD *)long long v38 = v15;
  long long v16 = a3[1];
  long long v33 = *a3;
  long long v34 = v16;
  int v17 = *(_DWORD *)(a5 + 256);
  if (*(_DWORD *)(a5 + 252) != 1) {
    goto LABEL_12;
  }
  uint64_t v18 = *(void *)(a6 + 8);
  uint64_t v19 = *(double **)(v18 + 16);
  unint64_t v20 = *(double **)(v18 + 24);
  if (!*(unsigned char *)(v18 + 80))
  {
    sub_100BB81C4(*(void *)(a6 + 8), *(double **)(v18 + 24), v18 + 32);
    *(_OWORD *)(v18 + 64) = *(_OWORD *)*(void *)(v18 + 32);
    *(unsigned char *)(v18 + 80) = 1;
  }
  int v21 = sub_10075DD40(v19, v20, (double *)(v18 + 64));
  switch(v21)
  {
    case 1:
      int v22 = 2;
      break;
    case 0:
      goto LABEL_12;
    case -1:
      int v22 = 1;
      break;
    default:
      goto LABEL_10;
  }
  DWORD2(v35) = v22;
LABEL_10:
  DWORD2(v39) = 3;
  LODWORD(v34) = 5;
  if (*(void *)(a5 + 64) <= 1uLL) {
    sub_101A8102C();
  }
  long long v33 = *(_OWORD *)(a5 + 88);
  *(_OWORD *)&v38[8] = *(_OWORD *)(a5 + 160);
  uint64_t v23 = *(void *)(a5 + 176);
  *(_OWORD *)&v42[8] = *(_OWORD *)(a5 + 184);
  uint64_t v24 = *(void *)(a5 + 200);
  *(void *)&v38[24] = v23;
  *(void *)&v42[24] = v24;
  a7(&v33);
  long long v32 = *a4;
  sub_100BC022C(&v32, (uint64_t)&v33);
LABEL_12:
  if (v17 != 1) {
    return;
  }
  uint64_t v25 = *(void *)(a6 + 16);
  long long v26 = *(double **)(v25 + 16);
  long long v27 = *(double **)(v25 + 24);
  if (!*(unsigned char *)(v25 + 80))
  {
    sub_100BB81C4(v25, *(double **)(v25 + 24), v25 + 32);
    *(_OWORD *)(v25 + 64) = *(_OWORD *)*(void *)(v25 + 32);
    *(unsigned char *)(v25 + 80) = 1;
  }
  int v28 = sub_10075DD40(v26, v27, (double *)(v25 + 64));
  switch(v28)
  {
    case 1:
      int v29 = 2;
      goto LABEL_20;
    case 0:
      return;
    case -1:
      int v29 = 1;
LABEL_20:
      DWORD2(v39) = v29;
      break;
  }
  DWORD2(v35) = 3;
  LODWORD(v34) = 5;
  if (!*(void *)(a5 + 64)) {
    sub_101A8102C();
  }
  long long v33 = *(_OWORD *)(a5 + 72);
  *(_OWORD *)&v38[8] = *(_OWORD *)(a5 + 104);
  uint64_t v30 = *(void *)(a5 + 120);
  *(_OWORD *)&v42[8] = *(_OWORD *)(a5 + 128);
  uint64_t v31 = *(void *)(a5 + 144);
  *(void *)&v38[24] = v30;
  *(void *)&v42[24] = v31;
  a7(&v33);
  long long v32 = *a4;
  sub_100BC022C(&v32, (uint64_t)&v33);
}

BOOL sub_100BC06B8(unsigned __int8 **a1, uint64_t a2)
{
  int v2 = *((_DWORD *)a1 + 6);
  if (v2 == 3) {
    return 0;
  }
  if (*(void *)a2 == *(void *)(a2 + 8)) {
    return 1;
  }
  *(_OWORD *)long long v11 = *(_OWORD *)*(void *)a2;
  uint64_t v4 = a1[2];
  uint64_t v5 = *(double **)v4;
  double v6 = (double *)*((void *)v4 + 1);
  if ((unint64_t)v6 - *(void *)v4 < 0x40) {
    goto LABEL_9;
  }
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  char v15 = 0;
  if (v5 + 2 != v6)
  {
    do
    {
      if (!sub_10075D9A4((uint64_t)&v12, v11, v5, v5 + 2, (uint64_t)&v13)) {
        break;
      }
      uint64_t v7 = v5 + 4;
      v5 += 2;
    }
    while (v7 != v6);
    if (!v15)
    {
      if (v14 && HIDWORD(v14) && (int)v14 >= 1)
      {
        if (!(v13 + HIDWORD(v13))) {
          goto LABEL_8;
        }
      }
      else if (!v13)
      {
        goto LABEL_8;
      }
      long long v10 = *a1;
      if (**a1 - 58 <= 0xFFFFFFF7)
      {
        *long long v10 = 50;
        long long v10 = *a1;
      }
      if (v10[3] - 58 <= 0xFFFFFFF6) {
        v10[3] = 49;
      }
      int v8 = *((_DWORD *)a1 + 6) | 1;
      goto LABEL_10;
    }
  }
LABEL_8:
  int v2 = *((_DWORD *)a1 + 6);
LABEL_9:
  int v8 = v2 | 2;
LABEL_10:
  *((_DWORD *)a1 + 6) = v8;
  if (v8 == 3) {
    return 0;
  }
  return (*a1)[9] == 0;
}

BOOL sub_100BC0814(unsigned __int8 **a1, uint64_t a2)
{
  int v2 = *((_DWORD *)a1 + 6);
  if (v2 == 3) {
    return 0;
  }
  if (*(void *)a2 == *(void *)(a2 + 8)) {
    return 1;
  }
  *(_OWORD *)long long v11 = *(_OWORD *)*(void *)a2;
  uint64_t v4 = a1[2];
  uint64_t v5 = *(double **)v4;
  double v6 = (double *)*((void *)v4 + 1);
  if ((unint64_t)v6 - *(void *)v4 < 0x40) {
    goto LABEL_9;
  }
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  char v15 = 0;
  if (v5 + 2 != v6)
  {
    do
    {
      if (!sub_10075D9A4((uint64_t)&v12, v11, v5, v5 + 2, (uint64_t)&v13)) {
        break;
      }
      uint64_t v7 = v5 + 4;
      v5 += 2;
    }
    while (v7 != v6);
    if (!v15)
    {
      if (v14 && HIDWORD(v14) && (int)v14 >= 1)
      {
        if (!(v13 + HIDWORD(v13))) {
          goto LABEL_8;
        }
      }
      else if (!v13)
      {
        goto LABEL_8;
      }
      long long v10 = *a1;
      if (**a1 - 58 <= 0xFFFFFFF7)
      {
        *long long v10 = 50;
        long long v10 = *a1;
      }
      if (v10[1] - 58 <= 0xFFFFFFF6) {
        v10[1] = 49;
      }
      int v8 = *((_DWORD *)a1 + 6) | 1;
      goto LABEL_10;
    }
  }
LABEL_8:
  int v2 = *((_DWORD *)a1 + 6);
LABEL_9:
  int v8 = v2 | 2;
LABEL_10:
  *((_DWORD *)a1 + 6) = v8;
  if (v8 == 3) {
    return 0;
  }
  return (*a1)[9] == 0;
}

double sub_100BC0970(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t sub_100BC0FE0(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v63 = v2;
  uint64_t v64 = v3;
  uint64_t v5 = result;
  uint64_t v6 = result + 200;
  if (result + 200 == a2) {
    return result;
  }
  uint64_t v7 = 0;
  uint64_t v8 = result;
  do
  {
    uint64_t v9 = v8;
    uint64_t v8 = v6;
    uint64_t v10 = *(void *)(v9 + 248);
    uint64_t v11 = *(void *)(v9 + 48);
    if (v10 == v11)
    {
      uint64_t v12 = *(void *)(v9 + 256);
      uint64_t v13 = *(void *)(v9 + 56);
      BOOL v14 = v12 < v13;
      if (v12 == v13)
      {
        uint64_t v15 = *(void *)(v9 + 264);
        uint64_t v16 = *(void *)(v9 + 64);
        BOOL v14 = v15 < v16;
        if (v15 == v16) {
          BOOL v14 = *(_OWORD *)(v9 + 272) < *(_OWORD *)(v9 + 72);
        }
      }
      if (!v14)
      {
        if (*(void *)(v9 + 272) != *(void *)(v9 + 72)) {
          goto LABEL_33;
        }
        if (*(void *)(v9 + 264) != *(void *)(v9 + 64)) {
          goto LABEL_33;
        }
        if (v12 != v13) {
          goto LABEL_33;
        }
        if (*(void *)(v9 + 280) != *(void *)(v9 + 80)) {
          goto LABEL_33;
        }
        double result = sub_100BC2CB4(v8, v9);
        if (!result) {
          goto LABEL_33;
        }
      }
    }
    else if (v10 >= v11)
    {
      goto LABEL_33;
    }
    long long v17 = *(_OWORD *)(v8 + 48);
    long long v53 = *(_OWORD *)(v8 + 32);
    long long v54 = v17;
    long long v18 = *(_OWORD *)(v8 + 112);
    long long v56 = *(_OWORD *)(v8 + 96);
    long long v57 = v18;
    long long v19 = *(_OWORD *)(v8 + 80);
    *(_OWORD *)long long v55 = *(_OWORD *)(v8 + 64);
    *(_OWORD *)&v55[16] = v19;
    uint64_t v62 = *(void *)(v8 + 192);
    long long v20 = *(_OWORD *)(v8 + 176);
    long long v60 = *(_OWORD *)(v8 + 160);
    long long v61 = v20;
    long long v21 = *(_OWORD *)(v8 + 144);
    long long v58 = *(_OWORD *)(v8 + 128);
    long long v59 = v21;
    long long v22 = *(_OWORD *)(v8 + 16);
    long long v51 = *(_OWORD *)v8;
    long long v52 = v22;
    long long v23 = *(_OWORD *)(v9 + 176);
    *(_OWORD *)(v8 + 160) = *(_OWORD *)(v9 + 160);
    *(_OWORD *)(v8 + 176) = v23;
    *(void *)(v8 + 192) = *(void *)(v9 + 192);
    long long v24 = *(_OWORD *)(v9 + 112);
    *(_OWORD *)(v8 + 96) = *(_OWORD *)(v9 + 96);
    *(_OWORD *)(v8 + 112) = v24;
    long long v25 = *(_OWORD *)(v9 + 144);
    *(_OWORD *)(v8 + 128) = *(_OWORD *)(v9 + 128);
    *(_OWORD *)(v8 + 144) = v25;
    long long v26 = *(_OWORD *)(v9 + 48);
    *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
    *(_OWORD *)(v8 + 48) = v26;
    long long v27 = *(_OWORD *)(v9 + 80);
    *(_OWORD *)(v8 + 64) = *(_OWORD *)(v9 + 64);
    *(_OWORD *)(v8 + 80) = v27;
    long long v28 = *(_OWORD *)(v9 + 16);
    uint64_t v29 = v5;
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v28;
    if (v9 == v5) {
      goto LABEL_32;
    }
    uint64_t v30 = v7;
    while (1)
    {
      uint64_t v31 = v5 + v30;
      uint64_t v32 = *(void *)(v5 + v30 - 152);
      if ((void)v54 == v32) {
        break;
      }
      if ((uint64_t)v54 >= v32) {
        goto LABEL_31;
      }
LABEL_29:
      v9 -= 200;
      long long v36 = *(_OWORD *)(v5 + v30 - 24);
      *(_OWORD *)(v31 + 160) = *(_OWORD *)(v5 + v30 - 40);
      *(_OWORD *)(v31 + 176) = v36;
      *(void *)(v31 + 192) = *(void *)(v5 + v30 - 8);
      long long v37 = *(_OWORD *)(v5 + v30 - 88);
      *(_OWORD *)(v31 + 96) = *(_OWORD *)(v5 + v30 - 104);
      *(_OWORD *)(v31 + 112) = v37;
      long long v38 = *(_OWORD *)(v5 + v30 - 56);
      *(_OWORD *)(v31 + 128) = *(_OWORD *)(v5 + v30 - 72);
      *(_OWORD *)(v31 + 144) = v38;
      long long v39 = *(_OWORD *)(v5 + v30 - 152);
      *(_OWORD *)(v31 + 32) = *(_OWORD *)(v5 + v30 - 168);
      *(_OWORD *)(v31 + 48) = v39;
      long long v40 = *(_OWORD *)(v5 + v30 - 120);
      *(_OWORD *)(v31 + 64) = *(_OWORD *)(v5 + v30 - 136);
      *(_OWORD *)(v31 + 80) = v40;
      long long v41 = *(_OWORD *)(v5 + v30 - 184);
      *(_OWORD *)uint64_t v31 = *(_OWORD *)(v5 + v30 - 200);
      *(_OWORD *)(v31 + 16) = v41;
      v30 -= 200;
      if (!v30)
      {
        uint64_t v29 = v5;
        goto LABEL_32;
      }
    }
    uint64_t v33 = *(void *)(v31 - 144);
    BOOL v34 = *((void *)&v54 + 1) < v33;
    if (*((void *)&v54 + 1) == v33)
    {
      uint64_t v35 = *(void *)(v5 + v30 - 136);
      BOOL v34 = *(void *)v55 < v35;
      if (*(void *)v55 == v35) {
        BOOL v34 = *(_OWORD *)&v55[8] < *(_OWORD *)(v5 + v30 - 128);
      }
    }
    if (v34) {
      goto LABEL_29;
    }
    if (*(_OWORD *)v55 == *(_OWORD *)(v5 + v30 - 136)
      && *((void *)&v54 + 1) == v33
      && *(void *)&v55[16] == *(void *)(v5 + v30 - 120))
    {
      double result = sub_100BC2CB4((uint64_t)&v51, v5 + v30 - 200);
      if (!result)
      {
        uint64_t v29 = v5 + v30;
        goto LABEL_32;
      }
      goto LABEL_29;
    }
LABEL_31:
    uint64_t v29 = v9;
LABEL_32:
    *(_OWORD *)uint64_t v29 = v51;
    long long v42 = v52;
    long long v43 = v53;
    long long v44 = *(_OWORD *)v55;
    *(_OWORD *)(v29 + 48) = v54;
    *(_OWORD *)(v29 + 64) = v44;
    *(_OWORD *)(v29 + 16) = v42;
    *(_OWORD *)(v29 + 32) = v43;
    long long v45 = *(_OWORD *)&v55[16];
    long long v46 = v56;
    long long v47 = v58;
    *(_OWORD *)(v29 + 112) = v57;
    *(_OWORD *)(v29 + 128) = v47;
    *(_OWORD *)(v29 + 80) = v45;
    *(_OWORD *)(v29 + 96) = v46;
    long long v48 = v59;
    long long v49 = v60;
    long long v50 = v61;
    *(void *)(v29 + 192) = v62;
    *(_OWORD *)(v29 + 160) = v49;
    *(_OWORD *)(v29 + 176) = v50;
    *(_OWORD *)(v29 + 144) = v48;
LABEL_33:
    uint64_t v6 = v8 + 200;
    v7 += 200;
  }
  while (v8 + 200 != a2);
  return result;
}

double sub_100BC12D8(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v58 = v2;
    uint64_t v59 = v3;
    uint64_t v5 = a1;
    while (1)
    {
      while (1)
      {
        if (v5 + 200 == a2) {
          return result;
        }
        uint64_t v6 = (void *)v5;
        v5 += 200;
        uint64_t v7 = v6[31];
        uint64_t v8 = v6[6];
        if (v7 != v8) {
          break;
        }
        uint64_t v9 = v6[32];
        uint64_t v10 = v6[7];
        BOOL v12 = __OFSUB__(v9, v10);
        BOOL v11 = v9 - v10 < 0;
        if (v9 == v10)
        {
          uint64_t v13 = v6[33];
          uint64_t v14 = v6[8];
          BOOL v12 = __OFSUB__(v13, v14);
          BOOL v11 = v13 - v14 < 0;
          if (v13 == v14)
          {
            uint64_t v15 = v6[35];
            uint64_t v16 = v6[10];
            BOOL v12 = __OFSUB__(v15, v16);
            BOOL v11 = v15 - v16 < 0;
            if (v15 == v16)
            {
              uint64_t v17 = v6[34];
              uint64_t v18 = v6[9];
              BOOL v12 = __OFSUB__(v17, v18);
              BOOL v11 = v17 - v18 < 0;
            }
          }
        }
        if (v11 != v12
          || v6[34] == v6[9]
          && v6[33] == v6[8]
          && v9 == v10
          && v6[35] == v6[10]
          && sub_100BC2CB4(v5, (uint64_t)v6))
        {
          goto LABEL_17;
        }
      }
      if (v7 < v8)
      {
LABEL_17:
        long long v20 = *(_OWORD *)(v5 + 176);
        long long v55 = *(_OWORD *)(v5 + 160);
        long long v56 = v20;
        uint64_t v57 = *(void *)(v5 + 192);
        long long v21 = *(_OWORD *)(v5 + 112);
        long long v51 = *(_OWORD *)(v5 + 96);
        long long v52 = v21;
        long long v22 = *(_OWORD *)(v5 + 144);
        long long v53 = *(_OWORD *)(v5 + 128);
        long long v54 = v22;
        long long v23 = *(_OWORD *)(v5 + 48);
        long long v47 = *(_OWORD *)(v5 + 32);
        long long v48 = v23;
        long long v24 = *(_OWORD *)(v5 + 80);
        long long v49 = *(_OWORD *)(v5 + 64);
        long long v50 = v24;
        long long v25 = *(_OWORD *)(v5 + 16);
        uint64_t v26 = v5;
        long long v45 = *(_OWORD *)v5;
        long long v46 = v25;
        while (1)
        {
          long long v27 = *(_OWORD *)(v26 - 56);
          long long v28 = *(_OWORD *)(v26 - 24);
          *(_OWORD *)(v26 + 160) = *(_OWORD *)(v26 - 40);
          *(_OWORD *)(v26 + 176) = v28;
          *(void *)(v26 + 192) = *(void *)(v26 - 8);
          long long v29 = *(_OWORD *)(v26 - 120);
          long long v30 = *(_OWORD *)(v26 - 88);
          *(_OWORD *)(v26 + 96) = *(_OWORD *)(v26 - 104);
          *(_OWORD *)(v26 + 112) = v30;
          *(_OWORD *)(v26 + 128) = *(_OWORD *)(v26 - 72);
          *(_OWORD *)(v26 + 144) = v27;
          long long v31 = *(_OWORD *)(v26 - 184);
          long long v32 = *(_OWORD *)(v26 - 152);
          *(_OWORD *)(v26 + 32) = *(_OWORD *)(v26 - 168);
          *(_OWORD *)(v26 + 48) = v32;
          *(_OWORD *)(v26 + 64) = *(_OWORD *)(v26 - 136);
          *(_OWORD *)(v26 + 80) = v29;
          *(_OWORD *)uint64_t v26 = *(_OWORD *)(v26 - 200);
          *(_OWORD *)(v26 + 16) = v31;
          uint64_t v33 = *(void *)(v26 - 352);
          if ((void)v48 != v33)
          {
            if ((uint64_t)v48 >= v33) {
              break;
            }
            goto LABEL_29;
          }
          uint64_t v34 = *(void *)(v26 - 344);
          BOOL v36 = __OFSUB__(*((void *)&v48 + 1), v34);
          BOOL v35 = *((void *)&v48 + 1) - v34 < 0;
          if (*((void *)&v48 + 1) != v34) {
            goto LABEL_22;
          }
          uint64_t v37 = *(void *)(v26 - 336);
          BOOL v36 = __OFSUB__((void)v49, v37);
          BOOL v35 = (uint64_t)v49 - v37 < 0;
          if ((void)v49 == v37
            && (uint64_t v38 = *(void *)(v26 - 320),
                BOOL v36 = __OFSUB__((void)v50, v38),
                BOOL v35 = (uint64_t)v50 - v38 < 0,
                (void)v50 == v38))
          {
            if (*((uint64_t *)&v49 + 1) < *(void *)(v26 - 328)) {
              goto LABEL_29;
            }
          }
          else
          {
LABEL_22:
            if (v35 != v36) {
              goto LABEL_29;
            }
          }
          if (v49 != *(_OWORD *)(v26 - 336)
            || *((void *)&v48 + 1) != v34
            || (void)v50 != *(void *)(v26 - 320)
            || (sub_100BC2CB4((uint64_t)&v45, v26 - 400) & 1) == 0)
          {
            break;
          }
LABEL_29:
          v26 -= 200;
        }
        long long v39 = v53;
        *(_OWORD *)(v26 - 56) = v54;
        long long v40 = v56;
        *(_OWORD *)(v26 - 40) = v55;
        *(_OWORD *)(v26 - 24) = v40;
        long long v41 = v49;
        *(_OWORD *)(v26 - 120) = v50;
        long long v42 = v52;
        *(_OWORD *)(v26 - 104) = v51;
        *(_OWORD *)(v26 - 88) = v42;
        *(_OWORD *)(v26 - 72) = v39;
        long long v43 = v45;
        *(_OWORD *)(v26 - 184) = v46;
        double result = *(double *)&v47;
        long long v44 = v48;
        *(_OWORD *)(v26 - 168) = v47;
        *(_OWORD *)(v26 - 152) = v44;
        *(_OWORD *)(v26 - 136) = v41;
        *(void *)(v26 - 8) = v57;
        *(_OWORD *)(v26 - 200) = v43;
      }
    }
  }
  return result;
}

uint64_t sub_100BC1578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a1 + 48);
  if (v6 == v7)
  {
    uint64_t v8 = *(void *)(a2 + 56);
    uint64_t v9 = *(void *)(a1 + 56);
    BOOL v10 = v8 < v9;
    if (v8 == v9)
    {
      uint64_t v11 = *(void *)(a2 + 64);
      uint64_t v12 = *(void *)(a1 + 64);
      BOOL v10 = v11 < v12;
      if (v11 == v12) {
        BOOL v10 = *(_OWORD *)(a2 + 72) < *(_OWORD *)(a1 + 72);
      }
    }
    if (!v10)
    {
      if (*(void *)(a2 + 72) != *(void *)(a1 + 72)
        || *(void *)(a2 + 64) != *(void *)(a1 + 64)
        || v8 != v9
        || *(void *)(a2 + 80) != *(void *)(a1 + 80)
        || (v13 = sub_100BC2CB4(a2, a1), uint64_t v6 = *(void *)(a2 + 48), (v13 & 1) == 0))
      {
LABEL_11:
        uint64_t v14 = *(void *)(a3 + 48);
        if (v14 == v6)
        {
          uint64_t v15 = *(void *)(a3 + 56);
          uint64_t v16 = *(void *)(a2 + 56);
          BOOL v17 = v15 < v16;
          if (v15 == v16)
          {
            uint64_t v18 = *(void *)(a3 + 64);
            uint64_t v19 = *(void *)(a2 + 64);
            BOOL v17 = v18 < v19;
            if (v18 == v19) {
              BOOL v17 = *(_OWORD *)(a3 + 72) < *(_OWORD *)(a2 + 72);
            }
          }
          if (v17) {
            goto LABEL_47;
          }
          if (*(void *)(a3 + 72) == *(void *)(a2 + 72) && *(void *)(a3 + 64) == *(void *)(a2 + 64))
          {
            uint64_t result = 0;
            if (v15 != v16) {
              return result;
            }
            if (*(void *)(a3 + 80) != *(void *)(a2 + 80)) {
              return result;
            }
            uint64_t result = sub_100BC2CB4(a3, a2);
            if (!result) {
              return result;
            }
LABEL_47:
            long long v140 = *(_OWORD *)(a2 + 160);
            long long v145 = *(_OWORD *)(a2 + 176);
            uint64_t v150 = *(void *)(a2 + 192);
            long long v120 = *(_OWORD *)(a2 + 96);
            long long v125 = *(_OWORD *)(a2 + 112);
            long long v130 = *(_OWORD *)(a2 + 128);
            long long v135 = *(_OWORD *)(a2 + 144);
            long long v100 = *(_OWORD *)(a2 + 32);
            long long v105 = *(_OWORD *)(a2 + 48);
            long long v110 = *(_OWORD *)(a2 + 64);
            long long v115 = *(_OWORD *)(a2 + 80);
            long long v90 = *(_OWORD *)a2;
            long long v95 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a2 = *(_OWORD *)a3;
            long long v54 = *(_OWORD *)(a3 + 16);
            long long v55 = *(_OWORD *)(a3 + 32);
            long long v56 = *(_OWORD *)(a3 + 64);
            *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
            *(_OWORD *)(a2 + 64) = v56;
            *(_OWORD *)(a2 + 16) = v54;
            *(_OWORD *)(a2 + 32) = v55;
            long long v57 = *(_OWORD *)(a3 + 80);
            long long v58 = *(_OWORD *)(a3 + 96);
            long long v59 = *(_OWORD *)(a3 + 128);
            *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
            *(_OWORD *)(a2 + 128) = v59;
            *(_OWORD *)(a2 + 80) = v57;
            *(_OWORD *)(a2 + 96) = v58;
            long long v60 = *(_OWORD *)(a3 + 144);
            long long v61 = *(_OWORD *)(a3 + 160);
            long long v62 = *(_OWORD *)(a3 + 176);
            *(void *)(a2 + 192) = *(void *)(a3 + 192);
            *(_OWORD *)(a2 + 160) = v61;
            *(_OWORD *)(a2 + 176) = v62;
            *(_OWORD *)(a2 + 144) = v60;
            *(_OWORD *)(a3 + 160) = v140;
            *(_OWORD *)(a3 + 176) = v145;
            *(void *)(a3 + 192) = v150;
            *(_OWORD *)(a3 + 96) = v120;
            *(_OWORD *)(a3 + 112) = v125;
            *(_OWORD *)(a3 + 128) = v130;
            *(_OWORD *)(a3 + 144) = v135;
            *(_OWORD *)(a3 + 32) = v100;
            *(_OWORD *)(a3 + 48) = v105;
            *(_OWORD *)(a3 + 64) = v110;
            *(_OWORD *)(a3 + 80) = v115;
            *(_OWORD *)a3 = v90;
            *(_OWORD *)(a3 + 16) = v95;
            uint64_t v63 = *(void *)(a2 + 48);
            uint64_t v64 = *(void *)(a1 + 48);
            if (v63 == v64)
            {
              uint64_t v65 = *(void *)(a2 + 56);
              uint64_t v66 = *(void *)(a1 + 56);
              BOOL v67 = v65 < v66;
              if (v65 == v66)
              {
                uint64_t v68 = *(void *)(a2 + 64);
                uint64_t v69 = *(void *)(a1 + 64);
                BOOL v67 = v68 < v69;
                if (v68 == v69) {
                  BOOL v67 = *(_OWORD *)(a2 + 72) < *(_OWORD *)(a1 + 72);
                }
              }
              if (!v67)
              {
                if (*(void *)(a2 + 72) != *(void *)(a1 + 72) || *(void *)(a2 + 64) != *(void *)(a1 + 64)) {
                  return 1;
                }
                uint64_t result = 1;
                if (v65 != v66 || *(void *)(a2 + 80) != *(void *)(a1 + 80)) {
                  return result;
                }
                if (!sub_100BC2CB4(a2, a1)) {
                  return 1;
                }
              }
            }
            else if (v63 >= v64)
            {
              return 1;
            }
            long long v142 = *(_OWORD *)(a1 + 160);
            long long v147 = *(_OWORD *)(a1 + 176);
            uint64_t v152 = *(void *)(a1 + 192);
            long long v122 = *(_OWORD *)(a1 + 96);
            long long v127 = *(_OWORD *)(a1 + 112);
            long long v132 = *(_OWORD *)(a1 + 128);
            long long v137 = *(_OWORD *)(a1 + 144);
            long long v102 = *(_OWORD *)(a1 + 32);
            long long v107 = *(_OWORD *)(a1 + 48);
            long long v112 = *(_OWORD *)(a1 + 64);
            long long v117 = *(_OWORD *)(a1 + 80);
            long long v92 = *(_OWORD *)a1;
            long long v97 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            long long v79 = *(_OWORD *)(a2 + 16);
            long long v80 = *(_OWORD *)(a2 + 32);
            long long v81 = *(_OWORD *)(a2 + 64);
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
            *(_OWORD *)(a1 + 64) = v81;
            *(_OWORD *)(a1 + 16) = v79;
            *(_OWORD *)(a1 + 32) = v80;
            long long v82 = *(_OWORD *)(a2 + 80);
            long long v83 = *(_OWORD *)(a2 + 96);
            long long v84 = *(_OWORD *)(a2 + 128);
            *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
            *(_OWORD *)(a1 + 128) = v84;
            *(_OWORD *)(a1 + 80) = v82;
            *(_OWORD *)(a1 + 96) = v83;
            long long v85 = *(_OWORD *)(a2 + 144);
            long long v86 = *(_OWORD *)(a2 + 160);
            long long v87 = *(_OWORD *)(a2 + 176);
            *(void *)(a1 + 192) = *(void *)(a2 + 192);
            *(_OWORD *)(a1 + 160) = v86;
            *(_OWORD *)(a1 + 176) = v87;
            *(_OWORD *)(a1 + 144) = v85;
            *(_OWORD *)(a2 + 160) = v142;
            *(_OWORD *)(a2 + 176) = v147;
            *(void *)(a2 + 192) = v152;
            *(_OWORD *)(a2 + 96) = v122;
            *(_OWORD *)(a2 + 112) = v127;
            *(_OWORD *)(a2 + 128) = v132;
            *(_OWORD *)(a2 + 144) = v137;
            *(_OWORD *)(a2 + 32) = v102;
            *(_OWORD *)(a2 + 48) = v107;
            *(_OWORD *)(a2 + 64) = v112;
            *(_OWORD *)(a2 + 80) = v117;
            uint64_t result = 2;
            *(_OWORD *)a2 = v92;
            *(_OWORD *)(a2 + 16) = v97;
            return result;
          }
        }
        else if (v14 < v6)
        {
          goto LABEL_47;
        }
        return 0;
      }
    }
  }
  else if (v6 >= v7)
  {
    goto LABEL_11;
  }
  uint64_t v21 = *(void *)(a3 + 48);
  if (v21 != v6)
  {
    if (v21 >= v6) {
      goto LABEL_33;
    }
LABEL_45:
    long long v139 = *(_OWORD *)(a1 + 160);
    long long v144 = *(_OWORD *)(a1 + 176);
    uint64_t v149 = *(void *)(a1 + 192);
    long long v119 = *(_OWORD *)(a1 + 96);
    long long v124 = *(_OWORD *)(a1 + 112);
    long long v129 = *(_OWORD *)(a1 + 128);
    long long v134 = *(_OWORD *)(a1 + 144);
    long long v99 = *(_OWORD *)(a1 + 32);
    long long v104 = *(_OWORD *)(a1 + 48);
    long long v109 = *(_OWORD *)(a1 + 64);
    long long v114 = *(_OWORD *)(a1 + 80);
    long long v89 = *(_OWORD *)a1;
    long long v94 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a3;
    long long v43 = *(_OWORD *)(a3 + 16);
    long long v44 = *(_OWORD *)(a3 + 32);
    long long v45 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a1 + 64) = v45;
    *(_OWORD *)(a1 + 16) = v43;
    *(_OWORD *)(a1 + 32) = v44;
    long long v46 = *(_OWORD *)(a3 + 80);
    long long v47 = *(_OWORD *)(a3 + 96);
    long long v48 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a1 + 128) = v48;
    *(_OWORD *)(a1 + 80) = v46;
    *(_OWORD *)(a1 + 96) = v47;
    long long v49 = *(_OWORD *)(a3 + 144);
    long long v50 = *(_OWORD *)(a3 + 160);
    long long v51 = *(_OWORD *)(a3 + 176);
    *(void *)(a1 + 192) = *(void *)(a3 + 192);
    *(_OWORD *)(a1 + 160) = v50;
    *(_OWORD *)(a1 + 176) = v51;
    *(_OWORD *)(a1 + 144) = v49;
    *(_OWORD *)(a3 + 160) = v139;
    *(_OWORD *)(a3 + 176) = v144;
    *(void *)(a3 + 192) = v149;
    *(_OWORD *)(a3 + 96) = v119;
    *(_OWORD *)(a3 + 112) = v124;
    *(_OWORD *)(a3 + 128) = v129;
    *(_OWORD *)(a3 + 144) = v134;
    *(_OWORD *)(a3 + 32) = v99;
    *(_OWORD *)(a3 + 48) = v104;
    *(_OWORD *)(a3 + 64) = v109;
    *(_OWORD *)(a3 + 80) = v114;
    long long v53 = v89;
    long long v52 = v94;
    uint64_t result = 1;
LABEL_61:
    *(_OWORD *)a3 = v53;
    *(_OWORD *)(a3 + 16) = v52;
    return result;
  }
  uint64_t v22 = *(void *)(a3 + 56);
  uint64_t v23 = *(void *)(a2 + 56);
  BOOL v24 = v22 < v23;
  if (v22 == v23)
  {
    uint64_t v25 = *(void *)(a3 + 64);
    uint64_t v26 = *(void *)(a2 + 64);
    BOOL v24 = v25 < v26;
    if (v25 == v26) {
      BOOL v24 = *(_OWORD *)(a3 + 72) < *(_OWORD *)(a2 + 72);
    }
  }
  if (v24
    || *(void *)(a3 + 72) == *(void *)(a2 + 72)
    && *(void *)(a3 + 64) == *(void *)(a2 + 64)
    && v22 == v23
    && *(void *)(a3 + 80) == *(void *)(a2 + 80)
    && sub_100BC2CB4(a3, a2))
  {
    goto LABEL_45;
  }
LABEL_33:
  long long v138 = *(_OWORD *)(a1 + 160);
  long long v143 = *(_OWORD *)(a1 + 176);
  uint64_t v148 = *(void *)(a1 + 192);
  long long v118 = *(_OWORD *)(a1 + 96);
  long long v123 = *(_OWORD *)(a1 + 112);
  long long v128 = *(_OWORD *)(a1 + 128);
  long long v133 = *(_OWORD *)(a1 + 144);
  long long v98 = *(_OWORD *)(a1 + 32);
  long long v103 = *(_OWORD *)(a1 + 48);
  long long v108 = *(_OWORD *)(a1 + 64);
  long long v113 = *(_OWORD *)(a1 + 80);
  long long v88 = *(_OWORD *)a1;
  long long v93 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v27 = *(_OWORD *)(a2 + 16);
  long long v28 = *(_OWORD *)(a2 + 32);
  long long v29 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v29;
  *(_OWORD *)(a1 + 16) = v27;
  *(_OWORD *)(a1 + 32) = v28;
  long long v30 = *(_OWORD *)(a2 + 80);
  long long v31 = *(_OWORD *)(a2 + 96);
  long long v32 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v32;
  *(_OWORD *)(a1 + 80) = v30;
  *(_OWORD *)(a1 + 96) = v31;
  long long v33 = *(_OWORD *)(a2 + 144);
  long long v34 = *(_OWORD *)(a2 + 160);
  long long v35 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v34;
  *(_OWORD *)(a1 + 176) = v35;
  *(_OWORD *)(a1 + 144) = v33;
  *(_OWORD *)(a2 + 160) = v138;
  *(_OWORD *)(a2 + 176) = v143;
  *(void *)(a2 + 192) = v148;
  *(_OWORD *)(a2 + 96) = v118;
  *(_OWORD *)(a2 + 112) = v123;
  *(_OWORD *)(a2 + 128) = v128;
  *(_OWORD *)(a2 + 144) = v133;
  *(_OWORD *)(a2 + 32) = v98;
  *(_OWORD *)(a2 + 48) = v103;
  *(_OWORD *)(a2 + 64) = v108;
  *(_OWORD *)(a2 + 80) = v113;
  *(_OWORD *)a2 = v88;
  *(_OWORD *)(a2 + 16) = v93;
  uint64_t v36 = *(void *)(a3 + 48);
  uint64_t v37 = *(void *)(a2 + 48);
  if (v36 != v37)
  {
    if (v36 >= v37) {
      return 1;
    }
    goto LABEL_60;
  }
  uint64_t v38 = *(void *)(a3 + 56);
  uint64_t v39 = *(void *)(a2 + 56);
  BOOL v40 = v38 < v39;
  if (v38 == v39)
  {
    uint64_t v41 = *(void *)(a3 + 64);
    uint64_t v42 = *(void *)(a2 + 64);
    BOOL v40 = v41 < v42;
    if (v41 == v42) {
      BOOL v40 = *(_OWORD *)(a3 + 72) < *(_OWORD *)(a2 + 72);
    }
  }
  if (v40)
  {
LABEL_60:
    long long v141 = *(_OWORD *)(a2 + 160);
    long long v146 = *(_OWORD *)(a2 + 176);
    uint64_t v151 = *(void *)(a2 + 192);
    long long v121 = *(_OWORD *)(a2 + 96);
    long long v126 = *(_OWORD *)(a2 + 112);
    long long v131 = *(_OWORD *)(a2 + 128);
    long long v136 = *(_OWORD *)(a2 + 144);
    long long v101 = *(_OWORD *)(a2 + 32);
    long long v106 = *(_OWORD *)(a2 + 48);
    long long v111 = *(_OWORD *)(a2 + 64);
    long long v116 = *(_OWORD *)(a2 + 80);
    long long v91 = *(_OWORD *)a2;
    long long v96 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    long long v70 = *(_OWORD *)(a3 + 16);
    long long v71 = *(_OWORD *)(a3 + 32);
    long long v72 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v72;
    *(_OWORD *)(a2 + 16) = v70;
    *(_OWORD *)(a2 + 32) = v71;
    long long v73 = *(_OWORD *)(a3 + 80);
    long long v74 = *(_OWORD *)(a3 + 96);
    long long v75 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a2 + 128) = v75;
    *(_OWORD *)(a2 + 80) = v73;
    *(_OWORD *)(a2 + 96) = v74;
    long long v76 = *(_OWORD *)(a3 + 144);
    long long v77 = *(_OWORD *)(a3 + 160);
    long long v78 = *(_OWORD *)(a3 + 176);
    *(void *)(a2 + 192) = *(void *)(a3 + 192);
    *(_OWORD *)(a2 + 160) = v77;
    *(_OWORD *)(a2 + 176) = v78;
    *(_OWORD *)(a2 + 144) = v76;
    *(_OWORD *)(a3 + 160) = v141;
    *(_OWORD *)(a3 + 176) = v146;
    *(void *)(a3 + 192) = v151;
    *(_OWORD *)(a3 + 96) = v121;
    *(_OWORD *)(a3 + 112) = v126;
    *(_OWORD *)(a3 + 128) = v131;
    *(_OWORD *)(a3 + 144) = v136;
    *(_OWORD *)(a3 + 32) = v101;
    *(_OWORD *)(a3 + 48) = v106;
    *(_OWORD *)(a3 + 64) = v111;
    *(_OWORD *)(a3 + 80) = v116;
    long long v53 = v91;
    long long v52 = v96;
    uint64_t result = 2;
    goto LABEL_61;
  }
  if (*(void *)(a3 + 72) != *(void *)(a2 + 72) || *(void *)(a3 + 64) != *(void *)(a2 + 64)) {
    return 1;
  }
  uint64_t result = 1;
  if (v38 == v39 && *(void *)(a3 + 80) == *(void *)(a2 + 80))
  {
    if (!sub_100BC2CB4(a3, a2)) {
      return 1;
    }
    goto LABEL_60;
  }
  return result;
}

unint64_t sub_100BC1C60(long long *a1, unint64_t a2)
{
  unint64_t j = a2;
  long long v4 = a1[11];
  long long v111 = a1[10];
  long long v112 = v4;
  uint64_t v113 = *((void *)a1 + 24);
  long long v5 = a1[7];
  long long v107 = a1[6];
  long long v108 = v5;
  long long v6 = a1[9];
  long long v109 = a1[8];
  long long v110 = v6;
  long long v7 = a1[3];
  long long v103 = a1[2];
  long long v104 = v7;
  long long v8 = a1[5];
  long long v105 = a1[4];
  long long v106 = v8;
  long long v9 = a1[1];
  long long v101 = *a1;
  long long v102 = v9;
  unint64_t v10 = a2 - 200;
  uint64_t v11 = *(void *)(a2 - 152);
  if ((void)v7 != v11)
  {
    if ((uint64_t)v104 >= v11) {
      goto LABEL_11;
    }
LABEL_27:
    for (unint64_t i = (unint64_t)a1 + 200; ; i += 200)
    {
      uint64_t v26 = *(void *)(i + 48);
      if ((void)v104 == v26)
      {
        uint64_t v27 = *(void *)(i + 56);
        BOOL v29 = __OFSUB__(*((void *)&v104 + 1), v27);
        BOOL v28 = *((void *)&v104 + 1) - v27 < 0;
        if (*((void *)&v104 + 1) == v27)
        {
          uint64_t v30 = *(void *)(i + 64);
          BOOL v29 = __OFSUB__((void)v105, v30);
          BOOL v28 = (uint64_t)v105 - v30 < 0;
          if ((void)v105 == v30)
          {
            uint64_t v31 = *(void *)(i + 80);
            BOOL v29 = __OFSUB__((void)v106, v31);
            BOOL v28 = (uint64_t)v106 - v31 < 0;
            if ((void)v106 == v31)
            {
              uint64_t v32 = *(void *)(i + 72);
              BOOL v29 = __OFSUB__(*((void *)&v105 + 1), v32);
              BOOL v28 = *((void *)&v105 + 1) - v32 < 0;
            }
          }
        }
        if (v28 != v29
          || v105 == *(_OWORD *)(i + 64)
          && *((void *)&v104 + 1) == v27
          && (void)v106 == *(void *)(i + 80)
          && (sub_100BC2CB4((uint64_t)&v101, i) & 1) != 0)
        {
          goto LABEL_41;
        }
      }
      else if ((uint64_t)v104 < v26)
      {
        goto LABEL_41;
      }
    }
  }
  uint64_t v12 = *(void *)(a2 - 144);
  BOOL v14 = __OFSUB__(*((void *)&v104 + 1), v12);
  BOOL v13 = *((void *)&v104 + 1) - v12 < 0;
  if (*((void *)&v104 + 1) == v12)
  {
    uint64_t v15 = *(void *)(a2 - 136);
    BOOL v14 = __OFSUB__((void)v105, v15);
    BOOL v13 = (uint64_t)v105 - v15 < 0;
    if ((void)v105 == v15)
    {
      uint64_t v16 = *(void *)(a2 - 120);
      BOOL v14 = __OFSUB__((void)v106, v16);
      BOOL v13 = (uint64_t)v106 - v16 < 0;
      if ((void)v106 == v16)
      {
        uint64_t v17 = *(void *)(a2 - 128);
        BOOL v14 = __OFSUB__(*((void *)&v105 + 1), v17);
        BOOL v13 = *((void *)&v105 + 1) - v17 < 0;
      }
    }
  }
  if (v13 != v14
    || v105 == *(_OWORD *)(a2 - 136)
    && (void)v106 == *(void *)(a2 - 120)
    && *((void *)&v104 + 1) == v12
    && sub_100BC2CB4((uint64_t)&v101, a2 - 200))
  {
    goto LABEL_27;
  }
LABEL_11:
  for (unint64_t i = (unint64_t)a1 + 200; i < j; i += 200)
  {
    uint64_t v19 = *(void *)(i + 48);
    if ((void)v104 == v19)
    {
      uint64_t v20 = *(void *)(i + 56);
      BOOL v22 = __OFSUB__(*((void *)&v104 + 1), v20);
      BOOL v21 = *((void *)&v104 + 1) - v20 < 0;
      if (*((void *)&v104 + 1) == v20)
      {
        uint64_t v23 = *(void *)(i + 64);
        BOOL v22 = __OFSUB__((void)v105, v23);
        BOOL v21 = (uint64_t)v105 - v23 < 0;
        if ((void)v105 == v23)
        {
          uint64_t v24 = *(void *)(i + 80);
          BOOL v22 = __OFSUB__((void)v106, v24);
          BOOL v21 = (uint64_t)v106 - v24 < 0;
          if ((void)v106 == v24)
          {
            uint64_t v25 = *(void *)(i + 72);
            BOOL v22 = __OFSUB__(*((void *)&v105 + 1), v25);
            BOOL v21 = *((void *)&v105 + 1) - v25 < 0;
          }
        }
      }
      if (v21 != v22
        || v105 == *(_OWORD *)(i + 64)
        && *((void *)&v104 + 1) == v20
        && (void)v106 == *(void *)(i + 80)
        && (sub_100BC2CB4((uint64_t)&v101, i) & 1) != 0)
      {
        break;
      }
    }
    else if ((uint64_t)v104 < v19)
    {
      break;
    }
  }
LABEL_41:
  if (i < j)
  {
    for (unint64_t j = v10; ; j -= 200)
    {
      uint64_t v33 = *(void *)(j + 48);
      if ((void)v104 == v33)
      {
        uint64_t v34 = *(void *)(j + 56);
        BOOL v36 = __OFSUB__(*((void *)&v104 + 1), v34);
        BOOL v35 = *((void *)&v104 + 1) - v34 < 0;
        if (*((void *)&v104 + 1) == v34)
        {
          uint64_t v37 = *(void *)(j + 64);
          BOOL v36 = __OFSUB__((void)v105, v37);
          BOOL v35 = (uint64_t)v105 - v37 < 0;
          if ((void)v105 == v37)
          {
            uint64_t v38 = *(void *)(j + 80);
            BOOL v36 = __OFSUB__((void)v106, v38);
            BOOL v35 = (uint64_t)v106 - v38 < 0;
            if ((void)v106 == v38)
            {
              uint64_t v39 = *(void *)(j + 72);
              BOOL v36 = __OFSUB__(*((void *)&v105 + 1), v39);
              BOOL v35 = *((void *)&v105 + 1) - v39 < 0;
            }
          }
        }
        if (v35 == v36
          && (v105 != *(_OWORD *)(j + 64)
           || *((void *)&v104 + 1) != v34
           || (void)v106 != *(void *)(j + 80)
           || (sub_100BC2CB4((uint64_t)&v101, j) & 1) == 0))
        {
          break;
        }
      }
      else if ((uint64_t)v104 >= v33)
      {
        break;
      }
    }
  }
LABEL_81:
  while (i < j)
  {
    long long v114 = *(_OWORD *)i;
    long long v40 = *(_OWORD *)(i + 16);
    long long v41 = *(_OWORD *)(i + 32);
    long long v42 = *(_OWORD *)(i + 64);
    long long v117 = *(_OWORD *)(i + 48);
    long long v118 = v42;
    long long v115 = v40;
    long long v116 = v41;
    long long v43 = *(_OWORD *)(i + 80);
    long long v44 = *(_OWORD *)(i + 96);
    long long v45 = *(_OWORD *)(i + 128);
    long long v121 = *(_OWORD *)(i + 112);
    long long v122 = v45;
    long long v119 = v43;
    long long v120 = v44;
    long long v46 = *(_OWORD *)(i + 144);
    long long v47 = *(_OWORD *)(i + 160);
    long long v48 = *(_OWORD *)(i + 176);
    uint64_t v126 = *(void *)(i + 192);
    long long v124 = v47;
    long long v125 = v48;
    long long v123 = v46;
    *(_OWORD *)unint64_t i = *(_OWORD *)j;
    long long v49 = *(_OWORD *)(j + 16);
    long long v50 = *(_OWORD *)(j + 32);
    long long v51 = *(_OWORD *)(j + 64);
    *(_OWORD *)(i + 48) = *(_OWORD *)(j + 48);
    *(_OWORD *)(i + 64) = v51;
    *(_OWORD *)(i + 16) = v49;
    *(_OWORD *)(i + 32) = v50;
    long long v52 = *(_OWORD *)(j + 80);
    long long v53 = *(_OWORD *)(j + 96);
    long long v54 = *(_OWORD *)(j + 128);
    *(_OWORD *)(i + 112) = *(_OWORD *)(j + 112);
    *(_OWORD *)(i + 128) = v54;
    *(_OWORD *)(i + 80) = v52;
    *(_OWORD *)(i + 96) = v53;
    long long v55 = *(_OWORD *)(j + 144);
    long long v56 = *(_OWORD *)(j + 160);
    long long v57 = *(_OWORD *)(j + 176);
    *(void *)(i + 192) = *(void *)(j + 192);
    *(_OWORD *)(i + 160) = v56;
    *(_OWORD *)(i + 176) = v57;
    *(_OWORD *)(i + 144) = v55;
    *(_OWORD *)unint64_t j = v114;
    long long v58 = v115;
    long long v59 = v116;
    long long v60 = v118;
    *(_OWORD *)(j + 48) = v117;
    *(_OWORD *)(j + 64) = v60;
    *(_OWORD *)(j + 16) = v58;
    *(_OWORD *)(j + 32) = v59;
    long long v61 = v119;
    long long v62 = v120;
    long long v63 = v122;
    *(_OWORD *)(j + 112) = v121;
    *(_OWORD *)(j + 128) = v63;
    *(_OWORD *)(j + 80) = v61;
    *(_OWORD *)(j + 96) = v62;
    long long v64 = v123;
    long long v65 = v124;
    long long v66 = v125;
    *(void *)(j + 192) = v126;
    *(_OWORD *)(j + 160) = v65;
    *(_OWORD *)(j + 176) = v66;
    *(_OWORD *)(j + 144) = v64;
    do
    {
      while (1)
      {
        i += 200;
        uint64_t v67 = *(void *)(i + 48);
        if ((void)v104 == v67) {
          break;
        }
        if ((uint64_t)v104 < v67) {
          goto LABEL_71;
        }
      }
      uint64_t v68 = *(void *)(i + 56);
      BOOL v70 = __OFSUB__(*((void *)&v104 + 1), v68);
      BOOL v69 = *((void *)&v104 + 1) - v68 < 0;
      if (*((void *)&v104 + 1) == v68)
      {
        uint64_t v71 = *(void *)(i + 64);
        BOOL v70 = __OFSUB__((void)v105, v71);
        BOOL v69 = (uint64_t)v105 - v71 < 0;
        if ((void)v105 == v71)
        {
          uint64_t v72 = *(void *)(i + 80);
          BOOL v70 = __OFSUB__((void)v106, v72);
          BOOL v69 = (uint64_t)v106 - v72 < 0;
          if ((void)v106 == v72)
          {
            uint64_t v73 = *(void *)(i + 72);
            BOOL v70 = __OFSUB__(*((void *)&v105 + 1), v73);
            BOOL v69 = *((void *)&v105 + 1) - v73 < 0;
          }
        }
      }
    }
    while (v69 == v70
         && (v105 != *(_OWORD *)(i + 64)
          || (void)v106 != *(void *)(i + 80)
          || *((void *)&v104 + 1) != v68
          || !sub_100BC2CB4((uint64_t)&v101, i)));
    do
    {
LABEL_71:
      while (1)
      {
        j -= 200;
        uint64_t v74 = *(void *)(j + 48);
        if ((void)v104 == v74) {
          break;
        }
        if ((uint64_t)v104 >= v74) {
          goto LABEL_81;
        }
      }
      uint64_t v75 = *(void *)(j + 56);
      BOOL v77 = __OFSUB__(*((void *)&v104 + 1), v75);
      BOOL v76 = *((void *)&v104 + 1) - v75 < 0;
      if (*((void *)&v104 + 1) == v75)
      {
        uint64_t v78 = *(void *)(j + 64);
        BOOL v77 = __OFSUB__((void)v105, v78);
        BOOL v76 = (uint64_t)v105 - v78 < 0;
        if ((void)v105 == v78)
        {
          uint64_t v79 = *(void *)(j + 80);
          BOOL v77 = __OFSUB__((void)v106, v79);
          BOOL v76 = (uint64_t)v106 - v79 < 0;
          if ((void)v106 == v79)
          {
            uint64_t v80 = *(void *)(j + 72);
            BOOL v77 = __OFSUB__(*((void *)&v105 + 1), v80);
            BOOL v76 = *((void *)&v105 + 1) - v80 < 0;
          }
        }
      }
    }
    while (v76 != v77
         || v105 == *(_OWORD *)(j + 64)
         && *((void *)&v104 + 1) == v75
         && (void)v106 == *(void *)(j + 80)
         && (sub_100BC2CB4((uint64_t)&v101, j) & 1) != 0);
  }
  long long v81 = (long long *)(i - 200);
  if ((long long *)(i - 200) != a1)
  {
    *a1 = *v81;
    long long v82 = *(_OWORD *)(i - 184);
    long long v83 = *(_OWORD *)(i - 168);
    long long v84 = *(_OWORD *)(i - 136);
    a1[3] = *(_OWORD *)(i - 152);
    a1[4] = v84;
    a1[1] = v82;
    a1[2] = v83;
    long long v85 = *(_OWORD *)(i - 120);
    long long v86 = *(_OWORD *)(i - 104);
    long long v87 = *(_OWORD *)(i - 72);
    a1[7] = *(_OWORD *)(i - 88);
    a1[8] = v87;
    a1[5] = v85;
    a1[6] = v86;
    long long v88 = *(_OWORD *)(i - 56);
    long long v89 = *(_OWORD *)(i - 40);
    long long v90 = *(_OWORD *)(i - 24);
    *((void *)a1 + 24) = *(void *)(i - 8);
    a1[10] = v89;
    a1[11] = v90;
    a1[9] = v88;
  }
  long long *v81 = v101;
  long long v91 = v102;
  long long v92 = v103;
  long long v93 = v105;
  *(_OWORD *)(i - 152) = v104;
  *(_OWORD *)(i - 136) = v93;
  *(_OWORD *)(i - 184) = v91;
  *(_OWORD *)(i - 168) = v92;
  long long v94 = v106;
  long long v95 = v107;
  long long v96 = v109;
  *(_OWORD *)(i - 88) = v108;
  *(_OWORD *)(i - 72) = v96;
  *(_OWORD *)(i - 120) = v94;
  *(_OWORD *)(i - 104) = v95;
  long long v97 = v110;
  long long v98 = v111;
  long long v99 = v112;
  *(void *)(i - 8) = v113;
  *(_OWORD *)(i - 40) = v98;
  *(_OWORD *)(i - 24) = v99;
  *(_OWORD *)(i - 56) = v97;
  return i;
}

unint64_t sub_100BC2228(long long *a1, void *a2)
{
  uint64_t v4 = 0;
  uint64_t v110 = *((void *)a1 + 24);
  long long v5 = a1[11];
  long long v108 = a1[10];
  long long v109 = v5;
  long long v6 = a1[7];
  long long v104 = a1[6];
  long long v105 = v6;
  long long v7 = a1[9];
  long long v106 = a1[8];
  long long v107 = v7;
  long long v8 = a1[3];
  long long v100 = a1[2];
  long long v101 = v8;
  long long v9 = a1[5];
  long long v102 = a1[4];
  long long v103 = v9;
  long long v10 = a1[1];
  long long v98 = *a1;
  long long v99 = v10;
  while (1)
  {
    uint64_t v11 = (uint64_t)a1 + v4;
    uint64_t v12 = *(void *)((char *)a1 + v4 + 248);
    if (v12 == (void)v101) {
      break;
    }
    if (v12 >= (uint64_t)v101) {
      goto LABEL_15;
    }
LABEL_14:
    v4 += 200;
  }
  uint64_t v13 = *(void *)(v11 + 256);
  BOOL v15 = __OFSUB__(v13, *((void *)&v101 + 1));
  BOOL v14 = v13 - *((void *)&v101 + 1) < 0;
  if (v13 == *((void *)&v101 + 1))
  {
    uint64_t v16 = *(void *)((char *)a1 + v4 + 264);
    BOOL v15 = __OFSUB__(v16, (void)v102);
    BOOL v14 = v16 - (uint64_t)v102 < 0;
    if (v16 == (void)v102)
    {
      uint64_t v17 = *(void *)((char *)a1 + v4 + 280);
      BOOL v15 = __OFSUB__(v17, (void)v103);
      BOOL v14 = v17 - (uint64_t)v103 < 0;
      if (v17 == (void)v103)
      {
        uint64_t v18 = *(void *)((char *)a1 + v4 + 272);
        BOOL v15 = __OFSUB__(v18, *((void *)&v102 + 1));
        BOOL v14 = v18 - *((void *)&v102 + 1) < 0;
      }
    }
  }
  if (v14 != v15
    || *(long long *)((char *)a1 + v4 + 264) == v102
    && v13 == *((void *)&v101 + 1)
    && *(void *)((char *)a1 + v4 + 280) == (void)v103
    && (sub_100BC2CB4(v11 + 200, (uint64_t)&v98) & 1) != 0)
  {
    goto LABEL_14;
  }
LABEL_15:
  unint64_t v19 = (unint64_t)a1 + v4;
  unint64_t v20 = (unint64_t)a1 + v4 + 200;
  if (v4)
  {
    do
    {
      while (1)
      {
        a2 -= 25;
        uint64_t v21 = a2[6];
        if (v21 == (void)v101) {
          break;
        }
        if (v21 < (uint64_t)v101) {
          goto LABEL_46;
        }
      }
      uint64_t v22 = a2[7];
      BOOL v24 = __OFSUB__(v22, *((void *)&v101 + 1));
      BOOL v23 = v22 - *((void *)&v101 + 1) < 0;
      if (v22 == *((void *)&v101 + 1))
      {
        uint64_t v25 = a2[8];
        BOOL v24 = __OFSUB__(v25, (void)v102);
        BOOL v23 = v25 - (uint64_t)v102 < 0;
        if (v25 == (void)v102)
        {
          uint64_t v26 = a2[10];
          BOOL v24 = __OFSUB__(v26, (void)v103);
          BOOL v23 = v26 - (uint64_t)v103 < 0;
          if (v26 == (void)v103)
          {
            uint64_t v27 = a2[9];
            BOOL v24 = __OFSUB__(v27, *((void *)&v102 + 1));
            BOOL v23 = v27 - *((void *)&v102 + 1) < 0;
          }
        }
      }
    }
    while (v23 == v24
         && (*((_OWORD *)a2 + 4) != v102
          || v22 != *((void *)&v101 + 1)
          || a2[10] != (void)v103
          || !sub_100BC2CB4((uint64_t)a2, (uint64_t)&v98)));
  }
  else
  {
    do
    {
      if (v20 >= (unint64_t)a2) {
        break;
      }
      while (1)
      {
        a2 -= 25;
        uint64_t v28 = a2[6];
        if (v28 == (void)v101) {
          break;
        }
        if (v28 < (uint64_t)v101 || v20 >= (unint64_t)a2) {
          goto LABEL_46;
        }
      }
      uint64_t v30 = a2[7];
      BOOL v32 = __OFSUB__(v30, *((void *)&v101 + 1));
      BOOL v31 = v30 - *((void *)&v101 + 1) < 0;
      if (v30 == *((void *)&v101 + 1))
      {
        uint64_t v33 = a2[8];
        BOOL v32 = __OFSUB__(v33, (void)v102);
        BOOL v31 = v33 - (uint64_t)v102 < 0;
        if (v33 == (void)v102)
        {
          uint64_t v34 = a2[10];
          BOOL v32 = __OFSUB__(v34, (void)v103);
          BOOL v31 = v34 - (uint64_t)v103 < 0;
          if (v34 == (void)v103)
          {
            uint64_t v35 = a2[9];
            BOOL v32 = __OFSUB__(v35, *((void *)&v102 + 1));
            BOOL v31 = v35 - *((void *)&v102 + 1) < 0;
          }
        }
      }
    }
    while (v31 == v32
         && (*((_OWORD *)a2 + 4) != v102
          || v30 != *((void *)&v101 + 1)
          || a2[10] != (void)v103
          || (sub_100BC2CB4((uint64_t)a2, (uint64_t)&v98) & 1) == 0));
  }
LABEL_46:
  if (v20 < (unint64_t)a2)
  {
    unint64_t v36 = (unint64_t)a1 + v4 + 200;
    unint64_t v37 = (unint64_t)a2;
    do
    {
      long long v111 = *(_OWORD *)v36;
      long long v38 = *(_OWORD *)(v36 + 16);
      long long v39 = *(_OWORD *)(v36 + 32);
      long long v40 = *(_OWORD *)(v36 + 64);
      long long v114 = *(_OWORD *)(v36 + 48);
      long long v115 = v40;
      long long v112 = v38;
      long long v113 = v39;
      long long v41 = *(_OWORD *)(v36 + 80);
      long long v42 = *(_OWORD *)(v36 + 96);
      long long v43 = *(_OWORD *)(v36 + 128);
      long long v118 = *(_OWORD *)(v36 + 112);
      long long v119 = v43;
      long long v116 = v41;
      long long v117 = v42;
      long long v44 = *(_OWORD *)(v36 + 144);
      long long v45 = *(_OWORD *)(v36 + 160);
      long long v46 = *(_OWORD *)(v36 + 176);
      uint64_t v123 = *(void *)(v36 + 192);
      long long v121 = v45;
      long long v122 = v46;
      long long v120 = v44;
      *(_OWORD *)unint64_t v36 = *(_OWORD *)v37;
      long long v47 = *(_OWORD *)(v37 + 16);
      long long v48 = *(_OWORD *)(v37 + 32);
      long long v49 = *(_OWORD *)(v37 + 64);
      *(_OWORD *)(v36 + 48) = *(_OWORD *)(v37 + 48);
      *(_OWORD *)(v36 + 64) = v49;
      *(_OWORD *)(v36 + 16) = v47;
      *(_OWORD *)(v36 + 32) = v48;
      long long v50 = *(_OWORD *)(v37 + 80);
      long long v51 = *(_OWORD *)(v37 + 96);
      long long v52 = *(_OWORD *)(v37 + 128);
      *(_OWORD *)(v36 + 112) = *(_OWORD *)(v37 + 112);
      *(_OWORD *)(v36 + 128) = v52;
      *(_OWORD *)(v36 + 80) = v50;
      *(_OWORD *)(v36 + 96) = v51;
      long long v53 = *(_OWORD *)(v37 + 144);
      long long v54 = *(_OWORD *)(v37 + 160);
      long long v55 = *(_OWORD *)(v37 + 176);
      *(void *)(v36 + 192) = *(void *)(v37 + 192);
      *(_OWORD *)(v36 + 160) = v54;
      *(_OWORD *)(v36 + 176) = v55;
      *(_OWORD *)(v36 + 144) = v53;
      *(_OWORD *)unint64_t v37 = v111;
      long long v56 = v112;
      long long v57 = v113;
      long long v58 = v115;
      *(_OWORD *)(v37 + 48) = v114;
      *(_OWORD *)(v37 + 64) = v58;
      *(_OWORD *)(v37 + 16) = v56;
      *(_OWORD *)(v37 + 32) = v57;
      long long v59 = v116;
      long long v60 = v117;
      long long v61 = v119;
      *(_OWORD *)(v37 + 112) = v118;
      *(_OWORD *)(v37 + 128) = v61;
      *(_OWORD *)(v37 + 80) = v59;
      *(_OWORD *)(v37 + 96) = v60;
      long long v62 = v120;
      long long v63 = v121;
      long long v64 = v122;
      *(void *)(v37 + 192) = v123;
      *(_OWORD *)(v37 + 160) = v63;
      *(_OWORD *)(v37 + 176) = v64;
      *(_OWORD *)(v37 + 144) = v62;
      do
      {
        while (1)
        {
          v36 += 200;
          uint64_t v65 = *(void *)(v36 + 48);
          if (v65 == (void)v101) {
            break;
          }
          if (v65 >= (uint64_t)v101) {
            goto LABEL_63;
          }
        }
        uint64_t v66 = *(void *)(v36 + 56);
        BOOL v68 = __OFSUB__(v66, *((void *)&v101 + 1));
        BOOL v67 = v66 - *((void *)&v101 + 1) < 0;
        if (v66 == *((void *)&v101 + 1))
        {
          uint64_t v69 = *(void *)(v36 + 64);
          BOOL v68 = __OFSUB__(v69, (void)v102);
          BOOL v67 = v69 - (uint64_t)v102 < 0;
          if (v69 == (void)v102)
          {
            uint64_t v70 = *(void *)(v36 + 80);
            BOOL v68 = __OFSUB__(v70, (void)v103);
            BOOL v67 = v70 - (uint64_t)v103 < 0;
            if (v70 == (void)v103)
            {
              uint64_t v71 = *(void *)(v36 + 72);
              BOOL v68 = __OFSUB__(v71, *((void *)&v102 + 1));
              BOOL v67 = v71 - *((void *)&v102 + 1) < 0;
            }
          }
        }
      }
      while (v67 != v68
           || *(_OWORD *)(v36 + 64) == v102
           && *(void *)(v36 + 80) == (void)v103
           && v66 == *((void *)&v101 + 1)
           && sub_100BC2CB4(v36, (uint64_t)&v98));
      do
      {
LABEL_63:
        while (1)
        {
          v37 -= 200;
          uint64_t v72 = *(void *)(v37 + 48);
          if (v72 == (void)v101) {
            break;
          }
          if (v72 < (uint64_t)v101) {
            goto LABEL_73;
          }
        }
        uint64_t v73 = *(void *)(v37 + 56);
        BOOL v75 = __OFSUB__(v73, *((void *)&v101 + 1));
        BOOL v74 = v73 - *((void *)&v101 + 1) < 0;
        if (v73 == *((void *)&v101 + 1))
        {
          uint64_t v76 = *(void *)(v37 + 64);
          BOOL v75 = __OFSUB__(v76, (void)v102);
          BOOL v74 = v76 - (uint64_t)v102 < 0;
          if (v76 == (void)v102)
          {
            uint64_t v77 = *(void *)(v37 + 80);
            BOOL v75 = __OFSUB__(v77, (void)v103);
            BOOL v74 = v77 - (uint64_t)v103 < 0;
            if (v77 == (void)v103)
            {
              uint64_t v78 = *(void *)(v37 + 72);
              BOOL v75 = __OFSUB__(v78, *((void *)&v102 + 1));
              BOOL v74 = v78 - *((void *)&v102 + 1) < 0;
            }
          }
        }
      }
      while (v74 == v75
           && (*(_OWORD *)(v37 + 64) != v102
            || v73 != *((void *)&v101 + 1)
            || *(void *)(v37 + 80) != (void)v103
            || !sub_100BC2CB4(v37, (uint64_t)&v98)));
LABEL_73:
      ;
    }
    while (v36 < v37);
    unint64_t v19 = v36 - 200;
  }
  if ((long long *)v19 != a1)
  {
    *a1 = *(_OWORD *)v19;
    long long v79 = *(_OWORD *)(v19 + 16);
    long long v80 = *(_OWORD *)(v19 + 32);
    long long v81 = *(_OWORD *)(v19 + 64);
    a1[3] = *(_OWORD *)(v19 + 48);
    a1[4] = v81;
    a1[1] = v79;
    a1[2] = v80;
    long long v82 = *(_OWORD *)(v19 + 80);
    long long v83 = *(_OWORD *)(v19 + 96);
    long long v84 = *(_OWORD *)(v19 + 128);
    a1[7] = *(_OWORD *)(v19 + 112);
    a1[8] = v84;
    a1[5] = v82;
    a1[6] = v83;
    long long v85 = *(_OWORD *)(v19 + 144);
    long long v86 = *(_OWORD *)(v19 + 160);
    long long v87 = *(_OWORD *)(v19 + 176);
    *((void *)a1 + 24) = *(void *)(v19 + 192);
    a1[10] = v86;
    a1[11] = v87;
    a1[9] = v85;
  }
  *(_OWORD *)unint64_t v19 = v98;
  long long v88 = v99;
  long long v89 = v100;
  long long v90 = v102;
  *(_OWORD *)(v19 + 48) = v101;
  *(_OWORD *)(v19 + 64) = v90;
  *(_OWORD *)(v19 + 16) = v88;
  *(_OWORD *)(v19 + 32) = v89;
  long long v91 = v103;
  long long v92 = v104;
  long long v93 = v106;
  *(_OWORD *)(v19 + 112) = v105;
  *(_OWORD *)(v19 + 128) = v93;
  *(_OWORD *)(v19 + 80) = v91;
  *(_OWORD *)(v19 + 96) = v92;
  long long v94 = v107;
  long long v95 = v108;
  long long v96 = v109;
  *(void *)(v19 + 192) = v110;
  *(_OWORD *)(v19 + 160) = v95;
  *(_OWORD *)(v19 + 176) = v96;
  *(_OWORD *)(v19 + 144) = v94;
  return v19;
}

BOOL sub_100BC2778(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x8F5C28F5C28F5C29 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      long long v6 = (_OWORD *)(a2 - 200);
      uint64_t v7 = *(void *)(a2 - 152);
      uint64_t v8 = *(void *)(a1 + 48);
      if (v7 != v8)
      {
        if (v7 >= v8) {
          return result;
        }
        goto LABEL_52;
      }
      uint64_t v9 = *(void *)(a2 - 144);
      uint64_t v10 = *(void *)(a1 + 56);
      BOOL v11 = v9 < v10;
      if (v9 == v10)
      {
        uint64_t v12 = *(void *)(a2 - 136);
        uint64_t v13 = *(void *)(a1 + 64);
        BOOL v11 = v12 < v13;
        if (v12 == v13) {
          BOOL v11 = *(_OWORD *)(a2 - 128) < *(_OWORD *)(a1 + 72);
        }
      }
      if (v11) {
        goto LABEL_52;
      }
      if (*(void *)(a2 - 128) == *(void *)(a1 + 72)
        && *(void *)(a2 - 136) == *(void *)(a1 + 64)
        && v9 == v10
        && *(void *)(a2 - 120) == *(void *)(a1 + 80))
      {
        if (!sub_100BC2CB4(a2 - 200, a1)) {
          return 1;
        }
LABEL_52:
        long long v60 = *(_OWORD *)(a1 + 176);
        long long v91 = *(_OWORD *)(a1 + 160);
        long long v92 = v60;
        uint64_t v93 = *(void *)(a1 + 192);
        long long v61 = *(_OWORD *)(a1 + 112);
        long long v87 = *(_OWORD *)(a1 + 96);
        long long v88 = v61;
        long long v62 = *(_OWORD *)(a1 + 144);
        long long v89 = *(_OWORD *)(a1 + 128);
        long long v90 = v62;
        long long v63 = *(_OWORD *)(a1 + 48);
        long long v83 = *(_OWORD *)(a1 + 32);
        long long v84 = v63;
        long long v64 = *(_OWORD *)(a1 + 80);
        long long v85 = *(_OWORD *)(a1 + 64);
        long long v86 = v64;
        long long v65 = *(_OWORD *)(a1 + 16);
        long long v81 = *(_OWORD *)a1;
        long long v82 = v65;
        *(_OWORD *)a1 = *v6;
        long long v66 = *(_OWORD *)(a2 - 184);
        long long v67 = *(_OWORD *)(a2 - 168);
        long long v68 = *(_OWORD *)(a2 - 136);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 - 152);
        *(_OWORD *)(a1 + 64) = v68;
        *(_OWORD *)(a1 + 16) = v66;
        *(_OWORD *)(a1 + 32) = v67;
        long long v69 = *(_OWORD *)(a2 - 120);
        long long v70 = *(_OWORD *)(a2 - 104);
        long long v71 = *(_OWORD *)(a2 - 72);
        *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 - 88);
        *(_OWORD *)(a1 + 128) = v71;
        *(_OWORD *)(a1 + 80) = v69;
        *(_OWORD *)(a1 + 96) = v70;
        long long v72 = *(_OWORD *)(a2 - 56);
        long long v73 = *(_OWORD *)(a2 - 40);
        long long v74 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 192) = *(void *)(a2 - 8);
        *(_OWORD *)(a1 + 160) = v73;
        *(_OWORD *)(a1 + 176) = v74;
        *(_OWORD *)(a1 + 144) = v72;
        long long v75 = v92;
        *(_OWORD *)(a2 - 40) = v91;
        *(_OWORD *)(a2 - 24) = v75;
        *(void *)(a2 - 8) = v93;
        long long v76 = v88;
        *(_OWORD *)(a2 - 104) = v87;
        *(_OWORD *)(a2 - 88) = v76;
        long long v77 = v90;
        *(_OWORD *)(a2 - 72) = v89;
        *(_OWORD *)(a2 - 56) = v77;
        long long v78 = v84;
        *(_OWORD *)(a2 - 168) = v83;
        *(_OWORD *)(a2 - 152) = v78;
        long long v79 = v86;
        *(_OWORD *)(a2 - 136) = v85;
        *(_OWORD *)(a2 - 120) = v79;
        long long v80 = v82;
        BOOL result = 1;
        *long long v6 = v81;
        *(_OWORD *)(a2 - 184) = v80;
      }
      return result;
    case 3uLL:
      sub_100BC1578(a1, a1 + 200, a2 - 200);
      return 1;
    case 4uLL:
      sub_100BC3080(a1, a1 + 200, a1 + 400, a2 - 200);
      return 1;
    case 5uLL:
      sub_100BC34BC(a1, a1 + 200, a1 + 400, a1 + 600, a2 - 200);
      return 1;
    default:
      uint64_t v14 = a1 + 400;
      sub_100BC1578(a1, a1 + 200, a1 + 400);
      uint64_t v15 = a1 + 600;
      if (a1 + 600 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
LABEL_16:
  uint64_t v18 = *(void *)(v15 + 48);
  uint64_t v19 = *(void *)(v14 + 48);
  if (v18 == v19)
  {
    uint64_t v20 = *(void *)(v15 + 56);
    uint64_t v21 = *(void *)(v14 + 56);
    BOOL v22 = v20 < v21;
    if (v20 == v21)
    {
      uint64_t v23 = *(void *)(v15 + 64);
      uint64_t v24 = *(void *)(v14 + 64);
      BOOL v22 = v23 < v24;
      if (v23 == v24) {
        BOOL v22 = *(_OWORD *)(v15 + 72) < *(_OWORD *)(v14 + 72);
      }
    }
    if (!v22
      && (*(void *)(v15 + 72) != *(void *)(v14 + 72)
       || *(void *)(v15 + 64) != *(void *)(v14 + 64)
       || v20 != v21
       || *(void *)(v15 + 80) != *(void *)(v14 + 80)
       || !sub_100BC2CB4(v15, v14)))
    {
      goto LABEL_45;
    }
  }
  else if (v18 >= v19)
  {
    goto LABEL_45;
  }
  long long v25 = *(_OWORD *)(v15 + 48);
  long long v83 = *(_OWORD *)(v15 + 32);
  long long v84 = v25;
  long long v26 = *(_OWORD *)(v15 + 112);
  long long v87 = *(_OWORD *)(v15 + 96);
  long long v88 = v26;
  long long v27 = *(_OWORD *)(v15 + 80);
  long long v85 = *(_OWORD *)(v15 + 64);
  long long v86 = v27;
  uint64_t v93 = *(void *)(v15 + 192);
  long long v28 = *(_OWORD *)(v15 + 176);
  long long v91 = *(_OWORD *)(v15 + 160);
  long long v92 = v28;
  long long v29 = *(_OWORD *)(v15 + 144);
  long long v89 = *(_OWORD *)(v15 + 128);
  long long v90 = v29;
  long long v30 = *(_OWORD *)(v15 + 16);
  long long v81 = *(_OWORD *)v15;
  long long v82 = v30;
  long long v31 = *(_OWORD *)(v14 + 176);
  *(_OWORD *)(v15 + 160) = *(_OWORD *)(v14 + 160);
  *(_OWORD *)(v15 + 176) = v31;
  *(void *)(v15 + 192) = *(void *)(v14 + 192);
  long long v32 = *(_OWORD *)(v14 + 112);
  *(_OWORD *)(v15 + 96) = *(_OWORD *)(v14 + 96);
  *(_OWORD *)(v15 + 112) = v32;
  long long v33 = *(_OWORD *)(v14 + 144);
  *(_OWORD *)(v15 + 128) = *(_OWORD *)(v14 + 128);
  *(_OWORD *)(v15 + 144) = v33;
  long long v34 = *(_OWORD *)(v14 + 48);
  *(_OWORD *)(v15 + 32) = *(_OWORD *)(v14 + 32);
  *(_OWORD *)(v15 + 48) = v34;
  long long v35 = *(_OWORD *)(v14 + 80);
  *(_OWORD *)(v15 + 64) = *(_OWORD *)(v14 + 64);
  *(_OWORD *)(v15 + 80) = v35;
  long long v36 = *(_OWORD *)(v14 + 16);
  uint64_t v37 = a1;
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v14;
  *(_OWORD *)(v15 + 16) = v36;
  if (v14 == a1) {
    goto LABEL_44;
  }
  uint64_t v38 = v16;
  while (1)
  {
    uint64_t v39 = a1 + v38;
    long long v40 = (_OWORD *)(a1 + v38 + 200);
    uint64_t v41 = *(void *)(a1 + v38 + 248);
    if ((void)v84 == v41)
    {
      uint64_t v42 = *(void *)(v39 + 256);
      BOOL v43 = *((void *)&v84 + 1) < v42;
      if (*((void *)&v84 + 1) == v42)
      {
        uint64_t v44 = *(void *)(a1 + v38 + 264);
        BOOL v43 = (uint64_t)v85 < v44;
        if ((void)v85 == v44) {
          BOOL v43 = (__int128)__PAIR128__(v86, *((unint64_t *)&v85 + 1)) < *(_OWORD *)(a1 + v38 + 272);
        }
      }
      if (!v43)
      {
        if (v85 != *(_OWORD *)(a1 + v38 + 264)
          || *((void *)&v84 + 1) != v42
          || (void)v86 != *(void *)(a1 + v38 + 280))
        {
LABEL_43:
          uint64_t v37 = v14;
LABEL_44:
          *(_OWORD *)uint64_t v37 = v81;
          long long v51 = v82;
          long long v52 = v83;
          long long v53 = v85;
          *(_OWORD *)(v37 + 48) = v84;
          *(_OWORD *)(v37 + 64) = v53;
          *(_OWORD *)(v37 + 16) = v51;
          *(_OWORD *)(v37 + 32) = v52;
          long long v54 = v86;
          long long v55 = v87;
          long long v56 = v89;
          *(_OWORD *)(v37 + 112) = v88;
          *(_OWORD *)(v37 + 128) = v56;
          *(_OWORD *)(v37 + 80) = v54;
          *(_OWORD *)(v37 + 96) = v55;
          long long v57 = v90;
          long long v58 = v91;
          long long v59 = v92;
          *(void *)(v37 + 192) = v93;
          *(_OWORD *)(v37 + 160) = v58;
          *(_OWORD *)(v37 + 176) = v59;
          *(_OWORD *)(v37 + 144) = v57;
          if (++v17 == 8) {
            return v15 + 200 == a2;
          }
LABEL_45:
          uint64_t v14 = v15;
          v16 += 200;
          v15 += 200;
          if (v15 == a2) {
            return 1;
          }
          goto LABEL_16;
        }
        if (!sub_100BC2CB4((uint64_t)&v81, a1 + v38 + 200))
        {
          uint64_t v37 = a1 + v38 + 400;
          goto LABEL_44;
        }
      }
    }
    else if ((uint64_t)v84 >= v41)
    {
      goto LABEL_43;
    }
    v14 -= 200;
    long long v45 = *(_OWORD *)(a1 + v38 + 376);
    *(_OWORD *)(v39 + 560) = *(_OWORD *)(a1 + v38 + 360);
    *(_OWORD *)(v39 + 576) = v45;
    *(void *)(v39 + 592) = *(void *)(a1 + v38 + 392);
    long long v46 = *(_OWORD *)(a1 + v38 + 312);
    *(_OWORD *)(v39 + 496) = *(_OWORD *)(a1 + v38 + 296);
    *(_OWORD *)(v39 + 512) = v46;
    long long v47 = *(_OWORD *)(a1 + v38 + 344);
    *(_OWORD *)(v39 + 528) = *(_OWORD *)(a1 + v38 + 328);
    *(_OWORD *)(v39 + 544) = v47;
    long long v48 = *(_OWORD *)(a1 + v38 + 248);
    *(_OWORD *)(v39 + 432) = *(_OWORD *)(a1 + v38 + 232);
    *(_OWORD *)(v39 + 448) = v48;
    long long v49 = *(_OWORD *)(a1 + v38 + 280);
    *(_OWORD *)(v39 + 464) = *(_OWORD *)(a1 + v38 + 264);
    *(_OWORD *)(v39 + 480) = v49;
    long long v50 = *(_OWORD *)(a1 + v38 + 216);
    v38 -= 200;
    *(_OWORD *)(v39 + 400) = *v40;
    *(_OWORD *)(v39 + 416) = v50;
    if (v38 == -400)
    {
      uint64_t v37 = a1;
      goto LABEL_44;
    }
  }
}

uint64_t sub_100BC2CB4(uint64_t a1, uint64_t a2)
{
  if (vabdd_f64(*(double *)(a1 + 104), *(double *)(a2 + 104)) < 50.0)
  {
    double v4 = *(double *)(a1 + 96);
    if (v4 == 0.0) {
      sub_101A81134();
    }
    double v5 = *(double *)(a2 + 96);
    if (v5 == 0.0) {
      sub_101A81160();
    }
    double v6 = *(double *)(a1 + 88) / v4;
    double v7 = *(double *)(a2 + 88) / v5;
    if (v6 == v7) {
      goto LABEL_36;
    }
    if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v14 = vabdd_f64(v6, v7);
      double v15 = fabs(v6);
      double v16 = fabs(v7);
      if (v15 < v16) {
        double v15 = v16;
      }
      double v17 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
      if (v14 <= v17)
      {
LABEL_36:
        double v8 = *(double *)a1;
        double v37 = *(double *)(a1 + 8);
        double v38 = v8;
        sub_10075D084(&v38, &v37, 1);
        double v9 = v37;
        double v10 = v38;
        double v11 = *(double *)a2;
        double v37 = *(double *)(a2 + 8);
        double v38 = v11;
        sub_10075D084(&v38, &v37, 1);
        if (v10 == v38) {
          goto LABEL_61;
        }
        if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (*(void *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          double v18 = vabdd_f64(v10, v38);
          double v19 = fabs(v10);
          double v20 = fabs(v38);
          if (v19 >= v20) {
            double v20 = v19;
          }
          double v21 = v20 >= 1.0 ? v20 * 2.22044605e-16 : 2.22044605e-16;
          if (v18 <= v21)
          {
LABEL_61:
            if (v9 == v37) {
              return sub_100BC2F78((uint64_t)&unk_102473110, a1, a2);
            }
            if ((*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
              && (*(void *)&v37 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
            {
              double v22 = vabdd_f64(v9, v37);
              double v23 = fabs(v9);
              double v24 = fabs(v37);
              if (v23 >= v24) {
                double v24 = v23;
              }
              double v25 = v24 >= 1.0 ? v24 * 2.22044605e-16 : 2.22044605e-16;
              if (v22 <= v25) {
                return sub_100BC2F78((uint64_t)&unk_102473110, a1, a2);
              }
            }
          }
        }
      }
    }
  }
  double v26 = *(double *)(a1 + 104);
  double v27 = *(double *)(a2 + 104);
  if (vabdd_f64(v26, v27) >= 50.0) {
    return v26 < v27;
  }
  double v28 = *(double *)(a1 + 96);
  if (v28 == 0.0) {
    sub_101A81058();
  }
  double v29 = *(double *)(a2 + 96);
  if (v29 == 0.0) {
    sub_101A81084();
  }
  double v30 = *(double *)(a1 + 88) / v28;
  double v31 = *(double *)(a2 + 88) / v29;
  if (v30 == v31)
  {
    BOOL v32 = 0;
  }
  else if ((*(void *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL {
         || (*(void *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  }
  {
    BOOL v32 = 1;
  }
  else
  {
    double v33 = vabdd_f64(v30, v31);
    double v34 = fabs(v30);
    double v35 = fabs(v31);
    if (v34 < v35) {
      double v34 = v35;
    }
    if (v34 >= 1.0) {
      double v36 = v34 * 2.22044605e-16;
    }
    else {
      double v36 = 2.22044605e-16;
    }
    BOOL v32 = v33 > v36;
  }
  return v30 < v31 && v32;
}

uint64_t sub_100BC2F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 136) != *(void *)(a3 + 136))
  {
    uint64_t v7 = *(int *)(a2 + 40);
    double v8 = dword_101D82E74;
    if (v7 <= 5)
    {
      int v6 = dword_101D82E74[v7];
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v3 = *(void *)(a2 + 144);
  uint64_t v4 = *(void *)(a3 + 144);
  if (v3 == v4)
  {
    uint64_t v5 = *(int *)(a2 + 40);
    if (v5 > 5) {
      int v6 = -1;
    }
    else {
      int v6 = dword_101D82E74[v5];
    }
    uint64_t v12 = *(int *)(a3 + 40);
    if (v12 <= 5)
    {
      int v11 = dword_101D82E74[v12];
      return v6 < v11;
    }
    goto LABEL_18;
  }
  if (v3 == -1)
  {
    unsigned int v9 = *(_DWORD *)(a2 + 40);
    if (v9 == 1) {
      return 0;
    }
    if (v9 != 2)
    {
LABEL_10:
      double v8 = dword_101D82E5C;
      if (v9 <= 5)
      {
        int v6 = dword_101D82E5C[v9];
        goto LABEL_13;
      }
LABEL_12:
      int v6 = -1;
LABEL_13:
      uint64_t v10 = *(int *)(a3 + 40);
      if (v10 <= 5)
      {
        int v11 = v8[v10];
        return v6 < v11;
      }
LABEL_18:
      int v11 = -1;
      return v6 < v11;
    }
  }
  else
  {
    if (v4 != -1)
    {
LABEL_9:
      unsigned int v9 = *(_DWORD *)(a2 + 40);
      goto LABEL_10;
    }
    int v14 = *(_DWORD *)(a3 + 40);
    if (v14 != 1)
    {
      if (v14 != 2) {
        goto LABEL_9;
      }
      return 0;
    }
  }
  return 1;
}

__n128 sub_100BC3080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100BC1578(a1, a2, a3);
  uint64_t v9 = *(void *)(a4 + 48);
  uint64_t v10 = *(void *)(a3 + 48);
  if (v9 != v10)
  {
    if (v9 >= v10) {
      return result;
    }
LABEL_13:
    long long v87 = *(_OWORD *)(a3 + 160);
    long long v90 = *(_OWORD *)(a3 + 176);
    uint64_t v93 = *(void *)(a3 + 192);
    long long v75 = *(_OWORD *)(a3 + 96);
    long long v78 = *(_OWORD *)(a3 + 112);
    long long v81 = *(_OWORD *)(a3 + 128);
    long long v84 = *(_OWORD *)(a3 + 144);
    long long v63 = *(_OWORD *)(a3 + 32);
    long long v66 = *(_OWORD *)(a3 + 48);
    long long v69 = *(_OWORD *)(a3 + 64);
    long long v72 = *(_OWORD *)(a3 + 80);
    long long v57 = *(_OWORD *)a3;
    __n128 v60 = *(__n128 *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    long long v16 = *(_OWORD *)(a4 + 16);
    long long v17 = *(_OWORD *)(a4 + 32);
    long long v18 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = v18;
    *(_OWORD *)(a3 + 16) = v16;
    *(_OWORD *)(a3 + 32) = v17;
    long long v19 = *(_OWORD *)(a4 + 80);
    long long v20 = *(_OWORD *)(a4 + 96);
    long long v21 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(a4 + 112);
    *(_OWORD *)(a3 + 128) = v21;
    *(_OWORD *)(a3 + 80) = v19;
    *(_OWORD *)(a3 + 96) = v20;
    long long v22 = *(_OWORD *)(a4 + 144);
    long long v23 = *(_OWORD *)(a4 + 160);
    long long v24 = *(_OWORD *)(a4 + 176);
    *(void *)(a3 + 192) = *(void *)(a4 + 192);
    *(_OWORD *)(a3 + 160) = v23;
    *(_OWORD *)(a3 + 176) = v24;
    *(_OWORD *)(a3 + 144) = v22;
    *(_OWORD *)(a4 + 160) = v87;
    *(_OWORD *)(a4 + 176) = v90;
    *(void *)(a4 + 192) = v93;
    *(_OWORD *)(a4 + 96) = v75;
    *(_OWORD *)(a4 + 112) = v78;
    *(_OWORD *)(a4 + 128) = v81;
    *(_OWORD *)(a4 + 144) = v84;
    *(_OWORD *)(a4 + 32) = v63;
    *(_OWORD *)(a4 + 48) = v66;
    *(_OWORD *)(a4 + 64) = v69;
    *(_OWORD *)(a4 + 80) = v72;
    __n128 result = v60;
    *(_OWORD *)a4 = v57;
    *(__n128 *)(a4 + 16) = v60;
    uint64_t v25 = *(void *)(a3 + 48);
    uint64_t v26 = *(void *)(a2 + 48);
    if (v25 == v26)
    {
      uint64_t v27 = *(void *)(a3 + 56);
      uint64_t v28 = *(void *)(a2 + 56);
      BOOL v29 = v27 < v28;
      if (v27 == v28)
      {
        uint64_t v30 = *(void *)(a3 + 64);
        uint64_t v31 = *(void *)(a2 + 64);
        BOOL v29 = v30 < v31;
        if (v30 == v31) {
          BOOL v29 = *(_OWORD *)(a3 + 72) < *(_OWORD *)(a2 + 72);
        }
      }
      if (!v29
        && (*(void *)(a3 + 72) != *(void *)(a2 + 72)
         || *(void *)(a3 + 64) != *(void *)(a2 + 64)
         || v27 != v28
         || *(void *)(a3 + 80) != *(void *)(a2 + 80)
         || !sub_100BC2CB4(a3, a2)))
      {
        return result;
      }
    }
    else if (v25 >= v26)
    {
      return result;
    }
    long long v88 = *(_OWORD *)(a2 + 160);
    long long v91 = *(_OWORD *)(a2 + 176);
    uint64_t v94 = *(void *)(a2 + 192);
    long long v76 = *(_OWORD *)(a2 + 96);
    long long v79 = *(_OWORD *)(a2 + 112);
    long long v82 = *(_OWORD *)(a2 + 128);
    long long v85 = *(_OWORD *)(a2 + 144);
    long long v64 = *(_OWORD *)(a2 + 32);
    long long v67 = *(_OWORD *)(a2 + 48);
    long long v70 = *(_OWORD *)(a2 + 64);
    long long v73 = *(_OWORD *)(a2 + 80);
    long long v58 = *(_OWORD *)a2;
    __n128 v61 = *(__n128 *)(a2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    long long v32 = *(_OWORD *)(a3 + 16);
    long long v33 = *(_OWORD *)(a3 + 32);
    long long v34 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v34;
    *(_OWORD *)(a2 + 16) = v32;
    *(_OWORD *)(a2 + 32) = v33;
    long long v35 = *(_OWORD *)(a3 + 80);
    long long v36 = *(_OWORD *)(a3 + 96);
    long long v37 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a2 + 128) = v37;
    *(_OWORD *)(a2 + 80) = v35;
    *(_OWORD *)(a2 + 96) = v36;
    long long v38 = *(_OWORD *)(a3 + 144);
    long long v39 = *(_OWORD *)(a3 + 160);
    long long v40 = *(_OWORD *)(a3 + 176);
    *(void *)(a2 + 192) = *(void *)(a3 + 192);
    *(_OWORD *)(a2 + 160) = v39;
    *(_OWORD *)(a2 + 176) = v40;
    *(_OWORD *)(a2 + 144) = v38;
    *(_OWORD *)(a3 + 160) = v88;
    *(_OWORD *)(a3 + 176) = v91;
    *(void *)(a3 + 192) = v94;
    *(_OWORD *)(a3 + 96) = v76;
    *(_OWORD *)(a3 + 112) = v79;
    *(_OWORD *)(a3 + 128) = v82;
    *(_OWORD *)(a3 + 144) = v85;
    *(_OWORD *)(a3 + 32) = v64;
    *(_OWORD *)(a3 + 48) = v67;
    *(_OWORD *)(a3 + 64) = v70;
    *(_OWORD *)(a3 + 80) = v73;
    __n128 result = v61;
    *(_OWORD *)a3 = v58;
    *(__n128 *)(a3 + 16) = v61;
    uint64_t v41 = *(void *)(a2 + 48);
    uint64_t v42 = *(void *)(a1 + 48);
    if (v41 == v42)
    {
      uint64_t v43 = *(void *)(a2 + 56);
      uint64_t v44 = *(void *)(a1 + 56);
      BOOL v45 = v43 < v44;
      if (v43 == v44)
      {
        uint64_t v46 = *(void *)(a2 + 64);
        uint64_t v47 = *(void *)(a1 + 64);
        BOOL v45 = v46 < v47;
        if (v46 == v47) {
          BOOL v45 = *(_OWORD *)(a2 + 72) < *(_OWORD *)(a1 + 72);
        }
      }
      if (!v45
        && (*(void *)(a2 + 72) != *(void *)(a1 + 72)
         || *(void *)(a2 + 64) != *(void *)(a1 + 64)
         || v43 != v44
         || *(void *)(a2 + 80) != *(void *)(a1 + 80)
         || !sub_100BC2CB4(a2, a1)))
      {
        return result;
      }
    }
    else if (v41 >= v42)
    {
      return result;
    }
    long long v89 = *(_OWORD *)(a1 + 160);
    long long v92 = *(_OWORD *)(a1 + 176);
    uint64_t v95 = *(void *)(a1 + 192);
    long long v77 = *(_OWORD *)(a1 + 96);
    long long v80 = *(_OWORD *)(a1 + 112);
    long long v83 = *(_OWORD *)(a1 + 128);
    long long v86 = *(_OWORD *)(a1 + 144);
    long long v65 = *(_OWORD *)(a1 + 32);
    long long v68 = *(_OWORD *)(a1 + 48);
    long long v71 = *(_OWORD *)(a1 + 64);
    long long v74 = *(_OWORD *)(a1 + 80);
    long long v59 = *(_OWORD *)a1;
    __n128 v62 = *(__n128 *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    long long v48 = *(_OWORD *)(a2 + 16);
    long long v49 = *(_OWORD *)(a2 + 32);
    long long v50 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v50;
    *(_OWORD *)(a1 + 16) = v48;
    *(_OWORD *)(a1 + 32) = v49;
    long long v51 = *(_OWORD *)(a2 + 80);
    long long v52 = *(_OWORD *)(a2 + 96);
    long long v53 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v53;
    *(_OWORD *)(a1 + 80) = v51;
    *(_OWORD *)(a1 + 96) = v52;
    long long v54 = *(_OWORD *)(a2 + 144);
    long long v55 = *(_OWORD *)(a2 + 160);
    long long v56 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v55;
    *(_OWORD *)(a1 + 176) = v56;
    *(_OWORD *)(a1 + 144) = v54;
    *(_OWORD *)(a2 + 160) = v89;
    *(_OWORD *)(a2 + 176) = v92;
    *(void *)(a2 + 192) = v95;
    *(_OWORD *)(a2 + 96) = v77;
    *(_OWORD *)(a2 + 112) = v80;
    *(_OWORD *)(a2 + 128) = v83;
    *(_OWORD *)(a2 + 144) = v86;
    *(_OWORD *)(a2 + 32) = v65;
    *(_OWORD *)(a2 + 48) = v68;
    *(_OWORD *)(a2 + 64) = v71;
    *(_OWORD *)(a2 + 80) = v74;
    __n128 result = v62;
    *(_OWORD *)a2 = v59;
    *(__n128 *)(a2 + 16) = v62;
    return result;
  }
  uint64_t v11 = *(void *)(a4 + 56);
  uint64_t v12 = *(void *)(a3 + 56);
  BOOL v13 = v11 < v12;
  if (v11 == v12)
  {
    uint64_t v14 = *(void *)(a4 + 64);
    uint64_t v15 = *(void *)(a3 + 64);
    BOOL v13 = v14 < v15;
    if (v14 == v15) {
      BOOL v13 = *(_OWORD *)(a4 + 72) < *(_OWORD *)(a3 + 72);
    }
  }
  if (v13
    || *(void *)(a4 + 72) == *(void *)(a3 + 72)
    && *(void *)(a4 + 64) == *(void *)(a3 + 64)
    && v11 == v12
    && *(void *)(a4 + 80) == *(void *)(a3 + 80)
    && sub_100BC2CB4(a4, a3))
  {
    goto LABEL_13;
  }
  return result;
}

__n128 sub_100BC34BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = sub_100BC3080(a1, a2, a3, a4).n128_u64[0];
  uint64_t v11 = *(void *)(a5 + 48);
  uint64_t v12 = *(void *)(a4 + 48);
  if (v11 != v12)
  {
    if (v11 >= v12) {
      return result;
    }
LABEL_13:
    long long v115 = *(_OWORD *)(a4 + 160);
    long long v119 = *(_OWORD *)(a4 + 176);
    uint64_t v123 = *(void *)(a4 + 192);
    long long v99 = *(_OWORD *)(a4 + 96);
    long long v103 = *(_OWORD *)(a4 + 112);
    long long v107 = *(_OWORD *)(a4 + 128);
    long long v111 = *(_OWORD *)(a4 + 144);
    long long v83 = *(_OWORD *)(a4 + 32);
    long long v87 = *(_OWORD *)(a4 + 48);
    long long v91 = *(_OWORD *)(a4 + 64);
    long long v95 = *(_OWORD *)(a4 + 80);
    long long v75 = *(_OWORD *)a4;
    __n128 v79 = *(__n128 *)(a4 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    long long v18 = *(_OWORD *)(a5 + 16);
    long long v19 = *(_OWORD *)(a5 + 32);
    long long v20 = *(_OWORD *)(a5 + 64);
    *(_OWORD *)(a4 + 48) = *(_OWORD *)(a5 + 48);
    *(_OWORD *)(a4 + 64) = v20;
    *(_OWORD *)(a4 + 16) = v18;
    *(_OWORD *)(a4 + 32) = v19;
    long long v21 = *(_OWORD *)(a5 + 80);
    long long v22 = *(_OWORD *)(a5 + 96);
    long long v23 = *(_OWORD *)(a5 + 128);
    *(_OWORD *)(a4 + 112) = *(_OWORD *)(a5 + 112);
    *(_OWORD *)(a4 + 128) = v23;
    *(_OWORD *)(a4 + 80) = v21;
    *(_OWORD *)(a4 + 96) = v22;
    long long v24 = *(_OWORD *)(a5 + 144);
    long long v25 = *(_OWORD *)(a5 + 160);
    long long v26 = *(_OWORD *)(a5 + 176);
    *(void *)(a4 + 192) = *(void *)(a5 + 192);
    *(_OWORD *)(a4 + 160) = v25;
    *(_OWORD *)(a4 + 176) = v26;
    *(_OWORD *)(a4 + 144) = v24;
    *(_OWORD *)(a5 + 160) = v115;
    *(_OWORD *)(a5 + 176) = v119;
    *(void *)(a5 + 192) = v123;
    *(_OWORD *)(a5 + 96) = v99;
    *(_OWORD *)(a5 + 112) = v103;
    *(_OWORD *)(a5 + 128) = v107;
    *(_OWORD *)(a5 + 144) = v111;
    *(_OWORD *)(a5 + 32) = v83;
    *(_OWORD *)(a5 + 48) = v87;
    *(_OWORD *)(a5 + 64) = v91;
    *(_OWORD *)(a5 + 80) = v95;
    __n128 result = v79;
    *(_OWORD *)a5 = v75;
    *(__n128 *)(a5 + 16) = v79;
    uint64_t v27 = *(void *)(a4 + 48);
    uint64_t v28 = *(void *)(a3 + 48);
    if (v27 == v28)
    {
      uint64_t v29 = *(void *)(a4 + 56);
      uint64_t v30 = *(void *)(a3 + 56);
      BOOL v31 = v29 < v30;
      if (v29 == v30)
      {
        uint64_t v32 = *(void *)(a4 + 64);
        uint64_t v33 = *(void *)(a3 + 64);
        BOOL v31 = v32 < v33;
        if (v32 == v33) {
          BOOL v31 = *(_OWORD *)(a4 + 72) < *(_OWORD *)(a3 + 72);
        }
      }
      if (!v31
        && (*(void *)(a4 + 72) != *(void *)(a3 + 72)
         || *(void *)(a4 + 64) != *(void *)(a3 + 64)
         || v29 != v30
         || *(void *)(a4 + 80) != *(void *)(a3 + 80)
         || !sub_100BC2CB4(a4, a3)))
      {
        return result;
      }
    }
    else if (v27 >= v28)
    {
      return result;
    }
    long long v116 = *(_OWORD *)(a3 + 160);
    long long v120 = *(_OWORD *)(a3 + 176);
    uint64_t v124 = *(void *)(a3 + 192);
    long long v100 = *(_OWORD *)(a3 + 96);
    long long v104 = *(_OWORD *)(a3 + 112);
    long long v108 = *(_OWORD *)(a3 + 128);
    long long v112 = *(_OWORD *)(a3 + 144);
    long long v84 = *(_OWORD *)(a3 + 32);
    long long v88 = *(_OWORD *)(a3 + 48);
    long long v92 = *(_OWORD *)(a3 + 64);
    long long v96 = *(_OWORD *)(a3 + 80);
    long long v76 = *(_OWORD *)a3;
    __n128 v80 = *(__n128 *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    long long v34 = *(_OWORD *)(a4 + 16);
    long long v35 = *(_OWORD *)(a4 + 32);
    long long v36 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = v36;
    *(_OWORD *)(a3 + 16) = v34;
    *(_OWORD *)(a3 + 32) = v35;
    long long v37 = *(_OWORD *)(a4 + 80);
    long long v38 = *(_OWORD *)(a4 + 96);
    long long v39 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(a4 + 112);
    *(_OWORD *)(a3 + 128) = v39;
    *(_OWORD *)(a3 + 80) = v37;
    *(_OWORD *)(a3 + 96) = v38;
    long long v40 = *(_OWORD *)(a4 + 144);
    long long v41 = *(_OWORD *)(a4 + 160);
    long long v42 = *(_OWORD *)(a4 + 176);
    *(void *)(a3 + 192) = *(void *)(a4 + 192);
    *(_OWORD *)(a3 + 160) = v41;
    *(_OWORD *)(a3 + 176) = v42;
    *(_OWORD *)(a3 + 144) = v40;
    *(_OWORD *)(a4 + 160) = v116;
    *(_OWORD *)(a4 + 176) = v120;
    *(void *)(a4 + 192) = v124;
    *(_OWORD *)(a4 + 96) = v100;
    *(_OWORD *)(a4 + 112) = v104;
    *(_OWORD *)(a4 + 128) = v108;
    *(_OWORD *)(a4 + 144) = v112;
    *(_OWORD *)(a4 + 32) = v84;
    *(_OWORD *)(a4 + 48) = v88;
    *(_OWORD *)(a4 + 64) = v92;
    *(_OWORD *)(a4 + 80) = v96;
    __n128 result = v80;
    *(_OWORD *)a4 = v76;
    *(__n128 *)(a4 + 16) = v80;
    uint64_t v43 = *(void *)(a3 + 48);
    uint64_t v44 = *(void *)(a2 + 48);
    if (v43 == v44)
    {
      uint64_t v45 = *(void *)(a3 + 56);
      uint64_t v46 = *(void *)(a2 + 56);
      BOOL v47 = v45 < v46;
      if (v45 == v46)
      {
        uint64_t v48 = *(void *)(a3 + 64);
        uint64_t v49 = *(void *)(a2 + 64);
        BOOL v47 = v48 < v49;
        if (v48 == v49) {
          BOOL v47 = *(_OWORD *)(a3 + 72) < *(_OWORD *)(a2 + 72);
        }
      }
      if (!v47
        && (*(void *)(a3 + 72) != *(void *)(a2 + 72)
         || *(void *)(a3 + 64) != *(void *)(a2 + 64)
         || v45 != v46
         || *(void *)(a3 + 80) != *(void *)(a2 + 80)
         || !sub_100BC2CB4(a3, a2)))
      {
        return result;
      }
    }
    else if (v43 >= v44)
    {
      return result;
    }
    long long v117 = *(_OWORD *)(a2 + 160);
    long long v121 = *(_OWORD *)(a2 + 176);
    uint64_t v125 = *(void *)(a2 + 192);
    long long v101 = *(_OWORD *)(a2 + 96);
    long long v105 = *(_OWORD *)(a2 + 112);
    long long v109 = *(_OWORD *)(a2 + 128);
    long long v113 = *(_OWORD *)(a2 + 144);
    long long v85 = *(_OWORD *)(a2 + 32);
    long long v89 = *(_OWORD *)(a2 + 48);
    long long v93 = *(_OWORD *)(a2 + 64);
    long long v97 = *(_OWORD *)(a2 + 80);
    long long v77 = *(_OWORD *)a2;
    __n128 v81 = *(__n128 *)(a2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    long long v50 = *(_OWORD *)(a3 + 16);
    long long v51 = *(_OWORD *)(a3 + 32);
    long long v52 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v52;
    *(_OWORD *)(a2 + 16) = v50;
    *(_OWORD *)(a2 + 32) = v51;
    long long v53 = *(_OWORD *)(a3 + 80);
    long long v54 = *(_OWORD *)(a3 + 96);
    long long v55 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a2 + 128) = v55;
    *(_OWORD *)(a2 + 80) = v53;
    *(_OWORD *)(a2 + 96) = v54;
    long long v56 = *(_OWORD *)(a3 + 144);
    long long v57 = *(_OWORD *)(a3 + 160);
    long long v58 = *(_OWORD *)(a3 + 176);
    *(void *)(a2 + 192) = *(void *)(a3 + 192);
    *(_OWORD *)(a2 + 160) = v57;
    *(_OWORD *)(a2 + 176) = v58;
    *(_OWORD *)(a2 + 144) = v56;
    *(_OWORD *)(a3 + 160) = v117;
    *(_OWORD *)(a3 + 176) = v121;
    *(void *)(a3 + 192) = v125;
    *(_OWORD *)(a3 + 96) = v101;
    *(_OWORD *)(a3 + 112) = v105;
    *(_OWORD *)(a3 + 128) = v109;
    *(_OWORD *)(a3 + 144) = v113;
    *(_OWORD *)(a3 + 32) = v85;
    *(_OWORD *)(a3 + 48) = v89;
    *(_OWORD *)(a3 + 64) = v93;
    *(_OWORD *)(a3 + 80) = v97;
    __n128 result = v81;
    *(_OWORD *)a3 = v77;
    *(__n128 *)(a3 + 16) = v81;
    uint64_t v59 = *(void *)(a2 + 48);
    uint64_t v60 = *(void *)(a1 + 48);
    if (v59 == v60)
    {
      uint64_t v61 = *(void *)(a2 + 56);
      uint64_t v62 = *(void *)(a1 + 56);
      BOOL v63 = v61 < v62;
      if (v61 == v62)
      {
        uint64_t v64 = *(void *)(a2 + 64);
        uint64_t v65 = *(void *)(a1 + 64);
        BOOL v63 = v64 < v65;
        if (v64 == v65) {
          BOOL v63 = *(_OWORD *)(a2 + 72) < *(_OWORD *)(a1 + 72);
        }
      }
      if (!v63
        && (*(void *)(a2 + 72) != *(void *)(a1 + 72)
         || *(void *)(a2 + 64) != *(void *)(a1 + 64)
         || v61 != v62
         || *(void *)(a2 + 80) != *(void *)(a1 + 80)
         || !sub_100BC2CB4(a2, a1)))
      {
        return result;
      }
    }
    else if (v59 >= v60)
    {
      return result;
    }
    long long v118 = *(_OWORD *)(a1 + 160);
    long long v122 = *(_OWORD *)(a1 + 176);
    uint64_t v126 = *(void *)(a1 + 192);
    long long v102 = *(_OWORD *)(a1 + 96);
    long long v106 = *(_OWORD *)(a1 + 112);
    long long v110 = *(_OWORD *)(a1 + 128);
    long long v114 = *(_OWORD *)(a1 + 144);
    long long v86 = *(_OWORD *)(a1 + 32);
    long long v90 = *(_OWORD *)(a1 + 48);
    long long v94 = *(_OWORD *)(a1 + 64);
    long long v98 = *(_OWORD *)(a1 + 80);
    long long v78 = *(_OWORD *)a1;
    __n128 v82 = *(__n128 *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    long long v66 = *(_OWORD *)(a2 + 16);
    long long v67 = *(_OWORD *)(a2 + 32);
    long long v68 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v68;
    *(_OWORD *)(a1 + 16) = v66;
    *(_OWORD *)(a1 + 32) = v67;
    long long v69 = *(_OWORD *)(a2 + 80);
    long long v70 = *(_OWORD *)(a2 + 96);
    long long v71 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v71;
    *(_OWORD *)(a1 + 80) = v69;
    *(_OWORD *)(a1 + 96) = v70;
    long long v72 = *(_OWORD *)(a2 + 144);
    long long v73 = *(_OWORD *)(a2 + 160);
    long long v74 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v73;
    *(_OWORD *)(a1 + 176) = v74;
    *(_OWORD *)(a1 + 144) = v72;
    *(_OWORD *)(a2 + 160) = v118;
    *(_OWORD *)(a2 + 176) = v122;
    *(void *)(a2 + 192) = v126;
    *(_OWORD *)(a2 + 96) = v102;
    *(_OWORD *)(a2 + 112) = v106;
    *(_OWORD *)(a2 + 128) = v110;
    *(_OWORD *)(a2 + 144) = v114;
    *(_OWORD *)(a2 + 32) = v86;
    *(_OWORD *)(a2 + 48) = v90;
    *(_OWORD *)(a2 + 64) = v94;
    *(_OWORD *)(a2 + 80) = v98;
    __n128 result = v82;
    *(_OWORD *)a2 = v78;
    *(__n128 *)(a2 + 16) = v82;
    return result;
  }
  uint64_t v13 = *(void *)(a5 + 56);
  uint64_t v14 = *(void *)(a4 + 56);
  BOOL v15 = v13 < v14;
  if (v13 == v14)
  {
    uint64_t v16 = *(void *)(a5 + 64);
    uint64_t v17 = *(void *)(a4 + 64);
    BOOL v15 = v16 < v17;
    if (v16 == v17) {
      BOOL v15 = *(_OWORD *)(a5 + 72) < *(_OWORD *)(a4 + 72);
    }
  }
  if (v15
    || *(void *)(a5 + 72) == *(void *)(a4 + 72)
    && *(void *)(a5 + 64) == *(void *)(a4 + 64)
    && v13 == v14
    && *(void *)(a5 + 80) == *(void *)(a4 + 80)
    && sub_100BC2CB4(a5, a4))
  {
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_100BC3A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 200;
    if (a2 - a1 >= 201)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 200 * v10;
      do
      {
        sub_100BC3E00(a1, a4, v9, v12);
        v12 -= 200;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      while (1)
      {
        uint64_t v15 = *(void *)(v14 + 48);
        uint64_t v16 = *(void *)(a1 + 48);
        if (v15 == v16) {
          break;
        }
        if (v15 < v16) {
          goto LABEL_19;
        }
LABEL_20:
        v14 += 200;
        if (v14 == a3)
        {
          uint64_t v13 = a3;
          goto LABEL_22;
        }
      }
      uint64_t v17 = *(void *)(v14 + 56);
      uint64_t v18 = *(void *)(a1 + 56);
      BOOL v19 = v17 < v18;
      if (v17 == v18)
      {
        uint64_t v20 = *(void *)(v14 + 64);
        uint64_t v21 = *(void *)(a1 + 64);
        BOOL v19 = v20 < v21;
        if (v20 == v21) {
          BOOL v19 = *(_OWORD *)(v14 + 72) < *(_OWORD *)(a1 + 72);
        }
      }
      if (!v19
        && (*(void *)(v14 + 72) != *(void *)(a1 + 72)
         || *(void *)(v14 + 64) != *(void *)(a1 + 64)
         || v17 != v18
         || *(void *)(v14 + 80) != *(void *)(a1 + 80)
         || !sub_100BC2CB4(v14, a1)))
      {
        goto LABEL_20;
      }
LABEL_19:
      long long v64 = *(_OWORD *)(v14 + 160);
      long long v66 = *(_OWORD *)(v14 + 176);
      uint64_t v68 = *(void *)(v14 + 192);
      long long v56 = *(_OWORD *)(v14 + 96);
      long long v58 = *(_OWORD *)(v14 + 112);
      long long v60 = *(_OWORD *)(v14 + 128);
      long long v62 = *(_OWORD *)(v14 + 144);
      long long v48 = *(_OWORD *)(v14 + 32);
      long long v50 = *(_OWORD *)(v14 + 48);
      long long v52 = *(_OWORD *)(v14 + 64);
      long long v54 = *(_OWORD *)(v14 + 80);
      long long v44 = *(_OWORD *)v14;
      long long v46 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
      long long v22 = *(_OWORD *)(a1 + 16);
      long long v23 = *(_OWORD *)(a1 + 32);
      long long v24 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(v14 + 48) = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(v14 + 64) = v24;
      *(_OWORD *)(v14 + 16) = v22;
      *(_OWORD *)(v14 + 32) = v23;
      long long v25 = *(_OWORD *)(a1 + 80);
      long long v26 = *(_OWORD *)(a1 + 96);
      long long v27 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(v14 + 112) = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(v14 + 128) = v27;
      *(_OWORD *)(v14 + 80) = v25;
      *(_OWORD *)(v14 + 96) = v26;
      long long v28 = *(_OWORD *)(a1 + 144);
      long long v29 = *(_OWORD *)(a1 + 160);
      long long v30 = *(_OWORD *)(a1 + 176);
      *(void *)(v14 + 192) = *(void *)(a1 + 192);
      *(_OWORD *)(v14 + 160) = v29;
      *(_OWORD *)(v14 + 176) = v30;
      *(_OWORD *)(v14 + 144) = v28;
      *(_OWORD *)(a1 + 160) = v64;
      *(_OWORD *)(a1 + 176) = v66;
      *(void *)(a1 + 192) = v68;
      *(_OWORD *)(a1 + 96) = v56;
      *(_OWORD *)(a1 + 112) = v58;
      *(_OWORD *)(a1 + 128) = v60;
      *(_OWORD *)(a1 + 144) = v62;
      *(_OWORD *)(a1 + 32) = v48;
      *(_OWORD *)(a1 + 48) = v50;
      *(_OWORD *)(a1 + 64) = v52;
      *(_OWORD *)(a1 + 80) = v54;
      *(_OWORD *)a1 = v44;
      *(_OWORD *)(a1 + 16) = v46;
      sub_100BC3E00(a1, a4, v9, a1);
      goto LABEL_20;
    }
LABEL_22:
    if (v8 >= 201)
    {
      int64_t v31 = v8 / 0xC8uLL;
      uint64_t v32 = a2 - 200;
      do
      {
        long long v65 = *(_OWORD *)(a1 + 160);
        long long v67 = *(_OWORD *)(a1 + 176);
        uint64_t v69 = *(void *)(a1 + 192);
        long long v57 = *(_OWORD *)(a1 + 96);
        long long v59 = *(_OWORD *)(a1 + 112);
        long long v61 = *(_OWORD *)(a1 + 128);
        long long v63 = *(_OWORD *)(a1 + 144);
        long long v49 = *(_OWORD *)(a1 + 32);
        long long v51 = *(_OWORD *)(a1 + 48);
        long long v53 = *(_OWORD *)(a1 + 64);
        long long v55 = *(_OWORD *)(a1 + 80);
        long long v45 = *(_OWORD *)a1;
        long long v47 = *(_OWORD *)(a1 + 16);
        uint64_t v33 = sub_100BC42C4(a1, a4, v31);
        if (v32 == v33)
        {
          *(_OWORD *)(v33 + 160) = v65;
          *(_OWORD *)(v33 + 176) = v67;
          *(void *)(v33 + 192) = v69;
          *(_OWORD *)(v33 + 96) = v57;
          *(_OWORD *)(v33 + 112) = v59;
          *(_OWORD *)(v33 + 128) = v61;
          *(_OWORD *)(v33 + 144) = v63;
          *(_OWORD *)(v33 + 32) = v49;
          *(_OWORD *)(v33 + 48) = v51;
          *(_OWORD *)(v33 + 64) = v53;
          *(_OWORD *)(v33 + 80) = v55;
          *(_OWORD *)uint64_t v33 = v45;
          *(_OWORD *)(v33 + 16) = v47;
        }
        else
        {
          *(_OWORD *)uint64_t v33 = *(_OWORD *)v32;
          long long v34 = *(_OWORD *)(v32 + 16);
          long long v35 = *(_OWORD *)(v32 + 32);
          long long v36 = *(_OWORD *)(v32 + 64);
          *(_OWORD *)(v33 + 48) = *(_OWORD *)(v32 + 48);
          *(_OWORD *)(v33 + 64) = v36;
          *(_OWORD *)(v33 + 16) = v34;
          *(_OWORD *)(v33 + 32) = v35;
          long long v37 = *(_OWORD *)(v32 + 80);
          long long v38 = *(_OWORD *)(v32 + 96);
          long long v39 = *(_OWORD *)(v32 + 128);
          *(_OWORD *)(v33 + 112) = *(_OWORD *)(v32 + 112);
          *(_OWORD *)(v33 + 128) = v39;
          *(_OWORD *)(v33 + 80) = v37;
          *(_OWORD *)(v33 + 96) = v38;
          long long v40 = *(_OWORD *)(v32 + 144);
          long long v41 = *(_OWORD *)(v32 + 160);
          long long v42 = *(_OWORD *)(v32 + 176);
          *(void *)(v33 + 192) = *(void *)(v32 + 192);
          *(_OWORD *)(v33 + 160) = v41;
          *(_OWORD *)(v33 + 176) = v42;
          *(_OWORD *)(v33 + 144) = v40;
          *(_OWORD *)(v32 + 160) = v65;
          *(_OWORD *)(v32 + 176) = v67;
          *(void *)(v32 + 192) = v69;
          *(_OWORD *)(v32 + 96) = v57;
          *(_OWORD *)(v32 + 112) = v59;
          *(_OWORD *)(v32 + 128) = v61;
          *(_OWORD *)(v32 + 144) = v63;
          *(_OWORD *)(v32 + 32) = v49;
          *(_OWORD *)(v32 + 48) = v51;
          *(_OWORD *)(v32 + 64) = v53;
          *(_OWORD *)(v32 + 80) = v55;
          *(_OWORD *)uint64_t v32 = v45;
          *(_OWORD *)(v32 + 16) = v47;
          sub_100BC4454(a1, v33 + 200, a4, 0x8F5C28F5C28F5C29 * ((v33 + 200 - a1) >> 3));
        }
        v32 -= 200;
        BOOL v19 = v31-- <= 2;
      }
      while (!v19);
    }
    return v13;
  }
  return a3;
}

__n128 sub_100BC3E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 < 2) {
    return result;
  }
  uint64_t v92 = v4;
  uint64_t v93 = v5;
  uint64_t v9 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) < (uint64_t)(0x8F5C28F5C28F5C29 * ((a4 - a1) >> 3))) {
    return result;
  }
  uint64_t v11 = (0x1EB851EB851EB852 * ((a4 - a1) >> 3)) | 1;
  uint64_t v12 = a1 + 200 * v11;
  uint64_t v13 = 0x1EB851EB851EB852 * ((a4 - a1) >> 3) + 2;
  if (v13 >= a3) {
    goto LABEL_20;
  }
  uint64_t v14 = *(void *)(a1 + 200 * v11 + 48);
  uint64_t v15 = *(void *)(v12 + 248);
  if (v14 == v15)
  {
    uint64_t v16 = *(void *)(a1 + 200 * v11 + 56);
    uint64_t v17 = *(void *)(v12 + 256);
    BOOL v18 = v16 < v17;
    if (v16 == v17)
    {
      uint64_t v19 = *(void *)(a1 + 200 * v11 + 64);
      uint64_t v20 = *(void *)(v12 + 264);
      BOOL v18 = v19 < v20;
      if (v19 == v20) {
        BOOL v18 = *(_OWORD *)(a1 + 200 * v11 + 72) < *(_OWORD *)(v12 + 272);
      }
    }
    if (!v18)
    {
      if (*(void *)(a1 + 200 * v11 + 72) != *(void *)(v12 + 272)
        || *(void *)(a1 + 200 * v11 + 64) != *(void *)(v12 + 264))
      {
        goto LABEL_20;
      }
      BOOL v21 = v16 == v17 && *(void *)(a1 + 200 * v11 + 80) == *(void *)(v12 + 280);
      if (!v21 || !sub_100BC2CB4(a1 + 200 * v11, v12 + 200)) {
        goto LABEL_20;
      }
    }
    goto LABEL_19;
  }
  if (v14 < v15)
  {
LABEL_19:
    v12 += 200;
    uint64_t v11 = v13;
  }
LABEL_20:
  uint64_t v23 = *(void *)(v12 + 48);
  uint64_t v24 = *(void *)(a4 + 48);
  if (v23 == v24)
  {
    uint64_t v25 = *(void *)(v12 + 56);
    uint64_t v26 = *(void *)(a4 + 56);
    BOOL v27 = v25 < v26;
    if (v25 == v26)
    {
      uint64_t v28 = *(void *)(v12 + 64);
      uint64_t v29 = *(void *)(a4 + 64);
      BOOL v27 = v28 < v29;
      if (v28 == v29) {
        BOOL v27 = *(_OWORD *)(v12 + 72) < *(_OWORD *)(a4 + 72);
      }
    }
    if (v27) {
      return result;
    }
    if (*(void *)(v12 + 72) == *(void *)(a4 + 72) && *(void *)(v12 + 64) == *(void *)(a4 + 64))
    {
      BOOL v30 = v25 == v26 && *(void *)(v12 + 80) == *(void *)(a4 + 80);
      if (v30 && (sub_100BC2CB4(v12, a4) & 1) != 0) {
        return result;
      }
    }
  }
  else if (v23 < v24)
  {
    return result;
  }
  long long v31 = *(_OWORD *)(a4 + 176);
  long long v89 = *(_OWORD *)(a4 + 160);
  long long v90 = v31;
  uint64_t v91 = *(void *)(a4 + 192);
  long long v32 = *(_OWORD *)(a4 + 112);
  long long v85 = *(_OWORD *)(a4 + 96);
  long long v86 = v32;
  __n128 v33 = *(__n128 *)(a4 + 144);
  long long v87 = *(_OWORD *)(a4 + 128);
  __n128 v88 = v33;
  long long v34 = *(_OWORD *)(a4 + 48);
  long long v81 = *(_OWORD *)(a4 + 32);
  long long v82 = v34;
  long long v35 = *(_OWORD *)(a4 + 80);
  long long v83 = *(_OWORD *)(a4 + 64);
  long long v84 = v35;
  long long v36 = *(_OWORD *)(a4 + 16);
  long long v79 = *(_OWORD *)a4;
  long long v80 = v36;
  *(_OWORD *)a4 = *(_OWORD *)v12;
  long long v37 = *(_OWORD *)(v12 + 16);
  long long v38 = *(_OWORD *)(v12 + 32);
  long long v39 = *(_OWORD *)(v12 + 64);
  *(_OWORD *)(a4 + 48) = *(_OWORD *)(v12 + 48);
  *(_OWORD *)(a4 + 64) = v39;
  *(_OWORD *)(a4 + 16) = v37;
  *(_OWORD *)(a4 + 32) = v38;
  long long v40 = *(_OWORD *)(v12 + 80);
  long long v41 = *(_OWORD *)(v12 + 96);
  long long v42 = *(_OWORD *)(v12 + 128);
  *(_OWORD *)(a4 + 112) = *(_OWORD *)(v12 + 112);
  *(_OWORD *)(a4 + 128) = v42;
  *(_OWORD *)(a4 + 80) = v40;
  *(_OWORD *)(a4 + 96) = v41;
  long long v43 = *(_OWORD *)(v12 + 144);
  long long v44 = *(_OWORD *)(v12 + 160);
  long long v45 = *(_OWORD *)(v12 + 176);
  *(void *)(a4 + 192) = *(void *)(v12 + 192);
  *(_OWORD *)(a4 + 160) = v44;
  *(_OWORD *)(a4 + 176) = v45;
  *(_OWORD *)(a4 + 144) = v43;
  if (v9 < v11) {
    goto LABEL_70;
  }
  while (1)
  {
    uint64_t v46 = v12;
    uint64_t v47 = 2 * v11;
    uint64_t v11 = (2 * v11) | 1;
    uint64_t v12 = a1 + 200 * v11;
    uint64_t v48 = v47 + 2;
    if (v47 + 2 >= a3) {
      goto LABEL_53;
    }
    uint64_t v49 = *(void *)(a1 + 200 * v11 + 48);
    uint64_t v50 = *(void *)(v12 + 248);
    if (v49 != v50)
    {
      if (v49 >= v50) {
        goto LABEL_53;
      }
LABEL_52:
      v12 += 200;
      uint64_t v11 = v48;
      goto LABEL_53;
    }
    uint64_t v51 = *(void *)(a1 + 200 * v11 + 56);
    uint64_t v52 = *(void *)(v12 + 256);
    BOOL v53 = v51 < v52;
    if (v51 == v52)
    {
      uint64_t v54 = *(void *)(a1 + 200 * v11 + 64);
      uint64_t v55 = *(void *)(v12 + 264);
      BOOL v53 = v54 < v55;
      if (v54 == v55) {
        BOOL v53 = *(_OWORD *)(a1 + 200 * v11 + 72) < *(_OWORD *)(v12 + 272);
      }
    }
    if (v53) {
      goto LABEL_52;
    }
    if (*(void *)(a1 + 200 * v11 + 72) == *(void *)(v12 + 272)
      && *(void *)(a1 + 200 * v11 + 64) == *(void *)(v12 + 264))
    {
      BOOL v56 = v51 == v52 && *(void *)(a1 + 200 * v11 + 80) == *(void *)(v12 + 280);
      if (v56 && sub_100BC2CB4(a1 + 200 * v11, v12 + 200)) {
        goto LABEL_52;
      }
    }
LABEL_53:
    uint64_t v57 = *(void *)(v12 + 48);
    if (v57 == (void)v82) {
      break;
    }
    if (v57 < (uint64_t)v82) {
      goto LABEL_69;
    }
LABEL_67:
    *(_OWORD *)uint64_t v46 = *(_OWORD *)v12;
    long long v62 = *(_OWORD *)(v12 + 16);
    long long v63 = *(_OWORD *)(v12 + 32);
    long long v64 = *(_OWORD *)(v12 + 64);
    *(_OWORD *)(v46 + 48) = *(_OWORD *)(v12 + 48);
    *(_OWORD *)(v46 + 64) = v64;
    *(_OWORD *)(v46 + 16) = v62;
    *(_OWORD *)(v46 + 32) = v63;
    long long v65 = *(_OWORD *)(v12 + 80);
    long long v66 = *(_OWORD *)(v12 + 96);
    long long v67 = *(_OWORD *)(v12 + 128);
    *(_OWORD *)(v46 + 112) = *(_OWORD *)(v12 + 112);
    *(_OWORD *)(v46 + 128) = v67;
    *(_OWORD *)(v46 + 80) = v65;
    *(_OWORD *)(v46 + 96) = v66;
    long long v68 = *(_OWORD *)(v12 + 144);
    long long v69 = *(_OWORD *)(v12 + 160);
    long long v70 = *(_OWORD *)(v12 + 176);
    *(void *)(v46 + 192) = *(void *)(v12 + 192);
    *(_OWORD *)(v46 + 160) = v69;
    *(_OWORD *)(v46 + 176) = v70;
    *(_OWORD *)(v46 + 144) = v68;
    if (v9 < v11) {
      goto LABEL_70;
    }
  }
  uint64_t v58 = *(void *)(v12 + 56);
  BOOL v59 = v58 < *((void *)&v82 + 1);
  if (v58 == *((void *)&v82 + 1))
  {
    uint64_t v60 = *(void *)(v12 + 64);
    BOOL v59 = v60 < (uint64_t)v83;
    if (v60 == (void)v83) {
      BOOL v59 = *(_OWORD *)(v12 + 72) < (__int128)__PAIR128__(v84, *((unint64_t *)&v83 + 1));
    }
  }
  if (!v59)
  {
    if (*(_OWORD *)(v12 + 64) != v83) {
      goto LABEL_67;
    }
    BOOL v61 = v58 == *((void *)&v82 + 1) && *(void *)(v12 + 80) == (void)v84;
    if (!v61 || (sub_100BC2CB4(v12, (uint64_t)&v79) & 1) == 0) {
      goto LABEL_67;
    }
  }
LABEL_69:
  uint64_t v12 = v46;
LABEL_70:
  *(_OWORD *)uint64_t v12 = v79;
  long long v71 = v80;
  long long v72 = v81;
  long long v73 = v83;
  *(_OWORD *)(v12 + 48) = v82;
  *(_OWORD *)(v12 + 64) = v73;
  *(_OWORD *)(v12 + 16) = v71;
  *(_OWORD *)(v12 + 32) = v72;
  long long v74 = v84;
  long long v75 = v85;
  long long v76 = v87;
  *(_OWORD *)(v12 + 112) = v86;
  *(_OWORD *)(v12 + 128) = v76;
  *(_OWORD *)(v12 + 80) = v74;
  *(_OWORD *)(v12 + 96) = v75;
  __n128 result = v88;
  long long v77 = v89;
  long long v78 = v90;
  *(void *)(v12 + 192) = v91;
  *(_OWORD *)(v12 + 160) = v77;
  *(_OWORD *)(v12 + 176) = v78;
  *(__n128 *)(v12 + 144) = result;
  return result;
}

uint64_t sub_100BC42C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = a1;
    uint64_t v9 = v5 + 1;
    a1 += 200 * (v5 + 1);
    uint64_t v10 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 >= a3) {
      goto LABEL_21;
    }
    uint64_t v12 = *(void *)(v8 + 200 * v9 + 48);
    uint64_t v13 = *(void *)(a1 + 248);
    if (v12 != v13)
    {
      if (v12 >= v13) {
        goto LABEL_21;
      }
LABEL_20:
      a1 += 200;
      uint64_t v5 = v11;
      goto LABEL_21;
    }
    uint64_t v14 = *(void *)(v8 + 200 * v9 + 56);
    uint64_t v15 = *(void *)(a1 + 256);
    BOOL v16 = v14 < v15;
    if (v14 == v15)
    {
      uint64_t v17 = *(void *)(v8 + 200 * v9 + 64);
      uint64_t v18 = *(void *)(a1 + 264);
      BOOL v16 = v17 < v18;
      if (v17 == v18) {
        BOOL v16 = *(_OWORD *)(v8 + 200 * v9 + 72) < *(_OWORD *)(a1 + 272);
      }
    }
    if (v16) {
      goto LABEL_20;
    }
    if (*(void *)(v8 + 200 * v9 + 72) == *(void *)(a1 + 272)
      && *(void *)(v8 + 200 * v9 + 64) == *(void *)(a1 + 264))
    {
      uint64_t v19 = *(void *)(v8 + 200 * v9 + 80);
      BOOL v20 = v14 == v15 && v19 == *(void *)(a1 + 280);
      if (v20 && sub_100BC2CB4(a1, a1 + 200)) {
        goto LABEL_20;
      }
    }
LABEL_21:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)a1;
    long long v21 = *(_OWORD *)(a1 + 16);
    long long v22 = *(_OWORD *)(a1 + 32);
    long long v23 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v8 + 48) = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v8 + 64) = v23;
    *(_OWORD *)(v8 + 16) = v21;
    *(_OWORD *)(v8 + 32) = v22;
    long long v24 = *(_OWORD *)(a1 + 80);
    long long v25 = *(_OWORD *)(a1 + 96);
    long long v26 = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(v8 + 112) = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(v8 + 128) = v26;
    *(_OWORD *)(v8 + 80) = v24;
    *(_OWORD *)(v8 + 96) = v25;
    long long v27 = *(_OWORD *)(a1 + 144);
    long long v28 = *(_OWORD *)(a1 + 160);
    long long v29 = *(_OWORD *)(a1 + 176);
    *(void *)(v8 + 192) = *(void *)(a1 + 192);
    *(_OWORD *)(v8 + 160) = v28;
    *(_OWORD *)(v8 + 176) = v29;
    *(_OWORD *)(v8 + 144) = v27;
  }
  while (v5 <= v7);
  return a1;
}

__n128 sub_100BC4454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 < 2) {
    return result;
  }
  unint64_t v6 = v4 >> 1;
  uint64_t v7 = (long long *)(a1 + 200 * (v4 >> 1));
  uint64_t v8 = (long long *)(a2 - 200);
  uint64_t v9 = *((void *)v7 + 6);
  uint64_t v10 = *(void *)(a2 - 152);
  if (v9 == v10)
  {
    uint64_t v11 = *(void *)(a1 + 200 * v6 + 56);
    uint64_t v12 = *(void *)(a2 - 144);
    BOOL v13 = v11 < v12;
    if (v11 == v12)
    {
      uint64_t v14 = *(void *)(a1 + 200 * v6 + 64);
      uint64_t v15 = *(void *)(a2 - 136);
      BOOL v13 = v14 < v15;
      if (v14 == v15) {
        BOOL v13 = *(_OWORD *)(a1 + 200 * v6 + 72) < *(_OWORD *)(a2 - 128);
      }
    }
    if (!v13)
    {
      if (*(void *)(a1 + 200 * v6 + 72) != *(void *)(a2 - 128)
        || *(void *)(a1 + 200 * v6 + 64) != *(void *)(a2 - 136))
      {
        return result;
      }
      BOOL v16 = v11 == v12 && *(void *)(a1 + 200 * v6 + 80) == *(void *)(a2 - 120);
      if (!v16 || !sub_100BC2CB4(a1 + 200 * (v4 >> 1), a2 - 200)) {
        return result;
      }
    }
  }
  else if (v9 >= v10)
  {
    return result;
  }
  long long v18 = v8[11];
  long long v67 = v8[10];
  long long v68 = v18;
  uint64_t v69 = *((void *)v8 + 24);
  long long v19 = v8[7];
  long long v63 = v8[6];
  long long v64 = v19;
  __n128 v20 = (__n128)v8[9];
  long long v65 = v8[8];
  __n128 v66 = v20;
  long long v21 = v8[3];
  long long v59 = v8[2];
  long long v60 = v21;
  long long v22 = v8[5];
  long long v61 = v8[4];
  long long v62 = v22;
  long long v23 = v8[1];
  long long v57 = *v8;
  long long v58 = v23;
  long long *v8 = *v7;
  long long v24 = v7[1];
  long long v25 = v7[2];
  long long v26 = v7[4];
  void v8[3] = v7[3];
  v8[4] = v26;
  v8[1] = v24;
  void v8[2] = v25;
  long long v27 = v7[5];
  long long v28 = v7[6];
  long long v29 = v7[8];
  v8[7] = v7[7];
  v8[8] = v29;
  v8[5] = v27;
  void v8[6] = v28;
  long long v30 = v7[9];
  long long v31 = v7[10];
  long long v32 = v7[11];
  *((void *)v8 + 24) = *((void *)v7 + 24);
  v8[10] = v31;
  v8[11] = v32;
  v8[9] = v30;
  if (v4 < 2) {
    goto LABEL_35;
  }
  while (1)
  {
    __n128 v33 = v7;
    unint64_t v34 = v6 - 1;
    unint64_t v6 = (v6 - 1) >> 1;
    uint64_t v7 = (long long *)(a1 + 200 * v6);
    uint64_t v35 = *((void *)v7 + 6);
    if (v35 == (void)v60) {
      break;
    }
    if (v35 >= (uint64_t)v60) {
      goto LABEL_34;
    }
LABEL_32:
    *__n128 v33 = *v7;
    long long v40 = v7[1];
    long long v41 = v7[2];
    long long v42 = v7[4];
    v33[3] = v7[3];
    v33[4] = v42;
    v33[1] = v40;
    v33[2] = v41;
    long long v43 = v7[5];
    long long v44 = v7[6];
    long long v45 = v7[8];
    v33[7] = v7[7];
    v33[8] = v45;
    v33[5] = v43;
    v33[6] = v44;
    long long v46 = v7[9];
    long long v47 = v7[10];
    long long v48 = v7[11];
    *((void *)v33 + 24) = *((void *)v7 + 24);
    v33[10] = v47;
    v33[11] = v48;
    v33[9] = v46;
    if (v34 <= 1) {
      goto LABEL_35;
    }
  }
  uint64_t v36 = *(void *)(a1 + 200 * v6 + 56);
  BOOL v37 = v36 < *((void *)&v60 + 1);
  if (v36 == *((void *)&v60 + 1))
  {
    uint64_t v38 = *(void *)(a1 + 200 * v6 + 64);
    BOOL v37 = v38 < (uint64_t)v61;
    if (v38 == (void)v61) {
      BOOL v37 = *(_OWORD *)(a1 + 200 * v6 + 72) < (__int128)__PAIR128__(v62, *((unint64_t *)&v61 + 1));
    }
  }
  if (v37) {
    goto LABEL_32;
  }
  if (*(_OWORD *)(a1 + 200 * v6 + 64) == v61)
  {
    BOOL v39 = v36 == *((void *)&v60 + 1) && *(void *)(a1 + 200 * v6 + 80) == (void)v62;
    if (v39 && sub_100BC2CB4(a1 + 200 * v6, (uint64_t)&v57)) {
      goto LABEL_32;
    }
  }
LABEL_34:
  uint64_t v7 = v33;
LABEL_35:
  *uint64_t v7 = v57;
  long long v49 = v58;
  long long v50 = v59;
  long long v51 = v61;
  void v7[3] = v60;
  v7[4] = v51;
  v7[1] = v49;
  _OWORD v7[2] = v50;
  long long v52 = v62;
  long long v53 = v63;
  long long v54 = v65;
  v7[7] = v64;
  void v7[8] = v54;
  void v7[5] = v52;
  void v7[6] = v53;
  __n128 result = v66;
  long long v55 = v67;
  long long v56 = v68;
  *((void *)v7 + 24) = v69;
  v7[10] = v55;
  v7[11] = v56;
  v7[9] = (__int128)result;
  return result;
}

uint64_t sub_100BC475C(uint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 40);
  if ((v3 - 5) >= 0xFFFFFFFC)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)result;
    BOOL v8 = !*(void *)result
      || *(void *)(a3 + 56) != *(void *)(v7 + 8)
      || *(void *)(a3 + 64) != *(void *)(v7 + 16);
    *(void *)__n128 result = a3 + 48;
    __n128 result = *(void *)(result + 8);
    if (result)
    {
      if (*(unsigned char *)(v6 + 21))
      {
        if (v8 || (__n128 result = sub_100BC48F4(result, a3), v3 != 1) || (result & 1) == 0) {
          *(unsigned char *)(v6 + 21) = 0;
        }
      }
      if (*(unsigned char *)(v6 + 20))
      {
        if (v8 || (__n128 result = sub_100BC48F4(*(void *)(v6 + 8), a3), (result & 1) == 0))
        {
          if (*a2 - 58 <= 0xFFFFFFF7) {
            *a2 = 50;
          }
          if (a2[3] - 58 <= 0xFFFFFFF6) {
            a2[3] = 49;
          }
        }
        else if (v3 == 2)
        {
          goto LABEL_25;
        }
        *(unsigned char *)(v6 + 20) = 0;
      }
    }
    if (v3 != 2)
    {
      if (v3 == 1) {
        *(unsigned char *)(v6 + 21) = 1;
      }
      goto LABEL_27;
    }
LABEL_25:
    if (*(_DWORD *)(a3 + 120) != 2) {
      *(unsigned char *)(v6 + 20) = 1;
    }
LABEL_27:
    *(void *)(v6 + 8) = a3;
    *(_DWORD *)(v6 + 16) = v3;
  }
  return result;
}

uint64_t sub_100BC48A8(uint64_t result, unsigned __int8 *a2)
{
  if (*(unsigned char *)(result + 21)) {
    *(unsigned char *)(result + 21) = 0;
  }
  if (*(unsigned char *)(result + 20))
  {
    if (*a2 - 58 <= 0xFFFFFFF7) {
      *a2 = 50;
    }
    if (a2[3] - 58 <= 0xFFFFFFF6) {
      a2[3] = 49;
    }
    *(unsigned char *)(result + 20) = 0;
  }
  return result;
}

uint64_t sub_100BC48F4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 56) != *(void *)(a2 + 56) || *(void *)(a1 + 64) != *(void *)(a2 + 64)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a2 + 72);
  if (v3 != v4)
  {
    double v5 = *(double *)(a2 + 88);
    if (v5 == 0.0)
    {
      if (v3 + 1 != v4) {
        return 0;
      }
    }
    else
    {
      if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
        return 0;
      }
      double v6 = fabs(v5);
      double v7 = 2.22044605e-16;
      if (v6 >= 1.0) {
        double v7 = v6 * 2.22044605e-16;
      }
      uint64_t v8 = v3 + 1;
      if (v6 > v7 || v8 != v4) {
        return 0;
      }
    }
  }
  double v10 = *(double *)a1;
  double v23 = *(double *)(a1 + 8);
  double v24 = v10;
  sub_10075D084(&v24, &v23, 1);
  double v11 = v23;
  double v12 = v24;
  double v13 = *(double *)a2;
  double v23 = *(double *)(a2 + 8);
  double v24 = v13;
  sub_10075D084(&v24, &v23, 1);
  if (v12 == v24) {
    goto LABEL_34;
  }
  if ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v15 = vabdd_f64(v12, v24);
    double v16 = fabs(v12);
    double v17 = fabs(v24);
    if (v16 >= v17) {
      double v17 = v16;
    }
    double v18 = v17 >= 1.0 ? v17 * 2.22044605e-16 : 2.22044605e-16;
    if (v15 <= v18)
    {
LABEL_34:
      if (v11 == v23) {
        return 1;
      }
      if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(void *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v19 = vabdd_f64(v11, v23);
        double v20 = fabs(v11);
        double v21 = fabs(v23);
        if (v20 >= v21) {
          double v21 = v20;
        }
        double v22 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
        if (v19 <= v22) {
          return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_100BC4AB8(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 40);
  if (v1 == 7) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = **(double ***)result;
  if (v3 == *(double **)(*(void *)result + 8)) {
    return result;
  }
  uint64_t v4 = *(double ***)(result + 8);
  double v5 = *v4;
  double v6 = v4[1];
  if ((unint64_t)((char *)v6 - (char *)*v4) < 0x40) {
    goto LABEL_9;
  }
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  char v15 = 0;
  if (v5 + 2 != v6)
  {
    do
    {
      __n128 result = sub_10075D9A4((uint64_t)&v12, v3, v5, v5 + 2, (uint64_t)&v13);
      if (!result) {
        break;
      }
      double v7 = v5 + 4;
      v5 += 2;
    }
    while (v7 != v6);
    if (!v15)
    {
      if (v14 && HIDWORD(v14) && (int)v14 >= 1)
      {
        if (!(v13 + HIDWORD(v13))) {
          goto LABEL_8;
        }
      }
      else if (!v13)
      {
        goto LABEL_8;
      }
      double v10 = *(unsigned __int8 **)(v2 + 24);
      if (*v10 - 58 <= 0xFFFFFFF7)
      {
        *double v10 = 50;
        double v10 = *(unsigned __int8 **)(v2 + 24);
      }
      int v11 = *(_DWORD *)(v2 + 40) | 1;
      *(_DWORD *)(v2 + 40) = v11;
      if (v10[3] - 58 <= 0xFFFFFFF6)
      {
        v10[3] = 49;
        int v11 = *(_DWORD *)(v2 + 40);
      }
      int v8 = v11 | 4;
      goto LABEL_10;
    }
  }
LABEL_8:
  int v1 = *(_DWORD *)(v2 + 40);
LABEL_9:
  int v8 = v1 | 2;
LABEL_10:
  *(_DWORD *)(v2 + 40) = v8;
  BOOL v9 = v8 == 7 || *(unsigned char *)(*(void *)(v2 + 24) + 9) != 0;
  *(unsigned char *)(v2 + 16) = v9;
  return result;
}

double sub_100BC4C20(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t sub_100BC5290(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v63 = v2;
  uint64_t v64 = v3;
  uint64_t v5 = result;
  uint64_t v6 = result + 200;
  if (result + 200 == a2) {
    return result;
  }
  uint64_t v7 = 0;
  uint64_t v8 = result;
  do
  {
    uint64_t v9 = v8;
    uint64_t v8 = v6;
    uint64_t v10 = *(void *)(v9 + 328);
    uint64_t v11 = *(void *)(v9 + 128);
    if (v10 == v11)
    {
      uint64_t v12 = *(void *)(v9 + 336);
      uint64_t v13 = *(void *)(v9 + 136);
      BOOL v14 = v12 < v13;
      if (v12 == v13)
      {
        uint64_t v15 = *(void *)(v9 + 344);
        uint64_t v16 = *(void *)(v9 + 144);
        BOOL v14 = v15 < v16;
        if (v15 == v16) {
          BOOL v14 = *(_OWORD *)(v9 + 352) < *(_OWORD *)(v9 + 152);
        }
      }
      if (!v14)
      {
        if (*(void *)(v9 + 352) != *(void *)(v9 + 152)) {
          goto LABEL_33;
        }
        if (*(void *)(v9 + 344) != *(void *)(v9 + 144)) {
          goto LABEL_33;
        }
        if (v12 != v13) {
          goto LABEL_33;
        }
        if (*(void *)(v9 + 360) != *(void *)(v9 + 160)) {
          goto LABEL_33;
        }
        double result = sub_100BC6F4C(v8, v9);
        if (!result) {
          goto LABEL_33;
        }
      }
    }
    else if (v10 >= v11)
    {
      goto LABEL_33;
    }
    long long v17 = *(_OWORD *)(v8 + 48);
    long long v53 = *(_OWORD *)(v8 + 32);
    long long v54 = v17;
    long long v18 = *(_OWORD *)(v8 + 112);
    long long v57 = *(_OWORD *)(v8 + 96);
    long long v58 = v18;
    long long v19 = *(_OWORD *)(v8 + 80);
    long long v55 = *(_OWORD *)(v8 + 64);
    long long v56 = v19;
    uint64_t v62 = *(void *)(v8 + 192);
    long long v20 = *(_OWORD *)(v8 + 176);
    *(_OWORD *)&v60[16] = *(_OWORD *)(v8 + 160);
    long long v61 = v20;
    long long v21 = *(_OWORD *)(v8 + 144);
    long long v59 = *(_OWORD *)(v8 + 128);
    *(_OWORD *)long long v60 = v21;
    long long v22 = *(_OWORD *)(v8 + 16);
    long long v51 = *(_OWORD *)v8;
    long long v52 = v22;
    long long v23 = *(_OWORD *)(v9 + 176);
    *(_OWORD *)(v8 + 160) = *(_OWORD *)(v9 + 160);
    *(_OWORD *)(v8 + 176) = v23;
    *(void *)(v8 + 192) = *(void *)(v9 + 192);
    long long v24 = *(_OWORD *)(v9 + 112);
    *(_OWORD *)(v8 + 96) = *(_OWORD *)(v9 + 96);
    *(_OWORD *)(v8 + 112) = v24;
    long long v25 = *(_OWORD *)(v9 + 144);
    *(_OWORD *)(v8 + 128) = *(_OWORD *)(v9 + 128);
    *(_OWORD *)(v8 + 144) = v25;
    long long v26 = *(_OWORD *)(v9 + 48);
    *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
    *(_OWORD *)(v8 + 48) = v26;
    long long v27 = *(_OWORD *)(v9 + 80);
    *(_OWORD *)(v8 + 64) = *(_OWORD *)(v9 + 64);
    *(_OWORD *)(v8 + 80) = v27;
    long long v28 = *(_OWORD *)(v9 + 16);
    uint64_t v29 = v5;
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v28;
    if (v9 == v5) {
      goto LABEL_32;
    }
    uint64_t v30 = v7;
    while (1)
    {
      uint64_t v31 = v5 + v30;
      uint64_t v32 = *(void *)(v5 + v30 - 72);
      if ((void)v59 == v32) {
        break;
      }
      if ((uint64_t)v59 >= v32) {
        goto LABEL_31;
      }
LABEL_29:
      v9 -= 200;
      long long v36 = *(_OWORD *)(v5 + v30 - 24);
      *(_OWORD *)(v31 + 160) = *(_OWORD *)(v5 + v30 - 40);
      *(_OWORD *)(v31 + 176) = v36;
      *(void *)(v31 + 192) = *(void *)(v5 + v30 - 8);
      long long v37 = *(_OWORD *)(v5 + v30 - 88);
      *(_OWORD *)(v31 + 96) = *(_OWORD *)(v5 + v30 - 104);
      *(_OWORD *)(v31 + 112) = v37;
      long long v38 = *(_OWORD *)(v5 + v30 - 56);
      *(_OWORD *)(v31 + 128) = *(_OWORD *)(v5 + v30 - 72);
      *(_OWORD *)(v31 + 144) = v38;
      long long v39 = *(_OWORD *)(v5 + v30 - 152);
      *(_OWORD *)(v31 + 32) = *(_OWORD *)(v5 + v30 - 168);
      *(_OWORD *)(v31 + 48) = v39;
      long long v40 = *(_OWORD *)(v5 + v30 - 120);
      *(_OWORD *)(v31 + 64) = *(_OWORD *)(v5 + v30 - 136);
      *(_OWORD *)(v31 + 80) = v40;
      long long v41 = *(_OWORD *)(v5 + v30 - 184);
      *(_OWORD *)uint64_t v31 = *(_OWORD *)(v5 + v30 - 200);
      *(_OWORD *)(v31 + 16) = v41;
      v30 -= 200;
      if (!v30)
      {
        uint64_t v29 = v5;
        goto LABEL_32;
      }
    }
    uint64_t v33 = *(void *)(v31 - 64);
    BOOL v34 = *((void *)&v59 + 1) < v33;
    if (*((void *)&v59 + 1) == v33)
    {
      uint64_t v35 = *(void *)(v5 + v30 - 56);
      BOOL v34 = *(void *)v60 < v35;
      if (*(void *)v60 == v35) {
        BOOL v34 = *(_OWORD *)&v60[8] < *(_OWORD *)(v5 + v30 - 48);
      }
    }
    if (v34) {
      goto LABEL_29;
    }
    if (*(_OWORD *)v60 == *(_OWORD *)(v5 + v30 - 56)
      && *((void *)&v59 + 1) == v33
      && *(void *)&v60[16] == *(void *)(v5 + v30 - 40))
    {
      double result = sub_100BC6F4C((uint64_t)&v51, v5 + v30 - 200);
      if (!result)
      {
        uint64_t v29 = v5 + v30;
        goto LABEL_32;
      }
      goto LABEL_29;
    }
LABEL_31:
    uint64_t v29 = v9;
LABEL_32:
    *(_OWORD *)uint64_t v29 = v51;
    long long v42 = v52;
    long long v43 = v53;
    long long v44 = v55;
    *(_OWORD *)(v29 + 48) = v54;
    *(_OWORD *)(v29 + 64) = v44;
    *(_OWORD *)(v29 + 16) = v42;
    *(_OWORD *)(v29 + 32) = v43;
    long long v45 = v56;
    long long v46 = v57;
    long long v47 = v59;
    *(_OWORD *)(v29 + 112) = v58;
    *(_OWORD *)(v29 + 128) = v47;
    *(_OWORD *)(v29 + 80) = v45;
    *(_OWORD *)(v29 + 96) = v46;
    long long v48 = *(_OWORD *)v60;
    long long v49 = *(_OWORD *)&v60[16];
    long long v50 = v61;
    *(void *)(v29 + 192) = v62;
    *(_OWORD *)(v29 + 160) = v49;
    *(_OWORD *)(v29 + 176) = v50;
    *(_OWORD *)(v29 + 144) = v48;
LABEL_33:
    uint64_t v6 = v8 + 200;
    v7 += 200;
  }
  while (v8 + 200 != a2);
  return result;
}

double sub_100BC5588(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v58 = v2;
    uint64_t v59 = v3;
    uint64_t v5 = a1;
    while (1)
    {
      while (1)
      {
        if (v5 + 200 == a2) {
          return result;
        }
        uint64_t v6 = (void *)v5;
        v5 += 200;
        uint64_t v7 = v6[41];
        uint64_t v8 = v6[16];
        if (v7 != v8) {
          break;
        }
        uint64_t v9 = v6[42];
        uint64_t v10 = v6[17];
        BOOL v12 = __OFSUB__(v9, v10);
        BOOL v11 = v9 - v10 < 0;
        if (v9 == v10)
        {
          uint64_t v13 = v6[43];
          uint64_t v14 = v6[18];
          BOOL v12 = __OFSUB__(v13, v14);
          BOOL v11 = v13 - v14 < 0;
          if (v13 == v14)
          {
            uint64_t v15 = v6[45];
            uint64_t v16 = v6[20];
            BOOL v12 = __OFSUB__(v15, v16);
            BOOL v11 = v15 - v16 < 0;
            if (v15 == v16)
            {
              uint64_t v17 = v6[44];
              uint64_t v18 = v6[19];
              BOOL v12 = __OFSUB__(v17, v18);
              BOOL v11 = v17 - v18 < 0;
            }
          }
        }
        if (v11 != v12
          || v6[44] == v6[19]
          && v6[43] == v6[18]
          && v9 == v10
          && v6[45] == v6[20]
          && sub_100BC6F4C(v5, (uint64_t)v6))
        {
          goto LABEL_17;
        }
      }
      if (v7 < v8)
      {
LABEL_17:
        long long v20 = *(_OWORD *)(v5 + 176);
        long long v55 = *(_OWORD *)(v5 + 160);
        long long v56 = v20;
        uint64_t v57 = *(void *)(v5 + 192);
        long long v21 = *(_OWORD *)(v5 + 112);
        long long v51 = *(_OWORD *)(v5 + 96);
        long long v52 = v21;
        long long v22 = *(_OWORD *)(v5 + 144);
        long long v53 = *(_OWORD *)(v5 + 128);
        long long v54 = v22;
        long long v23 = *(_OWORD *)(v5 + 48);
        long long v47 = *(_OWORD *)(v5 + 32);
        long long v48 = v23;
        long long v24 = *(_OWORD *)(v5 + 80);
        long long v49 = *(_OWORD *)(v5 + 64);
        long long v50 = v24;
        long long v25 = *(_OWORD *)(v5 + 16);
        uint64_t v26 = v5;
        long long v45 = *(_OWORD *)v5;
        long long v46 = v25;
        while (1)
        {
          long long v27 = *(_OWORD *)(v26 - 56);
          long long v28 = *(_OWORD *)(v26 - 24);
          *(_OWORD *)(v26 + 160) = *(_OWORD *)(v26 - 40);
          *(_OWORD *)(v26 + 176) = v28;
          *(void *)(v26 + 192) = *(void *)(v26 - 8);
          long long v29 = *(_OWORD *)(v26 - 120);
          long long v30 = *(_OWORD *)(v26 - 88);
          *(_OWORD *)(v26 + 96) = *(_OWORD *)(v26 - 104);
          *(_OWORD *)(v26 + 112) = v30;
          *(_OWORD *)(v26 + 128) = *(_OWORD *)(v26 - 72);
          *(_OWORD *)(v26 + 144) = v27;
          long long v31 = *(_OWORD *)(v26 - 184);
          long long v32 = *(_OWORD *)(v26 - 152);
          *(_OWORD *)(v26 + 32) = *(_OWORD *)(v26 - 168);
          *(_OWORD *)(v26 + 48) = v32;
          *(_OWORD *)(v26 + 64) = *(_OWORD *)(v26 - 136);
          *(_OWORD *)(v26 + 80) = v29;
          *(_OWORD *)uint64_t v26 = *(_OWORD *)(v26 - 200);
          *(_OWORD *)(v26 + 16) = v31;
          uint64_t v33 = *(void *)(v26 - 272);
          if ((void)v53 != v33)
          {
            if ((uint64_t)v53 >= v33) {
              break;
            }
            goto LABEL_29;
          }
          uint64_t v34 = *(void *)(v26 - 264);
          BOOL v36 = __OFSUB__(*((void *)&v53 + 1), v34);
          BOOL v35 = *((void *)&v53 + 1) - v34 < 0;
          if (*((void *)&v53 + 1) != v34) {
            goto LABEL_22;
          }
          uint64_t v37 = *(void *)(v26 - 256);
          BOOL v36 = __OFSUB__((void)v54, v37);
          BOOL v35 = (uint64_t)v54 - v37 < 0;
          if ((void)v54 == v37
            && (uint64_t v38 = *(void *)(v26 - 240),
                BOOL v36 = __OFSUB__((void)v55, v38),
                BOOL v35 = (uint64_t)v55 - v38 < 0,
                (void)v55 == v38))
          {
            if (*((uint64_t *)&v54 + 1) < *(void *)(v26 - 248)) {
              goto LABEL_29;
            }
          }
          else
          {
LABEL_22:
            if (v35 != v36) {
              goto LABEL_29;
            }
          }
          if (v54 != *(_OWORD *)(v26 - 256)
            || *((void *)&v53 + 1) != v34
            || (void)v55 != *(void *)(v26 - 240)
            || (sub_100BC6F4C((uint64_t)&v45, v26 - 400) & 1) == 0)
          {
            break;
          }
LABEL_29:
          v26 -= 200;
        }
        long long v39 = v53;
        *(_OWORD *)(v26 - 56) = v54;
        long long v40 = v56;
        *(_OWORD *)(v26 - 40) = v55;
        *(_OWORD *)(v26 - 24) = v40;
        long long v41 = v49;
        *(_OWORD *)(v26 - 120) = v50;
        long long v42 = v52;
        *(_OWORD *)(v26 - 104) = v51;
        *(_OWORD *)(v26 - 88) = v42;
        *(_OWORD *)(v26 - 72) = v39;
        long long v43 = v45;
        *(_OWORD *)(v26 - 184) = v46;
        double result = *(double *)&v47;
        long long v44 = v48;
        *(_OWORD *)(v26 - 168) = v47;
        *(_OWORD *)(v26 - 152) = v44;
        *(_OWORD *)(v26 - 136) = v41;
        *(void *)(v26 - 8) = v57;
        *(_OWORD *)(v26 - 200) = v43;
      }
    }
  }
  return result;
}

uint64_t sub_100BC5810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 128);
  uint64_t v7 = *(void *)(a1 + 128);
  if (v6 == v7)
  {
    uint64_t v8 = *(void *)(a2 + 136);
    uint64_t v9 = *(void *)(a1 + 136);
    BOOL v10 = v8 < v9;
    if (v8 == v9)
    {
      uint64_t v11 = *(void *)(a2 + 144);
      uint64_t v12 = *(void *)(a1 + 144);
      BOOL v10 = v11 < v12;
      if (v11 == v12) {
        BOOL v10 = *(_OWORD *)(a2 + 152) < *(_OWORD *)(a1 + 152);
      }
    }
    if (!v10)
    {
      if (*(void *)(a2 + 152) != *(void *)(a1 + 152)
        || *(void *)(a2 + 144) != *(void *)(a1 + 144)
        || v8 != v9
        || *(void *)(a2 + 160) != *(void *)(a1 + 160)
        || (v13 = sub_100BC6F4C(a2, a1), uint64_t v6 = *(void *)(a2 + 128), (v13 & 1) == 0))
      {
LABEL_11:
        uint64_t v14 = *(void *)(a3 + 128);
        if (v14 == v6)
        {
          uint64_t v15 = *(void *)(a3 + 136);
          uint64_t v16 = *(void *)(a2 + 136);
          BOOL v17 = v15 < v16;
          if (v15 == v16)
          {
            uint64_t v18 = *(void *)(a3 + 144);
            uint64_t v19 = *(void *)(a2 + 144);
            BOOL v17 = v18 < v19;
            if (v18 == v19) {
              BOOL v17 = *(_OWORD *)(a3 + 152) < *(_OWORD *)(a2 + 152);
            }
          }
          if (v17) {
            goto LABEL_47;
          }
          if (*(void *)(a3 + 152) == *(void *)(a2 + 152) && *(void *)(a3 + 144) == *(void *)(a2 + 144))
          {
            uint64_t result = 0;
            if (v15 != v16) {
              return result;
            }
            if (*(void *)(a3 + 160) != *(void *)(a2 + 160)) {
              return result;
            }
            uint64_t result = sub_100BC6F4C(a3, a2);
            if (!result) {
              return result;
            }
LABEL_47:
            long long v140 = *(_OWORD *)(a2 + 160);
            long long v145 = *(_OWORD *)(a2 + 176);
            uint64_t v150 = *(void *)(a2 + 192);
            long long v120 = *(_OWORD *)(a2 + 96);
            long long v125 = *(_OWORD *)(a2 + 112);
            long long v130 = *(_OWORD *)(a2 + 128);
            long long v135 = *(_OWORD *)(a2 + 144);
            long long v100 = *(_OWORD *)(a2 + 32);
            long long v105 = *(_OWORD *)(a2 + 48);
            long long v110 = *(_OWORD *)(a2 + 64);
            long long v115 = *(_OWORD *)(a2 + 80);
            long long v90 = *(_OWORD *)a2;
            long long v95 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a2 = *(_OWORD *)a3;
            long long v54 = *(_OWORD *)(a3 + 16);
            long long v55 = *(_OWORD *)(a3 + 32);
            long long v56 = *(_OWORD *)(a3 + 64);
            *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
            *(_OWORD *)(a2 + 64) = v56;
            *(_OWORD *)(a2 + 16) = v54;
            *(_OWORD *)(a2 + 32) = v55;
            long long v57 = *(_OWORD *)(a3 + 80);
            long long v58 = *(_OWORD *)(a3 + 96);
            long long v59 = *(_OWORD *)(a3 + 128);
            *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
            *(_OWORD *)(a2 + 128) = v59;
            *(_OWORD *)(a2 + 80) = v57;
            *(_OWORD *)(a2 + 96) = v58;
            long long v60 = *(_OWORD *)(a3 + 144);
            long long v61 = *(_OWORD *)(a3 + 160);
            long long v62 = *(_OWORD *)(a3 + 176);
            *(void *)(a2 + 192) = *(void *)(a3 + 192);
            *(_OWORD *)(a2 + 160) = v61;
            *(_OWORD *)(a2 + 176) = v62;
            *(_OWORD *)(a2 + 144) = v60;
            *(_OWORD *)(a3 + 160) = v140;
            *(_OWORD *)(a3 + 176) = v145;
            *(void *)(a3 + 192) = v150;
            *(_OWORD *)(a3 + 96) = v120;
            *(_OWORD *)(a3 + 112) = v125;
            *(_OWORD *)(a3 + 128) = v130;
            *(_OWORD *)(a3 + 144) = v135;
            *(_OWORD *)(a3 + 32) = v100;
            *(_OWORD *)(a3 + 48) = v105;
            *(_OWORD *)(a3 + 64) = v110;
            *(_OWORD *)(a3 + 80) = v115;
            *(_OWORD *)a3 = v90;
            *(_OWORD *)(a3 + 16) = v95;
            uint64_t v63 = *(void *)(a2 + 128);
            uint64_t v64 = *(void *)(a1 + 128);
            if (v63 == v64)
            {
              uint64_t v65 = *(void *)(a2 + 136);
              uint64_t v66 = *(void *)(a1 + 136);
              BOOL v67 = v65 < v66;
              if (v65 == v66)
              {
                uint64_t v68 = *(void *)(a2 + 144);
                uint64_t v69 = *(void *)(a1 + 144);
                BOOL v67 = v68 < v69;
                if (v68 == v69) {
                  BOOL v67 = *(_OWORD *)(a2 + 152) < *(_OWORD *)(a1 + 152);
                }
              }
              if (!v67)
              {
                if (*(void *)(a2 + 152) != *(void *)(a1 + 152) || *(void *)(a2 + 144) != *(void *)(a1 + 144)) {
                  return 1;
                }
                uint64_t result = 1;
                if (v65 != v66 || *(void *)(a2 + 160) != *(void *)(a1 + 160)) {
                  return result;
                }
                if (!sub_100BC6F4C(a2, a1)) {
                  return 1;
                }
              }
            }
            else if (v63 >= v64)
            {
              return 1;
            }
            long long v142 = *(_OWORD *)(a1 + 160);
            long long v147 = *(_OWORD *)(a1 + 176);
            uint64_t v152 = *(void *)(a1 + 192);
            long long v122 = *(_OWORD *)(a1 + 96);
            long long v127 = *(_OWORD *)(a1 + 112);
            long long v132 = *(_OWORD *)(a1 + 128);
            long long v137 = *(_OWORD *)(a1 + 144);
            long long v102 = *(_OWORD *)(a1 + 32);
            long long v107 = *(_OWORD *)(a1 + 48);
            long long v112 = *(_OWORD *)(a1 + 64);
            long long v117 = *(_OWORD *)(a1 + 80);
            long long v92 = *(_OWORD *)a1;
            long long v97 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            long long v79 = *(_OWORD *)(a2 + 16);
            long long v80 = *(_OWORD *)(a2 + 32);
            long long v81 = *(_OWORD *)(a2 + 64);
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
            *(_OWORD *)(a1 + 64) = v81;
            *(_OWORD *)(a1 + 16) = v79;
            *(_OWORD *)(a1 + 32) = v80;
            long long v82 = *(_OWORD *)(a2 + 80);
            long long v83 = *(_OWORD *)(a2 + 96);
            long long v84 = *(_OWORD *)(a2 + 128);
            *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
            *(_OWORD *)(a1 + 128) = v84;
            *(_OWORD *)(a1 + 80) = v82;
            *(_OWORD *)(a1 + 96) = v83;
            long long v85 = *(_OWORD *)(a2 + 144);
            long long v86 = *(_OWORD *)(a2 + 160);
            long long v87 = *(_OWORD *)(a2 + 176);
            *(void *)(a1 + 192) = *(void *)(a2 + 192);
            *(_OWORD *)(a1 + 160) = v86;
            *(_OWORD *)(a1 + 176) = v87;
            *(_OWORD *)(a1 + 144) = v85;
            *(_OWORD *)(a2 + 160) = v142;
            *(_OWORD *)(a2 + 176) = v147;
            *(void *)(a2 + 192) = v152;
            *(_OWORD *)(a2 + 96) = v122;
            *(_OWORD *)(a2 + 112) = v127;
            *(_OWORD *)(a2 + 128) = v132;
            *(_OWORD *)(a2 + 144) = v137;
            *(_OWORD *)(a2 + 32) = v102;
            *(_OWORD *)(a2 + 48) = v107;
            *(_OWORD *)(a2 + 64) = v112;
            *(_OWORD *)(a2 + 80) = v117;
            uint64_t result = 2;
            *(_OWORD *)a2 = v92;
            *(_OWORD *)(a2 + 16) = v97;
            return result;
          }
        }
        else if (v14 < v6)
        {
          goto LABEL_47;
        }
        return 0;
      }
    }
  }
  else if (v6 >= v7)
  {
    goto LABEL_11;
  }
  uint64_t v21 = *(void *)(a3 + 128);
  if (v21 != v6)
  {
    if (v21 >= v6) {
      goto LABEL_33;
    }
LABEL_45:
    long long v139 = *(_OWORD *)(a1 + 160);
    long long v144 = *(_OWORD *)(a1 + 176);
    uint64_t v149 = *(void *)(a1 + 192);
    long long v119 = *(_OWORD *)(a1 + 96);
    long long v124 = *(_OWORD *)(a1 + 112);
    long long v129 = *(_OWORD *)(a1 + 128);
    long long v134 = *(_OWORD *)(a1 + 144);
    long long v99 = *(_OWORD *)(a1 + 32);
    long long v104 = *(_OWORD *)(a1 + 48);
    long long v109 = *(_OWORD *)(a1 + 64);
    long long v114 = *(_OWORD *)(a1 + 80);
    long long v89 = *(_OWORD *)a1;
    long long v94 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a3;
    long long v43 = *(_OWORD *)(a3 + 16);
    long long v44 = *(_OWORD *)(a3 + 32);
    long long v45 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a1 + 64) = v45;
    *(_OWORD *)(a1 + 16) = v43;
    *(_OWORD *)(a1 + 32) = v44;
    long long v46 = *(_OWORD *)(a3 + 80);
    long long v47 = *(_OWORD *)(a3 + 96);
    long long v48 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a1 + 128) = v48;
    *(_OWORD *)(a1 + 80) = v46;
    *(_OWORD *)(a1 + 96) = v47;
    long long v49 = *(_OWORD *)(a3 + 144);
    long long v50 = *(_OWORD *)(a3 + 160);
    long long v51 = *(_OWORD *)(a3 + 176);
    *(void *)(a1 + 192) = *(void *)(a3 + 192);
    *(_OWORD *)(a1 + 160) = v50;
    *(_OWORD *)(a1 + 176) = v51;
    *(_OWORD *)(a1 + 144) = v49;
    *(_OWORD *)(a3 + 160) = v139;
    *(_OWORD *)(a3 + 176) = v144;
    *(void *)(a3 + 192) = v149;
    *(_OWORD *)(a3 + 96) = v119;
    *(_OWORD *)(a3 + 112) = v124;
    *(_OWORD *)(a3 + 128) = v129;
    *(_OWORD *)(a3 + 144) = v134;
    *(_OWORD *)(a3 + 32) = v99;
    *(_OWORD *)(a3 + 48) = v104;
    *(_OWORD *)(a3 + 64) = v109;
    *(_OWORD *)(a3 + 80) = v114;
    long long v53 = v89;
    long long v52 = v94;
    uint64_t result = 1;
LABEL_61:
    *(_OWORD *)a3 = v53;
    *(_OWORD *)(a3 + 16) = v52;
    return result;
  }
  uint64_t v22 = *(void *)(a3 + 136);
  uint64_t v23 = *(void *)(a2 + 136);
  BOOL v24 = v22 < v23;
  if (v22 == v23)
  {
    uint64_t v25 = *(void *)(a3 + 144);
    uint64_t v26 = *(void *)(a2 + 144);
    BOOL v24 = v25 < v26;
    if (v25 == v26) {
      BOOL v24 = *(_OWORD *)(a3 + 152) < *(_OWORD *)(a2 + 152);
    }
  }
  if (v24
    || *(void *)(a3 + 152) == *(void *)(a2 + 152)
    && *(void *)(a3 + 144) == *(void *)(a2 + 144)
    && v22 == v23
    && *(void *)(a3 + 160) == *(void *)(a2 + 160)
    && sub_100BC6F4C(a3, a2))
  {
    goto LABEL_45;
  }
LABEL_33:
  long long v138 = *(_OWORD *)(a1 + 160);
  long long v143 = *(_OWORD *)(a1 + 176);
  uint64_t v148 = *(void *)(a1 + 192);
  long long v118 = *(_OWORD *)(a1 + 96);
  long long v123 = *(_OWORD *)(a1 + 112);
  long long v128 = *(_OWORD *)(a1 + 128);
  long long v133 = *(_OWORD *)(a1 + 144);
  long long v98 = *(_OWORD *)(a1 + 32);
  long long v103 = *(_OWORD *)(a1 + 48);
  long long v108 = *(_OWORD *)(a1 + 64);
  long long v113 = *(_OWORD *)(a1 + 80);
  long long v88 = *(_OWORD *)a1;
  long long v93 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v27 = *(_OWORD *)(a2 + 16);
  long long v28 = *(_OWORD *)(a2 + 32);
  long long v29 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v29;
  *(_OWORD *)(a1 + 16) = v27;
  *(_OWORD *)(a1 + 32) = v28;
  long long v30 = *(_OWORD *)(a2 + 80);
  long long v31 = *(_OWORD *)(a2 + 96);
  long long v32 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v32;
  *(_OWORD *)(a1 + 80) = v30;
  *(_OWORD *)(a1 + 96) = v31;
  long long v33 = *(_OWORD *)(a2 + 144);
  long long v34 = *(_OWORD *)(a2 + 160);
  long long v35 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v34;
  *(_OWORD *)(a1 + 176) = v35;
  *(_OWORD *)(a1 + 144) = v33;
  *(_OWORD *)(a2 + 160) = v138;
  *(_OWORD *)(a2 + 176) = v143;
  *(void *)(a2 + 192) = v148;
  *(_OWORD *)(a2 + 96) = v118;
  *(_OWORD *)(a2 + 112) = v123;
  *(_OWORD *)(a2 + 128) = v128;
  *(_OWORD *)(a2 + 144) = v133;
  *(_OWORD *)(a2 + 32) = v98;
  *(_OWORD *)(a2 + 48) = v103;
  *(_OWORD *)(a2 + 64) = v108;
  *(_OWORD *)(a2 + 80) = v113;
  *(_OWORD *)a2 = v88;
  *(_OWORD *)(a2 + 16) = v93;
  uint64_t v36 = *(void *)(a3 + 128);
  uint64_t v37 = *(void *)(a2 + 128);
  if (v36 != v37)
  {
    if (v36 >= v37) {
      return 1;
    }
    goto LABEL_60;
  }
  uint64_t v38 = *(void *)(a3 + 136);
  uint64_t v39 = *(void *)(a2 + 136);
  BOOL v40 = v38 < v39;
  if (v38 == v39)
  {
    uint64_t v41 = *(void *)(a3 + 144);
    uint64_t v42 = *(void *)(a2 + 144);
    BOOL v40 = v41 < v42;
    if (v41 == v42) {
      BOOL v40 = *(_OWORD *)(a3 + 152) < *(_OWORD *)(a2 + 152);
    }
  }
  if (v40)
  {
LABEL_60:
    long long v141 = *(_OWORD *)(a2 + 160);
    long long v146 = *(_OWORD *)(a2 + 176);
    uint64_t v151 = *(void *)(a2 + 192);
    long long v121 = *(_OWORD *)(a2 + 96);
    long long v126 = *(_OWORD *)(a2 + 112);
    long long v131 = *(_OWORD *)(a2 + 128);
    long long v136 = *(_OWORD *)(a2 + 144);
    long long v101 = *(_OWORD *)(a2 + 32);
    long long v106 = *(_OWORD *)(a2 + 48);
    long long v111 = *(_OWORD *)(a2 + 64);
    long long v116 = *(_OWORD *)(a2 + 80);
    long long v91 = *(_OWORD *)a2;
    long long v96 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    long long v70 = *(_OWORD *)(a3 + 16);
    long long v71 = *(_OWORD *)(a3 + 32);
    long long v72 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v72;
    *(_OWORD *)(a2 + 16) = v70;
    *(_OWORD *)(a2 + 32) = v71;
    long long v73 = *(_OWORD *)(a3 + 80);
    long long v74 = *(_OWORD *)(a3 + 96);
    long long v75 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a2 + 128) = v75;
    *(_OWORD *)(a2 + 80) = v73;
    *(_OWORD *)(a2 + 96) = v74;
    long long v76 = *(_OWORD *)(a3 + 144);
    long long v77 = *(_OWORD *)(a3 + 160);
    long long v78 = *(_OWORD *)(a3 + 176);
    *(void *)(a2 + 192) = *(void *)(a3 + 192);
    *(_OWORD *)(a2 + 160) = v77;
    *(_OWORD *)(a2 + 176) = v78;
    *(_OWORD *)(a2 + 144) = v76;
    *(_OWORD *)(a3 + 160) = v141;
    *(_OWORD *)(a3 + 176) = v146;
    *(void *)(a3 + 192) = v151;
    *(_OWORD *)(a3 + 96) = v121;
    *(_OWORD *)(a3 + 112) = v126;
    *(_OWORD *)(a3 + 128) = v131;
    *(_OWORD *)(a3 + 144) = v136;
    *(_OWORD *)(a3 + 32) = v101;
    *(_OWORD *)(a3 + 48) = v106;
    *(_OWORD *)(a3 + 64) = v111;
    *(_OWORD *)(a3 + 80) = v116;
    long long v53 = v91;
    long long v52 = v96;
    uint64_t result = 2;
    goto LABEL_61;
  }
  if (*(void *)(a3 + 152) != *(void *)(a2 + 152) || *(void *)(a3 + 144) != *(void *)(a2 + 144)) {
    return 1;
  }
  uint64_t result = 1;
  if (v38 == v39 && *(void *)(a3 + 160) == *(void *)(a2 + 160))
  {
    if (!sub_100BC6F4C(a3, a2)) {
      return 1;
    }
    goto LABEL_60;
  }
  return result;
}

unint64_t sub_100BC5EF8(long long *a1, unint64_t a2)
{
  unint64_t j = a2;
  long long v4 = a1[11];
  long long v111 = a1[10];
  long long v112 = v4;
  uint64_t v113 = *((void *)a1 + 24);
  long long v5 = a1[7];
  long long v107 = a1[6];
  long long v108 = v5;
  long long v6 = a1[9];
  long long v109 = a1[8];
  long long v110 = v6;
  long long v7 = a1[3];
  long long v103 = a1[2];
  long long v104 = v7;
  long long v8 = a1[5];
  long long v105 = a1[4];
  long long v106 = v8;
  long long v9 = a1[1];
  long long v101 = *a1;
  long long v102 = v9;
  unint64_t v10 = a2 - 200;
  uint64_t v11 = *(void *)(a2 - 72);
  if ((void)v109 != v11)
  {
    if ((uint64_t)v109 >= v11) {
      goto LABEL_11;
    }
LABEL_27:
    for (unint64_t i = (unint64_t)a1 + 200; ; i += 200)
    {
      uint64_t v26 = *(void *)(i + 128);
      if ((void)v109 == v26)
      {
        uint64_t v27 = *(void *)(i + 136);
        BOOL v29 = __OFSUB__(*((void *)&v109 + 1), v27);
        BOOL v28 = *((void *)&v109 + 1) - v27 < 0;
        if (*((void *)&v109 + 1) == v27)
        {
          uint64_t v30 = *(void *)(i + 144);
          BOOL v29 = __OFSUB__((void)v110, v30);
          BOOL v28 = (uint64_t)v110 - v30 < 0;
          if ((void)v110 == v30)
          {
            uint64_t v31 = *(void *)(i + 160);
            BOOL v29 = __OFSUB__((void)v111, v31);
            BOOL v28 = (uint64_t)v111 - v31 < 0;
            if ((void)v111 == v31)
            {
              uint64_t v32 = *(void *)(i + 152);
              BOOL v29 = __OFSUB__(*((void *)&v110 + 1), v32);
              BOOL v28 = *((void *)&v110 + 1) - v32 < 0;
            }
          }
        }
        if (v28 != v29
          || v110 == *(_OWORD *)(i + 144)
          && *((void *)&v109 + 1) == v27
          && (void)v111 == *(void *)(i + 160)
          && (sub_100BC6F4C((uint64_t)&v101, i) & 1) != 0)
        {
          goto LABEL_41;
        }
      }
      else if ((uint64_t)v109 < v26)
      {
        goto LABEL_41;
      }
    }
  }
  uint64_t v12 = *(void *)(a2 - 64);
  BOOL v14 = __OFSUB__(*((void *)&v109 + 1), v12);
  BOOL v13 = *((void *)&v109 + 1) - v12 < 0;
  if (*((void *)&v109 + 1) == v12)
  {
    uint64_t v15 = *(void *)(a2 - 56);
    BOOL v14 = __OFSUB__((void)v110, v15);
    BOOL v13 = (uint64_t)v110 - v15 < 0;
    if ((void)v110 == v15)
    {
      uint64_t v16 = *(void *)(a2 - 40);
      BOOL v14 = __OFSUB__((void)v111, v16);
      BOOL v13 = (uint64_t)v111 - v16 < 0;
      if ((void)v111 == v16)
      {
        uint64_t v17 = *(void *)(a2 - 48);
        BOOL v14 = __OFSUB__(*((void *)&v110 + 1), v17);
        BOOL v13 = *((void *)&v110 + 1) - v17 < 0;
      }
    }
  }
  if (v13 != v14
    || v110 == *(_OWORD *)(a2 - 56)
    && (void)v111 == *(void *)(a2 - 40)
    && *((void *)&v109 + 1) == v12
    && sub_100BC6F4C((uint64_t)&v101, a2 - 200))
  {
    goto LABEL_27;
  }
LABEL_11:
  for (unint64_t i = (unint64_t)a1 + 200; i < j; i += 200)
  {
    uint64_t v19 = *(void *)(i + 128);
    if ((void)v109 == v19)
    {
      uint64_t v20 = *(void *)(i + 136);
      BOOL v22 = __OFSUB__(*((void *)&v109 + 1), v20);
      BOOL v21 = *((void *)&v109 + 1) - v20 < 0;
      if (*((void *)&v109 + 1) == v20)
      {
        uint64_t v23 = *(void *)(i + 144);
        BOOL v22 = __OFSUB__((void)v110, v23);
        BOOL v21 = (uint64_t)v110 - v23 < 0;
        if ((void)v110 == v23)
        {
          uint64_t v24 = *(void *)(i + 160);
          BOOL v22 = __OFSUB__((void)v111, v24);
          BOOL v21 = (uint64_t)v111 - v24 < 0;
          if ((void)v111 == v24)
          {
            uint64_t v25 = *(void *)(i + 152);
            BOOL v22 = __OFSUB__(*((void *)&v110 + 1), v25);
            BOOL v21 = *((void *)&v110 + 1) - v25 < 0;
          }
        }
      }
      if (v21 != v22
        || v110 == *(_OWORD *)(i + 144)
        && *((void *)&v109 + 1) == v20
        && (void)v111 == *(void *)(i + 160)
        && (sub_100BC6F4C((uint64_t)&v101, i) & 1) != 0)
      {
        break;
      }
    }
    else if ((uint64_t)v109 < v19)
    {
      break;
    }
  }
LABEL_41:
  if (i < j)
  {
    for (unint64_t j = v10; ; j -= 200)
    {
      uint64_t v33 = *(void *)(j + 128);
      if ((void)v109 == v33)
      {
        uint64_t v34 = *(void *)(j + 136);
        BOOL v36 = __OFSUB__(*((void *)&v109 + 1), v34);
        BOOL v35 = *((void *)&v109 + 1) - v34 < 0;
        if (*((void *)&v109 + 1) == v34)
        {
          uint64_t v37 = *(void *)(j + 144);
          BOOL v36 = __OFSUB__((void)v110, v37);
          BOOL v35 = (uint64_t)v110 - v37 < 0;
          if ((void)v110 == v37)
          {
            uint64_t v38 = *(void *)(j + 160);
            BOOL v36 = __OFSUB__((void)v111, v38);
            BOOL v35 = (uint64_t)v111 - v38 < 0;
            if ((void)v111 == v38)
            {
              uint64_t v39 = *(void *)(j + 152);
              BOOL v36 = __OFSUB__(*((void *)&v110 + 1), v39);
              BOOL v35 = *((void *)&v110 + 1) - v39 < 0;
            }
          }
        }
        if (v35 == v36
          && (v110 != *(_OWORD *)(j + 144)
           || *((void *)&v109 + 1) != v34
           || (void)v111 != *(void *)(j + 160)
           || (sub_100BC6F4C((uint64_t)&v101, j) & 1) == 0))
        {
          break;
        }
      }
      else if ((uint64_t)v109 >= v33)
      {
        break;
      }
    }
  }
LABEL_81:
  while (i < j)
  {
    long long v114 = *(_OWORD *)i;
    long long v40 = *(_OWORD *)(i + 16);
    long long v41 = *(_OWORD *)(i + 32);
    long long v42 = *(_OWORD *)(i + 64);
    long long v117 = *(_OWORD *)(i + 48);
    long long v118 = v42;
    long long v115 = v40;
    long long v116 = v41;
    long long v43 = *(_OWORD *)(i + 80);
    long long v44 = *(_OWORD *)(i + 96);
    long long v45 = *(_OWORD *)(i + 128);
    long long v121 = *(_OWORD *)(i + 112);
    long long v122 = v45;
    long long v119 = v43;
    long long v120 = v44;
    long long v46 = *(_OWORD *)(i + 144);
    long long v47 = *(_OWORD *)(i + 160);
    long long v48 = *(_OWORD *)(i + 176);
    uint64_t v126 = *(void *)(i + 192);
    long long v124 = v47;
    long long v125 = v48;
    long long v123 = v46;
    *(_OWORD *)unint64_t i = *(_OWORD *)j;
    long long v49 = *(_OWORD *)(j + 16);
    long long v50 = *(_OWORD *)(j + 32);
    long long v51 = *(_OWORD *)(j + 64);
    *(_OWORD *)(i + 48) = *(_OWORD *)(j + 48);
    *(_OWORD *)(i + 64) = v51;
    *(_OWORD *)(i + 16) = v49;
    *(_OWORD *)(i + 32) = v50;
    long long v52 = *(_OWORD *)(j + 80);
    long long v53 = *(_OWORD *)(j + 96);
    long long v54 = *(_OWORD *)(j + 128);
    *(_OWORD *)(i + 112) = *(_OWORD *)(j + 112);
    *(_OWORD *)(i + 128) = v54;
    *(_OWORD *)(i + 80) = v52;
    *(_OWORD *)(i + 96) = v53;
    long long v55 = *(_OWORD *)(j + 144);
    long long v56 = *(_OWORD *)(j + 160);
    long long v57 = *(_OWORD *)(j + 176);
    *(void *)(i + 192) = *(void *)(j + 192);
    *(_OWORD *)(i + 160) = v56;
    *(_OWORD *)(i + 176) = v57;
    *(_OWORD *)(i + 144) = v55;
    *(_OWORD *)unint64_t j = v114;
    long long v58 = v115;
    long long v59 = v116;
    long long v60 = v118;
    *(_OWORD *)(j + 48) = v117;
    *(_OWORD *)(j + 64) = v60;
    *(_OWORD *)(j + 16) = v58;
    *(_OWORD *)(j + 32) = v59;
    long long v61 = v119;
    long long v62 = v120;
    long long v63 = v122;
    *(_OWORD *)(j + 112) = v121;
    *(_OWORD *)(j + 128) = v63;
    *(_OWORD *)(j + 80) = v61;
    *(_OWORD *)(j + 96) = v62;
    long long v64 = v123;
    long long v65 = v124;
    long long v66 = v125;
    *(void *)(j + 192) = v126;
    *(_OWORD *)(j + 160) = v65;
    *(_OWORD *)(j + 176) = v66;
    *(_OWORD *)(j + 144) = v64;
    do
    {
      while (1)
      {
        i += 200;
        uint64_t v67 = *(void *)(i + 128);
        if ((void)v109 == v67) {
          break;
        }
        if ((uint64_t)v109 < v67) {
          goto LABEL_71;
        }
      }
      uint64_t v68 = *(void *)(i + 136);
      BOOL v70 = __OFSUB__(*((void *)&v109 + 1), v68);
      BOOL v69 = *((void *)&v109 + 1) - v68 < 0;
      if (*((void *)&v109 + 1) == v68)
      {
        uint64_t v71 = *(void *)(i + 144);
        BOOL v70 = __OFSUB__((void)v110, v71);
        BOOL v69 = (uint64_t)v110 - v71 < 0;
        if ((void)v110 == v71)
        {
          uint64_t v72 = *(void *)(i + 160);
          BOOL v70 = __OFSUB__((void)v111, v72);
          BOOL v69 = (uint64_t)v111 - v72 < 0;
          if ((void)v111 == v72)
          {
            uint64_t v73 = *(void *)(i + 152);
            BOOL v70 = __OFSUB__(*((void *)&v110 + 1), v73);
            BOOL v69 = *((void *)&v110 + 1) - v73 < 0;
          }
        }
      }
    }
    while (v69 == v70
         && (v110 != *(_OWORD *)(i + 144)
          || (void)v111 != *(void *)(i + 160)
          || *((void *)&v109 + 1) != v68
          || !sub_100BC6F4C((uint64_t)&v101, i)));
    do
    {
LABEL_71:
      while (1)
      {
        j -= 200;
        uint64_t v74 = *(void *)(j + 128);
        if ((void)v109 == v74) {
          break;
        }
        if ((uint64_t)v109 >= v74) {
          goto LABEL_81;
        }
      }
      uint64_t v75 = *(void *)(j + 136);
      BOOL v77 = __OFSUB__(*((void *)&v109 + 1), v75);
      BOOL v76 = *((void *)&v109 + 1) - v75 < 0;
      if (*((void *)&v109 + 1) == v75)
      {
        uint64_t v78 = *(void *)(j + 144);
        BOOL v77 = __OFSUB__((void)v110, v78);
        BOOL v76 = (uint64_t)v110 - v78 < 0;
        if ((void)v110 == v78)
        {
          uint64_t v79 = *(void *)(j + 160);
          BOOL v77 = __OFSUB__((void)v111, v79);
          BOOL v76 = (uint64_t)v111 - v79 < 0;
          if ((void)v111 == v79)
          {
            uint64_t v80 = *(void *)(j + 152);
            BOOL v77 = __OFSUB__(*((void *)&v110 + 1), v80);
            BOOL v76 = *((void *)&v110 + 1) - v80 < 0;
          }
        }
      }
    }
    while (v76 != v77
         || v110 == *(_OWORD *)(j + 144)
         && *((void *)&v109 + 1) == v75
         && (void)v111 == *(void *)(j + 160)
         && (sub_100BC6F4C((uint64_t)&v101, j) & 1) != 0);
  }
  long long v81 = (long long *)(i - 200);
  if ((long long *)(i - 200) != a1)
  {
    *a1 = *v81;
    long long v82 = *(_OWORD *)(i - 184);
    long long v83 = *(_OWORD *)(i - 168);
    long long v84 = *(_OWORD *)(i - 136);
    a1[3] = *(_OWORD *)(i - 152);
    a1[4] = v84;
    a1[1] = v82;
    a1[2] = v83;
    long long v85 = *(_OWORD *)(i - 120);
    long long v86 = *(_OWORD *)(i - 104);
    long long v87 = *(_OWORD *)(i - 72);
    a1[7] = *(_OWORD *)(i - 88);
    a1[8] = v87;
    a1[5] = v85;
    a1[6] = v86;
    long long v88 = *(_OWORD *)(i - 56);
    long long v89 = *(_OWORD *)(i - 40);
    long long v90 = *(_OWORD *)(i - 24);
    *((void *)a1 + 24) = *(void *)(i - 8);
    a1[10] = v89;
    a1[11] = v90;
    a1[9] = v88;
  }
  long long *v81 = v101;
  long long v91 = v102;
  long long v92 = v103;
  long long v93 = v105;
  *(_OWORD *)(i - 152) = v104;
  *(_OWORD *)(i - 136) = v93;
  *(_OWORD *)(i - 184) = v91;
  *(_OWORD *)(i - 168) = v92;
  long long v94 = v106;
  long long v95 = v107;
  long long v96 = v109;
  *(_OWORD *)(i - 88) = v108;
  *(_OWORD *)(i - 72) = v96;
  *(_OWORD *)(i - 120) = v94;
  *(_OWORD *)(i - 104) = v95;
  long long v97 = v110;
  long long v98 = v111;
  long long v99 = v112;
  *(void *)(i - 8) = v113;
  *(_OWORD *)(i - 40) = v98;
  *(_OWORD *)(i - 24) = v99;
  *(_OWORD *)(i - 56) = v97;
  return i;
}

unint64_t sub_100BC64C0(long long *a1, void *a2)
{
  uint64_t v4 = 0;
  uint64_t v110 = *((void *)a1 + 24);
  long long v5 = a1[11];
  long long v108 = a1[10];
  long long v109 = v5;
  long long v6 = a1[7];
  long long v104 = a1[6];
  long long v105 = v6;
  long long v7 = a1[9];
  long long v106 = a1[8];
  long long v107 = v7;
  long long v8 = a1[3];
  long long v100 = a1[2];
  long long v101 = v8;
  long long v9 = a1[5];
  long long v102 = a1[4];
  long long v103 = v9;
  long long v10 = a1[1];
  long long v98 = *a1;
  long long v99 = v10;
  while (1)
  {
    uint64_t v11 = (uint64_t)a1 + v4;
    uint64_t v12 = *(void *)((char *)a1 + v4 + 328);
    if (v12 == (void)v106) {
      break;
    }
    if (v12 >= (uint64_t)v106) {
      goto LABEL_15;
    }
LABEL_14:
    v4 += 200;
  }
  uint64_t v13 = *(void *)(v11 + 336);
  BOOL v15 = __OFSUB__(v13, *((void *)&v106 + 1));
  BOOL v14 = v13 - *((void *)&v106 + 1) < 0;
  if (v13 == *((void *)&v106 + 1))
  {
    uint64_t v16 = *(void *)((char *)a1 + v4 + 344);
    BOOL v15 = __OFSUB__(v16, (void)v107);
    BOOL v14 = v16 - (uint64_t)v107 < 0;
    if (v16 == (void)v107)
    {
      uint64_t v17 = *(void *)((char *)a1 + v4 + 360);
      BOOL v15 = __OFSUB__(v17, (void)v108);
      BOOL v14 = v17 - (uint64_t)v108 < 0;
      if (v17 == (void)v108)
      {
        uint64_t v18 = *(void *)((char *)a1 + v4 + 352);
        BOOL v15 = __OFSUB__(v18, *((void *)&v107 + 1));
        BOOL v14 = v18 - *((void *)&v107 + 1) < 0;
      }
    }
  }
  if (v14 != v15
    || *(long long *)((char *)a1 + v4 + 344) == v107
    && v13 == *((void *)&v106 + 1)
    && *(void *)((char *)a1 + v4 + 360) == (void)v108
    && (sub_100BC6F4C(v11 + 200, (uint64_t)&v98) & 1) != 0)
  {
    goto LABEL_14;
  }
LABEL_15:
  unint64_t v19 = (unint64_t)a1 + v4;
  unint64_t v20 = (unint64_t)a1 + v4 + 200;
  if (v4)
  {
    do
    {
      while (1)
      {
        a2 -= 25;
        uint64_t v21 = a2[16];
        if (v21 == (void)v106) {
          break;
        }
        if (v21 < (uint64_t)v106) {
          goto LABEL_46;
        }
      }
      uint64_t v22 = a2[17];
      BOOL v24 = __OFSUB__(v22, *((void *)&v106 + 1));
      BOOL v23 = v22 - *((void *)&v106 + 1) < 0;
      if (v22 == *((void *)&v106 + 1))
      {
        uint64_t v25 = a2[18];
        BOOL v24 = __OFSUB__(v25, (void)v107);
        BOOL v23 = v25 - (uint64_t)v107 < 0;
        if (v25 == (void)v107)
        {
          uint64_t v26 = a2[20];
          BOOL v24 = __OFSUB__(v26, (void)v108);
          BOOL v23 = v26 - (uint64_t)v108 < 0;
          if (v26 == (void)v108)
          {
            uint64_t v27 = a2[19];
            BOOL v24 = __OFSUB__(v27, *((void *)&v107 + 1));
            BOOL v23 = v27 - *((void *)&v107 + 1) < 0;
          }
        }
      }
    }
    while (v23 == v24
         && (*((_OWORD *)a2 + 9) != v107
          || v22 != *((void *)&v106 + 1)
          || a2[20] != (void)v108
          || !sub_100BC6F4C((uint64_t)a2, (uint64_t)&v98)));
  }
  else
  {
    do
    {
      if (v20 >= (unint64_t)a2) {
        break;
      }
      while (1)
      {
        a2 -= 25;
        uint64_t v28 = a2[16];
        if (v28 == (void)v106) {
          break;
        }
        if (v28 < (uint64_t)v106 || v20 >= (unint64_t)a2) {
          goto LABEL_46;
        }
      }
      uint64_t v30 = a2[17];
      BOOL v32 = __OFSUB__(v30, *((void *)&v106 + 1));
      BOOL v31 = v30 - *((void *)&v106 + 1) < 0;
      if (v30 == *((void *)&v106 + 1))
      {
        uint64_t v33 = a2[18];
        BOOL v32 = __OFSUB__(v33, (void)v107);
        BOOL v31 = v33 - (uint64_t)v107 < 0;
        if (v33 == (void)v107)
        {
          uint64_t v34 = a2[20];
          BOOL v32 = __OFSUB__(v34, (void)v108);
          BOOL v31 = v34 - (uint64_t)v108 < 0;
          if (v34 == (void)v108)
          {
            uint64_t v35 = a2[19];
            BOOL v32 = __OFSUB__(v35, *((void *)&v107 + 1));
            BOOL v31 = v35 - *((void *)&v107 + 1) < 0;
          }
        }
      }
    }
    while (v31 == v32
         && (*((_OWORD *)a2 + 9) != v107
          || v30 != *((void *)&v106 + 1)
          || a2[20] != (void)v108
          || (sub_100BC6F4C((uint64_t)a2, (uint64_t)&v98) & 1) == 0));
  }
LABEL_46:
  if (v20 < (unint64_t)a2)
  {
    unint64_t v36 = (unint64_t)a1 + v4 + 200;
    unint64_t v37 = (unint64_t)a2;
    do
    {
      long long v111 = *(_OWORD *)v36;
      long long v38 = *(_OWORD *)(v36 + 16);
      long long v39 = *(_OWORD *)(v36 + 32);
      long long v40 = *(_OWORD *)(v36 + 64);
      long long v114 = *(_OWORD *)(v36 + 48);
      long long v115 = v40;
      long long v112 = v38;
      long long v113 = v39;
      long long v41 = *(_OWORD *)(v36 + 80);
      long long v42 = *(_OWORD *)(v36 + 96);
      long long v43 = *(_OWORD *)(v36 + 128);
      long long v118 = *(_OWORD *)(v36 + 112);
      long long v119 = v43;
      long long v116 = v41;
      long long v117 = v42;
      long long v44 = *(_OWORD *)(v36 + 144);
      long long v45 = *(_OWORD *)(v36 + 160);
      long long v46 = *(_OWORD *)(v36 + 176);
      uint64_t v123 = *(void *)(v36 + 192);
      long long v121 = v45;
      long long v122 = v46;
      long long v120 = v44;
      *(_OWORD *)unint64_t v36 = *(_OWORD *)v37;
      long long v47 = *(_OWORD *)(v37 + 16);
      long long v48 = *(_OWORD *)(v37 + 32);
      long long v49 = *(_OWORD *)(v37 + 64);
      *(_OWORD *)(v36 + 48) = *(_OWORD *)(v37 + 48);
      *(_OWORD *)(v36 + 64) = v49;
      *(_OWORD *)(v36 + 16) = v47;
      *(_OWORD *)(v36 + 32) = v48;
      long long v50 = *(_OWORD *)(v37 + 80);
      long long v51 = *(_OWORD *)(v37 + 96);
      long long v52 = *(_OWORD *)(v37 + 128);
      *(_OWORD *)(v36 + 112) = *(_OWORD *)(v37 + 112);
      *(_OWORD *)(v36 + 128) = v52;
      *(_OWORD *)(v36 + 80) = v50;
      *(_OWORD *)(v36 + 96) = v51;
      long long v53 = *(_OWORD *)(v37 + 144);
      long long v54 = *(_OWORD *)(v37 + 160);
      long long v55 = *(_OWORD *)(v37 + 176);
      *(void *)(v36 + 192) = *(void *)(v37 + 192);
      *(_OWORD *)(v36 + 160) = v54;
      *(_OWORD *)(v36 + 176) = v55;
      *(_OWORD *)(v36 + 144) = v53;
      *(_OWORD *)unint64_t v37 = v111;
      long long v56 = v112;
      long long v57 = v113;
      long long v58 = v115;
      *(_OWORD *)(v37 + 48) = v114;
      *(_OWORD *)(v37 + 64) = v58;
      *(_OWORD *)(v37 + 16) = v56;
      *(_OWORD *)(v37 + 32) = v57;
      long long v59 = v116;
      long long v60 = v117;
      long long v61 = v119;
      *(_OWORD *)(v37 + 112) = v118;
      *(_OWORD *)(v37 + 128) = v61;
      *(_OWORD *)(v37 + 80) = v59;
      *(_OWORD *)(v37 + 96) = v60;
      long long v62 = v120;
      long long v63 = v121;
      long long v64 = v122;
      *(void *)(v37 + 192) = v123;
      *(_OWORD *)(v37 + 160) = v63;
      *(_OWORD *)(v37 + 176) = v64;
      *(_OWORD *)(v37 + 144) = v62;
      do
      {
        while (1)
        {
          v36 += 200;
          uint64_t v65 = *(void *)(v36 + 128);
          if (v65 == (void)v106) {
            break;
          }
          if (v65 >= (uint64_t)v106) {
            goto LABEL_63;
          }
        }
        uint64_t v66 = *(void *)(v36 + 136);
        BOOL v68 = __OFSUB__(v66, *((void *)&v106 + 1));
        BOOL v67 = v66 - *((void *)&v106 + 1) < 0;
        if (v66 == *((void *)&v106 + 1))
        {
          uint64_t v69 = *(void *)(v36 + 144);
          BOOL v68 = __OFSUB__(v69, (void)v107);
          BOOL v67 = v69 - (uint64_t)v107 < 0;
          if (v69 == (void)v107)
          {
            uint64_t v70 = *(void *)(v36 + 160);
            BOOL v68 = __OFSUB__(v70, (void)v108);
            BOOL v67 = v70 - (uint64_t)v108 < 0;
            if (v70 == (void)v108)
            {
              uint64_t v71 = *(void *)(v36 + 152);
              BOOL v68 = __OFSUB__(v71, *((void *)&v107 + 1));
              BOOL v67 = v71 - *((void *)&v107 + 1) < 0;
            }
          }
        }
      }
      while (v67 != v68
           || *(_OWORD *)(v36 + 144) == v107
           && *(void *)(v36 + 160) == (void)v108
           && v66 == *((void *)&v106 + 1)
           && sub_100BC6F4C(v36, (uint64_t)&v98));
      do
      {
LABEL_63:
        while (1)
        {
          v37 -= 200;
          uint64_t v72 = *(void *)(v37 + 128);
          if (v72 == (void)v106) {
            break;
          }
          if (v72 < (uint64_t)v106) {
            goto LABEL_73;
          }
        }
        uint64_t v73 = *(void *)(v37 + 136);
        BOOL v75 = __OFSUB__(v73, *((void *)&v106 + 1));
        BOOL v74 = v73 - *((void *)&v106 + 1) < 0;
        if (v73 == *((void *)&v106 + 1))
        {
          uint64_t v76 = *(void *)(v37 + 144);
          BOOL v75 = __OFSUB__(v76, (void)v107);
          BOOL v74 = v76 - (uint64_t)v107 < 0;
          if (v76 == (void)v107)
          {
            uint64_t v77 = *(void *)(v37 + 160);
            BOOL v75 = __OFSUB__(v77, (void)v108);
            BOOL v74 = v77 - (uint64_t)v108 < 0;
            if (v77 == (void)v108)
            {
              uint64_t v78 = *(void *)(v37 + 152);
              BOOL v75 = __OFSUB__(v78, *((void *)&v107 + 1));
              BOOL v74 = v78 - *((void *)&v107 + 1) < 0;
            }
          }
        }
      }
      while (v74 == v75
           && (*(_OWORD *)(v37 + 144) != v107
            || v73 != *((void *)&v106 + 1)
            || *(void *)(v37 + 160) != (void)v108
            || !sub_100BC6F4C(v37, (uint64_t)&v98)));
LABEL_73:
      ;
    }
    while (v36 < v37);
    unint64_t v19 = v36 - 200;
  }
  if ((long long *)v19 != a1)
  {
    *a1 = *(_OWORD *)v19;
    long long v79 = *(_OWORD *)(v19 + 16);
    long long v80 = *(_OWORD *)(v19 + 32);
    long long v81 = *(_OWORD *)(v19 + 64);
    a1[3] = *(_OWORD *)(v19 + 48);
    a1[4] = v81;
    a1[1] = v79;
    a1[2] = v80;
    long long v82 = *(_OWORD *)(v19 + 80);
    long long v83 = *(_OWORD *)(v19 + 96);
    long long v84 = *(_OWORD *)(v19 + 128);
    a1[7] = *(_OWORD *)(v19 + 112);
    a1[8] = v84;
    a1[5] = v82;
    a1[6] = v83;
    long long v85 = *(_OWORD *)(v19 + 144);
    long long v86 = *(_OWORD *)(v19 + 160);
    long long v87 = *(_OWORD *)(v19 + 176);
    *((void *)a1 + 24) = *(void *)(v19 + 192);
    a1[10] = v86;
    a1[11] = v87;
    a1[9] = v85;
  }
  *(_OWORD *)unint64_t v19 = v98;
  long long v88 = v99;
  long long v89 = v100;
  long long v90 = v102;
  *(_OWORD *)(v19 + 48) = v101;
  *(_OWORD *)(v19 + 64) = v90;
  *(_OWORD *)(v19 + 16) = v88;
  *(_OWORD *)(v19 + 32) = v89;
  long long v91 = v103;
  long long v92 = v104;
  long long v93 = v106;
  *(_OWORD *)(v19 + 112) = v105;
  *(_OWORD *)(v19 + 128) = v93;
  *(_OWORD *)(v19 + 80) = v91;
  *(_OWORD *)(v19 + 96) = v92;
  long long v94 = v107;
  long long v95 = v108;
  long long v96 = v109;
  *(void *)(v19 + 192) = v110;
  *(_OWORD *)(v19 + 160) = v95;
  *(_OWORD *)(v19 + 176) = v96;
  *(_OWORD *)(v19 + 144) = v94;
  return v19;
}

BOOL sub_100BC6A10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x8F5C28F5C28F5C29 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      long long v6 = (_OWORD *)(a2 - 200);
      uint64_t v7 = *(void *)(a2 - 72);
      uint64_t v8 = *(void *)(a1 + 128);
      if (v7 != v8)
      {
        if (v7 >= v8) {
          return result;
        }
        goto LABEL_52;
      }
      uint64_t v9 = *(void *)(a2 - 64);
      uint64_t v10 = *(void *)(a1 + 136);
      BOOL v11 = v9 < v10;
      if (v9 == v10)
      {
        uint64_t v12 = *(void *)(a2 - 56);
        uint64_t v13 = *(void *)(a1 + 144);
        BOOL v11 = v12 < v13;
        if (v12 == v13) {
          BOOL v11 = *(_OWORD *)(a2 - 48) < *(_OWORD *)(a1 + 152);
        }
      }
      if (v11) {
        goto LABEL_52;
      }
      if (*(void *)(a2 - 48) == *(void *)(a1 + 152)
        && *(void *)(a2 - 56) == *(void *)(a1 + 144)
        && v9 == v10
        && *(void *)(a2 - 40) == *(void *)(a1 + 160))
      {
        if (!sub_100BC6F4C(a2 - 200, a1)) {
          return 1;
        }
LABEL_52:
        long long v60 = *(_OWORD *)(a1 + 176);
        long long v91 = *(_OWORD *)(a1 + 160);
        long long v92 = v60;
        uint64_t v93 = *(void *)(a1 + 192);
        long long v61 = *(_OWORD *)(a1 + 112);
        long long v87 = *(_OWORD *)(a1 + 96);
        long long v88 = v61;
        long long v62 = *(_OWORD *)(a1 + 144);
        long long v89 = *(_OWORD *)(a1 + 128);
        long long v90 = v62;
        long long v63 = *(_OWORD *)(a1 + 48);
        long long v83 = *(_OWORD *)(a1 + 32);
        long long v84 = v63;
        long long v64 = *(_OWORD *)(a1 + 80);
        long long v85 = *(_OWORD *)(a1 + 64);
        long long v86 = v64;
        long long v65 = *(_OWORD *)(a1 + 16);
        long long v81 = *(_OWORD *)a1;
        long long v82 = v65;
        *(_OWORD *)a1 = *v6;
        long long v66 = *(_OWORD *)(a2 - 184);
        long long v67 = *(_OWORD *)(a2 - 168);
        long long v68 = *(_OWORD *)(a2 - 136);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 - 152);
        *(_OWORD *)(a1 + 64) = v68;
        *(_OWORD *)(a1 + 16) = v66;
        *(_OWORD *)(a1 + 32) = v67;
        long long v69 = *(_OWORD *)(a2 - 120);
        long long v70 = *(_OWORD *)(a2 - 104);
        long long v71 = *(_OWORD *)(a2 - 72);
        *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 - 88);
        *(_OWORD *)(a1 + 128) = v71;
        *(_OWORD *)(a1 + 80) = v69;
        *(_OWORD *)(a1 + 96) = v70;
        long long v72 = *(_OWORD *)(a2 - 56);
        long long v73 = *(_OWORD *)(a2 - 40);
        long long v74 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 192) = *(void *)(a2 - 8);
        *(_OWORD *)(a1 + 160) = v73;
        *(_OWORD *)(a1 + 176) = v74;
        *(_OWORD *)(a1 + 144) = v72;
        long long v75 = v92;
        *(_OWORD *)(a2 - 40) = v91;
        *(_OWORD *)(a2 - 24) = v75;
        *(void *)(a2 - 8) = v93;
        long long v76 = v88;
        *(_OWORD *)(a2 - 104) = v87;
        *(_OWORD *)(a2 - 88) = v76;
        long long v77 = v90;
        *(_OWORD *)(a2 - 72) = v89;
        *(_OWORD *)(a2 - 56) = v77;
        long long v78 = v84;
        *(_OWORD *)(a2 - 168) = v83;
        *(_OWORD *)(a2 - 152) = v78;
        long long v79 = v86;
        *(_OWORD *)(a2 - 136) = v85;
        *(_OWORD *)(a2 - 120) = v79;
        long long v80 = v82;
        BOOL result = 1;
        *long long v6 = v81;
        *(_OWORD *)(a2 - 184) = v80;
      }
      return result;
    case 3uLL:
      sub_100BC5810(a1, a1 + 200, a2 - 200);
      return 1;
    case 4uLL:
      sub_100BC7318(a1, a1 + 200, a1 + 400, a2 - 200);
      return 1;
    case 5uLL:
      sub_100BC7754(a1, a1 + 200, a1 + 400, a1 + 600, a2 - 200);
      return 1;
    default:
      uint64_t v14 = a1 + 400;
      sub_100BC5810(a1, a1 + 200, a1 + 400);
      uint64_t v15 = a1 + 600;
      if (a1 + 600 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
LABEL_16:
  uint64_t v18 = *(void *)(v15 + 128);
  uint64_t v19 = *(void *)(v14 + 128);
  if (v18 == v19)
  {
    uint64_t v20 = *(void *)(v15 + 136);
    uint64_t v21 = *(void *)(v14 + 136);
    BOOL v22 = v20 < v21;
    if (v20 == v21)
    {
      uint64_t v23 = *(void *)(v15 + 144);
      uint64_t v24 = *(void *)(v14 + 144);
      BOOL v22 = v23 < v24;
      if (v23 == v24) {
        BOOL v22 = *(_OWORD *)(v15 + 152) < *(_OWORD *)(v14 + 152);
      }
    }
    if (!v22
      && (*(void *)(v15 + 152) != *(void *)(v14 + 152)
       || *(void *)(v15 + 144) != *(void *)(v14 + 144)
       || v20 != v21
       || *(void *)(v15 + 160) != *(void *)(v14 + 160)
       || !sub_100BC6F4C(v15, v14)))
    {
      goto LABEL_45;
    }
  }
  else if (v18 >= v19)
  {
    goto LABEL_45;
  }
  long long v25 = *(_OWORD *)(v15 + 48);
  long long v83 = *(_OWORD *)(v15 + 32);
  long long v84 = v25;
  long long v26 = *(_OWORD *)(v15 + 112);
  long long v87 = *(_OWORD *)(v15 + 96);
  long long v88 = v26;
  long long v27 = *(_OWORD *)(v15 + 80);
  long long v85 = *(_OWORD *)(v15 + 64);
  long long v86 = v27;
  uint64_t v93 = *(void *)(v15 + 192);
  long long v28 = *(_OWORD *)(v15 + 176);
  long long v91 = *(_OWORD *)(v15 + 160);
  long long v92 = v28;
  long long v29 = *(_OWORD *)(v15 + 144);
  long long v89 = *(_OWORD *)(v15 + 128);
  long long v90 = v29;
  long long v30 = *(_OWORD *)(v15 + 16);
  long long v81 = *(_OWORD *)v15;
  long long v82 = v30;
  long long v31 = *(_OWORD *)(v14 + 176);
  *(_OWORD *)(v15 + 160) = *(_OWORD *)(v14 + 160);
  *(_OWORD *)(v15 + 176) = v31;
  *(void *)(v15 + 192) = *(void *)(v14 + 192);
  long long v32 = *(_OWORD *)(v14 + 112);
  *(_OWORD *)(v15 + 96) = *(_OWORD *)(v14 + 96);
  *(_OWORD *)(v15 + 112) = v32;
  long long v33 = *(_OWORD *)(v14 + 144);
  *(_OWORD *)(v15 + 128) = *(_OWORD *)(v14 + 128);
  *(_OWORD *)(v15 + 144) = v33;
  long long v34 = *(_OWORD *)(v14 + 48);
  *(_OWORD *)(v15 + 32) = *(_OWORD *)(v14 + 32);
  *(_OWORD *)(v15 + 48) = v34;
  long long v35 = *(_OWORD *)(v14 + 80);
  *(_OWORD *)(v15 + 64) = *(_OWORD *)(v14 + 64);
  *(_OWORD *)(v15 + 80) = v35;
  long long v36 = *(_OWORD *)(v14 + 16);
  uint64_t v37 = a1;
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v14;
  *(_OWORD *)(v15 + 16) = v36;
  if (v14 == a1) {
    goto LABEL_44;
  }
  uint64_t v38 = v16;
  while (1)
  {
    uint64_t v39 = a1 + v38;
    long long v40 = (_OWORD *)(a1 + v38 + 200);
    uint64_t v41 = *(void *)(a1 + v38 + 328);
    if ((void)v89 == v41)
    {
      uint64_t v42 = *(void *)(v39 + 336);
      BOOL v43 = *((void *)&v89 + 1) < v42;
      if (*((void *)&v89 + 1) == v42)
      {
        uint64_t v44 = *(void *)(a1 + v38 + 344);
        BOOL v43 = (uint64_t)v90 < v44;
        if ((void)v90 == v44) {
          BOOL v43 = (__int128)__PAIR128__(v91, *((unint64_t *)&v90 + 1)) < *(_OWORD *)(a1 + v38 + 352);
        }
      }
      if (!v43)
      {
        if (v90 != *(_OWORD *)(a1 + v38 + 344)
          || *((void *)&v89 + 1) != v42
          || (void)v91 != *(void *)(a1 + v38 + 360))
        {
LABEL_43:
          uint64_t v37 = v14;
LABEL_44:
          *(_OWORD *)uint64_t v37 = v81;
          long long v51 = v82;
          long long v52 = v83;
          long long v53 = v85;
          *(_OWORD *)(v37 + 48) = v84;
          *(_OWORD *)(v37 + 64) = v53;
          *(_OWORD *)(v37 + 16) = v51;
          *(_OWORD *)(v37 + 32) = v52;
          long long v54 = v86;
          long long v55 = v87;
          long long v56 = v89;
          *(_OWORD *)(v37 + 112) = v88;
          *(_OWORD *)(v37 + 128) = v56;
          *(_OWORD *)(v37 + 80) = v54;
          *(_OWORD *)(v37 + 96) = v55;
          long long v57 = v90;
          long long v58 = v91;
          long long v59 = v92;
          *(void *)(v37 + 192) = v93;
          *(_OWORD *)(v37 + 160) = v58;
          *(_OWORD *)(v37 + 176) = v59;
          *(_OWORD *)(v37 + 144) = v57;
          if (++v17 == 8) {
            return v15 + 200 == a2;
          }
LABEL_45:
          uint64_t v14 = v15;
          v16 += 200;
          v15 += 200;
          if (v15 == a2) {
            return 1;
          }
          goto LABEL_16;
        }
        if (!sub_100BC6F4C((uint64_t)&v81, a1 + v38 + 200))
        {
          uint64_t v37 = a1 + v38 + 400;
          goto LABEL_44;
        }
      }
    }
    else if ((uint64_t)v89 >= v41)
    {
      goto LABEL_43;
    }
    v14 -= 200;
    long long v45 = *(_OWORD *)(a1 + v38 + 376);
    *(_OWORD *)(v39 + 560) = *(_OWORD *)(a1 + v38 + 360);
    *(_OWORD *)(v39 + 576) = v45;
    *(void *)(v39 + 592) = *(void *)(a1 + v38 + 392);
    long long v46 = *(_OWORD *)(a1 + v38 + 312);
    *(_OWORD *)(v39 + 496) = *(_OWORD *)(a1 + v38 + 296);
    *(_OWORD *)(v39 + 512) = v46;
    long long v47 = *(_OWORD *)(a1 + v38 + 344);
    *(_OWORD *)(v39 + 528) = *(_OWORD *)(a1 + v38 + 328);
    *(_OWORD *)(v39 + 544) = v47;
    long long v48 = *(_OWORD *)(a1 + v38 + 248);
    *(_OWORD *)(v39 + 432) = *(_OWORD *)(a1 + v38 + 232);
    *(_OWORD *)(v39 + 448) = v48;
    long long v49 = *(_OWORD *)(a1 + v38 + 280);
    *(_OWORD *)(v39 + 464) = *(_OWORD *)(a1 + v38 + 264);
    *(_OWORD *)(v39 + 480) = v49;
    long long v50 = *(_OWORD *)(a1 + v38 + 216);
    v38 -= 200;
    *(_OWORD *)(v39 + 400) = *v40;
    *(_OWORD *)(v39 + 416) = v50;
    if (v38 == -400)
    {
      uint64_t v37 = a1;
      goto LABEL_44;
    }
  }
}

uint64_t sub_100BC6F4C(uint64_t a1, uint64_t a2)
{
  if (vabdd_f64(*(double *)(a1 + 184), *(double *)(a2 + 184)) < 50.0)
  {
    double v4 = *(double *)(a1 + 176);
    if (v4 == 0.0) {
      sub_101A81134();
    }
    double v5 = *(double *)(a2 + 176);
    if (v5 == 0.0) {
      sub_101A81160();
    }
    double v6 = *(double *)(a1 + 168) / v4;
    double v7 = *(double *)(a2 + 168) / v5;
    if (v6 == v7) {
      goto LABEL_36;
    }
    if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v14 = vabdd_f64(v6, v7);
      double v15 = fabs(v6);
      double v16 = fabs(v7);
      if (v15 < v16) {
        double v15 = v16;
      }
      double v17 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
      if (v14 <= v17)
      {
LABEL_36:
        double v8 = *(double *)a1;
        double v37 = *(double *)(a1 + 8);
        double v38 = v8;
        sub_10075D084(&v38, &v37, 1);
        double v9 = v37;
        double v10 = v38;
        double v11 = *(double *)a2;
        double v37 = *(double *)(a2 + 8);
        double v38 = v11;
        sub_10075D084(&v38, &v37, 1);
        if (v10 == v38) {
          goto LABEL_61;
        }
        if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (*(void *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          double v18 = vabdd_f64(v10, v38);
          double v19 = fabs(v10);
          double v20 = fabs(v38);
          if (v19 >= v20) {
            double v20 = v19;
          }
          double v21 = v20 >= 1.0 ? v20 * 2.22044605e-16 : 2.22044605e-16;
          if (v18 <= v21)
          {
LABEL_61:
            if (v9 == v37) {
              return sub_100BC7210((uint64_t)&unk_102473111, a1, a2);
            }
            if ((*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
              && (*(void *)&v37 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
            {
              double v22 = vabdd_f64(v9, v37);
              double v23 = fabs(v9);
              double v24 = fabs(v37);
              if (v23 >= v24) {
                double v24 = v23;
              }
              double v25 = v24 >= 1.0 ? v24 * 2.22044605e-16 : 2.22044605e-16;
              if (v22 <= v25) {
                return sub_100BC7210((uint64_t)&unk_102473111, a1, a2);
              }
            }
          }
        }
      }
    }
  }
  double v26 = *(double *)(a1 + 184);
  double v27 = *(double *)(a2 + 184);
  if (vabdd_f64(v26, v27) >= 50.0) {
    return v26 < v27;
  }
  double v28 = *(double *)(a1 + 176);
  if (v28 == 0.0) {
    sub_101A81058();
  }
  double v29 = *(double *)(a2 + 176);
  if (v29 == 0.0) {
    sub_101A81084();
  }
  double v30 = *(double *)(a1 + 168) / v28;
  double v31 = *(double *)(a2 + 168) / v29;
  if (v30 == v31)
  {
    BOOL v32 = 0;
  }
  else if ((*(void *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL {
         || (*(void *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  }
  {
    BOOL v32 = 1;
  }
  else
  {
    double v33 = vabdd_f64(v30, v31);
    double v34 = fabs(v30);
    double v35 = fabs(v31);
    if (v34 < v35) {
      double v34 = v35;
    }
    if (v34 >= 1.0) {
      double v36 = v34 * 2.22044605e-16;
    }
    else {
      double v36 = 2.22044605e-16;
    }
    BOOL v32 = v33 > v36;
  }
  return v30 < v31 && v32;
}

uint64_t sub_100BC7210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 56) != *(void *)(a3 + 56))
  {
    uint64_t v7 = *(int *)(a2 + 120);
    double v8 = dword_101D82E74;
    if (v7 <= 5)
    {
      int v6 = dword_101D82E74[v7];
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v3 = *(void *)(a2 + 64);
  uint64_t v4 = *(void *)(a3 + 64);
  if (v3 == v4)
  {
    uint64_t v5 = *(int *)(a2 + 120);
    if (v5 > 5) {
      int v6 = -1;
    }
    else {
      int v6 = dword_101D82E74[v5];
    }
    uint64_t v12 = *(int *)(a3 + 120);
    if (v12 <= 5)
    {
      int v11 = dword_101D82E74[v12];
      return v6 < v11;
    }
    goto LABEL_18;
  }
  if (v3 == -1)
  {
    unsigned int v9 = *(_DWORD *)(a2 + 120);
    if (v9 == 1) {
      return 0;
    }
    if (v9 != 2)
    {
LABEL_10:
      double v8 = dword_101D82E5C;
      if (v9 <= 5)
      {
        int v6 = dword_101D82E5C[v9];
        goto LABEL_13;
      }
LABEL_12:
      int v6 = -1;
LABEL_13:
      uint64_t v10 = *(int *)(a3 + 120);
      if (v10 <= 5)
      {
        int v11 = v8[v10];
        return v6 < v11;
      }
LABEL_18:
      int v11 = -1;
      return v6 < v11;
    }
  }
  else
  {
    if (v4 != -1)
    {
LABEL_9:
      unsigned int v9 = *(_DWORD *)(a2 + 120);
      goto LABEL_10;
    }
    int v14 = *(_DWORD *)(a3 + 120);
    if (v14 != 1)
    {
      if (v14 != 2) {
        goto LABEL_9;
      }
      return 0;
    }
  }
  return 1;
}

__n128 sub_100BC7318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100BC5810(a1, a2, a3);
  uint64_t v9 = *(void *)(a4 + 128);
  uint64_t v10 = *(void *)(a3 + 128);
  if (v9 != v10)
  {
    if (v9 >= v10) {
      return result;
    }
LABEL_13:
    long long v87 = *(_OWORD *)(a3 + 160);
    long long v90 = *(_OWORD *)(a3 + 176);
    uint64_t v93 = *(void *)(a3 + 192);
    long long v75 = *(_OWORD *)(a3 + 96);
    long long v78 = *(_OWORD *)(a3 + 112);
    long long v81 = *(_OWORD *)(a3 + 128);
    long long v84 = *(_OWORD *)(a3 + 144);
    long long v63 = *(_OWORD *)(a3 + 32);
    long long v66 = *(_OWORD *)(a3 + 48);
    long long v69 = *(_OWORD *)(a3 + 64);
    long long v72 = *(_OWORD *)(a3 + 80);
    long long v57 = *(_OWORD *)a3;
    __n128 v60 = *(__n128 *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    long long v16 = *(_OWORD *)(a4 + 16);
    long long v17 = *(_OWORD *)(a4 + 32);
    long long v18 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = v18;
    *(_OWORD *)(a3 + 16) = v16;
    *(_OWORD *)(a3 + 32) = v17;
    long long v19 = *(_OWORD *)(a4 + 80);
    long long v20 = *(_OWORD *)(a4 + 96);
    long long v21 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(a4 + 112);
    *(_OWORD *)(a3 + 128) = v21;
    *(_OWORD *)(a3 + 80) = v19;
    *(_OWORD *)(a3 + 96) = v20;
    long long v22 = *(_OWORD *)(a4 + 144);
    long long v23 = *(_OWORD *)(a4 + 160);
    long long v24 = *(_OWORD *)(a4 + 176);
    *(void *)(a3 + 192) = *(void *)(a4 + 192);
    *(_OWORD *)(a3 + 160) = v23;
    *(_OWORD *)(a3 + 176) = v24;
    *(_OWORD *)(a3 + 144) = v22;
    *(_OWORD *)(a4 + 160) = v87;
    *(_OWORD *)(a4 + 176) = v90;
    *(void *)(a4 + 192) = v93;
    *(_OWORD *)(a4 + 96) = v75;
    *(_OWORD *)(a4 + 112) = v78;
    *(_OWORD *)(a4 + 128) = v81;
    *(_OWORD *)(a4 + 144) = v84;
    *(_OWORD *)(a4 + 32) = v63;
    *(_OWORD *)(a4 + 48) = v66;
    *(_OWORD *)(a4 + 64) = v69;
    *(_OWORD *)(a4 + 80) = v72;
    __n128 result = v60;
    *(_OWORD *)a4 = v57;
    *(__n128 *)(a4 + 16) = v60;
    uint64_t v25 = *(void *)(a3 + 128);
    uint64_t v26 = *(void *)(a2 + 128);
    if (v25 == v26)
    {
      uint64_t v27 = *(void *)(a3 + 136);
      uint64_t v28 = *(void *)(a2 + 136);
      BOOL v29 = v27 < v28;
      if (v27 == v28)
      {
        uint64_t v30 = *(void *)(a3 + 144);
        uint64_t v31 = *(void *)(a2 + 144);
        BOOL v29 = v30 < v31;
        if (v30 == v31) {
          BOOL v29 = *(_OWORD *)(a3 + 152) < *(_OWORD *)(a2 + 152);
        }
      }
      if (!v29
        && (*(void *)(a3 + 152) != *(void *)(a2 + 152)
         || *(void *)(a3 + 144) != *(void *)(a2 + 144)
         || v27 != v28
         || *(void *)(a3 + 160) != *(void *)(a2 + 160)
         || !sub_100BC6F4C(a3, a2)))
      {
        return result;
      }
    }
    else if (v25 >= v26)
    {
      return result;
    }
    long long v88 = *(_OWORD *)(a2 + 160);
    long long v91 = *(_OWORD *)(a2 + 176);
    uint64_t v94 = *(void *)(a2 + 192);
    long long v76 = *(_OWORD *)(a2 + 96);
    long long v79 = *(_OWORD *)(a2 + 112);
    long long v82 = *(_OWORD *)(a2 + 128);
    long long v85 = *(_OWORD *)(a2 + 144);
    long long v64 = *(_OWORD *)(a2 + 32);
    long long v67 = *(_OWORD *)(a2 + 48);
    long long v70 = *(_OWORD *)(a2 + 64);
    long long v73 = *(_OWORD *)(a2 + 80);
    long long v58 = *(_OWORD *)a2;
    __n128 v61 = *(__n128 *)(a2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    long long v32 = *(_OWORD *)(a3 + 16);
    long long v33 = *(_OWORD *)(a3 + 32);
    long long v34 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v34;
    *(_OWORD *)(a2 + 16) = v32;
    *(_OWORD *)(a2 + 32) = v33;
    long long v35 = *(_OWORD *)(a3 + 80);
    long long v36 = *(_OWORD *)(a3 + 96);
    long long v37 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a2 + 128) = v37;
    *(_OWORD *)(a2 + 80) = v35;
    *(_OWORD *)(a2 + 96) = v36;
    long long v38 = *(_OWORD *)(a3 + 144);
    long long v39 = *(_OWORD *)(a3 + 160);
    long long v40 = *(_OWORD *)(a3 + 176);
    *(void *)(a2 + 192) = *(void *)(a3 + 192);
    *(_OWORD *)(a2 + 160) = v39;
    *(_OWORD *)(a2 + 176) = v40;
    *(_OWORD *)(a2 + 144) = v38;
    *(_OWORD *)(a3 + 160) = v88;
    *(_OWORD *)(a3 + 176) = v91;
    *(void *)(a3 + 192) = v94;
    *(_OWORD *)(a3 + 96) = v76;
    *(_OWORD *)(a3 + 112) = v79;
    *(_OWORD *)(a3 + 128) = v82;
    *(_OWORD *)(a3 + 144) = v85;
    *(_OWORD *)(a3 + 32) = v64;
    *(_OWORD *)(a3 + 48) = v67;
    *(_OWORD *)(a3 + 64) = v70;
    *(_OWORD *)(a3 + 80) = v73;
    __n128 result = v61;
    *(_OWORD *)a3 = v58;
    *(__n128 *)(a3 + 16) = v61;
    uint64_t v41 = *(void *)(a2 + 128);
    uint64_t v42 = *(void *)(a1 + 128);
    if (v41 == v42)
    {
      uint64_t v43 = *(void *)(a2 + 136);
      uint64_t v44 = *(void *)(a1 + 136);
      BOOL v45 = v43 < v44;
      if (v43 == v44)
      {
        uint64_t v46 = *(void *)(a2 + 144);
        uint64_t v47 = *(void *)(a1 + 144);
        BOOL v45 = v46 < v47;
        if (v46 == v47) {
          BOOL v45 = *(_OWORD *)(a2 + 152) < *(_OWORD *)(a1 + 152);
        }
      }
      if (!v45
        && (*(void *)(a2 + 152) != *(void *)(a1 + 152)
         || *(void *)(a2 + 144) != *(void *)(a1 + 144)
         || v43 != v44
         || *(void *)(a2 + 160) != *(void *)(a1 + 160)
         || !sub_100BC6F4C(a2, a1)))
      {
        return result;
      }
    }
    else if (v41 >= v42)
    {
      return result;
    }
    long long v89 = *(_OWORD *)(a1 + 160);
    long long v92 = *(_OWORD *)(a1 + 176);
    uint64_t v95 = *(void *)(a1 + 192);
    long long v77 = *(_OWORD *)(a1 + 96);
    long long v80 = *(_OWORD *)(a1 + 112);
    long long v83 = *(_OWORD *)(a1 + 128);
    long long v86 = *(_OWORD *)(a1 + 144);
    long long v65 = *(_OWORD *)(a1 + 32);
    long long v68 = *(_OWORD *)(a1 + 48);
    long long v71 = *(_OWORD *)(a1 + 64);
    long long v74 = *(_OWORD *)(a1 + 80);
    long long v59 = *(_OWORD *)a1;
    __n128 v62 = *(__n128 *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    long long v48 = *(_OWORD *)(a2 + 16);
    long long v49 = *(_OWORD *)(a2 + 32);
    long long v50 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v50;
    *(_OWORD *)(a1 + 16) = v48;
    *(_OWORD *)(a1 + 32) = v49;
    long long v51 = *(_OWORD *)(a2 + 80);
    long long v52 = *(_OWORD *)(a2 + 96);
    long long v53 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v53;
    *(_OWORD *)(a1 + 80) = v51;
    *(_OWORD *)(a1 + 96) = v52;
    long long v54 = *(_OWORD *)(a2 + 144);
    long long v55 = *(_OWORD *)(a2 + 160);
    long long v56 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v55;
    *(_OWORD *)(a1 + 176) = v56;
    *(_OWORD *)(a1 + 144) = v54;
    *(_OWORD *)(a2 + 160) = v89;
    *(_OWORD *)(a2 + 176) = v92;
    *(void *)(a2 + 192) = v95;
    *(_OWORD *)(a2 + 96) = v77;
    *(_OWORD *)(a2 + 112) = v80;
    *(_OWORD *)(a2 + 128) = v83;
    *(_OWORD *)(a2 + 144) = v86;
    *(_OWORD *)(a2 + 32) = v65;
    *(_OWORD *)(a2 + 48) = v68;
    *(_OWORD *)(a2 + 64) = v71;
    *(_OWORD *)(a2 + 80) = v74;
    __n128 result = v62;
    *(_OWORD *)a2 = v59;
    *(__n128 *)(a2 + 16) = v62;
    return result;
  }
  uint64_t v11 = *(void *)(a4 + 136);
  uint64_t v12 = *(void *)(a3 + 136);
  BOOL v13 = v11 < v12;
  if (v11 == v12)
  {
    uint64_t v14 = *(void *)(a4 + 144);
    uint64_t v15 = *(void *)(a3 + 144);
    BOOL v13 = v14 < v15;
    if (v14 == v15) {
      BOOL v13 = *(_OWORD *)(a4 + 152) < *(_OWORD *)(a3 + 152);
    }
  }
  if (v13
    || *(void *)(a4 + 152) == *(void *)(a3 + 152)
    && *(void *)(a4 + 144) == *(void *)(a3 + 144)
    && v11 == v12
    && *(void *)(a4 + 160) == *(void *)(a3 + 160)
    && sub_100BC6F4C(a4, a3))
  {
    goto LABEL_13;
  }
  return result;
}

__n128 sub_100BC7754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = sub_100BC7318(a1, a2, a3, a4).n128_u64[0];
  uint64_t v11 = *(void *)(a5 + 128);
  uint64_t v12 = *(void *)(a4 + 128);
  if (v11 != v12)
  {
    if (v11 >= v12) {
      return result;
    }
LABEL_13:
    long long v115 = *(_OWORD *)(a4 + 160);
    long long v119 = *(_OWORD *)(a4 + 176);
    uint64_t v123 = *(void *)(a4 + 192);
    long long v99 = *(_OWORD *)(a4 + 96);
    long long v103 = *(_OWORD *)(a4 + 112);
    long long v107 = *(_OWORD *)(a4 + 128);
    long long v111 = *(_OWORD *)(a4 + 144);
    long long v83 = *(_OWORD *)(a4 + 32);
    long long v87 = *(_OWORD *)(a4 + 48);
    long long v91 = *(_OWORD *)(a4 + 64);
    long long v95 = *(_OWORD *)(a4 + 80);
    long long v75 = *(_OWORD *)a4;
    __n128 v79 = *(__n128 *)(a4 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    long long v18 = *(_OWORD *)(a5 + 16);
    long long v19 = *(_OWORD *)(a5 + 32);
    long long v20 = *(_OWORD *)(a5 + 64);
    *(_OWORD *)(a4 + 48) = *(_OWORD *)(a5 + 48);
    *(_OWORD *)(a4 + 64) = v20;
    *(_OWORD *)(a4 + 16) = v18;
    *(_OWORD *)(a4 + 32) = v19;
    long long v21 = *(_OWORD *)(a5 + 80);
    long long v22 = *(_OWORD *)(a5 + 96);
    long long v23 = *(_OWORD *)(a5 + 128);
    *(_OWORD *)(a4 + 112) = *(_OWORD *)(a5 + 112);
    *(_OWORD *)(a4 + 128) = v23;
    *(_OWORD *)(a4 + 80) = v21;
    *(_OWORD *)(a4 + 96) = v22;
    long long v24 = *(_OWORD *)(a5 + 144);
    long long v25 = *(_OWORD *)(a5 + 160);
    long long v26 = *(_OWORD *)(a5 + 176);
    *(void *)(a4 + 192) = *(void *)(a5 + 192);
    *(_OWORD *)(a4 + 160) = v25;
    *(_OWORD *)(a4 + 176) = v26;
    *(_OWORD *)(a4 + 144) = v24;
    *(_OWORD *)(a5 + 160) = v115;
    *(_OWORD *)(a5 + 176) = v119;
    *(void *)(a5 + 192) = v123;
    *(_OWORD *)(a5 + 96) = v99;
    *(_OWORD *)(a5 + 112) = v103;
    *(_OWORD *)(a5 + 128) = v107;
    *(_OWORD *)(a5 + 144) = v111;
    *(_OWORD *)(a5 + 32) = v83;
    *(_OWORD *)(a5 + 48) = v87;
    *(_OWORD *)(a5 + 64) = v91;
    *(_OWORD *)(a5 + 80) = v95;
    __n128 result = v79;
    *(_OWORD *)a5 = v75;
    *(__n128 *)(a5 + 16) = v79;
    uint64_t v27 = *(void *)(a4 + 128);
    uint64_t v28 = *(void *)(a3 + 128);
    if (v27 == v28)
    {
      uint64_t v29 = *(void *)(a4 + 136);
      uint64_t v30 = *(void *)(a3 + 136);
      BOOL v31 = v29 < v30;
      if (v29 == v30)
      {
        uint64_t v32 = *(void *)(a4 + 144);
        uint64_t v33 = *(void *)(a3 + 144);
        BOOL v31 = v32 < v33;
        if (v32 == v33) {
          BOOL v31 = *(_OWORD *)(a4 + 152) < *(_OWORD *)(a3 + 152);
        }
      }
      if (!v31
        && (*(void *)(a4 + 152) != *(void *)(a3 + 152)
         || *(void *)(a4 + 144) != *(void *)(a3 + 144)
         || v29 != v30
         || *(void *)(a4 + 160) != *(void *)(a3 + 160)
         || !sub_100BC6F4C(a4, a3)))
      {
        return result;
      }
    }
    else if (v27 >= v28)
    {
      return result;
    }
    long long v116 = *(_OWORD *)(a3 + 160);
    long long v120 = *(_OWORD *)(a3 + 176);
    uint64_t v124 = *(void *)(a3 + 192);
    long long v100 = *(_OWORD *)(a3 + 96);
    long long v104 = *(_OWORD *)(a3 + 112);
    long long v108 = *(_OWORD *)(a3 + 128);
    long long v112 = *(_OWORD *)(a3 + 144);
    long long v84 = *(_OWORD *)(a3 + 32);
    long long v88 = *(_OWORD *)(a3 + 48);
    long long v92 = *(_OWORD *)(a3 + 64);
    long long v96 = *(_OWORD *)(a3 + 80);
    long long v76 = *(_OWORD *)a3;
    __n128 v80 = *(__n128 *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    long long v34 = *(_OWORD *)(a4 + 16);
    long long v35 = *(_OWORD *)(a4 + 32);
    long long v36 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = v36;
    *(_OWORD *)(a3 + 16) = v34;
    *(_OWORD *)(a3 + 32) = v35;
    long long v37 = *(_OWORD *)(a4 + 80);
    long long v38 = *(_OWORD *)(a4 + 96);
    long long v39 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(a4 + 112);
    *(_OWORD *)(a3 + 128) = v39;
    *(_OWORD *)(a3 + 80) = v37;
    *(_OWORD *)(a3 + 96) = v38;
    long long v40 = *(_OWORD *)(a4 + 144);
    long long v41 = *(_OWORD *)(a4 + 160);
    long long v42 = *(_OWORD *)(a4 + 176);
    *(void *)(a3 + 192) = *(void *)(a4 + 192);
    *(_OWORD *)(a3 + 160) = v41;
    *(_OWORD *)(a3 + 176) = v42;
    *(_OWORD *)(a3 + 144) = v40;
    *(_OWORD *)(a4 + 160) = v116;
    *(_OWORD *)(a4 + 176) = v120;
    *(void *)(a4 + 192) = v124;
    *(_OWORD *)(a4 + 96) = v100;
    *(_OWORD *)(a4 + 112) = v104;
    *(_OWORD *)(a4 + 128) = v108;
    *(_OWORD *)(a4 + 144) = v112;
    *(_OWORD *)(a4 + 32) = v84;
    *(_OWORD *)(a4 + 48) = v88;
    *(_OWORD *)(a4 + 64) = v92;
    *(_OWORD *)(a4 + 80) = v96;
    __n128 result = v80;
    *(_OWORD *)a4 = v76;
    *(__n128 *)(a4 + 16) = v80;
    uint64_t v43 = *(void *)(a3 + 128);
    uint64_t v44 = *(void *)(a2 + 128);
    if (v43 == v44)
    {
      uint64_t v45 = *(void *)(a3 + 136);
      uint64_t v46 = *(void *)(a2 + 136);
      BOOL v47 = v45 < v46;
      if (v45 == v46)
      {
        uint64_t v48 = *(void *)(a3 + 144);
        uint64_t v49 = *(void *)(a2 + 144);
        BOOL v47 = v48 < v49;
        if (v48 == v49) {
          BOOL v47 = *(_OWORD *)(a3 + 152) < *(_OWORD *)(a2 + 152);
        }
      }
      if (!v47
        && (*(void *)(a3 + 152) != *(void *)(a2 + 152)
         || *(void *)(a3 + 144) != *(void *)(a2 + 144)
         || v45 != v46
         || *(void *)(a3 + 160) != *(void *)(a2 + 160)
         || !sub_100BC6F4C(a3, a2)))
      {
        return result;
      }
    }
    else if (v43 >= v44)
    {
      return result;
    }
    long long v117 = *(_OWORD *)(a2 + 160);
    long long v121 = *(_OWORD *)(a2 + 176);
    uint64_t v125 = *(void *)(a2 + 192);
    long long v101 = *(_OWORD *)(a2 + 96);
    long long v105 = *(_OWORD *)(a2 + 112);
    long long v109 = *(_OWORD *)(a2 + 128);
    long long v113 = *(_OWORD *)(a2 + 144);
    long long v85 = *(_OWORD *)(a2 + 32);
    long long v89 = *(_OWORD *)(a2 + 48);
    long long v93 = *(_OWORD *)(a2 + 64);
    long long v97 = *(_OWORD *)(a2 + 80);
    long long v77 = *(_OWORD *)a2;
    __n128 v81 = *(__n128 *)(a2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    long long v50 = *(_OWORD *)(a3 + 16);
    long long v51 = *(_OWORD *)(a3 + 32);
    long long v52 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v52;
    *(_OWORD *)(a2 + 16) = v50;
    *(_OWORD *)(a2 + 32) = v51;
    long long v53 = *(_OWORD *)(a3 + 80);
    long long v54 = *(_OWORD *)(a3 + 96);
    long long v55 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a2 + 128) = v55;
    *(_OWORD *)(a2 + 80) = v53;
    *(_OWORD *)(a2 + 96) = v54;
    long long v56 = *(_OWORD *)(a3 + 144);
    long long v57 = *(_OWORD *)(a3 + 160);
    long long v58 = *(_OWORD *)(a3 + 176);
    *(void *)(a2 + 192) = *(void *)(a3 + 192);
    *(_OWORD *)(a2 + 160) = v57;
    *(_OWORD *)(a2 + 176) = v58;
    *(_OWORD *)(a2 + 144) = v56;
    *(_OWORD *)(a3 + 160) = v117;
    *(_OWORD *)(a3 + 176) = v121;
    *(void *)(a3 + 192) = v125;
    *(_OWORD *)(a3 + 96) = v101;
    *(_OWORD *)(a3 + 112) = v105;
    *(_OWORD *)(a3 + 128) = v109;
    *(_OWORD *)(a3 + 144) = v113;
    *(_OWORD *)(a3 + 32) = v85;
    *(_OWORD *)(a3 + 48) = v89;
    *(_OWORD *)(a3 + 64) = v93;
    *(_OWORD *)(a3 + 80) = v97;
    __n128 result = v81;
    *(_OWORD *)a3 = v77;
    *(__n128 *)(a3 + 16) = v81;
    uint64_t v59 = *(void *)(a2 + 128);
    uint64_t v60 = *(void *)(a1 + 128);
    if (v59 == v60)
    {
      uint64_t v61 = *(void *)(a2 + 136);
      uint64_t v62 = *(void *)(a1 + 136);
      BOOL v63 = v61 < v62;
      if (v61 == v62)
      {
        uint64_t v64 = *(void *)(a2 + 144);
        uint64_t v65 = *(void *)(a1 + 144);
        BOOL v63 = v64 < v65;
        if (v64 == v65) {
          BOOL v63 = *(_OWORD *)(a2 + 152) < *(_OWORD *)(a1 + 152);
        }
      }
      if (!v63
        && (*(void *)(a2 + 152) != *(void *)(a1 + 152)
         || *(void *)(a2 + 144) != *(void *)(a1 + 144)
         || v61 != v62
         || *(void *)(a2 + 160) != *(void *)(a1 + 160)
         || !sub_100BC6F4C(a2, a1)))
      {
        return result;
      }
    }
    else if (v59 >= v60)
    {
      return result;
    }
    long long v118 = *(_OWORD *)(a1 + 160);
    long long v122 = *(_OWORD *)(a1 + 176);
    uint64_t v126 = *(void *)(a1 + 192);
    long long v102 = *(_OWORD *)(a1 + 96);
    long long v106 = *(_OWORD *)(a1 + 112);
    long long v110 = *(_OWORD *)(a1 + 128);
    long long v114 = *(_OWORD *)(a1 + 144);
    long long v86 = *(_OWORD *)(a1 + 32);
    long long v90 = *(_OWORD *)(a1 + 48);
    long long v94 = *(_OWORD *)(a1 + 64);
    long long v98 = *(_OWORD *)(a1 + 80);
    long long v78 = *(_OWORD *)a1;
    __n128 v82 = *(__n128 *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    long long v66 = *(_OWORD *)(a2 + 16);
    long long v67 = *(_OWORD *)(a2 + 32);
    long long v68 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v68;
    *(_OWORD *)(a1 + 16) = v66;
    *(_OWORD *)(a1 + 32) = v67;
    long long v69 = *(_OWORD *)(a2 + 80);
    long long v70 = *(_OWORD *)(a2 + 96);
    long long v71 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v71;
    *(_OWORD *)(a1 + 80) = v69;
    *(_OWORD *)(a1 + 96) = v70;
    long long v72 = *(_OWORD *)(a2 + 144);
    long long v73 = *(_OWORD *)(a2 + 160);
    long long v74 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v73;
    *(_OWORD *)(a1 + 176) = v74;
    *(_OWORD *)(a1 + 144) = v72;
    *(_OWORD *)(a2 + 160) = v118;
    *(_OWORD *)(a2 + 176) = v122;
    *(void *)(a2 + 192) = v126;
    *(_OWORD *)(a2 + 96) = v102;
    *(_OWORD *)(a2 + 112) = v106;
    *(_OWORD *)(a2 + 128) = v110;
    *(_OWORD *)(a2 + 144) = v114;
    *(_OWORD *)(a2 + 32) = v86;
    *(_OWORD *)(a2 + 48) = v90;
    *(_OWORD *)(a2 + 64) = v94;
    *(_OWORD *)(a2 + 80) = v98;
    __n128 result = v82;
    *(_OWORD *)a2 = v78;
    *(__n128 *)(a2 + 16) = v82;
    return result;
  }
  uint64_t v13 = *(void *)(a5 + 136);
  uint64_t v14 = *(void *)(a4 + 136);
  BOOL v15 = v13 < v14;
  if (v13 == v14)
  {
    uint64_t v16 = *(void *)(a5 + 144);
    uint64_t v17 = *(void *)(a4 + 144);
    BOOL v15 = v16 < v17;
    if (v16 == v17) {
      BOOL v15 = *(_OWORD *)(a5 + 152) < *(_OWORD *)(a4 + 152);
    }
  }
  if (v15
    || *(void *)(a5 + 152) == *(void *)(a4 + 152)
    && *(void *)(a5 + 144) == *(void *)(a4 + 144)
    && v13 == v14
    && *(void *)(a5 + 160) == *(void *)(a4 + 160)
    && sub_100BC6F4C(a5, a4))
  {
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_100BC7CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 200;
    if (a2 - a1 >= 201)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 200 * v10;
      do
      {
        sub_100BC8098(a1, a4, v9, v12);
        v12 -= 200;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      while (1)
      {
        uint64_t v15 = *(void *)(v14 + 128);
        uint64_t v16 = *(void *)(a1 + 128);
        if (v15 == v16) {
          break;
        }
        if (v15 < v16) {
          goto LABEL_19;
        }
LABEL_20:
        v14 += 200;
        if (v14 == a3)
        {
          uint64_t v13 = a3;
          goto LABEL_22;
        }
      }
      uint64_t v17 = *(void *)(v14 + 136);
      uint64_t v18 = *(void *)(a1 + 136);
      BOOL v19 = v17 < v18;
      if (v17 == v18)
      {
        uint64_t v20 = *(void *)(v14 + 144);
        uint64_t v21 = *(void *)(a1 + 144);
        BOOL v19 = v20 < v21;
        if (v20 == v21) {
          BOOL v19 = *(_OWORD *)(v14 + 152) < *(_OWORD *)(a1 + 152);
        }
      }
      if (!v19
        && (*(void *)(v14 + 152) != *(void *)(a1 + 152)
         || *(void *)(v14 + 144) != *(void *)(a1 + 144)
         || v17 != v18
         || *(void *)(v14 + 160) != *(void *)(a1 + 160)
         || !sub_100BC6F4C(v14, a1)))
      {
        goto LABEL_20;
      }
LABEL_19:
      long long v64 = *(_OWORD *)(v14 + 160);
      long long v66 = *(_OWORD *)(v14 + 176);
      uint64_t v68 = *(void *)(v14 + 192);
      long long v56 = *(_OWORD *)(v14 + 96);
      long long v58 = *(_OWORD *)(v14 + 112);
      long long v60 = *(_OWORD *)(v14 + 128);
      long long v62 = *(_OWORD *)(v14 + 144);
      long long v48 = *(_OWORD *)(v14 + 32);
      long long v50 = *(_OWORD *)(v14 + 48);
      long long v52 = *(_OWORD *)(v14 + 64);
      long long v54 = *(_OWORD *)(v14 + 80);
      long long v44 = *(_OWORD *)v14;
      long long v46 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
      long long v22 = *(_OWORD *)(a1 + 16);
      long long v23 = *(_OWORD *)(a1 + 32);
      long long v24 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(v14 + 48) = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(v14 + 64) = v24;
      *(_OWORD *)(v14 + 16) = v22;
      *(_OWORD *)(v14 + 32) = v23;
      long long v25 = *(_OWORD *)(a1 + 80);
      long long v26 = *(_OWORD *)(a1 + 96);
      long long v27 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(v14 + 112) = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(v14 + 128) = v27;
      *(_OWORD *)(v14 + 80) = v25;
      *(_OWORD *)(v14 + 96) = v26;
      long long v28 = *(_OWORD *)(a1 + 144);
      long long v29 = *(_OWORD *)(a1 + 160);
      long long v30 = *(_OWORD *)(a1 + 176);
      *(void *)(v14 + 192) = *(void *)(a1 + 192);
      *(_OWORD *)(v14 + 160) = v29;
      *(_OWORD *)(v14 + 176) = v30;
      *(_OWORD *)(v14 + 144) = v28;
      *(_OWORD *)(a1 + 160) = v64;
      *(_OWORD *)(a1 + 176) = v66;
      *(void *)(a1 + 192) = v68;
      *(_OWORD *)(a1 + 96) = v56;
      *(_OWORD *)(a1 + 112) = v58;
      *(_OWORD *)(a1 + 128) = v60;
      *(_OWORD *)(a1 + 144) = v62;
      *(_OWORD *)(a1 + 32) = v48;
      *(_OWORD *)(a1 + 48) = v50;
      *(_OWORD *)(a1 + 64) = v52;
      *(_OWORD *)(a1 + 80) = v54;
      *(_OWORD *)a1 = v44;
      *(_OWORD *)(a1 + 16) = v46;
      sub_100BC8098(a1, a4, v9, a1);
      goto LABEL_20;
    }
LABEL_22:
    if (v8 >= 201)
    {
      int64_t v31 = v8 / 0xC8uLL;
      uint64_t v32 = a2 - 200;
      do
      {
        long long v65 = *(_OWORD *)(a1 + 160);
        long long v67 = *(_OWORD *)(a1 + 176);
        uint64_t v69 = *(void *)(a1 + 192);
        long long v57 = *(_OWORD *)(a1 + 96);
        long long v59 = *(_OWORD *)(a1 + 112);
        long long v61 = *(_OWORD *)(a1 + 128);
        long long v63 = *(_OWORD *)(a1 + 144);
        long long v49 = *(_OWORD *)(a1 + 32);
        long long v51 = *(_OWORD *)(a1 + 48);
        long long v53 = *(_OWORD *)(a1 + 64);
        long long v55 = *(_OWORD *)(a1 + 80);
        long long v45 = *(_OWORD *)a1;
        long long v47 = *(_OWORD *)(a1 + 16);
        uint64_t v33 = sub_100BC855C(a1, a4, v31);
        if (v32 == v33)
        {
          *(_OWORD *)(v33 + 160) = v65;
          *(_OWORD *)(v33 + 176) = v67;
          *(void *)(v33 + 192) = v69;
          *(_OWORD *)(v33 + 96) = v57;
          *(_OWORD *)(v33 + 112) = v59;
          *(_OWORD *)(v33 + 128) = v61;
          *(_OWORD *)(v33 + 144) = v63;
          *(_OWORD *)(v33 + 32) = v49;
          *(_OWORD *)(v33 + 48) = v51;
          *(_OWORD *)(v33 + 64) = v53;
          *(_OWORD *)(v33 + 80) = v55;
          *(_OWORD *)uint64_t v33 = v45;
          *(_OWORD *)(v33 + 16) = v47;
        }
        else
        {
          *(_OWORD *)uint64_t v33 = *(_OWORD *)v32;
          long long v34 = *(_OWORD *)(v32 + 16);
          long long v35 = *(_OWORD *)(v32 + 32);
          long long v36 = *(_OWORD *)(v32 + 64);
          *(_OWORD *)(v33 + 48) = *(_OWORD *)(v32 + 48);
          *(_OWORD *)(v33 + 64) = v36;
          *(_OWORD *)(v33 + 16) = v34;
          *(_OWORD *)(v33 + 32) = v35;
          long long v37 = *(_OWORD *)(v32 + 80);
          long long v38 = *(_OWORD *)(v32 + 96);
          long long v39 = *(_OWORD *)(v32 + 128);
          *(_OWORD *)(v33 + 112) = *(_OWORD *)(v32 + 112);
          *(_OWORD *)(v33 + 128) = v39;
          *(_OWORD *)(v33 + 80) = v37;
          *(_OWORD *)(v33 + 96) = v38;
          long long v40 = *(_OWORD *)(v32 + 144);
          long long v41 = *(_OWORD *)(v32 + 160);
          long long v42 = *(_OWORD *)(v32 + 176);
          *(void *)(v33 + 192) = *(void *)(v32 + 192);
          *(_OWORD *)(v33 + 160) = v41;
          *(_OWORD *)(v33 + 176) = v42;
          *(_OWORD *)(v33 + 144) = v40;
          *(_OWORD *)(v32 + 160) = v65;
          *(_OWORD *)(v32 + 176) = v67;
          *(void *)(v32 + 192) = v69;
          *(_OWORD *)(v32 + 96) = v57;
          *(_OWORD *)(v32 + 112) = v59;
          *(_OWORD *)(v32 + 128) = v61;
          *(_OWORD *)(v32 + 144) = v63;
          *(_OWORD *)(v32 + 32) = v49;
          *(_OWORD *)(v32 + 48) = v51;
          *(_OWORD *)(v32 + 64) = v53;
          *(_OWORD *)(v32 + 80) = v55;
          *(_OWORD *)uint64_t v32 = v45;
          *(_OWORD *)(v32 + 16) = v47;
          sub_100BC86EC(a1, v33 + 200, a4, 0x8F5C28F5C28F5C29 * ((v33 + 200 - a1) >> 3));
        }
        v32 -= 200;
        BOOL v19 = v31-- <= 2;
      }
      while (!v19);
    }
    return v13;
  }
  return a3;
}

__n128 sub_100BC8098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 < 2) {
    return result;
  }
  uint64_t v92 = v4;
  uint64_t v93 = v5;
  uint64_t v9 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) < (uint64_t)(0x8F5C28F5C28F5C29 * ((a4 - a1) >> 3))) {
    return result;
  }
  uint64_t v11 = (0x1EB851EB851EB852 * ((a4 - a1) >> 3)) | 1;
  uint64_t v12 = a1 + 200 * v11;
  uint64_t v13 = 0x1EB851EB851EB852 * ((a4 - a1) >> 3) + 2;
  if (v13 >= a3) {
    goto LABEL_20;
  }
  uint64_t v14 = *(void *)(a1 + 200 * v11 + 128);
  uint64_t v15 = *(void *)(v12 + 328);
  if (v14 == v15)
  {
    uint64_t v16 = *(void *)(a1 + 200 * v11 + 136);
    uint64_t v17 = *(void *)(v12 + 336);
    BOOL v18 = v16 < v17;
    if (v16 == v17)
    {
      uint64_t v19 = *(void *)(a1 + 200 * v11 + 144);
      uint64_t v20 = *(void *)(v12 + 344);
      BOOL v18 = v19 < v20;
      if (v19 == v20) {
        BOOL v18 = *(_OWORD *)(a1 + 200 * v11 + 152) < *(_OWORD *)(v12 + 352);
      }
    }
    if (!v18)
    {
      if (*(void *)(a1 + 200 * v11 + 152) != *(void *)(v12 + 352)
        || *(void *)(a1 + 200 * v11 + 144) != *(void *)(v12 + 344))
      {
        goto LABEL_20;
      }
      BOOL v21 = v16 == v17 && *(void *)(a1 + 200 * v11 + 160) == *(void *)(v12 + 360);
      if (!v21 || !sub_100BC6F4C(a1 + 200 * v11, v12 + 200)) {
        goto LABEL_20;
      }
    }
    goto LABEL_19;
  }
  if (v14 < v15)
  {
LABEL_19:
    v12 += 200;
    uint64_t v11 = v13;
  }
LABEL_20:
  uint64_t v23 = *(void *)(v12 + 128);
  uint64_t v24 = *(void *)(a4 + 128);
  if (v23 == v24)
  {
    uint64_t v25 = *(void *)(v12 + 136);
    uint64_t v26 = *(void *)(a4 + 136);
    BOOL v27 = v25 < v26;
    if (v25 == v26)
    {
      uint64_t v28 = *(void *)(v12 + 144);
      uint64_t v29 = *(void *)(a4 + 144);
      BOOL v27 = v28 < v29;
      if (v28 == v29) {
        BOOL v27 = *(_OWORD *)(v12 + 152) < *(_OWORD *)(a4 + 152);
      }
    }
    if (v27) {
      return result;
    }
    if (*(void *)(v12 + 152) == *(void *)(a4 + 152) && *(void *)(v12 + 144) == *(void *)(a4 + 144))
    {
      BOOL v30 = v25 == v26 && *(void *)(v12 + 160) == *(void *)(a4 + 160);
      if (v30 && (sub_100BC6F4C(v12, a4) & 1) != 0) {
        return result;
      }
    }
  }
  else if (v23 < v24)
  {
    return result;
  }
  long long v31 = *(_OWORD *)(a4 + 176);
  long long v89 = *(_OWORD *)(a4 + 160);
  long long v90 = v31;
  uint64_t v91 = *(void *)(a4 + 192);
  long long v32 = *(_OWORD *)(a4 + 112);
  long long v85 = *(_OWORD *)(a4 + 96);
  long long v86 = v32;
  __n128 v33 = *(__n128 *)(a4 + 144);
  long long v87 = *(_OWORD *)(a4 + 128);
  __n128 v88 = v33;
  long long v34 = *(_OWORD *)(a4 + 48);
  long long v81 = *(_OWORD *)(a4 + 32);
  long long v82 = v34;
  long long v35 = *(_OWORD *)(a4 + 80);
  long long v83 = *(_OWORD *)(a4 + 64);
  long long v84 = v35;
  long long v36 = *(_OWORD *)(a4 + 16);
  long long v79 = *(_OWORD *)a4;
  long long v80 = v36;
  *(_OWORD *)a4 = *(_OWORD *)v12;
  long long v37 = *(_OWORD *)(v12 + 16);
  long long v38 = *(_OWORD *)(v12 + 32);
  long long v39 = *(_OWORD *)(v12 + 64);
  *(_OWORD *)(a4 + 48) = *(_OWORD *)(v12 + 48);
  *(_OWORD *)(a4 + 64) = v39;
  *(_OWORD *)(a4 + 16) = v37;
  *(_OWORD *)(a4 + 32) = v38;
  long long v40 = *(_OWORD *)(v12 + 80);
  long long v41 = *(_OWORD *)(v12 + 96);
  long long v42 = *(_OWORD *)(v12 + 128);
  *(_OWORD *)(a4 + 112) = *(_OWORD *)(v12 + 112);
  *(_OWORD *)(a4 + 128) = v42;
  *(_OWORD *)(a4 + 80) = v40;
  *(_OWORD *)(a4 + 96) = v41;
  long long v43 = *(_OWORD *)(v12 + 144);
  long long v44 = *(_OWORD *)(v12 + 160);
  long long v45 = *(_OWORD *)(v12 + 176);
  *(void *)(a4 + 192) = *(void *)(v12 + 192);
  *(_OWORD *)(a4 + 160) = v44;
  *(_OWORD *)(a4 + 176) = v45;
  *(_OWORD *)(a4 + 144) = v43;
  if (v9 < v11) {
    goto LABEL_70;
  }
  while (1)
  {
    uint64_t v46 = v12;
    uint64_t v47 = 2 * v11;
    uint64_t v11 = (2 * v11) | 1;
    uint64_t v12 = a1 + 200 * v11;
    uint64_t v48 = v47 + 2;
    if (v47 + 2 >= a3) {
      goto LABEL_53;
    }
    uint64_t v49 = *(void *)(a1 + 200 * v11 + 128);
    uint64_t v50 = *(void *)(v12 + 328);
    if (v49 != v50)
    {
      if (v49 >= v50) {
        goto LABEL_53;
      }
LABEL_52:
      v12 += 200;
      uint64_t v11 = v48;
      goto LABEL_53;
    }
    uint64_t v51 = *(void *)(a1 + 200 * v11 + 136);
    uint64_t v52 = *(void *)(v12 + 336);
    BOOL v53 = v51 < v52;
    if (v51 == v52)
    {
      uint64_t v54 = *(void *)(a1 + 200 * v11 + 144);
      uint64_t v55 = *(void *)(v12 + 344);
      BOOL v53 = v54 < v55;
      if (v54 == v55) {
        BOOL v53 = *(_OWORD *)(a1 + 200 * v11 + 152) < *(_OWORD *)(v12 + 352);
      }
    }
    if (v53) {
      goto LABEL_52;
    }
    if (*(void *)(a1 + 200 * v11 + 152) == *(void *)(v12 + 352)
      && *(void *)(a1 + 200 * v11 + 144) == *(void *)(v12 + 344))
    {
      BOOL v56 = v51 == v52 && *(void *)(a1 + 200 * v11 + 160) == *(void *)(v12 + 360);
      if (v56 && sub_100BC6F4C(a1 + 200 * v11, v12 + 200)) {
        goto LABEL_52;
      }
    }
LABEL_53:
    uint64_t v57 = *(void *)(v12 + 128);
    if (v57 == (void)v87) {
      break;
    }
    if (v57 < (uint64_t)v87) {
      goto LABEL_69;
    }
LABEL_67:
    *(_OWORD *)uint64_t v46 = *(_OWORD *)v12;
    long long v62 = *(_OWORD *)(v12 + 16);
    long long v63 = *(_OWORD *)(v12 + 32);
    long long v64 = *(_OWORD *)(v12 + 64);
    *(_OWORD *)(v46 + 48) = *(_OWORD *)(v12 + 48);
    *(_OWORD *)(v46 + 64) = v64;
    *(_OWORD *)(v46 + 16) = v62;
    *(_OWORD *)(v46 + 32) = v63;
    long long v65 = *(_OWORD *)(v12 + 80);
    long long v66 = *(_OWORD *)(v12 + 96);
    long long v67 = *(_OWORD *)(v12 + 128);
    *(_OWORD *)(v46 + 112) = *(_OWORD *)(v12 + 112);
    *(_OWORD *)(v46 + 128) = v67;
    *(_OWORD *)(v46 + 80) = v65;
    *(_OWORD *)(v46 + 96) = v66;
    long long v68 = *(_OWORD *)(v12 + 144);
    long long v69 = *(_OWORD *)(v12 + 160);
    long long v70 = *(_OWORD *)(v12 + 176);
    *(void *)(v46 + 192) = *(void *)(v12 + 192);
    *(_OWORD *)(v46 + 160) = v69;
    *(_OWORD *)(v46 + 176) = v70;
    *(_OWORD *)(v46 + 144) = v68;
    if (v9 < v11) {
      goto LABEL_70;
    }
  }
  uint64_t v58 = *(void *)(v12 + 136);
  BOOL v59 = v58 < *((void *)&v87 + 1);
  if (v58 == *((void *)&v87 + 1))
  {
    uint64_t v60 = *(void *)(v12 + 144);
    BOOL v59 = v60 < (int64_t)v88.n128_u64[0];
    if (v60 == v88.n128_u64[0]) {
      BOOL v59 = *(_OWORD *)(v12 + 152) < (__int128)__PAIR128__(v89, v88.n128_u64[1]);
    }
  }
  if (!v59)
  {
    if (*(_OWORD *)(v12 + 144) != *(_OWORD *)&v88) {
      goto LABEL_67;
    }
    BOOL v61 = v58 == *((void *)&v87 + 1) && *(void *)(v12 + 160) == (void)v89;
    if (!v61 || (sub_100BC6F4C(v12, (uint64_t)&v79) & 1) == 0) {
      goto LABEL_67;
    }
  }
LABEL_69:
  uint64_t v12 = v46;
LABEL_70:
  *(_OWORD *)uint64_t v12 = v79;
  long long v71 = v80;
  long long v72 = v81;
  long long v73 = v83;
  *(_OWORD *)(v12 + 48) = v82;
  *(_OWORD *)(v12 + 64) = v73;
  *(_OWORD *)(v12 + 16) = v71;
  *(_OWORD *)(v12 + 32) = v72;
  long long v74 = v84;
  long long v75 = v85;
  long long v76 = v87;
  *(_OWORD *)(v12 + 112) = v86;
  *(_OWORD *)(v12 + 128) = v76;
  *(_OWORD *)(v12 + 80) = v74;
  *(_OWORD *)(v12 + 96) = v75;
  __n128 result = v88;
  long long v77 = v89;
  long long v78 = v90;
  *(void *)(v12 + 192) = v91;
  *(_OWORD *)(v12 + 160) = v77;
  *(_OWORD *)(v12 + 176) = v78;
  *(__n128 *)(v12 + 144) = result;
  return result;
}

uint64_t sub_100BC855C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = a1;
    uint64_t v9 = v5 + 1;
    a1 += 200 * (v5 + 1);
    uint64_t v10 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 >= a3) {
      goto LABEL_21;
    }
    uint64_t v12 = *(void *)(v8 + 200 * v9 + 128);
    uint64_t v13 = *(void *)(a1 + 328);
    if (v12 != v13)
    {
      if (v12 >= v13) {
        goto LABEL_21;
      }
LABEL_20:
      a1 += 200;
      uint64_t v5 = v11;
      goto LABEL_21;
    }
    uint64_t v14 = *(void *)(v8 + 200 * v9 + 136);
    uint64_t v15 = *(void *)(a1 + 336);
    BOOL v16 = v14 < v15;
    if (v14 == v15)
    {
      uint64_t v17 = *(void *)(v8 + 200 * v9 + 144);
      uint64_t v18 = *(void *)(a1 + 344);
      BOOL v16 = v17 < v18;
      if (v17 == v18) {
        BOOL v16 = *(_OWORD *)(v8 + 200 * v9 + 152) < *(_OWORD *)(a1 + 352);
      }
    }
    if (v16) {
      goto LABEL_20;
    }
    if (*(void *)(v8 + 200 * v9 + 152) == *(void *)(a1 + 352)
      && *(void *)(v8 + 200 * v9 + 144) == *(void *)(a1 + 344))
    {
      uint64_t v19 = *(void *)(v8 + 200 * v9 + 160);
      BOOL v20 = v14 == v15 && v19 == *(void *)(a1 + 360);
      if (v20 && sub_100BC6F4C(a1, a1 + 200)) {
        goto LABEL_20;
      }
    }
LABEL_21:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)a1;
    long long v21 = *(_OWORD *)(a1 + 16);
    long long v22 = *(_OWORD *)(a1 + 32);
    long long v23 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v8 + 48) = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v8 + 64) = v23;
    *(_OWORD *)(v8 + 16) = v21;
    *(_OWORD *)(v8 + 32) = v22;
    long long v24 = *(_OWORD *)(a1 + 80);
    long long v25 = *(_OWORD *)(a1 + 96);
    long long v26 = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(v8 + 112) = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(v8 + 128) = v26;
    *(_OWORD *)(v8 + 80) = v24;
    *(_OWORD *)(v8 + 96) = v25;
    long long v27 = *(_OWORD *)(a1 + 144);
    long long v28 = *(_OWORD *)(a1 + 160);
    long long v29 = *(_OWORD *)(a1 + 176);
    *(void *)(v8 + 192) = *(void *)(a1 + 192);
    *(_OWORD *)(v8 + 160) = v28;
    *(_OWORD *)(v8 + 176) = v29;
    *(_OWORD *)(v8 + 144) = v27;
  }
  while (v5 <= v7);
  return a1;
}

__n128 sub_100BC86EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 < 2) {
    return result;
  }
  unint64_t v6 = v4 >> 1;
  uint64_t v7 = (long long *)(a1 + 200 * (v4 >> 1));
  uint64_t v8 = (long long *)(a2 - 200);
  uint64_t v9 = *((void *)v7 + 16);
  uint64_t v10 = *(void *)(a2 - 72);
  if (v9 == v10)
  {
    uint64_t v11 = *(void *)(a1 + 200 * v6 + 136);
    uint64_t v12 = *(void *)(a2 - 64);
    BOOL v13 = v11 < v12;
    if (v11 == v12)
    {
      uint64_t v14 = *(void *)(a1 + 200 * v6 + 144);
      uint64_t v15 = *(void *)(a2 - 56);
      BOOL v13 = v14 < v15;
      if (v14 == v15) {
        BOOL v13 = *(_OWORD *)(a1 + 200 * v6 + 152) < *(_OWORD *)(a2 - 48);
      }
    }
    if (!v13)
    {
      if (*(void *)(a1 + 200 * v6 + 152) != *(void *)(a2 - 48)
        || *(void *)(a1 + 200 * v6 + 144) != *(void *)(a2 - 56))
      {
        return result;
      }
      BOOL v16 = v11 == v12 && *(void *)(a1 + 200 * v6 + 160) == *(void *)(a2 - 40);
      if (!v16 || !sub_100BC6F4C(a1 + 200 * (v4 >> 1), a2 - 200)) {
        return result;
      }
    }
  }
  else if (v9 >= v10)
  {
    return result;
  }
  long long v18 = v8[11];
  long long v67 = v8[10];
  long long v68 = v18;
  uint64_t v69 = *((void *)v8 + 24);
  long long v19 = v8[7];
  long long v63 = v8[6];
  long long v64 = v19;
  __n128 v20 = (__n128)v8[9];
  long long v65 = v8[8];
  __n128 v66 = v20;
  long long v21 = v8[3];
  long long v59 = v8[2];
  long long v60 = v21;
  long long v22 = v8[5];
  long long v61 = v8[4];
  long long v62 = v22;
  long long v23 = v8[1];
  long long v57 = *v8;
  long long v58 = v23;
  long long *v8 = *v7;
  long long v24 = v7[1];
  long long v25 = v7[2];
  long long v26 = v7[4];
  void v8[3] = v7[3];
  v8[4] = v26;
  v8[1] = v24;
  void v8[2] = v25;
  long long v27 = v7[5];
  long long v28 = v7[6];
  long long v29 = v7[8];
  v8[7] = v7[7];
  v8[8] = v29;
  v8[5] = v27;
  void v8[6] = v28;
  long long v30 = v7[9];
  long long v31 = v7[10];
  long long v32 = v7[11];
  *((void *)v8 + 24) = *((void *)v7 + 24);
  v8[10] = v31;
  v8[11] = v32;
  v8[9] = v30;
  if (v4 < 2) {
    goto LABEL_35;
  }
  while (1)
  {
    __n128 v33 = v7;
    unint64_t v34 = v6 - 1;
    unint64_t v6 = (v6 - 1) >> 1;
    uint64_t v7 = (long long *)(a1 + 200 * v6);
    uint64_t v35 = *((void *)v7 + 16);
    if (v35 == (void)v65) {
      break;
    }
    if (v35 >= (uint64_t)v65) {
      goto LABEL_34;
    }
LABEL_32:
    *__n128 v33 = *v7;
    long long v40 = v7[1];
    long long v41 = v7[2];
    long long v42 = v7[4];
    v33[3] = v7[3];
    v33[4] = v42;
    v33[1] = v40;
    v33[2] = v41;
    long long v43 = v7[5];
    long long v44 = v7[6];
    long long v45 = v7[8];
    v33[7] = v7[7];
    v33[8] = v45;
    v33[5] = v43;
    v33[6] = v44;
    long long v46 = v7[9];
    long long v47 = v7[10];
    long long v48 = v7[11];
    *((void *)v33 + 24) = *((void *)v7 + 24);
    v33[10] = v47;
    v33[11] = v48;
    v33[9] = v46;
    if (v34 <= 1) {
      goto LABEL_35;
    }
  }
  uint64_t v36 = *(void *)(a1 + 200 * v6 + 136);
  BOOL v37 = v36 < *((void *)&v65 + 1);
  if (v36 == *((void *)&v65 + 1))
  {
    uint64_t v38 = *(void *)(a1 + 200 * v6 + 144);
    BOOL v37 = v38 < (int64_t)v66.n128_u64[0];
    if (v38 == v66.n128_u64[0]) {
      BOOL v37 = *(_OWORD *)(a1 + 200 * v6 + 152) < (__int128)__PAIR128__(v67, v66.n128_u64[1]);
    }
  }
  if (v37) {
    goto LABEL_32;
  }
  if (*(_OWORD *)(a1 + 200 * v6 + 144) == *(_OWORD *)&v66)
  {
    BOOL v39 = v36 == *((void *)&v65 + 1) && *(void *)(a1 + 200 * v6 + 160) == (void)v67;
    if (v39 && sub_100BC6F4C(a1 + 200 * v6, (uint64_t)&v57)) {
      goto LABEL_32;
    }
  }
LABEL_34:
  uint64_t v7 = v33;
LABEL_35:
  *uint64_t v7 = v57;
  long long v49 = v58;
  long long v50 = v59;
  long long v51 = v61;
  void v7[3] = v60;
  v7[4] = v51;
  v7[1] = v49;
  _OWORD v7[2] = v50;
  long long v52 = v62;
  long long v53 = v63;
  long long v54 = v65;
  v7[7] = v64;
  void v7[8] = v54;
  void v7[5] = v52;
  void v7[6] = v53;
  __n128 result = v66;
  long long v55 = v67;
  long long v56 = v68;
  *((void *)v7 + 24) = v69;
  v7[10] = v55;
  v7[11] = v56;
  v7[9] = (__int128)result;
  return result;
}

uint64_t sub_100BC89F4(uint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 120);
  if ((v3 - 5) >= 0xFFFFFFFC)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)result;
    BOOL v8 = !*(void *)result
      || *(void *)(a3 + 136) != *(void *)(v7 + 8)
      || *(void *)(a3 + 144) != *(void *)(v7 + 16);
    *(void *)__n128 result = a3 + 128;
    __n128 result = *(void *)(result + 8);
    if (result)
    {
      if (*(unsigned char *)(v6 + 21))
      {
        if (v8 || (__n128 result = sub_100BC8B8C(result, a3), v3 != 1) || (result & 1) == 0) {
          *(unsigned char *)(v6 + 21) = 0;
        }
      }
      if (*(unsigned char *)(v6 + 20))
      {
        if (v8 || (__n128 result = sub_100BC8B8C(*(void *)(v6 + 8), a3), (result & 1) == 0))
        {
          if (*a2 - 58 <= 0xFFFFFFF7) {
            *a2 = 50;
          }
          if (a2[1] - 58 <= 0xFFFFFFF6) {
            a2[1] = 49;
          }
        }
        else if (v3 == 2)
        {
          goto LABEL_25;
        }
        *(unsigned char *)(v6 + 20) = 0;
      }
    }
    if (v3 != 2)
    {
      if (v3 == 1) {
        *(unsigned char *)(v6 + 21) = 1;
      }
      goto LABEL_27;
    }
LABEL_25:
    if (*(_DWORD *)(a3 + 40) != 2) {
      *(unsigned char *)(v6 + 20) = 1;
    }
LABEL_27:
    *(void *)(v6 + 8) = a3;
    *(_DWORD *)(v6 + 16) = v3;
  }
  return result;
}

uint64_t sub_100BC8B40(uint64_t result, unsigned __int8 *a2)
{
  if (*(unsigned char *)(result + 21)) {
    *(unsigned char *)(result + 21) = 0;
  }
  if (*(unsigned char *)(result + 20))
  {
    if (*a2 - 58 <= 0xFFFFFFF7) {
      *a2 = 50;
    }
    if (a2[1] - 58 <= 0xFFFFFFF6) {
      a2[1] = 49;
    }
    *(unsigned char *)(result + 20) = 0;
  }
  return result;
}

uint64_t sub_100BC8B8C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 136) != *(void *)(a2 + 136) || *(void *)(a1 + 144) != *(void *)(a2 + 144)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 152);
  uint64_t v4 = *(void *)(a2 + 152);
  if (v3 != v4)
  {
    double v5 = *(double *)(a2 + 168);
    if (v5 == 0.0)
    {
      if (v3 + 1 != v4) {
        return 0;
      }
    }
    else
    {
      if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
        return 0;
      }
      double v6 = fabs(v5);
      double v7 = 2.22044605e-16;
      if (v6 >= 1.0) {
        double v7 = v6 * 2.22044605e-16;
      }
      uint64_t v8 = v3 + 1;
      if (v6 > v7 || v8 != v4) {
        return 0;
      }
    }
  }
  double v10 = *(double *)a1;
  double v23 = *(double *)(a1 + 8);
  double v24 = v10;
  sub_10075D084(&v24, &v23, 1);
  double v11 = v23;
  double v12 = v24;
  double v13 = *(double *)a2;
  double v23 = *(double *)(a2 + 8);
  double v24 = v13;
  sub_10075D084(&v24, &v23, 1);
  if (v12 == v24) {
    goto LABEL_34;
  }
  if ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v15 = vabdd_f64(v12, v24);
    double v16 = fabs(v12);
    double v17 = fabs(v24);
    if (v16 >= v17) {
      double v17 = v16;
    }
    double v18 = v17 >= 1.0 ? v17 * 2.22044605e-16 : 2.22044605e-16;
    if (v15 <= v18)
    {
LABEL_34:
      if (v11 == v23) {
        return 1;
      }
      if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(void *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v19 = vabdd_f64(v11, v23);
        double v20 = fabs(v11);
        double v21 = fabs(v23);
        if (v20 >= v21) {
          double v21 = v20;
        }
        double v22 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
        if (v19 <= v22) {
          return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_100BC8D50(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 40);
  if (v1 == 7) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = **(double ***)result;
  if (v3 == *(double **)(*(void *)result + 8)) {
    return result;
  }
  uint64_t v4 = *(double ***)(result + 8);
  double v5 = *v4;
  double v6 = v4[1];
  if ((unint64_t)((char *)v6 - (char *)*v4) < 0x40) {
    goto LABEL_9;
  }
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  char v15 = 0;
  if (v5 + 2 != v6)
  {
    do
    {
      __n128 result = sub_10075D9A4((uint64_t)&v12, v3, v5, v5 + 2, (uint64_t)&v13);
      if (!result) {
        break;
      }
      double v7 = v5 + 4;
      v5 += 2;
    }
    while (v7 != v6);
    if (!v15)
    {
      if (v14 && HIDWORD(v14) && (int)v14 >= 1)
      {
        if (!(v13 + HIDWORD(v13))) {
          goto LABEL_8;
        }
      }
      else if (!v13)
      {
        goto LABEL_8;
      }
      double v10 = *(unsigned __int8 **)(v2 + 24);
      if (*v10 - 58 <= 0xFFFFFFF7)
      {
        *double v10 = 50;
        double v10 = *(unsigned __int8 **)(v2 + 24);
      }
      int v11 = *(_DWORD *)(v2 + 40) | 1;
      *(_DWORD *)(v2 + 40) = v11;
      if (v10[1] - 58 <= 0xFFFFFFF6)
      {
        v10[1] = 49;
        int v11 = *(_DWORD *)(v2 + 40);
      }
      int v8 = v11 | 4;
      goto LABEL_10;
    }
  }
LABEL_8:
  int v1 = *(_DWORD *)(v2 + 40);
LABEL_9:
  int v8 = v1 | 2;
LABEL_10:
  *(_DWORD *)(v2 + 40) = v8;
  BOOL v9 = v8 == 7 || *(unsigned char *)(*(void *)(v2 + 24) + 9) != 0;
  *(unsigned char *)(v2 + 16) = v9;
  return result;
}

uint64_t *sub_100BC8EB8(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v26 = *(void *)(a1 + 8) + *(void *)a1;
  *((void *)&v26 + 1) = a2;
  uint64_t v3 = sub_100BC9358((uint64_t **)(a1 + 16), &v26, &v26);
  if (v4)
  {
    unint64_t v5 = *(void *)(a1 + 56);
    double v24 = 0;
    uint64_t v25 = 0;
    double v23 = &v24;
    double v6 = *(void **)(a1 + 48);
    if ((unint64_t)v6 >= v5)
    {
      uint64_t v10 = *(void *)(a1 + 40);
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - v10) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v10) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      uint64_t v29 = a1 + 56;
      if (v14)
      {
        char v15 = (char *)sub_1000DA5D8(a1 + 56, v14);
        double v16 = v23;
      }
      else
      {
        char v15 = 0;
        double v16 = &v24;
      }
      double v18 = &v15[24 * v11];
      *(void *)&long long v26 = v15;
      *((void *)&v26 + 1) = v18;
      long long v28 = &v15[24 * v14];
      *(void *)double v18 = v16;
      double v19 = v24;
      *((void *)v18 + 1) = v24;
      double v20 = v18 + 8;
      uint64_t v21 = v25;
      *((void *)v18 + 2) = v25;
      if (v21)
      {
        v19[2] = v20;
        double v23 = &v24;
        double v24 = 0;
        uint64_t v25 = 0;
      }
      else
      {
        *(void *)double v18 = v20;
      }
      long long v27 = v18 + 24;
      sub_100BC972C((uint64_t *)(a1 + 40), &v26);
      double v17 = *(void **)(a1 + 48);
      sub_100BC98E4((void **)&v26);
    }
    else
    {
      *double v6 = &v24;
      double v7 = v24;
      v6[1] = v24;
      int v8 = v6 + 1;
      uint64_t v9 = v25;
      v6[2] = v25;
      if (v9)
      {
        _OWORD v7[2] = v8;
        double v23 = &v24;
        double v24 = 0;
        uint64_t v25 = 0;
      }
      else
      {
        *double v6 = v8;
      }
      double v17 = v6 + 3;
    }
    *(void *)(a1 + 48) = v17;
    sub_1000F5BB0((uint64_t)&v23, v24);
    ++*(void *)(a1 + 8);
  }
  return v3;
}

void sub_100BC9074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
}

uint64_t sub_100BC909C(void *a1)
{
  sub_100BC9BFC(v8, a1[1] + *a1);
  uint64_t v2 = (void *)a1[2];
  if (v2 == a1 + 3)
  {
LABEL_10:
    uint64_t v6 = 0;
  }
  else
  {
    while (((*(void *)((char *)v8[0] + ((v2[4] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v2[4]) & 1) != 0
         || (sub_100BC9A24((uint64_t)a1, (uint64_t)v2, v8) & 1) == 0)
    {
      uint64_t v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          char v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          char v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          uint64_t v2 = v4;
        }
        while (!v5);
      }
      uint64_t v2 = v4;
      if (v4 == a1 + 3) {
        goto LABEL_10;
      }
    }
    uint64_t v6 = 1;
  }
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  if (v8[0]) {
    operator delete(v8[0]);
  }
  return v6;
}

void sub_100BC9180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100BC9194(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 40);
  sub_100BC92CC(&v3);
  sub_1000F5BB0(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

unint64_t *sub_100BC91DC(unint64_t *a1, unint64_t a2)
{
  a1[3] = 0;
  *a1 = a2;
  a1[1] = 0;
  a1[2] = (unint64_t)(a1 + 3);
  a1[4] = 0;
  sub_100BC9240(a1 + 5, a2);
  return a1;
}

void sub_100BC9228(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *v2);
  _Unwind_Resume(a1);
}

void *sub_100BC9240(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1000DA584(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 24 * a2;
    uint64_t v6 = 24 * a2;
    double v7 = (void *)(v4 + 8);
    do
    {
      *double v7 = 0;
      v7[1] = 0;
      *(v7 - 1) = v7;
      v7 += 3;
      v6 -= 24;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_100BC92B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_100BC92CC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 24;
        sub_1000F5BB0((uint64_t)(v4 - 24), *((void **)v4 - 2));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_100BC9358(uint64_t **a1, void *a2, _OWORD *a3)
{
  uint64_t v5 = (void **)sub_100BC93DC((uint64_t)a1, &v9, a2);
  uint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    double v7 = (uint64_t **)v5;
    uint64_t v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    sub_1000EDF90(a1, v9, v7, v6);
  }
  return v6;
}

void *sub_100BC93DC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    while (1)
    {
      double v7 = (void *)v4;
      int v8 = (double *)a3[1];
      uint64_t v9 = *(double **)(v4 + 40);
      if (!v8) {
        break;
      }
      if (!v9) {
        goto LABEL_15;
      }
      if (sub_100BC94A0(v8, v9))
      {
LABEL_11:
        uint64_t v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v10 = (double *)v7[5];
        unint64_t v11 = (double *)a3[1];
        if (v10)
        {
          if (!v11 || !sub_100BC94A0(v10, v11)) {
            goto LABEL_18;
          }
        }
        else if (!v11)
        {
          goto LABEL_14;
        }
LABEL_15:
        uint64_t v5 = v7 + 1;
        uint64_t v4 = v7[1];
        if (!v4) {
          goto LABEL_18;
        }
      }
    }
    if (!v9 && *a3 >= *(void *)(v4 + 32))
    {
LABEL_14:
      if (v7[4] >= *a3) {
        goto LABEL_18;
      }
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  double v7 = (void *)(a1 + 8);
LABEL_18:
  *a2 = v7;
  return v5;
}

BOOL sub_100BC94A0(double *a1, double *a2)
{
  double v3 = *a1;
  double v2 = a1[1];
  double v5 = *a2;
  double v4 = a2[1];
  if (*a1 == *a2) {
    goto LABEL_2;
  }
  double v7 = fabs(v5);
  if ((*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    BOOL v12 = fabs(v3) == 180.0;
  }
  else
  {
    if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v8 = vabdd_f64(v3, v5);
      double v9 = fabs(v3);
      if (v9 < v7) {
        double v9 = v7;
      }
      double v10 = v9 >= 1.0 ? v9 * 2.22044605e-16 : 2.22044605e-16;
      if (v8 <= v10) {
        goto LABEL_2;
      }
    }
    double v11 = fabs(v3);
    BOOL v12 = v11 == 180.0;
    if (v11 != 180.0)
    {
      double v13 = fabs(v11 + -180.0);
      if (v11 < 180.0) {
        double v11 = 180.0;
      }
      if (v11 >= 1.0) {
        double v14 = v11 * 2.22044605e-16;
      }
      else {
        double v14 = 2.22044605e-16;
      }
      BOOL v12 = v13 <= v14;
    }
  }
  if (v7 == 180.0)
  {
    BOOL v16 = 1;
  }
  else
  {
    if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      BOOL v16 = 0;
      goto LABEL_44;
    }
    double v17 = fabs(v7 + -180.0);
    if (v7 < 180.0) {
      double v7 = 180.0;
    }
    if (v7 >= 1.0) {
      double v18 = v7 * 2.22044605e-16;
    }
    else {
      double v18 = 2.22044605e-16;
    }
    BOOL v16 = v17 <= v18;
  }
  if (v12 && v16) {
    goto LABEL_2;
  }
LABEL_44:
  if (v2 == v4)
  {
    double v23 = fabs(v2);
    goto LABEL_46;
  }
  if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v26 = vabdd_f64(v2, v4);
    double v23 = fabs(v2);
    double v27 = fabs(v4);
    if (v23 >= v27) {
      double v27 = v23;
    }
    double v28 = v27 >= 1.0 ? v27 * 2.22044605e-16 : 2.22044605e-16;
    if (v26 <= v28)
    {
LABEL_46:
      if (v23 != 90.0)
      {
        if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
          goto LABEL_63;
        }
        double v24 = fabs(v23 + -90.0);
        if (v23 < 90.0) {
          double v23 = 90.0;
        }
        double v25 = v23 >= 1.0 ? v23 * 2.22044605e-16 : 2.22044605e-16;
        if (v24 > v25) {
          goto LABEL_63;
        }
      }
LABEL_2:
      if (v2 != v4)
      {
        if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          return v2 < v4;
        }
        double v19 = vabdd_f64(v2, v4);
        double v20 = fabs(v2);
        double v21 = fabs(v4);
        if (v20 < v21) {
          double v20 = v21;
        }
        double v22 = v20 >= 1.0 ? v20 * 2.22044605e-16 : 2.22044605e-16;
        if (v19 > v22) {
          return v2 < v4;
        }
      }
      return 0;
    }
  }
LABEL_63:
  if (v12) {
    return 0;
  }
  return v3 < v5 || v16;
}

uint64_t sub_100BC972C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100BC97A4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100BC97A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = *(void *)(v8 - 24);
      v8 -= 24;
      *(void *)(v7 - 24) = v9;
      double v10 = (void *)(a3 - 16);
      uint64_t v11 = *(void *)(a3 - 16);
      *(void *)(v7 - 16) = v11;
      uint64_t v12 = v7 - 16;
      uint64_t v13 = *(void *)(a3 - 8);
      *(void *)(v7 - 8) = v13;
      if (v13)
      {
        *(void *)(v11 + 16) = v12;
        *(void *)(a3 - 24) = v10;
        *double v10 = 0;
        *(void *)(a3 - 8) = 0;
      }
      else
      {
        *(void *)(v7 - 24) = v12;
      }
      uint64_t v7 = *((void *)&v19 + 1) - 24;
      *((void *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  sub_100BC9868((uint64_t)v16);
  return v14;
}

uint64_t sub_100BC9868(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100BC98A0(a1);
  }
  return a1;
}

void sub_100BC98A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    sub_1000F5BB0(v1, *(void **)(v1 + 8));
    v1 += 24;
  }
}

void **sub_100BC98E4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100BC9918(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sub_1000F5BB0(i - 24, *(void **)(i - 16));
  }
}

uint64_t *sub_100BC9960(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *(void *)(*(void *)a2 + 32);
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = *(void *)(v5[4] + 32);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    double v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_1000EDF90(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t sub_100BC9A24(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v20 = a2;
  long long v19 = 0u;
  memset(v18, 0, sizeof(v18));
  sub_100BC9DC0(v18, &v20);
  for (uint64_t i = *((void *)&v19 + 1); *((void *)&v19 + 1); uint64_t i = *((void *)&v19 + 1))
  {
    uint64_t v6 = i - 1;
    uint64_t v7 = *(void *)(*(void *)(*((void *)&v18[0] + 1) + (((unint64_t)(v19 + v6) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v19 + v6) & 0x1FF));
    *((void *)&v19 + 1) = v6;
    sub_100B849F0(v18, 1);
    *(void *)(*a3 + ((*(void *)(v7 + 32) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(void *)(v7 + 32);
    uint64_t v8 = *(void *)(v7 + 32);
    unint64_t v9 = (void *)(*(void *)(a1 + 40) + 24 * v8);
    double v10 = (void *)*v9;
    if ((void *)*v9 != v9 + 1)
    {
      do
      {
        unint64_t v11 = *(void *)(v10[4] + 32);
        uint64_t v12 = a3[3];
        if (v11 != *(void *)(v12 + 8 * v8))
        {
          if ((*(void *)(*a3 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11))
          {
            uint64_t v16 = 1;
            goto LABEL_15;
          }
          *(void *)(v12 + 8 * v11) = v8;
          sub_100BC9DC0(v18, v10 + 4);
        }
        uint64_t v13 = (void *)v10[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            uint64_t v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v14 = (void *)v10[2];
            BOOL v15 = *v14 == (void)v10;
            double v10 = v14;
          }
          while (!v15);
        }
        uint64_t v8 = *(void *)(v7 + 32);
        double v10 = v14;
      }
      while (v14 != (void *)(*(void *)(a1 + 40) + 24 * v8 + 8));
    }
  }
  uint64_t v16 = 0;
LABEL_15:
  sub_10041F48C(v18);
  return v16;
}

void sub_100BC9BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100BC9BBC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_100BC9BFC(void *a1, unint64_t a2)
{
  unsigned __int8 v7 = 0;
  double v4 = sub_100BC9C68(a1, a2, &v7);
  uint64_t v6 = -1;
  sub_100BC9D3C(v4 + 3, a2, &v6);
  return a1;
}

void sub_100BC9C50(_Unwind_Exception *exception_object)
{
  if (*v1) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100BC9C68(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100288EFC(a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          sub_1002D3178(&v13, a2);
        }
        else {
          sub_1007184A0((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *sub_100BC9D3C(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1001DCF60(a1, a2);
    int v6 = (void *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_100BC9DA4(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BC9DC0(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100BC9E48(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_100BC9E48(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    long long v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      BOOL v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      long long v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  double v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100BCA114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BCA160(void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 10;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 20;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

void sub_100BCA278(void *a1, NSObject *a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint8_t *a7)
{
  _os_signpost_emit_with_name_impl(a1, a2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, a7, 0x30u);
}

void sub_100BCA29C(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_impl(a1, v13, OS_LOG_TYPE_FAULT, a4, &buf, 0x30u);
}

void sub_100BCA2BC(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_impl(a1, v13, OS_LOG_TYPE_INFO, a4, &buf, 0x30u);
}

BOOL sub_100BCA2DC()
{
  uint64_t v1 = qword_102419388;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

BOOL sub_100BCA2FC()
{
  unint64_t v2 = *(NSObject **)(v0 + 904);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

void sub_100BCA318()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100BCA3D0(_Unwind_Exception *a1)
{
}

void sub_100BCA3E8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100BCA490(_Unwind_Exception *a1)
{
}

uint64_t sub_100BCA4A8(uint64_t a1, io_service_t a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  CFUUIDRef v5 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x53u, 0xEAu, 0x67u, 0x34u, 0xC7u, 0xEu, 0x46u, 0x35u, 0x9Cu, 0xF5u, 0x4Fu, 0xAFu, 5u, 0xB4u, 0xF2u, 0x30u);
  CFUUIDRef v6 = CFUUIDGetConstantUUIDWithBytes(0, 0xC2u, 0x44u, 0xE8u, 0x58u, 0x10u, 0x9Cu, 0x11u, 0xD4u, 0x91u, 0xD4u, 0, 0x50u, 0xE4u, 0xC6u, 0x42u, 0x6Fu);
  uint64_t v7 = IOCreatePlugInInterfaceForService(a2, v5, v6, (IOCFPlugInInterface ***)a1, &theScore);
  if (v7)
  {
    uint64_t v8 = v7;
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_1022E9CE0);
    }
    unint64_t v9 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        uint64_t v10 = (void *)*v10;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      long long v32 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[reader-%{public}s] error: failed to create plugin", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return v8;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_1022E9CE0);
    }
    uint64_t v24 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      uint64_t v24 = (void *)*v24;
    }
    int v27 = 136446210;
    uint64_t v28 = v24;
LABEL_44:
    unint64_t v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "kern_return_t CLDramFastpathClientInterface::Reader::open(io_service_t)", "%s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
    return v8;
  }
  uint64_t v12 = *(IOCFPlugInInterface ***)a1;
  uint64_t v13 = *(void (**)(IOCFPlugInInterface **, void, void, uint64_t))(**(void **)a1 + 8);
  CFUUIDRef v14 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0xA6u, 0x7Au, 0x69u, 0x95u, 0x23u, 0x6Bu, 0x44u, 0xDEu, 0x97u, 0xB5u, 0x27u, 0xB9u, 0xB1u, 0xE6u, 0x6Fu, 0x2Fu);
  CFUUIDBytes v15 = CFUUIDGetUUIDBytes(v14);
  v13(v12, *(void *)&v15.byte0, *(void *)&v15.byte8, v4);
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 64))(v16);
    if (!v8)
    {
      *(_DWORD *)(a1 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8));
      return v8;
    }
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_1022E9CE0);
    }
    uint64_t v17 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        uint64_t v18 = (void *)*v18;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      long long v32 = v18;
      __int16 v33 = 1026;
      int v34 = v8;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[reader-%{public}s] error: failed to open, error 0x%{public}x", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_1022E9CE0);
      }
      long long v19 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        long long v19 = (void *)*v19;
      }
      int v27 = 136446466;
      uint64_t v28 = v19;
      __int16 v29 = 1026;
      int v30 = v8;
      goto LABEL_44;
    }
  }
  else
  {
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_1022E9CE0);
    }
    int64_t v20 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        uint64_t v21 = (void *)*v21;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      long long v32 = v21;
      __int16 v33 = 1026;
      int v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "[reader-%{public}s] error: failed to query fastpath interface error 0x%{public}x", buf, 0x12u);
    }
    uint64_t v8 = 0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_1022E9CE0);
      }
      unint64_t v22 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        unint64_t v22 = (void *)*v22;
      }
      int v27 = 136446466;
      uint64_t v28 = v22;
      __int16 v29 = 1026;
      int v30 = 0;
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "kern_return_t CLDramFastpathClientInterface::Reader::open(io_service_t)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
      return 0;
    }
  }
  return v8;
}

IOCFPlugInInterface **sub_100BCAA84(uint64_t a1)
{
  uint64_t result = *(IOCFPlugInInterface ***)(a1 + 8);
  if (result)
  {
    ((void (*)(IOCFPlugInInterface **))(*result)[1].QueryInterface)(result);
    uint64_t result = *(IOCFPlugInInterface ***)a1;
    if (*(void *)a1)
    {
      ((void (*)(IOCFPlugInInterface **))(*result)->Release)(result);
      uint64_t result = (IOCFPlugInInterface **)IODestroyPlugInInterface(*(IOCFPlugInInterface ***)a1);
    }
    *(void *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t sub_100BCAAD8(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 96))(v4);
  double v8 = __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v50 - v9);
  uint64_t v11 = **(void **)(a1 + 8);
  if (*(void *)(a1 + 24))
  {
    int v12 = (*(uint64_t (**)(double))(v11 + 104))(v8);
    if (v12)
    {
      int v13 = v12;
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_1022E9CE0);
      }
      CFUUIDRef v14 = qword_102419318;
      if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
      {
        CFUUIDBytes v15 = (void *)(a1 + 40);
        if (*(char *)(a1 + 63) < 0) {
          CFUUIDBytes v15 = (void *)*v15;
        }
        int v67 = 136446466;
        long long v68 = v15;
        __int16 v69 = 1026;
        *(_DWORD *)long long v70 = v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[reader-%{public}s] read error 0x%{public}x", (uint8_t *)&v67, 0x12u);
      }
      uint64_t v16 = 0;
      if (sub_10013D1A0(115, 0))
      {
        bzero(&v67, 0x65CuLL);
        if (qword_102419310 != -1) {
          dispatch_once(&qword_102419310, &stru_1022E9CE0);
        }
        uint64_t v17 = (void *)(a1 + 40);
        if (*(char *)(a1 + 63) < 0) {
          uint64_t v17 = (void *)*v17;
        }
        int v52 = 136446466;
        long long v53 = v17;
        __int16 v54 = 1026;
        *(_DWORD *)long long v55 = v13;
        uint64_t v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "uint32_t CLDramFastpathClientInterface::Reader::read(uint8_t * _Nonnull, uint32_t)", "%s\n", v18);
        if (v18 != (char *)&v67) {
          free(v18);
        }
        return 0;
      }
      return v16;
    }
  }
  else
  {
    int v19 = (*(uint64_t (**)(double))(v11 + 112))(v8);
    if (v19)
    {
      int v20 = v19;
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_1022E9CE0);
      }
      uint64_t v21 = qword_102419318;
      if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
      {
        unint64_t v22 = (void *)(a1 + 40);
        if (*(char *)(a1 + 63) < 0) {
          unint64_t v22 = (void *)*v22;
        }
        int v67 = 136446466;
        long long v68 = v22;
        __int16 v69 = 1026;
        *(_DWORD *)long long v70 = v20;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "[reader-%{public}s] readlast error 0x%{public}x", (uint8_t *)&v67, 0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&v67, 0x65CuLL);
        if (qword_102419310 != -1) {
          dispatch_once(&qword_102419310, &stru_1022E9CE0);
        }
        uint64_t v36 = (void *)(a1 + 40);
        if (*(char *)(a1 + 63) < 0) {
          uint64_t v36 = (void *)*v36;
        }
        int v52 = 136446466;
        long long v53 = v36;
        __int16 v54 = 1026;
        *(_DWORD *)long long v55 = v20;
        BOOL v37 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "uint32_t CLDramFastpathClientInterface::Reader::read(uint8_t * _Nonnull, uint32_t)", "%s\n", v37);
        if (v37 != (char *)&v67) {
          free(v37);
        }
      }
    }
  }
  long long v51 = 0;
  uint64_t v16 = 0;
  if (a3)
  {
    while ((*(unsigned int (**)(void, void *, uint64_t, const void **, void, void))(**(void **)(a1 + 8) + 128))(*(void *)(a1 + 8), v10, a1 + 32, &v51, 0, 0))
    {
      memcpy(a2, v51, *(unsigned int *)(a1 + 16));
      HIDWORD(v50) = 0;
      (*(void (**)(void, void *, void, char *))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v10, *(void *)(a1 + 32), (char *)&v50 + 4);
      if (HIDWORD(v50))
      {
        if (qword_102419310 != -1) {
          dispatch_once(&qword_102419310, &stru_1022E9CE0);
        }
        uint64_t v23 = qword_102419318;
        if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
        {
          uint64_t v24 = (void *)(a1 + 40);
          if (*(char *)(a1 + 63) < 0) {
            uint64_t v24 = (void *)*v24;
          }
          uint64_t v26 = v10[10];
          uint64_t v25 = v10[11];
          uint64_t v28 = v10[3];
          uint64_t v27 = v10[4];
          uint64_t v29 = v10[2];
          uint64_t v31 = v10[8];
          uint64_t v30 = v10[9];
          uint64_t v32 = v10[7];
          int v67 = 136448258;
          long long v68 = v24;
          __int16 v69 = 2050;
          *(void *)long long v70 = v26;
          v70[4] = 2048;
          *(void *)&v70[5] = v25;
          v70[9] = 2050;
          uint64_t v71 = v28;
          __int16 v72 = 2050;
          uint64_t v73 = v27;
          __int16 v74 = 2050;
          uint64_t v75 = v29;
          __int16 v76 = 2050;
          uint64_t v77 = v31;
          __int16 v78 = 2050;
          uint64_t v79 = v30;
          __int16 v80 = 2050;
          uint64_t v81 = v32;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "[reader-%{public}s] corrupt count %{public}zd offset %zd, desc read/write [%{public}llu/%{public}llu/%{public}zd, %{public}llu/%{public}llu/%{public}zd", (uint8_t *)&v67, 0x5Cu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(&v67, 0x65CuLL);
          if (qword_102419310 != -1) {
            dispatch_once(&qword_102419310, &stru_1022E9CE0);
          }
          uint64_t v38 = (void *)(a1 + 40);
          if (*(char *)(a1 + 63) < 0) {
            uint64_t v38 = (void *)*v38;
          }
          uint64_t v40 = v10[10];
          uint64_t v39 = v10[11];
          uint64_t v42 = v10[3];
          uint64_t v41 = v10[4];
          uint64_t v43 = v10[2];
          uint64_t v45 = v10[8];
          uint64_t v44 = v10[9];
          uint64_t v46 = v10[7];
          int v52 = 136448258;
          long long v53 = v38;
          __int16 v54 = 2050;
          *(void *)long long v55 = v40;
          v55[4] = 2048;
          *(void *)&v55[5] = v39;
          v55[9] = 2050;
          uint64_t v56 = v42;
          __int16 v57 = 2050;
          uint64_t v58 = v41;
          __int16 v59 = 2050;
          uint64_t v60 = v43;
          __int16 v61 = 2050;
          uint64_t v62 = v45;
          __int16 v63 = 2050;
          uint64_t v64 = v44;
          __int16 v65 = 2050;
          uint64_t v66 = v46;
          uint64_t v47 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "uint32_t CLDramFastpathClientInterface::Reader::read(uint8_t * _Nonnull, uint32_t)", "%s\n", v47);
          if (v47 != (char *)&v67) {
            free(v47);
          }
        }
        if (qword_102419310 != -1) {
          dispatch_once(&qword_102419310, &stru_1022E9CE0);
        }
        __int16 v33 = qword_102419318;
        if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
        {
          int v34 = (void *)(a1 + 40);
          if (*(char *)(a1 + 63) < 0) {
            int v34 = (void *)*v34;
          }
          int v67 = 136446722;
          long long v68 = v34;
          __int16 v69 = 1026;
          *(_DWORD *)long long v70 = v16;
          _OWORD v70[2] = 1026;
          *(_DWORD *)&v70[3] = 1;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "[reader-%{public}s] Read %{public}u, corrupt %{public}u", (uint8_t *)&v67, 0x18u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(&v67, 0x65CuLL);
          if (qword_102419310 != -1) {
            dispatch_once(&qword_102419310, &stru_1022E9CE0);
          }
          long long v48 = (void *)(a1 + 40);
          if (*(char *)(a1 + 63) < 0) {
            long long v48 = (void *)*v48;
          }
          int v52 = 136446722;
          long long v53 = v48;
          __int16 v54 = 1026;
          *(_DWORD *)long long v55 = v16;
          void v55[2] = 1026;
          *(_DWORD *)&v55[3] = 1;
          uint64_t v49 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "uint32_t CLDramFastpathClientInterface::Reader::read(uint8_t * _Nonnull, uint32_t)", "%s\n", v49);
          if (v49 != (char *)&v67) {
            free(v49);
          }
        }
        return v16;
      }
      uint64_t v16 = (v16 + 1);
      a2 += *(unsigned int *)(a1 + 16);
      if (a3 == v16) {
        return a3;
      }
    }
  }
  return v16;
}

uint64_t sub_100BCB368(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = off_1022E9C98;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = objc_opt_new();
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    *(_OWORD *)long long __p = *a3;
    uint64_t v10 = *((void *)a3 + 2);
  }
  int v5 = *((_DWORD *)a3 + 6);
  int v11 = v5;
  *(void *)(a1 + 72) = 0;
  if (SHIBYTE(v10) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 88), __p[0], (unint64_t)__p[1]);
    int v6 = SHIBYTE(v10);
    *(_DWORD *)(a1 + 112) = v11;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)__p;
    *(void *)(a1 + 104) = v10;
    *(_DWORD *)(a1 + 112) = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 120), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *(void *)(a1 + 136) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 120) = v7;
  }
  *(_DWORD *)(a1 + 144) = *((_DWORD *)a3 + 6);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0;
  sub_100BCB4E0(a1);
  return a1;
}

void sub_100BCB498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 111) < 0) {
    operator delete(*v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BCB4E0(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    [v2 open];
    [*(id *)(a1 + 16) setDeviceMatching:&off_1023975B8];
    BOOL v3 = *(void **)(a1 + 16);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_100BCC8A0;
    void v8[3] = &unk_1022E9CB0;
    v8[4] = a1;
    [v3 setDeviceNotificationHandler:v8];
    [*(id *)(a1 + 16) setDispatchQueue:[*(id *)(a1 + 8) queue]];
    [*(id *)(a1 + 16) activate];
  }
  else
  {
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_1022E9CE0);
    }
    uint64_t v4 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
    {
      int v5 = (void *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0) {
        int v5 = (void *)*v5;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      int v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[manager-%{public}s] null hidManager", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_1022E9CE0);
      }
      int v6 = (void *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0) {
        int v6 = (void *)*v6;
      }
      int v9 = 136446210;
      uint64_t v10 = v6;
      long long v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDramFastpathClientInterface::Manager::setupHidDevice()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

uint64_t sub_100BCB73C(uint64_t a1)
{
  *(void *)a1 = off_1022E9C98;
  sub_100BCB7C8(a1);
  sub_100BCAA84(a1 + 48);
  [*(id *)(a1 + 16) cancel];
  [*(id *)(a1 + 16) close];

  *(void *)(a1 + 16) = 0;
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  return a1;
}

void sub_100BCB7C8(uint64_t a1)
{
  if (qword_102419310 != -1) {
    dispatch_once(&qword_102419310, &stru_1022E9CE0);
  }
  unint64_t v2 = qword_102419318;
  if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v3 = (void *)(a1 + 120);
    if (*(char *)(a1 + 143) < 0) {
      BOOL v3 = (void *)*v3;
    }
    *(_DWORD *)uint64_t buf = 136446210;
    int v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[manager-%{public}s] disabling", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_1022E9CE0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDramFastpathClientInterface::Manager::disable()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_100BCC6C0(a1);
  *(void *)(a1 + 72) = 0;
}

void sub_100BCB9A4(uint64_t a1)
{
  sub_100BCB73C(a1);

  operator delete();
}

void sub_100BCB9DC(uint64_t a1, double a2)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_1022E9CE0);
    }
    BOOL v3 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = (void *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0) {
        uint64_t v4 = (void *)*v4;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      int v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[manager-%{public}s] already enabled", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_1022E9CE0);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDramFastpathClientInterface::Manager::enable(CFTimeInterval)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    uint64_t v7 = mach_continuous_time();
    *(double *)(a1 + 152) = sub_1000D3D90(v7);
    sub_100BCBD80(a1);
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_1022E9CE0);
    }
    double v8 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = (void *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0) {
        int v9 = (void *)*v9;
      }
      uint64_t v10 = *(void *)(a1 + 152);
      *(_DWORD *)uint64_t buf = 136446722;
      int v13 = v9;
      __int16 v14 = 2050;
      double v15 = a2;
      __int16 v16 = 2050;
      uint64_t v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[manager-%{public}s] enabling with read interval %{public}f at %{public}f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_1022E9CE0);
      }
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDramFastpathClientInterface::Manager::enable(CFTimeInterval)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    *(void *)(a1 + 72) = 0;
    sub_100BCC2A8(a1, a2);
    *(void *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
  }
}

void sub_100BCBD80(uint64_t a1)
{
  int times = mach_get_times();
  if (times)
  {
    int v3 = times;
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_1022E9CE0);
    }
    uint64_t v4 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
    {
      int v5 = (void *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0) {
        int v5 = (void *)*v5;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      __int16 v16 = v5;
      __int16 v17 = 1026;
      LODWORD(v18) = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[manager-%{public}s] error getting mach times %{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_1022E9CE0);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDramFastpathClientInterface::Manager::updateTimestampOffset()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    goto LABEL_15;
  }
  double v7 = sub_1000D3D90(0);
  double v8 = sub_1000D3D90(0);
  if (v7 >= v8)
  {
    *(double *)(a1 + 160) = v7 - v8;
LABEL_15:
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_1022E9CE0);
    }
    int v9 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = (void *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0) {
        uint64_t v10 = (void *)*v10;
      }
      double v11 = *(double *)(a1 + 160);
      *(_DWORD *)uint64_t buf = 136446466;
      __int16 v16 = v10;
      __int16 v17 = 2048;
      double v18 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[manager-%{public}s] updated timestamp offset %f", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_1022E9CE0);
    }
    __int16 v14 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDramFastpathClientInterface::Manager::updateTimestampOffset()", "%s\n");
LABEL_36:
    if (v14 != buf) {
      free(v14);
    }
    return;
  }
  if (qword_102419310 != -1) {
    dispatch_once(&qword_102419310, &stru_1022E9CE0);
  }
  int v12 = qword_102419318;
  if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
  {
    int v13 = (void *)(a1 + 120);
    if (*(char *)(a1 + 143) < 0) {
      int v13 = (void *)*v13;
    }
    *(_DWORD *)uint64_t buf = 136446722;
    __int16 v16 = v13;
    __int16 v17 = 2050;
    double v18 = v7;
    __int16 v19 = 2050;
    double v20 = v8;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[manager-%{public}s] unexpected timestamp offset continuous %{public}f, absolute %{public}f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_1022E9CE0);
    }
    __int16 v14 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLDramFastpathClientInterface::Manager::updateTimestampOffset()", "%s\n");
    goto LABEL_36;
  }
}

void sub_100BCC2A8(uint64_t a1, double a2)
{
  *(double *)(a1 + 40) = a2;
  if (*(void *)(a1 + 32))
  {
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_1022E9CE0);
    }
    uint64_t v4 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_INFO))
    {
      int v5 = (void *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0) {
        int v5 = (void *)*v5;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      unint64_t v22 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[manager-%{public}s] Reseting read timer", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_1022E9CE0);
      }
      __int16 v14 = (void *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0) {
        __int16 v14 = (void *)*v14;
      }
      int v17 = 136446210;
      double v18 = v14;
      double v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDramFastpathClientInterface::Manager::setupReadTimer(CFTimeInterval)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    dispatch_release(*(dispatch_object_t *)(a1 + 32));
    *(void *)(a1 + 32) = 0;
  }
  if (qword_102419310 != -1) {
    dispatch_once(&qword_102419310, &stru_1022E9CE0);
  }
  int v6 = qword_102419318;
  if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_INFO))
  {
    double v7 = (void *)(a1 + 120);
    if (*(char *)(a1 + 143) < 0) {
      double v7 = (void *)*v7;
    }
    *(_DWORD *)uint64_t buf = 136446466;
    unint64_t v22 = v7;
    __int16 v23 = 2050;
    double v24 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[manager-%{public}s] Starting read timer at %{public}f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_1022E9CE0);
    }
    int v12 = (void *)(a1 + 120);
    if (*(char *)(a1 + 143) < 0) {
      int v12 = (void *)*v12;
    }
    int v17 = 136446466;
    double v18 = v12;
    __int16 v19 = 2050;
    double v20 = a2;
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDramFastpathClientInterface::Manager::setupReadTimer(CFTimeInterval)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  double v8 = a2 * 1000000000.0;
  int v9 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)[*(id *)(a1 + 8) queue]);
  *(void *)(a1 + 32) = v9;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100BCDC2C;
  handler[3] = &unk_1022A3020;
  handler[4] = a1;
  dispatch_source_set_event_handler(v9, handler);
  uint64_t v10 = *(NSObject **)(a1 + 32);
  dispatch_time_t v11 = dispatch_time(0, (uint64_t)v8);
  dispatch_source_set_timer(v10, v11, (unint64_t)v8, 0x989680uLL);
  dispatch_resume(*(dispatch_object_t *)(a1 + 32));
}

void sub_100BCC6C0(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_1022E9CE0);
    }
    unint64_t v2 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_INFO))
    {
      int v3 = (void *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0) {
        int v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      int v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[manager-%{public}s] Resetting read timer", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_1022E9CE0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDramFastpathClientInterface::Manager::teardownReadTimer()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    dispatch_release(*(dispatch_object_t *)(a1 + 32));
    *(void *)(a1 + 32) = 0;
  }
}

void sub_100BCC8A0(uint64_t a1, void *a2, int a3)
{
  kern_return_t RegistryEntryID;
  kern_return_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  char *v18;
  uint64_t entryID;
  int v20;
  void *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;

  uint64_t v5 = *(void *)(a1 + 32);
  entryID = 0;
  RegistryEntryID = IORegistryEntryGetRegistryEntryID((io_registry_entry_t)[a2 service], &entryID);
  if (RegistryEntryID)
  {
    double v7 = RegistryEntryID;
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_1022E9CE0);
    }
    double v8 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
    {
      int v9 = (void *)(v5 + 120);
      if (*(char *)(v5 + 143) < 0) {
        int v9 = (void *)*v9;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      uint64_t v27 = v9;
      uint64_t v28 = 1026;
      LODWORD(v29) = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[manager-%{public}s] IORegistryEntryGetRegistryEntryID failed 0x%{public}x", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_1022E9CE0);
      }
      uint64_t v10 = (void *)(v5 + 120);
      if (*(char *)(v5 + 143) < 0) {
        uint64_t v10 = (void *)*v10;
      }
      double v20 = 136446466;
      uint64_t v21 = v10;
      unint64_t v22 = 1026;
      LODWORD(v23) = v7;
LABEL_14:
      dispatch_time_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDramFastpathClientInterface::Manager::setupHidDevice()_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  else
  {
    if (!a3)
    {
      sub_100BCDA54(v5);
      return;
    }
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_1022E9CE0);
    }
    int v12 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_INFO))
    {
      int v13 = (void *)(v5 + 120);
      if (*(char *)(v5 + 143) < 0) {
        int v13 = (void *)*v13;
      }
      *(_DWORD *)uint64_t buf = 136446722;
      uint64_t v27 = v13;
      uint64_t v28 = 2048;
      uint64_t v29 = entryID;
      uint64_t v30 = 2050;
      uint64_t v31 = v5;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[manager-%{public}s] new device entry ID %llu, this %{public}p", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_1022E9CE0);
      }
      int v17 = (void *)(v5 + 120);
      if (*(char *)(v5 + 143) < 0) {
        int v17 = (void *)*v17;
      }
      double v20 = 136446722;
      uint64_t v21 = v17;
      unint64_t v22 = 2048;
      __int16 v23 = entryID;
      double v24 = 2050;
      uint64_t v25 = v5;
      double v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDramFastpathClientInterface::Manager::setupHidDevice()_block_invoke", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    if (!*(void *)(v5 + 24))
    {
      sub_100BCCD78(v5, a2);
      return;
    }
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_1022E9CE0);
    }
    __int16 v14 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
    {
      double v15 = (void *)(v5 + 120);
      if (*(char *)(v5 + 143) < 0) {
        double v15 = (void *)*v15;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v27 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[manager-%{public}s] unexpected duplicate device", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_1022E9CE0);
      }
      __int16 v16 = (void *)(v5 + 120);
      if (*(char *)(v5 + 143) < 0) {
        __int16 v16 = (void *)*v16;
      }
      double v20 = 136446210;
      uint64_t v21 = v16;
      goto LABEL_14;
    }
  }
}

void sub_100BCCD78(uint64_t a1, void *a2)
{
  kern_return_t ParentEntry;
  NSObject *v5;
  void *v6;
  void *v7;
  char *v8;
  kern_return_t ChildIterator;
  NSObject *v10;
  void *v11;
  void *v12;
  io_object_t v13;
  void *v14;
  CFStringRef v15;
  BOOL v16;
  kern_return_t ChildEntry;
  NSObject *v18;
  void *v19;
  void *v20;
  char *v21;
  CFStringRef v22;
  kern_return_t v23;
  NSObject *v24;
  void *v25;
  void *v26;
  char *v27;
  NSObject *v28;
  void *v29;
  size_t v30;
  size_t v31;
  void *v32;
  mach_error_t v33;
  NSObject *v34;
  char *v35;
  void *v36;
  char *v37;
  void *v38;
  NSObject *v39;
  void *v40;
  BOOL v41;
  void *v42;
  BOOL v43;
  void *v44;
  io_registry_entry_t child;
  io_registry_entry_t parent[2];
  int v47;
  void *v48;
  __int16 v49;
  char *v50;
  __int16 v51;
  mach_error_t v52;
  __int16 v53;
  char *v54;
  io_name_t name;
  uint8_t buf[4];
  void *v57;
  __int16 v58;
  char *v59;
  __int16 v60;
  mach_error_t v61;
  __int16 v62;
  char *v63;

  *(void *)parent = 0;
  ParentEntry = IORegistryEntryGetParentEntry((io_registry_entry_t)[a2 service], "IOService", &parent[1]);
  if (ParentEntry)
  {
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_1022E9CE0);
    }
    uint64_t v5 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
    {
      int v6 = (void *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0) {
        int v6 = (void *)*v6;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      __int16 v57 = v6;
      uint64_t v58 = 1026;
      LODWORD(v59) = ParentEntry;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[manager-%{public}s] IORegistryEntryGetParentEntry failed 0x%{public}0x", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_1022E9CE0);
      }
      double v7 = (void *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0) {
        double v7 = (void *)*v7;
      }
      *(_DWORD *)name = 136446466;
      *(void *)&name[4] = v7;
      *(_WORD *)&name[12] = 1026;
      *(_DWORD *)&name[14] = ParentEntry;
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDramFastpathClientInterface::Manager::onServiceAdded(HIDDevice * _Nonnull)", "%s\n", v8);
LABEL_113:
      if (v8 != (char *)buf) {
        free(v8);
      }
      return;
    }
    return;
  }
  ChildIterator = IORegistryEntryGetChildIterator(parent[1], "IOService", parent);
  if (!ChildIterator)
  {
    int v13 = IOIteratorNext(parent[0]);
    if (!v13)
    {
LABEL_100:
      *(void *)(a1 + 24) = a2;
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_1022E9CE0);
      }
      uint64_t v39 = qword_102419318;
      if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v40 = (void *)(a1 + 120);
        if (*(char *)(a1 + 143) < 0) {
          uint64_t v40 = (void *)*v40;
        }
        uint64_t v41 = *(void *)(a1 + 56) != 0;
        *(_DWORD *)uint64_t buf = 136446466;
        __int16 v57 = v40;
        uint64_t v58 = 1026;
        LODWORD(v59) = v41;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "[manager-%{public}s] reader is valid %{public}d", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419310 != -1) {
          dispatch_once(&qword_102419310, &stru_1022E9CE0);
        }
        uint64_t v42 = (void *)(a1 + 120);
        if (*(char *)(a1 + 143) < 0) {
          uint64_t v42 = (void *)*v42;
        }
        uint64_t v43 = *(void *)(a1 + 56) != 0;
        *(_DWORD *)name = 136446466;
        *(void *)&name[4] = v42;
        *(_WORD *)&name[12] = 1026;
        *(_DWORD *)&name[14] = v43;
        double v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDramFastpathClientInterface::Manager::onServiceAdded(HIDDevice * _Nonnull)", "%s\n", v8);
        goto LABEL_113;
      }
      return;
    }
    __int16 v14 = (void *)(a1 + 120);
    while (1)
    {
      double v15 = IOObjectCopyClass(v13);
      __int16 v16 = CFEqual(@"AppleSPUFastpathInterface", v15) == 0;
      CFRelease(v15);
      if (!v16)
      {
        child = 0;
        ChildEntry = IORegistryEntryGetChildEntry(v13, "IOService", &child);
        if (!ChildEntry)
        {
          unint64_t v22 = IOObjectCopyClass(child);
          if (CFEqual(v22, @"AppleSPUFastpathDriver"))
          {
            memset(name, 0, sizeof(name));
            __int16 v23 = IORegistryEntryGetName(child, name);
            if (v23)
            {
              if (qword_102419310 != -1) {
                dispatch_once(&qword_102419310, &stru_1022E9CE0);
              }
              double v24 = qword_102419318;
              if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
              {
                uint64_t v25 = (void *)(a1 + 120);
                if (*(char *)(a1 + 143) < 0) {
                  uint64_t v25 = (void *)*v14;
                }
                *(_DWORD *)uint64_t buf = 136446466;
                __int16 v57 = v25;
                uint64_t v58 = 1026;
                LODWORD(v59) = v23;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "[manager-%{public}s] IORegistryEntryGetName failed 0x%{public}0x", buf, 0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419310 != -1) {
                  dispatch_once(&qword_102419310, &stru_1022E9CE0);
                }
                uint64_t v26 = (void *)(a1 + 120);
                if (*(char *)(a1 + 143) < 0) {
                  uint64_t v26 = (void *)*v14;
                }
                uint64_t v47 = 136446466;
                long long v48 = v26;
                uint64_t v49 = 1026;
                LODWORD(v50) = v23;
                uint64_t v27 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLDramFastpathClientInterface::Manager::onServiceAdded(HIDDevice * _Nonnull)", "%s\n", v27);
                goto LABEL_98;
              }
LABEL_65:
              if (v22) {
                CFRelease(v22);
              }
              IOObjectRelease(child);
              goto LABEL_68;
            }
            uint64_t v30 = strlen(name);
            uint64_t v31 = v30;
            if (*(char *)(a1 + 143) < 0)
            {
              if (v30 != *(void *)(a1 + 128)) {
                goto LABEL_65;
              }
              if (v30 == -1) {
LABEL_115:
              }
                sub_1002E93D4();
              uint64_t v32 = (void *)*v14;
            }
            else
            {
              if (v30 != *(unsigned __int8 *)(a1 + 143)) {
                goto LABEL_65;
              }
              uint64_t v32 = (void *)(a1 + 120);
              if (v31 == -1) {
                goto LABEL_115;
              }
            }
            if (memcmp(v32, name, v31)) {
              goto LABEL_65;
            }
            __int16 v33 = sub_100BCA4A8(a1 + 48, child);
            if (!v33) {
              goto LABEL_65;
            }
            if (qword_102419310 != -1) {
              dispatch_once(&qword_102419310, &stru_1022E9CE0);
            }
            int v34 = qword_102419318;
            if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
            {
              uint64_t v44 = (void *)(a1 + 120);
              if (*(char *)(a1 + 143) < 0) {
                uint64_t v44 = (void *)*v14;
              }
              uint64_t v35 = mach_error_string(v33);
              *(_DWORD *)uint64_t buf = 136446978;
              __int16 v57 = v44;
              uint64_t v58 = 2082;
              __int16 v59 = name;
              uint64_t v60 = 1026;
              __int16 v61 = v33;
              uint64_t v62 = 2082;
              __int16 v63 = v35;
              _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "[manager-%{public}s] Failed to open %{public}s, error 0x%{public}x, %{public}s", buf, 0x26u);
            }
            if (!sub_10013D1A0(115, 0)) {
              goto LABEL_65;
            }
            bzero(buf, 0x65CuLL);
            if (qword_102419310 != -1) {
              dispatch_once(&qword_102419310, &stru_1022E9CE0);
            }
            uint64_t v36 = (void *)(a1 + 120);
            if (*(char *)(a1 + 143) < 0) {
              uint64_t v36 = (void *)*v14;
            }
            BOOL v37 = mach_error_string(v33);
            uint64_t v47 = 136446978;
            long long v48 = v36;
            uint64_t v49 = 2082;
            uint64_t v50 = name;
            long long v51 = 1026;
            int v52 = v33;
            long long v53 = 2082;
            __int16 v54 = v37;
            uint64_t v27 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLDramFastpathClientInterface::Manager::onServiceAdded(HIDDevice * _Nonnull)", "%s\n", v27);
          }
          else
          {
            if (qword_102419310 != -1) {
              dispatch_once(&qword_102419310, &stru_1022E9CE0);
            }
            uint64_t v28 = qword_102419318;
            if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
            {
              uint64_t v29 = (void *)(a1 + 120);
              if (*(char *)(a1 + 143) < 0) {
                uint64_t v29 = (void *)*v14;
              }
              *(_DWORD *)uint64_t buf = 136446210;
              __int16 v57 = v29;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "[manager-%{public}s] unexpected child class", buf, 0xCu);
            }
            if (!sub_10013D1A0(115, 0)) {
              goto LABEL_65;
            }
            bzero(buf, 0x65CuLL);
            if (qword_102419310 != -1) {
              dispatch_once(&qword_102419310, &stru_1022E9CE0);
            }
            uint64_t v38 = (void *)(a1 + 120);
            if (*(char *)(a1 + 143) < 0) {
              uint64_t v38 = (void *)*v14;
            }
            *(_DWORD *)name = 136446210;
            *(void *)&name[4] = v38;
            uint64_t v27 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLDramFastpathClientInterface::Manager::onServiceAdded(HIDDevice * _Nonnull)", "%s\n", v27);
          }
LABEL_98:
          if (v27 != (char *)buf) {
            free(v27);
          }
          goto LABEL_65;
        }
        if (qword_102419310 != -1) {
          dispatch_once(&qword_102419310, &stru_1022E9CE0);
        }
        double v18 = qword_102419318;
        if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
        {
          __int16 v19 = (void *)(a1 + 120);
          if (*(char *)(a1 + 143) < 0) {
            __int16 v19 = (void *)*v14;
          }
          *(_DWORD *)uint64_t buf = 136446466;
          __int16 v57 = v19;
          uint64_t v58 = 1026;
          LODWORD(v59) = ChildEntry;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "[manager-%{public}s] IORegistryEntryGetChildEntry failed for AppleSPUFastpathInterface 0x%{public}0x", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419310 != -1) {
            dispatch_once(&qword_102419310, &stru_1022E9CE0);
          }
          double v20 = (void *)(a1 + 120);
          if (*(char *)(a1 + 143) < 0) {
            double v20 = (void *)*v14;
          }
          *(_DWORD *)name = 136446466;
          *(void *)&name[4] = v20;
          *(_WORD *)&name[12] = 1026;
          *(_DWORD *)&name[14] = ChildEntry;
          uint64_t v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLDramFastpathClientInterface::Manager::onServiceAdded(HIDDevice * _Nonnull)", "%s\n", v21);
          if (v21 != (char *)buf) {
            free(v21);
          }
        }
      }
LABEL_68:
      if (!IOObjectRelease(v13)) {
        int v13 = IOIteratorNext(parent[0]);
      }
      if (!v13) {
        goto LABEL_100;
      }
    }
  }
  if (qword_102419310 != -1) {
    dispatch_once(&qword_102419310, &stru_1022E9CE0);
  }
  uint64_t v10 = qword_102419318;
  if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
  {
    dispatch_time_t v11 = (void *)(a1 + 120);
    if (*(char *)(a1 + 143) < 0) {
      dispatch_time_t v11 = (void *)*v11;
    }
    *(_DWORD *)uint64_t buf = 136446466;
    __int16 v57 = v11;
    uint64_t v58 = 1026;
    LODWORD(v59) = ChildIterator;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[manager-%{public}s] IORegistryEntryGetChildIterator failed 0x%{public}0x", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_1022E9CE0);
    }
    int v12 = (void *)(a1 + 120);
    if (*(char *)(a1 + 143) < 0) {
      int v12 = (void *)*v12;
    }
    *(_DWORD *)name = 136446466;
    *(void *)&name[4] = v12;
    *(_WORD *)&name[12] = 1026;
    *(_DWORD *)&name[14] = ChildIterator;
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLDramFastpathClientInterface::Manager::onServiceAdded(HIDDevice * _Nonnull)", "%s\n", v8);
    goto LABEL_113;
  }
}

void sub_100BCDA48(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

IOCFPlugInInterface **sub_100BCDA54(uint64_t a1)
{
  if (qword_102419310 != -1) {
    dispatch_once(&qword_102419310, &stru_1022E9CE0);
  }
  unint64_t v2 = qword_102419318;
  if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
  {
    int v3 = (void *)(a1 + 120);
    if (*(char *)(a1 + 143) < 0) {
      int v3 = (void *)*v3;
    }
    *(_DWORD *)uint64_t buf = 136446210;
    double v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "[manager-%{public}s] service disappeared!", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_1022E9CE0);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLDramFastpathClientInterface::Manager::onServiceRemoved()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  uint64_t result = sub_100BCAA84(a1 + 48);
  *(void *)(a1 + 24) = 0;
  return result;
}

id *sub_100BCDC2C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_102419310 != -1) {
    dispatch_once(&qword_102419310, &stru_1022E9CE0);
  }
  unint64_t v2 = qword_102419318;
  if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_INFO))
  {
    int v3 = (void *)(v1 + 120);
    if (*(char *)(v1 + 143) < 0) {
      int v3 = (void *)*v3;
    }
    *(_DWORD *)uint64_t buf = 136446210;
    double v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[manager-%{public}s] Triggering read", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_1022E9CE0);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDramFastpathClientInterface::Manager::setupReadTimer(CFTimeInterval)_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_100BCDE00(v1);
}

id *sub_100BCDE00(uint64_t a1)
{
  sub_1000E1294((uint64_t *)v11, (uint64_t)"CLBatchedSensor.ReadTimer", 0);
  if (*(void *)(a1 + 56))
  {
    int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_1022E9CE0);
    }
    int v3 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = (void *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0) {
        uint64_t v4 = (void *)*v4;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      int v17 = v4;
      __int16 v18 = 1026;
      int v19 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[manager-%{public}s] read %{public}d samples", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_1022E9CE0);
      }
      uint64_t v5 = (void *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0) {
        uint64_t v5 = (void *)*v5;
      }
      int v12 = 136446466;
      int v13 = v5;
      __int16 v14 = 1026;
      int v15 = v2;
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDramFastpathClientInterface::Manager::onReadTimer()", "%s\n", v6);
LABEL_27:
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_1022E9CE0);
    }
    double v7 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
    {
      double v8 = (void *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0) {
        double v8 = (void *)*v8;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      int v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[manager-%{public}s] reader isn't valid", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_1022E9CE0);
      }
      uint64_t v10 = (void *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0) {
        uint64_t v10 = (void *)*v10;
      }
      int v12 = 136446210;
      int v13 = v10;
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDramFastpathClientInterface::Manager::onReadTimer()", "%s\n", v6);
      goto LABEL_27;
    }
  }
  return sub_1000E1098(v11);
}

void sub_100BCE18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

void sub_100BCE1B4(id a1)
{
  qword_102419318 = (uint64_t)os_log_create("com.apple.locationd.Motion", "BatchedSensor");
}

uint64_t sub_100BCE1E4()
{
  sub_100134750(qword_102480510, "Acc800Fp");
  dword_102480528 = 800;
  __cxa_atexit((void (*)(void *))sub_10058C198, qword_102480510, (void *)&_mh_execute_header);
  sub_100134750(qword_102480530, "DmFp");
  dword_102480548 = 200;

  return __cxa_atexit((void (*)(void *))sub_10058C198, qword_102480530, (void *)&_mh_execute_header);
}

uint64_t sub_100BCE28C()
{
  sub_100134750(qword_102480550, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480550, (void *)&_mh_execute_header);
}

uint64_t sub_100BCE2EC(uint64_t a1)
{
  if (*(double *)(a1 + 20) <= 0.0) {
    return 0;
  }
  uint64_t result = 0;
  if (*(double *)(a1 + 36) > 0.0)
  {
    double v3 = *(double *)(a1 + 4);
    if (v3 <= 90.0 && v3 >= -90.0)
    {
      double v4 = *(double *)(a1 + 12);
      if (v4 <= 180.0 && v4 >= -180.0)
      {
        BOOL v5 = fabs(v3) >= 0.0000001;
        return fabs(v4) >= 0.0000001 || v5;
      }
    }
  }
  return result;
}

BOOL sub_100BCE380(uint64_t a1, uint64_t a2)
{
  return vabdd_f64(*(double *)(a1 + 4), *(double *)(a2 + 4)) < 0.000001
      && vabdd_f64(*(double *)(a1 + 12), *(double *)(a2 + 12)) < 0.000001;
}

double sub_100BCE3BC(uint64_t a1)
{
  return vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 76));
}

uint64_t sub_100BCE3E8()
{
  sub_10010F274((uint64_t)v5);
  uint64_t v0 = v6[0];
  *(void *)((char *)&v6[2] + *(void *)(v6[0] - 24)) = 8;
  *(_DWORD *)((char *)&v6[1] + *(void *)(v0 - 24)) = *(_DWORD *)((unsigned char *)&v6[1] + *(void *)(v0 - 24)) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  uint64_t v1 = sub_100132EFC(v6, (uint64_t)", ", 2);
  uint64_t v2 = *v1;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 - 24) + 16) = 8;
  *(_DWORD *)((char *)v1 + *(void *)(v2 - 24) + 8) = *(_DWORD *)((unsigned char *)v1 + *(void *)(v2 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v5
  v6[0] = v3;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100BCE640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100BCE65C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024807E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024807E8))
  {
    sub_1000DBB08((uint64_t)&unk_102480568);
    __cxa_atexit((void (*)(void *))sub_100BCE6E0, &unk_102480568, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024807E8);
  }
  return &unk_102480568;
}

uint64_t sub_100BCE6E0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 528);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

double sub_100BCE710@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  memcpy(a2, &unk_101D82F58, 0x230uLL);
  long long v4 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v4;
  *(void *)&long long v4 = *(void *)(a1 + 40);
  *((void *)a2 + 4) = *(void *)(a1 + 32);
  *((void *)a2 + 5) = v4;
  *((_DWORD *)a2 + 12) = *(_DWORD *)(a1 + 48);
  *((unsigned char *)a2 + 52) = *(unsigned char *)(a1 + 52);
  *((_DWORD *)a2 + 14) = *(_DWORD *)(a1 + 56);
  a2[4] = *(_OWORD *)(a1 + 64);
  *(void *)&long long v4 = *(void *)(a1 + 88);
  *((void *)a2 + 10) = *(void *)(a1 + 80);
  *((void *)a2 + 11) = v4;
  *((unsigned char *)a2 + 96) = *(unsigned char *)(a1 + 96);
  *(_OWORD *)((char *)a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)((char *)a2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)((char *)a2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)((char *)a2 + 152) = *(_OWORD *)(a1 + 152);
  long long v5 = *(_OWORD *)(a1 + 280);
  *(_OWORD *)((char *)a2 + 264) = *(_OWORD *)(a1 + 264);
  *(_OWORD *)((char *)a2 + 280) = v5;
  *(_OWORD *)((char *)a2 + 248) = *(_OWORD *)(a1 + 248);
  *(_OWORD *)((char *)a2 + 232) = *(_OWORD *)(a1 + 232);
  *(_OWORD *)((char *)a2 + 216) = *(_OWORD *)(a1 + 216);
  *(_OWORD *)((char *)a2 + 200) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)((char *)a2 + 184) = *(_OWORD *)(a1 + 184);
  *(_OWORD *)((char *)a2 + 168) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)((char *)a2 + 296) = *(_OWORD *)(a1 + 296);
  *((_DWORD *)a2 + 78) = *(_DWORD *)(a1 + 312);
  *((_DWORD *)a2 + 79) = *(_DWORD *)(a1 + 316);
  long long v6 = *(_OWORD *)(a1 + 336);
  a2[20] = *(_OWORD *)(a1 + 320);
  a2[21] = v6;
  *((_DWORD *)a2 + 88) = *(_DWORD *)(a1 + 352);
  *((unsigned char *)a2 + 356) = *(unsigned char *)(a1 + 356);
  *((void *)a2 + 45) = *(void *)(a1 + 360);
  long long v7 = *(_OWORD *)(a1 + 384);
  a2[23] = *(_OWORD *)(a1 + 368);
  a2[24] = v7;
  a2[25] = *(_OWORD *)(a1 + 400);
  *((void *)a2 + 52) = *(void *)(a1 + 416);
  *((unsigned char *)a2 + 424) = *(unsigned char *)(a1 + 424);
  *((unsigned char *)a2 + 425) = *(unsigned char *)(a1 + 425);
  a2[27] = *(_OWORD *)(a1 + 432);
  *((void *)a2 + 56) = *(void *)(a1 + 448);
  *((_DWORD *)a2 + 114) = *(_DWORD *)(a1 + 456);
  long long v8 = *(_OWORD *)(a1 + 480);
  a2[29] = *(_OWORD *)(a1 + 464);
  a2[30] = v8;
  a2[31] = *(_OWORD *)(a1 + 496);
  int v9 = *(unsigned __int8 *)(a1 + 576);
  if (v9 == 1) {
    int v10 = 1;
  }
  else {
    int v10 = 2 * (v9 == 2);
  }
  *((_DWORD *)a2 + 128) = v10;
  *((void *)a2 + 65) = *(void *)(a1 + 584);
  *((void *)a2 + 66) = *(void *)(a1 + 592);
  double result = *(double *)(a1 + 616);
  *((double *)a2 + 67) = result;
  *((void *)a2 + 68) = *(void *)(a1 + 624);
  *((unsigned char *)a2 + 552) = *(unsigned char *)(a1 + 636);
  return result;
}

void sub_100BCF440(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_100BCF470(uint64_t a1)
{
  if (!*(void *)(a1 + 208)) {
    sub_100681630();
  }
  return a1 + 208;
}

void sub_100BCF530(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 24), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EA2E8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    long long v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonClient::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EA2E8);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonClient::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100BD4E8C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100BCF6EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BCF710(uint64_t a1)
{
  return sub_10002B34C(a1 - 8);
}

void sub_100BCF718(uint64_t a1)
{
  sub_10002B34C(a1 - 8);

  operator delete();
}

void sub_100BCF754(uint64_t a1, CLConnectionMessage **a2)
{
  id v3 = objc_alloc_init((Class)NSAutoreleasePool);
  uint64_t v4 = CLConnectionMessage::name(*a2);
  if (*(char *)(v4 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)v4, *(void *)(v4 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    uint64_t v11 = *(void *)(v4 + 16);
    *(_OWORD *)long long __p = v5;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  long long v6 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
  {
    uint64_t v7 = __p;
    if (v11 < 0) {
      uint64_t v7 = (void **)__p[0];
    }
    *(_DWORD *)uint64_t buf = 136446210;
    int v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Got unhandled mesage of type %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    long long v8 = __p;
    if (v11 < 0) {
      long long v8 = (void **)__p[0];
    }
    int v12 = 136446210;
    int v13 = v8;
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageUnknown(std::shared_ptr<CLConnectionMessage>)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100BCF97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100BCF9C0()
{
}

void sub_100BD1170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100BEB770((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BD130C()
{
  sub_1010AB420((uint64_t)v4);
  for (uint64_t i = v5; i; uint64_t i = (void *)*i)
  {
    sub_100BEBD98((uint64_t)v9, (uint64_t)(i + 5));
    uint64_t v1 = qword_102480838;
    sub_100BEBD98((uint64_t)v6, (uint64_t)v9);
    long long v8 = 0;
    uint64_t v2 = operator new(0x28uLL);
    *uint64_t v2 = off_1022EA558;
    sub_100BEC2D0((uint64_t)(v2 + 1), (uint64_t)v6);
    long long v8 = v2;
    sub_100BEBAF4(v1, (uint64_t)(i + 2), (uint64_t)v7);
    sub_100BEB770(v7);
    sub_100BEC350(v6);
    sub_100BEC350(v9);
  }
  return sub_100BEC3D4((uint64_t)v4);
}

void sub_100BD1410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

uint64_t sub_100BD145C()
{
  sub_1014FA698((uint64_t)v4);
  for (uint64_t i = v5; i; uint64_t i = (void *)*i)
  {
    sub_100BEC4A4((uint64_t)v9, (uint64_t)(i + 5));
    uint64_t v1 = qword_102480838;
    sub_100BEC4A4((uint64_t)v6, (uint64_t)v9);
    long long v8 = 0;
    uint64_t v2 = operator new(0x28uLL);
    *uint64_t v2 = off_1022EA5E8;
    sub_100BEC710((uint64_t)(v2 + 1), (uint64_t)v6);
    long long v8 = v2;
    sub_100BEBAF4(v1, (uint64_t)(i + 2), (uint64_t)v7);
    sub_100BEB770(v7);
    sub_100BECA68(v6);
    sub_100BECA68(v9);
  }
  return sub_100BECAEC((uint64_t)v4);
}

void sub_100BD1560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

uint64_t sub_100BD15AC(char a1)
{
  sub_101122A58((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100BECBBC((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100BECBBC((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EA668;
    sub_100BECE64((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100BED400(v8);
    sub_100BED400(v12);
  }
  return sub_100BED484((uint64_t)v6);
}

void sub_100BD16C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD170C()
{
  sub_100F5C6E4((uint64_t)v4);
  for (uint64_t i = v5; i; uint64_t i = (void *)*i)
  {
    sub_100BED554((uint64_t)v9, (uint64_t)(i + 5));
    uint64_t v1 = qword_102480838;
    sub_100BED554((uint64_t)v6, (uint64_t)v9);
    long long v8 = 0;
    uint64_t v2 = operator new(0x28uLL);
    *uint64_t v2 = off_1022EA6E8;
    sub_100BED7C0((uint64_t)(v2 + 1), (uint64_t)v6);
    long long v8 = v2;
    sub_100BEBAF4(v1, (uint64_t)(i + 2), (uint64_t)v7);
    sub_100BEB770(v7);
    sub_100BEDEB0(v6);
    sub_100BEDEB0(v9);
  }
  return sub_100BEDF34((uint64_t)v4);
}

void sub_100BD1810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

uint64_t sub_100BD185C()
{
  sub_100ECED18((uint64_t)v4);
  for (uint64_t i = v5; i; uint64_t i = (void *)*i)
  {
    sub_100BEE004((uint64_t)v9, (uint64_t)(i + 5));
    uint64_t v1 = qword_102480838;
    sub_100BEE004((uint64_t)v6, (uint64_t)v9);
    long long v8 = 0;
    uint64_t v2 = operator new(0x28uLL);
    *uint64_t v2 = off_1022EA768;
    sub_100BEE270((uint64_t)(v2 + 1), (uint64_t)v6);
    long long v8 = v2;
    sub_100BEBAF4(v1, (uint64_t)(i + 2), (uint64_t)v7);
    sub_100BEB770(v7);
    sub_100BEE960(v6);
    sub_100BEE960(v9);
  }
  return sub_100BEE9E4((uint64_t)v4);
}

void sub_100BD1960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

uint64_t sub_100BD19AC(char a1)
{
  sub_10047EB64((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_10048C4EC((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_10048C4EC((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EA7E8;
    sub_10048ADB0((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_10048BD00(v8);
    sub_10048BD00(v12);
  }
  return sub_10048C62C((uint64_t)v6);
}

void sub_100BD1AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD1B0C(char a1)
{
  sub_101228E1C((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100BEEF38((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100BEEF38((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EA868;
    sub_100BEF1D8((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100BEF258(v8);
    sub_100BEF258(v12);
  }
  return sub_100BEF2DC((uint64_t)v6);
}

void sub_100BD1C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD1C6C(char a1)
{
  sub_100B3A2F4((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100B3E604((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100B3E604((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EA8E8;
    sub_100B3DBD8((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100B3E190(v8);
    sub_100B3E190(v12);
  }
  return sub_100B3E744((uint64_t)v6);
}

void sub_100BD1D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD1DCC(char a1)
{
  sub_100EB5EB8((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100BEFA58((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100BEFA58((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EA968;
    sub_100BEFD00((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100BF0280(v8);
    sub_100BF0280(v12);
  }
  return sub_100BF0304((uint64_t)v6);
}

void sub_100BD1EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD1F2C(char a1)
{
  sub_100C99838((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100BF03D4((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100BF03D4((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EAA48;
    sub_100BF067C((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100BF0B98(v8);
    sub_100BF0B98(v12);
  }
  return sub_100BF0C1C((uint64_t)v6);
}

void sub_100BD2040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD208C(char a1)
{
  sub_1009A0DC8((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_1009A4778((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_1009A4778((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EAAC8;
    sub_1009A3CE8((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_1009A4170(v8);
    sub_1009A4170(v12);
  }
  return sub_1009A48B8((uint64_t)v6);
}

void sub_100BD21A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD21EC(char a1)
{
  sub_100DDFDEC((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100BF1398((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100BF1398((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EAB48;
    sub_100BF1640((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100BF1B5C(v8);
    sub_100BF1B5C(v12);
  }
  return sub_100BF1BE0((uint64_t)v6);
}

void sub_100BD2300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD234C(char a1)
{
  sub_100F0B1B0((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100BF1CB0((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100BF1CB0((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EABC8;
    sub_100BF1F58((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100BF2474(v8);
    sub_100BF2474(v12);
  }
  return sub_100BF24F8((uint64_t)v6);
}

void sub_100BD2460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD24AC(char a1)
{
  sub_100924E08((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_1009272F4((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_1009272F4((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EAC48;
    sub_100926894((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100926CEC(v8);
    sub_100926CEC(v12);
  }
  return sub_100927434((uint64_t)v6);
}

void sub_100BD25C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD260C(char a1)
{
  sub_1011472E8((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100BF2C74((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100BF2C74((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EACC8;
    sub_100BF2F1C((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100BF3438(v8);
    sub_100BF3438(v12);
  }
  return sub_100BF34BC((uint64_t)v6);
}

void sub_100BD2720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD276C(char a1)
{
  sub_101475380((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100BF358C((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100BF358C((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EAD48;
    sub_100BF3834((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100BF3D50(v8);
    sub_100BF3D50(v12);
  }
  return sub_100BF3DD4((uint64_t)v6);
}

void sub_100BD2880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD28CC(char a1)
{
  sub_10086CF74((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_10086FDFC((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_10086FDFC((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EADC8;
    sub_10086F39C((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_10086F7F4(v8);
    sub_10086F7F4(v12);
  }
  return sub_10086FF3C((uint64_t)v6);
}

void sub_100BD29E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD2A2C(char a1)
{
  sub_100F63080((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100BF4550((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100BF4550((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EAE48;
    sub_100BF47F8((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100BF4D14(v8);
    sub_100BF4D14(v12);
  }
  return sub_100BF4D98((uint64_t)v6);
}

void sub_100BD2B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD2B8C(char a1)
{
  sub_1005CA848((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_1005D1F34((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_1005D1F34((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EAEC8;
    sub_1005CF9DC((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_1005D192C(v8);
    sub_1005D192C(v12);
  }
  return sub_1005D2074((uint64_t)v6);
}

void sub_100BD2CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD2CEC(char a1)
{
  sub_10103BF44((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100BF5514((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100BF5514((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EAF48;
    sub_100BF57BC((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100BF5CD8(v8);
    sub_100BF5CD8(v12);
  }
  return sub_100BF5D5C((uint64_t)v6);
}

void sub_100BD2E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD2E4C(char a1)
{
  sub_1012612FC((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100BF5E2C((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100BF5E2C((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EAFC8;
    sub_100BF60D4((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100BF65F0(v8);
    sub_100BF65F0(v12);
  }
  return sub_100BF6674((uint64_t)v6);
}

void sub_100BD2F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD2FAC(char a1)
{
  sub_1012EBF80((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100BF6744((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100BF6744((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EB048;
    sub_100BF69EC((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100BF6F08(v8);
    sub_100BF6F08(v12);
  }
  return sub_100BF6F8C((uint64_t)v6);
}

void sub_100BD30C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD310C(char a1)
{
  sub_1009036D0((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100905714((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100905714((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EB0C8;
    sub_100904CB4((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_10090510C(v8);
    sub_10090510C(v12);
  }
  return sub_100905854((uint64_t)v6);
}

void sub_100BD3220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD326C(char a1)
{
  sub_1014F646C((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100BF7708((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100BF7708((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EB148;
    sub_100BF79B0((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100BF7ECC(v8);
    sub_100BF7ECC(v12);
  }
  return sub_100BF7F50((uint64_t)v6);
}

void sub_100BD3380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD33CC(char a1)
{
  sub_100A66460((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100A67998((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100A67998((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EB1C8;
    sub_100A672B0((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100A67524(v8);
    sub_100A67524(v12);
  }
  return sub_100A67AD8((uint64_t)v6);
}

void sub_100BD34E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD352C(char a1)
{
  sub_100A1A6CC((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100A1C81C((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100A1C81C((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EB248;
    sub_100A1BF50((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100A1C3A8(v8);
    sub_100A1C3A8(v12);
  }
  return sub_100A1C95C((uint64_t)v6);
}

void sub_100BD3640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD368C(char a1)
{
  sub_10158C548((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100BF8D78((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100BF8D78((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EB2C8;
    sub_100BF9020((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100BF953C(v8);
    sub_100BF953C(v12);
  }
  return sub_100BF95C0((uint64_t)v6);
}

void sub_100BD37A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD37EC(char a1)
{
  sub_10113F140((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100BF9690((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100BF9690((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EB348;
    sub_100BF9938((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100BF9E54(v8);
    sub_100BF9E54(v12);
  }
  return sub_100BF9ED8((uint64_t)v6);
}

void sub_100BD3900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD394C(char a1)
{
  sub_101003094((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100BF9FA8((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100BF9FA8((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EB3C8;
    sub_100BFA250((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100BFA76C(v8);
    sub_100BFA76C(v12);
  }
  return sub_100BFA7F0((uint64_t)v6);
}

void sub_100BD3A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD3AAC(char a1)
{
  sub_100F90074((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100BFA8C0((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100BFA8C0((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EB448;
    sub_100BFAB68((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100BFB084(v8);
    sub_100BFB084(v12);
  }
  return sub_100BFB108((uint64_t)v6);
}

void sub_100BD3BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD3C0C(char a1)
{
  sub_100F9D18C((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100BFB1D8((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100BFB1D8((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EB4C8;
    sub_100BFB478((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100BFB4F8(v8);
    sub_100BFB4F8(v12);
  }
  return sub_100BFB57C((uint64_t)v6);
}

void sub_100BD3D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD3D6C(char a1)
{
  sub_101336764((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100BFB64C((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100BFB64C((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EB548;
    sub_100BFB8F4((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100BFBE10(v8);
    sub_100BFBE10(v12);
  }
  return sub_100BFBE94((uint64_t)v6);
}

void sub_100BD3E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD3ECC(char a1)
{
  sub_100A6E610((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100A6FF38((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100A6FF38((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EB5C8;
    sub_100A6F66C((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100A6FAC4(v8);
    sub_100A6FAC4(v12);
  }
  return sub_100A70078((uint64_t)v6);
}

void sub_100BD3FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD402C(char a1)
{
  sub_100EFE2B0((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100BFC610((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100BFC610((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EB648;
    sub_100BFC8B8((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100BFCDD4(v8);
    sub_100BFCDD4(v12);
  }
  return sub_100BFCE58((uint64_t)v6);
}

void sub_100BD4140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100BD418C(char a1)
{
  sub_1012CB7FC((uint64_t)v6);
  for (uint64_t i = v7; i; uint64_t i = (void *)*i)
  {
    sub_100BFCF28((uint64_t)v12, (uint64_t)(i + 5));
    uint64_t v3 = qword_102480838;
    sub_100BFCF28((uint64_t)v8, (uint64_t)v12);
    char v9 = a1;
    uint64_t v11 = 0;
    uint64_t v4 = operator new(0x30uLL);
    *(void *)uint64_t v4 = off_1022EB6C8;
    sub_100BFD1D0((uint64_t)(v4 + 8), (uint64_t)v8);
    v4[40] = v9;
    uint64_t v11 = v4;
    sub_100BEBAF4(v3, (uint64_t)(i + 2), (uint64_t)v10);
    sub_100BEB770(v10);
    sub_100BFD6EC(v8);
    sub_100BFD6EC(v12);
  }
  return sub_100BFD770((uint64_t)v6);
}

void sub_100BD42A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t *sub_100BD42EC(uint64_t a1, char *a2, uint64_t a3)
{
  long long v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  sub_100134750((void *)v7 + 2, a2);
  sub_100BEC084((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_100103388(a1 + 24, (uint64_t)(v7 + 16));
  if (sub_100BFDAE4(a1, v9[0])) {
    v9[0] = 0;
  }
  return sub_100BEC02C((uint64_t *)v9);
}

void sub_100BD4398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100BEC02C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100BD43B0(uint64_t a1, char *a2, uint64_t a3)
{
  long long v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  sub_100134750((void *)v7 + 2, a2);
  sub_100BEC084((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_100103388(a1 + 24, (uint64_t)(v7 + 16));
  if (sub_100BFDAE4(a1, v9[0])) {
    v9[0] = 0;
  }
  return sub_100BEC02C((uint64_t *)v9);
}

void sub_100BD445C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100BEC02C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100BD4474(uint64_t a1, char *a2, uint64_t a3)
{
  long long v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  sub_100134750((void *)v7 + 2, a2);
  sub_100BEC084((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_100103388(a1 + 24, (uint64_t)(v7 + 16));
  if (sub_100BFDAE4(a1, v9[0])) {
    v9[0] = 0;
  }
  return sub_100BEC02C((uint64_t *)v9);
}

void sub_100BD4520(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100BEC02C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100BD4538(uint64_t a1, char *a2, uint64_t a3)
{
  long long v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  sub_100134750((void *)v7 + 2, a2);
  sub_100BEC084((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_100103388(a1 + 24, (uint64_t)(v7 + 16));
  if (sub_100BFDAE4(a1, v9[0])) {
    v9[0] = 0;
  }
  return sub_100BEC02C((uint64_t *)v9);
}

void sub_100BD45E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100BEC02C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100BD45FC(uint64_t a1, char *a2, uint64_t a3)
{
  long long v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  sub_100134750((void *)v7 + 2, a2);
  sub_100BEC084((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_100103388(a1 + 24, (uint64_t)(v7 + 16));
  if (sub_100BFDAE4(a1, v9[0])) {
    v9[0] = 0;
  }
  return sub_100BEC02C((uint64_t *)v9);
}

void sub_100BD46A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100BEC02C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100BD46C0(uint64_t a1, char *a2, uint64_t a3)
{
  long long v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  sub_100134750((void *)v7 + 2, a2);
  sub_100BEC084((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_100103388(a1 + 24, (uint64_t)(v7 + 16));
  if (sub_100BFDAE4(a1, v9[0])) {
    v9[0] = 0;
  }
  return sub_100BEC02C((uint64_t *)v9);
}

void sub_100BD476C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100BEC02C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100BD4784(uint64_t a1, char *a2, uint64_t a3)
{
  long long v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  sub_100134750((void *)v7 + 2, a2);
  sub_100BEC084((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_100103388(a1 + 24, (uint64_t)(v7 + 16));
  if (sub_100BFDAE4(a1, v9[0])) {
    v9[0] = 0;
  }
  return sub_100BEC02C((uint64_t *)v9);
}

void sub_100BD4830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100BEC02C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100BD4848(uint64_t a1, char *a2, uint64_t a3)
{
  long long v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  sub_100134750((void *)v7 + 2, a2);
  sub_100BEC084((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_100103388(a1 + 24, (uint64_t)(v7 + 16));
  if (sub_100BFDAE4(a1, v9[0])) {
    v9[0] = 0;
  }
  return sub_100BEC02C((uint64_t *)v9);
}

void sub_100BD48F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100BEC02C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100BD490C(uint64_t a1, char *a2, uint64_t a3)
{
  long long v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  sub_100134750((void *)v7 + 2, a2);
  sub_100BEC084((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_100103388(a1 + 24, (uint64_t)(v7 + 16));
  if (sub_100BFDAE4(a1, v9[0])) {
    v9[0] = 0;
  }
  return sub_100BEC02C((uint64_t *)v9);
}

void sub_100BD49B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100BEC02C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100BD49D0(uint64_t a1, char *a2, uint64_t a3)
{
  long long v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  sub_100134750((void *)v7 + 2, a2);
  sub_100BEC084((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_100103388(a1 + 24, (uint64_t)(v7 + 16));
  if (sub_100BFDAE4(a1, v9[0])) {
    v9[0] = 0;
  }
  return sub_100BEC02C((uint64_t *)v9);
}

void sub_100BD4A7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100BEC02C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100BD4A94(uint64_t a1, char *a2, uint64_t a3)
{
  long long v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  sub_100134750((void *)v7 + 2, a2);
  sub_100BEC084((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_100103388(a1 + 24, (uint64_t)(v7 + 16));
  if (sub_100BFDAE4(a1, v9[0])) {
    v9[0] = 0;
  }
  return sub_100BEC02C((uint64_t *)v9);
}

void sub_100BD4B40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100BEC02C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100BD4B58(uint64_t a1, char *a2, uint64_t a3)
{
  long long v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  sub_100134750((void *)v7 + 2, a2);
  sub_100BEC084((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_100103388(a1 + 24, (uint64_t)(v7 + 16));
  if (sub_100BFDAE4(a1, v9[0])) {
    v9[0] = 0;
  }
  return sub_100BEC02C((uint64_t *)v9);
}

void sub_100BD4C04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100BEC02C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100BD4C1C(uint64_t a1, char *a2, uint64_t a3)
{
  long long v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  sub_100134750((void *)v7 + 2, a2);
  sub_100BEC084((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_100103388(a1 + 24, (uint64_t)(v7 + 16));
  if (sub_100BFDAE4(a1, v9[0])) {
    v9[0] = 0;
  }
  return sub_100BEC02C((uint64_t *)v9);
}

void sub_100BD4CC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100BEC02C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100BD4CE0(uint64_t a1, char *a2, uint64_t a3)
{
  long long v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  sub_100134750((void *)v7 + 2, a2);
  sub_100BEC084((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_100103388(a1 + 24, (uint64_t)(v7 + 16));
  if (sub_100BFDAE4(a1, v9[0])) {
    v9[0] = 0;
  }
  return sub_100BEC02C((uint64_t *)v9);
}

void sub_100BD4D8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100BEC02C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100BD4DA4(uint64_t a1, char *a2, uint64_t a3)
{
  long long v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  sub_100134750((void *)v7 + 2, a2);
  sub_100BEC084((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_100103388(a1 + 24, (uint64_t)(v7 + 16));
  if (sub_100BFDAE4(a1, v9[0])) {
    v9[0] = 0;
  }
  return sub_100BEC02C((uint64_t *)v9);
}

void sub_100BD4E50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100BEC02C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BD4E6C(uint64_t a1)
{
  return CLConnection::getAuditToken(*(CLConnection **)(a1 + 264));
}

uint64_t sub_100BD4E74(uint64_t a1)
{
  return *(unsigned int *)(a1 + 272);
}

BOOL sub_100BD4E7C(uint64_t a1)
{
  return *(void *)(a1 + 264) == 0;
}

uint64_t sub_100BD4E8C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  sub_1000E9354(v27);
  int v7 = *a3;
  if (*a3 == 11)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    int v17 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Got active change notification; updating requests\"}",
        buf,
        0x12u);
    }
  }
  else
  {
    if (v7 == 21)
    {
      CFDataRef v8 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)(a4 + 880), 16);
      if (!v8) {
        return sub_10013F3C4(v27);
      }
      if (sub_1000EA8A4((uint64_t)v27, "kCLConnectionMessageVehicleHeadingKey", (uint64_t)v8))
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022EA308);
        }
        int v13 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v14 = *(void *)(a1 + 48);
          uint64_t v15 = *(void *)(a4 + 888);
          uint64_t v16 = *(void *)(a4 + 880);
          *(_DWORD *)uint64_t buf = 138543875;
          *(void *)&uint8_t buf[4] = v14;
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(void *)&buf[14] = v15;
          __int16 v35 = 2049;
          uint64_t v36 = v16;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Sending,vehicle heading,to client,%{public}@,time,%{public}.3lf,heading,%{private}.3lf", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022EA308);
          }
          uint64_t v19 = *(void *)(a1 + 48);
          uint64_t v20 = *(void *)(a4 + 888);
          uint64_t v21 = *(void *)(a4 + 880);
          int v28 = 138543875;
          uint64_t v29 = v19;
          __int16 v30 = 2050;
          uint64_t v31 = v20;
          __int16 v32 = 2049;
          uint64_t v33 = v21;
          unint64_t v22 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v22);
          if (v22 != buf) {
            free(v22);
          }
        }
        *(void *)uint64_t buf = sub_1000E9358((uint64_t)v27);
        sub_100BD5460(a1);
      }
      goto LABEL_12;
    }
    if (v7 == 20)
    {
      CFDataRef v8 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)(a4 + 848), 32);
      if (v8)
      {
        if (sub_1000EA8A4((uint64_t)v27, "kCLConnectionMessageVehicleSpeedKey", (uint64_t)v8))
        {
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022EA308);
          }
          char v9 = qword_102419528;
          if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v10 = *(void *)(a1 + 48);
            uint64_t v11 = *(void *)(a4 + 856);
            uint64_t v12 = *(void *)(a4 + 848);
            *(_DWORD *)uint64_t buf = 138543875;
            *(void *)&uint8_t buf[4] = v10;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(void *)&buf[14] = v11;
            __int16 v35 = 2049;
            uint64_t v36 = v12;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending,vehicle speed,to client,%{public}@,time,%{public}.3lf,speed,%{private}.3lf", buf, 0x20u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022EA308);
            }
            uint64_t v23 = *(void *)(a1 + 48);
            uint64_t v24 = *(void *)(a4 + 856);
            uint64_t v25 = *(void *)(a4 + 848);
            int v28 = 138543875;
            uint64_t v29 = v23;
            __int16 v30 = 2050;
            uint64_t v31 = v24;
            __int16 v32 = 2049;
            uint64_t v33 = v25;
            uint64_t v26 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v26);
            if (v26 != buf) {
              free(v26);
            }
          }
          *(void *)uint64_t buf = sub_1000E9358((uint64_t)v27);
          sub_100BD53BC(a1);
        }
LABEL_12:
        CFRelease(v8);
      }
    }
  }
  return sub_10013F3C4(v27);
}

void sub_100BD538C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_100BD53BC(uint64_t a1)
{
  sub_10048C758(&off_1022ED838, &v2);
  uint64_t v4 = v2;
  long long v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_1000EFC20(a1, (uint64_t)&v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100BD543C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BD5460(uint64_t a1)
{
  sub_10048C758(&off_1022ED840, &v2);
  uint64_t v4 = v2;
  long long v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_1000EFC20(a1, (uint64_t)&v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100BD54E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BD5504(uint64_t a1, uint64_t a2)
{
  sub_1000E9354(v7);
  sub_100D6A2C0((float *)a2, (float *)(a2 + 12), *(unsigned char *)(a2 + 24), (uint64_t)v7);
  *(void *)uint64_t buf = sub_1000E9358((uint64_t)v7);
  sub_100BD56F4(a1);
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_1022EA348);
  }
  uint64_t v4 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Sent gyro bias estimation message", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1022EA348);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::onGyroBiasEstimatorNotification(const CLMotionTypeGyroBiasAndVariance &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return sub_10013F3C4(v7);
}

void sub_100BD56D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_100BD56F4(uint64_t a1)
{
  sub_10048C758(&off_1022ED848, &v2);
  uint64_t v4 = v2;
  long long v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_1000EFC20(a1, (uint64_t)&v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100BD5774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BD5798(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  sub_1000E9354(v12);
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022EA368);
  }
  uint64_t v7 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *a3;
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Received GMM notification %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022EA368);
    }
    int v10 = *a3;
    int v13 = 67109120;
    int v14 = v10;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::onGmmNotification(int, const CLGeomagneticModelProvider_Type::Notification &, const CLGeomagneticModelProvider_Type::NotificationData &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  if (!*a3)
  {
    sub_100D6A1F0(a4, (uint64_t)v12);
    *(void *)uint64_t buf = sub_1000E9358((uint64_t)v12);
    sub_100BD59BC(a1);
  }
  return sub_10013F3C4(v12);
}

void sub_100BD5998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_100BD59BC(uint64_t a1)
{
  sub_10048C758(&off_1022ED850, &v2);
  uint64_t v4 = v2;
  long long v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_1000EFC20(a1, (uint64_t)&v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100BD5A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BD5A60(uint64_t a1, uint64_t a2, int *a3, UInt8 *a4)
{
  if (*a3)
  {
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022EA388);
    }
    long long v5 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_ERROR))
    {
      int v6 = *a3;
      *(_DWORD *)uint64_t buf = 67109120;
      int v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unexpected notification in onPressureBias,notification,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1022EA388);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::onPressureBias(int, const CLPressureBias_Type::Notification &, const CLPressureBias_Type::NotificationData &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    sub_1000E9354(buf);
    sub_100D6A4E8(a4, (uint64_t)buf);
    sub_1000E9358((uint64_t)buf);
    sub_100BD5C78(a1);
    sub_10013F3C4(buf);
  }
}

void sub_100BD5C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_100BD5C78(uint64_t a1)
{
  sub_10048C758(&off_1022ED858, &v2);
  uint64_t v4 = v2;
  long long v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_1000EFC20(a1, (uint64_t)&v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100BD5CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BD5D1C()
{
  id v0 = objc_alloc_init((Class)NSAutoreleasePool);
  BOOL v1 = sub_10087E2DC((int)&v2);
  uint64_t v3 = CMDeviceHasOriginalBackCamera;
  uint64_t v4 = +[NSNumber numberWithBool:v1];
  +[NSDictionary dictionaryWithObjects:&v4 forKeys:&v3 count:1];
  CLConnectionMessage::sendReply();
}

void sub_100BD5DD8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

void sub_100BD5E00()
{
  id v0 = objc_alloc_init((Class)NSAutoreleasePool);
  BOOL v1 = sub_10087EE38((int)&v4);
  if (v1)
  {
    uint64_t v7 = CMCameraVcmActuatorId;
    int v8 = v1;
    +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
    CLConnectionMessage::sendReply();
  }
  else
  {
    sub_100134750(&__p, "kCLConnectionMessageError");
    uint64_t v5 = CMErrorMessage;
    uint64_t v6 = &off_102393140;
    +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
    CLConnectionMessage::sendReply();
    if (v3 < 0) {
      operator delete(__p);
    }
  }
}

void sub_100BD5F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_100BD5F54()
{
  id v0 = objc_alloc_init((Class)NSAutoreleasePool);
  id v1 = sub_10087F1E0((int)&v4);
  if (v1)
  {
    uint64_t v7 = CMCompassCalibrationData;
    id v8 = v1;
    +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
    CLConnectionMessage::sendReply();
  }
  else
  {
    sub_100134750(&__p, "kCLConnectionMessageError");
    uint64_t v5 = CMErrorMessage;
    uint64_t v6 = &off_102393140;
    +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
    CLConnectionMessage::sendReply();
    if (v3 < 0) {
      operator delete(__p);
    }
  }
}

void sub_100BD6064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100BD60A8(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

void sub_100BD60B0(void *a1)
{
  sub_100134750(buf, "kCLConnectionMessageLocation");
  if ((*(uint64_t (**)(void *, uint8_t *))(*a1 + 48))(a1, buf))
  {
    int v2 = 1;
  }
  else
  {
    sub_100134750(__p, "kCLConnectionMessageSignificantLocationChange");
    int v2 = (*(uint64_t (**)(void *, void **))(*a1 + 48))(a1, __p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  if (SBYTE3(v13) < 0)
  {
    operator delete(*(void **)buf);
    if (!v2) {
      return;
    }
  }
  else if (!v2)
  {
    return;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022EA328);
  }
  char v3 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = a1[6];
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v10 = 2082;
    int v11 = "";
    __int16 v12 = 2114;
    uint64_t v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Sending denied error message\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  CFStringRef v7 = @"kCLConnectionMessageErrorKey";
  id v8 = &off_102393158;
  *(void *)uint64_t buf = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
  sub_100BD62CC((uint64_t)a1);
}

void sub_100BD628C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BD62CC(uint64_t a1)
{
  sub_1000E9420(&off_1022ED868, &v2);
  uint64_t v4 = v2;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_1000EFC20(a1, (uint64_t)&v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100BD634C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BD6370(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 368);
}

uint64_t sub_100BD6378(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 369);
  *(unsigned char *)(a1 + 369) = 0;
  return v1;
}

uint64_t sub_100BD6388(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 370);
  *(unsigned char *)(a1 + 370) = 0;
  return v1;
}

__n128 sub_100BD63C0(__n128 **a1, __n128 *a2)
{
  uint64_t v4 = (__n128 *)operator new(0x30uLL);
  unint64_t v5 = a2->n128_u64[1];
  v4[1].n128_u64[0] = a2->n128_u64[0];
  v4[1].n128_u64[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = a2[1];
  v4[2] = result;
  unint64_t v7 = (unint64_t)*a1;
  v4->n128_u64[0] = (unint64_t)*a1;
  v4->n128_u64[1] = (unint64_t)a1;
  *(void *)(v7 + 8) = v4;
  *a1 = v4;
  a1[2] = (__n128 *)((char *)a1[2] + 1);
  return result;
}

void sub_100BD6428(uint64_t a1, unint64_t a2)
{
}

id sub_100BD643C(uint64_t a1)
{
  return sub_100148BB0(*(void *)(a1 + 16), *(void *)(a1 + 48), 0);
}

void sub_100BD6450(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, int a4@<W3>, std::string *a5@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  std::string __p = *a3;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  a3->__r_.__value_.__r.__words[0] = 0;
  sub_100018728(v5, a2, &__p, a4, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_100BD64A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BD64C4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 371);
}

uint64_t sub_100BD64CC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 194);
}

id sub_100BD64D4(uint64_t a1)
{
  id v1 = sub_1000B59AC(*(void *)(a1 + 16), *(void *)(a1 + 48));

  return _[v1 stringForKey:@"PlatformSpecificBundleId" defaultValue:0];
}

uint64_t sub_100BD6518(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  BOOL v17 = 0;
  uint64_t v5 = *(void **)(a1 + 48);
  unsigned int v6 = sub_1007DBFE0(*(void *)(a1 + 16), (uint64_t)v5);
  if (!a3) {
    return 0;
  }
  unsigned int v7 = v6;
  uint64_t v8 = sub_1000A6958();
  char v9 = sub_1000D29FC(v8, (uint64_t)a3, &v17);
  uint64_t result = 0;
  if (v17) {
    char v9 = 1;
  }
  if ((v9 & 1) == 0 && ((v7 ^ 1) & 1) == 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    int v11 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v19 = 0;
      __int16 v20 = 2082;
      uint64_t v21 = "";
      __int16 v22 = 2114;
      uint64_t v23 = v5;
      __int16 v24 = 2114;
      CFStringRef v25 = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Resetting auth and updating daemon cache\", \"ckp\":%{public, location:escape_only}@, \"daemonCacheKey\":%{public, location:escape_only}@}", buf, 0x26u);
    }
    uint64_t v12 = *(void *)(a1 + 16);
    sub_100134750(__p, "ClientRemoved");
    sub_1007A9D70(v12, v5, 1, (uint64_t *)__p);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v13 = sub_1000A6958();
    buf[0] = 1;
    sub_1000EA52C(v13, a3, buf);
    uint64_t v14 = sub_1000A6958();
    (*(void (**)(uint64_t))(*(void *)v14 + 944))(v14);
    return 1;
  }
  return result;
}

void sub_100BD66F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BD6714(uint64_t a1, uint64_t a2)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022EA328);
  }
  uint64_t v4 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 272);
    uint64_t v6 = *(void *)(a1 + 48);
    v10.__shared_weak_owners_ = 68289538;
    __int16 v11 = 2082;
    uint64_t v12 = "";
    __int16 v13 = 1026;
    int v14 = v5;
    __int16 v15 = 2114;
    uint64_t v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning MessageRegistration received by daemon client after first message\", \"ClientPid\":%{public}d, \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&v10.__shared_weak_owners_, 0x22u);
  }
  unsigned int v7 = *(CLConnection **)(a1 + 264);
  CLConnection::pause(v7);
  *(void *)(a1 + 264) = 0;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a2 + 8);
  v10.__vftable = *(std::__shared_weak_count_vtbl **)a2;
  v10.__shared_owners_ = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1007A4BCC(v8, v7, &v10);
  if (v10.__shared_owners_) {
    sub_1000DB0A0((std::__shared_weak_count *)v10.__shared_owners_);
  }
}

void sub_100BD6864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BD6884(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  uint64_t v8 = 0;
  id v5 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessagePurposeKey"];
  if (v5 && sub_1004D7A94(v5, &v8))
  {
    sub_1007CC1FC(*(void *)(a1 + 16), *(void *)(a1 + 48), v8);
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    uint64_t v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v12 = "kCLConnectionMessagePurposeKey";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      int v9 = 136446210;
      std::__shared_weak_count v10 = "kCLConnectionMessagePurposeKey";
      unsigned int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessagePurpose(std::shared_ptr<CLConnectionMessage>)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_100BD6A94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100BD6AC4(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_100134750(buf, "com.apple.locationd.effective_bundle");
  char v5 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 40))(a1, buf);
  char v6 = v5;
  if (v18 < 0)
  {
    operator delete(*(void **)buf);
    if (v6) {
      goto LABEL_3;
    }
LABEL_14:
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    uint64_t v12 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      uint64_t v13 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138543362;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Unentitled entity '%{public}@' trying to tell us they are WatchKit", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_26;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419530 == -1)
    {
LABEL_28:
      __int16 v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageIsActuallyAWatchKitExtension(std::shared_ptr<CLConnectionMessage>)", "%s\n", v11);
LABEL_29:
      if (v11 != buf) {
        free(v11);
      }
      goto LABEL_26;
    }
LABEL_31:
    dispatch_once(&qword_102419530, &stru_1022EA328);
    goto LABEL_28;
  }
  if ((v5 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_3:
  id v7 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageEnabledKey"];
  if (!v7 || (sub_1000D2C98(v7, (BOOL *)(a1 + 88)) & 1) == 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    int v14 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = "kCLConnectionMessageEnabledKey";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_26;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419530 == -1) {
      goto LABEL_28;
    }
    goto LABEL_31;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022EA328);
  }
  uint64_t v8 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *(void *)(a1 + 48);
    int v10 = *(unsigned __int8 *)(a1 + 88);
    *(_DWORD *)uint64_t buf = 138412546;
    *(void *)&uint8_t buf[4] = v9;
    __int16 v16 = 1024;
    int v17 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Setting client, %@, is actually a WatchKit extension, %d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    __int16 v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageIsActuallyAWatchKitExtension(std::shared_ptr<CLConnectionMessage>)", "%s\n", v11);
    goto LABEL_29;
  }
LABEL_26:
}

void sub_100BD6FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_100BD7008(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_100134750(buf, "com.apple.locationd.effective_bundle");
  char v5 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 40))(a1, buf);
  char v6 = v5;
  if (SBYTE3(v21) < 0)
  {
    operator delete(*(void **)buf);
    if (v6) {
      goto LABEL_3;
    }
  }
  else if (v5)
  {
LABEL_3:
    id v7 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageEnabledKey"];
    if (v7 && (sub_1000D2C98(v7, (BOOL *)(a1 + 89)) & 1) != 0)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EA308);
      }
      uint64_t v8 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 48);
        int v10 = *(unsigned __int8 *)(a1 + 89);
        *(_DWORD *)uint64_t buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        __int16 v20 = 2114;
        uint64_t v21 = v9;
        __int16 v22 = 1026;
        int v23 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#usesync Setting client proxy for remote client\", \"ClientKeyPath\":%{public, location:escape_only}@, \"is proxy\":%{public}hhd}", buf, 0x22u);
      }
      if (!*(unsigned char *)(a1 + 72))
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022EA308);
        }
        __int16 v11 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = *(_DWORD *)(a1 + 272);
          *(_DWORD *)uint64_t buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          __int16 v20 = 1026;
          LODWORD(v21) = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#usesync #warning Received a ProxyForRemoteClient message for a client that failed to register.  Is it uninstalled?\", \"pid\":%{public}d}", buf, 0x18u);
        }
      }
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      int v17 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 136446210;
        *(void *)&uint8_t buf[4] = "kCLConnectionMessageEnabledKey";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022EA328);
        }
        char v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageProxyForRemoteClient(std::shared_ptr<CLConnectionMessage>)", "%s\n", v18);
        if (v18 != buf) {
          free(v18);
        }
      }
    }
    goto LABEL_27;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v13 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
  {
    uint64_t v14 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    __int16 v20 = 2114;
    uint64_t v21 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#usesync Unentitled client claims to be a remote client\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
  }
  __int16 v15 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    uint64_t v16 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    __int16 v20 = 2114;
    uint64_t v21 = v16;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#usesync Unentitled client claims to be a remote client", "{\"msg%{public}.0s\":\"#usesync Unentitled client claims to be a remote client\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
LABEL_27:
}

void sub_100BD74D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_100BD751C(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_100134750(buf, "com.apple.locationd.effective_bundle");
  char v3 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 40))(a1, buf);
  char v4 = v3;
  if (SBYTE3(v14) < 0)
  {
    operator delete(*(void **)buf);
    if (v4)
    {
LABEL_3:
      if (([*(id *)(a1 + 112) isAuthorizedForServiceTypeMask:1024] & 1) == 0)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022EA328);
        }
        char v5 = qword_102419538;
        if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_10;
        }
        uint64_t v6 = *(void *)(a1 + 48);
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        __int16 v13 = 2114;
        uint64_t v14 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, request to mark client as having received location while it is not authorized\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
LABEL_10:
      id v7 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
      {
        uint64_t v8 = *(void *)(a1 + 48);
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        __int16 v13 = 2114;
        uint64_t v14 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"markReceivingLocationInformation\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
      sub_100103838(*(void *)(a1 + 16), *(void *)(a1 + 48), 1, 0);
      goto LABEL_19;
    }
  }
  else if (v3)
  {
    goto LABEL_3;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022EA328);
  }
  uint64_t v9 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
  {
    uint64_t v10 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t buf = 138543362;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Unentitled entity '%{public}@' trying to mark itself as having received location?!", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    __int16 v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageMarkAsHavingReceivedLocation(std::shared_ptr<CLConnectionMessage>)", "%s\n", v11);
    if (v11 != buf) {
      free(v11);
    }
  }
LABEL_19:
}

void sub_100BD7894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_100BD78DC(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  id v8 = [DictionaryOfClasses objectForKeyedSubscript:@"kCLConnectionMessageStatusKey"];
  id v9 = [DictionaryOfClasses objectForKeyedSubscript:@"kCLConnectionMessagePurposeIdentifierKey"];
  if (v9) {
    sub_100134750(v33, (char *)[v9 UTF8String]);
  }
  else {
    sub_100134750(v33, "");
  }
  if (objc_opt_respondsToSelector())
  {
    unsigned int v10 = [v8 intValue];
    sub_100103240();
    if (sub_100106424() && *(unsigned char *)(a1 + 88))
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EA308);
      }
      __int16 v11 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
      {
        uint64_t v12 = *(void *)(a1 + 48);
        uint64_t buf = 68289282;
        __int16 v36 = 2082;
        BOOL v37 = "";
        __int16 v38 = 2114;
        uint64_t v39 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"WatchKit-1.0 client requesting authorization on companion\", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022EA308);
        }
      }
      __int16 v13 = qword_102419528;
      if (os_signpost_enabled((os_log_t)qword_102419528))
      {
        uint64_t v14 = *(void *)(a1 + 48);
        uint64_t buf = 68289282;
        __int16 v36 = 2082;
        BOOL v37 = "";
        __int16 v38 = 2114;
        uint64_t v39 = v14;
        __int16 v15 = "WatchKit-1.0 client requesting authorization on companion";
        uint64_t v16 = "{\"msg%{public}.0s\":\"WatchKit-1.0 client requesting authorization on companion\", \"ClientKeyPath\":%{pu"
              "blic, location:escape_only}@}";
LABEL_21:
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v15, v16, (uint8_t *)&buf, 0x1Cu);
        goto LABEL_48;
      }
      goto LABEL_48;
    }
    if (v10 != 3 || *(unsigned char *)(a1 + 90) == 0) {
      int v21 = v10;
    }
    else {
      int v21 = 4;
    }
    if (v21 == 4)
    {
      BOOL v22 = *(unsigned char *)(a1 + 74) == 0;
      int v23 = 1;
    }
    else
    {
      if (v21 != 3)
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022EA308);
        }
        CFStringRef v25 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
        {
          uint64_t v26 = *(void *)(a1 + 48);
          uint64_t buf = 68289282;
          __int16 v36 = 2082;
          BOOL v37 = "";
          __int16 v38 = 2114;
          uint64_t v39 = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Malformed authorization status\", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022EA308);
          }
        }
        uint64_t v27 = qword_102419528;
        if (os_signpost_enabled((os_log_t)qword_102419528))
        {
          uint64_t v28 = *(void *)(a1 + 48);
          uint64_t buf = 68289282;
          __int16 v36 = 2082;
          BOOL v37 = "";
          __int16 v38 = 2114;
          uint64_t v39 = v28;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v27, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#AuthPrompt Malformed authorization status", "{\"msg%{public}.0s\":\"#AuthPrompt Malformed authorization status\", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
        }
        int v24 = 0;
        goto LABEL_43;
      }
      BOOL v22 = *(unsigned char *)(a1 + 74) == 0;
      int v23 = 3;
    }
    if (v22) {
      int v24 = v23 + 1;
    }
    else {
      int v24 = v23;
    }
LABEL_43:
    uint64_t v29 = *(void *)(a1 + 48);
    if (SHIBYTE(v34) < 0)
    {
      sub_1000DC48C(__p, v33[0], (unint64_t)v33[1]);
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)v33;
      uint64_t v31 = v34;
    }
    sub_1007E1DB0((uint64_t)v32, v24, v29, 0, (long long *)__p);
    sub_100BD7EFC(a1, v32, 0, 1);
    sub_1007E1E64((uint64_t)v32);
    if (SHIBYTE(v31) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_48;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v17 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
  {
    uint64_t v18 = *(void *)(a1 + 48);
    uint64_t buf = 68289282;
    __int16 v36 = 2082;
    BOOL v37 = "";
    __int16 v38 = 2114;
    uint64_t v39 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Malformed authorization request\", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
  }
  __int16 v13 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    uint64_t v19 = *(void *)(a1 + 48);
    uint64_t buf = 68289282;
    __int16 v36 = 2082;
    BOOL v37 = "";
    __int16 v38 = 2114;
    uint64_t v39 = v19;
    __int16 v15 = "#AuthPrompt Malformed authorization request";
    uint64_t v16 = "{\"msg%{public}.0s\":\"#AuthPrompt Malformed authorization request\", \"ClientKeyPath\":%{public, location:escape_only}@}";
    goto LABEL_21;
  }
LABEL_48:
  if (SHIBYTE(v34) < 0) {
    operator delete(v33[0]);
  }
}

void sub_100BD7E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100BD7EFC(uint64_t a1, unsigned int *a2, NSDictionary *a3, int a4)
{
  if (*(unsigned char *)(a1 + 72) && !*(unsigned char *)(a1 + 104)) {
    sub_10009D93C(*(void *)(a1 + 16), *(void **)(a1 + 48), 1);
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1) & 1) != 0
    || [*(id *)(a1 + 48) isAuthLimited])
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    id v8 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      uint64_t v10 = *a2;
      *(void *)uint64_t buf = 68289538;
      *(_WORD *)long long v118 = 2082;
      *(void *)&v118[2] = "";
      *(_WORD *)&v118[10] = 2114;
      *(void *)&v118[12] = v9;
      *(_WORD *)&v118[20] = 2050;
      *(void *)&v118[22] = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AuthPrompt System services may not request authorization\", \"ClientKeyPath\":%{public, location:escape_only}@, \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}", buf, 0x26u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EA308);
      }
    }
    __int16 v11 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      uint64_t v12 = *(void *)(a1 + 48);
      uint64_t v13 = *a2;
      *(void *)uint64_t buf = 68289538;
      *(_WORD *)long long v118 = 2082;
      *(void *)&v118[2] = "";
      *(_WORD *)&v118[10] = 2114;
      *(void *)&v118[12] = v12;
      *(_WORD *)&v118[20] = 2050;
      *(void *)&v118[22] = v13;
      uint64_t v14 = "#AuthPrompt System services may not request authorization";
      __int16 v15 = "{\"msg%{public}.0s\":\"#AuthPrompt System services may not request authorization\", \"ClientKeyPath\":%{publ"
            "ic, location:escape_only}@, \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}";
LABEL_13:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v14, v15, buf, 0x26u);
      return;
    }
    return;
  }
  if (([*(id *)(a1 + 112) inUseLevelIsAtLeast:5] & 1) == 0)
  {
    if (*(unsigned char *)(a1 + 369))
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EA308);
      }
      uint64_t v16 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(void *)(a1 + 48);
        uint64_t v18 = *a2;
        [*(id *)(a1 + 112) inUseLevel];
        unsigned int v19 = [*(id *)(a1 + 112) inUseLevel];
        *(_DWORD *)uint64_t buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)long long v118 = 2082;
        *(void *)&v118[2] = "";
        *(_WORD *)&v118[10] = 2114;
        *(void *)&v118[12] = v17;
        *(_WORD *)&v118[20] = 2050;
        *(void *)&v118[22] = v18;
        *(_WORD *)&v118[30] = 2050;
        unint64_t v119 = v19;
        __int16 v20 = "{\"msg%{public}.0s\":\"#AuthPrompt Permitting authorization request placed by client entitled to specially"
              " request prompts despite being insufficiently in-use\", \"ClientKeyPath\":%{public, location:escape_only}@"
              ", \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"inUseLevel\":%{"
              "public, location:CLClientInUseLevel}lld}";
LABEL_28:
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v20, buf, 0x30u);
      }
    }
    else
    {
      sub_100134750(buf, "com.apple.locationd.prompt_from_background");
      int v21 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)a1 + 40))(a1, buf);
      if ((v118[15] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (!v21)
      {
        if (a4)
        {
          uint64_t v53 = *(void *)(a1 + 408);
          int v52 = *(std::__shared_weak_count **)(a1 + 416);
          if (v52)
          {
            atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v52->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            sub_1000DB0A0(v52);
          }
          *(void *)uint64_t buf = 0;
          *(void *)long long v118 = buf;
          *(void *)&v118[8] = 0x7812000000;
          *(void *)&v118[16] = sub_100177D4C;
          *(void *)&v118[24] = sub_100177474;
          sub_1007E1FD0((uint64_t)&v120, (uint64_t)a2);
          __int16 v54 = *(void **)(a1 + 32);
          v105[0] = _NSConcreteStackBlock;
          v105[1] = 3321888768;
          v105[2] = sub_100BD98EC;
          v105[3] = &unk_1022E9EC8;
          v105[6] = a1;
          void v105[7] = v53;
          long long v106 = v52;
          if (v52) {
            atomic_fetch_add_explicit(&v52->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          v105[4] = a3;
          v105[5] = buf;
          [v54 afterInterval:v105 async:3.0];
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022EA308);
          }
          long long v55 = qword_102419528;
          if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v56 = *(void *)(a1 + 48);
            uint64_t v57 = *a2;
            [*(id *)(a1 + 112) inUseLevel];
            unsigned int v58 = [*(id *)(a1 + 112) inUseLevel];
            *(_DWORD *)long long v107 = 68289794;
            int v108 = 0;
            __int16 v109 = 2082;
            long long v110 = "";
            __int16 v111 = 2114;
            uint64_t v112 = v56;
            __int16 v113 = 2050;
            uint64_t v114 = v57;
            __int16 v115 = 2050;
            uint64_t v116 = v58;
            _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt #Warning Delaying authorization request placed while insufficiently in-use\", \"ClientKeyPath\":%{public, location:escape_only}@, \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"inUseLevel\":%{public, location:CLClientInUseLevel}lld}", v107, 0x30u);
          }
          if (v106) {
            std::__shared_weak_count::__release_weak(v106);
          }
          _Block_object_dispose(buf, 8);
          sub_1007E1E64((uint64_t)&v120);
          if (v52) {
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        else
        {
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022EA308);
          }
          __int16 v59 = qword_102419528;
          if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v61 = *(void **)(a1 + 112);
            uint64_t v60 = (id *)(a1 + 112);
            uint64_t v62 = (uint64_t)*(v60 - 8);
            uint64_t v63 = *a2;
            [v61 inUseLevel];
            unsigned int v64 = [*v60 inUseLevel];
            *(_DWORD *)uint64_t buf = 68289794;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)long long v118 = 2082;
            *(void *)&v118[2] = "";
            *(_WORD *)&v118[10] = 2114;
            *(void *)&v118[12] = v62;
            *(_WORD *)&v118[20] = 2050;
            *(void *)&v118[22] = v63;
            *(_WORD *)&v118[30] = 2050;
            unint64_t v119 = v64;
            _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt #Warning Dropping authorization request placed while insufficiently in-use\", \"ClientKeyPath\":%{public, location:escape_only}@, \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"inUseLevel\":%{public, location:CLClientInUseLevel}lld}", buf, 0x30u);
          }
          sub_1007B8A50(a2, @"App is in the background");
        }
        return;
      }
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EA308);
      }
      uint64_t v16 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = *(void *)(a1 + 48);
        uint64_t v23 = *a2;
        [*(id *)(a1 + 112) inUseLevel];
        unsigned int v24 = [*(id *)(a1 + 112) inUseLevel];
        *(_DWORD *)uint64_t buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)long long v118 = 2082;
        *(void *)&v118[2] = "";
        *(_WORD *)&v118[10] = 2114;
        *(void *)&v118[12] = v22;
        *(_WORD *)&v118[20] = 2050;
        *(void *)&v118[22] = v23;
        *(_WORD *)&v118[30] = 2050;
        unint64_t v119 = v24;
        __int16 v20 = "{\"msg%{public}.0s\":\"#AuthPrompt #widgetkit Permitting authorization request placed by client entitled t"
              "o specially request prompts for Widgets\", \"ClientKeyPath\":%{public, location:escape_only}@, \"requestTy"
              "pe\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"inUseLevel\":%{public, locat"
              "ion:CLClientInUseLevel}lld}";
        goto LABEL_28;
      }
    }
  }
  int v25 = *a2 - 1;
  if v25 < 0xB && ((0x50Fu >> v25))
  {
    uint64_t v31 = qword_101D88CB0[v25];
    uint64_t v32 = sub_1007DA810(*(void *)(a1 + 16), *(void *)(a1 + 48));
    if (!v32)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EA308);
      }
      uint64_t v33 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v34 = *(void *)(a1 + 48);
        uint64_t v35 = *(void *)(a1 + 80);
        *(void *)uint64_t buf = 68289538;
        *(_WORD *)long long v118 = 2082;
        *(void *)&v118[2] = "";
        *(_WORD *)&v118[10] = 2114;
        *(void *)&v118[12] = v34;
        *(_WORD *)&v118[20] = 1026;
        *(_DWORD *)&v118[22] = v35;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #AuthPrompt CLCM:allowableAuthMask in invalid, considering fSupportedAuthMaskBuilder\", \"ClientKeyPath\":%{public, location:escape_only}@, \"fSupportedAuthMaskBuilder\":%{public}d}", buf, 0x22u);
      }
      uint64_t v32 = *(void *)(a1 + 80);
    }
    if ((v31 & ~v32) != 0)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EA308);
      }
      uint64_t v49 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v50 = *a2;
        uint64_t v51 = *(void *)(a1 + 48);
        *(void *)uint64_t buf = 68289794;
        *(_WORD *)long long v118 = 2082;
        *(void *)&v118[2] = "";
        *(_WORD *)&v118[10] = 2050;
        *(void *)&v118[12] = v50;
        *(_WORD *)&v118[20] = 2114;
        *(void *)&v118[22] = v51;
        *(_WORD *)&v118[30] = 2050;
        unint64_t v119 = v32;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Authorization value requested by client ignored because not in its allowable mask\", \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"ClientKeyPath\":%{public, location:escape_only}@, \"authMaskAllowable\":%{public}lu}", buf, 0x30u);
      }
      sub_1007B8A50(a2, @"Requested authorization level isn't supported by the app");
      return;
    }
    if (sub_1007DB3BC(*(void *)(a1 + 16)) && !sub_10079F3F0(*(void **)(a1 + 48)))
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EA308);
      }
      long long v70 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v71 = *a2;
        uint64_t v72 = *(void *)(a1 + 48);
        *(void *)uint64_t buf = 68289538;
        *(_WORD *)long long v118 = 2082;
        *(void *)&v118[2] = "";
        *(_WORD *)&v118[10] = 2050;
        *(void *)&v118[12] = v71;
        *(_WORD *)&v118[20] = 2114;
        *(void *)&v118[22] = v72;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Authorization request ignored, at lock-screen\", \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x26u);
      }
      sub_1007B8A50(a2, @"App is requesting authorization prompt while the screen is locked");
      return;
    }
    if (sub_1007A5C78(*(void *)(a1 + 16)))
    {
      double v36 = sub_1007DB3B0(*(void *)(a1 + 16));
      [*(id *)(a1 + 32) currentLatchedAbsoluteTimestamp];
      double v38 = v37 - v36;
      if (v38 < 900.0)
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022EA308);
        }
        uint64_t v77 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v78 = *a2;
          uint64_t v79 = (uint64_t *)(a1 + 16);
          sub_1007A5C88(*(void *)(a1 + 16));
          unsigned int v80 = sub_1007A5C88(*(void *)(a1 + 16));
          uint64_t v81 = *(const char **)(a1 + 48);
          id v82 = sub_1007A5CA0(*v79);
          *(void *)uint64_t buf = 68290306;
          *(_WORD *)long long v118 = 2082;
          *(void *)&v118[2] = "";
          *(_WORD *)&v118[10] = 2050;
          *(void *)&v118[12] = v78;
          *(_WORD *)&v118[20] = 2050;
          *(void *)&v118[22] = v80;
          *(_WORD *)&v118[30] = 2114;
          unint64_t v119 = (unint64_t)v81;
          __int16 v120 = 2114;
          double v121 = *(double *)&v82;
          __int16 v122 = 2050;
          uint64_t v123 = (uint64_t)v38;
          _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Authorization request ignored because another authorization effort is already in flight\", \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"existingRequestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"ClientKeyPath\":%{public, location:escape_only}@, \"existingClientKey\":%{public, location:escape_only}@, \"InflightRequestSquattingDurationSeconds\":%{public}ld}", buf, 0x44u);
        }
        sub_1007B8A50(a2, @"Outstanding authorization prompt detected.");
        return;
      }
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EA308);
      }
      uint64_t v39 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_ERROR))
      {
        uint64_t v40 = *(void *)(a1 + 48);
        id v41 = sub_1007A5CA0(*(void *)(a1 + 16));
        sub_1007A5C88(*(void *)(a1 + 16));
        unsigned int v42 = sub_1007A5C88(*(void *)(a1 + 16));
        *(void *)uint64_t buf = 68290050;
        *(_WORD *)long long v118 = 2082;
        *(void *)&v118[2] = "";
        *(_WORD *)&v118[10] = 2114;
        *(void *)&v118[12] = v40;
        *(_WORD *)&v118[20] = 2114;
        *(void *)&v118[22] = v41;
        *(_WORD *)&v118[30] = 2050;
        unint64_t v119 = v42;
        __int16 v120 = 2050;
        double v121 = v38 / 60.0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#AuthPrompt Inflight auth-request squatting for more than 15 mins. TearingDown\", \"ClientKeyPath\":%{public, location:escape_only}@, \"squattingClient\":%{public, location:escape_only}@, \"squattingRequestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"InflightRequestSquattingDurationMinutes\":\"%{public}.2f\"}", buf, 0x3Au);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022EA308);
        }
      }
      uint64_t v43 = qword_102419528;
      if (os_signpost_enabled((os_log_t)qword_102419528))
      {
        uint64_t v44 = *(void *)(a1 + 48);
        id v45 = sub_1007A5CA0(*(void *)(a1 + 16));
        sub_1007A5C88(*(void *)(a1 + 16));
        unsigned int v46 = sub_1007A5C88(*(void *)(a1 + 16));
        *(_DWORD *)uint64_t buf = 68290050;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)long long v118 = 2082;
        *(void *)&v118[2] = "";
        *(_WORD *)&v118[10] = 2114;
        *(void *)&v118[12] = v44;
        *(_WORD *)&v118[20] = 2114;
        *(void *)&v118[22] = v45;
        *(_WORD *)&v118[30] = 2050;
        unint64_t v119 = v46;
        __int16 v120 = 2050;
        double v121 = v38 / 60.0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v43, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#AuthPrompt Inflight auth-request squatting for more than 15 mins. TearingDown", "{\"msg%{public}.0s\":\"#AuthPrompt Inflight auth-request squatting for more than 15 mins. TearingDown\", \"ClientKeyPath\":%{public, location:escape_only}@, \"squattingClient\":%{public, location:escape_only}@, \"squattingRequestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"InflightRequestSquattingDurationMinutes\":\"%{public}.2f\"}", buf, 0x3Au);
      }
      sub_1007D5754(*(void *)(a1 + 16), 1, 0);
    }
    if ([*(id *)(a1 + 112) transientAwareRegistrationResult] == 4)
    {
      if (*a2 == 9)
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022EA308);
        }
        uint64_t v47 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v48 = *(void *)(a1 + 48);
          *(void *)uint64_t buf = 68289282;
          *(_WORD *)long long v118 = 2082;
          *(void *)&v118[2] = "";
          *(_WORD *)&v118[10] = 2114;
          *(void *)&v118[12] = v48;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Ignoring request for temporary precise from app with no authorization yet\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        sub_1007B8A50(a2, @"App's authorization status is not yet determined. App needs to ask for authorization before asking for temporary precise upgrade.");
        return;
      }
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EA308);
      }
      uint64_t v83 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v84 = *(void *)(a1 + 48);
        uint64_t v85 = *a2;
        *(void *)uint64_t buf = 68289538;
        *(_WORD *)long long v118 = 2082;
        *(void *)&v118[2] = "";
        *(_WORD *)&v118[10] = 2114;
        *(void *)&v118[12] = v84;
        *(_WORD *)&v118[20] = 2050;
        *(void *)&v118[22] = v85;
        long long v86 = "{\"msg%{public}.0s\":\"#AuthPrompt Allowing standard prompt because no auth yet\", \"ClientKeyPath\":%{pub"
              "lic, location:escape_only}@, \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}";
        long long v87 = v83;
        uint32_t v88 = 38;
LABEL_130:
        _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, v86, buf, v88);
      }
    }
    else
    {
      if ([*(id *)(a1 + 112) registrationResult] == 1
        && *a2 == 4
        && sub_1007DC25C(*(void *)(a1 + 16), *(void *)(a1 + 48)))
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022EA308);
        }
        __int16 v65 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v66 = *(void *)(a1 + 48);
          uint64_t v67 = *a2;
          long long v68 = sub_1004BF6E8([*(id *)(a1 + 112) registrationResult]);
          *(void *)uint64_t buf = 68289794;
          *(_WORD *)long long v118 = 2082;
          *(void *)&v118[2] = "";
          *(_WORD *)&v118[10] = 2114;
          *(void *)&v118[12] = v66;
          *(_WORD *)&v118[20] = 2050;
          *(void *)&v118[22] = v67;
          *(_WORD *)&v118[30] = 2082;
          unint64_t v119 = (unint64_t)v68;
          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Allowing one-shot upgrade attempt\", \"ClientKeyPath\":%{public, location:escape_only}@, \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"RegistrationResult\":%{public, location:escape_only}s}", buf, 0x30u);
        }
        *(void *)uint64_t buf = 0;
        *(void *)long long v118 = buf;
        *(void *)&v118[8] = 0x7812000000;
        *(void *)&v118[16] = sub_100177D4C;
        *(void *)&v118[24] = sub_100177474;
        sub_1007E1FD0((uint64_t)&v120, (uint64_t)a2);
        uint64_t v69 = *(void *)(a1 + 48);
        v104[0] = _NSConcreteStackBlock;
        v104[1] = 3221225472;
        v104[2] = sub_100BD9A10;
        v104[3] = &unk_1022E9F00;
        v104[4] = buf;
        sub_100134750(__p, "");
        sub_1007E1DB0((uint64_t)v107, 7, v69, v104, (long long *)__p);
        sub_1007E2034((uint64_t)a2, (uint64_t)v107);
        sub_1007E1E64((uint64_t)v107);
        if (v103 < 0) {
          operator delete(__p[0]);
        }
        _Block_object_dispose(buf, 8);
        sub_1007E1E64((uint64_t)&v120);
        goto LABEL_137;
      }
      if ([*(id *)(a1 + 112) registrationResult] == 2 && !*(unsigned char *)(a1 + 369))
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022EA308);
        }
        long long v95 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v96 = *(void *)(a1 + 48);
          *(void *)uint64_t buf = 68289282;
          *(_WORD *)long long v118 = 2082;
          *(void *)&v118[2] = "";
          *(_WORD *)&v118[10] = 2114;
          *(void *)&v118[12] = v96;
          _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Client is denied.  Asking client manager to consider doing a big switch prompt\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        uint64_t v97 = *(void *)(a1 + 48);
        sub_100134750(v100, "");
        sub_1007E1DB0((uint64_t)buf, 10, v97, 0, (long long *)v100);
        sub_1007E2034((uint64_t)a2, (uint64_t)buf);
        sub_1007E1E64((uint64_t)buf);
        if (v101 < 0) {
          operator delete(v100[0]);
        }
        goto LABEL_137;
      }
      if (*a2 == 9 && ([*(id *)(a1 + 112) isAuthorizedForServiceType:12] & 1) == 0)
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022EA308);
        }
        uint64_t v93 = qword_102419528;
        if (!os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_137;
        }
        uint64_t v94 = *(void *)(a1 + 48);
        *(void *)uint64_t buf = 68289282;
        *(_WORD *)long long v118 = 2082;
        *(void *)&v118[2] = "";
        *(_WORD *)&v118[10] = 2114;
        *(void *)&v118[12] = v94;
        long long v86 = "{\"msg%{public}.0s\":\"#AuthPrompt Allowing no-auth-change auth request because this #compensation client "
              "wants temporary precise\", \"ClientKeyPath\":%{public, location:escape_only}@}";
        long long v87 = v93;
        uint32_t v88 = 28;
        goto LABEL_130;
      }
      if (!*(unsigned char *)(a1 + 369))
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022EA308);
        }
        long long v89 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v90 = *(void *)(a1 + 48);
          uint64_t v91 = *a2;
          uint64_t v92 = sub_1004BF6E8([*(id *)(a1 + 112) registrationResult]);
          *(void *)uint64_t buf = 68289794;
          *(_WORD *)long long v118 = 2082;
          *(void *)&v118[2] = "";
          *(_WORD *)&v118[10] = 2114;
          *(void *)&v118[12] = v90;
          *(_WORD *)&v118[20] = 2050;
          *(void *)&v118[22] = v91;
          *(_WORD *)&v118[30] = 2082;
          unint64_t v119 = (unint64_t)v92;
          _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Ignoring authorization request due to existing authorization\", \"ClientKeyPath\":%{public, location:escape_only}@, \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"RegistrationResult\":%{public, location:escape_only}s}", buf, 0x30u);
        }
        sub_1007B8A50(a2, @"The user has already made a decision about the app's authorization");
        return;
      }
      if ([*(id *)(a1 + 112) registrationResult] != 2)
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022EA308);
        }
        uint64_t v73 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v74 = *(void *)(a1 + 48);
          uint64_t v75 = *a2;
          __int16 v76 = sub_1004BF6E8([*(id *)(a1 + 112) registrationResult]);
          *(void *)uint64_t buf = 68289794;
          *(_WORD *)long long v118 = 2082;
          *(void *)&v118[2] = "";
          *(_WORD *)&v118[10] = 2114;
          *(void *)&v118[12] = v74;
          *(_WORD *)&v118[20] = 2050;
          *(void *)&v118[22] = v75;
          *(_WORD *)&v118[30] = 2082;
          unint64_t v119 = (unint64_t)v76;
          _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Ignoring special-reprompt authorization request due to existing authorization\", \"ClientKeyPath\":%{public, location:escape_only}@, \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"RegistrationResult\":%{public, location:escape_only}s}", buf, 0x30u);
        }
        return;
      }
    }
LABEL_137:
    uint64_t v98 = *(void *)(a1 + 16);
    sub_1007E1FD0((uint64_t)v99, (uint64_t)a2);
    sub_1007B8B90(v98, a1, v99, a3);
    sub_1007E1E64((uint64_t)v99);
    return;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v26 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
  {
    uint64_t v27 = *a2;
    uint64_t v28 = *(void *)(a1 + 48);
    *(void *)uint64_t buf = 68289538;
    *(_WORD *)long long v118 = 2082;
    *(void *)&v118[2] = "";
    *(_WORD *)&v118[10] = 2050;
    *(void *)&v118[12] = v27;
    *(_WORD *)&v118[20] = 2114;
    *(void *)&v118[22] = v28;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Unrecognized authorization value\", \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x26u);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
  }
  __int16 v11 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    uint64_t v29 = *a2;
    uint64_t v30 = *(void *)(a1 + 48);
    *(void *)uint64_t buf = 68289538;
    *(_WORD *)long long v118 = 2082;
    *(void *)&v118[2] = "";
    *(_WORD *)&v118[10] = 2050;
    *(void *)&v118[12] = v29;
    *(_WORD *)&v118[20] = 2114;
    *(void *)&v118[22] = v30;
    uint64_t v14 = "#AuthPrompt Unrecognized authorization value";
    __int16 v15 = "{\"msg%{public}.0s\":\"#AuthPrompt Unrecognized authorization value\", \"requestType\":%{public, location:CLCl"
          "ientManager_Type::AuthorizationRequestType}lld, \"ClientKeyPath\":%{public, location:escape_only}@}";
    goto LABEL_13;
  }
}

void sub_100BD9388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44,char a45)
{
  sub_1007E1E64((uint64_t)&a45);
  if (a30 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v46 - 240), 8);
  sub_1007E1E64(v45);
  _Unwind_Resume(a1);
}

void sub_100BD9460(void *a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3321888768;
  unint64_t v20[2] = sub_100BD9870;
  v20[3] = &unk_1022E9E68;
  uint64_t v5 = *(CLConnectionMessage **)a2;
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 8);
  v20[4] = *(void *)a2;
  int v21 = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = *(CLConnectionMessage **)a2;
  }
  Dictionary = (void *)CLConnectionMessage::getDictionary(v5);
  id v8 = (NSDictionary *)[Dictionary objectForKeyedSubscript:@"kCLConnectionMessagePurposeKey"];
  if (!v8) {
    goto LABEL_6;
  }
  sub_100134750(buf, "com.apple.locationd.prompt_content_control");
  char v9 = (*(uint64_t (**)(void *, unsigned char *))(*a1 + 40))(a1, buf);
  char v10 = v9;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (v10) {
      goto LABEL_6;
    }
  }
  else if (v9)
  {
LABEL_6:
    id v11 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessagePurposeIdentifierKey"];
    if (v11) {
      sub_100134750(buf, (char *)[v11 UTF8String]);
    }
    else {
      sub_100134750(buf, "");
    }
    if (v8)
    {
      CFStringRef v22 = @"UsageDescription";
      uint64_t v23 = v8;
      id v8 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
    }
    uint64_t v12 = a1[6];
    if ((buf[23] & 0x80000000) != 0)
    {
      sub_1000DC48C(__p, *(void **)buf, *(unint64_t *)&buf[8]);
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)buf;
      uint64_t v18 = *(void *)&buf[16];
    }
    sub_1007E1DB0((uint64_t)v19, 9, v12, v20, (long long *)__p);
    sub_100BD7EFC((uint64_t)a1, v19, v8, 1);
    sub_1007E1E64((uint64_t)v19);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_26;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v13 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
  {
    uint64_t v14 = a1[6];
    *(void *)uint64_t buf = 68289282;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2114;
    *(void *)&buf[20] = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Not showing temporary precise prompt because the client lacks the required SPI entitlement\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
  }
  __int16 v15 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    uint64_t v16 = a1[6];
    *(void *)uint64_t buf = 68289282;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2114;
    *(void *)&buf[20] = v16;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#AuthPrompt Not showing temporary precise prompt because the client lacks the required SPI entitlement", "{\"msg%{public}.0s\":\"#AuthPrompt Not showing temporary precise prompt because the client lacks the required SPI entitlement\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
LABEL_26:
  if (v21) {
    sub_1000DB0A0(v21);
  }
}

void sub_100BD97E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  sub_1007E1E64((uint64_t)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v30 - 89) < 0) {
    operator delete(*(void **)(v30 - 112));
  }
  if (a29) {
    sub_1000DB0A0(a29);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100BD9870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = +[NSMutableDictionary dictionary];
  [v5 setObject:a2 forKeyedSubscript:@"kCLConnectionMessagePromptResponseKey"];
  [v5 setObject:a3 forKeyedSubscript:@"kCLConnectionMessageErrorKey"];

  return CLConnectionMessage::sendReply();
}

uint64_t sub_100BD98EC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100BD9978;
  v3[3] = &unk_1022E9EA0;
  uint64_t v5 = v1;
  long long v4 = *(_OWORD *)(result + 32);
  uint64_t v2 = *(void *)(result + 64);
  if (v2)
  {
    if (*(void *)(v2 + 8) != -1) {
      return sub_100BD9978(v3);
    }
  }
  return result;
}

uint64_t sub_100BD9978(void *a1)
{
  uint64_t v2 = a1[6];
  sub_1007E1FD0((uint64_t)v4, *(void *)(a1[5] + 8) + 48);
  sub_100BD7EFC(v2, v4, a1[4], 0);
  return sub_1007E1E64((uint64_t)v4);
}

void sub_100BD99D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1007E1E64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BD99E4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  *(void *)(result + 56) = *(void *)(a2 + 56);
  *(void *)(result + 64) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100BD9A00(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100BD9A10(uint64_t a1)
{
}

void sub_100BD9A20(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_100134750(buf, "com.apple.locationd.private_info");
  char v5 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 40))(a1, buf);
  char v6 = v5;
  if (SBYTE3(v17) < 0)
  {
    operator delete(*(void **)buf);
    if (v6) {
      goto LABEL_3;
    }
LABEL_14:
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    uint64_t v12 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v16 = 2114;
      uint64_t v17 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Client does not have appropriate entitlement to enable match info\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    goto LABEL_23;
  }
  if ((v5 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_3:
  id v7 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageEnabledKey"];
  if (v7 && (sub_1000D2C98(v7, (BOOL *)(a1 + 277)) & 1) != 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    id v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      int v10 = *(unsigned __int8 *)(a1 + 277);
      *(_DWORD *)uint64_t buf = 138412546;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Client %@ is setting match info enabled to %d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      id v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageMatchInfoEnabled(std::shared_ptr<CLConnectionMessage>)", "%s\n", v11);
LABEL_27:
      if (v11 != buf) {
        free(v11);
      }
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    uint64_t v14 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = "kCLConnectionMessageEnabledKey";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      id v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageMatchInfoEnabled(std::shared_ptr<CLConnectionMessage>)", "%s\n", v11);
      goto LABEL_27;
    }
  }
LABEL_23:
}

void sub_100BD9E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_100BD9EBC(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_100134750(buf, "com.apple.locationd.private_info");
  char v5 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 40))(a1, buf);
  char v6 = v5;
  if (SBYTE3(v14) < 0)
  {
    operator delete(*(void **)buf);
    if (v6) {
      goto LABEL_3;
    }
  }
  else if (v5)
  {
LABEL_3:
    id v7 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageEnabledKey"];
    if (!v7 || (sub_1000D2C98(v7, (BOOL *)(a1 + 278)) & 1) == 0)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      id v8 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 136446210;
        *(void *)&uint8_t buf[4] = "kCLConnectionMessageEnabledKey";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022EA328);
        }
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageGroundAltitudeEnabled(std::shared_ptr<CLConnectionMessage>)", "%s\n", v9);
        if (v9 != buf) {
          free(v9);
        }
      }
    }
    goto LABEL_19;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v10 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    __int16 v13 = 2114;
    uint64_t v14 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Client does not have appropriate entitlement to enable ground altitude\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
LABEL_19:
}

void sub_100BDA1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_100BDA1EC(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_100134750(buf, "com.apple.locationd.private_info");
  char v5 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 40))(a1, buf);
  char v6 = v5;
  if (SBYTE3(v14) < 0)
  {
    operator delete(*(void **)buf);
    if (v6) {
      goto LABEL_3;
    }
  }
  else if (v5)
  {
LABEL_3:
    id v7 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageEnabledKey"];
    if (!v7 || (sub_1000D2C98(v7, (BOOL *)(a1 + 279)) & 1) == 0)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      id v8 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 136446210;
        *(void *)&uint8_t buf[4] = "kCLConnectionMessageEnabledKey";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022EA328);
        }
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageFusionInfoEnabled(std::shared_ptr<CLConnectionMessage>)", "%s\n", v9);
        if (v9 != buf) {
          free(v9);
        }
      }
    }
    goto LABEL_19;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v10 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    __int16 v13 = 2114;
    uint64_t v14 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Client does not have appropriate entitlement to enable fusion info\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
LABEL_19:
}

void sub_100BDA4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_100BDA51C(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_100134750(buf, "com.apple.locationd.private_info");
  char v5 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 40))(a1, buf);
  char v6 = v5;
  if (SBYTE3(v14) < 0)
  {
    operator delete(*(void **)buf);
    if (v6) {
      goto LABEL_3;
    }
  }
  else if (v5)
  {
LABEL_3:
    id v7 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageEnabledKey"];
    if (!v7 || (sub_1000D2C98(v7, (BOOL *)(a1 + 280)) & 1) == 0)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      id v8 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 136446210;
        *(void *)&uint8_t buf[4] = "kCLConnectionMessageEnabledKey";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022EA328);
        }
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageTrackRunInfoEnabled(std::shared_ptr<CLConnectionMessage>)", "%s\n", v9);
        if (v9 != buf) {
          free(v9);
        }
      }
    }
    goto LABEL_19;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v10 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    __int16 v13 = 2114;
    uint64_t v14 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Client does not have appropriate entitlement to enable track run info\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
LABEL_19:
}

void sub_100BDA804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_100BDA84C(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_100134750(buf, "com.apple.locationd.prompt_behavior");
  char v5 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 40))(a1, buf);
  char v6 = v5;
  if (SBYTE3(v19) < 0)
  {
    operator delete(*(void **)buf);
    if (v6) {
      goto LABEL_3;
    }
LABEL_14:
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    uint64_t v12 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v18 = 2114;
      uint64_t v19 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Client does not have appropriate entitlement to change prompt behaviour\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EA308);
      }
    }
    uint64_t v14 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      uint64_t v15 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v18 = 2114;
      uint64_t v19 = v15;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Client does not have appropriate entitlement to change prompt behaviour", "{\"msg%{public}.0s\":\"Client does not have appropriate entitlement to change prompt behaviour\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    goto LABEL_26;
  }
  if ((v5 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_3:
  id v7 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageEnabledKey"];
  if (v7 && (sub_1000D2C98(v7, (BOOL *)(a1 + 368)) & 1) != 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    id v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      int v10 = *(unsigned __int8 *)(a1 + 368);
      *(_DWORD *)uint64_t buf = 138412546;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Client %@ is setting location prompt allowed to %d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageAllowsLocationPrompts(std::shared_ptr<CLConnectionMessage>)", "%s\n", v11);
LABEL_30:
      if (v11 != buf) {
        free(v11);
      }
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    __int16 v16 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = "kCLConnectionMessageEnabledKey";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageAllowsLocationPrompts(std::shared_ptr<CLConnectionMessage>)", "%s\n", v11);
      goto LABEL_30;
    }
  }
LABEL_26:
}

void sub_100BDAD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_100BDAD84(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_100134750(buf, "com.apple.locationd.prompt_behavior");
  char v5 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 40))(a1, buf);
  char v6 = v5;
  if (SBYTE3(v19) < 0)
  {
    operator delete(*(void **)buf);
    if (v6) {
      goto LABEL_3;
    }
LABEL_14:
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    uint64_t v12 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v18 = 2114;
      uint64_t v19 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Client does not have appropriate entitlement to change prompt behaviour\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EA308);
      }
    }
    uint64_t v14 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      uint64_t v15 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v18 = 2114;
      uint64_t v19 = v15;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Client does not have appropriate entitlement to change prompt behaviour", "{\"msg%{public}.0s\":\"Client does not have appropriate entitlement to change prompt behaviour\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    goto LABEL_26;
  }
  if ((v5 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_3:
  id v7 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageEnabledKey"];
  if (v7 && (sub_1000D2C98(v7, (BOOL *)(a1 + 369)) & 1) != 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    id v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      int v10 = *(unsigned __int8 *)(a1 + 369);
      *(_DWORD *)uint64_t buf = 138412546;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Client %@ is setting location prompt show to %d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageShowLocationPrompt(std::shared_ptr<CLConnectionMessage>)", "%s\n", v11);
LABEL_30:
      if (v11 != buf) {
        free(v11);
      }
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    __int16 v16 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = "kCLConnectionMessageEnabledKey";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageShowLocationPrompt(std::shared_ptr<CLConnectionMessage>)", "%s\n", v11);
      goto LABEL_30;
    }
  }
LABEL_26:
}

void sub_100BDB26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_100BDB2BC(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  char v3 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t buf = 138543362;
    uint64_t v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client %{public}@ is registering as a location client and will show up in Settings", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    char v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageRegisterAsLocationClient(std::shared_ptr<CLConnectionMessage>)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1007B7CAC(*(void *)(a1 + 16), *(void *)(a1 + 48));
}

void sub_100BDB490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100BDB4BC(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_100134750(&__p, "com.apple.locationd.stored_location");
  char v5 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 40))(a1, &__p);
  if (SBYTE3(v40) < 0) {
    operator delete(__p);
  }
  if ((v5 & 1) == 0)
  {
    if (qword_102419550 != -1) {
      dispatch_once(&qword_102419550, &stru_1022EA3A8);
    }
    uint64_t v14 = qword_102419558;
    if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 48);
      std::string __p = (void *)68289282;
      __int16 v37 = 2082;
      double v38 = "";
      __int16 v39 = 2114;
      uint64_t v40 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Client does not have appropriate entitlement to access stored locations\", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
    }
    CFStringRef v47 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v45 = NSLocalizedDescriptionKey;
    CFStringRef v46 = @"Not entitled.";
    uint64_t v48 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v46 forKeys:&v45 count:1]);
    +[NSDictionary dictionaryWithObjects:&v48 forKeys:&v47 count:1];
    goto LABEL_22;
  }
  if (([*(id *)(a1 + 112) isAuthorizedForServiceTypeMask:16] & 1) == 0)
  {
    if (qword_102419550 != -1) {
      dispatch_once(&qword_102419550, &stru_1022EA3A8);
    }
    __int16 v16 = qword_102419558;
    if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a1 + 48);
      std::string __p = (void *)68289282;
      __int16 v37 = 2082;
      double v38 = "";
      __int16 v39 = 2114;
      uint64_t v40 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Client is not authorized for locations\", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
    }
    CFStringRef v43 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v41 = NSLocalizedDescriptionKey;
    CFStringRef v42 = @"Not authorized.";
    uint64_t v44 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v42 forKeys:&v41 count:1]);
    +[NSDictionary dictionaryWithObjects:&v44 forKeys:&v43 count:1];
LABEL_22:
    CLConnectionMessage::sendReply();
    goto LABEL_23;
  }
  Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
  uint64_t v7 = Dictionary;
  if (Dictionary
    && [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageFetchEstimatedLocationDateKey"])
  {
    id v8 = [v7 objectForKeyedSubscript:@"kCLConnectionMessageFetchEstimatedLocationDateKey"];
    id v10 = [[objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLRoutineMonitor"];
    uint64_t v11 = v10;
    if (v10)
    {
      [v10 registerDelegate:*(void *)(a1 + 40) inSilo:*(void *)(a1 + 32)];
      [v11 setDelegateEntityName:"CLDaemonClient"];
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3321888768;
      v21[2] = sub_100BDBCB0;
      v21[3] = &unk_1022E9F20;
      uint64_t v13 = *(CLConnectionMessage **)a2;
      uint64_t v12 = *(std::__shared_weak_count **)(a2 + 8);
      v21[4] = a1;
      void v21[5] = v13;
      CFStringRef v22 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      [v11 fetchEstimatedLocationAtDate:v8 withReply:v21];
      if (v22) {
        sub_1000DB0A0(v22);
      }
    }
    else
    {
      if (qword_102419550 != -1) {
        dispatch_once(&qword_102419550, &stru_1022EA3A8);
      }
      uint64_t v19 = qword_102419558;
      if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_DEFAULT))
      {
        std::string __p = (void *)68289026;
        __int16 v37 = 2082;
        double v38 = "";
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Error CLRoutineMonitor is not supported\"}", (uint8_t *)&__p, 0x12u);
      }
      CFStringRef v30 = @"kCLConnectionMessageErrorKey";
      NSErrorUserInfoKey v28 = NSLocalizedDescriptionKey;
      CFStringRef v29 = @"Not supported.";
      uint64_t v31 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v29 forKeys:&v28 count:1]);
      +[NSDictionary dictionaryWithObjects:&v31 forKeys:&v30 count:1];
      CLConnectionMessage::sendReply();
    }
    if (v11)
    {
      CFStringRef v26 = @"kCLConnectionMessageErrorKey";
      NSErrorUserInfoKey v24 = NSLocalizedDescriptionKey;
      CFStringRef v25 = @"Not supported.";
      uint64_t v27 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v25 forKeys:&v24 count:1]);
      +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    if (qword_102419550 != -1) {
      dispatch_once(&qword_102419550, &stru_1022EA3A8);
    }
    __int16 v18 = qword_102419558;
    if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Error checking date parameter", (uint8_t *)&__p, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_102419550 != -1) {
        dispatch_once(&qword_102419550, &stru_1022EA3A8);
      }
      __int16 v23 = 0;
      __int16 v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageFetchEstimatedLocationAtDate(std::shared_ptr<CLConnectionMessage>)", "%s\n", v20);
      if (v20 != (char *)&__p) {
        free(v20);
      }
    }
    CFStringRef v34 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v32 = NSLocalizedDescriptionKey;
    CFStringRef v33 = @"Invalid parameters.";
    uint64_t v35 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1]);
    +[NSDictionary dictionaryWithObjects:&v35 forKeys:&v34 count:1];
    CLConnectionMessage::sendReply();
  }
LABEL_23:
}

void sub_100BDBC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  _Unwind_Resume(a1);
}

void sub_100BDBCB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (qword_102419550 != -1) {
    dispatch_once(&qword_102419550, &stru_1022EA3A8);
  }
  char v6 = qword_102419558;
  if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(v5 + 48);
    *(_DWORD *)uint64_t buf = 68289282;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    __int16 v16 = 2114;
    uint64_t v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Request for estimated locations is replied\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if (a3)
  {
    CFStringRef v10 = @"kCLConnectionMessageErrorKey";
    uint64_t v11 = a3;
    +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
  }
  else
  {
    if (!a2) {
      return;
    }
    CFStringRef v8 = @"kCLConnectionMessageFetchEstimatedLocationLocationKey";
    uint64_t v9 = a2;
    +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
  }
  CLConnectionMessage::sendReply();
}

void sub_100BDBE28(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSAutoreleasePool);
  [objc_msgSend(*(void *)(a1 + 16), 0, 0) objectForKey:[objc_msgSend(*(id *)(a1 + 48), "clientKey")];
  CLConnectionMessage::sendReply();
}

void sub_100BDBEA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100BDBEB4(void *a1, CLConnectionMessage **a2)
{
  CFDictionaryRef Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_10013FA80((int)v8, Dictionary);
  BOOL v7 = 0;
  if (sub_1000D2988((uint64_t)v8, "kCLConnectionMessageSubscribeKey", &v7))
  {
    sub_100BDC0D0(a1, v7);
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    id v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v12 = "kCLConnectionMessageSubscribeKey";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      int v9 = 136446210;
      CFStringRef v10 = "kCLConnectionMessageSubscribeKey";
      char v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageVehicleSpeed(std::shared_ptr<CLConnectionMessage>)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return sub_10013F3C4(v8);
}

void sub_100BDC0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_100BDC0D0(void *a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022EA328);
  }
  uint64_t v5 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = a1[6];
    *(_DWORD *)uint64_t buf = 138412546;
    uint64_t v17 = v6;
    __int16 v18 = 1024;
    int v19 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Received VehicleSpeed request,client,%@,subscribe,%d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleRequestVehicleSpeed(BOOL, const CLNameValuePair &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if (sub_100BE5800(a1))
  {
    (*(void (**)(void *, const char *, uint64_t))(*a1 + 32))(a1, "kCLConnectionMessageVehicleSpeed", a2);
    if (a2)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      BOOL v7 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = a1[6];
        *(_DWORD *)uint64_t buf = 138412290;
        uint64_t v17 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "client '%@' subscribing to vehicle speed", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022EA328);
        }
        __int16 v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleRequestVehicleSpeed(BOOL, const CLNameValuePair &)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      uint64_t v9 = sub_100BCF470((uint64_t)a1);
      [*(id *)(*(void *)v9 + 16) register:*(void *)(*(void *)v9 + 8) forNotification:20 registrationInfo:0];
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      CFStringRef v10 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = a1[6];
        *(_DWORD *)uint64_t buf = 138412290;
        uint64_t v17 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "client '%@' unsubscribing from vehicle speed", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022EA328);
        }
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleRequestVehicleSpeed(BOOL, const CLNameValuePair &)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      uint64_t v12 = sub_100BCF470((uint64_t)a1);
      [*(id *)(*(void *)v12 + 16) unregister:*(void *)(*(void *)v12 + 8) forNotification:20];
    }
  }
}

void sub_100BDC5C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100BDC5FC(void *a1, CLConnectionMessage **a2)
{
  CFDictionaryRef Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_10013FA80((int)v8, Dictionary);
  BOOL v7 = 0;
  if (sub_1000D2988((uint64_t)v8, "kCLConnectionMessageSubscribeKey", &v7))
  {
    sub_100BDC818(a1, v7);
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    id v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v12 = "kCLConnectionMessageSubscribeKey";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      int v9 = 136446210;
      CFStringRef v10 = "kCLConnectionMessageSubscribeKey";
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageVehicleHeading(std::shared_ptr<CLConnectionMessage>)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return sub_10013F3C4(v8);
}

void sub_100BDC7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_100BDC818(void *a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022EA328);
  }
  uint64_t v5 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = a1[6];
    *(_DWORD *)uint64_t buf = 138412546;
    uint64_t v17 = v6;
    __int16 v18 = 1024;
    int v19 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Received VehicleHeading request,client,%@,subscribe,%d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleRequestVehicleHeading(BOOL, const CLNameValuePair &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if (sub_100BE5800(a1))
  {
    (*(void (**)(void *, const char *, uint64_t))(*a1 + 32))(a1, "kCLConnectionMessageVehicleHeading", a2);
    if (a2)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      BOOL v7 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = a1[6];
        *(_DWORD *)uint64_t buf = 138412290;
        uint64_t v17 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "client '%@' subscribing to vehicle heading", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022EA328);
        }
        __int16 v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleRequestVehicleHeading(BOOL, const CLNameValuePair &)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      uint64_t v9 = sub_100BCF470((uint64_t)a1);
      [*(id *)(*(void *)v9 + 16) register:*(void *)(*(void *)v9 + 8) forNotification:21 registrationInfo:0];
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      CFStringRef v10 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = a1[6];
        *(_DWORD *)uint64_t buf = 138412290;
        uint64_t v17 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "client '%@' unsubscribing from vehicle heading", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022EA328);
        }
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleRequestVehicleHeading(BOOL, const CLNameValuePair &)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      uint64_t v12 = sub_100BCF470((uint64_t)a1);
      [*(id *)(*(void *)v12 + 16) unregister:*(void *)(*(void *)v12 + 8) forNotification:21];
    }
  }
}

void sub_100BDCD08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100BDCD44(uint64_t a1, CLConnectionMessage **a2)
{
  CFDictionaryRef Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_10013FA80((int)v8, Dictionary);
  BOOL v7 = 0;
  if (sub_1000D2988((uint64_t)v8, "kCLConnectionMessageSubscribeKey", &v7))
  {
    sub_100BDCF64(a1, v7, (uint64_t)v8);
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    id v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v12 = "kCLConnectionMessageSubscribeKey";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      int v9 = 136446210;
      CFStringRef v10 = "kCLConnectionMessageSubscribeKey";
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageGyroBiasEstimation(std::shared_ptr<CLConnectionMessage>)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return sub_10013F3C4(v8);
}

void sub_100BDCF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_100BDCF64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_1022EA348);
  }
  BOOL v7 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t buf = 138543618;
    uint64_t v31 = v8;
    __int16 v32 = 1026;
    int v33 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLDaemonClient received GyroBiasEstimation request,client,%{public}@,subscribe,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1022EA348);
    }
    uint64_t v18 = *(void *)(a1 + 48);
    int v26 = 138543618;
    uint64_t v27 = v18;
    __int16 v28 = 1026;
    int v29 = a2;
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleRequestGyroBiasEstimation(BOOL, const CLNameValuePair &)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 32))(a1, "kCLConnectionMessageGyroBiasEstimation", a2);
  if (a2)
  {
    BOOL v25 = 0;
    if (sub_1000D2988(a3, "kCLConnectionMessageBuildGYTTKey", &v25))
    {
      if (v25) {
        [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", @"CLGyroCalibrationDatabase"), "startFactoryGYTT"]
      }
    }
    else
    {
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1022EA348);
      }
      uint64_t v11 = off_1024190B8;
      if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "isBuildingGYTT not set", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190B0 != -1) {
          dispatch_once(&qword_1024190B0, &stru_1022EA348);
        }
        LOWORD(v26) = 0;
        CFStringRef v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleRequestGyroBiasEstimation(BOOL, const CLNameValuePair &)", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      BOOL v25 = 0;
    }
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1022EA348);
    }
    uint64_t v12 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      LODWORD(v31) = v25;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "CLDaemonClient got gyro bias estimation subscription request,isBuildingGYTT,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1022EA348);
      }
      int v26 = 67240192;
      LODWORD(v27) = v25;
      int v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleRequestGyroBiasEstimation(BOOL, const CLNameValuePair &)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    uint64_t v14 = *(void *)(a1 + 408);
    int v13 = *(std::__shared_weak_count **)(a1 + 416);
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_1000DB0A0(v13);
    }
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = sub_1012AD420();
    BOOL v17 = v25;
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3321888768;
    _OWORD v23[2] = sub_100BE0960;
    _OWORD v23[3] = &unk_1022EA078;
    v23[4] = v15;
    v23[5] = a1;
    v23[6] = v14;
    NSErrorUserInfoKey v24 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1012AE2B0(v16, a1, v17, (uint64_t)v23);
    *(unsigned char *)(a1 + 276) = 1;
    if (v24) {
      std::__shared_weak_count::__release_weak(v24);
    }
    if (v13) {
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1022EA348);
    }
    int v9 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "CLDaemonClient got gyro bias estimation unsubscription request", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1022EA348);
      }
      LOWORD(v26) = 0;
      __int16 v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleRequestGyroBiasEstimation(BOOL, const CLNameValuePair &)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    uint64_t v10 = sub_1012AD420();
    sub_1012AE2B0(v10, a1, 0, 0);
    *(unsigned char *)(a1 + 276) = 0;
  }
}

void sub_100BDD650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100BDD6B4(void *a1, CLConnectionMessage **a2)
{
  CFDictionaryRef Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_10013FA80((int)v8, Dictionary);
  BOOL v7 = 0;
  if (sub_1000D2988((uint64_t)v8, "kCLConnectionMessageSubscribeKey", &v7))
  {
    sub_100BDD8D0(a1, v7);
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    id v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v12 = "kCLConnectionMessageSubscribeKey";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      int v9 = 136446210;
      uint64_t v10 = "kCLConnectionMessageSubscribeKey";
      id v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageGmm(std::shared_ptr<CLConnectionMessage>)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return sub_10013F3C4(v8);
}

void sub_100BDD8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_100BDD8D0(void *a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022EA368);
  }
  uint64_t v5 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = a1[6];
    buf[0] = 138543618;
    *(void *)&buf[1] = v6;
    __int16 v10 = 1026;
    int v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Received GMM request,client,%{public}@,subscribe,%{public}d", (uint8_t *)buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022EA368);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleRequestGmm(BOOL, const CLNameValuePair &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  (*(void (**)(void *, const char *, uint64_t))(*a1 + 32))(a1, "kCLConnectionMessageGmm", a2);
  uint64_t v7 = a1[28];
  if (a2)
  {
    if (!v7) {
      sub_100DE37F4();
    }
  }
  else if (v7)
  {
    a1[28] = 0;
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
}

void sub_100BDDBC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100BDDBFC(void *a1, CLConnectionMessage **a2)
{
  CFDictionaryRef Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_10013FA80((int)v8, Dictionary);
  BOOL v7 = 0;
  if (sub_1000D2988((uint64_t)v8, "kCLConnectionMessageSubscribeKey", &v7))
  {
    sub_100BDDE18(a1, v7);
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    id v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v12 = "kCLConnectionMessageSubscribeKey";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      int v9 = 136446210;
      __int16 v10 = "kCLConnectionMessageSubscribeKey";
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessagePressureBias(std::shared_ptr<CLConnectionMessage>)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return sub_10013F3C4(v8);
}

void sub_100BDDDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_100BDDE18(void *a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_1022EA388);
  }
  uint64_t v5 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = a1[6];
    buf[0] = 138412546;
    *(void *)&buf[1] = v6;
    __int16 v10 = 1024;
    int v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Received pressure bias estimation request.,client,%@,subscribe,%d", (uint8_t *)buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022EA388);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleRequestPressureBias(BOOL, const CLNameValuePair &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  (*(void (**)(void *, const char *, uint64_t))(*a1 + 32))(a1, "kCLConnectionMessagePressureBias", a2);
  uint64_t v7 = a1[29];
  if (a2)
  {
    if (!v7) {
      sub_1010C9A38();
    }
  }
  else
  {
    a1[29] = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
}

void sub_100BDE110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100BDE144(uint64_t a1)
{
  sub_100134750(__p, "com.apple.locationd.activity");
  uint64_t v2 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 40))(a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_100BDE1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100BDE1DC(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 196))
  {
    if (sub_100BDE144(a1)
      || (CLConnection::getAuditToken(v7, *(CLConnection **)(a1 + 264)), TCCAccessCheckAuditToken()))
    {
      *(_DWORD *)(a1 + 196) = 1;
    }
    else
    {
      *(_DWORD *)(a1 + 196) = 2;
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      char v3 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = *(void *)(a1 + 48);
        *(_DWORD *)uint64_t buf = 138412290;
        uint64_t v11 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Client %@ did not pass entitlement/tcc checks.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022EA328);
        }
        uint64_t v5 = *(void *)(a1 + 48);
        int v8 = 138412290;
        uint64_t v9 = v5;
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLDaemonClient::isAuthorizedForMotionActivity()", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
    }
  }
  return *(_DWORD *)(a1 + 196) == 1;
}

BOOL sub_100BDE3EC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 200)) {
    return *(_DWORD *)(a1 + 200) == 1;
  }
  if (sub_100BDE144(a1))
  {
LABEL_5:
    *(_DWORD *)(a1 + 200) = 1;
    return *(_DWORD *)(a1 + 200) == 1;
  }
  if (!sub_10131C33C(0))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EA3C8);
    }
    uint64_t v2 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v14 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client %@ cannot access sensor recorder, invalid target.\n", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return *(_DWORD *)(a1 + 200) == 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EA3C8);
    }
    uint64_t v4 = *(void *)(a1 + 48);
    int v11 = 138412290;
    uint64_t v12 = v4;
LABEL_23:
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDaemonClient::isAuthorizedForSensorRecorder()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
    return *(_DWORD *)(a1 + 200) == 1;
  }
  CLConnection::getAuditToken(v10, *(CLConnection **)(a1 + 264));
  if (TCCAccessCheckAuditToken()) {
    goto LABEL_5;
  }
  *(_DWORD *)(a1 + 200) = 2;
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022EA3C8);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t buf = 138412290;
    uint64_t v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Client %@ did not pass entitlement/tcc checks.\n", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EA3C8);
    }
    uint64_t v8 = *(void *)(a1 + 48);
    int v11 = 138412290;
    uint64_t v12 = v8;
    goto LABEL_23;
  }
  return *(_DWORD *)(a1 + 200) == 1;
}

uint64_t sub_100BDE6FC()
{
  uint64_t v1 = CMErrorMessage;
  uint64_t v2 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
  +[NSDictionary dictionaryWithObjects:&v2 forKeys:&v1 count:1];
  return CLConnectionMessage::sendReply();
}

void sub_100BDE794(uint64_t a1, uint64_t *a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (sub_100BDE144(a1))
  {
    id v5 = [[[*(id *)(a1 + 24) vendor] proxyForService:@"CLVehicleConnectionNotifier"];
    [v5 registerDelegate:*(void *)(a1 + 40) inSilo:*(void *)(a1 + 32)];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3321888768;
    v12[2] = sub_100BDEAF8;
    void v12[3] = &unk_1022E9F50;
    uint64_t v7 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    void v12[4] = a1;
    v12[5] = v7;
    int v13 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [v5 fetchMostRecentConnectionWithReply:v12];
    if (v13) {
      sub_1000DB0A0(v13);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    uint64_t v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Client %@ does not have appropriate entitlement to access motion activity spi", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      uint64_t v10 = *(void *)(a1 + 48);
      int v14 = 138412290;
      uint64_t v15 = v10;
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageVehicleConnectionMostRecent(std::shared_ptr<CLConnectionMessage>)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    sub_100BDEA58(a1, 106);
  }
}

void sub_100BDEA14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100BDEA58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = CMErrorMessage;
  id v4 = +[NSNumber numberWithUnsignedInt:a2];
  +[NSDictionary dictionaryWithObjects:&v4 forKeys:&v3 count:1];
  sub_100C087F8(a1);
}

void sub_100BDEAF8(uint64_t a1, uint64_t a2)
{
  if (*(double *)a2 <= 0.0)
  {
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100BDE6FC();
    if (v6)
    {
      sub_1000DB0A0(v6);
    }
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = [[CMMotionTimeRange alloc] initWithStartDate:*(double *)a2 endDate:*(double *)(a2 + 8)];
    if (*(unsigned char *)(a2 + 16)) {
      id v5 = [objc_alloc((Class)NSString) initWithUTF8String:a2 + 16];
    }
    else {
      id v5 = 0;
    }
    if (*(unsigned char *)(a2 + 272)) {
      id v7 = [objc_alloc((Class)NSString) initWithUTF8String:a2 + 272];
    }
    else {
      id v7 = 0;
    }
    if (*(unsigned char *)(a2 + 528)) {
      id v8 = [objc_alloc((Class)NSString) initWithUTF8String:a2 + 528];
    }
    else {
      id v8 = 0;
    }
    uint64_t v9 = [[CMVehicleStateData alloc] initWithTimeRange:v4 vehicleName:v5 vehicleModelName:v7 vehicleBluetoothAddress:v8];
    uint64_t v20 = CMVehicleConnectionDataKey;
    int v21 = v9;
    +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_1022EA3E8);
    }
    uint64_t v10 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void *)(v3 + 48);
      *(_DWORD *)uint64_t buf = 68289539;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2113;
      uint64_t v17 = v11;
      __int16 v18 = 2113;
      int v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Sending vehicle connection\", \"to client\":%{private, location:escape_only}@, \"data\":%{private, location:escape_only}@}", buf, 0x26u);
    }

    CLConnectionMessage::sendReply();
  }
}

void sub_100BDED98(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BDEDB8(uint64_t a1, uint64_t *a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_100BDE144(a1) & 1) == 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    id v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v22 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Client %@ does not have appropriate entitlement to access motion activity spi", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      uint64_t v13 = *(void *)(a1 + 48);
      int v19 = 138412290;
      uint64_t v20 = v13;
      __int16 v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageVehicleStateMostRecentInVehicle(std::shared_ptr<CLConnectionMessage>)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    uint64_t v7 = 106;
    goto LABEL_15;
  }
  if ((sub_1000A16E8() & 0x80000000) == 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    id v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Client %@ does not have access to motion activity spi because the platform is not supported", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      uint64_t v15 = *(void *)(a1 + 48);
      int v19 = 138412290;
      uint64_t v20 = v15;
      __int16 v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageVehicleStateMostRecentInVehicle(std::shared_ptr<CLConnectionMessage>)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    uint64_t v7 = 109;
LABEL_15:
    sub_100BDF1E4(a1, v7);
    goto LABEL_16;
  }
  id v10 = [[objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLVehicleConnectionNotifier"];
  [v10 registerDelegate:*(void *)(a1 + 40) inSilo:*(void *)(a1 + 32)];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3321888768;
  v17[2] = sub_100BDF284;
  v17[3] = &unk_1022E9F80;
  uint64_t v12 = *a2;
  uint64_t v11 = (std::__shared_weak_count *)a2[1];
  v17[4] = a1;
  v17[5] = v12;
  __int16 v18 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  [v10 fetchMostRecentInVehicleStartAndExitTimesWithReply:v17];
  if (v18) {
    sub_1000DB0A0(v18);
  }
LABEL_16:
}

void sub_100BDF198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100BDF1E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = CMErrorMessage;
  id v4 = +[NSNumber numberWithUnsignedInt:a2];
  +[NSDictionary dictionaryWithObjects:&v4 forKeys:&v3 count:1];
  sub_100C0888C(a1);
}

void sub_100BDF284(uint64_t a1, double a2, double a3)
{
  if (a2 <= 0.0)
  {
    id v4 = *(std::__shared_weak_count **)(a1 + 48);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100BDE6FC();
    if (v4)
    {
      sub_1000DB0A0(v4);
    }
  }
  else
  {
    v5[0] = CMVehicleConnectionStartTime;
    v6[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    v5[1] = CMVehicleConnectionEndTime;
    v6[1] = +[NSNumber numberWithDouble:a3];
    +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:2];
    CLConnectionMessage::sendReply();
  }
}

void sub_100BDF3BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BDF3DC(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (sub_100BDE144(a1))
  {
    CFDictionaryRef Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
    uint64_t v6 = Dictionary;
    if (Dictionary
      && (uint64_t v7 = CMVehicleStateDeviceId, [Dictionary objectForKeyedSubscript:CMVehicleStateDeviceId])
      && (uint64_t v8 = CMVehicleStateDeviceType, [v6 objectForKeyedSubscript:CMVehicleStateDeviceType]))
    {
      id v9 = [v6 objectForKeyedSubscript:v7];
      id v10 = [[objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLVehicleConnectionNotifier"];
      [v10 registerDelegate:*(void *)(a1 + 40) inSilo:*(void *)(a1 + 32)];
      id v11 = [[v6 objectForKeyedSubscript:v8] unsignedIntegerValue];
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3321888768;
      unint64_t v20[2] = sub_100BDF92C;
      v20[3] = &unk_1022E9FB0;
      uint64_t v12 = *(std::__shared_weak_count **)(a2 + 8);
      v20[4] = *(void *)a2;
      int v21 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      [v10 fetchIsDeviceVehicle:v9 deviceType:v11 withReply:v20];
      uint64_t v13 = v21;
    }
    else
    {
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022EA3E8);
      }
      __int16 v16 = qword_102419018;
      if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Error checking IsVehicle with device address and type!", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419010 != -1) {
          dispatch_once(&qword_102419010, &stru_1022EA3E8);
        }
        LOWORD(v24) = 0;
        int v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageVehicleStateIsVehicle(std::shared_ptr<CLConnectionMessage>)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      uint64_t v13 = *(std::__shared_weak_count **)(a2 + 8);
      uint64_t v22 = *(CLConnectionMessage **)a2;
      __int16 v23 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_100BDE6FC();
    }
    if (v13) {
      sub_1000DB0A0(v13);
    }
  }
  else
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_1022EA3E8);
    }
    __int16 v14 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138543362;
      uint64_t v27 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Client %{public}@ does not have appropriate entitlement to access motion activity SPI", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022EA3E8);
      }
      uint64_t v17 = *(void *)(a1 + 48);
      int v24 = 138543362;
      uint64_t v25 = v17;
      __int16 v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageVehicleStateIsVehicle(std::shared_ptr<CLConnectionMessage>)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    sub_100BDF88C(a1, 106);
  }
}

void sub_100BDF82C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100BDF88C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = CMErrorMessage;
  id v4 = +[NSNumber numberWithUnsignedInt:a2];
  +[NSDictionary dictionaryWithObjects:&v4 forKeys:&v3 count:1];
  sub_100C08920(a1);
}

uint64_t sub_100BDF92C(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t v2 = 2;
  }
  else {
    uint64_t v2 = 1;
  }
  uint64_t v4 = CMVehicleStateIsVehicle;
  id v5 = +[NSNumber numberWithUnsignedInteger:v2];
  +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];
  return CLConnectionMessage::sendReply();
}

void sub_100BDF9D0(uint64_t a1, void *a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_100BDE144(a1) & 1) == 0)
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_1022EA3E8);
    }
    uint64_t v8 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138543362;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Client %{public}@ does not have appropriate entitlement to access motion activity SPI", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022EA3E8);
      }
      uint64_t v13 = *(void *)(a1 + 48);
      int v22 = 138543362;
      uint64_t v23 = v13;
      __int16 v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageVehicularOperatorState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v14);
      if (v14 != buf) {
        free(v14);
      }
    }
    uint64_t v7 = 106;
    goto LABEL_15;
  }
  if ((sub_1000A16E8() & 0x800000000) == 0)
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_1022EA3E8);
    }
    id v5 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138543362;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Client %{public}@ does not have access to vehicular state SPI because the platform is not supported", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022EA3E8);
      }
      uint64_t v15 = *(void *)(a1 + 48);
      int v22 = 138543362;
      uint64_t v23 = v15;
      __int16 v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageVehicularOperatorState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v16);
      if (v16 != buf) {
        free(v16);
      }
    }
    uint64_t v7 = 109;
LABEL_15:
    sub_100BDFFC4(a1, v7);
    goto LABEL_29;
  }
  id v10 = [[objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLVehicleStateNotifier"];
  [v10 registerDelegate:*(void *)(a1 + 40) inSilo:*(void *)(a1 + 32)];
  if (v10)
  {
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3321888768;
    _OWORD v18[2] = sub_100BE0064;
    v18[3] = &unk_1022E9FE0;
    id v11 = (std::__shared_weak_count *)a2[1];
    v18[4] = *a2;
    int v19 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [v10 fetchVehicularDndOperatorStateWithReply:v18];
    if (v19) {
      sub_1000DB0A0(v19);
    }
  }
  else
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_1022EA3E8);
    }
    uint64_t v12 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Cannot find vehicle state proxy", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022EA3E8);
      }
      LOWORD(v22) = 0;
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageVehicularOperatorState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v17);
      if (v17 != buf) {
        free(v17);
      }
    }
    sub_100134750(buf, "kCLConnectionMessageError");
    uint64_t v20 = CMErrorMessage;
    int v21 = &off_102393170;
    +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
    CLConnectionMessage::sendReply();
    if (v25 < 0) {
      operator delete(*(void **)buf);
    }
  }

LABEL_29:
}

void sub_100BDFF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _Unwind_Resume(a1);
}

void sub_100BDFFC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = CMErrorMessage;
  id v4 = +[NSNumber numberWithUnsignedInt:a2];
  +[NSDictionary dictionaryWithObjects:&v4 forKeys:&v3 count:1];
  sub_100C089B4(a1);
}

uint64_t sub_100BE0064(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = CMVehicularOperatorStateKey;
  id v4 = +[NSNumber numberWithUnsignedInteger:a2];
  +[NSDictionary dictionaryWithObjects:&v4 forKeys:&v3 count:1];
  return CLConnectionMessage::sendReply();
}

void sub_100BE0100(uint64_t a1, void *a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_100BDE144(a1) & 1) == 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    uint64_t v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138412290;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Client %@ does not have appropriate entitlement to access motion activity spi", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      uint64_t v13 = *(void *)(a1 + 48);
      int v22 = 138412290;
      uint64_t v23 = v13;
      __int16 v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageVehicularState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v14);
      if (v14 != buf) {
        free(v14);
      }
    }
    uint64_t v7 = 106;
    goto LABEL_15;
  }
  if ((sub_1000A16E8() & 0x800000000) == 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    id v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138412290;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Client %@ does not have access to vehicular state spi because the platform is not supported", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EA328);
      }
      uint64_t v15 = *(void *)(a1 + 48);
      int v22 = 138412290;
      uint64_t v23 = v15;
      __int16 v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageVehicularState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v16);
      if (v16 != buf) {
        free(v16);
      }
    }
    uint64_t v7 = 109;
LABEL_15:
    sub_100BE06F4(a1, v7);
    goto LABEL_29;
  }
  id v10 = [[objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLVehicleStateNotifier"];
  [v10 registerDelegate:*(void *)(a1 + 40) inSilo:*(void *)(a1 + 32)];
  if (v10)
  {
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3321888768;
    _OWORD v18[2] = sub_100BE0794;
    v18[3] = &unk_1022EA010;
    id v11 = (std::__shared_weak_count *)a2[1];
    v18[4] = *a2;
    int v19 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [v10 fetchVehicularDndStateAndHintsWithReply:v18];
    if (v19) {
      sub_1000DB0A0(v19);
    }
  }
  else
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_1022EA3E8);
    }
    uint64_t v12 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Cannot find vehicle state proxy", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022EA3E8);
      }
      LOWORD(v22) = 0;
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageVehicularState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v17);
      if (v17 != buf) {
        free(v17);
      }
    }
    sub_100134750(buf, "kCLConnectionMessageError");
    uint64_t v20 = CMErrorMessage;
    int v21 = &off_102393170;
    +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
    CLConnectionMessage::sendReply();
    if (v25 < 0) {
      operator delete(*(void **)buf);
    }
  }

LABEL_29:
}

void sub_100BE0688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _Unwind_Resume(a1);
}

void sub_100BE06F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = CMErrorMessage;
  id v4 = +[NSNumber numberWithUnsignedInt:a2];
  +[NSDictionary dictionaryWithObjects:&v4 forKeys:&v3 count:1];
  sub_100C08A48(a1);
}

uint64_t sub_100BE0794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = CMVehicularStateKey;
  v6[0] = +[NSNumber numberWithUnsignedInteger:a2];
  v5[1] = CMVehicularHintsKey;
  v6[1] = +[NSNumber numberWithUnsignedInteger:a3];
  +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:2];
  return CLConnectionMessage::sendReply();
}

void sub_100BE085C(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSAutoreleasePool);
  uint64_t v4 = CMAvailable;
  if (sub_100BDE144(a1)) {
    unint64_t v3 = ((unint64_t)sub_1000A16E8() >> 31) & 1;
  }
  else {
    unint64_t v3 = 0;
  }
  id v5 = +[NSNumber numberWithBool:v3];
  +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];
  CLConnectionMessage::sendReply();
}

void sub_100BE0934(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

void sub_100BE0960(void *a1, _OWORD *a2)
{
  v11[0] = *a2;
  *(_OWORD *)((char *)v11 + 12) = *(_OWORD *)((char *)a2 + 12);
  id v5 = a1 + 4;
  unint64_t v3 = (void *)a1[4];
  uint64_t v4 = v5[1];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  void v8[2] = sub_100BE0A38;
  void v8[3] = &unk_1022EA040;
  uint64_t v7 = a1[6];
  uint64_t v6 = (std::__shared_weak_count *)a1[7];
  void v8[4] = v4;
  void v8[5] = v7;
  uint64_t v9 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  v10[0] = v11[0];
  *(_OWORD *)((char *)v10 + 12) = *(_OWORD *)((char *)v11 + 12);
  [v3 async:v8];
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_100BE0A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BE0A38(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  v4[0] = *(_OWORD *)(a1 + 56);
  *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)(a1 + 68);
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    if (*(void *)(v3 + 8) != -1) {
      return sub_100BD5504(result, (uint64_t)v4);
    }
  }
  return result;
}

uint64_t sub_100BE0AD0(uint64_t a1)
{
  return sub_100BD5504(*(void *)(a1 + 32), a1 + 40);
}

void sub_100BE0AE0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 24), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EA2E8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonClient::onGmmNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EA2E8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonClient::onGmmNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100BD5798(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100BE0C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BE0CBC(uint64_t a1, int *a2, UInt8 *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 24), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EA2E8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonClient::onPressureBias", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EA2E8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonClient::onPressureBias\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100BD5A60(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100BE0E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BE0E98(uint64_t *a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (*(unsigned int (**)(uint64_t *))(*a1 + 152))(a1) && (sub_10117E038(a1[3]))
  {
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, objc_opt_class(), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v6);
    uint64_t v8 = DictionaryOfClasses;
    if (DictionaryOfClasses)
    {
      uint64_t v9 = CMFitnessMachineDataRecord;
      if ([DictionaryOfClasses objectForKeyedSubscript:CMFitnessMachineDataRecord])
      {
        sub_1000E1294((uint64_t *)buf, (uint64_t)"CLDaemonClient.FitnessMachineData", 0);
        [objc_msgSend((id)sub_100BE1224((uint64_t)a1), "feedFitnessMachineData:", objc_msgSend(v8, "objectForKeyedSubscript:", v9));
        uint64_t v13 = CMReturnCode;
        __int16 v14 = &off_102393188;
        +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
        CLConnectionMessage::sendReply();
        sub_1000E1098(buf);
        goto LABEL_11;
      }
    }
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022EA408);
    }
    char v11 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Error receiving data from fitness machine", (uint8_t *)buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022EA408);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageFitnessMachineData(std::shared_ptr<CLConnectionMessage>)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    id v10 = *(std::__shared_weak_count **)(a2 + 8);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100BDE6FC();
  }
  else
  {
    id v10 = *(std::__shared_weak_count **)(a2 + 8);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100BDE6FC();
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
LABEL_11:
}

void sub_100BE11C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100BE1224(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result)
  {
    id v3 = [[[*(id *)(a1 + 24) vendor] proxyForService:@"CLFitnessMachineNotifier"];
    *(void *)(a1 + 256) = v3;
    [v3 registerDelegate:*(void *)(a1 + 40) inSilo:*(void *)(a1 + 32)];
    return *(void *)(a1 + 256);
  }
  return result;
}

void sub_100BE1274(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_1000A16E8() & 0x20000) != 0)
  {
    unsigned int v5 = [objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLGyroCalibrationDatabase"] syncgetBiasFit:v8];
    double v4 = v9;
    if (v9 > 0.0) {
      uint64_t v3 = v5;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v3 = (int)[[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(id)[(
  }
  uint64_t v6 = CMAvailable;
  uint64_t v7 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v3, v4);
  +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
  CLConnectionMessage::sendReply();
}

void sub_100BE1380(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

uint64_t sub_100BE13B4(void *a1)
{
  sub_100134750(&__p, "com.apple.locationd.catherine_provider");
  uint64_t v2 = (*(uint64_t (**)(void *, void **))(*a1 + 40))(a1, &__p);
  uint64_t v3 = v2;
  if (SBYTE3(v13) < 0)
  {
    operator delete(__p);
    if (v3) {
      return v3;
    }
  }
  else if (v2)
  {
    return v3;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  double v4 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
  {
    uint64_t v5 = a1[6];
    std::string __p = (void *)68289282;
    __int16 v10 = 2082;
    char v11 = "";
    __int16 v12 = 2114;
    uint64_t v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Client does not have appropriate entitlement access catherine provider SPI\", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
  }
  uint64_t v6 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    uint64_t v7 = a1[6];
    std::string __p = (void *)68289282;
    __int16 v10 = 2082;
    char v11 = "";
    __int16 v12 = 2114;
    uint64_t v13 = v7;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Client does not have appropriate entitlement access catherine provider SPI", "{\"msg%{public}.0s\":\"Client does not have appropriate entitlement access catherine provider SPI\", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
  }
  return v3;
}

void sub_100BE15B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BE15D4(void *a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (sub_100BE13B4(a1))
  {
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, objc_opt_class(), 0);
    id v7 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v6) objectForKeyedSubscript:@"kCLConnectionMessageCatherineDataKey"];
    if (v7)
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      _OWORD v11[2] = sub_100BE17D4;
      float v11[3] = &unk_1022CA588;
      v11[4] = v7;
      sub_100A1F1F8((uint64_t)v11);
      uint64_t v8 = sub_1001A58C0();
      sub_1014311DC(v8, 1);
      double v9 = (dispatch_queue_t *)sub_10019F4CC();
      *(_DWORD *)uint64_t buf = 1;
      sub_100F2B2A4(v9, (uint64_t)buf);
    }
    else
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EA308);
      }
      __int16 v10 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        int v13 = 0;
        __int16 v14 = 2082;
        uint64_t v15 = "";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Packet contains nil catherine data\"}", buf, 0x12u);
      }
    }
  }
}

void sub_100BE17A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100BE17D4(uint64_t a1, uint64_t a2)
{
  if (a2) {
    sub_100A1EE08(a2, *(void **)(a1 + 32));
  }
}

uint64_t sub_100BE17EC(void *a1)
{
  sub_100134750(__p, "com.apple.locationd.rebuild_gytt");
  uint64_t v2 = (*(uint64_t (**)(void *, unsigned char *))(*a1 + 40))(a1, __p);
  uint64_t v3 = v2;
  if (v9 < 0)
  {
    operator delete(*(void **)__p);
    if (v3) {
      return v3;
    }
  }
  else if (v2)
  {
    return v3;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022EA328);
  }
  id v4 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[6];
    *(_DWORD *)std::string __p = 138412290;
    *(void *)&__p[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Client %@ does not have appropriate entitlement to run miniCal", __p, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDaemonClient::isEntitledForMiniCal()", "%s\n", v7);
    if (v7 != __p) {
      free(v7);
    }
  }
  return v3;
}

void sub_100BE1A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BE1A24(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_100BE17EC((void *)a1) & 1) == 0)
  {
    sub_100134750(__p, "kCLConnectionMessageError");
    uint64_t v7 = CMErrorMessage;
    uint64_t v8 = &off_1023931A0;
    +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
    CLConnectionMessage::sendReply();
LABEL_5:
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_10;
  }
  if ((sub_1000A16E8() & 0x2000) == 0)
  {
    sub_100134750(__p, "kCLConnectionMessageError");
    uint64_t v5 = CMErrorMessage;
    uint64_t v6 = &off_1023931B8;
    +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
    CLConnectionMessage::sendReply();
    goto LABEL_5;
  }
  if ([objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "isServiceRunning:", @"CLSensorCalibrationController")])[objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", @"CLSensorCalibrationController") start:1]; {
  CLConnectionMessage::sendReply();
  }
LABEL_10:
}

void sub_100BE1BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100BE1C00(uint64_t a1, int *a2)
{
  sub_100134750(__p, "com.apple.developer.health-movement-disorder");
  char v4 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 40))(a1, __p);
  char v5 = v4;
  if (SBYTE3(v39) < 0)
  {
    operator delete(*(void **)__p);
    if (v5)
    {
LABEL_3:
      uint64_t result = sub_1004421E4(*(void *)(a1 + 24));
      if (result)
      {
        if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1))
        {
          uint64_t result = 1;
          int v7 = 100;
        }
        else
        {
          if (qword_102419350 != -1) {
            dispatch_once(&qword_102419350, &stru_1022EA428);
          }
          int v13 = off_102419358;
          if (os_log_type_enabled((os_log_t)off_102419358, OS_LOG_TYPE_DEFAULT))
          {
            CLConnection::getName((uint64_t *)v30, *(CLConnection **)(a1 + 264));
            int v14 = SBYTE3(v34);
            uint64_t v15 = *(unsigned char **)v30;
            int RemotePid = CLConnection::getRemotePid(*(CLConnection **)(a1 + 264));
            uint64_t v17 = v30;
            *(_DWORD *)std::string __p = 136446722;
            if (v14 < 0) {
              uint64_t v17 = v15;
            }
            *(void *)&__p[4] = v17;
            __int16 v36 = 1026;
            int v37 = RemotePid;
            __int16 v38 = 2050;
            uint64_t v39 = a1;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning HealthAssessment,Client failed authorization check, %{public}s, %{public}d, %{public}p", __p, 0x1Cu);
            if (SBYTE3(v34) < 0) {
              operator delete(*(void **)v30);
            }
          }
          uint64_t result = sub_10013D1A0(115, 2);
          if (result)
          {
            bzero(__p, 0x65CuLL);
            if (qword_102419350 != -1) {
              dispatch_once(&qword_102419350, &stru_1022EA428);
            }
            CLConnection::getName((uint64_t *)v28, *(CLConnection **)(a1 + 264));
            int v23 = v29;
            int v24 = (void **)v28[0];
            int v25 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 264));
            int v26 = v28;
            *(_DWORD *)CFStringRef v30 = 136446722;
            if (v23 < 0) {
              int v26 = v24;
            }
            *(void *)&v30[4] = v26;
            __int16 v31 = 1026;
            int v32 = v25;
            __int16 v33 = 2050;
            uint64_t v34 = a1;
            uint64_t v27 = (char *)_os_log_send_and_compose_impl();
            if (v29 < 0) {
              operator delete(v28[0]);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDaemonClient::isAuthorizedForHealthAssessment(CMError &)", "%s\n", v27);
            if (v27 != __p) {
              free(v27);
            }
            uint64_t result = 0;
          }
          int v7 = 111;
        }
      }
      else
      {
        int v7 = 109;
      }
      goto LABEL_26;
    }
  }
  else if (v4)
  {
    goto LABEL_3;
  }
  if (qword_102419350 != -1) {
    dispatch_once(&qword_102419350, &stru_1022EA428);
  }
  uint64_t v8 = off_102419358;
  if (os_log_type_enabled((os_log_t)off_102419358, OS_LOG_TYPE_DEFAULT))
  {
    CLConnection::getName((uint64_t *)v30, *(CLConnection **)(a1 + 264));
    int v9 = SBYTE3(v34);
    __int16 v10 = *(unsigned char **)v30;
    int v11 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 264));
    __int16 v12 = v30;
    *(_DWORD *)std::string __p = 136446722;
    if (v9 < 0) {
      __int16 v12 = v10;
    }
    *(void *)&__p[4] = v12;
    __int16 v36 = 1026;
    int v37 = v11;
    __int16 v38 = 2050;
    uint64_t v39 = a1;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning HealthAssessment,Client failed entitlement check, %{public}s, %{public}d, %{public}p", __p, 0x1Cu);
    if (SBYTE3(v34) < 0) {
      operator delete(*(void **)v30);
    }
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419350 != -1) {
      dispatch_once(&qword_102419350, &stru_1022EA428);
    }
    CLConnection::getName((uint64_t *)v28, *(CLConnection **)(a1 + 264));
    int v18 = v29;
    uint64_t v19 = (void **)v28[0];
    int v20 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 264));
    int v21 = v28;
    *(_DWORD *)CFStringRef v30 = 136446722;
    if (v18 < 0) {
      int v21 = v19;
    }
    *(void *)&v30[4] = v21;
    __int16 v31 = 1026;
    int v32 = v20;
    __int16 v33 = 2050;
    uint64_t v34 = a1;
    int v22 = (char *)_os_log_send_and_compose_impl();
    if (v29 < 0) {
      operator delete(v28[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDaemonClient::isAuthorizedForHealthAssessment(CMError &)", "%s\n", v22);
    if (v22 != __p) {
      free(v22);
    }
    uint64_t result = 0;
  }
  int v7 = 110;
LABEL_26:
  *a2 = v7;
  return result;
}

void sub_100BE2114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BE2168(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  unsigned int v18 = 0;
  char v5 = sub_100BE1C00(a1, (int *)&v18);
  uint64_t v6 = *a2;
  if (v5)
  {
    int v7 = (objc_class *)objc_opt_class();
    ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v6, v7);
    int v9 = ObjectOfClass;
    if (ObjectOfClass)
    {
      unsigned int v10 = [ObjectOfClass dataType];
      [v9 duration];
      uint64_t v12 = v11;
      id v13 = [[objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLHealthAssessmentNotifier"];
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_100BE23B8;
      void v16[3] = &unk_1022EA0A8;
      unsigned int v17 = v10;
      v16[4] = v12;
      [v13 doAsync:v16];
      CLConnectionMessage::sendReply();
    }
    else
    {
      sub_100134750(&__p, "kCLConnectionMessageError");
      uint64_t v19 = CMErrorMessage;
      int v20 = &off_102393140;
      +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
      CLConnectionMessage::sendReply();
      if (v15 < 0) {
        operator delete(__p);
      }
    }
  }
  else
  {
    uint64_t v21 = CMErrorMessage;
    int v22 = +[NSNumber numberWithUnsignedInt:v18];
    +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
    CLConnectionMessage::sendReply();
  }
}

void sub_100BE2368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100BE23B8(uint64_t a1, uint64_t a2)
{
  return sub_100442F6C(a2, *(_DWORD *)(a1 + 40), *(double *)(a1 + 32));
}

void sub_100BE23CC()
{
}

void sub_100BE23F4()
{
}

void sub_100BE241C()
{
}

void sub_100BE2444(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSAutoreleasePool);
  uint64_t v3 = CMAuthorized;
  id v4 = +[NSNumber numberWithBool:sub_100BDE3EC(a1)];
  +[NSDictionary dictionaryWithObjects:&v4 forKeys:&v3 count:1];
  CLConnectionMessage::sendReply();
}

void sub_100BE2510(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

void sub_100BE2538(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  char v5 = *a2;
  uint64_t v6 = (objc_class *)objc_opt_class();
  ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v5, v6);
  if (ObjectOfClass)
  {
    unsigned int v8 = [ObjectOfClass dataType];
    if (!v8 || (sub_100BDE144(a1) & 1) != 0)
    {
      uint64_t v13 = CMAvailable;
      int v14 = +[NSNumber numberWithBool:sub_10131C33C(v8)];
      +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
      CLConnectionMessage::sendReply();
      goto LABEL_9;
    }
    sub_100134750(__p, "kCLConnectionMessageError");
    uint64_t v15 = CMErrorMessage;
    __int16 v16 = &off_1023931D0;
    +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
    CLConnectionMessage::sendReply();
  }
  else
  {
    sub_100134750(__p, "kCLConnectionMessageError");
    uint64_t v11 = CMErrorMessage;
    uint64_t v12 = &off_102393140;
    +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];
    CLConnectionMessage::sendReply();
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
LABEL_9:
}

void sub_100BE2700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_100BE2754(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  BOOL v5 = sub_100BDE3EC(a1);
  uint64_t v6 = *(CLConnectionMessage **)a2;
  if (v5)
  {
    int v7 = (objc_class *)objc_opt_class();
    ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v6, v7);
    int v9 = ObjectOfClass;
    if (ObjectOfClass)
    {
      id v10 = [ObjectOfClass identifier];
      unsigned int v11 = [v9 dataType];
      if (v11 && (sub_100BDE144(a1) & 1) == 0)
      {
        sub_100134750(__p, "kCLConnectionMessageError");
        uint64_t v23 = CMErrorMessage;
        int v24 = &off_1023931D0;
        +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1];
        CLConnectionMessage::sendReply();
      }
      else
      {
        if (sub_10131C33C(v11))
        {
          id v12 = [[objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLSensorRecorderNotifier"];
          v14[0] = _NSConcreteStackBlock;
          v14[1] = 3321888768;
          _OWORD v14[2] = sub_100BE2AA8;
          _DWORD v14[3] = &unk_1022EA0D0;
          unsigned int v16 = v11;
          v14[4] = v9;
          void v14[5] = v10;
          uint64_t v13 = *(std::__shared_weak_count **)(a2 + 8);
          v14[6] = *(void *)a2;
          uint64_t v15 = v13;
          if (v13) {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          [v12 doAsync:v14];
          if (v15) {
            sub_1000DB0A0(v15);
          }
          goto LABEL_16;
        }
        sub_100134750(__p, "kCLConnectionMessageError");
        uint64_t v21 = CMErrorMessage;
        int v22 = &off_1023931B8;
        +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
        CLConnectionMessage::sendReply();
      }
    }
    else
    {
      sub_100134750(__p, "kCLConnectionMessageError");
      uint64_t v19 = CMErrorMessage;
      int v20 = &off_102393140;
      +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    sub_100134750(__p, "kCLConnectionMessageError");
    uint64_t v25 = CMErrorMessage;
    int v26 = &off_1023931D0;
    +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
    CLConnectionMessage::sendReply();
  }
  if (v18 < 0) {
    operator delete(__p[0]);
  }
LABEL_16:
}

void sub_100BE2A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  _Unwind_Resume(a1);
}

void sub_100BE2AA8(uint64_t a1, uint64_t *a2)
{
  if (sub_10131EE74(a2, *(_DWORD *)(a1 + 64), *(void *)(a1 + 40), (uint64_t)objc_msgSend(objc_alloc((Class)CLSensorRecorderSensorMeta), "initWithDataType:", objc_msgSend(*(id *)(a1 + 32), "dataType"))))
  {
    CLConnectionMessage::sendReply();
  }
  else
  {
    sub_100134750(&__p, "kCLConnectionMessageError");
    uint64_t v4 = CMErrorMessage;
    BOOL v5 = &off_1023931E8;
    +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];
    CLConnectionMessage::sendReply();
    if (v3 < 0) {
      operator delete(__p);
    }
  }
}

void sub_100BE2BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_100BE2C18(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100BE2C34(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

void sub_100BE2C44(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  BOOL v5 = sub_100BDE3EC(a1);
  uint64_t v6 = *(CLConnectionMessage **)a2;
  if (v5)
  {
    int v7 = (objc_class *)objc_opt_class();
    ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v6, v7);
    int v9 = ObjectOfClass;
    if (ObjectOfClass)
    {
      id v10 = [ObjectOfClass identifier];
      unsigned int v11 = [v9 dataType];
      if (v11 && (sub_100BDE144(a1) & 1) == 0)
      {
        sub_100134750(__p, "kCLConnectionMessageError");
        uint64_t v23 = CMErrorMessage;
        int v24 = &off_1023931D0;
        +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1];
        CLConnectionMessage::sendReply();
      }
      else
      {
        if (sub_10131C33C(v11))
        {
          id v12 = [objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLSensorRecorderNotifier"];
          v14[0] = _NSConcreteStackBlock;
          v14[1] = 3321888768;
          _OWORD v14[2] = sub_100BE2F98;
          _DWORD v14[3] = &unk_1022EA0D0;
          unsigned int v16 = v11;
          v14[4] = v9;
          void v14[5] = v10;
          uint64_t v13 = *(std::__shared_weak_count **)(a2 + 8);
          v14[6] = *(void *)a2;
          uint64_t v15 = v13;
          if (v13) {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          [v12 doAsync:v14];
          if (v15) {
            sub_1000DB0A0(v15);
          }
          goto LABEL_16;
        }
        sub_100134750(__p, "kCLConnectionMessageError");
        uint64_t v21 = CMErrorMessage;
        int v22 = &off_1023931B8;
        +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
        CLConnectionMessage::sendReply();
      }
    }
    else
    {
      sub_100134750(__p, "kCLConnectionMessageError");
      uint64_t v19 = CMErrorMessage;
      int v20 = &off_102393140;
      +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    sub_100134750(__p, "kCLConnectionMessageError");
    uint64_t v25 = CMErrorMessage;
    int v26 = &off_1023931D0;
    +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
    CLConnectionMessage::sendReply();
  }
  if (v18 < 0) {
    operator delete(__p[0]);
  }
LABEL_16:
}

void sub_100BE2F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  _Unwind_Resume(a1);
}

void sub_100BE2F98(uint64_t a1, uint64_t *a2)
{
  if (sub_10131EEB4(a2, *(_DWORD *)(a1 + 64), *(void *)(a1 + 40), (uint64_t)objc_msgSend(objc_alloc((Class)CLSensorRecorderSensorMeta), "initWithDataType:", objc_msgSend(*(id *)(a1 + 32), "dataType"))))
  {
    CLConnectionMessage::name(*(CLConnectionMessage **)(a1 + 48));
    CLConnectionMessage::sendReply();
  }
  else
  {
    sub_100134750(&__p, "kCLConnectionMessageError");
    uint64_t v5 = CMErrorMessage;
    uint64_t v6 = &off_1023931E8;
    +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
    CLConnectionMessage::sendReply();
    if (v4 < 0) {
      operator delete(__p);
    }
  }
}

void sub_100BE30F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_100BE3114(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  BOOL v5 = sub_100BDE3EC(a1);
  uint64_t v6 = *(CLConnectionMessage **)a2;
  if (v5)
  {
    int v7 = (objc_class *)objc_opt_class();
    ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v6, v7);
    int v9 = ObjectOfClass;
    if (ObjectOfClass)
    {
      [ObjectOfClass startTime];
      double v11 = v10;
      [v9 endTime];
      double v13 = v12;
      unsigned int v14 = [v9 dataType];
      if (v14 && (sub_100BDE144(a1) & 1) == 0)
      {
        sub_100134750(__p, "kCLConnectionMessageError");
        uint64_t v28 = CMErrorMessage;
        char v29 = &off_1023931D0;
        +[NSDictionary dictionaryWithObjects:&v29 forKeys:&v28 count:1];
        CLConnectionMessage::sendReply();
      }
      else if (sub_10131C33C(v14))
      {
        if (v11 < v13)
        {
          id v15 = [[objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLSensorRecorderNotifier"];
          v17[0] = _NSConcreteStackBlock;
          v17[1] = 3321888768;
          v17[2] = sub_100BE34E8;
          v17[3] = &unk_1022EA100;
          unsigned int v19 = v14;
          *(double *)&v17[4] = v11;
          *(double *)&v17[5] = v13;
          unsigned int v16 = *(std::__shared_weak_count **)(a2 + 8);
          void v17[6] = *(void *)a2;
          char v18 = v16;
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          [v15 doAsync:v17];
          if (v18) {
            sub_1000DB0A0(v18);
          }
          goto LABEL_18;
        }
        sub_100134750(__p, "kCLConnectionMessageError");
        uint64_t v24 = CMErrorMessage;
        uint64_t v25 = &off_1023931E8;
        +[NSDictionary dictionaryWithObjects:&v25 forKeys:&v24 count:1];
        CLConnectionMessage::sendReply();
      }
      else
      {
        sub_100134750(__p, "kCLConnectionMessageError");
        uint64_t v26 = CMErrorMessage;
        uint64_t v27 = &off_1023931B8;
        +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
        CLConnectionMessage::sendReply();
      }
    }
    else
    {
      sub_100134750(__p, "kCLConnectionMessageError");
      uint64_t v22 = CMErrorMessage;
      uint64_t v23 = &off_102393140;
      +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    sub_100134750(__p, "kCLConnectionMessageError");
    uint64_t v30 = CMErrorMessage;
    __int16 v31 = &off_1023931D0;
    +[NSDictionary dictionaryWithObjects:&v31 forKeys:&v30 count:1];
    CLConnectionMessage::sendReply();
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
LABEL_18:
}

void sub_100BE3460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a17) {
    sub_1000DB0A0(a17);
  }

  _Unwind_Resume(a1);
}

void sub_100BE34E8(uint64_t a1, uint64_t *a2)
{
  id v4 = +[NSMutableArray arrayWithCapacity:10];
  if (sub_10131EEF4(a2, *(_DWORD *)(a1 + 64), *(double *)(a1 + 32), *(double *)(a1 + 40)))
  {
    if (qword_102419110 != -1) {
      dispatch_once(&qword_102419110, &stru_1022EA448);
    }
    BOOL v5 = qword_102419118;
    if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)uint64_t buf = 134218496;
      *(void *)&uint8_t buf[4] = v6;
      __int16 v20 = 2048;
      uint64_t v21 = v7;
      __int16 v22 = 1024;
      unsigned int v23 = [(NSMutableArray *)v4 count];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "(%f, %f), %d records returned", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419110 != -1) {
        dispatch_once(&qword_102419110, &stru_1022EA448);
      }
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v8 = *(void *)(a1 + 40);
      int v13 = 134218496;
      uint64_t v14 = v9;
      __int16 v15 = 2048;
      uint64_t v16 = v8;
      __int16 v17 = 1024;
      unsigned int v18 = [(NSMutableArray *)v4 count];
      double v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageSensorRecorderGetMetasByDateRange(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v10);
      if (v10 != buf) {
        free(v10);
      }
    }
    CLConnectionMessage::name(*(CLConnectionMessage **)(a1 + 48));
    CLConnectionMessage::sendReply();
  }
  else
  {
    sub_100134750(buf, "kCLConnectionMessageError");
    uint64_t v11 = CMErrorMessage;
    double v12 = &off_1023931E8;
    +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];
    CLConnectionMessage::sendReply();
    if (SHIBYTE(v22) < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_100BE379C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BE37C0(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  char v5 = sub_100BDE144(a1);
  uint64_t v6 = *(CLConnectionMessage **)a2;
  if (v5)
  {
    uint64_t v7 = (objc_class *)objc_opt_class();
    ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v6, v7);
    uint64_t v9 = ObjectOfClass;
    if (ObjectOfClass)
    {
      [ObjectOfClass startTime];
      double v11 = v10;
      [v9 endTime];
      double v13 = v12;
      unsigned int v14 = [v9 dataType];
      if (sub_10131C33C(v14))
      {
        id v15 = [objc_alloc((Class)NSFileHandle) initWithFileDescriptor:CLConnectionMessage::copyFileDescriptor(*(CLConnectionMessage **)a2) closeOnDealloc:1];
        if (v15 && v11 < v13)
        {
          id v16 = [[objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLSensorRecorderNotifier"];
          v18[0] = _NSConcreteStackBlock;
          v18[1] = 3321888768;
          _OWORD v18[2] = sub_100BE3B74;
          v18[3] = &unk_1022EA138;
          unsigned int v20 = v14;
          v18[4] = v15;
          *(double *)&void v18[5] = v11;
          *(double *)&v18[6] = v13;
          __int16 v17 = *(std::__shared_weak_count **)(a2 + 8);
          v18[7] = *(void *)a2;
          unsigned int v19 = v17;
          if (v17) {
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          [v16 doAsync:v18];
          if (v19) {
            sub_1000DB0A0(v19);
          }
        }
        else
        {
          sub_100134750(__p, "kCLConnectionMessageError");
          uint64_t v25 = CMErrorMessage;
          uint64_t v26 = &off_1023931E8;
          +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
          CLConnectionMessage::sendReply();
          if (v22 < 0) {
            operator delete(__p[0]);
          }
        }

        goto LABEL_18;
      }
      sub_100134750(__p, "kCLConnectionMessageError");
      uint64_t v27 = CMErrorMessage;
      uint64_t v28 = &off_1023931B8;
      +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
      CLConnectionMessage::sendReply();
    }
    else
    {
      sub_100134750(__p, "kCLConnectionMessageError");
      uint64_t v23 = CMErrorMessage;
      uint64_t v24 = &off_102393140;
      +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    sub_100134750(__p, "kCLConnectionMessageError");
    uint64_t v29 = CMErrorMessage;
    uint64_t v30 = &off_1023931D0;
    +[NSDictionary dictionaryWithObjects:&v30 forKeys:&v29 count:1];
    CLConnectionMessage::sendReply();
  }
  if (v22 < 0) {
    operator delete(__p[0]);
  }
LABEL_18:
}

void sub_100BE3AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a17) {
    sub_1000DB0A0(a17);
  }

  _Unwind_Resume(a1);
}

void sub_100BE3B74(uint64_t a1, uint64_t a2)
{
  int v3 = sub_10131F274(a2);
  id v4 = *(CLConnectionMessage **)(a1 + 56);
  if (v3)
  {
    CLConnectionMessage::name(v4);
    CLConnectionMessage::sendReply();
  }
  else
  {
    sub_100134750(&__p, "kCLConnectionMessageError");
    uint64_t v7 = CMErrorMessage;
    uint64_t v8 = &off_1023931E8;
    +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
    CLConnectionMessage::sendReply();
    if (v6 < 0) {
      operator delete(__p);
    }
  }
}

void sub_100BE3C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_100BE3CBC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  *(void *)(result + 56) = *(void *)(a2 + 56);
  *(void *)(result + 64) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100BE3CD8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

void sub_100BE3CE8(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  char v5 = sub_100BDE144(a1);
  char v6 = *(CLConnectionMessage **)a2;
  if (v5)
  {
    uint64_t v7 = (objc_class *)objc_opt_class();
    ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v6, v7);
    uint64_t v9 = ObjectOfClass;
    if (ObjectOfClass)
    {
      unsigned int v10 = [ObjectOfClass rate];
      unsigned int v11 = [v9 dataType];
      if (sub_10131C33C(v11))
      {
        id v12 = [[objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLSensorRecorderNotifier"];
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3321888768;
        _OWORD v14[2] = sub_100BE3FC4;
        _DWORD v14[3] = &unk_1022EA168;
        unsigned int v16 = v11;
        unsigned int v17 = v10;
        double v13 = *(std::__shared_weak_count **)(a2 + 8);
        v14[4] = *(void *)a2;
        id v15 = v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        [v12 doAsync:v14];
        if (v15) {
          sub_1000DB0A0(v15);
        }
        goto LABEL_13;
      }
      sub_100134750(__p, "kCLConnectionMessageError");
      uint64_t v22 = CMErrorMessage;
      uint64_t v23 = &off_1023931B8;
      +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
      CLConnectionMessage::sendReply();
    }
    else
    {
      sub_100134750(__p, "kCLConnectionMessageError");
      uint64_t v20 = CMErrorMessage;
      uint64_t v21 = &off_102393140;
      +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    sub_100134750(__p, "kCLConnectionMessageError");
    uint64_t v24 = CMErrorMessage;
    uint64_t v25 = &off_1023931D0;
    +[NSDictionary dictionaryWithObjects:&v25 forKeys:&v24 count:1];
    CLConnectionMessage::sendReply();
  }
  if (v19 < 0) {
    operator delete(__p[0]);
  }
LABEL_13:
}

void sub_100BE3F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void sub_100BE3FC4(uint64_t a1, uint64_t a2)
{
  int v3 = sub_10131C434(a2, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52));
  id v4 = *(CLConnectionMessage **)(a1 + 32);
  if (v3)
  {
    CLConnectionMessage::name(v4);
    CLConnectionMessage::sendReply();
  }
  else
  {
    sub_100134750(&__p, "kCLConnectionMessageError");
    uint64_t v7 = CMErrorMessage;
    uint64_t v8 = &off_1023931E8;
    +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
    CLConnectionMessage::sendReply();
    if (v6 < 0) {
      operator delete(__p);
    }
  }
}

void sub_100BE40E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_100BE4104(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  BOOL v5 = sub_100BDE3EC(a1);
  char v6 = *(CLConnectionMessage **)a2;
  if (v5)
  {
    uint64_t v7 = (objc_class *)objc_opt_class();
    ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v6, v7);
    uint64_t v9 = ObjectOfClass;
    if (ObjectOfClass)
    {
      unsigned int v10 = [ObjectOfClass dataType];
      if (v10 && (sub_100BDE144(a1) & 1) == 0)
      {
        sub_100134750(__p, "kCLConnectionMessageError");
        uint64_t v41 = CMErrorMessage;
        CFStringRef v42 = &off_102393200;
        +[NSDictionary dictionaryWithObjects:&v42 forKeys:&v41 count:1];
        CLConnectionMessage::sendReply();
      }
      else if (sub_10131C33C(v10))
      {
        uint64_t v11 = *(void *)(a1 + 376);
        if (v11)
        {
          uint64_t v12 = *(void *)(a1 + 384);
LABEL_35:
          uint64_t v21 = *(void *)(a1 + 392);
          id v22 = [[[*(id *)(a1 + 24) vendor] proxyForService:@"CLSensorRecorderNotifier"];
          v28[0] = _NSConcreteStackBlock;
          v28[1] = 3321888768;
          v28[2] = sub_100BE4938;
          v28[3] = &unk_1022EA1A0;
          v28[4] = v21;
          v28[5] = v9;
          unsigned int v30 = v10;
          uint64_t v24 = *(CLConnectionMessage **)a2;
          uint64_t v23 = *(std::__shared_weak_count **)(a2 + 8);
          v28[7] = v11;
          v28[8] = v24;
          uint64_t v29 = v23;
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v28[6] = v12;
          [v22 doAsync:v28];
          if (v29) {
            sub_1000DB0A0(v29);
          }
          goto LABEL_14;
        }
        if (qword_102419110 != -1) {
          dispatch_once(&qword_102419110, &stru_1022EA448);
        }
        double v13 = qword_102419118;
        if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Allocating mmap buffer.", (uint8_t *)__p, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_102419110 != -1) {
            dispatch_once(&qword_102419110, &stru_1022EA448);
          }
          LOWORD(v35) = 0;
          uint64_t v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageSensorRecorderGetDataByID(std::shared_ptr<CLConnectionMessage>)", "%s\n", v26);
          if (v26 != (char *)__p) {
            free(v26);
          }
        }
        *(void *)(a1 + 392) = [[CLOSTransaction alloc] initWithDescription:"CLDaemonClient.SensorRecorderAccel"];
        unsigned int v14 = mmap(0, 0x24000uLL, 3, 4097, -1, 0);
        *(void *)(a1 + 376) = v14;
        if (v14 == (void *)-1)
        {
          if (qword_102419110 != -1) {
            dispatch_once(&qword_102419110, &stru_1022EA448);
          }
          unsigned int v17 = qword_102419118;
          if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_ERROR))
          {
            int v18 = *__error();
            LODWORD(__p[0]) = 67109120;
            HIDWORD(__p[0]) = v18;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "mmap failure.  errno %d", (uint8_t *)__p, 8u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(__p, 0x65CuLL);
            if (qword_102419110 != -1) {
              dispatch_once(&qword_102419110, &stru_1022EA448);
            }
            int v19 = *__error();
            int v35 = 67109120;
            int v36 = v19;
            uint64_t v20 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageSensorRecorderGetDataByID(std::shared_ptr<CLConnectionMessage>)", "%s\n", v20);
            if (v20 != (char *)__p) {
              free(v20);
            }
          }
        }
        else
        {
          id v15 = dispatch_data_create(v14, 0x24000uLL, 0, _dispatch_data_destructor_munmap);
          if (v15)
          {
            unsigned int v16 = v15;
            *(void *)(a1 + 384) = xpc_data_create_with_dispatch_data(v15);
          }
          else
          {
            munmap(*(void **)(a1 + 376), 0x24000uLL);
          }
        }
        uint64_t v12 = *(void *)(a1 + 384);
        if (v12)
        {
          uint64_t v11 = *(void *)(a1 + 376);
          goto LABEL_35;
        }
        if (qword_102419110 != -1) {
          dispatch_once(&qword_102419110, &stru_1022EA448);
        }
        uint64_t v25 = qword_102419118;
        if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Did not successfully allocate buffer for sensor recorder.  Returning CMErrorNotAvailable", (uint8_t *)__p, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_102419110 != -1) {
            dispatch_once(&qword_102419110, &stru_1022EA448);
          }
          LOWORD(v35) = 0;
          uint64_t v27 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageSensorRecorderGetDataByID(std::shared_ptr<CLConnectionMessage>)", "%s\n", v27);
          if (v27 != (char *)__p) {
            free(v27);
          }
        }
        *(void *)(a1 + 376) = 0;
        sub_100134750(__p, "kCLConnectionMessageError");
        uint64_t v33 = CMErrorMessage;
        uint64_t v34 = &off_1023931B8;
        +[NSDictionary dictionaryWithObjects:&v34 forKeys:&v33 count:1];
        CLConnectionMessage::sendReply();
      }
      else
      {
        sub_100134750(__p, "kCLConnectionMessageError");
        uint64_t v39 = CMErrorMessage;
        uint64_t v40 = &off_1023931B8;
        +[NSDictionary dictionaryWithObjects:&v40 forKeys:&v39 count:1];
        CLConnectionMessage::sendReply();
      }
    }
    else
    {
      sub_100134750(__p, "kCLConnectionMessageError");
      uint64_t v31 = CMErrorMessage;
      int v32 = &off_102393140;
      +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    sub_100134750(__p, "kCLConnectionMessageError");
    uint64_t v43 = CMErrorMessage;
    uint64_t v44 = &off_1023931D0;
    +[NSDictionary dictionaryWithObjects:&v44 forKeys:&v43 count:1];
    CLConnectionMessage::sendReply();
  }
  if (v38 < 0) {
    operator delete(__p[0]);
  }
LABEL_14:
}

void sub_100BE489C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  _Unwind_Resume(a1);
}

void sub_100BE4938(uint64_t a1, uint64_t *a2)
{
  if (qword_102419110 != -1) {
    dispatch_once(&qword_102419110, &stru_1022EA448);
  }
  id v4 = qword_102419118;
  if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [*(id *)(a1 + 40) identifier];
    id v6 = [*(id *)(a1 + 40) metaIdentifier];
    *(_DWORD *)uint64_t buf = 134218240;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Requesting id, %llu, meta id, %llu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419110 != -1) {
      dispatch_once(&qword_102419110, &stru_1022EA448);
    }
    id v9 = [*(id *)(a1 + 40) identifier];
    id v10 = [*(id *)(a1 + 40) metaIdentifier];
    *(_DWORD *)std::string __p = 134218240;
    *(void *)&__p[4] = v9;
    __int16 v15 = 2048;
    id v16 = v10;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageSensorRecorderGetDataByID(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v11);
    if (v11 != buf) {
      free(v11);
    }
  }
  *(void *)&uint8_t buf[16] = 0;
  id v7 = [*(id *)(a1 + 40) identifier];
  uint64_t v8 = *(void *)(a1 + 56);
  *(void *)uint64_t buf = v7;
  *(void *)&uint8_t buf[8] = v8;
  *(_DWORD *)&uint8_t buf[16] = 147456;
  if (sub_10131EF30(a2, *(_DWORD *)(a1 + 80), buf, (uint64_t)[*(id *)(a1 + 40) metaIdentifier]))
  {
    CLConnectionMessage::name(*(CLConnectionMessage **)(a1 + 64));
    CLConnectionMessage::sendReply();
  }
  else
  {
    sub_100134750(__p, "kCLConnectionMessageError");
    uint64_t v12 = CMErrorMessage;
    double v13 = &off_102393140;
    +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
    CLConnectionMessage::sendReply();
    if (v17 < 0) {
      operator delete(*(void **)__p);
    }
  }
}

void sub_100BE4C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BE4C24(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 72);
  *(void *)(result + 64) = *(void *)(a2 + 64);
  *(void *)(result + 72) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100BE4C40(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 72);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

void sub_100BE4C50(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  BOOL v5 = sub_100BDE3EC(a1);
  id v6 = *a2;
  if (v5)
  {
    id v7 = (objc_class *)objc_opt_class();
    ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v6, v7);
    id v9 = ObjectOfClass;
    if (ObjectOfClass)
    {
      unsigned int v10 = [ObjectOfClass dataType];
      [v9 duration];
      uint64_t v12 = v11;
      if (v10 && (sub_100BDE144(a1) & 1) == 0)
      {
        sub_100134750(__p, "kCLConnectionMessageError");
        uint64_t v22 = CMErrorMessage;
        uint64_t v23 = &off_1023931D0;
        +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
        CLConnectionMessage::sendReply();
      }
      else
      {
        if (sub_10131C33C(v10))
        {
          id v13 = [[objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLSensorRecorderNotifier"];
          v14[0] = _NSConcreteStackBlock;
          v14[1] = 3221225472;
          _OWORD v14[2] = sub_100BE4F88;
          _DWORD v14[3] = &unk_1022EA0A8;
          unsigned int v15 = v10;
          v14[4] = v12;
          [v13 doAsync:v14];
          CLConnectionMessage::sendReply();
          goto LABEL_13;
        }
        sub_100134750(__p, "kCLConnectionMessageError");
        uint64_t v20 = CMErrorMessage;
        uint64_t v21 = &off_1023931B8;
        +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
        CLConnectionMessage::sendReply();
      }
    }
    else
    {
      sub_100134750(__p, "kCLConnectionMessageError");
      uint64_t v18 = CMErrorMessage;
      int v19 = &off_102393140;
      +[NSDictionary dictionaryWithObjects:&v19 forKeys:&v18 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    sub_100134750(__p, "kCLConnectionMessageError");
    uint64_t v24 = CMErrorMessage;
    uint64_t v25 = &off_1023931D0;
    +[NSDictionary dictionaryWithObjects:&v25 forKeys:&v24 count:1];
    CLConnectionMessage::sendReply();
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
LABEL_13:
}

void sub_100BE4F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

BOOL sub_100BE4F88(uint64_t a1, uint64_t a2)
{
  return sub_10131EF70(a2, *(_DWORD *)(a1 + 40), *(double *)(a1 + 32));
}

void sub_100BE4F9C(uint64_t a1, uint64_t a2)
{
  id v3 = objc_alloc_init((Class)NSAutoreleasePool);
  CFDictionaryRef Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
  if (Dictionary
    && (id v5 = [Dictionary objectForKeyedSubscript:CMPredictedWalkDistanceResetDateKey]) != 0)
  {
    [v5 doubleValue];
    *(double *)uint64_t v12 = v6;
    if (v6 == 0.0)
    {
      sub_100134750(buf, "kCLConnectionMessageError");
      uint64_t v13 = CMErrorMessage;
      unsigned int v14 = &off_102393140;
      +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
      CLConnectionMessage::sendReply();
      if (v16 < 0) {
        operator delete(*(void **)buf);
      }
    }
    else
    {
      uint64_t v7 = sub_1000A6958();
      sub_100163398(v7, @"PredictedWalkDistanceResetDate", v12);
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1022EA468);
    }
    uint64_t v8 = qword_102419208;
    if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Programmer error: Wrong parameters were passed!", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1022EA468);
      }
      LOWORD(v12[0]) = 0;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessagePredictedWalkDistanceReset(std::shared_ptr<CLConnectionMessage>)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    id v9 = *(CLConnectionMessage **)a2;
    unsigned int v10 = *(std::__shared_weak_count **)(a2 + 8);
    v12[2] = v9;
    void v12[3] = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100BDE6FC();
    if (v10) {
      sub_1000DB0A0(v10);
    }
  }
}

void sub_100BE5234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void sub_100BE529C(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (sub_100BDE144(a1))
  {
    if (objc_msgSend(objc_msgSend((id)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2), "objectForKeyedSubscript:", CMDatabaseType), "integerValue"))
    {
      id v5 = 0;
    }
    else
    {
      id v5 = [[objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLGyroCalibrationDatabase"];
    }
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3321888768;
    v12[2] = sub_100BE5604;
    void v12[3] = &unk_1022EA1D0;
    id v9 = *(CLConnectionMessage **)a2;
    uint64_t v8 = *(std::__shared_weak_count **)(a2 + 8);
    void v12[4] = a1;
    v12[5] = v9;
    uint64_t v13 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [v5 dumpDatabase:@"fatEgg" onCompletion:v12];
    if (v13) {
      sub_1000DB0A0(v13);
    }
  }
  else
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022EA488);
    }
    double v6 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v7 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138543362;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Client %{public}@ does not have appropriate motion entitlement.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022EA488);
      }
      uint64_t v10 = *(void *)(a1 + 48);
      int v16 = 138543362;
      uint64_t v17 = v10;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageWriteDbToFile(std::shared_ptr<CLConnectionMessage>)", "%s\n", v11);
      if (v11 != buf) {
        free(v11);
      }
    }
    sub_100134750(buf, "kCLConnectionMessageError");
    uint64_t v14 = CMErrorMessage;
    unsigned int v15 = &off_1023931D0;
    +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
    CLConnectionMessage::sendReply();
    if (v19 < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_100BE559C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _Unwind_Resume(a1);
}

void sub_100BE5604(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v4 = +[NSFileHandle fileHandleForReadingAtPath:a2];
    id v5 = [objc_alloc((Class)NSFileHandle) initWithFileDescriptor:CLConnectionMessage::copyFileDescriptor(*(CLConnectionMessage **)(a1 + 40))];
    double v6 = v5;
    id v7 = 0;
    if (v4) {
      BOOL v8 = v5 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      id v7 = +[CMMotionUtils copyDataFrom:v4 to:v5];
    }
    [(NSFileHandle *)v4 closeFile];
    [v6 closeFile];
    [+[NSFileManager defaultManager] removeItemAtPath:a2 error:0];
    if (v7) {
      id v9 = &__kCFBooleanTrue;
    }
    else {
      id v9 = &__kCFBooleanFalse;
    }
    v11[0] = CMReturnCode;
    v11[1] = CMFileSize;
    v12[0] = v9;
    v12[1] = +[NSNumber numberWithUnsignedInteger:v7];
    +[NSDictionary dictionaryWithObjects:v12 forKeys:v11 count:2];
    CLConnectionMessage::sendReply();
  }
  else
  {
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 48);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100BDE6FC();
    if (v10)
    {
      sub_1000DB0A0(v10);
    }
  }
}

void sub_100BE57E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BE5800(void *a1)
{
  sub_100134750(__p, "com.apple.locationd.vehicle_data");
  uint64_t v2 = (*(uint64_t (**)(void *, unsigned char *))(*a1 + 40))(a1, __p);
  uint64_t v3 = v2;
  if (v9 < 0)
  {
    operator delete(*(void **)__p);
    if (v3) {
      return v3;
    }
  }
  else if (v2)
  {
    return v3;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022EA328);
  }
  id v4 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[6];
    *(_DWORD *)std::string __p = 138412290;
    *(void *)&__p[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Client %@ does not have appropriate entitlement to access vehicle data SPI", __p, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDaemonClient::isEntitledForVehicleData()", "%s\n", v7);
    if (v7 != __p) {
      free(v7);
    }
  }
  return v3;
}

void sub_100BE5A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BE5A38(void *a1)
{
  sub_100134750(&__p, "com.apple.locationd.private_info");
  uint64_t v2 = (*(uint64_t (**)(void *, void **))(*a1 + 40))(a1, &__p);
  uint64_t v3 = v2;
  if (SBYTE3(v11) < 0)
  {
    operator delete(__p);
    if (v3) {
      return v3;
    }
  }
  else if (v2)
  {
    return v3;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  id v4 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = a1[6];
    std::string __p = (void *)68289282;
    __int16 v8 = 2082;
    char v9 = "";
    __int16 v10 = 2114;
    uint64_t v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Warning Client does not have appropriate entitlement to access MicroLocation SPI\", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
  }
  return v3;
}

void sub_100BE5B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BE5BB0(void *a1)
{
  sub_100134750(&__p, "com.apple.locationd.microlocation.forced-recording");
  uint64_t v2 = (*(uint64_t (**)(void *, void **))(*a1 + 40))(a1, &__p);
  uint64_t v3 = v2;
  if (SBYTE3(v11) < 0)
  {
    operator delete(__p);
    if (v3) {
      return v3;
    }
  }
  else if (v2)
  {
    return v3;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  id v4 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = a1[6];
    std::string __p = (void *)68289282;
    __int16 v8 = 2082;
    char v9 = "";
    __int16 v10 = 2114;
    uint64_t v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Warning Client does not have appropriate entitlement to request MicroLocation's forced recording scan\", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
  }
  return v3;
}

void sub_100BE5D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef sub_100BE5D28(uint64_t a1)
{
  CFStringRef v2 = (const __CFString *)[*(id *)(a1 + 48) legacyClientKey];
  if (v2) {
    CFStringRef v3 = v2;
  }
  else {
    CFStringRef v3 = &stru_10234F018;
  }
  CFErrorRef error = 0;
  CLConnection::getAuditToken((uint64_t *)&token, *(CLConnection **)(a1 + 264));
  id v4 = SecTaskCreateWithAuditToken(kCFAllocatorDefault, &token);
  if (v4)
  {
    uint64_t v5 = v4;
    double v6 = (void *)SecTaskCopyValueForEntitlement(v4, @"com.apple.locationd.microlocation.client-identity", &error);
    CFErrorRef v7 = error;
    if (error)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EA308);
      }
      __int16 v8 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        CFErrorDomain Domain = CFErrorGetDomain(error);
        CFIndex Code = CFErrorGetCode(error);
        *(_DWORD *)uint64_t buf = 68289538;
        int v21 = 0;
        __int16 v22 = 2082;
        uint64_t v23 = "";
        __int16 v24 = 2114;
        uint64_t v25 = (const char *)Domain;
        __int16 v26 = 2050;
        CFIndex v27 = Code;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"getMicroLocationClientIdentifier, #Warning SecTaskCopyValueForEntitlement failed \", \"with error\":%{public, location:escape_only}@, \"error code\":%{public}ld}", buf, 0x26u);
      }
      CFRelease(error);
    }
    if (v6)
    {
      CFTypeID v11 = CFGetTypeID(v6);
      if (v11 == CFStringGetTypeID()) {
        id v12 = v6;
      }
      else {
        id v12 = 0;
      }
      CFRelease(v6);
      if (v7) {
        goto LABEL_22;
      }
    }
    else
    {
      id v12 = 0;
      if (v7)
      {
LABEL_22:
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022EA308);
        }
        uint64_t v14 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 68289283;
          int v21 = 0;
          __int16 v22 = 2082;
          uint64_t v23 = "";
          __int16 v24 = 2081;
          uint64_t v25 = "com.apple.locationd.microlocation.client-identity";
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"getMicroLocationClientIdentifier, Warning Issue retrieving entitlement string value\", \"entitlement key\":%{private, location:escape_only}s}", buf, 0x1Cu);
        }
      }
    }
    CFRelease(v5);
    if (v12)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EA308);
      }
      unsigned int v15 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
      {
        int v16 = (const char *)[v12 UTF8String];
        *(_DWORD *)uint64_t buf = 68289282;
        int v21 = 0;
        __int16 v22 = 2082;
        uint64_t v23 = "";
        __int16 v24 = 2082;
        uint64_t v25 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"getMicroLocationClientIdentifier, MicroLocation entitlement based\", \"client identifier\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      return (const __CFString *)v12;
    }
    return v3;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v13 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v21 = 0;
    __int16 v22 = 2082;
    uint64_t v23 = "";
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"getMicroLocationClientIdentifier, #Warning SecTaskCreateWithSelf failed\"}", buf, 0x12u);
  }
  return v3;
}

void sub_100BE60C4(void *a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v5 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    double v6 = (void **)a1[6];
    uint64_t buf = 68289282;
    __int16 v28 = 2082;
    uint64_t v29 = "";
    __int16 v30 = 2114;
    uint64_t v31 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received current MicroLocation request from: \", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
  }
  if ((sub_100BE5A38(a1) & 1) == 0)
  {
    CFStringRef v25 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v23 = NSLocalizedDescriptionKey;
    CFStringRef v24 = @"Not entitled for Microlocation.";
    __int16 v26 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1]);
    +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
LABEL_21:
    CLConnectionMessage::sendReply();
    goto LABEL_22;
  }
  if ((sub_100FBAE1C() & 1) == 0)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    uint64_t v13 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      sub_100103240();
      sub_10073ABEC(__p);
      uint64_t v14 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t buf = 68289282;
      __int16 v28 = 2082;
      uint64_t v29 = "";
      __int16 v30 = 2082;
      uint64_t v31 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"MicroLocations are not available on this platform\", \"platform\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    CFStringRef v21 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v19 = NSLocalizedDescriptionKey;
    CFStringRef v20 = @"Microlocation is not available on this platform.";
    __int16 v22 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1]);
    +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
    goto LABEL_21;
  }
  uint64_t v7 = objc_opt_class();
  __int16 v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v7, objc_opt_class(), 0);
  uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v8);
  CFStringRef v10 = sub_100BE5D28((uint64_t)a1);
  CFTypeID v11 = (void *)sub_100BE64DC((uint64_t)a1);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3321888768;
  void v15[2] = sub_100BE652C;
  v15[3] = &unk_1022EA200;
  id v12 = *(std::__shared_weak_count **)(a2 + 8);
  v15[4] = *(void *)a2;
  int v16 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  [v11 requestCurrentMicroLocationForClient:v10 withAdditionalInformation:DictionaryOfClasses withReply:v15];
  if (v16) {
    sub_1000DB0A0(v16);
  }
LABEL_22:
}

void sub_100BE6490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100BE64DC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 248);
  if (!result)
  {
    id v3 = [[objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLMicroLocationNotifier"];
    *(void *)(a1 + 248) = v3;
    [v3 registerDelegate:*(void *)(a1 + 40) inSilo:*(void *)(a1 + 32)];
    return *(void *)(a1 + 248);
  }
  return result;
}

uint64_t sub_100BE652C(uint64_t a1, uint64_t a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022EA4A8);
  }
  id v3 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    __int16 v7 = 2082;
    __int16 v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"replying for Microlocation localization request\"}", (uint8_t *)v6, 0x12u);
  }
  id v4 = +[NSMutableDictionary dictionary];
  if (a2) {
    [v4 setObject:a2 forKeyedSubscript:@"kCLConnectionMessageErrorKey"];
  }
  return CLConnectionMessage::sendReply();
}

void sub_100BE6648(void *a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v5 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    double v6 = (void **)a1[6];
    uint64_t buf = 68289282;
    __int16 v33 = 2082;
    uint64_t v34 = "";
    __int16 v35 = 2114;
    int v36 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received Microlocation recording scan request from: \", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
  }
  if ((sub_100BE5A38(a1) & 1) == 0)
  {
    CFStringRef v30 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v28 = NSLocalizedDescriptionKey;
    CFStringRef v29 = @"Not entitled for Microlocation.";
    uint64_t v31 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v29 forKeys:&v28 count:1]);
    +[NSDictionary dictionaryWithObjects:&v31 forKeys:&v30 count:1];
LABEL_23:
    CLConnectionMessage::sendReply();
    goto LABEL_24;
  }
  if ((sub_100FBAE1C() & 1) == 0)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    uint64_t v14 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      sub_100103240();
      sub_10073ABEC(__p);
      unsigned int v15 = v19 >= 0 ? __p : (void **)__p[0];
      uint64_t buf = 68289282;
      __int16 v33 = 2082;
      uint64_t v34 = "";
      __int16 v35 = 2082;
      int v36 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"MicroLocations are not available on this platform\", \"platform\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
    CFStringRef v26 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v24 = NSLocalizedDescriptionKey;
    CFStringRef v25 = @"Microlocation is not available on this platform.";
    CFIndex v27 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v25 forKeys:&v24 count:1]);
    +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
    goto LABEL_23;
  }
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  char v9 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v7, v8, objc_opt_class(), 0);
  uint64_t DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v9);
  if (objc_msgSend(objc_msgSend(DictionaryOfClasses, "objectForKey:", @"private.MicroLocation.forced.recordingRequest"), "BOOLValue")&& (sub_100BE5BB0(a1) & 1) == 0)
  {
    CFStringRef v22 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v20 = NSLocalizedDescriptionKey;
    CFStringRef v21 = @"Not entitled for forced recording.";
    NSErrorUserInfoKey v23 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1]);
    +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
    CLConnectionMessage::sendReply();
  }
  else
  {
    CFStringRef v11 = sub_100BE5D28((uint64_t)a1);
    id v12 = (void *)sub_100BE64DC((uint64_t)a1);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3321888768;
    v16[2] = sub_100BE6B28;
    void v16[3] = &unk_1022EA200;
    uint64_t v13 = *(std::__shared_weak_count **)(a2 + 8);
    v16[4] = *(void *)a2;
    uint64_t v17 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [v12 requestMicroLocationRecordingScanForClient:v11 withAdditionalInformation:DictionaryOfClasses withReply:v16];
    if (v17) {
      sub_1000DB0A0(v17);
    }
  }
LABEL_24:
}

void sub_100BE6AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_1000DB0A0(a17);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100BE6B28(uint64_t a1, uint64_t a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022EA4A8);
  }
  id v3 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"replying for Microlocation recording request\"}", (uint8_t *)v6, 0x12u);
  }
  id v4 = +[NSMutableDictionary dictionary];
  if (a2) {
    [v4 setObject:a2 forKeyedSubscript:@"kCLConnectionMessageErrorKey"];
  }
  return CLConnectionMessage::sendReply();
}

void sub_100BE6C44(void *a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v5 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    double v6 = (void **)a1[6];
    *(_DWORD *)uint64_t buf = 68289282;
    int v24 = 0;
    __int16 v25 = 2082;
    CFStringRef v26 = "";
    __int16 v27 = 2114;
    NSErrorUserInfoKey v28 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received Microlocation truth donation request from: \", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if ((sub_100BE5A38(a1) & 1) == 0)
  {
    CFStringRef v41 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v39 = NSLocalizedDescriptionKey;
    CFStringRef v40 = @"Not entitled for Microlocation.";
    CFStringRef v42 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v40 forKeys:&v39 count:1]);
    +[NSDictionary dictionaryWithObjects:&v42 forKeys:&v41 count:1];
LABEL_28:
    CLConnectionMessage::sendReply();
    goto LABEL_30;
  }
  if ((sub_100FBAE1C() & 1) == 0)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    uint64_t v17 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      sub_100103240();
      sub_10073ABEC(__p);
      char v18 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 68289282;
      int v24 = 0;
      __int16 v25 = 2082;
      CFStringRef v26 = "";
      __int16 v27 = 2082;
      NSErrorUserInfoKey v28 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"MicroLocations are not available on this platform\", \"platform\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
    CFStringRef v37 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v35 = NSLocalizedDescriptionKey;
    CFStringRef v36 = @"Microlocation is not available on this platform.";
    char v38 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v36 forKeys:&v35 count:1]);
    +[NSDictionary dictionaryWithObjects:&v38 forKeys:&v37 count:1];
    goto LABEL_28;
  }
  CFDictionaryRef Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
  uint64_t v8 = Dictionary;
  if (Dictionary
    && [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageMicroLocationTruthLabelKey"]
    && [v8 objectForKeyedSubscript:@"kCLConnectionMessageMicroLocationRecordingTriggerUuidKey"])
  {
    CFStringRef v9 = sub_100BE5D28((uint64_t)a1);
    id v10 = [objc_alloc((Class)NSUUID) initWithUUIDString:[v8 objectForKeyedSubscript:@"kCLConnectionMessageMicroLocationTruthLabelKey"]];
    id v11 = [objc_alloc((Class)NSUUID) initWithUUIDString:[v8 objectForKeyedSubscript:@"kCLConnectionMessageMicroLocationRecordingTriggerUuidKey"]];
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022EA4A8);
    }
    id v12 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = (void **)[(void **)[v10 UUIDString] UTF8String];
      id v14 = [[[v11 UUIDString] UTF8String];
      *(_DWORD *)uint64_t buf = 68289538;
      int v24 = 0;
      __int16 v25 = 2082;
      CFStringRef v26 = "";
      __int16 v27 = 2082;
      NSErrorUserInfoKey v28 = v13;
      __int16 v29 = 2082;
      id v30 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonClient, truthlabel donation event\", \"truthLabelUUID: \":%{public, location:escape_only}s, \"triggerUUID: \":%{public, location:escape_only}s}", buf, 0x26u);
    }
    unsigned int v15 = (void *)sub_100BE64DC((uint64_t)a1);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3321888768;
    v19[2] = sub_100BE7208;
    _DWORD v19[3] = &unk_1022EA200;
    int v16 = *(std::__shared_weak_count **)(a2 + 8);
    void v19[4] = *(void *)a2;
    NSErrorUserInfoKey v20 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [v15 donateTruthTagLabelForClient:v9 truthLabelUUID:v10 recordingTriggerUUID:v11 withReply:v19];
    if (v20) {
      sub_1000DB0A0(v20);
    }
  }
  else
  {
    CFStringRef v33 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
    CFStringRef v32 = @"Invalid parameters. Check truthLabelUUID and recordingTriggerUUID";
    uint64_t v34 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1]);
    +[NSDictionary dictionaryWithObjects:&v34 forKeys:&v33 count:1];
    CLConnectionMessage::sendReply();
  }
LABEL_30:
}

void sub_100BE71B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100BE7208(uint64_t a1, uint64_t a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022EA4A8);
  }
  id v3 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"donate truth label is replied\"}", (uint8_t *)v6, 0x12u);
  }
  id v4 = +[NSMutableDictionary dictionary];
  if (a2) {
    [v4 setObject:a2 forKeyedSubscript:@"kCLConnectionMessageErrorKey"];
  }
  return CLConnectionMessage::sendReply();
}

void sub_100BE7324(void *a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v5 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    double v6 = (void **)a1[6];
    uint64_t buf = 68289282;
    __int16 v36 = 2082;
    CFStringRef v37 = "";
    __int16 v38 = 2114;
    NSErrorUserInfoKey v39 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received Microlocation truth donation between dates request from: \", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
  }
  if ((sub_100BE5A38(a1) & 1) == 0)
  {
    CFStringRef v33 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
    CFStringRef v32 = @"Not entitled for Microlocation.";
    uint64_t v34 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1]);
    +[NSDictionary dictionaryWithObjects:&v34 forKeys:&v33 count:1];
LABEL_29:
    CLConnectionMessage::sendReply();
    goto LABEL_31;
  }
  if ((sub_100FBAE1C() & 1) == 0)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    uint64_t v17 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      sub_100103240();
      sub_10073ABEC(__p);
      char v18 = v22 >= 0 ? __p : (void **)__p[0];
      uint64_t buf = 68289282;
      __int16 v36 = 2082;
      CFStringRef v37 = "";
      __int16 v38 = 2082;
      NSErrorUserInfoKey v39 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"MicroLocations are not available on this platform\", \"platform\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
    CFStringRef v29 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
    CFStringRef v28 = @"Microlocation is not available on this platform.";
    id v30 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1]);
    +[NSDictionary dictionaryWithObjects:&v30 forKeys:&v29 count:1];
    goto LABEL_29;
  }
  CFDictionaryRef Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
  uint64_t v8 = Dictionary;
  if (Dictionary
    && [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageMicroLocationTruthLabelKey"]
    && [v8 objectForKeyedSubscript:@"kCLConnectionMessageMicroLocationTruthLabelStartDateKey"]
    && [v8 objectForKeyedSubscript:@"kCLConnectionMessageMicroLocationTruthLabelEndDateKey"])
  {
    CFStringRef v9 = sub_100BE5D28((uint64_t)a1);
    id v10 = [objc_alloc((Class)NSUUID) initWithUUIDString:[v8 objectForKeyedSubscript:@"kCLConnectionMessageMicroLocationTruthLabelKey"]];
    id v11 = [v8 objectForKeyedSubscript:@"kCLConnectionMessageMicroLocationTruthLabelStartDateKey"];
    id v12 = [v8 objectForKeyedSubscript:@"kCLConnectionMessageMicroLocationTruthLabelEndDateKey"];
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022EA4A8);
    }
    uint64_t v13 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
    {
      id v14 = (void **)[(void **)[v10 UUIDString] UTF8String];
      uint64_t buf = 68289282;
      __int16 v36 = 2082;
      CFStringRef v37 = "";
      __int16 v38 = 2082;
      NSErrorUserInfoKey v39 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonClient, truthlabel donation between dates event\", \"truthLabelUUID: \":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
    }
    unsigned int v15 = (void *)sub_100BE64DC((uint64_t)a1);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3321888768;
    v19[2] = sub_100BE78E4;
    _DWORD v19[3] = &unk_1022EA200;
    int v16 = *(std::__shared_weak_count **)(a2 + 8);
    void v19[4] = *(void *)a2;
    NSErrorUserInfoKey v20 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [v15 donateTruthTagLabelForClient:v9 truthLabelUUID:v10 betweenDate:v11 andDate:v12 withReply:v19];
    if (v20) {
      sub_1000DB0A0(v20);
    }
  }
  else
  {
    CFStringRef v25 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v23 = NSLocalizedDescriptionKey;
    CFStringRef v24 = @"Invalid parameters. Check truthLabelUUID, startDate and endDate";
    CFStringRef v26 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1]);
    +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
    CLConnectionMessage::sendReply();
  }
LABEL_31:
}

void sub_100BE788C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100BE78E4(uint64_t a1, uint64_t a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022EA4A8);
  }
  id v3 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"donate truth label between dates is replied\"}", (uint8_t *)v6, 0x12u);
  }
  id v4 = +[NSMutableDictionary dictionary];
  if (a2) {
    [v4 setObject:a2 forKeyedSubscript:@"kCLConnectionMessageErrorKey"];
  }
  return CLConnectionMessage::sendReply();
}

void sub_100BE7A00(void *a1)
{
  id v2 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  id v3 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    id v4 = (void **)a1[6];
    *(_DWORD *)uint64_t buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2114;
    unsigned int v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received purge Microlocation semi-supervised data request from: \", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if (sub_100BE5A38(a1))
  {
    if (sub_100FBAE1C())
    {
      CFStringRef v5 = sub_100BE5D28((uint64_t)a1);
      [(id)sub_100BE64DC((uint64_t)a1) purgeMicroLocationSemiSupervisedDataForClient:v5];
    }
    else
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EA308);
      }
      double v6 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
      {
        sub_100103240();
        sub_10073ABEC(__p);
        if (v9 >= 0) {
          __int16 v7 = __p;
        }
        else {
          __int16 v7 = (void **)__p[0];
        }
        *(_DWORD *)uint64_t buf = 68289282;
        int v11 = 0;
        __int16 v12 = 2082;
        uint64_t v13 = "";
        __int16 v14 = 2082;
        unsigned int v15 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"MicroLocations are not available on this platform\", \"platform\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (v9 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_100BE7BFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100BE7C2C(void *a1)
{
  id v2 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  id v3 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    id v4 = (void **)a1[6];
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v14 = 2082;
    unsigned int v15 = "";
    __int16 v16 = 2114;
    uint64_t v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received purge Microlocation data request from: \", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if (sub_100BE5A38(a1))
  {
    sub_100134750(buf, "com.apple.locationd.milo_purge_data");
    char v5 = (*(uint64_t (**)(void *, uint8_t *))(*a1 + 40))(a1, buf);
    char v6 = v5;
    if (SBYTE3(v17) < 0)
    {
      operator delete(*(void **)buf);
      if (v6)
      {
LABEL_8:
        if (sub_100FBAE1C())
        {
          [(id)sub_100BE64DC((uint64_t)a1) purgeAllMicroLocationData];
        }
        else
        {
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022EA308);
          }
          char v9 = qword_102419528;
          if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
          {
            sub_100103240();
            sub_10073ABEC(__p);
            if (v12 >= 0) {
              id v10 = __p;
            }
            else {
              id v10 = (void **)__p[0];
            }
            *(_DWORD *)uint64_t buf = 68289282;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v14 = 2082;
            unsigned int v15 = "";
            __int16 v16 = 2082;
            uint64_t v17 = v10;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"MicroLocations are not available on this platform\", \"platform\":%{public, location:escape_only}s}", buf, 0x1Cu);
            if (v12 < 0) {
              operator delete(__p[0]);
            }
          }
        }
        goto LABEL_23;
      }
    }
    else if (v5)
    {
      goto LABEL_8;
    }
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    __int16 v7 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = (void **)a1[6];
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v14 = 2082;
      unsigned int v15 = "";
      __int16 v16 = 2114;
      uint64_t v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Warning Client does not have appropriate entitlement to request purge of milo data\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
LABEL_23:
}

void sub_100BE7F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_100BE7F4C(void *a1, void *a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  char v5 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    char v6 = (void **)a1[6];
    *(void *)uint64_t buf = 68289282;
    __int16 v32 = 2082;
    CFStringRef v33 = "";
    __int16 v34 = 2114;
    NSErrorUserInfoKey v35 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received export Microlocation database tables request from: \", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if ((sub_100BE5A38(a1) & 1) == 0)
  {
    CFStringRef v29 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
    CFStringRef v28 = @"Not entitled for Microlocation.";
    id v30 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1]);
    +[NSDictionary dictionaryWithObjects:&v30 forKeys:&v29 count:1];
LABEL_23:
    CLConnectionMessage::sendReply();
    goto LABEL_24;
  }
  if ((sub_100FBAE1C() & 1) == 0)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    int v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      sub_100103240();
      sub_10073ABEC(__p);
      char v12 = v18 >= 0 ? __p : (void **)__p[0];
      *(void *)uint64_t buf = 68289282;
      __int16 v32 = 2082;
      CFStringRef v33 = "";
      __int16 v34 = 2082;
      NSErrorUserInfoKey v35 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"MicroLocations are not available on this platform\", \"platform\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    CFStringRef v25 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v23 = NSLocalizedDescriptionKey;
    CFStringRef v24 = @"Microlocation is not available on this platform.";
    CFStringRef v26 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1]);
    +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
    goto LABEL_23;
  }
  sub_100134750(buf, "com.apple.locationd.microlocation.export-db");
  char v7 = (*(uint64_t (**)(void *, uint8_t *))(*a1 + 40))(a1, buf);
  char v8 = v7;
  if (SBYTE3(v35) < 0)
  {
    operator delete(*(void **)buf);
    if (v8) {
      goto LABEL_9;
    }
  }
  else if (v7)
  {
LABEL_9:
    char v9 = (void *)sub_100BE64DC((uint64_t)a1);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3321888768;
    void v15[2] = sub_100BE8494;
    v15[3] = &unk_1022EA230;
    id v10 = (std::__shared_weak_count *)a2[1];
    v15[4] = *a2;
    __int16 v16 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [v9 exportMicroLocationDatabaseTablesWithReply:v15];
    if (v16) {
      sub_1000DB0A0(v16);
    }
    goto LABEL_24;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v13 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    __int16 v14 = (void **)a1[6];
    *(void *)uint64_t buf = 68289282;
    __int16 v32 = 2082;
    CFStringRef v33 = "";
    __int16 v34 = 2114;
    NSErrorUserInfoKey v35 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Warning Client does not have appropriate entitlement to request MicroLocation export database tables\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  NSErrorUserInfoKey v21 = NSLocalizedDescriptionKey;
  CFStringRef v22 = @"Not entitled for export database.";
  CFStringRef v19 = @"kCLConnectionMessageErrorKey";
  NSErrorUserInfoKey v20 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1]);
  +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
  CLConnectionMessage::sendReply();
LABEL_24:
}

void sub_100BE8434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100BE8494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:2];
  char v6 = v5;
  if (a2) {
    [v5 setObject:a2 forKey:@"kCLConnectionMessageErrorKey"];
  }
  if (a3) {
    [v6 setObject:a3 forKey:@"kCLConnectionMessageMicroLocationExportDatabaseTablesInfoKey"];
  }

  return CLConnectionMessage::sendReply();
}

void sub_100BE8528(void *a1, void *a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  id v5 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    char v6 = (void **)a1[6];
    *(void *)uint64_t buf = 68289282;
    __int16 v32 = 2082;
    CFStringRef v33 = "";
    __int16 v34 = 2114;
    NSErrorUserInfoKey v35 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received export Microlocation data for migration request from: \", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if ((sub_100BE5A38(a1) & 1) == 0)
  {
    CFStringRef v29 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
    CFStringRef v28 = @"Not entitled for Microlocation.";
    id v30 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1]);
    +[NSDictionary dictionaryWithObjects:&v30 forKeys:&v29 count:1];
LABEL_23:
    CLConnectionMessage::sendReply();
    goto LABEL_24;
  }
  if ((sub_100FBAE1C() & 1) == 0)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    int v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      sub_100103240();
      sub_10073ABEC(__p);
      char v12 = v18 >= 0 ? __p : (void **)__p[0];
      *(void *)uint64_t buf = 68289282;
      __int16 v32 = 2082;
      CFStringRef v33 = "";
      __int16 v34 = 2082;
      NSErrorUserInfoKey v35 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"MicroLocations are not available on this platform\", \"platform\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    CFStringRef v25 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v23 = NSLocalizedDescriptionKey;
    CFStringRef v24 = @"Microlocation is not available on this platform.";
    CFStringRef v26 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1]);
    +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
    goto LABEL_23;
  }
  sub_100134750(buf, "com.apple.locationd.microlocation.export-db");
  char v7 = (*(uint64_t (**)(void *, uint8_t *))(*a1 + 40))(a1, buf);
  char v8 = v7;
  if (SBYTE3(v35) < 0)
  {
    operator delete(*(void **)buf);
    if (v8) {
      goto LABEL_9;
    }
  }
  else if (v7)
  {
LABEL_9:
    char v9 = (void *)sub_100BE64DC((uint64_t)a1);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3321888768;
    void v15[2] = sub_100BE8A70;
    v15[3] = &unk_1022EA230;
    id v10 = (std::__shared_weak_count *)a2[1];
    v15[4] = *a2;
    __int16 v16 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [v9 exportMicroLocationDataForMigrationWithReply:v15];
    if (v16) {
      sub_1000DB0A0(v16);
    }
    goto LABEL_24;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v13 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    __int16 v14 = (void **)a1[6];
    *(void *)uint64_t buf = 68289282;
    __int16 v32 = 2082;
    CFStringRef v33 = "";
    __int16 v34 = 2114;
    NSErrorUserInfoKey v35 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Warning Client does not have appropriate entitlement to request MicroLocation export database tables\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  NSErrorUserInfoKey v21 = NSLocalizedDescriptionKey;
  CFStringRef v22 = @"Not entitled for export database.";
  CFStringRef v19 = @"kCLConnectionMessageErrorKey";
  NSErrorUserInfoKey v20 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1]);
  +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
  CLConnectionMessage::sendReply();
LABEL_24:
}

void sub_100BE8A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100BE8A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:2];
  char v6 = v5;
  if (a2) {
    [v5 setObject:a2 forKey:@"kCLConnectionMessageErrorKey"];
  }
  if (a3) {
    [v6 setObject:a3 forKey:@"kCLConnectionMessageMicroLocationExportDataForMigrationInfoKey"];
  }

  return CLConnectionMessage::sendReply();
}

void sub_100BE8B04(void *a1, void *a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  id v5 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    char v6 = (void **)a1[6];
    *(void *)uint64_t buf = 68289282;
    __int16 v32 = 2082;
    CFStringRef v33 = "";
    __int16 v34 = 2114;
    NSErrorUserInfoKey v35 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received export per anchor per cluster measurement value statistics request from: \", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if ((sub_100BE5A38(a1) & 1) == 0)
  {
    CFStringRef v29 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
    CFStringRef v28 = @"Not entitled for Microlocation.";
    id v30 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1]);
    +[NSDictionary dictionaryWithObjects:&v30 forKeys:&v29 count:1];
LABEL_23:
    CLConnectionMessage::sendReply();
    goto LABEL_24;
  }
  if ((sub_100FBAE1C() & 1) == 0)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    int v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      sub_100103240();
      sub_10073ABEC(__p);
      char v12 = v18 >= 0 ? __p : (void **)__p[0];
      *(void *)uint64_t buf = 68289282;
      __int16 v32 = 2082;
      CFStringRef v33 = "";
      __int16 v34 = 2082;
      NSErrorUserInfoKey v35 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"MicroLocations are not available on this platform\", \"platform\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    CFStringRef v25 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v23 = NSLocalizedDescriptionKey;
    CFStringRef v24 = @"Microlocation is not available on this platform.";
    CFStringRef v26 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1]);
    +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
    goto LABEL_23;
  }
  sub_100134750(buf, "com.apple.locationd.microlocation.source-statistics");
  char v7 = (*(uint64_t (**)(void *, uint8_t *))(*a1 + 40))(a1, buf);
  char v8 = v7;
  if (SBYTE3(v35) < 0)
  {
    operator delete(*(void **)buf);
    if (v8) {
      goto LABEL_9;
    }
  }
  else if (v7)
  {
LABEL_9:
    char v9 = (void *)sub_100BE64DC((uint64_t)a1);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3321888768;
    void v15[2] = sub_100BE904C;
    v15[3] = &unk_1022EA230;
    id v10 = (std::__shared_weak_count *)a2[1];
    v15[4] = *a2;
    __int16 v16 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [v9 requestAnchorValueStatisticsWithReply:v15];
    if (v16) {
      sub_1000DB0A0(v16);
    }
    goto LABEL_24;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v13 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    __int16 v14 = (void **)a1[6];
    *(void *)uint64_t buf = 68289282;
    __int16 v32 = 2082;
    CFStringRef v33 = "";
    __int16 v34 = 2114;
    NSErrorUserInfoKey v35 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Warning, client is not entitled to request Microlocation to export static sources' value statistics\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  NSErrorUserInfoKey v21 = NSLocalizedDescriptionKey;
  CFStringRef v22 = @"Not entitled for exporting anchor value statistics";
  CFStringRef v19 = @"kCLConnectionMessageErrorKey";
  NSErrorUserInfoKey v20 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1]);
  +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
  CLConnectionMessage::sendReply();
LABEL_24:
}

void sub_100BE8FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100BE904C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:2];
  char v6 = v5;
  if (a2) {
    [v5 setObject:a2 forKey:@"kCLConnectionMessageErrorKey"];
  }
  if (a3) {
    [v6 setObject:a3 forKey:@"kCLConnectionMessageMicroLocationRequestStaticSourcesStatisticsInfoKey"];
  }

  return CLConnectionMessage::sendReply();
}

void sub_100BE90E0(void *a1, void *a2)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  id v4 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    id v5 = (void **)a1[6];
    uint64_t buf = 68289282;
    __int16 v24 = 2082;
    CFStringRef v25 = "";
    __int16 v26 = 2114;
    NSErrorUserInfoKey v27 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received current MicroLocation request from: \", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
  }
  if (sub_100BE5A38(a1))
  {
    if (sub_100FBAE1C())
    {
      CFStringRef v6 = sub_100BE5D28((uint64_t)a1);
      char v7 = (void *)sub_100BE64DC((uint64_t)a1);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3321888768;
      void v11[2] = sub_100BE9478;
      float v11[3] = &unk_1022EA200;
      char v8 = (std::__shared_weak_count *)a2[1];
      v11[4] = *a2;
      char v12 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      [v7 requestMicroLocationLearningForClient_Legacy:v6 withReply:v11];
      if (v12) {
        sub_1000DB0A0(v12);
      }
    }
    else
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EA308);
      }
      char v9 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
      {
        sub_100103240();
        sub_10073ABEC(__p);
        id v10 = v14 >= 0 ? __p : (void **)__p[0];
        uint64_t buf = 68289282;
        __int16 v24 = 2082;
        CFStringRef v25 = "";
        __int16 v26 = 2082;
        NSErrorUserInfoKey v27 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"MicroLocations are not available on this platform\", \"platform\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
      }
      CFStringRef v17 = @"kCLConnectionMessageErrorKey";
      NSErrorUserInfoKey v15 = NSLocalizedDescriptionKey;
      CFStringRef v16 = @"Microlocation is not available on this platform.";
      char v18 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1]);
      +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    CFStringRef v21 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v19 = NSLocalizedDescriptionKey;
    CFStringRef v20 = @"Not entitled for Microlocation.";
    CFStringRef v22 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1]);
    +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
    CLConnectionMessage::sendReply();
  }
}

void sub_100BE9458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BE9478(uint64_t a1, uint64_t a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022EA4A8);
  }
  id v3 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    __int16 v7 = 2082;
    char v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"replying for Microlocation learning request\"}", (uint8_t *)v6, 0x12u);
  }
  id v4 = +[NSMutableDictionary dictionary];
  if (a2) {
    [v4 setObject:a2 forKeyedSubscript:@"kCLConnectionMessageErrorKey"];
  }
  return CLConnectionMessage::sendReply();
}

void sub_100BE9594(uint64_t a1, void *a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_1022EA4C8);
  }
  id v5 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Received request to trigger VO2Max retrocompute", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022EA4C8);
    }
    __int16 v11 = 0;
    char v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleTriggerVo2MaxRetrocompute(std::shared_ptr<CLConnectionMessage>)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "isServiceRunning:", @"CLVO2MaxService"))
  {
    id v6 = [[objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLVO2MaxService" forClient:@"CLClientManager"];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3321888768;
    id v9[2] = sub_100BE98B0;
    v9[3] = &unk_1022D3F00;
    __int16 v7 = (std::__shared_weak_count *)a2[1];
    void v9[4] = *a2;
    id v10 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [v6 triggerRetrocomputeWithReply:v9];
    if (v10) {
      sub_1000DB0A0(v10);
    }
  }
  else
  {
    sub_100134750(buf, "kCLConnectionMessageError");
    uint64_t v12 = CMErrorMessage;
    uint64_t v13 = &off_1023931B8;
    +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
    CLConnectionMessage::sendReply();
    if (v15 < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_100BE9854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _Unwind_Resume(a1);
}

void sub_100BE98B0(uint64_t a1, uint64_t a2)
{
  if (a2 == 100)
  {
    CLConnectionMessage::sendReply();
  }
  else
  {
    sub_100134750(&__p, "kCLConnectionMessageError");
    uint64_t v5 = CMErrorMessage;
    id v6 = +[NSNumber numberWithUnsignedInt:a2];
    +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
    CLConnectionMessage::sendReply();
    if (v4 < 0) {
      operator delete(__p);
    }
  }
}

void sub_100BE99C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_100BE99E4(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419280 != -1) {
    dispatch_once(&qword_102419280, &stru_1022EA4E8);
  }
  uint64_t v5 = qword_102419288;
  if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Received request to write context configuration", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419280 != -1) {
      dispatch_once(&qword_102419280, &stru_1022EA4E8);
    }
    LOWORD(v21) = 0;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageWriteContextConfiguration(std::shared_ptr<CLConnectionMessage>)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  id v6 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:CMContextConfigurationKey];
  __int16 v7 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", +[NSDictionary dictionaryWithDictionary:v6], 1, 0);
  id v8 = [[objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLCompanionNotifier"];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100BE9FB0;
  void v16[3] = &unk_1022CA588;
  v16[4] = v7;
  [v8 doAsync:v16];
  if (qword_102419280 != -1) {
    dispatch_once(&qword_102419280, &stru_1022EA4E8);
  }
  char v9 = qword_102419288;
  if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 138412290;
    id v24 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Sent configuration to watch: %@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419280 != -1) {
      dispatch_once(&qword_102419280, &stru_1022EA4E8);
    }
    int v21 = 138412290;
    id v22 = v6;
    char v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageWriteContextConfiguration(std::shared_ptr<CLConnectionMessage>)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  uint64_t v10 = sub_100F8CC8C();
  uint64_t v11 = sub_100F8E384(v10, v6);
  if (v11 == 100)
  {
    uint64_t v17 = CMReturnCode;
    char v18 = &__kCFBooleanTrue;
    +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];
  }
  else
  {
    if (qword_102419280 != -1) {
      dispatch_once(&qword_102419280, &stru_1022EA4E8);
    }
    uint64_t v12 = qword_102419288;
    if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      LODWORD(v24) = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[Dynamic Config] Error on config insertion: %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419280 != -1) {
        dispatch_once(&qword_102419280, &stru_1022EA4E8);
      }
      int v21 = 67240192;
      LODWORD(v22) = v11;
      char v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageWriteContextConfiguration(std::shared_ptr<CLConnectionMessage>)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    uint64_t v19 = CMErrorMessage;
    CFStringRef v20 = +[NSNumber numberWithUnsignedInt:v11];
    +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
  }
  CLConnectionMessage::sendReply();
}

void sub_100BE9F6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100BE9FB0(uint64_t a1, uint64_t a2)
{
  return sub_1005E26F4(120.0, a2, 32, *(void **)(a1 + 32), 300, 0, 0, 0, 0, 0);
}

void sub_100BE9FFC(id *a1)
{
  if (qword_102419300 != -1) {
    dispatch_once(&qword_102419300, &stru_1022EA508);
  }
  id v2 = qword_102419308;
  if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "DaemonClient: Received request for ColdStorageQueryConfiguration", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022EA508);
    }
    char v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageColdStorageQueryConfiguration(std::shared_ptr<CLConnectionMessage>)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  sub_100134750(buf, "com.apple.locationd.cold-storage");
  char v3 = (*((uint64_t (**)(id *, uint8_t *))*a1 + 5))(a1, buf);
  char v4 = v3;
  if ((v21 & 0x80000000) == 0)
  {
    if (v3) {
      goto LABEL_8;
    }
LABEL_12:
    sub_100134750(buf, "kCLConnectionMessageError");
    uint64_t v18 = CMErrorMessage;
    uint64_t v19 = &off_102393200;
    +[NSDictionary dictionaryWithObjects:&v19 forKeys:&v18 count:1];
    CLConnectionMessage::sendReply();
    goto LABEL_25;
  }
  operator delete(*(void **)buf);
  if ((v4 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_8:
  id v5 = [[[a1[3] vendor] proxyForService:@"CMHealthColdStorageService"]
  if (v5)
  {
    id v6 = [v5 syncgetFetchColdStorageConfiguration];
    if (v6)
    {
      uint64_t v12 = CMColdStorageConfiguration;
      id v13 = v6;
      +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
      CLConnectionMessage::sendReply();
      return;
    }
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022EA508);
    }
    id v8 = qword_102419308;
    if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "DaemonClient: Failed to fetch configuration", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419300 != -1) {
        dispatch_once(&qword_102419300, &stru_1022EA508);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageColdStorageQueryConfiguration(std::shared_ptr<CLConnectionMessage>)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    sub_100134750(buf, "kCLConnectionMessageError");
    uint64_t v14 = CMErrorMessage;
    char v15 = &off_102393140;
    +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
    CLConnectionMessage::sendReply();
  }
  else
  {
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022EA508);
    }
    __int16 v7 = qword_102419308;
    if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "DaemonClient: Request failed because ColdStorage Service not running", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419300 != -1) {
        dispatch_once(&qword_102419300, &stru_1022EA508);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageColdStorageQueryConfiguration(std::shared_ptr<CLConnectionMessage>)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    sub_100134750(buf, "kCLConnectionMessageError");
    uint64_t v16 = CMErrorMessage;
    uint64_t v17 = &off_1023931B8;
    +[NSDictionary dictionaryWithObjects:&v17 forKeys:&v16 count:1];
    CLConnectionMessage::sendReply();
  }
LABEL_25:
  if (v21 < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_100BEA5B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BEA5E4(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419280 != -1) {
    dispatch_once(&qword_102419280, &stru_1022EA4E8);
  }
  id v5 = qword_102419288;
  if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Collecting Metrics for function", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419280 != -1) {
      dispatch_once(&qword_102419280, &stru_1022EA4E8);
    }
    char v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageCollectMetricsForFunction(std::shared_ptr<CLConnectionMessage>)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  uint64_t v6 = *(void *)(a1 + 16);
  __int16 v7 = *(void **)(a1 + 48);
  CFDictionaryRef Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  sub_1007BB154(v6, v7, Dictionary);
}

void sub_100BEA7B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100BEA7E4(id *a1, uint64_t a2)
{
  if (qword_1024195B0 != -1) {
    dispatch_once(&qword_1024195B0, &stru_1022EA528);
  }
  id v4 = qword_1024195B8;
  if (os_log_type_enabled((os_log_t)qword_1024195B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "DaemonClient: Received request for motion sensor data simulation", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024195B0 != -1) {
      dispatch_once(&qword_1024195B0, &stru_1022EA528);
    }
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::handleMessageSensorMonitorMotionSensorData(std::shared_ptr<CLConnectionMessage>)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  sub_100134750(buf, "com.apple.locationd.sensormonitor-simulator");
  char v5 = (*((uint64_t (**)(id *, uint8_t *))*a1 + 5))(a1, buf);
  char v6 = v5;
  if ((v25 & 0x80000000) == 0)
  {
    if (v5) {
      goto LABEL_8;
    }
LABEL_15:
    sub_100134750(buf, "kCLConnectionMessageError");
    uint64_t v22 = CMErrorMessage;
    NSErrorUserInfoKey v23 = &off_102393200;
    +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
    CLConnectionMessage::sendReply();
LABEL_31:
    if (v25 < 0) {
      operator delete(*(void **)buf);
    }
    return;
  }
  operator delete(*(void **)buf);
  if ((v6 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  id v7 = [objc_msgSend(a1[3], "vendor") proxyForService:@"CLSensorMonitor"];
  if (!v7)
  {
    if (qword_1024195B0 != -1) {
      dispatch_once(&qword_1024195B0, &stru_1022EA528);
    }
    uint64_t v14 = qword_1024195B8;
    if (os_log_type_enabled((os_log_t)qword_1024195B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "DaemonClient: Request failed because SensorMonitor Service not running", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024195B0 != -1) {
        dispatch_once(&qword_1024195B0, &stru_1022EA528);
      }
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageSensorMonitorMotionSensorData(std::shared_ptr<CLConnectionMessage>)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    sub_100134750(buf, "kCLConnectionMessageError");
    uint64_t v20 = CMErrorMessage;
    char v21 = &off_1023931B8;
    +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
    CLConnectionMessage::sendReply();
    goto LABEL_31;
  }
  CFDictionaryRef Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
  char v9 = Dictionary;
  if (Dictionary
    && (uint64_t v10 = CMSensorMonitorMotionSensorTypeId,
        [Dictionary objectForKeyedSubscript:CMSensorMonitorMotionSensorTypeId])
    && (uint64_t v11 = CMSensorMonitorMotionSensorPayload,
        [v9 objectForKeyedSubscript:CMSensorMonitorMotionSensorPayload]))
  {
    [v9 objectForKeyedSubscript:v10];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      [v7 simulateMotionSensorDataForType:[objc_msgSend(objc_msgSend(v9, "objectForKeyedSubscript:", v10), "integerValue") integerValue] payload:[objc_msgSend(v9, "objectForKeyedSubscript:", v11)]];
      return;
    }
    if (qword_1024195B0 != -1) {
      dispatch_once(&qword_1024195B0, &stru_1022EA528);
    }
    char v15 = qword_1024195B8;
    if (os_log_type_enabled((os_log_t)qword_1024195B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Motion Sensor Type is invalid", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024195B0 != -1) {
        dispatch_once(&qword_1024195B0, &stru_1022EA528);
      }
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageSensorMonitorMotionSensorData(std::shared_ptr<CLConnectionMessage>)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    id v13 = *(std::__shared_weak_count **)(a2 + 8);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    if (qword_1024195B0 != -1) {
      dispatch_once(&qword_1024195B0, &stru_1022EA528);
    }
    uint64_t v12 = qword_1024195B8;
    if (os_log_type_enabled((os_log_t)qword_1024195B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Error receiving valid request to simulate motion sensor data", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024195B0 != -1) {
        dispatch_once(&qword_1024195B0, &stru_1022EA528);
      }
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageSensorMonitorMotionSensorData(std::shared_ptr<CLConnectionMessage>)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    id v13 = *(std::__shared_weak_count **)(a2 + 8);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  sub_100BDE6FC();
  if (v13) {
    sub_1000DB0A0(v13);
  }
}

void sub_100BEAF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (v26) {
    sub_1000DB0A0(v26);
  }
  _Unwind_Resume(exception_object);
}

CLOSTransaction *sub_100BEAF7C(const void *a1, const char *a2)
{
  snprintf(__str, 0x2FuLL, "CLDC.%p.%s", a1, a2);
  return [[CLOSTransaction alloc] initWithDescription:__str];
}

uint64_t sub_100BEAFF0(uint64_t a1)
{
  sub_100134750(__p, "com.apple.developer.health.fall-detection");
  uint64_t v2 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 40))(a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_100BEB06C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_100BEB088(uint64_t a1, uint64_t a2)
{
  char v3 = (char *)[(__CFString *)(id)sub_100BE5D28(a1) UTF8String];
  sub_100134750(&v5, v3);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v6;
  return result;
}

uint64_t sub_100BEB0E4(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 160))(a1)
    && (CLConnection::getAuditToken(v12, *(CLConnection **)(a1 + 264)), TCCAccessCheckAuditToken()))
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022EA488);
    }
    uint64_t v2 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v16 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client %@ did pass Fall Detection entitlement/tcc checks.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022EA488);
      }
      uint64_t v10 = *(void *)(a1 + 48);
      int v13 = 138412290;
      uint64_t v14 = v10;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLDaemonClient::isAuthorizedForFallDetection()", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    return 1;
  }
  else
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022EA488);
    }
    long long v5 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Client %@ did not pass Fall Detection entitlement/tcc checks.", buf, 0xCu);
    }
    BOOL v7 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v7)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022EA488);
      }
      uint64_t v8 = *(void *)(a1 + 48);
      int v13 = 138412290;
      uint64_t v14 = v8;
      char v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLDaemonClient::isAuthorizedForFallDetection()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_100BEB460(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 104);
}

id sub_100BEB468(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary];
  [v2 setObject:[NSNumber numberWithInt:CLConnection::getRemotePid(*(CLConnection **)(a1 + 264))] forKeyedSubscript:@"PID"];
  [v2 setObject:[*(id *)(a1 + 48) clientKey] forKeyedSubscript:@"ClientKeyPath"];
  CLConnection::getAuditToken(v18, *(CLConnection **)(a1 + 264));
  [v2 setObject:sub_1000B5784() forKeyedSubscript:@"clientKey"];
  [v2 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 72))] forKeyedSubscript:@"RegistrationSuccessful"];
  [v2 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [sub_1000B5598(*(void *)(a1 + 16), *(void *)(a1 + 48)) isValidCKP]) forKeyedSubscript:@"RegisteredInAuthDatabase"];
  [v2 setObject:+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(void *)(a1 + 112)) forKeyedSubscript:@"AuthContext"];
  double v3 = sub_100138844(a1, (uint64_t)v11);
  if (v17)
  {
    double v5 = v12;
    double v4 = v13;
    int v6 = v14;
    int v7 = v15;
    int v8 = v16;
    BOOL v9 = v11[0] != 0;
  }
  else
  {
    int v6 = 0;
    int v7 = 0;
    int v8 = 0;
    BOOL v9 = 0;
    double v4 = INFINITY;
    double v5 = INFINITY;
  }
  [v2 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v9, v3) forKeyedSubscript:@"Active"];
  if (v5 < INFINITY) {
    [v2 setObject:[+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v5)] forKeyedSubscript:@"DesiredAccuracy"];
  }
  if (v4 < INFINITY) {
    [v2 setObject:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4) forKeyedSubscript:@"DistanceFilter"];
  }
  [v2 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v6 != 0)] forKeyedSubscript:@"BatchEnabled"];
  [v2 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v7 != 0)] forKeyedSubscript:@"Spectator"];
  [v2 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v8 != 0) forKeyedSubscript:@"HasProcessAssertion"];
  return v2;
}

void sub_100BEB6E0(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100BEB710(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100BEB740(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void *sub_100BEB770(void *a1)
{
  id v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100BEB7F4(id a1)
{
  off_1024190B8 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_100BEB824(id a1)
{
  qword_1024190A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_100BEB854(id a1)
{
  qword_1024190D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

void sub_100BEB884(id a1)
{
  qword_102419558 = (uint64_t)os_log_create("com.apple.locationd.Core", "Routine");
}

void sub_100BEB8B4(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100BEB8E4(id a1)
{
  qword_102419018 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_100BEB914(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100BEB944(id a1)
{
  off_102419358 = os_log_create("com.apple.locationd.Motion", "MovementDisorder");
}

void sub_100BEB974(id a1)
{
  qword_102419118 = (uint64_t)os_log_create("com.apple.locationd.Motion", "SensorRecorder");
}

void sub_100BEB9A4(id a1)
{
  qword_102419208 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
}

void sub_100BEB9D4(id a1)
{
  qword_1024190F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

void sub_100BEBA04(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_100BEBA34(id a1)
{
  qword_102419228 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

void sub_100BEBA64(id a1)
{
  qword_102419288 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ContextConfiguration");
}

void sub_100BEBA94(id a1)
{
  qword_102419308 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HealthColdStorage");
}

void sub_100BEBAC4(id a1)
{
  qword_1024195B8 = (uint64_t)os_log_create("com.apple.locationd.Core", "SensorKit");
}

uint64_t sub_100BEBAF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    double v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          uint64_t result = sub_100103744(a1 + 32, i + 16, (unsigned __int8 *)a2);
          if (result) {
            return result;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  char v17 = operator new(0x48uLL);
  v27[0] = (uint64_t)v17;
  v27[1] = a1 + 16;
  char v28 = 0;
  *char v17 = 0;
  v17[1] = v9;
  uint64_t v18 = v17 + 2;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000DC48C(v18, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v18 = *(_OWORD *)a2;
    v17[4] = *(void *)(a2 + 16);
  }
  sub_100BEC084((uint64_t)(v17 + 5), a3);
  char v28 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_100BEBE30(a1, v24);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  char v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *(void *)v27[0] = *v25;
    *char v25 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v26 = *(void *)(*(void *)v27[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v26 >= v10) {
          v26 %= v10;
        }
      }
      else
      {
        v26 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v27[0];
    }
  }
  v27[0] = 0;
  ++*v7;
  return (uint64_t)sub_100BEC02C(v27);
}

void sub_100BEBD80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100BEC02C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BEBD98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_100BEBE30(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      unsigned __int8 v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    sub_1001D7FA0();
  }
  double v5 = operator new(8 * prime);
  int v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  unint64_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    unsigned __int8 v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          void *v8 = *v14;
          *unsigned __int8 v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          unsigned __int8 v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        unint64_t v8 = v14;
        unsigned __int8 v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

uint64_t *sub_100BEC02C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      sub_100BEB770((void *)(v2 + 40));
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_100BEC084(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *sub_100BEC104(void *a1)
{
  *a1 = off_1022EA558;
  sub_100BEC350(a1 + 1);
  return a1;
}

void sub_100BEC148(void *a1)
{
  *a1 = off_1022EA558;
  sub_100BEC350(a1 + 1);

  operator delete();
}

void *sub_100BEC1AC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = off_1022EA558;
  sub_100BEBD98((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100BEC200(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BEC214(uint64_t a1, void *a2)
{
  *a2 = off_1022EA558;
  return sub_100BEBD98((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_100BEC240(uint64_t a1)
{
  return sub_100BEC350((void *)(a1 + 8));
}

void sub_100BEC248(void *a1)
{
  sub_100BEC350(a1 + 1);

  operator delete(a1);
}

uint64_t sub_100BEC284(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BEC2C4()
{
}

uint64_t sub_100BEC2D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *sub_100BEC350(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BEC3D4(uint64_t a1)
{
  sub_100BEC410(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BEC410(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BEC454((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BEC454(uint64_t a1)
{
  sub_100BEC350((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_100BEC4A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100BEC53C(void *a1)
{
  *a1 = off_1022EA5E8;
  sub_100BECA68(a1 + 1);
  return a1;
}

void sub_100BEC580(void *a1)
{
  *a1 = off_1022EA5E8;
  sub_100BECA68(a1 + 1);

  operator delete();
}

void *sub_100BEC5E4(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = off_1022EA5E8;
  sub_100BEC4A4((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100BEC638(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BEC64C(uint64_t a1, void *a2)
{
  *a2 = off_1022EA5E8;
  return sub_100BEC4A4((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_100BEC678(uint64_t a1)
{
  return sub_100BECA68((void *)(a1 + 8));
}

void sub_100BEC680(void *a1)
{
  sub_100BECA68(a1 + 1);

  operator delete(a1);
}

void sub_100BEC6BC(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BEC6C4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BEC704()
{
}

uint64_t sub_100BEC710(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_100BEC790(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BEC7F0(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BEC7D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BEC7F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v22 = 2082;
    unint64_t v23 = "";
    __int16 v24 = 2082;
    char v25 = "activity";
    __int16 v26 = 2082;
    uint64_t v27 = v9;
    __int16 v28 = 2050;
    uint64_t v29 = a2;
    __int16 v30 = 1026;
    int v31 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72))
  {
    unint64_t v11 = (char *)[[*(id *)(a2 + 48) legacyClientKey] UTF8String];
    if (v11) {
      uint8x8_t v12 = v11;
    }
    else {
      uint8x8_t v12 = "";
    }
    sub_100134750(buf, v12);
    sub_1000417A8((uint64_t *)a2, &v18);
    uint64_t v13 = v18;
    unsigned __int8 v14 = *(std::__shared_weak_count **)(a3 + 8);
    unsigned __int8 v16 = *(CLConnectionMessage **)a3;
    char v17 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, uint64_t, CLConnectionMessage **))(*(void *)v15 + 48))(v15, v13, &v16);
    if (v17) {
      sub_1000DB0A0(v17);
    }
    if (v19) {
      sub_1000DB0A0(v19);
    }
    if (SBYTE3(v25) < 0) {
      operator delete(*(void **)buf);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BECA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

void *sub_100BECA68(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BECAEC(uint64_t a1)
{
  sub_100BECB28(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BECB28(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BECB6C((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BECB6C(uint64_t a1)
{
  sub_100BECA68((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_100BECBBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100BECC54(void *a1)
{
  *a1 = off_1022EA668;
  sub_100BED400(a1 + 1);
  return a1;
}

void sub_100BECC98(void *a1)
{
  *a1 = off_1022EA668;
  sub_100BED400(a1 + 1);

  operator delete();
}

unsigned char *sub_100BECCFC(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EA668;
  sub_100BECBBC((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BECD64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BECD78(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EA668;
  uint64_t result = sub_100BECBBC(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BECDCC(uint64_t a1)
{
  return sub_100BED400((void *)(a1 + 8));
}

void sub_100BECDD4(void *a1)
{
  sub_100BED400(a1 + 1);

  operator delete(a1);
}

void sub_100BECE10(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BECE18(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BECE58()
{
}

uint64_t sub_100BECE64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_100BECEE4(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BECF44(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BECF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BECF44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    float v20 = "";
    __int16 v21 = 2082;
    __int16 v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    unint64_t v11 = sub_100BED158(a2);
    uint8x8_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    unsigned __int8 v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BED12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BED158(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A81A20();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"21CLHeadingSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BED354()
{
}

void sub_100BED380(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p[3];
    __p[3] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *sub_100BED400(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BED484(uint64_t a1)
{
  sub_100BED4C0(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BED4C0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BED504((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BED504(uint64_t a1)
{
  sub_100BED400((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_100BED554(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100BED5EC(void *a1)
{
  *a1 = off_1022EA6E8;
  sub_100BEDEB0(a1 + 1);
  return a1;
}

void sub_100BED630(void *a1)
{
  *a1 = off_1022EA6E8;
  sub_100BEDEB0(a1 + 1);

  operator delete();
}

void *sub_100BED694(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = off_1022EA6E8;
  sub_100BED554((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100BED6E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BED6FC(uint64_t a1, void *a2)
{
  *a2 = off_1022EA6E8;
  return sub_100BED554((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_100BED728(uint64_t a1)
{
  return sub_100BEDEB0((void *)(a1 + 8));
}

void sub_100BED730(void *a1)
{
  sub_100BEDEB0(a1 + 1);

  operator delete(a1);
}

void sub_100BED76C(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BED774(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BED7B4()
{
}

uint64_t sub_100BED7C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_100BED840(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BED8A0(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BED888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BED8A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v22 = 2082;
    __int16 v23 = "";
    __int16 v24 = 2082;
    __int16 v25 = "activity";
    __int16 v26 = 2082;
    uint64_t v27 = v9;
    __int16 v28 = 2050;
    uint64_t v29 = a2;
    __int16 v30 = 1026;
    int v31 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72))
  {
    unint64_t v11 = (char *)[[*(id *)(a2 + 48) legacyClientKey] UTF8String];
    if (v11) {
      uint8x8_t v12 = v11;
    }
    else {
      uint8x8_t v12 = "";
    }
    sub_100134750(buf, v12);
    sub_100BEDB18(a2, &v18);
    uint64_t v13 = v18;
    unsigned __int8 v14 = *(std::__shared_weak_count **)(a3 + 8);
    unsigned __int8 v16 = *(CLConnectionMessage **)a3;
    char v17 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, uint64_t, CLConnectionMessage **))(*(void *)v15 + 48))(v15, v13, &v16);
    if (v17) {
      sub_1000DB0A0(v17);
    }
    if (v19) {
      sub_1000DB0A0(v19);
    }
    if (SBYTE3(v25) < 0) {
      operator delete(*(void **)buf);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BEDAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

void sub_100BEDB18(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1 + 328;
  *(void *)uint64_t buf = v31;
  double v5 = sub_100041B40(a1 + 328, v31, (uint64_t)&unk_101D0B290, (uint64_t **)buf);
  __int16 v6 = (const void *)v5[3];
  uint64_t v7 = (std::__shared_weak_count *)v5[4];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6)
  {
    if (!v8)
    {
      sub_101A8146C((uint64_t)a2, v9, v10, v11, v12, v13, v14, v15, v27, v28, v29, v30, v31[0], v31[1], *(uint64_t *)buf, *(uint64_t *)v33, *(uint64_t *)&v33[8], *(uint64_t *)&v33[16], *(uint64_t *)&v33[24],
        v34,
        v35,
        v36,
        v37,
        v38);
      abort_report_np();
      goto LABEL_26;
    }
    *a2 = v8;
    a2[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v8[248]) {
      goto LABEL_21;
    }
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    unsigned __int8 v16 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)CFStringRef v33 = 2082;
      *(void *)&v33[2] = "";
      *(_WORD *)&v33[10] = 2114;
      *(void *)&v33[12] = v17;
      *(_WORD *)&v33[20] = 2082;
      *(void *)&v33[22] = (unint64_t)"18CLPushSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid persistent subscription detected... getting a fresh one\", \"ClientKeyPath\":%{public, location:escape_only}@, \"subscription\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    uint64_t v18 = (std::__shared_weak_count *)a2[1];
    if (v18) {
      sub_1000DB0A0(v18);
    }
  }
  sub_1007E2914(*(uint64_t **)(a1 + 16), *(void *)(a1 + 48), a2);
  uint64_t v19 = *a2;
  *(unsigned char *)(v19 + 144) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
  uint64_t v20 = *a2;
  __int16 v21 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  id v22 = v21;

  *(void *)(v20 + 152) = v21;
  if (!*a2 || !*(unsigned char *)(*a2 + 248))
  {
    sub_101A81310(a2);
    abort_report_np();
LABEL_26:
    __break(1u);
    return;
  }
  *(void *)uint64_t buf = v31;
  __int16 v23 = sub_100041B40(v4, v31, (uint64_t)&unk_101D0B290, (uint64_t **)buf);
  uint64_t v25 = *a2;
  uint64_t v24 = a2[1];
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v26 = (std::__shared_weak_count *)v23[4];
  _OWORD v23[3] = v25;
  v23[4] = v24;
  if (v26) {
    sub_1000DB0A0(v26);
  }
  (*(void (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, a1 + 8);
LABEL_21:
  if (v7) {
    sub_1000DB0A0(v7);
  }
}

void sub_100BEDE74(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100BEDEB0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BEDF34(uint64_t a1)
{
  sub_100BEDF70(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BEDF70(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BEDFB4((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BEDFB4(uint64_t a1)
{
  sub_100BEDEB0((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_100BEE004(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100BEE09C(void *a1)
{
  *a1 = off_1022EA768;
  sub_100BEE960(a1 + 1);
  return a1;
}

void sub_100BEE0E0(void *a1)
{
  *a1 = off_1022EA768;
  sub_100BEE960(a1 + 1);

  operator delete();
}

void *sub_100BEE144(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = off_1022EA768;
  sub_100BEE004((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100BEE198(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BEE1AC(uint64_t a1, void *a2)
{
  *a2 = off_1022EA768;
  return sub_100BEE004((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_100BEE1D8(uint64_t a1)
{
  return sub_100BEE960((void *)(a1 + 8));
}

void sub_100BEE1E0(void *a1)
{
  sub_100BEE960(a1 + 1);

  operator delete(a1);
}

void sub_100BEE21C(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BEE224(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BEE264()
{
}

uint64_t sub_100BEE270(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_100BEE2F0(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BEE350(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BEE338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BEE350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v22 = 2082;
    __int16 v23 = "";
    __int16 v24 = 2082;
    uint64_t v25 = "activity";
    __int16 v26 = 2082;
    uint64_t v27 = v9;
    __int16 v28 = 2050;
    uint64_t v29 = a2;
    __int16 v30 = 1026;
    int v31 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72))
  {
    uint64_t v11 = (char *)[*(id *)(a2 + 48) legacyClientKey];
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = "";
    }
    sub_100134750(buf, v12);
    sub_100BEE5C8(a2, &v18);
    uint64_t v13 = v18;
    uint64_t v14 = *(std::__shared_weak_count **)(a3 + 8);
    unsigned __int8 v16 = *(CLConnectionMessage **)a3;
    uint64_t v17 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, uint64_t, CLConnectionMessage **))(*(void *)v15 + 48))(v15, v13, &v16);
    if (v17) {
      sub_1000DB0A0(v17);
    }
    if (v19) {
      sub_1000DB0A0(v19);
    }
    if (SBYTE3(v25) < 0) {
      operator delete(*(void **)buf);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BEE574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

void sub_100BEE5C8(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1 + 328;
  *(void *)uint64_t buf = v31;
  double v5 = sub_100041B40(a1 + 328, v31, (uint64_t)&unk_101D0B290, (uint64_t **)buf);
  __int16 v6 = (const void *)v5[3];
  uint64_t v7 = (std::__shared_weak_count *)v5[4];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6)
  {
    if (!v8)
    {
      sub_101A8146C((uint64_t)a2, v9, v10, v11, v12, v13, v14, v15, v27, v28, v29, v30, v31[0], v31[1], *(uint64_t *)buf, *(uint64_t *)v33, *(uint64_t *)&v33[8], *(uint64_t *)&v33[16], *(uint64_t *)&v33[24],
        v34,
        v35,
        v36,
        v37,
        v38);
      abort_report_np();
      goto LABEL_26;
    }
    *a2 = v8;
    a2[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v8[248]) {
      goto LABEL_21;
    }
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    unsigned __int8 v16 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)CFStringRef v33 = 2082;
      *(void *)&v33[2] = "";
      *(_WORD *)&v33[10] = 2114;
      *(void *)&v33[12] = v17;
      *(_WORD *)&v33[20] = 2082;
      *(void *)&v33[22] = (unint64_t)"24CLTranscriptSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid persistent subscription detected... getting a fresh one\", \"ClientKeyPath\":%{public, location:escape_only}@, \"subscription\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    uint64_t v18 = (std::__shared_weak_count *)a2[1];
    if (v18) {
      sub_1000DB0A0(v18);
    }
  }
  sub_1007E321C(*(uint64_t **)(a1 + 16), *(void *)(a1 + 48), a2);
  uint64_t v19 = *a2;
  *(unsigned char *)(v19 + 144) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
  uint64_t v20 = *a2;
  __int16 v21 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  id v22 = v21;

  *(void *)(v20 + 152) = v21;
  if (!*a2 || !*(unsigned char *)(*a2 + 248))
  {
    sub_101A81310(a2);
    abort_report_np();
LABEL_26:
    __break(1u);
    return;
  }
  *(void *)uint64_t buf = v31;
  __int16 v23 = sub_100041B40(v4, v31, (uint64_t)&unk_101D0B290, (uint64_t **)buf);
  uint64_t v25 = *a2;
  uint64_t v24 = a2[1];
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v26 = (std::__shared_weak_count *)v23[4];
  _OWORD v23[3] = v25;
  v23[4] = v24;
  if (v26) {
    sub_1000DB0A0(v26);
  }
  (*(void (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, a1 + 8);
LABEL_21:
  if (v7) {
    sub_1000DB0A0(v7);
  }
}

void sub_100BEE924(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100BEE960(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BEE9E4(uint64_t a1)
{
  sub_100BEEA20(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BEEA20(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BEEA64((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BEEA64(uint64_t a1)
{
  sub_100BEE960((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *sub_100BEEAB4(void *a1)
{
  *a1 = off_1022EA7E8;
  sub_10048BD00(a1 + 1);
  return a1;
}

void sub_100BEEAF8(void *a1)
{
  *a1 = off_1022EA7E8;
  sub_10048BD00(a1 + 1);

  operator delete();
}

unsigned char *sub_100BEEB5C(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EA7E8;
  sub_10048C4EC((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BEEBC4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BEEBD8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EA7E8;
  uint64_t result = sub_10048C4EC(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BEEC2C(uint64_t a1)
{
  return sub_10048BD00((void *)(a1 + 8));
}

void sub_100BEEC34(void *a1)
{
  sub_10048BD00(a1 + 1);

  operator delete(a1);
}

void sub_100BEEC70(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BEEC78(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BEECB8()
{
}

void sub_100BEECC4(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BEED24(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BEED0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BEED24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_1000411E8(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BEEF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

uint64_t sub_100BEEF38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100BEEFD0(void *a1)
{
  *a1 = off_1022EA868;
  sub_100BEF258(a1 + 1);
  return a1;
}

void sub_100BEF014(void *a1)
{
  *a1 = off_1022EA868;
  sub_100BEF258(a1 + 1);

  operator delete();
}

unsigned char *sub_100BEF078(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EA868;
  sub_100BEEF38((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BEF0E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BEF0F4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EA868;
  uint64_t result = sub_100BEEF38(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BEF148(uint64_t a1)
{
  return sub_100BEF258((void *)(a1 + 8));
}

void sub_100BEF150(void *a1)
{
  sub_100BEF258(a1 + 1);

  operator delete(a1);
}

uint64_t sub_100BEF18C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BEF1CC()
{
}

uint64_t sub_100BEF1D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *sub_100BEF258(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BEF2DC(uint64_t a1)
{
  sub_100BEF318(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BEF318(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BEF35C((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BEF35C(uint64_t a1)
{
  sub_100BEF258((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *sub_100BEF3AC(void *a1)
{
  *a1 = off_1022EA8E8;
  sub_100B3E190(a1 + 1);
  return a1;
}

void sub_100BEF3F0(void *a1)
{
  *a1 = off_1022EA8E8;
  sub_100B3E190(a1 + 1);

  operator delete();
}

unsigned char *sub_100BEF454(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EA8E8;
  sub_100B3E604((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BEF4BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BEF4D0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EA8E8;
  uint64_t result = sub_100B3E604(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BEF524(uint64_t a1)
{
  return sub_100B3E190((void *)(a1 + 8));
}

void sub_100BEF52C(void *a1)
{
  sub_100B3E190(a1 + 1);

  operator delete(a1);
}

void sub_100BEF568(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BEF570(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BEF5B0()
{
}

void sub_100BEF5BC(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BEF61C(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BEF604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BEF61C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BEF830(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BEF804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BEF830(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A81FC0();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"21CLRangingSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BEFA2C()
{
}

uint64_t sub_100BEFA58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100BEFAF0(void *a1)
{
  *a1 = off_1022EA968;
  sub_100BF0280(a1 + 1);
  return a1;
}

void sub_100BEFB34(void *a1)
{
  *a1 = off_1022EA968;
  sub_100BF0280(a1 + 1);

  operator delete();
}

unsigned char *sub_100BEFB98(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EA968;
  sub_100BEFA58((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BEFC00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BEFC14(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EA968;
  uint64_t result = sub_100BEFA58(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BEFC68(uint64_t a1)
{
  return sub_100BF0280((void *)(a1 + 8));
}

void sub_100BEFC70(void *a1)
{
  sub_100BF0280(a1 + 1);

  operator delete(a1);
}

void sub_100BEFCAC(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BEFCB4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BEFCF4()
{
}

uint64_t sub_100BEFD00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_100BEFD80(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BEFDE0(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BEFDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BEFDE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BEFFF4(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BEFFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BEFFF4(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A82298();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = 0x8000000101D83DECLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BF0218()
{
}

void sub_100BF0248(uint64_t a1)
{
  sub_100029A7C(a1);

  operator delete();
}

void *sub_100BF0280(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BF0304(uint64_t a1)
{
  sub_100BF0340(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BF0340(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BF0384((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BF0384(uint64_t a1)
{
  sub_100BF0280((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_100BF03D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100BF046C(void *a1)
{
  *a1 = off_1022EAA48;
  sub_100BF0B98(a1 + 1);
  return a1;
}

void sub_100BF04B0(void *a1)
{
  *a1 = off_1022EAA48;
  sub_100BF0B98(a1 + 1);

  operator delete();
}

unsigned char *sub_100BF0514(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EAA48;
  sub_100BF03D4((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BF057C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF0590(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EAA48;
  uint64_t result = sub_100BF03D4(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BF05E4(uint64_t a1)
{
  return sub_100BF0B98((void *)(a1 + 8));
}

void sub_100BF05EC(void *a1)
{
  sub_100BF0B98(a1 + 1);

  operator delete(a1);
}

void sub_100BF0628(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BF0630(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BF0670()
{
}

uint64_t sub_100BF067C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_100BF06FC(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BF075C(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BF0744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BF075C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BF0970(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BF0944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BF0970(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A82570();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"28CLPlaceInferenceSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BF0B6C()
{
}

void *sub_100BF0B98(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BF0C1C(uint64_t a1)
{
  sub_100BF0C58(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BF0C58(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BF0C9C((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BF0C9C(uint64_t a1)
{
  sub_100BF0B98((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *sub_100BF0CEC(void *a1)
{
  *a1 = off_1022EAAC8;
  sub_1009A4170(a1 + 1);
  return a1;
}

void sub_100BF0D30(void *a1)
{
  *a1 = off_1022EAAC8;
  sub_1009A4170(a1 + 1);

  operator delete();
}

unsigned char *sub_100BF0D94(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EAAC8;
  sub_1009A4778((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BF0DFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF0E10(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EAAC8;
  uint64_t result = sub_1009A4778(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BF0E64(uint64_t a1)
{
  return sub_1009A4170((void *)(a1 + 8));
}

void sub_100BF0E6C(void *a1)
{
  sub_1009A4170(a1 + 1);

  operator delete(a1);
}

void sub_100BF0EA8(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BF0EB0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BF0EF0()
{
}

void sub_100BF0EFC(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BF0F5C(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BF0F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BF0F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BF1170(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BF1144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BF1170(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A82848();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"25CLNatalimetrySubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BF136C()
{
}

uint64_t sub_100BF1398(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100BF1430(void *a1)
{
  *a1 = off_1022EAB48;
  sub_100BF1B5C(a1 + 1);
  return a1;
}

void sub_100BF1474(void *a1)
{
  *a1 = off_1022EAB48;
  sub_100BF1B5C(a1 + 1);

  operator delete();
}

unsigned char *sub_100BF14D8(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EAB48;
  sub_100BF1398((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BF1540(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF1554(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EAB48;
  uint64_t result = sub_100BF1398(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BF15A8(uint64_t a1)
{
  return sub_100BF1B5C((void *)(a1 + 8));
}

void sub_100BF15B0(void *a1)
{
  sub_100BF1B5C(a1 + 1);

  operator delete(a1);
}

void sub_100BF15EC(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BF15F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BF1634()
{
}

uint64_t sub_100BF1640(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_100BF16C0(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BF1720(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BF1708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BF1720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BF1934(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BF1908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BF1934(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A82B20();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"28CLSedentaryTimerSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BF1B30()
{
}

void *sub_100BF1B5C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BF1BE0(uint64_t a1)
{
  sub_100BF1C1C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BF1C1C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BF1C60((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BF1C60(uint64_t a1)
{
  sub_100BF1B5C((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_100BF1CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100BF1D48(void *a1)
{
  *a1 = off_1022EABC8;
  sub_100BF2474(a1 + 1);
  return a1;
}

void sub_100BF1D8C(void *a1)
{
  *a1 = off_1022EABC8;
  sub_100BF2474(a1 + 1);

  operator delete();
}

unsigned char *sub_100BF1DF0(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EABC8;
  sub_100BF1CB0((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BF1E58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF1E6C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EABC8;
  uint64_t result = sub_100BF1CB0(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BF1EC0(uint64_t a1)
{
  return sub_100BF2474((void *)(a1 + 8));
}

void sub_100BF1EC8(void *a1)
{
  sub_100BF2474(a1 + 1);

  operator delete(a1);
}

void sub_100BF1F04(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BF1F0C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BF1F4C()
{
}

uint64_t sub_100BF1F58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_100BF1FD8(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BF2038(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BF2020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BF2038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BF224C(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BF2220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BF224C(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A82DF8();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"23CLStepCountSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BF2448()
{
}

void *sub_100BF2474(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BF24F8(uint64_t a1)
{
  sub_100BF2534(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BF2534(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BF2578((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BF2578(uint64_t a1)
{
  sub_100BF2474((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *sub_100BF25C8(void *a1)
{
  *a1 = off_1022EAC48;
  sub_100926CEC(a1 + 1);
  return a1;
}

void sub_100BF260C(void *a1)
{
  *a1 = off_1022EAC48;
  sub_100926CEC(a1 + 1);

  operator delete();
}

unsigned char *sub_100BF2670(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EAC48;
  sub_1009272F4((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BF26D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF26EC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EAC48;
  uint64_t result = sub_1009272F4(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BF2740(uint64_t a1)
{
  return sub_100926CEC((void *)(a1 + 8));
}

void sub_100BF2748(void *a1)
{
  sub_100926CEC(a1 + 1);

  operator delete(a1);
}

void sub_100BF2784(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BF278C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BF27CC()
{
}

void sub_100BF27D8(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BF2838(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BF2820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BF2838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BF2A4C(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BF2A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BF2A4C(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A830D0();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"25CLMotionAlarmSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BF2C48()
{
}

uint64_t sub_100BF2C74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100BF2D0C(void *a1)
{
  *a1 = off_1022EACC8;
  sub_100BF3438(a1 + 1);
  return a1;
}

void sub_100BF2D50(void *a1)
{
  *a1 = off_1022EACC8;
  sub_100BF3438(a1 + 1);

  operator delete();
}

unsigned char *sub_100BF2DB4(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EACC8;
  sub_100BF2C74((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BF2E1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF2E30(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EACC8;
  uint64_t result = sub_100BF2C74(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BF2E84(uint64_t a1)
{
  return sub_100BF3438((void *)(a1 + 8));
}

void sub_100BF2E8C(void *a1)
{
  sub_100BF3438(a1 + 1);

  operator delete(a1);
}

void sub_100BF2EC8(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BF2ED0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BF2F10()
{
}

uint64_t sub_100BF2F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_100BF2F9C(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BF2FFC(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BF2FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BF2FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BF3210(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BF31E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BF3210(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A833A8();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"22CLOdometerSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BF340C()
{
}

void *sub_100BF3438(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BF34BC(uint64_t a1)
{
  sub_100BF34F8(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BF34F8(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BF353C((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BF353C(uint64_t a1)
{
  sub_100BF3438((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_100BF358C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100BF3624(void *a1)
{
  *a1 = off_1022EAD48;
  sub_100BF3D50(a1 + 1);
  return a1;
}

void sub_100BF3668(void *a1)
{
  *a1 = off_1022EAD48;
  sub_100BF3D50(a1 + 1);

  operator delete();
}

unsigned char *sub_100BF36CC(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EAD48;
  sub_100BF358C((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BF3734(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF3748(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EAD48;
  uint64_t result = sub_100BF358C(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BF379C(uint64_t a1)
{
  return sub_100BF3D50((void *)(a1 + 8));
}

void sub_100BF37A4(void *a1)
{
  sub_100BF3D50(a1 + 1);

  operator delete(a1);
}

void sub_100BF37E0(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BF37E8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BF3828()
{
}

uint64_t sub_100BF3834(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_100BF38B4(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BF3914(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BF38FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BF3914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BF3B28(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BF3AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BF3B28(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A83680();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"28CLExerciseMinuteSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BF3D24()
{
}

void *sub_100BF3D50(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BF3DD4(uint64_t a1)
{
  sub_100BF3E10(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BF3E10(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BF3E54((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BF3E54(uint64_t a1)
{
  sub_100BF3D50((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *sub_100BF3EA4(void *a1)
{
  *a1 = off_1022EADC8;
  sub_10086F7F4(a1 + 1);
  return a1;
}

void sub_100BF3EE8(void *a1)
{
  *a1 = off_1022EADC8;
  sub_10086F7F4(a1 + 1);

  operator delete();
}

unsigned char *sub_100BF3F4C(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EADC8;
  sub_10086FDFC((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BF3FB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF3FC8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EADC8;
  uint64_t result = sub_10086FDFC(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BF401C(uint64_t a1)
{
  return sub_10086F7F4((void *)(a1 + 8));
}

void sub_100BF4024(void *a1)
{
  sub_10086F7F4(a1 + 1);

  operator delete(a1);
}

void sub_100BF4060(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BF4068(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BF40A8()
{
}

void sub_100BF40B4(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BF4114(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BF40FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BF4114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BF4328(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BF42FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BF4328(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A83958();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"23CLElevationSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BF4524()
{
}

uint64_t sub_100BF4550(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100BF45E8(void *a1)
{
  *a1 = off_1022EAE48;
  sub_100BF4D14(a1 + 1);
  return a1;
}

void sub_100BF462C(void *a1)
{
  *a1 = off_1022EAE48;
  sub_100BF4D14(a1 + 1);

  operator delete();
}

unsigned char *sub_100BF4690(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EAE48;
  sub_100BF4550((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BF46F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF470C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EAE48;
  uint64_t result = sub_100BF4550(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BF4760(uint64_t a1)
{
  return sub_100BF4D14((void *)(a1 + 8));
}

void sub_100BF4768(void *a1)
{
  sub_100BF4D14(a1 + 1);

  operator delete(a1);
}

void sub_100BF47A4(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BF47AC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BF47EC()
{
}

uint64_t sub_100BF47F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_100BF4878(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BF48D8(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BF48C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BF48D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BF4AEC(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BF4AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BF4AEC(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A83C30();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"18CLFallSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BF4CE8()
{
}

void *sub_100BF4D14(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BF4D98(uint64_t a1)
{
  sub_100BF4DD4(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BF4DD4(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BF4E18((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BF4E18(uint64_t a1)
{
  sub_100BF4D14((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *sub_100BF4E68(void *a1)
{
  *a1 = off_1022EAEC8;
  sub_1005D192C(a1 + 1);
  return a1;
}

void sub_100BF4EAC(void *a1)
{
  *a1 = off_1022EAEC8;
  sub_1005D192C(a1 + 1);

  operator delete();
}

unsigned char *sub_100BF4F10(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EAEC8;
  sub_1005D1F34((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BF4F78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF4F8C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EAEC8;
  uint64_t result = sub_1005D1F34(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BF4FE0(uint64_t a1)
{
  return sub_1005D192C((void *)(a1 + 8));
}

void sub_100BF4FE8(void *a1)
{
  sub_1005D192C(a1 + 1);

  operator delete(a1);
}

void sub_100BF5024(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BF502C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BF506C()
{
}

void sub_100BF5078(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BF50D8(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BF50C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BF50D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BF52EC(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BF52C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BF52EC(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A83F08();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"28CLMiLoConnectionSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BF54E8()
{
}

uint64_t sub_100BF5514(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100BF55AC(void *a1)
{
  *a1 = off_1022EAF48;
  sub_100BF5CD8(a1 + 1);
  return a1;
}

void sub_100BF55F0(void *a1)
{
  *a1 = off_1022EAF48;
  sub_100BF5CD8(a1 + 1);

  operator delete();
}

unsigned char *sub_100BF5654(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EAF48;
  sub_100BF5514((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BF56BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF56D0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EAF48;
  uint64_t result = sub_100BF5514(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BF5724(uint64_t a1)
{
  return sub_100BF5CD8((void *)(a1 + 8));
}

void sub_100BF572C(void *a1)
{
  sub_100BF5CD8(a1 + 1);

  operator delete(a1);
}

void sub_100BF5768(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BF5770(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BF57B0()
{
}

uint64_t sub_100BF57BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_100BF583C(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BF589C(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BF5884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BF589C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BF5AB0(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BF5A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BF5AB0(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A841E0();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"28CLMotionActivitySubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BF5CAC()
{
}

void *sub_100BF5CD8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BF5D5C(uint64_t a1)
{
  sub_100BF5D98(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BF5D98(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BF5DDC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BF5DDC(uint64_t a1)
{
  sub_100BF5CD8((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_100BF5E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100BF5EC4(void *a1)
{
  *a1 = off_1022EAFC8;
  sub_100BF65F0(a1 + 1);
  return a1;
}

void sub_100BF5F08(void *a1)
{
  *a1 = off_1022EAFC8;
  sub_100BF65F0(a1 + 1);

  operator delete();
}

unsigned char *sub_100BF5F6C(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EAFC8;
  sub_100BF5E2C((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BF5FD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF5FE8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EAFC8;
  uint64_t result = sub_100BF5E2C(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BF603C(uint64_t a1)
{
  return sub_100BF65F0((void *)(a1 + 8));
}

void sub_100BF6044(void *a1)
{
  sub_100BF65F0(a1 + 1);

  operator delete(a1);
}

void sub_100BF6080(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BF6088(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BF60C8()
{
}

uint64_t sub_100BF60D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_100BF6154(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BF61B4(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BF619C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BF61B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BF63C8(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BF639C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BF63C8(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A844B8();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"21CLWorkoutSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BF65C4()
{
}

void *sub_100BF65F0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BF6674(uint64_t a1)
{
  sub_100BF66B0(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BF66B0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BF66F4((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BF66F4(uint64_t a1)
{
  sub_100BF65F0((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_100BF6744(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100BF67DC(void *a1)
{
  *a1 = off_1022EB048;
  sub_100BF6F08(a1 + 1);
  return a1;
}

void sub_100BF6820(void *a1)
{
  *a1 = off_1022EB048;
  sub_100BF6F08(a1 + 1);

  operator delete();
}

unsigned char *sub_100BF6884(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EB048;
  sub_100BF6744((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BF68EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF6900(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EB048;
  uint64_t result = sub_100BF6744(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BF6954(uint64_t a1)
{
  return sub_100BF6F08((void *)(a1 + 8));
}

void sub_100BF695C(void *a1)
{
  sub_100BF6F08(a1 + 1);

  operator delete(a1);
}

void sub_100BF6998(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BF69A0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BF69E0()
{
}

uint64_t sub_100BF69EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_100BF6A6C(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BF6ACC(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BF6AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BF6ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BF6CE0(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BF6CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BF6CE0(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A84790();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"25CLMotionStateSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BF6EDC()
{
}

void *sub_100BF6F08(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BF6F8C(uint64_t a1)
{
  sub_100BF6FC8(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BF6FC8(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BF700C((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BF700C(uint64_t a1)
{
  sub_100BF6F08((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *sub_100BF705C(void *a1)
{
  *a1 = off_1022EB0C8;
  sub_10090510C(a1 + 1);
  return a1;
}

void sub_100BF70A0(void *a1)
{
  *a1 = off_1022EB0C8;
  sub_10090510C(a1 + 1);

  operator delete();
}

unsigned char *sub_100BF7104(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EB0C8;
  sub_100905714((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BF716C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF7180(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EB0C8;
  uint64_t result = sub_100905714(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BF71D4(uint64_t a1)
{
  return sub_10090510C((void *)(a1 + 8));
}

void sub_100BF71DC(void *a1)
{
  sub_10090510C(a1 + 1);

  operator delete(a1);
}

void sub_100BF7218(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BF7220(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BF7260()
{
}

void sub_100BF726C(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BF72CC(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BF72B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BF72CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BF74E0(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BF74B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BF74E0(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A84A68();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"21CLSkiDataSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BF76DC()
{
}

uint64_t sub_100BF7708(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100BF77A0(void *a1)
{
  *a1 = off_1022EB148;
  sub_100BF7ECC(a1 + 1);
  return a1;
}

void sub_100BF77E4(void *a1)
{
  *a1 = off_1022EB148;
  sub_100BF7ECC(a1 + 1);

  operator delete();
}

unsigned char *sub_100BF7848(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EB148;
  sub_100BF7708((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BF78B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF78C4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EB148;
  uint64_t result = sub_100BF7708(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BF7918(uint64_t a1)
{
  return sub_100BF7ECC((void *)(a1 + 8));
}

void sub_100BF7920(void *a1)
{
  sub_100BF7ECC(a1 + 1);

  operator delete(a1);
}

void sub_100BF795C(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BF7964(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BF79A4()
{
}

uint64_t sub_100BF79B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_100BF7A30(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BF7A90(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BF7A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BF7A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BF7CA4(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BF7C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BF7CA4(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A84D40();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"22CLSwimDataSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BF7EA0()
{
}

void *sub_100BF7ECC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BF7F50(uint64_t a1)
{
  sub_100BF7F8C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BF7F8C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BF7FD0((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BF7FD0(uint64_t a1)
{
  sub_100BF7ECC((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *sub_100BF8020(void *a1)
{
  *a1 = off_1022EB1C8;
  sub_100A67524(a1 + 1);
  return a1;
}

void sub_100BF8064(void *a1)
{
  *a1 = off_1022EB1C8;
  sub_100A67524(a1 + 1);

  operator delete();
}

unsigned char *sub_100BF80C8(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EB1C8;
  sub_100A67998((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BF8130(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF8144(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EB1C8;
  uint64_t result = sub_100A67998(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BF8198(uint64_t a1)
{
  return sub_100A67524((void *)(a1 + 8));
}

void sub_100BF81A0(void *a1)
{
  sub_100A67524(a1 + 1);

  operator delete(a1);
}

void sub_100BF81DC(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BF81E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BF8224()
{
}

void sub_100BF8230(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BF8290(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BF8278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BF8290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BF84A4(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BF8478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BF84A4(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A85018();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"22CLSidebandSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BF86A0()
{
}

void *sub_100BF86CC(void *a1)
{
  *a1 = off_1022EB248;
  sub_100A1C3A8(a1 + 1);
  return a1;
}

void sub_100BF8710(void *a1)
{
  *a1 = off_1022EB248;
  sub_100A1C3A8(a1 + 1);

  operator delete();
}

unsigned char *sub_100BF8774(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EB248;
  sub_100A1C81C((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BF87DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF87F0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EB248;
  uint64_t result = sub_100A1C81C(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BF8844(uint64_t a1)
{
  return sub_100A1C3A8((void *)(a1 + 8));
}

void sub_100BF884C(void *a1)
{
  sub_100A1C3A8(a1 + 1);

  operator delete(a1);
}

void sub_100BF8888(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BF8890(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BF88D0()
{
}

void sub_100BF88DC(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BF893C(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BF8924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BF893C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BF8B50(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BF8B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BF8B50(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A852F0();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"21CLGestureSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BF8D4C()
{
}

uint64_t sub_100BF8D78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100BF8E10(void *a1)
{
  *a1 = off_1022EB2C8;
  sub_100BF953C(a1 + 1);
  return a1;
}

void sub_100BF8E54(void *a1)
{
  *a1 = off_1022EB2C8;
  sub_100BF953C(a1 + 1);

  operator delete();
}

unsigned char *sub_100BF8EB8(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EB2C8;
  sub_100BF8D78((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BF8F20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF8F34(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EB2C8;
  uint64_t result = sub_100BF8D78(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BF8F88(uint64_t a1)
{
  return sub_100BF953C((void *)(a1 + 8));
}

void sub_100BF8F90(void *a1)
{
  sub_100BF953C(a1 + 1);

  operator delete(a1);
}

void sub_100BF8FCC(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BF8FD4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BF9014()
{
}

uint64_t sub_100BF9020(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_100BF90A0(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BF9100(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BF90E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BF9100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BF9314(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BF92E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BF9314(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A855C8();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"27CLActivityAlarmSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BF9510()
{
}

void *sub_100BF953C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BF95C0(uint64_t a1)
{
  sub_100BF95FC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BF95FC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BF9640((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BF9640(uint64_t a1)
{
  sub_100BF953C((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_100BF9690(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100BF9728(void *a1)
{
  *a1 = off_1022EB348;
  sub_100BF9E54(a1 + 1);
  return a1;
}

void sub_100BF976C(void *a1)
{
  *a1 = off_1022EB348;
  sub_100BF9E54(a1 + 1);

  operator delete();
}

unsigned char *sub_100BF97D0(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EB348;
  sub_100BF9690((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BF9838(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF984C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EB348;
  uint64_t result = sub_100BF9690(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BF98A0(uint64_t a1)
{
  return sub_100BF9E54((void *)(a1 + 8));
}

void sub_100BF98A8(void *a1)
{
  sub_100BF9E54(a1 + 1);

  operator delete(a1);
}

void sub_100BF98E4(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BF98EC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BF992C()
{
}

uint64_t sub_100BF9938(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_100BF99B8(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BF9A18(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BF9A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BF9A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BF9C2C(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BF9C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BF9C2C(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A858A0();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"29CLOnBodyDetectionSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BF9E28()
{
}

void *sub_100BF9E54(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BF9ED8(uint64_t a1)
{
  sub_100BF9F14(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BF9F14(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BF9F58((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BF9F58(uint64_t a1)
{
  sub_100BF9E54((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_100BF9FA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100BFA040(void *a1)
{
  *a1 = off_1022EB3C8;
  sub_100BFA76C(a1 + 1);
  return a1;
}

void sub_100BFA084(void *a1)
{
  *a1 = off_1022EB3C8;
  sub_100BFA76C(a1 + 1);

  operator delete();
}

unsigned char *sub_100BFA0E8(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EB3C8;
  sub_100BF9FA8((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BFA150(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BFA164(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EB3C8;
  uint64_t result = sub_100BF9FA8(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BFA1B8(uint64_t a1)
{
  return sub_100BFA76C((void *)(a1 + 8));
}

void sub_100BFA1C0(void *a1)
{
  sub_100BFA76C(a1 + 1);

  operator delete(a1);
}

void sub_100BFA1FC(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BFA204(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BFA244()
{
}

uint64_t sub_100BFA250(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_100BFA2D0(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BFA330(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BFA318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BFA330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BFA544(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BFA518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BFA544(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A85B78();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"27CLSafetyAnomalySubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BFA740()
{
}

void *sub_100BFA76C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BFA7F0(uint64_t a1)
{
  sub_100BFA82C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BFA82C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BFA870((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BFA870(uint64_t a1)
{
  sub_100BFA76C((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_100BFA8C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100BFA958(void *a1)
{
  *a1 = off_1022EB448;
  sub_100BFB084(a1 + 1);
  return a1;
}

void sub_100BFA99C(void *a1)
{
  *a1 = off_1022EB448;
  sub_100BFB084(a1 + 1);

  operator delete();
}

unsigned char *sub_100BFAA00(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EB448;
  sub_100BFA8C0((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BFAA68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BFAA7C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EB448;
  uint64_t result = sub_100BFA8C0(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BFAAD0(uint64_t a1)
{
  return sub_100BFB084((void *)(a1 + 8));
}

void sub_100BFAAD8(void *a1)
{
  sub_100BFB084(a1 + 1);

  operator delete(a1);
}

void sub_100BFAB14(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BFAB1C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BFAB5C()
{
}

uint64_t sub_100BFAB68(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_100BFABE8(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BFAC48(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BFAC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BFAC48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BFAE5C(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BFAE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BFAE5C(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A85E50();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"27CLIndoorOutdoorSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BFB058()
{
}

void *sub_100BFB084(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BFB108(uint64_t a1)
{
  sub_100BFB144(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BFB144(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BFB188((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BFB188(uint64_t a1)
{
  sub_100BFB084((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_100BFB1D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100BFB270(void *a1)
{
  *a1 = off_1022EB4C8;
  sub_100BFB4F8(a1 + 1);
  return a1;
}

void sub_100BFB2B4(void *a1)
{
  *a1 = off_1022EB4C8;
  sub_100BFB4F8(a1 + 1);

  operator delete();
}

unsigned char *sub_100BFB318(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EB4C8;
  sub_100BFB1D8((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BFB380(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BFB394(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EB4C8;
  uint64_t result = sub_100BFB1D8(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BFB3E8(uint64_t a1)
{
  return sub_100BFB4F8((void *)(a1 + 8));
}

void sub_100BFB3F0(void *a1)
{
  sub_100BFB4F8(a1 + 1);

  operator delete(a1);
}

uint64_t sub_100BFB42C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BFB46C()
{
}

uint64_t sub_100BFB478(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *sub_100BFB4F8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BFB57C(uint64_t a1)
{
  sub_100BFB5B8(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BFB5B8(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BFB5FC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BFB5FC(uint64_t a1)
{
  sub_100BFB4F8((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_100BFB64C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100BFB6E4(void *a1)
{
  *a1 = off_1022EB548;
  sub_100BFBE10(a1 + 1);
  return a1;
}

void sub_100BFB728(void *a1)
{
  *a1 = off_1022EB548;
  sub_100BFBE10(a1 + 1);

  operator delete();
}

unsigned char *sub_100BFB78C(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EB548;
  sub_100BFB64C((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BFB7F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BFB808(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EB548;
  uint64_t result = sub_100BFB64C(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BFB85C(uint64_t a1)
{
  return sub_100BFBE10((void *)(a1 + 8));
}

void sub_100BFB864(void *a1)
{
  sub_100BFBE10(a1 + 1);

  operator delete(a1);
}

void sub_100BFB8A0(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BFB8A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BFB8E8()
{
}

uint64_t sub_100BFB8F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_100BFB974(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BFB9D4(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BFB9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BFB9D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BFBBE8(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BFBBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BFBBE8(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A86400();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"21CLEclipseSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BFBDE4()
{
}

void *sub_100BFBE10(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BFBE94(uint64_t a1)
{
  sub_100BFBED0(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BFBED0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BFBF14((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BFBF14(uint64_t a1)
{
  sub_100BFBE10((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *sub_100BFBF64(void *a1)
{
  *a1 = off_1022EB5C8;
  sub_100A6FAC4(a1 + 1);
  return a1;
}

void sub_100BFBFA8(void *a1)
{
  *a1 = off_1022EB5C8;
  sub_100A6FAC4(a1 + 1);

  operator delete();
}

unsigned char *sub_100BFC00C(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EB5C8;
  sub_100A6FF38((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BFC074(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BFC088(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EB5C8;
  uint64_t result = sub_100A6FF38(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BFC0DC(uint64_t a1)
{
  return sub_100A6FAC4((void *)(a1 + 8));
}

void sub_100BFC0E4(void *a1)
{
  sub_100A6FAC4(a1 + 1);

  operator delete(a1);
}

void sub_100BFC120(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BFC128(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BFC168()
{
}

void sub_100BFC174(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BFC1D4(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BFC1BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BFC1D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BFC3E8(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BFC3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BFC3E8(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A866D8();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"32CLProxPDPAndALSPhoneSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BFC5E4()
{
}

uint64_t sub_100BFC610(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100BFC6A8(void *a1)
{
  *a1 = off_1022EB648;
  sub_100BFCDD4(a1 + 1);
  return a1;
}

void sub_100BFC6EC(void *a1)
{
  *a1 = off_1022EB648;
  sub_100BFCDD4(a1 + 1);

  operator delete();
}

unsigned char *sub_100BFC750(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EB648;
  sub_100BFC610((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BFC7B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BFC7CC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EB648;
  uint64_t result = sub_100BFC610(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BFC820(uint64_t a1)
{
  return sub_100BFCDD4((void *)(a1 + 8));
}

void sub_100BFC828(void *a1)
{
  sub_100BFCDD4(a1 + 1);

  operator delete(a1);
}

void sub_100BFC864(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BFC86C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BFC8AC()
{
}

uint64_t sub_100BFC8B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_100BFC938(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BFC998(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BFC980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BFC998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BFCBAC(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BFCB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BFCBAC(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A869B0();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"24CLMagicMountSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BFCDA8()
{
}

void *sub_100BFCDD4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BFCE58(uint64_t a1)
{
  sub_100BFCE94(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BFCE94(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BFCED8((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BFCED8(uint64_t a1)
{
  sub_100BFCDD4((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_100BFCF28(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100BFCFC0(void *a1)
{
  *a1 = off_1022EB6C8;
  sub_100BFD6EC(a1 + 1);
  return a1;
}

void sub_100BFD004(void *a1)
{
  *a1 = off_1022EB6C8;
  sub_100BFD6EC(a1 + 1);

  operator delete();
}

unsigned char *sub_100BFD068(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = off_1022EB6C8;
  sub_100BFCF28((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_100BFD0D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BFD0E4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022EB6C8;
  uint64_t result = sub_100BFCF28(a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *sub_100BFD138(uint64_t a1)
{
  return sub_100BFD6EC((void *)(a1 + 8));
}

void sub_100BFD140(void *a1)
{
  sub_100BFD6EC(a1 + 1);

  operator delete(a1);
}

void sub_100BFD17C(uint64_t a1, uint64_t *a2, long long *a3)
{
}

uint64_t sub_100BFD184(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BFD1C4()
{
}

uint64_t sub_100BFD1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_100BFD250(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100BFD2B0(a1, v3, (uint64_t)&v4);
  if (*((void *)&v4 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_100BFD298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100BFD2B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    id v22 = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = a2;
    __int16 v27 = 1026;
    int v28 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(unsigned char *)(a2 + 72) || *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = sub_100BFD4C4(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v14 = *(CLConnectionMessage **)a3;
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v13 + 48))(v13, v11, &v14);
    if (v15) {
      sub_1000DB0A0(v15);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BFD498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100BFD4C4(uint64_t a1)
{
  *(void *)uint64_t buf = &v4;
  uint64_t v1 = (const void *)sub_1000764E0(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101D0B290, (void **)buf)[3];
  if (!v1)
  {
    if (qword_102419520 == -1) {
      goto LABEL_3;
    }
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101A86C88();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_102419520, &stru_1022EA308);
LABEL_3:
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      unint64_t v9 = (unint64_t)"27CLBatchedSensorSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BFD6C0()
{
}

void *sub_100BFD6EC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100BFD770(uint64_t a1)
{
  sub_100BFD7AC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100BFD7AC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100BFD7F0((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100BFD7F0(uint64_t a1)
{
  sub_100BFD6EC((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_100BFD844()
{
}

void *sub_100BFD858()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EB748;
  return result;
}

void sub_100BFD890(uint64_t a1, void *a2)
{
  *a2 = off_1022EB748;
}

void sub_100BFD8B8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  long long v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  __int16 v6 = _os_activity_create((void *)&_mh_execute_header, "CL: LocationManager/kCLConnectionMessageRegistration", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    uint64_t v14 = "";
    __int16 v15 = 2082;
    unsigned __int8 v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocationManager/kCLConnectionMessageRegistration\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BD6714(v3, (uint64_t)v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BFDA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BFDA98(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100BFDAD8()
{
}

uint64_t sub_100BFDAE4(uint64_t a1, unsigned __int8 *a2)
{
  long long v4 = a2 + 16;
  uint64_t v26 = (void *)(a1 + 24);
  unint64_t v5 = sub_100103388(a1 + 24, (uint64_t)(a2 + 16));
  *((void *)a2 + 1) = v5;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unint64_t v7 = v5;
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v8.i16[0] = vaddlv_u8(v8);
    unint64_t v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v10 = v5;
      if (v6 <= v5) {
        unint64_t v10 = v5 % v6;
      }
    }
    else
    {
      unint64_t v10 = (v6 - 1) & v5;
    }
    uint64_t v11 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v10);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v13 = *((void *)i + 1);
        if (v13 == v7)
        {
          if (sub_100103744(a1 + 32, i + 16, v4)) {
            return 0;
          }
        }
        else
        {
          if (v9 > 1)
          {
            if (v13 >= v6) {
              v13 %= v6;
            }
          }
          else
          {
            v13 &= v6 - 1;
          }
          if (v13 != v10) {
            break;
          }
        }
      }
    }
  }
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v6 || (float)(v15 * (float)v6) < v14)
  {
    BOOL v16 = 1;
    if (v6 >= 3) {
      BOOL v16 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v6);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100BEBE30(a1, v19);
  }
  int8x8_t v20 = *(int8x8_t *)(a1 + 8);
  unint64_t v21 = *((void *)a2 + 1);
  uint8x8_t v22 = (uint8x8_t)vcnt_s8(v20);
  v22.i16[0] = vaddlv_u8(v22);
  if (v22.u32[0] > 1uLL)
  {
    if (v21 >= *(void *)&v20) {
      v21 %= *(void *)&v20;
    }
  }
  else
  {
    v21 &= *(void *)&v20 - 1;
  }
  __int16 v23 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v21);
  if (v23)
  {
    *(void *)a2 = *v23;
LABEL_37:
    *__int16 v23 = a2;
    goto LABEL_38;
  }
  *(void *)a2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2;
  *(void *)(*(void *)a1 + 8 * v21) = a1 + 16;
  if (*(void *)a2)
  {
    unint64_t v24 = *(void *)(*(void *)a2 + 8);
    if (v22.u32[0] > 1uLL)
    {
      if (v24 >= *(void *)&v20) {
        v24 %= *(void *)&v20;
      }
    }
    else
    {
      v24 &= *(void *)&v20 - 1;
    }
    __int16 v23 = (unsigned __int8 **)(*(void *)a1 + 8 * v24);
    goto LABEL_37;
  }
LABEL_38:
  ++*v26;
  return 1;
}

void sub_100BFDD20()
{
}

void *sub_100BFDD34()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EB7C8;
  return result;
}

void sub_100BFDD6C(uint64_t a1, void *a2)
{
  *a2 = off_1022EB7C8;
}

void sub_100BFDD94(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  unint64_t v5 = *(CLConnectionMessage **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageAllowsLocationPrompts", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  unint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    BOOL v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageAllowsLocationPrompts\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = (CLConnectionMessage *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100BDA84C(v3, v9);
  if (v4)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0((std::__shared_weak_count *)v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BFDF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BFDF74(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100BFDFB4()
{
}

void sub_100BFDFC4()
{
}

void *sub_100BFDFD8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EB848;
  return result;
}

void sub_100BFE010(uint64_t a1, void *a2)
{
  *a2 = off_1022EB848;
}

void sub_100BFE038(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  unint64_t v5 = *(CLConnectionMessage **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageShowLocationPrompt", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  unint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    BOOL v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageShowLocationPrompt\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = (CLConnectionMessage *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100BDAD84(v3, v9);
  if (v4)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0((std::__shared_weak_count *)v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BFE1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BFE218(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100BFE258()
{
}

void sub_100BFE268()
{
}

void *sub_100BFE27C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EB8C8;
  return result;
}

void sub_100BFE2B4(uint64_t a1, void *a2)
{
  *a2 = off_1022EB8C8;
}

void sub_100BFE2DC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  unint64_t v5 = *(CLConnectionMessage **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessagePurpose", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  unint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    BOOL v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 1;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessagePurpose\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (!*(unsigned char *)(v3 + 72))
  {
    os_activity_scope_leave(&state);
    if (!v4) {
      return;
    }
    goto LABEL_11;
  }
  v9[0] = v5;
  v9[1] = (CLConnectionMessage *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100BD6884(v3, v9);
  if (v4)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    os_activity_scope_leave(&state);
LABEL_11:
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    return;
  }
  os_activity_scope_leave(&state);
}

void sub_100BFE490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BFE4D8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100BFE518()
{
}

void sub_100BFE528()
{
}

void *sub_100BFE53C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EB948;
  return result;
}

void sub_100BFE574(uint64_t a1, void *a2)
{
  *a2 = off_1022EB948;
}

void sub_100BFE59C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  unint64_t v5 = *(CLConnectionMessage **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageIsActuallyAWatchKitExtension", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  unint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    BOOL v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 1;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageIsActuallyAWatchKitExtension\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (!*(unsigned char *)(v3 + 72))
  {
    os_activity_scope_leave(&state);
    if (!v4) {
      return;
    }
    goto LABEL_11;
  }
  v9[0] = v5;
  v9[1] = (CLConnectionMessage *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100BD6AC4(v3, v9);
  if (v4)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    os_activity_scope_leave(&state);
LABEL_11:
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    return;
  }
  os_activity_scope_leave(&state);
}

void sub_100BFE750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BFE798(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100BFE7D8()
{
}

void sub_100BFE7E8()
{
}

void *sub_100BFE7FC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EB9C8;
  return result;
}

void sub_100BFE834(uint64_t a1, void *a2)
{
  *a2 = off_1022EB9C8;
}

void sub_100BFE85C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  unint64_t v5 = *(CLConnectionMessage **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageProxyForRemoteClient", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  unint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    BOOL v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageProxyForRemoteClient\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = (CLConnectionMessage *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100BD7008(v3, v9);
  if (v4)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0((std::__shared_weak_count *)v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BFE9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BFEA3C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100BFEA7C()
{
}

void sub_100BFEA8C()
{
}

void *sub_100BFEAA0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EBA48;
  return result;
}

void sub_100BFEAD8(uint64_t a1, void *a2)
{
  *a2 = off_1022EBA48;
}

void sub_100BFEB00(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  unint64_t v5 = *(CLConnectionMessage **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageRequestAuthorization", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  unint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    BOOL v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 1;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageRequestAuthorization\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (!*(unsigned char *)(v3 + 72))
  {
    os_activity_scope_leave(&state);
    if (!v4) {
      return;
    }
    goto LABEL_11;
  }
  v9[0] = v5;
  v9[1] = (CLConnectionMessage *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100BD78DC(v3, v9);
  if (v4)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    os_activity_scope_leave(&state);
LABEL_11:
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    return;
  }
  os_activity_scope_leave(&state);
}

void sub_100BFECB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BFECFC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100BFED3C()
{
}

void sub_100BFED4C()
{
}

void *sub_100BFED60()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EBAC8;
  return result;
}

void sub_100BFED98(uint64_t a1, void *a2)
{
  *a2 = off_1022EBAC8;
}

void sub_100BFEDC0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageRequestTemporaryPrecise", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  unint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    BOOL v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 1;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageRequestTemporaryPrecise\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (!*(unsigned char *)(v3 + 72))
  {
    os_activity_scope_leave(&state);
    if (!v4) {
      return;
    }
    goto LABEL_11;
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BD9460((void *)v3, (uint64_t)v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
LABEL_11:
    sub_1000DB0A0(v4);
    return;
  }
  os_activity_scope_leave(&state);
}

void sub_100BFEF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BFEFBC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100BFEFFC()
{
}

void sub_100BFF00C()
{
}

void *sub_100BFF020()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EBB48;
  return result;
}

void sub_100BFF058(uint64_t a1, void *a2)
{
  *a2 = off_1022EBB48;
}

void sub_100BFF080(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageMarkAsHavingReceivedLocation", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &v8);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  unint64_t v6 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    float v14 = "activity";
    __int16 v15 = 2050;
    uint64_t v16 = v3;
    __int16 v17 = 1026;
    int v18 = 1;
    __int16 v19 = 1026;
    int v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageMarkAsHavingReceivedLocation\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (!*(unsigned char *)(v3 + 72))
  {
    os_activity_scope_leave(&v8);
    if (!v4) {
      return;
    }
    goto LABEL_11;
  }
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BD751C(v3);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&v8);
LABEL_11:
    sub_1000DB0A0(v4);
    return;
  }
  os_activity_scope_leave(&v8);
}

void sub_100BFF22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  if (v9)
  {
    sub_1000DB0A0(v9);
    os_activity_scope_leave(&a9);
    sub_1000DB0A0(v9);
  }
  else
  {
    os_activity_scope_leave(&a9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BFF274(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100BFF2B4()
{
}

void sub_100BFF2C4()
{
}

void *sub_100BFF2D8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EBBC8;
  return result;
}

void sub_100BFF310(uint64_t a1, void *a2)
{
  *a2 = off_1022EBBC8;
}

void sub_100BFF338(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *(CLConnectionMessage **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageMatchInfoEnabled", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 1;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageMatchInfoEnabled\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (!*(unsigned char *)(v3 + 72))
  {
    os_activity_scope_leave(&state);
    if (!v4) {
      return;
    }
    goto LABEL_11;
  }
  v9[0] = v5;
  v9[1] = (CLConnectionMessage *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100BD9A20(v3, v9);
  if (v4)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    os_activity_scope_leave(&state);
LABEL_11:
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    return;
  }
  os_activity_scope_leave(&state);
}

void sub_100BFF4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BFF534(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100BFF574()
{
}

void sub_100BFF584()
{
}

void *sub_100BFF598()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EBC48;
  return result;
}

void sub_100BFF5D0(uint64_t a1, void *a2)
{
  *a2 = off_1022EBC48;
}

void sub_100BFF5F8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *(CLConnectionMessage **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageGroundAltitudeEnabled", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 1;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageGroundAltitudeEnabled\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (!*(unsigned char *)(v3 + 72))
  {
    os_activity_scope_leave(&state);
    if (!v4) {
      return;
    }
    goto LABEL_11;
  }
  v9[0] = v5;
  v9[1] = (CLConnectionMessage *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100BD9EBC(v3, v9);
  if (v4)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    os_activity_scope_leave(&state);
LABEL_11:
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    return;
  }
  os_activity_scope_leave(&state);
}

void sub_100BFF7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BFF7F4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100BFF834()
{
}

void sub_100BFF844()
{
}

void *sub_100BFF858()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EBCC8;
  return result;
}

void sub_100BFF890(uint64_t a1, void *a2)
{
  *a2 = off_1022EBCC8;
}

void sub_100BFF8B8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *(CLConnectionMessage **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageFusionInfoEnabled", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 1;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageFusionInfoEnabled\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (!*(unsigned char *)(v3 + 72))
  {
    os_activity_scope_leave(&state);
    if (!v4) {
      return;
    }
    goto LABEL_11;
  }
  v9[0] = v5;
  v9[1] = (CLConnectionMessage *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100BDA1EC(v3, v9);
  if (v4)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    os_activity_scope_leave(&state);
LABEL_11:
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    return;
  }
  os_activity_scope_leave(&state);
}

void sub_100BFFA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BFFAB4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100BFFAF4()
{
}

void sub_100BFFB04()
{
}

void *sub_100BFFB18()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EBD48;
  return result;
}

void sub_100BFFB50(uint64_t a1, void *a2)
{
  *a2 = off_1022EBD48;
}

void sub_100BFFB78(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *(CLConnectionMessage **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageTrackRunInfoEnabled", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 1;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageTrackRunInfoEnabled\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (!*(unsigned char *)(v3 + 72))
  {
    os_activity_scope_leave(&state);
    if (!v4) {
      return;
    }
    goto LABEL_11;
  }
  v9[0] = v5;
  v9[1] = (CLConnectionMessage *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100BDA51C(v3, v9);
  if (v4)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    os_activity_scope_leave(&state);
LABEL_11:
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    return;
  }
  os_activity_scope_leave(&state);
}

void sub_100BFFD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BFFD74(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100BFFDB4()
{
}

void sub_100BFFDC4()
{
}

void *sub_100BFFDD8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EBDC8;
  return result;
}

void sub_100BFFE10(uint64_t a1, void *a2)
{
  *a2 = off_1022EBDC8;
}

void sub_100BFFE38(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageRegisterAsLocationClient", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &v8);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  unint64_t v6 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    float v14 = "activity";
    __int16 v15 = 2050;
    uint64_t v16 = v3;
    __int16 v17 = 1026;
    int v18 = 1;
    __int16 v19 = 1026;
    int v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageRegisterAsLocationClient\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (!*(unsigned char *)(v3 + 72))
  {
    os_activity_scope_leave(&v8);
    if (!v4) {
      return;
    }
    goto LABEL_11;
  }
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BDB2BC(v3);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&v8);
LABEL_11:
    sub_1000DB0A0(v4);
    return;
  }
  os_activity_scope_leave(&v8);
}

void sub_100BFFFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  if (v9)
  {
    sub_1000DB0A0(v9);
    os_activity_scope_leave(&a9);
    sub_1000DB0A0(v9);
  }
  else
  {
    os_activity_scope_leave(&a9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C0002C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C0006C()
{
}

void sub_100C0007C()
{
}

void *sub_100C00090()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EBE48;
  return result;
}

void sub_100C000C8(uint64_t a1, void *a2)
{
  *a2 = off_1022EBE48;
}

void sub_100C000F0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageFetchEstimatedLocationAtDate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageFetchEstimatedLocationAtDate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BDB4BC(v3, (uint64_t)v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C00288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C002D0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C00310()
{
}

void sub_100C00320()
{
}

void *sub_100C00334()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EBEC8;
  return result;
}

void sub_100C0036C(uint64_t a1, void *a2)
{
  *a2 = off_1022EBEC8;
}

void sub_100C00394(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageCurrentClientDictionary", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  unint64_t v6 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    float v14 = "activity";
    __int16 v15 = 2050;
    uint64_t v16 = v3;
    __int16 v17 = 1026;
    int v18 = 1;
    __int16 v19 = 1026;
    int v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageCurrentClientDictionary\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (!*(unsigned char *)(v3 + 72))
  {
    os_activity_scope_leave(&state);
    if (!v4) {
      return;
    }
    goto LABEL_11;
  }
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BDBE28(v3);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
LABEL_11:
    sub_1000DB0A0(v4);
    return;
  }
  os_activity_scope_leave(&state);
}

void sub_100C00548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C00590(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C005D0()
{
}

void sub_100C005E0()
{
}

void *sub_100C005F4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EBF48;
  return result;
}

void sub_100C0062C(uint64_t a1, void *a2)
{
  *a2 = off_1022EBF48;
}

void sub_100C00654(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *(CLConnectionMessage **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageVehicleHeading", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 1;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageVehicleHeading\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (!*(unsigned char *)(v3 + 72))
  {
    os_activity_scope_leave(&state);
    if (!v4) {
      return;
    }
    goto LABEL_11;
  }
  v9[0] = v5;
  v9[1] = (CLConnectionMessage *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100BDC5FC((void *)v3, v9);
  if (v4)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    os_activity_scope_leave(&state);
LABEL_11:
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    return;
  }
  os_activity_scope_leave(&state);
}

void sub_100C00808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C00850(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C00890()
{
}

void sub_100C008A0()
{
}

void *sub_100C008B4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EBFC8;
  return result;
}

void sub_100C008EC(uint64_t a1, void *a2)
{
  *a2 = off_1022EBFC8;
}

void sub_100C00914(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *(CLConnectionMessage **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageVehicleSpeed", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 1;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageVehicleSpeed\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (!*(unsigned char *)(v3 + 72))
  {
    os_activity_scope_leave(&state);
    if (!v4) {
      return;
    }
    goto LABEL_11;
  }
  v9[0] = v5;
  v9[1] = (CLConnectionMessage *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100BDBEB4((void *)v3, v9);
  if (v4)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    os_activity_scope_leave(&state);
LABEL_11:
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    return;
  }
  os_activity_scope_leave(&state);
}

void sub_100C00AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C00B10(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C00B50()
{
}

void sub_100C00B60()
{
}

void *sub_100C00B74()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EC048;
  return result;
}

void sub_100C00BAC(uint64_t a1, void *a2)
{
  *a2 = off_1022EC048;
}

void sub_100C00BD4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageRequestMicroLocation", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageRequestMicroLocation\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE60C4((void *)v3, (uint64_t)v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C00D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C00DB4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C00DF4()
{
}

void sub_100C00E04()
{
}

void *sub_100C00E18()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EC0C8;
  return result;
}

void sub_100C00E50(uint64_t a1, void *a2)
{
  *a2 = off_1022EC0C8;
}

void sub_100C00E78(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageRequestMicroLocationRecordingScan", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageRequestMicroLocationRecordingScan\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE6648((void *)v3, (uint64_t)v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C01010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C01058(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C01098()
{
}

void sub_100C010A8()
{
}

void *sub_100C010BC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EC148;
  return result;
}

void sub_100C010F4(uint64_t a1, void *a2)
{
  *a2 = off_1022EC148;
}

void sub_100C0111C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageMicroLocationDonateTruthLabelEvent", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageMicroLocationDonateTruthLabelEvent\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE6C44((void *)v3, (uint64_t)v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C012B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C012FC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C0133C()
{
}

void sub_100C0134C()
{
}

void *sub_100C01360()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EC1C8;
  return result;
}

void sub_100C01398(uint64_t a1, void *a2)
{
  *a2 = off_1022EC1C8;
}

void sub_100C013C0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageMicroLocationDonateTruthLabelBetweenDatesEvent", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageMicroLocationDonateTruthLabelBetweenDatesEvent\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE7324((void *)v3, (uint64_t)v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C01558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C015A0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C015E0()
{
}

void sub_100C015F0()
{
}

void *sub_100C01604()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EC248;
  return result;
}

void sub_100C0163C(uint64_t a1, void *a2)
{
  *a2 = off_1022EC248;
}

void sub_100C01664(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessagePurgeMicroLocationSemiSupervisedData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &v8);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  unint64_t v6 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    float v14 = "activity";
    __int16 v15 = 2050;
    uint64_t v16 = v3;
    __int16 v17 = 1026;
    int v18 = 0;
    __int16 v19 = 1026;
    int v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessagePurgeMicroLocationSemiSupervisedData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE7A00((void *)v3);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&v8);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&v8);
  }
}

void sub_100C017F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  if (v9)
  {
    sub_1000DB0A0(v9);
    os_activity_scope_leave(&a9);
    sub_1000DB0A0(v9);
  }
  else
  {
    os_activity_scope_leave(&a9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C0183C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C0187C()
{
}

void sub_100C0188C()
{
}

void *sub_100C018A0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EC2C8;
  return result;
}

void sub_100C018D8(uint64_t a1, void *a2)
{
  *a2 = off_1022EC2C8;
}

void sub_100C01900(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessagePurgeMicroLocationData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &v8);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  unint64_t v6 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    float v14 = "activity";
    __int16 v15 = 2050;
    uint64_t v16 = v3;
    __int16 v17 = 1026;
    int v18 = 0;
    __int16 v19 = 1026;
    int v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessagePurgeMicroLocationData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE7C2C((void *)v3);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&v8);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&v8);
  }
}

void sub_100C01A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  if (v9)
  {
    sub_1000DB0A0(v9);
    os_activity_scope_leave(&a9);
    sub_1000DB0A0(v9);
  }
  else
  {
    os_activity_scope_leave(&a9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C01AD8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C01B18()
{
}

void sub_100C01B28()
{
}

void *sub_100C01B3C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EC348;
  return result;
}

void sub_100C01B74(uint64_t a1, void *a2)
{
  *a2 = off_1022EC348;
}

void sub_100C01B9C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageMicroLocationExportDatabaseTables", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageMicroLocationExportDatabaseTables\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE7F4C((void *)v3, v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C01D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C01D7C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C01DBC()
{
}

void sub_100C01DCC()
{
}

void *sub_100C01DE0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EC3C8;
  return result;
}

void sub_100C01E18(uint64_t a1, void *a2)
{
  *a2 = off_1022EC3C8;
}

void sub_100C01E40(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageMicroLocationExportDataForMigration", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageMicroLocationExportDataForMigration\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE8528((void *)v3, v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C01FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C02020(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C02060()
{
}

void sub_100C02070()
{
}

void *sub_100C02084()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EC448;
  return result;
}

void sub_100C020BC(uint64_t a1, void *a2)
{
  *a2 = off_1022EC448;
}

void sub_100C020E4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageMicroLocationRequestStaticSourcesStatistics", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageMicroLocationRequestStaticSourcesStatistics\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE8B04((void *)v3, v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C0227C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C022C4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C02304()
{
}

void sub_100C02314()
{
}

void *sub_100C02328()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EC4C8;
  return result;
}

void sub_100C02360(uint64_t a1, void *a2)
{
  *a2 = off_1022EC4C8;
}

void sub_100C02388(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageMicroLocationRequestLearning", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageMicroLocationRequestLearning\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE90E0((void *)v3, v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C02520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C02568(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C025A8()
{
}

void sub_100C025B8()
{
}

void *sub_100C025CC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EC548;
  return result;
}

void sub_100C02604(uint64_t a1, void *a2)
{
  *a2 = off_1022EC548;
}

void sub_100C0262C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *(CLConnectionMessage **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageGmm", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageGmm\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = (CLConnectionMessage *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100BDD6B4((void *)v3, v9);
  if (v4)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0((std::__shared_weak_count *)v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C027C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C0280C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C0284C()
{
}

void sub_100C0285C()
{
}

void *sub_100C02870()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EC5C8;
  return result;
}

void sub_100C028A8(uint64_t a1, void *a2)
{
  *a2 = off_1022EC5C8;
}

void sub_100C028D0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *(CLConnectionMessage **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessagePressureBias", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessagePressureBias\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = (CLConnectionMessage *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100BDDBFC((void *)v3, v9);
  if (v4)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0((std::__shared_weak_count *)v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C02A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C02AB0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C02AF0()
{
}

void sub_100C02B00()
{
}

void *sub_100C02B14()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EC648;
  return result;
}

void sub_100C02B4C(uint64_t a1, void *a2)
{
  *a2 = off_1022EC648;
}

void sub_100C02B74(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *(CLConnectionMessage **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageGyroBiasEstimation", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageGyroBiasEstimation\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = (CLConnectionMessage *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100BDCD44(v3, v9);
  if (v4)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0((std::__shared_weak_count *)v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C02D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C02D54(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C02D94()
{
}

void sub_100C02DA4()
{
}

void *sub_100C02DB8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EC6C8;
  return result;
}

void sub_100C02DF0(uint64_t a1, void *a2)
{
  *a2 = off_1022EC6C8;
}

void sub_100C02E18(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageHasRunMiniCal", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  unint64_t v6 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    float v14 = "activity";
    __int16 v15 = 2050;
    uint64_t v16 = v3;
    __int16 v17 = 1026;
    int v18 = 0;
    __int16 v19 = 1026;
    int v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageHasRunMiniCal\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE1274(v3);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C02FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C02FF8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C03038()
{
}

void sub_100C03048()
{
}

void *sub_100C0305C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EC748;
  return result;
}

void sub_100C03094(uint64_t a1, void *a2)
{
  *a2 = off_1022EC748;
}

void sub_100C030BC(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageStartMiniCal", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  unint64_t v6 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    float v14 = "activity";
    __int16 v15 = 2050;
    uint64_t v16 = v3;
    __int16 v17 = 1026;
    int v18 = 0;
    __int16 v19 = 1026;
    int v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageStartMiniCal\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE1A24(v3);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C03254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C0329C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C032DC()
{
}

void sub_100C032EC()
{
}

void *sub_100C03300()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EC7C8;
  return result;
}

void sub_100C03338(uint64_t a1, void *a2)
{
  *a2 = off_1022EC7C8;
}

void sub_100C03360(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *(CLConnectionMessage **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageCatherineData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageCatherineData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = (CLConnectionMessage *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100BE15D4((void *)v3, v9);
  if (v4)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0((std::__shared_weak_count *)v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C034F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C03540(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C03580()
{
}

void sub_100C03590()
{
}

void *sub_100C035A4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EC848;
  return result;
}

void sub_100C035DC(uint64_t a1, void *a2)
{
  *a2 = off_1022EC848;
}

void sub_100C03604(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageVehicleConnectionMostRecent", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageVehicleConnectionMostRecent\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BDE794(v3, v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C0379C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C037E4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C03824()
{
}

void sub_100C03834()
{
}

void *sub_100C03848()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EC8C8;
  return result;
}

void sub_100C03880(uint64_t a1, void *a2)
{
  *a2 = off_1022EC8C8;
}

void sub_100C038A8(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageVehicleStateIsAvailable", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  unint64_t v6 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    float v14 = "activity";
    __int16 v15 = 2050;
    uint64_t v16 = v3;
    __int16 v17 = 1026;
    int v18 = 0;
    __int16 v19 = 1026;
    int v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageVehicleStateIsAvailable\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE085C(v3);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C03A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C03A88(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C03AC8()
{
}

void sub_100C03AD8()
{
}

void *sub_100C03AEC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EC948;
  return result;
}

void sub_100C03B24(uint64_t a1, void *a2)
{
  *a2 = off_1022EC948;
}

void sub_100C03B4C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageVehicleStateMostRecentVehicleConnection", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageVehicleStateMostRecentVehicleConnection\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BDE794(v3, v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C03CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C03D2C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C03D6C()
{
}

void sub_100C03D7C()
{
}

void *sub_100C03D90()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022EC9C8;
  return result;
}

void sub_100C03DC8(uint64_t a1, void *a2)
{
  *a2 = off_1022EC9C8;
}

void sub_100C03DF0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageVehicleStateMostRecentInVehicle", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageVehicleStateMostRecentInVehicle\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BDEDB8(v3, v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C03F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C03FD0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C04010()
{
}

void sub_100C04020()
{
}

void *sub_100C04034()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ECA48;
  return result;
}

void sub_100C0406C(uint64_t a1, void *a2)
{
  *a2 = off_1022ECA48;
}

void sub_100C04094(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageVehicleStateIsVehicle", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageVehicleStateIsVehicle\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BDF3DC(v3, (uint64_t)v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C0422C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C04274(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C042B4()
{
}

void sub_100C042C4()
{
}

void *sub_100C042D8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ECAC8;
  return result;
}

void sub_100C04310(uint64_t a1, void *a2)
{
  *a2 = off_1022ECAC8;
}

void sub_100C04338(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageVehicularState", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageVehicularState\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE0100(v3, v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C044D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C04518(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C04558()
{
}

void sub_100C04568()
{
}

void *sub_100C0457C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ECB48;
  return result;
}

void sub_100C045B4(uint64_t a1, void *a2)
{
  *a2 = off_1022ECB48;
}

void sub_100C045DC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageVehicularOperatorState", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageVehicularOperatorState\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BDF9D0(v3, v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C04774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C047BC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C047FC()
{
}

void sub_100C0480C()
{
}

void *sub_100C04820()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ECBC8;
  return result;
}

void sub_100C04858(uint64_t a1, void *a2)
{
  *a2 = off_1022ECBC8;
}

void sub_100C04880(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *(CLConnectionMessage **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageHealthAssessmentRecordTypeForDurationKey", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageHealthAssessmentRecordTypeForDurationKey\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = (CLConnectionMessage *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100BE2168(v3, v9);
  if (v4)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0((std::__shared_weak_count *)v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C04A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C04A60(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C04AA0()
{
}

void sub_100C04AB0()
{
}

void *sub_100C04AC4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ECC48;
  return result;
}

void sub_100C04AFC(uint64_t a1, void *a2)
{
  *a2 = off_1022ECC48;
}

void sub_100C04B24(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageHealthAssessmentParkinsonsResultQuery", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &v8);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  unint64_t v6 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    float v14 = "activity";
    __int16 v15 = 2050;
    uint64_t v16 = v3;
    __int16 v17 = 1026;
    int v18 = 0;
    __int16 v19 = 1026;
    int v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageHealthAssessmentParkinsonsResultQuery\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE23CC();
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&v8);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&v8);
  }
}

void sub_100C04CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  if (v9)
  {
    sub_1000DB0A0(v9);
    os_activity_scope_leave(&a9);
    sub_1000DB0A0(v9);
  }
  else
  {
    os_activity_scope_leave(&a9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C04CF8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C04D38()
{
}

void sub_100C04D48()
{
}

void *sub_100C04D5C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ECCC8;
  return result;
}

void sub_100C04D94(uint64_t a1, void *a2)
{
  *a2 = off_1022ECCC8;
}

void sub_100C04DBC(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageMovementDisorderLastProcessedDate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &v8);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  unint64_t v6 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    float v14 = "activity";
    __int16 v15 = 2050;
    uint64_t v16 = v3;
    __int16 v17 = 1026;
    int v18 = 0;
    __int16 v19 = 1026;
    int v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageMovementDisorderLastProcessedDate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE23F4();
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&v8);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&v8);
  }
}

void sub_100C04F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  if (v9)
  {
    sub_1000DB0A0(v9);
    os_activity_scope_leave(&a9);
    sub_1000DB0A0(v9);
  }
  else
  {
    os_activity_scope_leave(&a9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C04F90(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C04FD0()
{
}

void sub_100C04FE0()
{
}

void *sub_100C04FF4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ECD48;
  return result;
}

void sub_100C0502C(uint64_t a1, void *a2)
{
  *a2 = off_1022ECD48;
}

void sub_100C05054(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageMovementDisorderMonitorKinesiasExpirationDate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &v8);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  unint64_t v6 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    float v14 = "activity";
    __int16 v15 = 2050;
    uint64_t v16 = v3;
    __int16 v17 = 1026;
    int v18 = 0;
    __int16 v19 = 1026;
    int v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageMovementDisorderMonitorKinesiasExpirationDate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE241C();
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&v8);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&v8);
  }
}

void sub_100C051E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  if (v9)
  {
    sub_1000DB0A0(v9);
    os_activity_scope_leave(&a9);
    sub_1000DB0A0(v9);
  }
  else
  {
    os_activity_scope_leave(&a9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C05228(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C05268()
{
}

void sub_100C05278()
{
}

void *sub_100C0528C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ECDC8;
  return result;
}

void sub_100C052C4(uint64_t a1, void *a2)
{
  *a2 = off_1022ECDC8;
}

void sub_100C052EC(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageSensorRecorderAuthorized", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  unint64_t v6 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    float v14 = "activity";
    __int16 v15 = 2050;
    uint64_t v16 = v3;
    __int16 v17 = 1026;
    int v18 = 0;
    __int16 v19 = 1026;
    int v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageSensorRecorderAuthorized\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE2444(v3);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C05484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C054CC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C0550C()
{
}

void sub_100C0551C()
{
}

void *sub_100C05530()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ECE48;
  return result;
}

void sub_100C05568(uint64_t a1, void *a2)
{
  *a2 = off_1022ECE48;
}

void sub_100C05590(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *(CLConnectionMessage **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageSensorRecorderSensorAvailable", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageSensorRecorderSensorAvailable\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = (CLConnectionMessage *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100BE2538(v3, v9);
  if (v4)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0((std::__shared_weak_count *)v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C05728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C05770(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C057B0()
{
}

void sub_100C057C0()
{
}

void *sub_100C057D4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ECEC8;
  return result;
}

void sub_100C0580C(uint64_t a1, void *a2)
{
  *a2 = off_1022ECEC8;
}

void sub_100C05834(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageSensorRecorderGetMetaByID", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageSensorRecorderGetMetaByID\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE2754(v3, (uint64_t)v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C059CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C05A14(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C05A54()
{
}

void sub_100C05A64()
{
}

void *sub_100C05A78()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ECF48;
  return result;
}

void sub_100C05AB0(uint64_t a1, void *a2)
{
  *a2 = off_1022ECF48;
}

void sub_100C05AD8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageSensorRecorderGetMetaSinceID", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageSensorRecorderGetMetaSinceID\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE2C44(v3, (uint64_t)v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C05C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C05CB8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C05CF8()
{
}

void sub_100C05D08()
{
}

void *sub_100C05D1C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ECFC8;
  return result;
}

void sub_100C05D54(uint64_t a1, void *a2)
{
  *a2 = off_1022ECFC8;
}

void sub_100C05D7C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageSensorRecorderGetMetasByDateRange", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageSensorRecorderGetMetasByDateRange\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE3114(v3, (uint64_t)v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C05F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C05F5C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C05F9C()
{
}

void sub_100C05FAC()
{
}

void *sub_100C05FC0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ED048;
  return result;
}

void sub_100C05FF8(uint64_t a1, void *a2)
{
  *a2 = off_1022ED048;
}

void sub_100C06020(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageSensorRecorderGetDataByID", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageSensorRecorderGetDataByID\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE4104(v3, (uint64_t)v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C061B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C06200(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C06240()
{
}

void sub_100C06250()
{
}

void *sub_100C06264()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ED0C8;
  return result;
}

void sub_100C0629C(uint64_t a1, void *a2)
{
  *a2 = off_1022ED0C8;
}

void sub_100C062C4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *(CLConnectionMessage **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageSensorRecorderRecordFor", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageSensorRecorderRecordFor\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = (CLConnectionMessage *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100BE4C50(v3, v9);
  if (v4)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0((std::__shared_weak_count *)v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C0645C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C064A4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C064E4()
{
}

void sub_100C064F4()
{
}

void *sub_100C06508()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ED148;
  return result;
}

void sub_100C06540(uint64_t a1, void *a2)
{
  *a2 = off_1022ED148;
}

void sub_100C06568(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageSensorRecorderWriteSensorDataToFileByDateRange", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageSensorRecorderWriteSensorDataToFileByDateRange\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE37C0(v3, (uint64_t)v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C06700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C06748(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C06788()
{
}

void sub_100C06798()
{
}

void *sub_100C067AC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ED1C8;
  return result;
}

void sub_100C067E4(uint64_t a1, void *a2)
{
  *a2 = off_1022ED1C8;
}

void sub_100C0680C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageSensorRecorderSetSensorSampleRate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageSensorRecorderSetSensorSampleRate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE3CE8(v3, (uint64_t)v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C069A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C069EC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C06A2C()
{
}

void sub_100C06A3C()
{
}

void *sub_100C06A50()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ED248;
  return result;
}

void sub_100C06A88(uint64_t a1, void *a2)
{
  *a2 = off_1022ED248;
}

void sub_100C06AB0(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageDeviceHasOriginalCamera", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  unint64_t v6 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    float v14 = "activity";
    __int16 v15 = 2050;
    uint64_t v16 = v3;
    __int16 v17 = 1026;
    int v18 = 0;
    __int16 v19 = 1026;
    int v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageDeviceHasOriginalCamera\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BD5D1C();
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C06C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C06C8C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C06CCC()
{
}

void sub_100C06CDC()
{
}

void *sub_100C06CF0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ED2C8;
  return result;
}

void sub_100C06D28(uint64_t a1, void *a2)
{
  *a2 = off_1022ED2C8;
}

void sub_100C06D50(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageCameraVcmActuatorId", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  unint64_t v6 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    float v14 = "activity";
    __int16 v15 = 2050;
    uint64_t v16 = v3;
    __int16 v17 = 1026;
    int v18 = 0;
    __int16 v19 = 1026;
    int v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageCameraVcmActuatorId\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BD5E00();
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C06EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C06F2C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C06F6C()
{
}

void sub_100C06F7C()
{
}

void *sub_100C06F90()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ED348;
  return result;
}

void sub_100C06FC8(uint64_t a1, void *a2)
{
  *a2 = off_1022ED348;
}

void sub_100C06FF0(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageCompassCalibrationData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  unint64_t v6 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    float v14 = "activity";
    __int16 v15 = 2050;
    uint64_t v16 = v3;
    __int16 v17 = 1026;
    int v18 = 0;
    __int16 v19 = 1026;
    int v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageCompassCalibrationData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BD5F54();
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C07184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C071CC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C0720C()
{
}

void sub_100C0721C()
{
}

void *sub_100C07230()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ED3C8;
  return result;
}

void sub_100C07268(uint64_t a1, void *a2)
{
  *a2 = off_1022ED3C8;
}

void sub_100C07290(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageFitnessMachineData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageFitnessMachineData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE0E98((uint64_t *)v3, (uint64_t)v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C07428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C07470(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C074B0()
{
}

void sub_100C074C0()
{
}

void *sub_100C074D4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ED448;
  return result;
}

void sub_100C0750C(uint64_t a1, void *a2)
{
  *a2 = off_1022ED448;
}

void sub_100C07534(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessagePredictedWalkDistanceReset", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    int v9 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v13 = 0;
    __int16 v14 = 2082;
    __int16 v15 = "";
    __int16 v16 = 2082;
    __int16 v17 = "activity";
    __int16 v18 = 2050;
    uint64_t v19 = v3;
    __int16 v20 = 1026;
    int v21 = 0;
    __int16 v22 = 1026;
    int v23 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessagePredictedWalkDistanceReset\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v10[0] = v5;
  v10[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE4F9C(v8, (uint64_t)v10);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C076C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C07710(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C07750()
{
}

void sub_100C07760()
{
}

void *sub_100C07774()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ED4C8;
  return result;
}

void sub_100C077AC(uint64_t a1, void *a2)
{
  *a2 = off_1022ED4C8;
}

void sub_100C077D4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageWriteDbToFile", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    __int16 v14 = "";
    __int16 v15 = 2082;
    __int16 v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageWriteDbToFile\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE529C(v3, (uint64_t)v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C0796C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C079B4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C079F4()
{
}

void sub_100C07A04()
{
}

void *sub_100C07A18()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ED548;
  return result;
}

void sub_100C07A50(uint64_t a1, void *a2)
{
  *a2 = off_1022ED548;
}

void sub_100C07A78(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageTriggerVO2MaxRetrocompute", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    __int16 v14 = "";
    __int16 v15 = 2082;
    __int16 v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageTriggerVO2MaxRetrocompute\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE9594(v3, v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C07C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C07C58(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C07C98()
{
}

void sub_100C07CA8()
{
}

void *sub_100C07CBC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ED5C8;
  return result;
}

void sub_100C07CF4(uint64_t a1, void *a2)
{
  *a2 = off_1022ED5C8;
}

uint64_t sub_100C07D1C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C07D5C()
{
}

void sub_100C07D6C()
{
}

void *sub_100C07D80()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ED648;
  return result;
}

void sub_100C07DB8(uint64_t a1, void *a2)
{
  *a2 = off_1022ED648;
}

void sub_100C07DE0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *(CLConnectionMessage **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageWriteContextConfiguration", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    __int16 v14 = "";
    __int16 v15 = 2082;
    __int16 v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageWriteContextConfiguration\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = (CLConnectionMessage *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100BE99E4(v3, v9);
  if (v4)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0((std::__shared_weak_count *)v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C07F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C07FC0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C08000()
{
}

void sub_100C08010()
{
}

void *sub_100C08024()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ED6C8;
  return result;
}

void sub_100C0805C(uint64_t a1, void *a2)
{
  *a2 = off_1022ED6C8;
}

void sub_100C08084(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageColdStorageQueryConfiguration", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  unint64_t v6 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    __int16 v14 = "activity";
    __int16 v15 = 2050;
    uint64_t v16 = v3;
    __int16 v17 = 1026;
    int v18 = 0;
    __int16 v19 = 1026;
    int v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageColdStorageQueryConfiguration\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BE9FFC((id *)v3);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C0821C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C08264(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C082A4()
{
}

void sub_100C082B4()
{
}

void *sub_100C082C8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ED748;
  return result;
}

void sub_100C08300(uint64_t a1, void *a2)
{
  *a2 = off_1022ED748;
}

void sub_100C08328(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *(CLConnectionMessage **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageCollectMetricsForFunction", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    __int16 v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageCollectMetricsForFunction\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = (CLConnectionMessage *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100BEA5E4(v3, v9);
  if (v4)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0((std::__shared_weak_count *)v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C084C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C08508(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C08548()
{
}

void sub_100C08558()
{
}

void *sub_100C0856C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022ED7C8;
  return result;
}

void sub_100C085A4(uint64_t a1, void *a2)
{
  *a2 = off_1022ED7C8;
}

void sub_100C085CC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageSimulateMotionSensorData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v12 = 0;
    __int16 v13 = 2082;
    __int16 v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    __int16 v17 = 2050;
    uint64_t v18 = v3;
    __int16 v19 = 1026;
    int v20 = 0;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageSimulateMotionSensorData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v9[0] = v5;
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100BEA7E4((id *)v3, (uint64_t)v9);
  if (v4)
  {
    sub_1000DB0A0(v4);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v4);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100C08764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_1000DB0A0(v11);
    os_activity_scope_leave(&state);
    sub_1000DB0A0(v11);
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C087AC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C087EC()
{
}

void sub_100C087F8(uint64_t a1)
{
  sub_10048C758(&off_1022ED878, &v2);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)a1 + 24))(a1, &v2, 0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100C08874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C0888C(uint64_t a1)
{
  sub_10048C758(&off_1022ED880, &v2);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)a1 + 24))(a1, &v2, 0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100C08908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C08920(uint64_t a1)
{
  sub_10048C758(&off_1022ED888, &v2);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)a1 + 24))(a1, &v2, 0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100C0899C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C089B4(uint64_t a1)
{
  sub_10048C758(&off_1022ED890, &v2);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)a1 + 24))(a1, &v2, 0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100C08A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C08A48(uint64_t a1)
{
  sub_10048C758(&off_1022ED898, &v2);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)a1 + 24))(a1, &v2, 0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100C08AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100C08ADC()
{
  uint64_t v2 = *(NSObject **)(v0 + 1320);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

BOOL sub_100C08B30()
{
  uint64_t v2 = *(NSObject **)(v0 + 1320);
  return os_signpost_enabled(v2);
}

void sub_100C08B6C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_signpost_emit_with_name_impl(a1, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &a9, 0x2Cu);
}

void *sub_100C08B98(void *result)
{
  *uint64_t result = 0;
  result[1] = 0;
  return result;
}

void sub_100C08BBC(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x2Cu);
}

void sub_100C08BDC(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_impl(a1, v9, OS_LOG_TYPE_INFO, a4, &a9, 0x2Cu);
}

BOOL sub_100C08BFC()
{
  uint64_t v2 = *(NSObject **)(v0 + 1320);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

BOOL sub_100C08C48()
{
  uint64_t v2 = *(NSObject **)(v0 + 1320);
  return os_signpost_enabled(v2);
}

void sub_100C08C60()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D831A8;
      v0[3] = unk_101D831B8;
      v0[4] = xmmword_101D831C8;
      v0[0] = xmmword_101D83188;
      v0[1] = unk_101D83198;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_100C08D40(_Unwind_Exception *a1)
{
}

void sub_100C08D58()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_100C08DD8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_100C08E68(_Unwind_Exception *a1)
{
}

NSDictionary *sub_100C08E80()
{
  sub_100134750(qword_1024807F0, "Acc800Fp");
  dword_102480808 = 800;
  __cxa_atexit((void (*)(void *))sub_10058C198, qword_1024807F0, (void *)&_mh_execute_header);
  sub_100134750(qword_102480810, "DmFp");
  dword_102480828 = 200;
  __cxa_atexit((void (*)(void *))sub_10058C198, qword_102480810, (void *)&_mh_execute_header);
  v1[0] = +[NSString stringWithUTF8String:"VO2MaxPowerBudgetEstimatorQueryLookbackInterval"];
  v2[0] = &off_102397C50;
  v1[1] = +[NSString stringWithUTF8String:"SensitiveEscalationExtendedBudgetRefreshInterval"];
  v2[1] = &off_102397C68;
  v1[2] = +[NSString stringWithUTF8String:"VO2MaxDeescalatorExtendAfterHighExertionTimeSeconds"];
  v2[2] = &off_102397C80;
  v1[3] = +[NSString stringWithUTF8String:"SensitiveEscalationBudgetAllowanceSeconds"];
  v2[3] = &off_102397C98;
  v1[4] = +[NSString stringWithUTF8String:"SensitiveEscalationExtendedBudgetAllowanceSeconds"];
  v2[4] = &off_102397CB0;
  v1[5] = +[NSString stringWithUTF8String:"SensitiveEscalationGeneralStairsBudgetAllowanceSeconds"];
  v2[5] = &off_102397CC8;
  v1[6] = +[NSString stringWithUTF8String:"SensitiveEscalationGeneralStairsBudgetRefreshInterval"];
  v2[6] = &off_102397CE0;
  uint64_t result = +[NSDictionary dictionaryWithObjects:v2 forKeys:v1 count:7];
  qword_102480830 = (uint64_t)result;
  return result;
}

uint64_t sub_100C09054(uint64_t a1, int a2, int a3, int a4)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = -1;
  sub_100134750((void *)(a1 + 24), "");
  return a1;
}

uint64_t sub_100C09098(uint64_t a1, const std::string *a2)
{
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_1004BAEC8(v5, a2, 24);
  std::istream::operator>>();
  std::istream::operator>>();
  std::istream::operator>>();
  std::istream::operator>>();
  *(_DWORD *)a1 = 0;
  *(void (__cdecl ***)(std::basic_stringstream<char> *__hidden))((char *)v5
  void v5[2] = v3;
  if (v6 < 0) {
    operator delete(v5[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return a1;
}

void sub_100C0922C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(char *)(v10 + 47) < 0) {
    operator delete(*v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C0925C()
{
  sub_10010F274((uint64_t)v5);
  uint64_t v0 = (void *)std::ostream::operator<<();
  char v7 = 32;
  sub_100132EFC(v0, (uint64_t)&v7, 1);
  uint64_t v1 = (void *)std::ostream::operator<<();
  char v7 = 32;
  sub_100132EFC(v1, (uint64_t)&v7, 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  char v7 = 32;
  sub_100132EFC(v2, (uint64_t)&v7, 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v5
  void v5[2] = v3;
  if (v6 < 0) {
    operator delete((void *)v5[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100C09424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_100C09438(uint64_t a1)
{
  LODWORD(v4) = *(_DWORD *)a1;
  *(void *)((char *)&v4 + 4) = -1;
  sub_100134750(&v5, "");
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 16) = -1;
  uint64_t v2 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v2);
  }
  double result = *(double *)&v5;
  *(_OWORD *)uint64_t v2 = v5;
  *(void *)(a1 + 40) = v6;
  return result;
}

uint64_t sub_100C094CC(uint64_t a1)
{
  sub_10010F274((uint64_t)v26);
  uint64_t v2 = sub_100132EFC(v27, (uint64_t)"TileId(", 7);
  sub_100132EFC(v2, (uint64_t)"type=", 5);
  uint64_t v3 = (void *)std::ostream::operator<<();
  long long v4 = sub_100132EFC(v3, (uint64_t)", typeStr=", 10);
  long long v5 = sub_100147F50(*(_DWORD *)a1);
  size_t v6 = strlen(v5);
  sub_100132EFC(v4, (uint64_t)v5, v6);
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(void *)(a1 + 32)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(a1 + 47))
  {
LABEL_3:
    char v7 = sub_100132EFC(v27, (uint64_t)", path=", 7);
    int v8 = *(char *)(a1 + 47);
    if (v8 >= 0) {
      uint64_t v9 = a1 + 24;
    }
    else {
      uint64_t v9 = *(void *)(a1 + 24);
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a1 + 47);
    }
    else {
      uint64_t v10 = *(void *)(a1 + 32);
    }
    sub_100132EFC(v7, v9, v10);
    goto LABEL_12;
  }
  __int16 v11 = sub_100132EFC(v27, (uint64_t)", corner=(", 10);
  uint64_t v12 = *v11;
  *(uint64_t *)((char *)v11 + *(void *)(*v11 - 24) + 16) = 4;
  *(_DWORD *)((char *)v11 + *(void *)(v12 - 24) + 8) = *(_DWORD *)((unsigned char *)v11 + *(void *)(v12 - 24) + 8) & 0xFFFFFEFB | 4;
  __int16 v13 = (void *)std::ostream::operator<<();
  __int16 v14 = sub_100132EFC(v13, (uint64_t)", ", 2);
  uint64_t v15 = *v14;
  *(uint64_t *)((char *)v14 + *(void *)(*v14 - 24) + 16) = 4;
  *(_DWORD *)((char *)v14 + *(void *)(v15 - 24) + 8) = *(_DWORD *)((unsigned char *)v14 + *(void *)(v15 - 24) + 8) & 0xFFFFFEFB | 4;
  uint64_t v16 = (void *)std::ostream::operator<<();
  __int16 v17 = sub_100132EFC(v16, (uint64_t)")", 1);
  sub_100132EFC(v17, (uint64_t)", tileY=", 8);
  uint64_t v18 = (void *)std::ostream::operator<<();
  sub_100132EFC(v18, (uint64_t)", tileX=", 8);
  __int16 v19 = (void *)std::ostream::operator<<();
  int v20 = sub_100132EFC(v19, (uint64_t)", skey=", 7);
  char v25 = 48;
  __int16 v21 = sub_10006E19C(v20, &v25);
  uint64_t v22 = *v21;
  *(uint64_t *)((char *)v21 + *(void *)(*v21 - 24) + 24) = 16;
  *(_DWORD *)((char *)v21 + *(void *)(v22 - 24) + 8) = *(_DWORD *)((unsigned char *)v21 + *(void *)(v22 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v21 + *(void *)(v22 - 24) + 8) |= 0x4000u;
  std::ostream::operator<<();
LABEL_12:
  sub_100132EFC(v27, (uint64_t)")", 1);
  std::stringbuf::str();
  *(void *)((char *)v26
  v27[0] = v23;
  if (v28 < 0) {
    operator delete((void *)v27[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100C0990C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C09930(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(void *)(a1 + 16) != *(void *)(a2 + 16))
  {
    return 0;
  }
  uint64_t v2 = *(unsigned __int8 *)(a1 + 47);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 47);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 32);
  }
  if (v3 != v4) {
    return 0;
  }
  size_t v6 = (const void **)(a1 + 24);
  uint64_t v9 = *(unsigned __int8 **)(a2 + 24);
  char v7 = (unsigned __int8 *)(a2 + 24);
  int v8 = v9;
  if (v5 < 0) {
    char v7 = v8;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*v6, v7, *(void *)(a1 + 32)) == 0;
  }
  if (!*(unsigned char *)(a1 + 47)) {
    return 1;
  }
  uint64_t v10 = v2 - 1;
  do
  {
    int v12 = *(unsigned __int8 *)v6;
    size_t v6 = (const void **)((char *)v6 + 1);
    int v11 = v12;
    int v14 = *v7++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

uint64_t sub_100C09A14@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_10010F274((uint64_t)v26);
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(void *)(a1 + 32)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(a1 + 47))
  {
LABEL_3:
    uint64_t v4 = sub_100132EFC(v27, (uint64_t)"/", 1);
    int v5 = (const char **)(a1 + 24);
    size_t v6 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0) {
      size_t v6 = *v5;
    }
    size_t v7 = strlen(v6);
    sub_100132EFC(v4, (uint64_t)v6, v7);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022ED8C0);
    }
    int v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = (const char *)(a1 + 24);
      if (*(char *)(a1 + 47) < 0) {
        uint64_t v9 = *v5;
      }
      std::stringbuf::str();
      if (v38 >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 136315394;
      *(void *)&uint8_t buf[4] = v9;
      __int16 v30 = 2080;
      int v31 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "TmmFile, name, path, %s, servername, %s", buf, 0x16u);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022ED8C0);
      }
      if (*(char *)(a1 + 47) < 0) {
        int v5 = (const char **)*v5;
      }
      std::stringbuf::str();
      if (v32 >= 0) {
        int v11 = buf;
      }
      else {
        int v11 = *(unsigned char **)buf;
      }
      int v33 = 136315394;
      uint64_t v34 = v5;
      __int16 v35 = 2080;
      uint64_t v36 = v11;
      int v12 = (char *)_os_log_send_and_compose_impl();
      if (v32 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "std::string TileId::getServerFileName() const", "%s\n", v12);
      if (v12 != (char *)__p) {
        free(v12);
      }
    }
    goto LABEL_30;
  }
  sub_100132EFC(v27, (uint64_t)"/", 1);
  int v13 = (void *)std::ostream::operator<<();
  sub_100132EFC(v13, (uint64_t)"/", 1);
  int v14 = (void *)std::ostream::operator<<();
  uint64_t v15 = sub_100132EFC(v14, (uint64_t)"/", 1);
  LOBYTE(__p[0]) = 48;
  BOOL v16 = sub_10006E19C(v15, (char *)__p);
  *(void *)((char *)v16 + *(void *)(*v16 - 24) + 24) = 7;
  __int16 v17 = (void *)std::ostream::operator<<();
  uint64_t v18 = sub_100132EFC(v17, (uint64_t)"_", 1);
  buf[0] = 48;
  __int16 v19 = sub_10006E19C(v18, buf);
  *(void *)((char *)v19 + *(void *)(*v19 - 24) + 24) = 7;
  std::ostream::operator<<();
  if (*(void *)(a1 + 16) != -1)
  {
    int v20 = sub_100132EFC(v27, (uint64_t)"_", 1);
    LOBYTE(__p[0]) = 48;
    __int16 v21 = sub_10006E19C(v20, (char *)__p);
    uint64_t v22 = *v21;
    *(uint64_t *)((char *)v21 + *(void *)(*v21 - 24) + 24) = 16;
    *(_DWORD *)((char *)v21 + *(void *)(v22 - 24) + 8) = *(_DWORD *)((unsigned char *)v21 + *(void *)(v22 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)v21 + *(void *)(v22 - 24) + 8) |= 0x4000u;
    std::ostream::operator<<();
  }
LABEL_30:
  std::stringbuf::str();
  if (v38 >= 0) {
    uint64_t v23 = (char *)__p;
  }
  else {
    uint64_t v23 = (char *)__p[0];
  }
  sub_100134750(a2, v23);
  if (v38 < 0) {
    operator delete(__p[0]);
  }
  *(void *)((char *)v26
  v27[0] = v24;
  if (v28 < 0) {
    operator delete((void *)v27[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100C09FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
}

uint64_t sub_100C0A028(int *a1)
{
  return sub_10106EE00(*a1);
}

void sub_100C0A030(int *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = sub_10106EE00(*a1);
  size_t v6 = (char *)v5;
  if (*(char *)(v5 + 23) >= 0) {
    size_t v7 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    size_t v7 = *(void *)(v5 + 8);
  }
  p_p = &__p;
  sub_1001110E4((uint64_t)&__p, v7 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v7)
  {
    if (v6[23] >= 0) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = *(char **)v6;
    }
    memmove(p_p, v9, v7);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v7) = 47;
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    int v11 = (const std::string::value_type *)a2;
  }
  else {
    int v11 = *(const std::string::value_type **)a2;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(a2 + 8);
  }
  int v13 = std::string::append(&__p, v11, v12);
  *a3 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_100C0A120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C0A13C(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100C0A16C(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100C0A258(uint64_t a1, char *a2, void *a3, unint64_t a4, unint64_t a5)
{
  uint64_t v8 = sub_1006B766C(a1, a2, a3);
  *(void *)uint64_t v8 = off_1022ED8F0;
  *(_OWORD *)(v8 + 120) = 0u;
  uint64_t v9 = (uint64_t *)(v8 + 120);
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(void *)(a1 + 168) = [[CLBundleLocationProviderContext alloc] initWithBundleLocationProvider:a1 inSilo:*(void *)(a1 + 40)];
  *(unsigned char *)(a1 + 176) = 0;
  *(void *)(a1 + 180) = 0xFFFFFFFF00000000;
  *(unsigned char *)(a1 + 188) = 0;
  if (a4 | a5)
  {
    if (a5)
    {
      if ([+[NSFileManager defaultManager] fileExistsAtPath:a5])
      {
        *(void *)(a1 + 152) = [(id)a5 copy];
        *(unsigned char *)(a1 + 176) = 1;
      }
      else
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022EDA68);
        }
        std::string::size_type v12 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t buf = 136446210;
          id v19 = [(id)a5 UTF8String];
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "#BLP bundle path does not exist, %{public}s", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022EDA68);
          }
          [(id)a5 UTF8String];
          BOOL v16 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CLBundleLocationProvider::CLBundleLocationProvider(const char *, id<CLIntersiloUniverse>, CFStringRef, CFStringRef)", "%s\n", v16);
          if (v16 != (char *)buf) {
            free(v16);
          }
        }
      }
    }
    if (a4)
    {
      if (sub_101202AA8((void *)a4))
      {
        *(void *)(a1 + 160) = [(id)a4 copy];
        *(unsigned char *)(a1 + 176) = 1;
        goto LABEL_28;
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EDA68);
      }
      int v13 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        id v14 = [(id)a4 UTF8String];
        *(_DWORD *)uint64_t buf = 136446210;
        id v19 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "#BLP no application installed backed by bundle identifier, %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022EDA68);
        }
        [(id)a4 UTF8String];
        __int16 v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLBundleLocationProvider::CLBundleLocationProvider(const char *, id<CLIntersiloUniverse>, CFStringRef, CFStringRef)", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
    }
    if (!*(unsigned char *)(a1 + 176)) {
      return a1;
    }
LABEL_28:
    *uint64_t v9 = sub_100C0A7C0((void *)a1);
    return a1;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022EDA68);
  }
  int v10 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "#BLP attempting to create bundle location provider with NULL bundle path and NULL bundle identifier", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EDA68);
    }
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLBundleLocationProvider::CLBundleLocationProvider(const char *, id<CLIntersiloUniverse>, CFStringRef, CFStringRef)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  return a1;
}

void sub_100C0A790(_Unwind_Exception *a1)
{
  sub_1006B7BEC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C0A7C0(void *a1)
{
  if (*(_OWORD *)(a1 + 19) == 0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022EDA88);
    }
    uint64_t v1 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "BLP: Need a bundle path or a bundle identifier.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EDA88);
      }
      size_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLClientRef CLBundleLocationProvider::createClient()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return 0;
  }
  else
  {
    uint64_t v9 = a1[21];
    uint64_t v2 = CLClientCreateWithBundleIdentifierAndPathOnSilo();
    if (v2)
    {
      CLClientSetAllowsMapCorrection();
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EDA88);
      }
      uint64_t v4 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        uint64_t v5 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", a1[20], a1[19], 0, v9, sub_10004A968, j__objc_release, 0] UTF8String];
        *(_DWORD *)uint64_t buf = 136446210;
        int v11 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "BLP: Couldn't create client for bundle path %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EDA88);
        }
        [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", a1[20], a1[19]] UTF8String];
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLClientRef CLBundleLocationProvider::createClient()", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
    }
  }
  return v2;
}

uint64_t sub_100C0AB60(uint64_t a1)
{
  *(void *)a1 = off_1022ED8F0;
  [*(id *)(a1 + 168) invalidate];

  *(void *)(a1 + 168) = 0;
  if (*(void *)(a1 + 120))
  {
    CLClientInvalidate();
    CFRelease(*(CFTypeRef *)(a1 + 120));
    *(void *)(a1 + 120) = 0;
  }
  if (*(void *)(a1 + 128))
  {
    CLClientInvalidate();
    CFRelease(*(CFTypeRef *)(a1 + 128));
    *(void *)(a1 + 128) = 0;
  }
  if (*(void *)(a1 + 136))
  {
    CLClientInvalidate();
    CFRelease(*(CFTypeRef *)(a1 + 136));
    *(void *)(a1 + 136) = 0;
  }
  if (*(void *)(a1 + 144))
  {
    CLClientInvalidate();
    CFRelease(*(CFTypeRef *)(a1 + 144));
    *(void *)(a1 + 144) = 0;
  }
  uint64_t v2 = *(const void **)(a1 + 152);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 152) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 160);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 160) = 0;
  }

  return sub_1006B7BEC(a1);
}

void sub_100C0AC4C(uint64_t a1)
{
  sub_100C0AB60(a1);

  operator delete();
}

void sub_100C0AC84(uint64_t a1)
{
  if (*(void *)(a1 + 120))
  {
    *(_DWORD *)uint64_t buf = 0;
    BOOL v2 = 1;
    if (sub_1001072EC(a1, (int *)buf, 1))
    {
      int v3 = -1;
    }
    else
    {
      *(_DWORD *)uint64_t buf = 1;
      if (sub_1001072EC(a1, (int *)buf, 1))
      {
        int v3 = 100;
        BOOL v2 = 1;
      }
      else
      {
        *(_DWORD *)uint64_t buf = 2;
        int v4 = sub_1001072EC(a1, (int *)buf, 1);
        BOOL v2 = v4 != 0;
        if (v4) {
          int v3 = 3000;
        }
        else {
          int v3 = 2147483646;
        }
      }
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022EDA88);
    }
    uint64_t v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      size_t v6 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", *(void *)(a1 + 160), *(void *)(a1 + 152)] UTF8String];
      *(_DWORD *)uint64_t buf = 67109378;
      *(_DWORD *)uint64_t v74 = v3;
      *(_WORD *)&v74[4] = 2080;
      *(void *)&v74[6] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "BLP: Registering with desired accuracy %d (%s)", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EDA88);
      }
      CFStringRef v47 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", *(void *)(a1 + 160), *(void *)(a1 + 152)] UTF8String];
      int v69 = 67109378;
      *(_DWORD *)long long v70 = v3;
      *(_WORD *)&v70[4] = 2080;
      *(void *)&v70[6] = v47;
      uint64_t v48 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v48);
      if (v48 != (char *)buf) {
        free(v48);
      }
    }
    if (v2)
    {
      double v7 = sub_100C0C360(a1, (uint64_t)&unk_101D88D08, 3);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EDA88);
      }
      uint64_t v8 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v9 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", *(void *)(a1 + 160), *(void *)(a1 + 152)] UTF8String];
        *(_DWORD *)uint64_t buf = 134218242;
        *(double *)uint64_t v74 = v7;
        *(_WORD *)&v74[8] = 2080;
        *(void *)&v74[10] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "BLP: Location distance filter is now %.2f (%s)", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EDA88);
        }
        unsigned int v58 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", *(void *)(a1 + 160), *(void *)(a1 + 152)] UTF8String];
        int v69 = 134218242;
        *(double *)long long v70 = v7;
        *(_WORD *)&v70[8] = 2080;
        *(void *)&_WORD v70[10] = v58;
        __int16 v59 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v59);
        if (v59 != (char *)buf) {
          free(v59);
        }
      }
      CLClientStartLocationUpdates();
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EDA88);
      }
      int v10 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        int v11 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", *(void *)(a1 + 160), *(void *)(a1 + 152)] UTF8String];
        *(_DWORD *)uint64_t buf = 136315138;
        *(void *)uint64_t v74 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "BLP: Stopping location updates (%s)", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EDA88);
        }
        uint64_t v60 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", *(void *)(a1 + 160), *(void *)(a1 + 152)] UTF8String];
        int v69 = 136315138;
        *(void *)long long v70 = v60;
        __int16 v61 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v61);
        if (v61 != (char *)buf) {
          free(v61);
        }
      }
      CLClientStopLocationUpdates();
    }
  }
  if (*(void *)(a1 + 128))
  {
    *(_DWORD *)uint64_t buf = 4;
    if (sub_1001072EC(a1, (int *)buf, 1)) {
      goto LABEL_35;
    }
    *(_DWORD *)uint64_t buf = 3;
    if (sub_1001072EC(a1, (int *)buf, 1))
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EDA88);
      }
      std::string::size_type v12 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", *(void *)(a1 + 160), *(void *)(a1 + 152)] UTF8String];
        *(_DWORD *)uint64_t buf = 136315138;
        *(void *)uint64_t v74 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning BLP: CLBundleLocationProvider does not support spectators (%s)", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_35;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EDA88);
      }
      unsigned int v64 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", *(void *)(a1 + 160), *(void *)(a1 + 152)] UTF8String];
      int v69 = 136315138;
      *(void *)long long v70 = v64;
      __int16 v65 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v65);
      if (v65 == (char *)buf) {
        goto LABEL_35;
      }
      goto LABEL_159;
    }
    *(_DWORD *)uint64_t buf = 5;
    if (sub_1001072EC(a1, (int *)buf, 1))
    {
      int v41 = *(_DWORD *)(a1 + 184);
      if (v41 == 1)
      {
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022EDAA8);
        }
        NSErrorUserInfoKey v45 = qword_102419608;
        if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "BLP: Set newAccuracy based on Rhythmic status: kCLClientLocationAccuracyRhythmicWaking", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419600 != -1) {
            dispatch_once(&qword_102419600, &stru_1022EDAA8);
          }
          LOWORD(v69) = 0;
          CFStringRef v46 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v46);
          if (v46 != (char *)buf) {
            free(v46);
          }
        }
        goto LABEL_35;
      }
      if (!v41)
      {
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022EDAA8);
        }
        CFStringRef v42 = qword_102419608;
        if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "BLP: Set newAccuracy based on Rhythmic status: kCLClientLocationAccuracyRhythmicNonWaking", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419600 != -1) {
            dispatch_once(&qword_102419600, &stru_1022EDAA8);
          }
          LOWORD(v69) = 0;
          __int16 v65 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v65);
          if (v65 != (char *)buf) {
LABEL_159:
          }
            free(v65);
        }
      }
LABEL_35:
      double v14 = sub_100C0C360(a1, (uint64_t)&unk_101D88D14, 3);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EDA88);
      }
      uint64_t v15 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        BOOL v16 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", *(void *)(a1 + 160), *(void *)(a1 + 152)] UTF8String];
        *(_DWORD *)uint64_t buf = 134218242;
        *(double *)uint64_t v74 = v14;
        *(_WORD *)&v74[8] = 2080;
        *(void *)&v74[10] = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "BLP: Bystander distance filter is now %.2f (%s)", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EDA88);
        }
        uint64_t v49 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", *(void *)(a1 + 160), *(void *)(a1 + 152)] UTF8String];
        int v69 = 134218242;
        *(double *)long long v70 = v14;
        *(_WORD *)&v70[8] = 2080;
        *(void *)&_WORD v70[10] = v49;
        uint64_t v50 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v50);
        if (v50 != (char *)buf) {
          free(v50);
        }
      }
      CLClientStartLocationUpdates();
      goto LABEL_41;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022EDA88);
    }
    uint64_t v43 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v44 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", *(void *)(a1 + 160), *(void *)(a1 + 152)] UTF8String];
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)uint64_t v74 = v44;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "BLP: Stopping bystander location updates (%s)", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EDA88);
      }
      uint64_t v66 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", *(void *)(a1 + 160), *(void *)(a1 + 152)] UTF8String];
      int v69 = 136315138;
      *(void *)long long v70 = v66;
      uint64_t v67 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v67);
      if (v67 != (char *)buf) {
        free(v67);
      }
    }
    CLClientStopLocationUpdates();
  }
LABEL_41:
  if (*(void *)(a1 + 136))
  {
    *(_DWORD *)uint64_t buf = 22;
    if (sub_1001072EC(a1, (int *)buf, 1))
    {
      uint64_t v17 = *(void *)(a1 + 64);
      if (!v17) {
        goto LABEL_53;
      }
      uint64_t v18 = a1 + 64;
      do
      {
        int v19 = *(_DWORD *)(v17 + 32);
        BOOL v20 = v19 < 22;
        if (v19 >= 22) {
          __int16 v21 = (uint64_t *)v17;
        }
        else {
          __int16 v21 = (uint64_t *)(v17 + 8);
        }
        if (!v20) {
          uint64_t v18 = v17;
        }
        uint64_t v17 = *v21;
      }
      while (*v21);
      if (v18 == a1 + 64 || *(int *)(v18 + 32) >= 23) {
LABEL_53:
      }
        uint64_t v18 = a1 + 64;
      uint64_t v22 = *(void **)(v18 + 40);
      if (v22 == (void *)(v18 + 48))
      {
        int v23 = 0;
      }
      else
      {
        int v23 = 0;
        do
        {
          uint64_t v24 = (void *)v22[1];
          char v25 = v22;
          if (v24)
          {
            do
            {
              uint64_t v26 = v24;
              uint64_t v24 = (void *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              uint64_t v26 = (void *)v25[2];
              BOOL v27 = *v26 == (void)v25;
              char v25 = v26;
            }
            while (!v27);
          }
          v23 += *((unsigned __int8 *)v22 + 56);
          uint64_t v22 = v26;
        }
        while (v26 != (void *)(v18 + 48));
      }
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022EDAC8);
      }
      char v32 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        id v33 = [*(id *)(a1 + 152) UTF8String];
        uint64_t v34 = *(void *)(v18 + 56);
        *(_DWORD *)uint64_t buf = 136446722;
        *(void *)uint64_t v74 = v33;
        *(_WORD *)&v74[8] = 2050;
        *(void *)&v74[10] = v34;
        __int16 v75 = 1026;
        int v76 = v23;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "@WsbBundle, %{public}s, clients, %{public}ld, numActive, %{public}d", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022EDAC8);
        }
        id v51 = [*(id *)(a1 + 152) UTF8String];
        uint64_t v52 = *(void *)(v18 + 56);
        int v69 = 136446722;
        *(void *)long long v70 = v51;
        *(_WORD *)&v70[8] = 2050;
        *(void *)&_WORD v70[10] = v52;
        __int16 v71 = 1026;
        int v72 = v23;
        uint64_t v53 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v53);
        if (v53 != (char *)buf) {
          free(v53);
        }
      }
      int v68 = 22;
      sub_100C0C360(a1, (uint64_t)&v68, 1);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EDA88);
      }
      __int16 v35 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v36 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", *(void *)(a1 + 160), *(void *)(a1 + 152)] UTF8String];
        *(_DWORD *)uint64_t buf = 136315138;
        *(void *)uint64_t v74 = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "BLP: starting wifi location batch, bundleId, %s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EDA88);
        }
        __int16 v54 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", *(void *)(a1 + 160), *(void *)(a1 + 152)] UTF8String];
        int v69 = 136315138;
        *(void *)long long v70 = v54;
        long long v55 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v55);
        if (v55 != (char *)buf) {
          free(v55);
        }
      }
      CLClientStartLocationUpdates();
    }
    else
    {
      CLClientStopLocationUpdates();
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EDA88);
      }
      char v28 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v29 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", *(void *)(a1 + 160), *(void *)(a1 + 152)] UTF8String];
        *(_DWORD *)uint64_t buf = 136315138;
        *(void *)uint64_t v74 = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "BLP: stopping wifi location batch, bundleId, %s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EDA88);
        }
        __int16 v30 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", *(void *)(a1 + 160), *(void *)(a1 + 152)] UTF8String];
        int v69 = 136315138;
        *(void *)long long v70 = v30;
        int v31 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v31);
        if (v31 != (char *)buf) {
          free(v31);
        }
      }
    }
  }
  if (*(void *)(a1 + 144))
  {
    *(_DWORD *)uint64_t buf = 39;
    if (sub_1001072EC(a1, (int *)buf, 1))
    {
      int v68 = 39;
      sub_100C0C360(a1, (uint64_t)&v68, 1);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EDA88);
      }
      uint64_t v37 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        char v38 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", *(void *)(a1 + 160), *(void *)(a1 + 152)] UTF8String];
        *(_DWORD *)uint64_t buf = 136315138;
        *(void *)uint64_t v74 = v38;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "BLP: starting BystanderPreLoiOverride, bundleId, %s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EDA88);
        }
        uint64_t v56 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", *(void *)(a1 + 160), *(void *)(a1 + 152)] UTF8String];
        int v69 = 136315138;
        *(void *)long long v70 = v56;
        uint64_t v57 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v57);
        if (v57 != (char *)buf) {
          free(v57);
        }
      }
      CLClientStartLocationUpdates();
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022EDA88);
      }
      NSErrorUserInfoKey v39 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        CFStringRef v40 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", *(void *)(a1 + 160), *(void *)(a1 + 152)] UTF8String];
        *(_DWORD *)uint64_t buf = 136315138;
        *(void *)uint64_t v74 = v40;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "BLP: stopping BystanderPreLoiOverride, bundleId, %s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022EDA88);
        }
        uint64_t v62 = [+[NSString stringWithFormat:@"bundleIdentifier, %@, bundlePath, %@", *(void *)(a1 + 160), *(void *)(a1 + 152)] UTF8String];
        int v69 = 136315138;
        *(void *)long long v70 = v62;
        uint64_t v63 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v63);
        if (v63 != (char *)buf) {
          free(v63);
        }
      }
      CLClientStopLocationUpdates();
    }
  }
}

double sub_100C0C360(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3) {
    return 1.79769313e308;
  }
  uint64_t v3 = 0;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v4 = a1 + 64;
  uint64_t v5 = v6;
  double result = 1.79769313e308;
  do
  {
    if (v5)
    {
      int v8 = *(_DWORD *)(a2 + 4 * v3);
      uint64_t v9 = v4;
      uint64_t v10 = v5;
      do
      {
        int v11 = *(_DWORD *)(v10 + 32);
        BOOL v12 = v11 < v8;
        if (v11 >= v8) {
          int v13 = (uint64_t *)v10;
        }
        else {
          int v13 = (uint64_t *)(v10 + 8);
        }
        if (!v12) {
          uint64_t v9 = v10;
        }
        uint64_t v10 = *v13;
      }
      while (*v13);
      if (v9 != v4 && v8 >= *(_DWORD *)(v9 + 32))
      {
        double v14 = *(double **)(v9 + 40);
        uint64_t v15 = (double *)(v9 + 48);
        if (v14 != v15)
        {
          do
          {
            if (v14[6] < result) {
              double result = v14[6];
            }
            BOOL v16 = (double *)*((void *)v14 + 1);
            if (v16)
            {
              do
              {
                uint64_t v17 = v16;
                BOOL v16 = *(double **)v16;
              }
              while (v16);
            }
            else
            {
              do
              {
                uint64_t v17 = (double *)*((void *)v14 + 2);
                BOOL v18 = *(void *)v17 == (void)v14;
                double v14 = v17;
              }
              while (!v18);
            }
            double v14 = v17;
          }
          while (v17 != v15);
        }
      }
    }
    ++v3;
  }
  while (v3 != a3);
  return result;
}

uint64_t sub_100C0C428(uint64_t a1, int *a2)
{
  int v3 = *a2;
  if ((*a2 - 3) >= 3)
  {
    if (v3 == 22)
    {
      if (*(void *)(a1 + 136)) {
        goto LABEL_12;
      }
      *(void *)(a1 + 136) = sub_100C0A7C0((void *)a1);
    }
    else
    {
      if (v3 != 39 || *(void *)(a1 + 144)) {
        goto LABEL_12;
      }
      *(void *)(a1 + 144) = sub_100C0A7C0((void *)a1);
    }
  }
  else
  {
    if (*(void *)(a1 + 128)) {
      goto LABEL_12;
    }
    *(void *)(a1 + 128) = sub_100C0A7C0((void *)a1);
  }
  if (*(unsigned char *)(a1 + 188)) {
    CLClientSetMatchInfoEnabled();
  }
LABEL_12:

  return sub_1000B015C();
}

uint64_t sub_100C0C4D8(uint64_t a1)
{
  sub_100C0AC84(a1);

  return sub_1006B7E64(a1);
}

void sub_100C0C518(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 184) = a2;
  sub_100C0AC84(a1);
}

uint64_t sub_100C0C520(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 188) != a2)
  {
    char v2 = a2;
    uint64_t v3 = result;
    if (*(void *)(result + 120)) {
      CLClientSetMatchInfoEnabled();
    }
    if (*(void *)(v3 + 128)) {
      CLClientSetMatchInfoEnabled();
    }
    if (*(void *)(v3 + 136)) {
      CLClientSetMatchInfoEnabled();
    }
    double result = *(void *)(v3 + 144);
    if (result) {
      double result = CLClientSetMatchInfoEnabled();
    }
    *(unsigned char *)(v3 + 188) = v2;
  }
  return result;
}

uint64_t sub_100C0C594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v10 = 0;
  int v11 = 0;
  int v12 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v9 = _Q0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, long long *))(*(void *)a1 + 96))(a1, a2, a3, &v9);
}

BOOL sub_100C0C5EC(uint64_t a1, int a2, int *a3, long long *a4)
{
  BOOL v6 = sub_1000AD0C8(a1, a2, a3, a4);
  if (v6)
  {
    int v7 = *a3;
    if (*a3 < 6 || (v7 != 39 ? (BOOL v8 = v7 == 22) : (BOOL v8 = 1), v8)) {
      sub_100C0AC84(a1);
    }
  }
  return v6;
}

uint64_t sub_100C0C648(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 120);
  if (result) {
    return _CLClientMarkAsHavingReceivedLocation();
  }
  return result;
}

void sub_100C0C658(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100C0C688(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100C0C6B8(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void sub_100C0C6E8(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_100C0C718(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100C0C78C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100C0C830((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100C0C7A4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    sub_1010FB254(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100C0C7EC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100C0C830(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1010FB254(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100C0C8F0(uint64_t a1)
{
  double v1 = __chkstk_darwin(a1);
  int v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  [v4 coordinate:v1];
  double v9 = v8;
  [v5 coordinate];
  double v11 = v10;
  char v12 = *(unsigned char *)(v7 + 1803);
  if (v12)
  {
    double v9 = (double)sub_10126D9E4(COERCE_UNSIGNED_INT64(ceil(v9 * 500.0) / 500.0));
    double v11 = (double)sub_10126D9E4(COERCE_UNSIGNED_INT64(ceil(v11 * 500.0) / 500.0));
  }
  uint64_t v60 = off_1022E7560;
  double v62 = v9;
  double v63 = v11;
  [objc_msgSend(v5, "departureDate") timeIntervalSinceReferenceDate];
  uint64_t v64 = v13;
  [objc_msgSend(v5, "arrivalDate") timeIntervalSinceReferenceDate];
  uint64_t v65 = v14;
  [v5 horizontalAccuracy];
  uint64_t v66 = v15;
  char v67 = v3;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v16 = sub_101282D9C();
  sub_10128431C(v16, (uint64_t)&v60);
  sub_10170140C(v57);
  sub_101727E18((uint64_t)v57);
  v59 |= 1u;
  *(CFAbsoluteTime *)&v57[77] = Current;
  uint64_t v17 = v58;
  *(_WORD *)(v58 + 92) |= 0x40u;
  *(double *)(v17 + 56) = v9;
  uint64_t v18 = v58;
  *(_WORD *)(v58 + 92) |= 0x20u;
  *(double *)(v18 + 48) = v11;
  uint64_t v19 = v58;
  *(_WORD *)(v58 + 92) |= 0x800u;
  *(unsigned char *)(v19 + 88) = v12;
  uint64_t v20 = v58;
  [objc_msgSend(v5, "departureDate") timeIntervalSinceReferenceDate];
  *(_WORD *)(v20 + 92) |= 4u;
  *(void *)(v20 + 24) = v21;
  uint64_t v22 = v58;
  [objc_msgSend(v5, "arrivalDate") timeIntervalSinceReferenceDate];
  *(_WORD *)(v22 + 92) |= 1u;
  *(void *)(v22 + 8) = v23;
  uint64_t v24 = v58;
  [v5 horizontalAccuracy];
  *(_WORD *)(v24 + 92) |= 0x10u;
  *(void *)(v24 + 40) = v25;
  uint64_t v26 = v58;
  *(_WORD *)(v58 + 92) |= 0x200u;
  *(_DWORD *)(v26 + 80) = v3;
  uint64_t v27 = v58;
  *(_WORD *)(v58 + 92) |= 0x400u;
  *(_DWORD *)(v27 + 84) = -1;
  uint64_t v28 = v58;
  *(_WORD *)(v58 + 92) |= 0x100u;
  *(void *)(v28 + 72) = 0x407F400000000000;
  id v29 = objc_alloc((Class)CLLocation);
  [v5 coordinate];
  double v31 = v30;
  [v5 coordinate];
  id v32 = [v29 initWithLatitude:v31];
  id v33 = *(void **)(v7 + 2048);
  v55[0] = _NSConcreteStackBlock;
  v55[1] = 3321888768;
  void v55[2] = sub_100C2A538;
  v55[3] = &unk_1022EDCB0;
  sub_101710B90(v56, v57);
  v55[4] = v32;
  [v33 fetchLocationsOfInterestWithinDistance:v32 ofLocation:v55 withReply:500.0];

  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v57);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022EDD38);
  }
  uint64_t v34 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    [v5 coordinate];
    uint64_t v36 = v35;
    [v5 coordinate];
    uint64_t v38 = v37;
    [objc_msgSend(v5, "departureDate") timeIntervalSinceReferenceDate];
    uint64_t v40 = v39;
    [objc_msgSend(v5, "arrivalDate") timeIntervalSinceReferenceDate];
    uint64_t v42 = v41;
    [v5 horizontalAccuracy];
    int v80 = 134219264;
    uint64_t v81 = v36;
    __int16 v82 = 2048;
    uint64_t v83 = v38;
    __int16 v84 = 2048;
    uint64_t v85 = v40;
    __int16 v86 = 2048;
    uint64_t v87 = v42;
    __int16 v88 = 2048;
    uint64_t v89 = v43;
    __int16 v90 = 1024;
    int v91 = v3;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Received an LOI notification:longitude,%f,lattitude,%f,\t\t\t\t\tdepartureDate,%f,arrivalDate,%f,\t\t\t\t\thorizontalAccuracy,%f,confidence,%d", (uint8_t *)&v80, 0x3Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v80, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    [v5 coordinate];
    uint64_t v46 = v45;
    [v5 coordinate];
    uint64_t v48 = v47;
    [objc_msgSend(v5, "departureDate") timeIntervalSinceReferenceDate];
    uint64_t v50 = v49;
    [objc_msgSend(v5, "arrivalDate") timeIntervalSinceReferenceDate];
    uint64_t v52 = v51;
    [v5 horizontalAccuracy];
    int v68 = 134219264;
    uint64_t v69 = v46;
    __int16 v70 = 2048;
    uint64_t v71 = v48;
    __int16 v72 = 2048;
    uint64_t v73 = v50;
    __int16 v74 = 2048;
    uint64_t v75 = v52;
    __int16 v76 = 2048;
    uint64_t v77 = v53;
    __int16 v78 = 1024;
    int v79 = v3;
    __int16 v54 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::onLoiNotification(CLVisit *, CMMotionContext::Confidence)", "%s\n", v54);
    if (v54 != (char *)&v80) {
      free(v54);
    }
  }
  sub_101706914((PB::Base *)v56);
  return sub_101706914((PB::Base *)v57);
}

void sub_100C0CEAC(_Unwind_Exception *a1)
{
  sub_101706914(v1);
  sub_101706914((PB::Base *)&STACK[0xE60]);
  _Unwind_Resume(a1);
}

uint64_t sub_100C0CF1C(uint64_t result)
{
  if (*(unsigned char *)(result + 1854))
  {
    CFAbsoluteTimeGetCurrent();
    sub_101762F00();
  }
  return result;
}

void sub_100C0D034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_101706914((PB::Base *)&a9);
  uint64_t v11 = *(void *)(v9 - 40);
  *(void *)(v9 - 40) = 0;
  if (v11) {
    sub_101A87228();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C0D064(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 1903))
  {
    CFAbsoluteTimeGetCurrent();
    sub_100F5BD14(a2, (uint64_t)v3);
  }
  return result;
}

void sub_100C0D170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100C0D198(uint64_t a1, void *a2)
{
  sub_10170140C(v49);
  sub_1017249C8((uint64_t)v49);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v51 |= 1u;
  *(CFAbsoluteTime *)&v49[77] = Current;
  uint64_t v4 = v50;
  [a2 timestamp];
  *(unsigned char *)(v4 + 100) |= 0x10u;
  *(void *)(v4 + 88) = v5;
  uint64_t v6 = v50;
  if (a2)
  {
    [a2 location];
    uint64_t v7 = v52;
    *(unsigned char *)(v6 + 100) |= 4u;
    *(void *)(v6 + 72) = v7;
    uint64_t v8 = v50;
    [a2 location];
    uint64_t v9 = *((void *)&v52 + 1);
    *(unsigned char *)(v8 + 100) |= 8u;
    *(void *)(v8 + 80) = v9;
    uint64_t v10 = v50;
    [a2 location];
    uint64_t v11 = v53;
    *(unsigned char *)(v10 + 100) |= 1u;
    *(void *)(v10 + 56) = v11;
    uint64_t v12 = v50;
    [a2 location];
    uint64_t v13 = v54;
  }
  else
  {
    *(unsigned char *)(v50 + 100) |= 4u;
    *(void *)(v6 + 72) = 0;
    uint64_t v14 = v50;
    *(unsigned char *)(v50 + 100) |= 8u;
    *(void *)(v14 + 80) = 0;
    uint64_t v15 = v50;
    *(unsigned char *)(v50 + 100) |= 1u;
    *(void *)(v15 + 56) = 0;
    uint64_t v12 = v50;
    uint64_t v13 = 0;
  }
  uint64_t v16 = 0;
  *(unsigned char *)(v12 + 100) |= 2u;
  *(void *)(v12 + 64) = v13;
  do
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      uint64_t v18 = (void *)v50;
      if (a2)
      {
        [a2 transform];
      }
      else
      {
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
      }
      uint64_t v19 = *((void *)&v52 + 4 * i + (v16 & 3));
      unint64_t v20 = v18[6];
      uint64_t v21 = (char *)v18[5];
      if ((unint64_t)v21 >= v20)
      {
        uint64_t v23 = (char *)v18[4];
        uint64_t v24 = (v21 - v23) >> 3;
        if ((unint64_t)(v24 + 1) >> 61) {
          sub_1001D7FD4();
        }
        unint64_t v25 = v20 - (void)v23;
        unint64_t v26 = (uint64_t)(v20 - (void)v23) >> 2;
        if (v26 <= v24 + 1) {
          unint64_t v26 = v24 + 1;
        }
        if (v25 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27)
        {
          uint64_t v28 = (char *)sub_1000DA54C((uint64_t)(v18 + 6), v27);
          uint64_t v23 = (char *)v18[4];
          uint64_t v21 = (char *)v18[5];
        }
        else
        {
          uint64_t v28 = 0;
        }
        id v29 = &v28[8 * v24];
        *(void *)id v29 = v19;
        uint64_t v22 = v29 + 8;
        while (v21 != v23)
        {
          uint64_t v30 = *((void *)v21 - 1);
          v21 -= 8;
          *((void *)v29 - 1) = v30;
          v29 -= 8;
        }
        uint64_t v18[4] = v29;
        void v18[5] = v22;
        v18[6] = &v28[8 * v27];
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *(void *)uint64_t v21 = v19;
        uint64_t v22 = v21 + 8;
      }
      void v18[5] = v22;
    }
    ++v16;
  }
  while (v16 != 4);
  for (uint64_t j = 0; j != 6; ++j)
  {
    for (uint64_t k = 0; k != 6; ++k)
    {
      id v33 = (void *)v50;
      if (a2)
      {
        [a2 covariance];
      }
      else
      {
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v52 = 0u;
      }
      uint64_t v34 = (_DWORD *)&v52 + 6 * k + j;
      unint64_t v35 = v33[3];
      uint64_t v36 = (char *)v33[2];
      if ((unint64_t)v36 >= v35)
      {
        uint64_t v38 = (char *)v33[1];
        uint64_t v39 = (v36 - v38) >> 2;
        if ((unint64_t)(v39 + 1) >> 62) {
          sub_1001D7FD4();
        }
        unint64_t v40 = v35 - (void)v38;
        unint64_t v41 = (uint64_t)(v35 - (void)v38) >> 1;
        if (v41 <= v39 + 1) {
          unint64_t v41 = v39 + 1;
        }
        if (v40 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v41;
        }
        if (v42)
        {
          uint64_t v43 = (char *)sub_10017EA34((uint64_t)(v33 + 3), v42);
          uint64_t v38 = (char *)v33[1];
          uint64_t v36 = (char *)v33[2];
        }
        else
        {
          uint64_t v43 = 0;
        }
        uint64_t v44 = &v43[4 * v39];
        *(_DWORD *)uint64_t v44 = *v34;
        uint64_t v37 = v44 + 4;
        while (v36 != v38)
        {
          int v45 = *((_DWORD *)v36 - 1);
          v36 -= 4;
          *((_DWORD *)v44 - 1) = v45;
          v44 -= 4;
        }
        v33[1] = v44;
        v33[2] = v37;
        v33[3] = &v43[4 * v42];
        if (v38) {
          operator delete(v38);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v36 = *v34;
        uint64_t v37 = v36 + 4;
      }
      v33[2] = v37;
    }
  }
  uint64_t v46 = v50;
  [a2 confidence];
  *(unsigned char *)(v46 + 100) |= 0x20u;
  *(_DWORD *)(v46 + 96) = v47;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v49);
  }
  return sub_101706914((PB::Base *)v49);
}

void sub_100C0D5D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C0D61C(uint64_t a1)
{
  sub_100C23748(a1, 0);
  if (qword_1024192D0 != -1) {
    dispatch_once(&qword_1024192D0, &stru_1022EDE18);
  }
  double v1 = qword_1024192D8;
  if (os_log_type_enabled((os_log_t)qword_1024192D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "onPedestrianFenceNotification", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192D0 != -1) {
      dispatch_once(&qword_1024192D0, &stru_1022EDE18);
    }
    int v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::onPedestrianFenceExit()", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
}

uint64_t sub_100C0D7B4(uint64_t a1, void *a2)
{
  sub_10170140C(v31);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v33 |= 1u;
  *(CFAbsoluteTime *)&v31[77] = Current;
  sub_1017261F8((uint64_t)v31);
  uint64_t v4 = v32;
  [a2 timestamp];
  *(_WORD *)(v4 + 68) |= 1u;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = v32;
  if ([a2 deltaPositionX]) {
    [objc_msgSend(a2, "deltaPositionX") floatValue];
  }
  else {
    int v7 = 2143289344;
  }
  *(_WORD *)(v6 + 68) |= 2u;
  *(_DWORD *)(v6 + 16) = v7;
  uint64_t v8 = v32;
  if ([a2 deltaPositionY]) {
    [objc_msgSend(a2, "deltaPositionY") floatValue];
  }
  else {
    int v9 = 2143289344;
  }
  *(_WORD *)(v8 + 68) |= 4u;
  *(_DWORD *)(v8 + 20) = v9;
  uint64_t v10 = v32;
  if ([a2 deltaPositionZ]) {
    [objc_msgSend(a2, "deltaPositionZ") floatValue];
  }
  else {
    int v11 = 2143289344;
  }
  *(_WORD *)(v10 + 68) |= 8u;
  *(_DWORD *)(v10 + 24) = v11;
  uint64_t v12 = v32;
  if ([a2 deltaVelocityX]) {
    [objc_msgSend(a2, "deltaVelocityX") floatValue];
  }
  else {
    int v13 = 2143289344;
  }
  *(_WORD *)(v12 + 68) |= 0x10u;
  *(_DWORD *)(v12 + 28) = v13;
  uint64_t v14 = v32;
  if ([a2 deltaVelocityY]) {
    [objc_msgSend(a2, "deltaVelocityY") floatValue];
  }
  else {
    int v15 = 2143289344;
  }
  *(_WORD *)(v14 + 68) |= 0x20u;
  *(_DWORD *)(v14 + 32) = v15;
  uint64_t v16 = v32;
  if ([a2 deltaVelocityZ]) {
    [objc_msgSend(a2, "deltaVelocityZ") floatValue];
  }
  else {
    int v17 = 2143289344;
  }
  *(_WORD *)(v16 + 68) |= 0x40u;
  *(_DWORD *)(v16 + 36) = v17;
  uint64_t v18 = v32;
  if ([a2 quaternionX]) {
    [objc_msgSend(a2, "quaternionX") floatValue];
  }
  else {
    int v19 = 2143289344;
  }
  *(_WORD *)(v18 + 68) |= 0x100u;
  *(_DWORD *)(v18 + 44) = v19;
  uint64_t v20 = v32;
  if ([a2 quaternionY]) {
    [objc_msgSend(a2, "quaternionY") floatValue];
  }
  else {
    int v21 = 2143289344;
  }
  *(_WORD *)(v20 + 68) |= 0x200u;
  *(_DWORD *)(v20 + 48) = v21;
  uint64_t v22 = v32;
  if ([a2 quaternionZ]) {
    [objc_msgSend(a2, "quaternionZ") floatValue];
  }
  else {
    int v23 = 2143289344;
  }
  *(_WORD *)(v22 + 68) |= 0x400u;
  *(_DWORD *)(v22 + 52) = v23;
  uint64_t v24 = v32;
  if ([a2 quaternionW]) {
    [objc_msgSend(a2, "quaternionW") floatValue];
  }
  else {
    int v25 = 2143289344;
  }
  *(_WORD *)(v24 + 68) |= 0x80u;
  *(_DWORD *)(v24 + 40) = v25;
  uint64_t v26 = v32;
  unsigned int v27 = [a2 referenceFrame];
  *(_WORD *)(v26 + 68) |= 0x800u;
  *(_DWORD *)(v26 + 56) = v27;
  uint64_t v28 = v32;
  unsigned int v29 = [a2 staticFlag];
  *(_WORD *)(v28 + 68) |= 0x1000u;
  *(_DWORD *)(v28 + 60) = v29;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1022EDD18);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v31);
  }
  return sub_101706914((PB::Base *)v31);
}

void sub_100C0DAD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100C0DB08(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = a2;
  *(void *)a1 = &off_1022EDB70;
  sub_100EBBEB0(a1 + 256, (uint64_t)"MotionDataCollection", a1, 0.0);
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 784) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 800) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(void *)(a1 + 824) = @"CLMotionLogger";
  *(unsigned char *)(a1 + 832) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  sub_100ECEB98(a1 + 904, "MotionCalibration", *(void *)(a1 + 248));
  *(_OWORD *)(a1 + 1121) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  bzero((void *)(a1 + 1144), 0x380uLL);
  sub_100C31334((unsigned __int8 *)(a1 + 1272));
  *(void *)(a1 + 2048) = 0;
  *(void *)(a1 + 2080) = 0;
  *(void *)(a1 + 2088) = [objc_msgSend(*(id *)(a1 + 248), "silo") newTimer];
  *(void *)(a1 + 2096) = 0;
  *(void *)(a1 + 2328) = 0;
  *(_OWORD *)(a1 + 2264) = xmmword_101D88F88;
  *(_OWORD *)(a1 + 2280) = unk_101D88F98;
  *(_OWORD *)(a1 + 2296) = xmmword_101D88FA8;
  *(_OWORD *)(a1 + 2312) = unk_101D88FB8;
  *(_OWORD *)(a1 + 2200) = xmmword_101D88F48;
  *(_OWORD *)(a1 + 2216) = unk_101D88F58;
  *(_OWORD *)(a1 + 2232) = xmmword_101D88F68;
  *(_OWORD *)(a1 + 2248) = unk_101D88F78;
  *(_OWORD *)(a1 + 2136) = xmmword_101D88F08;
  *(_OWORD *)(a1 + 2152) = unk_101D88F18;
  *(_OWORD *)(a1 + 2168) = xmmword_101D88F28;
  *(_OWORD *)(a1 + 2184) = unk_101D88F38;
  *(_OWORD *)(a1 + 2104) = xmmword_101D88EE8;
  *(_OWORD *)(a1 + 2120) = unk_101D88EF8;
  *(_OWORD *)(a1 + 664) = xmmword_101D88FE0;
  *(_OWORD *)(a1 + 680) = unk_101D88FF0;
  *(_OWORD *)(a1 + 692) = unk_101D88FFC;
  *(_OWORD *)(a1 + 648) = xmmword_101D88FD0;
  *(_DWORD *)(a1 + 692) = 1088421888;
  *(void *)(a1 + 720) = 0x200000002;
  sub_1006A564C();
}

void sub_100C0EDD0(_Unwind_Exception *a1)
{
  uint64_t v7 = v1[156];
  v1[156] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = v1[155];
  v1[155] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = v1[154];
  v1[154] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = v1[153];
  v1[153] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = v1[152];
  v1[152] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = v1[151];
  v1[151] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = v1[150];
  v1[150] = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  sub_1003C2C38(v1 + 149, 0);
  uint64_t v14 = v1[148];
  v1[148] = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = v1[147];
  v1[147] = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = v1[146];
  v1[146] = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = v1[145];
  v1[145] = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = v1[144];
  v1[144] = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *v4;
  *uint64_t v4 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = v1[141];
  v1[141] = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = v1[140];
  v1[140] = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = v1[139];
  v1[139] = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = v1[138];
  v1[138] = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = *v5;
  *uint64_t v5 = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  sub_100C0AB60(v3);
  uint64_t v25 = v1[112];
  v1[112] = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = v1[111];
  v1[111] = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = v1[110];
  v1[110] = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = v1[109];
  v1[109] = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  uint64_t v29 = v1[69];
  v1[69] = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  uint64_t v30 = v1[65];
  v1[65] = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  uint64_t v31 = v1[57];
  v1[57] = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  uint64_t v32 = v1[56];
  v1[56] = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  sub_100EBBF9C(v2);
  sub_10089C948(v1);
  _Unwind_Resume(a1);
}

void sub_100C0F384(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100C22FC8(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C0F540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C0F560(uint64_t a1, _DWORD *a2, long long *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    char v12 = 1;
    uint64_t v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onOdometerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v10 = qword_102419588;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onOdometerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  sub_100C25570(v7, v8, a2, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C0F718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C0F738(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    char v12 = 1;
    uint64_t v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onCatherineNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v10 = qword_102419588;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onCatherineNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  sub_100C25B1C(v7, v8, a2, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C0F8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C0F910(uint64_t a1, _DWORD *a2, double *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    char v12 = 1;
    uint64_t v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onVehicleConnectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v10 = qword_102419588;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onVehicleConnectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  sub_100C25FB0(v7, v8, a2, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C0FAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C0FAE8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100C26110(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C0FCA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C0FCC4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onRhythmicGnssModeOfOperationStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onRhythmicGnssModeOfOperationStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100C27A80(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C0FE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C0FEA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    char v12 = 1;
    uint64_t v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onGnssLeechLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v10 = qword_102419588;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onGnssLeechLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  sub_100C2844C(v6, v7, v8, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C10050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C10070(uint64_t a1, _DWORD *a2, long long *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onCalorieUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onCalorieUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100C27BD4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1022C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C1024C(uint64_t a1, _DWORD *a2, char *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    char v12 = 1;
    uint64_t v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onMotionStateUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v10 = qword_102419588;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onMotionStateUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  sub_100C29580(v7, v8, a2, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C10404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C10424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onLocationDerivedNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    BOOL v6 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      char v12 = "";
      __int16 v13 = 2082;
      int v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onLocationDerivedNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_100C26748(a4);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C105E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C10600(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onWatchOrientationSettingsNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onWatchOrientationSettingsNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100C27E7C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C107BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C107DC(uint64_t a1, _DWORD *a2, long long *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v13 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onGeomagneticModelNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    char v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v15 = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 2082;
      uint64_t v19 = "activity";
      __int16 v20 = 2050;
      uint64_t v21 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onGeomagneticModelNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v13 = 0;
  }
  if (!*a2)
  {
    long long v9 = *a3;
    long long v10 = a3[1];
    long long v11 = a3[3];
    *(_OWORD *)(a4 + 760) = a3[2];
    *(_OWORD *)(a4 + 776) = v11;
    *(_OWORD *)(a4 + 728) = v9;
    *(_OWORD *)(a4 + 744) = v10;
  }
  if (v13) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C109A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C109C0(uint64_t a1, _DWORD *a2, __n128 *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onStepCountNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    long long v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onStepCountNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100C28108(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C10B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C10B9C(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    char v12 = 1;
    long long v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onSignalEnvironmentNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    long long v10 = qword_102419588;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onSignalEnvironmentNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  sub_100C28260(v7, v8, a2, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C10D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C10D74(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    char v12 = 1;
    long long v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onGnssAvailabilityPredictorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    long long v10 = qword_102419588;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onGnssAvailabilityPredictorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  sub_100C28330(v7, v8, a2, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C10F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C10F4C(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    char v12 = 1;
    long long v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onFitnessMachineNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    long long v10 = qword_102419588;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onFitnessMachineNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  sub_100C28BE4(v7, v8, a2, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C11104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C11124(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    char v12 = 1;
    long long v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onMagneticAccessoryEvent", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    long long v10 = qword_102419588;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onMagneticAccessoryEvent\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  sub_100C28E98(v7, v8, a2, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C112DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C112FC(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    char v12 = 1;
    long long v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onDaemonStatus", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    long long v10 = qword_102419588;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onDaemonStatus\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  sub_100C2FF90(v7, v8, a2, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C114B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C114D4(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 248), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022EDCF8);
  }
  BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    char v12 = 1;
    long long v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onBLSData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022EDCF8);
    }
    long long v10 = qword_102419588;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onBLSData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  sub_100C30808(v7, v8, a2, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C1168C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C116AC(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 872) + 16) register:*(void *)(*(void *)(a1 + 872) + 8) forNotification:2 registrationInfo:0];
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022EDD38);
  }
  double v1 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "logging workout events", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::registerForWorkoutEvents()", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
}

void sub_100C11848(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  *(_OWORD *)(v1 + 664) = xmmword_101D88FE0;
  *(_OWORD *)(v1 + 680) = unk_101D88FF0;
  *(_OWORD *)(v1 + 692) = unk_101D88FFC;
  *(_OWORD *)(v1 + 648) = xmmword_101D88FD0;
  *(_DWORD *)(v1 + 692) = 1088421888;
  *(void *)(v1 + 720) = 0x200000002;
  if (*(unsigned char *)(v1 + 1273))
  {
    if (!*(unsigned char *)(v1 + 800))
    {
      sub_100134750(__p, "ctor");
      sub_100EBBFD8(v2 + 256, (uint64_t *)__p);
      if (v51 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (*(unsigned char *)(v2 + 1276))
  {
    sub_100103240();
    if (sub_10010145C())
    {
      sub_100103240();
      if (sub_10073E30C())
      {
        *(void *)(v2 + 712) = +[CLLocationIndependenceAssertion newAssertionWithReason:@"Log GPS on both devices"];
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022EDD38);
        }
        uint64_t v3 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Taking a CLLocationIndependenceAssertion", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022EDD38);
          }
          *(_WORD *)long long v53 = 0;
          unint64_t v42 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v42);
          if (v42 != (char *)buf) {
            free(v42);
          }
        }
      }
    }
  }
  if (*(_DWORD *)(v2 + 1740) == 1)
  {
    sub_100103240();
    if (sub_10073E30C())
    {
      if (!*(unsigned char *)(v2 + 800))
      {
        [*(id *)(*(void *)(v2 + 1096) + 16) unregister:*(void *)(*(void *)(v2 + 1096) + 8) forNotification:5];
        if (*(void *)(v2 + 1104))
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022EDD58);
          }
          uint64_t v4 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#wigo,on,MotionLoggerLocal", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1022EDD58);
            }
            *(_WORD *)long long v53 = 0;
            uint64_t v43 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v43);
            if (v43 != (char *)buf) {
              free(v43);
            }
          }
          AnalyticsSendEventLazy();
          [*(id *)(*(void *)(v2 + 1104) + 16) register:*(void *)(*(void *)(v2 + 1104) + 8) forNotification:0 registrationInfo:0];
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022EDD38);
          }
          uint64_t v5 = qword_102418FD8;
          if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Logging GPS: Local source", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FD0 == -1)
            {
LABEL_284:
              *(_WORD *)long long v53 = 0;
              int v45 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v45);
              if (v45 != (char *)buf) {
                free(v45);
              }
              goto LABEL_39;
            }
LABEL_286:
            dispatch_once(&qword_102418FD0, &stru_1022EDD38);
            goto LABEL_284;
          }
        }
        else
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022EDD58);
          }
          BOOL v6 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#wigo,on,MotionLoggerMediated", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1022EDD58);
            }
            *(_WORD *)long long v53 = 0;
            uint64_t v44 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v44);
            if (v44 != (char *)buf) {
              free(v44);
            }
          }
          AnalyticsSendEventLazy();
          [*(id *)(*(void *)(v2 + 1096) + 16) register:*(void *)(*(void *)(v2 + 1096) + 8) forNotification:0 registrationInfo:0];
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022EDD38);
          }
          BOOL v7 = qword_102418FD8;
          if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Logging GPS: Mediated source", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FD0 == -1) {
              goto LABEL_284;
            }
            goto LABEL_286;
          }
        }
      }
    }
  }
LABEL_39:
  if (*(double *)(v2 + 1296) > 0.0 && sub_1009EC0A8()) {
    operator new();
  }
  if (*(double *)(v2 + 1320) > 0.0 && sub_1006518DC()) {
    operator new();
  }
  if (*(double *)(v2 + 1344) > 0.0 && sub_100A08A84())
  {
    uint64_t v49 = *(void *)(v2 + 1344);
    operator new();
  }
  if (*(double *)(v2 + 1368) > 0.0 && sub_100B0AEC4()) {
    operator new();
  }
  if (*(double *)(v2 + 1392) > 0.0 && sub_100862C50()) {
    operator new();
  }
  if (*(double *)(v2 + 1416) > 0.0)
  {
    if (sub_10125D0BC())
    {
      int v8 = *(_DWORD *)(v2 + 1712);
      if (v8)
      {
        if (v8 == 15) {
          [*(id *)(*(void *)(v2 + 1176) + 16) register:*(void *)(*(void *)(v2 + 1176) + 8) forNotification:0 registrationInfo:0];
        }
        [[CLDeviceMotionProperties alloc] initWithMode:*(unsigned int *)(v2 + 1712)];
        operator new();
      }
    }
  }
  if (*(unsigned char *)(v2 + 1776)) {
    operator new();
  }
  if (*(unsigned char *)(v2 + 1788)) {
    operator new();
  }
  if (*(double *)(v2 + 1440) > 0.0 && *(_DWORD *)(v2 + 1460) && sub_101337DA8()) {
    operator new();
  }
  if (*(unsigned char *)(v2 + 1469) && sub_10131AF44())
  {
    [*(id *)(v2 + 248) silo];
    operator new();
  }
  if (*(double *)(v2 + 1480) > 0.0 && *(_DWORD *)(v2 + 1500) && sub_1007034F0()) {
    operator new();
  }
  if (*(double *)(v2 + 1520) > 0.0 && *(_DWORD *)(v2 + 1540) && sub_100D4D820()) {
    operator new();
  }
  if (*(double *)(v2 + 1640) > 0.0 && *(_DWORD *)(v2 + 1660) && sub_10062DDCC()) {
    operator new();
  }
  if (*(double *)(v2 + 1680) > 0.0 && *(_DWORD *)(v2 + 1700) && sub_10076FDCC()) {
    operator new();
  }
  if (*(double *)(v2 + 1560) > 0.0 && *(_DWORD *)(v2 + 1580) && sub_100B60200()) {
    operator new();
  }
  if (*(double *)(v2 + 1600) > 0.0 && *(_DWORD *)(v2 + 1620) && sub_10150A86C())
  {
    char v9 = *(unsigned char *)(v2 + 1629);
    *(unsigned char *)(sub_10150A86C() + 28) = v9;
    operator new();
  }
  if (*(unsigned char *)(v2 + 1794)) {
    sub_1001AE6FC();
  }
  if (*(unsigned char *)(v2 + 1836)) {
    operator new();
  }
  if (*(unsigned char *)(v2 + 1842))
  {
    [*(id *)(*(void *)(v2 + 1184) + 16) register:*(void *)(*(void *)(v2 + 1184) + 8) forNotification:0 registrationInfo:0];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    long long v10 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Registering for SignalEnvironment notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      *(_WORD *)long long v53 = 0;
      uint64_t v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
  }
  if (*(unsigned char *)(v2 + 1845))
  {
    uint64_t v11 = *(void *)(v2 + 1120);
    if (v11) {
      [*(id *)(v11 + 16) register:*(void *)(v11 + 8) forNotification:36 registrationInfo:0];
    }
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    char v12 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Registering for Gnss Availability notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      *(_WORD *)long long v53 = 0;
      uint64_t v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
    }
  }
  if (*(unsigned char *)(v2 + 1848))
  {
    uint64_t v13 = *(void *)(v2 + 1128);
    if (v13) {
      [*(id *)(v13 + 16) register:*(void *)(v13 + 8) forNotification:5 registrationInfo:0];
    }
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    int v14 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Registering for Gnss Leech Location notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      *(_WORD *)long long v53 = 0;
      uint64_t v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v32);
      if (v32 != (char *)buf) {
        free(v32);
      }
    }
  }
  if (*(unsigned char *)(v2 + 1851) && !*(unsigned char *)(v2 + 1136))
  {
    uint64_t v15 = sub_1008B6998();
    sub_100134750(v47, "CLMotionLogger");
    id v16 = [[objc_msgSend(*(id *)(v2 + 248), "silo") queue];
    v52[0] = off_1022EE610;
    v52[1] = v2;
    v52[3] = v52;
    sub_1008B6CBC(v15, (uint64_t)v47, (uint64_t)v16, (uint64_t)v52);
    sub_1006821B0(v52);
    if (v48 < 0) {
      operator delete(v47[0]);
    }
    *(unsigned char *)(v2 + 1136) = 1;
  }
  if (*(unsigned char *)(v2 + 1863))
  {
    id v17 = objc_alloc_init((Class)BrightnessSystemClient);
    *(void *)(v2 + 576) = v17;
    if (v17)
    {
      v46[0] = _NSConcreteStackBlock;
      v46[1] = 3221225472;
      v46[2] = sub_100C1D938;
      v46[3] = &unk_1022C2520;
      v46[4] = v2;
      [v17 registerNotificationBlock:v46 forProperties:&off_102397CF8];
      [*(id *)(v2 + 576) setProperty:(id)CFMakeCollectable(kCFBooleanTrue) forKey:@"ActivateALS"];
    }
  }
  if (*(unsigned char *)(v2 + 1942)) {
LABEL_136:
  }
    operator new();
  if (*(unsigned char *)(v2 + 1867))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    __int16 v18 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "logALSUpdatesAOP is a deprecated defaults write", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      *(_WORD *)long long v53 = 0;
      unint64_t v41 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v41);
      if (v41 != (char *)buf) {
        free(v41);
      }
    }
    goto LABEL_136;
  }
  if (*(unsigned char *)(v2 + 1885))
  {
    [*(id *)(*(void *)(v2 + 1240) + 16) register:*(void *)(*(void *)(v2 + 1240) + 8) forNotification:10 registrationInfo:0];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    __int16 v19 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Registering for display state notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      *(_WORD *)long long v53 = 0;
      char v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
    }
  }
  if (*(unsigned char *)(v2 + 1888))
  {
    [*(id *)(*(void *)(v2 + 1240) + 16) register:*(void *)(*(void *)(v2 + 1240) + 8) forNotification:2 registrationInfo:0];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    uint64_t v20 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Registering for AP sleep notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      *(_WORD *)long long v53 = 0;
      uint64_t v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v34);
      if (v34 != (char *)buf) {
        free(v34);
      }
    }
  }
  if (*(unsigned char *)(v2 + 1891))
  {
    [*(id *)(*(void *)(v2 + 1240) + 16) register:*(void *)(*(void *)(v2 + 1240) + 8) forNotification:3 registrationInfo:0];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    uint64_t v21 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Registering for AP wake notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      *(_WORD *)long long v53 = 0;
      unint64_t v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
    }
  }
  if (*(unsigned char *)(v2 + 1870))
  {
    [*(id *)(*(void *)(v2 + 1240) + 16) register:*(void *)(*(void *)(v2 + 1240) + 8) forNotification:7 registrationInfo:0];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    uint64_t v22 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Registering for battery status notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      *(_WORD *)long long v53 = 0;
      uint64_t v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v36);
      if (v36 != (char *)buf) {
        free(v36);
      }
    }
  }
  if (*(unsigned char *)(v2 + 1873))
  {
    [*(id *)(*(void *)(v2 + 1240) + 16) register:*(void *)(*(void *)(v2 + 1240) + 8) forNotification:11 registrationInfo:0];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    uint64_t v23 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Registering for screen lock status notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      *(_WORD *)long long v53 = 0;
      uint64_t v37 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v37);
      if (v37 != (char *)buf) {
        free(v37);
      }
    }
  }
  if (*(unsigned char *)(v2 + 1876))
  {
    [*(id *)(*(void *)(v2 + 1240) + 16) register:*(void *)(*(void *)(v2 + 1240) + 8) forNotification:15 registrationInfo:0];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    uint64_t v24 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Registering for battery saver mode status notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      *(_WORD *)long long v53 = 0;
      uint64_t v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v38);
      if (v38 != (char *)buf) {
        free(v38);
      }
    }
  }
  if (*(unsigned char *)(v2 + 1909))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    uint64_t v25 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Registering for AOP SPL notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      *(_WORD *)long long v53 = 0;
      uint64_t v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v39);
      if (v39 != (char *)buf) {
        free(v39);
      }
    }
    operator new();
  }
  if (*(unsigned char *)(v2 + 1918)) {
    operator new();
  }
  if (*(unsigned char *)(v2 + 1921)) {
    operator new();
  }
  if (*(unsigned char *)(v2 + 1924))
  {
    if (sub_1000EB1B0())
    {
      [*(id *)(*(void *)(v2 + 1248) + 16) register:*(void *)(*(void *)(v2 + 1248) + 8) forNotification:0 registrationInfo:0];
      if (qword_102418FC0 != -1) {
        dispatch_once(&qword_102418FC0, &stru_1022EDD98);
      }
      uint64_t v26 = qword_102418FC8;
      if (os_log_type_enabled((os_log_t)qword_102418FC8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Registering for backlight state notifications", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FC0 != -1) {
          dispatch_once(&qword_102418FC0, &stru_1022EDD98);
        }
        *(_WORD *)long long v53 = 0;
        uint64_t v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v27);
LABEL_265:
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
    }
    else
    {
      if (qword_102418FC0 != -1) {
        dispatch_once(&qword_102418FC0, &stru_1022EDD98);
      }
      uint64_t v28 = qword_102418FC8;
      if (os_log_type_enabled((os_log_t)qword_102418FC8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Backlight state notifications are not available on this platform", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FC0 != -1) {
          dispatch_once(&qword_102418FC0, &stru_1022EDD98);
        }
        *(_WORD *)long long v53 = 0;
        uint64_t v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v27);
        goto LABEL_265;
      }
    }
  }
  if (*(unsigned char *)(v2 + 1927)) {
    operator new();
  }
  if (*(unsigned char *)(v2 + 1930)) {
    operator new();
  }
  if (*(unsigned char *)(v2 + 1933)) {
    operator new();
  }
  if (*(unsigned char *)(v2 + 1936)) {
    operator new();
  }
  if (*(unsigned char *)(v2 + 1951))
  {
    [*(id *)(*(void *)(v2 + 1216) + 16) register:*(void *)(*(void *)(v2 + 1216) + 8) forNotification:0 registrationInfo:0];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    uint64_t v29 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Registering for Fitness Machine update notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      *(_WORD *)long long v53 = 0;
      unint64_t v40 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v40);
      if (v40 != (char *)buf) {
        free(v40);
      }
    }
  }
  if (*(unsigned char *)(v2 + 2028)) {
    operator new();
  }
  if (*(unsigned char *)(v2 + 1945)) {
    operator new();
  }
}

void sub_100C16D80(_Unwind_Exception *a1)
{
}

void sub_100C16EF8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1770))
  {
    [*(id *)(*(void *)(a1 + 1144) + 16) register:*(void *)(*(void *)(a1 + 1144) + 8) forNotification:2 registrationInfo:0];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    uint64_t v2 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Logging body metrics", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      LOWORD(v49) = 0;
      uint64_t v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1721))
  {
    [*(id *)(*(void *)(a1 + 880) + 16) register:*(void *)(*(void *)(a1 + 880) + 8) forNotification:3 registrationInfo:0];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    uint64_t v3 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Logging elevation change active", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1)
      {
LABEL_225:
        LOWORD(v49) = 0;
        int v45 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v45);
        if (v45 != (char *)buf) {
          free(v45);
        }
        goto LABEL_21;
      }
LABEL_227:
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      goto LABEL_225;
    }
  }
  else if (*(unsigned char *)(a1 + 1724))
  {
    [*(id *)(*(void *)(a1 + 880) + 16) register:*(void *)(*(void *)(a1 + 880) + 8) forNotification:7 registrationInfo:0];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    uint64_t v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Logging elevation change spectator", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1) {
        goto LABEL_225;
      }
      goto LABEL_227;
    }
  }
LABEL_21:
  if (*(unsigned char *)(a1 + 1727))
  {
    [*(id *)(*(void *)(a1 + 880) + 16) register:*(void *)(*(void *)(a1 + 880) + 8) forNotification:5 registrationInfo:0];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    uint64_t v5 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Logging coarse elevation change", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      LOWORD(v49) = 0;
      uint64_t v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1730))
  {
    [*(id *)(*(void *)(a1 + 888) + 16) register:*(void *)(*(void *)(a1 + 888) + 8) forNotification:5 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 888) + 16) register:*(void *)(*(void *)(a1 + 888) + 8) forNotification:6 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 888) + 16) register:*(void *)(*(void *)(a1 + 888) + 8) forNotification:10 registrationInfo:0];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    BOOL v6 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Logging HR spectator", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      LOWORD(v49) = 0;
      uint64_t v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v32);
      if (v32 != (char *)buf) {
        free(v32);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1733))
  {
    [*(id *)(*(void *)(a1 + 896) + 16) register:*(void *)(*(void *)(a1 + 896) + 8) forNotification:0 registrationInfo:0];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    BOOL v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Loggging BT vehicle connections", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      LOWORD(v49) = 0;
      char v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1761) || *(unsigned char *)(a1 + 1764) || *(_DWORD *)(a1 + 1740))
  {
    [*(id *)(*(void *)(a1 + 1160) + 16) register:*(void *)(*(void *)(a1 + 1160) + 8) forNotification:22 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 1160) + 16) register:*(void *)(*(void *)(a1 + 1160) + 8) forNotification:4 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 1160) + 16) register:*(void *)(*(void *)(a1 + 1160) + 8) forNotification:33 registrationInfo:0];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    int v8 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Logging WiFi locations", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      LOWORD(v49) = 0;
      uint64_t v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1767))
  {
    [*(id *)(*(void *)(a1 + 1160) + 16) register:*(void *)(*(void *)(a1 + 1160) + 8) forNotification:23 registrationInfo:0];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    char v9 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Logging Buffered Odometer Locations", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      LOWORD(v49) = 0;
      uint64_t v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v34);
      if (v34 != (char *)buf) {
        free(v34);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1773))
  {
    [*(id *)(*(void *)(a1 + 880) + 16) register:*(void *)(*(void *)(a1 + 880) + 8) forNotification:4 registrationInfo:0];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    long long v10 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Logging GPS odometer", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      LOWORD(v49) = 0;
      unint64_t v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
    }
  }
  if (*(_DWORD *)(a1 + 1740))
  {
    [*(id *)(*(void *)(a1 + 1096) + 16) register:*(void *)(*(void *)(a1 + 1096) + 8) forNotification:5 registrationInfo:0];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    uint64_t v11 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Logging GPS locations (leech)", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      LOWORD(v49) = 0;
      uint64_t v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v36);
      if (v36 != (char *)buf) {
        free(v36);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1782))
  {
    [*(id *)(*(void *)(a1 + 1152) + 16) register:*(void *)(*(void *)(a1 + 1152) + 8) forNotification:5 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 1152) + 16) register:*(void *)(*(void *)(a1 + 1152) + 8) forNotification:6 registrationInfo:0];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    char v12 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Logging motion state hints, e.g., vibration and touch events", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      LOWORD(v49) = 0;
      uint64_t v37 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v37);
      if (v37 != (char *)buf) {
        free(v37);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1779)) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 1785))
  {
    [*(id *)(*(void *)(a1 + 1168) + 16) register:*(void *)(*(void *)(a1 + 1168) + 8) forNotification:0 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 1168) + 16) register:*(void *)(*(void *)(a1 + 1168) + 8) forNotification:1 registrationInfo:0];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    uint64_t v13 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Logging watch orientation settings", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      LOWORD(v49) = 0;
      uint64_t v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v38);
      if (v38 != (char *)buf) {
        free(v38);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1791))
  {
    int v14 = operator new(0x20uLL);
    *int v14 = off_1022EE820;
    v14[1] = sub_100C2978C;
    _OWORD v14[2] = 0;
    _DWORD v14[3] = a1;
    char v51 = v14;
    operator new();
  }
  if (*(unsigned char *)(a1 + 1800))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    uint64_t v15 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Registering for lois", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      LOWORD(v49) = 0;
      uint64_t v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v39);
      if (v39 != (char *)buf) {
        free(v39);
      }
    }
    [*(id *)(a1 + 2048) startMonitoringVisitsForClient:*(void *)(a1 + 2040)];
    [*(id *)(a1 + 2048) startLeechingLowConfidenceVisitsForClient:*(void *)(a1 + 2040)];
  }
  if (*(unsigned char *)(a1 + 1839))
  {
    [*(id *)(*(void *)(a1 + 1208) + 16) register:*(void *)(*(void *)(a1 + 1208) + 8) forNotification:0 registrationInfo:0];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    id v16 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "CLMotionLogger: Registering for Step Count Updates", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      LOWORD(v49) = 0;
      unint64_t v40 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v40);
      if (v40 != (char *)buf) {
        free(v40);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1842))
  {
    [*(id *)(*(void *)(a1 + 1184) + 16) register:*(void *)(*(void *)(a1 + 1184) + 8) forNotification:0 registrationInfo:0];
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    id v17 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Registering for SignalEnvironment notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      LOWORD(v49) = 0;
      unint64_t v41 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v41);
      if (v41 != (char *)buf) {
        free(v41);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1845))
  {
    uint64_t v18 = *(void *)(a1 + 1120);
    if (v18) {
      [*(id *)(v18 + 16) register:*(void *)(v18 + 8) forNotification:36 registrationInfo:0];
    }
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    __int16 v19 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Registering for Gnss Availability notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      LOWORD(v49) = 0;
      unint64_t v42 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v42);
      if (v42 != (char *)buf) {
        free(v42);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1848))
  {
    uint64_t v20 = *(void *)(a1 + 1128);
    if (v20) {
      [*(id *)(v20 + 16) register:*(void *)(v20 + 8) forNotification:5 registrationInfo:0];
    }
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022EDD38);
    }
    uint64_t v21 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Registering for Gnss Leech Location notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
      LOWORD(v49) = 0;
      uint64_t v43 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v43);
      if (v43 != (char *)buf) {
        free(v43);
      }
    }
  }
  if (*(unsigned char *)(a1 + 1851) && !*(unsigned char *)(a1 + 1136))
  {
    uint64_t v22 = sub_1008B6998();
    sub_100134750(__p, "CLMotionLogger");
    id v23 = [objc_msgSend(*(id *)(a1 + 248), "silo") queue];
    v48[0] = off_1022EE8B8;
    v48[1] = a1;
    v48[3] = v48;
    sub_1008B6CBC(v22, (uint64_t)__p, (uint64_t)v23, (uint64_t)v48);
    sub_1006821B0(v48);
    if (v47 < 0) {
      operator delete(__p[0]);
    }
    *(unsigned char *)(a1 + 1136) = 1;
  }
  if (*(unsigned char *)(a1 + 1854)) {
    [*(id *)(a1 + 2056) registerForMobilityBoutMetrics:*(void *)(a1 + 2040)];
  }
  if (*(unsigned char *)(a1 + 1903)) {
    [*(id *)(a1 + 2056) registerForWalkingSteadiness:*(void *)(a1 + 2040)];
  }
  if (*(unsigned char *)(a1 + 1857))
  {
    [*(id *)(a1 + 248) silo];
    operator new();
  }
  if (*(unsigned char *)(a1 + 1915))
  {
    [*(id *)(a1 + 248) silo];
    operator new();
  }
  if (*(unsigned char *)(a1 + 1860)) {
    sub_100C22670(a1);
  }
  if (*(unsigned char *)(a1 + 1894)) {
    operator new();
  }
  double v24 = *(double *)(a1 + 1992);
  if (*(unsigned char *)(a1 + 1957) && v24 <= 0.1)
  {
    double v24 = 0.1;
  }
  else if (v24 <= 0.0)
  {
    goto LABEL_142;
  }
  sub_10100E3B0(a1, [*(id *)(a1 + 248) silo], v24);
  if (qword_1024192E0 != -1) {
    dispatch_once(&qword_1024192E0, &stru_1022EDDB8);
  }
  uint64_t v25 = qword_1024192E8;
  if (os_log_type_enabled((os_log_t)qword_1024192E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 134349056;
    double v53 = v24;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Logging InertialOdometry at interval, %{public}f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192E0 != -1) {
      dispatch_once(&qword_1024192E0, &stru_1022EDDB8);
    }
    int v49 = 134349056;
    double v50 = v24;
    uint64_t v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v29);
    if (v29 != (char *)buf) {
      free(v29);
    }
  }
LABEL_142:
  if (*(unsigned char *)(a1 + 1900)) {
    [*(id *)(*(void *)(a1 + 1224) + 16) register:*(void *)(*(void *)(a1 + 1224) + 8) forNotification:0 registrationInfo:0];
  }
  if (*(unsigned char *)(a1 + 1948))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022EDDD8);
    }
    uint64_t v26 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Logging GNSS mode of operation status", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022EDDD8);
      }
      LOWORD(v49) = 0;
      uint64_t v44 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v44);
      if (v44 != (char *)buf) {
        free(v44);
      }
    }
    uint64_t v27 = *(void *)(a1 + 1112);
    if (v27) {
      [*(id *)(v27 + 16) register:*(void *)(v27 + 8) forNotification:41 registrationInfo:0];
    }
  }
  if (*(unsigned char *)(a1 + 2025))
  {
    if (!*(void *)(a1 + 520)) {
      operator new();
    }
  }
}