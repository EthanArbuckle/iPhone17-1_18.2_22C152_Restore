uint64_t sub_101A48D3C(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7;
  int v9;
  int v10;

  v7 = sub_10005C4C4(a4);
  if (v7)
  {
    v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_101A48DF0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_101A48E38(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_101A48E80(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_101A48EC8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (!result)
  {
    int v3 = objc_alloc_init(CLNotifierServiceAdapter);
    *(void *)(a1 + 48) = v3;
    [(CLNotifierServiceAdapter *)v3 setValid:1];
    [*(id *)(a1 + 48) setAdaptedNotifier:a1];
    return *(void *)(a1 + 48);
  }
  return result;
}

uint64_t sub_101A48F18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_1024898F8);
}

uint64_t sub_101A48F44(uint64_t a1, int a2, int *a3, char *a4)
{
  int v39 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        v13 = (uint64_t *)v7;
      }
      else {
        v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)v40 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          v24 = (uint64_t *)v18;
        }
        else {
          v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          v29 = (uint64_t *)v25;
        }
        else {
          v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v38 = v26;
        uint64_t v34 = *(void *)(v26 + 56);
        char v35 = *a4;
        *(void *)buf = &v39;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v35;
        buf[0] = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_101A4AF2C();
        }
        if (v34) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        *(_DWORD *)buf = *a3;
        *((unsigned char *)sub_101A4B0D0((uint64_t **)(a1 + 56), v17, buf) + 80) = 0;
        *(_DWORD *)buf = *a3;
        v30 = sub_101A4B0D0((uint64_t **)(a1 + 56), *(int *)buf, buf);
        v31 = (std::__shared_weak_count *)v30[9];
        v30[8] = 0;
        v30[9] = 0;
        if (v31) {
          sub_1000DB0A0(v31);
        }
        char v32 = *a4;
        LODWORD(v38) = *a3;
        v33 = sub_101A4B0D0((uint64_t **)(a1 + 56), v38, &v38);
        *(void *)buf = &v39;
        *((unsigned char *)sub_1000EB1B8(v33 + 5, &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v40 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10234E220);
  }
  v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      v15 = (void *)*v15;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&buf[4] = v15;
    __int16 v44 = 1026;
    int v45 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10234E220);
    }
    v36 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      v36 = (void *)*v36;
    }
    *(_DWORD *)v40 = 136446466;
    *(void *)&v40[4] = v36;
    __int16 v41 = 1026;
    int v42 = a2;
    v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMotionHintLogger_Type::Notification, NotificationData_T = CLMotionHintLogger_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v37 != buf) {
      free(v37);
    }
    return 0;
  }
  return result;
}

BOOL sub_101A49390(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      v9 = (uint64_t *)v5;
    }
    else {
      v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10234E220);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)buf = 136446466;
      v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10234E220);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLMotionHintLogger_Type::Notification, NotificationData_T = CLMotionHintLogger_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_101A49614(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10234E220);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                char v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_10234E220);
                }
                v29 = a1 + 8;
                if (a1[31] < 0) {
                  v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  v30 = buf;
                }
                else {
                  v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                uint64_t v38 = v29;
                __int16 v39 = 2082;
                v40 = v30;
                v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMotionHintLogger_Type::Notification, NotificationData_T = CLMotionHintLogger_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

void sub_101A499E8(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v2 = a1 + 64;
  uint64_t v3 = v4;
  if (v4)
  {
    int v5 = *a2;
    uint64_t v6 = v2;
    do
    {
      int v7 = *(_DWORD *)(v3 + 32);
      BOOL v8 = v7 < v5;
      if (v7 >= v5) {
        int v9 = (uint64_t *)v3;
      }
      else {
        int v9 = (uint64_t *)(v3 + 8);
      }
      if (!v8) {
        uint64_t v6 = v3;
      }
      uint64_t v3 = *v9;
    }
    while (*v9);
    if (v6 != v2 && v5 >= *(_DWORD *)(v6 + 32))
    {
      BOOL v10 = *(std::__shared_weak_count **)(v6 + 72);
      *(void *)(v6 + 64) = 0;
      *(void *)(v6 + 72) = 0;
      if (v10) {
        sub_1000DB0A0(v10);
      }
    }
  }
}

uint64_t sub_101A49A3C(uint64_t a1, int *a2, unsigned char *a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  int v11 = *(unsigned char **)(v7 + 64);
  if (!v11) {
    return 0;
  }
  *a3 = *v11;
  return 1;
}

uint64_t sub_101A49A9C(uint64_t a1, int *a2, unsigned char *a3)
{
  int v6 = operator new(0x20uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = off_10234E438;
  *((unsigned char *)v6 + 24) = *a3;
  int v10 = *a2;
  uint64_t v7 = sub_101A4B0D0((uint64_t **)(a1 + 56), v10, &v10);
  int v8 = (std::__shared_weak_count *)v7[9];
  v7[8] = v6 + 3;
  v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_101A49B38(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101A49B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
}

void sub_101A49BA0(uint64_t a1, unsigned int *a2, unsigned char *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10234E220);
  }
  BOOL v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    uint64_t v11 = *a2;
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)v40 = 2082;
    *(void *)&v40[2] = "";
    *(_WORD *)&v40[10] = 2082;
    *(void *)&unsigned char v40[12] = "activity";
    *(_WORD *)&v40[20] = 2082;
    *(void *)&v40[22] = v10;
    *(_WORD *)&v40[30] = 2050;
    *(void *)&v40[32] = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  v13 = (uint64_t **)(a1 + 64);
  BOOL v12 = *(char **)(a1 + 64);
  int v14 = *a2;
  if (!v12) {
    goto LABEL_18;
  }
  int v15 = (uint64_t **)(a1 + 64);
  do
  {
    int v16 = *((_DWORD *)v12 + 8);
    BOOL v17 = v16 < v14;
    if (v16 >= v14) {
      BOOL v18 = (char **)v12;
    }
    else {
      BOOL v18 = (char **)(v12 + 8);
    }
    if (!v17) {
      int v15 = (uint64_t **)v12;
    }
    BOOL v12 = *v18;
  }
  while (*v18);
  if (v15 == v13 || v14 < *((_DWORD *)v15 + 8))
  {
LABEL_18:
    __p = v35;
    v35[0] = 0;
    uint64_t v36 = 0;
    int v37 = 0;
    v35[1] = 0;
    *(_DWORD *)buf = v14;
    sub_100448228((uint64_t *)v40, (uint64_t)&__p);
    *(void *)&v40[24] = v36;
    *(void *)&v40[32] = v37;
    if (v37) {
      atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v19 = v38;
    char v41 = v38;
    uint64_t v20 = (char *)operator new(0x58uLL);
    int v15 = (uint64_t **)v20;
    v32[0] = v20;
    v32[1] = (void *)(a1 + 64);
    int v21 = *(_DWORD *)buf;
    *((_DWORD *)v20 + 8) = *(_DWORD *)buf;
    uint64_t v22 = *(void *)&v40[8];
    *((void *)v20 + 5) = *(void *)v40;
    *((void *)v20 + 6) = v22;
    int v23 = v20 + 48;
    uint64_t v24 = *(void *)&v40[16];
    *((void *)v20 + 7) = *(void *)&v40[16];
    if (v24)
    {
      *(void *)(v22 + 16) = v23;
      *(void *)v40 = &v40[8];
      *(_OWORD *)&v40[8] = 0uLL;
    }
    else
    {
      *((void *)v20 + 5) = v23;
    }
    *((_OWORD *)v20 + 4) = *(_OWORD *)&v40[24];
    *(void *)&v40[24] = 0;
    *(void *)&v40[32] = 0;
    v20[80] = v19;
    char v33 = 1;
    __int16 v25 = *v13;
    int v26 = (uint64_t **)(a1 + 64);
    int v27 = (uint64_t **)(a1 + 64);
    if (*v13)
    {
      while (1)
      {
        while (1)
        {
          int v27 = (uint64_t **)v25;
          int v28 = *((_DWORD *)v25 + 8);
          if (v21 >= v28) {
            break;
          }
          __int16 v25 = *v27;
          int v26 = v27;
          if (!*v27) {
            goto LABEL_30;
          }
        }
        if (v28 >= v21) {
          break;
        }
        __int16 v25 = v27[1];
        if (!v25)
        {
          int v26 = v27 + 1;
          goto LABEL_30;
        }
      }
      int v15 = v27;
    }
    else
    {
LABEL_30:
      sub_1000EDF90((uint64_t **)(a1 + 56), (uint64_t)v27, v26, (uint64_t *)v20);
      v32[0] = 0;
    }
    sub_101A4B1B4((uint64_t)v32);
    if (*(void *)&v40[32]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&v40[32]);
    }
    sub_1000F5BB0((uint64_t)v40, *(void **)&v40[8]);
    if (v37) {
      sub_1000DB0A0(v37);
    }
    sub_1000F5BB0((uint64_t)&__p, v35[0]);
  }
  if (a4)
  {
    v29 = operator new(0x20uLL);
    v29[1] = 0;
    v29[2] = 0;
    void *v29 = off_10234E438;
    *((unsigned char *)v29 + 24) = *a3;
    v30 = (std::__shared_weak_count *)v15[9];
    v15[8] = v29 + 3;
    v15[9] = v29;
    if (!v30) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v30 = (std::__shared_weak_count *)v15[9];
  v15[8] = 0;
  v15[9] = 0;
  if (v30) {
LABEL_41:
  }
    sub_1000DB0A0(v30);
LABEL_42:
  if (v15[7]) {
    operator new();
  }
  os_activity_scope_leave(&state);
}

void sub_101A4A66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

uint64_t sub_101A4A6C0()
{
  return 1;
}

void sub_101A4A6C8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10234E220);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10234E220);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData>::listClients() [Notification_T = CLMotionHintLogger_Type::Notification, NotificationData_T = CLMotionHintLogger_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10234E220);
    }
    char v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      uint64_t v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10234E220);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData>::listClients() [Notification_T = CLMotionHintLogger_Type::Notification, NotificationData_T = CLMotionHintLogger_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    int v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        BOOL v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_10234E220);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                uint64_t v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)buf = 136315650;
              uint64_t v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10234E220);
              }
              BOOL v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData>::listClients() [Notification_T = CLMotionHintLogger_Type::Notification, NotificationData_T = CLMotionHintLogger_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            int v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                int v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                BOOL v9 = v15;
              }
              while (!v16);
            }
            BOOL v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            char v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            char v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            int v8 = v19;
          }
          while (!v16);
        }
        int v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_101A4AC74(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101A4ACA4(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_101A4ACE0(void *a1)
{
  if (a1)
  {
    sub_101A4ACE0(*a1);
    sub_101A4ACE0(a1[1]);
    sub_1000F5BB0((uint64_t)(a1 + 5), (void *)a1[6]);
    operator delete(a1);
  }
}

void sub_101A4AD38(void *a1)
{
  if (a1)
  {
    sub_101A4AD38(*a1);
    sub_101A4AD38(a1[1]);
    sub_100445A78((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void *sub_101A4AD8C(void *a1, int *a2, int *a3, char *a4, uint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10234E370;
  sub_100A29210((uint64_t)(a1 + 3), *a2, *a3, *a4, *a5);
  return a1;
}

void sub_101A4ADE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_101A4ADF8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10234E370;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101A4AE18(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10234E370;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_101A4AE70(uint64_t a1)
{
  sub_1019D78CC(a1);

  operator delete();
}

uint64_t sub_101A4AEA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a3, *(void *)(a1 + 24));
}

void sub_101A4AEB8(uint64_t a1)
{
  sub_1019D78CC(a1);

  operator delete();
}

uint64_t sub_101A4AEF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a3, *(void *)(a1 + 24));
}

void sub_101A4AEFC(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_101A4AF2C()
{
}

unsigned char *sub_101A4AFD8(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_101A4B22C(a4);
    uint64_t v10 = *(void *)a3 + 80;
    uint64_t v11 = (uint64_t **)(*(void *)a3 + 40);
    int v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    BOOL result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

uint64_t **sub_101A4B0D0(uint64_t **a1, int a2, _DWORD *a3)
{
  int v6 = a1 + 1;
  char v5 = a1[1];
  uint64_t v7 = a1 + 1;
  uint64_t v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2) {
          break;
        }
        char v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      char v5 = v8[1];
      if (!v5)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    uint64_t v10 = operator new(0x58uLL);
    v12[1] = v6;
    v10[8] = *a3;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    *((void *)v10 + 5) = v10 + 12;
    *((void *)v10 + 8) = 0;
    char v13 = 1;
    sub_1000EDF90(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    sub_101A4B1B4((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_101A4B1B4(uint64_t a1)
{
  v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100445A78((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t sub_101A4B20C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_101A4B22C(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      return 0;
    }
    id v4 = [a1 binaryVersion];
    [a1 sizeOfType];
    if (!v4) {
      goto LABEL_25;
    }
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10234E408);
      }
      char v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218498;
        *(void *)int v14 = v4;
        *(_WORD *)&v14[8] = 2048;
        *(void *)&v14[10] = 0;
        *(_WORD *)&v14[18] = 2080;
        *(void *)&v14[20] = (unint64_t)"N23CLMotionHintLogger_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_42;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10234E408);
      }
      int v9 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134218498;
        *(void *)int v14 = v4;
        *(_WORD *)&v14[8] = 2048;
        *(void *)&v14[10] = 0;
        *(_WORD *)&v14[18] = 2080;
        *(void *)&v14[20] = (unint64_t)"N23CLMotionHintLogger_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_42;
      }
    }
    dispatch_once(&qword_102418F90, &stru_10234E408);
LABEL_42:
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionHintLogger_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v8);
LABEL_43:
    if (v8 != (char *)buf) {
      free(v8);
    }
    return 0;
  }
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10234E408);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218498;
        *(void *)int v14 = v2;
        *(_WORD *)&v14[8] = 2048;
        *(void *)&v14[10] = 0;
        *(_WORD *)&v14[18] = 2080;
        *(void *)&v14[20] = (unint64_t)"N23CLMotionHintLogger_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_34;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10234E408);
      }
      uint64_t v7 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134218498;
        *(void *)int v14 = v2;
        *(_WORD *)&v14[8] = 2048;
        *(void *)&v14[10] = 0;
        *(_WORD *)&v14[18] = 2080;
        *(void *)&v14[20] = (unint64_t)"N23CLMotionHintLogger_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_34;
      }
    }
    dispatch_once(&qword_102418F90, &stru_10234E408);
LABEL_34:
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionHintLogger_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v8);
    goto LABEL_43;
  }
  if (![a1 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a1, "compatibilityInfo"), "isEqual:", &off_1023954F8))
  {
    if (objc_msgSend(objc_msgSend(a1, "serialized"), "length") != (id)1)
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10234E408);
      }
      uint64_t v10 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)int v14 = 0;
        *(_WORD *)&v14[4] = 2082;
        *(void *)&v14[6] = "";
        *(_WORD *)&v14[14] = 2082;
        *(void *)&v14[16] = "assert";
        *(_WORD *)&v14[24] = 2081;
        *(void *)&v14[26] = "sizeof(Object_T) == podContainer.serialized.length";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_102418F90 != -1) {
          dispatch_once(&qword_102418F90, &stru_10234E408);
        }
      }
      uint64_t v11 = qword_102418F98;
      if (os_signpost_enabled((os_log_t)qword_102418F98))
      {
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)int v14 = 0;
        *(_WORD *)&v14[4] = 2082;
        *(void *)&v14[6] = "";
        *(_WORD *)&v14[14] = 2082;
        *(void *)&v14[16] = "assert";
        *(_WORD *)&v14[24] = 2081;
        *(void *)&v14[26] = "sizeof(Object_T) == podContainer.serialized.length";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_102418F90 != -1) {
          dispatch_once(&qword_102418F90, &stru_10234E408);
        }
      }
      int v12 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)int v14 = 0;
        *(_WORD *)&v14[4] = 2082;
        *(void *)&v14[6] = "";
        *(_WORD *)&v14[14] = 2082;
        *(void *)&v14[16] = "assert";
        *(_WORD *)&v14[24] = 2081;
        *(void *)&v14[26] = "sizeof(Object_T) == podContainer.serialized.length";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }
      abort_report_np();
    }
    [a1 setCppObjectPtr:[objc_msgSend(objc_msgSend(a1, "serialized"), "bytes") bytes]];
  }
LABEL_25:

  return [a1 cppObjectPtr];
}

void sub_101A4BB28(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10234E438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101A4BB48(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10234E438;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_101A4BBA4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_101A4BF70(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onHeartRateNotification:a2 data:a3];
}

void sub_101A4C134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101A4C23C(id a1)
{
  qword_102419198 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

id sub_101A4C3E8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onWifiScanNotification:a2 data:a3];
}

uint64_t sub_101A4C568(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_10170140C(v12);
  [*(id *)(v4 + 32) makeSafeCFAbsoluteTime:CFAbsoluteTimeGetCurrent()];
  v13 |= 1u;
  v12[77] = v5;
  sub_101724398((uint64_t)v12);
  sub_1017614B8(v12[447]);
  if (v2)
  {
    (*(void (**)(long long *__return_ptr, uint64_t))(v2 + 16))(&v10, v2);
    if (*((void *)&v10 + 1) != (void)v11)
    {
      *(void *)buf = **((void **)&v10 + 1);
      id v6 = (id)sub_1000D8908((uint64_t)buf);
      unint64_t v7 = 0;
      int v8 = -1;
      while ((unint64_t)[*(id *)(*(void *)(v4 + 32) + 56) count] > v7)
      {
        if ([[*(id *)(*(void *)(v4 + 32) + 56) objectAtIndexedSubscript:v7] unsignedLongLongValue] == v6)int v8 = v7; {
        ++v7;
        }
      }
      if (v8 == -1)
      {
        [*(id *)(*(void *)(v4 + 32) + 56) addObject:+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v6)];
        [*(id *)(*(void *)(v4 + 32) + 56) count];
      }
      sub_10175A80C();
    }
  }
  else
  {
    long long v10 = 0u;
    long long v11 = 0u;
  }
  sub_1016F8A70(*(void *)(*(void *)(v4 + 32) + 16), (uint64_t)v12);
  *(void *)buf = (char *)&v10 + 8;
  sub_1000D7F78((void ***)buf);
  return sub_101706914((PB::Base *)v12);
}

void sub_101A4C968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  STACK[0xEA0] = a5;
  sub_1000D7F78((void ***)&STACK[0xEA0]);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101A4CA9C(id a1)
{
  qword_102419198 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void sub_101A4CC84()
{
}

id sub_101A4CCA8(uint64_t a1, void *a2)
{
  return _[a2 onPressureData:a1];
}

void sub_101A4CFAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101A4D0B4(id a1)
{
  qword_102419198 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void *sub_101A4D0E4(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_10234BF80;
  id v9 = a5;
  *a1 = off_10234E510;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_101A4D26C;
  aBlock[3] = &unk_1022B6BE8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_101A4D280;
  v12[3] = &unk_1022B6C10;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_101A4D244(_Unwind_Exception *a1)
{
  sub_1019D78CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101A4D26C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_101A4D280(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_101A4D29C(uint64_t a1)
{
  sub_101A4D580(a1);

  operator delete();
}

id sub_101A4D2D4(void *a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x10) {
    size_t v8 = 16;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x11)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10234E538);
    }
    id v9 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      unint64_t v29 = (unint64_t)"N10CLPressure6SampleE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v30 = 2048;
      uint64_t v31 = 16;
      __int16 v32 = 2048;
      unint64_t v33 = a4;
      __int16 v34 = 1024;
      int v35 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234E538);
      }
      int v20 = 136315906;
      unint64_t v21 = (unint64_t)"N10CLPressure6SampleE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v22 = 2048;
      uint64_t v23 = 16;
      __int16 v24 = 2048;
      unint64_t v25 = a4;
      __int16 v26 = 1024;
      int v27 = a2;
      char v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLPressure::Sample>::dispatchData(int, const void *, size_t) [T = CLPressure::Sample]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  char v13 = (void *)a1[4];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_101A4D5FC;
  v16[3] = &unk_1022F1228;
  v16[4] = v12;
  v16[5] = v11;
  long long v17 = __dst;
  uint64_t v18 = v10;
  return [v13 async:v16];
}

uint64_t sub_101A4D580(uint64_t a1)
{
  *(void *)a1 = off_10234E510;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1019D78CC(a1);
}

uint64_t sub_101A4D5FC(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1[4] + 16))();
  if (result)
  {
    uint64_t v3 = (uint64_t (*)(void *, uint64_t))a1[5];
    uint64_t v4 = a1[8];
    return v3(a1 + 6, v4);
  }
  return result;
}

void sub_101A4D658(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_101A4DB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_101A4E04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20) {
    (*(void (**)(uint64_t))(*(void *)a20 + 8))(a20);
  }
  _Unwind_Resume(exception_object);
}

id sub_101A4E090(uint64_t a1)
{
  return _[*(id *)(a1 + 32) onDeferredStartTimerSpecifyTriggerDelay:1.79769313e308];
}

id sub_101A4E36C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onMotionStateObserverNotification:a2 data:a3];
}

id sub_101A4E82C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) onDeferredStartTimerSpecifyTriggerDelay:*(double *)(a1 + 40)];
}

id sub_101A4EEB8(uint64_t a1)
{
  return [*(id *)(a1 + 32) onDeferredStopTimerShouldPublish:1];
}

void sub_101A4EF80(id a1)
{
  qword_1024191B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DrivingRecorder");
}

void sub_101A4EFB4()
{
}

CFStringRef sub_101A4EFC8()
{
  return @"com.apple.locationd.CLDrivingRecorderPublisher";
}

CFStringRef sub_101A4EFD4()
{
  return @"CLDrivingRecorderPublisherSubjectUUID";
}

CFStringRef sub_101A4EFE0()
{
  return @"CLDrivingRecorderPublisherSubjectToken";
}

void *sub_101A4EFEC@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "DrivingRecording");
}

CFStringRef sub_101A4EFFC()
{
  return @"CLDrivingRecorderPublishedCount";
}

const char *sub_101A4F008()
{
  return "DrivingRecorderRateLimitingSampling";
}

uint64_t sub_101A4F014()
{
  return 0;
}

const char *sub_101A4F01C()
{
  return "DrivingRecorderIntervalCount";
}

const char *sub_101A4F028()
{
  return "DrivingRecorderPublisherMaxPerUUID";
}

uint64_t sub_101A4F034()
{
  return 10;
}

uint64_t sub_101A4F03C()
{
  return 30;
}

const char *sub_101A4F044()
{
  return "DrivingRecorderRateLimitingDisable";
}

uint64_t sub_101A4F050()
{
  return 0;
}

const char *sub_101A4F058()
{
  return "DrivingRecorderRateLimitingDisableInternalInstallBypass";
}

uint64_t sub_101A4F064()
{
  return 1;
}

const char *sub_101A4F06C()
{
  return "DrivingRecorderSamplingInterval";
}

uint64_t sub_101A4F078()
{
  return 3;
}

const char *sub_101A4F080()
{
  return "DrivingRecorderNumSamplesPerInterval";
}

uint64_t sub_101A4F08C()
{
  return 0;
}

const char *sub_101A4F094()
{
  return "DrivingRecorderRecordingFileCountMax";
}

uint64_t sub_101A4F0A0()
{
  return 9;
}

double sub_101A4F0A8()
{
  return 0.0;
}

double sub_101A4F0B0()
{
  return 1.0;
}

double sub_101A4F0B8()
{
  return 0.0;
}

const char *sub_101A4F0C0()
{
  return "DrivingRecorderListenersHeartRateDisable";
}

uint64_t sub_101A4F0CC()
{
  return 1;
}

const char *sub_101A4F0D4()
{
  return "DrivingRecorderListenersForceActiveDisable";
}

uint64_t sub_101A4F0E0()
{
  return 1;
}

void sub_101A4F0E8(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)sub_101A1AD10(a1, a2);
  *uint64_t v2 = off_10234E6A0;
  sub_101A4F1AC((uint64_t)v2);
}

void sub_101A4F198(_Unwind_Exception *a1)
{
  sub_101A1E9FC(v1);
  _Unwind_Resume(a1);
}

void sub_101A4F1AC(uint64_t a1)
{
  __p = 0;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  sub_101A1DD1C(a1);
}

void sub_101A4F220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_101A4F240(uint64_t a1, void *__dst)
{
  int v2 = *(unsigned __int8 *)(a1 + 256);
  if (*(unsigned char *)(a1 + 256)) {
    memcpy(__dst, (const void *)(a1 + 568), 0x140uLL);
  }
  return v2 != 0;
}

void sub_101A4F280(uint64_t a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v3 = *(void *)(a1 + 288);
  uint64_t v4 = *(void *)(a1 + 296);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 320);
  BOOL v16 = *(uint64_t (****)(void))(a1 + 312);
  long long v17 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_101A3DCD0(v3, v4, &v16, (uint64_t)&__p);
  if (v17) {
    sub_1000DB0A0(v17);
  }
  long long v14 = 0uLL;
  uint64_t v15 = 0;
  sub_100AC6940((float *)__p, v19, *(void *)(a1 + 552), *(unsigned int *)(a1 + 560) | (unint64_t)&_mh_execute_header, (float *)&v14);
  *(_DWORD *)(a1 + 568) = 1;
  *(void *)(a1 + 576) = *(void *)(a1 + 280);
  *(CFAbsoluteTime *)(a1 + 584) = Current;
  id v6 = *(float **)(a1 + 288);
  unint64_t v7 = *(float **)(a1 + 296);
  if (v6 == v7)
  {
    float v9 = 3.4028e38;
    float v8 = 1.1755e-38;
  }
  else
  {
    float v8 = 1.1755e-38;
    float v9 = 3.4028e38;
    do
    {
      float v10 = *v6;
      v6 += 8;
      float v11 = v10;
      if (v10 < v9) {
        float v9 = v11;
      }
      if (v11 > v8) {
        float v8 = v11;
      }
    }
    while (v6 != v7);
  }
  *(float *)(a1 + 592) = v9;
  *(float *)(a1 + 596) = v8;
  *(_OWORD *)(a1 + 600) = v14;
  *(void *)(a1 + 616) = v15;
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10234E808);
  }
  uint64_t v12 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Linear gyro database computed fit.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234E808);
    }
    char v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGyroCalibrationDatabaseLocalLinear::computeFit()", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  *(unsigned char *)(a1 + 256) = 1;
  if (__p)
  {
    char v19 = (float *)__p;
    operator delete(__p);
  }
}

void sub_101A4F50C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101A4F548(uint64_t a1)
{
  sub_101A1E9FC(a1);

  operator delete();
}

uint64_t sub_101A4F580()
{
  return 0;
}

uint64_t sub_101A4F588()
{
  return 1;
}

void sub_101A4F590(id a1)
{
  off_1024190B8 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_101A4FAD8()
{
  sub_1019D78CC(v0);
  operator delete();
}

id sub_101A4FB28(uint64_t a1, void *a2)
{
  return _[a2 onMagnetometerData:a1];
}

void sub_101A4FE3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101A4FF44(id a1)
{
  qword_102419198 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

uint64_t sub_101A4FF74(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_101A4FF88(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_101A4FFA4(uint64_t a1)
{
  sub_101A5028C(a1);

  operator delete();
}

id sub_101A4FFDC(void *a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x18) {
    size_t v8 = 24;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x19)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10234E898);
    }
    float v9 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      unint64_t v31 = (unint64_t)"N14CLMagnetometer6SampleE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v32 = 2048;
      uint64_t v33 = 24;
      __int16 v34 = 2048;
      unint64_t v35 = a4;
      __int16 v36 = 1024;
      int v37 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234E898);
      }
      int v22 = 136315906;
      unint64_t v23 = (unint64_t)"N14CLMagnetometer6SampleE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v24 = 2048;
      uint64_t v25 = 24;
      __int16 v26 = 2048;
      unint64_t v27 = a4;
      __int16 v28 = 1024;
      int v29 = a2;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLMagnetometer::Sample>::dispatchData(int, const void *, size_t) [T = CLMagnetometer::Sample]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  char v13 = (void *)a1[4];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_101A50308;
  v16[3] = &unk_1022EE9C0;
  v16[4] = v12;
  v16[5] = v11;
  long long v17 = __dst;
  uint64_t v18 = v21;
  uint64_t v19 = v10;
  return [v13 async:v16];
}

uint64_t sub_101A5028C(uint64_t a1)
{
  *(void *)a1 = off_10234E858;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1019D78CC(a1);
}

uint64_t sub_101A50308(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1[4] + 16))();
  if (result)
  {
    uint64_t v3 = (uint64_t (*)(void *, uint64_t))a1[5];
    uint64_t v4 = a1[9];
    return v3(a1 + 6, v4);
  }
  return result;
}

void sub_101A50364(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_101A50394()
{
}

void sub_101A503C0()
{
}

void sub_101A503EC()
{
}

void sub_101A50418()
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10229E160);
  }
  if (sub_1001DB31C())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"availabilityTileParams must not be nil inside availableVenuesState\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10229E160);
    }
  }
  if (sub_1001DB398())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v1, v2, v3, "availabilityTileParams must not be nil inside availableVenuesState", "{\"msg%{public}.0s\":\"availabilityTileParams must not be nil inside availableVenuesState\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10229E160);
    }
  }
  if (sub_1001DB37C())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"availabilityTileParams must not be nil inside availableVenuesState\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
  }
}

#error "101A50620: call analysis failed (funcsize=74)"

#error "101A50794: call analysis failed (funcsize=74)"

#error "101A50908: call analysis failed (funcsize=74)"

#error "101A50A7C: call analysis failed (funcsize=74)"

void sub_101A50B74()
{
}

void sub_101A50BA0()
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_10229E2E8);
  }
  if (sub_1001DE4BC())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"min_dist should not be infinity\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10229E2E8);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v0 + 1544)))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v3, v4, v5, "min_dist should not be infinity", "{\"msg%{public}.0s\":\"min_dist should not be infinity\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10229E2E8);
    }
  }
  if (sub_1001DE514())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v6, v7, "{\"msg%{public}.0s\":\"min_dist should not be infinity\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
  }
}

void sub_101A50D1C()
{
  if (qword_102419600 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001DE4BC())
    {
      sub_1001DB29C();
      sub_1001DE4DC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"distanceThresholdVector must not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10229E2E8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1544)))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v3, v4, v5, "distanceThresholdVector must not be empty", "{\"msg%{public}.0s\":\"distanceThresholdVector must not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10229E2E8);
      }
    }
    if (sub_1001DE514())
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v6, v7, "{\"msg%{public}.0s\":\"distanceThresholdVector must not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419600, &stru_10229E2E8);
  }
}

void sub_101A50EA8()
{
  if (qword_102419600 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001DE4BC())
    {
      sub_1001DB29C();
      sub_1001DE4DC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"minNumCluster must be greater than zero\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10229E2E8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1544)))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v3, v4, v5, "minNumCluster must be greater than zero", "{\"msg%{public}.0s\":\"minNumCluster must be greater than zero\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10229E2E8);
      }
    }
    if (sub_1001DE514())
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v6, v7, "{\"msg%{public}.0s\":\"minNumCluster must be greater than zero\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419600, &stru_10229E2E8);
  }
}

void sub_101A51034()
{
  __assert_rtn("operator()", "CLDistanceFunction.h", 26, "a.size() == b.size()");
}

void sub_101A51060()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229E448);
      }
    }
    uint64_t v1 = qword_102419458;
    if (os_signpost_enabled((os_log_t)qword_102419458))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Cannot localize on invalid model!", "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229E448);
      }
    }
    uint64_t v2 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_10229E448);
  }
}

uint64_t sub_101A51238(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void sub_101A51274()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Expecting some clientIDs to be passed in\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229E4A0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Expecting some clientIDs to be passed in", "{\"msg%{public}.0s\":\"Expecting some clientIDs to be passed in\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229E4A0);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1112), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Expecting some clientIDs to be passed in\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 327;
    int v20 = "deleteRecordingLabelsForClients";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationRecordingLabelsTable.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_10229E4A0);
  }
}

void sub_101A51400()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229E4A0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229E4A0);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1112), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 267;
    int v20 = "convert";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabaseColumns.h";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_10229E4A0);
  }
}

void sub_101A5158C()
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229E8E0);
  }
  uint64_t v0 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Error, localization probabilities were not sorted in descending order\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229E8E0);
    }
  }
  int v1 = qword_102419458;
  if (os_signpost_enabled((os_log_t)qword_102419458))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Error, localization probabilities were not sorted in descending order", "{\"msg%{public}.0s\":\"Error, localization probabilities were not sorted in descending order\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229E8E0);
    }
  }
  int v2 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Error, localization probabilities were not sorted in descending order\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

uint64_t sub_101A51754()
{
  sub_1001F4274();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_101A51788()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"CFType must be a CFArrayRef to convert to a const char*\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EB48);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "CFType must be a CFArrayRef to convert to a const char*", "{\"msg%{public}.0s\":\"CFType must be a CFArrayRef to convert to a const char*\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EB48);
      }
    }
    if (sub_1001F72B0())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"CFType must be a CFArrayRef to convert to a const char*\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 1303;
    int v20 = "CFValueToNativeValue";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationSettings.h";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_10229EB48);
  }
}

void sub_101A51908()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Unable to get the value from a CFNumber\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EB48);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Unable to get the value from a CFNumber", "{\"msg%{public}.0s\":\"Unable to get the value from a CFNumber\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EB48);
      }
    }
    if (sub_1001F72B0())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Unable to get the value from a CFNumber\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 1277;
    int v20 = "CFValueToNativeValue";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationSettings.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419450, &stru_10229EB48);
  }
}

void sub_101A51A80()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"CFType must be a CFNumber to convert to an int\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EB48);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "CFType must be a CFNumber to convert to an int", "{\"msg%{public}.0s\":\"CFType must be a CFNumber to convert to an int\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EB48);
      }
    }
    if (sub_1001F72B0())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"CFType must be a CFNumber to convert to an int\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 1273;
    int v20 = "CFValueToNativeValue";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationSettings.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419450, &stru_10229EB48);
  }
}

void sub_101A51BF8()
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229EDB0);
  }
  if (sub_1001E9AC4())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"invalid file protection class requested for the default CoreLocation Database\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, 0x26u);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v1 + 1112)))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v2, v3, v4, "invalid file protection class requested for the default CoreLocation Database", "{\"msg%{public}.0s\":\"invalid file protection class requested for the default CoreLocation Database\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
  }
  int v5 = *(NSObject **)(v1 + 1112);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"invalid file protection class requested for the default CoreLocation Database\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, 0x26u);
  }
}

void sub_101A51D98(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = __cxa_begin_catch(a1);
  *a3 = v4;
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229EDB0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
  {
    (*(void (**)(void *))(*(void *)v4 + 16))(v4);
    sub_1002100B8((void *)&_mh_execute_header, v5, v6, "Error converting database values. %{public}s", v7, v8, v9, v10, 2u);
  }
}

void sub_101A51E84()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"RowId not expected as timestamp column\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v1 + 1112)))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v2, v3, v4, "RowId not expected as timestamp column", "{\"msg%{public}.0s\":\"RowId not expected as timestamp column\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
    }
    uint64_t v0 = *(NSObject **)(v1 + 1112);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"RowId not expected as timestamp column\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_10229EDB0);
  }
}

void sub_101A52034(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

#error "101A520C8: call analysis failed (funcsize=73)"

void sub_101A521B4()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EEC8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EEC8);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1112), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 195;
    int v20 = "convert";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabaseColumns.h";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_10229EEC8);
  }
}

#error "101A523B8: call analysis failed (funcsize=71)"

#error "101A5251C: call analysis failed (funcsize=71)"

#error "101A52680: call analysis failed (funcsize=71)"

void sub_101A5276C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v25;
  a24 = v26;
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229F0C0);
  }
  if (sub_1001E9AC4())
  {
    sub_1001DB2F0();
    sub_100219D40((void *)&_mh_execute_header, v24, v27, "{\"msg%{public}.0s\":\"Couldn't find key: onesided_jaccard\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F0C0);
    }
  }
  if (sub_100219DB4())
  {
    sub_1001DB2F0();
    sub_100219C3C((void *)&_mh_execute_header, v24, v28, v29, "Couldn't find key: onesided_jaccard", "{\"msg%{public}.0s\":\"Couldn't find key: onesided_jaccard\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F0C0);
    }
  }
  if (sub_1001F72B0())
  {
    sub_1001DB2F0();
    sub_100219D28((void *)&_mh_execute_header, v24, v30, "{\"msg%{public}.0s\":\"Couldn't find key: onesided_jaccard\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100219E80();
}

void sub_101A528DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v26;
  a24 = v27;
  uint64_t v29 = v28;
  sub_100219E6C();
  if (!v30) {
    dispatch_once(&qword_102419450, &stru_10229F0C0);
  }
  if (sub_100219D58())
  {
    sub_100219C98();
    sub_100219D40((void *)&_mh_execute_header, v24, v31, "{\"msg%{public}.0s\":\"No per_source_params provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v25 + 1104) != -1) {
      dispatch_once(&qword_102419450, &stru_10229F0C0);
    }
  }
  if (sub_100219E54())
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v24, v32, v33, "No per_source_params provided in dictionary", "{\"msg%{public}.0s\":\"No per_source_params provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v25 + 1104) != -1) {
      dispatch_once(&qword_102419450, &stru_10229F0C0);
    }
  }
  if (sub_100219DE0())
  {
    sub_100219C98();
    sub_100219D28((void *)&_mh_execute_header, v24, v34, "{\"msg%{public}.0s\":\"No per_source_params provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  _DWORD *v29 = 79;
  sub_100219E80();
}

void sub_101A52A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v26;
  a24 = v27;
  uint64_t v29 = v28;
  sub_100219E6C();
  if (!v30) {
    dispatch_once(&qword_102419450, &stru_10229F0C0);
  }
  if (sub_100219D58())
  {
    sub_100219C98();
    sub_100219D40((void *)&_mh_execute_header, v24, v31, "{\"msg%{public}.0s\":\"No e2j_kernel_thr provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v25 + 1104) != -1) {
      dispatch_once(&qword_102419450, &stru_10229F0C0);
    }
  }
  if (sub_100219E54())
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v24, v32, v33, "No e2j_kernel_thr provided in dictionary", "{\"msg%{public}.0s\":\"No e2j_kernel_thr provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v25 + 1104) != -1) {
      dispatch_once(&qword_102419450, &stru_10229F0C0);
    }
  }
  if (sub_100219DE0())
  {
    sub_100219C98();
    sub_100219D28((void *)&_mh_execute_header, v24, v34, "{\"msg%{public}.0s\":\"No e2j_kernel_thr provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  _DWORD *v29 = 76;
  sub_100219E80();
}

void sub_101A52BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v26;
  a24 = v27;
  uint64_t v29 = v28;
  sub_100219E6C();
  if (!v30) {
    dispatch_once(&qword_102419450, &stru_10229F0C0);
  }
  if (sub_100219D58())
  {
    sub_100219C98();
    sub_100219D40((void *)&_mh_execute_header, v24, v31, "{\"msg%{public}.0s\":\"No jaccard_scale_factor provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v25 + 1104) != -1) {
      dispatch_once(&qword_102419450, &stru_10229F0C0);
    }
  }
  if (sub_100219E54())
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v24, v32, v33, "No jaccard_scale_factor provided in dictionary", "{\"msg%{public}.0s\":\"No jaccard_scale_factor provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v25 + 1104) != -1) {
      dispatch_once(&qword_102419450, &stru_10229F0C0);
    }
  }
  if (sub_100219DE0())
  {
    sub_100219C98();
    sub_100219D28((void *)&_mh_execute_header, v24, v34, "{\"msg%{public}.0s\":\"No jaccard_scale_factor provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  _DWORD *v29 = 73;
  sub_100219E80();
}

#error "101A52DA4: call analysis failed (funcsize=72)"

#error "101A52F10: call analysis failed (funcsize=72)"

#error "101A5307C: call analysis failed (funcsize=72)"

void sub_101A53170(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  sub_100219E3C();
  a29 = v31;
  a30 = v32;
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_100219D78();
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"fingerprint distance type not supported\", \"type\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &buf, 0x2Cu);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F0C0);
      }
    }
    if (sub_100219DB4())
    {
      sub_100219D78();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "fingerprint distance type not supported", "{\"msg%{public}.0s\":\"fingerprint distance type not supported\", \"type\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &buf, 0x2Cu);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F0C0);
      }
    }
    if (sub_1001F72B0())
    {
      sub_100219D78();
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"fingerprint distance type not supported\", \"type\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &buf, 0x2Cu);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_10229F0C0);
  }
}

#error "101A5339C: call analysis failed (funcsize=74)"

#error "101A53510: call analysis failed (funcsize=74)"

#error "101A53688: call analysis failed (funcsize=77)"

#error "101A537FC: call analysis failed (funcsize=72)"

#error "101A53968: call analysis failed (funcsize=72)"

#error "101A53AD4: call analysis failed (funcsize=72)"

#error "101A53C40: call analysis failed (funcsize=72)"

#error "101A53DAC: call analysis failed (funcsize=72)"

#error "101A53F18: call analysis failed (funcsize=72)"

#error "101A5408C: call analysis failed (funcsize=74)"

#error "101A541F8: call analysis failed (funcsize=71)"

#error "101A5435C: call analysis failed (funcsize=71)"

void sub_101A54448()
{
}

void sub_101A54474()
{
}

void sub_101A544A0()
{
}

void sub_101A544CC()
{
}

void sub_101A544F8()
{
}

void sub_101A54524()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"semi-supervised model has no clientId value\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F790);
      }
    }
    int v1 = qword_102419458;
    if (os_signpost_enabled((os_log_t)qword_102419458))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "semi-supervised model has no clientId value", "{\"msg%{public}.0s\":\"semi-supervised model has no clientId value\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F790);
      }
    }
    int v2 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"semi-supervised model has no clientId value\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_10229F790);
  }
}

void (***sub_101A546FC(void (***a1)(void), void (***a2)(void)))(void)
{
  int v3 = a1;
  int v4 = a1;
  do
  {
    int v5 = *v4;
    v4 += 8;
    (*v5)();
    v3 += 8;
    uint64_t result = v4;
  }
  while (v4 != a2);
  return result;
}

void sub_101A54760()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F818);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F818);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1112), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 195;
    int v20 = "convert";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabaseColumns.h";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_10229F818);
  }
}

void sub_101A548EC(void *a1, void *a2)
{
  int v3 = __cxa_begin_catch(a1);
  *a2 = v3;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10229FAC8);
  }
  int v4 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v3 + 16))(v3);
    int v6 = 136446210;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error converting database values. %{public}s", (uint8_t *)&v6, 0xCu);
  }
}

void sub_101A549E8()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assigning a negative value to an unsigned type is probably not what you intended\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F988);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assigning a negative value to an unsigned type is probably not what you intended", "{\"msg%{public}.0s\":\"Assigning a negative value to an unsigned type is probably not what you intended\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F988);
      }
    }
    if (sub_1001F72B0())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assigning a negative value to an unsigned type is probably not what you intended\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    int v20 = "convert";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabaseColumns.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419450, &stru_10229F988);
  }
}

void sub_101A54B60()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Trying to assign a value that is bigger than the provided type can hold\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F988);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Trying to assign a value that is bigger than the provided type can hold", "{\"msg%{public}.0s\":\"Trying to assign a value that is bigger than the provided type can hold\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F988);
      }
    }
    if (sub_1001F72B0())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Trying to assign a value that is bigger than the provided type can hold\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 245;
    int v20 = "convert";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabaseColumns.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419450, &stru_10229F988);
  }
}

void sub_101A54CD8(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void (***sub_101A54CFC(void (***a1)(void), void (***a2)(void)))(void)
{
  int v3 = a1;
  int v4 = a1;
  do
  {
    int v5 = *v4;
    v4 += 17;
    (*v5)();
    v3 += 17;
    uint64_t result = v4;
  }
  while (v4 != a2);
  return result;
}

uint64_t sub_101A54D60(uint64_t a1, uint64_t (***a2)(void))
{
  uint64_t v3 = a1 - 136;
  int v4 = (uint64_t (***)(void))(a1 - 136);
  int v5 = (uint64_t (***)(void))(a1 - 136);
  do
  {
    int v6 = *v5;
    v5 -= 17;
    uint64_t result = (*v6)(v4);
    v3 -= 136;
    BOOL v8 = v4 == a2;
    int v4 = v5;
  }
  while (!v8);
  return result;
}

void sub_101A54DCC()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229FDC8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "must have fingerprints distance function", "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229FDC8);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1112), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 29;
    int v20 = "localize";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationNearestNeig"
          "hborAlgorithm.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_10229FDC8);
  }
}

void sub_101A54F58()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229FDC8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229FDC8);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1112), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 28;
    int v20 = "localize";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationNearestNeig"
          "hborAlgorithm.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_10229FDC8);
  }
}

void sub_101A550E4(_DWORD *a1)
{
  sub_100234FC4();
  if (!v3) {
    dispatch_once(&qword_102419450, &stru_10229FE38);
  }
  if (sub_100219D58())
  {
    sub_100219C98();
    sub_100234FD0((void *)&_mh_execute_header, v4, v5, "{\"msg%{public}.0s\":\"cluster distance threshold must not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, v7, v8, v9, v21);
    sub_100234FC4();
    if (!v3) {
      dispatch_once(&qword_102419450, &stru_10229FE38);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v1 + 1112)))
  {
    sub_100219C98();
    sub_100234F98((void *)&_mh_execute_header, v10, v11, v12, "cluster distance threshold must not be empty", "{\"msg%{public}.0s\":\"cluster distance threshold must not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v21);
    sub_100234FC4();
    if (!v3) {
      dispatch_once(&qword_102419450, &stru_10229FE38);
    }
  }
  if (sub_100219DE0())
  {
    sub_100219C98();
    sub_100234FF0((void *)&_mh_execute_header, v15, v16, "{\"msg%{public}.0s\":\"cluster distance threshold must not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v21);
  }
  *a1 = 30;
}

void sub_101A55254(_DWORD *a1)
{
  sub_100234FC4();
  if (!v3) {
    dispatch_once(&qword_102419450, &stru_10229FE38);
  }
  if (sub_100219D58())
  {
    sub_100219C98();
    sub_100234FD0((void *)&_mh_execute_header, v4, v5, "{\"msg%{public}.0s\":\"fingerprintVector must be non-empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, v7, v8, v9, v21);
    sub_100234FC4();
    if (!v3) {
      dispatch_once(&qword_102419450, &stru_10229FE38);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v1 + 1112)))
  {
    sub_100219C98();
    sub_100234F98((void *)&_mh_execute_header, v10, v11, v12, "fingerprintVector must be non-empty", "{\"msg%{public}.0s\":\"fingerprintVector must be non-empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v21);
    sub_100234FC4();
    if (!v3) {
      dispatch_once(&qword_102419450, &stru_10229FE38);
    }
  }
  if (sub_100219DE0())
  {
    sub_100219C98();
    sub_100234FF0((void *)&_mh_execute_header, v15, v16, "{\"msg%{public}.0s\":\"fingerprintVector must be non-empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v21);
  }
  *a1 = 35;
}

void sub_101A553C4(_DWORD *a1)
{
  sub_100234FC4();
  if (!v3) {
    dispatch_once(&qword_102419450, &stru_10229FE38);
  }
  if (sub_100219D58())
  {
    sub_100219C98();
    sub_100234FD0((void *)&_mh_execute_header, v4, v5, "{\"msg%{public}.0s\":\"prune threshold must be less than or equal to clusterDistance threshold\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, v7, v8, v9, v21);
    sub_100234FC4();
    if (!v3) {
      dispatch_once(&qword_102419450, &stru_10229FE38);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v1 + 1112)))
  {
    sub_100219C98();
    sub_100234F98((void *)&_mh_execute_header, v10, v11, v12, "prune threshold must be less than or equal to clusterDistance threshold", "{\"msg%{public}.0s\":\"prune threshold must be less than or equal to clusterDistance threshold\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v21);
    sub_100234FC4();
    if (!v3) {
      dispatch_once(&qword_102419450, &stru_10229FE38);
    }
  }
  if (sub_100219DE0())
  {
    sub_100219C98();
    sub_100234FF0((void *)&_mh_execute_header, v15, v16, "{\"msg%{public}.0s\":\"prune threshold must be less than or equal to clusterDistance threshold\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v21);
  }
  *a1 = 33;
}

void sub_101A55534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v26;
  a24 = v27;
  uint64_t v29 = v28;
  sub_100234FC4();
  if (!v30) {
    dispatch_once(&qword_102419450, &stru_1022A0048);
  }
  if (sub_100219D58())
  {
    sub_100219C98();
    sub_100219D40((void *)&_mh_execute_header, v24, v31, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_100234FC4();
    if (!v30) {
      dispatch_once(&qword_102419450, &stru_1022A0048);
    }
  }
  uint64_t v32 = *(NSObject **)(v25 + 1112);
  if (os_signpost_enabled(v32))
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v32, v33, v34, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_100234FC4();
    if (!v30) {
      dispatch_once(&qword_102419450, &stru_1022A0048);
    }
  }
  unint64_t v35 = *(NSObject **)(v25 + 1112);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
  {
    sub_100219C98();
    sub_100219D28((void *)&_mh_execute_header, v35, v36, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  _DWORD *v29 = 48;
  sub_100219E80();
}

void sub_101A556B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v26;
  a24 = v27;
  uint64_t v29 = v28;
  sub_100234FC4();
  if (!v30) {
    dispatch_once(&qword_102419450, &stru_1022A0048);
  }
  if (sub_100219D58())
  {
    sub_100219C98();
    sub_100219D40((void *)&_mh_execute_header, v24, v31, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_100234FC4();
    if (!v30) {
      dispatch_once(&qword_102419450, &stru_1022A0048);
    }
  }
  uint64_t v32 = *(NSObject **)(v25 + 1112);
  if (os_signpost_enabled(v32))
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v32, v33, v34, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_100234FC4();
    if (!v30) {
      dispatch_once(&qword_102419450, &stru_1022A0048);
    }
  }
  unint64_t v35 = *(NSObject **)(v25 + 1112);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
  {
    sub_100219C98();
    sub_100219D28((void *)&_mh_execute_header, v35, v36, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  _DWORD *v29 = 47;
  sub_100219E80();
}

void sub_101A5583C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v26;
  a24 = v27;
  sub_1002396F4();
  if (!v28) {
    dispatch_once(&qword_102419450, &stru_1022A0048);
  }
  if (sub_1001E9AC4())
  {
    sub_1001DB2F0();
    sub_100219D40((void *)&_mh_execute_header, v24, v29, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_1002396F4();
    if (!v28) {
      dispatch_once(&qword_102419450, &stru_1022A0048);
    }
  }
  char v30 = *(NSObject **)(v25 + 1112);
  if (os_signpost_enabled(v30))
  {
    sub_1001DB2F0();
    sub_100219C3C((void *)&_mh_execute_header, v30, v31, v32, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_1002396F4();
    if (!v28) {
      dispatch_once(&qword_102419450, &stru_1022A0048);
    }
  }
  uint64_t v33 = *(NSObject **)(v25 + 1112);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    sub_100219D28((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100219E80();
}

void sub_101A559B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v26;
  a24 = v27;
  sub_1002396F4();
  if (!v28) {
    dispatch_once(&qword_102419450, &stru_1022A0048);
  }
  if (sub_1001E9AC4())
  {
    sub_1001DB2F0();
    sub_100219D40((void *)&_mh_execute_header, v24, v29, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_1002396F4();
    if (!v28) {
      dispatch_once(&qword_102419450, &stru_1022A0048);
    }
  }
  char v30 = *(NSObject **)(v25 + 1112);
  if (os_signpost_enabled(v30))
  {
    sub_1001DB2F0();
    sub_100219C3C((void *)&_mh_execute_header, v30, v31, v32, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_1002396F4();
    if (!v28) {
      dispatch_once(&qword_102419450, &stru_1022A0048);
    }
  }
  uint64_t v33 = *(NSObject **)(v25 + 1112);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    sub_100219D28((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100219E80();
}

uint64_t sub_101A55B2C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

uint64_t sub_101A55B64(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void sub_101A55B9C()
{
}

void sub_101A55BC8()
{
  __assert_rtn("down_cast", "common.h", 348, "f == NULL || dynamic_cast<To>(f) != NULL");
}

void sub_101A55BF4()
{
}

void sub_101A55C20()
{
}

void sub_101A55C4C()
{
}

void sub_101A55C78()
{
}

void sub_101A55CA4()
{
}

void sub_101A55CD0()
{
}

void sub_101A55CFC()
{
}

void sub_101A55D28()
{
}

void sub_101A55D54()
{
}

void sub_101A55D80()
{
}

void sub_101A55DAC()
{
}

void sub_101A55DD8()
{
}

void sub_101A55E04()
{
}

void sub_101A55E30()
{
}

void sub_101A55E5C()
{
}

void sub_101A55E88()
{
}

void sub_101A55EB4()
{
}

void sub_101A55EE0()
{
}

void sub_101A55F0C()
{
}

void sub_101A55F38()
{
}

void sub_101A55F64()
{
}

void sub_101A55F90()
{
}

void sub_101A55FBC()
{
}

void sub_101A55FE8()
{
}

void sub_101A56014()
{
}

void sub_101A56040()
{
}

void sub_101A5606C()
{
}

void sub_101A56098()
{
}

void sub_101A560C4()
{
}

void sub_101A560F0()
{
}

void sub_101A5611C()
{
}

void sub_101A56148()
{
}

void sub_101A56174()
{
}

void sub_101A561A0()
{
}

void sub_101A561CC()
{
}

void sub_101A561F8()
{
}

void sub_101A56224()
{
}

void sub_101A56250()
{
}

void sub_101A5627C()
{
}

void sub_101A562A8()
{
}

void sub_101A562D4()
{
}

void sub_101A56300()
{
}

void sub_101A5632C()
{
}

void sub_101A56358()
{
}

void sub_101A56384()
{
}

void sub_101A563B0()
{
}

void sub_101A563DC()
{
}

void sub_101A56408()
{
}

void sub_101A56434()
{
}

void sub_101A56460()
{
}

void sub_101A5648C()
{
}

void sub_101A564B8()
{
}

void sub_101A564E4()
{
}

void sub_101A56510()
{
}

void sub_101A5653C()
{
}

void sub_101A56568()
{
}

void sub_101A56594()
{
}

void sub_101A565C0()
{
}

void sub_101A565EC()
{
}

void sub_101A56618()
{
}

void sub_101A56644()
{
}

void sub_101A56670()
{
}

void sub_101A5669C()
{
}

void sub_101A566C8()
{
}

void sub_101A566F4()
{
}

void sub_101A56720()
{
  sub_10027E49C();
  if (!v2) {
    dispatch_once(&qword_102419450, &stru_1022A27D8);
  }
  if (sub_1001E9AC4())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v3, v4, "{\"msg%{public}.0s\":\"CLMicroLocationSimilarityListData fromProtobuf - number of probabilities should match number of clusters\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10);
    if (*(void *)(v0 + 1104) != -1) {
      dispatch_once(&qword_102419450, &stru_1022A27D8);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v1 + 1112)))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v5, v6, v7, "CLMicroLocationSimilarityListData fromProtobuf - number of probabilities should match number of clusters", "{\"msg%{public}.0s\":\"CLMicroLocationSimilarityListData fromProtobuf - number of probabilities should match number of clusters\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10);
    if (*(void *)(v0 + 1104) != -1) {
      dispatch_once(&qword_102419450, &stru_1022A27D8);
    }
  }
  if (sub_1001F72B0())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v8, v9, "{\"msg%{public}.0s\":\"CLMicroLocationSimilarityListData fromProtobuf - number of probabilities should match number of clusters\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10);
  }
}

void sub_101A56890()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_FAULT))
    {
      sub_100219CC4();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Model get prediction classes unknown model type\", \"modelType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A27D8);
      }
    }
    uint64_t v1 = qword_102419458;
    if (os_signpost_enabled((os_log_t)qword_102419458))
    {
      sub_100219CC4();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Model get prediction classes unknown model type", "{\"msg%{public}.0s\":\"Model get prediction classes unknown model type\", \"modelType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A27D8);
      }
    }
    char v2 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
    {
      sub_100219CC4();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Model get prediction classes unknown model type\", \"modelType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A27D8);
  }
}

void sub_101A56A78()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DE4DC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"mapped cluster identifer already exists\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A27D8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v3, v4, v5, "mapped cluster identifer already exists", "{\"msg%{public}.0s\":\"mapped cluster identifer already exists\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A27D8);
      }
    }
    if (sub_1001F72B0())
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v6, v7, "{\"msg%{public}.0s\":\"mapped cluster identifer already exists\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A27D8);
  }
}

void sub_101A56C04()
{
  sub_10027E49C();
  if (!v2) {
    dispatch_once(&qword_102419450, &stru_1022A27D8);
  }
  if (sub_1001E9AC4())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v3, v4, "{\"msg%{public}.0s\":\"Similarity List Model Learning, Localizer must not return empty results\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10);
    if (*(void *)(v0 + 1104) != -1) {
      dispatch_once(&qword_102419450, &stru_1022A27D8);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v1 + 1112)))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v5, v6, v7, "Similarity List Model Learning, Localizer must not return empty results", "{\"msg%{public}.0s\":\"Similarity List Model Learning, Localizer must not return empty results\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10);
    if (*(void *)(v0 + 1104) != -1) {
      dispatch_once(&qword_102419450, &stru_1022A27D8);
    }
  }
  if (sub_1001F72B0())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v8, v9, "{\"msg%{public}.0s\":\"Similarity List Model Learning, Localizer must not return empty results\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10);
  }
}

uint64_t sub_101A56D74(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    sub_10027E488();
  }
  return result;
}

#error "101A56E08: call analysis failed (funcsize=73)"

#error "101A56F78: call analysis failed (funcsize=73)"

#error "101A570E8: call analysis failed (funcsize=72)"

void (***sub_101A571D4(void (***a1)(void), void (***a2)(void)))(void)
{
  uint64_t v3 = a1;
  uint64_t v4 = a1;
  do
  {
    uint64_t v5 = *v4;
    v4 += 6;
    (*v5)();
    v3 += 6;
    uint64_t result = v4;
  }
  while (v4 != a2);
  return result;
}

void (***sub_101A57238(void (***a1)(void), void (***a2)(void)))(void)
{
  uint64_t v3 = a1;
  uint64_t v4 = a1;
  do
  {
    uint64_t v5 = *v4;
    v4 += 11;
    (*v5)();
    v3 += 11;
    uint64_t result = v4;
  }
  while (v4 != a2);
  return result;
}

void sub_101A5729C()
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022A3408);
  }
  uint64_t v0 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#LoiRecordingManager Tried to initialize with an invalid queue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022A3408);
    }
  }
  uint64_t v1 = qword_102419458;
  if (os_signpost_enabled((os_log_t)qword_102419458))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#LoiRecordingManager Tried to initialize with an invalid queue", "{\"msg%{public}.0s\":\"#LoiRecordingManager Tried to initialize with an invalid queue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022A3408);
    }
  }
  char v2 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#LoiRecordingManager Tried to initialize with an invalid queue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

uint64_t sub_101A57464()
{
  sub_1001F4274();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_101A57498()
{
  uint64_t v0 = abort_report_np();
  return sub_101A574D0(v0);
}

#error "101A5754C: call analysis failed (funcsize=72)"

#error "101A576B4: call analysis failed (funcsize=73)"

#error "101A5782C: call analysis failed (funcsize=80)"

#error "101A579B0: call analysis failed (funcsize=72)"

#error "101A57B18: call analysis failed (funcsize=72)"

void sub_101A57C04(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void sub_101A57C18()
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022A39D8);
  }
  uint64_t v0 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid model index\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, 0x26u);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022A39D8);
    }
  }
  if (os_signpost_enabled((os_log_t)qword_102419458))
  {
    sub_1001DB2F0();
    sub_1002AA4C0();
    _os_signpost_emit_with_name_impl(v1, v2, v3, v4, v5, v6, v7, 0x26u);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022A39D8);
    }
  }
  uint64_t v8 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid model index\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, 0x26u);
  }
}

void sub_101A57DD4()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100219D58())
    {
      sub_100219C60();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unsupported distance function type\", \"type\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A39D8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v1 + 1112)))
    {
      sub_100219C60();
      sub_1002AA4C0();
      _os_signpost_emit_with_name_impl(v2, v3, v4, v5, v6, v7, v8, 0x2Cu);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A39D8);
      }
    }
    uint64_t v0 = *(NSObject **)(v1 + 1112);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      sub_100219C60();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Unsupported distance function type\", \"type\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A39D8);
  }
}

void sub_101A57F9C(uint64_t *a1)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022A39D8);
  }
  if (sub_100219D58())
  {
    sub_1002AA48C();
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Failed to get a long value for key\", \"key\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)v12, 0x30u);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022A39D8);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v2 + 1112)))
  {
    sub_1002AA48C();
    sub_1002AA4C0();
    _os_signpost_emit_with_name_impl(v4, v5, v6, v7, v8, v9, v10, 0x30u);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022A39D8);
    }
  }
  uint64_t v11 = *(NSObject **)(v2 + 1112);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a1 + 23) < 0) {
      a1 = (uint64_t *)*a1;
    }
    v12[0] = 68289795;
    v12[1] = 0;
    __int16 v13 = 2082;
    uint64_t v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = a1;
    __int16 v17 = 2082;
    uint64_t v18 = "assert";
    __int16 v19 = 2081;
    uint64_t v20 = "res";
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Failed to get a long value for key\", \"key\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)v12, 0x30u);
  }
}

#error "101A5821C: call analysis failed (funcsize=72)"

#error "101A58388: call analysis failed (funcsize=71)"

#error "101A584EC: call analysis failed (funcsize=72)"

void sub_101A585E0()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_FAULT))
    {
      sub_100219C60();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A48B8);
      }
    }
    uint64_t v1 = qword_102419458;
    if (os_signpost_enabled((os_log_t)qword_102419458))
    {
      sub_100219C60();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid type chosen", "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A48B8);
      }
    }
    uint64_t v2 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
    {
      sub_100219C60();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A48B8);
  }
}

void sub_101A587BC()
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022A49F0);
  }
  if (sub_1001E9AC4())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Optional Model must have value here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022A49F0);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v3, v4, v5, "Optional Model must have value here", "{\"msg%{public}.0s\":\"Optional Model must have value here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022A49F0);
    }
  }
  if (sub_1002D0574())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v6, v7, "{\"msg%{public}.0s\":\"Optional Model must have value here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
  }
}

void sub_101A5893C()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DE4DC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"All services released their models and shared_ptr count is more than expected\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A49F0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v3, v4, v5, "All services released their models and shared_ptr count is more than expected", "{\"msg%{public}.0s\":\"All services released their models and shared_ptr count is more than expected\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A49F0);
      }
    }
    if (sub_1002D0574())
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v6, v7, "{\"msg%{public}.0s\":\"All services released their models and shared_ptr count is more than expected\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A49F0);
  }
}

void sub_101A58ACC()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DE4DC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"enable MiLo at current location called for a service which is not currently connected\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A49F0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v3, v4, v5, "enable MiLo at current location called for a service which is not currently connected", "{\"msg%{public}.0s\":\"enable MiLo at current location called for a service which is not currently connected\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A49F0);
      }
    }
    if (sub_1002D0574())
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v6, v7, "{\"msg%{public}.0s\":\"enable MiLo at current location called for a service which is not currently connected\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A49F0);
  }
}

void sub_101A58C5C()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10020FFF4())
    {
      sub_10020FF90();
      sub_100210014((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"DatabaseFreeSpacePercentage needs to be a valid percentage\", \"percentage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A49F0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_10020FF90();
      sub_10020FFC8((void *)&_mh_execute_header, v7, v8, v9, "DatabaseFreeSpacePercentage needs to be a valid percentage", "{\"msg%{public}.0s\":\"DatabaseFreeSpacePercentage needs to be a valid percentage\", \"percentage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A49F0);
      }
    }
    if (sub_1002D0574())
    {
      sub_10020FF90();
      sub_100210034((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"DatabaseFreeSpacePercentage needs to be a valid percentage\", \"percentage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 450;
    uint64_t v20 = "minimumNumRowsFree";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabase.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A49F0);
  }
}

void sub_101A58DE4()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Expecting a wifi channel histogram\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A4BC0);
      }
    }
    int v1 = qword_102419458;
    if (os_signpost_enabled((os_log_t)qword_102419458))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Expecting a wifi channel histogram", "{\"msg%{public}.0s\":\"Expecting a wifi channel histogram\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A4BC0);
      }
    }
    int v2 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Expecting a wifi channel histogram\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A4BC0);
  }
}

void sub_101A58FBC()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A4BE0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A4BE0);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1112), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 27;
    uint64_t v20 = "computeDifference";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationFingerprint"
          "DistanceFunction.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A4BE0);
  }
}

void sub_101A59140()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"configured e2jKernelThr illegal value\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A4BE0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "configured e2jKernelThr illegal value", "{\"msg%{public}.0s\":\"configured e2jKernelThr illegal value\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A4BE0);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1112), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"configured e2jKernelThr illegal value\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 327;
    uint64_t v20 = "weightedEuclideanJaccardDistance";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationFingerprint"
          "DistanceFunction.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A4BE0);
  }
}

void sub_101A592C4()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_FAULT))
    {
      sub_1002D39F8();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"index out of bounds\", \"ii\":%{public}llu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A4C40);
      }
    }
    int v1 = qword_102419458;
    if (os_signpost_enabled((os_log_t)qword_102419458))
    {
      sub_1002D39F8();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "index out of bounds", "{\"msg%{public}.0s\":\"index out of bounds\", \"ii\":%{public}llu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A4C40);
      }
    }
    int v2 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
    {
      sub_1002D39F8();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"index out of bounds\", \"ii\":%{public}llu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A4C40);
  }
}

#error "101A59514: call analysis failed (funcsize=73)"

#error "101A59684: call analysis failed (funcsize=73)"

void sub_101A59778()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_FAULT))
    {
      sub_100219C60();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A4CA0);
      }
    }
    int v1 = qword_102419458;
    if (os_signpost_enabled((os_log_t)qword_102419458))
    {
      sub_100219C60();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid type chosen", "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A4CA0);
      }
    }
    int v2 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
    {
      sub_100219C60();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A4CA0);
  }
}

#error "101A599D0: call analysis failed (funcsize=73)"

#error "101A59B40: call analysis failed (funcsize=73)"

#error "101A59CB0: call analysis failed (funcsize=73)"

void sub_101A59DA4()
{
}

void sub_101A59DD0()
{
}

void sub_101A59DFC()
{
}

void sub_101A59E28()
{
}

void sub_101A59E54()
{
}

void sub_101A59E80()
{
}

void sub_101A59EAC()
{
}

void sub_101A59ED8()
{
}

void sub_101A59F04()
{
  __assert_rtn("parameterizedTruncatedMeanValueSorted", "CLReducerFunction.h", 61, "minPercentile >= 0 && minPercentile <= 1 && maxPercentile >= minPercentile && maxPercentile <= 1");
}

void sub_101A59F30()
{
}

void sub_101A59F5C()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100219D58())
    {
      sub_100219CC4();
      sub_100219DFC((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Unsupported Service Type\", \"ServiceType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A4DF0);
      }
    }
    if (sub_100219E54())
    {
      sub_100219CC4();
      sub_100219CFC((void *)&_mh_execute_header, v6, v7, v8, "Unsupported Service Type", "{\"msg%{public}.0s\":\"Unsupported Service Type\", \"ServiceType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A4DF0);
      }
    }
    if (sub_100219DE0())
    {
      sub_100219CC4();
      sub_100219E1C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Unsupported Service Type\", \"ServiceType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 32;
    uint64_t v19 = "settingsString";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/ServiceManager/CLMiLoService.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A4DF0);
  }
}

void sub_101A5A0DC()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Error converting uint to location types: Value does not fit into bitset\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v16, v17, (uint64_t)v18, v19, v20[0]);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A4DF0);
      }
    }
    int v7 = *(NSObject **)(v0 + 1112);
    if (os_signpost_enabled(v7))
    {
      sub_1001DB29C();
      sub_100219C3C((void *)&_mh_execute_header, v7, v8, v9, "Error converting uint to location types: Value does not fit into bitset", "{\"msg%{public}.0s\":\"Error converting uint to location types: Value does not fit into bitset\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v20);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A4DF0);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1112), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v10, v11, "{\"msg%{public}.0s\":\"Error converting uint to location types: Value does not fit into bitset\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v14, v15, (uint64_t)v16, v17, (uint64_t)v18, v19, v20[0]);
    }
    uint64_t v17 = 252;
    uint64_t v18 = "uint64ToLocationTypesBitset";
    int v16 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/ServiceManager/CLMiLoService.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A4DF0);
  }
}

void sub_101A5A268(char a1)
{
  if ((a1 & 1) == 0) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Update model - got null pointer\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v16, v17, (uint64_t)v18, v19, v20[0]);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A4DF0);
      }
    }
    int v7 = qword_102419458;
    if (os_signpost_enabled((os_log_t)qword_102419458))
    {
      sub_1001DB29C();
      sub_100219C3C((void *)&_mh_execute_header, v7, v8, v9, "Update model - got null pointer", "{\"msg%{public}.0s\":\"Update model - got null pointer\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v20);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A4DF0);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v10, v11, "{\"msg%{public}.0s\":\"Update model - got null pointer\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v14, v15, (uint64_t)v16, v17, (uint64_t)v18, v19, v20[0]);
    }
    uint64_t v17 = 266;
    uint64_t v18 = "updateModel";
    int v16 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/ServiceManager/CLMiLoService.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A4DF0);
  }
}

void sub_101A5A404()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100219D58())
    {
      sub_100219C60();
      sub_100219DFC((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Service Type unsupported \", \"service type\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, buf);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A4DF0);
      }
    }
    if (sub_100219E54())
    {
      sub_100219C60();
      sub_100219CFC((void *)&_mh_execute_header, v6, v7, v8, "Service Type unsupported ", "{\"msg%{public}.0s\":\"Service Type unsupported \", \"service type\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, buf);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A4DF0);
      }
    }
    if (sub_100219DE0()) {
      sub_100219E1C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Service Type unsupported \", \"service type\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, 3u);
    }
    uint64_t v18 = 416;
    uint64_t v19 = "modelTypeByServiceAndLocationType";
    uint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/ServiceManager/CLMiLoService.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A4DF0);
  }
}

void sub_101A5A5A0(_DWORD *a1)
{
  sub_100219E6C();
  if (!v4) {
    dispatch_once(&qword_102419450, &stru_1022A4DF0);
  }
  if (sub_100219D58())
  {
    sub_100219C98();
    sub_100234FD0((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"If run state is runnimg then suspend reason must be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7, v8, v9, v10, v19[0]);
    if (*(void *)(v2 + 1104) != -1) {
      dispatch_once(&qword_102419450, &stru_1022A4DF0);
    }
  }
  if (sub_100219E54())
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v1, v11, v12, "If run state is runnimg then suspend reason must be empty", "{\"msg%{public}.0s\":\"If run state is runnimg then suspend reason must be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v19);
    if (*(void *)(v2 + 1104) != -1) {
      dispatch_once(&qword_102419450, &stru_1022A4DF0);
    }
  }
  if (sub_100219DE0())
  {
    sub_100219C98();
    sub_100234FF0((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"If run state is runnimg then suspend reason must be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19[0]);
  }
  *a1 = 708;
}

void sub_101A5A710(_DWORD *a1)
{
  sub_100219E6C();
  if (!v4) {
    dispatch_once(&qword_102419450, &stru_1022A4DF0);
  }
  if (sub_100219D58())
  {
    sub_100219C98();
    sub_100234FD0((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"If run state is suspended then suspend reason cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7, v8, v9, v10, v19[0]);
    if (*(void *)(v2 + 1104) != -1) {
      dispatch_once(&qword_102419450, &stru_1022A4DF0);
    }
  }
  if (sub_100219E54())
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v1, v11, v12, "If run state is suspended then suspend reason cannot be empty", "{\"msg%{public}.0s\":\"If run state is suspended then suspend reason cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v19);
    if (*(void *)(v2 + 1104) != -1) {
      dispatch_once(&qword_102419450, &stru_1022A4DF0);
    }
  }
  if (sub_100219DE0())
  {
    sub_100219C98();
    sub_100234FF0((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"If run state is suspended then suspend reason cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19[0]);
  }
  *a1 = 706;
}

uint64_t sub_101A5A880()
{
  sub_1001F4274();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_101A5A8B4()
{
  sub_1001F4274();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_101A5A8E8()
{
  sub_1001F4274();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_101A5A91C()
{
  sub_1001F4274();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_101A5A950()
{
  sub_1001F4274();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void (***sub_101A5A984(void (***a1)(void), void (***a2)(void)))(void)
{
  int v3 = a1;
  char v4 = a1;
  do
  {
    uint64_t v5 = *v4;
    v4 += 10;
    (*v5)();
    v3 += 10;
    uint64_t result = v4;
  }
  while (v4 != a2);
  return result;
}

uint64_t sub_101A5A9E8(uint64_t a1, uint64_t (***a2)(void))
{
  uint64_t v3 = a1 - 80;
  char v4 = (uint64_t (***)(void))(a1 - 80);
  uint64_t v5 = (uint64_t (***)(void))(a1 - 80);
  do
  {
    uint64_t v6 = *v5;
    v5 -= 10;
    uint64_t result = (*v6)(v4);
    v3 -= 80;
    BOOL v8 = v4 == a2;
    char v4 = v5;
  }
  while (!v8);
  return result;
}

void sub_101A5AA54()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"WifiBridge, shouldn't request scanner when scan activity is not set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A5480);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "WifiBridge, shouldn't request scanner when scan activity is not set", "{\"msg%{public}.0s\":\"WifiBridge, shouldn't request scanner when scan activity is not set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A5480);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1112), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"WifiBridge, shouldn't request scanner when scan activity is not set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 209;
    uint64_t v20 = "getWifiScannerForScanActivity";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationWifiBridge.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A5480);
  }
}

void sub_101A5ABD8()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"WifiBridge, the wifi scan timer should have a nextFireTime when requesting scan duration extension\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A5480);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "WifiBridge, the wifi scan timer should have a nextFireTime when requesting scan duration extension", "{\"msg%{public}.0s\":\"WifiBridge, the wifi scan timer should have a nextFireTime when requesting scan duration extension\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A5480);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1112), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"WifiBridge, the wifi scan timer should have a nextFireTime when requesting scan duration extension\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 108;
    uint64_t v20 = "extendWifiScanTimer";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationWifiBridge.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A5480);
  }
}

#error "101A5ADD8: call analysis failed (funcsize=73)"

#error "101A5AF48: call analysis failed (funcsize=73)"

#error "101A5B0B8: call analysis failed (funcsize=72)"

#error "101A5B220: call analysis failed (funcsize=73)"

#error "101A5B390: call analysis failed (funcsize=73)"

void sub_101A5B484()
{
}

void sub_101A5B4B0()
{
  __assert_rtn("parametrizedPercentileSorted", "CLReducerFunction.h", 81, "prctile >= 0.0 && prctile <= 1.0");
}

void sub_101A5B4DC()
{
  __assert_rtn("parametrizedPercentileSorted", "CLReducerFunction.h", 93, "(startIndex >= 0) && (startIndex <= static_cast<int>(container.size()) - 2)");
}

#error "101A5B584: call analysis failed (funcsize=73)"

#error "101A5B6F4: call analysis failed (funcsize=73)"

void sub_101A5B7E8()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed, no current transaction when recording batch of measurementWrappers\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A5698);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed, no current transaction when recording batch of measurementWrappers", "{\"msg%{public}.0s\":\"Assertion failed, no current transaction when recording batch of measurementWrappers\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A5698);
      }
    }
    if (sub_1002D0574())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed, no current transaction when recording batch of measurementWrappers\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 285;
    uint64_t v20 = "recordMeasurementBatch";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationRecorder.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A5698);
  }
}

void sub_101A5B964()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed, no current transaction when recording an event\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A5698);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed, no current transaction when recording an event", "{\"msg%{public}.0s\":\"Assertion failed, no current transaction when recording an event\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A5698);
      }
    }
    if (sub_1002D0574())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed, no current transaction when recording an event\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 301;
    uint64_t v20 = "recordEvent";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationRecorder.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A5698);
  }
}

void sub_101A5BAE8()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Already monitoring App In Focus events\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A5948);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Already monitoring App In Focus events", "{\"msg%{public}.0s\":\"Already monitoring App In Focus events\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A5948);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1112), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Already monitoring App In Focus events\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 96;
    uint64_t v20 = "startMonitoringBiomeEvents";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationBiomeMonitor.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A5948);
  }
}

void sub_101A5BC6C()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Already monitoring Now Playing events\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A5948);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Already monitoring Now Playing events", "{\"msg%{public}.0s\":\"Already monitoring Now Playing events\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A5948);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1112), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Already monitoring Now Playing events\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 82;
    uint64_t v20 = "startMonitoringBiomeEvents";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationBiomeMonitor.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A5948);
  }
}

uint64_t sub_101A5BDF0()
{
  uint64_t v0 = abort_report_np();
  return sub_101A5BE28(v0);
}

void sub_101A5BE28()
{
}

void sub_101A5BE60()
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022A5DC0);
  }
  if (sub_1001E9AC4())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"# MiLo Logic -- tried to initialize with an invalid queue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022A5DC0);
    }
  }
  if (sub_100219DB4())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v1, v2, v3, "# MiLo Logic -- tried to initialize with an invalid queue", "{\"msg%{public}.0s\":\"# MiLo Logic -- tried to initialize with an invalid queue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022A5DC0);
    }
  }
  if (sub_1001F72B0())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"# MiLo Logic -- tried to initialize with an invalid queue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
  }
}

void sub_101A5BFEC()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"MiLo must be enabled\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v15, v16, (uint64_t)v17, v18, v19[0]);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A5DC0);
      }
    }
    if (sub_100219DB4())
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v6, v7, v8, "MiLo must be enabled", "{\"msg%{public}.0s\":\"MiLo must be enabled\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v19);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A5DC0);
      }
    }
    if (sub_1001F72B0())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v9, v10, "{\"msg%{public}.0s\":\"MiLo must be enabled\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v13, v14, (uint64_t)v15, v16, (uint64_t)v17, v18, v19[0]);
    }
    uint64_t v16 = 449;
    int v17 = "onStartRecordingOrLocalizing";
    int v15 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationLogic.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A5DC0);
  }
}

void sub_101A5C168()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Must contain valid scan activity\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v15, v16, (uint64_t)v17, v18, v19[0]);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A5DC0);
      }
    }
    if (sub_100219DB4())
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v6, v7, v8, "Must contain valid scan activity", "{\"msg%{public}.0s\":\"Must contain valid scan activity\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v19);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A5DC0);
      }
    }
    if (sub_1001F72B0())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v9, v10, "{\"msg%{public}.0s\":\"Must contain valid scan activity\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v13, v14, (uint64_t)v15, v16, (uint64_t)v17, v18, v19[0]);
    }
    uint64_t v16 = 452;
    int v17 = "onStartRecordingOrLocalizing";
    int v15 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationLogic.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A5DC0);
  }
}

void sub_101A5C2E4()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"CFType must be a CFString to convert to a std::string\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v15, v16, (uint64_t)v17, v18, v19[0]);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A5DC0);
      }
    }
    if (sub_100219DB4())
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v6, v7, v8, "CFType must be a CFString to convert to a std::string", "{\"msg%{public}.0s\":\"CFType must be a CFString to convert to a std::string\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v19);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A5DC0);
      }
    }
    if (sub_1001F72B0())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v9, v10, "{\"msg%{public}.0s\":\"CFType must be a CFString to convert to a std::string\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v13, v14, (uint64_t)v15, v16, (uint64_t)v17, v18, v19[0]);
    }
    uint64_t v16 = 1265;
    int v17 = "CFValueToNativeValue";
    int v15 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationSettings.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A5DC0);
  }
}

void sub_101A5C458()
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022A61F0);
  }
  int v0 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"json string is invalid\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022A61F0);
    }
  }
  int v1 = qword_102419458;
  if (os_signpost_enabled((os_log_t)qword_102419458))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "json string is invalid", "{\"msg%{public}.0s\":\"json string is invalid\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022A61F0);
    }
  }
  int v2 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"json string is invalid\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_101A5C620()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A63D0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A63D0);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1112), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 195;
    uint64_t v20 = "convert";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabaseColumns.h";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A63D0);
  }
}

void sub_101A5C7AC()
{
  sub_1002396F4();
  if (!v1) {
    dispatch_once(&qword_102419450, &stru_1022A6570);
  }
  if (sub_1001E9AC4())
  {
    sub_1001DB2F0();
    sub_1003252B0((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"number of measurements still exceeds maximum\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v19);
    sub_1002396F4();
    if (!v1) {
      dispatch_once(&qword_102419450, &stru_1022A6570);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
  {
    sub_1001DB2F0();
    sub_100325284((void *)&_mh_execute_header, v8, v9, v10, "number of measurements still exceeds maximum", "{\"msg%{public}.0s\":\"number of measurements still exceeds maximum\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v19);
    sub_1002396F4();
    if (!v1) {
      dispatch_once(&qword_102419450, &stru_1022A6570);
    }
  }
  if (sub_1001F72B0())
  {
    sub_1001DB2F0();
    sub_1003252D0((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"number of measurements still exceeds maximum\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19);
  }
}

void sub_101A5C910()
{
  sub_1002396F4();
  if (!v1) {
    dispatch_once(&qword_102419450, &stru_1022A6570);
  }
  if (sub_1001E9AC4())
  {
    sub_1001DB2F0();
    sub_1003252B0((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v19);
    sub_1002396F4();
    if (!v1) {
      dispatch_once(&qword_102419450, &stru_1022A6570);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
  {
    sub_1001DB2F0();
    sub_100325284((void *)&_mh_execute_header, v8, v9, v10, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v19);
    sub_1002396F4();
    if (!v1) {
      dispatch_once(&qword_102419450, &stru_1022A6570);
    }
  }
  if (sub_1001F72B0())
  {
    sub_1001DB2F0();
    sub_1003252D0((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19);
  }
}

void sub_101A5CA74()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assigning a negative value to an unsigned type is probably not what you intended\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A6920);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assigning a negative value to an unsigned type is probably not what you intended", "{\"msg%{public}.0s\":\"Assigning a negative value to an unsigned type is probably not what you intended\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A6920);
      }
    }
    if (sub_1001F72B0())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assigning a negative value to an unsigned type is probably not what you intended\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "convert";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabaseColumns.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A6920);
  }
}

void sub_101A5CBEC()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Trying to assign a value that is bigger than the provided type can hold\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A6920);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Trying to assign a value that is bigger than the provided type can hold", "{\"msg%{public}.0s\":\"Trying to assign a value that is bigger than the provided type can hold\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A6920);
      }
    }
    if (sub_1001F72B0())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Trying to assign a value that is bigger than the provided type can hold\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 245;
    uint64_t v20 = "convert";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabaseColumns.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A6920);
  }
}

#error "101A5CDE0: call analysis failed (funcsize=73)"

#error "101A5CF50: call analysis failed (funcsize=73)"

void sub_101A5D044(void *a1, void *a2)
{
  int v3 = __cxa_begin_catch(a1);
  *a2 = v3;
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022A6AF0);
  }
  int v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v3 + 16))(v3);
    int v6 = 136446210;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error converting database values. %{public}s", (uint8_t *)&v6, 0xCu);
  }
}

#error "101A5D1BC: call analysis failed (funcsize=73)"

void sub_101A5D2B0(unsigned char *a1, uint64_t a2)
{
  if (*a1)
  {
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
  }
}

#error "101A5D358: call analysis failed (funcsize=73)"

#error "101A5D4C8: call analysis failed (funcsize=73)"

#error "101A5D638: call analysis failed (funcsize=73)"

uint64_t sub_101A5D72C(uint64_t a1, uint64_t (***a2)(void))
{
  uint64_t v3 = a1 - 88;
  int v4 = (uint64_t (***)(void))(a1 - 88);
  uint64_t v5 = (uint64_t (***)(void))(a1 - 88);
  do
  {
    int v6 = *v5;
    v5 -= 11;
    uint64_t result = (*v6)(v4);
    v3 -= 88;
    BOOL v8 = v4 == a2;
    int v4 = v5;
  }
  while (!v8);
  return result;
}

void sub_101A5D798()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A7590);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1112)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A7590);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1112), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 34;
    uint64_t v20 = "getTimeDeltaDaysAgo";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationTimeUtils.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022A7590);
  }
}

void sub_101A5D91C()
{
  if (qword_102419040 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419048;
    if (os_log_type_enabled((os_log_t)qword_102419048, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"sendConfiguration should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419040 != -1) {
        dispatch_once(&qword_102419040, &stru_1022AD040);
      }
    }
    int v1 = qword_102419048;
    if (os_signpost_enabled((os_log_t)qword_102419048))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "sendConfiguration should be running on motion thread", "{\"msg%{public}.0s\":\"sendConfiguration should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419040 != -1) {
        dispatch_once(&qword_102419040, &stru_1022AD040);
      }
    }
    int v2 = qword_102419048;
    if (os_log_type_enabled((os_log_t)qword_102419048, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"sendConfiguration should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419040, &stru_1022AD040);
  }
}

void sub_101A5DAEC(uint64_t a1)
{
  int v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

uint64_t sub_101A5DB04()
{
  sub_1001F4274();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

#error "101A5DBB4: call analysis failed (funcsize=73)"

#error "101A5DD24: call analysis failed (funcsize=73)"

#error "101A5DE94: call analysis failed (funcsize=73)"

#error "101A5E004: call analysis failed (funcsize=73)"

#error "101A5E174: call analysis failed (funcsize=73)"

#error "101A5E2DC: call analysis failed (funcsize=69)"

#error "101A5E430: call analysis failed (funcsize=69)"

#error "101A5E584: call analysis failed (funcsize=69)"

#error "101A5E6D8: call analysis failed (funcsize=69)"

void sub_101A5E7B8()
{
}

void sub_101A5E7E4()
{
}

void sub_101A5E810()
{
}

void sub_101A5E83C()
{
}

void sub_101A5E868()
{
}

void sub_101A5E894()
{
}

void sub_101A5E8C0()
{
}

void sub_101A5E8EC()
{
}

void sub_101A5E918()
{
}

void sub_101A5E944()
{
}

void sub_101A5E970()
{
}

void sub_101A5E99C()
{
}

void sub_101A5E9C8()
{
}

void sub_101A5E9F4()
{
}

void sub_101A5EA20()
{
}

void sub_101A5EA4C()
{
}

void sub_101A5EA78()
{
}

void sub_101A5EAA4()
{
}

void sub_101A5EAD0()
{
}

void sub_101A5EAFC()
{
}

void sub_101A5EB28()
{
}

void sub_101A5EB54()
{
}

void sub_101A5EB80()
{
}

void sub_101A5EBAC()
{
}

void sub_101A5EBD8()
{
}

void sub_101A5EC04()
{
}

void sub_101A5EC30()
{
}

void sub_101A5EC5C()
{
}

void sub_101A5EC88()
{
}

void sub_101A5ECB4()
{
}

void sub_101A5ECE0()
{
}

void sub_101A5ED0C()
{
}

void sub_101A5ED38()
{
}

void sub_101A5ED64()
{
}

void sub_101A5ED90()
{
}

void sub_101A5EDBC()
{
}

void sub_101A5EDE8()
{
}

void sub_101A5EE14()
{
}

void sub_101A5EE40()
{
}

void sub_101A5EE6C()
{
}

void sub_101A5EE98()
{
}

void sub_101A5EEC4()
{
}

void sub_101A5EEF0()
{
}

void sub_101A5EF1C()
{
}

void sub_101A5EF48()
{
}

void sub_101A5EF74()
{
}

void sub_101A5EFA0()
{
}

void sub_101A5EFCC()
{
}

void sub_101A5EFF8()
{
}

void sub_101A5F024()
{
}

void sub_101A5F050()
{
}

void sub_101A5F07C()
{
}

void sub_101A5F0A8()
{
}

void sub_101A5F0D4()
{
}

void sub_101A5F100()
{
}

void sub_101A5F12C()
{
}

void sub_101A5F158()
{
}

void sub_101A5F184()
{
}

void sub_101A5F1B0()
{
}

void sub_101A5F1DC()
{
}

void sub_101A5F208()
{
}

void sub_101A5F234()
{
}

void sub_101A5F260()
{
}

void sub_101A5F28C()
{
}

void sub_101A5F2B8()
{
}

void sub_101A5F2E4()
{
}

void sub_101A5F310()
{
}

void sub_101A5F33C()
{
}

void sub_101A5F368()
{
}

void sub_101A5F394()
{
}

void sub_101A5F3C0()
{
}

void sub_101A5F3EC()
{
}

void sub_101A5F418()
{
}

void sub_101A5F444()
{
}

void sub_101A5F470()
{
}

void sub_101A5F49C()
{
}

void sub_101A5F4C8()
{
}

void sub_101A5F4F4()
{
}

void sub_101A5F520()
{
}

void sub_101A5F54C()
{
}

void sub_101A5F578()
{
}

void sub_101A5F5A4()
{
}

void sub_101A5F5D0()
{
}

void sub_101A5F5FC()
{
}

void sub_101A5F628()
{
}

void sub_101A5F654()
{
  if (qword_102419000 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004209B4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_1022B1FD0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 8)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_1022B1FD0);
      }
    }
    if (sub_1004209D4())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 675;
    uint64_t v20 = "addTurn";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Swimming/CLSwimDataStore.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419000, &stru_1022B1FD0);
  }
}

void sub_101A5F7CC()
{
  if (qword_102419000 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004209B4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_1022B1FD0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 8)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_1022B1FD0);
      }
    }
    if (sub_1004209D4())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 866;
    uint64_t v20 = "updateDistribution";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Swimming/CLSwimDataStore.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419000, &stru_1022B1FD0);
  }
}

void sub_101A5F944()
{
  if (qword_102419000 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004209B4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_1022B1FD0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 8)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_1022B1FD0);
      }
    }
    if (sub_1004209D4())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 992;
    uint64_t v20 = "addLap";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Swimming/CLSwimDataStore.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419000, &stru_1022B1FD0);
  }
}

void sub_101A5FABC()
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B24C0);
  }
  if (sub_100436D88())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, 0x26u);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B24C0);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v1 + 1592)))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v2, v3, v4, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B24C0);
    }
  }
  int v5 = *(NSObject **)(v1 + 1592);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, 0x26u);
  }
}

void sub_101A5FC5C()
{
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100436D88())
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B24C0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v1 + 1592)))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v2, v3, v4, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B24C0);
      }
    }
    uint64_t v0 = *(NSObject **)(v1 + 1592);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419630, &stru_1022B24C0);
  }
}

void sub_101A5FE0C()
{
  if (qword_102419540 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10043CC04())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Cannot set workout state when overall source state isn't Workout.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B2610);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1352)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Cannot set workout state when overall source state isn't Workout.", "{\"msg%{public}.0s\":\"Cannot set workout state when overall source state isn't Workout.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B2610);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1352), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Cannot set workout state when overall source state isn't Workout.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 35;
    uint64_t v20 = "changeWorkoutState";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Streaming/CLStreamingAwareLocationProviderLoc"
          "alGPSStateMachine.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419540, &stru_1022B2610);
  }
}

void sub_101A5FF90()
{
  if (qword_102419540 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10043CC04())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"This function must only be called in workout scenarios.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B2610);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1352)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "This function must only be called in workout scenarios.", "{\"msg%{public}.0s\":\"This function must only be called in workout scenarios.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B2610);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1352), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"This function must only be called in workout scenarios.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 396;
    uint64_t v20 = "setWorkoutStateBasedOnMotionCompatibility";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Streaming/CLStreamingAwareLocationProviderLoc"
          "alGPSStateMachine.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419540, &stru_1022B2610);
  }
}

void sub_101A6011C()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B28D0);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B28D0);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 67;
    uint64_t v19 = "-[CLHealthAssessmentNotifierAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/HealthAssessment/CLHealthAssessmentNotifier.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022B28D0);
  }
}

void sub_101A602B0()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022B2A80);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022B2A80);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_1022B2A80);
  }
}

void sub_101A60434(void *a1)
{
  objc_begin_catch(a1);
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022B2DA8);
  }
  int v1 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_ERROR))
  {
    sub_100452A30();
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MaxMETs,Failed to receive correct MET minutes stats compute time.\"}", v3, 0x12u);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022B2DA8);
    }
  }
  int v2 = qword_1024190F8;
  if (os_signpost_enabled((os_log_t)qword_1024190F8))
  {
    sub_100452A30();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MaxMETs,Failed to receive correct MET minutes stats compute time.", "{\"msg%{public}.0s\":\"MaxMETs,Failed to receive correct MET minutes stats compute time.\"}", v3, 0x12u);
  }
  objc_end_catch();
}

void sub_101A60588()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B31A0);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B31A0);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 64;
    uint64_t v19 = "-[CLStreamedLocationProviderAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Streaming/CLStreamedLocationProvider.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022B31A0);
  }
}

void sub_101A6071C()
{
  if (qword_102419540 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10045B764())
    {
      sub_10045B700();
      sub_10045B784((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Unexpected registration\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1352)))
    {
      sub_10045B700();
      sub_10045B738((void *)&_mh_execute_header, v7, v8, v9, "Unexpected registration", "{\"msg%{public}.0s\":\"Unexpected registration\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1352), OS_LOG_TYPE_INFO))
    {
      sub_10045B700();
      sub_10045B7A4((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Unexpected registration\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 281;
    uint64_t v20 = "registerForNotificationInternal";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Streaming/CLStreamedLocationProvider.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419540, &stru_1022B31C0);
  }
}

void sub_101A608B0()
{
  if (qword_102419540 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10045B764())
    {
      sub_10045B700();
      sub_10045B784((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Unexpected registration\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1352)))
    {
      sub_10045B700();
      sub_10045B738((void *)&_mh_execute_header, v7, v8, v9, "Unexpected registration", "{\"msg%{public}.0s\":\"Unexpected registration\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1352), OS_LOG_TYPE_INFO))
    {
      sub_10045B700();
      sub_10045B7A4((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Unexpected registration\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 326;
    uint64_t v20 = "unregisterForNotificationInternal";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Streaming/CLStreamedLocationProvider.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419540, &stru_1022B31C0);
  }
}

void sub_101A60A44()
{
  if (qword_102419540 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"#Multiclient must pass a non-nil target device\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419548))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "#Multiclient must pass a non-nil target device", "{\"msg%{public}.0s\":\"#Multiclient must pass a non-nil target device\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"#Multiclient must pass a non-nil target device\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 591;
    uint64_t v19 = "registerForStreamingClientNotifications";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Streaming/CLStreamedLocationProvider.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419540, &stru_1022B31C0);
  }
}

void sub_101A60BD8()
{
  __assert_rtn("-[ALMotionState writeTo:]", "ALMotionState.m", 157, "self->_motion != nil");
}

#error "101A60C80: call analysis failed (funcsize=73)"

#error "101A60DF0: call analysis failed (funcsize=73)"

#error "101A60F60: call analysis failed (funcsize=73)"

#error "101A610D0: call analysis failed (funcsize=73)"

#error "101A61240: call analysis failed (funcsize=73)"

void sub_101A61334()
{
  __assert_rtn("-[ALActivityOverrideMsg writeTo:]", "ALActivityOverrideMsg.m", 108, "self->_activity != nil");
}

uint64_t sub_101A61360(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void sub_101A61384(std::__shared_weak_count **a1, std::__shared_weak_count **a2)
{
  int v3 = *a1;
  if (v3) {
    sub_1000DB0A0(v3);
  }
  if (*a2) {
    sub_1000DB0A0(*a2);
  }
}

void sub_101A613BC(void **a1)
{
  int v2 = *a1;
  if (v2) {
    sub_1004927B4(v2, (uint64_t)a1);
  }
}

void sub_101A613D0()
{
  if (qword_102419560 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10049C4A4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"attempting to construct policies without controller\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022B4270);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1384)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "attempting to construct policies without controller", "{\"msg%{public}.0s\":\"attempting to construct policies without controller\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022B4270);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1384), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"attempting to construct policies without controller\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 189;
    uint64_t v20 = "-[CLHarvesterService constructPolicies]";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Service/CLHarvesterService.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419560, &stru_1022B4270);
  }
}

void sub_101A6155C()
{
  if (qword_102419560 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10049C4A4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"attempting to construct policies without gps monitor\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022B4270);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1384)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "attempting to construct policies without gps monitor", "{\"msg%{public}.0s\":\"attempting to construct policies without gps monitor\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022B4270);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1384), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"attempting to construct policies without gps monitor\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 190;
    uint64_t v20 = "-[CLHarvesterService constructPolicies]";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Service/CLHarvesterService.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419560, &stru_1022B4270);
  }
}

void sub_101A616E8(uint64_t a1)
{
  int v4 = (std::__shared_weak_count *)sub_10049C490(a1);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if (*v3) {
    sub_1000DB0A0(*v3);
  }
  if (*v2) {
    sub_1000DB0A0(*v2);
  }
  if (*v1) {
    sub_1000DB0A0(*v1);
  }
}

void sub_101A6173C(uint64_t a1)
{
  int v3 = (std::__shared_weak_count *)sub_10049C480(a1);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  if (*v2) {
    sub_1000DB0A0(*v2);
  }
  if (*v1) {
    sub_1000DB0A0(*v1);
  }
}

void sub_101A6177C()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B4FC8);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B4FC8);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 27;
    uint64_t v19 = "-[CLOdometerNotifierAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Odometer/CLOdometerNotifier.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022B4FC8);
  }
}

uint64_t sub_101A61910(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

void sub_101A61934()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022B54A8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022B54A8);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_1022B54A8);
  }
}

void sub_101A61AB8()
{
  if (qword_102419380 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022B5B60);
      }
    }
    int v1 = qword_102419388;
    if (os_signpost_enabled((os_log_t)qword_102419388))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022B5B60);
      }
    }
    int v2 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419380, &stru_1022B5B60);
  }
}

void sub_101A61C88()
{
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B5E98);
      }
    }
    int v1 = qword_102419638;
    if (os_signpost_enabled((os_log_t)qword_102419638))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B5E98);
      }
    }
    int v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419630, &stru_1022B5E98);
  }
}

#error "101A61ED4: call analysis failed (funcsize=73)"

#error "101A62044: call analysis failed (funcsize=73)"

#error "101A621B4: call analysis failed (funcsize=73)"

#error "101A62324: call analysis failed (funcsize=73)"

#error "101A62494: call analysis failed (funcsize=73)"

void sub_101A62588()
{
  if (qword_102418FC0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102418FC8;
    if (os_log_type_enabled((os_log_t)qword_102418FC8, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLSPUEclipseInterface] Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102418FC0 != -1) {
        dispatch_once(&qword_102418FC0, &stru_1022B63F8);
      }
    }
    int v1 = qword_102418FC8;
    if (os_signpost_enabled((os_log_t)qword_102418FC8))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLSPUEclipseInterface] Service required", "{\"msg%{public}.0s\":\"[CLSPUEclipseInterface] Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102418FC0 != -1) {
        dispatch_once(&qword_102418FC0, &stru_1022B63F8);
      }
    }
    int v2 = qword_102418FC8;
    if (os_log_type_enabled((os_log_t)qword_102418FC8, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLSPUEclipseInterface] Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418FC0, &stru_1022B63F8);
  }
}

uint64_t sub_101A62758(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_101A62790(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void sub_101A627B4()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B73E0);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B73E0);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 43;
    uint64_t v19 = "-[CLSedentaryTimerNotifierAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/SedentaryTimer/CLSedentaryTimerNotifier.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022B73E0);
  }
}

void sub_101A62948()
{
}

#error "101A62A00: call analysis failed (funcsize=81)"

#error "101A62B7C: call analysis failed (funcsize=73)"

#error "101A62CEC: call analysis failed (funcsize=73)"

#error "101A62E5C: call analysis failed (funcsize=73)"

#error "101A62FCC: call analysis failed (funcsize=73)"

#error "101A6313C: call analysis failed (funcsize=73)"

void sub_101A63230()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022B7BF8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022B7BF8);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_1022B7BF8);
  }
}

#error "101A6342C: call analysis failed (funcsize=71)"

#error "101A63590: call analysis failed (funcsize=71)"

#error "101A636F4: call analysis failed (funcsize=71)"

#error "101A63858: call analysis failed (funcsize=71)"

#error "101A639BC: call analysis failed (funcsize=71)"

#error "101A63B20: call analysis failed (funcsize=71)"

#error "101A63C84: call analysis failed (funcsize=71)"

void sub_101A63D70(uint64_t *a1)
{
  if (sub_100508A1C(a1))
  {
    sub_1001F4274();
    (*(void (**)(void))(v1 + 32))();
  }
  sub_100508A38();
}

uint64_t sub_101A63DC0()
{
  sub_1001F4274();
  return (*(uint64_t (**)(void))(v0 + 32))();
}

void sub_101A63DF4(uint64_t a1)
{
  int v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void sub_101A63E0C(void **a1)
{
  if (*((char *)a1 + 23) < 0) {
    sub_100510EAC(a1);
  }
}

#error "101A63E94: call analysis failed (funcsize=71)"

#error "101A63FF8: call analysis failed (funcsize=71)"

#error "101A6415C: call analysis failed (funcsize=71)"

#error "101A642C0: call analysis failed (funcsize=71)"

#error "101A64424: call analysis failed (funcsize=71)"

void sub_101A64510()
{
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B8910);
      }
    }
    uint64_t v1 = qword_102419638;
    if (os_signpost_enabled((os_log_t)qword_102419638))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B8910);
      }
    }
    int v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419630, &stru_1022B8910);
  }
}

void sub_101A646E0()
{
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B9520);
      }
    }
    uint64_t v1 = qword_102419638;
    if (os_signpost_enabled((os_log_t)qword_102419638))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B9520);
      }
    }
    int v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419630, &stru_1022B9520);
  }
}

void sub_101A648B0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1) {
    sub_1000DB0A0(v1);
  }
  operator delete();
}

void sub_101A648F4()
{
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BA448);
      }
    }
    uint64_t v1 = qword_102419638;
    if (os_signpost_enabled((os_log_t)qword_102419638))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BA448);
      }
    }
    int v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419630, &stru_1022BA448);
  }
}

void sub_101A64AC4()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BA5B8);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BA5B8);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 82;
    uint64_t v19 = "-[CLHomeKitProviderAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/HomeKitProvider/CLHomeKitProvider.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022BA5B8);
  }
}

void sub_101A64C58()
{
  if (qword_102419560 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
    {
      sub_10054E4F4();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"SystemService not found in kSystemServicesUsedInHarvesting\", \"SystemService\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
    }
    int v1 = qword_102419568;
    if (os_signpost_enabled((os_log_t)qword_102419568))
    {
      sub_10054E4F4();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SystemService not found in kSystemServicesUsedInHarvesting", "{\"msg%{public}.0s\":\"SystemService not found in kSystemServicesUsedInHarvesting\", \"SystemService\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
    }
    int v2 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      sub_10054E4F4();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"SystemService not found in kSystemServicesUsedInHarvesting\", \"SystemService\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419560, &stru_1022BABA0);
  }
}

void sub_101A64E64()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"CLTelephonyServiceNotifier Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BB268);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "CLTelephonyServiceNotifier Assertion failed", "{\"msg%{public}.0s\":\"CLTelephonyServiceNotifier Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BB268);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"CLTelephonyServiceNotifier Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 249;
    uint64_t v19 = "-[CLTelephonyServiceAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/TelephonyService/CLTelephonyService.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022BB268);
  }
}

void sub_101A64FF8()
{
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419638))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 612;
    uint64_t v19 = "operator int";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/TelephonyService/CLTelephonyService.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419630, &stru_1022BB328);
  }
}

void sub_101A6518C()
{
}

void sub_101A651B8()
{
}

void sub_101A651E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_1001DB3B0();
  a27 = v28;
  a28 = v29;
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10058B06C())
    {
      sub_1001DB29C();
      sub_1001DE4DC((void *)&_mh_execute_header, v30, v31, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BBAF8);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v32, v33, v34, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BBAF8);
      }
    }
    if (sub_1002D0574())
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v35, v36, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022BBAF8);
  }
}

void sub_101A6536C(uint64_t a1)
{
  int v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

void sub_101A65394()
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  if (sub_10058B06C())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"WifiService, dispatchQ, Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
  }
  if (os_signpost_enabled((os_log_t)qword_1024193A8))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v2, v3, v4, "WifiService, dispatchQ, Assertion failed", "{\"msg%{public}.0s\":\"WifiService, dispatchQ, Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
  }
  if (sub_1002D0574())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"WifiService, dispatchQ, Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }
}

uint64_t sub_101A6551C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void sub_101A65540()
{
  sub_10058B084();
  if (!v1) {
    dispatch_once(&qword_102419630, &stru_1022BBB78);
  }
  if (sub_10058B06C())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(void *)(v0 + 1584) != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
  }
  if (os_signpost_enabled((os_log_t)qword_102419638))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v4, v5, v6, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(void *)(v0 + 1584) != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
  }
  if (sub_1002D0574())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
}

void sub_101A656BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_1001DB3B0();
  a27 = v28;
  a28 = v29;
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10058B06C())
    {
      sub_1001DB29C();
      sub_1001DE4DC((void *)&_mh_execute_header, v30, v31, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BBB78);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419638))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v32, v33, v34, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BBB78);
      }
    }
    if (sub_1002D0574())
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v35, v36, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419630, &stru_1022BBB78);
  }
}

void sub_101A6584C()
{
  sub_10058B084();
  if (!v1) {
    dispatch_once(&qword_102419630, &stru_1022BBB78);
  }
  if (sub_10058B06C())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(void *)(v0 + 1584) != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
  }
  if (os_signpost_enabled((os_log_t)qword_102419638))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v4, v5, v6, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(void *)(v0 + 1584) != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
  }
  if (sub_1002D0574())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
}

void sub_101A659C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_1001DB3B0();
  a27 = v28;
  a28 = v29;
  if (qword_1024193A0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10058B06C())
    {
      sub_1001DB29C();
      sub_1001DE4DC((void *)&_mh_execute_header, v30, v31, "{\"msg%{public}.0s\":\"No predefined scan options exist for this type. Call toWifiDeviceOptions(const CLWifiService_Type::ScanParameters&) instead\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_1024193A8))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v32, v33, v34, "No predefined scan options exist for this type. Call toWifiDeviceOptions(const CLWifiService_Type::ScanParameters&) instead", "{\"msg%{public}.0s\":\"No predefined scan options exist for this type. Call toWifiDeviceOptions(const CLWifiService_Type::ScanParameters&) instead\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
    }
    if (sub_1002D0574())
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v35, v36, "{\"msg%{public}.0s\":\"No predefined scan options exist for this type. Call toWifiDeviceOptions(const CLWifiService_Type::ScanParameters&) instead\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
}

void sub_101A65B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_1001DB3B0();
  a27 = v28;
  a28 = v29;
  if (qword_1024193A0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10058B06C())
    {
      sub_1001DB29C();
      sub_1001DE4DC((void *)&_mh_execute_header, v30, v31, "{\"msg%{public}.0s\":\"Attempting to scan with an invalid scan type\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_1024193A8))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v32, v33, v34, "Attempting to scan with an invalid scan type", "{\"msg%{public}.0s\":\"Attempting to scan with an invalid scan type\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
    }
    if (sub_1002D0574())
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v35, v36, "{\"msg%{public}.0s\":\"Attempting to scan with an invalid scan type\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
}

void sub_101A65CE8(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
}

uint64_t sub_101A65CFC(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(void *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
  return result;
}

void sub_101A65D68(_DWORD *a1)
{
  sub_1005A6CBC();
  if (!v3) {
    dispatch_once(&qword_102419380, &stru_1022BCB68);
  }
  if (sub_1005A6CC8())
  {
    sub_100219C98();
    sub_100234FD0((void *)&_mh_execute_header, v4, v5, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, v7, v8, v9, v19[0]);
    sub_1005A6CBC();
    if (!v3) {
      dispatch_once(&qword_102419380, &stru_1022BCB68);
    }
  }
  int v10 = *(NSObject **)(v1 + 904);
  if (os_signpost_enabled(v10))
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v10, v11, v12, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v19);
    sub_1005A6CBC();
    if (!v3) {
      dispatch_once(&qword_102419380, &stru_1022BCB68);
    }
  }
  if (os_log_type_enabled(*(os_log_t *)(v1 + 904), OS_LOG_TYPE_INFO))
  {
    sub_100219C98();
    sub_100234FF0((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19[0]);
  }
  *a1 = 112;
}

void sub_101A65EEC(_DWORD *a1)
{
  sub_1005A6CBC();
  if (!v3) {
    dispatch_once(&qword_102419380, &stru_1022BCB68);
  }
  if (sub_1005A6CC8())
  {
    sub_100219C98();
    sub_100234FD0((void *)&_mh_execute_header, v4, v5, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, v7, v8, v9, v19[0]);
    sub_1005A6CBC();
    if (!v3) {
      dispatch_once(&qword_102419380, &stru_1022BCB68);
    }
  }
  int v10 = *(NSObject **)(v1 + 904);
  if (os_signpost_enabled(v10))
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v10, v11, v12, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v19);
    sub_1005A6CBC();
    if (!v3) {
      dispatch_once(&qword_102419380, &stru_1022BCB68);
    }
  }
  if (os_log_type_enabled(*(os_log_t *)(v1 + 904), OS_LOG_TYPE_INFO))
  {
    sub_100219C98();
    sub_100234FF0((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19[0]);
  }
  *a1 = 107;
}

uint64_t sub_101A66070(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void sub_101A660A8()
{
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BCB88);
      }
    }
    uint64_t v1 = qword_102419638;
    if (os_signpost_enabled((os_log_t)qword_102419638))
    {
      sub_1001DB29C();
      sub_100219C3C((void *)&_mh_execute_header, v1, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BCB88);
      }
    }
    uint64_t v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419630, &stru_1022BCB88);
  }
}

void sub_101A6626C()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BCE80);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BCE80);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 56;
    uint64_t v19 = "-[CLMotionStateAdapter beginService]";
    uint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Context/CLMotionState.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022BCE80);
  }
}

void sub_101A66400()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BD010);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BD010);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_1022BD010);
  }
}

void sub_101A66584()
{
}

void sub_101A665B0()
{
}

void sub_101A665DC()
{
}

void sub_101A66608()
{
}

void sub_101A66634()
{
}

void sub_101A66660()
{
}

void sub_101A6668C()
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  uint64_t v0 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_FAULT))
  {
    sub_100452A30();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Exception while decoding locationTypes\"}", v2, 0x12u);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022BD230);
    }
  }
  int v1 = qword_102419458;
  if (os_signpost_enabled((os_log_t)qword_102419458))
  {
    sub_100452A30();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Exception while decoding locationTypes", "{\"msg%{public}.0s\":\"Exception while decoding locationTypes\"}", v2, 0x12u);
  }
  objc_end_catch();
}

void sub_101A667DC()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BD270);
      }
    }
    int v1 = qword_102418F98;
    if (os_signpost_enabled((os_log_t)qword_102418F98))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BD270);
      }
    }
    int v2 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_1022BD270);
  }
}

void sub_101A669AC()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BD8B0);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BD8B0);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 23;
    uint64_t v19 = "-[CLGyroCalibrationDatabaseLocationdAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabase.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022BD8B0);
  }
}

void sub_101A66B40(char a1)
{
  if ((a1 & 1) == 0) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1005DBFA0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, (uint64_t)v19, v20, (uint64_t)v21, v22, v23);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BDBE8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v1 + 1592)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v8, v9, v10, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, (uint64_t)v19, v20, (uint64_t)v21, v22, v23);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BDBE8);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v1 + 1592), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, (uint64_t)v19, v20, (uint64_t)v21, v22, v23);
    }
    uint64_t v20 = 57;
    uint8_t v21 = "traverseTileFile";
    uint64_t v19 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTransitMacTile.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419630, &stru_1022BDBE8);
  }
}

void sub_101A66CC4(char a1)
{
  if ((a1 & 1) == 0) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1005DBFA0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, (uint64_t)v19, v20, (uint64_t)v21, v22, v23);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BDBE8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v1 + 1592)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v8, v9, v10, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, (uint64_t)v19, v20, (uint64_t)v21, v22, v23);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BDBE8);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v1 + 1592), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, (uint64_t)v19, v20, (uint64_t)v21, v22, v23);
    }
    uint64_t v20 = 131;
    uint8_t v21 = "extractTransitMacAddresses";
    uint64_t v19 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTransitMacTile.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419630, &stru_1022BDBE8);
  }
}

#error "101A66EC4: call analysis failed (funcsize=75)"

#error "101A67038: call analysis failed (funcsize=75)"

#error "101A671AC: call analysis failed (funcsize=75)"

void sub_101A672A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_1001DB3B0();
  a27 = v28;
  a28 = v29;
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100436D88())
    {
      sub_1001DB29C();
      sub_1001DE4DC((void *)&_mh_execute_header, v30, v31, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BE4A0);
      }
    }
    if (sub_1004FF974())
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v32, v33, v34, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BE4A0);
      }
    }
    if (sub_1004FF958())
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v35, v36, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419630, &stru_1022BE4A0);
  }
}

void sub_101A67418()
{
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  if (sub_100606CE0())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Destination name should not be NULL\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v0 + 1512)))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v3, v4, v5, "Destination name should not be NULL", "{\"msg%{public}.0s\":\"Destination name should not be NULL\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
  }
  if (os_log_type_enabled(*(os_log_t *)(v0 + 1512), OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v6, v7, "{\"msg%{public}.0s\":\"Destination name should not be NULL\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
  }
}

void sub_101A675A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_1001DB3B0();
  a27 = v28;
  a28 = v29;
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100436D88())
    {
      sub_1001DB29C();
      sub_1001DE4DC((void *)&_mh_execute_header, v30, v31, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BE4A0);
      }
    }
    if (sub_1004FF974())
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v32, v33, v34, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BE4A0);
      }
    }
    if (sub_1004FF958())
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v35, v36, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419630, &stru_1022BE4A0);
  }
}

void sub_101A6771C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_1001DB3B0();
  a27 = v29;
  a28 = v30;
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100606CE0())
    {
      sub_1001DB29C();
      sub_1001DE4DC((void *)&_mh_execute_header, v31, v32, "{\"msg%{public}.0s\":\"We should only have one transaction at a time and thus should be back at zero\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v28 + 1512)))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v33, v34, v35, "We should only have one transaction at a time and thus should be back at zero", "{\"msg%{public}.0s\":\"We should only have one transaction at a time and thus should be back at zero\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v28 + 1512), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v36, v37, "{\"msg%{public}.0s\":\"We should only have one transaction at a time and thus should be back at zero\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_101A678A4()
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BE4A0);
  }
  if (sub_100436D88())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BE4A0);
    }
  }
  if (sub_1004FF974())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v2, v3, v4, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BE4A0);
    }
  }
  if (sub_1004FF958())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }
}

#error "101A67A9C: call analysis failed (funcsize=77)"

#error "101A67C18: call analysis failed (funcsize=77)"

#error "101A67D94: call analysis failed (funcsize=77)"

#error "101A67F08: call analysis failed (funcsize=73)"

#error "101A68074: call analysis failed (funcsize=73)"

#error "101A681E0: call analysis failed (funcsize=73)"

#error "101A6834C: call analysis failed (funcsize=73)"

void sub_101A6843C()
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BF550);
  }
  if (sub_100436D88())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BF550);
    }
  }
  if (sub_1004FF974())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v1, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BF550);
    }
  }
  if (sub_1004FF958())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
  }
}

uint64_t sub_101A685C8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

#error "101A6867C: call analysis failed (funcsize=73)"

void sub_101A6876C()
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022BF818);
  }
  uint64_t v0 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#luLive locationData serilization should only give 1 location\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022BF818);
    }
  }
  uint64_t v1 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luLive locationData serilization should only give 1 location", "{\"msg%{public}.0s\":\"#luLive locationData serilization should only give 1 location\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022BF818);
    }
  }
  uint64_t v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#luLive locationData serilization should only give 1 location\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

#error "101A689B0: call analysis failed (funcsize=73)"

#error "101A68B20: call analysis failed (funcsize=73)"

#error "101A68C90: call analysis failed (funcsize=73)"

#error "101A68E00: call analysis failed (funcsize=73)"

#error "101A68F70: call analysis failed (funcsize=73)"

void sub_101A69064()
{
  __assert_rtn("-[CLCompanionSyncInterestZone writeTo:]", "CLCompanionSyncInterestZone.m", 323, "nil != self->_zoneIdentifier");
}

void sub_101A69090()
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022C04D8);
  }
  uint64_t v0 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C04D8);
    }
  }
  uint64_t v1 = qword_102419638;
  if (os_signpost_enabled((os_log_t)qword_102419638))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C04D8);
    }
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

uint64_t sub_101A69258(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

#error "101A69300: call analysis failed (funcsize=77)"

#error "101A69474: call analysis failed (funcsize=75)"

#error "101A695F0: call analysis failed (funcsize=78)"

#error "101A69774: call analysis failed (funcsize=77)"

void sub_101A6986C()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022C1760);
      }
    }
    uint64_t v1 = qword_102419588;
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022C1760);
      }
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022C1760);
  }
}

uint64_t sub_101A69A3C()
{
  sub_1001F4274();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_101A69A70()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022C1FB0);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022C1FB0);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 31;
    uint64_t v19 = "-[CLWifiLocationProviderAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/CLWifiLocationProvider.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022C1FB0);
  }
}

void sub_101A69C04(char a1)
{
  if ((a1 & 1) == 0) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"should not send out an empty container of batched wifi locations\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_1024193B8))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "should not send out an empty container of batched wifi locations", "{\"msg%{public}.0s\":\"should not send out an empty container of batched wifi locations\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"should not send out an empty container of batched wifi locations\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 963;
    uint64_t v20 = "handleLogicOutput";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/CLWifiLocationProvider.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
  }
}

#error "101A69E24: call analysis failed (funcsize=81)"

#error "101A69FA0: call analysis failed (funcsize=72)"

#error "101A6A108: call analysis failed (funcsize=72)"

#error "101A6A270: call analysis failed (funcsize=72)"

#error "101A6A3D8: call analysis failed (funcsize=72)"

void sub_101A6A4C4()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022C26C8);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022C26C8);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 160;
    uint64_t v19 = "-[CLMotionStateMediatorAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Workout/CLMotionStateMediator.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022C26C8);
  }
}

void sub_101A6A658(std::__shared_weak_count **a1, std::__shared_weak_count **a2, std::__shared_weak_count *this)
{
  int v5 = *a1;
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (*a2) {
    sub_1000DB0A0(*a2);
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  operator delete(v6);
}

void sub_101A6A6A0()
{
  if (qword_102418FD0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1006B69FC())
    {
      sub_100219CC4();
      sub_100219DFC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Wiring bug, should not be subscribed to \", \"notification\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022C2688);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 4056)))
    {
      sub_100219CC4();
      sub_100219CFC((void *)&_mh_execute_header, v7, v8, v9, "Wiring bug, should not be subscribed to ", "{\"msg%{public}.0s\":\"Wiring bug, should not be subscribed to \", \"notification\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022C2688);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 4056), OS_LOG_TYPE_INFO))
    {
      sub_100219CC4();
      sub_100219E1C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Wiring bug, should not be subscribed to \", \"notification\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 2134;
    uint64_t v20 = "onDaemonStatus";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Workout/CLMotionStateMediator.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418FD0, &stru_1022C2688);
  }
}

void sub_101A6A834()
{
  if (qword_102418FD0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1006B69FC())
    {
      sub_100219CC4();
      sub_100219DFC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Wiring bug, should not be subscribed to \", \"notification\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022C2688);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 4056)))
    {
      sub_100219CC4();
      sub_100219CFC((void *)&_mh_execute_header, v7, v8, v9, "Wiring bug, should not be subscribed to ", "{\"msg%{public}.0s\":\"Wiring bug, should not be subscribed to \", \"notification\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022C2688);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 4056), OS_LOG_TYPE_INFO))
    {
      sub_100219CC4();
      sub_100219E1C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Wiring bug, should not be subscribed to \", \"notification\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 2235;
    uint64_t v20 = "onMotionStateObserverNotification";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Workout/CLMotionStateMediator.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418FD0, &stru_1022C2688);
  }
}

uint64_t sub_101A6A9C8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void sub_101A6AA00()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022C3D70);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022C3D70);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_1022C3D70);
  }
}

void sub_101A6AB84()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022C4CD8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022C4CD8);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_1022C4CD8);
  }
}

void sub_101A6AD08()
{
  sub_1006DA13C();
  if (!v1) {
    dispatch_once(&qword_1024195E0, &stru_1022C4EF8);
  }
  if (sub_100606CE0())
  {
    sub_1001DB2F0();
    sub_1003252B0((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"failure to bind row_id\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v19);
    sub_1006DA13C();
    if (!v1) {
      dispatch_once(&qword_1024195E0, &stru_1022C4EF8);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v0 + 1512)))
  {
    sub_1001DB2F0();
    sub_100325284((void *)&_mh_execute_header, v8, v9, v10, "failure to bind row_id", "{\"msg%{public}.0s\":\"failure to bind row_id\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v19);
    sub_1006DA13C();
    if (!v1) {
      dispatch_once(&qword_1024195E0, &stru_1022C4EF8);
    }
  }
  if (sub_1006DA148())
  {
    sub_1001DB2F0();
    sub_1003252D0((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"failure to bind row_id\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19);
  }
}

void sub_101A6AE6C()
{
  sub_1006DA13C();
  if (!v1) {
    dispatch_once(&qword_1024195E0, &stru_1022C4EF8);
  }
  if (sub_100606CE0())
  {
    sub_1001DB2F0();
    sub_1003252B0((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"failure to bind\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v19);
    sub_1006DA13C();
    if (!v1) {
      dispatch_once(&qword_1024195E0, &stru_1022C4EF8);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v0 + 1512)))
  {
    sub_1001DB2F0();
    sub_100325284((void *)&_mh_execute_header, v8, v9, v10, "failure to bind", "{\"msg%{public}.0s\":\"failure to bind\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v19);
    sub_1006DA13C();
    if (!v1) {
      dispatch_once(&qword_1024195E0, &stru_1022C4EF8);
    }
  }
  if (sub_1006DA148())
  {
    sub_1001DB2F0();
    sub_1003252D0((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"failure to bind\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19);
  }
}

void sub_101A6AFD0()
{
  sub_1006DA13C();
  if (!v1) {
    dispatch_once(&qword_1024195E0, &stru_1022C4EF8);
  }
  if (sub_100606CE0())
  {
    sub_1001DB2F0();
    sub_1003252B0((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"failure to bind mac when deleting by mac!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v19);
    sub_1006DA13C();
    if (!v1) {
      dispatch_once(&qword_1024195E0, &stru_1022C4EF8);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v0 + 1512)))
  {
    sub_1001DB2F0();
    sub_100325284((void *)&_mh_execute_header, v8, v9, v10, "failure to bind mac when deleting by mac!", "{\"msg%{public}.0s\":\"failure to bind mac when deleting by mac!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v19);
    sub_1006DA13C();
    if (!v1) {
      dispatch_once(&qword_1024195E0, &stru_1022C4EF8);
    }
  }
  if (sub_1006DA148())
  {
    sub_1001DB2F0();
    sub_1003252D0((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"failure to bind mac when deleting by mac!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19);
  }
}

#error "101A6B1B8: call analysis failed (funcsize=78)"

void sub_101A6B2B4()
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022C5170);
  }
  if (sub_100436D88())
  {
    sub_1001DB2F0();
    sub_1003252B0((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v15[0]);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C5170);
    }
  }
  if (sub_1004FF974())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C5170);
    }
  }
  if (sub_1004FF958())
  {
    sub_1001DB2F0();
    sub_1003252D0((void *)&_mh_execute_header, v9, v10, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v13, v14, v15[0]);
  }
}

#error "101A6B49C: call analysis failed (funcsize=73)"

#error "101A6B608: call analysis failed (funcsize=73)"

#error "101A6B774: call analysis failed (funcsize=73)"

#error "101A6B8E0: call analysis failed (funcsize=73)"

void sub_101A6B9D0(_DWORD *a1)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022C51B0);
  }
  uint64_t v2 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
  {
    sub_100219C98();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Nearby request complete without keys for the tag\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022C51B0);
    }
  }
  uint64_t v3 = qword_1024193C8;
  if (os_signpost_enabled((os_log_t)qword_1024193C8))
  {
    sub_100219C98();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Nearby request complete without keys for the tag", "{\"msg%{public}.0s\":\"Nearby request complete without keys for the tag\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022C51B0);
    }
  }
  uint64_t v4 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_INFO))
  {
    sub_100219C98();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Nearby request complete without keys for the tag\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }
  *a1 = 2253;
}

void sub_101A6BBA4()
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022C51F0);
  }
  if (sub_10058B06C())
  {
    sub_1001DB2F0();
    sub_1003252B0((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Partial numer of ALS aps saved\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v15[0]);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C51F0);
    }
  }
  if (os_signpost_enabled((os_log_t)qword_102419388))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v6, v7, v8, "Partial numer of ALS aps saved", "{\"msg%{public}.0s\":\"Partial numer of ALS aps saved\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C51F0);
    }
  }
  if (sub_1002D0574())
  {
    sub_1001DB2F0();
    sub_1003252D0((void *)&_mh_execute_header, v9, v10, "{\"msg%{public}.0s\":\"Partial numer of ALS aps saved\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v13, v14, v15[0]);
  }
}

#error "101A6BDA8: call analysis failed (funcsize=78)"

void sub_101A6BEA4()
{
  if (qword_1024190E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[AccessoryProximity] Incorrect optical and temperature size.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022C5518);
      }
    }
    uint64_t v1 = qword_1024190E8;
    if (os_signpost_enabled((os_log_t)qword_1024190E8))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[AccessoryProximity] Incorrect optical and temperature size.", "{\"msg%{public}.0s\":\"[AccessoryProximity] Incorrect optical and temperature size.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022C5518);
      }
    }
    uint64_t v2 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[AccessoryProximity] Incorrect optical and temperature size.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024190E0, &stru_1022C5518);
  }
}

void sub_101A6C074()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022C5880);
      }
    }
    uint64_t v1 = qword_102419588;
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022C5880);
      }
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022C5880);
  }
}

void sub_101A6C244(void *a1)
{
}

void sub_101A6C2AC()
{
}

void sub_101A6C314()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022C6418);
      }
    }
    uint64_t v1 = qword_102419588;
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022C6418);
      }
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022C6418);
  }
}

void sub_101A6C4E4(char a1)
{
  if ((a1 & 1) == 0) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v1 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C6570);
      }
    }
    uint64_t v2 = qword_102419638;
    if (os_signpost_enabled((os_log_t)qword_102419638))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C6570);
      }
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419630, &stru_1022C6570);
  }
}

void sub_101A6C6B4()
{
}

void sub_101A6C6E0()
{
}

void sub_101A6C70C()
{
}

void sub_101A6C738()
{
}

void sub_101A6C764()
{
}

void sub_101A6C790()
{
}

void sub_101A6C7BC()
{
  if (qword_102419080 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022C73F0);
      }
    }
    uint64_t v1 = qword_102419088;
    if (os_signpost_enabled((os_log_t)qword_102419088))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Service required", "{\"msg%{public}.0s\":\"Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022C73F0);
      }
    }
    uint64_t v2 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419080, &stru_1022C73F0);
  }
}

void sub_101A6C98C()
{
}

void sub_101A6C9B8()
{
}

void sub_101A6C9E4()
{
  if (qword_102419380 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CLC: Enable CLRouteListener when already enabled\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C7838);
      }
    }
    uint64_t v1 = qword_102419388;
    if (os_signpost_enabled((os_log_t)qword_102419388))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLC: Enable CLRouteListener when already enabled", "{\"msg%{public}.0s\":\"CLC: Enable CLRouteListener when already enabled\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C7838);
      }
    }
    uint64_t v2 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLC: Enable CLRouteListener when already enabled\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419380, &stru_1022C7838);
  }
}

void sub_101A6CBB4(char a1)
{
  if ((a1 & 1) == 0) {
    dispatch_once(&qword_1024193D0, &stru_1022C7B98);
  }
  uint64_t v1 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CLSE,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022C7B98);
    }
  }
  uint64_t v2 = qword_1024193D8;
  if (os_signpost_enabled((os_log_t)qword_1024193D8))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLSE,Assertion failed", "{\"msg%{public}.0s\":\"CLSE,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022C7B98);
    }
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLSE,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
  }
}

uint64_t sub_101A6CD74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

void (***sub_101A6CD98(void (***a1)(void), void (***a2)(void)))(void)
{
  uint64_t v3 = a1;
  uint64_t v4 = a1;
  do
  {
    uint64_t v5 = *v4;
    v4 += 15;
    (*v5)();
    v3 += 15;
    uint64_t result = v4;
  }
  while (v4 != a2);
  return result;
}

void sub_101A6CDFC()
{
  if (qword_1024193B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_FAULT))
    {
      sub_1007935A0();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Usage of incorrect column to update timestamp\", \"column\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022C8300);
      }
    }
    uint64_t v1 = qword_1024193B8;
    if (os_signpost_enabled((os_log_t)qword_1024193B8))
    {
      sub_1007935A0();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Usage of incorrect column to update timestamp", "{\"msg%{public}.0s\":\"Usage of incorrect column to update timestamp\", \"column\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022C8300);
      }
    }
    uint64_t v2 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      sub_1007935A0();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Usage of incorrect column to update timestamp\", \"column\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1024193B0, &stru_1022C8300);
  }
}

void sub_101A6D008()
{
}

#error "101A6D08C: call analysis failed (funcsize=72)"

#error "101A6D1F4: call analysis failed (funcsize=72)"

void sub_101A6D2E4()
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  if (sub_1007E6280())
  {
    sub_1007E626C();
    sub_1002AA48C();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Connection to #CoreLocationAgent already exists\", \"User\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, 0x30u);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
  }
  uint64_t v2 = *(NSObject **)(v1 + 1336);
  if (os_signpost_enabled(v2))
  {
    sub_1007E626C();
    sub_1002AA48C();
    sub_1007E62D0();
    _os_signpost_emit_with_name_impl(v3, v4, v5, v6, v7, v8, v9, 0x30u);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
  }
  if (sub_1007E62B4())
  {
    sub_1007E626C();
    sub_1002AA48C();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Connection to #CoreLocationAgent already exists\", \"User\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, 0x30u);
  }
}

#error "101A6D508: call analysis failed (funcsize=73)"

#error "101A6D678: call analysis failed (funcsize=73)"

#error "101A6D7E8: call analysis failed (funcsize=73)"

#error "101A6D958: call analysis failed (funcsize=73)"

#error "101A6DAC8: call analysis failed (funcsize=72)"

#error "101A6DC30: call analysis failed (funcsize=73)"

void sub_101A6DD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v25;
  a24 = v26;
  sub_1007E62A0();
  if (!v27) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  if (sub_1007E61C0())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v28, v29, "{\"msg%{public}.0s\":\"Path must not be the empty string here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v24 + 1328) != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
  }
  if (sub_1007E6240())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v30, v31, v32, "Path must not be the empty string here", "{\"msg%{public}.0s\":\"Path must not be the empty string here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v24 + 1328) != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
  }
  if (sub_1007E61E0())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"Path must not be the empty string here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100219E80();
}

#error "101A6DEF8: call analysis failed (funcsize=73)"

void sub_101A6DFF0(uint64_t a1)
{
  if (qword_102419530 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1007E6280())
    {
      sub_10014D19C(a1);
      sub_1007E61FC();
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"destroying disconnected #dic - not found\", \"ClientKey\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    uint64_t v1 = *(NSObject **)(v2 + 1336);
    if (os_signpost_enabled(v1))
    {
      sub_10014D19C(a1);
      sub_1007E61FC();
      sub_1007E62D0();
      _os_signpost_emit_with_name_impl(v4, v5, v6, v7, v8, v9, v10, 0x3Au);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    if (sub_1007E62B4())
    {
      sub_10014D19C(a1);
      sub_1007E61FC();
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"destroying disconnected #dic - not found\", \"ClientKey\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
}

void sub_101A6E1C0()
{
  if (qword_102419530 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1007E6280())
    {
      sub_100219C60();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#monitor unable to create storage token\", \"error\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    uint64_t v0 = *(NSObject **)(v1 + 1336);
    if (os_signpost_enabled(v0))
    {
      sub_100219C60();
      sub_1007E62D0();
      _os_signpost_emit_with_name_impl(v2, v3, v4, v5, v6, v7, v8, 0x2Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    if (sub_1007E62B4())
    {
      sub_100219C60();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#monitor unable to create storage token\", \"error\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
}

#error "101A6E3E8: call analysis failed (funcsize=73)"

void sub_101A6E4E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v25;
  a24 = v26;
  sub_1007E62A0();
  if (!v27) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  if (sub_1007E61C0())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v28, v29, "{\"msg%{public}.0s\":\"info.plist zone registration, zone-to-reconcile should be identical to registered zone\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v24 + 1328) != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
  }
  if (sub_1007E6240())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v30, v31, v32, "info.plist zone registration, zone-to-reconcile should be identical to registered zone", "{\"msg%{public}.0s\":\"info.plist zone registration, zone-to-reconcile should be identical to registered zone\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v24 + 1328) != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
  }
  if (sub_1007E61E0())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"info.plist zone registration, zone-to-reconcile should be identical to registered zone\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100219E80();
}

void sub_101A6E638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v25;
  a24 = v26;
  sub_1007E62A0();
  if (!v27) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  if (sub_1007E61C0())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v28, v29, "{\"msg%{public}.0s\":\"info.plist zone registration, zone-to-reconcile should exists in clients.plist\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v24 + 1328) != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
  }
  if (sub_1007E6240())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v30, v31, v32, "info.plist zone registration, zone-to-reconcile should exists in clients.plist", "{\"msg%{public}.0s\":\"info.plist zone registration, zone-to-reconcile should exists in clients.plist\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v24 + 1328) != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
  }
  if (sub_1007E61E0())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"info.plist zone registration, zone-to-reconcile should exists in clients.plist\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100219E80();
}

#error "101A6E814: call analysis failed (funcsize=80)"

#error "101A6E9A4: call analysis failed (funcsize=82)"

#error "101A6EB20: call analysis failed (funcsize=73)"

#error "101A6EC90: call analysis failed (funcsize=73)"

#error "101A6EE00: call analysis failed (funcsize=73)"

#error "101A6EF70: call analysis failed (funcsize=73)"

void sub_101A6F068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v24;
  a24 = v25;
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022C97E8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v26, v27, "{\"msg%{public}.0s\":\"destruction without invalidation\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022C97E8);
    }
  }
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v28, v29, v30, "destruction without invalidation", "{\"msg%{public}.0s\":\"destruction without invalidation\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022C97E8);
    }
  }
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v31, v32, "{\"msg%{public}.0s\":\"destruction without invalidation\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100219E80();
}

void sub_101A6F1F0()
{
  __assert_rtn("onStatusBarNotification", "CLClientManager.mm", 5469, "data.entity == CLStatusBarIconManager_Type::kEntityClassSystemService");
}

void sub_101A6F21C()
{
  __assert_rtn("onStatusBarNotification", "CLClientManager.mm", 5473, "data.entity == CLStatusBarIconManager_Type::kEntityClassFindMyiPhone");
}

void sub_101A6F248()
{
  __assert_rtn("onStatusBarNotification", "CLClientManager.mm", 5477, "data.entity == CLStatusBarIconManager_Type::kEntityClassEmergencyService");
}

void sub_101A6F274()
{
  if (qword_102419090 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1007F12E4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022C9E38);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 152)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022C9E38);
      }
    }
    if (sub_1007F1304())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 227;
    uint64_t v20 = "startThreads";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/DeviceMotion/CLSensorTemperatureController.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419090, &stru_1022C9E38);
  }
}

void sub_101A6F3F4()
{
  if (qword_102419090 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1007F12E4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022C9E38);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 152)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022C9E38);
      }
    }
    if (sub_1007F1304())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 246;
    uint64_t v20 = "stopThreads";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/DeviceMotion/CLSensorTemperatureController.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419090, &stru_1022C9E38);
  }
}

void sub_101A6F574()
{
  if (qword_102419090 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1007F12E4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022C9E38);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 152)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022C9E38);
      }
    }
    if (sub_1007F1304())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 76;
    uint64_t v20 = "setLoad";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/DeviceMotion/CLSensorTemperatureController.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419090, &stru_1022C9E38);
  }
}

#error "101A6F770: call analysis failed (funcsize=73)"

#error "101A6F8E0: call analysis failed (funcsize=73)"

#error "101A6FA50: call analysis failed (funcsize=73)"

#error "101A6FBC0: call analysis failed (funcsize=73)"

#error "101A6FD30: call analysis failed (funcsize=73)"

void sub_101A6FE24()
{
  if (qword_102419530 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1007E61C0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"#slv programmer error.  Only call this function after setting client interest to PendingDelete\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CA5A8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1336)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "#slv programmer error.  Only call this function after setting client interest to PendingDelete", "{\"msg%{public}.0s\":\"#slv programmer error.  Only call this function after setting client interest to PendingDelete\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CA5A8);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1336), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"#slv programmer error.  Only call this function after setting client interest to PendingDelete\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 555;
    uint64_t v20 = "-[CLSignificantVisitManager actOnPendingDeleteForClientKey:]";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLSignificantVisitManager.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419530, &stru_1022CA5A8);
  }
}

void sub_101A6FFA8()
{
  if (qword_102419530 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1007E61C0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"#slv Visit must be non-nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CA5A8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1336)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "#slv Visit must be non-nil", "{\"msg%{public}.0s\":\"#slv Visit must be non-nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CA5A8);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1336), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"#slv Visit must be non-nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 598;
    uint64_t v20 = "-[CLSignificantVisitManager notifyClientsOfVisit:]";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLSignificantVisitManager.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419530, &stru_1022CA5A8);
  }
}

uint64_t sub_101A7012C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void sub_101A70164()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022CAD28);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022CAD28);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_1022CAD28);
  }
}

void sub_101A702E8()
{
}

void sub_101A70314()
{
  __assert_rtn("TransposeDataFootprint", "cnmatrix.h", 122, "scratch != nullptr");
}

void sub_101A70340()
{
}

void sub_101A7036C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v26;
  a24 = v27;
  sub_100857C1C();
  if (!v28) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  if (sub_100857B88())
  {
    sub_1001DB2F0();
    sub_100219D40((void *)&_mh_execute_header, v24, v29, "{\"msg%{public}.0s\":\"fPowerLogger assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v25 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
  }
  if (sub_100857BC4())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v30, v31, v32, "fPowerLogger assertion failed", "{\"msg%{public}.0s\":\"fPowerLogger assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v25 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
  }
  if (sub_100857BA8())
  {
    sub_1001DB2F0();
    sub_100219D28((void *)&_mh_execute_header, v24, v33, "{\"msg%{public}.0s\":\"fPowerLogger assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100219E80();
}

void sub_101A704CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v27;
  a24 = v28;
  uint64_t v30 = v29;
  sub_100857C30();
  if (!v31) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  if (sub_100857BFC())
  {
    sub_100219C98();
    sub_100219D40((void *)&_mh_execute_header, v24, v32, "{\"msg%{public}.0s\":\"#awd,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v25 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
  }
  uint64_t v33 = *(NSObject **)(v26 + 984);
  if (os_signpost_enabled(v33))
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v33, v34, v35, "#awd,Assertion failed", "{\"msg%{public}.0s\":\"#awd,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v25 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
  }
  uint64_t v36 = *(NSObject **)(v26 + 984);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
  {
    sub_100219C98();
    sub_100219D28((void *)&_mh_execute_header, v36, v37, "{\"msg%{public}.0s\":\"#awd,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  _DWORD *v30 = 148;
  sub_100219E80();
}

void sub_101A70650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v27;
  a24 = v28;
  uint64_t v30 = v29;
  sub_100857C30();
  if (!v31) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  if (sub_100857BFC())
  {
    sub_100219C98();
    sub_100219D40((void *)&_mh_execute_header, v24, v32, "{\"msg%{public}.0s\":\"#gnssawd Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v25 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
  }
  uint64_t v33 = *(NSObject **)(v26 + 984);
  if (os_signpost_enabled(v33))
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v33, v34, v35, "#gnssawd Assertion failed", "{\"msg%{public}.0s\":\"#gnssawd Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v25 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
  }
  uint64_t v36 = *(NSObject **)(v26 + 984);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
  {
    sub_100219C98();
    sub_100219D28((void *)&_mh_execute_header, v36, v37, "{\"msg%{public}.0s\":\"#gnssawd Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  _DWORD *v30 = 176;
  sub_100219E80();
}

#error "101A70848: call analysis failed (funcsize=77)"

#error "101A709D0: call analysis failed (funcsize=74)"

#error "101A70B3C: call analysis failed (funcsize=77)"

#error "101A70CC4: call analysis failed (funcsize=74)"

#error "101A70E38: call analysis failed (funcsize=74)"

#error "101A70FAC: call analysis failed (funcsize=74)"

#error "101A71120: call analysis failed (funcsize=74)"

void sub_101A71218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v26;
  a24 = v27;
  sub_100857C1C();
  if (!v28) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  if (sub_100857B88())
  {
    sub_1001DB2F0();
    sub_100219D40((void *)&_mh_execute_header, v24, v29, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v25 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
  }
  if (sub_100857BC4())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v30, v31, v32, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v25 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
  }
  if (sub_100857BA8())
  {
    sub_1001DB2F0();
    sub_100219D28((void *)&_mh_execute_header, v24, v33, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100219E80();
}

void sub_101A71378(char *a1, void **a2, void **a3, void **a4)
{
  if (a1[1175] < 0) {
    operator delete(*a2);
  }
  if (a1[1007] < 0) {
    operator delete(*a3);
  }
  if (a1[983] < 0) {
    operator delete(*a4);
  }
}

void sub_101A713D8()
{
  if (qword_102419530 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#monitor unknown variant of condition is received\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CCDD8);
      }
    }
    int v1 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#monitor unknown variant of condition is received", "{\"msg%{public}.0s\":\"#monitor unknown variant of condition is received\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CCDD8);
      }
    }
    int v2 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#monitor unknown variant of condition is received\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419530, &stru_1022CCDD8);
  }
}

#error "101A71624: call analysis failed (funcsize=73)"

#error "101A71794: call analysis failed (funcsize=73)"

#error "101A71904: call analysis failed (funcsize=73)"

#error "101A71A74: call analysis failed (funcsize=73)"

#error "101A71BE4: call analysis failed (funcsize=73)"

void sub_101A71CD8()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022CD4B8);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022CD4B8);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 30;
    uint64_t v19 = "-[CLBacklightStateNotifierAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/BacklightState/CLBacklightStateNotifier.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022CD4B8);
  }
}

void sub_101A71E6C()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022CDBF8);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022CDBF8);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 34;
    uint64_t v19 = "-[CLWatchOrientationSettingsNotifierAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/WatchOrientationSettings/CLWatchOrientationSe"
          "ttingsNotifier.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022CDBF8);
  }
}

void sub_101A72000()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022CDD68);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022CDD68);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_1022CDD68);
  }
}

uint64_t sub_101A72184(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    operator delete();
  }
  uint64_t v5 = *a2;
  *a2 = 0;
  if (v5) {
    operator delete();
  }
  uint64_t result = *a3;
  *a3 = 0;
  if (result)
  {
    operator delete();
  }
  return result;
}

void sub_101A72224()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022CE600);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022CE600);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 51;
    uint64_t v19 = "-[CLCorrectiveCompensatedLocationProviderAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLCorrectiveCompensatedLocationProvider.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022CE600);
  }
}

void sub_101A723B8()
{
  if (qword_102419530 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"#cclp notifying clients when CompensationTimer is scheduled. Not Allowed.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CE620);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "#cclp notifying clients when CompensationTimer is scheduled. Not Allowed.", "{\"msg%{public}.0s\":\"#cclp notifying clients when CompensationTimer is scheduled. Not Allowed.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CE620);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"#cclp notifying clients when CompensationTimer is scheduled. Not Allowed.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 359;
    uint64_t v19 = "notifyClientsWithData";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLCorrectiveCompensatedLocationProvider.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419530, &stru_1022CE620);
  }
}

#error "101A725D0: call analysis failed (funcsize=77)"

#error "101A7274C: call analysis failed (funcsize=77)"

#error "101A728C8: call analysis failed (funcsize=77)"

void sub_101A729C0()
{
}

void sub_101A729EC(uint64_t a1)
{
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*(void **)(a1 + 192));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_101A72A64(void **a1, void **a2, void *a3, uint64_t a4, int a5, uint64_t a6)
{
  int v11 = *a1;
  if (v11)
  {
    a3[13] = v11;
    operator delete(v11);
  }
  int v12 = *a2;
  if (*a2)
  {
    a3[10] = v12;
    operator delete(v12);
  }
  int v13 = (std::__shared_weak_count *)a3[8];
  if (v13) {
    sub_1000DB0A0(v13);
  }
  *(void *)a6 = a4;
  *(_DWORD *)(a6 + 8) = a5;
}

uint64_t sub_101A72AD8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return sub_1008A990C(a2);
}

void sub_101A72B34()
{
  if (qword_102419030 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022CF7C8);
      }
    }
    int v1 = qword_102419038;
    if (os_signpost_enabled((os_log_t)qword_102419038))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022CF7C8);
      }
    }
    int v2 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419030, &stru_1022CF7C8);
  }
}

void sub_101A72D04()
{
  if (qword_1024193B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1008B4A98())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"tile id doesn't exist in tiles map\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022CF878);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 952)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "tile id doesn't exist in tiles map", "{\"msg%{public}.0s\":\"tile id doesn't exist in tiles map\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022CF878);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 952), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"tile id doesn't exist in tiles map\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 97;
    uint64_t v20 = "unprotectedErase";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTilesMap.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1024193B0, &stru_1022CF878);
  }
}

void sub_101A72E90()
{
  if (qword_1024193B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1008B4A98())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"tile id doesn't exist in tiles map\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022CF878);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 952)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "tile id doesn't exist in tiles map", "{\"msg%{public}.0s\":\"tile id doesn't exist in tiles map\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022CF878);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 952), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"tile id doesn't exist in tiles map\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 112;
    uint64_t v20 = "unprotectedAdd";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTilesMap.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1024193B0, &stru_1022CF878);
  }
}

void sub_101A7301C()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022CFB70);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022CFB70);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 36;
    uint64_t v19 = "-[CLFitnessTrackingNotifierAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/FitnessTracking/CLFitnessTrackingNotifier.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022CFB70);
  }
}

void sub_101A731B0()
{
}

void sub_101A731DC()
{
}

void sub_101A73208()
{
}

void sub_101A73234()
{
}

void sub_101A73260()
{
}

void sub_101A7328C()
{
}

void sub_101A732B8()
{
}

void sub_101A732E4()
{
}

void sub_101A73310()
{
}

void sub_101A7333C()
{
}

void sub_101A73368()
{
}

void sub_101A73394()
{
}

void sub_101A733C0()
{
}

void sub_101A733EC()
{
}

void sub_101A73418()
{
}

void sub_101A73444()
{
}

void sub_101A73470()
{
}

void sub_101A7349C()
{
}

void sub_101A734C8()
{
}

void sub_101A734F4()
{
}

void sub_101A73520()
{
}

void sub_101A7354C()
{
}

void sub_101A73578()
{
}

void sub_101A735A4()
{
}

void sub_101A735D0()
{
}

void sub_101A735FC()
{
}

void sub_101A73628()
{
}

void sub_101A73654()
{
}

void sub_101A73680()
{
}

void sub_101A736AC()
{
}

void sub_101A736D8()
{
}

void sub_101A73704()
{
}

void sub_101A73730()
{
}

void sub_101A7375C()
{
}

void sub_101A73788()
{
}

void sub_101A737B4()
{
}

void sub_101A737E0()
{
}

void sub_101A7380C()
{
}

void sub_101A73838()
{
}

void sub_101A73864()
{
}

void sub_101A73890()
{
}

void sub_101A738BC()
{
}

void sub_101A738E8()
{
}

void sub_101A73914()
{
}

void sub_101A73940()
{
}

void sub_101A7396C()
{
}

void sub_101A73998()
{
}

void sub_101A739C4()
{
}

void sub_101A739F0()
{
}

void sub_101A73A1C()
{
}

void sub_101A73A48()
{
  if (qword_102419520 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1009060B0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"failed to invalidate before dealloc\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022D37F0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1320)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "failed to invalidate before dealloc", "{\"msg%{public}.0s\":\"failed to invalidate before dealloc\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022D37F0);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1320), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"failed to invalidate before dealloc\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 48;
    uint64_t v20 = "-[CLStatusBarAssertion dealloc]";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/Subscriptions/CLVisibilityAssertion.m";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419520, &stru_1022D37F0);
  }
}

void sub_101A73BCC()
{
  if (qword_102419520 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1009060B0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"failed to get assertion\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022D37F0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1320)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "failed to get assertion", "{\"msg%{public}.0s\":\"failed to get assertion\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022D37F0);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1320), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"failed to get assertion\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 64;
    uint64_t v20 = "-[CLStatusBarAssertion setDesiredEnablementState:]";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/Subscriptions/CLVisibilityAssertion.m";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419520, &stru_1022D37F0);
  }
}

void sub_101A73D50()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DE4DC((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022D3B98);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v2, v3, v4, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022D3B98);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022D3B98);
  }
}

void sub_101A73EF0()
{
  if (qword_1024193C0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1009214BC())
    {
      sub_1001DB29C();
      sub_1001DE4DC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Attempting to send fence transition, but state unknown\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022D3BB8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 968)))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v3, v4, v5, "Attempting to send fence transition, but state unknown", "{\"msg%{public}.0s\":\"Attempting to send fence transition, but state unknown\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022D3BB8);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 968), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v6, v7, "{\"msg%{public}.0s\":\"Attempting to send fence transition, but state unknown\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1024193C0, &stru_1022D3BB8);
  }
}

void sub_101A74088()
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022D3BB8);
  }
  if (sub_1009214BC())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"onAuthorizationNotification fence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D3BB8);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v0 + 968)))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v3, v4, v5, "onAuthorizationNotification fence without key", "{\"msg%{public}.0s\":\"onAuthorizationNotification fence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022D3BB8);
    }
  }
  if (os_log_type_enabled(*(os_log_t *)(v0 + 968), OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v6, v7, "{\"msg%{public}.0s\":\"onAuthorizationNotification fence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
  }
}

void sub_101A74210()
{
  sub_1009214B0();
  if (v1 < 0) {
    operator delete(*(void **)(v0 + 192));
  }
  if (*(char *)(v0 + 71) < 0) {
    operator delete(*(void **)(v0 + 48));
  }
  if (*(char *)(v0 + 47) < 0) {
    operator delete(*(void **)(v0 + 24));
  }
  if (*(char *)(v0 + 23) < 0)
  {
    uint64_t v2 = *(void **)v0;
    operator delete(v2);
  }
}

#error "101A74300: call analysis failed (funcsize=76)"

#error "101A7447C: call analysis failed (funcsize=76)"

#error "101A745F8: call analysis failed (funcsize=75)"

void sub_101A746F0()
{
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022D4690);
  }
  uint64_t v0 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Input expected to contain all APs with valid locations\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4690);
    }
  }
  int v1 = qword_1024193B8;
  if (os_signpost_enabled((os_log_t)qword_1024193B8))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Input expected to contain all APs with valid locations", "{\"msg%{public}.0s\":\"Input expected to contain all APs with valid locations\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022D4690);
    }
  }
  uint64_t v2 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Input expected to contain all APs with valid locations\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

#error "101A74928: call analysis failed (funcsize=67)"

void sub_101A74A04()
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022D4AF0);
  }
  uint64_t v0 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"expecting 1 to 1\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022D4AF0);
    }
  }
  int v1 = qword_102419388;
  if (os_signpost_enabled((os_log_t)qword_102419388))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "expecting 1 to 1", "{\"msg%{public}.0s\":\"expecting 1 to 1\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022D4AF0);
    }
  }
  uint64_t v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"expecting 1 to 1\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_101A74BCC()
{
  if (qword_1024193D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100857B88())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"#ctcl fCTClient allocation failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 984)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "#ctcl fCTClient allocation failed", "{\"msg%{public}.0s\":\"#ctcl fCTClient allocation failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
    }
    if (sub_100857BA8())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"#ctcl fCTClient allocation failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 120;
    uint64_t v20 = "createCTClient";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/TelephonyService/CLCoreTelephonyClient.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
}

void sub_101A74D44()
{
  if (qword_1024193D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100857B88())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"#ctcl fCTClientDelegate allocation failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 984)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "#ctcl fCTClientDelegate allocation failed", "{\"msg%{public}.0s\":\"#ctcl fCTClientDelegate allocation failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
    }
    if (sub_100857BA8())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"#ctcl fCTClientDelegate allocation failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 123;
    uint64_t v20 = "createCTClient";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/TelephonyService/CLCoreTelephonyClient.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
}

void sub_101A74EBC()
{
  if (qword_1024193D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100857B88())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"copyEmergencyMode: Invalid instance from CTXPCServiceSubscriptionContext\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 984)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "copyEmergencyMode: Invalid instance from CTXPCServiceSubscriptionContext", "{\"msg%{public}.0s\":\"copyEmergencyMode: Invalid instance from CTXPCServiceSubscriptionContext\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022D5420);
      }
    }
    if (sub_100857BA8())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"copyEmergencyMode: Invalid instance from CTXPCServiceSubscriptionContext\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 530;
    uint64_t v20 = "queryEmergencyModeChanged_block_invoke";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/TelephonyService/CLCoreTelephonyClient.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024193D0, &stru_1022D5420);
  }
}

#error "101A750B0: call analysis failed (funcsize=73)"

#error "101A75220: call analysis failed (funcsize=73)"

#error "101A75390: call analysis failed (funcsize=73)"

#error "101A75500: call analysis failed (funcsize=73)"

#error "101A75670: call analysis failed (funcsize=73)"

void sub_101A75764()
{
  if (qword_102419600 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001DE4BC())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022D6570);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1544)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022D6570);
      }
    }
    if (sub_1001DE514())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 52;
    uint64_t v20 = "-[CLPersistentTimerInternal initWithFireTime:timeInterval:serviceIdentifier:wakeDevice:clTimer:silo:minimumEar"
          "lyFireProportion:]";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLPersistentTimer.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419600, &stru_1022D6570);
  }
}

void sub_101A758DC()
{
  if (qword_102419600 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001DE4BC())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022D6570);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1544)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022D6570);
      }
    }
    if (sub_1001DE514())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 135;
    uint64_t v20 = "-[CLPersistentTimerInternal dealloc]";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLPersistentTimer.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419600, &stru_1022D6570);
  }
}

void sub_101A75A54()
{
  if (qword_102419600 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001DE4BC())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022D6570);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1544)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022D6570);
      }
    }
    if (sub_1001DE514())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 131;
    uint64_t v20 = "-[CLPersistentTimerInternal dealloc]";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLPersistentTimer.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419600, &stru_1022D6570);
  }
}

void sub_101A75BCC()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022D6688);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed,GPSODOM,fGpsOdometryInterface is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D6688);
    }
  }
  int v1 = qword_1024193D8;
  if (os_signpost_enabled((os_log_t)qword_1024193D8))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed,GPSODOM,fGpsOdometryInterface is null", "{\"msg%{public}.0s\":\"Assertion failed,GPSODOM,fGpsOdometryInterface is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022D6688);
    }
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed,GPSODOM,fGpsOdometryInterface is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_101A75D94()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022D6B70);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022D6B70);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 53;
    uint64_t v19 = "-[CLMotionAlarmNotifierAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/MotionAlarm/CLMotionAlarmNotifier.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022D6B70);
  }
}

void sub_101A75F28()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022D6CB0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022D6CB0);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_1022D6CB0);
  }
}

void sub_101A760AC()
{
}

void sub_101A760D8()
{
}

void sub_101A76104()
{
}

void sub_101A76130()
{
}

void sub_101A7615C()
{
}

void sub_101A76188()
{
}

void sub_101A761B4()
{
}

void sub_101A761E0()
{
}

void sub_101A7620C()
{
}

void sub_101A76238()
{
}

void sub_101A76264()
{
}

void sub_101A76290()
{
}

void sub_101A762BC()
{
}

void sub_101A762E8()
{
}

void sub_101A76314()
{
}

void sub_101A76340()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022D7AC8);
      }
    }
    int v1 = qword_102419588;
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022D7AC8);
      }
    }
    int v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022D7AC8);
  }
}

void sub_101A76510()
{
  if (qword_102419450 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001E9AC4())
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022D7AE8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v1 + 1112)))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v2, v3, v4, "localization results vector cannot be empty", "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022D7AE8);
      }
    }
    uint64_t v0 = *(NSObject **)(v1 + 1112);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419450, &stru_1022D7AE8);
  }
}

void sub_101A766C0()
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022D7AE8);
  }
  if (sub_1001E9AC4())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, 0x26u);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022D7AE8);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v1 + 1112)))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v2, v3, v4, "localization results vector cannot be empty", "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022D7AE8);
    }
  }
  int v5 = *(NSObject **)(v1 + 1112);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, 0x26u);
  }
}

void sub_101A76860()
{
  if (qword_102419530 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Companion is receiving a reset sync session from the watch\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022D8200);
      }
    }
    uint64_t v1 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Companion is receiving a reset sync session from the watch", "{\"msg%{public}.0s\":\"Companion is receiving a reset sync session from the watch\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022D8200);
      }
    }
    uint64_t v2 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Companion is receiving a reset sync session from the watch\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419530, &stru_1022D8200);
  }
}

#error "101A76AAC: call analysis failed (funcsize=73)"

#error "101A76C1C: call analysis failed (funcsize=73)"

#error "101A76D8C: call analysis failed (funcsize=73)"

#error "101A76EFC: call analysis failed (funcsize=73)"

#error "101A7706C: call analysis failed (funcsize=73)"

void sub_101A77160()
{
  if (qword_102418FD0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Not running on motion thread!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022D8678);
      }
    }
    uint64_t v1 = qword_102418FD8;
    if (os_signpost_enabled((os_log_t)qword_102418FD8))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Not running on motion thread!", "{\"msg%{public}.0s\":\"Not running on motion thread!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022D8678);
      }
    }
    uint64_t v2 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Not running on motion thread!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418FD0, &stru_1022D8678);
  }
}

void sub_101A77330()
{
}

uint64_t sub_101A7735C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  }
  return result;
}

#error "101A7741C: call analysis failed (funcsize=73)"

#error "101A7758C: call analysis failed (funcsize=73)"

#error "101A776FC: call analysis failed (funcsize=73)"

#error "101A7786C: call analysis failed (funcsize=73)"

#error "101A779DC: call analysis failed (funcsize=73)"

#error "101A77B4C: call analysis failed (funcsize=73)"

#error "101A77CBC: call analysis failed (funcsize=73)"

#error "101A77E2C: call analysis failed (funcsize=73)"

#error "101A77F9C: call analysis failed (funcsize=73)"

#error "101A7810C: call analysis failed (funcsize=73)"

void sub_101A78200()
{
  if (qword_102419110 != -1) {
    dispatch_once(&qword_102419110, &stru_1022D9628);
  }
  uint64_t v0 = qword_102419118;
  if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
    if (qword_102419110 != -1) {
      dispatch_once(&qword_102419110, &stru_1022D9628);
    }
  }
  if (os_signpost_enabled((os_log_t)qword_102419118))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v1, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
    if (qword_102419110 != -1) {
      dispatch_once(&qword_102419110, &stru_1022D9628);
    }
  }
  uint64_t v4 = qword_102419118;
  if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }
}

#error "101A7842C: call analysis failed (funcsize=74)"

#error "101A785A0: call analysis failed (funcsize=74)"

#error "101A78714: call analysis failed (funcsize=74)"

#error "101A78888: call analysis failed (funcsize=74)"

#error "101A789FC: call analysis failed (funcsize=74)"

void sub_101A78AF4()
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022D99A8);
  }
  uint64_t v0 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"VO2Max,AdaptiveOutdoorPedestrianModel,Invalid clustering results.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022D99A8);
    }
  }
  uint64_t v1 = qword_102418FF8;
  if (os_signpost_enabled((os_log_t)qword_102418FF8))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "VO2Max,AdaptiveOutdoorPedestrianModel,Invalid clustering results.", "{\"msg%{public}.0s\":\"VO2Max,AdaptiveOutdoorPedestrianModel,Invalid clustering results.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022D99A8);
    }
  }
  uint64_t v2 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"VO2Max,AdaptiveOutdoorPedestrianModel,Invalid clustering results.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_101A78CBC()
{
  if (qword_1024193C0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1009214BC())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"CombinedFence addFence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022D9AE0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 968)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "CombinedFence addFence without key", "{\"msg%{public}.0s\":\"CombinedFence addFence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022D9AE0);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 968), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"CombinedFence addFence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 237;
    uint64_t v20 = "addFence";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLCombinedFence.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024193C0, &stru_1022D9AE0);
  }
}

void sub_101A78E40(std::__shared_weak_count **a1, std::__shared_weak_count **a2)
{
  int v3 = *a1;
  if (v3) {
    sub_1000DB0A0(v3);
  }
  int v4 = *a2;
  if (*a2)
  {
    sub_1000DB0A0(v4);
  }
}

void sub_101A78E90()
{
}

void sub_101A78EBC()
{
}

void sub_101A78EE8()
{
}

void sub_101A78F14()
{
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100436D88())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022DA0E0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1592)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022DA0E0);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1592), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 146;
    uint64_t v20 = "onLocationNotification";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLOldWifiScanner.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419630, &stru_1022DA0E0);
  }
}

void sub_101A79098()
{
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100436D88())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022DA0E0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1592)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022DA0E0);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1592), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 193;
    uint64_t v20 = "onWifiNotification";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLOldWifiScanner.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419630, &stru_1022DA0E0);
  }
}

void sub_101A7921C()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022DA538);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022DA538);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 57;
    uint64_t v19 = "-[CLCatherineNotifierAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Catherine/CLCatherineNotifier.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022DA538);
  }
}

void sub_101A793B0()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022DA6A8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022DA6A8);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_1022DA6A8);
  }
}

#error "101A795AC: call analysis failed (funcsize=71)"

#error "101A79710: call analysis failed (funcsize=72)"

#error "101A7987C: call analysis failed (funcsize=72)"

#error "101A799E8: call analysis failed (funcsize=72)"

#error "101A79B54: call analysis failed (funcsize=72)"

#error "101A79CC0: call analysis failed (funcsize=72)"

#error "101A79E2C: call analysis failed (funcsize=71)"

#error "101A79F94: call analysis failed (funcsize=74)"

#error "101A7A104: call analysis failed (funcsize=71)"

#error "101A7A268: call analysis failed (funcsize=72)"

#error "101A7A3D8: call analysis failed (funcsize=74)"

#error "101A7A548: call analysis failed (funcsize=71)"

#error "101A7A6B0: call analysis failed (funcsize=74)"

#error "101A7A820: call analysis failed (funcsize=71)"

#error "101A7A988: call analysis failed (funcsize=74)"

#error "101A7AAF8: call analysis failed (funcsize=71)"

#error "101A7AC64: call analysis failed (funcsize=75)"

#error "101A7ADD8: call analysis failed (funcsize=75)"

#error "101A7AF4C: call analysis failed (funcsize=75)"

#error "101A7B0C0: call analysis failed (funcsize=75)"

#error "101A7B234: call analysis failed (funcsize=75)"

#error "101A7B3A8: call analysis failed (funcsize=75)"

#error "101A7B514: call analysis failed (funcsize=71)"

#error "101A7B678: call analysis failed (funcsize=71)"

#error "101A7B7DC: call analysis failed (funcsize=71)"

#error "101A7B948: call analysis failed (funcsize=75)"

#error "101A7BABC: call analysis failed (funcsize=75)"

#error "101A7BC30: call analysis failed (funcsize=75)"

#error "101A7BD9C: call analysis failed (funcsize=71)"

void sub_101A7BE88()
{
  if (qword_102419530 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#PersistentDictionary invalid to init with nil filename\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022DAA38);
      }
    }
    int v1 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#PersistentDictionary invalid to init with nil filename", "{\"msg%{public}.0s\":\"#PersistentDictionary invalid to init with nil filename\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022DAA38);
      }
    }
    int v2 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#PersistentDictionary invalid to init with nil filename\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419530, &stru_1022DAA38);
  }
}

void sub_101A7C058(char a1)
{
  if ((a1 & 1) == 0) {
    dispatch_once(&qword_1024193D0, &stru_1022DAA78);
  }
  int v1 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    }
  }
  int v2 = qword_1024193D8;
  if (os_signpost_enabled((os_log_t)qword_1024193D8))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    }
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
  }
}

void sub_101A7C218()
{
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DABB0);
  }
  uint64_t v0 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CLCompass7 requires deviceMotionService\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DABB0);
    }
  }
  int v1 = qword_1024190A8;
  if (os_signpost_enabled((os_log_t)qword_1024190A8))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLCompass7 requires deviceMotionService", "{\"msg%{public}.0s\":\"CLCompass7 requires deviceMotionService\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DABB0);
    }
  }
  int v2 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLCompass7 requires deviceMotionService\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_101A7C3E0()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022DAF18);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022DAF18);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 374;
    uint64_t v19 = "-[CLFallNotifierAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Fall/CLFallNotifier.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
}

void sub_101A7C574(void *a1)
{
  objc_begin_catch(a1);
  sub_100A60ABC();
  if (!v2) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  if (sub_100A60A9C())
  {
    sub_100452A30();
    sub_100A60AC8((void *)&_mh_execute_header, v3, v4, "{\"msg%{public}.0s\":\"Failed to read the timestamp.\"}", v5, v6, v7, v8, v14);
    sub_100A60ABC();
    if (!v2) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v1 + 248)))
  {
    sub_100452A30();
    sub_100A60A70((void *)&_mh_execute_header, v9, v10, v11, "Failed to read the timestamp.", "{\"msg%{public}.0s\":\"Failed to read the timestamp.\"}", v12, v13, v14);
  }
  objc_end_catch();
}

void sub_101A7C684()
{
  if (qword_102418FD0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      sub_100219CC4();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Wiring bug, should not be subscribed to \", \"notification\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022DAF38);
      }
    }
    uint64_t v1 = qword_102418FD8;
    if (os_signpost_enabled((os_log_t)qword_102418FD8))
    {
      sub_100219CC4();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Wiring bug, should not be subscribed to ", "{\"msg%{public}.0s\":\"Wiring bug, should not be subscribed to \", \"notification\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022DAF38);
      }
    }
    char v2 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      sub_100219CC4();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Wiring bug, should not be subscribed to \", \"notification\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418FD0, &stru_1022DAF38);
  }
}

void sub_101A7C864(char a1)
{
  if ((a1 & 1) == 0) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v1 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Compass should only be reset from locationd\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DB458);
      }
    }
    char v2 = qword_1024190A8;
    if (os_signpost_enabled((os_log_t)qword_1024190A8))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Compass should only be reset from locationd", "{\"msg%{public}.0s\":\"Compass should only be reset from locationd\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DB458);
      }
    }
    uint64_t v3 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Compass should only be reset from locationd\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024190A0, &stru_1022DB458);
  }
}

#error "101A7CAA0: call analysis failed (funcsize=76)"

#error "101A7CC24: call analysis failed (funcsize=73)"

#error "101A7CD8C: call analysis failed (funcsize=76)"

#error "101A7CF10: call analysis failed (funcsize=73)"

#error "101A7D080: call analysis failed (funcsize=73)"

#error "101A7D1F0: call analysis failed (funcsize=73)"

#error "101A7D360: call analysis failed (funcsize=73)"

void sub_101A7D454()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022DBB20);
  }
  if (sub_100857B88())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DBB20);
    }
  }
  if (sub_100857BC4())
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v0, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DBB20);
    }
  }
  if (sub_100857BA8())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
  }
}

void sub_101A7D5F8()
{
  if (qword_1024190B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100AC6EA8())
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1022DC408);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v1 + 184)))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v2, v3, v4, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1022DC408);
      }
    }
    int v0 = *(NSObject **)(v1 + 184);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1024190B0, &stru_1022DC408);
  }
}

void sub_101A7D7A8()
{
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_1022DC408);
  }
  if (sub_100AC6EA8())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, 0x26u);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1022DC408);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v1 + 184)))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v2, v3, v4, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1022DC408);
    }
  }
  uint64_t v5 = *(NSObject **)(v1 + 184);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, 0x26u);
  }
}

void sub_101A7D948()
{
  __assert_rtn("operator()", "cnmatrix.h", 1194, "strcmp(c, \":\") == 0");
}

void sub_101A7D974()
{
}

void sub_101A7D9A0()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 782, "data_ != __null");
}

void sub_101A7D9CC()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 783, "idx >= 0");
}

void sub_101A7D9F8()
{
}

void sub_101A7DA24()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2337, "in_nr >= 0");
}

void sub_101A7DA50()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2339, "in_nr <= max_nr");
}

void sub_101A7DA7C()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2340, "in_nc >= 0");
}

void sub_101A7DAA8()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2342, "in_nc <= max_nc");
}

void sub_101A7DAD4()
{
  __assert_rtn("operator=", "cnmatrixbase.h", 619, "this->max_num_rows_ >= A.num_rows_");
}

void sub_101A7DB00()
{
  __assert_rtn("operator=", "cnmatrixbase.h", 620, "this->max_num_cols_ >= A.num_cols_");
}

void sub_101A7DB2C()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2456, "in_nr <= max_nr");
}

void sub_101A7DB58()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2458, "in_nc <= max_nc");
}

void sub_101A7DB84()
{
  __assert_rtn("operator()", "cnmatrix.h", 992, "strcmp(c, \":\") == 0");
}

void sub_101A7DBB0()
{
  __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
}

void sub_101A7DBDC()
{
  __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
}

void sub_101A7DC08()
{
  __assert_rtn("operator()", "cnmatrix.h", 891, "strcmp(r, \":\") == 0");
}

void sub_101A7DC34()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 913, "data_ != __null");
}

void sub_101A7DC60()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 914, "idx >= 0");
}

void sub_101A7DC8C()
{
}

void sub_101A7DCB8()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 711, "data_ != __null");
}

void sub_101A7DCE4()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 712, "idx >= 0");
}

void sub_101A7DD10()
{
}

void sub_101A7DD3C()
{
  __assert_rtn("Add", "cnmatrixbase.h", 3536, "&(A) != &(C)");
}

void sub_101A7DD68()
{
  __assert_rtn("Add", "cnmatrixbase.h", 3537, "&(B) != &(C)");
}

void sub_101A7DD94()
{
  __assert_rtn("Add", "cnmatrixbase.h", 3534, "A.num_cols_ == B.num_cols_");
}

void sub_101A7DDC0()
{
  __assert_rtn("Add", "cnmatrixbase.h", 3533, "A.num_rows_ == B.num_rows_");
}

void sub_101A7DDEC()
{
  __assert_rtn("Multiply", "cnmatrixbase.h", 3818, "&(B) != &(C)");
}

void sub_101A7DE18()
{
  __assert_rtn("Subtract", "cnmatrixbase.h", 3677, "&(A) != &(C)");
}

void sub_101A7DE44()
{
  __assert_rtn("Subtract", "cnmatrixbase.h", 3678, "&(B) != &(C)");
}

void sub_101A7DE70()
{
  __assert_rtn("Subtract", "cnmatrixbase.h", 3675, "A.num_cols_ == B.num_cols_");
}

void sub_101A7DE9C()
{
  __assert_rtn("Subtract", "cnmatrixbase.h", 3674, "A.num_rows_ == B.num_rows_");
}

void sub_101A7DEC8()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7187, "&A != &Acopy");
}

void sub_101A7DEF4()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7188, "&A != &Work");
}

void sub_101A7DF20()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7189, "&A != &U");
}

void sub_101A7DF4C()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7190, "&A != &S");
}

void sub_101A7DF78()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7191, "&A != &V");
}

void sub_101A7DFA4()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7192, "&Acopy != &Work");
}

void sub_101A7DFD0()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7193, "&Acopy != &U");
}

void sub_101A7DFFC()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7194, "&Acopy != &S");
}

void sub_101A7E028()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7195, "&Acopy != &V");
}

void sub_101A7E054()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7196, "&Work != &U");
}

void sub_101A7E080()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7197, "&Work != &S");
}

void sub_101A7E0AC()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7198, "&Work != &V");
}

void sub_101A7E0D8()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7199, "&U != &S");
}

void sub_101A7E104()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7200, "&U != &V");
}

void sub_101A7E130()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7201, "&S != &V");
}

void sub_101A7E15C()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7204, "ne >= 1");
}

void sub_101A7E188()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7205, "ne >= 3*minnrnc + maxnrnc");
}

void sub_101A7E1B4()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7206, "ne >= 5*minnrnc");
}

void sub_101A7E1E0()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7208, "Acopy.max_num_rows_ >= nrA");
}

void sub_101A7E20C()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7209, "Acopy.max_num_cols_ >= ncA");
}

void sub_101A7E238()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7210, "U.max_num_rows_ >= nrA");
}

void sub_101A7E264()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7211, "U.max_num_cols_ >= nrA");
}

void sub_101A7E290()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7212, "S.max_num_rows_ >= nrA");
}

void sub_101A7E2BC()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7213, "S.max_num_cols_ >= ncA");
}

void sub_101A7E2E8()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7214, "V.max_num_rows_ >= ncA");
}

void sub_101A7E314()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7215, "V.max_num_cols_ >= ncA");
}

void sub_101A7E340()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7283, "info == 0");
}

void sub_101A7E36C()
{
  __assert_rtn("TransposeInPlace", "cnmatrixbase.h", 5054, "A.max_num_rows_ >= A.num_cols_");
}

void sub_101A7E398()
{
  __assert_rtn("TransposeInPlace", "cnmatrixbase.h", 5055, "A.max_num_cols_ >= A.num_rows_");
}

void sub_101A7E3C4()
{
  __assert_rtn("operator()", "cnmatrix.h", 1039, "strcmp(c, \":\") == 0");
}

void sub_101A7E3F0()
{
  __assert_rtn("Dot", "cnmatrixbase.h", 4076, "a.num_rows_ == 1 || a.num_cols_ == 1");
}

void sub_101A7E41C()
{
  __assert_rtn("Dot", "cnmatrixbase.h", 4077, "b.num_rows_ == 1 || b.num_cols_ == 1");
}

void sub_101A7E448()
{
  __assert_rtn("Dot", "cnmatrixbase.h", 4079, "a.num_elements_ == b.num_elements_");
}

void sub_101A7E474()
{
  __assert_rtn("Norm", "cnmatrixbase.h", 4504, "&A != &Acopy");
}

void sub_101A7E4A0()
{
  __assert_rtn("Norm", "cnmatrixbase.h", 4505, "&A != &Work");
}

void sub_101A7E4CC()
{
  __assert_rtn("Norm", "cnmatrixbase.h", 4506, "&A != &S");
}

void sub_101A7E4F8()
{
  __assert_rtn("Norm", "cnmatrixbase.h", 4507, "&Acopy != &Work");
}

void sub_101A7E524()
{
  __assert_rtn("Norm", "cnmatrixbase.h", 4508, "&Acopy != &S");
}

void sub_101A7E550()
{
  __assert_rtn("Norm", "cnmatrixbase.h", 4509, "&Work != &S");
}

void sub_101A7E57C()
{
  __assert_rtn("Norm", "cnmatrixbase.h", 4512, "Acopy.num_elements_ >= A.num_elements_");
}

void sub_101A7E5A8()
{
}

void sub_101A7E600()
{
  __assert_rtn("Norm", "cnmatrixbase.h", 4716, "ret == 1");
}

void sub_101A7E658()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7028, "&A != &Acopy");
}

void sub_101A7E684()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7029, "&A != &Work");
}

void sub_101A7E6B0()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7030, "&A != &S");
}

void sub_101A7E6DC()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7031, "&Acopy != &Work");
}

void sub_101A7E708()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7032, "&Acopy != &S");
}

void sub_101A7E734()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7033, "&Work != &S");
}

void sub_101A7E760()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7036, "ne >= 1");
}

void sub_101A7E78C()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7037, "ne >= 3*minnrnc + maxnrnc");
}

void sub_101A7E7B8()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7038, "ne >= 5*minnrnc");
}

void sub_101A7E7E4()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7040, "Acopy.max_num_rows_ >= nrA");
}

void sub_101A7E810()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7041, "Acopy.max_num_cols_ >= ncA");
}

void sub_101A7E83C()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7042, "S.max_num_rows_ >= minnrnc");
}

void sub_101A7E868()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7043, "S.max_num_cols_ >= 1");
}

void sub_101A7E894()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7111, "info == 0");
}

void sub_101A7E8C0()
{
  __assert_rtn("Transpose", "cnmatrixbase.h", 5010, "&(A) != &(B)");
}

void sub_101A7E8EC()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 815, "data_ != __null");
}

void sub_101A7E918()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 816, "idx >= 0");
}

void sub_101A7E944()
{
}

void sub_101A7E970()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 848, "data_ != __null");
}

void sub_101A7E99C()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 849, "idx >= 0");
}

void sub_101A7E9C8()
{
}

void sub_101A7E9F4()
{
  if (qword_102419600 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Event is nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DCBD8);
      }
    }
    uint64_t v1 = qword_102419608;
    if (os_signpost_enabled((os_log_t)qword_102419608))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Event is nil", "{\"msg%{public}.0s\":\"Event is nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DCBD8);
      }
    }
    uint64_t v2 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Event is nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419600, &stru_1022DCBD8);
  }
}

void sub_101A7EBC4()
{
  if (qword_102419600 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100AD63A4())
    {
      sub_1002D39F8();
      sub_10045B784((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Invalid event value\", \"eventType\":%{public}ld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DCBD8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1544)))
    {
      sub_1002D39F8();
      sub_10045B738((void *)&_mh_execute_header, v7, v8, v9, "Invalid event value", "{\"msg%{public}.0s\":\"Invalid event value\", \"eventType\":%{public}ld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DCBD8);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1544), OS_LOG_TYPE_INFO))
    {
      sub_1002D39F8();
      sub_10045B7A4((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Invalid event value\", \"eventType\":%{public}ld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 226;
    uint64_t v20 = "-[CLDuetMonitor eventTypeFromNSNumber:]";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Duet/CLDuetMonitor.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419600, &stru_1022DCBD8);
  }
}

uint64_t sub_101A7ED4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void sub_101A7ED70()
{
}

void sub_101A7ED9C()
{
}

void sub_101A7EDC8()
{
}

void sub_101A7EDF4()
{
}

void sub_101A7EE20()
{
}

void sub_101A7EE4C()
{
}

void sub_101A7EE78(uint64_t a1, NSObject *a2)
{
  int v2 = 136446210;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed parse os_log format specifier for shimming:missing closing brace,format,%{public}s", (uint8_t *)&v2, 0xCu);
}

void sub_101A7EEF0()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022DE3A8);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022DE3A8);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 26;
    uint64_t v19 = "-[CLVDRNotifierAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/VDR/CLVDRNotifier.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022DE3A8);
  }
}

#error "101A7F100: call analysis failed (funcsize=73)"

#error "101A7F270: call analysis failed (funcsize=73)"

#error "101A7F3E0: call analysis failed (funcsize=73)"

#error "101A7F550: call analysis failed (funcsize=73)"

#error "101A7F6C0: call analysis failed (funcsize=73)"

void sub_101A7F7B4()
{
}

void sub_101A7F7E0()
{
}

void sub_101A7F80C()
{
}

void sub_101A7F838()
{
}

void sub_101A7F864()
{
}

void sub_101A7F890()
{
}

void sub_101A7F8BC()
{
}

void sub_101A7F8E8()
{
}

void sub_101A7F914()
{
  if (qword_102419520 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#monitor Unable to determine the path to store conditions\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022E8CE8);
      }
    }
    int v1 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#monitor Unable to determine the path to store conditions", "{\"msg%{public}.0s\":\"#monitor Unable to determine the path to store conditions\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022E8CE8);
      }
    }
    int v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#monitor Unable to determine the path to store conditions\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419520, &stru_1022E8CE8);
  }
}

void sub_101A7FAE4()
{
  if (qword_102419520 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100B8E38C())
    {
      sub_100B8E354();
      sub_10045B784((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"#monitor Unable to create dir\", \"path\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022E8CE8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1320)))
    {
      sub_100B8E354();
      sub_10045B738((void *)&_mh_execute_header, v7, v8, v9, "#monitor Unable to create dir", "{\"msg%{public}.0s\":\"#monitor Unable to create dir\", \"path\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022E8CE8);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1320), OS_LOG_TYPE_INFO))
    {
      sub_100B8E354();
      sub_10045B7A4((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"#monitor Unable to create dir\", \"path\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 195;
    uint64_t v20 = "-[CLConditionLedger setLedgerForType:domain:monitor:client:path:]";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Framework/CoreLocation/CLConditionLedger.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419520, &stru_1022E8CE8);
  }
}

void sub_101A7FC6C()
{
  if (qword_102419520 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100B8E38C())
    {
      sub_100B8E354();
      sub_10045B784((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"#monitor Unable to create intermediate dir\", \"path\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022E8CE8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1320)))
    {
      sub_100B8E354();
      sub_10045B738((void *)&_mh_execute_header, v7, v8, v9, "#monitor Unable to create intermediate dir", "{\"msg%{public}.0s\":\"#monitor Unable to create intermediate dir\", \"path\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022E8CE8);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1320), OS_LOG_TYPE_INFO))
    {
      sub_100B8E354();
      sub_10045B7A4((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"#monitor Unable to create intermediate dir\", \"path\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 186;
    uint64_t v20 = "-[CLConditionLedger setLedgerForType:domain:monitor:client:path:]";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Framework/CoreLocation/CLConditionLedger.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419520, &stru_1022E8CE8);
  }
}

void sub_101A7FDF4(char a1)
{
  if ((a1 & 1) == 0) {
    dispatch_once(&qword_1024193D0, &stru_1022E8E60);
  }
  int v1 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E8E60);
    }
  }
  int v2 = qword_1024193D8;
  if (os_signpost_enabled((os_log_t)qword_1024193D8))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022E8E60);
    }
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
  }
}

#error "101A80030: call analysis failed (funcsize=73)"

#error "101A801A0: call analysis failed (funcsize=73)"

#error "101A80310: call analysis failed (funcsize=73)"

#error "101A80480: call analysis failed (funcsize=73)"

#error "101A805F0: call analysis failed (funcsize=73)"

void sub_101A806E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  sub_100219E3C();
  a29 = v30;
  a30 = v31;
  if (qword_102419380 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v32 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      sub_100BCA240();
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"unsupported location type\", \"type\":%{private, location:CLLocationType}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &buf, 0x30u);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022E9AF0);
      }
    }
    uint64_t v33 = qword_102419388;
    if (os_signpost_enabled((os_log_t)qword_102419388))
    {
      sub_100BCA240();
      sub_100BCA278((void *)&_mh_execute_header, v33, v34, v35, "unsupported location type", "{\"msg%{public}.0s\":\"unsupported location type\", \"type\":%{private, location:CLLocationType}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &buf);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022E9AF0);
      }
    }
    uint64_t v36 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      sub_100BCA240();
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"unsupported location type\", \"type\":%{private, location:CLLocationType}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &buf, 0x30u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419380, &stru_1022E9AF0);
  }
}

#error "101A8092C: call analysis failed (funcsize=79)"

#error "101A80AB4: call analysis failed (funcsize=79)"

#error "101A80C3C: call analysis failed (funcsize=79)"

void sub_101A80D40()
{
}

void sub_101A80D6C()
{
}

void sub_101A80D98()
{
}

void sub_101A80DC4()
{
  __assert_rtn("compute_box_corners", "envelope_segment.hpp", 161, "lon1 <= lon2");
}

void sub_101A80DF0()
{
}

void sub_101A80E1C()
{
}

void sub_101A80E48()
{
}

void sub_101A80E74()
{
}

void sub_101A80EA0()
{
}

void sub_101A80ECC()
{
}

void sub_101A80EF8()
{
}

void sub_101A80F24()
{
}

void sub_101A80F50()
{
}

void sub_101A80F7C()
{
}

void sub_101A80FA8()
{
}

void sub_101A80FD4()
{
}

void sub_101A81000()
{
  __assert_rtn("pos", "range.hpp", 96, "i <= boost::size(rng)");
}

void sub_101A8102C()
{
}

void sub_101A81058()
{
  __assert_rtn("apply", "segment_ratio.hpp", 56, "lhs.denominator() != Type(0)");
}

void sub_101A81084()
{
  __assert_rtn("apply", "segment_ratio.hpp", 57, "rhs.denominator() != Type(0)");
}

void sub_101A810B0()
{
  __assert_rtn("apply", "get_turn_info.hpp", 1033, "arrival_p != 0");
}

void sub_101A810DC()
{
  __assert_rtn("get", "pointing_segment.hpp", 101, "s.first != __null");
}

void sub_101A81108()
{
  __assert_rtn("get", "pointing_segment.hpp", 124, "s.second != __null");
}

void sub_101A81134()
{
  __assert_rtn("apply", "segment_ratio.hpp", 89, "lhs.denominator() != Type(0)");
}

void sub_101A81160()
{
  __assert_rtn("apply", "segment_ratio.hpp", 90, "rhs.denominator() != Type(0)");
}

#error "101A81208: call analysis failed (funcsize=78)"

#error "101A81388: call analysis failed (funcsize=71)"

void sub_101A8146C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v25;
  a24 = v26;
  sub_100C08B98(v27);
  if (!v28) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  if (sub_1009060B0())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v29, v30, "{\"msg%{public}.0s\":\"dynamic_pointer_cast must never fail in this context\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v24 + 1312) != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
  }
  if (sub_100C08B30())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v31, v32, v33, "dynamic_pointer_cast must never fail in this context", "{\"msg%{public}.0s\":\"dynamic_pointer_cast must never fail in this context\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v24 + 1312) != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
  }
  if (sub_100C08ADC())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v34, v35, "{\"msg%{public}.0s\":\"dynamic_pointer_cast must never fail in this context\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100219E80();
}

#error "101A8163C: call analysis failed (funcsize=72)"

#error "101A817A8: call analysis failed (funcsize=72)"

#error "101A81918: call analysis failed (funcsize=78)"

#error "101A81A98: call analysis failed (funcsize=72)"

#error "101A81C04: call analysis failed (funcsize=72)"

#error "101A81D70: call analysis failed (funcsize=71)"

#error "101A81ED4: call analysis failed (funcsize=71)"

#error "101A82038: call analysis failed (funcsize=72)"

#error "101A821A4: call analysis failed (funcsize=72)"

#error "101A82310: call analysis failed (funcsize=72)"

#error "101A8247C: call analysis failed (funcsize=72)"

#error "101A825E8: call analysis failed (funcsize=72)"

#error "101A82754: call analysis failed (funcsize=72)"

#error "101A828C0: call analysis failed (funcsize=72)"

#error "101A82A2C: call analysis failed (funcsize=72)"

#error "101A82B98: call analysis failed (funcsize=72)"

#error "101A82D04: call analysis failed (funcsize=72)"

#error "101A82E70: call analysis failed (funcsize=72)"

#error "101A82FDC: call analysis failed (funcsize=72)"

#error "101A83148: call analysis failed (funcsize=72)"

#error "101A832B4: call analysis failed (funcsize=72)"

#error "101A83420: call analysis failed (funcsize=72)"

#error "101A8358C: call analysis failed (funcsize=72)"

#error "101A836F8: call analysis failed (funcsize=72)"

#error "101A83864: call analysis failed (funcsize=72)"

#error "101A839D0: call analysis failed (funcsize=72)"

#error "101A83B3C: call analysis failed (funcsize=72)"

#error "101A83CA8: call analysis failed (funcsize=72)"

#error "101A83E14: call analysis failed (funcsize=72)"

#error "101A83F80: call analysis failed (funcsize=72)"

#error "101A840EC: call analysis failed (funcsize=72)"

#error "101A84258: call analysis failed (funcsize=72)"

#error "101A843C4: call analysis failed (funcsize=72)"

#error "101A84530: call analysis failed (funcsize=72)"

#error "101A8469C: call analysis failed (funcsize=72)"

#error "101A84808: call analysis failed (funcsize=72)"

#error "101A84974: call analysis failed (funcsize=72)"

#error "101A84AE0: call analysis failed (funcsize=72)"

#error "101A84C4C: call analysis failed (funcsize=72)"

#error "101A84DB8: call analysis failed (funcsize=72)"

#error "101A84F24: call analysis failed (funcsize=72)"

#error "101A85090: call analysis failed (funcsize=72)"

#error "101A851FC: call analysis failed (funcsize=72)"

#error "101A85368: call analysis failed (funcsize=72)"

#error "101A854D4: call analysis failed (funcsize=72)"

#error "101A85640: call analysis failed (funcsize=72)"

#error "101A857AC: call analysis failed (funcsize=72)"

#error "101A85918: call analysis failed (funcsize=72)"

#error "101A85A84: call analysis failed (funcsize=72)"

#error "101A85BF0: call analysis failed (funcsize=72)"

#error "101A85D5C: call analysis failed (funcsize=72)"

#error "101A85EC8: call analysis failed (funcsize=72)"

#error "101A86034: call analysis failed (funcsize=72)"

#error "101A861A0: call analysis failed (funcsize=72)"

#error "101A8630C: call analysis failed (funcsize=72)"

#error "101A86478: call analysis failed (funcsize=72)"

#error "101A865E4: call analysis failed (funcsize=72)"

#error "101A86750: call analysis failed (funcsize=72)"

#error "101A868BC: call analysis failed (funcsize=72)"

#error "101A86A28: call analysis failed (funcsize=72)"

#error "101A86B94: call analysis failed (funcsize=72)"

#error "101A86D00: call analysis failed (funcsize=72)"

#error "101A86E6C: call analysis failed (funcsize=72)"

#error "101A86FD8: call analysis failed (funcsize=71)"

#error "101A8713C: call analysis failed (funcsize=71)"

uint64_t sub_101A87228()
{
  sub_1001F4274();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_101A8725C()
{
  if (qword_102418FD0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      sub_100219CC4();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unknown type. CLAccessoryMonitor should be validating this for us!\", \"type\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
    }
    int v1 = qword_102418FD8;
    if (os_signpost_enabled((os_log_t)qword_102418FD8))
    {
      sub_100219CC4();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unknown type. CLAccessoryMonitor should be validating this for us!", "{\"msg%{public}.0s\":\"Received unknown type. CLAccessoryMonitor should be validating this for us!\", \"type\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022EDD38);
      }
    }
    int v2 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      sub_100219CC4();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unknown type. CLAccessoryMonitor should be validating this for us!\", \"type\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102418FD0, &stru_1022EDD38);
  }
}

void sub_101A87444()
{
}

void sub_101A87470()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022EF338);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022EF338);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 25;
    uint64_t v19 = "-[CLBluetoothServiceAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/BluetoothService/CLBluetoothService.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022EF338);
  }
}

#error "101A87688: call analysis failed (funcsize=80)"

#error "101A87804: call analysis failed (funcsize=72)"

#error "101A8796C: call analysis failed (funcsize=72)"

#error "101A87AD4: call analysis failed (funcsize=72)"

#error "101A87C3C: call analysis failed (funcsize=72)"

#error "101A87DA4: call analysis failed (funcsize=72)"

#error "101A87F0C: call analysis failed (funcsize=72)"

#error "101A88074: call analysis failed (funcsize=72)"

#error "101A881DC: call analysis failed (funcsize=72)"

void sub_101A882CC()
{
  sub_100C60EAC();
  if (!v1) {
    dispatch_once(&qword_1024193E0, &stru_1022EF748);
  }
  if (sub_100C60E44())
  {
    sub_1001DB2F0();
    sub_1003252B0((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,mem_err config_dict\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v17[0]);
    if (*(void *)(v0 + 992) != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022EF748);
    }
  }
  if (sub_100C60E80())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v8, v9, v10, "#nilr,#supl,#udp,mem_err config_dict", "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,mem_err config_dict\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17);
    if (*(void *)(v0 + 992) != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022EF748);
    }
  }
  if (sub_100C60E64())
  {
    sub_1001DB2F0();
    sub_1003252D0((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,mem_err config_dict\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17[0]);
  }
}

void sub_101A8842C()
{
  sub_100C60EAC();
  if (!v1) {
    dispatch_once(&qword_1024193E0, &stru_1022EF748);
  }
  if (sub_100C60E44())
  {
    sub_1001DB2F0();
    sub_1003252B0((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,mem_err params\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v17[0]);
    if (*(void *)(v0 + 992) != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022EF748);
    }
  }
  if (sub_100C60E80())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v8, v9, v10, "#nilr,#supl,#udp,mem_err params", "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,mem_err params\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17);
    if (*(void *)(v0 + 992) != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022EF748);
    }
  }
  if (sub_100C60E64())
  {
    sub_1001DB2F0();
    sub_1003252D0((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,mem_err params\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17[0]);
  }
}

#error "101A88604: call analysis failed (funcsize=73)"

#error "101A88774: call analysis failed (funcsize=73)"

void sub_101A8886C(uint64_t a1, void **a2)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*a2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void sub_101A888AC()
{
  if (qword_102419530 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      sub_100C6492C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CLIUA Invalid assertion level\", \"AssertionLevel\":%{public, location:CLClientInUseLevel}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EFDD0);
      }
    }
    char v1 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      sub_100C6492C();
      sub_100BCA278((void *)&_mh_execute_header, v1, v2, v3, "#CLIUA Invalid assertion level", "{\"msg%{public}.0s\":\"#CLIUA Invalid assertion level\", \"AssertionLevel\":%{public, location:CLClientInUseLevel}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EFDD0);
      }
    }
    uint64_t v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      sub_100C6492C();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLIUA Invalid assertion level\", \"AssertionLevel\":%{public, location:CLClientInUseLevel}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419530, &stru_1022EFDD0);
  }
}

void sub_101A88A70(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_101A88AAC()
{
  if (qword_102419530 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      sub_100B8E354();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CLIUA Records should not be stored unless they have active assertions\", \"key\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EFDD0);
      }
    }
    char v1 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      sub_100B8E354();
      sub_100BCA278((void *)&_mh_execute_header, v1, v2, v3, "#CLIUA Records should not be stored unless they have active assertions", "{\"msg%{public}.0s\":\"#CLIUA Records should not be stored unless they have active assertions\", \"key\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EFDD0);
      }
    }
    uint64_t v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      sub_100B8E354();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLIUA Records should not be stored unless they have active assertions\", \"key\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419530, &stru_1022EFDD0);
  }
}

void sub_101A88C74()
{
  if (qword_102419530 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CLIUA Over-release detected\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EFDD0);
      }
    }
    char v1 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#CLIUA Over-release detected", "{\"msg%{public}.0s\":\"#CLIUA Over-release detected\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022EFDD0);
      }
    }
    uint64_t v2 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLIUA Over-release detected\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419530, &stru_1022EFDD0);
  }
}

uint64_t sub_101A88E44(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = *a1;
  *a1 = 0;
  if (v8)
  {
    sub_1001F4274();
    (*(void (**)(void))(v9 + 8))();
  }
  uint64_t v10 = *a2;
  *a2 = 0;
  if (v10)
  {
    sub_1001F4274();
    (*(void (**)(void))(v11 + 8))();
  }
  uint64_t v12 = *a3;
  *a3 = 0;
  if (v12)
  {
    sub_1001F4274();
    (*(void (**)(void))(v13 + 8))();
  }
  uint64_t result = *a4;
  *a4 = 0;
  if (result)
  {
    sub_1001F4274();
    uint64_t v16 = *(uint64_t (**)(void))(v15 + 8);
    return v16();
  }
  return result;
}

void sub_101A88F44()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F0168);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F0168);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 28;
    uint64_t v19 = "-[CLOnBodyNotifierAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/OnBody/CLOnBodyNotifier.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022F0168);
  }
}

void sub_101A890D8()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022F0290);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022F0290);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_1022F0290);
  }
}

void (***sub_101A8925C(void (***a1)(void), void (***a2)(void)))(void)
{
  int v3 = a1;
  int v4 = a1;
  do
  {
    int v5 = *v4;
    v4 += 5;
    (*v5)();
    v3 += 5;
    uint64_t result = v4;
  }
  while (v4 != a2);
  return result;
}

void sub_101A892C0()
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022F0728);
  }
  uint64_t v0 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#monitor should be all cleared for migration but it isn't\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022F0728);
    }
  }
  int v1 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#monitor should be all cleared for migration but it isn't", "{\"msg%{public}.0s\":\"#monitor should be all cleared for migration but it isn't\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022F0728);
    }
  }
  int v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#monitor should be all cleared for migration but it isn't\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_101A89488()
{
  sub_100C8C38C();
  sub_100C8C3A4(1.7165e-36, v1, v2);
  sub_100C8C3B8(v3, v4);
  *(void *)(v5 + 30) = "assert";
  *(_WORD *)(v5 + 38) = 2081;
  *(void *)(v5 + 40) = "subPath";
  _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#monitor unable to get identifiable name from client key\", \"name\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7, 0x30u);
  if (*(char *)(v0 + 23) < 0) {
    operator delete(*(void **)v0);
  }
}

uint64_t sub_101A89514(uint64_t *a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10 = *a1;
  *a1 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(void *)a5 = a3;
  *(_DWORD *)(a5 + 8) = a4;
  return result;
}

void sub_101A895B4(std::__shared_weak_count **a1, std::__shared_weak_count **a2)
{
  uint64_t v3 = *a1;
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  if (*a2) {
    sub_1000DB0A0(*a2);
  }
}

void sub_101A895EC()
{
  __assert_rtn("-[CLCompanionSyncAuthObject writeTo:]", "CLCompanionSyncAuthObject.m", 347, "nil != self->_clientKey");
}

#error "101A8969C: call analysis failed (funcsize=77)"

#error "101A89818: call analysis failed (funcsize=78)"

#error "101A8999C: call analysis failed (funcsize=78)"

#error "101A89B20: call analysis failed (funcsize=77)"

uint64_t sub_101A89C18(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return sub_100C6AAE8(a2);
}

void sub_101A89C74()
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F18B8);
  }
  uint64_t v0 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"FenceCal: Where did you come from\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
    }
  }
  uint64_t v1 = qword_1024193C8;
  if (os_signpost_enabled((os_log_t)qword_1024193C8))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FenceCal: Where did you come from", "{\"msg%{public}.0s\":\"FenceCal: Where did you come from\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F18B8);
    }
  }
  uint64_t v2 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"FenceCal: Where did you come from\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_101A89E3C()
{
}

void sub_101A89E68()
{
}

void sub_101A89E94()
{
  sub_100CF22F8();
  if (!v1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  if (sub_100CF22BC())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(void *)(v0 + 1024) != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
  }
  if (sub_100CF230C())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v4, v5, v6, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(void *)(v0 + 1024) != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
  }
  if (sub_100CF22DC())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
}

void sub_101A89FFC()
{
  sub_100CF22F8();
  if (!v1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  if (sub_100CF22BC())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(void *)(v0 + 1024) != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
  }
  if (sub_100CF230C())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v4, v5, v6, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(void *)(v0 + 1024) != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
  }
  if (sub_100CF22DC())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
}

void sub_101A8A164()
{
  sub_100CF22F8();
  if (!v1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  if (sub_100CF22BC())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(void *)(v0 + 1024) != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
  }
  if (sub_100CF230C())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v4, v5, v6, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(void *)(v0 + 1024) != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
  }
  if (sub_100CF22DC())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
}

void sub_101A8A2CC()
{
  if (qword_102419400 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100CF22BC())
    {
      sub_1001DB29C();
      sub_1001DE4DC((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
    }
    if (sub_100CF230C())
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v2, v3, v4, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
    }
    if (sub_100CF22DC())
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
}

void sub_101A8A450()
{
  __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
}

void sub_101A8A47C()
{
  __assert_rtn("Zeros", "cnmatrix.h", 3099, "nc >= 0");
}

void sub_101A8A4A8()
{
  __assert_rtn("Multiply", "cnmatrixbase.h", 3887, "&(A) != &(C)");
}

void sub_101A8A4D4()
{
  __assert_rtn("Multiply", "cnmatrixbase.h", 3888, "&(B) != &(C)");
}

void sub_101A8A500()
{
  __assert_rtn("Multiply", "cnmatrixbase.h", 3885, "A.num_cols_ == B.num_rows_");
}

void sub_101A8A52C()
{
}

void sub_101A8A558()
{
}

void sub_101A8A584()
{
  __assert_rtn("Colon", "cnmatrixbase.h", 1788, "static_cast<s32>(idx.MaxNumCols()) >= n");
}

void sub_101A8A5B0()
{
  __assert_rtn("WriteValue", "cnmatrixbase.h", 1104, "data_ != __null");
}

void sub_101A8A5DC()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F1FF8);
      }
    }
    uint64_t v1 = qword_102419588;
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F1FF8);
      }
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022F1FF8);
  }
}

#error "101A8A838: call analysis failed (funcsize=81)"

#error "101A8A9B0: call analysis failed (funcsize=71)"

uint64_t sub_101A8AA9C(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

#error "101A8AB5C: call analysis failed (funcsize=72)"

#error "101A8ACC8: call analysis failed (funcsize=72)"

#error "101A8AE38: call analysis failed (funcsize=73)"

#error "101A8AFA8: call analysis failed (funcsize=73)"

#error "101A8B118: call analysis failed (funcsize=73)"

#error "101A8B288: call analysis failed (funcsize=73)"

#error "101A8B3F8: call analysis failed (funcsize=73)"

void sub_101A8B4EC()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F4090);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F4090);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 56;
    uint64_t v19 = "-[CLMagneticAccessoryAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/Notifiers/CLMagneticAccessory.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022F4090);
  }
}

void sub_101A8B680()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022F4240);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022F4240);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_1022F4240);
  }
}

void sub_101A8B804()
{
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100436D88())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F48D8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1592)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F48D8);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1592), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 199;
    uint64_t v20 = "toHostedNetwork";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiService_Type.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419630, &stru_1022F48D8);
  }
}

void sub_101A8B990()
{
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100436D88())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F48D8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1592)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F48D8);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1592), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 200;
    uint64_t v20 = "toHostedNetwork";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiService_Type.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419630, &stru_1022F48D8);
  }
}

#error "101A8BB98: call analysis failed (funcsize=73)"

#error "101A8BD08: call analysis failed (funcsize=73)"

#error "101A8BE78: call analysis failed (funcsize=73)"

#error "101A8BFE8: call analysis failed (funcsize=73)"

#error "101A8C158: call analysis failed (funcsize=73)"

#error "101A8C2C8: call analysis failed (funcsize=73)"

#error "101A8C438: call analysis failed (funcsize=73)"

#error "101A8C5A8: call analysis failed (funcsize=73)"

#error "101A8C718: call analysis failed (funcsize=73)"

#error "101A8C888: call analysis failed (funcsize=73)"

#error "101A8C9F8: call analysis failed (funcsize=73)"

#error "101A8CB68: call analysis failed (funcsize=73)"

#error "101A8CCD8: call analysis failed (funcsize=73)"

#error "101A8CE48: call analysis failed (funcsize=73)"

#error "101A8CFB8: call analysis failed (funcsize=73)"

#error "101A8D128: call analysis failed (funcsize=73)"

#error "101A8D298: call analysis failed (funcsize=73)"

#error "101A8D408: call analysis failed (funcsize=73)"

#error "101A8D578: call analysis failed (funcsize=73)"

#error "101A8D6E8: call analysis failed (funcsize=73)"

void sub_101A8D7DC(char a1)
{
  if ((a1 & 1) == 0) {
    dispatch_once(&qword_1024193C0, &stru_1022F71E0);
  }
  int v1 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"addFencesForDataDownload fence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, 0x26u);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F71E0);
    }
  }
  if (os_signpost_enabled((os_log_t)qword_1024193C8))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v2, v3, v4, "addFencesForDataDownload fence without key", "{\"msg%{public}.0s\":\"addFencesForDataDownload fence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F71E0);
    }
  }
  int v5 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"addFencesForDataDownload fence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, 0x26u);
  }
}

#error "101A8DA00: call analysis failed (funcsize=74)"

#error "101A8DB70: call analysis failed (funcsize=75)"

#error "101A8DCE0: call analysis failed (funcsize=71)"

#error "101A8DE3C: call analysis failed (funcsize=71)"

#error "101A8DF98: call analysis failed (funcsize=71)"

#error "101A8E0F4: call analysis failed (funcsize=71)"

#error "101A8E250: call analysis failed (funcsize=71)"

#error "101A8E3AC: call analysis failed (funcsize=71)"

#error "101A8E510: call analysis failed (funcsize=74)"

#error "101A8E680: call analysis failed (funcsize=75)"

#error "101A8E7F4: call analysis failed (funcsize=72)"

#error "101A8E960: call analysis failed (funcsize=72)"

#error "101A8EAE0: call analysis failed (funcsize=82)"

#error "101A8EC60: call analysis failed (funcsize=72)"

#error "101A8EDCC: call analysis failed (funcsize=72)"

#error "101A8EF38: call analysis failed (funcsize=72)"

#error "101A8F0A4: call analysis failed (funcsize=71)"

void sub_101A8F190()
{
  if (qword_1024193C0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Wifi startMonitoring fence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F86D0);
      }
    }
    int v1 = qword_1024193C8;
    if (os_signpost_enabled((os_log_t)qword_1024193C8))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Wifi startMonitoring fence without key", "{\"msg%{public}.0s\":\"Wifi startMonitoring fence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F86D0);
      }
    }
    uint64_t v2 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Wifi startMonitoring fence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024193C0, &stru_1022F86D0);
  }
}

void sub_101A8F360()
{
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022F87A0);
  }
  uint64_t v0 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"invalid db pointer\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022F87A0);
    }
  }
  int v1 = off_1024195E8;
  if (os_signpost_enabled((os_log_t)off_1024195E8))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "invalid db pointer", "{\"msg%{public}.0s\":\"invalid db pointer\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022F87A0);
    }
  }
  uint64_t v2 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"invalid db pointer\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_101A8F528()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F8BA0);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F8BA0);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 33;
    uint64_t v19 = "-[CLGeomagneticModelProviderLocationdAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Compass/CLGeomagneticModelProvider.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022F8BA0);
  }
}

void sub_101A8F6BC()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F9038);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F9038);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 47;
    uint64_t v19 = "-[CLSignalEnvironmentProviderAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/SignalEnvironment/CLSignalEnvironmentProvider.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022F9038);
  }
}

void sub_101A8F850()
{
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022F9578);
  }
  int v0 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"indeterminate wifi power state\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022F9578);
    }
  }
  int v1 = qword_1024193B8;
  if (os_signpost_enabled((os_log_t)qword_1024193B8))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "indeterminate wifi power state", "{\"msg%{public}.0s\":\"indeterminate wifi power state\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022F9578);
    }
  }
  int v2 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"indeterminate wifi power state\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_101A8FA18()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F9C48);
      }
    }
    int v1 = qword_102419588;
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F9C48);
      }
    }
    int v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022F9C48);
  }
}

void sub_101A8FBE8()
{
  if (qword_102419090 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1007F12E4())
    {
      sub_1001DB29C();
      sub_1001DE4DC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022F9E48);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 152)))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v3, v4, v5, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022F9E48);
      }
    }
    if (sub_1007F1304())
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v6, v7, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419090, &stru_1022F9E48);
  }
}

void sub_101A8FD74()
{
  if (qword_102419090 != -1) {
    dispatch_once(&qword_102419090, &stru_1022F9E48);
  }
  if (sub_1007F12E4())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022F9E48);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v0 + 152)))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v3, v4, v5, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022F9E48);
    }
  }
  if (sub_1007F1304())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v6, v7, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
  }
}

void sub_101A8FEF0()
{
  if (qword_102419090 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1007F12E4())
    {
      sub_1001DB29C();
      sub_1001DE4DC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022F9E48);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 152)))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v3, v4, v5, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022F9E48);
      }
    }
    if (sub_1007F1304())
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v6, v7, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419090, &stru_1022F9E48);
  }
}

void sub_101A9007C()
{
  if (qword_102419000 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_1022F9FB0);
      }
    }
    uint64_t v1 = qword_102419008;
    if (os_signpost_enabled((os_log_t)qword_102419008))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_1022F9FB0);
      }
    }
    uint64_t v2 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419000, &stru_1022F9FB0);
  }
}

void sub_101A9024C()
{
}

void sub_101A90278()
{
}

void sub_101A902A4()
{
}

void sub_101A902D0()
{
}

void sub_101A902FC()
{
}

void sub_101A90328()
{
}

void sub_101A90354()
{
}

void sub_101A90380()
{
}

void sub_101A903AC()
{
}

void sub_101A903D8()
{
}

void sub_101A90404()
{
}

void sub_101A90430()
{
}

void sub_101A9045C()
{
}

void sub_101A90488()
{
}

void sub_101A904B4()
{
}

void sub_101A904E0()
{
}

void sub_101A9050C()
{
}

void sub_101A90538()
{
}

void sub_101A90564()
{
}

void sub_101A90590()
{
}

void sub_101A905BC()
{
}

void sub_101A905E8()
{
}

void sub_101A90614()
{
}

void sub_101A90640()
{
}

void sub_101A9066C()
{
}

#error "101A90724: call analysis failed (funcsize=82)"

#error "101A908A8: call analysis failed (funcsize=73)"

#error "101A90A18: call analysis failed (funcsize=73)"

#error "101A90B88: call analysis failed (funcsize=73)"

#error "101A90CF8: call analysis failed (funcsize=73)"

#error "101A90E68: call analysis failed (funcsize=73)"

void sub_101A90F5C()
{
  if (qword_1024191C0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100E669D0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"In order to retract a stop alert we need the sessionId to not have been cleared out, did something change?\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 456)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "In order to retract a stop alert we need the sessionId to not have been cleared out, did something change?", "{\"msg%{public}.0s\":\"In order to retract a stop alert we need the sessionId to not have been cleared out, did something change?\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 456), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"In order to retract a stop alert we need the sessionId to not have been cleared out, did something change?\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 1121;
    uint64_t v20 = "retractStopAlert";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Workout/Prediction/Algorithm/CLWorkoutPredictor.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
}

void sub_101A910E0()
{
}

void sub_101A9110C()
{
  __assert_rtn("onLocationNotification", "CLEphemeralGNSSController.mm", 131, "notification == CLLocationProvider_Type::kNotificationLocation");
}

void sub_101A91138()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022FDD30);
      }
    }
    int v1 = qword_102419588;
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022FDD30);
      }
    }
    int v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1022FDD30);
  }
}

#error "101A91384: call analysis failed (funcsize=73)"

#error "101A914F4: call analysis failed (funcsize=73)"

#error "101A91664: call analysis failed (funcsize=73)"

#error "101A917D4: call analysis failed (funcsize=73)"

#error "101A91944: call analysis failed (funcsize=73)"

void sub_101A91A38()
{
  if (qword_1024193D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CLGnssProviderAdapter,beginService,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
    }
    int v1 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLGnssProviderAdapter,beginService,Assertion failed", "{\"msg%{public}.0s\":\"CLGnssProviderAdapter,beginService,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
    }
    int v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLGnssProviderAdapter,beginService,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024193D0, &stru_1022FF108);
  }
}

uint64_t sub_101A91C08(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(void *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
  return result;
}

void sub_101A91C74(_DWORD *a1)
{
  sub_1005A6CBC();
  if (!v3) {
    dispatch_once(&qword_102419380, &stru_1022FF898);
  }
  if (sub_1005A6CC8())
  {
    sub_100219C98();
    sub_100234FD0((void *)&_mh_execute_header, v4, v5, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, v7, v8, v9, v19[0]);
    sub_1005A6CBC();
    if (!v3) {
      dispatch_once(&qword_102419380, &stru_1022FF898);
    }
  }
  int v10 = *(NSObject **)(v1 + 904);
  if (os_signpost_enabled(v10))
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v10, v11, v12, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v19);
    sub_1005A6CBC();
    if (!v3) {
      dispatch_once(&qword_102419380, &stru_1022FF898);
    }
  }
  if (os_log_type_enabled(*(os_log_t *)(v1 + 904), OS_LOG_TYPE_INFO))
  {
    sub_100219C98();
    sub_100234FF0((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19[0]);
  }
  *a1 = 112;
}

void sub_101A91DF8(_DWORD *a1)
{
  sub_1005A6CBC();
  if (!v3) {
    dispatch_once(&qword_102419380, &stru_1022FF898);
  }
  if (sub_1005A6CC8())
  {
    sub_100219C98();
    sub_100234FD0((void *)&_mh_execute_header, v4, v5, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, v7, v8, v9, v19[0]);
    sub_1005A6CBC();
    if (!v3) {
      dispatch_once(&qword_102419380, &stru_1022FF898);
    }
  }
  int v10 = *(NSObject **)(v1 + 904);
  if (os_signpost_enabled(v10))
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v10, v11, v12, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v19);
    sub_1005A6CBC();
    if (!v3) {
      dispatch_once(&qword_102419380, &stru_1022FF898);
    }
  }
  if (os_log_type_enabled(*(os_log_t *)(v1 + 904), OS_LOG_TYPE_INFO))
  {
    sub_100219C98();
    sub_100234FF0((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19[0]);
  }
  *a1 = 107;
}

void sub_101A91F7C()
{
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022FF8B8);
      }
    }
    uint64_t v1 = qword_102419638;
    if (os_signpost_enabled((os_log_t)qword_102419638))
    {
      sub_1001DB29C();
      sub_100219C3C((void *)&_mh_execute_header, v1, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022FF8B8);
      }
    }
    uint64_t v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419630, &stru_1022FF8B8);
  }
}

uint64_t sub_101A92140(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(void *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
  return result;
}

void sub_101A921AC(_DWORD *a1)
{
  sub_1005A6CBC();
  if (!v3) {
    dispatch_once(&qword_102419380, &stru_1022FF928);
  }
  if (sub_1005A6CC8())
  {
    sub_100219C98();
    sub_100234FD0((void *)&_mh_execute_header, v4, v5, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, v7, v8, v9, v19[0]);
    sub_1005A6CBC();
    if (!v3) {
      dispatch_once(&qword_102419380, &stru_1022FF928);
    }
  }
  int v10 = *(NSObject **)(v1 + 904);
  if (os_signpost_enabled(v10))
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v10, v11, v12, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v19);
    sub_1005A6CBC();
    if (!v3) {
      dispatch_once(&qword_102419380, &stru_1022FF928);
    }
  }
  if (os_log_type_enabled(*(os_log_t *)(v1 + 904), OS_LOG_TYPE_INFO))
  {
    sub_100219C98();
    sub_100234FF0((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19[0]);
  }
  *a1 = 112;
}

void sub_101A92330(_DWORD *a1)
{
  sub_1005A6CBC();
  if (!v3) {
    dispatch_once(&qword_102419380, &stru_1022FF928);
  }
  if (sub_1005A6CC8())
  {
    sub_100219C98();
    sub_100234FD0((void *)&_mh_execute_header, v4, v5, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, v7, v8, v9, v19[0]);
    sub_1005A6CBC();
    if (!v3) {
      dispatch_once(&qword_102419380, &stru_1022FF928);
    }
  }
  int v10 = *(NSObject **)(v1 + 904);
  if (os_signpost_enabled(v10))
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v10, v11, v12, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v19);
    sub_1005A6CBC();
    if (!v3) {
      dispatch_once(&qword_102419380, &stru_1022FF928);
    }
  }
  if (os_log_type_enabled(*(os_log_t *)(v1 + 904), OS_LOG_TYPE_INFO))
  {
    sub_100219C98();
    sub_100234FF0((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19[0]);
  }
  *a1 = 107;
}

void sub_101A924B4()
{
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022FF948);
      }
    }
    uint64_t v1 = qword_102419638;
    if (os_signpost_enabled((os_log_t)qword_102419638))
    {
      sub_1001DB29C();
      sub_100219C3C((void *)&_mh_execute_header, v1, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022FF948);
      }
    }
    uint64_t v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419630, &stru_1022FF948);
  }
}

uint64_t sub_101A92678(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(void *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
  return result;
}

void sub_101A926E4(_DWORD *a1)
{
  sub_1005A6CBC();
  if (!v3) {
    dispatch_once(&qword_102419380, &stru_1022FF9D8);
  }
  if (sub_1005A6CC8())
  {
    sub_100219C98();
    sub_100234FD0((void *)&_mh_execute_header, v4, v5, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, v7, v8, v9, v19[0]);
    sub_1005A6CBC();
    if (!v3) {
      dispatch_once(&qword_102419380, &stru_1022FF9D8);
    }
  }
  int v10 = *(NSObject **)(v1 + 904);
  if (os_signpost_enabled(v10))
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v10, v11, v12, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v19);
    sub_1005A6CBC();
    if (!v3) {
      dispatch_once(&qword_102419380, &stru_1022FF9D8);
    }
  }
  if (os_log_type_enabled(*(os_log_t *)(v1 + 904), OS_LOG_TYPE_INFO))
  {
    sub_100219C98();
    sub_100234FF0((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19[0]);
  }
  *a1 = 112;
}

void sub_101A92868(_DWORD *a1)
{
  sub_1005A6CBC();
  if (!v3) {
    dispatch_once(&qword_102419380, &stru_1022FF9D8);
  }
  if (sub_1005A6CC8())
  {
    sub_100219C98();
    sub_100234FD0((void *)&_mh_execute_header, v4, v5, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, v7, v8, v9, v19[0]);
    sub_1005A6CBC();
    if (!v3) {
      dispatch_once(&qword_102419380, &stru_1022FF9D8);
    }
  }
  int v10 = *(NSObject **)(v1 + 904);
  if (os_signpost_enabled(v10))
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v10, v11, v12, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v19);
    sub_1005A6CBC();
    if (!v3) {
      dispatch_once(&qword_102419380, &stru_1022FF9D8);
    }
  }
  if (os_log_type_enabled(*(os_log_t *)(v1 + 904), OS_LOG_TYPE_INFO))
  {
    sub_100219C98();
    sub_100234FF0((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19[0]);
  }
  *a1 = 107;
}

void sub_101A929EC()
{
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022FF9F8);
      }
    }
    uint64_t v1 = qword_102419638;
    if (os_signpost_enabled((os_log_t)qword_102419638))
    {
      sub_1001DB29C();
      sub_100219C3C((void *)&_mh_execute_header, v1, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022FF9F8);
      }
    }
    uint64_t v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419630, &stru_1022FF9F8);
  }
}

#error "101A92C2C: call analysis failed (funcsize=73)"

#error "101A92D9C: call analysis failed (funcsize=73)"

#error "101A92F0C: call analysis failed (funcsize=73)"

#error "101A9307C: call analysis failed (funcsize=73)"

#error "101A931EC: call analysis failed (funcsize=73)"

uint64_t sub_101A932E0(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(void *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
  return result;
}

void sub_101A9334C(_DWORD *a1)
{
  sub_1005A6CBC();
  if (!v3) {
    dispatch_once(&qword_102419380, &stru_102300040);
  }
  if (sub_1005A6CC8())
  {
    sub_100219C98();
    sub_100234FD0((void *)&_mh_execute_header, v4, v5, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, v7, v8, v9, v19[0]);
    sub_1005A6CBC();
    if (!v3) {
      dispatch_once(&qword_102419380, &stru_102300040);
    }
  }
  int v10 = *(NSObject **)(v1 + 904);
  if (os_signpost_enabled(v10))
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v10, v11, v12, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v19);
    sub_1005A6CBC();
    if (!v3) {
      dispatch_once(&qword_102419380, &stru_102300040);
    }
  }
  if (os_log_type_enabled(*(os_log_t *)(v1 + 904), OS_LOG_TYPE_INFO))
  {
    sub_100219C98();
    sub_100234FF0((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19[0]);
  }
  *a1 = 112;
}

void sub_101A934D0(_DWORD *a1)
{
  sub_1005A6CBC();
  if (!v3) {
    dispatch_once(&qword_102419380, &stru_102300040);
  }
  if (sub_1005A6CC8())
  {
    sub_100219C98();
    sub_100234FD0((void *)&_mh_execute_header, v4, v5, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, v7, v8, v9, v19[0]);
    sub_1005A6CBC();
    if (!v3) {
      dispatch_once(&qword_102419380, &stru_102300040);
    }
  }
  int v10 = *(NSObject **)(v1 + 904);
  if (os_signpost_enabled(v10))
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v10, v11, v12, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v19);
    sub_1005A6CBC();
    if (!v3) {
      dispatch_once(&qword_102419380, &stru_102300040);
    }
  }
  if (os_log_type_enabled(*(os_log_t *)(v1 + 904), OS_LOG_TYPE_INFO))
  {
    sub_100219C98();
    sub_100234FF0((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19[0]);
  }
  *a1 = 107;
}

void sub_101A93654()
{
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102300060);
      }
    }
    uint64_t v1 = qword_102419638;
    if (os_signpost_enabled((os_log_t)qword_102419638))
    {
      sub_1001DB29C();
      sub_100219C3C((void *)&_mh_execute_header, v1, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102300060);
      }
    }
    uint64_t v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419630, &stru_102300060);
  }
}

void sub_101A93818()
{
  if (qword_1024191C0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Requested end index must not exceed end of array - 1\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1023000A0);
      }
    }
    uint64_t v1 = qword_1024191C8;
    if (os_signpost_enabled((os_log_t)qword_1024191C8))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Requested end index must not exceed end of array - 1", "{\"msg%{public}.0s\":\"Requested end index must not exceed end of array - 1\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1023000A0);
      }
    }
    uint64_t v2 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Requested end index must not exceed end of array - 1\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024191C0, &stru_1023000A0);
  }
}

#error "101A93A64: call analysis failed (funcsize=73)"

#error "101A93BD4: call analysis failed (funcsize=73)"

#error "101A93D44: call analysis failed (funcsize=73)"

#error "101A93EB4: call analysis failed (funcsize=73)"

#error "101A94024: call analysis failed (funcsize=73)"

void sub_101A94118()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023006F8);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023006F8);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 44;
    uint64_t v19 = "-[CLDataProtectionManagerAdapter beginService]";
    uint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/DataProtectionManager/CLDataProtectionManager.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1023006F8);
  }
}

void sub_101A942AC()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102300888);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102300888);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_102300888);
  }
}

void sub_101A94430()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"CLStatusBarIconManagerNotifier Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102300D18);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "CLStatusBarIconManagerNotifier Assertion failed", "{\"msg%{public}.0s\":\"CLStatusBarIconManagerNotifier Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102300D18);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"CLStatusBarIconManagerNotifier Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 95;
    uint64_t v19 = "-[CLStatusBarIconManagerAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/StatusBarIcon/CLStatusBarIconManager.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_102300D18);
  }
}

void sub_101A945C4()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102300E88);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102300E88);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_102300E88);
  }
}

void sub_101A94748()
{
  if (qword_102419600 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"The capabilities cache has been accessed before being populated!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102301038);
      }
    }
    int v1 = qword_102419608;
    if (os_signpost_enabled((os_log_t)qword_102419608))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "The capabilities cache has been accessed before being populated!", "{\"msg%{public}.0s\":\"The capabilities cache has been accessed before being populated!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102301038);
      }
    }
    int v2 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"The capabilities cache has been accessed before being populated!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419600, &stru_102301038);
  }
}

void sub_101A94918()
{
  if (qword_102419520 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1009060B0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"I must have already been invalidated by CLDaemonInUseAssertion\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102301180);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1320)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "I must have already been invalidated by CLDaemonInUseAssertion", "{\"msg%{public}.0s\":\"I must have already been invalidated by CLDaemonInUseAssertion\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102301180);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1320), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"I must have already been invalidated by CLDaemonInUseAssertion\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 33;
    uint64_t v20 = "-[CLDaemonInUseAssertionAdapter dealloc]";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonInUseAssertion.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419520, &stru_102301180);
  }
}

void sub_101A94A9C()
{
  if (qword_102419520 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1009060B0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"#CLIUA expecting that fInUseAssertionContainer is nil, but it appears to have already been set! This is potentially a major privacy leak and is likely indicative of a memory leak or a double-assertion\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102301180);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1320)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "#CLIUA expecting that fInUseAssertionContainer is nil, but it appears to have already been set! This is potentially a major privacy leak and is likely indicative of a memory leak or a double-assertion", "{\"msg%{public}.0s\":\"#CLIUA expecting that fInUseAssertionContainer is nil, but it appears to have already been set! This is potentially a major privacy leak and is likely indicative of a memory leak or a double-assertion\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102301180);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1320), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"#CLIUA expecting that fInUseAssertionContainer is nil, but it appears to have already been set! This is potentially a major privacy leak and is likely indicative of a memory leak or a double-assertion\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 145;
    uint64_t v20 = "handleMessageInUseAssertion_block_invoke";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonInUseAssertion.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419520, &stru_102301180);
  }
}

void sub_101A94C20()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102301540);
      }
    }
    int v1 = qword_102419588;
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102301540);
      }
    }
    int v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_102301540);
  }
}

void sub_101A94DF0()
{
  if (qword_102419540 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_FAULT))
    {
      sub_100219C60();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid location source\", \"source\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_102301560);
      }
    }
    int v1 = qword_102419548;
    if (os_signpost_enabled((os_log_t)qword_102419548))
    {
      sub_100219C60();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid location source", "{\"msg%{public}.0s\":\"Invalid location source\", \"source\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_102301560);
      }
    }
    int v2 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
    {
      sub_100219C60();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid location source\", \"source\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419540, &stru_102301560);
  }
}

void sub_101A94FC4(std::__shared_weak_count **a1, void *a2)
{
  int v3 = *a1;
  if (v3) {
    sub_1000DB0A0(v3);
  }
  _Block_object_dispose(a2, 8);
}

void sub_101A94FFC()
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_102301BB8);
  }
  if (sub_1009060B0())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#transcriptSession fSavedPromptedCoordinates not be zero, here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, 0x26u);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102301BB8);
    }
  }
  int v2 = *(NSObject **)(v1 + 1320);
  if (os_signpost_enabled(v2))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v3, v4, v5, "#transcriptSession fSavedPromptedCoordinates not be zero, here", "{\"msg%{public}.0s\":\"#transcriptSession fSavedPromptedCoordinates not be zero, here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102301BB8);
    }
  }
  if (sub_100C08ADC())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#transcriptSession fSavedPromptedCoordinates not be zero, here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, 0x26u);
  }
}

void sub_101A95190()
{
  if (qword_102419530 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"#transcriptSession setCommencementDate should not be nil, here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v15, v16, (uint64_t)v17, v18, v19[0]);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v6, v7, v8, "#transcriptSession setCommencementDate should not be nil, here", "{\"msg%{public}.0s\":\"#transcriptSession setCommencementDate should not be nil, here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v19);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v9, v10, "{\"msg%{public}.0s\":\"#transcriptSession setCommencementDate should not be nil, here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v13, v14, (uint64_t)v15, v16, (uint64_t)v17, v18, v19[0]);
    }
    uint64_t v16 = 301;
    int v17 = "setCommencementDate";
    int v15 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/Subscriptions/CLTranscriptSubscription.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419530, &stru_102301BD8);
  }
}

void sub_101A95328()
{
  if (qword_102419520 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1009060B0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"#transcriptSession should not be valid since the session has stopped\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v16, v17, (uint64_t)v18, v19, v20[0]);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102301BB8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1320)))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v7, v8, v9, "#transcriptSession should not be valid since the session has stopped", "{\"msg%{public}.0s\":\"#transcriptSession should not be valid since the session has stopped\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v20);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102301BB8);
      }
    }
    if (sub_100C08ADC())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v10, v11, "{\"msg%{public}.0s\":\"#transcriptSession should not be valid since the session has stopped\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v14, v15, (uint64_t)v16, v17, (uint64_t)v18, v19, v20[0]);
    }
    uint64_t v17 = 365;
    uint64_t v18 = "onInvalidate";
    uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/Subscriptions/CLTranscriptSubscription.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419520, &stru_102301BB8);
  }
}

void sub_101A954A4()
{
  if (qword_102419520 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1009060B0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Using a persistent subscription that has been invalidated!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v16, v17, (uint64_t)v18, v19, v20[0]);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102301BB8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1320)))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v7, v8, v9, "Using a persistent subscription that has been invalidated!", "{\"msg%{public}.0s\":\"Using a persistent subscription that has been invalidated!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v20);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102301BB8);
      }
    }
    if (sub_100C08ADC())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v10, v11, "{\"msg%{public}.0s\":\"Using a persistent subscription that has been invalidated!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v14, v15, (uint64_t)v16, v17, (uint64_t)v18, v19, v20[0]);
    }
    uint64_t v17 = 196;
    uint64_t v18 = "assertValid";
    uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLPersistentSubscription.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419520, &stru_102301BB8);
  }
}

uint64_t sub_101A95620(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return sub_100EDFEE4(a2);
}

void sub_101A9567C()
{
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102302040);
      }
    }
    int v1 = qword_102419638;
    if (os_signpost_enabled((os_log_t)qword_102419638))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102302040);
      }
    }
    int v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419630, &stru_102302040);
  }
}

#error "101A958D0: call analysis failed (funcsize=73)"

#error "101A95A40: call analysis failed (funcsize=73)"

#error "101A95BB0: call analysis failed (funcsize=73)"

#error "101A95D20: call analysis failed (funcsize=73)"

#error "101A95E90: call analysis failed (funcsize=73)"

#error "101A96000: call analysis failed (funcsize=73)"

#error "101A96170: call analysis failed (funcsize=73)"

#error "101A962E0: call analysis failed (funcsize=73)"

#error "101A96450: call analysis failed (funcsize=73)"

#error "101A965C0: call analysis failed (funcsize=73)"

uint64_t sub_101A966B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void sub_101A966D8()
{
}

void sub_101A96704()
{
}

void sub_101A96730()
{
}

void sub_101A9675C()
{
}

void sub_101A96788()
{
}

void sub_101A967B4()
{
}

void sub_101A967E0()
{
}

void sub_101A9680C()
{
}

void sub_101A96838()
{
}

void sub_101A96864()
{
}

void sub_101A96890()
{
}

void sub_101A968BC()
{
}

void sub_101A968E8()
{
}

void sub_101A96914()
{
}

void sub_101A96940()
{
}

void sub_101A9696C()
{
}

void sub_101A96998()
{
}

void sub_101A969C4()
{
}

void sub_101A969F0()
{
}

void sub_101A96A1C()
{
}

void sub_101A96A48()
{
}

void sub_101A96A74()
{
}

void sub_101A96AA0()
{
}

void sub_101A96ACC()
{
}

void sub_101A96AF8()
{
}

void sub_101A96B24()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102305BE0);
      }
    }
    int v1 = qword_102419588;
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102305BE0);
      }
    }
    int v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_102305BE0);
  }
}

void sub_101A96CF4(char a1)
{
  if ((a1 & 1) == 0) {
    dispatch_once(&qword_1024193D0, &stru_102305D90);
  }
  int v1 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
  }
  int v2 = qword_1024193D8;
  if (os_signpost_enabled((os_log_t)qword_1024193D8))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
  }
}

void sub_101A96EB4(void *a1, void *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[1132];
  if (v4) {
    sub_1000DB0A0(v4);
  }
  int v5 = (std::__shared_weak_count *)a1[1019];
  if (v5) {
    sub_1000DB0A0(v5);
  }
  int v6 = (std::__shared_weak_count *)a1[916];
  if (v6) {
    sub_1000DB0A0(v6);
  }
  sub_10041F48C(a2);
  uint64_t v7 = (std::__shared_weak_count *)a1[790];
  if (v7) {
    sub_1000DB0A0(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)a1[690];
  if (v8) {
    sub_1000DB0A0(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)a1[590];
  if (v9) {
    sub_1000DB0A0(v9);
  }
  int v10 = (std::__shared_weak_count *)a1[490];
  if (v10) {
    sub_1000DB0A0(v10);
  }
  int v11 = (std::__shared_weak_count *)a1[286];
  if (v11) {
    sub_1000DB0A0(v11);
  }
  int v12 = (std::__shared_weak_count *)a1[186];
  if (v12) {
    sub_1000DB0A0(v12);
  }
  int v13 = (std::__shared_weak_count *)a1[86];
  if (v13)
  {
    sub_1000DB0A0(v13);
  }
}

#error "101A96FF4: call analysis failed (funcsize=77)"

#error "101A97164: call analysis failed (funcsize=72)"

#error "101A972D0: call analysis failed (funcsize=72)"

#error "101A9743C: call analysis failed (funcsize=72)"

#error "101A975A8: call analysis failed (funcsize=72)"

#error "101A97714: call analysis failed (funcsize=71)"

#error "101A97878: call analysis failed (funcsize=71)"

#error "101A979DC: call analysis failed (funcsize=71)"

#error "101A97B40: call analysis failed (funcsize=71)"

#error "101A97CA8: call analysis failed (funcsize=76)"

#error "101A97E20: call analysis failed (funcsize=72)"

#error "101A97F8C: call analysis failed (funcsize=72)"

#error "101A980F8: call analysis failed (funcsize=72)"

#error "101A98270: call analysis failed (funcsize=77)"

void sub_101A98368()
{
  if (qword_1024193B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1008B4A98())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Can't have a scan of no channels\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023070A8);
      }
    }
    if (sub_100F7EFF8())
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Can't have a scan of no channels", "{\"msg%{public}.0s\":\"Can't have a scan of no channels\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023070A8);
      }
    }
    if (sub_100F7EF8C())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Can't have a scan of no channels\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 143;
    uint64_t v19 = "setChannels";
    uint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiServiceScanParameters.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1024193B0, &stru_1023070A8);
  }
}

void sub_101A984E0()
{
  if (qword_1024193B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1008B4A98())
    {
      CFStringGetCStringPtr(@"SCAN_CHANNELS", 0x8000100u);
      sub_100F7EF58();
      sub_100F7EFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Expected key in the dictionary\", \"key\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023070A8);
      }
    }
    if (sub_100F7EFF8())
    {
      CFStringGetCStringPtr(@"SCAN_CHANNELS", 0x8000100u);
      sub_100F7EF58();
      sub_100BCA278((void *)&_mh_execute_header, v0, v2, v3, "Expected key in the dictionary", "{\"msg%{public}.0s\":\"Expected key in the dictionary\", \"key\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023070A8);
      }
    }
    if (sub_100F7EF8C())
    {
      CFStringGetCStringPtr(@"SCAN_CHANNELS", 0x8000100u);
      sub_100F7EF58();
      sub_100F7EFE0((void *)&_mh_execute_header, v0, v4, "{\"msg%{public}.0s\":\"Expected key in the dictionary\", \"key\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1024193B0, &stru_1023070A8);
  }
}

void sub_101A986AC()
{
  if (qword_1024193B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100F7EFC0())
    {
      sub_100F7EEEC();
      sub_100F7EFA8((void *)&_mh_execute_header, v0, v2, "{\"msg%{public}.0s\":\"Expected key in the dictionary\", \"key\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023070A8);
      }
    }
    uint64_t v3 = *(NSObject **)(v1 + 952);
    if (os_signpost_enabled(v3))
    {
      sub_100F7EEEC();
      sub_100BCA278((void *)&_mh_execute_header, v3, v4, v5, "Expected key in the dictionary", "{\"msg%{public}.0s\":\"Expected key in the dictionary\", \"key\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023070A8);
      }
    }
    int v0 = *(NSObject **)(v1 + 952);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      sub_100F7EEEC();
      sub_100F7EFE0((void *)&_mh_execute_header, v0, v6, "{\"msg%{public}.0s\":\"Expected key in the dictionary\", \"key\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024193B0, &stru_1023070A8);
  }
}

void sub_101A9884C()
{
  if (qword_1024193B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100F7EFC0())
    {
      sub_100F7EEEC();
      sub_100F7EFA8((void *)&_mh_execute_header, v0, v2, "{\"msg%{public}.0s\":\"Expected to be able to get an int value from the CFNumber\", \"key\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023070A8);
      }
    }
    uint64_t v3 = *(NSObject **)(v1 + 952);
    if (os_signpost_enabled(v3))
    {
      sub_100F7EEEC();
      sub_100BCA278((void *)&_mh_execute_header, v3, v4, v5, "Expected to be able to get an int value from the CFNumber", "{\"msg%{public}.0s\":\"Expected to be able to get an int value from the CFNumber\", \"key\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023070A8);
      }
    }
    int v0 = *(NSObject **)(v1 + 952);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      sub_100F7EEEC();
      sub_100F7EFE0((void *)&_mh_execute_header, v0, v6, "{\"msg%{public}.0s\":\"Expected to be able to get an int value from the CFNumber\", \"key\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024193B0, &stru_1023070A8);
  }
}

void sub_101A989EC(float a1)
{
  *(float *)&double v2 = a1;
  if (qword_1024193B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    double v2 = *(float *)&v2;
    if (sub_1008B4A98())
    {
      sub_100F7EF20();
      sub_100F7EFA8((void *)&_mh_execute_header, v1, v3, "{\"msg%{public}.0s\":\"Duty cycle percentage should be between 0 and 1\", \"dutyCycle\":\"%{private}f\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023070A8);
      }
    }
    if (sub_100F7EFF8())
    {
      sub_100F7EF20();
      sub_100BCA278((void *)&_mh_execute_header, v1, v4, v5, "Duty cycle percentage should be between 0 and 1", "{\"msg%{public}.0s\":\"Duty cycle percentage should be between 0 and 1\", \"dutyCycle\":\"%{private}f\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023070A8);
      }
    }
    if (sub_100F7EF8C())
    {
      sub_100F7EF20();
      sub_100F7EFE0((void *)&_mh_execute_header, v1, v6, "{\"msg%{public}.0s\":\"Duty cycle percentage should be between 0 and 1\", \"dutyCycle\":\"%{private}f\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024193B0, &stru_1023070A8);
  }
}

void sub_101A98B80()
{
  if (qword_1024193B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1008B4A98())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Duty cycle is NaN\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023070A8);
      }
    }
    if (sub_100F7EFF8())
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Duty cycle is NaN", "{\"msg%{public}.0s\":\"Duty cycle is NaN\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023070A8);
      }
    }
    if (sub_100F7EF8C())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Duty cycle is NaN\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 17;
    uint64_t v19 = "computeExpectedScanDelay";
    uint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiServiceScanParameters.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024193B0, &stru_1023070A8);
  }
}

void sub_101A98CF0()
{
  if (qword_102419560 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
    {
      sub_100F8A258();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"maxHarvestAge is too high\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102307390);
      }
    }
    int v1 = qword_102419568;
    if (os_signpost_enabled((os_log_t)qword_102419568))
    {
      sub_100F8A258();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "maxHarvestAge is too high", "{\"msg%{public}.0s\":\"maxHarvestAge is too high\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102307390);
      }
    }
    int v2 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      sub_100F8A258();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"maxHarvestAge is too high\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419560, &stru_102307390);
  }
}

void sub_101A98EC0()
{
}

void sub_101A98EEC()
{
  if (qword_1024193B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"attempting to access moving ap info when never set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023077D0);
      }
    }
    int v1 = qword_1024193B8;
    if (os_signpost_enabled((os_log_t)qword_1024193B8))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "attempting to access moving ap info when never set", "{\"msg%{public}.0s\":\"attempting to access moving ap info when never set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023077D0);
      }
    }
    int v2 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"attempting to access moving ap info when never set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024193B0, &stru_1023077D0);
  }
}

void sub_101A990BC()
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102307DD0);
  }
  int v0 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"trying to make neighbor out of non-neighbor cell\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307DD0);
    }
  }
  if (os_signpost_enabled((os_log_t)qword_102419568))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v1, v2, v3, "trying to make neighbor out of non-neighbor cell", "{\"msg%{public}.0s\":\"trying to make neighbor out of non-neighbor cell\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307DD0);
    }
  }
  int v4 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"trying to make neighbor out of non-neighbor cell\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }
}

#error "101A992F8: call analysis failed (funcsize=81)"

void sub_101A993F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v25;
  a24 = v26;
  sub_10027E49C();
  if (!v27) {
    dispatch_once(&qword_102419450, &stru_102308378);
  }
  if (sub_1001E9AC4())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v28, v29, "{\"msg%{public}.0s\":\"Create service - No error code but response descriptor not available \", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v24 + 1104) != -1) {
      dispatch_once(&qword_102419450, &stru_102308378);
    }
  }
  if (sub_100219DB4())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v30, v31, v32, "Create service - No error code but response descriptor not available ", "{\"msg%{public}.0s\":\"Create service - No error code but response descriptor not available \", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v24 + 1104) != -1) {
      dispatch_once(&qword_102419450, &stru_102308378);
    }
  }
  if (sub_1001F72B0())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"Create service - No error code but response descriptor not available \", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100219E80();
}

#error "101A995C8: call analysis failed (funcsize=72)"

void sub_101A996BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v25;
  a24 = v26;
  sub_10027E49C();
  if (!v27) {
    dispatch_once(&qword_102419450, &stru_102308378);
  }
  if (sub_1001E9AC4())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v28, v29, "{\"msg%{public}.0s\":\"Delete service - No error code but response descriptor not available \", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v24 + 1104) != -1) {
      dispatch_once(&qword_102419450, &stru_102308378);
    }
  }
  if (sub_100219DB4())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v30, v31, v32, "Delete service - No error code but response descriptor not available ", "{\"msg%{public}.0s\":\"Delete service - No error code but response descriptor not available \", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v24 + 1104) != -1) {
      dispatch_once(&qword_102419450, &stru_102308378);
    }
  }
  if (sub_1001F72B0())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"Delete service - No error code but response descriptor not available \", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100219E80();
}

#error "101A9988C: call analysis failed (funcsize=72)"

#error "101A999F8: call analysis failed (funcsize=72)"

#error "101A99B64: call analysis failed (funcsize=72)"

#error "101A99CD0: call analysis failed (funcsize=72)"

#error "101A99E3C: call analysis failed (funcsize=72)"

#error "101A99FA8: call analysis failed (funcsize=72)"

#error "101A9A114: call analysis failed (funcsize=72)"

#error "101A9A280: call analysis failed (funcsize=72)"

#error "101A9A3EC: call analysis failed (funcsize=71)"

#error "101A9A550: call analysis failed (funcsize=71)"

#error "101A9A6B4: call analysis failed (funcsize=71)"

#error "101A9A818: call analysis failed (funcsize=71)"

#error "101A9A97C: call analysis failed (funcsize=71)"

#error "101A9AAE0: call analysis failed (funcsize=71)"

#error "101A9AC44: call analysis failed (funcsize=71)"

void sub_101A9AD30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v25;
  a24 = v26;
  sub_10027E49C();
  if (!v27) {
    dispatch_once(&qword_102419450, &stru_102308378);
  }
  if (sub_1001E9AC4())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v28, v29, "{\"msg%{public}.0s\":\"request removing labels without request identifier\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v24 + 1104) != -1) {
      dispatch_once(&qword_102419450, &stru_102308378);
    }
  }
  if (sub_100219DB4())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v30, v31, v32, "request removing labels without request identifier", "{\"msg%{public}.0s\":\"request removing labels without request identifier\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v24 + 1104) != -1) {
      dispatch_once(&qword_102419450, &stru_102308378);
    }
  }
  if (sub_1001F72B0())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"request removing labels without request identifier\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100219E80();
}

#error "101A9AF00: call analysis failed (funcsize=72)"

#error "101A9B06C: call analysis failed (funcsize=72)"

#error "101A9B1D8: call analysis failed (funcsize=72)"

#error "101A9B344: call analysis failed (funcsize=72)"

#error "101A9B4B0: call analysis failed (funcsize=72)"

void sub_101A9B5A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v25;
  a24 = v26;
  sub_10027E49C();
  if (!v27) {
    dispatch_once(&qword_102419450, &stru_102308378);
  }
  if (sub_1001E9AC4())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v28, v29, "{\"msg%{public}.0s\":\"request stop updateing MicroLocation without request identifier\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v24 + 1104) != -1) {
      dispatch_once(&qword_102419450, &stru_102308378);
    }
  }
  if (sub_100219DB4())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v30, v31, v32, "request stop updateing MicroLocation without request identifier", "{\"msg%{public}.0s\":\"request stop updateing MicroLocation without request identifier\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v24 + 1104) != -1) {
      dispatch_once(&qword_102419450, &stru_102308378);
    }
  }
  if (sub_1001F72B0())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"request stop updateing MicroLocation without request identifier\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100219E80();
}

#error "101A9B774: call analysis failed (funcsize=71)"

#error "101A9B8D8: call analysis failed (funcsize=71)"

#error "101A9BA3C: call analysis failed (funcsize=71)"

#error "101A9BBA0: call analysis failed (funcsize=72)"

#error "101A9BD0C: call analysis failed (funcsize=72)"

#error "101A9BE78: call analysis failed (funcsize=72)"

uint64_t sub_101A9BF6C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result) {
    sub_100FEA2A8();
  }
  return result;
}

void sub_101A9BF7C()
{
}

void sub_101A9BFA8()
{
}

void sub_101A9BFD4()
{
}

void sub_101A9C000()
{
}

void sub_101A9C02C()
{
}

void sub_101A9C058()
{
}

void sub_101A9C084()
{
}

void sub_101A9C0B0()
{
}

void sub_101A9C0DC()
{
}

void sub_101A9C108()
{
}

void sub_101A9C134()
{
}

void sub_101A9C160()
{
}

void sub_101A9C18C()
{
}

void sub_101A9C1B8()
{
}

void sub_101A9C1E4()
{
}

void sub_101A9C210()
{
}

void sub_101A9C23C()
{
}

void sub_101A9C268()
{
}

void sub_101A9C294()
{
  __assert_rtn("-[ALSWirelessAP writeTo:]", "ALSWirelessAP.m", 154, "nil != self->_macID");
}

#error "101A9C33C: call analysis failed (funcsize=73)"

#error "101A9C4AC: call analysis failed (funcsize=73)"

#error "101A9C61C: call analysis failed (funcsize=72)"

#error "101A9C784: call analysis failed (funcsize=73)"

#error "101A9C904: call analysis failed (funcsize=81)"

void sub_101A9CA04(uint64_t a1, uint64_t a2)
{
  sub_100FFB280(1.7165e-36, a1, a2);
  sub_100FFB294(v2, v3, v4);
  *(void *)(v5 + 30) = "assert";
  *(_WORD *)(v5 + 38) = 2081;
  *(void *)(v5 + 40) = "ledgerName";
  _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#monitor missing ledger name\", \"LedgerName\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7, 0x30u);
}

void sub_101A9CA74(uint64_t a1, uint64_t a2)
{
  sub_100FFB280(1.7165e-36, a1, a2);
  sub_100FFB294(v2, v3, v4);
  *(void *)(v5 + 30) = "assert";
  *(_WORD *)(v5 + 38) = 2081;
  *(void *)(v5 + 40) = "clientStorageToken";
  _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#monitor client doesn't have the storage token\", \"clientKey\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7, 0x30u);
}

#error "101A9CB64: call analysis failed (funcsize=73)"

#error "101A9CCD0: call analysis failed (funcsize=74)"

#error "101A9CE44: call analysis failed (funcsize=74)"

#error "101A9CFB8: call analysis failed (funcsize=74)"

#error "101A9D12C: call analysis failed (funcsize=73)"

void sub_101A9D218(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*(void **)(a1 + 184));
  }
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*(void **)(a1 + 160));
  }
  *(void *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
}

uint64_t sub_101A9D284(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void sub_101A9D2A8()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10230C638);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10230C638);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 20;
    uint64_t v19 = "-[CLAutopauseProviderAdapter beginService]";
    uint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Autopause/CLAutopauseProvider.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_10230C638);
  }
}

void sub_101A9D43C()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10230C760);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10230C760);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_10230C760);
  }
}

#error "101A9D64C: call analysis failed (funcsize=81)"

#error "101A9D7C4: call analysis failed (funcsize=72)"

uint64_t sub_101A9D8B8()
{
  sub_1001F4274();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

#error "101A9D964: call analysis failed (funcsize=72)"

#error "101A9DAD0: call analysis failed (funcsize=72)"

#error "101A9DC3C: call analysis failed (funcsize=72)"

#error "101A9DDA8: call analysis failed (funcsize=72)"

#error "101A9DF14: call analysis failed (funcsize=72)"

#error "101A9E080: call analysis failed (funcsize=71)"

uint64_t sub_101A9E16C(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_1001F4274();
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  return result;
}

#error "101A9E228: call analysis failed (funcsize=72)"

#error "101A9E394: call analysis failed (funcsize=72)"

#error "101A9E500: call analysis failed (funcsize=71)"

#error "101A9E664: call analysis failed (funcsize=72)"

void sub_101A9E758(char a1)
{
  if ((a1 & 1) == 0) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  int v1 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
  }
  int v2 = qword_102419388;
  if (os_signpost_enabled((os_log_t)qword_102419388))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
  }
  uint64_t v3 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
  }
}

#error "101A9E990: call analysis failed (funcsize=72)"

#error "101A9EAFC: call analysis failed (funcsize=72)"

void sub_101A9EBF0()
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230D398);
  }
  uint64_t v0 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"No root directory set for tile type\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230D398);
    }
  }
  int v1 = qword_1024193A8;
  if (os_signpost_enabled((os_log_t)qword_1024193A8))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "No root directory set for tile type", "{\"msg%{public}.0s\":\"No root directory set for tile type\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230D398);
    }
  }
  int v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"No root directory set for tile type\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_101A9EDB8()
{
}

void sub_101A9EDC4()
{
}

void sub_101A9EDD0()
{
}

void sub_101A9EDDC()
{
}

void sub_101A9EDE8()
{
}

void sub_101A9EDF4()
{
}

void sub_101A9EE00()
{
}

void sub_101A9EE0C()
{
}

void sub_101A9EE18()
{
}

void sub_101A9EE24()
{
}

void sub_101A9EE30()
{
}

void sub_101A9EE3C()
{
}

void sub_101A9EE48()
{
}

void sub_101A9EE54()
{
}

void sub_101A9EE60()
{
}

void sub_101A9EE6C()
{
}

void sub_101A9EE78()
{
}

void sub_101A9EE84()
{
}

void sub_101A9EE90()
{
}

void sub_101A9EE9C()
{
}

void sub_101A9EEA8()
{
}

void sub_101A9EEB4()
{
}

void sub_101A9EEC0()
{
}

void sub_101A9EECC()
{
}

void sub_101A9EED8()
{
}

void sub_101A9EEE4()
{
}

void sub_101A9EEF0()
{
}

void sub_101A9EEFC()
{
}

void sub_101A9EF08()
{
}

void sub_101A9EF14()
{
}

void sub_101A9EF20()
{
}

void sub_101A9EF2C()
{
}

void sub_101A9EF38()
{
}

void sub_101A9EF44()
{
}

void sub_101A9EF50()
{
}

void sub_101A9EF5C()
{
}

void sub_101A9EF68()
{
}

void sub_101A9EF74()
{
}

void sub_101A9EF80()
{
}

void sub_101A9EF8C()
{
}

void sub_101A9EF98()
{
}

void sub_101A9EFA4()
{
}

void sub_101A9EFB0()
{
}

void sub_101A9EFBC()
{
}

void sub_101A9EFC8()
{
}

void sub_101A9EFD4()
{
}

void sub_101A9EFE0()
{
}

void sub_101A9EFEC()
{
}

void sub_101A9EFF8()
{
}

void sub_101A9F004()
{
}

void sub_101A9F010()
{
}

void sub_101A9F01C()
{
}

void sub_101A9F028()
{
}

void sub_101A9F034()
{
}

void sub_101A9F040()
{
}

void sub_101A9F04C()
{
}

void sub_101A9F058()
{
}

void sub_101A9F064()
{
}

void sub_101A9F070()
{
}

void sub_101A9F07C()
{
}

void sub_101A9F088()
{
}

void sub_101A9F094()
{
}

void sub_101A9F0A0()
{
}

void sub_101A9F0AC()
{
}

void sub_101A9F0B8()
{
}

void sub_101A9F0C4()
{
}

void sub_101A9F0D0()
{
}

void sub_101A9F0DC()
{
}

void sub_101A9F0E8()
{
}

void sub_101A9F0F4()
{
}

void sub_101A9F100()
{
}

void sub_101A9F10C()
{
}

void sub_101A9F118()
{
}

void sub_101A9F124()
{
}

void sub_101A9F130()
{
}

void sub_101A9F13C()
{
}

void sub_101A9F148()
{
}

void sub_101A9F154()
{
}

void sub_101A9F160()
{
}

void sub_101A9F16C()
{
}

void sub_101A9F178()
{
}

void sub_101A9F184()
{
}

void sub_101A9F190()
{
}

void sub_101A9F19C()
{
}

void sub_101A9F1A8()
{
}

void sub_101A9F1B4()
{
}

void sub_101A9F1C0()
{
}

void sub_101A9F1CC()
{
}

void sub_101A9F1D8()
{
}

void sub_101A9F1E4()
{
}

void sub_101A9F1F0()
{
}

void sub_101A9F1FC()
{
}

void sub_101A9F208()
{
}

void sub_101A9F214()
{
}

void sub_101A9F220()
{
}

void sub_101A9F22C()
{
}

void sub_101A9F238()
{
}

void sub_101A9F244()
{
}

void sub_101A9F250()
{
}

void sub_101A9F25C()
{
}

void sub_101A9F268()
{
}

void sub_101A9F274()
{
}

void sub_101A9F280()
{
}

void sub_101A9F28C()
{
}

void sub_101A9F298()
{
}

void sub_101A9F2A4()
{
}

void sub_101A9F2B0()
{
}

void sub_101A9F2BC()
{
}

void sub_101A9F2C8()
{
}

void sub_101A9F2D4()
{
}

void sub_101A9F2E0()
{
}

#error "101A9F378: call analysis failed (funcsize=81)"

#error "101A9F4F4: call analysis failed (funcsize=73)"

#error "101A9F664: call analysis failed (funcsize=73)"

#error "101A9F7D4: call analysis failed (funcsize=73)"

#error "101A9F944: call analysis failed (funcsize=73)"

#error "101A9FAB4: call analysis failed (funcsize=73)"

void sub_101A9FBA8()
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10230D960);
  }
  uint64_t v0 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230D960);
    }
  }
  int v1 = qword_102419638;
  if (os_signpost_enabled((os_log_t)qword_102419638))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230D960);
    }
  }
  int v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_101A9FD70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10108AC5C(1.7165e-36, a1, a2, a3);
  uint64_t v6 = sub_10108AC3C(v3, v4, v5);
  sub_10108AC70(v6, v7, v8);
  *(void *)(v9 + 50) = "(!keyPath || (!_os_feature_enabled_impl(\"CoreLocation\", \"cl_pula\") || keyPath.userName))";
  sub_10108AC80((void *)&_mh_execute_header, "{\"msg%{public}.0s\":\"#AuthorizationDatabase requires userName be present in the clientKeyPath with cl_pula enabled.\", \"userName\":%{public, location:escape_only}@, \"ClientKeyPath\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11);
}

void sub_101A9FDD0(void *a1)
{
  if (qword_102419530 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v2 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      [a1 userName];
      sub_10108ABFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AuthorizationDatabase requires userName be present in the clientKeyPath with cl_pula enabled.\", \"userName\":%{public, location:escape_only}@, \"ClientKeyPath\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10230DA40);
      }
    }
    uint64_t v3 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      [a1 userName];
      sub_10108ABFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#AuthorizationDatabase requires userName be present in the clientKeyPath with cl_pula enabled.", "{\"msg%{public}.0s\":\"#AuthorizationDatabase requires userName be present in the clientKeyPath with cl_pula enabled.\", \"userName\":%{public, location:escape_only}@, \"ClientKeyPath\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10230DA40);
      }
    }
    uint64_t v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      [a1 userName];
      sub_10108ABFC();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#AuthorizationDatabase requires userName be present in the clientKeyPath with cl_pula enabled.\", \"userName\":%{public, location:escape_only}@, \"ClientKeyPath\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419530, &stru_10230DA40);
  }
}

void sub_101A9FFBC()
{
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10230DD18);
      }
    }
    int v1 = qword_102419638;
    if (os_signpost_enabled((os_log_t)qword_102419638))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10230DD18);
      }
    }
    int v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419630, &stru_10230DD18);
  }
}

#error "101AA0210: call analysis failed (funcsize=73)"

#error "101AA0380: call analysis failed (funcsize=73)"

void sub_101AA0474()
{
  if (qword_102419430 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
    }
    int v1 = qword_102419438;
    if (os_signpost_enabled((os_log_t)qword_102419438))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed,fGEOMapFeatureAccess==nil", "{\"msg%{public}.0s\":\"Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
    }
    int v2 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419430, &stru_10230EA20);
  }
}

void sub_101AA0644(void **__p)
{
  do
  {
    int v2 = (void **)*__p;
    uint64_t v3 = (std::__shared_weak_count *)__p[3];
    if (v3) {
      sub_1000DB0A0(v3);
    }
    operator delete(__p);
    __p = v2;
  }
  while (v2);
}

void sub_101AA0684()
{
  if (qword_102419060 != -1) {
    dispatch_once(&qword_102419060, &stru_10230F1E8);
  }
  if (sub_1010C11B0())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Service required to send command\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    if (qword_102419060 != -1) {
      dispatch_once(&qword_102419060, &stru_10230F1E8);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v0 + 104)))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v3, v4, v5, "Service required to send command", "{\"msg%{public}.0s\":\"Service required to send command\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    if (qword_102419060 != -1) {
      dispatch_once(&qword_102419060, &stru_10230F1E8);
    }
  }
  if (sub_1010C11D0())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v6, v7, "{\"msg%{public}.0s\":\"Service required to send command\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
  }
}

void sub_101AA0800()
{
  if (qword_102419060 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1010C11B0())
    {
      sub_1001DB29C();
      sub_1001DE4DC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
      if (qword_102419060 != -1) {
        dispatch_once(&qword_102419060, &stru_10230F1E8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 104)))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v3, v4, v5, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
      if (qword_102419060 != -1) {
        dispatch_once(&qword_102419060, &stru_10230F1E8);
      }
    }
    if (sub_1010C11D0())
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v6, v7, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419060, &stru_10230F1E8);
  }
}

void sub_101AA0984()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10230F5E0);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10230F5E0);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 23;
    uint64_t v19 = "-[CLPressureBiasAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLPressureBias.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_10230F5E0);
  }
}

void sub_101AA0B18()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10230F750);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10230F750);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_10230F750);
  }
}

#error "101AA0D20: call analysis failed (funcsize=78)"

#error "101AA0E9C: call analysis failed (funcsize=75)"

#error "101AA1018: call analysis failed (funcsize=78)"

#error "101AA119C: call analysis failed (funcsize=77)"

uint64_t sub_101AA1294()
{
  sub_1001F4274();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_101AA12C8()
{
  sub_1001F4274();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_101AA12FC()
{
  sub_1001F4274();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

#error "101AA13B4: call analysis failed (funcsize=77)"

void sub_101AA14AC()
{
}

void sub_101AA14D8()
{
  __assert_rtn("onMotionStateUpdate", "CLMotionCuesVehicleConfidenceBooster.mm", 129, "notification == CLMotionState_Type::kNotificationContext");
}

void sub_101AA1504()
{
  __assert_rtn("onDisplayStateUpdate", "CLMotionCuesVehicleConfidenceBooster.mm", 135, "notification == CLDaemonStatus_Type::kNotificationDisplay");
}

#error "101AA15AC: call analysis failed (funcsize=73)"

#error "101AA171C: call analysis failed (funcsize=73)"

#error "101AA188C: call analysis failed (funcsize=73)"

#error "101AA19FC: call analysis failed (funcsize=73)"

#error "101AA1B6C: call analysis failed (funcsize=73)"

void sub_101AA1C60()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102311618);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102311618);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 13;
    uint64_t v19 = "-[CLProxPDPAndALSPhoneNotifierAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/ProxPDPAndALSPhone/CLProxPDPAndALSPhoneNotifier.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_102311618);
  }
}

void sub_101AA1DF4()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102311788);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102311788);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_102311788);
  }
}

void sub_101AA1F78()
{
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1023118C0);
  }
  uint64_t v0 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Got a different mac from database query!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1023118C0);
    }
  }
  int v1 = off_1024195E8;
  if (os_signpost_enabled((os_log_t)off_1024195E8))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Got a different mac from database query!", "{\"msg%{public}.0s\":\"Got a different mac from database query!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1023118C0);
    }
  }
  int v2 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Got a different mac from database query!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_101AA2140()
{
  if (qword_1024192A0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Iterator indices are outside of the buffer range.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_1024192A0 != -1) {
        dispatch_once(&qword_1024192A0, &stru_1023118E0);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_1024192A8))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Iterator indices are outside of the buffer range.", "{\"msg%{public}.0s\":\"Iterator indices are outside of the buffer range.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_1024192A0 != -1) {
        dispatch_once(&qword_1024192A0, &stru_1023118E0);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Iterator indices are outside of the buffer range.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 349;
    uint64_t v19 = "computeScalarDistanceFromFixedQueue";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Workout/Prediction/IndoorOutdoor/CLIndoorOutdoorGPSModel.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024192A0, &stru_1023118E0);
  }
}

void sub_101AA22D4()
{
  if (qword_102418FD0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"We should have picked at least one of the windows.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102311900);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102418FD8))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "We should have picked at least one of the windows.", "{\"msg%{public}.0s\":\"We should have picked at least one of the windows.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102311900);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"We should have picked at least one of the windows.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 511;
    uint64_t v19 = "calculateDirectionResiduals";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Workout/Prediction/IndoorOutdoor/CLIndoorOutdoorGPSModel.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418FD0, &stru_102311900);
  }
}

void sub_101AA2468()
{
  if (qword_102419070 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = qword_102419078;
    if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLMagicMountInterface] Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419070 != -1) {
        dispatch_once(&qword_102419070, &stru_102311DE8);
      }
    }
    int v1 = qword_102419078;
    if (os_signpost_enabled((os_log_t)qword_102419078))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLMagicMountInterface] Service required", "{\"msg%{public}.0s\":\"[CLMagicMountInterface] Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419070 != -1) {
        dispatch_once(&qword_102419070, &stru_102311DE8);
      }
    }
    int v2 = qword_102419078;
    if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLMagicMountInterface] Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419070, &stru_102311DE8);
  }
}

#error "101AA26B4: call analysis failed (funcsize=73)"

#error "101AA2824: call analysis failed (funcsize=73)"

#error "101AA2994: call analysis failed (funcsize=73)"

#error "101AA2B04: call analysis failed (funcsize=73)"

#error "101AA2C74: call analysis failed (funcsize=73)"

uint64_t sub_101AA2D68(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void sub_101AA2DA0()
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102313110);
  }
  int v0 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102313110);
    }
  }
  int v1 = qword_102419638;
  if (os_signpost_enabled((os_log_t)qword_102419638))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102313110);
    }
  }
  int v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

#error "101AA2FF4: call analysis failed (funcsize=81)"

#error "101AA3170: call analysis failed (funcsize=73)"

#error "101AA32E0: call analysis failed (funcsize=73)"

#error "101AA3450: call analysis failed (funcsize=73)"

#error "101AA35C0: call analysis failed (funcsize=73)"

#error "101AA3730: call analysis failed (funcsize=73)"

void sub_101AA3824()
{
  if (qword_102419560 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10049C4A4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"#proactive Could not release power assertion.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102313648);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1384)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "#proactive Could not release power assertion.", "{\"msg%{public}.0s\":\"#proactive Could not release power assertion.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102313648);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1384), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"#proactive Could not release power assertion.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 232;
    uint64_t v20 = "proactiveHarvesting";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Policies/Proactive/CLPolicyProactive.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419560, &stru_102313648);
  }
}

void sub_101AA39B0()
{
  if (qword_102419560 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10049C4A4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"#proactive Could not release power assertion.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102313648);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1384)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "#proactive Could not release power assertion.", "{\"msg%{public}.0s\":\"#proactive Could not release power assertion.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102313648);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1384), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"#proactive Could not release power assertion.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 131;
    uint64_t v20 = "extendProactiveAttempt";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Policies/Proactive/CLPolicyProactive.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419560, &stru_102313648);
  }
}

void sub_101AA3B3C()
{
  if (qword_102418FD0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1003BE8CC())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"[FastPathDevice] initializeFastPath should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023137E8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 4056)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "[FastPathDevice] initializeFastPath should be running on motion thread", "{\"msg%{public}.0s\":\"[FastPathDevice] initializeFastPath should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023137E8);
      }
    }
    if (sub_1003BE8EC())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"[FastPathDevice] initializeFastPath should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 24;
    uint64_t v20 = "initializeFastPath";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/IO/CLIoHidFastPathDevice.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418FD0, &stru_1023137E8);
  }
}

uint64_t sub_101AA3CB4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

uint64_t sub_101AA3CEC(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_101AA3D34()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023141F8);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023141F8);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 32;
    uint64_t v19 = "-[CLRayTracingTileManagerAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/RayTracingTileManager/CLRayTracingTileManager.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1023141F8);
  }
}

void sub_101AA3EC8()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102314A98);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102314A98);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 240;
    uint64_t v19 = "-[CLVehicleConnectionNotifierAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Vehicle/CLVehicleConnectionNotifier.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_102314A98);
  }
}

void sub_101AA405C()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102314C38);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102314C38);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_102314C38);
  }
}

void sub_101AA41E0()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102314E68);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102314E68);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 28;
    uint64_t v19 = "-[CLMotionSyncStoreAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/MotionSync/CLMotionSyncStore.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_102314E68);
  }
}

void sub_101AA4374(void *a1, void *a2)
{
  id v3 = objc_begin_catch(a1);
  *a2 = v3;
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_102314EA8);
  }
  int v4 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_FAULT))
  {
    int v5 = 138543362;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unable to decode pedometer data: %{public}@", (uint8_t *)&v5, 0xCu);
  }
}

void sub_101AA4448()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102315130);
      }
    }
    int v1 = qword_102419588;
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102315130);
      }
    }
    int v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_102315130);
  }
}

void sub_101AA4618()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102315580);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102315580);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 24;
    uint64_t v19 = "-[CLFitnessMachineNotifierAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/FitnessMachine/CLFitnessMachineNotifier.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_102315580);
  }
}

void sub_101AA47AC()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1023156D0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1023156D0);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_1023156D0);
  }
}

void sub_101AA4930()
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102315808);
  }
  uint64_t v0 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"trying to make neighbor out of non-neighbor cell\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102315808);
    }
  }
  if (os_signpost_enabled((os_log_t)qword_102419568))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v1, v2, v3, "trying to make neighbor out of non-neighbor cell", "{\"msg%{public}.0s\":\"trying to make neighbor out of non-neighbor cell\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102315808);
    }
  }
  int v4 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"trying to make neighbor out of non-neighbor cell\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }
}

void sub_101AA4AE0()
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_102315A68);
  }
  if (sub_1009060B0())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"#luHistorical routine monitor should not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102315A68);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v0 + 1320)))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v3, v4, v5, "#luHistorical routine monitor should not be empty", "{\"msg%{public}.0s\":\"#luHistorical routine monitor should not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102315A68);
    }
  }
  if (sub_100C08ADC())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v6, v7, "{\"msg%{public}.0s\":\"#luHistorical routine monitor should not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
  }
}

void sub_101AA4C5C()
{
  if (qword_102419520 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1009060B0())
    {
      sub_1001DB29C();
      sub_1001DE4DC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"#luHistorical entitlementDict for wilderness entitlement should not be nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102315A68);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1320)))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v3, v4, v5, "#luHistorical entitlementDict for wilderness entitlement should not be nil", "{\"msg%{public}.0s\":\"#luHistorical entitlementDict for wilderness entitlement should not be nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102315A68);
      }
    }
    if (sub_100C08ADC())
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v6, v7, "{\"msg%{public}.0s\":\"#luHistorical entitlementDict for wilderness entitlement should not be nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419520, &stru_102315A68);
  }
}

void sub_101AA4DE0()
{
  if (qword_102419520 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1009060B0())
    {
      sub_1001DB29C();
      sub_1001DE4DC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"#luHistorical entitlementDict for transcriptSession entitlement should not be nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102315A68);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1320)))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v3, v4, v5, "#luHistorical entitlementDict for transcriptSession entitlement should not be nil", "{\"msg%{public}.0s\":\"#luHistorical entitlementDict for transcriptSession entitlement should not be nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102315A68);
      }
    }
    if (sub_100C08ADC())
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v6, v7, "{\"msg%{public}.0s\":\"#luHistorical entitlementDict for transcriptSession entitlement should not be nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419520, &stru_102315A68);
  }
}

#error "101AA4FF0: call analysis failed (funcsize=81)"

#error "101AA516C: call analysis failed (funcsize=73)"

#error "101AA52DC: call analysis failed (funcsize=73)"

#error "101AA544C: call analysis failed (funcsize=73)"

#error "101AA55BC: call analysis failed (funcsize=73)"

#error "101AA572C: call analysis failed (funcsize=73)"

uint64_t sub_101AA5820(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void sub_101AA5844()
{
  if (qword_102419520 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#dic fConnection should not be nil when checking entitlements\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102317820);
      }
    }
    uint64_t v1 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#dic fConnection should not be nil when checking entitlements", "{\"msg%{public}.0s\":\"#dic fConnection should not be nil when checking entitlements\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102317820);
      }
    }
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#dic fConnection should not be nil when checking entitlements\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419520, &stru_102317820);
  }
}

void sub_101AA5A14()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102317C50);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102317C50);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 35;
    uint64_t v19 = "-[CLPencilStateAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/Notifiers/CLPencilState.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_102317C50);
  }
}

void sub_101AA5BA8()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102317DE0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102317DE0);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_102317DE0);
  }
}

void sub_101AA5D2C()
{
  if (qword_102419430 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CLMMLE,LaneEstimator,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317FF0);
      }
    }
    int v1 = qword_102419438;
    if (os_signpost_enabled((os_log_t)qword_102419438))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMMLE,LaneEstimator,Assertion failed", "{\"msg%{public}.0s\":\"CLMMLE,LaneEstimator,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317FF0);
      }
    }
    int v2 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLMMLE,LaneEstimator,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419430, &stru_102317FF0);
  }
}

#error "101AA5F78: call analysis failed (funcsize=69)"

#error "101AA60CC: call analysis failed (funcsize=69)"

#error "101AA6220: call analysis failed (funcsize=69)"

#error "101AA6374: call analysis failed (funcsize=69)"

#error "101AA64C8: call analysis failed (funcsize=69)"

#error "101AA661C: call analysis failed (funcsize=69)"

#error "101AA6770: call analysis failed (funcsize=69)"

void sub_101AA6850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v25;
  a24 = v26;
  sub_1011F8234();
  if (!v27) {
    dispatch_once(&qword_1024193B0, &stru_102318040);
  }
  if (sub_1008B4A98())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v28, v29, "{\"msg%{public}.0s\":\"mismatch of mac addresses\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v24 + 944) != -1) {
      dispatch_once(&qword_1024193B0, &stru_102318040);
    }
  }
  if (sub_100F7EFF8())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v30, v31, v32, "mismatch of mac addresses", "{\"msg%{public}.0s\":\"mismatch of mac addresses\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v24 + 944) != -1) {
      dispatch_once(&qword_1024193B0, &stru_102318040);
    }
  }
  if (sub_100F7EF8C())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"mismatch of mac addresses\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100219E80();
}

void sub_101AA69A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v25;
  a24 = v26;
  sub_1011F8234();
  if (!v27) {
    dispatch_once(&qword_1024193B0, &stru_102318040);
  }
  if (sub_1008B4A98())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v28, v29, "{\"msg%{public}.0s\":\"size of batched locations and scan buffer groups must be equal\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v24 + 944) != -1) {
      dispatch_once(&qword_1024193B0, &stru_102318040);
    }
  }
  if (sub_100F7EFF8())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v30, v31, v32, "size of batched locations and scan buffer groups must be equal", "{\"msg%{public}.0s\":\"size of batched locations and scan buffer groups must be equal\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v24 + 944) != -1) {
      dispatch_once(&qword_1024193B0, &stru_102318040);
    }
  }
  if (sub_100F7EF8C())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"size of batched locations and scan buffer groups must be equal\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100219E80();
}

#error "101AA6B78: call analysis failed (funcsize=71)"

void sub_101AA6C64()
{
  if (qword_102418FD0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1003BE8CC())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Need to override getTableName in order to use default definition of aggregateRecords\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023180C0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 4056)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Need to override getTableName in order to use default definition of aggregateRecords", "{\"msg%{public}.0s\":\"Need to override getTableName in order to use default definition of aggregateRecords\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023180C0);
      }
    }
    if (sub_1003BE8EC())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Need to override getTableName in order to use default definition of aggregateRecords\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 191;
    uint64_t v20 = "aggregateRecords";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Activity/CLActivityRecorderBaseDb.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102418FD0, &stru_1023180C0);
  }
}

void sub_101AA6DE4()
{
  if (qword_102418FD0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1003BE8CC())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Need to override getTableName in order to use default definition of getNumberOfRecords\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023180C0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 4056)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Need to override getTableName in order to use default definition of getNumberOfRecords", "{\"msg%{public}.0s\":\"Need to override getTableName in order to use default definition of getNumberOfRecords\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023180C0);
      }
    }
    if (sub_1003BE8EC())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Need to override getTableName in order to use default definition of getNumberOfRecords\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 217;
    uint64_t v20 = "getNumberOfRecords";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Activity/CLActivityRecorderBaseDb.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102418FD0, &stru_1023180C0);
  }
}

void sub_101AA6F64()
{
  if (qword_102418FD0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1003BE8CC())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Need to override getTableName in order to use default definition of deleteAllRecordsUL\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023180C0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 4056)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Need to override getTableName in order to use default definition of deleteAllRecordsUL", "{\"msg%{public}.0s\":\"Need to override getTableName in order to use default definition of deleteAllRecordsUL\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023180C0);
      }
    }
    if (sub_1003BE8EC())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Need to override getTableName in order to use default definition of deleteAllRecordsUL\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 239;
    uint64_t v20 = "deleteAllRecordsUL";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Activity/CLActivityRecorderBaseDb.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102418FD0, &stru_1023180C0);
  }
}

void sub_101AA70E4(void **a1, void **a2, uint64_t a3)
{
  int v5 = *a1;
  if (v5)
  {
    *(void *)(a3 + 168) = v5;
    operator delete(v5);
  }
  int v6 = *a2;
  if (*a2)
  {
    *(void *)(a3 + 136) = v6;
    operator delete(v6);
  }
}

#error "101AA71CC: call analysis failed (funcsize=81)"

#error "101AA7348: call analysis failed (funcsize=72)"

#error "101AA74B0: call analysis failed (funcsize=73)"

#error "101AA7620: call analysis failed (funcsize=73)"

#error "101AA7790: call analysis failed (funcsize=73)"

void sub_101AA7884()
{
  if (qword_102419530 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      sub_100B8E354();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"_CFBundleCreateUnique returned a nil result\", \"url\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102318608);
      }
    }
    int v1 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      sub_100B8E354();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "_CFBundleCreateUnique returned a nil result", "{\"msg%{public}.0s\":\"_CFBundleCreateUnique returned a nil result\", \"url\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102318608);
      }
    }
    int v2 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      sub_100B8E354();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"_CFBundleCreateUnique returned a nil result\", \"url\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419530, &stru_102318608);
  }
}

#error "101AA7AE4: call analysis failed (funcsize=81)"

#error "101AA7C60: call analysis failed (funcsize=73)"

#error "101AA7DD0: call analysis failed (funcsize=73)"

#error "101AA7F40: call analysis failed (funcsize=73)"

#error "101AA80B0: call analysis failed (funcsize=73)"

#error "101AA8220: call analysis failed (funcsize=73)"

void sub_101AA8314()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102318E18);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102318E18);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 33;
    uint64_t v19 = "-[CLMotionStateObserverAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/MotionState/CLMotionStateObserver.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_102318E18);
  }
}

void sub_101AA84A8()
{
  if (qword_1024193B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"This callback should only be invoked once\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318F80);
      }
    }
    int v1 = qword_1024193B8;
    if (os_signpost_enabled((os_log_t)qword_1024193B8))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "This callback should only be invoked once", "{\"msg%{public}.0s\":\"This callback should only be invoked once\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318F80);
      }
    }
    int v2 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"This callback should only be invoked once\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1024193B0, &stru_102318F80);
  }
}

void sub_101AA8680(void *a1)
{
  uint64_t v2 = (uint64_t)&qword_102419000;
  if (qword_102419520 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v3 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      sub_10122E8B4();
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Can't swap status bar assertions when both sides have values\", \"newValue\":%{public}hhd, \"oldValue\":%{public}hhd, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (*(void *)(v2 + 1312) != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
    }
    int v4 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      sub_10122E8B4();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Can't swap status bar assertions when both sides have values", "{\"msg%{public}.0s\":\"Can't swap status bar assertions when both sides have values\", \"newValue\":%{public}hhd, \"oldValue\":%{public}hhd, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (*(void *)(v2 + 1312) != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
    }
    int v5 = qword_102419528;
    uint64_t v2 = 1;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      BOOL v6 = *a1 != 0;
      *(_DWORD *)uint8_t buf = 68290051;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      __int16 v11 = 1026;
      int v12 = 1;
      __int16 v13 = 1026;
      BOOL v14 = v6;
      __int16 v15 = 2082;
      int v16 = "assert";
      __int16 v17 = 2081;
      uint64_t v18 = "(!!value) != (!!fVisibilityAssertion)";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Can't swap status bar assertions when both sides have values\", \"newValue\":%{public}hhd, \"oldValue\":%{public}hhd, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419520, &stru_1023192B0);
  }
}

void sub_101AA88AC()
{
  if (qword_102419520 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"swapVisibilityAssertion should return nil, here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
    }
    int v1 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "swapVisibilityAssertion should return nil, here", "{\"msg%{public}.0s\":\"swapVisibilityAssertion should return nil, here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
    }
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"swapVisibilityAssertion should return nil, here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419520, &stru_1023192B0);
  }
}

#error "101AA8B08: call analysis failed (funcsize=81)"

#error "101AA8C80: call analysis failed (funcsize=71)"

#error "101AA8DF8: call analysis failed (funcsize=82)"

uint64_t sub_101AA8F00(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

#error "101AA8FC0: call analysis failed (funcsize=72)"

#error "101AA912C: call analysis failed (funcsize=72)"

void sub_101AA9220()
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023197E0);
  }
  if (sub_100436D88())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
  }
  if (sub_1004FF974())
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v0, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
  }
  if (sub_1004FF958())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
  }
}

#error "101AA943C: call analysis failed (funcsize=72)"

#error "101AA95A8: call analysis failed (funcsize=72)"

#error "101AA9714: call analysis failed (funcsize=72)"

#error "101AA9880: call analysis failed (funcsize=72)"

#error "101AA99EC: call analysis failed (funcsize=72)"

#error "101AA9B58: call analysis failed (funcsize=72)"

#error "101AA9CD0: call analysis failed (funcsize=80)"

void sub_101AA9DD8()
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231A310);
  }
  int v0 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
  {
    sub_10125CF5C();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Attempting to assert invalid tile type.\", \"tileType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x2Cu);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A310);
    }
  }
  int v1 = qword_1024193A8;
  if (os_signpost_enabled((os_log_t)qword_1024193A8))
  {
    sub_10125CF5C();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Attempting to assert invalid tile type.", "{\"msg%{public}.0s\":\"Attempting to assert invalid tile type.\", \"tileType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x2Cu);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A310);
    }
  }
  uint64_t v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    sub_10125CF5C();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Attempting to assert invalid tile type.\", \"tileType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x2Cu);
  }
}

void sub_101AA9FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_1001DB3B0();
  a27 = v29;
  a28 = v30;
  if ((v31 & 1) == 0) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_101260540())
    {
      sub_1001DB29C();
      sub_1001DE4DC((void *)&_mh_execute_header, v32, v33, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_10231A3C8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v28 + 136)))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v34, v35, v36, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_10231A3C8);
      }
    }
    if (sub_1002D0574())
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v37, v38, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419080, &stru_10231A3C8);
  }
}

void sub_101AAA118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_1001DB3B0();
  a27 = v29;
  a28 = v30;
  if ((v31 & 1) == 0) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_101260540())
    {
      sub_1001DB29C();
      sub_1001DE4DC((void *)&_mh_execute_header, v32, v33, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_10231A3C8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v28 + 136)))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v34, v35, v36, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_10231A3C8);
      }
    }
    if (sub_1002D0574())
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v37, v38, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419080, &stru_10231A3C8);
  }
}

void sub_101AAA290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_1001DB3B0();
  a27 = v28;
  a28 = v29;
  if (qword_102419080 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10126050C())
    {
      sub_1001DB29C();
      sub_1001DE4DC((void *)&_mh_execute_header, v30, v31, "{\"msg%{public}.0s\":\"9Axis should be running\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_10231A3C8);
      }
    }
    if (sub_101260560())
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v32, v33, v34, "9Axis should be running", "{\"msg%{public}.0s\":\"9Axis should be running\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_10231A3C8);
      }
    }
    if (sub_1002D0574())
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v35, v36, "{\"msg%{public}.0s\":\"9Axis should be running\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419080, &stru_10231A3C8);
  }
}

void sub_101AAA408()
{
  sub_10126052C();
  if (!v1) {
    dispatch_once(&qword_102419080, &stru_10231A3C8);
  }
  if (sub_10126050C())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Device motion service 3 is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(void *)(v0 + 128) != -1) {
      dispatch_once(&qword_102419080, &stru_10231A3C8);
    }
  }
  if (sub_101260560())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v4, v5, v6, "Device motion service 3 is not supported on this platform!", "{\"msg%{public}.0s\":\"Device motion service 3 is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(void *)(v0 + 128) != -1) {
      dispatch_once(&qword_102419080, &stru_10231A3C8);
    }
  }
  if (sub_1002D0574())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"Device motion service 3 is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
}

void sub_101AAA574()
{
  sub_10126052C();
  if (!v1) {
    dispatch_once(&qword_102419080, &stru_10231A3C8);
  }
  if (sub_10126050C())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Device motion service 6 is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(void *)(v0 + 128) != -1) {
      dispatch_once(&qword_102419080, &stru_10231A3C8);
    }
  }
  if (sub_101260560())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v4, v5, v6, "Device motion service 6 is not supported on this platform!", "{\"msg%{public}.0s\":\"Device motion service 6 is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(void *)(v0 + 128) != -1) {
      dispatch_once(&qword_102419080, &stru_10231A3C8);
    }
  }
  if (sub_1002D0574())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"Device motion service 6 is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
}

void sub_101AAA6E0()
{
  sub_10126052C();
  if (!v1) {
    dispatch_once(&qword_102419080, &stru_10231A3C8);
  }
  if (sub_10126050C())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Device motion service is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(void *)(v0 + 128) != -1) {
      dispatch_once(&qword_102419080, &stru_10231A3C8);
    }
  }
  if (sub_101260560())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v4, v5, v6, "Device motion service is not supported on this platform!", "{\"msg%{public}.0s\":\"Device motion service is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(void *)(v0 + 128) != -1) {
      dispatch_once(&qword_102419080, &stru_10231A3C8);
    }
  }
  if (sub_1002D0574())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"Device motion service is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
}

void sub_101AAA84C(void *a1)
{
  do
  {
    if (*((char *)a1 - 1) < 0) {
      operator delete((void *)*(a1 - 3));
    }
    a1 -= 3;
  }
  while (a1 != qword_102486928);
}

#error "101AAA914: call analysis failed (funcsize=78)"

void sub_101AAAA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v25;
  a24 = v26;
  sub_10058B084();
  if (!v27) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  if (sub_100436D88())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v28, v29, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v24 + 1584) != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
  }
  if (sub_1004FF974())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v30, v31, v32, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v24 + 1584) != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
  }
  if (sub_1004FF958())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100219E80();
}

#error "101AAABE0: call analysis failed (funcsize=73)"

uint64_t sub_101AAACD8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result)
  {
    sub_1001F4274();
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
  return result;
}

#error "101AAAD8C: call analysis failed (funcsize=73)"

#error "101AAAF08: call analysis failed (funcsize=79)"

void sub_101AAB00C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v25;
  a24 = v26;
  sub_10058B084();
  if (!v27) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  if (sub_100436D88())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v28, v29, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v24 + 1584) != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
  }
  if (sub_1004FF974())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v30, v31, v32, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v24 + 1584) != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
  }
  if (sub_1004FF958())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100219E80();
}

#error "101AAB1DC: call analysis failed (funcsize=73)"

void sub_101AAB2D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v24;
  a24 = v25;
  if ((v26 & 1) == 0) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  if (sub_10058B06C())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v27, v28, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
  }
  if (os_signpost_enabled((os_log_t)qword_102419638))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v29, v30, v31, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
  }
  if (sub_1002D0574())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v32, v33, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100219E80();
}

#error "101AAB4BC: call analysis failed (funcsize=73)"

#error "101AAB62C: call analysis failed (funcsize=73)"

void sub_101AAB724(void *a1, uint64_t a2, uint64_t *a3)
{
  __cxa_begin_catch(a1);
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_10231AE30);
  }
  uint64_t v4 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v5 = a3;
    }
    else {
      uint64_t v5 = (uint64_t *)*a3;
    }
    v6[0] = 68289283;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    __int16 v9 = 2081;
    int v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"invalid wifi #tile encountered. now deleting.\", \"filepath\":%{private, location:escape_only}s}", (uint8_t *)v6, 0x1Cu);
  }
}

#error "101AAB898: call analysis failed (funcsize=73)"

void sub_101AAB990()
{
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100436D88())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231B110);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1592)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231B110);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1592), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 192;
    uint64_t v20 = "close";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Logging/CLBinaryLog.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419630, &stru_10231B110);
  }
}

void sub_101AABB14()
{
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100436D88())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231B110);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1592)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231B110);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1592), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 182;
    uint64_t v20 = "open";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Logging/CLBinaryLog.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419630, &stru_10231B110);
  }
}

void sub_101AABC98()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10231B950);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10231B950);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 77;
    uint64_t v19 = "-[CLNatalimetryNotifierAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Calorimetry/CLNatalimetryNotifier.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_10231B950);
  }
}

void sub_101AABE2C()
{
  if (qword_1024190B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"AOP/SPU gyro bias not available on this platform\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10231D0A0);
      }
    }
    if (os_signpost_enabled((os_log_t)off_1024190B8))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "AOP/SPU gyro bias not available on this platform", "{\"msg%{public}.0s\":\"AOP/SPU gyro bias not available on this platform\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10231D0A0);
      }
    }
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"AOP/SPU gyro bias not available on this platform\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 336;
    uint64_t v19 = "prepareSPUGyroBiasAndVarianceDispatcher";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/GyroBiasEstimator/CLGyroBiasEstimator.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1024190B0, &stru_10231D0A0);
  }
}

void sub_101AABFC8()
{
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100436D88())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231D698);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1592)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231D698);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1592), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 169;
    uint64_t v20 = "getMax";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLRunningBufferStats.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419630, &stru_10231D698);
  }
}

void sub_101AAC14C()
{
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100436D88())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231D698);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1592)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231D698);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1592), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 175;
    uint64_t v20 = "getMin";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLRunningBufferStats.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419630, &stru_10231D698);
  }
}

void sub_101AAC2D0()
{
  if (qword_102418FE0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CLSPUHIDDriverInterface calls must be made on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_10231D6B8);
      }
    }
    int v1 = qword_102418FE8;
    if (os_signpost_enabled((os_log_t)qword_102418FE8))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLSPUHIDDriverInterface calls must be made on motion thread", "{\"msg%{public}.0s\":\"CLSPUHIDDriverInterface calls must be made on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_10231D6B8);
      }
    }
    int v2 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLSPUHIDDriverInterface calls must be made on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418FE0, &stru_10231D6B8);
  }
}

#error "101AAC51C: call analysis failed (funcsize=72)"

#error "101AAC684: call analysis failed (funcsize=72)"

#error "101AAC7EC: call analysis failed (funcsize=72)"

#error "101AAC954: call analysis failed (funcsize=72)"

#error "101AACABC: call analysis failed (funcsize=73)"

#error "101AACC2C: call analysis failed (funcsize=73)"

#error "101AACD9C: call analysis failed (funcsize=73)"

#error "101AACF0C: call analysis failed (funcsize=73)"

#error "101AAD07C: call analysis failed (funcsize=73)"

void sub_101AAD170()
{
}

void sub_101AAD19C()
{
}

void sub_101AAD1C8()
{
}

void sub_101AAD1F4()
{
}

void sub_101AAD220()
{
}

void sub_101AAD24C()
{
}

#error "101AAD2EC: call analysis failed (funcsize=76)"

#error "101AAD470: call analysis failed (funcsize=73)"

#error "101AAD5D8: call analysis failed (funcsize=76)"

#error "101AAD75C: call analysis failed (funcsize=73)"

#error "101AAD8CC: call analysis failed (funcsize=73)"

#error "101AADA3C: call analysis failed (funcsize=73)"

#error "101AADBAC: call analysis failed (funcsize=73)"

void sub_101AADCA0()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10231ECB8);
  }
  if (sub_100857B88())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10231ECB8);
    }
  }
  if (sub_100857BC4())
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v0, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10231ECB8);
    }
  }
  if (sub_100857BA8())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
  }
}

void sub_101AADE44()
{
  if (qword_102419560 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#SubArchiving not enabled. Inactive sub-archives cannot be determined.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_10231EDF0);
      }
    }
    int v1 = qword_102419568;
    if (os_signpost_enabled((os_log_t)qword_102419568))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#SubArchiving not enabled. Inactive sub-archives cannot be determined.", "{\"msg%{public}.0s\":\"#SubArchiving not enabled. Inactive sub-archives cannot be determined.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_10231EDF0);
      }
    }
    int v2 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#SubArchiving not enabled. Inactive sub-archives cannot be determined.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419560, &stru_10231EDF0);
  }
}

uint64_t sub_101AAE014(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_101AAE098()
{
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231F288);
      }
    }
    int v1 = qword_102419638;
    if (os_signpost_enabled((os_log_t)qword_102419638))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231F288);
      }
    }
    int v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419630, &stru_10231F288);
  }
}

void sub_101AAE268()
{
  if (qword_102418FD0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLAccessoryNotifier] getConfig should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10231F3B8);
      }
    }
    int v1 = qword_102418FD8;
    if (os_signpost_enabled((os_log_t)qword_102418FD8))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLAccessoryNotifier] getConfig should be running on motion thread", "{\"msg%{public}.0s\":\"[CLAccessoryNotifier] getConfig should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10231F3B8);
      }
    }
    int v2 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLAccessoryNotifier] getConfig should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418FD0, &stru_10231F3B8);
  }
}

uint64_t sub_101AAE438(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void sub_101AAE45C()
{
  __assert_rtn("onTraversingSection", "CLKeyLatLonTileTemplate.h", 1073, "offsetEntries + numOfEntries <= entriesHeader.numOfEntries");
}

void sub_101AAE488(std::__shared_weak_count **a1)
{
  int v1 = *a1;
  if (v1) {
    sub_1000DB0A0(v1);
  }
  __cxa_guard_abort(&qword_102486FC0);
}

void sub_101AAE4B4()
{
  if (qword_102419380 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      sub_101318734();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid TileType value.\", \"tileType\":%{private}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10231FE88);
      }
    }
    int v1 = qword_102419388;
    if (os_signpost_enabled((os_log_t)qword_102419388))
    {
      sub_101318734();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid TileType value.", "{\"msg%{public}.0s\":\"Invalid TileType value.\", \"tileType\":%{private}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10231FE88);
      }
    }
    int v2 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      sub_101318734();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid TileType value.\", \"tileType\":%{private}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419380, &stru_10231FE88);
  }
}

void sub_101AAE688()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102320228);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102320228);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 55;
    uint64_t v19 = "-[CLSensorRecorderNotifierAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/SensorRecorder/CLSensorRecorderNotifier.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_102320228);
  }
}

void sub_101AAE81C()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1023203E8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1023203E8);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_1023203E8);
  }
}

void sub_101AAE9A0()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023205E0);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023205E0);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 17;
    uint64_t v19 = "-[CLBTLEBeaconProviderMockAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/BTLEBeaconProvider/CLBTLEBeaconProviderMock.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1023205E0);
  }
}

void sub_101AAEB34(void *a1)
{
  do
  {
    int v2 = (void *)*a1;
    sub_10078995C((uint64_t)(a1 + 2));
    operator delete(a1);
    a1 = v2;
  }
  while (v2);
}

void sub_101AAEB70(_DWORD *a1)
{
  sub_101329AF8();
  if (!v4) {
    dispatch_once(&qword_1024193D0, &stru_102320770);
  }
  if (sub_100857BFC())
  {
    sub_100219C98();
    sub_100219D40((void *)&_mh_execute_header, v1, v5, "{\"msg%{public}.0s\":\"GPSODOM, windowSize is nonpositive\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11);
    sub_101329AF8();
    if (!v4) {
      dispatch_once(&qword_1024193D0, &stru_102320770);
    }
  }
  int v6 = *(NSObject **)(v2 + 984);
  if (os_signpost_enabled(v6))
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v6, v7, v8, "GPSODOM, windowSize is nonpositive", "{\"msg%{public}.0s\":\"GPSODOM, windowSize is nonpositive\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11);
    sub_101329AF8();
    if (!v4) {
      dispatch_once(&qword_1024193D0, &stru_102320770);
    }
  }
  int v9 = *(NSObject **)(v2 + 984);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    sub_100219C98();
    sub_100219D28((void *)&_mh_execute_header, v9, v10, "{\"msg%{public}.0s\":\"GPSODOM, windowSize is nonpositive\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11);
  }
  *a1 = 40;
}

void sub_101AAED04(_DWORD *a1)
{
  sub_101329AF8();
  if (!v4) {
    dispatch_once(&qword_1024193D0, &stru_102320770);
  }
  if (sub_100857BFC())
  {
    sub_100219C98();
    sub_100219D40((void *)&_mh_execute_header, v1, v5, "{\"msg%{public}.0s\":\"GPSODOM, windowSize is larger than the max\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11);
    sub_101329AF8();
    if (!v4) {
      dispatch_once(&qword_1024193D0, &stru_102320770);
    }
  }
  int v6 = *(NSObject **)(v2 + 984);
  if (os_signpost_enabled(v6))
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v6, v7, v8, "GPSODOM, windowSize is larger than the max", "{\"msg%{public}.0s\":\"GPSODOM, windowSize is larger than the max\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11);
    sub_101329AF8();
    if (!v4) {
      dispatch_once(&qword_1024193D0, &stru_102320770);
    }
  }
  int v9 = *(NSObject **)(v2 + 984);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    sub_100219C98();
    sub_100219D28((void *)&_mh_execute_header, v9, v10, "{\"msg%{public}.0s\":\"GPSODOM, windowSize is larger than the max\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11);
  }
  *a1 = 41;
}

void sub_101AAEE98()
{
  if (qword_1024193D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100857B88())
    {
      sub_1001DB29C();
      sub_100219D40((void *)&_mh_execute_header, v0, v2, "{\"msg%{public}.0s\":\"GPSODOM, windowSize is larger than the max\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102320770);
      }
    }
    int v3 = *(NSObject **)(v1 + 984);
    if (os_signpost_enabled(v3))
    {
      sub_1001DB29C();
      sub_100219C3C((void *)&_mh_execute_header, v3, v4, v5, "GPSODOM, windowSize is larger than the max", "{\"msg%{public}.0s\":\"GPSODOM, windowSize is larger than the max\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102320770);
      }
    }
    int v0 = *(NSObject **)(v1 + 984);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_100219D28((void *)&_mh_execute_header, v0, v6, "{\"msg%{public}.0s\":\"GPSODOM, windowSize is larger than the max\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024193D0, &stru_102320770);
  }
}

void sub_101AAF034()
{
  if (qword_1024193D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100857B88())
    {
      sub_1001DB29C();
      sub_100219D40((void *)&_mh_execute_header, v0, v2, "{\"msg%{public}.0s\":\"GPSODOM, windowSize is nonpositive\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102320770);
      }
    }
    int v3 = *(NSObject **)(v1 + 984);
    if (os_signpost_enabled(v3))
    {
      sub_1001DB29C();
      sub_100219C3C((void *)&_mh_execute_header, v3, v4, v5, "GPSODOM, windowSize is nonpositive", "{\"msg%{public}.0s\":\"GPSODOM, windowSize is nonpositive\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102320770);
      }
    }
    int v0 = *(NSObject **)(v1 + 984);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_100219D28((void *)&_mh_execute_header, v0, v6, "{\"msg%{public}.0s\":\"GPSODOM, windowSize is nonpositive\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024193D0, &stru_102320770);
  }
}

void sub_101AAF1D0()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102320A58);
      }
    }
    uint64_t v1 = qword_102419588;
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102320A58);
      }
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_102320A58);
  }
}

#error "101AAF424: call analysis failed (funcsize=77)"

#error "101AAF5A0: call analysis failed (funcsize=78)"

#error "101AAF724: call analysis failed (funcsize=77)"

#error "101AAF8A8: call analysis failed (funcsize=81)"

#error "101AAFA24: call analysis failed (funcsize=73)"

#error "101AAFB94: call analysis failed (funcsize=73)"

#error "101AAFD04: call analysis failed (funcsize=73)"

#error "101AAFE74: call analysis failed (funcsize=73)"

#error "101AAFFE4: call analysis failed (funcsize=73)"

void sub_101AB00D8(_DWORD *a1)
{
  sub_10134BCD8();
  if (!v3) {
    dispatch_once(&qword_102419390, &stru_102321758);
  }
  if (sub_10134BCE4())
  {
    sub_100219C98();
    sub_100234FD0((void *)&_mh_execute_header, v4, v5, "{\"msg%{public}.0s\":\"Just cofirming definitionMask on fault\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, v7, v8, v9, v19[0]);
    sub_10134BCD8();
    if (!v3) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
  }
  uint64_t v10 = *(NSObject **)(v1 + 920);
  if (os_signpost_enabled(v10))
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v10, v11, v12, "Just cofirming definitionMask on fault", "{\"msg%{public}.0s\":\"Just cofirming definitionMask on fault\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v19);
    sub_10134BCD8();
    if (!v3) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
  }
  if (sub_10134BD04())
  {
    sub_100219C98();
    sub_100234FF0((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"Just cofirming definitionMask on fault\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19[0]);
  }
  *a1 = 266;
}

void sub_101AB0250(_DWORD *a1)
{
  sub_10134BCD8();
  if (!v3) {
    dispatch_once(&qword_102419390, &stru_102321758);
  }
  if (sub_10134BCE4())
  {
    sub_100219C98();
    sub_100234FD0((void *)&_mh_execute_header, v4, v5, "{\"msg%{public}.0s\":\"Just cofirming minor on fault\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, v7, v8, v9, v19[0]);
    sub_10134BCD8();
    if (!v3) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
  }
  uint64_t v10 = *(NSObject **)(v1 + 920);
  if (os_signpost_enabled(v10))
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v10, v11, v12, "Just cofirming minor on fault", "{\"msg%{public}.0s\":\"Just cofirming minor on fault\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v19);
    sub_10134BCD8();
    if (!v3) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
  }
  if (sub_10134BD04())
  {
    sub_100219C98();
    sub_100234FF0((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"Just cofirming minor on fault\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19[0]);
  }
  *a1 = 265;
}

void sub_101AB03C8(_DWORD *a1)
{
  sub_10134BCD8();
  if (!v3) {
    dispatch_once(&qword_102419390, &stru_102321758);
  }
  if (sub_10134BCE4())
  {
    sub_100219C98();
    sub_100234FD0((void *)&_mh_execute_header, v4, v5, "{\"msg%{public}.0s\":\"Just cofirming major on fault\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, v7, v8, v9, v19[0]);
    sub_10134BCD8();
    if (!v3) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
  }
  uint64_t v10 = *(NSObject **)(v1 + 920);
  if (os_signpost_enabled(v10))
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v10, v11, v12, "Just cofirming major on fault", "{\"msg%{public}.0s\":\"Just cofirming major on fault\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v19);
    sub_10134BCD8();
    if (!v3) {
      dispatch_once(&qword_102419390, &stru_102321758);
    }
  }
  if (sub_10134BD04())
  {
    sub_100219C98();
    sub_100234FF0((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"Just cofirming major on fault\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19[0]);
  }
  *a1 = 264;
}

void sub_101AB0540()
{
  if (qword_102419560 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10049C4A4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"HTTP header val must be string\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1023217C0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1384)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "HTTP header val must be string", "{\"msg%{public}.0s\":\"HTTP header val must be string\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1023217C0);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1384), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"HTTP header val must be string\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 77;
    uint64_t v20 = "-[CLHUploadRequest URLRequest]_block_invoke";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Collection/CLHNetworkController.m";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419560, &stru_1023217C0);
  }
}

void sub_101AB06C4()
{
  if (qword_102419560 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10049C4A4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"HTTP header key must be string\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1023217C0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1384)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "HTTP header key must be string", "{\"msg%{public}.0s\":\"HTTP header key must be string\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1023217C0);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 1384), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"HTTP header key must be string\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 76;
    uint64_t v20 = "-[CLHUploadRequest URLRequest]_block_invoke";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Collection/CLHNetworkController.m";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419560, &stru_1023217C0);
  }
}

void sub_101AB0848(void **a1, void *a2, void **a3)
{
  int v5 = *a1;
  if (v5)
  {
    a2[27] = v5;
    operator delete(v5);
  }
  int v6 = (std::__shared_weak_count *)a2[16];
  if (v6) {
    sub_1000DB0A0(v6);
  }
  int v7 = *a3;
  if (*a3)
  {
    a2[12] = v7;
    operator delete(v7);
  }
  int v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    sub_1000DB0A0(v8);
  }
}

void sub_101AB08BC(void **__p)
{
  do
  {
    int v2 = (void **)*__p;
    int v3 = (std::__shared_weak_count *)__p[5];
    if (v3) {
      sub_1000DB0A0(v3);
    }
    operator delete(__p);
    __p = v2;
  }
  while (v2);
}

void sub_101AB08FC()
{
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_102321930);
  }
  uint64_t v0 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"expecting results to correspond one-to-one with input\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_102321930);
    }
  }
  int v1 = qword_1024193B8;
  if (os_signpost_enabled((os_log_t)qword_1024193B8))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "expecting results to correspond one-to-one with input", "{\"msg%{public}.0s\":\"expecting results to correspond one-to-one with input\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_102321930);
    }
  }
  int v2 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"expecting results to correspond one-to-one with input\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_101AB0AC4()
{
  if (qword_102419390 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1013742D4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"If zone specified minor, the entry minor must be equal\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321A10);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 920)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "If zone specified minor, the entry minor must be equal", "{\"msg%{public}.0s\":\"If zone specified minor, the entry minor must be equal\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321A10);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 920), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"If zone specified minor, the entry minor must be equal\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 458;
    uint64_t v20 = "-[CLWPBridge _didTransitionZoneWithData:trueMajor:trueMinor:state:]_block_invoke";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLWPBridge.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419390, &stru_102321A10);
  }
}

void sub_101AB0C48()
{
  if (qword_102419390 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1013742D4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"If zone specified major, the entry major must be equal\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321A10);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 920)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "If zone specified major, the entry major must be equal", "{\"msg%{public}.0s\":\"If zone specified major, the entry major must be equal\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102321A10);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 920), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"If zone specified major, the entry major must be equal\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 456;
    uint64_t v20 = "-[CLWPBridge _didTransitionZoneWithData:trueMajor:trueMinor:state:]_block_invoke";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLWPBridge.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419390, &stru_102321A10);
  }
}

void sub_101AB0DCC()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102321C38);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102321C38);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 26;
    uint64_t v19 = "-[CLGpsAssistantAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLGpsAssistant.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_102321C38);
  }
}

void sub_101AB0F60()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102321DA8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102321DA8);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_102321DA8);
  }
}

void sub_101AB10E4(char a1)
{
  if ((a1 & 1) == 0) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419028, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419020 != -1) {
        dispatch_once(&qword_102419020, &stru_102321FB0);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419028))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419020 != -1) {
        dispatch_once(&qword_102419020, &stru_102321FB0);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419028, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 60;
    uint64_t v20 = "-[CMActivityAlarmLocal initWithTrigger:duration:onQueue:withHandler:]";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/ActivityAlarm/CMActivityAlarmLocal.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419020, &stru_102321FB0);
  }
}

void sub_101AB1270()
{
  if (qword_102419020 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1013813AC())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419020 != -1) {
        dispatch_once(&qword_102419020, &stru_102321FB0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 40)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419020 != -1) {
        dispatch_once(&qword_102419020, &stru_102321FB0);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 40), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 97;
    uint64_t v20 = "-[CMActivityAlarmLocal initWithTrigger:duration:onQueue:forClient:withHandler:]";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/ActivityAlarm/CMActivityAlarmLocal.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419020, &stru_102321FB0);
  }
}

void sub_101AB13F4()
{
  if (qword_102419020 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1013813AC())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419020 != -1) {
        dispatch_once(&qword_102419020, &stru_102321FB0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 40)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419020 != -1) {
        dispatch_once(&qword_102419020, &stru_102321FB0);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 40), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 127;
    uint64_t v20 = "-[CMActivityAlarmLocal initWithTrigger:duration:onRunLoop:withHandler:]";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/ActivityAlarm/CMActivityAlarmLocal.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419020, &stru_102321FB0);
  }
}

#error "101AB15F4: call analysis failed (funcsize=73)"

#error "101AB1764: call analysis failed (funcsize=73)"

#error "101AB18D4: call analysis failed (funcsize=73)"

#error "101AB1A44: call analysis failed (funcsize=73)"

#error "101AB1BB4: call analysis failed (funcsize=73)"

void sub_101AB1CA8()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102322618);
      }
    }
    int v1 = qword_102419588;
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102322618);
      }
    }
    int v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_102322618);
  }
}

void sub_101AB1E78()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023227E8);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023227E8);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 56;
    uint64_t v19 = "-[CLDarwinNotifierAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/DarwinNotifier/CLDarwinNotifier.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1023227E8);
  }
}

void sub_101AB200C()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1023229B0);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1023229B0);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_1023229B0);
  }
}

void sub_101AB2190()
{
  if (qword_102419430 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102322AE8);
      }
    }
    int v1 = qword_102419438;
    if (os_signpost_enabled((os_log_t)qword_102419438))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed,fGEOMapFeatureAccess==nil", "{\"msg%{public}.0s\":\"Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102322AE8);
      }
    }
    int v2 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419430, &stru_102322AE8);
  }
}

#error "101AB23D4: call analysis failed (funcsize=76)"

#error "101AB2558: call analysis failed (funcsize=73)"

#error "101AB26C0: call analysis failed (funcsize=76)"

#error "101AB2844: call analysis failed (funcsize=73)"

#error "101AB29B4: call analysis failed (funcsize=73)"

#error "101AB2B24: call analysis failed (funcsize=73)"

#error "101AB2C94: call analysis failed (funcsize=73)"

void sub_101AB2D88()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102322C78);
  }
  if (sub_100857B88())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102322C78);
    }
  }
  if (sub_100857BC4())
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v0, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102322C78);
    }
  }
  if (sub_100857BA8())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
  }
}

void sub_101AB2F2C()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102323530);
      }
    }
    int v1 = qword_102419588;
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102323530);
      }
    }
    int v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_102323530);
  }
}

void sub_101AB30FC(void (***a1)(void))
{
  do
  {
    int v2 = *a1;
    (*a1[2])();
    operator delete(a1);
    a1 = (void (***)(void))v2;
  }
  while (v2);
}

void sub_101AB3158(std::__shared_weak_count **a1, std::__shared_weak_count **a2, std::__shared_weak_count **a3)
{
  int v5 = *a1;
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (*a2) {
    sub_1000DB0A0(*a2);
  }
  if (*a3) {
    sub_1000DB0A0(*a3);
  }
}

void sub_101AB31A0(void *a1)
{
}

void sub_101AB3208()
{
}

void sub_101AB3270()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102323E18);
      }
    }
    int v1 = qword_102419588;
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102323E18);
      }
    }
    int v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_102323E18);
  }
}

void sub_101AB3440()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023245B8);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023245B8);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 28;
    uint64_t v19 = "-[CLTurnStateAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Context/CLTurnState.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1023245B8);
  }
}

void sub_101AB35D4()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102324728);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102324728);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_102324728);
  }
}

void sub_101AB3758()
{
  if (qword_1024190B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100AC6EA8())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1023247B8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 184)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1023247B8);
      }
    }
    if (sub_1013F838C())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 47;
    uint64_t v20 = "nearestSample";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/GyroBiasEstimator/CLNonlinearGyroBiasFitter.cpp";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024190B0, &stru_1023247B8);
  }
}

void sub_101AB38D0()
{
  if (qword_1024190B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100AC6EA8())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1023247B8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 184)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1023247B8);
      }
    }
    if (sub_1013F838C())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 198;
    uint64_t v20 = "windowFit";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/GyroBiasEstimator/CLNonlinearGyroBiasFitter.cpp";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024190B0, &stru_1023247B8);
  }
}

#error "101AB3AC0: call analysis failed (funcsize=71)"

#error "101AB3C24: call analysis failed (funcsize=71)"

#error "101AB3D88: call analysis failed (funcsize=71)"

#error "101AB3EEC: call analysis failed (funcsize=71)"

#error "101AB4050: call analysis failed (funcsize=71)"

#error "101AB41B4: call analysis failed (funcsize=71)"

#error "101AB4318: call analysis failed (funcsize=71)"

uint64_t sub_101AB4404(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void sub_101AB4428(char a1)
{
  if ((a1 & 1) == 0) {
    dispatch_once(&qword_1024193D0, &stru_102325100);
  }
  int v1 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102325100);
    }
  }
  int v2 = qword_1024193D8;
  if (os_signpost_enabled((os_log_t)qword_1024193D8))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102325100);
    }
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
  }
}

void sub_101AB45E8()
{
  if (qword_1024191C0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#gfc Failed to stop monitoring before dealloc\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1023251C0);
      }
    }
    int v1 = qword_1024191C8;
    if (os_signpost_enabled((os_log_t)qword_1024191C8))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#gfc Failed to stop monitoring before dealloc", "{\"msg%{public}.0s\":\"#gfc Failed to stop monitoring before dealloc\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1023251C0);
      }
    }
    int v2 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#gfc Failed to stop monitoring before dealloc\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024191C0, &stru_1023251C0);
  }
}

void sub_101AB47B8()
{
  __assert_rtn("operator[]", "iterator_range_core.hpp", 389, "at >= 0");
}

void sub_101AB47E4()
{
}

#error "101AB488C: call analysis failed (funcsize=73)"

#error "101AB49FC: call analysis failed (funcsize=73)"

#error "101AB4B6C: call analysis failed (funcsize=73)"

#error "101AB4CDC: call analysis failed (funcsize=73)"

#error "101AB4E4C: call analysis failed (funcsize=73)"

#error "101AB4FB8: call analysis failed (funcsize=71)"

#error "101AB511C: call analysis failed (funcsize=72)"

#error "101AB5288: call analysis failed (funcsize=72)"

#error "101AB53F4: call analysis failed (funcsize=72)"

#error "101AB5560: call analysis failed (funcsize=72)"

#error "101AB56CC: call analysis failed (funcsize=72)"

uint64_t sub_101AB57C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

void sub_101AB57E4()
{
  if (qword_102419560 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"missing completion handler\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102326640);
      }
    }
    int v1 = qword_102419568;
    if (os_signpost_enabled((os_log_t)qword_102419568))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "missing completion handler", "{\"msg%{public}.0s\":\"missing completion handler\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102326640);
      }
    }
    int v2 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"missing completion handler\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419560, &stru_102326640);
  }
}

void sub_101AB59BC()
{
  if (qword_1024190F0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_101449578())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Wrist State History should always be guaranteed to be non-empty.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_102326660);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 248)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Wrist State History should always be guaranteed to be non-empty.", "{\"msg%{public}.0s\":\"Wrist State History should always be guaranteed to be non-empty.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_102326660);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 248), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Wrist State History should always be guaranteed to be non-empty.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 44;
    uint64_t v20 = "updateChargerAndWristState";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Fall/CLFallWristState.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024190F0, &stru_102326660);
  }
}

void sub_101AB5B40()
{
  if (qword_1024190F0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_101449578())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Lock State History should always be guaranteed to be non-empty.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_102326660);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 248)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Lock State History should always be guaranteed to be non-empty.", "{\"msg%{public}.0s\":\"Lock State History should always be guaranteed to be non-empty.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_102326660);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 248), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Lock State History should always be guaranteed to be non-empty.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 67;
    uint64_t v20 = "updateLockState";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Fall/CLFallWristState.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024190F0, &stru_102326660);
  }
}

#error "101AB5D34: call analysis failed (funcsize=71)"

#error "101AB5E90: call analysis failed (funcsize=71)"

void sub_101AB5F7C()
{
  sub_1014574F0();
  if (!v1) {
    dispatch_once(&qword_1024193B0, &stru_1023273E8);
  }
  if (sub_100F7EFC0())
  {
    sub_100C08AF8();
    sub_100C08BBC((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Invalid tile type\", \"tileType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v19);
    sub_1014574F0();
    if (!v1) {
      dispatch_once(&qword_1024193B0, &stru_1023273E8);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v0 + 952)))
  {
    sub_100C08AF8();
    sub_100C08B6C((void *)&_mh_execute_header, v8, v9, v10, "Invalid tile type", "{\"msg%{public}.0s\":\"Invalid tile type\", \"tileType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v19);
    sub_1014574F0();
    if (!v1) {
      dispatch_once(&qword_1024193B0, &stru_1023273E8);
    }
  }
  if (sub_101457508())
  {
    sub_100C08AF8();
    sub_100C08BDC((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"Invalid tile type\", \"tileType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19);
  }
}

void sub_101AB60F0()
{
  if (qword_1024193B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1008B4A98())
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Fence key vector must have content\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023273E8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v1 + 952)))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v2, v3, v4, "Fence key vector must have content", "{\"msg%{public}.0s\":\"Fence key vector must have content\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023273E8);
      }
    }
    uint64_t v0 = *(NSObject **)(v1 + 952);
    if (sub_1002D0574())
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Fence key vector must have content\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1024193B0, &stru_1023273E8);
  }
}

void sub_101AB6298(void *a1, void *a2)
{
  uint64_t v3 = __cxa_begin_catch(a1);
  *a2 = v3;
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1023273E8);
  }
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
  {
    (*(void (**)(void *))(*(void *)v3 + 16))(v3);
    sub_1002100B8((void *)&_mh_execute_header, v4, v5, "sqlite error, %{private}s", v6, v7, v8, v9, 3u);
  }
}

#error "101AB63F8: call analysis failed (funcsize=74)"

#error "101AB6578: call analysis failed (funcsize=81)"

#error "101AB66F4: call analysis failed (funcsize=73)"

#error "101AB6864: call analysis failed (funcsize=73)"

#error "101AB69D4: call analysis failed (funcsize=73)"

#error "101AB6B44: call analysis failed (funcsize=73)"

#error "101AB6CB4: call analysis failed (funcsize=73)"

void sub_101AB6DA8()
{
  sub_10149607C();
  if (!v2) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  if (sub_101496040())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v3, v4, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10);
    if (*(void *)(v0 + 4016) != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v1 + 4024)))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v5, v6, v7, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10);
    if (*(void *)(v0 + 4016) != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
  }
  if (sub_101496060())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v8, v9, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10);
  }
}

void sub_101AB6F18()
{
  sub_10149607C();
  if (!v2) {
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
  if (sub_101496040())
  {
    sub_1001DB2F0();
    sub_1001DE4DC((void *)&_mh_execute_header, v3, v4, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10);
    if (*(void *)(v0 + 4016) != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v1 + 4024)))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v5, v6, v7, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10);
    if (*(void *)(v0 + 4016) != -1) {
      dispatch_once(&qword_102418FB0, &stru_102328308);
    }
  }
  if (sub_101496060())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v8, v9, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10);
  }
}

void sub_101AB7088()
{
  if (qword_102418FB0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_101496040())
    {
      sub_1001DB29C();
      sub_1001DE4DC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 4024)))
    {
      sub_1001DB29C();
      sub_1001DB2C8((void *)&_mh_execute_header, v3, v4, v5, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_102328308);
      }
    }
    if (sub_101496060())
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v6, v7, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v8);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102418FB0, &stru_102328308);
  }
}

void sub_101AB7214()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023284E0);
      }
    }
    uint64_t v1 = qword_102419588;
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023284E0);
      }
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_1023284E0);
  }
}

void sub_101AB73E4()
{
}

void sub_101AB7410()
{
}

void sub_101AB743C()
{
}

void sub_101AB7468()
{
}

void sub_101AB7494()
{
}

void sub_101AB74C0()
{
}

void sub_101AB74EC()
{
  if (qword_102419090 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1007F12E4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Invalid child event payload!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_102328B70);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 152)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Invalid child event payload!", "{\"msg%{public}.0s\":\"Invalid child event payload!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_102328B70);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 152), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Invalid child event payload!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 28;
    uint64_t v20 = "sensorTimeFromHidChildEvent";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/IO/CLIoHidUtils.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419090, &stru_102328B70);
  }
}

void sub_101AB7670()
{
  if (qword_102419090 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1007F12E4())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Unexpected sensor time length!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_102328B70);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 152)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Unexpected sensor time length!", "{\"msg%{public}.0s\":\"Unexpected sensor time length!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_102328B70);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 152), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Unexpected sensor time length!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 29;
    uint64_t v20 = "sensorTimeFromHidChildEvent";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/IO/CLIoHidUtils.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419090, &stru_102328B70);
  }
}

#error "101AB786C: call analysis failed (funcsize=72)"

#error "101AB79D8: call analysis failed (funcsize=72)"

#error "101AB7B44: call analysis failed (funcsize=72)"

#error "101AB7CB0: call analysis failed (funcsize=72)"

#error "101AB7E1C: call analysis failed (funcsize=72)"

#error "101AB7F88: call analysis failed (funcsize=72)"

#error "101AB80F8: call analysis failed (funcsize=73)"

#error "101AB8268: call analysis failed (funcsize=73)"

#error "101AB83D8: call analysis failed (funcsize=73)"

#error "101AB8548: call analysis failed (funcsize=73)"

#error "101AB86B8: call analysis failed (funcsize=73)"

void sub_101AB87AC()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232A118);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232A118);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 19;
    uint64_t v19 = "-[CLMobileAssetManagerAdapter beginService]";
    int v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/MobileAsset/CLMobileAssetManager.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_10232A118);
  }
}

void sub_101AB8940()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1005E58CC())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232A8E8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1416)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232A8E8);
      }
    }
    if (sub_1014EA768())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 58;
    uint64_t v20 = "-[CLNotifierServiceAdapter setAdaptedNotifier:]";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLNotifierServiceAdapter.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_10232A8E8);
  }
}

void sub_101AB8AB8()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1005E58CC())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232A8E8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1416)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232A8E8);
      }
    }
    if (sub_1014EA768())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 48;
    uint64_t v20 = "-[CLNotifierServiceAdapter setAdaptedNotifier:]";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLNotifierServiceAdapter.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_10232A8E8);
  }
}

void sub_101AB8C30()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1005E58CC())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232A8E8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 1416)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232A8E8);
      }
    }
    if (sub_1014EA768())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 100;
    uint64_t v20 = "-[CLNotifierServiceAdapter notifierClientNumForCoparty:]";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLNotifierServiceAdapter.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_10232A8E8);
  }
}

void sub_101AB8DA8()
{
}

void sub_101AB8DD4()
{
}

#error "101AB8E8C: call analysis failed (funcsize=81)"

#error "101AB9008: call analysis failed (funcsize=73)"

#error "101AB9178: call analysis failed (funcsize=73)"

#error "101AB92E8: call analysis failed (funcsize=73)"

#error "101AB9458: call analysis failed (funcsize=73)"

#error "101AB95C8: call analysis failed (funcsize=73)"

void sub_101AB96BC(void *a1, uint64_t a2, void *a3)
{
  id v4 = objc_begin_catch(a1);
  *a3 = v4;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10232B708);
  }
  int v5 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_ERROR))
  {
    int v6 = 138477827;
    id v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unable to parse response! Exception: %{private}@", (uint8_t *)&v6, 0xCu);
  }
}

#error "101AB980C: call analysis failed (funcsize=73)"

#error "101AB997C: call analysis failed (funcsize=73)"

#error "101AB9AEC: call analysis failed (funcsize=73)"

#error "101AB9C5C: call analysis failed (funcsize=73)"

#error "101AB9DCC: call analysis failed (funcsize=73)"

void sub_101AB9EC0()
{
  __assert_rtn("Initialize", "hmm.h", 345, "cnisnan(sum) == false && sum > static_cast<T>(0.0)");
}

void sub_101AB9EEC()
{
  __assert_rtn("operator double", "cnmatrixbase.h", 979, "num_elements_ == 1");
}

void sub_101AB9F18()
{
  __assert_rtn("Initialize", "hmm.h", 341, "cnisnan(val) == false && val >= static_cast<T>(0.0) && val <= static_cast<T>(1.0)");
}

void sub_101AB9F44()
{
}

void sub_101AB9F70()
{
}

void sub_101AB9F9C(int a1, char *a2)
{
}

void sub_101AB9FC4()
{
  __assert_rtn("Update", "hmm.h", 669, "cnisnan(sum) == false && sum > static_cast<T>(0.0)");
}

void sub_101AB9FF0()
{
  __assert_rtn("Update", "hmm.h", 657, "Length(eArgs) == ne_u32");
}

void sub_101ABA01C()
{
  __assert_rtn("Update", "hmm.h", 656, "Length(eFuncs) == ne_u32");
}

void sub_101ABA048()
{
  __assert_rtn("Update", "hmm.h", 650, "cnisnan(val) == false && val >= static_cast<T>(0.0) && val <= static_cast<T>(1.0)");
}

void sub_101ABA074()
{
  __assert_rtn("Update", "hmm.h", 641, "Length(xbar) == nx_u32");
}

void sub_101ABA0A0()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 945, "data_ != __null");
}

void sub_101ABA0CC()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 946, "idx >= 0");
}

void sub_101ABA0F8()
{
}

void sub_101ABA124()
{
  __assert_rtn("Sum", "cnmatrixbase.h", 4900, "d == 1 || d == 2");
}

void sub_101ABA150()
{
  __assert_rtn("Sum", "cnmatrixbase.h", 4904, "B.max_num_cols_ >= A.num_cols_");
}

void sub_101ABA17C()
{
  __assert_rtn("Sum", "cnmatrixbase.h", 4908, "B.max_num_rows_ >= A.num_rows_");
}

void sub_101ABA1A8()
{
  __assert_rtn("FastReshape", "cnmatrixbase.h", 2294, "in_nr >= 0");
}

void sub_101ABA1D4()
{
  __assert_rtn("FastReshape", "cnmatrixbase.h", 2295, "in_nc >= 0");
}

void sub_101ABA200()
{
  __assert_rtn("FastReshape", "cnmatrixbase.h", 2300, "in_nr <= max_nr");
}

void sub_101ABA22C()
{
  __assert_rtn("FastReshape", "cnmatrixbase.h", 2302, "in_nc <= max_nc");
}

void sub_101ABA258()
{
  __assert_rtn("FastReshape", "cnmatrixbase.h", 2297, "in_nr*in_nc == A.num_elements_");
}

void sub_101ABA284()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2378, "in_nr <= max_nr");
}

void sub_101ABA2B0()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2379, "in_nc >= 0");
}

void sub_101ABA2DC()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2381, "in_nc <= max_nc");
}

void sub_101ABA308()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 881, "data_ != __null");
}

void sub_101ABA334()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 882, "idx >= 0");
}

void sub_101ABA360()
{
}

void sub_101ABA38C()
{
}

void sub_101ABA3B8()
{
  __assert_rtn("Predict", "hmm.h", 438, "cnisnan(sum) == false && sum > static_cast<T>(0.0)");
}

void sub_101ABA3E4()
{
  __assert_rtn("Predict", "hmm.h", 425, "cnisnan(val) == false && val >= static_cast<T>(0.0) && val <= static_cast<T>(1.0)");
}

void sub_101ABA410()
{
  __assert_rtn("Predict", "hmm.h", 416, "Length(x) == nx_u32");
}

void sub_101ABA43C()
{
}

void sub_101ABA468()
{
  __assert_rtn("TransitionProbabilitiesAreValid", "hmm.h", 113, "tMat.NumRows() == nx_u32 && tMat.NumCols() == nx_u32");
}

void sub_101ABA494()
{
  if (qword_1024193D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100857B88())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v16, v17, (uint64_t)v18, v19, v20[0]);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
    }
    id v7 = *(NSObject **)(v0 + 984);
    if (os_signpost_enabled(v7))
    {
      sub_1001DB29C();
      sub_100219C3C((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v20);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
    }
    if (sub_100857BA8())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v10, v11, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v14, v15, (uint64_t)v16, v17, (uint64_t)v18, v19, v20[0]);
    }
    uint64_t v17 = 571;
    uint64_t v18 = "HandleStateEntry";
    int v16 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/PedometerAssistance/CLGNSSPedometerA"
          "ssistanceController.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1024193D0, &stru_10232C2C8);
  }
}

void sub_101ABA61C()
{
  if (qword_1024193D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100857B88())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v16, v17, (uint64_t)v18, v19, v20[0]);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
    }
    id v7 = *(NSObject **)(v0 + 984);
    if (os_signpost_enabled(v7))
    {
      sub_1001DB29C();
      sub_100219C3C((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v20);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
    }
    if (sub_100857BA8())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v10, v11, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v14, v15, (uint64_t)v16, v17, (uint64_t)v18, v19, v20[0]);
    }
    uint64_t v17 = 1283;
    uint64_t v18 = "ChangeState";
    int v16 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/PedometerAssistance/CLGNSSPedometerA"
          "ssistanceController.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1024193D0, &stru_10232C2C8);
  }
}

#error "101ABA818: call analysis failed (funcsize=71)"

#error "101ABA974: call analysis failed (funcsize=71)"

#error "101ABAAD0: call analysis failed (funcsize=71)"

#error "101ABAC2C: call analysis failed (funcsize=71)"

#error "101ABAD88: call analysis failed (funcsize=71)"

void sub_101ABAE70()
{
  if (qword_1024193D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100857B88())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v16, v17, (uint64_t)v18, v19, v20[0]);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
    }
    id v7 = *(NSObject **)(v0 + 984);
    if (os_signpost_enabled(v7))
    {
      sub_1001DB29C();
      sub_100219C3C((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v20);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232C2C8);
      }
    }
    if (sub_100857BA8())
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v10, v11, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v14, v15, (uint64_t)v16, v17, (uint64_t)v18, v19, v20[0]);
    }
    uint64_t v17 = 1801;
    uint64_t v18 = "Reset";
    int v16 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/PedometerAssistance/CLGNSSPedometerA"
          "ssistanceController.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1024193D0, &stru_10232C2C8);
  }
}

void sub_101ABAFF8()
{
  if (qword_102419530 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"unknown in-useness level enum passed to encodeInUseLevelAsInteger\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10232C318);
      }
    }
    int v1 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "unknown in-useness level enum passed to encodeInUseLevelAsInteger", "{\"msg%{public}.0s\":\"unknown in-useness level enum passed to encodeInUseLevelAsInteger\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10232C318);
      }
    }
    int v2 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"unknown in-useness level enum passed to encodeInUseLevelAsInteger\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419530, &stru_10232C318);
  }
}

void sub_101ABB1C8()
{
  if (qword_102419530 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      sub_100219C60();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"level int is out of range for in-use level\", \"level\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10232C318);
      }
    }
    int v1 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      sub_100219C60();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "level int is out of range for in-use level", "{\"msg%{public}.0s\":\"level int is out of range for in-use level\", \"level\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10232C318);
      }
    }
    int v2 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      sub_100219C60();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"level int is out of range for in-use level\", \"level\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419530, &stru_10232C318);
  }
}

void sub_101ABB39C()
{
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10232C638);
  }
  uint64_t v0 = qword_102419108;
  if (sub_10058B06C())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CLServiceLocationProvider_Type add client failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
  }
  if (os_signpost_enabled((os_log_t)qword_102419108))
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v1, v2, v3, "CLServiceLocationProvider_Type add client failed", "{\"msg%{public}.0s\":\"CLServiceLocationProvider_Type add client failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10232C638);
    }
  }
  int v4 = qword_102419108;
  if (sub_1002D0574())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLServiceLocationProvider_Type add client failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }
}

#error "101ABB5C0: call analysis failed (funcsize=78)"

#error "101ABB740: call analysis failed (funcsize=78)"

#error "101ABB8C0: call analysis failed (funcsize=78)"

void sub_101ABB9BC()
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_10232C9C8);
  }
  uint64_t v0 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Fence: combined, no key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_10232C9C8);
    }
  }
  uint64_t v1 = qword_1024193C8;
  if (os_signpost_enabled((os_log_t)qword_1024193C8))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Fence: combined, no key", "{\"msg%{public}.0s\":\"Fence: combined, no key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_10232C9C8);
    }
  }
  uint64_t v2 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Fence: combined, no key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

uint64_t sub_101ABBB84(uint64_t (***a1)(void), uint64_t (***a2)(void))
{
  uint64_t v3 = a1;
  int v4 = a1;
  do
  {
    uint64_t result = (**v4)(v4);
    v4 += 63;
    v3 += 63;
  }
  while (v4 != a2);
  return result;
}

void sub_101ABBBEC()
{
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232CAA8);
      }
    }
    uint64_t v1 = qword_102419638;
    if (os_signpost_enabled((os_log_t)qword_102419638))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232CAA8);
      }
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419630, &stru_10232CAA8);
  }
}

void sub_101ABBDBC()
{
  if (qword_102419580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232CC70);
      }
    }
    if (os_signpost_enabled((os_log_t)qword_102419588))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232CC70);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21);
    }
    uint64_t v18 = 108;
    uint64_t v19 = "-[CLVehicleStateNotifierAdapter beginService]";
    uint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Vehicle/CLVehicleStateNotifier.mm";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419580, &stru_10232CC70);
  }
}

void sub_101ABBF50()
{
  if (qword_102418F90 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1004482A0())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10232CEB8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 3992)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10232CEB8);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 3992), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 244;
    uint64_t v20 = "operator()";
    uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h";
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418F90, &stru_10232CEB8);
  }
}

void sub_101ABC0D4()
{
  if (qword_102419410 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"null fStopCompletedTimer\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_10232D630);
      }
    }
    int v1 = qword_102419418;
    if (os_signpost_enabled((os_log_t)qword_102419418))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "null fStopCompletedTimer", "{\"msg%{public}.0s\":\"null fStopCompletedTimer\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_10232D630);
      }
    }
    int v2 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"null fStopCompletedTimer\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419410, &stru_10232D630);
  }
}

#error "101ABC324: call analysis failed (funcsize=72)"

#error "101ABC490: call analysis failed (funcsize=71)"

#error "101ABC5F4: call analysis failed (funcsize=71)"

#error "101ABC758: call analysis failed (funcsize=71)"

#error "101ABC8BC: call analysis failed (funcsize=71)"

#error "101ABCA20: call analysis failed (funcsize=71)"

#error "101ABCB84: call analysis failed (funcsize=71)"

#error "101ABCCFC: call analysis failed (funcsize=81)"

#error "101ABCE78: call analysis failed (funcsize=73)"

#error "101ABCFE8: call analysis failed (funcsize=73)"

#error "101ABD158: call analysis failed (funcsize=73)"

#error "101ABD2C8: call analysis failed (funcsize=73)"

#error "101ABD438: call analysis failed (funcsize=73)"

#error "101ABD5B8: call analysis failed (funcsize=79)"

void sub_101ABD6B0()
{
}

void sub_101ABD6DC()
{
}

#error "101ABD794: call analysis failed (funcsize=79)"

#error "101ABD908: call analysis failed (funcsize=75)"

#error "101ABDA8C: call analysis failed (funcsize=79)"

#error "101ABDC00: call analysis failed (funcsize=73)"

#error "101ABDD6C: call analysis failed (funcsize=73)"

#error "101ABDED8: call analysis failed (funcsize=73)"

#error "101ABE044: call analysis failed (funcsize=73)"

void sub_101ABE134()
{
  if (qword_102418FD0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      sub_100219CC4();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Wiring bug, should not be subscribed to \", \"notification\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10232EC78);
      }
    }
    int v1 = qword_102418FD8;
    if (os_signpost_enabled((os_log_t)qword_102418FD8))
    {
      sub_100219CC4();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Wiring bug, should not be subscribed to ", "{\"msg%{public}.0s\":\"Wiring bug, should not be subscribed to \", \"notification\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10232EC78);
      }
    }
    int v2 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      sub_100219CC4();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Wiring bug, should not be subscribed to \", \"notification\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102418FD0, &stru_10232EC78);
  }
}

#error "101ABE390: call analysis failed (funcsize=75)"

void sub_101ABE488()
{
  CFAbsoluteTimeGetCurrent();
  sub_1015B08B0();
  sub_1015B08C4((void *)&_mh_execute_header, &_os_log_default, v0, "ERROR,Die,Time,%.3f,Function,\"%s\",fForestSize is 0\n", v1, v2, v3, v4, v5);
}

void sub_101ABE508()
{
  CFAbsoluteTimeGetCurrent();
  sub_1015B08B0();
  sub_1015B08C4((void *)&_mh_execute_header, &_os_log_default, v0, "ERROR,Die,Time,%.3f,Function,\"%s\",Invalid decision tree, feature index exceeds feature array\n", v1, v2, v3, v4, v5);
}

void sub_101ABE588()
{
  CFAbsoluteTimeGetCurrent();
  sub_1015B08B0();
  sub_1015B08C4((void *)&_mh_execute_header, &_os_log_default, v0, "ERROR,Die,Time,%.3f,Function,\"%s\",Invalid decision tree, child index exceeds node array\n", v1, v2, v3, v4, v5);
}

void sub_101ABE608()
{
  CFAbsoluteTimeGetCurrent();
  sub_1015B08B0();
  sub_1015B08C4((void *)&_mh_execute_header, &_os_log_default, v0, "ERROR,Die,Time,%.3f,Function,\"%s\",Index exceeds ensemble size\n", v1, v2, v3, v4, v5);
}

void sub_101ABE688()
{
  CFAbsoluteTimeGetCurrent();
  sub_1015B08B0();
  sub_1015B08C4((void *)&_mh_execute_header, &_os_log_default, v0, "ERROR,Die,Time,%.3f,Function,\"%s\",Invalid decision tree, regression index exceeds array length\n", v1, v2, v3, v4, v5);
}

#error "101ABE784: call analysis failed (funcsize=73)"

#error "101ABE8F4: call analysis failed (funcsize=73)"

#error "101ABEA64: call analysis failed (funcsize=73)"

#error "101ABEBD4: call analysis failed (funcsize=73)"

#error "101ABED44: call analysis failed (funcsize=73)"

void sub_101ABEE38()
{
  __assert_rtn("setFlushTimeoutSeconds_block_invoke", "MSLWriter.cpp", 56, "(fFd == -1) && (\"Writer::setFlushTimeout() must be called before ::open().\")");
}

void sub_101ABEE64(uint64_t a1, void *a2, os_log_t log)
{
  if (*(char *)(a1 + 39) < 0) {
    a2 = (void *)*a2;
  }
  int v3 = 136446210;
  uint64_t v4 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unable to create directory at path: %{public}s", (uint8_t *)&v3, 0xCu);
}

uint64_t sub_101ABEEEC(os_log_t log)
{
  int v2 = 136315650;
  int v3 = "assert";
  __int16 v4 = 2080;
  uint8_t v5 = "fValid";
  __int16 v6 = 2080;
  int v7 = "On call to writeItem client should check if the logger was opened";
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Event: %s\n Condition: %s\n Message: %s", (uint8_t *)&v2, 0x20u);
  if (qword_102489018 == -1) {
    return 1;
  }
  dispatch_once(&qword_102489018, &stru_102337940);
  return 0;
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return __DataStorage.init(bytes:length:)();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t type metadata accessor for __DataStorage()
{
  return type metadata accessor for __DataStorage();
}

uint64_t dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return type metadata accessor for Data.RangeReference();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t ALTimeStamp.cfAbsoluteTimeSec.getter()
{
  return ALTimeStamp.cfAbsoluteTimeSec.getter();
}

uint64_t type metadata accessor for ALTimeStamp()
{
  return type metadata accessor for ALTimeStamp();
}

uint64_t type metadata accessor for ALResultOptions()
{
  return type metadata accessor for ALResultOptions();
}

uint64_t ALWiFiScanResult.accessPoints.getter()
{
  return ALWiFiScanResult.accessPoints.getter();
}

uint64_t type metadata accessor for ALWiFiScanResult()
{
  return type metadata accessor for ALWiFiScanResult();
}

uint64_t ALWiFiNotification.scanResult.getter()
{
  return ALWiFiNotification.scanResult.getter();
}

uint64_t ALWiFiNotification.associatedMac.getter()
{
  return ALWiFiNotification.associatedMac.getter();
}

uint64_t ALWiFiNotification.available.getter()
{
  return ALWiFiNotification.available.getter();
}

uint64_t ALWiFiNotification.simulated.getter()
{
  return ALWiFiNotification.simulated.getter();
}

uint64_t ALWiFiNotification.timestamp.getter()
{
  return ALWiFiNotification.timestamp.getter();
}

uint64_t type metadata accessor for ALWiFiNotification()
{
  return type metadata accessor for ALWiFiNotification();
}

uint64_t ALWiFiScanSingleAccessPoint.mac.getter()
{
  return ALWiFiScanSingleAccessPoint.mac.getter();
}

uint64_t ALWiFiScanSingleAccessPoint.isAph.getter()
{
  return ALWiFiScanSingleAccessPoint.isAph.getter();
}

uint64_t ALWiFiScanSingleAccessPoint.ageSec.getter()
{
  return ALWiFiScanSingleAccessPoint.ageSec.getter();
}

uint64_t ALWiFiScanSingleAccessPoint.rssidB.getter()
{
  return ALWiFiScanSingleAccessPoint.rssidB.getter();
}

uint64_t ALWiFiScanSingleAccessPoint.channel.getter()
{
  return ALWiFiScanSingleAccessPoint.channel.getter();
}

uint64_t ALWiFiScanSingleAccessPoint.isMoving.getter()
{
  return ALWiFiScanSingleAccessPoint.isMoving.getter();
}

uint64_t type metadata accessor for ALWiFiScanSingleAccessPoint()
{
  return type metadata accessor for ALWiFiScanSingleAccessPoint();
}

uint64_t static ArchiveByteStream.decryptionStream(readingFrom:encryptionContext:flags:threadCount:)()
{
  return static ArchiveByteStream.decryptionStream(readingFrom:encryptionContext:flags:threadCount:)();
}

uint64_t static ArchiveByteStream.encryptionStream(writingTo:encryptionContext:flags:threadCount:)()
{
  return static ArchiveByteStream.encryptionStream(writingTo:encryptionContext:flags:threadCount:)();
}

uint64_t static ArchiveByteStream.fileStream(path:mode:options:permissions:)()
{
  return static ArchiveByteStream.fileStream(path:mode:options:permissions:)();
}

uint64_t dispatch thunk of ArchiveByteStream.close()()
{
  return dispatch thunk of ArchiveByteStream.close()();
}

uint64_t static ArchiveByteStream.process(readingFrom:writingTo:)()
{
  return static ArchiveByteStream.process(readingFrom:writingTo:)();
}

uint64_t type metadata accessor for ArchiveByteStream()
{
  return type metadata accessor for ArchiveByteStream();
}

uint64_t static ArchiveCompression.lzfse.getter()
{
  return static ArchiveCompression.lzfse.getter();
}

uint64_t type metadata accessor for ArchiveCompression()
{
  return type metadata accessor for ArchiveCompression();
}

uint64_t dispatch thunk of ArchiveEncryptionContext.setSymmetricKey(_:)()
{
  return dispatch thunk of ArchiveEncryptionContext.setSymmetricKey(_:)();
}

uint64_t ArchiveEncryptionContext.init(from:)()
{
  return ArchiveEncryptionContext.init(from:)();
}

uint64_t static ArchiveEncryptionContext.Profile.hkdf_sha256_aesctr_hmac__symmetric__none.getter()
{
  return static ArchiveEncryptionContext.Profile.hkdf_sha256_aesctr_hmac__symmetric__none.getter();
}

uint64_t type metadata accessor for ArchiveEncryptionContext.Profile()
{
  return type metadata accessor for ArchiveEncryptionContext.Profile();
}

uint64_t ArchiveEncryptionContext.init(profile:compressionAlgorithm:compressionBlockSize:)()
{
  return ArchiveEncryptionContext.init(profile:compressionAlgorithm:compressionBlockSize:)();
}

uint64_t type metadata accessor for ArchiveEncryptionContext()
{
  return type metadata accessor for ArchiveEncryptionContext();
}

uint64_t type metadata accessor for ArchiveFlags()
{
  return type metadata accessor for ArchiveFlags();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t type metadata accessor for FilePath()
{
  return type metadata accessor for FilePath();
}

uint64_t FilePath.init(_:)()
{
  return FilePath.init(_:)();
}

Swift::Bool __swiftcall isAvailable()()
{
  return isAvailable()();
}

uint64_t ALFWiFiScanResultsRequester.init(queue:)()
{
  return ALFWiFiScanResultsRequester.init(queue:)();
}

uint64_t dispatch thunk of ALFWiFiScanResultsRequester.register(callback:intervalSec:)()
{
  return dispatch thunk of ALFWiFiScanResultsRequester.register(callback:intervalSec:)();
}

uint64_t type metadata accessor for ALFWiFiScanResultsRequester()
{
  return type metadata accessor for ALFWiFiScanResultsRequester();
}

uint64_t type metadata accessor for CryptoKitError()
{
  return type metadata accessor for CryptoKitError();
}

uint64_t SymmetricKey.init<A>(data:)()
{
  return SymmetricKey.init<A>(data:)();
}

uint64_t SymmetricKey.init(size:)()
{
  return SymmetricKey.init(size:)();
}

uint64_t type metadata accessor for SymmetricKey()
{
  return type metadata accessor for SymmetricKey();
}

uint64_t static SymmetricKeySize.bits256.getter()
{
  return static SymmetricKeySize.bits256.getter();
}

uint64_t type metadata accessor for SymmetricKeySize()
{
  return type metadata accessor for SymmetricKeySize();
}

uint64_t static AES.GCM.open(_:using:)()
{
  return static AES.GCM.open(_:using:)();
}

uint64_t static AES.GCM.seal<A>(_:using:nonce:)()
{
  return static AES.GCM.seal<A>(_:using:nonce:)();
}

uint64_t AES.GCM.Nonce.init()()
{
  return AES.GCM.Nonce.init()();
}

uint64_t type metadata accessor for AES.GCM.Nonce()
{
  return type metadata accessor for AES.GCM.Nonce();
}

uint64_t AES.GCM.SealedBox.combined.getter()
{
  return AES.GCM.SealedBox.combined.getter();
}

uint64_t AES.GCM.SealedBox.init(combined:)()
{
  return AES.GCM.SealedBox.init(combined:)();
}

uint64_t type metadata accessor for AES.GCM.SealedBox()
{
  return type metadata accessor for AES.GCM.SealedBox();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t ADClientAddValueForScalarKey()
{
  return _ADClientAddValueForScalarKey();
}

uint64_t ADClientPushValueForDistributionKey()
{
  return _ADClientPushValueForDistributionKey();
}

uint64_t ADClientSetValueForScalarKey()
{
  return _ADClientSetValueForScalarKey();
}

uint64_t AWDPostSimpleMetric()
{
  return _AWDPostSimpleMetric();
}

uint64_t AnalyticsSendEvent()
{
  return _AnalyticsSendEvent();
}

uint64_t AnalyticsSendEventLazy()
{
  return _AnalyticsSendEventLazy();
}

uint64_t AnalyticsSendExplodingEventLazy()
{
  return _AnalyticsSendExplodingEventLazy();
}

void AudioServicesPlaySystemSound(SystemSoundID inSystemSoundID)
{
}

uint64_t BKSHIDServicesRequestProximityDetectionMode()
{
  return _BKSHIDServicesRequestProximityDetectionMode();
}

uint64_t BTAccessoryManagerAddCallbacks()
{
  return _BTAccessoryManagerAddCallbacks();
}

uint64_t BTAccessoryManagerDeregisterCustomMessageClient()
{
  return _BTAccessoryManagerDeregisterCustomMessageClient();
}

uint64_t BTAccessoryManagerGetAccessoryInfo()
{
  return _BTAccessoryManagerGetAccessoryInfo();
}

uint64_t BTAccessoryManagerGetDefault()
{
  return _BTAccessoryManagerGetDefault();
}

uint64_t BTAccessoryManagerGetInEarDetectionEnable()
{
  return _BTAccessoryManagerGetInEarDetectionEnable();
}

uint64_t BTAccessoryManagerGetInEarStatus()
{
  return _BTAccessoryManagerGetInEarStatus();
}

uint64_t BTAccessoryManagerGetSpatialAudioPlatformSupport()
{
  return _BTAccessoryManagerGetSpatialAudioPlatformSupport();
}

uint64_t BTAccessoryManagerGetTimeSyncId()
{
  return _BTAccessoryManagerGetTimeSyncId();
}

uint64_t BTAccessoryManagerRegisterCustomMessageClient()
{
  return _BTAccessoryManagerRegisterCustomMessageClient();
}

uint64_t BTAccessoryManagerRemoteTimeSyncEnable()
{
  return _BTAccessoryManagerRemoteTimeSyncEnable();
}

uint64_t BTAccessoryManagerRemoveCallbacks()
{
  return _BTAccessoryManagerRemoveCallbacks();
}

uint64_t BTAccessoryManagerSensorStreamTimeSyncEnable()
{
  return _BTAccessoryManagerSensorStreamTimeSyncEnable();
}

uint64_t BTDeviceAddressFromString()
{
  return _BTDeviceAddressFromString();
}

uint64_t BTDeviceFromAddress()
{
  return _BTDeviceFromAddress();
}

uint64_t BTDeviceGetAddressString()
{
  return _BTDeviceGetAddressString();
}

uint64_t BTDeviceGetConnectedServices()
{
  return _BTDeviceGetConnectedServices();
}

uint64_t BTDeviceGetDefaultName()
{
  return _BTDeviceGetDefaultName();
}

uint64_t BTDeviceGetDeviceClass()
{
  return _BTDeviceGetDeviceClass();
}

uint64_t BTDeviceGetDeviceId()
{
  return _BTDeviceGetDeviceId();
}

uint64_t BTDeviceGetDeviceType()
{
  return _BTDeviceGetDeviceType();
}

uint64_t BTDeviceGetName()
{
  return _BTDeviceGetName();
}

uint64_t BTDeviceIsAppleAudioDevice()
{
  return _BTDeviceIsAppleAudioDevice();
}

uint64_t BTDiscoveryAgentCreate()
{
  return _BTDiscoveryAgentCreate();
}

uint64_t BTDiscoveryAgentStartScan()
{
  return _BTDiscoveryAgentStartScan();
}

uint64_t BTLocalDeviceAddCallbacks()
{
  return _BTLocalDeviceAddCallbacks();
}

uint64_t BTLocalDeviceGetConnectedDevices()
{
  return _BTLocalDeviceGetConnectedDevices();
}

uint64_t BTLocalDeviceGetDefault()
{
  return _BTLocalDeviceGetDefault();
}

uint64_t BTLocalDeviceGetModulePower()
{
  return _BTLocalDeviceGetModulePower();
}

uint64_t BTLocalDeviceSetAFHMap()
{
  return _BTLocalDeviceSetAFHMap();
}

uint64_t BTServiceAddCallbacks()
{
  return _BTServiceAddCallbacks();
}

uint64_t BTSessionAttachWithQueue()
{
  return _BTSessionAttachWithQueue();
}

uint64_t BTSessionDetachWithQueue()
{
  return _BTSessionDetachWithQueue();
}

void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len)
{
}

void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon, unsigned int *nbytes_in, unsigned int *nbytes_out)
{
}

BZFILE *__cdecl BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity, int workFactor)
{
  return _BZ2_bzWriteOpen(bzerror, f, blockSize100k, verbosity, workFactor);
}

uint64_t BiomeLibrary()
{
  return _BiomeLibrary();
}

uint64_t CCCryptorGCMOneshotDecrypt()
{
  return _CCCryptorGCMOneshotDecrypt();
}

uint64_t CCCryptorGCMOneshotEncrypt()
{
  return _CCCryptorGCMOneshotEncrypt();
}

unsigned __int8 *__cdecl CC_MD5(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return _CC_MD5(data, len, md);
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return _CC_SHA1(data, len, md);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return _CC_SHA256(data, len, md);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return _CFAbsoluteTimeGetCurrent();
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return _CFArrayCreate(allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return _CFArrayCreateMutable(allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return _CFArrayCreateMutableCopy(allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return _CFArrayGetCount(theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return _CFArrayGetFirstIndexOfValue(theArray, range, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return _CFArrayGetTypeID();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return _CFArrayGetValueAtIndex(theArray, idx);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return _CFAutorelease(arg);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return _CFBooleanGetTypeID();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return _CFBooleanGetValue(BOOLean);
}

CFArrayRef CFBundleCopyBundleLocalizations(CFBundleRef bundle)
{
  return _CFBundleCopyBundleLocalizations(bundle);
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return _CFBundleCopyBundleURL(bundle);
}

CFArrayRef CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray, CFArrayRef prefArray)
{
  return _CFBundleCopyLocalizationsForPreferences(locArray, prefArray);
}

uint64_t CFBundleCopyLocalizedStringForLocalization()
{
  return _CFBundleCopyLocalizedStringForLocalization();
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return _CFBundleCreate(allocator, bundleURL);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return _CFBundleGetIdentifier(bundle);
}

CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle)
{
  return _CFBundleGetInfoDictionary(bundle);
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return _CFBundleGetValueForInfoDictionaryKey(bundle, key);
}

uint64_t CFCopyHomeDirectoryURLForUser()
{
  return _CFCopyHomeDirectoryURLForUser();
}

uint64_t CFCopyUserName()
{
  return _CFCopyUserName();
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return _CFDataCreate(allocator, bytes, length);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return _CFDataCreateWithBytesNoCopy(allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return _CFDataGetBytePtr(theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return _CFDataGetLength(theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return _CFDataGetTypeID();
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return _CFDateCreate(allocator, at);
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return _CFDateFormatterCreate(allocator, locale, dateStyle, timeStyle);
}

CFStringRef CFDateFormatterCreateStringWithAbsoluteTime(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFAbsoluteTime at)
{
  return _CFDateFormatterCreateStringWithAbsoluteTime(allocator, formatter, at);
}

CFStringRef CFDateFormatterCreateStringWithDate(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFDateRef date)
{
  return _CFDateFormatterCreateStringWithDate(allocator, formatter, date);
}

void CFDateFormatterSetFormat(CFDateFormatterRef formatter, CFStringRef formatString)
{
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  return _CFDateGetAbsoluteTime(theDate);
}

CFTypeID CFDateGetTypeID(void)
{
  return _CFDateGetTypeID();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryContainsKey(theDict, key);
}

Boolean CFDictionaryContainsValue(CFDictionaryRef theDict, const void *value)
{
  return _CFDictionaryContainsValue(theDict, value);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreate(allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return _CFDictionaryCreateCopy(allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreateMutable(allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return _CFDictionaryCreateMutableCopy(allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return _CFDictionaryGetCount(theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return _CFDictionaryGetTypeID();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryGetValue(theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return _CFDictionaryGetValueIfPresent(theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return _CFEqual(cf1, cf2);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return _CFErrorGetCode(err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return _CFErrorGetDomain(err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

uint64_t CFGetUserName()
{
  return _CFGetUserName();
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return _CFLocaleCopyCurrent();
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return _CFLocaleCreate(allocator, localeIdentifier);
}

CFTypeRef CFMakeCollectable(CFTypeRef cf)
{
  return _CFMakeCollectable(cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return _CFNotificationCenterGetDarwinNotifyCenter();
}

CFNotificationCenterRef CFNotificationCenterGetDistributedCenter(void)
{
  return _CFNotificationCenterGetDistributedCenter();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return _CFNotificationCenterGetLocalCenter();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return _CFNumberCreate(allocator, theType, valuePtr);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return _CFNumberGetType(number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return _CFNumberGetTypeID();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return _CFNumberGetValue(number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return _CFNumberIsFloatType(number);
}

uint64_t CFPhoneNumberCreate()
{
  return _CFPhoneNumberCreate();
}

uint64_t CFPhoneNumberCreateString()
{
  return _CFPhoneNumberCreateString();
}

CFArrayRef CFPreferencesCopyKeyList(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return _CFPreferencesCopyKeyList(applicationID, userName, hostName);
}

CFDictionaryRef CFPreferencesCopyMultiple(CFArrayRef keysToFetch, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return _CFPreferencesCopyMultiple(keysToFetch, applicationID, userName, hostName);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return _CFPreferencesCopyValue(key, applicationID, userName, hostName);
}

void CFPreferencesSetMultiple(CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return _CFPreferencesSynchronize(applicationID, userName, hostName);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return _CFPropertyListCreateData(allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateDeepCopy(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption)
{
  return _CFPropertyListCreateDeepCopy(allocator, propertyList, mutabilityOption);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return _CFPropertyListCreateWithData(allocator, data, options, format, error);
}

CFIndex CFPropertyListWrite(CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return _CFPropertyListWrite(propertyList, stream, format, options, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return _CFRetain(cf);
}

void CFRunLoopAddObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode)
{
}

Boolean CFRunLoopContainsObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
  return _CFRunLoopContainsObserver(rl, observer, mode);
}

Boolean CFRunLoopContainsSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  return _CFRunLoopContainsSource(rl, source, mode);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return _CFRunLoopGetCurrent();
}

CFRunLoopObserverRef CFRunLoopObserverCreate(CFAllocatorRef allocator, CFOptionFlags activities, Boolean repeats, CFIndex order, CFRunLoopObserverCallBack callout, CFRunLoopObserverContext *context)
{
  return _CFRunLoopObserverCreate(allocator, activities, repeats, order, callout, context);
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
}

void CFRunLoopRemoveObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopRemoveTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode)
{
}

void CFRunLoopRun(void)
{
}

CFRunLoopSourceRef CFRunLoopSourceCreate(CFAllocatorRef allocator, CFIndex order, CFRunLoopSourceContext *context)
{
  return _CFRunLoopSourceCreate(allocator, order, context);
}

void CFRunLoopSourceInvalidate(CFRunLoopSourceRef source)
{
}

void CFRunLoopSourceSignal(CFRunLoopSourceRef source)
{
}

void CFRunLoopStop(CFRunLoopRef rl)
{
}

CFRunLoopTimerRef CFRunLoopTimerCreate(CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, CFRunLoopTimerCallBack callout, CFRunLoopTimerContext *context)
{
  return _CFRunLoopTimerCreate(allocator, fireDate, interval, flags, order, callout, context);
}

CFRunLoopTimerRef CFRunLoopTimerCreateWithHandler(CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, void *block)
{
  return _CFRunLoopTimerCreateWithHandler(allocator, fireDate, interval, flags, order, block);
}

void CFRunLoopTimerInvalidate(CFRunLoopTimerRef timer)
{
}

void CFRunLoopTimerSetNextFireDate(CFRunLoopTimerRef timer, CFAbsoluteTime fireDate)
{
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
}

void CFShow(CFTypeRef obj)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return _CFStringCompare(theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateStringWithValidatedFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef validFormatSpecifiers, CFStringRef format, CFErrorRef *errorPtr, ...)
{
  return _CFStringCreateStringWithValidatedFormat(alloc, formatOptions, validFormatSpecifiers, format, errorPtr);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return _CFStringCreateWithCString(alloc, cStr, encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return _CFStringCreateWithCStringNoCopy(alloc, cStr, encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return _CFStringCreateWithFormat(alloc, formatOptions, format);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return _CFStringGetBytes(theString, range, encoding, lossByte, isExternalRepresentation, buffer, maxBufLen, usedBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return _CFStringGetCString(theString, buffer, bufferSize, encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return _CFStringGetCStringPtr(theString, encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return _CFStringGetCharacterAtIndex(theString, idx);
}

double CFStringGetDoubleValue(CFStringRef str)
{
  return _CFStringGetDoubleValue(str);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return _CFStringGetIntValue(str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return _CFStringGetLength(theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return _CFStringGetTypeID();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return _CFStringHasPrefix(theString, prefix);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return _CFURLCopyFileSystemPath(anURL, pathStyle);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return _CFURLCreateWithFileSystemPath(allocator, filePath, pathStyle, isDirectory);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return _CFURLCreateWithString(allocator, URLString, baseURL);
}

CFStringRef CFURLGetString(CFURLRef anURL)
{
  return _CFURLGetString(anURL);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return _CFUUIDCreate(alloc);
}

CFUUIDRef CFUUIDCreateFromString(CFAllocatorRef alloc, CFStringRef uuidStr)
{
  return _CFUUIDCreateFromString(alloc, uuidStr);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return _CFUUIDCreateString(alloc, uuid);
}

CFUUIDRef CFUUIDGetConstantUUIDWithBytes(CFAllocatorRef alloc, UInt8 byte0, UInt8 byte1, UInt8 byte2, UInt8 byte3, UInt8 byte4, UInt8 byte5, UInt8 byte6, UInt8 byte7, UInt8 byte8, UInt8 byte9, UInt8 byte10, UInt8 byte11, UInt8 byte12, UInt8 byte13, UInt8 byte14, UInt8 byte15)
{
  return _CFUUIDGetConstantUUIDWithBytes(alloc, byte0, byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8, byte9, byte10, byte11, byte12, byte13, byte14, byte15);
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  CFUUIDBytes v3 = _CFUUIDGetUUIDBytes(uuid);
  uint64_t v2 = *(void *)&v3.byte8;
  uint64_t v1 = *(void *)&v3.byte0;
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

SInt32 CFUserNotificationCancel(CFUserNotificationRef userNotification)
{
  return _CFUserNotificationCancel(userNotification);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return _CFUserNotificationCreate(allocator, timeout, flags, error, dictionary);
}

CFRunLoopSourceRef CFUserNotificationCreateRunLoopSource(CFAllocatorRef allocator, CFUserNotificationRef userNotification, CFUserNotificationCallBack callout, CFIndex order)
{
  return _CFUserNotificationCreateRunLoopSource(allocator, userNotification, callout, order);
}

SInt32 CFUserNotificationDisplayNotice(CFTimeInterval timeout, CFOptionFlags flags, CFURLRef iconURL, CFURLRef soundURL, CFURLRef localizationURL, CFStringRef alertHeader, CFStringRef alertMessage, CFStringRef defaultButtonTitle)
{
  return _CFUserNotificationDisplayNotice(timeout, flags, iconURL, soundURL, localizationURL, alertHeader, alertMessage, defaultButtonTitle);
}

void CFWriteStreamClose(CFWriteStreamRef stream)
{
}

CFTypeRef CFWriteStreamCopyProperty(CFWriteStreamRef stream, CFStreamPropertyKey propertyName)
{
  return _CFWriteStreamCopyProperty(stream, propertyName);
}

CFWriteStreamRef CFWriteStreamCreateWithAllocatedBuffers(CFAllocatorRef alloc, CFAllocatorRef bufferAllocator)
{
  return _CFWriteStreamCreateWithAllocatedBuffers(alloc, bufferAllocator);
}

Boolean CFWriteStreamOpen(CFWriteStreamRef stream)
{
  return _CFWriteStreamOpen(stream);
}

uint64_t CKErrorIsCode()
{
  return _CKErrorIsCode();
}

uint64_t CLClientCreateWithBundleIdentifierAndPathOnSilo()
{
  return _CLClientCreateWithBundleIdentifierAndPathOnSilo();
}

uint64_t CLClientGetAuthorizationStatus()
{
  return _CLClientGetAuthorizationStatus();
}

uint64_t CLClientGetDistanceCoordinates()
{
  return _CLClientGetDistanceCoordinates();
}

uint64_t CLClientGetError()
{
  return _CLClientGetError();
}

uint64_t CLClientGetLocation()
{
  return _CLClientGetLocation();
}

uint64_t CLClientInvalidate()
{
  return _CLClientInvalidate();
}

uint64_t CLClientSetAllowsMapCorrection()
{
  return _CLClientSetAllowsMapCorrection();
}

uint64_t CLClientSetMatchInfoEnabled()
{
  return _CLClientSetMatchInfoEnabled();
}

uint64_t CLClientStartLocationUpdates()
{
  return _CLClientStartLocationUpdates();
}

uint64_t CLClientStopLocationUpdates()
{
  return _CLClientStopLocationUpdates();
}

uint64_t CLGetUncertaintyScaleFactors()
{
  return _CLGetUncertaintyScaleFactors();
}

uint64_t CLLocationCoordinate2DGetDistanceFrom()
{
  return _CLLocationCoordinate2DGetDistanceFrom();
}

BOOL CLLocationCoordinate2DIsValid(CLLocationCoordinate2D coord)
{
  return _CLLocationCoordinate2DIsValid(coord);
}

CLLocationCoordinate2D CLLocationCoordinate2DMake(CLLocationDegrees latitude, CLLocationDegrees longitude)
{
  CLLocationCoordinate2D v4 = _CLLocationCoordinate2DMake(latitude, longitude);
  double v3 = v4.longitude;
  double v2 = v4.latitude;
  result.longitude = v3;
  result.latitude = v2;
  return result;
}

uint64_t CLProfilingIdentify()
{
  return _CLProfilingIdentify();
}

uint64_t CLWriteStackshot()
{
  return _CLWriteStackshot();
}

uint64_t CPCancelWakeAtDateWithIdentifier()
{
  return _CPCancelWakeAtDateWithIdentifier();
}

uint64_t CPPowerAssertionCreate()
{
  return _CPPowerAssertionCreate();
}

uint64_t CPScheduleWakeAtDateWithIdentifier()
{
  return _CPScheduleWakeAtDateWithIdentifier();
}

uint64_t CPSqliteDatabaseDelete()
{
  return _CPSqliteDatabaseDelete();
}

uint64_t DeviceIdentityIssueClientCertificateWithCompletion()
{
  return _DeviceIdentityIssueClientCertificateWithCompletion();
}

uint64_t GEOCalculateDistance()
{
  return _GEOCalculateDistance();
}

uint64_t GEOClosestCoordinateOnLineSegmentFromCoordinate()
{
  return _GEOClosestCoordinateOnLineSegmentFromCoordinate();
}

uint64_t GEOCoordinateRegionMakeWithDistance()
{
  return _GEOCoordinateRegionMakeWithDistance();
}

uint64_t GEOGetDefaultInteger()
{
  return _GEOGetDefaultInteger();
}

uint64_t GEOResetGeoCodecsAllocator()
{
  return _GEOResetGeoCodecsAllocator();
}

uint64_t GEOURLString()
{
  return _GEOURLString();
}

uint64_t HKHealthWrapCertificateFromString()
{
  return _HKHealthWrapCertificateFromString();
}

uint64_t IDSCopyIDForDevice()
{
  return _IDSCopyIDForDevice();
}

uint64_t IDSCopyIDForPhoneNumber()
{
  return _IDSCopyIDForPhoneNumber();
}

uint64_t IDSCopyLocalDeviceUniqueID()
{
  return _IDSCopyLocalDeviceUniqueID();
}

IOReturn IOAllowPowerChange(io_connect_t kernelPort, intptr_t notificationID)
{
  return _IOAllowPowerChange(kernelPort, notificationID);
}

kern_return_t IOConnectCallScalarMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, uint64_t *output, uint32_t *outputCnt)
{
  return _IOConnectCallScalarMethod(connection, selector, input, inputCnt, output, outputCnt);
}

kern_return_t IOCreatePlugInInterfaceForService(io_service_t service, CFUUIDRef pluginType, CFUUIDRef interfaceType, IOCFPlugInInterface ***theInterface, SInt32 *theScore)
{
  return _IOCreatePlugInInterfaceForService(service, pluginType, interfaceType, theInterface, theScore);
}

IOReturn IODeregisterForSystemPower(io_object_t *notifier)
{
  return _IODeregisterForSystemPower(notifier);
}

kern_return_t IODestroyPlugInInterface(IOCFPlugInInterface **interface)
{
  return _IODestroyPlugInInterface(interface);
}

uint64_t IOHIDEventConformsTo()
{
  return _IOHIDEventConformsTo();
}

uint64_t IOHIDEventGetChildren()
{
  return _IOHIDEventGetChildren();
}

uint64_t IOHIDEventGetDataValue()
{
  return _IOHIDEventGetDataValue();
}

uint64_t IOHIDEventGetDoubleValue()
{
  return _IOHIDEventGetDoubleValue();
}

uint64_t IOHIDEventGetFloatValue()
{
  return _IOHIDEventGetFloatValue();
}

uint64_t IOHIDEventGetIntegerValue()
{
  return _IOHIDEventGetIntegerValue();
}

uint64_t IOHIDEventGetTimeStamp()
{
  return _IOHIDEventGetTimeStamp();
}

uint64_t IOHIDEventGetType()
{
  return _IOHIDEventGetType();
}

uint64_t IOHIDEventGetVendorDefinedData()
{
  return _IOHIDEventGetVendorDefinedData();
}

CFArrayRef IOHIDEventSystemClientCopyServices(IOHIDEventSystemClientRef client)
{
  return _IOHIDEventSystemClientCopyServices(client);
}

uint64_t IOHIDEventSystemClientCreateWithType()
{
  return _IOHIDEventSystemClientCreateWithType();
}

uint64_t IOHIDEventSystemClientRegisterDeviceMatchingCallback()
{
  return _IOHIDEventSystemClientRegisterDeviceMatchingCallback();
}

uint64_t IOHIDEventSystemClientRegisterEventBlock()
{
  return _IOHIDEventSystemClientRegisterEventBlock();
}

uint64_t IOHIDEventSystemClientRegisterEventCallback()
{
  return _IOHIDEventSystemClientRegisterEventCallback();
}

uint64_t IOHIDEventSystemClientRegisterResetCallback()
{
  return _IOHIDEventSystemClientRegisterResetCallback();
}

uint64_t IOHIDEventSystemClientScheduleWithDispatchQueue()
{
  return _IOHIDEventSystemClientScheduleWithDispatchQueue();
}

uint64_t IOHIDEventSystemClientScheduleWithRunLoop()
{
  return _IOHIDEventSystemClientScheduleWithRunLoop();
}

uint64_t IOHIDEventSystemClientSetMatching()
{
  return _IOHIDEventSystemClientSetMatching();
}

uint64_t IOHIDEventSystemClientSetMatchingMultiple()
{
  return _IOHIDEventSystemClientSetMatchingMultiple();
}

Boolean IOHIDEventSystemClientSetProperty(IOHIDEventSystemClientRef client, CFStringRef key, CFTypeRef property)
{
  return _IOHIDEventSystemClientSetProperty(client, key, property);
}

uint64_t IOHIDEventSystemClientUnregisterDeviceMatchingCallback()
{
  return _IOHIDEventSystemClientUnregisterDeviceMatchingCallback();
}

uint64_t IOHIDEventSystemClientUnregisterEventCallback()
{
  return _IOHIDEventSystemClientUnregisterEventCallback();
}

uint64_t IOHIDEventSystemClientUnregisterResetCallback()
{
  return _IOHIDEventSystemClientUnregisterResetCallback();
}

uint64_t IOHIDEventSystemClientUnscheduleFromDispatchQueue()
{
  return _IOHIDEventSystemClientUnscheduleFromDispatchQueue();
}

uint64_t IOHIDEventSystemClientUnscheduleWithRunLoop()
{
  return _IOHIDEventSystemClientUnscheduleWithRunLoop();
}

BOOLean_t IOHIDServiceClientConformsTo(IOHIDServiceClientRef service, uint32_t usagePage, uint32_t usage)
{
  return _IOHIDServiceClientConformsTo(service, usagePage, usage);
}

CFTypeRef IOHIDServiceClientCopyProperty(IOHIDServiceClientRef service, CFStringRef key)
{
  return _IOHIDServiceClientCopyProperty(service, key);
}

uint64_t IOHIDServiceClientFastPathCopyEventWithStatus()
{
  return _IOHIDServiceClientFastPathCopyEventWithStatus();
}

uint64_t IOHIDServiceClientFastPathInit()
{
  return _IOHIDServiceClientFastPathInit();
}

uint64_t IOHIDServiceClientFastPathInvalidate()
{
  return _IOHIDServiceClientFastPathInvalidate();
}

CFTypeRef IOHIDServiceClientGetRegistryID(IOHIDServiceClientRef service)
{
  return _IOHIDServiceClientGetRegistryID(service);
}

uint64_t IOHIDServiceClientRegisterRemovalCallback()
{
  return _IOHIDServiceClientRegisterRemovalCallback();
}

Boolean IOHIDServiceClientSetProperty(IOHIDServiceClientRef service, CFStringRef key, CFTypeRef property)
{
  return _IOHIDServiceClientSetProperty(service, key, property);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return _IOIteratorNext(iterator);
}

kern_return_t IOMainPort(mach_port_t bootstrapPort, mach_port_t *mainPort)
{
  return _IOMainPort(bootstrapPort, mainPort);
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return _IONotificationPortCreate(mainPort);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
}

CFRunLoopSourceRef IONotificationPortGetRunLoopSource(IONotificationPortRef notify)
{
  return _IONotificationPortGetRunLoopSource(notify);
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
}

CFStringRef IOObjectCopyClass(io_object_t object)
{
  return _IOObjectCopyClass(object);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return _IOObjectRelease(object);
}

IOReturn IOPMAssertionCreateWithDescription(CFStringRef AssertionType, CFStringRef Name, CFStringRef Details, CFStringRef HumanReadableReason, CFStringRef LocalizationBundlePath, CFTimeInterval Timeout, CFStringRef TimeoutAction, IOPMAssertionID *AssertionID)
{
  return _IOPMAssertionCreateWithDescription(AssertionType, Name, Details, HumanReadableReason, LocalizationBundlePath, Timeout, TimeoutAction, AssertionID);
}

IOReturn IOPMAssertionCreateWithName(CFStringRef AssertionType, IOPMAssertionLevel AssertionLevel, CFStringRef AssertionName, IOPMAssertionID *AssertionID)
{
  return _IOPMAssertionCreateWithName(AssertionType, AssertionLevel, AssertionName, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return _IOPMAssertionRelease(AssertionID);
}

IOReturn IOPMCancelScheduledPowerEvent(CFDateRef time_to_wake, CFStringRef my_id, CFStringRef type)
{
  return _IOPMCancelScheduledPowerEvent(time_to_wake, my_id, type);
}

IOReturn IOPMSchedulePowerEvent(CFDateRef time_to_wake, CFStringRef my_id, CFStringRef type)
{
  return _IOPMSchedulePowerEvent(time_to_wake, my_id, type);
}

uint64_t IOPMScheduleUserActivityLevelNotificationWithTimeout()
{
  return _IOPMScheduleUserActivityLevelNotificationWithTimeout();
}

uint64_t IOPMUnregisterNotification()
{
  return _IOPMUnregisterNotification();
}

uint64_t IOPSDrawingUnlimitedPower()
{
  return _IOPSDrawingUnlimitedPower();
}

uint64_t IOPSGetPercentRemaining()
{
  return _IOPSGetPercentRemaining();
}

io_connect_t IORegisterForSystemPower(void *refcon, IONotificationPortRef *thePortRef, IOServiceInterestCallback callback, io_object_t *notifier)
{
  return _IORegisterForSystemPower(refcon, thePortRef, callback, notifier);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return _IORegistryEntryCreateCFProperty(entry, key, allocator, options);
}

io_registry_entry_t IORegistryEntryFromPath(mach_port_t mainPort, const io_string_t path)
{
  return _IORegistryEntryFromPath(mainPort, path);
}

kern_return_t IORegistryEntryGetChildEntry(io_registry_entry_t entry, const io_name_t plane, io_registry_entry_t *child)
{
  return _IORegistryEntryGetChildEntry(entry, plane, child);
}

kern_return_t IORegistryEntryGetChildIterator(io_registry_entry_t entry, const io_name_t plane, io_iterator_t *iterator)
{
  return _IORegistryEntryGetChildIterator(entry, plane, iterator);
}

kern_return_t IORegistryEntryGetName(io_registry_entry_t entry, io_name_t name)
{
  return _IORegistryEntryGetName(entry, name);
}

kern_return_t IORegistryEntryGetParentEntry(io_registry_entry_t entry, const io_name_t plane, io_registry_entry_t *parent)
{
  return _IORegistryEntryGetParentEntry(entry, plane, parent);
}

kern_return_t IORegistryEntryGetRegistryEntryID(io_registry_entry_t entry, uint64_t *entryID)
{
  return _IORegistryEntryGetRegistryEntryID(entry, entryID);
}

CFMutableDictionaryRef IORegistryEntryIDMatching(uint64_t entryID)
{
  return _IORegistryEntryIDMatching(entryID);
}

kern_return_t IOServiceAddInterestNotification(IONotificationPortRef notifyPort, io_service_t service, const io_name_t interestType, IOServiceInterestCallback callback, void *refCon, io_object_t *notification)
{
  return _IOServiceAddInterestNotification(notifyPort, service, interestType, callback, refCon, notification);
}

kern_return_t IOServiceAddMatchingNotification(IONotificationPortRef notifyPort, const io_name_t notificationType, CFDictionaryRef matching, IOServiceMatchingCallback callback, void *refCon, io_iterator_t *notification)
{
  return _IOServiceAddMatchingNotification(notifyPort, notificationType, matching, callback, refCon, notification);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return _IOServiceClose(connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return _IOServiceGetMatchingService(mainPort, matching);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return _IOServiceGetMatchingServices(mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return _IOServiceMatching(name);
}

CFMutableDictionaryRef IOServiceNameMatching(const char *name)
{
  return _IOServiceNameMatching(name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return _IOServiceOpen(service, owningTask, type, connect);
}

uint64_t IPConfigurationServiceCreate()
{
  return _IPConfigurationServiceCreate();
}

uint64_t MGCopyAnswer()
{
  return _MGCopyAnswer();
}

uint64_t MGGetBoolAnswer()
{
  return _MGGetBoolAnswer();
}

uint64_t MGGetSInt32Answer()
{
  return _MGGetSInt32Answer();
}

uint64_t MGIsDeviceOfType()
{
  return _MGIsDeviceOfType();
}

uint64_t MGIsDeviceOneOfType()
{
  return _MGIsDeviceOneOfType();
}

uint64_t MKBDeviceFormattedForContentProtection()
{
  return _MKBDeviceFormattedForContentProtection();
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return _MKBDeviceUnlockedSinceBoot();
}

uint64_t MKBGetDeviceLockState()
{
  return _MKBGetDeviceLockState();
}

uint64_t MKBUserTypeDeviceMode()
{
  return _MKBUserTypeDeviceMode();
}

uint64_t MapsFeature_RemoveDelegateListenerForAllKeys()
{
  return _MapsFeature_RemoveDelegateListenerForAllKeys();
}

uint64_t NRWatchOSVersionForRemoteDevice()
{
  return _NRWatchOSVersionForRemoteDevice();
}

Class NSClassFromString(NSString *aClassName)
{
  return _NSClassFromString(aClassName);
}

void NSLog(NSString *format, ...)
{
}

uint64_t NSPopAutoreleasePool()
{
  return _NSPopAutoreleasePool();
}

uint64_t NSPushAutoreleasePool()
{
  return _NSPushAutoreleasePool();
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return _NSSearchPathForDirectoriesInDomains(directory, domainMask, expandTilde);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return _NSSelectorFromString(aSelectorName);
}

uint64_t NSStringFromBLSAlwaysOnSuppressionReason()
{
  return _NSStringFromBLSAlwaysOnSuppressionReason();
}

uint64_t NSStringFromBLSBacklightChangeSourceEvent()
{
  return _NSStringFromBLSBacklightChangeSourceEvent();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

uint64_t NSStringFromRBSTaskState()
{
  return _NSStringFromRBSTaskState();
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return _NSStringFromSelector(aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return _NSTemporaryDirectory();
}

uint64_t OSThermalNotificationCurrentLevel()
{
  return _OSThermalNotificationCurrentLevel();
}

uint64_t PAImplicitClientIdentityForBundle()
{
  return _PAImplicitClientIdentityForBundle();
}

uint64_t PBDataWriterWriteBOOLField()
{
  return _PBDataWriterWriteBOOLField();
}

uint64_t PBDataWriterWriteDoubleField()
{
  return _PBDataWriterWriteDoubleField();
}

uint64_t PBDataWriterWriteFloatField()
{
  return _PBDataWriterWriteFloatField();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return _PBDataWriterWriteInt32Field();
}

uint64_t PBDataWriterWriteInt64Field()
{
  return _PBDataWriterWriteInt64Field();
}

uint64_t PBDataWriterWriteStringField()
{
  return _PBDataWriterWriteStringField();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return _PBDataWriterWriteSubmessage();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return _PBDataWriterWriteUint32Field();
}

uint64_t PBDataWriterWriteUint64Field()
{
  return _PBDataWriterWriteUint64Field();
}

uint64_t PBReaderPlaceMark()
{
  return _PBReaderPlaceMark();
}

uint64_t PBReaderReadData()
{
  return _PBReaderReadData();
}

uint64_t PBReaderReadString()
{
  return _PBReaderReadString();
}

uint64_t PBReaderRecallMark()
{
  return _PBReaderRecallMark();
}

uint64_t PBReaderSkipValueWithTag()
{
  return _PBReaderSkipValueWithTag();
}

uint64_t PBRepeatedDoubleAdd()
{
  return _PBRepeatedDoubleAdd();
}

uint64_t PBRepeatedDoubleClear()
{
  return _PBRepeatedDoubleClear();
}

uint64_t PBRepeatedDoubleCopy()
{
  return _PBRepeatedDoubleCopy();
}

uint64_t PBRepeatedDoubleHash()
{
  return _PBRepeatedDoubleHash();
}

uint64_t PBRepeatedDoubleNSArray()
{
  return _PBRepeatedDoubleNSArray();
}

uint64_t PBRepeatedInt32Add()
{
  return _PBRepeatedInt32Add();
}

uint64_t PBRepeatedInt32Clear()
{
  return _PBRepeatedInt32Clear();
}

uint64_t PBRepeatedInt32Copy()
{
  return _PBRepeatedInt32Copy();
}

uint64_t PBRepeatedInt32Hash()
{
  return _PBRepeatedInt32Hash();
}

uint64_t PBRepeatedInt32IsEqual()
{
  return _PBRepeatedInt32IsEqual();
}

uint64_t PBRepeatedUInt64Add()
{
  return _PBRepeatedUInt64Add();
}

uint64_t PBRepeatedUInt64Clear()
{
  return _PBRepeatedUInt64Clear();
}

uint64_t PBRepeatedUInt64Copy()
{
  return _PBRepeatedUInt64Copy();
}

uint64_t PBRepeatedUInt64Hash()
{
  return _PBRepeatedUInt64Hash();
}

uint64_t PBRepeatedUInt64IsEqual()
{
  return _PBRepeatedUInt64IsEqual();
}

uint64_t PBRepeatedUInt64NSArray()
{
  return _PBRepeatedUInt64NSArray();
}

uint64_t PLLogRegisteredEvent()
{
  return _PLLogRegisteredEvent();
}

uint64_t PNCopyBestGuessCountryCodeForNumber()
{
  return _PNCopyBestGuessCountryCodeForNumber();
}

uint64_t RDUpdateCountryCodeFromPeerInfo()
{
  return _RDUpdateCountryCodeFromPeerInfo();
}

uint64_t RDUpdateCountryCodeInfoFromLocation()
{
  return _RDUpdateCountryCodeInfoFromLocation();
}

uint64_t SBApplicationStateEndGeneratingChangeNotifications()
{
  return _SBApplicationStateEndGeneratingChangeNotifications();
}

uint64_t SBSCopyBundleInfoValueForKeyAndProcessID()
{
  return _SBSCopyBundleInfoValueForKeyAndProcessID();
}

uint64_t SBSGetApplicationState()
{
  return _SBSGetApplicationState();
}

CFPropertyListRef SCDynamicStoreCopyValue(SCDynamicStoreRef store, CFStringRef key)
{
  return _SCDynamicStoreCopyValue(store, key);
}

SCDynamicStoreRef SCDynamicStoreCreate(CFAllocatorRef allocator, CFStringRef name, SCDynamicStoreCallBack callout, SCDynamicStoreContext *context)
{
  return _SCDynamicStoreCreate(allocator, name, callout, context);
}

CFRunLoopSourceRef SCDynamicStoreCreateRunLoopSource(CFAllocatorRef allocator, SCDynamicStoreRef store, CFIndex order)
{
  return _SCDynamicStoreCreateRunLoopSource(allocator, store, order);
}

Boolean SCDynamicStoreSetNotificationKeys(SCDynamicStoreRef store, CFArrayRef keys, CFArrayRef patterns)
{
  return _SCDynamicStoreSetNotificationKeys(store, keys, patterns);
}

SCNetworkReachabilityRef SCNetworkReachabilityCreateWithAddress(CFAllocatorRef allocator, const sockaddr *address)
{
  return _SCNetworkReachabilityCreateWithAddress(allocator, address);
}

Boolean SCNetworkReachabilityGetFlags(SCNetworkReachabilityRef target, SCNetworkReachabilityFlags *flags)
{
  return _SCNetworkReachabilityGetFlags(target, flags);
}

Boolean SCNetworkReachabilityScheduleWithRunLoop(SCNetworkReachabilityRef target, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  return _SCNetworkReachabilityScheduleWithRunLoop(target, runLoop, runLoopMode);
}

Boolean SCNetworkReachabilitySetCallback(SCNetworkReachabilityRef target, SCNetworkReachabilityCallBack callout, SCNetworkReachabilityContext *context)
{
  return _SCNetworkReachabilitySetCallback(target, callout, context);
}

Boolean SCNetworkReachabilityUnscheduleFromRunLoop(SCNetworkReachabilityRef target, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  return _SCNetworkReachabilityUnscheduleFromRunLoop(target, runLoop, runLoopMode);
}

SCPreferencesRef SCPreferencesCreate(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID)
{
  return _SCPreferencesCreate(allocator, name, prefsID);
}

CFPropertyListRef SCPreferencesGetValue(SCPreferencesRef prefs, CFStringRef key)
{
  return _SCPreferencesGetValue(prefs, key);
}

Boolean SCPreferencesScheduleWithRunLoop(SCPreferencesRef prefs, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  return _SCPreferencesScheduleWithRunLoop(prefs, runLoop, runLoopMode);
}

Boolean SCPreferencesSetCallback(SCPreferencesRef prefs, SCPreferencesCallBack callout, SCPreferencesContext *context)
{
  return _SCPreferencesSetCallback(prefs, callout, context);
}

void SCPreferencesSynchronize(SCPreferencesRef prefs)
{
}

Boolean SCPreferencesUnscheduleFromRunLoop(SCPreferencesRef prefs, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  return _SCPreferencesUnscheduleFromRunLoop(prefs, runLoop, runLoopMode);
}

uint64_t SSActiveAccountIsManagedAppleID()
{
  return _SSActiveAccountIsManagedAppleID();
}

uint64_t SecCertificateCopyCommonNames()
{
  return _SecCertificateCopyCommonNames();
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return _SecCertificateCopyData(certificate);
}

SecKeyRef SecCertificateCopyKey(SecCertificateRef certificate)
{
  return _SecCertificateCopyKey(certificate);
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return _SecCertificateCreateWithData(allocator, data);
}

uint64_t SecCertificateIsValid()
{
  return _SecCertificateIsValid();
}

uint64_t SecCertificateNotValidAfter()
{
  return _SecCertificateNotValidAfter();
}

uint64_t SecCertificateNotValidBefore()
{
  return _SecCertificateNotValidBefore();
}

CFStringRef SecCopyErrorMessageString(OSStatus status, void *reserved)
{
  return _SecCopyErrorMessageString(status, reserved);
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return _SecItemAdd(attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return _SecItemCopyMatching(query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return _SecItemDelete(query);
}

OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate)
{
  return _SecItemUpdate(query, attributesToUpdate);
}

CFDataRef SecKeyCopyExternalRepresentation(SecKeyRef key, CFErrorRef *error)
{
  return _SecKeyCopyExternalRepresentation(key, error);
}

uint64_t SecKeyCreateEncryptedDataWithParameters()
{
  return _SecKeyCreateEncryptedDataWithParameters();
}

CFDataRef SecKeyCreateSignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return _SecKeyCreateSignature(key, algorithm, dataToSign, error);
}

Boolean SecKeyVerifySignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef signedData, CFDataRef signature, CFErrorRef *error)
{
  return _SecKeyVerifySignature(key, algorithm, signedData, signature, error);
}

uint64_t SecPolicyCreateApplePinned()
{
  return _SecPolicyCreateApplePinned();
}

uint64_t SecPolicyCreateAppleSSLPinned()
{
  return _SecPolicyCreateAppleSSLPinned();
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return _SecRandomCopyBytes(rnd, count, bytes);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return _SecTaskCopyValueForEntitlement(task, entitlement, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return _SecTaskCreateWithAuditToken(allocator, token);
}

OSStatus SecTrustCreateWithCertificates(CFTypeRef certificates, CFTypeRef policies, SecTrustRef *trust)
{
  return _SecTrustCreateWithCertificates(certificates, policies, trust);
}

BOOL SecTrustEvaluateWithError(SecTrustRef trust, CFErrorRef *error)
{
  return _SecTrustEvaluateWithError(trust, error);
}

OSStatus SecTrustGetTrustResult(SecTrustRef trust, SecTrustResultType *result)
{
  return _SecTrustGetTrustResult(trust, result);
}

OSStatus SecTrustSetNetworkFetchAllowed(SecTrustRef trust, Boolean allowFetch)
{
  return _SecTrustSetNetworkFetchAllowed(trust, allowFetch);
}

OSStatus SecTrustSetPolicies(SecTrustRef trust, CFTypeRef policies)
{
  return _SecTrustSetPolicies(trust, policies);
}

uint64_t TCCAccessCheckAuditToken()
{
  return _TCCAccessCheckAuditToken();
}

uint64_t TCCAccessGetOverride()
{
  return _TCCAccessGetOverride();
}

uint64_t TMConvertTicksToSeconds()
{
  return _TMConvertTicksToSeconds();
}

uint64_t TMGetKernelMonotonicClock()
{
  return _TMGetKernelMonotonicClock();
}

uint64_t TMGetRTCResetCount()
{
  return _TMGetRTCResetCount();
}

uint64_t TMGetReferenceTime()
{
  return _TMGetReferenceTime();
}

uint64_t TMIsBBTimeActive()
{
  return _TMIsBBTimeActive();
}

uint64_t TMProvideBBTime()
{
  return _TMProvideBBTime();
}

uint64_t TMSetSourceTime()
{
  return _TMSetSourceTime();
}

uint64_t TUISOCountryCodeForMCC()
{
  return _TUISOCountryCodeForMCC();
}

uint64_t TelephonyBasebandAPTimeSync()
{
  return _TelephonyBasebandAPTimeSync();
}

uint64_t TelephonyBasebandCreateController()
{
  return _TelephonyBasebandCreateController();
}

uint64_t TelephonyBasebandPCITransportCreate()
{
  return _TelephonyBasebandPCITransportCreate();
}

uint64_t TelephonyBasebandPCITransportDeregisterTimeEvent()
{
  return _TelephonyBasebandPCITransportDeregisterTimeEvent();
}

uint64_t TelephonyBasebandPCITransportInitParameters()
{
  return _TelephonyBasebandPCITransportInitParameters();
}

uint64_t TelephonyBasebandPCITransportRegisterTimeEvent()
{
  return _TelephonyBasebandPCITransportRegisterTimeEvent();
}

uint64_t TelephonyBasebandPCITransportTimesync()
{
  return _TelephonyBasebandPCITransportTimesync();
}

uint64_t TelephonyUtilTransportFree()
{
  return _TelephonyUtilTransportFree();
}

uint64_t UARPAssetDownloadStatusToString()
{
  return _UARPAssetDownloadStatusToString();
}

uint64_t UARPAssetLocationTypeToString()
{
  return _UARPAssetLocationTypeToString();
}

uint64_t UARPFirmwareApplicationStatusToString()
{
  return _UARPFirmwareApplicationStatusToString();
}

uint64_t UARPFirmwareStagingCompletionStatusToString()
{
  return _UARPFirmwareStagingCompletionStatusToString();
}

uint64_t WiFiDeviceClientCopyCurrentNetwork()
{
  return _WiFiDeviceClientCopyCurrentNetwork();
}

uint64_t WiFiDeviceClientCopyHostedNetworks()
{
  return _WiFiDeviceClientCopyHostedNetworks();
}

uint64_t WiFiDeviceClientCopyProperty()
{
  return _WiFiDeviceClientCopyProperty();
}

uint64_t WiFiDeviceClientGetInterfaceName()
{
  return _WiFiDeviceClientGetInterfaceName();
}

uint64_t WiFiDeviceClientGetPower()
{
  return _WiFiDeviceClientGetPower();
}

uint64_t WiFiDeviceClientGetTypeID()
{
  return _WiFiDeviceClientGetTypeID();
}

uint64_t WiFiDeviceClientRegister24GHzNetworkInCriticalStateCallback()
{
  return _WiFiDeviceClientRegister24GHzNetworkInCriticalStateCallback();
}

uint64_t WiFiDeviceClientRegisterBgScanSuspendResumeCallback()
{
  return _WiFiDeviceClientRegisterBgScanSuspendResumeCallback();
}

uint64_t WiFiDeviceClientRegisterBssidChangeCallback()
{
  return _WiFiDeviceClientRegisterBssidChangeCallback();
}

uint64_t WiFiDeviceClientRegisterExtendedLinkCallback()
{
  return _WiFiDeviceClientRegisterExtendedLinkCallback();
}

uint64_t WiFiDeviceClientRegisterLQMCallback()
{
  return _WiFiDeviceClientRegisterLQMCallback();
}

uint64_t WiFiDeviceClientRegisterPowerCallback()
{
  return _WiFiDeviceClientRegisterPowerCallback();
}

uint64_t WiFiDeviceClientRegisterRangingReportCallback()
{
  return _WiFiDeviceClientRegisterRangingReportCallback();
}

uint64_t WiFiDeviceClientRegisterResumeScanCallback()
{
  return _WiFiDeviceClientRegisterResumeScanCallback();
}

uint64_t WiFiDeviceClientRegisterScanUpdateCallback()
{
  return _WiFiDeviceClientRegisterScanUpdateCallback();
}

uint64_t WiFiDeviceClientScanAsync()
{
  return _WiFiDeviceClientScanAsync();
}

uint64_t WiFiDeviceClientSetProperty()
{
  return _WiFiDeviceClientSetProperty();
}

uint64_t WiFiDeviceClientSetRangeable()
{
  return _WiFiDeviceClientSetRangeable();
}

uint64_t WiFiManagerClientCopyDevices()
{
  return _WiFiManagerClientCopyDevices();
}

uint64_t WiFiManagerClientCreate()
{
  return _WiFiManagerClientCreate();
}

uint64_t WiFiManagerClientDisable()
{
  return _WiFiManagerClientDisable();
}

uint64_t WiFiManagerClientEnable()
{
  return _WiFiManagerClientEnable();
}

uint64_t WiFiManagerClientGetWoWState()
{
  return _WiFiManagerClientGetWoWState();
}

uint64_t WiFiManagerClientQuiesceWiFi()
{
  return _WiFiManagerClientQuiesceWiFi();
}

uint64_t WiFiManagerClientRegisterBackgroundScanCacheCallback()
{
  return _WiFiManagerClientRegisterBackgroundScanCacheCallback();
}

uint64_t WiFiManagerClientRegisterBackgroundScanCallback()
{
  return _WiFiManagerClientRegisterBackgroundScanCallback();
}

uint64_t WiFiManagerClientRegisterDeviceAttachmentCallback()
{
  return _WiFiManagerClientRegisterDeviceAttachmentCallback();
}

uint64_t WiFiManagerClientRegisterServerRestartCallback()
{
  return _WiFiManagerClientRegisterServerRestartCallback();
}

uint64_t WiFiManagerClientRegisterWowStateChangedCallback()
{
  return _WiFiManagerClientRegisterWowStateChangedCallback();
}

uint64_t WiFiManagerClientScheduleWithRunLoop()
{
  return _WiFiManagerClientScheduleWithRunLoop();
}

uint64_t WiFiManagerClientSetBGScanCacheState()
{
  return _WiFiManagerClientSetBGScanCacheState();
}

uint64_t WiFiManagerClientSetPower()
{
  return _WiFiManagerClientSetPower();
}

uint64_t WiFiManagerClientUnscheduleFromRunLoop()
{
  return _WiFiManagerClientUnscheduleFromRunLoop();
}

uint64_t WiFiNetworkCreate()
{
  return _WiFiNetworkCreate();
}

uint64_t WiFiNetworkGetChannel()
{
  return _WiFiNetworkGetChannel();
}

uint64_t WiFiNetworkGetIntProperty()
{
  return _WiFiNetworkGetIntProperty();
}

uint64_t WiFiNetworkGetOperatingBand()
{
  return _WiFiNetworkGetOperatingBand();
}

uint64_t WiFiNetworkGetProperty()
{
  return _WiFiNetworkGetProperty();
}

uint64_t WiFiNetworkGetTypeID()
{
  return _WiFiNetworkGetTypeID();
}

uint64_t WiFiNetworkIsApplePersonalHotspot()
{
  return _WiFiNetworkIsApplePersonalHotspot();
}

uint64_t _AXSMotionCuesMode()
{
  return __AXSMotionCuesMode();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFBundleCopyBundleURLForExecutableURL()
{
  return __CFBundleCopyBundleURLForExecutableURL();
}

uint64_t _CFBundleCreateUnique()
{
  return __CFBundleCreateUnique();
}

uint64_t _CFCopyServerVersionDictionary()
{
  return __CFCopyServerVersionDictionary();
}

uint64_t _CFCopySystemVersionDictionary()
{
  return __CFCopySystemVersionDictionary();
}

uint64_t _CFGetProgname()
{
  return __CFGetProgname();
}

uint64_t _CFRunLoopSetPerCalloutAutoreleasepoolEnabled()
{
  return __CFRunLoopSetPerCalloutAutoreleasepoolEnabled();
}

uint64_t _CTServerConnectionAddIdentifierException()
{
  return __CTServerConnectionAddIdentifierException();
}

uint64_t _CTServerConnectionAddToRunLoop()
{
  return __CTServerConnectionAddToRunLoop();
}

uint64_t _CTServerConnectionCellMonitorCopyCellInfo()
{
  return __CTServerConnectionCellMonitorCopyCellInfo();
}

uint64_t _CTServerConnectionCopyCountryCode()
{
  return __CTServerConnectionCopyCountryCode();
}

uint64_t _CTServerConnectionCopyFirmwareVersion()
{
  return __CTServerConnectionCopyFirmwareVersion();
}

uint64_t _CTServerConnectionCopyISOForMCC()
{
  return __CTServerConnectionCopyISOForMCC();
}

uint64_t _CTServerConnectionCopyNetworkCode()
{
  return __CTServerConnectionCopyNetworkCode();
}

uint64_t _CTServerConnectionCopyOperatorName()
{
  return __CTServerConnectionCopyOperatorName();
}

uint64_t _CTServerConnectionCopyProviderNameUsingCarrierBundle()
{
  return __CTServerConnectionCopyProviderNameUsingCarrierBundle();
}

uint64_t _CTServerConnectionCopyRegistrationInfo()
{
  return __CTServerConnectionCopyRegistrationInfo();
}

uint64_t _CTServerConnectionCreate()
{
  return __CTServerConnectionCreate();
}

uint64_t _CTServerConnectionCreateOnTargetQueue()
{
  return __CTServerConnectionCreateOnTargetQueue();
}

uint64_t _CTServerConnectionDumpBasebandState()
{
  return __CTServerConnectionDumpBasebandState();
}

uint64_t _CTServerConnectionGetCellID()
{
  return __CTServerConnectionGetCellID();
}

uint64_t _CTServerConnectionGetCellularDataIsEnabled()
{
  return __CTServerConnectionGetCellularDataIsEnabled();
}

uint64_t _CTServerConnectionGetLocationAreaCode()
{
  return __CTServerConnectionGetLocationAreaCode();
}

uint64_t _CTServerConnectionGetRadioAccessTechnology()
{
  return __CTServerConnectionGetRadioAccessTechnology();
}

uint64_t _CTServerConnectionGetRegistrationStatus()
{
  return __CTServerConnectionGetRegistrationStatus();
}

uint64_t _CTServerConnectionGetSignalStrength()
{
  return __CTServerConnectionGetSignalStrength();
}

uint64_t _CTServerConnectionIsAnyCallActiveOrHeld()
{
  return __CTServerConnectionIsAnyCallActiveOrHeld();
}

uint64_t _CTServerConnectionIsInHomeCountry()
{
  return __CTServerConnectionIsInHomeCountry();
}

uint64_t _CTServerConnectionRegisterForNotification()
{
  return __CTServerConnectionRegisterForNotification();
}

uint64_t _CTServerConnectionResetModemWithCrashLogs()
{
  return __CTServerConnectionResetModemWithCrashLogs();
}

uint64_t _CTServerConnectionSetCampOnlyMode()
{
  return __CTServerConnectionSetCampOnlyMode();
}

uint64_t _CTServerConnectionSetCellularDataIsEnabled()
{
  return __CTServerConnectionSetCellularDataIsEnabled();
}

uint64_t _CTServerConnectionUnregisterForNotification()
{
  return __CTServerConnectionUnregisterForNotification();
}

void _Exit(int a1)
{
}

int _NSGetExecutablePath(char *buf, uint32_t *bufsize)
{
  return __NSGetExecutablePath(buf, bufsize);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t CNTimeSpan::SetTimeSpan(CNTimeSpan *this, uint64_t a2, double a3)
{
  return CNTimeSpan::SetTimeSpan(this, a2, a3);
}

uint64_t ATCSCounted::decRef(ATCSCounted *this)
{
  return ATCSCounted::decRef(this);
}

uint64_t ATCSCounted::incRef(ATCSCounted *this)
{
  return ATCSCounted::incRef(this);
}

uint64_t cnframework::Supervisor::Pause(cnframework::Supervisor *this)
{
  return cnframework::Supervisor::Pause(this);
}

uint64_t cnframework::Supervisor::Reset(cnframework::Supervisor *this)
{
  return cnframework::Supervisor::Reset(this);
}

uint64_t cnframework::Supervisor::Start(cnframework::Supervisor *this)
{
  return cnframework::Supervisor::Start(this);
}

void cnframework::TimestampedEvent::~TimestampedEvent(cnframework::TimestampedEvent *this)
{
}

uint64_t CLConnection::isEntitled()
{
  return CLConnection::isEntitled();
}

uint64_t CLConnection::getUserName(CLConnection *this)
{
  return CLConnection::getUserName(this);
}

uint64_t CLConnection::sendMessage()
{
  return CLConnection::sendMessage();
}

uint64_t CLConnection::getRemotePid(CLConnection *this)
{
  return CLConnection::getRemotePid(this);
}

uint64_t CLConnection::getAuditToken(CLConnection *this)
{
  return CLConnection::getAuditToken(this);
}

uint64_t CLConnection::deferredDelete(CLConnection *this)
{
  return CLConnection::deferredDelete(this);
}

uint64_t CLConnection::getUniqueRemotePid(CLConnection *this)
{
  return CLConnection::getUniqueRemotePid(this);
}

uint64_t CLConnection::setInterruptionHandler()
{
  return CLConnection::setInterruptionHandler();
}

uint64_t CLConnection::setDisconnectionHandler()
{
  return CLConnection::setDisconnectionHandler();
}

uint64_t CLConnection::setDefaultMessageHandler()
{
  return CLConnection::setDefaultMessageHandler();
}

uint64_t CLConnection::getUserNameFromAuditToken(CLConnection *this, audit_token_t *a2)
{
  return CLConnection::getUserNameFromAuditToken(this, a2);
}

uint64_t CLConnection::pause(CLConnection *this)
{
  return CLConnection::pause(this);
}

uint64_t CLConnection::start(CLConnection *this)
{
  return CLConnection::start(this);
}

uint64_t CLConnection::getName(CLConnection *this)
{
  return CLConnection::getName(this);
}

void cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian(cnnavigation::ECEFToENUJacobian *this)
{
}

uint64_t cnnavigation::GPSTimeToJulianTime()
{
  return cnnavigation::GPSTimeToJulianTime();
}

uint64_t cnnavigation::JulianTimeToGPSTime()
{
  return cnnavigation::JulianTimeToGPSTime();
}

uint64_t cnnavigation::JulianTimeToGLONASSTime()
{
  return cnnavigation::JulianTimeToGLONASSTime();
}

uint64_t cnnavigation::GregorianTimeToJulianTime()
{
  return cnnavigation::GregorianTimeToJulianTime();
}

uint64_t cnnavigation::JulianTimeToGregorianTime()
{
  return cnnavigation::JulianTimeToGregorianTime();
}

uint64_t cnnavigation::SatElAz()
{
  return cnnavigation::SatElAz();
}

void cnnavigation::details::JacobianBase::~JacobianBase(cnnavigation::details::JacobianBase *this)
{
}

uint64_t cnnavigation::ECEFToENU()
{
  return cnnavigation::ECEFToENU();
}

{
  return cnnavigation::ECEFToENU();
}

uint64_t cnnavigation::ECEFToLLA()
{
  return cnnavigation::ECEFToLLA();
}

uint64_t cnnavigation::ENUToECEF()
{
  return cnnavigation::ENUToECEF();
}

uint64_t cnnavigation::LLAToECEF()
{
  return cnnavigation::LLAToECEF();
}

uint64_t QMIServiceMsg::create(QMIServiceMsg *a1, const qmi::MutableMessageBase *a2)
{
  return QMIServiceMsg::create(a1, a2);
}

uint64_t QMIServiceMsg::create(QMIServiceMsg *this, unsigned __int16 a2)
{
  return QMIServiceMsg::create(this, a2);
}

uint64_t QMIServiceMsg::createTlv(QMIServiceMsg *this, unsigned __int8 a2, unsigned __int16 a3)
{
  return QMIServiceMsg::createTlv(this, a2, a3);
}

uint64_t CoreNavigation::CLP::LogEntry::LogEntry::LogEntry(CoreNavigation::CLP::LogEntry::LogEntry *this)
{
  return CoreNavigation::CLP::LogEntry::LogEntry::LogEntry(this);
}

void CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry(CoreNavigation::CLP::LogEntry::LogEntry *this)
{
}

uint64_t CLMotionActivity::isTypeMoving()
{
  return CLMotionActivity::isTypeMoving();
}

uint64_t CLMotionActivity::isTypeStatic()
{
  return CLMotionActivity::isTypeStatic();
}

uint64_t CLMotionActivity::isTypeCycling()
{
  return CLMotionActivity::isTypeCycling();
}

uint64_t CLMotionActivity::isTypeDriving()
{
  return CLMotionActivity::isTypeDriving();
}

uint64_t CLMotionActivity::isTypeRunning()
{
  return CLMotionActivity::isTypeRunning();
}

uint64_t CLMotionActivity::isTypeWalking()
{
  return CLMotionActivity::isTypeWalking();
}

uint64_t CLMotionActivity::isTypeSwimming()
{
  return CLMotionActivity::isTypeSwimming();
}

uint64_t CLMotionActivity::isTypeInVehicle()
{
  return CLMotionActivity::isTypeInVehicle();
}

uint64_t CLMotionActivity::isTypePedestrian()
{
  return CLMotionActivity::isTypePedestrian();
}

uint64_t CLMotionActivity::activityTypeToString()
{
  return CLMotionActivity::activityTypeToString();
}

uint64_t CLMotionActivity::isTypeIndoorActivity()
{
  return CLMotionActivity::isTypeIndoorActivity();
}

uint64_t CLMotionActivity::isTypeWheelchairPush()
{
  return CLMotionActivity::isTypeWheelchairPush();
}

uint64_t CLMotionActivity::isTypeIndoorPedestrian()
{
  return CLMotionActivity::isTypeIndoorPedestrian();
}

uint64_t CLMotionActivity::isTypeUnclassifiedMoving()
{
  return CLMotionActivity::isTypeUnclassifiedMoving();
}

uint64_t CLMotionActivity::isVehicularHighConfidence()
{
  return CLMotionActivity::isVehicularHighConfidence();
}

uint64_t CLMotionActivity::activityConfidenceToString()
{
  return CLMotionActivity::activityConfidenceToString();
}

uint64_t CLMotionActivity::remapActivityTypeForWheelchairUsers()
{
  return CLMotionActivity::remapActivityTypeForWheelchairUsers();
}

uint64_t CLMotionActivity::init(CLMotionActivity *this)
{
  return CLMotionActivity::init(this);
}

uint64_t CLMotionActivity::getInit(CLMotionActivity *this)
{
  return CLMotionActivity::getInit(this);
}

uint64_t CLMotionActivity::isSimilar(CLMotionActivity *this, const CLMotionActivity *a2, const CLMotionActivity *a3)
{
  return CLMotionActivity::isSimilar(this, a2, a3);
}

uint64_t CLConnectionClient::sendMessage()
{
  return CLConnectionClient::sendMessage();
}

uint64_t CLConnectionClient::setHandlerForMessage()
{
  return CLConnectionClient::setHandlerForMessage();
}

uint64_t CLConnectionClient::setDefaultMessageHandler()
{
  return CLConnectionClient::setDefaultMessageHandler();
}

uint64_t CLConnectionClient::start(CLConnectionClient *this)
{
  return CLConnectionClient::start(this);
}

uint64_t CLConnectionClient::CLConnectionClient()
{
  return CLConnectionClient::CLConnectionClient();
}

void CLConnectionClient::~CLConnectionClient(CLConnectionClient *this)
{
}

uint64_t CLConnectionServer::CLConnectionServer()
{
  return CLConnectionServer::CLConnectionServer();
}

void CLConnectionServer::~CLConnectionServer(CLConnectionServer *this)
{
}

uint64_t CLConnectionMessage::isEntitled()
{
  return CLConnectionMessage::isEntitled();
}

uint64_t CLConnectionMessage::sendReply()
{
  return CLConnectionMessage::sendReply();
}

{
  return CLConnectionMessage::sendReply();
}

{
  return CLConnectionMessage::sendReply();
}

uint64_t CLConnectionMessage::CLConnectionMessage()
{
  return CLConnectionMessage::CLConnectionMessage();
}

{
  return CLConnectionMessage::CLConnectionMessage();
}

{
  return CLConnectionMessage::CLConnectionMessage();
}

uint64_t wireless_diagnostics::google::protobuf::MessageLite::ParseFromArray(wireless_diagnostics::google::protobuf::MessageLite *this, const void *a2, int a3)
{
  return wireless_diagnostics::google::protobuf::MessageLite::ParseFromArray(this, a2, a3);
}

uint64_t wireless_diagnostics::google::protobuf::MessageLite::ParseFromString()
{
  return wireless_diagnostics::google::protobuf::MessageLite::ParseFromString();
}

void wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(wireless_diagnostics::google::protobuf::MessageLite *this)
{
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int *a2)
{
  return wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unint64_t *a2)
{
  return wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int *a2)
{
  return wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unint64_t *a2)
{
  return wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, int a2)
{
  return wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, int a2)
{
  return wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, int a2)
{
  return wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::ArrayOutputStream::ArrayOutputStream(wireless_diagnostics::google::protobuf::io::ArrayOutputStream *this, void *a2, int a3, int a4)
{
  return wireless_diagnostics::google::protobuf::io::ArrayOutputStream::ArrayOutputStream(this, a2, a3, a4);
}

void wireless_diagnostics::google::protobuf::io::ArrayOutputStream::~ArrayOutputStream(wireless_diagnostics::google::protobuf::io::ArrayOutputStream *this)
{
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this, unint64_t a2)
{
  return wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this, unsigned int a2)
{
  return wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this, unint64_t a2)
{
  return wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian32(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this, unsigned int a2)
{
  return wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian32(this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this, unsigned int a2)
{
  return wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRaw(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this, const void *a2, int a3)
{
  return wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRaw(this, a2, a3);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::CodedOutputStream()
{
  return wireless_diagnostics::google::protobuf::io::CodedOutputStream::CodedOutputStream();
}

void wireless_diagnostics::google::protobuf::io::CodedOutputStream::~CodedOutputStream(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this)
{
}

uint64_t wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage()
{
  return wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
}

void wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage(wireless_diagnostics::google::protobuf::internal::LogMessage *this)
{
}

uint64_t wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<()
{
  return wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
}

uint64_t wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=()
{
  return wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
}

uint64_t wireless_diagnostics::google::protobuf::internal::ExtensionSet::ParseField(wireless_diagnostics::google::protobuf::internal::ExtensionSet *this, unsigned int a2, wireless_diagnostics::google::protobuf::io::CodedInputStream *a3, const wireless_diagnostics::google::protobuf::MessageLite *a4)
{
  return wireless_diagnostics::google::protobuf::internal::ExtensionSet::ParseField(this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::ExtensionSet::Clear(wireless_diagnostics::google::protobuf::internal::ExtensionSet *this)
{
  return wireless_diagnostics::google::protobuf::internal::ExtensionSet::Clear(this);
}

uint64_t wireless_diagnostics::google::protobuf::internal::ExtensionSet::MergeFrom(wireless_diagnostics::google::protobuf::internal::ExtensionSet *this, const wireless_diagnostics::google::protobuf::internal::ExtensionSet *a2)
{
  return wireless_diagnostics::google::protobuf::internal::ExtensionSet::MergeFrom(this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::internal::ExtensionSet::ExtensionSet(wireless_diagnostics::google::protobuf::internal::ExtensionSet *this)
{
  return wireless_diagnostics::google::protobuf::internal::ExtensionSet::ExtensionSet(this);
}

void wireless_diagnostics::google::protobuf::internal::ExtensionSet::~ExtensionSet(wireless_diagnostics::google::protobuf::internal::ExtensionSet *this)
{
}

uint64_t wireless_diagnostics::google::protobuf::internal::VerifyVersion(wireless_diagnostics::google::protobuf::internal *this, int a2, int a3, const char *a4)
{
  return wireless_diagnostics::google::protobuf::internal::VerifyVersion(this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString()
{
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes()
{
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, int a2, float a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat(this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, int a2, int a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32(this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt64(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt64(this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, int a2, double a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble(this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteSInt32(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, int a2, int a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteSInt32(this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString()
{
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, int a2, unsigned int a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32(this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, int a2, unint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64(this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed64(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, int a2, unint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed64(this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, int a2, const wireless_diagnostics::google::protobuf::MessageLite *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage(this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline()
{
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes()
{
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, a2, a3);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, int a2, BOOL a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool(this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, int a2, int a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum(this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap(wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *a1, wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *a2)
{
  return wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap(a1, a2);
}

uint64_t wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *this, int a2)
{
  return wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New(wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *this)
{
  return wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New(this);
}

uint64_t wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::Delete()
{
  return wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::Delete();
}

uint64_t PB::TextFormatter::beginObject(PB::TextFormatter *this, const char *a2)
{
  return PB::TextFormatter::beginObject(this, a2);
}

uint64_t PB::TextFormatter::format(PB::TextFormatter *this, const char *a2, const Data *a3)
{
  return PB::TextFormatter::format(this, a2, (const PB::Data *)a3);
}

uint64_t PB::TextFormatter::format()
{
  return PB::TextFormatter::format();
}

uint64_t PB::TextFormatter::format(PB::TextFormatter *this, const char *a2, BOOL a3)
{
  return PB::TextFormatter::format(this, a2, a3);
}

uint64_t PB::TextFormatter::format(PB::TextFormatter *this, const char *a2, double a3)
{
  return PB::TextFormatter::format(this, a2, a3);
}

uint64_t PB::TextFormatter::format(PB::TextFormatter *this, const char *a2, float a3)
{
  return PB::TextFormatter::format(this, a2, a3);
}

uint64_t PB::TextFormatter::format(PB::TextFormatter *this, const char *a2, int a3)
{
  return PB::TextFormatter::format(this, a2, a3);
}

uint64_t PB::TextFormatter::format(PB::TextFormatter *this, const char *a2, unsigned int a3)
{
  return PB::TextFormatter::format(this, a2, a3);
}

uint64_t PB::TextFormatter::format(PB::TextFormatter *this, const char *a2, uint64_t a3)
{
  return PB::TextFormatter::format(this, a2, a3);
}

uint64_t PB::TextFormatter::format(PB::TextFormatter *this, const char *a2, unint64_t a3)
{
  return PB::TextFormatter::format(this, a2, a3);
}

void PB::Base::~Base(PB::Base *this)
{
}

uint64_t PB::Data::Data(PB::Data *this, const Data *a2)
{
  return PB::Data::Data(this, (const PB::Data *)a2);
}

uint64_t PB::Reader::recallMark()
{
  return PB::Reader::recallMark();
}

uint64_t PB::Reader::read(PB::Reader *this, PB::Data *a2)
{
  return PB::Reader::read(this, a2);
}

uint64_t PB::Reader::read()
{
  return PB::Reader::read();
}

uint64_t PB::Reader::skip(PB::Reader *this, unsigned int a2, unsigned __int8 a3, int a4)
{
  return PB::Reader::skip(this, a2, a3, a4);
}

uint64_t PB::Reader::placeMark()
{
  return PB::Reader::placeMark();
}

uint64_t PB::Writer::writeVarInt(PB::Writer *this, int a2, unsigned int a3)
{
  return PB::Writer::writeVarInt(this, a2, a3);
}

uint64_t PB::Writer::writeVarInt(PB::Writer *this, unsigned int a2, unsigned int a3)
{
  return PB::Writer::writeVarInt(this, a2, a3);
}

uint64_t PB::Writer::writeVarInt(PB::Writer *this, uint64_t a2, unsigned int a3)
{
  return PB::Writer::writeVarInt(this, a2, a3);
}

uint64_t PB::Writer::writeVarInt(PB::Writer *this, unint64_t a2, unsigned int a3)
{
  return PB::Writer::writeVarInt(this, a2, a3);
}

uint64_t PB::Writer::writeSubmessage(PB::Writer *this, const PB::Base *a2, unsigned int a3)
{
  return PB::Writer::writeSubmessage(this, a2, a3);
}

uint64_t PB::Writer::write(PB::Writer *this, const PB::Data *a2, unsigned int a3)
{
  return PB::Writer::write(this, a2, a3);
}

uint64_t PB::Writer::write()
{
  return PB::Writer::write();
}

uint64_t PB::Writer::write(PB::Writer *this, BOOL a2, unsigned int a3)
{
  return PB::Writer::write(this, a2, a3);
}

uint64_t PB::Writer::write(PB::Writer *this, double a2, unsigned int a3)
{
  return PB::Writer::write(this, a2, a3);
}

uint64_t PB::Writer::write(PB::Writer *this, float a2, unsigned int a3)
{
  return PB::Writer::write(this, a2, a3);
}

uint64_t PB::Writer::writeSInt(PB::Writer *this, int a2, unsigned int a3)
{
  return PB::Writer::writeSInt(this, a2, a3);
}

uint64_t PB::Writer::writeSInt(PB::Writer *this, uint64_t a2, unsigned int a3)
{
  return PB::Writer::writeSInt(this, a2, a3);
}

uint64_t PB::Writer::Writer(PB::Writer *this)
{
  return PB::Writer::Writer(this);
}

void PB::Writer::~Writer(PB::Writer *this)
{
}

uint64_t Ari::LogConfig(Ari *this, unsigned int a2, void (*a3)(unsigned int, const char *))
{
  return Ari::LogConfig(this, a2, a3);
}

uint64_t Tlv::Writer::putByte(Tlv::Writer *this, unsigned __int8 a2)
{
  return Tlv::Writer::putByte(this, a2);
}

uint64_t ctu::TextConverter::pushConversion()
{
  return ctu::TextConverter::pushConversion();
}

uint64_t ctu::TextConverter::readChars(ctu::TextConverter *this, unint64_t a2)
{
  return ctu::TextConverter::readChars(this, a2);
}

uint64_t ctu::TextConverter::setSource(ctu::TextConverter *this, const char *a2, unint64_t a3)
{
  return ctu::TextConverter::setSource(this, a2, a3);
}

uint64_t ctu::TextConverter::TextConverter(ctu::TextConverter *this)
{
  return ctu::TextConverter::TextConverter(this);
}

void ctu::TextConverter::~TextConverter(ctu::TextConverter *this)
{
}

uint64_t ice::Client::regIndicationInternal()
{
  return ice::Client::regIndicationInternal();
}

uint64_t ice::Client::regEventHandlerInternal()
{
  return ice::Client::regEventHandlerInternal();
}

uint64_t ice::Client::start(ice::Client *this)
{
  return ice::Client::start(this);
}

uint64_t ice::Client::create()
{
  return ice::Client::create();
}

uint64_t ice::SendProxy::SendProxy()
{
  return ice::SendProxy::SendProxy();
}

void ice::SendProxy::~SendProxy(ice::SendProxy *this)
{
}

uint64_t qmi::MessageBase::validateMsgId(qmi::MessageBase *this, unsigned __int16 a2)
{
  return qmi::MessageBase::validateMsgId(this, a2);
}

uint64_t qmi::MessageBase::MessageBase(qmi::MessageBase *this, const void *a2, unint64_t a3)
{
  return qmi::MessageBase::MessageBase(this, a2, a3);
}

uint64_t qmi::MessageBase::MessageBase()
{
  return qmi::MessageBase::MessageBase();
}

void qmi::MessageBase::~MessageBase(qmi::MessageBase *this)
{
}

uint64_t qmi::ResponseBase::ResponseBase(qmi::ResponseBase *this, const void *a2, unint64_t a3)
{
  return qmi::ResponseBase::ResponseBase(this, a2, a3);
}

uint64_t qmi::MutableMessageBase::MutableMessageBase(qmi::MutableMessageBase *a1, const qmi::MutableMessageBase *a2)
{
  return qmi::MutableMessageBase::MutableMessageBase(a1, a2);
}

uint64_t qmi::MutableMessageBase::MutableMessageBase(qmi::MutableMessageBase *this, unsigned __int16 a2)
{
  return qmi::MutableMessageBase::MutableMessageBase(this, a2);
}

void qmi::MutableMessageBase::~MutableMessageBase(qmi::MutableMessageBase *this)
{
}

uint64_t qmi::Client::create()
{
  return qmi::Client::create();
}

uint64_t qmi::Client::release(qmi::Client *this)
{
  return qmi::Client::release(this);
}

void qmi::Client::~Client(qmi::Client *this)
{
}

uint64_t qmi::asString()
{
  return qmi::asString();
}

uint64_t swan::RouteSmoother::Finish()
{
  return swan::RouteSmoother::Finish();
}

uint64_t swan::RouteSmoother::Update()
{
  return swan::RouteSmoother::Update();
}

uint64_t swan::RouteSmoother::Configure()
{
  return swan::RouteSmoother::Configure();
}

uint64_t swan::BatchedGNSSDataSmoother::Configure()
{
  return swan::BatchedGNSSDataSmoother::Configure();
}

uint64_t swan::BatchedGNSSDataSmoother::BatchedGNSSDataSmoother(swan::BatchedGNSSDataSmoother *this)
{
  return swan::BatchedGNSSDataSmoother::BatchedGNSSDataSmoother(this);
}

uint64_t raven::RavenParameters::LoadConfigurationString(raven::RavenParameters *this, const char *a2, BOOL a3)
{
  return raven::RavenParameters::LoadConfigurationString(this, a2, a3);
}

uint64_t raven::RavenParameters::RavenParameters()
{
  return raven::RavenParameters::RavenParameters();
}

uint64_t raven::RavenSupervisor::RaiseEventsFrom()
{
  return raven::RavenSupervisor::RaiseEventsFrom();
}

uint64_t raven::RavenSupervisor::Configure()
{
  return raven::RavenSupervisor::Configure();
}

uint64_t raven::RavenSupervisor::RavenSupervisor(raven::RavenSupervisor *this)
{
  return raven::RavenSupervisor::RavenSupervisor(this);
}

void raven::RavenSolutionEvent::~RavenSolutionEvent(raven::RavenSolutionEvent *this)
{
}

uint64_t raven::ConvertProtobufToRavenSolutionEvent()
{
  return raven::ConvertProtobufToRavenSolutionEvent();
}

uint64_t raven::ConvertRavenSolutionEventToSerializedProtobufLogEntry()
{
  return raven::ConvertRavenSolutionEventToSerializedProtobufLogEntry();
}

uint64_t AriMsg::pack(AriMsg *this, unsigned int a2, const void *a3, unint64_t a4)
{
  return AriMsg::pack(this, a2, a3, a4);
}

void AriMsg::AriMsg(AriMsg *this, const unsigned __int8 *a2, unsigned int a3)
{
}

void AriMsg::AriMsg(AriMsg *this, unsigned int a2)
{
}

void AriMsg::~AriMsg(AriMsg *this)
{
}

uint64_t AriHost::ExitTrx(AriHost *this, const AriMsg *a2, BOOL a3)
{
  return AriHost::ExitTrx(this, a2, a3);
}

uint64_t cnprint::CNPrinter::GetLogLevel(cnprint::CNPrinter *this)
{
  return cnprint::CNPrinter::GetLogLevel(this);
}

uint64_t cnprint::CNPrinter::GetCNPrinter(cnprint::CNPrinter *this)
{
  return cnprint::CNPrinter::GetCNPrinter(this);
}

uint64_t cnprint::CNPrinter::EnableLogStream()
{
  return cnprint::CNPrinter::EnableLogStream();
}

uint64_t cnprint::CNPrinter::Print()
{
  return cnprint::CNPrinter::Print();
}

uint64_t trackrun::TrackRunSupervisor::RaiseEventsFrom()
{
  return trackrun::TrackRunSupervisor::RaiseEventsFrom();
}

uint64_t trackrun::TrackRunSupervisor::TrackRunSupervisor(trackrun::TrackRunSupervisor *this)
{
  return trackrun::TrackRunSupervisor::TrackRunSupervisor(this);
}

void trackrun::TrackRunSolutionEvent::~TrackRunSolutionEvent(trackrun::TrackRunSolutionEvent *this)
{
}

uint64_t cnlogging::details::CNProtobufStreamChecksum::adler32()
{
  return cnlogging::details::CNProtobufStreamChecksum::adler32();
}

uint64_t QMIServiceMsg::getNewError(QMIServiceMsg *this)
{
  return QMIServiceMsg::getNewError(this);
}

uint64_t QMIServiceMsg::getErrorString(QMIServiceMsg *this)
{
  return QMIServiceMsg::getErrorString(this);
}

uint64_t QMIServiceMsg::serialize(QMIServiceMsg *this)
{
  return QMIServiceMsg::serialize(this);
}

uint64_t CLMotionActivity::isInVehicle(CLMotionActivity *this)
{
  return CLMotionActivity::isInVehicle(this);
}

uint64_t CLMotionActivity::isUnclassifiedMoving(CLMotionActivity *this)
{
  return CLMotionActivity::isUnclassifiedMoving(this);
}

uint64_t CLMotionActivity::isVehicularHighConfidence(CLMotionActivity *this)
{
  return CLMotionActivity::isVehicularHighConfidence(this);
}

uint64_t CLMotionActivity::isMoving(CLMotionActivity *this)
{
  return CLMotionActivity::isMoving(this);
}

uint64_t CLMotionActivity::isStatic(CLMotionActivity *this)
{
  return CLMotionActivity::isStatic(this);
}

uint64_t CLMotionActivity::isCycling(CLMotionActivity *this)
{
  return CLMotionActivity::isCycling(this);
}

uint64_t CLMotionActivity::isDriving(CLMotionActivity *this)
{
  return CLMotionActivity::isDriving(this);
}

uint64_t CLMotionActivity::isMounted(CLMotionActivity *this)
{
  return CLMotionActivity::isMounted(this);
}

uint64_t CLMotionActivity::isRunning(CLMotionActivity *this)
{
  return CLMotionActivity::isRunning(this);
}

uint64_t CLMotionActivity::isWalking(CLMotionActivity *this)
{
  return CLMotionActivity::isWalking(this);
}

uint64_t CLConnectionMessage::getDictionary(CLConnectionMessage *this)
{
  return CLConnectionMessage::getDictionary(this);
}

uint64_t CLConnectionMessage::getObjectOfClass(CLConnectionMessage *this, objc_class *a2)
{
  return CLConnectionMessage::getObjectOfClass(this, a2);
}

uint64_t CLConnectionMessage::copyFileDescriptor(CLConnectionMessage *this)
{
  return CLConnectionMessage::copyFileDescriptor(this);
}

uint64_t CLConnectionMessage::getDictionaryOfClasses(CLConnectionMessage *this, NSSet *a2)
{
  return CLConnectionMessage::getDictionaryOfClasses(this, a2);
}

uint64_t CLConnectionMessage::name(CLConnectionMessage *this)
{
  return CLConnectionMessage::name(this);
}

uint64_t wireless_diagnostics::google::protobuf::MessageLite::SerializeToArray(wireless_diagnostics::google::protobuf::MessageLite *this, void *a2)
{
  return wireless_diagnostics::google::protobuf::MessageLite::SerializeToArray(this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::MessageLite::SerializeToString()
{
  return wireless_diagnostics::google::protobuf::MessageLite::SerializeToString();
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this);
}

uint64_t wireless_diagnostics::google::protobuf::internal::ExtensionSet::SerializeWithCachedSizes(wireless_diagnostics::google::protobuf::internal::ExtensionSet *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return wireless_diagnostics::google::protobuf::internal::ExtensionSet::SerializeWithCachedSizes(this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::ExtensionSet::ByteSize(wireless_diagnostics::google::protobuf::internal::ExtensionSet *this)
{
  return wireless_diagnostics::google::protobuf::internal::ExtensionSet::ByteSize(this);
}

uint64_t qmi::MessageBase::findTlvValue(qmi::MessageBase *this)
{
  return qmi::MessageBase::findTlvValue(this);
}

uint64_t qmi::Client::setHandler()
{
  return qmi::Client::setHandler();
}

{
  return qmi::Client::setHandler();
}

uint64_t qmi::Client::setIndHandler()
{
  return qmi::Client::setIndHandler();
}

uint64_t qmi::Client::setIndShouldWake(qmi::Client *this)
{
  return qmi::Client::setIndShouldWake(this);
}

uint64_t qmi::Client::send()
{
  return qmi::Client::send();
}

uint64_t qmi::Client::stop(qmi::Client *this)
{
  return qmi::Client::stop(this);
}

uint64_t qmi::Client::start(qmi::Client *this)
{
  return qmi::Client::start(this);
}

uint64_t swan::BatchedGNSSDataSmoother::Run()
{
  return swan::BatchedGNSSDataSmoother::Run();
}

uint64_t raven::RavenParameters::IsInitialized(raven::RavenParameters *this)
{
  return raven::RavenParameters::IsInitialized(this);
}

uint64_t raven::RavenSupervisor::GetRavenSolution()
{
  return raven::RavenSupervisor::GetRavenSolution();
}

uint64_t raven::RavenSupervisor::GetRavenSolution(raven::RavenSupervisor *this, raven::RavenSolutionEvent *a2)
{
  return raven::RavenSupervisor::GetRavenSolution(this, a2);
}

uint64_t raven::RavenSupervisor::GetRavenIonosphereParameters(raven::RavenSupervisor *this, ThinShellIonosphereParameters *a2)
{
  return raven::RavenSupervisor::GetRavenIonosphereParameters(this, a2);
}

uint64_t AriMsg::extractCtx(AriMsg *this, int *a2)
{
  return AriMsg::extractCtx(this, a2);
}

uint64_t AriMsg::unpack(AriMsg *this, uint64_t a2, void *a3, uint64_t a4, BOOL *a5, unint64_t *a6)
{
  return AriMsg::unpack(this, a2, a3, a4, a5, a6);
}

uint64_t AriMsg::getGmid(AriMsg *this)
{
  return AriMsg::getGmid(this);
}

uint64_t AriMsg::isValid(AriMsg *this)
{
  return AriMsg::isValid(this);
}

uint64_t trackrun::TrackRunSupervisor::IsConfigured(trackrun::TrackRunSupervisor *this)
{
  return trackrun::TrackRunSupervisor::IsConfigured(this);
}

uint64_t trackrun::TrackRunSupervisor::GetTrackRunSolution(trackrun::TrackRunSupervisor *this, trackrun::TrackRunSolutionEvent *a2)
{
  return trackrun::TrackRunSupervisor::GetTrackRunSolution(this, a2);
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return std::runtime_error::what(this);
}

std::string *__cdecl std::error_code::message(std::string *__return_ptr retstr, const std::error_code *this)
{
  return std::error_code::message(retstr, this);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return std::string::find(this, __c, __pos);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return std::string::compare(this, __s);
}

uint64_t std::stringbuf::str()
{
  return std::stringbuf::str();
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return std::locale::name(retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return std::locale::use_facet(this, a2);
}

BOOL std::locale::operator==(const std::locale *this, const std::locale *a2)
{
  return std::locale::operator==(this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return std::ios_base::getloc(this);
}

uint64_t std::time_put<char,std::ostreambuf_iterator<char>>::put()
{
  return std::time_put<char,std::ostreambuf_iterator<char>>::put();
}

uint64_t ice::SendProxy::callback()
{
  return ice::SendProxy::callback();
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return std::logic_error::logic_error(this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::logic_error *a2)
{
  return std::logic_error::logic_error(this, a2);
}

void std::logic_error::~logic_error(std::logic_error *this)
{
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return std::runtime_error::runtime_error(this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return std::runtime_error::runtime_error(this, a2);
}

{
  return std::runtime_error::runtime_error(this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return std::runtime_error::runtime_error(this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

{
  std::runtime_error::~runtime_error(this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return std::bad_array_new_length::bad_array_new_length(this);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return std::regex_error::regex_error(this, __ecode);
}

void std::timed_mutex::lock(std::timed_mutex *this)
{
}

void std::timed_mutex::unlock(std::timed_mutex *this)
{
}

std::timed_mutex *__cdecl std::timed_mutex::timed_mutex(std::timed_mutex *this)
{
  return std::timed_mutex::timed_mutex(this);
}

void std::timed_mutex::~timed_mutex(std::timed_mutex *this)
{
}

size_t std::__next_prime(size_t __n)
{
  return std::__next_prime(__n);
}

std::string::reference std::string::at(std::string *this, std::string::size_type __n)
{
  return std::string::at(this, __n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return std::string::erase(this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return std::string::append(this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return std::string::append(this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n)
{
  return std::string::append(this, __str, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return std::string::append(this, __n, __c);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return std::string::assign(this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return std::string::assign(this, __s, __n);
}

std::string::iterator std::string::insert(std::string *this, std::string::const_iterator __pos, std::string::value_type __c)
{
  return std::string::insert(this, __pos, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return std::string::insert(this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return std::string::insert(this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, std::string::size_type __n2, std::string::value_type __c)
{
  return std::string::replace(this, __pos, __n1, __n2, __c);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return std::string::basic_string(this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return std::string::operator=(this, __str);
}

std::string *__cdecl std::string::operator=(std::string *this, std::string::value_type __c)
{
  return std::string::operator=(this, __c);
}

uint64_t std::filebuf::open()
{
  return std::filebuf::open();
}

uint64_t std::filebuf::close()
{
  return std::filebuf::close();
}

uint64_t std::filebuf::basic_filebuf()
{
  return std::filebuf::basic_filebuf();
}

uint64_t std::filebuf::~filebuf()
{
  return std::filebuf::~filebuf();
}

uint64_t std::istream::get()
{
  return std::istream::get();
}

uint64_t std::istream::read()
{
  return std::istream::read();
}

uint64_t std::istream::seekg()
{
  return std::istream::seekg();
}

uint64_t std::istream::tellg()
{
  return std::istream::tellg();
}

uint64_t std::istream::sentry::sentry()
{
  return std::istream::sentry::sentry();
}

uint64_t std::istream::~istream()
{
  return std::istream::~istream();
}

{
  return std::istream::~istream();
}

uint64_t std::istream::operator>>()
{
  return std::istream::operator>>();
}

{
  return std::istream::operator>>();
}

{
  return std::istream::operator>>();
}

uint64_t std::ostream::put()
{
  return std::ostream::put();
}

uint64_t std::ostream::flush()
{
  return std::ostream::flush();
}

uint64_t std::ostream::write()
{
  return std::ostream::write();
}

uint64_t std::ostream::sentry::sentry()
{
  return std::ostream::sentry::sentry();
}

uint64_t std::ostream::sentry::~sentry()
{
  return std::ostream::sentry::~sentry();
}

uint64_t std::ostream::~ostream()
{
  return std::ostream::~ostream();
}

{
  return std::ostream::~ostream();
}

uint64_t std::ostream::operator<<()
{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return std::random_device::random_device(this, __token);
}

void std::random_device::~random_device(std::random_device *this)
{
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return std::random_device::operator()(this);
}

uint64_t std::iostream::~basic_iostream()
{
  return std::iostream::~basic_iostream();
}

uint64_t std::ofstream::open()
{
  return std::ofstream::open();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return std::__get_classname(__s, __icase);
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return std::__thread_struct::__thread_struct(this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
}

uint64_t std::streambuf::basic_streambuf()
{
  return std::streambuf::basic_streambuf();
}

uint64_t std::streambuf::~streambuf()
{
  return std::streambuf::~streambuf();
}

const std::error_category *std::system_category(void)
{
  return std::system_category();
}

void std::condition_variable::notify_one(std::condition_variable *this)
{
}

void std::condition_variable::__do_timed_wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk, std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> a3)
{
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
}

void std::__shared_mutex_base::lock_shared(std::__shared_mutex_base *this)
{
}

void std::__shared_mutex_base::unlock_shared(std::__shared_mutex_base *this)
{
}

void std::__shared_mutex_base::lock(std::__shared_mutex_base *this)
{
}

void std::__shared_mutex_base::unlock(std::__shared_mutex_base *this)
{
}

std::__shared_mutex_base *__cdecl std::__shared_mutex_base::__shared_mutex_base(std::__shared_mutex_base *this)
{
  return std::__shared_mutex_base::__shared_mutex_base(this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return std::__shared_weak_count::lock(this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return std::__thread_local_data();
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return std::__get_collation_name(retstr, __s);
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
}

void std::__fs::filesystem::__permissions(const std::__fs::filesystem::path *a1, std::__fs::filesystem::perms a2, std::__fs::filesystem::perm_options a3, std::error_code *a4)
{
}

BOOL std::__fs::filesystem::__create_directories(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  return std::__fs::filesystem::__create_directories(a1, a2);
}

BOOL std::__fs::filesystem::__remove(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return std::__fs::filesystem::__remove(a1, __ec);
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return std::__fs::filesystem::__status(a1, __ec);
}

double std::stod(const std::string *__str, size_t *__idx)
{
  return std::stod(__str, __idx);
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return std::stoi(__str, __idx, __base);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

uint64_t std::__sort<std::__less<double,double> &,double *>()
{
  return std::__sort<std::__less<double,double> &,double *>();
}

uint64_t std::__sort<std::__less<float,float> &,float *>()
{
  return std::__sort<std::__less<float,float> &,float *>();
}

uint64_t std::__sort<std::__less<int,int> &,int *>()
{
  return std::__sort<std::__less<int,int> &,int *>();
}

uint64_t std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>()
{
  return std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
}

uint64_t std::__sort<std::__less<short,short> &,short *>()
{
  return std::__sort<std::__less<short,short> &,short *>();
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return std::chrono::steady_clock::now();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return std::chrono::system_clock::now();
}

time_t std::chrono::system_clock::to_time_t(const std::chrono::system_clock::time_point *__t)
{
  return std::chrono::system_clock::to_time_t(__t);
}

void std::future<void>::~future(std::future<void> *this)
{
}

const std::locale *std::locale::classic(void)
{
  return std::locale::classic();
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return std::locale::locale(this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return std::locale::locale(this);
}

void std::locale::~locale(std::locale *this)
{
}

unint64_t std::stoull(const std::string *__str, size_t *__idx, int __base)
{
  return std::stoull(__str, __idx, __base);
}

void std::thread::join(std::thread *this)
{
}

void std::thread::~thread(std::thread *this)
{
}

std::future<void> std::promise<void>::get_future(std::promise<void> *this)
{
  return std::promise<void>::get_future(this);
}

void std::promise<void>::set_value(std::promise<void> *this)
{
}

std::promise<void> *__cdecl std::promise<void>::promise(std::promise<void> *this)
{
  return std::promise<void>::promise(this);
}

void std::promise<void>::~promise(std::promise<void> *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return std::ios::~ios();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return std::to_string(retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, float __val)
{
  return std::to_string(retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return std::to_string(retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return std::to_string(retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return std::to_string(retstr, __val);
}

{
  return std::to_string(retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return std::to_string(retstr, __val);
}

{
  return std::to_string(retstr, __val);
}

uint64_t std::operator+<char>()
{
  return std::operator+<char>();
}

std::bad_cast *__cdecl std::bad_cast::bad_cast(std::bad_cast *this)
{
  return std::bad_cast::bad_cast(this);
}

void std::bad_cast::~bad_cast(std::bad_cast *this)
{
}

void std::exception::~exception(std::exception *this)
{
}

int std::uncaught_exceptions(void)
{
  return std::uncaught_exceptions();
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return ___cxa_allocate_exception(thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return ___cxa_atexit(lpfunc, obj, lpdso_handle);
}

void __cxa_bad_cast(void)
{
}

void __cxa_bad_typeid(void)
{
}

void *__cxa_begin_catch(void *a1)
{
  return ___cxa_begin_catch(a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void *__cxa_get_exception_ptr(void *a1)
{
  return ___cxa_get_exception_ptr(a1);
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return ___cxa_guard_acquire((uint64_t *)a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)___dynamic_cast(lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return ___error();
}

double __exp10(double a1)
{
  return ___exp10(a1);
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return ___maskrune(a1, a2);
}

__double2 __sincos_stret(double a1)
{
  __double2 v3 = ___sincos_stret(a1);
  double cosval = v3.__cosval;
  double sinval = v3.__sinval;
  result.__double cosval = cosval;
  result.__double sinval = sinval;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  __float2 v3 = ___sincosf_stret(a1);
  float cosval = v3.__cosval;
  float sinval = v3.__sinval;
  result.__float cosval = cosval;
  result.__float sinval = sinval;
  return result;
}

int __sprintf_chk(char *a1, int a2, size_t a3, const char *a4, ...)
{
  return ___sprintf_chk(a1, a2, a3, a4);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return ___tolower(a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return ___toupper(a1);
}

const mach_header *__cdecl _dyld_get_image_header(uint32_t image_index)
{
  return __dyld_get_image_header(image_index);
}

const char *__cdecl _dyld_get_image_name(uint32_t image_index)
{
  return __dyld_get_image_name(image_index);
}

uint32_t _dyld_image_count(void)
{
  return __dyld_image_count();
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return __os_activity_create(dso, description, activity, flags);
}

uint64_t _os_feature_enabled_impl()
{
  return __os_feature_enabled_impl();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_log_send_and_compose_impl()
{
  return __os_log_send_and_compose_impl();
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sandbox_in_a_container()
{
  return __sandbox_in_a_container();
}

uint64_t _set_user_dir_suffix()
{
  return __set_user_dir_suffix();
}

uint64_t _sl_dlopen()
{
  return __sl_dlopen();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t abort_report_np()
{
  return _abort_report_np();
}

int access(const char *a1, int a2)
{
  return _access(a1, a2);
}

long double acos(long double __x)
{
  return _acos(__x);
}

float acosf(float a1)
{
  return _acosf(a1);
}

unsigned int alarm(unsigned int a1)
{
  return _alarm(a1);
}

uint64_t amfi_developer_mode_status()
{
  return _amfi_developer_mode_status();
}

uint32_t arc4random(void)
{
  return _arc4random();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return _arc4random_uniform(__upper_bound);
}

long double asin(long double __x)
{
  return _asin(__x);
}

float asinf(float a1)
{
  return _asinf(a1);
}

long double atan(long double __x)
{
  return _atan(__x);
}

long double atan2(long double __y, long double __x)
{
  return _atan2(__y, __x);
}

float atan2f(float a1, float a2)
{
  return _atan2f(a1, a2);
}

double atof(const char *a1)
{
  return _atof(a1);
}

int atoi(const char *a1)
{
  return _atoi(a1);
}

int backtrace(void **a1, int a2)
{
  return _backtrace(a1, a2);
}

char *__cdecl basename(char *a1)
{
  return _basename(a1);
}

void bzero(void *a1, size_t a2)
{
}

void cblas_dgemm(const CBLAS_ORDER __Order, const CBLAS_TRANSPOSE __TransA, const CBLAS_TRANSPOSE __TransB, const int __M, const int __N, const int __K, const double __alpha, const double *__A, const int __lda, const double *__B, const int __ldb, const double __beta, double *__C, const int __ldc)
{
}

void cblas_dgemv(const CBLAS_ORDER __Order, const CBLAS_TRANSPOSE __TransA, const int __M, const int __N, const double __alpha, const double *__A, const int __lda, const double *__X, const int __incX, const double __beta, double *__Y, const int __incY)
{
}

double cblas_dnrm2(const int __N, const double *__X, const int __incX)
{
  return _cblas_dnrm2(__N, __X, __incX);
}

void cblas_dscal(const int __N, const double __alpha, double *__X, const int __incX)
{
}

void cblas_dsyr(const CBLAS_ORDER __Order, const CBLAS_UPLO __Uplo, const int __N, const double __alpha, const double *__X, const int __incX, double *__A, const int __lda)
{
}

float cbrtf(float a1)
{
  return _cbrtf(a1);
}

int chmod(const char *a1, mode_t a2)
{
  return _chmod(a1, a2);
}

int chown(const char *a1, uid_t a2, gid_t a3)
{
  return _chown(a1, a2, a3);
}

void clearerr(FILE *a1)
{
}

clock_t clock(void)
{
  return _clock();
}

int clock_gettime(clockid_t __clock_id, timespec *__tp)
{
  return _clock_gettime(__clock_id, __tp);
}

int close(int a1)
{
  return _close(a1);
}

int closedir(DIR *a1)
{
  return _closedir(a1);
}

compression_status compression_stream_destroy(compression_stream *stream)
{
  return _compression_stream_destroy(stream);
}

compression_status compression_stream_init(compression_stream *stream, compression_stream_operation operation, compression_algorithm algorithm)
{
  return _compression_stream_init(stream, operation, algorithm);
}

compression_status compression_stream_process(compression_stream *stream, int flags)
{
  return _compression_stream_process(stream, flags);
}

uint64_t container_copy_sandbox_token()
{
  return _container_copy_sandbox_token();
}

uint64_t container_error_copy_unlocalized_description()
{
  return _container_error_copy_unlocalized_description();
}

uint64_t container_get_path()
{
  return _container_get_path();
}

uint64_t container_query_create()
{
  return _container_query_create();
}

uint64_t container_query_free()
{
  return _container_query_free();
}

uint64_t container_query_get_last_error()
{
  return _container_query_get_last_error();
}

uint64_t container_query_get_single_result()
{
  return _container_query_get_single_result();
}

uint64_t container_query_operation_set_flags()
{
  return _container_query_operation_set_flags();
}

uint64_t container_query_set_class()
{
  return _container_query_set_class();
}

uint64_t container_query_set_identifiers()
{
  return _container_query_set_identifiers();
}

uint64_t container_query_set_persona_unique_string()
{
  return _container_query_set_persona_unique_string();
}

long double cos(long double __x)
{
  return _cos(__x);
}

float cosf(float a1)
{
  return _cosf(a1);
}

uLong crc32(uLong crc, const Bytef *buf, uInt len)
{
  return _crc32(crc, buf, len);
}

int deflate(z_streamp strm, int flush)
{
  return _deflate(strm, flush);
}

int deflateEnd(z_streamp strm)
{
  return _deflateEnd(strm);
}

int deflateInit_(z_streamp strm, int level, const char *version, int stream_size)
{
  return _deflateInit_(strm, level, version, stream_size);
}

int deflateReset(z_streamp strm)
{
  return _deflateReset(strm);
}

int dgesvd_(char *__jobu, char *__jobvt, __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_doublereal *__s, __CLPK_doublereal *__u, __CLPK_integer *__ldu, __CLPK_doublereal *__vt, __CLPK_integer *__ldvt, __CLPK_doublereal *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return _dgesvd_(__jobu, __jobvt, __m, __n, __a, __lda, __s, __u, __ldu, __vt, __ldvt, __work, __lwork, __info);
}

int dgetrf_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_integer *__ipiv, __CLPK_integer *__info)
{
  return _dgetrf_(__m, __n, __a, __lda, __ipiv, __info);
}

int dgetri_(__CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_integer *__ipiv, __CLPK_doublereal *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return _dgetri_(__n, __a, __lda, __ipiv, __work, __lwork, __info);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_block_cancel(dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return _dispatch_block_create(flags, block);
}

intptr_t dispatch_block_testcancel(dispatch_block_t block)
{
  return _dispatch_block_testcancel(block);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return _dispatch_data_create(buffer, size, queue, destructor);
}

dispatch_queue_t dispatch_get_current_queue(void)
{
  return _dispatch_get_current_queue();
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return _dispatch_get_specific(key);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return _dispatch_group_wait(group, timeout);
}

void dispatch_io_barrier(dispatch_io_t channel, dispatch_block_t barrier)
{
}

dispatch_io_t dispatch_io_create(dispatch_io_type_t type, dispatch_fd_t fd, dispatch_queue_t queue, void *cleanup_handler)
{
  return _dispatch_io_create(type, fd, queue, cleanup_handler);
}

void dispatch_io_write(dispatch_io_t channel, off_t offset, dispatch_data_t data, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return _dispatch_queue_attr_make_with_autorelease_frequency(attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return _dispatch_queue_attr_make_with_qos_class(attr, qos_class, relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  return _dispatch_queue_get_label(queue);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return _dispatch_walltime(when, delta);
}

int dladdr(const void *a1, Dl_info *a2)
{
  return _dladdr(a1, a2);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return _dlopen(__path, __mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

double drand48(void)
{
  return _drand48();
}

long double erf(long double __x)
{
  return _erf(__x);
}

long double exp(long double __x)
{
  return _exp(__x);
}

long double exp2(long double __x)
{
  return _exp2(__x);
}

float expf(float a1)
{
  return _expf(a1);
}

long double expm1(long double __x)
{
  return _expm1(__x);
}

int fclose(FILE *a1)
{
  return _fclose(a1);
}

int fcntl(int a1, int a2, ...)
{
  return _fcntl(a1, a2);
}

int feof(FILE *a1)
{
  return _feof(a1);
}

int ferror(FILE *a1)
{
  return _ferror(a1);
}

int fflush(FILE *a1)
{
  return _fflush(a1);
}

int fgetpos(FILE *a1, fpos_t *a2)
{
  return _fgetpos(a1, a2);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return _fgets(a1, a2, a3);
}

long double fmod(long double __x, long double __y)
{
  return _fmod(__x, __y);
}

float fmodf(float a1, float a2)
{
  return _fmodf(a1, a2);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return _fopen(__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return _fprintf(a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return _fputc(a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return _fputs(a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return _fread(__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return _fseek(a1, a2, a3);
}

int fseeko(FILE *__stream, off_t a2, int __whence)
{
  return _fseeko(__stream, a2, __whence);
}

int fstat(int a1, stat *a2)
{
  return _fstat(a1, a2);
}

int fsync(int a1)
{
  return _fsync(a1);
}

uint64_t ftell(FILE *a1)
{
  return _ftell(a1);
}

off_t ftello(FILE *__stream)
{
  return _ftello(__stream);
}

FILE *__cdecl funopen(const void *a1, int (__cdecl *a2)(void *, char *, int), int (__cdecl *a3)(void *, const char *, int), fpos_t (__cdecl *a4)(void *, fpos_t, int), int (__cdecl *a5)(void *))
{
  return _funopen(a1, a2, a3, a4, a5);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return _fwrite(__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return _getenv(a1);
}

gid_t getgid(void)
{
  return _getgid();
}

group *__cdecl getgrnam(const char *a1)
{
  return _getgrnam(a1);
}

pid_t getpid(void)
{
  return _getpid();
}

passwd *__cdecl getpwnam(const char *a1)
{
  return _getpwnam(a1);
}

int gettimeofday(timeval *a1, void *a2)
{
  return _gettimeofday(a1, a2);
}

uid_t getuid(void)
{
  return _getuid();
}

tm *__cdecl gmtime(const time_t *a1)
{
  return _gmtime(a1);
}

int gzclose(gzFile file)
{
  return _gzclose(file);
}

int gzeof(gzFile file)
{
  return _gzeof(file);
}

gzFile gzopen(const char *a1, const char *a2)
{
  return _gzopen(a1, a2);
}

int gzread(gzFile file, voidp buf, unsigned int len)
{
  return _gzread(file, buf, len);
}

long double hypot(long double __x, long double __y)
{
  return _hypot(__x, __y);
}

float hypotf(float a1, float a2)
{
  return _hypotf(a1, a2);
}

uint64_t kdebug_trace()
{
  return _kdebug_trace();
}

int lchmod(const char *a1, mode_t a2)
{
  return _lchmod(a1, a2);
}

int lchown(const char *a1, uid_t a2, gid_t a3)
{
  return _lchown(a1, a2, a3);
}

long double ldexp(long double __x, int __e)
{
  return _ldexp(__x, __e);
}

tm *__cdecl localtime(const time_t *a1)
{
  return _localtime(a1);
}

long double log(long double __x)
{
  return _log(__x);
}

long double log10(long double __x)
{
  return _log10(__x);
}

float log10f(float a1)
{
  return _log10f(a1);
}

long double log2(long double __x)
{
  return _log2(__x);
}

float log2f(float a1)
{
  return _log2f(a1);
}

float logf(float a1)
{
  return _logf(a1);
}

off_t lseek(int a1, off_t a2, int a3)
{
  return _lseek(a1, a2, a3);
}

int lstat(const char *a1, stat *a2)
{
  return _lstat(a1, a2);
}

uint64_t mach_absolute_time(void)
{
  return _mach_absolute_time();
}

uint64_t mach_continuous_approximate_time(void)
{
  return _mach_continuous_approximate_time();
}

uint64_t mach_continuous_time(void)
{
  return _mach_continuous_time();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return _mach_error_string(error_value);
}

uint64_t mach_get_times()
{
  return _mach_get_times();
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return _mach_msg(msg, option, send_size, rcv_size, rcv_name, timeout, notify);
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return _mach_timebase_info(info);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_realloc(ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return _memchr(__s, __c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return _memset(__b, __c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

void mig_dealloc_reply_port(mach_port_t reply_port)
{
}

mach_port_t mig_get_reply_port(void)
{
  return _mig_get_reply_port();
}

void mig_put_reply_port(mach_port_t reply_port)
{
}

int mkdir(const char *a1, mode_t a2)
{
  return _mkdir(a1, a2);
}

time_t mktime(tm *a1)
{
  return _mktime(a1);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return _mmap(a1, a2, a3, a4, a5, a6);
}

long double modf(long double __x, long double *__y)
{
  return _modf(__x, __y);
}

float modff(float a1, float *a2)
{
  return _modff(a1, a2);
}

int munmap(void *a1, size_t a2)
{
  return _munmap(a1, a2);
}

double nan(const char *a1)
{
  return _nan(a1);
}

long double nextafter(long double __x, long double __y)
{
  return _nextafter(__x, __y);
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return _notify_get_state(token, state64);
}

BOOL notify_is_valid_token(int val)
{
  return _notify_is_valid_token(val);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return _notify_register_check(name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_begin_catch(void *exc_buf)
{
  return _objc_begin_catch(exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

Class objc_getClass(const char *name)
{
  return _objc_getClass(name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeak(id *location)
{
  return _objc_loadWeak(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

int open(const char *a1, int a2, ...)
{
  return _open(a1, a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return _open_dprotected_np(a1, a2, a3, a4);
}

DIR *__cdecl opendir(const char *a1)
{
  return _opendir(a1);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return _os_signpost_enabled(log);
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_is_darwinos()
{
  return _os_variant_is_darwinos();
}

void perror(const char *a1)
{
}

long double pow(long double __x, long double __y)
{
  return _pow(__x, __y);
}

float powf(float a1, float a2)
{
  return _powf(a1, a2);
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return _pread(__fd, __buf, __nbyte, a4);
}

int printf(const char *a1, ...)
{
  return _printf(a1);
}

uint64_t proc_disable_cpumon()
{
  return _proc_disable_cpumon();
}

int proc_pidpath_audittoken(audit_token_t *audittoken, void *buffer, uint32_t buffersize)
{
  return _proc_pidpath_audittoken(audittoken, buffer, buffersize);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return _pthread_attr_init(a1);
}

int pthread_attr_setschedparam(pthread_attr_t *a1, const sched_param *a2)
{
  return _pthread_attr_setschedparam(a1, a2);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return _pthread_cond_destroy(a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return _pthread_cond_init(a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return _pthread_create(a1, a2, a3, a4);
}

uint64_t pthread_dependency_fulfill_np()
{
  return _pthread_dependency_fulfill_np();
}

uint64_t pthread_dependency_init_np()
{
  return _pthread_dependency_init_np();
}

uint64_t pthread_dependency_wait_np()
{
  return _pthread_dependency_wait_np();
}

int pthread_getschedparam(pthread_t a1, int *a2, sched_param *a3)
{
  return _pthread_getschedparam(a1, a2, a3);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return _pthread_mutex_destroy(a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return _pthread_mutex_init(a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return _pthread_mutex_lock(a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return _pthread_mutex_unlock(a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return _pthread_mutexattr_destroy(a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return _pthread_mutexattr_init(a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return _pthread_mutexattr_settype(a1, a2);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return _pthread_once(a1, a2);
}

pthread_t pthread_self(void)
{
  return _pthread_self();
}

int pthread_setname_np(const char *a1)
{
  return _pthread_setname_np(a1);
}

int pthread_setschedparam(pthread_t a1, int a2, const sched_param *a3)
{
  return _pthread_setschedparam(a1, a2, a3);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return _pthread_setspecific(a1, a2);
}

int pthread_threadid_np(pthread_t a1, __uint64_t *a2)
{
  return _pthread_threadid_np(a1, a2);
}

ssize_t pwrite(int __fd, const void *__buf, size_t __nbyte, off_t a4)
{
  return _pwrite(__fd, __buf, __nbyte, a4);
}

int rand(void)
{
  return _rand();
}

uint64_t random(void)
{
  return _random();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return _read(a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return _readdir(a1);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return _remove(__p, __ec);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
}

int rmdir(const char *a1)
{
  return _rmdir(a1);
}

uint64_t sandbox_extension_consume()
{
  return _sandbox_extension_consume();
}

uint64_t sandbox_extension_issue_file()
{
  return _sandbox_extension_issue_file();
}

uint64_t sandbox_extension_release()
{
  return _sandbox_extension_release();
}

int sched_get_priority_max(int a1)
{
  return _sched_get_priority_max(a1);
}

int sched_get_priority_min(int a1)
{
  return _sched_get_priority_min(a1);
}

int sched_yield(void)
{
  return _sched_yield();
}

int setiopolicy_np(int a1, int a2, int a3)
{
  return _setiopolicy_np(a1, a2, a3);
}

int setvbuf(FILE *a1, char *a2, int a3, size_t a4)
{
  return _setvbuf(a1, a2, a3, a4);
}

int sigaction(int a1, const sigaction *a2, sigaction *a3)
{
  return _sigaction(a1, a2, a3);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return _signal(a1, a2);
}

long double sin(long double __x)
{
  return _sin(__x);
}

float sinf(float a1)
{
  return _sinf(a1);
}

unsigned int sleep(unsigned int a1)
{
  return _sleep(a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return _snprintf(__str, __size, __format);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return _sqlite3_bind_blob(a1, a2, a3, n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return _sqlite3_bind_double(a1, a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return _sqlite3_bind_int(a1, a2, a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return _sqlite3_bind_int64(a1, a2, a3);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return _sqlite3_bind_text(a1, a2, a3, a4, a5);
}

int sqlite3_bind_zeroblob(sqlite3_stmt *a1, int a2, int n)
{
  return _sqlite3_bind_zeroblob(a1, a2, n);
}

int sqlite3_blob_close(sqlite3_blob *a1)
{
  return _sqlite3_blob_close(a1);
}

int sqlite3_blob_open(sqlite3 *a1, const char *zDb, const char *zTable, const char *zColumn, sqlite3_int64 iRow, int flags, sqlite3_blob **ppBlob)
{
  return _sqlite3_blob_open(a1, zDb, zTable, zColumn, iRow, flags, ppBlob);
}

int sqlite3_blob_read(sqlite3_blob *a1, void *Z, int N, int iOffset)
{
  return _sqlite3_blob_read(a1, Z, N, iOffset);
}

int sqlite3_blob_write(sqlite3_blob *a1, const void *z, int n, int iOffset)
{
  return _sqlite3_blob_write(a1, z, n, iOffset);
}

int sqlite3_changes(sqlite3 *a1)
{
  return _sqlite3_changes(a1);
}

int sqlite3_clear_bindings(sqlite3_stmt *a1)
{
  return _sqlite3_clear_bindings(a1);
}

int sqlite3_close(sqlite3 *a1)
{
  return _sqlite3_close(a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_blob(a1, iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_bytes(a1, iCol);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_double(a1, iCol);
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_int(a1, iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_int64(a1, iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_text(a1, iCol);
}

int sqlite3_config(int a1, ...)
{
  return _sqlite3_config(a1);
}

const char *__cdecl sqlite3_db_filename(sqlite3 *db, const char *zDbName)
{
  return _sqlite3_db_filename(db, zDbName);
}

int sqlite3_db_readonly(sqlite3 *db, const char *zDbName)
{
  return _sqlite3_db_readonly(db, zDbName);
}

int sqlite3_errcode(sqlite3 *db)
{
  return _sqlite3_errcode(db);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return _sqlite3_errmsg(a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return _sqlite3_exec(a1, sql, callback, a4, errmsg);
}

int sqlite3_extended_errcode(sqlite3 *db)
{
  return _sqlite3_extended_errcode(db);
}

int sqlite3_extended_result_codes(sqlite3 *a1, int onoff)
{
  return _sqlite3_extended_result_codes(a1, onoff);
}

int sqlite3_file_control(sqlite3 *a1, const char *zDbName, int op, void *a4)
{
  return _sqlite3_file_control(a1, zDbName, op, a4);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return _sqlite3_finalize(pStmt);
}

int sqlite3_get_autocommit(sqlite3 *a1)
{
  return _sqlite3_get_autocommit(a1);
}

sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *a1)
{
  return _sqlite3_last_insert_rowid(a1);
}

int sqlite3_limit(sqlite3 *a1, int id, int newVal)
{
  return _sqlite3_limit(a1, id, newVal);
}

int sqlite3_open(const char *filename, sqlite3 **ppDb)
{
  return _sqlite3_open(filename, ppDb);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return _sqlite3_open_v2(filename, ppDb, flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return _sqlite3_prepare_v2(db, zSql, nByte, ppStmt, pzTail);
}

void *__cdecl sqlite3_profile(sqlite3 *a1, void (__cdecl *xProfile)(void *, const char *, sqlite3_uint64), void *a3)
{
  return _sqlite3_profile(a1, xProfile, a3);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return _sqlite3_reset(pStmt);
}

const char *__cdecl sqlite3_sql(sqlite3_stmt *pStmt)
{
  return _sqlite3_sql(pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return _sqlite3_step(a1);
}

int sqlite3_stmt_status(sqlite3_stmt *a1, int op, int resetFlg)
{
  return _sqlite3_stmt_status(a1, op, resetFlg);
}

void *__cdecl sqlite3_trace(sqlite3 *a1, void (__cdecl *xTrace)(void *, const char *), void *a3)
{
  return _sqlite3_trace(a1, xTrace, a3);
}

int sqlite3_wal_checkpoint_v2(sqlite3 *db, const char *zDb, int eMode, int *pnLog, int *pnCkpt)
{
  return _sqlite3_wal_checkpoint_v2(db, zDb, eMode, pnLog, pnCkpt);
}

void srand48(uint64_t a1)
{
}

void srandom(unsigned int a1)
{
}

int sscanf(const char *a1, const char *a2, ...)
{
  return _sscanf(a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return _stat(a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return _strchr(__s, __c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return _strcpy(__dst, __src);
}

char *__cdecl strdup(const char *__s1)
{
  return _strdup(__s1);
}

char *__cdecl strerror(int __errnum)
{
  return _strerror(__errnum);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return _strlcat(__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return _strlcpy(__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return _strncmp(__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return _strncpy(__dst, __src, __n);
}

char *__cdecl strptime(const char *a1, const char *a2, tm *a3)
{
  return _strptime(a1, a2, a3);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return _strstr(__s1, __s2);
}

char *__cdecl strtok(char *__str, const char *__sep)
{
  return _strtok(__str, __sep);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return _strtol(__str, __endptr, __base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return _strtoull(__str, __endptr, __base);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return _sysctl(a1, a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return _sysctlbyname(a1, a2, a3, a4, a5);
}

int sysctlnametomib(const char *a1, int *a2, size_t *a3)
{
  return _sysctlnametomib(a1, a2, a3);
}

void syslog(int a1, const char *a2, ...)
{
}

long double tan(long double __x)
{
  return _tan(__x);
}

float tanf(float a1)
{
  return _tanf(a1);
}

time_t time(time_t *a1)
{
  return _time(a1);
}

int unlink(const char *a1)
{
  return _unlink(a1);
}

int usleep(useconds_t a1)
{
  return _usleep(a1);
}

void uuid_clear(uuid_t uu)
{
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return _uuid_compare(uu1, uu2);
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
}

void uuid_generate(uuid_t out)
{
}

void uuid_generate_random(uuid_t out)
{
}

int uuid_is_null(const uuid_t uu)
{
  return _uuid_is_null(uu);
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return _uuid_parse(in, uu);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

void vDSP_vaddD(const double *__A, vDSP_Stride __IA, const double *__B, vDSP_Stride __IB, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsaddD(const double *__A, vDSP_Stride __IA, const double *__B, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsmulD(const double *__A, vDSP_Stride __IA, const double *__B, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsubD(const double *__B, vDSP_Stride __IB, const double *__A, vDSP_Stride __IA, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  return _voucher_mach_msg_set(msg);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return _vsnprintf(__str, __size, __format, a4);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return _wmemchr(__s, __c, __n);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return _write(__fd, __buf, __nbyte);
}

const xmlChar *__cdecl xmlBufferContent(const xmlBuffer *buf)
{
  return _xmlBufferContent(buf);
}

xmlBufferPtr xmlBufferCreate(void)
{
  return _xmlBufferCreate();
}

void xmlBufferFree(xmlBufferPtr buf)
{
}

int xmlBufferLength(const xmlBuffer *buf)
{
  return _xmlBufferLength(buf);
}

void xmlFreeTextWriter(xmlTextWriterPtr writer)
{
}

xmlTextWriterPtr xmlNewTextWriterMemory(xmlBufferPtr buf, int compression)
{
  return _xmlNewTextWriterMemory(buf, compression);
}

int xmlTextWriterFlush(xmlTextWriterPtr writer)
{
  return _xmlTextWriterFlush(writer);
}

int xmlTextWriterWriteBase64(xmlTextWriterPtr writer, const char *data, int start, int len)
{
  return _xmlTextWriterWriteBase64(writer, data, start, len);
}

xpc_object_t xpc_activity_copy_criteria(xpc_activity_t activity)
{
  return _xpc_activity_copy_criteria(activity);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return _xpc_activity_get_state(activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

void xpc_activity_set_criteria(xpc_activity_t activity, xpc_object_t criteria)
{
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return _xpc_activity_set_state(activity, state);
}

BOOL xpc_activity_should_defer(xpc_activity_t activity)
{
  return _xpc_activity_should_defer(activity);
}

void xpc_activity_unregister(const char *identifier)
{
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return _xpc_connection_create_mach_service(name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

xpc_object_t xpc_data_create_with_dispatch_data(dispatch_data_t ddata)
{
  return _xpc_data_create_with_dispatch_data(ddata);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return _xpc_dictionary_create(keys, values, count);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_BOOL(xdict, key);
}

const void *__cdecl xpc_dictionary_get_data(xpc_object_t xdict, const char *key, size_t *length)
{
  return _xpc_dictionary_get_data(xdict, key, length);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_int64(xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return _xpc_get_type(object);
}

void xpc_release(xpc_object_t object)
{
}

xpc_object_t xpc_string_create(const char *string)
{
  return _xpc_string_create(string);
}

id objc_msgSend_App(void *a1, const char *a2, ...)
{
  return _[a1 App];
}

id objc_msgSend_BMIFromHeight_weight_(void *a1, const char *a2, ...)
{
  return [a1 BMIFromHeight:weight:];
}

id objc_msgSend_BandInfoTypeAsString_(void *a1, const char *a2, ...)
{
  return [a1 BandInfoTypeAsString:];
}

id objc_msgSend_CFAbsoluteTimeToNSStringKey_(void *a1, const char *a2, ...)
{
  return [a1 CFAbsoluteTimeToNSStringKey:];
}

id objc_msgSend_CLFenceHandoffTypetoString_(void *a1, const char *a2, ...)
{
  return [a1 CLFenceHandoffTypetoString:];
}

id objc_msgSend_CLMotionActivityTypeFromCMWorkoutType_(void *a1, const char *a2, ...)
{
  return [a1 CLMotionActivityTypeFromCMWorkoutType:];
}

id objc_msgSend_CLMotionTimeRangeFromCMMotionTimeRange_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "CLMotionTimeRangeFromCMMotionTimeRange:");
}

id objc_msgSend_CMSwimWorkoutLocationFromCMWorkoutLocationType_(void *a1, const char *a2, ...)
{
  return [a1 CMSwimWorkoutLocationFromCMWorkoutLocationType:];
}

id objc_msgSend_CMWorkoutTypeFromCLMotionActivityType_(void *a1, const char *a2, ...)
{
  return [a1 CMWorkoutTypeFromCLMotionActivityType:];
}

id objc_msgSend_CellularQualityStatus(void *a1, const char *a2, ...)
{
  return _[a1 CellularQualityStatus];
}

id objc_msgSend_DSLPublisher(void *a1, const char *a2, ...)
{
  return _[a1 DSLPublisher];
}

id objc_msgSend_Device(void *a1, const char *a2, ...)
{
  return _[a1 Device];
}

id objc_msgSend_F01(void *a1, const char *a2, ...)
{
  return _[a1 F01];
}

id objc_msgSend_ID(void *a1, const char *a2, ...)
{
  return _[a1 ID];
}

id objc_msgSend_IMEI(void *a1, const char *a2, ...)
{
  return _[a1 IMEI];
}

id objc_msgSend_IMSI(void *a1, const char *a2, ...)
{
  return _[a1 IMSI];
}

id objc_msgSend_ISOcountryCode(void *a1, const char *a2, ...)
{
  return _[a1 ISOcountryCode];
}

id objc_msgSend_InFocus(void *a1, const char *a2, ...)
{
  return _[a1 InFocus];
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_Location(void *a1, const char *a2, ...)
{
  return _[a1 Location];
}

id objc_msgSend_Media(void *a1, const char *a2, ...)
{
  return _[a1 Media];
}

id objc_msgSend_MicroLocationVisit(void *a1, const char *a2, ...)
{
  return _[a1 MicroLocationVisit];
}

id objc_msgSend_MotionFitnessDailyStructToNSDictionary_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "MotionFitnessDailyStructToNSDictionary:");
}

id objc_msgSend_NSDateToNSStringKey_(void *a1, const char *a2, ...)
{
  return [a1 NSDateToNSStringKey:];
}

id objc_msgSend_NSDictionaryToMotionFitnessDailyStruct_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "NSDictionaryToMotionFitnessDailyStruct:");
}

id objc_msgSend_NowPlaying(void *a1, const char *a2, ...)
{
  return _[a1 NowPlaying];
}

id objc_msgSend_RSSI(void *a1, const char *a2, ...)
{
  return _[a1 RSSI];
}

id objc_msgSend_SOSTriggerClickCount(void *a1, const char *a2, ...)
{
  return _[a1 SOSTriggerClickCount];
}

id objc_msgSend_SleepMode(void *a1, const char *a2, ...)
{
  return _[a1 SleepMode];
}

id objc_msgSend_TASPAdvertisementDeviceTypeToString_(void *a1, const char *a2, ...)
{
  return [a1 TASPAdvertisementDeviceTypeToString:];
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLBagForContext_(void *a1, const char *a2, ...)
{
  return [a1 URLBagForContext:];
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return [a1 URLByAppendingPathComponent:];
}

id objc_msgSend_URLQueryAllowedCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 URLQueryAllowedCharacterSet];
}

id objc_msgSend_URLRequest(void *a1, const char *a2, ...)
{
  return _[a1 URLRequest];
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return [a1 URLWithString:];
}

id objc_msgSend_URLWithString_relativeToURL_(void *a1, const char *a2, ...)
{
  return [a1 URLWithString:relativeToURL:];
}

id objc_msgSend_URLsForDirectory_inDomains_(void *a1, const char *a2, ...)
{
  return [a1 URLsForDirectory:inDomains:];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend_UUIDWithString_(void *a1, const char *a2, ...)
{
  return [a1 UUIDWithString:];
}

id objc_msgSend_UserFocus(void *a1, const char *a2, ...)
{
  return _[a1 UserFocus];
}

id objc_msgSend_VO2MaxInputFromCMVO2MaxInputs_(void *a1, const char *a2, ...)
{
  return [a1 VO2MaxInputFromCMVO2MaxInputs:];
}

id objc_msgSend_WakeOnWiFiStatus(void *a1, const char *a2, ...)
{
  return _[a1 WakeOnWiFiStatus];
}

id objc_msgSend_WiFiAvailabilityStatus(void *a1, const char *a2, ...)
{
  return _[a1 WiFiAvailabilityStatus];
}

id objc_msgSend_Wireless(void *a1, const char *a2, ...)
{
  return _[a1 Wireless];
}

id objc_msgSend_X(void *a1, const char *a2, ...)
{
  return _[a1 X];
}

id objc_msgSend_Y(void *a1, const char *a2, ...)
{
  return _[a1 Y];
}

id objc_msgSend_Z(void *a1, const char *a2, ...)
{
  return _[a1 Z];
}

id objc_msgSend__CLCommonIsBundleSystemService_(void *a1, const char *a2, ...)
{
  return [a1 _CLCommonIsBundleSystemService:];
}

id objc_msgSend___imHexString(void *a1, const char *a2, ...)
{
  return [a1 __imHexString];
}

id objc_msgSend__addLogger_type_(void *a1, const char *a2, ...)
{
  return [a1 _addLogger:type:];
}

id objc_msgSend__alignElevationArray_andLocationArray_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_alignElevationArray:andLocationArray:");
}

id objc_msgSend__armPeriodicScanTimer(void *a1, const char *a2, ...)
{
  return _[a1 _armPeriodicScanTimer];
}

id objc_msgSend__attachTAUnknownBeaconToDurianDevice_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_attachTAUnknownBeaconToDurianDevice:");
}

id objc_msgSend__backwardProcessingWithKFEstimatesBuffer_andKSEstimatesBuffer_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_backwardProcessingWithKFEstimatesBuffer:andKSEstimatesBuffer:");
}

id objc_msgSend__beatsPerMinute(void *a1, const char *a2, ...)
{
  return _[a1 _beatsPerMinute];
}

id objc_msgSend__blePeripheralSource(void *a1, const char *a2, ...)
{
  return _[a1 _blePeripheralSource];
}

id objc_msgSend__cacheAlternativeIdentities(void *a1, const char *a2, ...)
{
  return _[a1 _cacheAlternativeIdentities];
}

id objc_msgSend__cacheSystemServicesMap(void *a1, const char *a2, ...)
{
  return _[a1 _cacheSystemServicesMap];
}

id objc_msgSend__calculateTimeStartEndDistanceGpsPed(void *a1, const char *a2, ...)
{
  return _[a1 _calculateTimeStartEndDistanceGpsPed];
}

id objc_msgSend__cancelApSleepWakeCallBack(void *a1, const char *a2, ...)
{
  return _[a1 _cancelApSleepWakeCallBack];
}

id objc_msgSend__cancelExistingStopScanningBlock(void *a1, const char *a2, ...)
{
  return _[a1 _cancelExistingStopScanningBlock];
}

id objc_msgSend__cancelICloudMonitor(void *a1, const char *a2, ...)
{
  return _[a1 _cancelICloudMonitor];
}

id objc_msgSend__cancelPeriodicScanTimer(void *a1, const char *a2, ...)
{
  return _[a1 _cancelPeriodicScanTimer];
}

id objc_msgSend__ckpToAccessGivenKey_andInputKeyPath_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_ckpToAccessGivenKey:andInputKeyPath:");
}

id objc_msgSend__cl_BtTxPowerCharacteristicUUID(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_cl_BtTxPowerCharacteristicUUID");
}

id objc_msgSend__cl_BtTxPowerServiceUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_BtTxPowerServiceUUID];
}

id objc_msgSend__cl_DurianDebugServiceUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_DurianDebugServiceUUID];
}

id objc_msgSend__cl_DurianFeatureNotSupportedError(void *a1, const char *a2, ...)
{
  return [a1 _cl_DurianFeatureNotSupportedError];
}

id objc_msgSend__cl_DurianKeyIndexCharacteristicUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_DurianKeyIndexCharacteristicUUID];
}

id objc_msgSend__cl_DurianLoggingCharacteristicUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_DurianLoggingCharacteristicUUID];
}

id objc_msgSend__cl_DurianUnauthorizedConnectionServiceUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_DurianUnauthorizedConnectionServiceUUID];
}

id objc_msgSend__cl_DurianUnauthorizedPrecisionFindingCharacteristicUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_DurianUnauthorizedPrecisionFindingCharacteristicUUID];
}

id objc_msgSend__cl_DurianUnauthorizedSoundCharacteristicUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_DurianUnauthorizedSoundCharacteristicUUID];
}

id objc_msgSend__cl_HawkeyeAccessoryFirmwareUpdateMsgCharacteristicUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_HawkeyeAccessoryFirmwareUpdateMsgCharacteristicUUID];
}

id objc_msgSend__cl_HawkeyeAccessoryFirmwareUpdateServiceUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_HawkeyeAccessoryFirmwareUpdateServiceUUID];
}

id objc_msgSend__cl_HawkeyeAccessoryInformationServiceAccessoryCapabilitiesCharacteristicUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_HawkeyeAccessoryInformationServiceAccessoryCapabilitiesCharacteristicUUID];
}

id objc_msgSend__cl_HawkeyeAccessoryInformationServiceAccessoryCategoryCharacteristicUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_HawkeyeAccessoryInformationServiceAccessoryCategoryCharacteristicUUID];
}

id objc_msgSend__cl_HawkeyeAccessoryInformationServiceBatteryLevelCharacteristicUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_HawkeyeAccessoryInformationServiceBatteryLevelCharacteristicUUID];
}

id objc_msgSend__cl_HawkeyeAccessoryInformationServiceBatteryTypeCharacteristicUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_HawkeyeAccessoryInformationServiceBatteryTypeCharacteristicUUID];
}

id objc_msgSend__cl_HawkeyeAccessoryInformationServiceFindMyVersionCharacteristicUUID(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_cl_HawkeyeAccessoryInformationServiceFindMyVersionCharacteristicUUID");
}

id objc_msgSend__cl_HawkeyeAccessoryInformationServiceFirmwareVersionCharacteristicUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_HawkeyeAccessoryInformationServiceFirmwareVersionCharacteristicUUID];
}

id objc_msgSend__cl_HawkeyeAccessoryInformationServiceManufacturerNameCharacteristicUUID(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_cl_HawkeyeAccessoryInformationServiceManufacturerNameCharacteristicUUID");
}

id objc_msgSend__cl_HawkeyeAccessoryInformationServiceModelColorCodeCharacteristicUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_HawkeyeAccessoryInformationServiceModelColorCodeCharacteristicUUID];
}

id objc_msgSend__cl_HawkeyeAccessoryInformationServiceModelNameCharacteristicUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_HawkeyeAccessoryInformationServiceModelNameCharacteristicUUID];
}

id objc_msgSend__cl_HawkeyeAccessoryInformationServiceProductDataCharacteristicUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_HawkeyeAccessoryInformationServiceProductDataCharacteristicUUID];
}

id objc_msgSend__cl_HawkeyeAccessoryInformationServiceUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_HawkeyeAccessoryInformationServiceUUID];
}

id objc_msgSend__cl_HawkeyeConfigurationCharacteristicUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_HawkeyeConfigurationCharacteristicUUID];
}

id objc_msgSend__cl_HawkeyeDebugCharacteristicUUID(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_cl_HawkeyeDebugCharacteristicUUID");
}

id objc_msgSend__cl_HawkeyeFindMyNetworkServiceUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_HawkeyeFindMyNetworkServiceUUID];
}

id objc_msgSend__cl_HawkeyeNonOwnerCharacteristicUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_HawkeyeNonOwnerCharacteristicUUID];
}

id objc_msgSend__cl_HawkeyePairedOwnerInformationCharacteristicUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_HawkeyePairedOwnerInformationCharacteristicUUID];
}

id objc_msgSend__cl_HawkeyePreciseFindingCharacteristicUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_HawkeyePreciseFindingCharacteristicUUID];
}

id objc_msgSend__cl_PoshAccessoryNonOwnerCharacteristicUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_PoshAccessoryNonOwnerCharacteristicUUID];
}

id objc_msgSend__cl_PoshAccessoryNonOwnerServiceUUID(void *a1, const char *a2, ...)
{
  return [a1 _cl_PoshAccessoryNonOwnerServiceUUID];
}

id objc_msgSend__cl_initWithFileDescriptor_(void *a1, const char *a2, ...)
{
  return [a1 _cl_initWithFileDescriptor:];
}

id objc_msgSend__cl_isEqual_(void *a1, const char *a2, ...)
{
  return [a1 _cl_isEqual:];
}

id objc_msgSend__cleanup(void *a1, const char *a2, ...)
{
  return _[a1 _cleanup];
}

id objc_msgSend__clearBuffers(void *a1, const char *a2, ...)
{
  return _[a1 _clearBuffers];
}

id objc_msgSend__closeCurrentTrack(void *a1, const char *a2, ...)
{
  return _[a1 _closeCurrentTrack];
}

id objc_msgSend__closeTrackCheckGpsLocation(void *a1, const char *a2, ...)
{
  return _[a1 _closeTrackCheckGpsLocation];
}

id objc_msgSend__closeTrackCheckGpsOdometer(void *a1, const char *a2, ...)
{
  return _[a1 _closeTrackCheckGpsOdometer];
}

id objc_msgSend__closeTrackCheckPedometer(void *a1, const char *a2, ...)
{
  return _[a1 _closeTrackCheckPedometer];
}

id objc_msgSend__completeJourney(void *a1, const char *a2, ...)
{
  return _[a1 _completeJourney];
}

id objc_msgSend__convertTASPAdvertisementDeviceTypeToSPBeaconType_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_convertTASPAdvertisementDeviceTypeToSPBeaconType:");
}

id objc_msgSend__countPerMinuteUnit(void *a1, const char *a2, ...)
{
  return _[a1 _countPerMinuteUnit];
}

id objc_msgSend__countPerSecondUnit(void *a1, const char *a2, ...)
{
  return _[a1 _countPerSecondUnit];
}

id objc_msgSend__createErrorForDownloadStatus_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_createErrorForDownloadStatus:");
}

id objc_msgSend__createKeyValuePairsDict_metaData_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_createKeyValuePairsDict:metaData:");
}

id objc_msgSend__currentFilename(void *a1, const char *a2, ...)
{
  return _[a1 _currentFilename];
}

id objc_msgSend__decimateElevationsWithStartTime_andEndTime_andLocationArray_andElevationArray_andAggregatedLocationArray_andRawElevationArray_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_decimateElevationsWithStartTime:andEndTime:andLocationArray:andElevationArray:andAggregatedLocationArray:andRawElevationArray:");
}

id objc_msgSend__decimateLocationsWithStartTime_andEndTime_andLocationArray_andElevationArray_andRawLocationArray_andRawElevationArray_andTaskType_andVisitArray_andVisitSearchStartIndex_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_decimateLocationsWithStartTime:andEndTime:andLocationArray:andElevationArray:andRawLocationArray:andRawElevationArray:andTaskType:andVisitArray:andVisitSearchStartIndex:");
}

id objc_msgSend__deriveAndCacheSystemServicesMap(void *a1, const char *a2, ...)
{
  return _[a1 _deriveAndCacheSystemServicesMap];
}

id objc_msgSend__dictionaryForKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 _dictionaryForKey:atKeyPath:];
}

id objc_msgSend__didTransitionZoneWithData_trueMajor_trueMinor_state_(void *a1, const char *a2, ...)
{
  return [a1 _didTransitionZoneWithData:x0 trueMajor:x1 trueMinor:x2 state:x3];
}

id objc_msgSend__doSigningWhenReady(void *a1, const char *a2, ...)
{
  return _[a1 _doSigningWhenReady];
}

id objc_msgSend__elevationBatchProcessingWithStartTime_andEndTime_andLocationBuffer_andKSEstimatesBuffer_andTaskType_andCompletionBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_elevationBatchProcessingWithStartTime:andEndTime:andLocationBuffer:andKSEstimatesBuffer:andTaskType:andCompletionBlock:");
}

id objc_msgSend__enableDataCollection(void *a1, const char *a2, ...)
{
  return _[a1 _enableDataCollection];
}

id objc_msgSend__encryptData_metaData_start_end_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_encryptData:metaData:start:end:");
}

id objc_msgSend__endDate(void *a1, const char *a2, ...)
{
  return _[a1 _endDate];
}

id objc_msgSend__extremaRemovedMean_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_extremaRemovedMean:");
}

id objc_msgSend__feedLocation_(void *a1, const char *a2, ...)
{
  return [a1 _feedLocation:];
}

id objc_msgSend__fetchContinuousPlaceInferencesWithFidelityPolicy_handler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_fetchContinuousPlaceInferencesWithFidelityPolicy:handler:");
}

id objc_msgSend__fetchPlaceInferencesWithFidelityPolicy_handler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_fetchPlaceInferencesWithFidelityPolicy:handler:");
}

id objc_msgSend__filterGpsLocationBuffer(void *a1, const char *a2, ...)
{
  return _[a1 _filterGpsLocationBuffer];
}

id objc_msgSend__firmwareAssetTypeToString_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_firmwareAssetTypeToString:");
}

id objc_msgSend__firmwareDownloadCommandToString_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_firmwareDownloadCommandToString:")];
}

id objc_msgSend__firmwareDownloadStatusToString_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_firmwareDownloadStatusToString:");
}

id objc_msgSend__flightsClimbed(void *a1, const char *a2, ...)
{
  return _[a1 _flightsClimbed];
}

id objc_msgSend__forEachLogger_(void *a1, const char *a2, ...)
{
  return [a1 _forEachLogger:];
}

id objc_msgSend__forEachLoggerWithType_logItem_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_forEachLoggerWithType:logItem:");
}

id objc_msgSend__forwardProcessingWithLocationArray_andElevationArray_andKFEstimatesBuffer_andKeepAllLocations_andTaskType_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_forwardProcessingWithLocationArray:andElevationArray:andKFEstimatesBuffer:andKeepAllLocations:andTaskType:");
}

id objc_msgSend__gatherLocationArray_andElevationArray_andTaskType_withStartTime_andEndTime_andVisitArray_andVisitSearchStartIndex_andCompletionBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_gatherLocationArray:andElevationArray:andTaskType:withStartTime:andEndTime:andVisitArray:andVisitSearchStartIndex:andCompletionBlock:");
}

id objc_msgSend__getDefaultDeniedSystemServices(void *a1, const char *a2, ...)
{
  return _[a1 _getDefaultDeniedSystemServices];
}

id objc_msgSend__getElevationStartIndex_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_getElevationStartIndex:");
}

id objc_msgSend__getLastPredictionIndexWithKFEstimatesBuffer_fromIndex_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_getLastPredictionIndexWithKFEstimatesBuffer:fromIndex:");
}

id objc_msgSend__getTimestampWithElevationArray_atIndex_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_getTimestampWithElevationArray:atIndex:");
}

id objc_msgSend__getTimestampWithLocationArray_atIndex_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_getTimestampWithLocationArray:atIndex:");
}

id objc_msgSend__hasFirstPartyBundleID(void *a1, const char *a2, ...)
{
  return _[a1 _hasFirstPartyBundleID];
}

id objc_msgSend__initKalmanFilter_withLocationArray_andElevationArray_andTaskType_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_initKalmanFilter:withLocationArray:andElevationArray:andTaskType:");
}

id objc_msgSend__initWithRTPlaceInference_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_initWithRTPlaceInference:");
}

id objc_msgSend__initWithUUID_major_minor_(void *a1, const char *a2, ...)
{
  return [a1 _initWithUUID:x0 major:x1 minor:x2];
}

id objc_msgSend__initializeMescalWithCompletion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_initializeMescalWithCompletion:");
}

id objc_msgSend__initializeValueForKey_withDefault_(void *a1, const char *a2, ...)
{
  return [a1 _initializeValueForKey:withDefault:];
}

id objc_msgSend__insertSample_(void *a1, const char *a2, ...)
{
  return [a1 _insertSample:];
}

id objc_msgSend__installICloudMonitor(void *a1, const char *a2, ...)
{
  return _[a1 _installICloudMonitor];
}

id objc_msgSend__installScreenWakeMonitor(void *a1, const char *a2, ...)
{
  return _[a1 _installScreenWakeMonitor];
}

id objc_msgSend__internalMigrationClearUnknownKeys(void *a1, const char *a2, ...)
{
  return _[a1 _internalMigrationClearUnknownKeys];
}

id objc_msgSend__internalMigrationLegacyKeys(void *a1, const char *a2, ...)
{
  return _[a1 _internalMigrationLegacyKeys];
}

id objc_msgSend__internalMigrationRegisterAllClients(void *a1, const char *a2, ...)
{
  return _[a1 _internalMigrationRegisterAllClients];
}

id objc_msgSend__interpolatePressureValuesWithElevationArray_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_interpolatePressureValuesWithElevationArray:");
}

id objc_msgSend__invalidateSpeedEstimate(void *a1, const char *a2, ...)
{
  return _[a1 _invalidateSpeedEstimate];
}

id objc_msgSend__isBundlePathReachable_(void *a1, const char *a2, ...)
{
  return [a1 _isBundlePathReachable:];
}

id objc_msgSend__isSignedIn(void *a1, const char *a2, ...)
{
  return _[a1 _isSignedIn];
}

id objc_msgSend__isStoreConnected(void *a1, const char *a2, ...)
{
  return _[a1 _isStoreConnected];
}

id objc_msgSend__isValidAuthLimitedKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 _isValidAuthLimitedKeyPath:];
}

id objc_msgSend__kalmanSmootherUpdateWithKFEstimatesBuffer_andKSEstimatesBuffer_andCurrPredictionIndex_andNextPredictionIndex_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_kalmanSmootherUpdateWithKFEstimatesBuffer:andKSEstimatesBuffer:andCurrPredictionIndex:andNextPredictionIndex:");
}

id objc_msgSend__loadSubjectAuth(void *a1, const char *a2, ...)
{
  return _[a1 _loadSubjectAuth];
}

id objc_msgSend__loadSubjectUUID(void *a1, const char *a2, ...)
{
  return _[a1 _loadSubjectUUID];
}

id objc_msgSend__logValuesOfFilteredLocations_andTaskType_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_logValuesOfFilteredLocations:andTaskType:");
}

id objc_msgSend__logValuesOfLocationArray_andElevationArray_andTaskType_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_logValuesOfLocationArray:andElevationArray:andTaskType:");
}

id objc_msgSend__loiIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 _loiIdentifier];
}

id objc_msgSend__measurementUpdate_withLocation_(void *a1, const char *a2, ...)
{
  return [a1 _measurementUpdate:withLocation:];
}

id objc_msgSend__mescalSignerNSURLSession(void *a1, const char *a2, ...)
{
  return _[a1 _mescalSignerNSURLSession];
}

id objc_msgSend__onBluetoothServiceNotification_data_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_onBluetoothServiceNotification:data:");
}

id objc_msgSend__onDaemonStatusNotification_data_(void *a1, const char *a2, ...)
{
  return [_onDaemonStatusNotification:data:];
}

id objc_msgSend__onWifiServiceNotification_data_(void *a1, const char *a2, ...)
{
  return [_onWifiServiceNotification:data:];
}

id objc_msgSend__outputStream(void *a1, const char *a2, ...)
{
  return _[a1 _outputStream];
}

id objc_msgSend__placeInference(void *a1, const char *a2, ...)
{
  return _[a1 _placeInference];
}

id objc_msgSend__predicateForObjectsFromAppleWatches(void *a1, const char *a2, ...)
{
  return _[a1 _predicateForObjectsFromAppleWatches];
}

id objc_msgSend__predictionUpdate_withElevation_withNextElevation_withTravelVelocity_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_predictionUpdate:withElevation:withNextElevation:withTravelVelocity:");
}

id objc_msgSend__prepareForFirmwareDownload(void *a1, const char *a2, ...)
{
  return _[a1 _prepareForFirmwareDownload];
}

id objc_msgSend__productType(void *a1, const char *a2, ...)
{
  return _[a1 _productType];
}

id objc_msgSend__queryVisitStateByTimestamp_withHistoricalVisits_andVisitSearchStartIndex_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_queryVisitStateByTimestamp:withHistoricalVisits:andVisitSearchStartIndex:");
}

id objc_msgSend__readPersonalizationInformation(void *a1, const char *a2, ...)
{
  return _[a1 _readPersonalizationInformation];
}

id objc_msgSend__recomputeCoexImpactedStateAndNotifyClients(void *a1, const char *a2, ...)
{
  return _[a1 _recomputeCoexImpactedStateAndNotifyClients];
}

id objc_msgSend__registerForLinkChangedNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _registerForLinkChangedNotifications];
}

id objc_msgSend__registerForLqmScoreNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _registerForLqmScoreNotifications];
}

id objc_msgSend__registerForNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _registerForNotifications];
}

id objc_msgSend__registerForWowChangeNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _registerForWowChangeNotifications];
}

id objc_msgSend__rejectOutlyingLocation_withKFEstimates_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_rejectOutlyingLocation:withKFEstimates:");
}

id objc_msgSend__removeAdditionalInconsistentSpeedPedometerEntries(void *a1, const char *a2, ...)
{
  return _[a1 _removeAdditionalInconsistentSpeedPedometerEntries];
}

id objc_msgSend__removeDictionaryAtKeyPath_shouldLog_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_removeDictionaryAtKeyPath:shouldLog:");
}

id objc_msgSend__removeInVisitLocation_withVisitArray_andVisitSearchStartIndex_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_removeInVisitLocation:withVisitArray:andVisitSearchStartIndex:");
}

id objc_msgSend__retrievePeripheralForMaterial_isFindMyNetwork_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_retrievePeripheralForMaterial:isFindMyNetwork:");
}

id objc_msgSend__runAdv(void *a1, const char *a2, ...)
{
  return _[a1 _runAdv];
}

id objc_msgSend__runScan(void *a1, const char *a2, ...)
{
  return _[a1 _runScan];
}

id objc_msgSend__saveSubjectAuth_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_saveSubjectAuth:");
}

id objc_msgSend__saveSubjectUUID_(void *a1, const char *a2, ...)
{
  return [a1 _saveSubjectUUID:];
}

id objc_msgSend__scheduleWifiArtifactsAllocation_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_scheduleWifiArtifactsAllocation:");
}

id objc_msgSend__sendCommandToDevice_(void *a1, const char *a2, ...)
{
  return [a1 _sendCommandToDevice:];
}

id objc_msgSend__sendElevationsFromEstimates_startIndex_withCompletionBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_sendElevationsFromEstimates:startIndex:withCompletionBlock:");
}

id objc_msgSend__sendFirmwareAsset_assetData_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_sendFirmwareAsset:assetData:");
}

id objc_msgSend__sendHistoricalMeanSeaLevelPressureWithKSEstimatesBuffer_andCompletionBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_sendHistoricalMeanSeaLevelPressureWithKSEstimatesBuffer:andCompletionBlock:");
}

id objc_msgSend__sendMessage_identifier_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_sendMessage:identifier:error:");
}

id objc_msgSend__sendNextAsset(void *a1, const char *a2, ...)
{
  return _[a1 _sendNextAsset];
}

id objc_msgSend__sendNextPacketToDevice_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_sendNextPacketToDevice:");
}

id objc_msgSend__setQueue_(void *a1, const char *a2, ...)
{
  return [a1 _setQueue:];
}

id objc_msgSend__setResponseSilo_(void *a1, const char *a2, ...)
{
  return [a1 _setResponseSilo:];
}

id objc_msgSend__setUpDefaultDeniedSystemServices(void *a1, const char *a2, ...)
{
  return _[a1 _setUpDefaultDeniedSystemServices];
}

id objc_msgSend__setXPCCriteriaForActivity_withDescription_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_setXPCCriteriaForActivity:withDescription:");
}

id objc_msgSend__setupMonitoringEvent(void *a1, const char *a2, ...)
{
  return _[a1 _setupMonitoringEvent];
}

id objc_msgSend__setupSettings(void *a1, const char *a2, ...)
{
  return _[a1 _setupSettings];
}

id objc_msgSend__setupSystemServiceDictionaries(void *a1, const char *a2, ...)
{
  return _[a1 _setupSystemServiceDictionaries];
}

id objc_msgSend__shouldLogValueForKey_(void *a1, const char *a2, ...)
{
  return [a1 _shouldLogValueForKey:];
}

id objc_msgSend__shouldRotate(void *a1, const char *a2, ...)
{
  return _[a1 _shouldRotate];
}

id objc_msgSend__shouldRotateToHour_date_(void *a1, const char *a2, ...)
{
  return [a1 _shouldRotateToHour:date:];
}

id objc_msgSend__startDate(void *a1, const char *a2, ...)
{
  return _[a1 _startDate];
}

id objc_msgSend__startPermanentScanning(void *a1, const char *a2, ...)
{
  return _[a1 _startPermanentScanning];
}

id objc_msgSend__startTimedScanningWithReason_(void *a1, const char *a2, ...)
{
  return [a1 _startTimedScanningWithReason:];
}

id objc_msgSend__stopAdvertising(void *a1, const char *a2, ...)
{
  return _[a1 _stopAdvertising];
}

id objc_msgSend__stopFetchingContinuousPlaceInferences(void *a1, const char *a2, ...)
{
  return _[a1 _stopFetchingContinuousPlaceInferences];
}

id objc_msgSend__stopLoggingOnQueue(void *a1, const char *a2, ...)
{
  return _[a1 _stopLoggingOnQueue];
}

id objc_msgSend__stopScanning(void *a1, const char *a2, ...)
{
  return _[a1 _stopScanning];
}

id objc_msgSend__stopScanningWithReason_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_stopScanningWithReason:");
}

id objc_msgSend__unboostingRemoteObjectProxy(void *a1, const char *a2, ...)
{
  return _[a1 _unboostingRemoteObjectProxy];
}

id objc_msgSend__unregisterForEventsNotification(void *a1, const char *a2, ...)
{
  return _[a1 _unregisterForEventsNotification];
}

id objc_msgSend__unregisterForLinkChangedNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _unregisterForLinkChangedNotifications];
}

id objc_msgSend__unregisterForLqmScoreNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _unregisterForLqmScoreNotifications];
}

id objc_msgSend__unregisterForNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _unregisterForNotifications];
}

id objc_msgSend__unregisterForWowChangeNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _unregisterForWowChangeNotifications];
}

id objc_msgSend__updateGpsLocationBufferFiltered_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_updateGpsLocationBufferFiltered:");
}

id objc_msgSend__updateLocation_(void *a1, const char *a2, ...)
{
  return [a1 _updateLocation:];
}

id objc_msgSend__value(void *a1, const char *a2, ...)
{
  return _[a1 _value];
}

id objc_msgSend__valueForKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_valueForKey:atKeyPath:");
}

id objc_msgSend__visitWithVisit_authDate_(void *a1, const char *a2, ...)
{
  return [a1 _visitWithVisit:authDate:];
}

id objc_msgSend_aa_isAccountClass_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "aa_isAccountClass:");
}

id objc_msgSend_aa_isManagedAppleID(void *a1, const char *a2, ...)
{
  return [a1 aa_isManagedAppleID];
}

id objc_msgSend_aa_personID(void *a1, const char *a2, ...)
{
  return [a1 aa_personID];
}

id objc_msgSend_aa_primaryAppleAccount(void *a1, const char *a2, ...)
{
  return [a1 aa_primaryAppleAccount];
}

id objc_msgSend_abortFirmwareUpdate(void *a1, const char *a2, ...)
{
  return _[a1 abortFirmwareUpdate];
}

id objc_msgSend_abortFirmwareUpdate_(void *a1, const char *a2, ...)
{
  return [a1 abortFirmwareUpdate:];
}

id objc_msgSend_absoluteAltitudeUpdate_(void *a1, const char *a2, ...)
{
  return [a1 absoluteAltitudeUpdate:];
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _[a1 absoluteString];
}

id objc_msgSend_absoluteTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 absoluteTimestamp];
}

id objc_msgSend_acceleration(void *a1, const char *a2, ...)
{
  return _[a1 acceleration];
}

id objc_msgSend_accelerometerDataFromDate_toDate_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "accelerometerDataFromDate:toDate:");
}

id objc_msgSend_accessoryCategory(void *a1, const char *a2, ...)
{
  return _[a1 accessoryCategory];
}

id objc_msgSend_accessoryHasNMEASentencesAvailable(void *a1, const char *a2, ...)
{
  return _[a1 accessoryHasNMEASentencesAvailable];
}

id objc_msgSend_accessoryInfo(void *a1, const char *a2, ...)
{
  return _[a1 accessoryInfo];
}

id objc_msgSend_accessoryList(void *a1, const char *a2, ...)
{
  return _[a1 accessoryList];
}

id objc_msgSend_accessoryMeta(void *a1, const char *a2, ...)
{
  return _[a1 accessoryMeta];
}

id objc_msgSend_accessoryReachable_(void *a1, const char *a2, ...)
{
  return [a1 accessoryReachable:];
}

id objc_msgSend_accessoryTypeName(void *a1, const char *a2, ...)
{
  return _[a1 accessoryTypeName];
}

id objc_msgSend_accessoryUnreachable_(void *a1, const char *a2, ...)
{
  return [a1 accessoryUnreachable:];
}

id objc_msgSend_accountChangeEvent(void *a1, const char *a2, ...)
{
  return _[a1 accountChangeEvent];
}

id objc_msgSend_accountInfoWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 accountInfoWithCompletionHandler:];
}

id objc_msgSend_accountStatus(void *a1, const char *a2, ...)
{
  return _[a1 accountStatus];
}

id objc_msgSend_accountTypeWithIdentifier_completion_(void *a1, const char *a2, ...)
{
  return [a1 accountTypeWithIdentifier:x0 completion:x1];
}

id objc_msgSend_accountsWithAccountType_completion_(void *a1, const char *a2, ...)
{
  return [a1 accountsWithAccountType:completion:];
}

id objc_msgSend_accumulateMaintainedReasonCountWithReason_andCategory_(void *a1, const char *a2, ...)
{
  return [a1 accumulateMaintainedReasonCountWithReason:andCategory:];
}

id objc_msgSend_accuracy(void *a1, const char *a2, ...)
{
  return _[a1 accuracy];
}

id objc_msgSend_acknowledgeAlarm_withReply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "acknowledgeAlarm:withReply:");
}

id objc_msgSend_acknowledgeNotification_(void *a1, const char *a2, ...)
{
  return [a1 acknowledgeNotification:];
}

id objc_msgSend_acquireMutexForTask_(void *a1, const char *a2, ...)
{
  return [a1 acquireMutexForTask:];
}

id objc_msgSend_acquireTokenWithSettings_publisher_(void *a1, const char *a2, ...)
{
  return [a1 acquireTokenWithSettings:publisher:];
}

id objc_msgSend_acquireWithError_(void *a1, const char *a2, ...)
{
  return [a1 acquireWithError:];
}

id objc_msgSend_acquireWithHandler_invalidationHandler_(void *a1, const char *a2, ...)
{
  return [a1 acquireWithHandler:invalidationHandler:];
}

id objc_msgSend_acquireWithHandler_onQueue_(void *a1, const char *a2, ...)
{
  return [a1 acquireWithHandler:onQueue:];
}

id objc_msgSend_actOnPendingDeleteForClientKey_(void *a1, const char *a2, ...)
{
  return [a1 actOnPendingDeleteForClientKey:];
}

id objc_msgSend_actionWithLabel_url_(void *a1, const char *a2, ...)
{
  return [a1 actionWithLabel:url:];
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return _[a1 activate];
}

id objc_msgSend_activateClientDevice_(void *a1, const char *a2, ...)
{
  return [a1 activateClientDevice:];
}

id objc_msgSend_activatePendingConnectionAttemptForDevice_(void *a1, const char *a2, ...)
{
  return [a1 activatePendingConnectionAttemptForDevice:];
}

id objc_msgSend_activateRapportLinkIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 activateRapportLinkIfNecessary];
}

id objc_msgSend_activateWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 activateWithCompletion:];
}

id objc_msgSend_activeAccessory(void *a1, const char *a2, ...)
{
  return _[a1 activeAccessory];
}

id objc_msgSend_activeClients(void *a1, const char *a2, ...)
{
  return _[a1 activeClients];
}

id objc_msgSend_activeConnectionAttempt(void *a1, const char *a2, ...)
{
  return _[a1 activeConnectionAttempt];
}

id objc_msgSend_activeContexts(void *a1, const char *a2, ...)
{
  return _[a1 activeContexts];
}

id objc_msgSend_activeDeviceId(void *a1, const char *a2, ...)
{
  return _[a1 activeDeviceId];
}

id objc_msgSend_activeDeviceNearbyStatus(void *a1, const char *a2, ...)
{
  return _[a1 activeDeviceNearbyStatus];
}

id objc_msgSend_activeDeviceSelectorBlock(void *a1, const char *a2, ...)
{
  return _[a1 activeDeviceSelectorBlock];
}

id objc_msgSend_activeDevices(void *a1, const char *a2, ...)
{
  return _[a1 activeDevices];
}

id objc_msgSend_activeFenceSessions(void *a1, const char *a2, ...)
{
  return _[a1 activeFenceSessions];
}

id objc_msgSend_activeIntervalEvents(void *a1, const char *a2, ...)
{
  return _[a1 activeIntervalEvents];
}

id objc_msgSend_activeOdometryClients(void *a1, const char *a2, ...)
{
  return _[a1 activeOdometryClients];
}

id objc_msgSend_activePeripheral(void *a1, const char *a2, ...)
{
  return _[a1 activePeripheral];
}

id objc_msgSend_activePeripheralMaterial(void *a1, const char *a2, ...)
{
  return _[a1 activePeripheralMaterial];
}

id objc_msgSend_activePeripheralReady(void *a1, const char *a2, ...)
{
  return _[a1 activePeripheralReady];
}

id objc_msgSend_activeRequestCleanupTimer(void *a1, const char *a2, ...)
{
  return _[a1 activeRequestCleanupTimer];
}

id objc_msgSend_activeRequests(void *a1, const char *a2, ...)
{
  return _[a1 activeRequests];
}

id objc_msgSend_activeStreamingClients(void *a1, const char *a2, ...)
{
  return _[a1 activeStreamingClients];
}

id objc_msgSend_activeSyncSession(void *a1, const char *a2, ...)
{
  return _[a1 activeSyncSession];
}

id objc_msgSend_activeTask(void *a1, const char *a2, ...)
{
  return _[a1 activeTask];
}

id objc_msgSend_activeTime(void *a1, const char *a2, ...)
{
  return _[a1 activeTime];
}

id objc_msgSend_activeWatchSyncSession(void *a1, const char *a2, ...)
{
  return _[a1 activeWatchSyncSession];
}

id objc_msgSend_activity(void *a1, const char *a2, ...)
{
  return _[a1 activity];
}

id objc_msgSend_activityAlarmAvailable(void *a1, const char *a2, ...)
{
  return _[a1 activityAlarmAvailable];
}

id objc_msgSend_activityAttribution(void *a1, const char *a2, ...)
{
  return _[a1 activityAttribution];
}

id objc_msgSend_activityDuration(void *a1, const char *a2, ...)
{
  return _[a1 activityDuration];
}

id objc_msgSend_activityEndTime(void *a1, const char *a2, ...)
{
  return _[a1 activityEndTime];
}

id objc_msgSend_activityLoggerLogStrideCalEntry_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "activityLoggerLogStrideCalEntry:");
}

id objc_msgSend_activityOverrideMsg(void *a1, const char *a2, ...)
{
  return _[a1 activityOverrideMsg];
}

id objc_msgSend_adamId(void *a1, const char *a2, ...)
{
  return _[a1 adamId];
}

id objc_msgSend_adaptee(void *a1, const char *a2, ...)
{
  return _[a1 adaptee];
}

id objc_msgSend_adapter(void *a1, const char *a2, ...)
{
  return _[a1 adapter];
}

id objc_msgSend_addAccessPoints_(void *a1, const char *a2, ...)
{
  return [a1 addAccessPoints:];
}

id objc_msgSend_addAccessory_assetID_(void *a1, const char *a2, ...)
{
  return [a1 addAccessory:assetID:];
}

id objc_msgSend_addAccessoryLocation_(void *a1, const char *a2, ...)
{
  return [a1 addAccessoryLocation:];
}

id objc_msgSend_addAlarm_(void *a1, const char *a2, ...)
{
  return [a1 addAlarm:];
}

id objc_msgSend_addAttribution_(void *a1, const char *a2, ...)
{
  return [a1 addAttribution:];
}

id objc_msgSend_addAzimuths_(void *a1, const char *a2, ...)
{
  return [a1 addAzimuths:];
}

id objc_msgSend_addBackgroundInertialOdometrySamples_handler_(void *a1, const char *a2, ...)
{
  return [a1 addBackgroundInertialOdometrySamples:x0 handler:x1];
}

id objc_msgSend_addCarryingItem_(void *a1, const char *a2, ...)
{
  return [a1 addCarryingItem:];
}

id objc_msgSend_addCdmaCellTower_(void *a1, const char *a2, ...)
{
  return [a1 addCdmaCellTower:];
}

id objc_msgSend_addCdmaEvdoTower_(void *a1, const char *a2, ...)
{
  return [a1 addCdmaEvdoTower:];
}

id objc_msgSend_addCdmaNeighbors_(void *a1, const char *a2, ...)
{
  return [a1 addCdmaNeighbors:];
}

id objc_msgSend_addCellTower_(void *a1, const char *a2, ...)
{
  return [a1 addCellTower:];
}

id objc_msgSend_addClient_(void *a1, const char *a2, ...)
{
  return [a1 addClient:];
}

id objc_msgSend_addClient_prepareSessionEndForSessionType_(void *a1, const char *a2, ...)
{
  return [a1 addClient:prepareSessionEndForSessionType:];
}

id objc_msgSend_addCnos_(void *a1, const char *a2, ...)
{
  return [a1 addCnos:];
}

id objc_msgSend_addConditionForMonitoring_identifier_(void *a1, const char *a2, ...)
{
  return [a1 addConditionForMonitoring:identifier];
}

id objc_msgSend_addConfigForIsoList_config_error_(void *a1, const char *a2, ...)
{
  return [a1 addConfigForIsoList:x0 config:x1 error:x2];
}

id objc_msgSend_addDataSource_(void *a1, const char *a2, ...)
{
  return [a1 addDataSource:];
}

id objc_msgSend_addDelegate_queue_(void *a1, const char *a2, ...)
{
  return [a1 addDelegate:queue:];
}

id objc_msgSend_addDiscoveryType_(void *a1, const char *a2, ...)
{
  return [a1 addDiscoveryType:];
}

id objc_msgSend_addElevations_(void *a1, const char *a2, ...)
{
  return [a1 addElevations:];
}

id objc_msgSend_addElevations_handler_(void *a1, const char *a2, ...)
{
  return [a1 addElevations:handler:];
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return [a1 addEntriesFromDictionary:];
}

id objc_msgSend_addEntry_(void *a1, const char *a2, ...)
{
  return [a1 addEntry:];
}

id objc_msgSend_addEvent_atTime_(void *a1, const char *a2, ...)
{
  return [a1 addEvent:atTime:];
}

id objc_msgSend_addFakeNPLOIDataForTesting_(void *a1, const char *a2, ...)
{
  return [a1 addFakeNPLOIDataForTesting:];
}

id objc_msgSend_addFence_(void *a1, const char *a2, ...)
{
  return [a1 addFence:];
}

id objc_msgSend_addGeoMapDataSubscriptionForType_latitude_longitude_config_nploiIndex_(void *a1, const char *a2, ...)
{
  return [a1 addGeoMapDataSubscriptionForType:latitude:longitude:config:nploiIndex:];
}

id objc_msgSend_addGsmNeighbors_(void *a1, const char *a2, ...)
{
  return [a1 addGsmNeighbors:];
}

id objc_msgSend_addHawkeyeTestModeTask(void *a1, const char *a2, ...)
{
  return _[a1 addHawkeyeTestModeTask];
}

id objc_msgSend_addIndex_(void *a1, const char *a2, ...)
{
  return [a1 addIndex:];
}

id objc_msgSend_addInertialData_(void *a1, const char *a2, ...)
{
  return [a1 addInertialData:];
}

id objc_msgSend_addInputs_(void *a1, const char *a2, ...)
{
  return [a1 addInputs:];
}

id objc_msgSend_addInterestZones_(void *a1, const char *a2, ...)
{
  return [a1 addInterestZones:];
}

id objc_msgSend_addInterval_(void *a1, const char *a2, ...)
{
  return [a1 addInterval:];
}

id objc_msgSend_addInterval_type_confidence_(void *a1, const char *a2, ...)
{
  return [a1 addInterval:x0 type:x1 confidence:x2];
}

id objc_msgSend_addIsUsedInFixes_(void *a1, const char *a2, ...)
{
  return [a1 addIsUsedInFixes:];
}

id objc_msgSend_addKeyValuePair_with_(void *a1, const char *a2, ...)
{
  return [a1 addKeyValuePair:x0 with:x1];
}

id objc_msgSend_addLatestCalData_(void *a1, const char *a2, ...)
{
  return [a1 addLatestCalData:];
}

id objc_msgSend_addLocation_(void *a1, const char *a2, ...)
{
  return [a1 addLocation:];
}

id objc_msgSend_addLocationFingerprint_(void *a1, const char *a2, ...)
{
  return [a1 addLocationFingerprint:];
}

id objc_msgSend_addLocations_(void *a1, const char *a2, ...)
{
  return [a1 addLocations:];
}

id objc_msgSend_addLogger_(void *a1, const char *a2, ...)
{
  return [a1 addLogger:];
}

id objc_msgSend_addLteCellTower_(void *a1, const char *a2, ...)
{
  return [a1 addLteCellTower:];
}

id objc_msgSend_addLteNeighbors_(void *a1, const char *a2, ...)
{
  return [a1 addLteNeighbors:];
}

id objc_msgSend_addMacModes_(void *a1, const char *a2, ...)
{
  return [a1 addMacModes:];
}

id objc_msgSend_addMacs_(void *a1, const char *a2, ...)
{
  return [a1 addMacs:];
}

id objc_msgSend_addMarkets_(void *a1, const char *a2, ...)
{
  return [a1 addMarkets:];
}

id objc_msgSend_addModes_(void *a1, const char *a2, ...)
{
  return [a1 addModes:];
}

id objc_msgSend_addMonitor_(void *a1, const char *a2, ...)
{
  return [a1 addMonitor:];
}

id objc_msgSend_addMonitoredRegion_(void *a1, const char *a2, ...)
{
  return [a1 addMonitoredRegion:];
}

id objc_msgSend_addMonitoringPeriodFrom_until_(void *a1, const char *a2, ...)
{
  return [a1 addMonitoringPeriodFrom:until:];
}

id objc_msgSend_addMonitoringRecord_forIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 addMonitoringRecord:forIdentifier:];
}

id objc_msgSend_addNr5GCellTower_(void *a1, const char *a2, ...)
{
  return [a1 addNr5GCellTower:];
}

id objc_msgSend_addNrNeighbors_(void *a1, const char *a2, ...)
{
  return [a1 addNrNeighbors:];
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return [a1 addObject:];
}

id objc_msgSend_addObject_withSyncSessionReason_(void *a1, const char *a2, ...)
{
  return [a1 addObject:withSyncSessionReason:];
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return [a1 addObjectsFromArray:];
}

id objc_msgSend_addObserver_(void *a1, const char *a2, ...)
{
  return [a1 addObserver:];
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return [a1 addObserver:forKeyPath:options:context:];
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return [a1 addObserver:x0 selector:x1 name:x2 object:x3];
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return [a1 addObserverForName:object:queue:usingBlock:];
}

id objc_msgSend_addPendingDatabaseChanges_(void *a1, const char *a2, ...)
{
  return [a1 addPendingDatabaseChanges:];
}

id objc_msgSend_addPendingRecordChanges_forZoneName_(void *a1, const char *a2, ...)
{
  return [a1 addPendingRecordChanges:forZoneName:];
}

id objc_msgSend_addPendingRecordDeleteChanges_(void *a1, const char *a2, ...)
{
  return [a1 addPendingRecordDeleteChanges:];
}

id objc_msgSend_addPendingRecordSaveChanges_(void *a1, const char *a2, ...)
{
  return [a1 addPendingRecordSaveChanges:];
}

id objc_msgSend_addPendingRecordZoneChanges_(void *a1, const char *a2, ...)
{
  return [a1 addPendingRecordZoneChanges:];
}

id objc_msgSend_addPersistentStoreWithDescription_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 addPersistentStoreWithDescription:completionHandler:];
}

id objc_msgSend_addPossiblePeripheral_withConnectionMaterial_(void *a1, const char *a2, ...)
{
  return [a1 addPossiblePeripheral:withConnectionMaterial:];
}

id objc_msgSend_addPossiblePeripheralsForDevice_usingMaterials_(void *a1, const char *a2, ...)
{
  return [a1 addPossiblePeripheralsForDevice:usingMaterials:];
}

id objc_msgSend_addPrbOnFloorEstimate_(void *a1, const char *a2, ...)
{
  return [a1 addPrbOnFloorEstimate:];
}

id objc_msgSend_addRecipient_(void *a1, const char *a2, ...)
{
  return [a1 addRecipient:];
}

id objc_msgSend_addRecord_(void *a1, const char *a2, ...)
{
  return [a1 addRecord:];
}

id objc_msgSend_addRecordIDsForSessionId_shouldUploadToOutputZone_shouldUploadToInputZone_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "addRecordIDsForSessionId:shouldUploadToOutputZone:shouldUploadToInputZone:");
}

id objc_msgSend_addRecordIDsToSave_recordIDsToDelete_(void *a1, const char *a2, ...)
{
  return [a1 addRecordIDsToSave:recordIDsToSave recordIDsToDelete:recordIDsToDelete];
}

id objc_msgSend_addRecordZonesToSave_recordZoneIDsToDelete_(void *a1, const char *a2, ...)
{
  return [a1 addRecordZonesToSave:recordZonesToSave recordZoneIDsToDelete:recordZoneIDsToDelete];
}

id objc_msgSend_addRegulatoryDomainEstimates_(void *a1, const char *a2, ...)
{
  return [a1 addRegulatoryDomainEstimates:];
}

id objc_msgSend_addRequest_(void *a1, const char *a2, ...)
{
  return [a1 addRequest:];
}

id objc_msgSend_addRequesterWithOutstandingRequest_(void *a1, const char *a2, ...)
{
  return [a1 addRequesterWithOutstandingRequest];
}

id objc_msgSend_addResponseListener_(void *a1, const char *a2, ...)
{
  return [a1 addResponseListener:];
}

id objc_msgSend_addRhythmicGnssClient_(void *a1, const char *a2, ...)
{
  return [a1 addRhythmicGnssClient:];
}

id objc_msgSend_addSatIds_(void *a1, const char *a2, ...)
{
  return [a1 addSatIds:];
}

id objc_msgSend_addScanResultAtDate_address_advertisementData_rssi_maintenanceReason_reserved_reconciledInformation_(void *a1, const char *a2, ...)
{
  return [a1 addScanResultAtDate:x0 address:x1 advertisementData:x2 rssi:x3 maintenanceReason:x4 reserved:x5 reconciledInformation:x6];
}

id objc_msgSend_addScanResultAtDate_address_maintenanceReason_reconciledUUID_(void *a1, const char *a2, ...)
{
  return [a1 addScanResultAtDate:x0 address:x1 maintenanceReason:x2 reconciledUUID:x3];
}

id objc_msgSend_addScdmaCellTower_(void *a1, const char *a2, ...)
{
  return [a1 addScdmaCellTower:];
}

id objc_msgSend_addScdmaNeighbors_(void *a1, const char *a2, ...)
{
  return [a1 addScdmaNeighbors:];
}

id objc_msgSend_addSubscriptionWithIdentifier_dataTypes_policy_region_expirationDate_callbackQueue_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 addSubscriptionWithIdentifier:x0 dataTypes:x1 policy:x2 region:x3 expirationDate:x4 callbackQueue:x5 completionHandler:x6];
}

id objc_msgSend_addSummaries_(void *a1, const char *a2, ...)
{
  return [a1 addSummaries:];
}

id objc_msgSend_addSurroundingWifiBands_(void *a1, const char *a2, ...)
{
  return [a1 addSurroundingWifiBands:];
}

id objc_msgSend_addText_(void *a1, const char *a2, ...)
{
  return [a1 addText:];
}

id objc_msgSend_addTiles_(void *a1, const char *a2, ...)
{
  return [a1 addTiles:];
}

id objc_msgSend_addVectorClocks_(void *a1, const char *a2, ...)
{
  return [a1 addVectorClocks:];
}

id objc_msgSend_addWifiBands_(void *a1, const char *a2, ...)
{
  return [a1 addWifiBands:];
}

id objc_msgSend_addWirelessAP_(void *a1, const char *a2, ...)
{
  return [a1 addWirelessAP:];
}

id objc_msgSend_additionalInfo(void *a1, const char *a2, ...)
{
  return _[a1 additionalInfo];
}

id objc_msgSend_additionalInformation(void *a1, const char *a2, ...)
{
  return _[a1 additionalInformation];
}

id objc_msgSend_address(void *a1, const char *a2, ...)
{
  return _[a1 address];
}

id objc_msgSend_addressData(void *a1, const char *a2, ...)
{
  return _[a1 addressData];
}

id objc_msgSend_addressFromUnknownBeacon(void *a1, const char *a2, ...)
{
  return _[a1 addressFromUnknownBeacon];
}

id objc_msgSend_adjustMonitoringAccordingToClientLedgerDictionary_(void *a1, const char *a2, ...)
{
  return [a1 adjustMonitoringAccordingToClientLedgerDictionary:];
}

id objc_msgSend_adjustedDistance(void *a1, const char *a2, ...)
{
  return _[a1 adjustedDistance];
}

id objc_msgSend_adjustedDistanceToFenceBoundary(void *a1, const char *a2, ...)
{
  return _[a1 adjustedDistanceToFenceBoundary];
}

id objc_msgSend_administrativeArea(void *a1, const char *a2, ...)
{
  return _[a1 administrativeArea];
}

id objc_msgSend_advertiseEnabled(void *a1, const char *a2, ...)
{
  return _[a1 advertiseEnabled];
}

id objc_msgSend_advertisePeriod(void *a1, const char *a2, ...)
{
  return _[a1 advertisePeriod];
}

id objc_msgSend_advertisement(void *a1, const char *a2, ...)
{
  return _[a1 advertisement];
}

id objc_msgSend_advertisementData(void *a1, const char *a2, ...)
{
  return _[a1 advertisementData];
}

id objc_msgSend_afterInterval_async_(void *a1, const char *a2, ...)
{
  return [a1 afterInterval:x0 async:x1];
}

id objc_msgSend_age(void *a1, const char *a2, ...)
{
  return _[a1 age];
}

id objc_msgSend_ageOutCache_(void *a1, const char *a2, ...)
{
  return [a1 ageOutCache:];
}

id objc_msgSend_ageOutElevationArray(void *a1, const char *a2, ...)
{
  return _[a1 ageOutElevationArray];
}

id objc_msgSend_ageOutFormMetrics(void *a1, const char *a2, ...)
{
  return _[a1 ageOutFormMetrics];
}

id objc_msgSend_ageOutMotionStateArray(void *a1, const char *a2, ...)
{
  return _[a1 ageOutMotionStateArray];
}

id objc_msgSend_ageOutStepArray(void *a1, const char *a2, ...)
{
  return _[a1 ageOutStepArray];
}

id objc_msgSend_aggregateFilteredLocations_andAddTo_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "aggregateFilteredLocations:andAddTo:");
}

id objc_msgSend_aggregateRecords(void *a1, const char *a2, ...)
{
  return _[a1 aggregateRecords];
}

id objc_msgSend_aggregateStatsFromPacket_to_useAOPDuration_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "aggregateStatsFromPacket:to:useAOPDuration:");
}

id objc_msgSend_airplaneMode(void *a1, const char *a2, ...)
{
  return _[a1 airplaneMode];
}

id objc_msgSend_airplaySolo(void *a1, const char *a2, ...)
{
  return _[a1 airplaySolo];
}

id objc_msgSend_alarmId(void *a1, const char *a2, ...)
{
  return _[a1 alarmId];
}

id objc_msgSend_alertElevationAlertClientsOnChange(void *a1, const char *a2, ...)
{
  return _[a1 alertElevationAlertClientsOnChange];
}

id objc_msgSend_algorithmVersion(void *a1, const char *a2, ...)
{
  return _[a1 algorithmVersion];
}

id objc_msgSend_alignClockWithCurrentIndex_(void *a1, const char *a2, ...)
{
  return [a1 alignClockWithCurrentIndex:];
}

id objc_msgSend_alignmentIntervalOverride(void *a1, const char *a2, ...)
{
  return _[a1 alignmentIntervalOverride];
}

id objc_msgSend_aliveAgainThrottleTimer(void *a1, const char *a2, ...)
{
  return _[a1 aliveAgainThrottleTimer];
}

id objc_msgSend_allArchiveURLs(void *a1, const char *a2, ...)
{
  return _[a1 allArchiveURLs];
}

id objc_msgSend_allBeaconsOfTypes_completion_(void *a1, const char *a2, ...)
{
  return [a1 allBeaconsOfTypes:completion:];
}

id objc_msgSend_allDayHeartRate(void *a1, const char *a2, ...)
{
  return _[a1 allDayHeartRate];
}

id objc_msgSend_allHeaderFields(void *a1, const char *a2, ...)
{
  return _[a1 allHeaderFields];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allKeysForObject_(void *a1, const char *a2, ...)
{
  return [a1 allKeysForObject:];
}

id objc_msgSend_allMonitoringIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 allMonitoringIdentifiers];
}

id objc_msgSend_allMonitoringRecordsByIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 allMonitoringRecordsByIdentifier];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allSessions(void *a1, const char *a2, ...)
{
  return _[a1 allSessions];
}

id objc_msgSend_allSuccess(void *a1, const char *a2, ...)
{
  return _[a1 allSuccess];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_allergyInfo(void *a1, const char *a2, ...)
{
  return _[a1 allergyInfo];
}

id objc_msgSend_allergyInfoModifiedDate(void *a1, const char *a2, ...)
{
  return _[a1 allergyInfoModifiedDate];
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return [a1 allocWithZone:];
}

id objc_msgSend_allowBeaconsChangedPopup(void *a1, const char *a2, ...)
{
  return _[a1 allowBeaconsChangedPopup];
}

id objc_msgSend_allowFetchingRSRP(void *a1, const char *a2, ...)
{
  return _[a1 allowFetchingRSRP];
}

id objc_msgSend_allowFirmwareUpdate(void *a1, const char *a2, ...)
{
  return _[a1 allowFirmwareUpdate];
}

id objc_msgSend_allowMonitoringWhileNearby(void *a1, const char *a2, ...)
{
  return _[a1 allowMonitoringWhileNearby];
}

id objc_msgSend_allowNetworkTileLoad(void *a1, const char *a2, ...)
{
  return _[a1 allowNetworkTileLoad];
}

id objc_msgSend_allowSimulatedLocations(void *a1, const char *a2, ...)
{
  return _[a1 allowSimulatedLocations];
}

id objc_msgSend_allowStaleData(void *a1, const char *a2, ...)
{
  return _[a1 allowStaleData];
}

id objc_msgSend_allowedServices(void *a1, const char *a2, ...)
{
  return _[a1 allowedServices];
}

id objc_msgSend_alternateIdentitiesMap(void *a1, const char *a2, ...)
{
  return _[a1 alternateIdentitiesMap];
}

id objc_msgSend_altimeterEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 altimeterEndpoint];
}

id objc_msgSend_altitude(void *a1, const char *a2, ...)
{
  return _[a1 altitude];
}

id objc_msgSend_altitudeAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 altitudeAccuracy];
}

id objc_msgSend_analyticsManager(void *a1, const char *a2, ...)
{
  return _[a1 analyticsManager];
}

id objc_msgSend_anchorKeyPath(void *a1, const char *a2, ...)
{
  return _[a1 anchorKeyPath];
}

id objc_msgSend_andPredicateWithSubpredicates_(void *a1, const char *a2, ...)
{
  return [a1 andPredicateWithSubpredicates:];
}

id objc_msgSend_announceMostRecentForcedGPS_(void *a1, const char *a2, ...)
{
  return [a1 announceMostRecentForcedGPS];
}

id objc_msgSend_anyChangeToNewRequestsComparedTo_(void *a1, const char *a2, ...)
{
  return [a1 anyChangeToNewRequestsComparedTo:];
}

id objc_msgSend_anySubscribedToSensorRecorder(void *a1, const char *a2, ...)
{
  return _[a1 anySubscribedToSensorRecorder];
}

id objc_msgSend_aopSubmersionState(void *a1, const char *a2, ...)
{
  return _[a1 aopSubmersionState];
}

id objc_msgSend_apHarvestCount(void *a1, const char *a2, ...)
{
  return _[a1 apHarvestCount];
}

id objc_msgSend_appClipMetadata(void *a1, const char *a2, ...)
{
  return _[a1 appClipMetadata];
}

id objc_msgSend_appEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 appEndpoint];
}

id objc_msgSend_appId(void *a1, const char *a2, ...)
{
  return _[a1 appId];
}

id objc_msgSend_appLaunchedByAppLifecycleManager_(void *a1, const char *a2, ...)
{
  return [a1 appLaunchedByAppLifecycleManager:];
}

id objc_msgSend_appState(void *a1, const char *a2, ...)
{
  return _[a1 appState];
}

id objc_msgSend_append_(void *a1, const char *a2, ...)
{
  return [a1 append:];
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return [a1 appendBytes:x0 length:x1];
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return [a1 appendData:];
}

id objc_msgSend_appendData_error_(void *a1, const char *a2, ...)
{
  return [a1 appendData:error:];
}

id objc_msgSend_appendDataFromFileURL_error_(void *a1, const char *a2, ...)
{
  return [a1 appendDataFromFileURL:error];
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return [a1 appendFormat:];
}

id objc_msgSend_appendNordicCrashData_(void *a1, const char *a2, ...)
{
  return [a1 appendNordicCrashData:];
}

id objc_msgSend_appendPayload_(void *a1, const char *a2, ...)
{
  return [a1 appendPayload:];
}

id objc_msgSend_appendRecievedData_(void *a1, const char *a2, ...)
{
  return [a1 appendRecievedData:];
}

id objc_msgSend_appendRoseCrashData_(void *a1, const char *a2, ...)
{
  return [a1 appendRoseCrashData:];
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return [a1 appendString:];
}

id objc_msgSend_appendUserStatsData_(void *a1, const char *a2, ...)
{
  return [a1 appendUserStatsData:];
}

id objc_msgSend_appleEffortScoreUnit(void *a1, const char *a2, ...)
{
  return _[a1 appleEffortScoreUnit];
}

id objc_msgSend_appleExerciseTime(void *a1, const char *a2, ...)
{
  return _[a1 appleExerciseTime];
}

id objc_msgSend_appleManufacturerData(void *a1, const char *a2, ...)
{
  return _[a1 appleManufacturerData];
}

id objc_msgSend_applicationExtensionRecords(void *a1, const char *a2, ...)
{
  return _[a1 applicationExtensionRecords];
}

id objc_msgSend_applicationIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 applicationIdentifier];
}

id objc_msgSend_applicationIsInstalled_(void *a1, const char *a2, ...)
{
  return [a1 applicationIsInstalled:];
}

id objc_msgSend_applicationIsInstalledOnAnyPairedDeviceWithBundleID_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "applicationIsInstalledOnAnyPairedDeviceWithBundleID:completion:");
}

id objc_msgSend_applicationIsInstalledOnAnyPairedDeviceWithCompanionBundleID_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "applicationIsInstalledOnAnyPairedDeviceWithCompanionBundleID:completion:");
}

id objc_msgSend_applicationType(void *a1, const char *a2, ...)
{
  return _[a1 applicationType];
}

id objc_msgSend_applicationWithBundleID_(void *a1, const char *a2, ...)
{
  return [a1 applicationWithBundleID:];
}

id objc_msgSend_applicationWithPath_(void *a1, const char *a2, ...)
{
  return [a1 applicationWithPath:];
}

id objc_msgSend_applyFilterToLocationObservations_options_(void *a1, const char *a2, ...)
{
  return [a1 applyFilterToLocationObservations:options:];
}

id objc_msgSend_applyStagedFirmwareOnAccessoryList_withUserIntent_(void *a1, const char *a2, ...)
{
  return [a1 applyStagedFirmwareOnAccessoryList:withUserIntent:];
}

id objc_msgSend_applySyncMessage_(void *a1, const char *a2, ...)
{
  return [a1 applySyncMessage:];
}

id objc_msgSend_appsWithClientKeysAreInstalledOnAPairedDevice_(void *a1, const char *a2, ...)
{
  return [a1 appsWithClientKeysAreInstalledOnAPairedDevice:];
}

id objc_msgSend_apsConnection(void *a1, const char *a2, ...)
{
  return _[a1 apsConnection];
}

id objc_msgSend_apsdQueue(void *a1, const char *a2, ...)
{
  return _[a1 apsdQueue];
}

id objc_msgSend_archive(void *a1, const char *a2, ...)
{
  return _[a1 archive];
}

id objc_msgSend_archiveForHarvester_(void *a1, const char *a2, ...)
{
  return [a1 archiveForHarvester:];
}

id objc_msgSend_archiveForHarvester_withSuffix_(void *a1, const char *a2, ...)
{
  return [a1 archiveForHarvester:withSuffix:];
}

id objc_msgSend_archiveWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 archiveWithIdentifier:];
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return [a1 archivedDataWithRootObject:x0 requiringSecureCoding:x1 error:x2];
}

id objc_msgSend_areCentroidDbAndMetadataDbValid(void *a1, const char *a2, ...)
{
  return _[a1 areCentroidDbAndMetadataDbValid];
}

id objc_msgSend_areWalkingSteadinessNotificationsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 areWalkingSteadinessNotificationsEnabled];
}

id objc_msgSend_areasOfInterest(void *a1, const char *a2, ...)
{
  return _[a1 areasOfInterest];
}

id objc_msgSend_arfcn(void *a1, const char *a2, ...)
{
  return _[a1 arfcn];
}

id objc_msgSend_armed(void *a1, const char *a2, ...)
{
  return _[a1 armed];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayByApplyingDifference_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "arrayByApplyingDifference:");
}

id objc_msgSend_arrayForKey_atKeyPath_defaultValue_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "arrayForKey:atKeyPath:defaultValue:");
}

id objc_msgSend_arrayForKey_defaultValue_(void *a1, const char *a2, ...)
{
  return [a1 arrayForKey:defaultValue:];
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithArray:];
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithCapacity:];
}

id objc_msgSend_arrayWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithContentsOfFile:];
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObject:];
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObjects:];
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObjects:count:];
}

id objc_msgSend_arrivalDate(void *a1, const char *a2, ...)
{
  return _[a1 arrivalDate];
}

id objc_msgSend_assembleCommonConnectionEventDataWithMetrics_forDevice_(void *a1, const char *a2, ...)
{
  return [a1 assembleCommonConnectionEventDataWithMetrics:forDevice:];
}

id objc_msgSend_assertCommCenter_with_(void *a1, const char *a2, ...)
{
  return [a1 assertCommCenter:with:];
}

id objc_msgSend_assertCommCenterBaseBand_(void *a1, const char *a2, ...)
{
  return [a1 assertCommCenterBaseBand:];
}

id objc_msgSend_assertInside(void *a1, const char *a2, ...)
{
  return _[a1 assertInside];
}

id objc_msgSend_assertOutside(void *a1, const char *a2, ...)
{
  return _[a1 assertOutside];
}

id objc_msgSend_assertionDuration(void *a1, const char *a2, ...)
{
  return _[a1 assertionDuration];
}

id objc_msgSend_assertionWithStatusBarStyleOverrides_forPID_exclusive_showsWhenForeground_(void *a1, const char *a2, ...)
{
  return [a1 assertionWithStatusBarStyleOverrides:forPID:exclusive:showsWhenForeground:];
}

id objc_msgSend_assetData(void *a1, const char *a2, ...)
{
  return _[a1 assetData];
}

id objc_msgSend_assetDataCRC(void *a1, const char *a2, ...)
{
  return _[a1 assetDataCRC];
}

id objc_msgSend_assetId(void *a1, const char *a2, ...)
{
  return _[a1 assetId];
}

id objc_msgSend_assetPacketizerQueue(void *a1, const char *a2, ...)
{
  return _[a1 assetPacketizerQueue];
}

id objc_msgSend_assetTargetHeader(void *a1, const char *a2, ...)
{
  return _[a1 assetTargetHeader];
}

id objc_msgSend_assetType(void *a1, const char *a2, ...)
{
  return _[a1 assetType];
}

id objc_msgSend_assetVersion(void *a1, const char *a2, ...)
{
  return _[a1 assetVersion];
}

id objc_msgSend_associatedTo2GHzWiFi(void *a1, const char *a2, ...)
{
  return _[a1 associatedTo2GHzWiFi];
}

id objc_msgSend_async_(void *a1, const char *a2, ...)
{
  return [a1 async:];
}

id objc_msgSend_attachProgressCallBack_(void *a1, const char *a2, ...)
{
  return [a1 attachProgressCallBack:];
}

id objc_msgSend_attached(void *a1, const char *a2, ...)
{
  return _[a1 attached];
}

id objc_msgSend_attemptConnectToDevice_onCondition_(void *a1, const char *a2, ...)
{
  return [a1 attemptConnectToDevice:onCondition:];
}

id objc_msgSend_attemptConnectionToDevice_(void *a1, const char *a2, ...)
{
  return [a1 attemptConnectionToDevice:];
}

id objc_msgSend_attemptDuration(void *a1, const char *a2, ...)
{
  return _[a1 attemptDuration];
}

id objc_msgSend_attemptForcedLocation(void *a1, const char *a2, ...)
{
  return _[a1 attemptForcedLocation];
}

id objc_msgSend_attemptMaintenanceOnDevice_onCondition_(void *a1, const char *a2, ...)
{
  return [a1 attemptMaintenanceOnDevice:onCondition:];
}

id objc_msgSend_attemptReconciliationWithAddress_advertisementData_(void *a1, const char *a2, ...)
{
  return [a1 attemptReconciliationWithAddress:x0 advertisementData:x1];
}

id objc_msgSend_attemptSendCoreAnalytics(void *a1, const char *a2, ...)
{
  return _[a1 attemptSendCoreAnalytics];
}

id objc_msgSend_attitude(void *a1, const char *a2, ...)
{
  return _[a1 attitude];
}

id objc_msgSend_attributeWithDomain_name_(void *a1, const char *a2, ...)
{
  return [a1 attributeWithDomain:name:];
}

id objc_msgSend_attributedEntity(void *a1, const char *a2, ...)
{
  return _[a1 attributedEntity];
}

id objc_msgSend_attributes(void *a1, const char *a2, ...)
{
  return _[a1 attributes];
}

id objc_msgSend_attributesOfFileSystemForPath_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "attributesOfFileSystemForPath:error:")];
}

id objc_msgSend_attributesOfItemAtPath_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "attributesOfItemAtPath:error:")];
}

id objc_msgSend_attributionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 attributionIdentifier];
}

id objc_msgSend_attributionTimer(void *a1, const char *a2, ...)
{
  return _[a1 attributionTimer];
}

id objc_msgSend_attributions(void *a1, const char *a2, ...)
{
  return _[a1 attributions];
}

id objc_msgSend_auditToken(void *a1, const char *a2, ...)
{
  return _[a1 auditToken];
}

id objc_msgSend_authMask(void *a1, const char *a2, ...)
{
  return _[a1 authMask];
}

id objc_msgSend_authStatus(void *a1, const char *a2, ...)
{
  return _[a1 authStatus];
}

id objc_msgSend_authSyncStoreState(void *a1, const char *a2, ...)
{
  return _[a1 authSyncStoreState];
}

id objc_msgSend_authenticationMethod(void *a1, const char *a2, ...)
{
  return _[a1 authenticationMethod];
}

id objc_msgSend_authorizationContext(void *a1, const char *a2, ...)
{
  return _[a1 authorizationContext];
}

id objc_msgSend_authorizationContextByANDingServiceMaskTuple_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "authorizationContextByANDingServiceMaskTuple:");
}

id objc_msgSend_authorizationDatabaseWithFilename_withDataProtectionClass_(void *a1, const char *a2, ...)
{
  return [a1 authorizationDatabaseWithFilename:withDataProtectionClass:];
}

id objc_msgSend_authorizationDateForClientWithKey_(void *a1, const char *a2, ...)
{
  return [a1 authorizationDateForClientWithKey:];
}

id objc_msgSend_authorizationStatus(void *a1, const char *a2, ...)
{
  return _[a1 authorizationStatus];
}

id objc_msgSend_authorizationStatusForBundlePath_(void *a1, const char *a2, ...)
{
  return [a1 authorizationStatusForBundlePath:];
}

id objc_msgSend_authorizeLocationInReplay(void *a1, const char *a2, ...)
{
  return _[a1 authorizeLocationInReplay];
}

id objc_msgSend_authorized(void *a1, const char *a2, ...)
{
  return _[a1 authorized];
}

id objc_msgSend_authorizedForWidgetUpdates(void *a1, const char *a2, ...)
{
  return _[a1 authorizedForWidgetUpdates];
}

id objc_msgSend_automotive(void *a1, const char *a2, ...)
{
  return _[a1 automotive];
}

id objc_msgSend_autoupdatingCurrentLocale(void *a1, const char *a2, ...)
{
  return _[a1 autoupdatingCurrentLocale];
}

id objc_msgSend_availabilityTileParams(void *a1, const char *a2, ...)
{
  return _[a1 availabilityTileParams];
}

id objc_msgSend_availabilityZScoreConfidenceInterval(void *a1, const char *a2, ...)
{
  return _[a1 availabilityZScoreConfidenceInterval];
}

id objc_msgSend_availableData(void *a1, const char *a2, ...)
{
  return _[a1 availableData];
}

id objc_msgSend_availableVenuesState(void *a1, const char *a2, ...)
{
  return _[a1 availableVenuesState];
}

id objc_msgSend_averageIntensity(void *a1, const char *a2, ...)
{
  return _[a1 averageIntensity];
}

id objc_msgSend_averageQuantity(void *a1, const char *a2, ...)
{
  return _[a1 averageQuantity];
}

id objc_msgSend_averageRSRP(void *a1, const char *a2, ...)
{
  return _[a1 averageRSRP];
}

id objc_msgSend_avlTilePathOverrideForTest(void *a1, const char *a2, ...)
{
  return _[a1 avlTilePathOverrideForTest];
}

id objc_msgSend_awdLogDistance_status_description_(void *a1, const char *a2, ...)
{
  return [a1 awdLogDistance:x0 status:x1 description:x2];
}

id objc_msgSend_awdMotionFitnessStrideCalibration_(void *a1, const char *a2, ...)
{
  return [a1 awdMotionFitnessStrideCalibration:];
}

id objc_msgSend_azimuth(void *a1, const char *a2, ...)
{
  return _[a1 azimuth];
}

id objc_msgSend_backgroundLocationAssertionForPID_(void *a1, const char *a2, ...)
{
  return [a1 backgroundLocationAssertionForPID:];
}

id objc_msgSend_backgroundSessionConfigurationWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 backgroundSessionConfigurationWithIdentifier:];
}

id objc_msgSend_bandAsString_forRAT_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "bandAsString:forRAT:");
}

id objc_msgSend_bandclass(void *a1, const char *a2, ...)
{
  return _[a1 bandclass];
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return [a1 base64EncodedStringWithOptions:];
}

id objc_msgSend_baseHeight(void *a1, const char *a2, ...)
{
  return _[a1 baseHeight];
}

id objc_msgSend_batchEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 batchEndpoint];
}

id objc_msgSend_batteryData(void *a1, const char *a2, ...)
{
  return _[a1 batteryData];
}

id objc_msgSend_batteryLevel(void *a1, const char *a2, ...)
{
  return _[a1 batteryLevel];
}

id objc_msgSend_batterySaverModeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 batterySaverModeEnabled];
}

id objc_msgSend_beacon(void *a1, const char *a2, ...)
{
  return _[a1 beacon];
}

id objc_msgSend_beaconForUUID_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "beaconForUUID:completion:");
}

id objc_msgSend_beaconGroupForIdentifier_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "beaconGroupForIdentifier:completion:")];
}

id objc_msgSend_beaconPayloadCache(void *a1, const char *a2, ...)
{
  return _[a1 beaconPayloadCache];
}

id objc_msgSend_beaconsChangedPopupBackoff(void *a1, const char *a2, ...)
{
  return _[a1 beaconsChangedPopupBackoff];
}

id objc_msgSend_becameFatallyBlocked_index_(void *a1, const char *a2, ...)
{
  return [a1 becameFatallyBlocked:x0 index:x1];
}

id objc_msgSend_beepOnMoveHigh(void *a1, const char *a2, ...)
{
  return _[a1 beepOnMoveHigh];
}

id objc_msgSend_begin(void *a1, const char *a2, ...)
{
  return _[a1 begin];
}

id objc_msgSend_beginIntervalForAccess_(void *a1, const char *a2, ...)
{
  return [a1 beginIntervalForAccess:];
}

id objc_msgSend_beginTime(void *a1, const char *a2, ...)
{
  return _[a1 beginTime];
}

id objc_msgSend_beginWorkoutSession_withOverview_enableWorkoutChangeDetection_(void *a1, const char *a2, ...)
{
  return [a1 beginWorkoutSession:withOverview:enableWorkoutChangeDetection:];
}

id objc_msgSend_betaBlockerUse(void *a1, const char *a2, ...)
{
  return _[a1 betaBlockerUse];
}

id objc_msgSend_biasInMeters(void *a1, const char *a2, ...)
{
  return _[a1 biasInMeters];
}

id objc_msgSend_bikeableSide(void *a1, const char *a2, ...)
{
  return _[a1 bikeableSide];
}

id objc_msgSend_binAccuracy_(void *a1, const char *a2, ...)
{
  return [a1 binAccuracy:];
}

id objc_msgSend_binArrayToArchivedData_(void *a1, const char *a2, ...)
{
  return [a1 binArrayToArchivedData];
}

id objc_msgSend_binForAccuracy_(void *a1, const char *a2, ...)
{
  return [a1 binForAccuracy:];
}

id objc_msgSend_binForAge_(void *a1, const char *a2, ...)
{
  return [a1 binForAge:];
}

id objc_msgSend_binForConvergingSessionCount_(void *a1, const char *a2, ...)
{
  return [a1 binForConvergingSessionCount:];
}

id objc_msgSend_binForConvergingSessionDuration_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "binForConvergingSessionDuration:");
}

id objc_msgSend_binForConvergingUsageMetricCount_(void *a1, const char *a2, ...)
{
  return [a1 binForConvergingUsageMetricCount:];
}

id objc_msgSend_binForDistance_(void *a1, const char *a2, ...)
{
  return [a1 binForDistance:];
}

id objc_msgSend_binForFenceRadius_(void *a1, const char *a2, ...)
{
  return [a1 binForFenceRadius:];
}

id objc_msgSend_binForNumber_bins_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "binForNumber:bins:")];
}

id objc_msgSend_binForSteps_(void *a1, const char *a2, ...)
{
  return [a1 binForSteps:];
}

id objc_msgSend_binForTimeInterval_(void *a1, const char *a2, ...)
{
  return [a1 binForTimeInterval:];
}

id objc_msgSend_binIndex_(void *a1, const char *a2, ...)
{
  return [a1 binIndex:];
}

id objc_msgSend_binIndexForValueIn_(void *a1, const char *a2, ...)
{
  return [a1 binIndexForValueIn:x0];
}

id objc_msgSend_binIntervalForRawSpeed_(void *a1, const char *a2, ...)
{
  return [a1 binIntervalForRawSpeed:];
}

id objc_msgSend_binLocationAge_(void *a1, const char *a2, ...)
{
  return [a1 binLocationAge:];
}

id objc_msgSend_binRatio_(void *a1, const char *a2, ...)
{
  return [a1 binRatio:];
}

id objc_msgSend_binTimeInterval_(void *a1, const char *a2, ...)
{
  return [a1 binTimeInterval:];
}

id objc_msgSend_binarySampleRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 binarySampleRepresentation];
}

id objc_msgSend_binaryVersion(void *a1, const char *a2, ...)
{
  return _[a1 binaryVersion];
}

id objc_msgSend_bins(void *a1, const char *a2, ...)
{
  return _[a1 bins];
}

id objc_msgSend_binsSortedByInterval(void *a1, const char *a2, ...)
{
  return _[a1 binsSortedByInterval];
}

id objc_msgSend_bleAdvertisementTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 bleAdvertisementTimestamp];
}

id objc_msgSend_bleChannel(void *a1, const char *a2, ...)
{
  return _[a1 bleChannel];
}

id objc_msgSend_bleRSSI(void *a1, const char *a2, ...)
{
  return _[a1 bleRSSI];
}

id objc_msgSend_bloodType(void *a1, const char *a2, ...)
{
  return _[a1 bloodType];
}

id objc_msgSend_bluetoothAddress(void *a1, const char *a2, ...)
{
  return _[a1 bluetoothAddress];
}

id objc_msgSend_bluetoothAudioActive(void *a1, const char *a2, ...)
{
  return _[a1 bluetoothAudioActive];
}

id objc_msgSend_bluetoothState(void *a1, const char *a2, ...)
{
  return _[a1 bluetoothState];
}

id objc_msgSend_bodyMetrics(void *a1, const char *a2, ...)
{
  return _[a1 bodyMetrics];
}

id objc_msgSend_bomScanEnabled(void *a1, const char *a2, ...)
{
  return _[a1 bomScanEnabled];
}

id objc_msgSend_bomSoundCount(void *a1, const char *a2, ...)
{
  return _[a1 bomSoundCount];
}

id objc_msgSend_BOOLForKey_atKeyPath_defaultValue_(void *a1, const char *a2, ...)
{
  return [a1 BOOLForKey:atKeyPath:defaultValue:];
}

id objc_msgSend_BOOLForKey_defaultValue_(void *a1, const char *a2, ...)
{
  return [a1 BOOLForKey:defaultValue:];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_bootR1Time(void *a1, const char *a2, ...)
{
  return _[a1 bootR1Time];
}

id objc_msgSend_bootstrapAdvertisements(void *a1, const char *a2, ...)
{
  return _[a1 bootstrapAdvertisements];
}

id objc_msgSend_bottleneckRsrp(void *a1, const char *a2, ...)
{
  return _[a1 bottleneckRsrp];
}

id objc_msgSend_bottleneckState(void *a1, const char *a2, ...)
{
  return _[a1 bottleneckState];
}

id objc_msgSend_bottleneckToggleCount(void *a1, const char *a2, ...)
{
  return _[a1 bottleneckToggleCount];
}

id objc_msgSend_boundaryType(void *a1, const char *a2, ...)
{
  return _[a1 boundaryType];
}

id objc_msgSend_boundedIncrementBetweenStart_andStop_withCurrent_withIncrement_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "boundedIncrementBetweenStart:andStop:withCurrent:withIncrement:");
}

id objc_msgSend_boundingBox(void *a1, const char *a2, ...)
{
  return _[a1 boundingBox];
}

id objc_msgSend_boutClients(void *a1, const char *a2, ...)
{
  return _[a1 boutClients];
}

id objc_msgSend_boutType(void *a1, const char *a2, ...)
{
  return _[a1 boutType];
}

id objc_msgSend_bsid(void *a1, const char *a2, ...)
{
  return _[a1 bsid];
}

id objc_msgSend_btAddressData(void *a1, const char *a2, ...)
{
  return _[a1 btAddressData];
}

id objc_msgSend_btFindingState(void *a1, const char *a2, ...)
{
  return _[a1 btFindingState];
}

id objc_msgSend_buffer(void *a1, const char *a2, ...)
{
  return _[a1 buffer];
}

id objc_msgSend_bufferedDevices(void *a1, const char *a2, ...)
{
  return _[a1 bufferedDevices];
}

id objc_msgSend_buildEvent(void *a1, const char *a2, ...)
{
  return _[a1 buildEvent];
}

id objc_msgSend_buildEventWithAdvWithFirstTimeStamp_(void *a1, const char *a2, ...)
{
  return [a1 buildEventWithAdvWithFirstTimeStamp:];
}

id objc_msgSend_buildEventWithLocationWithFirstTimeStamp_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "buildEventWithLocationWithFirstTimeStamp:");
}

id objc_msgSend_buildEventWithMotionWithFirstTimeStamp_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "buildEventWithMotionWithFirstTimeStamp:");
}

id objc_msgSend_buildNumber(void *a1, const char *a2, ...)
{
  return _[a1 buildNumber];
}

id objc_msgSend_buildingID(void *a1, const char *a2, ...)
{
  return _[a1 buildingID];
}

id objc_msgSend_bulkUploadRecordIDsShouldReupload_shouldUploadToOutputZone_shouldUploadToInputZone_shouldThrottle_(void *a1, const char *a2, ...)
{
  return [a1 bulkUploadRecordIDsShouldReupload:shouldReupload shouldUploadToOutputZone:shouldUploadToOutputZone shouldUploadToInputZone:shouldUploadToInputZone shouldThrottle:shouldThrottle];
}

id objc_msgSend_bundle(void *a1, const char *a2, ...)
{
  return _[a1 bundle];
}

id objc_msgSend_bundleContainerURL(void *a1, const char *a2, ...)
{
  return _[a1 bundleContainerURL];
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return [a1 bundleForClass:];
}

id objc_msgSend_bundleId(void *a1, const char *a2, ...)
{
  return _[a1 bundleId];
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifier];
}

id objc_msgSend_bundleIds(void *a1, const char *a2, ...)
{
  return _[a1 bundleIds];
}

id objc_msgSend_bundlePath(void *a1, const char *a2, ...)
{
  return _[a1 bundlePath];
}

id objc_msgSend_bundleURL(void *a1, const char *a2, ...)
{
  return _[a1 bundleURL];
}

id objc_msgSend_bundleWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 bundleWithIdentifier:];
}

id objc_msgSend_bundleWithPath_(void *a1, const char *a2, ...)
{
  return [a1 bundleWithPath:];
}

id objc_msgSend_bundleWithURL_(void *a1, const char *a2, ...)
{
  return [a1 bundleWithURL:];
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_cStringUsingEncoding_(void *a1, const char *a2, ...)
{
  return [a1 cStringUsingEncoding:];
}

id objc_msgSend_cacheEmergencyAWDStatistics_(void *a1, const char *a2, ...)
{
  return [a1 cacheEmergencyAWDStatistics:];
}

id objc_msgSend_cacheInfoPlistKeysForClient_(void *a1, const char *a2, ...)
{
  return [a1 cacheInfoPlistKeysForClient:];
}

id objc_msgSend_cachedPlaceInferences(void *a1, const char *a2, ...)
{
  return _[a1 cachedPlaceInferences];
}

id objc_msgSend_cadence(void *a1, const char *a2, ...)
{
  return _[a1 cadence];
}

id objc_msgSend_cadenceMean(void *a1, const char *a2, ...)
{
  return _[a1 cadenceMean];
}

id objc_msgSend_calTrackHandler(void *a1, const char *a2, ...)
{
  return _[a1 calTrackHandler];
}

id objc_msgSend_calculateAndSendAltitudeFromLocation(void *a1, const char *a2, ...)
{
  return _[a1 calculateAndSendAltitudeFromLocation];
}

id objc_msgSend_calculateDepthFromPressure_withSurfacePressure_(void *a1, const char *a2, ...)
{
  return [a1 calculateDepthFromPressure:withSurfacePressure:];
}

id objc_msgSend_calculateDispersion_(void *a1, const char *a2, ...)
{
  return [a1 calculateDispersion:];
}

id objc_msgSend_calculateDistance_b_(void *a1, const char *a2, ...)
{
  return [a1 calculateDistance:b];
}

id objc_msgSend_calculateFilterSurfaceCal_withSuccess_(void *a1, const char *a2, ...)
{
  return [a1 calculateFilterSurfaceCal:withSuccess:];
}

id objc_msgSend_calculateRelativeElevation(void *a1, const char *a2, ...)
{
  return _[a1 calculateRelativeElevation];
}

id objc_msgSend_calendarWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 calendarWithIdentifier:];
}

id objc_msgSend_calibration(void *a1, const char *a2, ...)
{
  return _[a1 calibration];
}

id objc_msgSend_calibrationDataVersion(void *a1, const char *a2, ...)
{
  return _[a1 calibrationDataVersion];
}

id objc_msgSend_calibrationTrackCallback(void *a1, const char *a2, ...)
{
  return _[a1 calibrationTrackCallback];
}

id objc_msgSend_callStatusHandler_(void *a1, const char *a2, ...)
{
  return [a1 callStatusHandler:];
}

id objc_msgSend_callUUID(void *a1, const char *a2, ...)
{
  return _[a1 callUUID];
}

id objc_msgSend_callbackAdapter(void *a1, const char *a2, ...)
{
  return _[a1 callbackAdapter];
}

id objc_msgSend_callbackHandler(void *a1, const char *a2, ...)
{
  return _[a1 callbackHandler];
}

id objc_msgSend_calls(void *a1, const char *a2, ...)
{
  return _[a1 calls];
}

id objc_msgSend_calorieData(void *a1, const char *a2, ...)
{
  return _[a1 calorieData];
}

id objc_msgSend_cameraImageResolution(void *a1, const char *a2, ...)
{
  return _[a1 cameraImageResolution];
}

id objc_msgSend_cameraIntrinsics(void *a1, const char *a2, ...)
{
  return _[a1 cameraIntrinsics];
}

id objc_msgSend_cameraPose(void *a1, const char *a2, ...)
{
  return _[a1 cameraPose];
}

id objc_msgSend_canAddToMonitor(void *a1, const char *a2, ...)
{
  return _[a1 canAddToMonitor];
}

id objc_msgSend_canPublish(void *a1, const char *a2, ...)
{
  return _[a1 canPublish];
}

id objc_msgSend_canStartRecording_settings_publisher_(void *a1, const char *a2, ...)
{
  return [a1 canStartRecording:settings:publisher:];
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _[a1 cancel];
}

id objc_msgSend_cancelAISFetchTimeoutForDevice_(void *a1, const char *a2, ...)
{
  return [a1 cancelAISFetchTimeoutForDevice:];
}

id objc_msgSend_cancelAnyPendingPlaySound(void *a1, const char *a2, ...)
{
  return _[a1 cancelAnyPendingPlaySound];
}

id objc_msgSend_cancelConnectionAttemptToDevice_(void *a1, const char *a2, ...)
{
  return [a1 cancelConnectionAttemptToDevice:];
}

id objc_msgSend_cancelConnectionEvaluationForDevice_(void *a1, const char *a2, ...)
{
  return [a1 cancelConnectionEvaluationForDevice:];
}

id objc_msgSend_cancelConnectionTimeoutForPeripheral_(void *a1, const char *a2, ...)
{
  return [a1 cancelConnectionTimeoutForPeripheral:];
}

id objc_msgSend_cancelDeferredStartTimer(void *a1, const char *a2, ...)
{
  return _[a1 cancelDeferredStartTimer];
}

id objc_msgSend_cancelDeferredStopTimer(void *a1, const char *a2, ...)
{
  return _[a1 cancelDeferredStopTimer];
}

id objc_msgSend_cancelDisconnectionOnMissingBeaconWithUUID_(void *a1, const char *a2, ...)
{
  return [a1 cancelDisconnectionOnMissingBeaconWithUUID:];
}

id objc_msgSend_cancelFirmwareStagingForAccessory_assetID_(void *a1, const char *a2, ...)
{
  return [a1 cancelFirmwareStagingForAccessory:assetID:];
}

id objc_msgSend_cancelPeripheralConnection_(void *a1, const char *a2, ...)
{
  return [a1 cancelPeripheralConnection:];
}

id objc_msgSend_cancelPeripheralConnection_forUUID_(void *a1, const char *a2, ...)
{
  return [a1 cancelPeripheralConnection:forUUID:];
}

id objc_msgSend_cancelTimeoutForTask_dictionary_(void *a1, const char *a2, ...)
{
  return [a1 cancelTimeoutForTask:dictionary:];
}

id objc_msgSend_cancelTimers(void *a1, const char *a2, ...)
{
  return _[a1 cancelTimers];
}

id objc_msgSend_cancelTokenFetchTimeoutForDevice_(void *a1, const char *a2, ...)
{
  return [a1 cancelTokenFetchTimeoutForDevice:];
}

id objc_msgSend_capAccuracy_(void *a1, const char *a2, ...)
{
  return [a1 capAccuracy:];
}

id objc_msgSend_capabilityChangeClients(void *a1, const char *a2, ...)
{
  return _[a1 capabilityChangeClients];
}

id objc_msgSend_carryingItems(void *a1, const char *a2, ...)
{
  return _[a1 carryingItems];
}

id objc_msgSend_caseInsensitiveCompare_(void *a1, const char *a2, ...)
{
  return [a1 caseInsensitiveCompare:];
}

id objc_msgSend_catalogWorkoutId(void *a1, const char *a2, ...)
{
  return _[a1 catalogWorkoutId];
}

id objc_msgSend_category(void *a1, const char *a2, ...)
{
  return _[a1 category];
}

id objc_msgSend_categorySampleWithType_value_startDate_endDate_device_metadata_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "categorySampleWithType:value:startDate:endDate:device:metadata:");
}

id objc_msgSend_categoryTypeForIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 categoryTypeForIdentifier:];
}

id objc_msgSend_catherine(void *a1, const char *a2, ...)
{
  return _[a1 catherine];
}

id objc_msgSend_cdmaCellTowerAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 cdmaCellTowerAtIndex:];
}

id objc_msgSend_cdmaCellTowers(void *a1, const char *a2, ...)
{
  return _[a1 cdmaCellTowers];
}

id objc_msgSend_cdmaCellTowersCount(void *a1, const char *a2, ...)
{
  return _[a1 cdmaCellTowersCount];
}

id objc_msgSend_cdmaEvdoTowerAtIndex_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "cdmaEvdoTowerAtIndex:");
}

id objc_msgSend_cdmaEvdoTowersCount(void *a1, const char *a2, ...)
{
  return _[a1 cdmaEvdoTowersCount];
}

id objc_msgSend_cellAvailable(void *a1, const char *a2, ...)
{
  return _[a1 cellAvailable];
}

id objc_msgSend_cellID(void *a1, const char *a2, ...)
{
  return _[a1 cellID];
}

id objc_msgSend_cellTowerAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 cellTowerAtIndex:];
}

id objc_msgSend_cellTowers(void *a1, const char *a2, ...)
{
  return _[a1 cellTowers];
}

id objc_msgSend_cellTowersCount(void *a1, const char *a2, ...)
{
  return _[a1 cellTowersCount];
}

id objc_msgSend_cellWifiEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 cellWifiEndpoint];
}

id objc_msgSend_cellular(void *a1, const char *a2, ...)
{
  return _[a1 cellular];
}

id objc_msgSend_cellularBand(void *a1, const char *a2, ...)
{
  return _[a1 cellularBand];
}

id objc_msgSend_cellularDataPossible(void *a1, const char *a2, ...)
{
  return _[a1 cellularDataPossible];
}

id objc_msgSend_cellularRAT(void *a1, const char *a2, ...)
{
  return _[a1 cellularRAT];
}

id objc_msgSend_celsius(void *a1, const char *a2, ...)
{
  return _[a1 celsius];
}

id objc_msgSend_center(void *a1, const char *a2, ...)
{
  return _[a1 center];
}

id objc_msgSend_centralManager(void *a1, const char *a2, ...)
{
  return _[a1 centralManager];
}

id objc_msgSend_centroidOfLocationVector_(void *a1, const char *a2, ...)
{
  return [a1 centroidOfLocationVector:];
}

id objc_msgSend_cfAbsTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 cfAbsTimestamp];
}

id objc_msgSend_cfAbsoluteTimeS(void *a1, const char *a2, ...)
{
  return _[a1 cfAbsoluteTimeS];
}

id objc_msgSend_changeFencesStateMatchingHandoffTags_forDeviceID_completion_(void *a1, const char *a2, ...)
{
  return [a1 changeFencesStateMatchingHandoffTags:forDeviceID:completion:];
}

id objc_msgSend_changeReason(void *a1, const char *a2, ...)
{
  return _[a1 changeReason];
}

id objc_msgSend_changeRequest(void *a1, const char *a2, ...)
{
  return _[a1 changeRequest];
}

id objc_msgSend_changeType(void *a1, const char *a2, ...)
{
  return _[a1 changeType];
}

id objc_msgSend_changedDueToSimRemoval(void *a1, const char *a2, ...)
{
  return _[a1 changedDueToSimRemoval];
}

id objc_msgSend_channel(void *a1, const char *a2, ...)
{
  return _[a1 channel];
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 characterAtIndex:];
}

id objc_msgSend_characteristic(void *a1, const char *a2, ...)
{
  return _[a1 characteristic];
}

id objc_msgSend_characteristicPayload(void *a1, const char *a2, ...)
{
  return _[a1 characteristicPayload];
}

id objc_msgSend_characteristicUUID(void *a1, const char *a2, ...)
{
  return _[a1 characteristicUUID];
}

id objc_msgSend_characteristics(void *a1, const char *a2, ...)
{
  return _[a1 characteristics];
}

id objc_msgSend_checkAllNotificationStatuses(void *a1, const char *a2, ...)
{
  return _[a1 checkAllNotificationStatuses];
}

id objc_msgSend_checkAndRestartRsrpTimer(void *a1, const char *a2, ...)
{
  return _[a1 checkAndRestartRsrpTimer];
}

id objc_msgSend_checkAndSendMitigation(void *a1, const char *a2, ...)
{
  return _[a1 checkAndSendMitigation];
}

id objc_msgSend_checkAppInstallationStatus(void *a1, const char *a2, ...)
{
  return _[a1 checkAppInstallationStatus];
}

id objc_msgSend_checkApplications_withReply_(void *a1, const char *a2, ...)
{
  return [a1 checkApplications:withReply:];
}

id objc_msgSend_checkAuthorization(void *a1, const char *a2, ...)
{
  return _[a1 checkAuthorization];
}

id objc_msgSend_checkCoreAnalyticsPermissions_rawPaceForLUT_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "checkCoreAnalyticsPermissions:rawPaceForLUT:");
}

id objc_msgSend_checkCrashesCommand(void *a1, const char *a2, ...)
{
  return _[a1 checkCrashesCommand];
}

id objc_msgSend_checkCrashesTask(void *a1, const char *a2, ...)
{
  return _[a1 checkCrashesTask];
}

id objc_msgSend_checkDailyResetEligible_(void *a1, const char *a2, ...)
{
  return [a1 checkDailyResetEligible:];
}

id objc_msgSend_checkDeferMobilityCompanionSyncActivity_(void *a1, const char *a2, ...)
{
  return [a1 checkDeferMobilityCompanionSyncActivity:];
}

id objc_msgSend_checkDeferRequestForBoutsActivity_(void *a1, const char *a2, ...)
{
  return [a1 checkDeferRequestForBoutsActivity:];
}

id objc_msgSend_checkDeferral_(void *a1, const char *a2, ...)
{
  return [a1 checkDeferral:];
}

id objc_msgSend_checkDiminishedMode(void *a1, const char *a2, ...)
{
  return _[a1 checkDiminishedMode];
}

id objc_msgSend_checkEmergencyCallStatus(void *a1, const char *a2, ...)
{
  return _[a1 checkEmergencyCallStatus];
}

id objc_msgSend_checkForBoutsReadyToProcessWithCompletion_activity_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "checkForBoutsReadyToProcessWithCompletion:activity:");
}

id objc_msgSend_checkForDeletionOfVO2MaxData_(void *a1, const char *a2, ...)
{
  return [a1 checkForDeletionOfVO2MaxData:];
}

id objc_msgSend_checkForHistoricalComputeTrigger_(void *a1, const char *a2, ...)
{
  return [a1 checkForHistoricalComputeTrigger:];
}

id objc_msgSend_checkForLocationStateTransition(void *a1, const char *a2, ...)
{
  return _[a1 checkForLocationStateTransition];
}

id objc_msgSend_checkForMonitoring(void *a1, const char *a2, ...)
{
  return _[a1 checkForMonitoring];
}

id objc_msgSend_checkHawkeyeDataValidity_(void *a1, const char *a2, ...)
{
  return [a1 checkHawkeyeDataValidity:];
}

id objc_msgSend_checkHelloMaintenanceTask_(void *a1, const char *a2, ...)
{
  return [a1 checkHelloMaintenanceTask:];
}

id objc_msgSend_checkIfAllDevicesLastRecentlyDisconnected(void *a1, const char *a2, ...)
{
  return _[a1 checkIfAllDevicesLastRecentlyDisconnected];
}

id objc_msgSend_checkIfTwoDevicesHaveSamePeripheral_device_(void *a1, const char *a2, ...)
{
  return [a1 checkIfTwoDevicesHaveSamePeripheral:device:];
}

id objc_msgSend_checkInForActivityWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 checkInForActivityWithIdentifier:];
}

id objc_msgSend_checkLocationAuthorization(void *a1, const char *a2, ...)
{
  return _[a1 checkLocationAuthorization];
}

id objc_msgSend_checkLocationServicesStatus(void *a1, const char *a2, ...)
{
  return _[a1 checkLocationServicesStatus];
}

id objc_msgSend_checkMaintainableDevices_(void *a1, const char *a2, ...)
{
  return [a1 checkMaintainableDevices:];
}

id objc_msgSend_checkNearOrAtHome_horizontalAccuracy_(void *a1, const char *a2, ...)
{
  return [a1 checkNearOrAtHome:horizontalAccuracy:];
}

id objc_msgSend_checkPoshDataValidity_(void *a1, const char *a2, ...)
{
  return [a1 checkPoshDataValidity:];
}

id objc_msgSend_checkPreHelloConditions(void *a1, const char *a2, ...)
{
  return _[a1 checkPreHelloConditions];
}

id objc_msgSend_checkPrepareRanging(void *a1, const char *a2, ...)
{
  return _[a1 checkPrepareRanging];
}

id objc_msgSend_checkResourceIsReachableAndReturnError_(void *a1, const char *a2, ...)
{
  return [a1 checkResourceIsReachableAndReturnError:];
}

id objc_msgSend_checkSubmissionAtPeriod_(void *a1, const char *a2, ...)
{
  return [a1 checkSubmissionAtPeriod:];
}

id objc_msgSend_checkSyncStoreState(void *a1, const char *a2, ...)
{
  return _[a1 checkSyncStoreState];
}

id objc_msgSend_checkSyncStoreStateAfterBoot(void *a1, const char *a2, ...)
{
  return _[a1 checkSyncStoreStateAfterBoot];
}

id objc_msgSend_checkSyncStoreStateAfterQuickSwitch(void *a1, const char *a2, ...)
{
  return _[a1 checkSyncStoreStateAfterQuickSwitch];
}

id objc_msgSend_checkSyncStoreStateAftreRestrictionChange(void *a1, const char *a2, ...)
{
  return _[a1 checkSyncStoreStateAftreRestrictionChange];
}

id objc_msgSend_checkSyncStoreStateOnCompanion(void *a1, const char *a2, ...)
{
  return _[a1 checkSyncStoreStateOnCompanion];
}

id objc_msgSend_checkSyncStoreStateWhenDevicesConnectAfterDisconnection(void *a1, const char *a2, ...)
{
  return _[a1 checkSyncStoreStateWhenDevicesConnectAfterDisconnection];
}

id objc_msgSend_checkToSendDistancePercentageCoreAnalytics_mobilityDistance_rawSpeed_rawDist_(void *a1, const char *a2, ...)
{
  return [a1 checkToSendDistancePercentageCoreAnalytics:mobilityDistance:rawSpeed:rawDist:];
}

id objc_msgSend_checkValidTrack_associatedEntry_(void *a1, const char *a2, ...)
{
  return [a1 checkValidTrack:associatedEntry:];
}

id objc_msgSend_checkVehicleConnectionStatus(void *a1, const char *a2, ...)
{
  return _[a1 checkVehicleConnectionStatus];
}

id objc_msgSend_checkWeakPersistentClientWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 checkWeakPersistentClientWithIdentifier:];
}

id objc_msgSend_checkforLeashEligibilityChanges(void *a1, const char *a2, ...)
{
  return _[a1 checkforLeashEligibilityChanges];
}

id objc_msgSend_chooseUncertaintyDuringWorkout_withAltitude_atTime_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "chooseUncertaintyDuringWorkout:withAltitude:atTime:");
}

id objc_msgSend_choreaDetectionService(void *a1, const char *a2, ...)
{
  return _[a1 choreaDetectionService];
}

id objc_msgSend_ci(void *a1, const char *a2, ...)
{
  return _[a1 ci];
}

id objc_msgSend_ckp(void *a1, const char *a2, ...)
{
  return _[a1 ckp];
}

id objc_msgSend_clVisionNotificationAvailable_(void *a1, const char *a2, ...)
{
  return [a1 clVisionNotificationAvailable:];
}

id objc_msgSend_cl_deepCopy(void *a1, const char *a2, ...)
{
  return [a1 cl_deepCopy];
}

id objc_msgSend_cl_deepMutableCopy(void *a1, const char *a2, ...)
{
  return [a1 cl_deepMutableCopy];
}

id objc_msgSend_cl_hexadecimalString(void *a1, const char *a2, ...)
{
  return [a1 cl_hexadecimalString];
}

id objc_msgSend_classNamed_(void *a1, const char *a2, ...)
{
  return [a1 classNamed:];
}

id objc_msgSend_classifyLoiTypeForLocation_(void *a1, const char *a2, ...)
{
  return [a1 classifyLoiTypeForLocation:];
}

id objc_msgSend_classifySteadinessWithCompletion_activity_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "classifySteadinessWithCompletion:activity:");
}

id objc_msgSend_classifyingStoreForHarvester_(void *a1, const char *a2, ...)
{
  return [a1 classifyingStoreForHarvester:];
}

id objc_msgSend_classifyingStoreForHarvesterWithSubArchiving_itemCountThresholdForAutoCleanUp_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "classifyingStoreForHarvesterWithSubArchiving:itemCountThresholdForAutoCleanUp:");
}

id objc_msgSend_cleanCache(void *a1, const char *a2, ...)
{
  return _[a1 cleanCache];
}

id objc_msgSend_cleanHistoricalMslpArrayForForceRebase_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "cleanHistoricalMslpArrayForForceRebase:");
}

id objc_msgSend_cleanUp(void *a1, const char *a2, ...)
{
  return _[a1 cleanUp];
}

id objc_msgSend_cleanUp_(void *a1, const char *a2, ...)
{
  return [a1 cleanUp:];
}

id objc_msgSend_cleanUpIncludingDerivedFeatures_(void *a1, const char *a2, ...)
{
  return [a1 cleanUpIncludingDerivedFeatures:];
}

id objc_msgSend_cleanUpTAUnknownBeaconRecord_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "cleanUpTAUnknownBeaconRecord:");
}

id objc_msgSend_cleanup(void *a1, const char *a2, ...)
{
  return _[a1 cleanup];
}

id objc_msgSend_cleanupPackets(void *a1, const char *a2, ...)
{
  return _[a1 cleanupPackets];
}

id objc_msgSend_cleanupStalledConnectionAttemptWithDuration_forDevice_(void *a1, const char *a2, ...)
{
  return [a1 cleanupStalledConnectionAttemptWithDuration:forDevice:];
}

id objc_msgSend_clear(void *a1, const char *a2, ...)
{
  return _[a1 clear];
}

id objc_msgSend_clearAllLogs(void *a1, const char *a2, ...)
{
  return _[a1 clearAllLogs];
}

id objc_msgSend_clearAllTiles(void *a1, const char *a2, ...)
{
  return _[a1 clearAllTiles];
}

id objc_msgSend_clearAndRemoveAlarm_(void *a1, const char *a2, ...)
{
  return [a1 clearAndRemoveAlarm:];
}

id objc_msgSend_clearBuildingTiles(void *a1, const char *a2, ...)
{
  return _[a1 clearBuildingTiles];
}

id objc_msgSend_clearCalibrations(void *a1, const char *a2, ...)
{
  return _[a1 clearCalibrations];
}

id objc_msgSend_clearCdmaCellTowers(void *a1, const char *a2, ...)
{
  return _[a1 clearCdmaCellTowers];
}

id objc_msgSend_clearCdmaEvdoTowers(void *a1, const char *a2, ...)
{
  return _[a1 clearCdmaEvdoTowers];
}

id objc_msgSend_clearCellTowers(void *a1, const char *a2, ...)
{
  return _[a1 clearCellTowers];
}

id objc_msgSend_clearClient(void *a1, const char *a2, ...)
{
  return _[a1 clearClient];
}

id objc_msgSend_clearConfigurationsForUninstalledApps_(void *a1, const char *a2, ...)
{
  return [a1 clearConfigurationsForUninstalledApps:];
}

id objc_msgSend_clearConnectionAttemptReasons(void *a1, const char *a2, ...)
{
  return _[a1 clearConnectionAttemptReasons];
}

id objc_msgSend_clearData(void *a1, const char *a2, ...)
{
  return _[a1 clearData];
}

id objc_msgSend_clearDataForHarvester_(void *a1, const char *a2, ...)
{
  return [a1 clearDataForHarvester:];
}

id objc_msgSend_clearExitAndEntryScanNetworks_(void *a1, const char *a2, ...)
{
  return [a1 clearExitAndEntryScanNetworks:];
}

id objc_msgSend_clearFence(void *a1, const char *a2, ...)
{
  return _[a1 clearFence];
}

id objc_msgSend_clearFence_forClient_(void *a1, const char *a2, ...)
{
  return [a1 clearFence:forClient:];
}

id objc_msgSend_clearFence_inSession_(void *a1, const char *a2, ...)
{
  return [a1 clearFence:inSession:];
}

id objc_msgSend_clearInVisitRebasedMslpInPlist(void *a1, const char *a2, ...)
{
  return _[a1 clearInVisitRebasedMslpInPlist];
}

id objc_msgSend_clearInputs(void *a1, const char *a2, ...)
{
  return _[a1 clearInputs];
}

id objc_msgSend_clearInterestZones(void *a1, const char *a2, ...)
{
  return _[a1 clearInterestZones];
}

id objc_msgSend_clearLastFix(void *a1, const char *a2, ...)
{
  return _[a1 clearLastFix];
}

id objc_msgSend_clearLatencyTimeoutAndCancel_(void *a1, const char *a2, ...)
{
  return [a1 clearLatencyTimeoutAndCancel:];
}

id objc_msgSend_clearLocationData(void *a1, const char *a2, ...)
{
  return _[a1 clearLocationData];
}

id objc_msgSend_clearLocationFingerprints(void *a1, const char *a2, ...)
{
  return _[a1 clearLocationFingerprints];
}

id objc_msgSend_clearLocationGroups(void *a1, const char *a2, ...)
{
  return _[a1 clearLocationGroups];
}

id objc_msgSend_clearLogs(void *a1, const char *a2, ...)
{
  return _[a1 clearLogs];
}

id objc_msgSend_clearLongAggressiveTimeoutBlockForClient_(void *a1, const char *a2, ...)
{
  return [a1 clearLongAggressiveTimeoutBlockForClient:];
}

id objc_msgSend_clearLteCellTowers(void *a1, const char *a2, ...)
{
  return _[a1 clearLteCellTowers];
}

id objc_msgSend_clearMacModes(void *a1, const char *a2, ...)
{
  return _[a1 clearMacModes];
}

id objc_msgSend_clearMacs(void *a1, const char *a2, ...)
{
  return _[a1 clearMacs];
}

id objc_msgSend_clearMarkets(void *a1, const char *a2, ...)
{
  return _[a1 clearMarkets];
}

id objc_msgSend_clearMeanSeaLevelPressureArrayInPlist(void *a1, const char *a2, ...)
{
  return _[a1 clearMeanSeaLevelPressureArrayInPlist];
}

id objc_msgSend_clearModes(void *a1, const char *a2, ...)
{
  return _[a1 clearModes];
}

id objc_msgSend_clearNr5GCellTowers(void *a1, const char *a2, ...)
{
  return _[a1 clearNr5GCellTowers];
}

id objc_msgSend_clearPendingFollowUpItemsWithUniqueIdentifiers_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "clearPendingFollowUpItemsWithUniqueIdentifiers:completion:");
}

id objc_msgSend_clearPersistentStore_(void *a1, const char *a2, ...)
{
  return [a1 clearPersistentStore:];
}

id objc_msgSend_clearRecentMeanSeaLevelPressureArrayInPlist(void *a1, const char *a2, ...)
{
  return _[a1 clearRecentMeanSeaLevelPressureArrayInPlist];
}

id objc_msgSend_clearRegulatoryDomainEstimates(void *a1, const char *a2, ...)
{
  return _[a1 clearRegulatoryDomainEstimates];
}

id objc_msgSend_clearReunionSyncList(void *a1, const char *a2, ...)
{
  return _[a1 clearReunionSyncList];
}

id objc_msgSend_clearRoadTiles(void *a1, const char *a2, ...)
{
  return _[a1 clearRoadTiles];
}

id objc_msgSend_clearRunningTrackTiles(void *a1, const char *a2, ...)
{
  return _[a1 clearRunningTrackTiles];
}

id objc_msgSend_clearScdmaCellTowers(void *a1, const char *a2, ...)
{
  return _[a1 clearScdmaCellTowers];
}

id objc_msgSend_clearShouldAlert(void *a1, const char *a2, ...)
{
  return _[a1 clearShouldAlert];
}

id objc_msgSend_clearStatusBarColorAndText(void *a1, const char *a2, ...)
{
  return _[a1 clearStatusBarColorAndText];
}

id objc_msgSend_clearStepArray(void *a1, const char *a2, ...)
{
  return _[a1 clearStepArray];
}

id objc_msgSend_clearSummaries(void *a1, const char *a2, ...)
{
  return _[a1 clearSummaries];
}

id objc_msgSend_clearSurroundingWifiBands(void *a1, const char *a2, ...)
{
  return _[a1 clearSurroundingWifiBands];
}

id objc_msgSend_clearTiles(void *a1, const char *a2, ...)
{
  return _[a1 clearTiles];
}

id objc_msgSend_clearTimer(void *a1, const char *a2, ...)
{
  return _[a1 clearTimer];
}

id objc_msgSend_clearUUID(void *a1, const char *a2, ...)
{
  return _[a1 clearUUID];
}

id objc_msgSend_clearVectorClocks(void *a1, const char *a2, ...)
{
  return _[a1 clearVectorClocks];
}

id objc_msgSend_clearWifiBands(void *a1, const char *a2, ...)
{
  return _[a1 clearWifiBands];
}

id objc_msgSend_clearWirelessAPs(void *a1, const char *a2, ...)
{
  return _[a1 clearWirelessAPs];
}

id objc_msgSend_client(void *a1, const char *a2, ...)
{
  return _[a1 client];
}

id objc_msgSend_client_didChangeUsageData_(void *a1, const char *a2, ...)
{
  return [a1 client:didChangeUsageData:];
}

id objc_msgSend_client_didChangeUsageDataInternal_(void *a1, const char *a2, ...)
{
  return [a1 client:didChangeUsageDataInternal:];
}

id objc_msgSend_clientAnchor(void *a1, const char *a2, ...)
{
  return _[a1 clientAnchor];
}

id objc_msgSend_clientAnchorWithType(void *a1, const char *a2, ...)
{
  return _[a1 clientAnchorWithType];
}

id objc_msgSend_clientAuthDate(void *a1, const char *a2, ...)
{
  return _[a1 clientAuthDate];
}

id objc_msgSend_clientAuthorizationCache(void *a1, const char *a2, ...)
{
  return _[a1 clientAuthorizationCache];
}

id objc_msgSend_clientCondition(void *a1, const char *a2, ...)
{
  return _[a1 clientCondition];
}

id objc_msgSend_clientConnected_withNotification_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "clientConnected:withNotification:");
}

id objc_msgSend_clientCount(void *a1, const char *a2, ...)
{
  return _[a1 clientCount];
}

id objc_msgSend_clientDevices(void *a1, const char *a2, ...)
{
  return _[a1 clientDevices];
}

id objc_msgSend_clientEvent(void *a1, const char *a2, ...)
{
  return _[a1 clientEvent];
}

id objc_msgSend_clientIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 clientIdentifier];
}

id objc_msgSend_clientInfoHeader(void *a1, const char *a2, ...)
{
  return _[a1 clientInfoHeader];
}

id objc_msgSend_clientInterest(void *a1, const char *a2, ...)
{
  return _[a1 clientInterest];
}

id objc_msgSend_clientInterestStoreSetValueForClientKey_parameterKey_value_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "clientInterestStoreSetValueForClientKey:parameterKey:value:");
}

id objc_msgSend_clientKey(void *a1, const char *a2, ...)
{
  return _[a1 clientKey];
}

id objc_msgSend_clientKeyPathFromName_(void *a1, const char *a2, ...)
{
  return [a1 clientKeyPathFromName:];
}

id objc_msgSend_clientKeyPathFromName_subIdentityId_subIdentityType_(void *a1, const char *a2, ...)
{
  return [a1 clientKeyPathFromName:subIdentityId:subIdentityType:];
}

id objc_msgSend_clientKeyPathWithClientAnchor_anchorType_(void *a1, const char *a2, ...)
{
  return [a1 clientKeyPathWithClientAnchor:anchorType:];
}

id objc_msgSend_clientKeyPathWithClientAnchor_anchorType_subIdentityId_subIdentityType_(void *a1, const char *a2, ...)
{
  return [a1 clientKeyPathWithClientAnchor:anchorType:subIdentityId:subIdentityType:];
}

id objc_msgSend_clientKeyPathWithClientKey_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "clientKeyPathWithClientKey:");
}

id objc_msgSend_clientKeyPathWithLegacyClientKey_(void *a1, const char *a2, ...)
{
  return [a1 clientKeyPathWithLegacyClientKey:];
}

id objc_msgSend_clientKeyPathWithReplacementSubIdentityId_subIdentityType_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "clientKeyPathWithReplacementSubIdentityId:subIdentityType:");
}

id objc_msgSend_clientKeyPathWithUserName_clientAnchor_anchorType_(void *a1, const char *a2, ...)
{
  return [a1 clientKeyPathWithUserName:v1 clientAnchor:v2 anchorType:v3];
}

id objc_msgSend_clientKeyPathWithUserName_clientAnchor_anchorType_subIdentityId_subIdentityType_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "clientKeyPathWithUserName:clientAnchor:anchorType:subIdentityId:subIdentityType:");
}

id objc_msgSend_clientKeyToAuthContextMap(void *a1, const char *a2, ...)
{
  return _[a1 clientKeyToAuthContextMap];
}

id objc_msgSend_clientKeyToClientInfoMap(void *a1, const char *a2, ...)
{
  return _[a1 clientKeyToClientInfoMap];
}

id objc_msgSend_clientLocation(void *a1, const char *a2, ...)
{
  return _[a1 clientLocation];
}

id objc_msgSend_clientManager(void *a1, const char *a2, ...)
{
  return _[a1 clientManager];
}

id objc_msgSend_clientName(void *a1, const char *a2, ...)
{
  return _[a1 clientName];
}

id objc_msgSend_clientRegistry(void *a1, const char *a2, ...)
{
  return _[a1 clientRegistry];
}

id objc_msgSend_clientState(void *a1, const char *a2, ...)
{
  return _[a1 clientState];
}

id objc_msgSend_clientname(void *a1, const char *a2, ...)
{
  return _[a1 clientname];
}

id objc_msgSend_clients(void *a1, const char *a2, ...)
{
  return _[a1 clients];
}

id objc_msgSend_clientsInSession(void *a1, const char *a2, ...)
{
  return _[a1 clientsInSession];
}

id objc_msgSend_clockWithClockIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 clockWithClockIdentifier:];
}

id objc_msgSend_close(void *a1, const char *a2, ...)
{
  return _[a1 close];
}

id objc_msgSend_closeAndReturnError_(void *a1, const char *a2, ...)
{
  return [a1 closeAndReturnError:];
}

id objc_msgSend_closeFile(void *a1, const char *a2, ...)
{
  return _[a1 closeFile];
}

id objc_msgSend_closeSessionWithState_fromClient_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "closeSessionWithState:fromClient:");
}

id objc_msgSend_closestDistance2DFromCoordinate_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "closestDistance2DFromCoordinate:");
}

id objc_msgSend_clpOutdoorEstimatorLogEntryNotificationAvailable_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "clpOutdoorEstimatorLogEntryNotificationAvailable:");
}

id objc_msgSend_cmAttitude(void *a1, const char *a2, ...)
{
  return _[a1 cmAttitude];
}

id objc_msgSend_cmPedometer(void *a1, const char *a2, ...)
{
  return _[a1 cmPedometer];
}

id objc_msgSend_coarseElevation(void *a1, const char *a2, ...)
{
  return _[a1 coarseElevation];
}

id objc_msgSend_coarseMetadata(void *a1, const char *a2, ...)
{
  return _[a1 coarseMetadata];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_coefficientsUpdated(void *a1, const char *a2, ...)
{
  return _[a1 coefficientsUpdated];
}

id objc_msgSend_coex(void *a1, const char *a2, ...)
{
  return _[a1 coex];
}

id objc_msgSend_coexImpactState(void *a1, const char *a2, ...)
{
  return _[a1 coexImpactState];
}

id objc_msgSend_collect_isLocal_(void *a1, const char *a2, ...)
{
  return [a1 collect:isLocal:];
}

id objc_msgSend_collectLocationData_outputLocation_deviceLocation_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "collectLocationData:outputLocation:deviceLocation:");
}

id objc_msgSend_collectMapDataOfType_aroundCoordinate_inRadius_allowNetwork_isPedestrianOrCycling_clearTiles_callSynchronously_WithReply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:");
}

id objc_msgSend_collectSecondGeotagMetricWithResult_firstHorizontalAccuracy_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "collectSecondGeotagMetricWithResult:firstHorizontalAccuracy:");
}

id objc_msgSend_collectSecondGeotagMetricWithResult_firstHorizontalAccuracy_secondHorizontalAccuracy_distance_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "collectSecondGeotagMetricWithResult:firstHorizontalAccuracy:secondHorizontalAccuracy:distance:");
}

id objc_msgSend_collectWithSubmersionQuantities_shouldLog_(void *a1, const char *a2, ...)
{
  return [a1 collectWithSubmersionQuantities:shouldLog:];
}

id objc_msgSend_columns(void *a1, const char *a2, ...)
{
  return _[a1 columns];
}

id objc_msgSend_combinedFavorableConditions(void *a1, const char *a2, ...)
{
  return _[a1 combinedFavorableConditions];
}

id objc_msgSend_combinedSecret(void *a1, const char *a2, ...)
{
  return _[a1 combinedSecret];
}

id objc_msgSend_command(void *a1, const char *a2, ...)
{
  return _[a1 command];
}

id objc_msgSend_commandWithOpcode_payload_(void *a1, const char *a2, ...)
{
  return [a1 commandWithOpcode:payload:];
}

id objc_msgSend_commandedLatency(void *a1, const char *a2, ...)
{
  return _[a1 commandedLatency];
}

id objc_msgSend_commitChangesToStore(void *a1, const char *a2, ...)
{
  return _[a1 commitChangesToStore];
}

id objc_msgSend_companionAppBundleID(void *a1, const char *a2, ...)
{
  return _[a1 companionAppBundleID];
}

id objc_msgSend_companionHeartbeat_(void *a1, const char *a2, ...)
{
  return [a1 companionHeartbeat:];
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return [a1 compare:];
}

id objc_msgSend_compare_options_(void *a1, const char *a2, ...)
{
  return [a1 compare:options:];
}

id objc_msgSend_compatibilityInfo(void *a1, const char *a2, ...)
{
  return _[a1 compatibilityInfo];
}

id objc_msgSend_compatibilityObject(void *a1, const char *a2, ...)
{
  return _[a1 compatibilityObject];
}

id objc_msgSend_complete(void *a1, const char *a2, ...)
{
  return _[a1 complete];
}

id objc_msgSend_completeActivity_withNextEstimateTime_(void *a1, const char *a2, ...)
{
  return [a1 completeActivity:withNextEstimateTime:];
}

id objc_msgSend_completeCurrentTask(void *a1, const char *a2, ...)
{
  return _[a1 completeCurrentTask];
}

id objc_msgSend_completeIntervalEventForClient_endingAt_setNew_(void *a1, const char *a2, ...)
{
  return [a1 completeIntervalEventForClient:x0 endingAt:x1 setNew:x2];
}

id objc_msgSend_completeJourney(void *a1, const char *a2, ...)
{
  return _[a1 completeJourney];
}

id objc_msgSend_completeMigration(void *a1, const char *a2, ...)
{
  return _[a1 completeMigration];
}

id objc_msgSend_completeRangingConfigure_client_data_opcode_(void *a1, const char *a2, ...)
{
  return [a1 completeRangingConfigure:client:data:opcode:];
}

id objc_msgSend_completeRangingDeinit_client_data_opcode_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "completeRangingDeinit:client:data:opcode:");
}

id objc_msgSend_completeRangingInit_client_data_opcode_(void *a1, const char *a2, ...)
{
  return [a1 completeRangingInit:client:data:opcode:];
}

id objc_msgSend_completeRangingStart_client_data_opcode_(void *a1, const char *a2, ...)
{
  return [a1 completeRangingStart:client:data:opcode:];
}

id objc_msgSend_completeTokenFetchForDevice_(void *a1, const char *a2, ...)
{
  return [a1 completeTokenFetchForDevice:];
}

id objc_msgSend_completedSessionsAwaitingPackets(void *a1, const char *a2, ...)
{
  return _[a1 completedSessionsAwaitingPackets];
}

id objc_msgSend_completionTime(void *a1, const char *a2, ...)
{
  return _[a1 completionTime];
}

id objc_msgSend_components_fromDate_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "components:fromDate:");
}

id objc_msgSend_components_fromDate_toDate_options_(void *a1, const char *a2, ...)
{
  return [a1 components:fromDate:toDate:options:];
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return [a1 componentsJoinedByString:];
}

id objc_msgSend_componentsSeparatedByCharactersInSet_(void *a1, const char *a2, ...)
{
  return [a1 componentsSeparatedByCharactersInSet:];
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_computeAllowableAuthorizationMaskForApplication_pairingID_(void *a1, const char *a2, ...)
{
  return [a1 computeAllowableAuthorizationMaskForApplication:pairingID:];
}

id objc_msgSend_computeBOMScanBackoffOfDate_(void *a1, const char *a2, ...)
{
  return [a1 computeBOMScanBackoffOfDate:];
}

id objc_msgSend_computeCircleIntersectionAreaWithDistance_firstRadius_secondRadius_(void *a1, const char *a2, ...)
{
  return [a1 computeCircleIntersectionAreaWithDistance:x0 firstRadius:x1 secondRadius:x2];
}

id objc_msgSend_computeCoarseLocationAndStore_(void *a1, const char *a2, ...)
{
  return [a1 computeCoarseLocationAndStore:];
}

id objc_msgSend_computeCoarseLocationAndStoreForType_latitude_longitude_altitude_horizontalAccuracy_verticalAccuracy_referenceFrame_config_nploiIndex_(void *a1, const char *a2, ...)
{
  return [a1 computeCoarseLocationAndStoreForType:x0 latitude:x1 longitude:x2 altitude:x3 horizontalAccuracy:x4 verticalAccuracy:x5 referenceFrame:x6 config:x7 nploiIndex:x8];
}

id objc_msgSend_computeHistoricalMeanSeaLevelPressureWithStartTime_andEndTime_andCompletionBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "computeHistoricalMeanSeaLevelPressureWithStartTime:andEndTime:andCompletionBlock:");
}

id objc_msgSend_computeIntervalDistributionsForPeriod_(void *a1, const char *a2, ...)
{
  return [a1 computeIntervalDistributionsForPeriod:];
}

id objc_msgSend_computeLocalDaytimeDurationForDate_latitude_longitude_(void *a1, const char *a2, ...)
{
  return [a1 computeLocalDaytimeDurationForDate:x0 latitude:x1 longitude:x2];
}

id objc_msgSend_computeMD5_(void *a1, const char *a2, ...)
{
  return [a1 computeMD5:];
}

id objc_msgSend_computeMeanSeaLevelPressureWithRebasingLocationData_referenceMap_andLocationType_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "computeMeanSeaLevelPressureWithRebasingLocationData:referenceMap:andLocationType:");
}

id objc_msgSend_computeModeSubmissionForPeriod_(void *a1, const char *a2, ...)
{
  return [a1 computeModeSubmissionForPeriod:];
}

id objc_msgSend_computePercentageAndSubmit_(void *a1, const char *a2, ...)
{
  return [a1 computePercentageAndSubmit:];
}

id objc_msgSend_computePowerLevelDurationForCA(void *a1, const char *a2, ...)
{
  return _[a1 computePowerLevelDurationForCA];
}

id objc_msgSend_computeThermalLevelDurationForCA(void *a1, const char *a2, ...)
{
  return _[a1 computeThermalLevelDurationForCA];
}

id objc_msgSend_computeWalkRunSigma_(void *a1, const char *a2, ...)
{
  return [a1 computeWalkRunSigma:];
}

id objc_msgSend_condition(void *a1, const char *a2, ...)
{
  return _[a1 condition];
}

id objc_msgSend_conditionLimitExceeded(void *a1, const char *a2, ...)
{
  return _[a1 conditionLimitExceeded];
}

id objc_msgSend_conditionUnsupported(void *a1, const char *a2, ...)
{
  return _[a1 conditionUnsupported];
}

id objc_msgSend_conditionsSatisfiedForFalseExitFromNotification_handler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "conditionsSatisfiedForFalseExitFromNotification:handler:");
}

id objc_msgSend_confidence(void *a1, const char *a2, ...)
{
  return _[a1 confidence];
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return _[a1 configuration];
}

id objc_msgSend_configureInitializeAndStartRavenSupervisorWithPlatformInfo_withParametersOverrideString_withCompletion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "configureInitializeAndStartRavenSupervisorWithPlatformInfo:withParametersOverrideString:withCompletion:");
}

id objc_msgSend_configureRangingHawkeyeTaskWithPayload_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "configureRangingHawkeyeTaskWithPayload:");
}

id objc_msgSend_configureRangingNonOwnerTaskWithPayload_(void *a1, const char *a2, ...)
{
  return [a1 configureRangingNonOwnerTaskWithPayload:];
}

id objc_msgSend_configureRangingWithMacAddress_countryCode_uwbChannel_acqPreamble_trackingPreamble_interval_onTag_forClient_(void *a1, const char *a2, ...)
{
  return [a1 configureRangingWithMacAddress:x0 countryCode:x1 uwbChannel:x2 acqPreamble:x3 trackingPreamble:x4 interval:x5 onTag:x6 forClient:x7];
}

id objc_msgSend_configureSeparatedStateHawkeyeTaskWithConfiguration_currentIndex_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "configureSeparatedStateHawkeyeTaskWithConfiguration:currentIndex:");
}

id objc_msgSend_conformanceMode(void *a1, const char *a2, ...)
{
  return _[a1 conformanceMode];
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return [a1 conformsToProtocol:];
}

id objc_msgSend_connect(void *a1, const char *a2, ...)
{
  return _[a1 connect];
}

id objc_msgSend_connectFailedToDevice_withError_(void *a1, const char *a2, ...)
{
  return [a1 connectFailedToDevice:withError:];
}

id objc_msgSend_connectToDevice_withPeripheral_forcedTimeout_(void *a1, const char *a2, ...)
{
  return [a1 connectToDevice:withPeripheral:forcedTimeout:];
}

id objc_msgSend_connectToDeviceWithAddress_(void *a1, const char *a2, ...)
{
  return [a1 connectToDeviceWithAddress:];
}

id objc_msgSend_connectToDevices_(void *a1, const char *a2, ...)
{
  return [a1 connectToDevices:];
}

id objc_msgSend_connectToMediaService(void *a1, const char *a2, ...)
{
  return _[a1 connectToMediaService];
}

id objc_msgSend_connectToMediaService_uploadConfig_(void *a1, const char *a2, ...)
{
  return [a1 connectToMediaService:uploadConfig:];
}

id objc_msgSend_connectToPeripheral_withOptions_andTimeout_(void *a1, const char *a2, ...)
{
  return [a1 connectToPeripheral:withOptions:andTimeout:];
}

id objc_msgSend_connectToServiceForClient_withServiceIdentifier_withConnectionToken_forUser_(void *a1, const char *a2, ...)
{
  return [a1 connectToServiceForClient:withServiceIdentifier:withConnectionToken:forUser:];
}

id objc_msgSend_connectToStore(void *a1, const char *a2, ...)
{
  return _[a1 connectToStore];
}

id objc_msgSend_connectableDeviceCount(void *a1, const char *a2, ...)
{
  return _[a1 connectableDeviceCount];
}

id objc_msgSend_connectedAccessories(void *a1, const char *a2, ...)
{
  return _[a1 connectedAccessories];
}

id objc_msgSend_connectedVehicleAccessories(void *a1, const char *a2, ...)
{
  return _[a1 connectedVehicleAccessories];
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return _[a1 connection];
}

id objc_msgSend_connectionAllowed(void *a1, const char *a2, ...)
{
  return _[a1 connectionAllowed];
}

id objc_msgSend_connectionAttemptCount(void *a1, const char *a2, ...)
{
  return _[a1 connectionAttemptCount];
}

id objc_msgSend_connectionMaterialsForPeripheral_(void *a1, const char *a2, ...)
{
  return [a1 connectionMaterialsForPeripheral:];
}

id objc_msgSend_connectionPriority(void *a1, const char *a2, ...)
{
  return _[a1 connectionPriority];
}

id objc_msgSend_connectionState(void *a1, const char *a2, ...)
{
  return _[a1 connectionState];
}

id objc_msgSend_connectionToken(void *a1, const char *a2, ...)
{
  return _[a1 connectionToken];
}

id objc_msgSend_connectionTokensForBeaconUUID_criteria_completion_(void *a1, const char *a2, ...)
{
  return [a1 connectionTokensForBeaconUUID:criteria:completion:];
}

id objc_msgSend_connectionUpdateHandler(void *a1, const char *a2, ...)
{
  return _[a1 connectionUpdateHandler];
}

id objc_msgSend_consecutiveAndDistinctFromPrevVisitCount(void *a1, const char *a2, ...)
{
  return _[a1 consecutiveAndDistinctFromPrevVisitCount];
}

id objc_msgSend_consecutiveVisitCount(void *a1, const char *a2, ...)
{
  return _[a1 consecutiveVisitCount];
}

id objc_msgSend_conservativeEntry(void *a1, const char *a2, ...)
{
  return _[a1 conservativeEntry];
}

id objc_msgSend_considerPerformingAForcedFullSync(void *a1, const char *a2, ...)
{
  return _[a1 considerPerformingAForcedFullSync];
}

id objc_msgSend_considerPromptingForTranscriptSession_dictionary_requestType_withReply_(void *a1, const char *a2, ...)
{
  return [a1 considerPromptingForTranscriptSession:dictionary:requestType:withReply:];
}

id objc_msgSend_constructController(void *a1, const char *a2, ...)
{
  return _[a1 constructController];
}

id objc_msgSend_constructMonitors(void *a1, const char *a2, ...)
{
  return _[a1 constructMonitors];
}

id objc_msgSend_constructPolicies(void *a1, const char *a2, ...)
{
  return _[a1 constructPolicies];
}

id objc_msgSend_constructSubHarvesters(void *a1, const char *a2, ...)
{
  return _[a1 constructSubHarvesters];
}

id objc_msgSend_contactID(void *a1, const char *a2, ...)
{
  return _[a1 contactID];
}

id objc_msgSend_containerIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 containerIdentifier];
}

id objc_msgSend_containerURLForClientWithClientKey_(void *a1, const char *a2, ...)
{
  return [a1 containerURLForClientWithClientKey:];
}

id objc_msgSend_containerWithObject_destructor_binaryVersion_typeSize_(void *a1, const char *a2, ...)
{
  return [a1 containerWithObject:x0 destructor:x1 binaryVersion:x2 typeSize:x3];
}

id objc_msgSend_containingBundleRecord(void *a1, const char *a2, ...)
{
  return _[a1 containingBundleRecord];
}

id objc_msgSend_containsCoordinate_(void *a1, const char *a2, ...)
{
  return [a1 containsCoordinate:];
}

id objc_msgSend_containsDate_(void *a1, const char *a2, ...)
{
  return [a1 containsDate:];
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return [a1 containsObject:];
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return [a1 containsString:];
}

id objc_msgSend_containsValueForKey_(void *a1, const char *a2, ...)
{
  return [a1 containsValueForKey:];
}

id objc_msgSend_contentsOfDirectoryAtPath_error_(void *a1, const char *a2, ...)
{
  return [a1 contentsOfDirectoryAtPath:x0 error:x1];
}

id objc_msgSend_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:");
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return _[a1 context];
}

id objc_msgSend_continueSync_(void *a1, const char *a2, ...)
{
  return [a1 continueSync:];
}

id objc_msgSend_controlFlags(void *a1, const char *a2, ...)
{
  return _[a1 controlFlags];
}

id objc_msgSend_controller(void *a1, const char *a2, ...)
{
  return _[a1 controller];
}

id objc_msgSend_convert_andObservationAction_(void *a1, const char *a2, ...)
{
  return [a1 convert:andObservationAction:];
}

id objc_msgSend_convertAPToWifiData_(void *a1, const char *a2, ...)
{
  return [a1 convertAPToWifiData:];
}

id objc_msgSend_convertBatteryStatus_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "convertBatteryStatus:");
}

id objc_msgSend_convertCLAvengerScannerPolicyScanTypeToString_(void *a1, const char *a2, ...)
{
  return [a1 convertCLAvengerScannerPolicyScanTypeToString:];
}

id objc_msgSend_convertCLAvengerScannerScanParametersToWPObjectDiscoveryOptions_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "convertCLAvengerScannerScanParametersToWPObjectDiscoveryOptions:");
}

id objc_msgSend_convertCLConnectionStateChangeFromState_toState_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "convertCLConnectionStateChangeFromState:toState:");
}

id objc_msgSend_convertDataBlob_toBoundStatement_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "convertDataBlob:toBoundStatement:");
}

id objc_msgSend_convertFromDomainToMachAbsoluteTime_withFlags_(void *a1, const char *a2, ...)
{
  return [a1 convertFromDomainToMachAbsoluteTime:withFlags:];
}

id objc_msgSend_convertLocationResult_(void *a1, const char *a2, ...)
{
  return [a1 convertLocationResult:];
}

id objc_msgSend_convertLoiTypeToString_(void *a1, const char *a2, ...)
{
  return [a1 convertLoiTypeToString:];
}

id objc_msgSend_convertMonitoringEventToGeofenceState_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "convertMonitoringEventToGeofenceState:");
}

id objc_msgSend_convertPocketStateToDeviceProximity_(void *a1, const char *a2, ...)
{
  return [a1 convertPocketStateToDeviceProximity:];
}

id objc_msgSend_convertRTLocationOfInterest_(void *a1, const char *a2, ...)
{
  return [a1 convertRTLocationOfInterest:];
}

id objc_msgSend_convertSPDetectedDeviceTypeToTADeviceType_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "convertSPDetectedDeviceTypeToTADeviceType:");
}

id objc_msgSend_convertSPTrackingAvoidanceErrorToString_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "convertSPTrackingAvoidanceErrorToString:");
}

id objc_msgSend_convertSPUnauthorizedTrackingObservationActionToString_(void *a1, const char *a2, ...)
{
  return [a1 convertSPUnauthorizedTrackingObservationActionToString:];
}

id objc_msgSend_convertStatementToDataBlobs_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "convertStatementToDataBlobs:");
}

id objc_msgSend_convertTADetectionTypeToString_(void *a1, const char *a2, ...)
{
  return [a1 convertTADetectionTypeToString:];
}

id objc_msgSend_convertToCLFitnessMachineData_deviceId_(void *a1, const char *a2, ...)
{
  return [a1 convertToCLFitnessMachineData:deviceId];
}

id objc_msgSend_convertToCMPedometerBins_(void *a1, const char *a2, ...)
{
  return [a1 convertToCMPedometerBins:];
}

id objc_msgSend_convertToCMStrideCalibrationData_(void *a1, const char *a2, ...)
{
  return [a1 convertToCMStrideCalibrationData:];
}

id objc_msgSend_convertToHexString_(void *a1, const char *a2, ...)
{
  return [a1 convertToHexString:];
}

id objc_msgSend_convertToLatencyFromConnectionInterval_(void *a1, const char *a2, ...)
{
  return [a1 convertToLatencyFromConnectionInterval:];
}

id objc_msgSend_convertToMaxIntervalMsFromConnectionLatency_(void *a1, const char *a2, ...)
{
  return [a1 convertToMaxIntervalMsFromConnectionLatency:];
}

id objc_msgSend_convertToObjectDiscoveryDataWithAdvertisementData_rssi_(void *a1, const char *a2, ...)
{
  return [a1 convertToObjectDiscoveryDataWithAdvertisementData:rssi:];
}

id objc_msgSend_convertToSkiEntry_(void *a1, const char *a2, ...)
{
  return [a1 convertToSkiEntry:];
}

id objc_msgSend_convertToSpringTrackerEntry_(void *a1, const char *a2, ...)
{
  return [a1 convertToSpringTrackerEntry:];
}

id objc_msgSend_convertToSwimEntry_(void *a1, const char *a2, ...)
{
  return [a1 convertToSwimEntry:];
}

id objc_msgSend_coordinate(void *a1, const char *a2, ...)
{
  return _[a1 coordinate];
}

id objc_msgSend_coordinateCount(void *a1, const char *a2, ...)
{
  return _[a1 coordinateCount];
}

id objc_msgSend_coordinates(void *a1, const char *a2, ...)
{
  return _[a1 coordinates];
}

id objc_msgSend_coordinates3d(void *a1, const char *a2, ...)
{
  return _[a1 coordinates3d];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyAdrPublicKeyData_(void *a1, const char *a2, ...)
{
  return [a1 copyAdrPublicKeyData:];
}

id objc_msgSend_copyBins(void *a1, const char *a2, ...)
{
  return _[a1 copyBins];
}

id objc_msgSend_copyBundleIdentifier_bundleType_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "copyBundleIdentifier:bundleType:completion:");
}

id objc_msgSend_copyBundleVersion_bundleType_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "copyBundleVersion:bundleType:completion:");
}

id objc_msgSend_copyCarrierBundleValue_key_bundleType_error_(void *a1, const char *a2, ...)
{
  return [a1 copyCarrierBundleValue:x0 key:x1 bundleType:x2 error:x3];
}

id objc_msgSend_copyCarrierBundleValue_keyHierarchy_bundleType_completion_(void *a1, const char *a2, ...)
{
  return [a1 copyCarrierBundleValue:x0 keyHierarchy:x1 bundleType:x2 completion:x3];
}

id objc_msgSend_copyCarrierBundleValueWithDefault_key_bundleType_completion_(void *a1, const char *a2, ...)
{
  return [a1 copyCarrierBundleValueWithDefault:x0 key:x1 bundleType:x2 completion:x3];
}

id objc_msgSend_copyCellInfo_completion_(void *a1, const char *a2, ...)
{
  return [a1 copyCellInfo:completion:];
}

id objc_msgSend_copyCurrentBias(void *a1, const char *a2, ...)
{
  return _[a1 copyCurrentBias];
}

id objc_msgSend_copyDataBuffersForTrack_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "copyDataBuffersForTrack:");
}

id objc_msgSend_copyDataFrom_to_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "copyDataFrom:to:");
}

id objc_msgSend_copyEmergencyMode_(void *a1, const char *a2, ...)
{
  return [a1 copyEmergencyMode:];
}

id objc_msgSend_copyHistory(void *a1, const char *a2, ...)
{
  return _[a1 copyHistory];
}

id objc_msgSend_copyIsInHomeCountry_completion_(void *a1, const char *a2, ...)
{
  return [a1 copyIsInHomeCountry:completion:];
}

id objc_msgSend_copyItemAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return [a1 copyItemAtPath:x0 toPath:x1 error:x2];
}

id objc_msgSend_copyItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "copyItemAtURL:toURL:error:");
}

id objc_msgSend_copyMobileCountryCode_completion_(void *a1, const char *a2, ...)
{
  return [a1 copyMobileCountryCode:x0 completion:x1];
}

id objc_msgSend_copyMobileEquipmentInfo_(void *a1, const char *a2, ...)
{
  return [a1 copyMobileEquipmentInfo:];
}

id objc_msgSend_copyMobileNetworkCode_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "copyMobileNetworkCode:completion:");
}

id objc_msgSend_copyMobileSubscriberCountryCode_completion_(void *a1, const char *a2, ...)
{
  return [a1 copyMobileSubscriberCountryCode:completion:];
}

id objc_msgSend_copyMobileSubscriberNetworkCode_completion_(void *a1, const char *a2, ...)
{
  return [a1 copyMobileSubscriberNetworkCode:x0 completion:x1];
}

id objc_msgSend_copyNearbyAssetSettingsOfAccessoryFile_withReply_(void *a1, const char *a2, ...)
{
  return [a1 copyNearbyAssetSettingsOfAccessoryFile:withReply:];
}

id objc_msgSend_copyNearbyAssetSettingsWithReply_(void *a1, const char *a2, ...)
{
  return [a1 copyNearbyAssetSettingsWithReply:];
}

id objc_msgSend_copyPublicKeyFromPrivateKey_(void *a1, const char *a2, ...)
{
  return [a1 copyPublicKeyFromPrivateKey:];
}

id objc_msgSend_copyRadioAccessTechnology_error_(void *a1, const char *a2, ...)
{
  return [a1 copyRadioAccessTechnology:error];
}

id objc_msgSend_copyRegistrationDisplayStatus_completion_(void *a1, const char *a2, ...)
{
  return [a1 copyRegistrationDisplayStatus:x0 completion:x1];
}

id objc_msgSend_copyRegistrationIMSTransportInfo_completion_(void *a1, const char *a2, ...)
{
  return [a1 copyRegistrationIMSTransportInfo:x0 completion:x1];
}

id objc_msgSend_copyRegistrationStatus_error_(void *a1, const char *a2, ...)
{
  return [a1 copyRegistrationStatus:error];
}

id objc_msgSend_copyRoutineAssetSettingsWithReply_(void *a1, const char *a2, ...)
{
  return [a1 copyRoutineAssetSettingsWithReply:];
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return [a1 copyWithZone:];
}

id objc_msgSend_core(void *a1, const char *a2, ...)
{
  return _[a1 core];
}

id objc_msgSend_correctiveCompensationMask(void *a1, const char *a2, ...)
{
  return _[a1 correctiveCompensationMask];
}

id objc_msgSend_correspondingApplicationRecord(void *a1, const char *a2, ...)
{
  return _[a1 correspondingApplicationRecord];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "countByEnumeratingWithState:objects:count:")];
}

id objc_msgSend_countForFetchRequest_error_(void *a1, const char *a2, ...)
{
  return [a1 countForFetchRequest:error];
}

id objc_msgSend_countForObject_(void *a1, const char *a2, ...)
{
  return [a1 countForObject:];
}

id objc_msgSend_countHeleMaintainableDevices(void *a1, const char *a2, ...)
{
  return _[a1 countHeleMaintainableDevices];
}

id objc_msgSend_countLeashableDevices(void *a1, const char *a2, ...)
{
  return _[a1 countLeashableDevices];
}

id objc_msgSend_countMaintainableDevices(void *a1, const char *a2, ...)
{
  return _[a1 countMaintainableDevices];
}

id objc_msgSend_countMatchesInA_andB_(void *a1, const char *a2, ...)
{
  return [a1 countMatchesInA:andB:];
}

id objc_msgSend_countUnit(void *a1, const char *a2, ...)
{
  return _[a1 countUnit];
}

id objc_msgSend_countriesAreUnchanged_(void *a1, const char *a2, ...)
{
  return [a1 countriesAreUnchanged:];
}

id objc_msgSend_country(void *a1, const char *a2, ...)
{
  return _[a1 country];
}

id objc_msgSend_countryCode(void *a1, const char *a2, ...)
{
  return _[a1 countryCode];
}

id objc_msgSend_countryCodeDebounceInterval(void *a1, const char *a2, ...)
{
  return _[a1 countryCodeDebounceInterval];
}

id objc_msgSend_course(void *a1, const char *a2, ...)
{
  return _[a1 course];
}

id objc_msgSend_courseAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 courseAccuracy];
}

id objc_msgSend_covariance(void *a1, const char *a2, ...)
{
  return _[a1 covariance];
}

id objc_msgSend_covertLocationToString_withFirstLocationTimeStamp_withPublicKey_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "covertLocationToString:withFirstLocationTimeStamp:withPublicKey:");
}

id objc_msgSend_cppClientKey(void *a1, const char *a2, ...)
{
  return _[a1 cppClientKey];
}

id objc_msgSend_cppObjectPtr(void *a1, const char *a2, ...)
{
  return _[a1 cppObjectPtr];
}

id objc_msgSend_crashAlertEnabled(void *a1, const char *a2, ...)
{
  return _[a1 crashAlertEnabled];
}

id objc_msgSend_crashString(void *a1, const char *a2, ...)
{
  return _[a1 crashString];
}

id objc_msgSend_createActivityRefreshBeaconPayloadIfNeededWithLocation_payload_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createActivityRefreshBeaconPayloadIfNeededWithLocation:payload:");
}

id objc_msgSend_createAggPeriodIfApplicable_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createAggPeriodIfApplicable:");
}

id objc_msgSend_createCKRecordForInput_(void *a1, const char *a2, ...)
{
  return [a1 createCKRecordForInput:];
}

id objc_msgSend_createCKRecordForOutput_(void *a1, const char *a2, ...)
{
  return [a1 createCKRecordForOutput:];
}

id objc_msgSend_createCache(void *a1, const char *a2, ...)
{
  return _[a1 createCache];
}

id objc_msgSend_createCoexMetricDictForCASubmission_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createCoexMetricDictForCASubmission:");
}

id objc_msgSend_createConfigureRangingTaskWithMacAddress_countryCode_uwbChannel_acqPreamble_trackingPreamble_interval_(void *a1, const char *a2, ...)
{
  return [a1 createConfigureRangingTaskWithMacAddress:x0 countryCode:x1 uwbChannel:x2 acqPreamble:x3 trackingPreamble:x4 interval:x5];
}

id objc_msgSend_createConnection(void *a1, const char *a2, ...)
{
  return _[a1 createConnection];
}

id objc_msgSend_createDeinitRangingTask(void *a1, const char *a2, ...)
{
  return _[a1 createDeinitRangingTask];
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return [a1 createDirectoryAtPath:x0 withIntermediateDirectories:x1 attributes:x2 error:x3];
}

id objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createDumpLogsTaskOfType_(void *a1, const char *a2, ...)
{
  return [a1 createDumpLogsTaskOfType:];
}

id objc_msgSend_createFetchAISAccessoryCapabilitiesTask(void *a1, const char *a2, ...)
{
  return _[a1 createFetchAISAccessoryCapabilitiesTask];
}

id objc_msgSend_createFetchAISAccessoryCategoryTask(void *a1, const char *a2, ...)
{
  return _[a1 createFetchAISAccessoryCategoryTask];
}

id objc_msgSend_createFetchAISBatteryLevelTask(void *a1, const char *a2, ...)
{
  return _[a1 createFetchAISBatteryLevelTask];
}

id objc_msgSend_createFetchAISBatteryTypeTask(void *a1, const char *a2, ...)
{
  return _[a1 createFetchAISBatteryTypeTask];
}

id objc_msgSend_createFetchAISFindMyVersionTask(void *a1, const char *a2, ...)
{
  return _[a1 createFetchAISFindMyVersionTask];
}

id objc_msgSend_createFetchAISFirmwareVersionTask(void *a1, const char *a2, ...)
{
  return _[a1 createFetchAISFirmwareVersionTask];
}

id objc_msgSend_createFetchAISManufacturerNameTask(void *a1, const char *a2, ...)
{
  return _[a1 createFetchAISManufacturerNameTask];
}

id objc_msgSend_createFetchAISModelColorCodeTask(void *a1, const char *a2, ...)
{
  return _[a1 createFetchAISModelColorCodeTask];
}

id objc_msgSend_createFetchAISModelNameTask(void *a1, const char *a2, ...)
{
  return _[a1 createFetchAISModelNameTask];
}

id objc_msgSend_createFetchAISNetworkIdTask(void *a1, const char *a2, ...)
{
  return _[a1 createFetchAISNetworkIdTask];
}

id objc_msgSend_createFetchAISProductDataTask(void *a1, const char *a2, ...)
{
  return _[a1 createFetchAISProductDataTask];
}

id objc_msgSend_createFetchAISProtocolImplementationTask(void *a1, const char *a2, ...)
{
  return _[a1 createFetchAISProtocolImplementationTask];
}

id objc_msgSend_createFetchAISSerialNumberTask(void *a1, const char *a2, ...)
{
  return _[a1 createFetchAISSerialNumberTask];
}

id objc_msgSend_createFetchAccelerometerModeTask(void *a1, const char *a2, ...)
{
  return _[a1 createFetchAccelerometerModeTask];
}

id objc_msgSend_createFetchAccelerometerOrientationModeTaskWithConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 createFetchAccelerometerOrientationModeTaskWithConfiguration];
}

id objc_msgSend_createFetchAccelerometerSlopeModeTaskWithConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 createFetchAccelerometerSlopeModeTaskWithConfiguration];
}

id objc_msgSend_createFetchBatteryStatusTask(void *a1, const char *a2, ...)
{
  return _[a1 createFetchBatteryStatusTask];
}

id objc_msgSend_createFetchCurrentPrimaryKeyTask(void *a1, const char *a2, ...)
{
  return _[a1 createFetchCurrentPrimaryKeyTask];
}

id objc_msgSend_createFetchFirmwareVersionTaskWithCrashLogs_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createFetchFirmwareVersionTaskWithCrashLogs:");
}

id objc_msgSend_createFetchTxPowerTaskAsOwner_(void *a1, const char *a2, ...)
{
  return [a1 createFetchTxPowerTaskAsOwner:];
}

id objc_msgSend_createFetchUserStatsTaskWithPersistence_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createFetchUserStatsTaskWithPersistence:");
}

id objc_msgSend_createFetchiCloudIdentifierTask(void *a1, const char *a2, ...)
{
  return _[a1 createFetchiCloudIdentifierTask];
}

id objc_msgSend_createFileAtPath_contents_attributes_(void *a1, const char *a2, ...)
{
  return [a1 createFileAtPath:x0 contents:x1 attributes:x2];
}

id objc_msgSend_createGetGroupStatusTask(void *a1, const char *a2, ...)
{
  return _[a1 createGetGroupStatusTask];
}

id objc_msgSend_createGetMultiStatusTask(void *a1, const char *a2, ...)
{
  return _[a1 createGetMultiStatusTask];
}

id objc_msgSend_createInduceCrashTask(void *a1, const char *a2, ...)
{
  return _[a1 createInduceCrashTask];
}

id objc_msgSend_createInitRangingTaskWithMacAddress_(void *a1, const char *a2, ...)
{
  return [a1 createInitRangingTaskWithMacAddress:];
}

id objc_msgSend_createIntervalEventStartingAt_(void *a1, const char *a2, ...)
{
  return [a1 createIntervalEventStartingAt:];
}

id objc_msgSend_createKeyFromExternalRepresentationString_keyClass_(void *a1, const char *a2, ...)
{
  return [a1 createKeyFromExternalRepresentationString:x0 keyClass:x1];
}

id objc_msgSend_createKeyReconcilerWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 createKeyReconcilerWithCompletion:];
}

id objc_msgSend_createLongAggressiveTimeoutBlockForClient_seconds_withBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createLongAggressiveTimeoutBlockForClient:seconds:withBlock:");
}

id objc_msgSend_createManagedObjectContext(void *a1, const char *a2, ...)
{
  return _[a1 createManagedObjectContext];
}

id objc_msgSend_createMetricsDict_isInternal_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createMetricsDict:isInternal:");
}

id objc_msgSend_createNewBeaconPayloadwithNewLocation_oldBeaconPayload_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createNewBeaconPayloadwithNewLocation:oldBeaconPayload:");
}

id objc_msgSend_createNewModules_universe_settings_(void *a1, const char *a2, ...)
{
  return [a1 createNewModules:universe:settings:];
}

id objc_msgSend_createNonPoshDeviceWithUUID_beaconType_(void *a1, const char *a2, ...)
{
  return [a1 createNonPoshDeviceWithUUID:beaconType:];
}

id objc_msgSend_createPeripheralWithAddress_andIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 createPeripheralWithAddress:andIdentifier:];
}

id objc_msgSend_createPlaySoundTaskWithSequence_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createPlaySoundTaskWithSequence:");
}

id objc_msgSend_createPlayUnauthorizedSoundTaskWithSequence_(void *a1, const char *a2, ...)
{
  return [a1 createPlayUnauthorizedSoundTaskWithSequence:];
}

id objc_msgSend_createPoshDeviceWithUUID_(void *a1, const char *a2, ...)
{
  return [a1 createPoshDeviceWithUUID:];
}

id objc_msgSend_createPrivacyTimeOffset(void *a1, const char *a2, ...)
{
  return _[a1 createPrivacyTimeOffset];
}

id objc_msgSend_createRandomP256PrivateKey(void *a1, const char *a2, ...)
{
  return _[a1 createRandomP256PrivateKey];
}

id objc_msgSend_createRangeSession(void *a1, const char *a2, ...)
{
  return _[a1 createRangeSession];
}

id objc_msgSend_createRequestFromCachedDict_error_(void *a1, const char *a2, ...)
{
  return [a1 createRequestFromCachedDict:error];
}

id objc_msgSend_createRequestFromDict_baseURL_sessionID_partnerAdrPublicKeyData_deviceSessionPrivateKey_deviceSessionSecret_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createRequestFromDict:baseURL:sessionID:partnerAdrPublicKeyData:deviceSessionPrivateKey:deviceSessionSecret:error:");
}

id objc_msgSend_createRollWildKeyTask(void *a1, const char *a2, ...)
{
  return _[a1 createRollWildKeyTask];
}

id objc_msgSend_createServiceForClient_withServiceType_locationTypes_connectionToken_forUser_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createServiceForClient:withServiceType:locationTypes:connectionToken:forUser:");
}

id objc_msgSend_createSetAccelerometerOrientationModeTaskWithConfiguration_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createSetAccelerometerOrientationModeTaskWithConfiguration:");
}

id objc_msgSend_createSetAccelerometerSlopeModeTaskWithConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 createSetAccelerometerSlopeModeTaskWithConfiguration:];
}

id objc_msgSend_createSetBatteryStatusTaskWithStatus_(void *a1, const char *a2, ...)
{
  return [a1 createSetBatteryStatusTaskWithStatus:];
}

id objc_msgSend_createSetKeyRollTimeoutTaskWithInterval_(void *a1, const char *a2, ...)
{
  return [a1 createSetKeyRollTimeoutTaskWithInterval:];
}

id objc_msgSend_createSetMaxConnectionsTaskWithCount_(void *a1, const char *a2, ...)
{
  return [a1 createSetMaxConnectionsTaskWithCount:];
}

id objc_msgSend_createSetNearOwnerTimeoutTaskInSeconds_(void *a1, const char *a2, ...)
{
  return [a1 createSetNearOwnerTimeoutTaskInSeconds:];
}

id objc_msgSend_createSetObfuscatedIdentifierTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createSetObfuscatedIdentifierTaskWithIdentifier:");
}

id objc_msgSend_createSetPersistentConnectionTaskWithState_(void *a1, const char *a2, ...)
{
  return [a1 createSetPersistentConnectionTaskWithState:];
}

id objc_msgSend_createSetTagTypeTaskWithType_(void *a1, const char *a2, ...)
{
  return [a1 createSetTagTypeTaskWithType:];
}

id objc_msgSend_createSetTestModeTaskWithMode_(void *a1, const char *a2, ...)
{
  return [a1 createSetTestModeTaskWithMode:];
}

id objc_msgSend_createSetUnauthorizedPlaySoundRateLimitTask_(void *a1, const char *a2, ...)
{
  return [a1 createSetUnauthorizedPlaySoundRateLimitTask:];
}

id objc_msgSend_createSetWildModeTaskWithConfiguration_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createSetWildModeTaskWithConfiguration:");
}

id objc_msgSend_createStartAggressiveAdvertisingTaskWithTimeout_(void *a1, const char *a2, ...)
{
  return [a1 createStartAggressiveAdvertisingTaskWithTimeout:];
}

id objc_msgSend_createStartRangingTaskWithTargetEventCounter_(void *a1, const char *a2, ...)
{
  return [a1 createStartRangingTaskWithTargetEventCounter:];
}

id objc_msgSend_createStartUnauthorizedAggressiveAdvertisingTask(void *a1, const char *a2, ...)
{
  return _[a1 createStartUnauthorizedAggressiveAdvertisingTask];
}

id objc_msgSend_createStopAggressiveAdvertisingTask(void *a1, const char *a2, ...)
{
  return _[a1 createStopAggressiveAdvertisingTask];
}

id objc_msgSend_createStopPlayingSoundTask(void *a1, const char *a2, ...)
{
  return _[a1 createStopPlayingSoundTask];
}

id objc_msgSend_createStopPlayingUnauthorizedSoundTask(void *a1, const char *a2, ...)
{
  return _[a1 createStopPlayingUnauthorizedSoundTask];
}

id objc_msgSend_createStopRangingTask(void *a1, const char *a2, ...)
{
  return _[a1 createStopRangingTask];
}

id objc_msgSend_createSyncStoreState(void *a1, const char *a2, ...)
{
  return _[a1 createSyncStoreState];
}

id objc_msgSend_createUnpairDeviceTask(void *a1, const char *a2, ...)
{
  return _[a1 createUnpairDeviceTask];
}

id objc_msgSend_createVO2MaxInputZone(void *a1, const char *a2, ...)
{
  return _[a1 createVO2MaxInputZone];
}

id objc_msgSend_createVO2MaxOutputZone(void *a1, const char *a2, ...)
{
  return _[a1 createVO2MaxOutputZone];
}

id objc_msgSend_createWorkingDirectory(void *a1, const char *a2, ...)
{
  return _[a1 createWorkingDirectory];
}

id objc_msgSend_createZone_(void *a1, const char *a2, ...)
{
  return [a1 createZone:];
}

id objc_msgSend_credential(void *a1, const char *a2, ...)
{
  return _[a1 credential];
}

id objc_msgSend_credentialForTrust_(void *a1, const char *a2, ...)
{
  return [a1 credentialForTrust:];
}

id objc_msgSend_credentialItemForKey_(void *a1, const char *a2, ...)
{
  return [a1 credentialItemForKey:];
}

id objc_msgSend_crossEntropyOfreference_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "crossEntropyOfreference:");
}

id objc_msgSend_csgNetworkIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 csgNetworkIdentifier];
}

id objc_msgSend_cumulateReference_andRefAltitude_andRefVariance_andBaroElevation_andType_(void *a1, const char *a2, ...)
{
  return [a1 cumulateReference:x0 andRefAltitude:x1 andRefVariance:x2 andBaroElevation:x3 andType:x4];
}

id objc_msgSend_currentAssetPacketizer(void *a1, const char *a2, ...)
{
  return _[a1 currentAssetPacketizer];
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return _[a1 currentCalendar];
}

id objc_msgSend_currentCalls(void *a1, const char *a2, ...)
{
  return _[a1 currentCalls];
}

id objc_msgSend_currentConnection(void *a1, const char *a2, ...)
{
  return _[a1 currentConnection];
}

id objc_msgSend_currentCountrySupportsFeature_(void *a1, const char *a2, ...)
{
  return [a1 currentCountrySupportsFeature:];
}

id objc_msgSend_currentDevice(void *a1, const char *a2, ...)
{
  return _[a1 currentDevice];
}

id objc_msgSend_currentDirectoryPath(void *a1, const char *a2, ...)
{
  return _[a1 currentDirectoryPath];
}

id objc_msgSend_currentEstimate(void *a1, const char *a2, ...)
{
  return _[a1 currentEstimate];
}

id objc_msgSend_currentEstimates(void *a1, const char *a2, ...)
{
  return _[a1 currentEstimates];
}

id objc_msgSend_currentFilename(void *a1, const char *a2, ...)
{
  return _[a1 currentFilename];
}

id objc_msgSend_currentGranularity(void *a1, const char *a2, ...)
{
  return _[a1 currentGranularity];
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _[a1 currentHandler];
}

id objc_msgSend_currentIndex(void *a1, const char *a2, ...)
{
  return _[a1 currentIndex];
}

id objc_msgSend_currentInterVisitMetric(void *a1, const char *a2, ...)
{
  return _[a1 currentInterVisitMetric];
}

id objc_msgSend_currentLatchedAbsoluteTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 currentLatchedAbsoluteTimestamp];
}

id objc_msgSend_currentLatency(void *a1, const char *a2, ...)
{
  return _[a1 currentLatency];
}

id objc_msgSend_currentLatitude(void *a1, const char *a2, ...)
{
  return _[a1 currentLatitude];
}

id objc_msgSend_currentLocale(void *a1, const char *a2, ...)
{
  return _[a1 currentLocale];
}

id objc_msgSend_currentLocation(void *a1, const char *a2, ...)
{
  return _[a1 currentLocation];
}

id objc_msgSend_currentLocationRequests(void *a1, const char *a2, ...)
{
  return _[a1 currentLocationRequests];
}

id objc_msgSend_currentLongitude(void *a1, const char *a2, ...)
{
  return _[a1 currentLongitude];
}

id objc_msgSend_currentMitigation(void *a1, const char *a2, ...)
{
  return _[a1 currentMitigation];
}

id objc_msgSend_currentPowerLevel(void *a1, const char *a2, ...)
{
  return _[a1 currentPowerLevel];
}

id objc_msgSend_currentSOSInteractiveState(void *a1, const char *a2, ...)
{
  return _[a1 currentSOSInteractiveState];
}

id objc_msgSend_currentScanParameters(void *a1, const char *a2, ...)
{
  return _[a1 currentScanParameters];
}

id objc_msgSend_currentScanType(void *a1, const char *a2, ...)
{
  return _[a1 currentScanType];
}

id objc_msgSend_currentSession(void *a1, const char *a2, ...)
{
  return _[a1 currentSession];
}

id objc_msgSend_currentState(void *a1, const char *a2, ...)
{
  return _[a1 currentState];
}

id objc_msgSend_currentTaskName(void *a1, const char *a2, ...)
{
  return _[a1 currentTaskName];
}

id objc_msgSend_currentThermalLevel(void *a1, const char *a2, ...)
{
  return _[a1 currentThermalLevel];
}

id objc_msgSend_currentThermalLevelStartTime(void *a1, const char *a2, ...)
{
  return _[a1 currentThermalLevelStartTime];
}

id objc_msgSend_currentThread(void *a1, const char *a2, ...)
{
  return _[a1 currentThread];
}

id objc_msgSend_currentTicks(void *a1, const char *a2, ...)
{
  return _[a1 currentTicks];
}

id objc_msgSend_currentToken(void *a1, const char *a2, ...)
{
  return _[a1 currentToken];
}

id objc_msgSend_currentUser(void *a1, const char *a2, ...)
{
  return _[a1 currentUser];
}

id objc_msgSend_currentVisitHorizontalUncertainty(void *a1, const char *a2, ...)
{
  return _[a1 currentVisitHorizontalUncertainty];
}

id objc_msgSend_currentVisitLocation(void *a1, const char *a2, ...)
{
  return _[a1 currentVisitLocation];
}

id objc_msgSend_currentWPState(void *a1, const char *a2, ...)
{
  return _[a1 currentWPState];
}

id objc_msgSend_currentWorkoutActiveStateWithReply_(void *a1, const char *a2, ...)
{
  return [a1 currentWorkoutActiveStateWithReply:];
}

id objc_msgSend_currentWorkoutSnapshotWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 currentWorkoutSnapshotWithCompletion:];
}

id objc_msgSend_currentlyActiveDevice(void *a1, const char *a2, ...)
{
  return _[a1 currentlyActiveDevice];
}

id objc_msgSend_currentlyScheduled(void *a1, const char *a2, ...)
{
  return _[a1 currentlyScheduled];
}

id objc_msgSend_currentpeakPowerStartTime(void *a1, const char *a2, ...)
{
  return _[a1 currentpeakPowerStartTime];
}

id objc_msgSend_cycleTime(void *a1, const char *a2, ...)
{
  return _[a1 cycleTime];
}

id objc_msgSend_cycling(void *a1, const char *a2, ...)
{
  return _[a1 cycling];
}

id objc_msgSend_cyclingToNonFitnessSeconds(void *a1, const char *a2, ...)
{
  return _[a1 cyclingToNonFitnessSeconds];
}

id objc_msgSend_daemonCondition(void *a1, const char *a2, ...)
{
  return _[a1 daemonCondition];
}

id objc_msgSend_daemonControl(void *a1, const char *a2, ...)
{
  return _[a1 daemonControl];
}

id objc_msgSend_daemonEvent(void *a1, const char *a2, ...)
{
  return _[a1 daemonEvent];
}

id objc_msgSend_daemonLocationPrivate(void *a1, const char *a2, ...)
{
  return _[a1 daemonLocationPrivate];
}

id objc_msgSend_daemonState(void *a1, const char *a2, ...)
{
  return _[a1 daemonState];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _[a1 data];
}

id objc_msgSend_dataFieldKey(void *a1, const char *a2, ...)
{
  return _[a1 dataFieldKey];
}

id objc_msgSend_dataForKey_atKeyPath_defaultValue_(void *a1, const char *a2, ...)
{
  return [a1 dataForKey:x0 atKeyPath:x1 defaultValue:x2];
}

id objc_msgSend_dataIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 dataIdentifier];
}

id objc_msgSend_dataPayload(void *a1, const char *a2, ...)
{
  return _[a1 dataPayload];
}

id objc_msgSend_dataPlanSignalingReductionOverride(void *a1, const char *a2, ...)
{
  return _[a1 dataPlanSignalingReductionOverride];
}

id objc_msgSend_dataProtection(void *a1, const char *a2, ...)
{
  return _[a1 dataProtection];
}

id objc_msgSend_dataSize(void *a1, const char *a2, ...)
{
  return _[a1 dataSize];
}

id objc_msgSend_dataSubType(void *a1, const char *a2, ...)
{
  return _[a1 dataSubType];
}

id objc_msgSend_dataTaskWithRequest_(void *a1, const char *a2, ...)
{
  return [a1 dataTaskWithRequest:];
}

id objc_msgSend_dataTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 dataTaskWithRequest:];
}

id objc_msgSend_dataType(void *a1, const char *a2, ...)
{
  return _[a1 dataType];
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return [a1 dataUsingEncoding:];
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return [a1 dataWithBytes:];
}

id objc_msgSend_dataWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 dataWithCapacity:];
}

id objc_msgSend_dataWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return [a1 dataWithContentsOfFile:];
}

id objc_msgSend_dataWithContentsOfFile_options_error_(void *a1, const char *a2, ...)
{
  return [a1 dataWithContentsOfFile:x0 options:x1 error:x2];
}

id objc_msgSend_dataWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return [a1 dataWithContentsOfURL:];
}

id objc_msgSend_dataWithContentsOfURL_options_error_(void *a1, const char *a2, ...)
{
  return [a1 dataWithContentsOfURL:options:error:];
}

id objc_msgSend_dataWithData_(void *a1, const char *a2, ...)
{
  return [a1 dataWithData:];
}

id objc_msgSend_dataWithHexString_(void *a1, const char *a2, ...)
{
  return [a1 dataWithHexString:];
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_dataWithLength_(void *a1, const char *a2, ...)
{
  return [a1 dataWithLength:];
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return [a1 dataWithPropertyList:x0 format:x1 options:x2 error:x3];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateByAddingComponents_toDate_options_(void *a1, const char *a2, ...)
{
  return [a1 dateByAddingComponents:toDate:options:];
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return [a1 dateByAddingTimeInterval:];
}

id objc_msgSend_dateByAddingUnit_value_toDate_options_(void *a1, const char *a2, ...)
{
  return [a1 dateByAddingUnit:value:toDate:options:];
}

id objc_msgSend_dateFromComponents_(void *a1, const char *a2, ...)
{
  return [a1 dateFromComponents:];
}

id objc_msgSend_dateFromString_(void *a1, const char *a2, ...)
{
  return [a1 dateFromString:];
}

id objc_msgSend_dateInterval(void *a1, const char *a2, ...)
{
  return _[a1 dateInterval];
}

id objc_msgSend_dateSaved(void *a1, const char *a2, ...)
{
  return _[a1 dateSaved];
}

id objc_msgSend_dateWithTimeInterval_sinceDate_(void *a1, const char *a2, ...)
{
  return [a1 dateWithTimeInterval:x0 sinceDate:x1];
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return [a1 dateWithTimeIntervalSince1970:];
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return [a1 dateWithTimeIntervalSinceNow:];
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return [a1 dateWithTimeIntervalSinceReferenceDate:];
}

id objc_msgSend_day(void *a1, const char *a2, ...)
{
  return _[a1 day];
}

id objc_msgSend_daysToDate_(void *a1, const char *a2, ...)
{
  return [a1 daysToDate:];
}

id objc_msgSend_debounceInterval(void *a1, const char *a2, ...)
{
  return _[a1 debounceInterval];
}

id objc_msgSend_debounceTime(void *a1, const char *a2, ...)
{
  return _[a1 debounceTime];
}

id objc_msgSend_debounceTimer(void *a1, const char *a2, ...)
{
  return _[a1 debounceTimer];
}

id objc_msgSend_debugDescription(void *a1, const char *a2, ...)
{
  return _[a1 debugDescription];
}

id objc_msgSend_debugInfo(void *a1, const char *a2, ...)
{
  return _[a1 debugInfo];
}

id objc_msgSend_decimalDigitCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 decimalDigitCharacterSet];
}

id objc_msgSend_decimateDoulbe_(void *a1, const char *a2, ...)
{
  return [a1 decimateDoulbe:];
}

id objc_msgSend_decimateInteger_(void *a1, const char *a2, ...)
{
  return [a1 decimateInteger:];
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeBoolForKey:];
}

id objc_msgSend_decodeDoubleForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeDoubleForKey:];
}

id objc_msgSend_decodeFloatForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeFloatForKey:];
}

id objc_msgSend_decodeInt32ForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeInt32ForKey:];
}

id objc_msgSend_decodeInt64ForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeInt64ForKey:];
}

id objc_msgSend_decodeIntForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeIntForKey:];
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeIntegerForKey:];
}

id objc_msgSend_decodeObjectForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeObjectForKey:];
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeObjectOfClasses:forKey:];
}

id objc_msgSend_decrementAttributionCountForServiceType_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "decrementAttributionCountForServiceType:");
}

id objc_msgSend_deepThreshold(void *a1, const char *a2, ...)
{
  return _[a1 deepThreshold];
}

id objc_msgSend_deepestDepthForHK(void *a1, const char *a2, ...)
{
  return _[a1 deepestDepthForHK];
}

id objc_msgSend_defaultBins(void *a1, const char *a2, ...)
{
  return _[a1 defaultBins];
}

id objc_msgSend_defaultCStringEncoding(void *a1, const char *a2, ...)
{
  return _[a1 defaultCStringEncoding];
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultFileManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultFileManager];
}

id objc_msgSend_defaultForKey_defaultValue_(void *a1, const char *a2, ...)
{
  return [a1 defaultForKey:defaultValue:];
}

id objc_msgSend_defaultIDSOptions(void *a1, const char *a2, ...)
{
  return _[a1 defaultIDSOptions];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_defaultModelsDirectory(void *a1, const char *a2, ...)
{
  return _[a1 defaultModelsDirectory];
}

id objc_msgSend_defaultSequence(void *a1, const char *a2, ...)
{
  return _[a1 defaultSequence];
}

id objc_msgSend_defaultSessionConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 defaultSessionConfiguration];
}

id objc_msgSend_defaultStore(void *a1, const char *a2, ...)
{
  return _[a1 defaultStore];
}

id objc_msgSend_defaultStoresDirectory(void *a1, const char *a2, ...)
{
  return _[a1 defaultStoresDirectory];
}

id objc_msgSend_defaultUseCase(void *a1, const char *a2, ...)
{
  return _[a1 defaultUseCase];
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _[a1 defaultWorkspace];
}

id objc_msgSend_deferXpcActivityIfNecessary_(void *a1, const char *a2, ...)
{
  return [a1 deferXpcActivityIfNecessary:];
}

id objc_msgSend_degreeCelsiusUnit(void *a1, const char *a2, ...)
{
  return _[a1 degreeCelsiusUnit];
}

id objc_msgSend_deinitRangingHawkeyeTask(void *a1, const char *a2, ...)
{
  return _[a1 deinitRangingHawkeyeTask];
}

id objc_msgSend_deinitRangingNonOwnerTask(void *a1, const char *a2, ...)
{
  return _[a1 deinitRangingNonOwnerTask];
}

id objc_msgSend_deinitRangingOnTag_forClient_(void *a1, const char *a2, ...)
{
  return [a1 deinitRangingOnTag:forClient:];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_delegateQueue(void *a1, const char *a2, ...)
{
  return _[a1 delegateQueue];
}

id objc_msgSend_deleteAllRecords(void *a1, const char *a2, ...)
{
  return _[a1 deleteAllRecords];
}

id objc_msgSend_deleteCloudKitRecords(void *a1, const char *a2, ...)
{
  return _[a1 deleteCloudKitRecords];
}

id objc_msgSend_deleteCurrentAssetFor_withReply_(void *a1, const char *a2, ...)
{
  return [a1 deleteCurrentAssetFor:withReply:];
}

id objc_msgSend_deleteDefaultStoreFileFromDisk(void *a1, const char *a2, ...)
{
  return _[a1 deleteDefaultStoreFileFromDisk];
}

id objc_msgSend_deleteHealthKitSamples_(void *a1, const char *a2, ...)
{
  return [a1 deleteHealthKitSamples:];
}

id objc_msgSend_deleteInterestZoneWithId_registeredForClientKey_withReply_(void *a1, const char *a2, ...)
{
  return [a1 deleteInterestZoneWithId:registeredForClientKey:withReply:];
}

id objc_msgSend_deleteLedgerFile(void *a1, const char *a2, ...)
{
  return _[a1 deleteLedgerFile];
}

id objc_msgSend_deleteLocalVO2MaxData(void *a1, const char *a2, ...)
{
  return _[a1 deleteLocalVO2MaxData];
}

id objc_msgSend_deleteObject_withSyncSessionReason_(void *a1, const char *a2, ...)
{
  return [a1 deleteObject:withSyncSessionReason:];
}

id objc_msgSend_deleteObjectsOfType_predicate_withCompletion_(void *a1, const char *a2, ...)
{
  return [a1 deleteObjectsOfType:predicate:withCompletion:];
}

id objc_msgSend_deleteRecordByMac_(void *a1, const char *a2, ...)
{
  return [a1 deleteRecordByMac:];
}

id objc_msgSend_deleteRecordByMac_sync_(void *a1, const char *a2, ...)
{
  return [a1 deleteRecordByMac:sync:];
}

id objc_msgSend_deleteRecordByMacString_(void *a1, const char *a2, ...)
{
  return [a1 deleteRecordByMacString:];
}

id objc_msgSend_deleteRecordsOlderThan_(void *a1, const char *a2, ...)
{
  return [a1 deleteRecordsOlderThan:];
}

id objc_msgSend_deleteRecordsWithEntityName_byAndPredicates_(void *a1, const char *a2, ...)
{
  return [a1 deleteRecordsWithEntityName:x0, x1];
}

id objc_msgSend_deleteServiceForClient_withServiceIdentifier_withConnectionToken_forUser_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "deleteServiceForClient:withServiceIdentifier:withConnectionToken:forUser:");
}

id objc_msgSend_deleteSessionsFromHealthKit_withRetry_(void *a1, const char *a2, ...)
{
  return [a1 deleteSessionsFromHealthKit:withRetry:];
}

id objc_msgSend_deleteStoreFile_(void *a1, const char *a2, ...)
{
  return [a1 deleteStoreFile:];
}

id objc_msgSend_deleteSyncEngineMetadata(void *a1, const char *a2, ...)
{
  return _[a1 deleteSyncEngineMetadata];
}

id objc_msgSend_deleteZone_(void *a1, const char *a2, ...)
{
  return [a1 deleteZone:];
}

id objc_msgSend_deletedRecordIDs(void *a1, const char *a2, ...)
{
  return _[a1 deletedRecordIDs];
}

id objc_msgSend_deletedZoneIDs(void *a1, const char *a2, ...)
{
  return _[a1 deletedZoneIDs];
}

id objc_msgSend_deletions(void *a1, const char *a2, ...)
{
  return _[a1 deletions];
}

id objc_msgSend_deliverAndReleaseNotification_withFlags_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "deliverAndReleaseNotification:withFlags:");
}

id objc_msgSend_deliverVisit_toClient_(void *a1, const char *a2, ...)
{
  return [a1 deliverVisit:toClient:];
}

id objc_msgSend_deltaActiveTime(void *a1, const char *a2, ...)
{
  return _[a1 deltaActiveTime];
}

id objc_msgSend_deltaDistance(void *a1, const char *a2, ...)
{
  return _[a1 deltaDistance];
}

id objc_msgSend_deltaDistanceAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 deltaDistanceAccuracy];
}

id objc_msgSend_deltaElevation(void *a1, const char *a2, ...)
{
  return _[a1 deltaElevation];
}

id objc_msgSend_deltaPositionX(void *a1, const char *a2, ...)
{
  return _[a1 deltaPositionX];
}

id objc_msgSend_deltaPositionY(void *a1, const char *a2, ...)
{
  return _[a1 deltaPositionY];
}

id objc_msgSend_deltaPositionZ(void *a1, const char *a2, ...)
{
  return _[a1 deltaPositionZ];
}

id objc_msgSend_deltaPosition_m(void *a1, const char *a2, ...)
{
  return [a1 deltaPosition_m];
}

id objc_msgSend_deltaSteps(void *a1, const char *a2, ...)
{
  return _[a1 deltaSteps];
}

id objc_msgSend_deltaSyncDidComplete_(void *a1, const char *a2, ...)
{
  return [a1 deltaSyncDidComplete:];
}

id objc_msgSend_deltaSyncObjectsInCompanionQueue(void *a1, const char *a2, ...)
{
  return _[a1 deltaSyncObjectsInCompanionQueue];
}

id objc_msgSend_deltaSyncObjectsInGizmoQueue(void *a1, const char *a2, ...)
{
  return _[a1 deltaSyncObjectsInGizmoQueue];
}

id objc_msgSend_deltaVelocityX(void *a1, const char *a2, ...)
{
  return _[a1 deltaVelocityX];
}

id objc_msgSend_deltaVelocityY(void *a1, const char *a2, ...)
{
  return _[a1 deltaVelocityY];
}

id objc_msgSend_deltaVelocityZ(void *a1, const char *a2, ...)
{
  return _[a1 deltaVelocityZ];
}

id objc_msgSend_demoDepthUpdate_bounce(void *a1, const char *a2, ...)
{
  return [a1 demoDepthUpdate_bounce];
}

id objc_msgSend_departureDate(void *a1, const char *a2, ...)
{
  return _[a1 departureDate];
}

id objc_msgSend_depth(void *a1, const char *a2, ...)
{
  return _[a1 depth];
}

id objc_msgSend_deregisterForVisionNotifications_(void *a1, const char *a2, ...)
{
  return [a1 deregisterForVisionNotifications:];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_descriptionDictionary(void *a1, const char *a2, ...)
{
  return _[a1 descriptionDictionary];
}

id objc_msgSend_descriptor(void *a1, const char *a2, ...)
{
  return _[a1 descriptor];
}

id objc_msgSend_descriptorDimension(void *a1, const char *a2, ...)
{
  return _[a1 descriptorDimension];
}

id objc_msgSend_descriptorWithSubscriptionContext_(void *a1, const char *a2, ...)
{
  return [a1 descriptorWithSubscriptionContext:];
}

id objc_msgSend_deserializeMeta_fromData_(void *a1, const char *a2, ...)
{
  return [a1 deserializeMeta:fromData:];
}

id objc_msgSend_desiredAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 desiredAccuracy];
}

id objc_msgSend_desiredAggressiveDiscoveryScanParameters_(void *a1, const char *a2, ...)
{
  return [a1 desiredAggressiveDiscoveryScanParameters:];
}

id objc_msgSend_desiredBTFindingDiscoveryScanParameters_(void *a1, const char *a2, ...)
{
  return [a1 desiredBTFindingDiscoveryScanParameters:];
}

id objc_msgSend_desiredCoexFriendlyAggressiveDiscoveryScanParameters_(void *a1, const char *a2, ...)
{
  return [a1 desiredCoexFriendlyAggressiveDiscoveryScanParameters:];
}

id objc_msgSend_desiredDefaultScanParameters_(void *a1, const char *a2, ...)
{
  return [a1 desiredDefaultScanParameters:];
}

id objc_msgSend_desiredHawkeyeLowEnergyScanParameters_(void *a1, const char *a2, ...)
{
  return [a1 desiredHawkeyeLowEnergyScanParameters:];
}

id objc_msgSend_desiredKeyRollDate(void *a1, const char *a2, ...)
{
  return _[a1 desiredKeyRollDate];
}

id objc_msgSend_desiredLatency(void *a1, const char *a2, ...)
{
  return _[a1 desiredLatency];
}

id objc_msgSend_desiredWatchAdvertisementBufferScanParameters_(void *a1, const char *a2, ...)
{
  return [a1 desiredWatchAdvertisementBufferScanParameters:];
}

id objc_msgSend_destination(void *a1, const char *a2, ...)
{
  return _[a1 destination];
}

id objc_msgSend_destinationDevice(void *a1, const char *a2, ...)
{
  return _[a1 destinationDevice];
}

id objc_msgSend_destinationName(void *a1, const char *a2, ...)
{
  return _[a1 destinationName];
}

id objc_msgSend_detailsBitmask(void *a1, const char *a2, ...)
{
  return _[a1 detailsBitmask];
}

id objc_msgSend_detectionDate(void *a1, const char *a2, ...)
{
  return _[a1 detectionDate];
}

id objc_msgSend_detectionMetrics(void *a1, const char *a2, ...)
{
  return _[a1 detectionMetrics];
}

id objc_msgSend_detectionSummary(void *a1, const char *a2, ...)
{
  return _[a1 detectionSummary];
}

id objc_msgSend_detectionType(void *a1, const char *a2, ...)
{
  return _[a1 detectionType];
}

id objc_msgSend_determineCandidateLatency_forceCandidateLatency_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "determineCandidateLatency:forceCandidateLatency:");
}

id objc_msgSend_determineStateWithContext_(void *a1, const char *a2, ...)
{
  return [a1 determineStateWithContext:];
}

id objc_msgSend_developerType(void *a1, const char *a2, ...)
{
  return _[a1 developerType];
}

id objc_msgSend_device(void *a1, const char *a2, ...)
{
  return _[a1 device];
}

id objc_msgSend_device_checkForEchoOfOpcode_fromAck_(void *a1, const char *a2, ...)
{
  return [a1 device:checkForEchoOfOpcode:fromAck:];
}

id objc_msgSend_device_didAcknowledgeCommandForTask_(void *a1, const char *a2, ...)
{
  return [a1 device:didAcknowledgeCommandForTask:];
}

id objc_msgSend_device_didCompleteTask_withCompletionCommand_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "device:didCompleteTask:withCompletionCommand:");
}

id objc_msgSend_device_didFailToCompleteTask_withError_andDisconnect_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "device:didFailToCompleteTask:withError:andDisconnect:");
}

id objc_msgSend_device_didPrepareForRangingWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "device:didPrepareForRangingWithError:");
}

id objc_msgSend_device_didReceiveGroupRelationStatus_andMainteanceStatus_(void *a1, const char *a2, ...)
{
  return [a1 device:didReceiveGroupRelationStatus:andMainteanceStatus:];
}

id objc_msgSend_device_didReceiveInvalidDataWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "device:didReceiveInvalidDataWithError:");
}

id objc_msgSend_device_didReceiveKeyRollIndex_(void *a1, const char *a2, ...)
{
  return [a1 device:didReceiveKeyRollIndex:];
}

id objc_msgSend_device_didReceiveRangingResponse_withOpcode_(void *a1, const char *a2, ...)
{
  return [a1 device:didReceiveRangingResponse:withOpcode:];
}

id objc_msgSend_device_didUpdateActivePeripheral_withError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "device:didUpdateActivePeripheral:withError:");
}

id objc_msgSend_deviceBackedWithBeacon_(void *a1, const char *a2, ...)
{
  return [a1 deviceBackedWithBeacon:x0];
}

id objc_msgSend_deviceCapabilities(void *a1, const char *a2, ...)
{
  return _[a1 deviceCapabilities];
}

id objc_msgSend_deviceFlags(void *a1, const char *a2, ...)
{
  return _[a1 deviceFlags];
}

id objc_msgSend_deviceForNRDevice_fromIDSDevices_(void *a1, const char *a2, ...)
{
  return [a1 deviceForNRDevice:fromIDSDevices:];
}

id objc_msgSend_deviceId(void *a1, const char *a2, ...)
{
  return _[a1 deviceId];
}

id objc_msgSend_deviceIdentifer(void *a1, const char *a2, ...)
{
  return _[a1 deviceIdentifer];
}

id objc_msgSend_deviceJourneyCount(void *a1, const char *a2, ...)
{
  return _[a1 deviceJourneyCount];
}

id objc_msgSend_deviceManagerContext(void *a1, const char *a2, ...)
{
  return _[a1 deviceManagerContext];
}

id objc_msgSend_deviceNearbyHandler(void *a1, const char *a2, ...)
{
  return _[a1 deviceNearbyHandler];
}

id objc_msgSend_deviceObservationDelegate(void *a1, const char *a2, ...)
{
  return _[a1 deviceObservationDelegate];
}

id objc_msgSend_deviceStateToString_(void *a1, const char *a2, ...)
{
  return [a1 deviceStateToString:];
}

id objc_msgSend_deviceType(void *a1, const char *a2, ...)
{
  return _[a1 deviceType];
}

id objc_msgSend_deviceTypeName(void *a1, const char *a2, ...)
{
  return _[a1 deviceTypeName];
}

id objc_msgSend_deviceTypeToString_(void *a1, const char *a2, ...)
{
  return [a1 deviceTypeToString:];
}

id objc_msgSend_deviceTypes(void *a1, const char *a2, ...)
{
  return _[a1 deviceTypes];
}

id objc_msgSend_deviceUUID(void *a1, const char *a2, ...)
{
  return _[a1 deviceUUID];
}

id objc_msgSend_deviceUndergoingFirmwareUpdate_(void *a1, const char *a2, ...)
{
  return [a1 deviceUndergoingFirmwareUpdate:];
}

id objc_msgSend_deviceWithActivePeripheral_(void *a1, const char *a2, ...)
{
  return [a1 deviceWithActivePeripheral:];
}

id objc_msgSend_deviceWithEffectiveID_(void *a1, const char *a2, ...)
{
  return [a1 deviceWithEffectiveID:];
}

id objc_msgSend_deviceWithPossiblePeripheral_(void *a1, const char *a2, ...)
{
  return [a1 deviceWithPossiblePeripheral:];
}

id objc_msgSend_deviceWithUUID_(void *a1, const char *a2, ...)
{
  return [a1 deviceWithUUID:];
}

id objc_msgSend_deviceWithUUID_beaconType_isPosh_(void *a1, const char *a2, ...)
{
  return [a1 deviceWithUUID:x0 beaconType:x1 isPosh:x2];
}

id objc_msgSend_deviceWithUUID_withCompletion_(void *a1, const char *a2, ...)
{
  return [a1 deviceWithUUID:withCompletion:];
}

id objc_msgSend_devices(void *a1, const char *a2, ...)
{
  return _[a1 devices];
}

id objc_msgSend_diagnosticMask(void *a1, const char *a2, ...)
{
  return _[a1 diagnosticMask];
}

id objc_msgSend_diagnosticMaskIfMonitoringIsNonFunctional(void *a1, const char *a2, ...)
{
  return _[a1 diagnosticMaskIfMonitoringIsNonFunctional];
}

id objc_msgSend_diagnosticMaskIfNonFunctional(void *a1, const char *a2, ...)
{
  return _[a1 diagnosticMaskIfNonFunctional];
}

id objc_msgSend_diagnosticReport(void *a1, const char *a2, ...)
{
  return _[a1 diagnosticReport];
}

id objc_msgSend_dictAddIntAsArray_ofProp_withInt_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "dictAddIntAsArray:ofProp:withInt:");
}

id objc_msgSend_dictAddStringAsArray_ofProp_withStr_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "dictAddStringAsArray:ofProp:withStr:");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryExistsAtKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryExistsAtKeyPath:];
}

id objc_msgSend_dictionaryForKey_atKeyPath_defaultValue_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryForKey:x0 atKeyPath:x1 defaultValue:x2];
}

id objc_msgSend_dictionaryForKey_defaultValue_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryForKey:defaultValue:];
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 dictionaryRepresentation];
}

id objc_msgSend_dictionaryToSecItemFormat_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryToSecItemFormat:];
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithCapacity:];
}

id objc_msgSend_dictionaryWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithContentsOfFile:];
}

id objc_msgSend_dictionaryWithContentsOfURL_error_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithContentsOfURL:error];
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObject_forKey_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithObject:forKey:];
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithObjects:forKeys:count:];
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithObjectsAndKeys:];
}

id objc_msgSend_didAbortFirmwareUpdate(void *a1, const char *a2, ...)
{
  return _[a1 didAbortFirmwareUpdate];
}

id objc_msgSend_didCauseWake(void *a1, const char *a2, ...)
{
  return _[a1 didCauseWake];
}

id objc_msgSend_didChangeConnectionStateForDevice_fromState_toState_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didChangeConnectionStateForDevice:fromState:toState:");
}

id objc_msgSend_didCompleteAggressiveAdvertisingOnDevice_withError_(void *a1, const char *a2, ...)
{
  return [a1 didCompleteAggressiveAdvertisingOnDevice:x0 withError:x1];
}

id objc_msgSend_didCompleteFirmwareUpdate_(void *a1, const char *a2, ...)
{
  return [a1 didCompleteFirmwareUpdate:];
}

id objc_msgSend_didCompleteHawkeyeTaskWithOpcode_fromDevice_withError_(void *a1, const char *a2, ...)
{
  return [a1 didCompleteHawkeyeTaskWithOpcode:fromDevice:withError:];
}

id objc_msgSend_didCompletePlayingSoundOnTag_withError_(void *a1, const char *a2, ...)
{
  return [a1 didCompletePlayingSoundOnTag:withError:];
}

id objc_msgSend_didCompletePlayingUnauthorizedSoundOnTag_withError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didCompletePlayingUnauthorizedSoundOnTag:withError:");
}

id objc_msgSend_didCompleteRangingOnTag_withStatus_endReason_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didCompleteRangingOnTag:withStatus:endReason:error:");
}

id objc_msgSend_didConfigureRangingOnTag_withStatus_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didConfigureRangingOnTag:withStatus:error:");
}

id objc_msgSend_didConnectToTag_withMacAddress_withError_(void *a1, const char *a2, ...)
{
  return [a1 didConnectToTag:withMacAddress:withError:];
}

id objc_msgSend_didDeinitRangingOnTag_withStatus_error_(void *a1, const char *a2, ...)
{
  return [a1 didDeinitRangingOnTag:withStatus:error:];
}

id objc_msgSend_didDisconnectFromTag_withError_(void *a1, const char *a2, ...)
{
  return [a1 didDisconnectFromTag:withError:];
}

id objc_msgSend_didDumpLogs_ofType_fromTag_withError_(void *a1, const char *a2, ...)
{
  return [a1 didDumpLogs:x0 ofType:x1 fromTag:x2 withError:x3];
}

id objc_msgSend_didExitFence_(void *a1, const char *a2, ...)
{
  return [a1 didExitFence:];
}

id objc_msgSend_didExitGeoFence(void *a1, const char *a2, ...)
{
  return _[a1 didExitGeoFence];
}

id objc_msgSend_didFailFirmwareUpdateForDevice_withError_(void *a1, const char *a2, ...)
{
  return [a1 didFailFirmwareUpdateForDevice:withError:];
}

id objc_msgSend_didFailRangingEventCounterActionForTag_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFailRangingEventCounterActionForTag:error:");
}

id objc_msgSend_didFailToConnectDevice_withError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFailToConnectDevice:withError:");
}

id objc_msgSend_didFailWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFailWithError:")];
}

id objc_msgSend_didFetchAISAccessoryCapabilitiesFromDevice_accessoryCapabilities_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFetchAISAccessoryCapabilitiesFromDevice:accessoryCapabilities:error:")];
}

id objc_msgSend_didFetchAISAccessoryCategoryFromDevice_accessoryCategory_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFetchAISAccessoryCategoryFromDevice:accessoryCategory:error:");
}

id objc_msgSend_didFetchAISBatteryLevelFromDevice_batteryLevel_error_(void *a1, const char *a2, ...)
{
  return [a1 didFetchAISBatteryLevelFromDevice:batteryLevel:error:];
}

id objc_msgSend_didFetchAISBatteryTypeFromDevice_batteryType_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFetchAISBatteryTypeFromDevice:batteryType:error:");
}

id objc_msgSend_didFetchAISFirmwareVersionFromDevice_firmwareVersion_error_(void *a1, const char *a2, ...)
{
  return [a1 didFetchAISFirmwareVersionFromDevice:firmwareVersion:error:];
}

id objc_msgSend_didFetchAISManufacturerNameFromDevice_manufacturerName_error_(void *a1, const char *a2, ...)
{
  return [a1 didFetchAISManufacturerNameFromDevice:manufacturerName:error:];
}

id objc_msgSend_didFetchAISModelNameFromDevice_modelName_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFetchAISModelNameFromDevice:modelName:error:");
}

id objc_msgSend_didFetchAISNetworkIDFromDevice_networkID_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFetchAISNetworkIDFromDevice:networkID:error:")];
}

id objc_msgSend_didFetchAISProductDataFromDevice_productData_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFetchAISProductDataFromDevice:productData:error:");
}

id objc_msgSend_didFetchAISProtocolImplementationFromDevice_protocolImplementation_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFetchAISProtocolImplementationFromDevice:protocolImplementation:error:");
}

id objc_msgSend_didFetchAISSerialNumberFromDevice_serialNumber_error_(void *a1, const char *a2, ...)
{
  return [a1 didFetchAISSerialNumberFromDevice:serialNumber:error:];
}

id objc_msgSend_didFetchAccelerometerMode_onTag_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFetchAccelerometerMode:onTag:error:");
}

id objc_msgSend_didFetchAccelerometerOrientationModeConfiguration_onTag_error_(void *a1, const char *a2, ...)
{
  return [a1 didFetchAccelerometerOrientationModeConfiguration:onTag:error:];
}

id objc_msgSend_didFetchAccelerometerSlopeModeConfiguration_onTag_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFetchAccelerometerSlopeModeConfiguration:onTag:error:")];
}

id objc_msgSend_didFetchAllDurians_(void *a1, const char *a2, ...)
{
  return [a1 didFetchAllDurians:];
}

id objc_msgSend_didFetchBatteryStatus_fromTag_withError_(void *a1, const char *a2, ...)
{
  return [a1 didFetchBatteryStatus:x0 fromTag:x1 withError:x2];
}

id objc_msgSend_didFetchConnectionMaterial_criteria_forDevice_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFetchConnectionMaterial:criteria:forDevice:error:");
}

id objc_msgSend_didFetchFirmwareVersion_fromTag_withError_(void *a1, const char *a2, ...)
{
  return [a1 didFetchFirmwareVersion:x0 fromTag:x1 withError:x2];
}

id objc_msgSend_didFetchHawkeyeAISAccessoryCapabilitiesFromDevice_accessoryCapabilities_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFetchHawkeyeAISAccessoryCapabilitiesFromDevice:accessoryCapabilities:error:");
}

id objc_msgSend_didFetchHawkeyeAISAccessoryCategoryFromDevice_accessoryCategory_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFetchHawkeyeAISAccessoryCategoryFromDevice:accessoryCategory:error:");
}

id objc_msgSend_didFetchHawkeyeAISBatteryTypeFromDevice_batteryType_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFetchHawkeyeAISBatteryTypeFromDevice:batteryType:error:");
}

id objc_msgSend_didFetchHawkeyeAISFindMyVersionFromDevice_findMyVersion_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFetchHawkeyeAISFindMyVersionFromDevice:findMyVersion:error:")];
}

id objc_msgSend_didFetchHawkeyeAISManufacturerNameFromDevice_manufacturerName_error_(void *a1, const char *a2, ...)
{
  return [a1 didFetchHawkeyeAISManufacturerNameFromDevice:x0 manufacturerName:x1 error:x2];
}

id objc_msgSend_didFetchHawkeyeAISModelColorCodeFromDevice_modelColorCode_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFetchHawkeyeAISModelColorCodeFromDevice:modelColorCode:error:");
}

id objc_msgSend_didFetchHawkeyeAISModelNameFromDevice_modelName_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFetchHawkeyeAISModelNameFromDevice:modelName:error:");
}

id objc_msgSend_didFetchHawkeyeAISProductDataFromDevice_productData_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFetchHawkeyeAISProductDataFromDevice:productData:error:");
}

id objc_msgSend_didFetchHawkeyeCurrentPrimaryKeyFromDevice_currentPrimaryKey_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFetchHawkeyeCurrentPrimaryKeyFromDevice:currentPrimaryKey:error:");
}

id objc_msgSend_didFetchHawkeyeSerialNumberFromDevice_serialNumber_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFetchHawkeyeSerialNumberFromDevice:serialNumber:error:");
}

id objc_msgSend_didFetchHawkeyeiCloudIdentifierFromDevice_iCloudIdentifier_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFetchHawkeyeiCloudIdentifierFromDevice:iCloudIdentifier:error:")];
}

id objc_msgSend_didFetchRecordZoneChangesEvent(void *a1, const char *a2, ...)
{
  return _[a1 didFetchRecordZoneChangesEvent];
}

id objc_msgSend_didFetchSignficantLocationsStatus_forClient_(void *a1, const char *a2, ...)
{
  return [a1 didFetchSignficantLocationsStatus:forClient:];
}

id objc_msgSend_didFetchStatusOfUTEnablementRequirementsWithStatus_(void *a1, const char *a2, ...)
{
  return [a1 didFetchStatusOfUTEnablementRequirementsWithStatus:];
}

id objc_msgSend_didFetchTxPower_fromDevice_withError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFetchTxPower:fromDevice:withError:");
}

id objc_msgSend_didFetchUnknownBeacons_(void *a1, const char *a2, ...)
{
  return [a1 didFetchUnknownBeacons:];
}

id objc_msgSend_didFetchUserStats_fromTag_withError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFetchUserStats:fromTag:withError:");
}

id objc_msgSend_didFetchUserStats_Deprecated_fromTag_withError_(void *a1, const char *a2, ...)
{
  return [a1 didFetchUserStats_Deprecated:x0 fromTag:x1 withError:x2];
}

id objc_msgSend_didFetchWhetherLocalFirmwareAssetIsInUseForProductGroup_andProductNumber_withResult_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didFetchWhetherLocalFirmwareAssetIsInUseForProductGroup:andProductNumber:withResult:")
}

id objc_msgSend_didGetMultiStatus_forTag_withError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didGetMultiStatus:forTag:withError:");
}

id objc_msgSend_didGetPersonalizationInformation_(void *a1, const char *a2, ...)
{
  return [a1 didGetPersonalizationInformation:];
}

id objc_msgSend_didInitRangingOnTag_withStatus_error_(void *a1, const char *a2, ...)
{
  return [a1 didInitRangingOnTag:withStatus:error:];
}

id objc_msgSend_didObserveScanForDevice_(void *a1, const char *a2, ...)
{
  return [a1 didObserveScanForDevice:];
}

id objc_msgSend_didObserveUnauthorizedTrackingWithCompletion_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didObserveUnauthorizedTrackingWithCompletion:completion:")
}

id objc_msgSend_didPublishRecording_settings_publisher_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didPublishRecording:settings:publisher:");
}

id objc_msgSend_didReceiveAdvertisement_(void *a1, const char *a2, ...)
{
  return [a1 didReceiveAdvertisement:];
}

id objc_msgSend_didReceiveBeaconDifference_(void *a1, const char *a2, ...)
{
  return [a1 didReceiveBeaconDifference:];
}

id objc_msgSend_didReceiveData_(void *a1, const char *a2, ...)
{
  return [a1 didReceiveData:];
}

id objc_msgSend_didReceiveGroupRelationStatus_maintenanceStatus_onTag_withError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didReceiveGroupRelationStatus:maintenanceStatus:onTag:withError:");
}

id objc_msgSend_didReceiveHawkeyeData_withCharacteristic_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didReceiveHawkeyeData:withCharacteristic:error:");
}

id objc_msgSend_didReceiveHawkeyeDataFragment_withOpcode_fromDevice_error_(void *a1, const char *a2, ...)
{
  return [a1 didReceiveHawkeyeDataFragment:x0 withOpcode:x1 fromDevice:x2 error:x3];
}

id objc_msgSend_didReceiveKeyRollIndex_onTag_(void *a1, const char *a2, ...)
{
  return [a1 didReceiveKeyRollIndex:onTag:];
}

id objc_msgSend_didReceivePoshData_withCharacteristic_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didReceivePoshData:withCharacteristic:error:");
}

id objc_msgSend_didReceiveUarpMessage_fromDevice_(void *a1, const char *a2, ...)
{
  return [a1 didReceiveUarpMessage:fromDevice:];
}

id objc_msgSend_didRetrievePersonalizationInfo_forDevice_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didRetrievePersonalizationInfo:forDevice:error:");
}

id objc_msgSend_didRetrievePersonalizationInformation_forTag_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didRetrievePersonalizationInformation:forTag:error:");
}

id objc_msgSend_didRollWildKeyOnTag_withError_(void *a1, const char *a2, ...)
{
  return [a1 didRollWildKeyOnTag:withError:];
}

id objc_msgSend_didSendChangesEvent(void *a1, const char *a2, ...)
{
  return _[a1 didSendChangesEvent];
}

id objc_msgSend_didSetAccelerometerOrientationModeConfigurationOnTag_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didSetAccelerometerOrientationModeConfigurationOnTag:error:");
}

id objc_msgSend_didSetAccelerometerSlopeModeConfigurationOnTag_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didSetAccelerometerSlopeModeConfigurationOnTag:error:")
}

id objc_msgSend_didSetBatteryStatusOnTag_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didSetBatteryStatusOnTag:error:");
}

id objc_msgSend_didSetHawkeyeUTMotionConfigForDevice_withError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didSetHawkeyeUTMotionConfigForDevice:withError:");
}

id objc_msgSend_didSetNearOwnerTimeoutOnTag_withError_(void *a1, const char *a2, ...)
{
  return [a1 didSetNearOwnerTimeoutOnTag:withError:];
}

id objc_msgSend_didSetObfuscatedIdentifierOnTag_withError_(void *a1, const char *a2, ...)
{
  return [a1 didSetObfuscatedIdentifierOnTag:withError:];
}

id objc_msgSend_didSetTagTypeOnTag_withError_(void *a1, const char *a2, ...)
{
  return [a1 didSetTagTypeOnTag:withError:];
}

id objc_msgSend_didSetUnauthorizedPlaySoundRateLimitFromTag_error_(void *a1, const char *a2, ...)
{
  return [a1 didSetUnauthorizedPlaySoundRateLimitFromTag:error:];
}

id objc_msgSend_didSetWildModeConfigruationOnTag_withError_(void *a1, const char *a2, ...)
{
  return [a1 didSetWildModeConfigruationOnTag:withError:];
}

id objc_msgSend_didStartAggressiveAdvertisingOnDevice_withError_(void *a1, const char *a2, ...)
{
  return [a1 didStartAggressiveAdvertisingOnDevice:x0 withError:x1];
}

id objc_msgSend_didStartPlayingSoundOnTag_withError_(void *a1, const char *a2, ...)
{
  return [a1 didStartPlayingSoundOnTag:withError:];
}

id objc_msgSend_didStartPlayingUnauthorizedSoundOnTag_withError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didStartPlayingUnauthorizedSoundOnTag:withError:");
}

id objc_msgSend_didStartRangingOnTag_error_(void *a1, const char *a2, ...)
{
  return [a1 didStartRangingOnTag:error:];
}

id objc_msgSend_didStartUnauthorizedAggressiveAdvertisingOnDevice_withError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didStartUnauthorizedAggressiveAdvertisingOnDevice:withError:");
}

id objc_msgSend_didStopAggressiveAdvertisingOnDevice_withError_(void *a1, const char *a2, ...)
{
  return [a1 didStopAggressiveAdvertisingOnDevice:x0 withError:x1];
}

id objc_msgSend_didStopPlayingSoundOnTag_withError_(void *a1, const char *a2, ...)
{
  return [a1 didStopPlayingSoundOnTag:withError:];
}

id objc_msgSend_didStopPlayingUnauthorizedSoundOnTag_withError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didStopPlayingUnauthorizedSoundOnTag:withError:");
}

id objc_msgSend_didSuccessfullyPlayUnauthorizedSound_address_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didSuccessfullyPlayUnauthorizedSound:address:");
}

id objc_msgSend_didTimeoutGeoFence(void *a1, const char *a2, ...)
{
  return _[a1 didTimeoutGeoFence];
}

id objc_msgSend_didUnpairFromTag_withError_(void *a1, const char *a2, ...)
{
  return [a1 didUnpairFromTag:withError:];
}

id objc_msgSend_didUnsuccessfullyPlayUnauthorizedSound_address_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didUnsuccessfullyPlayUnauthorizedSound:address:");
}

id objc_msgSend_didUpdateConnectionInterval_latency_supervisionTimeout_(void *a1, const char *a2, ...)
{
  return [a1 didUpdateConnectionInterval:latency:supervisionTimeout:];
}

id objc_msgSend_didUpdateDataBuffer_(void *a1, const char *a2, ...)
{
  return [a1 didUpdateDataBuffer:];
}

id objc_msgSend_didUpdateFireTime(void *a1, const char *a2, ...)
{
  return _[a1 didUpdateFireTime];
}

id objc_msgSend_didUpdateFirmwareForDevice_error_(void *a1, const char *a2, ...)
{
  return [a1 didUpdateFirmwareForDevice:error:];
}

id objc_msgSend_didUpdateFirmwareForTag_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didUpdateFirmwareForTag:error:")];
}

id objc_msgSend_didUpdateInertialData_(void *a1, const char *a2, ...)
{
  return [a1 didUpdateInertialData:];
}

id objc_msgSend_didUpdateLocations_(void *a1, const char *a2, ...)
{
  return [a1 didUpdateLocations:];
}

id objc_msgSend_didUpdateLocations_withReply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didUpdateLocations:withReply:");
}

id objc_msgSend_didUpdateMTUForDevice(void *a1, const char *a2, ...)
{
  return _[a1 didUpdateMTUForDevice];
}

id objc_msgSend_didUpdateSource_withData_(void *a1, const char *a2, ...)
{
  return [a1 didUpdateSource:withData:];
}

id objc_msgSend_didUpdateWeather_(void *a1, const char *a2, ...)
{
  return [a1 didUpdateWeather:];
}

id objc_msgSend_didUseDefaultFirmwareAssetRequestForProductGroup_andProductNumber_withError_(void *a1, const char *a2, ...)
{
  return [a1 didUseDefaultFirmwareAssetRequestForProductGroup:andProductNumber:withError:];
}

id objc_msgSend_didUseLocalFirmwareAssetRequestForProductGroup_andProductNumber_withError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "didUseLocalFirmwareAssetRequestForProductGroup:andProductNumber:withError:");
}

id objc_msgSend_diminishedMode(void *a1, const char *a2, ...)
{
  return _[a1 diminishedMode];
}

id objc_msgSend_dingAllActiveTranscriptSubscriptions(void *a1, const char *a2, ...)
{
  return _[a1 dingAllActiveTranscriptSubscriptions];
}

id objc_msgSend_direction(void *a1, const char *a2, ...)
{
  return _[a1 direction];
}

id objc_msgSend_directory(void *a1, const char *a2, ...)
{
  return _[a1 directory];
}

id objc_msgSend_directoryExists_(void *a1, const char *a2, ...)
{
  return [a1 directoryExists:];
}

id objc_msgSend_dirty(void *a1, const char *a2, ...)
{
  return _[a1 dirty];
}

id objc_msgSend_disable(void *a1, const char *a2, ...)
{
  return _[a1 disable];
}

id objc_msgSend_disableHandoffDictionaryForDeviceId_(void *a1, const char *a2, ...)
{
  return [a1 disableHandoffDictionaryForDeviceId:];
}

id objc_msgSend_disableSource(void *a1, const char *a2, ...)
{
  return _[a1 disableSource];
}

id objc_msgSend_disableSources_forContext_(void *a1, const char *a2, ...)
{
  return [a1 disableSources:forContext:];
}

id objc_msgSend_disabledReasons(void *a1, const char *a2, ...)
{
  return _[a1 disabledReasons];
}

id objc_msgSend_disabledVenues(void *a1, const char *a2, ...)
{
  return _[a1 disabledVenues];
}

id objc_msgSend_disconnect(void *a1, const char *a2, ...)
{
  return _[a1 disconnect];
}

id objc_msgSend_disconnectDevice_(void *a1, const char *a2, ...)
{
  return [a1 disconnectDevice:];
}

id objc_msgSend_disconnectToServiceForClient_withServiceIdentifier_withConnectionToken_forUser_(void *a1, const char *a2, ...)
{
  return [a1 disconnectToServiceForClient:withServiceIdentifier:withConnectionToken:forUser:];
}

id objc_msgSend_disconnectedReason(void *a1, const char *a2, ...)
{
  return _[a1 disconnectedReason];
}

id objc_msgSend_discoverCharacteristics_forService_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "discoverCharacteristics:forService:");
}

id objc_msgSend_discoverHawkeyeService(void *a1, const char *a2, ...)
{
  return _[a1 discoverHawkeyeService];
}

id objc_msgSend_discoverPoshService(void *a1, const char *a2, ...)
{
  return _[a1 discoverPoshService];
}

id objc_msgSend_discoverServices_(void *a1, const char *a2, ...)
{
  return [a1 discoverServices:];
}

id objc_msgSend_discoveryFlags(void *a1, const char *a2, ...)
{
  return _[a1 discoveryFlags];
}

id objc_msgSend_discoveryToken(void *a1, const char *a2, ...)
{
  return _[a1 discoveryToken];
}

id objc_msgSend_dispatchCompleteTokenFetchOnUUID_(void *a1, const char *a2, ...)
{
  return [a1 dispatchCompleteTokenFetchOnUUID:];
}

id objc_msgSend_dispatchConnectionEvaluationOnDevice_withConnectionEvaluationTimeout_(void *a1, const char *a2, ...)
{
  return [a1 dispatchConnectionEvaluationOnDevice:withConnectionEvaluationTimeout:];
}

id objc_msgSend_dispatchEnableBomScanAfterBackoff(void *a1, const char *a2, ...)
{
  return _[a1 dispatchEnableBomScanAfterBackoff];
}

id objc_msgSend_dispatchProactiveMaintenanceOnDevice_maintenanceReason_(void *a1, const char *a2, ...)
{
  return [a1 dispatchProactiveMaintenanceOnDevice:maintenanceReason:];
}

id objc_msgSend_dispatchQueue(void *a1, const char *a2, ...)
{
  return _[a1 dispatchQueue];
}

id objc_msgSend_dispatchRecheckDevicesAfterDiscovery(void *a1, const char *a2, ...)
{
  return _[a1 dispatchRecheckDevicesAfterDiscovery];
}

id objc_msgSend_disputedTerritoryName(void *a1, const char *a2, ...)
{
  return _[a1 disputedTerritoryName];
}

id objc_msgSend_dist(void *a1, const char *a2, ...)
{
  return _[a1 dist];
}

id objc_msgSend_distance(void *a1, const char *a2, ...)
{
  return _[a1 distance];
}

id objc_msgSend_distance_(void *a1, const char *a2, ...)
{
  return [a1 distance:];
}

id objc_msgSend_distanceFromLocation_(void *a1, const char *a2, ...)
{
  return [a1 distanceFromLocation:];
}

id objc_msgSend_distanceFromNMinusOneStateChange(void *a1, const char *a2, ...)
{
  return _[a1 distanceFromNMinusOneStateChange];
}

id objc_msgSend_distanceFromNMinusTwoStateChange(void *a1, const char *a2, ...)
{
  return _[a1 distanceFromNMinusTwoStateChange];
}

id objc_msgSend_distanceGPS(void *a1, const char *a2, ...)
{
  return _[a1 distanceGPS];
}

id objc_msgSend_distanceGps(void *a1, const char *a2, ...)
{
  return _[a1 distanceGps];
}

id objc_msgSend_distanceMeasurementQuality(void *a1, const char *a2, ...)
{
  return _[a1 distanceMeasurementQuality];
}

id objc_msgSend_distanceRawPed(void *a1, const char *a2, ...)
{
  return _[a1 distanceRawPed];
}

id objc_msgSend_distanceToFenceBoundary(void *a1, const char *a2, ...)
{
  return _[a1 distanceToFenceBoundary];
}

id objc_msgSend_distanceToPreviousSeenVisit(void *a1, const char *a2, ...)
{
  return _[a1 distanceToPreviousSeenVisit];
}

id objc_msgSend_distanceToPreviousVisit(void *a1, const char *a2, ...)
{
  return _[a1 distanceToPreviousVisit];
}

id objc_msgSend_distanceUnc_m(void *a1, const char *a2, ...)
{
  return [a1 distanceUnc_m];
}

id objc_msgSend_distance_m(void *a1, const char *a2, ...)
{
  return [a1 distance_m];
}

id objc_msgSend_distantFuture(void *a1, const char *a2, ...)
{
  return _[a1 distantFuture];
}

id objc_msgSend_distantPast(void *a1, const char *a2, ...)
{
  return _[a1 distantPast];
}

id objc_msgSend_doAsync_(void *a1, const char *a2, ...)
{
  return [a1 doAsync:];
}

id objc_msgSend_doAsync_withReply_(void *a1, const char *a2, ...)
{
  return [a1 doAsync:withReply:];
}

id objc_msgSend_doesNotRecognizeSelector_(void *a1, const char *a2, ...)
{
  return [a1 doesNotRecognizeSelector:];
}

id objc_msgSend_doesPeripheral_haveAddress_(void *a1, const char *a2, ...)
{
  return [a1 doesPeripheral:haveAddress:];
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_dominantMotionActivity(void *a1, const char *a2, ...)
{
  return _[a1 dominantMotionActivity];
}

id objc_msgSend_dominantMotionState(void *a1, const char *a2, ...)
{
  return _[a1 dominantMotionState];
}

id objc_msgSend_dominantUserActivity(void *a1, const char *a2, ...)
{
  return _[a1 dominantUserActivity];
}

id objc_msgSend_donateTruthTagLabelForClient_truthLabelUUID_betweenDate_andDate_withReply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "donateTruthTagLabelForClient:truthLabelUUID:betweenDate:andDate:withReply:")];
}

id objc_msgSend_donateTruthTagLabelForClient_truthLabelUUID_recordingTriggerUUID_withReply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "donateTruthTagLabelForClient:truthLabelUUID:recordingTriggerUUID:withReply:");
}

id objc_msgSend_doneSendingPayload(void *a1, const char *a2, ...)
{
  return _[a1 doneSendingPayload];
}

id objc_msgSend_dontcollect_isLocal_(void *a1, const char *a2, ...)
{
  return [a1 dontcollect:isLocal:];
}

id objc_msgSend_doubleForKey_atKeyPath_defaultValue_(void *a1, const char *a2, ...)
{
  return [a1 doubleForKey:x0 atKeyPath:x1 defaultValue:x2];
}

id objc_msgSend_doubleForKey_defaultValue_(void *a1, const char *a2, ...)
{
  return [a1 doubleForKey:x0 defaultValue:x1];
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_doubleValueForUnit_(void *a1, const char *a2, ...)
{
  return [a1 doubleValueForUnit:];
}

id objc_msgSend_downgradedDuringCoexFriendlyAggressiveDiscoveryScan(void *a1, const char *a2, ...)
{
  return _[a1 downgradedDuringCoexFriendlyAggressiveDiscoveryScan];
}

id objc_msgSend_downloadAndDecompressFrom_toDecompressedDestination_withTimeout_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "downloadAndDecompressFrom:toDecompressedDestination:withTimeout:withCompletionHandler:");
}

id objc_msgSend_downloadAvailableFirmwareUpdate_assetID_withUserIntent_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "downloadAvailableFirmwareUpdate:assetID:withUserIntent:");
}

id objc_msgSend_downloadIfNeeded_signalQuality_allowCenterOverCellular_(void *a1, const char *a2, ...)
{
  return [a1 downloadIfNeeded:x0 signalQuality:x1 allowCenterOverCellular:x2];
}

id objc_msgSend_downloadIfNeeded_signalQuality_allowCenterOverCellular_ringsToDownloadOverCellular_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "downloadIfNeeded:signalQuality:allowCenterOverCellular:ringsToDownloadOverCellular:");
}

id objc_msgSend_downloadPayloadSize(void *a1, const char *a2, ...)
{
  return _[a1 downloadPayloadSize];
}

id objc_msgSend_downloadStatus(void *a1, const char *a2, ...)
{
  return _[a1 downloadStatus];
}

id objc_msgSend_downloadTaskWithRequest_(void *a1, const char *a2, ...)
{
  return [a1 downloadTaskWithRequest:];
}

id objc_msgSend_downloadTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 downloadTaskWithRequest:x0 completionHandler:x1];
}

id objc_msgSend_downloadTilesOnXPCFire(void *a1, const char *a2, ...)
{
  return _[a1 downloadTilesOnXPCFire];
}

id objc_msgSend_drain(void *a1, const char *a2, ...)
{
  return _[a1 drain];
}

id objc_msgSend_driftModelConnectionEnabled(void *a1, const char *a2, ...)
{
  return _[a1 driftModelConnectionEnabled];
}

id objc_msgSend_driftModeledCriteria(void *a1, const char *a2, ...)
{
  return _[a1 driftModeledCriteria];
}

id objc_msgSend_dropStreaming(void *a1, const char *a2, ...)
{
  return _[a1 dropStreaming];
}

id objc_msgSend_dualConnTime(void *a1, const char *a2, ...)
{
  return _[a1 dualConnTime];
}

id objc_msgSend_dualLeashedTime(void *a1, const char *a2, ...)
{
  return _[a1 dualLeashedTime];
}

id objc_msgSend_dumpDatabase_onCompletion_(void *a1, const char *a2, ...)
{
  return [a1 dumpDatabase:onCompletion:];
}

id objc_msgSend_dumpLogWithReason_(void *a1, const char *a2, ...)
{
  return [a1 dumpLogWithReason:];
}

id objc_msgSend_dumpNordicCrashesCommand(void *a1, const char *a2, ...)
{
  return _[a1 dumpNordicCrashesCommand];
}

id objc_msgSend_dumpNordicCrashesTask(void *a1, const char *a2, ...)
{
  return _[a1 dumpNordicCrashesTask];
}

id objc_msgSend_dumpNordicLogsCommand(void *a1, const char *a2, ...)
{
  return _[a1 dumpNordicLogsCommand];
}

id objc_msgSend_dumpNordicLogsTask(void *a1, const char *a2, ...)
{
  return _[a1 dumpNordicLogsTask];
}

id objc_msgSend_dumpRoseCrashesCommand(void *a1, const char *a2, ...)
{
  return _[a1 dumpRoseCrashesCommand];
}

id objc_msgSend_dumpRoseCrashesTask(void *a1, const char *a2, ...)
{
  return _[a1 dumpRoseCrashesTask];
}

id objc_msgSend_dumpRoseLogsCommand(void *a1, const char *a2, ...)
{
  return _[a1 dumpRoseLogsCommand];
}

id objc_msgSend_dumpRoseLogsTask(void *a1, const char *a2, ...)
{
  return _[a1 dumpRoseLogsTask];
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return _[a1 duration];
}

id objc_msgSend_durationInSeconds(void *a1, const char *a2, ...)
{
  return _[a1 durationInSeconds];
}

id objc_msgSend_durationOfVisitEntryConsideration(void *a1, const char *a2, ...)
{
  return _[a1 durationOfVisitEntryConsideration];
}

id objc_msgSend_durationOfVisitExitConsideration(void *a1, const char *a2, ...)
{
  return _[a1 durationOfVisitExitConsideration];
}

id objc_msgSend_earlierDate_(void *a1, const char *a2, ...)
{
  return [a1 earlierDate:];
}

id objc_msgSend_eastLng(void *a1, const char *a2, ...)
{
  return _[a1 eastLng];
}

id objc_msgSend_ecef(void *a1, const char *a2, ...)
{
  return _[a1 ecef];
}

id objc_msgSend_ecn0(void *a1, const char *a2, ...)
{
  return _[a1 ecn0];
}

id objc_msgSend_effectiveBoolValueForSetting_(void *a1, const char *a2, ...)
{
  return [a1 effectiveBoolValueForSetting:];
}

id objc_msgSend_effectiveBundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 effectiveBundleIdentifier];
}

id objc_msgSend_effectiveIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 effectiveIdentifier];
}

id objc_msgSend_effectiveRadius(void *a1, const char *a2, ...)
{
  return _[a1 effectiveRadius];
}

id objc_msgSend_effectiveServiceMask(void *a1, const char *a2, ...)
{
  return _[a1 effectiveServiceMask];
}

id objc_msgSend_elevation(void *a1, const char *a2, ...)
{
  return _[a1 elevation];
}

id objc_msgSend_elevationAscended(void *a1, const char *a2, ...)
{
  return _[a1 elevationAscended];
}

id objc_msgSend_elevationDescended(void *a1, const char *a2, ...)
{
  return _[a1 elevationDescended];
}

id objc_msgSend_eligibleForCalorimetry(void *a1, const char *a2, ...)
{
  return _[a1 eligibleForCalorimetry];
}

id objc_msgSend_eligibleForDataCollection(void *a1, const char *a2, ...)
{
  return _[a1 eligibleForDataCollection];
}

id objc_msgSend_eligibleForHealthKit(void *a1, const char *a2, ...)
{
  return _[a1 eligibleForHealthKit];
}

id objc_msgSend_emergency(void *a1, const char *a2, ...)
{
  return _[a1 emergency];
}

id objc_msgSend_emergencyBottleneckState(void *a1, const char *a2, ...)
{
  return _[a1 emergencyBottleneckState];
}

id objc_msgSend_emergencyContacts(void *a1, const char *a2, ...)
{
  return _[a1 emergencyContacts];
}

id objc_msgSend_emergencyContactsModifiedDate(void *a1, const char *a2, ...)
{
  return _[a1 emergencyContactsModifiedDate];
}

id objc_msgSend_emergencyEnablementAssertionActive(void *a1, const char *a2, ...)
{
  return _[a1 emergencyEnablementAssertionActive];
}

id objc_msgSend_emergencySettingsChange_withReason_(void *a1, const char *a2, ...)
{
  return [a1 emergencySettingsChange:withReason:];
}

id objc_msgSend_emergencyStateChange_(void *a1, const char *a2, ...)
{
  return [a1 emergencyStateChange:];
}

id objc_msgSend_enable(void *a1, const char *a2, ...)
{
  return _[a1 enable];
}

id objc_msgSend_enableCollection(void *a1, const char *a2, ...)
{
  return _[a1 enableCollection];
}

id objc_msgSend_enableMiLoAtCurrentLocationWithServiceIdentifier_withRequestIdentifier_connectionToken_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "enableMiLoAtCurrentLocationWithServiceIdentifier:withRequestIdentifier:connectionToken:");
}

id objc_msgSend_enablePersistentConnectionsHawkeyeTask_(void *a1, const char *a2, ...)
{
  return [a1 enablePersistentConnectionsHawkeyeTask:];
}

id objc_msgSend_enableSource(void *a1, const char *a2, ...)
{
  return _[a1 enableSource];
}

id objc_msgSend_enableSources_forContext_(void *a1, const char *a2, ...)
{
  return [a1 enableSources:forContext:];
}

id objc_msgSend_enabled(void *a1, const char *a2, ...)
{
  return _[a1 enabled];
}

id objc_msgSend_encodeBinaryLog_(void *a1, const char *a2, ...)
{
  return [a1 encodeBinaryLog:];
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeBool:forKey:];
}

id objc_msgSend_encodeConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 encodeConfiguration];
}

id objc_msgSend_encodeDouble_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeDouble:x0 forKey:x1];
}

id objc_msgSend_encodeFilteredPressure_(void *a1, const char *a2, ...)
{
  return [a1 encodeFilteredPressure:];
}

id objc_msgSend_encodeFloat_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeFloat:x0 forKey:x1];
}

id objc_msgSend_encodeHeartRate_(void *a1, const char *a2, ...)
{
  return [a1 encodeHeartRate:];
}

id objc_msgSend_encodeInt32_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeInt32:forKey:];
}

id objc_msgSend_encodeInt64_forKey_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "encodeInt64:forKey:");
}

id objc_msgSend_encodeInt_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeInt:forKey:];
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeInteger:forKey:];
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeObject:forKey:];
}

id objc_msgSend_encodePressure_(void *a1, const char *a2, ...)
{
  return [a1 encodePressure:];
}

id objc_msgSend_encodeSystemFieldsWithCoder_(void *a1, const char *a2, ...)
{
  return [a1 encodeSystemFieldsWithCoder:];
}

id objc_msgSend_encodeTransmitPower_(void *a1, const char *a2, ...)
{
  return [a1 encodeTransmitPower:];
}

id objc_msgSend_encodeWithCoder_(void *a1, const char *a2, ...)
{
  return [a1 encodeWithCoder:];
}

id objc_msgSend_encodedBytes(void *a1, const char *a2, ...)
{
  return _[a1 encodedBytes];
}

id objc_msgSend_encodedData(void *a1, const char *a2, ...)
{
  return _[a1 encodedData];
}

id objc_msgSend_encodedSequence(void *a1, const char *a2, ...)
{
  return _[a1 encodedSequence];
}

id objc_msgSend_encryptData_metaData_start_end_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "encryptData:metaData:start:end:");
}

id objc_msgSend_encryptedValues(void *a1, const char *a2, ...)
{
  return _[a1 encryptedValues];
}

id objc_msgSend_encryptedValuesByKey(void *a1, const char *a2, ...)
{
  return _[a1 encryptedValuesByKey];
}

id objc_msgSend_end(void *a1, const char *a2, ...)
{
  return _[a1 end];
}

id objc_msgSend_endDate(void *a1, const char *a2, ...)
{
  return _[a1 endDate];
}

id objc_msgSend_endJunction(void *a1, const char *a2, ...)
{
  return _[a1 endJunction];
}

id objc_msgSend_endPairedSyncSessionWithError_(void *a1, const char *a2, ...)
{
  return [a1 endPairedSyncSessionWithError:];
}

id objc_msgSend_endSession(void *a1, const char *a2, ...)
{
  return _[a1 endSession];
}

id objc_msgSend_endSessionForClient_(void *a1, const char *a2, ...)
{
  return [a1 endSessionForClient:];
}

id objc_msgSend_endSessionForClient_startingAtTime_stoppingAtTime_sequenceNumber_(void *a1, const char *a2, ...)
{
  return [a1 endSessionForClient:startingAtTime:stoppingAtTime:sequenceNumber:];
}

id objc_msgSend_endSessionMetrics_(void *a1, const char *a2, ...)
{
  return [a1 endSessionMetrics:];
}

id objc_msgSend_endTime(void *a1, const char *a2, ...)
{
  return _[a1 endTime];
}

id objc_msgSend_endWorkoutSession_(void *a1, const char *a2, ...)
{
  return [a1 endWorkoutSession:];
}

id objc_msgSend_endowmentNamespaces(void *a1, const char *a2, ...)
{
  return _[a1 endowmentNamespaces];
}

id objc_msgSend_endpointSelector(void *a1, const char *a2, ...)
{
  return _[a1 endpointSelector];
}

id objc_msgSend_endpointWithHostname_port_(void *a1, const char *a2, ...)
{
  return [a1 endpointWithHostname:port:];
}

id objc_msgSend_enhancedLinkQuality(void *a1, const char *a2, ...)
{
  return _[a1 enhancedLinkQuality];
}

id objc_msgSend_enqueueTask_(void *a1, const char *a2, ...)
{
  return [a1 enqueueTask:];
}

id objc_msgSend_ensureMonitoringWithType_(void *a1, const char *a2, ...)
{
  return [a1 ensureMonitoringWithType:];
}

id objc_msgSend_ensureServiceIsRunning_(void *a1, const char *a2, ...)
{
  return [a1 ensureServiceIsRunning:];
}

id objc_msgSend_ensureStop(void *a1, const char *a2, ...)
{
  return _[a1 ensureStop];
}

id objc_msgSend_enterFirmwareUpdateMode(void *a1, const char *a2, ...)
{
  return _[a1 enterFirmwareUpdateMode];
}

id objc_msgSend_entityClass_didChangeArrowState_dueToDeauthorization_(void *a1, const char *a2, ...)
{
  return [a1 entityClass:didChangeArrowState:dueToDeauthorization:];
}

id objc_msgSend_entityForName_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return [a1 entityForName:inManagedObjectContext:];
}

id objc_msgSend_entry(void *a1, const char *a2, ...)
{
  return _[a1 entry];
}

id objc_msgSend_entryDate(void *a1, const char *a2, ...)
{
  return _[a1 entryDate];
}

id objc_msgSend_entryRadius(void *a1, const char *a2, ...)
{
  return _[a1 entryRadius];
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateKeysAndObjectsUsingBlock:];
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateObjectsUsingBlock:];
}

id objc_msgSend_enumerateObjectsWithOptions_usingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateObjectsWithOptions:];
}

id objc_msgSend_enumerateStatisticsFromDate_toDate_withBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "enumerateStatisticsFromDate:toDate:withBlock:");
}

id objc_msgSend_enumerateStoredLocationsWithOptions_usingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateStoredLocationsWithOptions:];
}

id objc_msgSend_enumerateStoredLocationsWithOptions_withReply_(void *a1, const char *a2, ...)
{
  return [a1 enumerateStoredLocationsWithOptions:];
}

id objc_msgSend_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:");
}

id objc_msgSend_eraseAllData(void *a1, const char *a2, ...)
{
  return _[a1 eraseAllData];
}

id objc_msgSend_eraseEverything(void *a1, const char *a2, ...)
{
  return _[a1 eraseEverything];
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _[a1 error];
}

id objc_msgSend_errorBackoffDuration(void *a1, const char *a2, ...)
{
  return _[a1 errorBackoffDuration];
}

id objc_msgSend_errorMergePolicy(void *a1, const char *a2, ...)
{
  return _[a1 errorMergePolicy];
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return [a1 errorWithDomain:code:userInfo:];
}

id objc_msgSend_estimate(void *a1, const char *a2, ...)
{
  return _[a1 estimate];
}

id objc_msgSend_estimatedDueDate(void *a1, const char *a2, ...)
{
  return _[a1 estimatedDueDate];
}

id objc_msgSend_estimatedHRRecoveryParam(void *a1, const char *a2, ...)
{
  return _[a1 estimatedHRRecoveryParam];
}

id objc_msgSend_estimatedHRResponseParam(void *a1, const char *a2, ...)
{
  return _[a1 estimatedHRResponseParam];
}

id objc_msgSend_estimatedVo2Max(void *a1, const char *a2, ...)
{
  return _[a1 estimatedVo2Max];
}

id objc_msgSend_evalScanForceScreenOffOnly(void *a1, const char *a2, ...)
{
  return _[a1 evalScanForceScreenOffOnly];
}

id objc_msgSend_evaluateConnectionStateForDevice_(void *a1, const char *a2, ...)
{
  return [a1 evaluateConnectionStateForDevice:];
}

id objc_msgSend_evaluateDisconnectedDevices(void *a1, const char *a2, ...)
{
  return _[a1 evaluateDisconnectedDevices];
}

id objc_msgSend_evaluateLastLocation(void *a1, const char *a2, ...)
{
  return _[a1 evaluateLastLocation];
}

id objc_msgSend_evaluateMotionAlarmState(void *a1, const char *a2, ...)
{
  return _[a1 evaluateMotionAlarmState];
}

id objc_msgSend_evaluatePossibleFalseExitFromNotification_(void *a1, const char *a2, ...)
{
  return [a1 evaluatePossibleFalseExitFromNotification:];
}

id objc_msgSend_evaluator(void *a1, const char *a2, ...)
{
  return _[a1 evaluator];
}

id objc_msgSend_eventBody(void *a1, const char *a2, ...)
{
  return _[a1 eventBody];
}

id objc_msgSend_eventLatency(void *a1, const char *a2, ...)
{
  return _[a1 eventLatency];
}

id objc_msgSend_eventToString_(void *a1, const char *a2, ...)
{
  return [a1 eventToString:];
}

id objc_msgSend_eventType(void *a1, const char *a2, ...)
{
  return _[a1 eventType];
}

id objc_msgSend_eventTypeNMinusOneStateChange(void *a1, const char *a2, ...)
{
  return _[a1 eventTypeNMinusOneStateChange];
}

id objc_msgSend_eventTypeNMinusTwoStateChange(void *a1, const char *a2, ...)
{
  return _[a1 eventTypeNMinusTwoStateChange];
}

id objc_msgSend_eventnum(void *a1, const char *a2, ...)
{
  return _[a1 eventnum];
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return [a1 exceptionWithName:reason:userInfo:];
}

id objc_msgSend_executable(void *a1, const char *a2, ...)
{
  return _[a1 executable];
}

id objc_msgSend_executableIdentity(void *a1, const char *a2, ...)
{
  return _[a1 executableIdentity];
}

id objc_msgSend_executablePath(void *a1, const char *a2, ...)
{
  return _[a1 executablePath];
}

id objc_msgSend_executableURL(void *a1, const char *a2, ...)
{
  return _[a1 executableURL];
}

id objc_msgSend_executeCardioChangeEstimation_(void *a1, const char *a2, ...)
{
  return [a1 executeCardioChangeEstimation:];
}

id objc_msgSend_executeDailyAggregateFeatureCompute_(void *a1, const char *a2, ...)
{
  return [a1 executeDailyAggregateFeatureCompute:];
}

id objc_msgSend_executeFetchRequest_error_(void *a1, const char *a2, ...)
{
  return [a1 executeFetchRequest:error];
}

id objc_msgSend_executeQuery_(void *a1, const char *a2, ...)
{
  return [a1 executeQuery:];
}

id objc_msgSend_executeRequest_error_(void *a1, const char *a2, ...)
{
  return [a1 executeRequest:error];
}

id objc_msgSend_executeRetrocomputePreprocessing_(void *a1, const char *a2, ...)
{
  return [a1 executeRetrocomputePreprocessing];
}

id objc_msgSend_executeRiskModelFeatureCompute(void *a1, const char *a2, ...)
{
  return _[a1 executeRiskModelFeatureCompute];
}

id objc_msgSend_executeTask_(void *a1, const char *a2, ...)
{
  return [a1 executeTask:];
}

id objc_msgSend_executionDuration(void *a1, const char *a2, ...)
{
  return _[a1 executionDuration];
}

id objc_msgSend_exit(void *a1, const char *a2, ...)
{
  return _[a1 exit];
}

id objc_msgSend_exitDate(void *a1, const char *a2, ...)
{
  return _[a1 exitDate];
}

id objc_msgSend_exitFirmwareUpdateMode(void *a1, const char *a2, ...)
{
  return _[a1 exitFirmwareUpdateMode];
}

id objc_msgSend_exitRadius(void *a1, const char *a2, ...)
{
  return _[a1 exitRadius];
}

id objc_msgSend_exitVisitTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 exitVisitTimestamp];
}

id objc_msgSend_expectedEndDate(void *a1, const char *a2, ...)
{
  return _[a1 expectedEndDate];
}

id objc_msgSend_expectsResponse(void *a1, const char *a2, ...)
{
  return _[a1 expectsResponse];
}

id objc_msgSend_expensivelyGetIdentifyingInformation_forClient_(void *a1, const char *a2, ...)
{
  return [a1 expensivelyGetIdentifyingInformation:forClient:];
}

id objc_msgSend_expirationAgeSecs(void *a1, const char *a2, ...)
{
  return _[a1 expirationAgeSecs];
}

id objc_msgSend_exportMicroLocationDataForMigrationWithReply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "exportMicroLocationDataForMigrationWithReply:");
}

id objc_msgSend_exportMicroLocationDatabaseTablesWithReply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "exportMicroLocationDatabaseTablesWithReply:");
}

id objc_msgSend_exportedInterface(void *a1, const char *a2, ...)
{
  return _[a1 exportedInterface];
}

id objc_msgSend_extendSelectorInfoWithProtocol_bases_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "extendSelectorInfoWithProtocol:bases:");
}

id objc_msgSend_extensionItemForDict_withName_withPayload_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "extensionItemForDict:withName:withPayload:");
}

id objc_msgSend_extensionPointIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 extensionPointIdentifier];
}

id objc_msgSend_externalSubmersionState(void *a1, const char *a2, ...)
{
  return _[a1 externalSubmersionState];
}

id objc_msgSend_extractAnalyticsFromNotification_isInternal_handler_(void *a1, const char *a2, ...)
{
  return [a1 extractAnalyticsFromNotification:isInternal:handler:];
}

id objc_msgSend_extractComponentFromCharPtr_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "extractComponentFromCharPtr:");
}

id objc_msgSend_fADR(void *a1, const char *a2, ...)
{
  return _[a1 fADR];
}

id objc_msgSend_fAPNSMessageCallback(void *a1, const char *a2, ...)
{
  return _[a1 fAPNSMessageCallback];
}

id objc_msgSend_fAPNSReconnectedCallback(void *a1, const char *a2, ...)
{
  return _[a1 fAPNSReconnectedCallback];
}

id objc_msgSend_fAPNSTokenCallback(void *a1, const char *a2, ...)
{
  return _[a1 fAPNSTokenCallback];
}

id objc_msgSend_fAggregateRecordsTimer(void *a1, const char *a2, ...)
{
  return _[a1 fAggregateRecordsTimer];
}

id objc_msgSend_fCoexCellularForCA(void *a1, const char *a2, ...)
{
  return _[a1 fCoexCellularForCA];
}

id objc_msgSend_fCoexMetricUpdateCallback(void *a1, const char *a2, ...)
{
  return _[a1 fCoexMetricUpdateCallback];
}

id objc_msgSend_fCoexPowerForCA(void *a1, const char *a2, ...)
{
  return _[a1 fCoexPowerForCA];
}

id objc_msgSend_fCoexTermalForCA(void *a1, const char *a2, ...)
{
  return _[a1 fCoexTermalForCA];
}

id objc_msgSend_fCovariance(void *a1, const char *a2, ...)
{
  return _[a1 fCovariance];
}

id objc_msgSend_fEndTime(void *a1, const char *a2, ...)
{
  return _[a1 fEndTime];
}

id objc_msgSend_fH(void *a1, const char *a2, ...)
{
  return _[a1 fH];
}

id objc_msgSend_fIsRegisteredForTileDownload(void *a1, const char *a2, ...)
{
  return _[a1 fIsRegisteredForTileDownload];
}

id objc_msgSend_fLocationCoordinates(void *a1, const char *a2, ...)
{
  return _[a1 fLocationCoordinates];
}

id objc_msgSend_fLocationHorizontalUncertainty(void *a1, const char *a2, ...)
{
  return _[a1 fLocationHorizontalUncertainty];
}

id objc_msgSend_fNextTrackStartTime(void *a1, const char *a2, ...)
{
  return _[a1 fNextTrackStartTime];
}

id objc_msgSend_fNotification(void *a1, const char *a2, ...)
{
  return _[a1 fNotification];
}

id objc_msgSend_fP(void *a1, const char *a2, ...)
{
  return _[a1 fP];
}

id objc_msgSend_fQ(void *a1, const char *a2, ...)
{
  return _[a1 fQ];
}

id objc_msgSend_fSensorRecorderQueryTimer(void *a1, const char *a2, ...)
{
  return _[a1 fSensorRecorderQueryTimer];
}

id objc_msgSend_fSensorRecorderSubscribeTimer(void *a1, const char *a2, ...)
{
  return _[a1 fSensorRecorderSubscribeTimer];
}

id objc_msgSend_fSpectatingLocation(void *a1, const char *a2, ...)
{
  return _[a1 fSpectatingLocation];
}

id objc_msgSend_fStartTime(void *a1, const char *a2, ...)
{
  return _[a1 fStartTime];
}

id objc_msgSend_fState(void *a1, const char *a2, ...)
{
  return _[a1 fState];
}

id objc_msgSend_fType(void *a1, const char *a2, ...)
{
  return _[a1 fType];
}

id objc_msgSend_fUniverse(void *a1, const char *a2, ...)
{
  return _[a1 fUniverse];
}

id objc_msgSend_failAllTasksWithError_(void *a1, const char *a2, ...)
{
  return [a1 failAllTasksWithError:];
}

id objc_msgSend_failedRecordDeletes(void *a1, const char *a2, ...)
{
  return _[a1 failedRecordDeletes];
}

id objc_msgSend_failedRecordSaves(void *a1, const char *a2, ...)
{
  return _[a1 failedRecordSaves];
}

id objc_msgSend_failedToConnectToPossiblePeripheral_withErrorCode_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "failedToConnectToPossiblePeripheral:withErrorCode:");
}

id objc_msgSend_failedZoneDeletes(void *a1, const char *a2, ...)
{
  return _[a1 failedZoneDeletes];
}

id objc_msgSend_failedZoneSaves(void *a1, const char *a2, ...)
{
  return _[a1 failedZoneSaves];
}

id objc_msgSend_fakeLastFix(void *a1, const char *a2, ...)
{
  return _[a1 fakeLastFix];
}

id objc_msgSend_familiarityIndex(void *a1, const char *a2, ...)
{
  return _[a1 familiarityIndex];
}

id objc_msgSend_favorableCellularConditions(void *a1, const char *a2, ...)
{
  return _[a1 favorableCellularConditions];
}

id objc_msgSend_features(void *a1, const char *a2, ...)
{
  return _[a1 features];
}

id objc_msgSend_feedAccelSample_time_(void *a1, const char *a2, ...)
{
  return [a1 feedAccelSample:x0 time:x1];
}

id objc_msgSend_feedBodyMetrics_(void *a1, const char *a2, ...)
{
  return [a1 feedBodyMetrics:];
}

id objc_msgSend_feedElevationData_(void *a1, const char *a2, ...)
{
  return [a1 feedElevationData:];
}

id objc_msgSend_feedFitnessMachineData_(void *a1, const char *a2, ...)
{
  return [a1 feedFitnessMachineData:];
}

id objc_msgSend_feedGyroSample_time_(void *a1, const char *a2, ...)
{
  return [a1 feedGyroSample:time:];
}

id objc_msgSend_feedInertialOdometryPacket_atTime_(void *a1, const char *a2, ...)
{
  return [a1 feedInertialOdometryPacket:atTime:];
}

id objc_msgSend_feedLocation_(void *a1, const char *a2, ...)
{
  return [a1 feedLocation:];
}

id objc_msgSend_feedStepCountUpdate_(void *a1, const char *a2, ...)
{
  return [a1 feedStepCountUpdate:];
}

id objc_msgSend_feedWeatherData_(void *a1, const char *a2, ...)
{
  return [a1 feedWeatherData:];
}

id objc_msgSend_feedWorkoutEffortEstimate_(void *a1, const char *a2, ...)
{
  return [a1 feedWorkoutEffortEstimate:];
}

id objc_msgSend_feelsLikeTemperature(void *a1, const char *a2, ...)
{
  return _[a1 feelsLikeTemperature];
}

id objc_msgSend_fenceCategoryForFence_(void *a1, const char *a2, ...)
{
  return [a1 fenceCategoryForFence:];
}

id objc_msgSend_fenceCategoryType(void *a1, const char *a2, ...)
{
  return _[a1 fenceCategoryType];
}

id objc_msgSend_fenceEventType_(void *a1, const char *a2, ...)
{
  return [a1 fenceEventType:];
}

id objc_msgSend_fenceHistoryPerSession(void *a1, const char *a2, ...)
{
  return _[a1 fenceHistoryPerSession];
}

id objc_msgSend_fenceID(void *a1, const char *a2, ...)
{
  return _[a1 fenceID];
}

id objc_msgSend_fenceIDToIndex(void *a1, const char *a2, ...)
{
  return _[a1 fenceIDToIndex];
}

id objc_msgSend_fenceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 fenceIdentifier];
}

id objc_msgSend_fenceMetadata(void *a1, const char *a2, ...)
{
  return _[a1 fenceMetadata];
}

id objc_msgSend_fenceNotifier(void *a1, const char *a2, ...)
{
  return _[a1 fenceNotifier];
}

id objc_msgSend_fenceRadius(void *a1, const char *a2, ...)
{
  return _[a1 fenceRadius];
}

id objc_msgSend_fenceSizeForFence_(void *a1, const char *a2, ...)
{
  return [a1 fenceSizeForFence:];
}

id objc_msgSend_fenceType(void *a1, const char *a2, ...)
{
  return _[a1 fenceType];
}

id objc_msgSend_fetchAISAccessoryCapabilitiesForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchAISAccessoryCapabilitiesForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchAISAccessoryCategoryForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchAISAccessoryCategoryForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchAISBatteryLevelForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchAISBatteryLevelForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchAISBatteryTypeForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return [a1 fetchAISBatteryTypeForTAUnknownBeacon:forClient:];
}

id objc_msgSend_fetchAISFirmwareVersionForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchAISFirmwareVersionForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchAISInfoForNonPoshTAUnknownBeacon_client_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchAISInfoForNonPoshTAUnknownBeacon:client:");
}

id objc_msgSend_fetchAISInfoForPoshTAUnknownBeacon_client_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchAISInfoForPoshTAUnknownBeacon:client:");
}

id objc_msgSend_fetchAISInfoForTAUnknownBeacon_client_(void *a1, const char *a2, ...)
{
  return [a1 fetchAISInfoForTAUnknownBeacon:client:];
}

id objc_msgSend_fetchAISManufacturerNameForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return [a1 fetchAISManufacturerNameForTAUnknownBeacon:forClient:];
}

id objc_msgSend_fetchAISModelNameForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchAISModelNameForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchAISNetworkIDForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return [a1 fetchAISNetworkIDForTAUnknownBeacon:forClient:];
}

id objc_msgSend_fetchAISProductDataForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchAISProductDataForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchAISProtocolImplementationForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchAISProtocolImplementationForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchAISSerialNumberForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return [a1 fetchAISSerialNumberForTAUnknownBeacon:forClient:];
}

id objc_msgSend_fetchAccelerometerModeCommand(void *a1, const char *a2, ...)
{
  return _[a1 fetchAccelerometerModeCommand];
}

id objc_msgSend_fetchAccelerometerModeTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchAccelerometerModeTask];
}

id objc_msgSend_fetchAccelerometerOrientationModeConfigurationCommand(void *a1, const char *a2, ...)
{
  return _[a1 fetchAccelerometerOrientationModeConfigurationCommand];
}

id objc_msgSend_fetchAccelerometerOrientationModeConfigurationTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchAccelerometerOrientationModeConfigurationTask];
}

id objc_msgSend_fetchAccelerometerSlopeModeConfigurationCommand(void *a1, const char *a2, ...)
{
  return _[a1 fetchAccelerometerSlopeModeConfigurationCommand];
}

id objc_msgSend_fetchAccelerometerSlopeModeConfigurationTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchAccelerometerSlopeModeConfigurationTask];
}

id objc_msgSend_fetchAccessoryBitSetWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchAccessoryBitSetWithReply:];
}

id objc_msgSend_fetchAccessoryCapabilitiesGATTTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchAccessoryCapabilitiesGATTTask];
}

id objc_msgSend_fetchAccessoryCategoryGATTTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchAccessoryCategoryGATTTask];
}

id objc_msgSend_fetchAccessoryPASCDTransmissionStateWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchAccessoryPASCDTransmissionStateWithReply:];
}

id objc_msgSend_fetchAllBeaconsWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 fetchAllBeaconsWithCompletion:];
}

id objc_msgSend_fetchAllBleAdvertisements(void *a1, const char *a2, ...)
{
  return _[a1 fetchAllBleAdvertisements];
}

id objc_msgSend_fetchAllDuriansWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 fetchAllDuriansWithCompletion:];
}

id objc_msgSend_fetchAllEntries(void *a1, const char *a2, ...)
{
  return _[a1 fetchAllEntries];
}

id objc_msgSend_fetchAllFencesCountWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchAllFencesCountWithReply:];
}

id objc_msgSend_fetchAllRecordZonesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchAllRecordZonesWithCompletionHandler:");
}

id objc_msgSend_fetchAllRecords(void *a1, const char *a2, ...)
{
  return _[a1 fetchAllRecords];
}

id objc_msgSend_fetchAllRecordsForMac_(void *a1, const char *a2, ...)
{
  return [a1 fetchAllRecordsForMac:];
}

id objc_msgSend_fetchAllUnknownBeaconsWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 fetchAllUnknownBeaconsWithCompletion:];
}

id objc_msgSend_fetchAutomaticDNDTriggerPreferenceWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchAutomaticDNDTriggerPreferenceWithReply:];
}

id objc_msgSend_fetchBackgroundInertialOdometrySamplesWithOptions_handler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchBackgroundInertialOdometrySamplesWithOptions:handler:");
}

id objc_msgSend_fetchBackgroundInertialOdometrySamplesWithStartTime_endTime_intervalIndex_completionBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchBackgroundInertialOdometrySamplesWithStartTime:endTime:intervalIndex:completionBlock:");
}

id objc_msgSend_fetchBatteryLevelGATTTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchBatteryLevelGATTTask];
}

id objc_msgSend_fetchBatteryStatusCommand(void *a1, const char *a2, ...)
{
  return _[a1 fetchBatteryStatusCommand];
}

id objc_msgSend_fetchBatteryStatusTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchBatteryStatusTask];
}

id objc_msgSend_fetchBatteryTypeGATTTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchBatteryTypeGATTTask];
}

id objc_msgSend_fetchCachedPlaceInferencesWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchCachedPlaceInferencesWithReply:];
}

id objc_msgSend_fetchChangesForZoneIDs_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 fetchChangesForZoneIDs:];
}

id objc_msgSend_fetchClientStaticRegistrationResult_withReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchClientStaticRegistrationResult:withReply:];
}

id objc_msgSend_fetchCoarseEquivalentForLocation_callbackQueue_callback_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchCoarseEquivalentForLocation:callbackQueue:callback:")];
}

id objc_msgSend_fetchCoarseLocationForNextLOI_(void *a1, const char *a2, ...)
{
  return [a1 fetchCoarseLocationForNextLOI:];
}

id objc_msgSend_fetchCoarseSignalEnvironmentForLatitude_longitude_withReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchCoarseSignalEnvironmentForLatitude:longitude:withReply:];
}

id objc_msgSend_fetchConnectionTokensForDevice_onCondition_(void *a1, const char *a2, ...)
{
  return [a1 fetchConnectionTokensForDevice:x0 onCondition:x1];
}

id objc_msgSend_fetchConnectionTokensForDevice_usingReconciledUUID_andCriteria_(void *a1, const char *a2, ...)
{
  return [a1 fetchConnectionTokensForDevice:usingReconciledUUID:andCriteria:];
}

id objc_msgSend_fetchCurrentKeyIndexCommand(void *a1, const char *a2, ...)
{
  return _[a1 fetchCurrentKeyIndexCommand];
}

id objc_msgSend_fetchCurrentKeyIndexTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchCurrentKeyIndexTask];
}

id objc_msgSend_fetchCurrentLocationWithHandler_(void *a1, const char *a2, ...)
{
  return [a1 fetchCurrentLocationWithHandler:];
}

id objc_msgSend_fetchDataAvailabilityWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchDataAvailabilityWithReply:];
}

id objc_msgSend_fetchDedupedLocationOfInterestIdentifiersWithIdentifier_withReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchDedupedLocationOfInterestIdentifiersWithIdentifier:x0 withReply:x1];
}

id objc_msgSend_fetchDominantMotionActivityInInterval_handler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchDominantMotionActivityInInterval:handler:");
}

id objc_msgSend_fetchElevationsWithStartTime_andEndTime_andBatchSize_andElevationArray_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchElevationsWithStartTime:andEndTime:andBatchSize:andElevationArray:");
}

id objc_msgSend_fetchEstimatedLocationAtDate_handler_(void *a1, const char *a2, ...)
{
  return [a1 fetchEstimatedLocationAtDate:x0 handler:x1];
}

id objc_msgSend_fetchEstimatedLocationAtDate_options_handler_(void *a1, const char *a2, ...)
{
  return [a1 fetchEstimatedLocationAtDate:x0 options:x1 handler:x2];
}

id objc_msgSend_fetchEstimatedLocationAtDate_options_withReply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchEstimatedLocationAtDate:options:withReply:");
}

id objc_msgSend_fetchEstimatedLocationAtDate_withReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchEstimatedLocationAtDate:withReply:];
}

id objc_msgSend_fetchFamiliarityIndexResultsWithOptions_handler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchFamiliarityIndexResultsWithOptions:handler:");
}

id objc_msgSend_fetchFilteredLocations_withElevationArray_(void *a1, const char *a2, ...)
{
  return [a1 fetchFilteredLocations:withElevationArray:];
}

id objc_msgSend_fetchFindMyVersionGATTTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchFindMyVersionGATTTask];
}

id objc_msgSend_fetchFirmwareVersionGATTTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchFirmwareVersionGATTTask];
}

id objc_msgSend_fetchFirmwareVersionTaskWithCrashLogs_(void *a1, const char *a2, ...)
{
  return [a1 fetchFirmwareVersionTaskWithCrashLogs:];
}

id objc_msgSend_fetchFormattedAddress_queue_(void *a1, const char *a2, ...)
{
  return [a1 fetchFormattedAddress:queue:];
}

id objc_msgSend_fetchFormattedPostalAddressesFromMeCardWithReply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchFormattedPostalAddressesFromMeCardWithReply:");
}

id objc_msgSend_fetchFromStatisticsNumberOfAdvs_accumulatedTime_(void *a1, const char *a2, ...)
{
  return [a1 fetchFromStatisticsNumberOfAdvs:accumulatedTime:];
}

id objc_msgSend_fetchGEOBuildingDataAroundCoordinate_inRadius_tileSetStyle_allowNetwork_clearTiles_withReply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchGEOBuildingDataAroundCoordinate:inRadius:tileSetStyle:allowNetwork:clearTiles:withReply:");
}

id objc_msgSend_fetchGEORoadDataAroundCoordinate_inRadius_allowNetwork_isPedestrianOrCycling_clearTiles_withReply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchGEORoadDataAroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:withReply:");
}

id objc_msgSend_fetchGroup(void *a1, const char *a2, ...)
{
  return _[a1 fetchGroup];
}

id objc_msgSend_fetchHasConnectedDevicesWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchHasConnectedDevicesWithReply:];
}

id objc_msgSend_fetchHawkeyeAISAccessoryCapabilitiesForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchHawkeyeAISAccessoryCapabilitiesForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchHawkeyeAISAccessoryCategoryForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchHawkeyeAISAccessoryCategoryForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchHawkeyeAISFirmwareVersionForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return [a1 fetchHawkeyeAISFirmwareVersionForTAUnknownBeacon:forClient:];
}

id objc_msgSend_fetchHawkeyeAISManufacturerNameForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchHawkeyeAISManufacturerNameForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchHawkeyeAISModelNameForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return [a1 fetchHawkeyeAISModelNameForTAUnknownBeacon:forClient:];
}

id objc_msgSend_fetchHawkeyeAISProductDataForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchHawkeyeAISProductDataForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchInfoForLocation_withReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchInfoForLocation:x0 withReply:x1];
}

id objc_msgSend_fetchIsAccessoryConnectedWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchIsAccessoryConnectedWithReply:];
}

id objc_msgSend_fetchIsAirplaneModeEnabledWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchIsAirplaneModeEnabledWithReply:];
}

id objc_msgSend_fetchIsAssociatedWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchIsAssociatedWithReply:];
}

id objc_msgSend_fetchIsBatteryConnectedWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchIsBatteryConnectedWithReply:];
}

id objc_msgSend_fetchIsCellAvailableWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchIsCellAvailableWithReply:];
}

id objc_msgSend_fetchIsDeviceVehicle_deviceType_withReply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchIsDeviceVehicle:deviceType:withReply:");
}

id objc_msgSend_fetchIsSaewEnabledOnQueue_withReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchIsSaewEnabledOnQueue:x0 withReply:x1];
}

id objc_msgSend_fetchIsWifiAvailableWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchIsWifiAvailableWithReply:];
}

id objc_msgSend_fetchLOIForType_isSecondTry_(void *a1, const char *a2, ...)
{
  return [a1 fetchLOIForType:isSecondTry:];
}

id objc_msgSend_fetchLOIFromCoreRoutine(void *a1, const char *a2, ...)
{
  return _[a1 fetchLOIFromCoreRoutine];
}

id objc_msgSend_fetchLOIVisitAtStart(void *a1, const char *a2, ...)
{
  return _[a1 fetchLOIVisitAtStart];
}

id objc_msgSend_fetchLastSignificantLocationDistanceAndLatencyWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchLastSignificantLocationDistanceAndLatencyWithReply:];
}

id objc_msgSend_fetchLocationClientKeysWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchLocationClientKeysWithReply:];
}

id objc_msgSend_fetchLocationOfInterestAtLocation_(void *a1, const char *a2, ...)
{
  return [a1 fetchLocationOfInterestAtLocation:];
}

id objc_msgSend_fetchLocationOfInterestAtLocation_withReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchLocationOfInterestAtLocation:x0 withReply:x1];
}

id objc_msgSend_fetchLocationOfInterestForFence_handler_(void *a1, const char *a2, ...)
{
  return [a1 fetchLocationOfInterestForFence:x0 handler:x1];
}

id objc_msgSend_fetchLocationOfInterestForRegion_handler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchLocationOfInterestForRegion:handler:");
}

id objc_msgSend_fetchLocationOfInterestForRegion_withReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchLocationOfInterestForRegion:withReply:];
}

id objc_msgSend_fetchLocationOfInterestWithIdentifier_withReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchLocationOfInterestWithIdentifier:withReply:];
}

id objc_msgSend_fetchLocationSystemStateWithHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchLocationSystemStateWithHandler:");
}

id objc_msgSend_fetchLocationWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchLocationWithReply:];
}

id objc_msgSend_fetchLocationsOfInterestIfPossibleWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 fetchLocationsOfInterestIfPossibleWithCompletionHandler:];
}

id objc_msgSend_fetchLocationsOfInterestOfType_withReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchLocationsOfInterestOfType:withReply:];
}

id objc_msgSend_fetchLocationsOfInterestWithinDistance_ofLocation_withReply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchLocationsOfInterestWithinDistance:ofLocation:withReply:");
}

id objc_msgSend_fetchLocationsWithStartTime_andEndTime_andBatchSize_andLocationArray_andVisitSearchStartIndex_andCompletionBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchLocationsWithStartTime:andEndTime:andBatchSize:andLocationArray:andVisitSearchStartIndex:andCompletionBlock:");
}

id objc_msgSend_fetchLocationsWithStartTime_endTime_intervalIndex_locationArray_completionBlock_(void *a1, const char *a2, ...)
{
  return [a1 fetchLocationsWithStartTime:x0 endTime:x1 intervalIndex:x2 locationArray:x3 completionBlock:x4];
}

id objc_msgSend_fetchLoiFromId_atTimestamp_(void *a1, const char *a2, ...)
{
  return [a1 fetchLoiFromId:atTimestamp:];
}

id objc_msgSend_fetchLookbackWindowStartDateWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchLookbackWindowStartDateWithReply:];
}

id objc_msgSend_fetchMacAddressesAmong_nearLatitude_longitude_withReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchMacAddressesAmong:x0 nearLatitude:x1 longitude:x2 withReply:x3];
}

id objc_msgSend_fetchManufacturerNameGATTTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchManufacturerNameGATTTask];
}

id objc_msgSend_fetchMedicalIDDataWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 fetchMedicalIDDataWithCompletion:];
}

id objc_msgSend_fetchModelColorCodeGATTTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchModelColorCodeGATTTask];
}

id objc_msgSend_fetchModelNameGATTTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchModelNameGATTTask];
}

id objc_msgSend_fetchMostRecentConnectionWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchMostRecentConnectionWithReply:];
}

id objc_msgSend_fetchMostRecentInVehicleStartAndExitTimesWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchMostRecentInVehicleStartAndExitTimesWithReply:];
}

id objc_msgSend_fetchMotionActivitiesInInterval_handler_(void *a1, const char *a2, ...)
{
  return [a1 fetchMotionActivitiesInInterval:x0 handler:x1];
}

id objc_msgSend_fetchMultiStatusTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchMultiStatusTask];
}

id objc_msgSend_fetchNPLOI(void *a1, const char *a2, ...)
{
  return _[a1 fetchNPLOI];
}

id objc_msgSend_fetchNextPredictedLocationsOfInterestFromLocation_startDate_timeInterval_withReply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchNextPredictedLocationsOfInterestFromLocation:startDate:timeInterval:withReply:");
}

id objc_msgSend_fetchNonOwnerAccessoryCapabilitiesPoshTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchNonOwnerAccessoryCapabilitiesPoshTask];
}

id objc_msgSend_fetchNonOwnerAccessoryCapabilitiesTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchNonOwnerAccessoryCapabilitiesTask];
}

id objc_msgSend_fetchNonOwnerAccessoryCategoryPoshTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchNonOwnerAccessoryCategoryPoshTask];
}

id objc_msgSend_fetchNonOwnerAccessoryCategoryTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchNonOwnerAccessoryCategoryTask];
}

id objc_msgSend_fetchNonOwnerBatteryLevelPoshTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchNonOwnerBatteryLevelPoshTask];
}

id objc_msgSend_fetchNonOwnerBatteryTypePoshTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchNonOwnerBatteryTypePoshTask];
}

id objc_msgSend_fetchNonOwnerFindMyVersionTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchNonOwnerFindMyVersionTask];
}

id objc_msgSend_fetchNonOwnerFirmwareVersionPoshTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchNonOwnerFirmwareVersionPoshTask];
}

id objc_msgSend_fetchNonOwnerFirmwareVersionTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchNonOwnerFirmwareVersionTask];
}

id objc_msgSend_fetchNonOwnerManufacturerNamePoshTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchNonOwnerManufacturerNamePoshTask];
}

id objc_msgSend_fetchNonOwnerManufacturerNameTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchNonOwnerManufacturerNameTask];
}

id objc_msgSend_fetchNonOwnerModelNamePoshTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchNonOwnerModelNamePoshTask];
}

id objc_msgSend_fetchNonOwnerModelNameTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchNonOwnerModelNameTask];
}

id objc_msgSend_fetchNonOwnerNetworkIdPoshTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchNonOwnerNetworkIdPoshTask];
}

id objc_msgSend_fetchNonOwnerProductDataPoshTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchNonOwnerProductDataPoshTask];
}

id objc_msgSend_fetchNonOwnerProductDataTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchNonOwnerProductDataTask];
}

id objc_msgSend_fetchNonOwnerProtocolImplementationPoshTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchNonOwnerProtocolImplementationPoshTask];
}

id objc_msgSend_fetchNonOwnerSerialNumberPoshTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchNonOwnerSerialNumberPoshTask];
}

id objc_msgSend_fetchNonOwnerTxPowerTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchNonOwnerTxPowerTask];
}

id objc_msgSend_fetchOdometryBatchedLocationsWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchOdometryBatchedLocationsWithReply:];
}

id objc_msgSend_fetchPlaceInferenceAtCurrentLocation(void *a1, const char *a2, ...)
{
  return _[a1 fetchPlaceInferenceAtCurrentLocation];
}

id objc_msgSend_fetchPlaceInferencesWithOptions_withReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchPlaceInferencesWithOptions:x0 withReply:x1];
}

id objc_msgSend_fetchPossibleTerritoriesForLocation_responseQueue_responseBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchPossibleTerritoriesForLocation:responseQueue:responseBlock:")
}

id objc_msgSend_fetchPredictedLocationsOfInterestBetweenStartDate_endDate_withReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchPredictedLocationsOfInterestBetweenStartDate:endDate:withReply:];
}

id objc_msgSend_fetchProductDataGATTTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchProductDataGATTTask];
}

id objc_msgSend_fetchQueryLocationsForWifis_useCache_piggyback_config_withReply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchQueryLocationsForWifis:useCache:piggyback:config:withReply:");
}

id objc_msgSend_fetchReachabilityWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchReachabilityWithReply:];
}

id objc_msgSend_fetchRecentLocationsOfInterestWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchRecentLocationsOfInterestWithReply:];
}

id objc_msgSend_fetchRecord_(void *a1, const char *a2, ...)
{
  return [a1 fetchRecord:];
}

id objc_msgSend_fetchRecordsWithEntityName_byAndPredicates_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchRecordsWithEntityName:byAndPredicates:");
}

id objc_msgSend_fetchRelatedLoisForLoi_(void *a1, const char *a2, ...)
{
  return [a1 fetchRelatedLoisForLoi:];
}

id objc_msgSend_fetchRemoteStatusWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchRemoteStatusWithReply:];
}

id objc_msgSend_fetchRequestWithEntityName_(void *a1, const char *a2, ...)
{
  return [a1 fetchRequestWithEntityName:];
}

id objc_msgSend_fetchRoutineModeFromLocation_withReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchRoutineModeFromLocation:x0 withReply:x1];
}

id objc_msgSend_fetchScanResultWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchScanResultWithReply:];
}

id objc_msgSend_fetchSignalStrengthMeasurementForSim_withReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchSignalStrengthMeasurementForSim:withReply:];
}

id objc_msgSend_fetchSignalStrengthMeasurements(void *a1, const char *a2, ...)
{
  return _[a1 fetchSignalStrengthMeasurements];
}

id objc_msgSend_fetchStepCountInInterval_(void *a1, const char *a2, ...)
{
  return [a1 fetchStepCountInInterval:];
}

id objc_msgSend_fetchStoredVisitsWithOptions_handler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchStoredVisitsWithOptions:handler:")];
}

id objc_msgSend_fetchStoredVisitsWithOptions_withReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchStoredVisitsWithOptions:withReply:];
}

id objc_msgSend_fetchTxPowerGATTTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchTxPowerGATTTask];
}

id objc_msgSend_fetchTxPowerTask(void *a1, const char *a2, ...)
{
  return _[a1 fetchTxPowerTask];
}

id objc_msgSend_fetchUmtsApnForInstance_WithReply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchUmtsApnForInstance:WithReply:");
}

id objc_msgSend_fetchUmtsApnWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchUmtsApnWithReply:];
}

id objc_msgSend_fetchUserRecordIDWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 fetchUserRecordIDWithCompletionHandler:];
}

id objc_msgSend_fetchUserStatsCommandWithPersistence_v0_(void *a1, const char *a2, ...)
{
  return [a1 fetchUserStatsCommandWithPersistence_v0:];
}

id objc_msgSend_fetchUserStatsCommandWithPersistence_v1_(void *a1, const char *a2, ...)
{
  return [a1 fetchUserStatsCommandWithPersistence_v1:];
}

id objc_msgSend_fetchUserStatsTaskWithPersistence_v0_(void *a1, const char *a2, ...)
{
  return [a1 fetchUserStatsTaskWithPersistence_v0:];
}

id objc_msgSend_fetchUserStatsTaskWithPersistence_v1_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchUserStatsTaskWithPersistence_v1:");
}

id objc_msgSend_fetchUserStatsTaskWithPersistence_v2_(void *a1, const char *a2, ...)
{
  return [a1 fetchUserStatsTaskWithPersistence_v2:];
}

id objc_msgSend_fetchUserStatsWithPersistence_fromTag_forClient_(void *a1, const char *a2, ...)
{
  return [a1 fetchUserStatsWithPersistence:fromTag:forClient:];
}

id objc_msgSend_fetchVehicularDndOperatorStateWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchVehicularDndOperatorStateWithReply:];
}

id objc_msgSend_fetchVehicularDndStateAndHintsAndOperatorStateWithReply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchVehicularDndStateAndHintsAndOperatorStateWithReply:");
}

id objc_msgSend_fetchVehicularDndStateAndHintsWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchVehicularDndStateAndHintsWithReply:];
}

id objc_msgSend_fetchVehicularFalsePositiveSuppressionStatusWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchVehicularFalsePositiveSuppressionStatusWithReply:];
}

id objc_msgSend_fetchVisitStatusAtStart(void *a1, const char *a2, ...)
{
  return _[a1 fetchVisitStatusAtStart];
}

id objc_msgSend_fetchWhetherLocalFirmwareAssetIsInUseForProductGroup_andProductNumber_forClient_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchWhetherLocalFirmwareAssetIsInUseForProductGroup:andProductNumber:forClient:");
}

id objc_msgSend_fetchWirelessModemClientCountWithReply_(void *a1, const char *a2, ...)
{
  return [a1 fetchWirelessModemClientCountWithReply:];
}

id objc_msgSend_fetchWorkoutCount_(void *a1, const char *a2, ...)
{
  return [a1 fetchWorkoutCount:];
}

id objc_msgSend_fetchedDatabaseChangesEvent(void *a1, const char *a2, ...)
{
  return _[a1 fetchedDatabaseChangesEvent];
}

id objc_msgSend_fetchedRecordZoneChangesEvent(void *a1, const char *a2, ...)
{
  return _[a1 fetchedRecordZoneChangesEvent];
}

id objc_msgSend_fileDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 fileDescriptor];
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return [a1 fileExistsAtPath:];
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return [a1 fileExistsAtPath:x0 isDirectory:x1];
}

id objc_msgSend_fileHandleForReadWrite(void *a1, const char *a2, ...)
{
  return _[a1 fileHandleForReadWrite];
}

id objc_msgSend_fileHandleForReadingAtPath_(void *a1, const char *a2, ...)
{
  return [a1 fileHandleForReadingAtPath:];
}

id objc_msgSend_fileHandleForReadingFromURL_error_(void *a1, const char *a2, ...)
{
  return [a1 fileHandleForReadingFromURL:error];
}

id objc_msgSend_fileHandleForUpdatingURL_error_(void *a1, const char *a2, ...)
{
  return [a1 fileHandleForUpdatingURL:x0 error:x1];
}

id objc_msgSend_fileHandleForWritingAtPath_(void *a1, const char *a2, ...)
{
  return [a1 fileHandleForWritingAtPath:];
}

id objc_msgSend_fileManager(void *a1, const char *a2, ...)
{
  return _[a1 fileManager];
}

id objc_msgSend_fileModificationDate(void *a1, const char *a2, ...)
{
  return _[a1 fileModificationDate];
}

id objc_msgSend_filePosixPermissions(void *a1, const char *a2, ...)
{
  return _[a1 filePosixPermissions];
}

id objc_msgSend_fileSize(void *a1, const char *a2, ...)
{
  return _[a1 fileSize];
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 fileSystemRepresentation];
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return [a1 fileURLWithPath:];
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return [a1 fileURLWithPath:isDirectory:];
}

id objc_msgSend_fileURLWithPath_isDirectory_relativeToURL_(void *a1, const char *a2, ...)
{
  return [a1 fileURLWithPath:x0 isDirectory:x1 relativeToURL:x2];
}

id objc_msgSend_fileURLWithPathComponents_(void *a1, const char *a2, ...)
{
  return [a1 fileURLWithPathComponents:];
}

id objc_msgSend_filename(void *a1, const char *a2, ...)
{
  return _[a1 filename];
}

id objc_msgSend_fillFallThresholds_(void *a1, const char *a2, ...)
{
  return [a1 fillFallThresholds:];
}

id objc_msgSend_fillModesUptoTime_atChange_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fillModesUptoTime:atChange:");
}

id objc_msgSend_fillOtherFallModel_(void *a1, const char *a2, ...)
{
  return [a1 fillOtherFallModel:];
}

id objc_msgSend_fillSlipFallModel_(void *a1, const char *a2, ...)
{
  return [a1 fillSlipFallModel:];
}

id objc_msgSend_fillTripFallModel_(void *a1, const char *a2, ...)
{
  return [a1 fillTripFallModel:];
}

id objc_msgSend_filterUsingPredicate_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "filterUsingPredicate:");
}

id objc_msgSend_filteredArrayUsingPredicate_(void *a1, const char *a2, ...)
{
  return [a1 filteredArrayUsingPredicate:];
}

id objc_msgSend_filteredElevation_absAltUncertainty_withTimestamp_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "filteredElevation:absAltUncertainty:withTimestamp:");
}

id objc_msgSend_filteredPressure(void *a1, const char *a2, ...)
{
  return _[a1 filteredPressure];
}

id objc_msgSend_filteredVo2Max(void *a1, const char *a2, ...)
{
  return _[a1 filteredVo2Max];
}

id objc_msgSend_finalizeWithError_(void *a1, const char *a2, ...)
{
  return [a1 finalizeWithError:];
}

id objc_msgSend_findBuildingsNear_radius_tileSetStyle_handler_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "findBuildingsNear:radius:tileSetStyle:handler:completionHandler:");
}

id objc_msgSend_findCandidateServersWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 findCandidateServersWithCompletion:];
}

id objc_msgSend_findComponent_(void *a1, const char *a2, ...)
{
  return [a1 findComponent:];
}

id objc_msgSend_findMyAppDidBackgroundOrExitHandler(void *a1, const char *a2, ...)
{
  return _[a1 findMyAppDidBackgroundOrExitHandler];
}

id objc_msgSend_findNearestDeviceLocationWithBALocationTime_(void *a1, const char *a2, ...)
{
  return [a1 findNearestDeviceLocationWithBALocationTime:];
}

id objc_msgSend_findRaytracingDataNear_radius_handler_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 findRaytracingDataNear:x0 radius:x1 handler:x2 completionHandler:x3];
}

id objc_msgSend_findRoadsNear_radius_handler_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 findRoadsNear:x0 radius:x1 handler:x2 completionHandler:x3];
}

id objc_msgSend_findRunningTrackFlagsNear_radius_handler_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 findRunningTrackFlagsNear:x0 radius:x1 handler:x2 completionHandler:x3];
}

id objc_msgSend_findRunningTracksNear_radius_handler_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "findRunningTracksNear:radius:handler:completionHandler:");
}

id objc_msgSend_finish(void *a1, const char *a2, ...)
{
  return _[a1 finish];
}

id objc_msgSend_finishDecoding(void *a1, const char *a2, ...)
{
  return _[a1 finishDecoding];
}

id objc_msgSend_finishEncoding(void *a1, const char *a2, ...)
{
  return _[a1 finishEncoding];
}

id objc_msgSend_finishMaintainingDevice_withReason_andCategory_(void *a1, const char *a2, ...)
{
  return [a1 finishMaintainingDevice:x0 withReason:x1 andCategory:x2];
}

id objc_msgSend_finishTasksAndInvalidate(void *a1, const char *a2, ...)
{
  return _[a1 finishTasksAndInvalidate];
}

id objc_msgSend_finishUnlocked(void *a1, const char *a2, ...)
{
  return _[a1 finishUnlocked];
}

id objc_msgSend_finishWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 finishWithCompletion:];
}

id objc_msgSend_finished(void *a1, const char *a2, ...)
{
  return _[a1 finished];
}

id objc_msgSend_finished_(void *a1, const char *a2, ...)
{
  return [a1 finished:];
}

id objc_msgSend_fire(void *a1, const char *a2, ...)
{
  return _[a1 fire];
}

id objc_msgSend_fireAlarm_error_(void *a1, const char *a2, ...)
{
  return [a1 fireAlarm:error];
}

id objc_msgSend_fireEventAlarm_(void *a1, const char *a2, ...)
{
  return [a1 fireEventAlarm:];
}

id objc_msgSend_fireInterval(void *a1, const char *a2, ...)
{
  return _[a1 fireInterval];
}

id objc_msgSend_fireMotionAlarm(void *a1, const char *a2, ...)
{
  return _[a1 fireMotionAlarm];
}

id objc_msgSend_fireTime(void *a1, const char *a2, ...)
{
  return _[a1 fireTime];
}

id objc_msgSend_firmwareDownloadAssetsCharacteristic(void *a1, const char *a2, ...)
{
  return _[a1 firmwareDownloadAssetsCharacteristic];
}

id objc_msgSend_firmwareDownloadAssetsReadyCharacteristic(void *a1, const char *a2, ...)
{
  return _[a1 firmwareDownloadAssetsReadyCharacteristic];
}

id objc_msgSend_firmwareDownloadCommandCharacteristic(void *a1, const char *a2, ...)
{
  return _[a1 firmwareDownloadCommandCharacteristic];
}

id objc_msgSend_firmwareRevision(void *a1, const char *a2, ...)
{
  return _[a1 firmwareRevision];
}

id objc_msgSend_firmwareUpdateMode(void *a1, const char *a2, ...)
{
  return _[a1 firmwareUpdateMode];
}

id objc_msgSend_firmwareUpdateReboot(void *a1, const char *a2, ...)
{
  return _[a1 firmwareUpdateReboot];
}

id objc_msgSend_firmwareUpdateSession(void *a1, const char *a2, ...)
{
  return _[a1 firmwareUpdateSession];
}

id objc_msgSend_firmwareVersion(void *a1, const char *a2, ...)
{
  return _[a1 firmwareVersion];
}

id objc_msgSend_firmwareVersionForAllTagsMetricsBackOff(void *a1, const char *a2, ...)
{
  return _[a1 firmwareVersionForAllTagsMetricsBackOff];
}

id objc_msgSend_firstAlarm(void *a1, const char *a2, ...)
{
  return _[a1 firstAlarm];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_firstStepTime(void *a1, const char *a2, ...)
{
  return _[a1 firstStepTime];
}

id objc_msgSend_firwmareDownloadStatusCharacteristic(void *a1, const char *a2, ...)
{
  return _[a1 firwmareDownloadStatusCharacteristic];
}

id objc_msgSend_fitnessModeStateMachine(void *a1, const char *a2, ...)
{
  return _[a1 fitnessModeStateMachine];
}

id objc_msgSend_fitnessPlusWorkoutInstance_(void *a1, const char *a2, ...)
{
  return [a1 fitnessPlusWorkoutInstance:];
}

id objc_msgSend_fitnessTracking(void *a1, const char *a2, ...)
{
  return _[a1 fitnessTracking];
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _[a1 floatValue];
}

id objc_msgSend_floor(void *a1, const char *a2, ...)
{
  return _[a1 floor];
}

id objc_msgSend_flowlineOffset(void *a1, const char *a2, ...)
{
  return _[a1 flowlineOffset];
}

id objc_msgSend_flush(void *a1, const char *a2, ...)
{
  return _[a1 flush];
}

id objc_msgSend_flushAll(void *a1, const char *a2, ...)
{
  return _[a1 flushAll];
}

id objc_msgSend_flushAuthDates(void *a1, const char *a2, ...)
{
  return _[a1 flushAuthDates];
}

id objc_msgSend_flushData_userProfile_(void *a1, const char *a2, ...)
{
  return [a1 flushData:userProfile:];
}

id objc_msgSend_flushInMemoryDataWithCompletionQueue_completionBlock_(void *a1, const char *a2, ...)
{
  return [a1 flushInMemoryDataWithCompletionQueue:x0 completionBlock:x1];
}

id objc_msgSend_flushInterest(void *a1, const char *a2, ...)
{
  return _[a1 flushInterest];
}

id objc_msgSend_flushToFile(void *a1, const char *a2, ...)
{
  return _[a1 flushToFile];
}

id objc_msgSend_fm_hexString(void *a1, const char *a2, ...)
{
  return [a1 fm_hexString];
}

id objc_msgSend_forceCompanionHeartbeat(void *a1, const char *a2, ...)
{
  return _[a1 forceCompanionHeartbeat];
}

id objc_msgSend_forceEnableLeash(void *a1, const char *a2, ...)
{
  return _[a1 forceEnableLeash];
}

id objc_msgSend_forceEnablePosh(void *a1, const char *a2, ...)
{
  return _[a1 forceEnablePosh];
}

id objc_msgSend_forceGPSIfSurfaceCalStale(void *a1, const char *a2, ...)
{
  return _[a1 forceGPSIfSurfaceCalStale];
}

id objc_msgSend_forceLocationAtTime_(void *a1, const char *a2, ...)
{
  return [a1 forceLocationAtTime:];
}

id objc_msgSend_forceMaintenanceConnectionsOverride(void *a1, const char *a2, ...)
{
  return _[a1 forceMaintenanceConnectionsOverride];
}

id objc_msgSend_forceNonAppleConnections(void *a1, const char *a2, ...)
{
  return _[a1 forceNonAppleConnections];
}

id objc_msgSend_forcePoshAirPods(void *a1, const char *a2, ...)
{
  return _[a1 forcePoshAirPods];
}

id objc_msgSend_forceSurfaceReason(void *a1, const char *a2, ...)
{
  return _[a1 forceSurfaceReason];
}

id objc_msgSend_forceTriggerIgneous_(void *a1, const char *a2, ...)
{
  return [a1 forceTriggerIgneous:];
}

id objc_msgSend_forcedVenues(void *a1, const char *a2, ...)
{
  return _[a1 forcedVenues];
}

id objc_msgSend_forget_(void *a1, const char *a2, ...)
{
  return [a1 forget:];
}

id objc_msgSend_formOfWay(void *a1, const char *a2, ...)
{
  return _[a1 formOfWay];
}

id objc_msgSend_formattedAddressLines(void *a1, const char *a2, ...)
{
  return _[a1 formattedAddressLines];
}

id objc_msgSend_formattedText(void *a1, const char *a2, ...)
{
  return _[a1 formattedText];
}

id objc_msgSend_fractionalGrade(void *a1, const char *a2, ...)
{
  return _[a1 fractionalGrade];
}

id objc_msgSend_frameCount(void *a1, const char *a2, ...)
{
  return _[a1 frameCount];
}

id objc_msgSend_fromID(void *a1, const char *a2, ...)
{
  return _[a1 fromID];
}

id objc_msgSend_fromOwnerDevice(void *a1, const char *a2, ...)
{
  return _[a1 fromOwnerDevice];
}

id objc_msgSend_fsm_didTransitionFromState_toState_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fsm:didTransitionFromState:toState:")];
}

id objc_msgSend_fsm_didUpdateLocationAtTime_(void *a1, const char *a2, ...)
{
  return [a1 fsm:didUpdateLocationAtTime:];
}

id objc_msgSend_fsm_didUpdateSource_(void *a1, const char *a2, ...)
{
  return [a1 fsm:didUpdateSource:];
}

id objc_msgSend_fullPathForSyncState(void *a1, const char *a2, ...)
{
  return _[a1 fullPathForSyncState];
}

id objc_msgSend_fullSyncClientsList(void *a1, const char *a2, ...)
{
  return _[a1 fullSyncClientsList];
}

id objc_msgSend_fullSyncDidComplete(void *a1, const char *a2, ...)
{
  return _[a1 fullSyncDidComplete];
}

id objc_msgSend_fullSyncObjectsInCompanionQueue(void *a1, const char *a2, ...)
{
  return _[a1 fullSyncObjectsInCompanionQueue];
}

id objc_msgSend_fullSyncObjectsInGizmoQueue(void *a1, const char *a2, ...)
{
  return _[a1 fullSyncObjectsInGizmoQueue];
}

id objc_msgSend_fuzzPrivacyHours_(void *a1, const char *a2, ...)
{
  return [a1 fuzzPrivacyHours:];
}

id objc_msgSend_fwdlAbortTask(void *a1, const char *a2, ...)
{
  return _[a1 fwdlAbortTask];
}

id objc_msgSend_gaussianProcess_withMslpArray_withType_(void *a1, const char *a2, ...)
{
  return [a1 gaussianProcess:withMslpArray:withType:];
}

id objc_msgSend_generalDetectionMetrics(void *a1, const char *a2, ...)
{
  return _[a1 generalDetectionMetrics];
}

id objc_msgSend_generateGeofenceUpdateToClient_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "generateGeofenceUpdateToClient:");
}

id objc_msgSend_generateHighFrequencyHeartRateData_(void *a1, const char *a2, ...)
{
  return [a1 generateHighFrequencyHeartRateData:];
}

id objc_msgSend_generateLocationManagerNotAvailableError(void *a1, const char *a2, ...)
{
  return _[a1 generateLocationManagerNotAvailableError];
}

id objc_msgSend_generateNewSubArchive(void *a1, const char *a2, ...)
{
  return _[a1 generateNewSubArchive];
}

id objc_msgSend_generateRegionMonitorNotAvailableError(void *a1, const char *a2, ...)
{
  return _[a1 generateRegionMonitorNotAvailableError];
}

id objc_msgSend_generateSimulatedElevationData_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "generateSimulatedElevationData:");
}

id objc_msgSend_generateSimulatedOdometerData_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "generateSimulatedOdometerData:");
}

id objc_msgSend_generateSimulatedOdometerSuitabilityData_(void *a1, const char *a2, ...)
{
  return [a1 generateSimulatedOdometerSuitabilityData:];
}

id objc_msgSend_generateSimulatedPedometerData_(void *a1, const char *a2, ...)
{
  return [a1 generateSimulatedPedometerData:];
}

id objc_msgSend_generateSimulatedPhysicalActivityEventsData_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "generateSimulatedPhysicalActivityEventsData:");
}

id objc_msgSend_generateTheRecording_universe_settings_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "generateTheRecording:universe:settings:");
}

id objc_msgSend_generationTimeSecs(void *a1, const char *a2, ...)
{
  return _[a1 generationTimeSecs];
}

id objc_msgSend_genericEventDescription(void *a1, const char *a2, ...)
{
  return _[a1 genericEventDescription];
}

id objc_msgSend_genericPasswordQuery(void *a1, const char *a2, ...)
{
  return _[a1 genericPasswordQuery];
}

id objc_msgSend_genericWorkoutInstance_(void *a1, const char *a2, ...)
{
  return [a1 genericWorkoutInstance:];
}

id objc_msgSend_geoCenter(void *a1, const char *a2, ...)
{
  return _[a1 geoCenter];
}

id objc_msgSend_geoMapItemHandle(void *a1, const char *a2, ...)
{
  return _[a1 geoMapItemHandle];
}

id objc_msgSend_geoNavHint(void *a1, const char *a2, ...)
{
  return _[a1 geoNavHint];
}

id objc_msgSend_geoRadius(void *a1, const char *a2, ...)
{
  return _[a1 geoRadius];
}

id objc_msgSend_geoReferenceFrame(void *a1, const char *a2, ...)
{
  return _[a1 geoReferenceFrame];
}

id objc_msgSend_geocodeAddressString_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "geocodeAddressString:completionHandler:");
}

id objc_msgSend_geodeticAltitudeM(void *a1, const char *a2, ...)
{
  return _[a1 geodeticAltitudeM];
}

id objc_msgSend_geofenceID(void *a1, const char *a2, ...)
{
  return _[a1 geofenceID];
}

id objc_msgSend_gestationalAgeStringOnDate_pregnancyStartDate_startTimeZoneName_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "gestationalAgeStringOnDate:pregnancyStartDate:startTimeZoneName:");
}

id objc_msgSend_getAbsoluteAltitudeUncertainty(void *a1, const char *a2, ...)
{
  return _[a1 getAbsoluteAltitudeUncertainty];
}

id objc_msgSend_getActivePairedDevice(void *a1, const char *a2, ...)
{
  return _[a1 getActivePairedDevice];
}

id objc_msgSend_getActivityStats(void *a1, const char *a2, ...)
{
  return _[a1 getActivityStats];
}

id objc_msgSend_getAddressForDevice_(void *a1, const char *a2, ...)
{
  return [a1 getAddressForDevice:];
}

id objc_msgSend_getAdvType_(void *a1, const char *a2, ...)
{
  return [a1 getAdvType:];
}

id objc_msgSend_getAllDevicesWithArchivedDevicesMatching_(void *a1, const char *a2, ...)
{
  return [a1 getAllDevicesWithArchivedDevicesMatching:];
}

id objc_msgSend_getAllowGPGGAOnlyAccessory(void *a1, const char *a2, ...)
{
  return _[a1 getAllowGPGGAOnlyAccessory];
}

id objc_msgSend_getAndSendCurrentEstimateMeanSeaLevelPressureFrom_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "getAndSendCurrentEstimateMeanSeaLevelPressureFrom:");
}

id objc_msgSend_getAppsForAreaAtLatitude_longitude_radius_includeRegionalApps_marqueeAppsOnly_(void *a1, const char *a2, ...)
{
  return [a1 getAppsForAreaAtLatitude:x0 longitude:x1 radius:x2 includeRegionalApps:x3 marqueeAppsOnly:x4];
}

id objc_msgSend_getArraySettingsKeys(void *a1, const char *a2, ...)
{
  return _[a1 getArraySettingsKeys];
}

id objc_msgSend_getAssetVersionInfoFor_withReply_(void *a1, const char *a2, ...)
{
  return [a1 getAssetVersionInfoFor:x0 withReply:x1];
}

id objc_msgSend_getAsyncResponseSilo(void *a1, const char *a2, ...)
{
  return _[a1 getAsyncResponseSilo];
}

id objc_msgSend_getAuthorizationContextOfNonZonalClient_withReply_(void *a1, const char *a2, ...)
{
  return [a1 getAuthorizationContextOfNonZonalClient:withReply:];
}

id objc_msgSend_getBasicInfo(void *a1, const char *a2, ...)
{
  return _[a1 getBasicInfo];
}

id objc_msgSend_getBeaconRegion(void *a1, const char *a2, ...)
{
  return _[a1 getBeaconRegion];
}

id objc_msgSend_getBeaconType(void *a1, const char *a2, ...)
{
  return _[a1 getBeaconType];
}

id objc_msgSend_getBiasFitWithReply_(void *a1, const char *a2, ...)
{
  return [a1 getBiasFitWithReply:];
}

id objc_msgSend_getBlockSetIsCycling(void *a1, const char *a2, ...)
{
  return _[a1 getBlockSetIsCycling];
}

id objc_msgSend_getBooleanSettingsKeys(void *a1, const char *a2, ...)
{
  return _[a1 getBooleanSettingsKeys];
}

id objc_msgSend_getBoutMetrics_(void *a1, const char *a2, ...)
{
  return [a1 getBoutMetrics:];
}

id objc_msgSend_getBuild_(void *a1, const char *a2, ...)
{
  return [a1 getBuild:];
}

id objc_msgSend_getBytes_length_(void *a1, const char *a2, ...)
{
  return [a1 getBytes:length:];
}

id objc_msgSend_getBytes_range_(void *a1, const char *a2, ...)
{
  return [a1 getBytes:x0 range:x1];
}

id objc_msgSend_getCKSyncEngineMetadata(void *a1, const char *a2, ...)
{
  return _[a1 getCKSyncEngineMetadata];
}

id objc_msgSend_getCLAvengerScannerPolicyPlatformType(void *a1, const char *a2, ...)
{
  return _[a1 getCLAvengerScannerPolicyPlatformType];
}

id objc_msgSend_getCallIDFromDict_(void *a1, const char *a2, ...)
{
  return [a1 getCallIDFromDict:];
}

id objc_msgSend_getClientDeviceMatchingDict_(void *a1, const char *a2, ...)
{
  return [a1 getClientDeviceMatchingDict:];
}

id objc_msgSend_getClientDeviceMatchingHIDDevice_(void *a1, const char *a2, ...)
{
  return [a1 getClientDeviceMatchingHIDDevice:];
}

id objc_msgSend_getClientManagerInternalStateWithReply_(void *a1, const char *a2, ...)
{
  return [a1 getClientManagerInternalStateWithReply:];
}

id objc_msgSend_getConfigFromMobileAssets(void *a1, const char *a2, ...)
{
  return _[a1 getConfigFromMobileAssets];
}

id objc_msgSend_getConfiguredApns_completion_(void *a1, const char *a2, ...)
{
  return [a1 getConfiguredApns:x0];
}

id objc_msgSend_getConnection(void *a1, const char *a2, ...)
{
  return _[a1 getConnection];
}

id objc_msgSend_getConnectionReason(void *a1, const char *a2, ...)
{
  return _[a1 getConnectionReason];
}

id objc_msgSend_getCountryCode(void *a1, const char *a2, ...)
{
  return _[a1 getCountryCode];
}

id objc_msgSend_getCourseUncertaintyForCarPlayDRModeAtLowSpeedsInDeg(void *a1, const char *a2, ...)
{
  return _[a1 getCourseUncertaintyForCarPlayDRModeAtLowSpeedsInDeg];
}

id objc_msgSend_getCurrentDataSubscriptionContext_(void *a1, const char *a2, ...)
{
  return [a1 getCurrentDataSubscriptionContext:];
}

id objc_msgSend_getCurrentLocation(void *a1, const char *a2, ...)
{
  return _[a1 getCurrentLocation];
}

id objc_msgSend_getCurrentMitigation(void *a1, const char *a2, ...)
{
  return _[a1 getCurrentMitigation];
}

id objc_msgSend_getCurrentPrimaryKeyTask(void *a1, const char *a2, ...)
{
  return _[a1 getCurrentPrimaryKeyTask];
}

id objc_msgSend_getDataStatus_completion_(void *a1, const char *a2, ...)
{
  return [a1 getDataStatus:completion:];
}

id objc_msgSend_getDbDetails_(void *a1, const char *a2, ...)
{
  return [a1 getDbDetails:];
}

id objc_msgSend_getDeltaSecondsFromMachTime_(void *a1, const char *a2, ...)
{
  return [a1 getDeltaSecondsFromMachTime:];
}

id objc_msgSend_getDerivedKeyWithLength_secretData_additionalInfo_(void *a1, const char *a2, ...)
{
  return [a1 getDerivedKeyWithLength:x0 secretData:x1 additionalInfo:x2];
}

id objc_msgSend_getDeviceLocationsWithinBeaconingInterval(void *a1, const char *a2, ...)
{
  return _[a1 getDeviceLocationsWithinBeaconingInterval];
}

id objc_msgSend_getDeviceType(void *a1, const char *a2, ...)
{
  return _[a1 getDeviceType];
}

id objc_msgSend_getDeviceUUID_(void *a1, const char *a2, ...)
{
  return [a1 getDeviceUUID:];
}

id objc_msgSend_getDevicesForProductGroup_andProductNumber_(void *a1, const char *a2, ...)
{
  return [a1 getDevicesForProductGroup:andProductNumber:];
}

id objc_msgSend_getDevicesWithBlock_(void *a1, const char *a2, ...)
{
  return [a1 getDevicesWithBlock:];
}

id objc_msgSend_getDictionaryFromMessage_(void *a1, const char *a2, ...)
{
  return [a1 getDictionaryFromMessage:];
}

id objc_msgSend_getDoubleSettingsKeys(void *a1, const char *a2, ...)
{
  return _[a1 getDoubleSettingsKeys];
}

id objc_msgSend_getDualSimCapability_(void *a1, const char *a2, ...)
{
  return [a1 getDualSimCapability:];
}

id objc_msgSend_getECIESEncryptedData_key_sharedInfo_prependKeyFingerprint_(void *a1, const char *a2, ...)
{
  return [a1 getECIESEncryptedData:x0 key:x1 sharedInfo:x2 prependKeyFingerprint:x3];
}

id objc_msgSend_getEEDAPNSEnvironment(void *a1, const char *a2, ...)
{
  return _[a1 getEEDAPNSEnvironment];
}

id objc_msgSend_getEEDAPNSTopic(void *a1, const char *a2, ...)
{
  return _[a1 getEEDAPNSTopic];
}

id objc_msgSend_getEEDCloakingKeyWithReply_(void *a1, const char *a2, ...)
{
  return [a1 getEEDCloakingKeyWithReply:];
}

id objc_msgSend_getEEDEmergencyContactNamesWithReply_(void *a1, const char *a2, ...)
{
  return [a1 getEEDEmergencyContactNamesWithReply:];
}

id objc_msgSend_getEffectiveClientName_bundlePath_name_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "getEffectiveClientName:bundlePath:name:");
}

id objc_msgSend_getElevationThresholdProxyMap(void *a1, const char *a2, ...)
{
  return _[a1 getElevationThresholdProxyMap];
}

id objc_msgSend_getEnableAggressiveLocationScreening(void *a1, const char *a2, ...)
{
  return _[a1 getEnableAggressiveLocationScreening];
}

id objc_msgSend_getEnableCourseScreening(void *a1, const char *a2, ...)
{
  return _[a1 getEnableCourseScreening];
}

id objc_msgSend_getEnablementStatus(void *a1, const char *a2, ...)
{
  return _[a1 getEnablementStatus];
}

id objc_msgSend_getEnclosureMaterial(void *a1, const char *a2, ...)
{
  return _[a1 getEnclosureMaterial];
}

id objc_msgSend_getEphemerisExpirationInterval_(void *a1, const char *a2, ...)
{
  return [a1 getEphemerisExpirationInterval:];
}

id objc_msgSend_getEphemerisRecommendRefreshInterval_(void *a1, const char *a2, ...)
{
  return [a1 getEphemerisRecommendRefreshInterval:];
}

id objc_msgSend_getEphemerisURL_(void *a1, const char *a2, ...)
{
  return [a1 getEphemerisURL:];
}

id objc_msgSend_getEstimatedMeanSeaLevelPressure(void *a1, const char *a2, ...)
{
  return _[a1 getEstimatedMeanSeaLevelPressure];
}

id objc_msgSend_getFamiliarityEventFromIndex_(void *a1, const char *a2, ...)
{
  return [a1 getFamiliarityEventFromIndex:];
}

id objc_msgSend_getFamiliarityIndexForVisit_withReply_(void *a1, const char *a2, ...)
{
  return [a1 getFamiliarityIndexForVisit:withReply:];
}

id objc_msgSend_getFencesForBundleID_withReply_(void *a1, const char *a2, ...)
{
  return [a1 getFencesForBundleID:withReply:];
}

id objc_msgSend_getFitnessModeDebounceParamsWithOptionalAvailabilityTile_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "getFitnessModeDebounceParamsWithOptionalAvailabilityTile:");
}

id objc_msgSend_getFlightOfStairsIn24Hr(void *a1, const char *a2, ...)
{
  return _[a1 getFlightOfStairsIn24Hr];
}

id objc_msgSend_getFullSyncObjects(void *a1, const char *a2, ...)
{
  return _[a1 getFullSyncObjects];
}

id objc_msgSend_getGroupId(void *a1, const char *a2, ...)
{
  return _[a1 getGroupId];
}

id objc_msgSend_getGroupStatusHawkeyeTask(void *a1, const char *a2, ...)
{
  return _[a1 getGroupStatusHawkeyeTask];
}

id objc_msgSend_getHandoffTags(void *a1, const char *a2, ...)
{
  return _[a1 getHandoffTags];
}

id objc_msgSend_getHealthColdStorageDbCleanupActivityInterval(void *a1, const char *a2, ...)
{
  return _[a1 getHealthColdStorageDbCleanupActivityInterval];
}

id objc_msgSend_getHidDeviceFromEnumeratedDevicesMatching_(void *a1, const char *a2, ...)
{
  return [a1 getHidDeviceFromEnumeratedDevicesMatching:];
}

id objc_msgSend_getHistoricalMeanSeaLevelPressureWithStartTime_andEndTime_andCompletionBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "getHistoricalMeanSeaLevelPressureWithStartTime:andEndTime:andCompletionBlock:");
}

id objc_msgSend_getIMSRegistrationStatus_completion_(void *a1, const char *a2, ...)
{
  return [a1 getIMSRegistrationStatus:x0 completion:x1];
}

id objc_msgSend_getIdentifierFromMessage_(void *a1, const char *a2, ...)
{
  return [a1 getIdentifierFromMessage:];
}

id objc_msgSend_getIncidentalUseModeForClient_withReply_(void *a1, const char *a2, ...)
{
  return [a1 getIncidentalUseModeForClient:withReply:];
}

id objc_msgSend_getIndexInHealthKitSamples_forSessionAttributes_withStartIndex_(void *a1, const char *a2, ...)
{
  return [a1 getIndexInHealthKitSamples:forSessionAttributes:withStartIndex:];
}

id objc_msgSend_getInitialTransitionStates(void *a1, const char *a2, ...)
{
  return _[a1 getInitialTransitionStates];
}

id objc_msgSend_getInsideOutSpiralMatrixIndicesForSection_matrixSize_(void *a1, const char *a2, ...)
{
  return [a1 getInsideOutSpiralMatrixIndicesForSection:matrixSize:];
}

id objc_msgSend_getIntegerSettingsKeys(void *a1, const char *a2, ...)
{
  return _[a1 getIntegerSettingsKeys];
}

id objc_msgSend_getIntersiloDelegate(void *a1, const char *a2, ...)
{
  return _[a1 getIntersiloDelegate];
}

id objc_msgSend_getKVStoreDictionary(void *a1, const char *a2, ...)
{
  return _[a1 getKVStoreDictionary];
}

id objc_msgSend_getKappaThirdPartyActiveAppBundle(void *a1, const char *a2, ...)
{
  return _[a1 getKappaThirdPartyActiveAppBundle];
}

id objc_msgSend_getKappaThirdPartyDisplayNameForApp(void *a1, const char *a2, ...)
{
  return _[a1 getKappaThirdPartyDisplayNameForApp];
}

id objc_msgSend_getKeyExternalRepresentation_(void *a1, const char *a2, ...)
{
  return [a1 getKeyExternalRepresentation:];
}

id objc_msgSend_getKeyFingerprint_(void *a1, const char *a2, ...)
{
  return [a1 getKeyFingerprint:];
}

id objc_msgSend_getLastAltitude(void *a1, const char *a2, ...)
{
  return _[a1 getLastAltitude];
}

id objc_msgSend_getLastAltitudeAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 getLastAltitudeAccuracy];
}

id objc_msgSend_getLastAltitudeTime(void *a1, const char *a2, ...)
{
  return _[a1 getLastAltitudeTime];
}

id objc_msgSend_getLastPressureSample_(void *a1, const char *a2, ...)
{
  return [a1 getLastPressureSample:];
}

id objc_msgSend_getLatestAdvTypeToString_(void *a1, const char *a2, ...)
{
  return [a1 getLatestAdvTypeToString:];
}

id objc_msgSend_getLocalFileUrl(void *a1, const char *a2, ...)
{
  return _[a1 getLocalFileUrl];
}

id objc_msgSend_getLocalPairingDataWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 getLocalPairingDataWithCompletion:];
}

id objc_msgSend_getLocalUrl(void *a1, const char *a2, ...)
{
  return _[a1 getLocalUrl];
}

id objc_msgSend_getLocationBlock(void *a1, const char *a2, ...)
{
  return _[a1 getLocationBlock];
}

id objc_msgSend_getLocationDiffThresholdForAggressiveScreening(void *a1, const char *a2, ...)
{
  return _[a1 getLocationDiffThresholdForAggressiveScreening];
}

id objc_msgSend_getLocationForBundleID_orBundlePath_dynamicAccuracyReductionEnabled_allowsAlteredAccessoryLocations_replyBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "getLocationForBundleID:orBundlePath:dynamicAccuracyReductionEnabled:allowsAlteredAccessoryLocations:replyBlock:");
}

id objc_msgSend_getLocationIds(void *a1, const char *a2, ...)
{
  return _[a1 getLocationIds];
}

id objc_msgSend_getLocationSampleAltitudeAndUncertainty_andRefAltitude_andRefUncertainty_(void *a1, const char *a2, ...)
{
  return [a1 getLocationSampleAltitudeAndUncertainty:andRefAltitude:andRefUncertainty:];
}

id objc_msgSend_getLocationUsageDescriptionKeys_(void *a1, const char *a2, ...)
{
  return [a1 getLocationUsageDescriptionKeys:];
}

id objc_msgSend_getLocationsOfInterestFetchTimeInterval(void *a1, const char *a2, ...)
{
  return _[a1 getLocationsOfInterestFetchTimeInterval];
}

id objc_msgSend_getMachContinuousTime(void *a1, const char *a2, ...)
{
  return _[a1 getMachContinuousTime];
}

id objc_msgSend_getMaintReasonForDevice_(void *a1, const char *a2, ...)
{
  return [a1 getMaintReasonForDevice:];
}

id objc_msgSend_getMaintenanceAssertionDuration(void *a1, const char *a2, ...)
{
  return _[a1 getMaintenanceAssertionDuration];
}

id objc_msgSend_getMajor_(void *a1, const char *a2, ...)
{
  return [a1 getMajor:];
}

id objc_msgSend_getMaxFileCountForRecording_(void *a1, const char *a2, ...)
{
  return [a1 getMaxFileCountForRecording:];
}

id objc_msgSend_getMaxGPSUncertaintyForAggressiveBlockingAccessory(void *a1, const char *a2, ...)
{
  return _[a1 getMaxGPSUncertaintyForAggressiveBlockingAccessory];
}

id objc_msgSend_getMeanSeaLevelArrayCount(void *a1, const char *a2, ...)
{
  return _[a1 getMeanSeaLevelArrayCount];
}

id objc_msgSend_getMinContinuousFailureCountForBlockingAccessory(void *a1, const char *a2, ...)
{
  return _[a1 getMinContinuousFailureCountForBlockingAccessory];
}

id objc_msgSend_getMinContinuousSuccessCountForUnblockingAccessory(void *a1, const char *a2, ...)
{
  return _[a1 getMinContinuousSuccessCountForUnblockingAccessory];
}

id objc_msgSend_getMinor_(void *a1, const char *a2, ...)
{
  return [a1 getMinor:];
}

id objc_msgSend_getMitigationForCurrentlevel(void *a1, const char *a2, ...)
{
  return _[a1 getMitigationForCurrentlevel];
}

id objc_msgSend_getMonitoringRecordToNotifyClient(void *a1, const char *a2, ...)
{
  return _[a1 getMonitoringRecordToNotifyClient];
}

id objc_msgSend_getMslpDriftRate_withLastMslp_(void *a1, const char *a2, ...)
{
  return [a1 getMslpDriftRate:withLastMslp:];
}

id objc_msgSend_getMultiStatusFromData_(void *a1, const char *a2, ...)
{
  return [a1 getMultiStatusFromData:];
}

id objc_msgSend_getMultiStatusHawkeyeTask(void *a1, const char *a2, ...)
{
  return _[a1 getMultiStatusHawkeyeTask];
}

id objc_msgSend_getNMEASentence_(void *a1, const char *a2, ...)
{
  return [a1 getNMEASentence:];
}

id objc_msgSend_getNVPFromStats(void *a1, const char *a2, ...)
{
  return _[a1 getNVPFromStats];
}

id objc_msgSend_getNearOwnerTimeoutForDevice_checkingForNetwork_checkingHele_(void *a1, const char *a2, ...)
{
  return [a1 getNearOwnerTimeoutForDevice:checkingForNetwork:checkingHele:];
}

id objc_msgSend_getNearbyLocationGroups_withUpdatedPos_(void *a1, const char *a2, ...)
{
  return [a1 getNearbyLocationGroups:withUpdatedPos:];
}

id objc_msgSend_getNearbyLocationGroups_withUpdatedPos_nearLocationsOfInterest_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "getNearbyLocationGroups:withUpdatedPos:nearLocationsOfInterest:");
}

id objc_msgSend_getNextPacket(void *a1, const char *a2, ...)
{
  return _[a1 getNextPacket];
}

id objc_msgSend_getNumberFromString_(void *a1, const char *a2, ...)
{
  return [a1 getNumberFromString:];
}

id objc_msgSend_getNumberOfInputApsUsedInWifiTileForCoordinate_withReply_(void *a1, const char *a2, ...)
{
  return [a1 getNumberOfInputApsUsedInWifiTileForCoordinate:x0 withReply:x1];
}

id objc_msgSend_getOperatorName_error_(void *a1, const char *a2, ...)
{
  return [a1 getOperatorName:error];
}

id objc_msgSend_getOptedIn(void *a1, const char *a2, ...)
{
  return _[a1 getOptedIn];
}

id objc_msgSend_getPairedDevices(void *a1, const char *a2, ...)
{
  return _[a1 getPairedDevices];
}

id objc_msgSend_getPartnerIDFromDict_(void *a1, const char *a2, ...)
{
  return [a1 getPartnerIDFromDict:];
}

id objc_msgSend_getPedometerBinsAndHistoryWithReply_(void *a1, const char *a2, ...)
{
  return [a1 getPedometerBinsAndHistoryWithReply:];
}

id objc_msgSend_getPedometerCalibrationBins_withReply_(void *a1, const char *a2, ...)
{
  return [a1 getPedometerCalibrationBins:withReply:];
}

id objc_msgSend_getPendingTasks(void *a1, const char *a2, ...)
{
  return _[a1 getPendingTasks];
}

id objc_msgSend_getPersistentStoreDataCount(void *a1, const char *a2, ...)
{
  return _[a1 getPersistentStoreDataCount];
}

id objc_msgSend_getPersistentStoreDataCountForType_(void *a1, const char *a2, ...)
{
  return [a1 getPersistentStoreDataCountForType:];
}

id objc_msgSend_getPersonalizationInformation(void *a1, const char *a2, ...)
{
  return _[a1 getPersonalizationInformation];
}

id objc_msgSend_getPhoneNumberWithCompletion_completion_(void *a1, const char *a2, ...)
{
  return [a1 getPhoneNumberWithCompletion:completion:];
}

id objc_msgSend_getPowerAssertionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 getPowerAssertionIdentifier];
}

id objc_msgSend_getPredictedWalkDistanceBout_(void *a1, const char *a2, ...)
{
  return [a1 getPredictedWalkDistanceBout:];
}

id objc_msgSend_getPrivateNetworkSimInfoForContext_error_(void *a1, const char *a2, ...)
{
  return [a1 getPrivateNetworkSimInfoForContext:x0 error:&x1];
}

id objc_msgSend_getQuarterHour(void *a1, const char *a2, ...)
{
  return _[a1 getQuarterHour];
}

id objc_msgSend_getRandomBytes_(void *a1, const char *a2, ...)
{
  return [a1 getRandomBytes:];
}

id objc_msgSend_getRangeEndReasonForOpcode_data_(void *a1, const char *a2, ...)
{
  return [a1 getRangeEndReasonForOpcode:data];
}

id objc_msgSend_getRangingStatusForOpcode_data_(void *a1, const char *a2, ...)
{
  return [a1 getRangingStatusForOpcode:data:];
}

id objc_msgSend_getRavenSolutionAtMCTime_WithReply_(void *a1, const char *a2, ...)
{
  return [a1 getRavenSolutionAtMCTime:WithReply:];
}

id objc_msgSend_getRavenSolutionWithReply_(void *a1, const char *a2, ...)
{
  return [a1 getRavenSolutionWithReply:];
}

id objc_msgSend_getRecentLocation(void *a1, const char *a2, ...)
{
  return _[a1 getRecentLocation];
}

id objc_msgSend_getRecentWeatherData(void *a1, const char *a2, ...)
{
  return _[a1 getRecentWeatherData];
}

id objc_msgSend_getRecordEventBlock(void *a1, const char *a2, ...)
{
  return _[a1 getRecordEventBlock];
}

id objc_msgSend_getRegionFromMessage_(void *a1, const char *a2, ...)
{
  return [a1 getRegionFromMessage:];
}

id objc_msgSend_getRequestDict(void *a1, const char *a2, ...)
{
  return _[a1 getRequestDict];
}

id objc_msgSend_getResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return [a1 getResourceValue:x0 forKey:x1 error:x2];
}

id objc_msgSend_getResponseDataDictionary(void *a1, const char *a2, ...)
{
  return _[a1 getResponseDataDictionary];
}

id objc_msgSend_getResponseDictionary_forMessage_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "getResponseDictionary:forMessage:");
}

id objc_msgSend_getReturnValue_(void *a1, const char *a2, ...)
{
  return [a1 getReturnValue:];
}

id objc_msgSend_getSampleCount(void *a1, const char *a2, ...)
{
  return _[a1 getSampleCount];
}

id objc_msgSend_getSectionCoordinate_aroundLatitude_longitude_radius_sectionRadius_useInsideOutDownload_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "getSectionCoordinate:aroundLatitude:longitude:radius:sectionRadius:useInsideOutDownload:");
}

id objc_msgSend_getSectionNotDownloadedYet_maxSections_(void *a1, const char *a2, ...)
{
  return [a1 getSectionNotDownloadedYet:maxSections:];
}

id objc_msgSend_getSectionToBeRefreshed_maxSections_refreshPeriod_(void *a1, const char *a2, ...)
{
  return [a1 getSectionToBeRefreshed:maxSections:refreshPeriod:];
}

id objc_msgSend_getSerialNumberTask(void *a1, const char *a2, ...)
{
  return _[a1 getSerialNumberTask];
}

id objc_msgSend_getSessionIDWithPhoneNumber_sessionStartTime_(void *a1, const char *a2, ...)
{
  return [a1 getSessionIDWithPhoneNumber:sessionStartTime:];
}

id objc_msgSend_getSessionStartTimeFromDict_(void *a1, const char *a2, ...)
{
  return [a1 getSessionStartTimeFromDict:];
}

id objc_msgSend_getSettingsResetFollowUpState(void *a1, const char *a2, ...)
{
  return _[a1 getSettingsResetFollowUpState];
}

id objc_msgSend_getSharedInfoPrefixFromSessionID_partnerID_partnerAdrPublicKeyData_deviceSessionPrivateKey_(void *a1, const char *a2, ...)
{
  return [a1 getSharedInfoPrefixFromSessionID:partnerID:partnerAdrPublicKeyData:deviceSessionPrivateKey:];
}

id objc_msgSend_getSignalStrengthMeasurements_error_(void *a1, const char *a2, ...)
{
  return [a1 getSignalStrengthMeasurements:error];
}

id objc_msgSend_getSixMinuteWalkDistancePrediction_(void *a1, const char *a2, ...)
{
  return [a1 getSixMinuteWalkDistancePrediction];
}

id objc_msgSend_getSpeedThresholdForCarPlayDRModeCourseUncSettingInMPS(void *a1, const char *a2, ...)
{
  return _[a1 getSpeedThresholdForCarPlayDRModeCourseUncSettingInMPS];
}

id objc_msgSend_getStartLocation(void *a1, const char *a2, ...)
{
  return _[a1 getStartLocation];
}

id objc_msgSend_getStateForCentral_(void *a1, const char *a2, ...)
{
  return [a1 getStateForCentral:];
}

id objc_msgSend_getStateSummary(void *a1, const char *a2, ...)
{
  return _[a1 getStateSummary];
}

id objc_msgSend_getStewieSupportWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 getStewieSupportWithCompletion:];
}

id objc_msgSend_getStoreURLFromDirectory_(void *a1, const char *a2, ...)
{
  return [a1 getStoreURLFromDirectory:];
}

id objc_msgSend_getStoredLocationsBetweenStartTime_endTime_apartFromEachOther_lyingWithinTimeIntervals_withReply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "getStoredLocationsBetweenStartTime:endTime:apartFromEachOther:lyingWithinTimeIntervals:withReply:");
}

id objc_msgSend_getStoredVisit_betweenStartTime_andEndTime_withCompletionBlock_(void *a1, const char *a2, ...)
{
  return [a1 getStoredVisit:x0 betweenStartTime:x1 andEndTime:x2 withCompletionBlock:x3];
}

id objc_msgSend_getStrideCalEntry_(void *a1, const char *a2, ...)
{
  return [a1 getStrideCalEntry:];
}

id objc_msgSend_getStringFromNumber_(void *a1, const char *a2, ...)
{
  return [a1 getStringFromNumber:];
}

id objc_msgSend_getStringSessionId_(void *a1, const char *a2, ...)
{
  return [a1 getStringSessionId:];
}

id objc_msgSend_getStringSettingsKeys(void *a1, const char *a2, ...)
{
  return _[a1 getStringSettingsKeys];
}

id objc_msgSend_getStructSetting_(void *a1, const char *a2, ...)
{
  return [a1 getStructSetting:];
}

id objc_msgSend_getSubscriptionInfo_(void *a1, const char *a2, ...)
{
  return [a1 getSubscriptionInfo:];
}

id objc_msgSend_getSyncEngineMetadata(void *a1, const char *a2, ...)
{
  return _[a1 getSyncEngineMetadata];
}

id objc_msgSend_getSynchronousRemoteObjectProxy(void *a1, const char *a2, ...)
{
  return _[a1 getSynchronousRemoteObjectProxy];
}

id objc_msgSend_getSysdiagnoseOutputFilename(void *a1, const char *a2, ...)
{
  return _[a1 getSysdiagnoseOutputFilename];
}

id objc_msgSend_getSysdiagnoseOutputPath(void *a1, const char *a2, ...)
{
  return _[a1 getSysdiagnoseOutputPath];
}

id objc_msgSend_getSystemFieldsFromCKRecord_(void *a1, const char *a2, ...)
{
  return [a1 getSystemFieldsFromCKRecord:];
}

id objc_msgSend_getTasksWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 getTasksWithCompletionHandler:];
}

id objc_msgSend_getTimeOfDayForAnalytics(void *a1, const char *a2, ...)
{
  return _[a1 getTimeOfDayForAnalytics];
}

id objc_msgSend_getTotalDBSizeInMB(void *a1, const char *a2, ...)
{
  return _[a1 getTotalDBSizeInMB];
}

id objc_msgSend_getTrackLengthSecondsForSource_(void *a1, const char *a2, ...)
{
  return [a1 getTrackLengthSecondsForSource:];
}

id objc_msgSend_getTrackingAvoidanceSettingsWithOTASettings_(void *a1, const char *a2, ...)
{
  return [a1 getTrackingAvoidanceSettingsWithOTASettings:];
}

id objc_msgSend_getTranslatedGizmoKeyForCompanionClient_(void *a1, const char *a2, ...)
{
  return [a1 getTranslatedGizmoKeyForCompanionClient:];
}

id objc_msgSend_getTravelVelocity_withCurrLocation_andNextLocation_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "getTravelVelocity:withCurrLocation:andNextLocation:");
}

id objc_msgSend_getUUID(void *a1, const char *a2, ...)
{
  return _[a1 getUUID];
}

id objc_msgSend_getUUIDBytes_(void *a1, const char *a2, ...)
{
  return [a1 getUUIDBytes:];
}

id objc_msgSend_getUarpAccessoryForDevice_(void *a1, const char *a2, ...)
{
  return [a1 getUarpAccessoryForDevice:];
}

id objc_msgSend_getUnsignedIntegerSettingsKeys(void *a1, const char *a2, ...)
{
  return _[a1 getUnsignedIntegerSettingsKeys];
}

id objc_msgSend_getUserRecordIDName(void *a1, const char *a2, ...)
{
  return _[a1 getUserRecordIDName];
}

id objc_msgSend_getVoiceLinkQualityMetric_completion_(void *a1, const char *a2, ...)
{
  return [a1 getVoiceLinkQualityMetric:completion:];
}

id objc_msgSend_getWalkingSpeedStrideCal_(void *a1, const char *a2, ...)
{
  return [a1 getWalkingSpeedStrideCal];
}

id objc_msgSend_getWorkingDirectory(void *a1, const char *a2, ...)
{
  return _[a1 getWorkingDirectory];
}

id objc_msgSend_getiCloudIdentifierTask(void *a1, const char *a2, ...)
{
  return _[a1 getiCloudIdentifierTask];
}

id objc_msgSend_gizmoDeltaSyncObjects(void *a1, const char *a2, ...)
{
  return _[a1 gizmoDeltaSyncObjects];
}

id objc_msgSend_gizmoDeltaSyncObjectsWaitingForAck(void *a1, const char *a2, ...)
{
  return _[a1 gizmoDeltaSyncObjectsWaitingForAck];
}

id objc_msgSend_gmtBirthdate(void *a1, const char *a2, ...)
{
  return _[a1 gmtBirthdate];
}

id objc_msgSend_gnssOdometerInfo(void *a1, const char *a2, ...)
{
  return _[a1 gnssOdometerInfo];
}

id objc_msgSend_goodSurfaceCalibration_(void *a1, const char *a2, ...)
{
  return [a1 goodSurfaceCalibration:];
}

id objc_msgSend_gpsAssistanceRequested(void *a1, const char *a2, ...)
{
  return _[a1 gpsAssistanceRequested];
}

id objc_msgSend_gpsEstimateAvailable_(void *a1, const char *a2, ...)
{
  return [a1 gpsEstimateAvailable:];
}

id objc_msgSend_gpsFusionRequested(void *a1, const char *a2, ...)
{
  return _[a1 gpsFusionRequested];
}

id objc_msgSend_gpsLocation(void *a1, const char *a2, ...)
{
  return _[a1 gpsLocation];
}

id objc_msgSend_gpsLocationBuffer(void *a1, const char *a2, ...)
{
  return _[a1 gpsLocationBuffer];
}

id objc_msgSend_gpsLocationBufferFiltered(void *a1, const char *a2, ...)
{
  return _[a1 gpsLocationBufferFiltered];
}

id objc_msgSend_gpsOdometerBuffer(void *a1, const char *a2, ...)
{
  return _[a1 gpsOdometerBuffer];
}

id objc_msgSend_gpsSignalQualityAvailable_(void *a1, const char *a2, ...)
{
  return [a1 gpsSignalQualityAvailable:];
}

id objc_msgSend_gpsSource(void *a1, const char *a2, ...)
{
  return _[a1 gpsSource];
}

id objc_msgSend_grade(void *a1, const char *a2, ...)
{
  return _[a1 grade];
}

id objc_msgSend_gradeMean(void *a1, const char *a2, ...)
{
  return _[a1 gradeMean];
}

id objc_msgSend_gradeType(void *a1, const char *a2, ...)
{
  return _[a1 gradeType];
}

id objc_msgSend_gradeVariance(void *a1, const char *a2, ...)
{
  return _[a1 gradeVariance];
}

id objc_msgSend_gradient(void *a1, const char *a2, ...)
{
  return _[a1 gradient];
}

id objc_msgSend_gradientValidity(void *a1, const char *a2, ...)
{
  return _[a1 gradientValidity];
}

id objc_msgSend_gregorianBirthdayModifiedDate(void *a1, const char *a2, ...)
{
  return _[a1 gregorianBirthdayModifiedDate];
}

id objc_msgSend_groundAltitude(void *a1, const char *a2, ...)
{
  return _[a1 groundAltitude];
}

id objc_msgSend_groundAltitudeUncertainty(void *a1, const char *a2, ...)
{
  return _[a1 groundAltitudeUncertainty];
}

id objc_msgSend_groupId(void *a1, const char *a2, ...)
{
  return _[a1 groupId];
}

id objc_msgSend_groupMaintDeltas(void *a1, const char *a2, ...)
{
  return _[a1 groupMaintDeltas];
}

id objc_msgSend_groupPartNumber(void *a1, const char *a2, ...)
{
  return _[a1 groupPartNumber];
}

id objc_msgSend_groupUuid(void *a1, const char *a2, ...)
{
  return _[a1 groupUuid];
}

id objc_msgSend_guidanceLevel(void *a1, const char *a2, ...)
{
  return _[a1 guidanceLevel];
}

id objc_msgSend_gyroDataFromDate_toDate_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "gyroDataFromDate:toDate:")];
}

id objc_msgSend_handleAverageRsrpUpdate_(void *a1, const char *a2, ...)
{
  return [a1 handleAverageRsrpUpdate:];
}

id objc_msgSend_handleBoutResults_(void *a1, const char *a2, ...)
{
  return [a1 handleBoutResults:];
}

id objc_msgSend_handleCompanionConnectionUpdateWithState_(void *a1, const char *a2, ...)
{
  return [a1 handleCompanionConnectionUpdateWithState:];
}

id objc_msgSend_handleCompletionForPoshTask_withCompletionCommand_onDevice_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleCompletionForPoshTask:withCompletionCommand:onDevice:");
}

id objc_msgSend_handleConfigurationResponse_data_url_didCompleteWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleConfigurationResponse:data:url:didCompleteWithError:");
}

id objc_msgSend_handleConnectedPeripheral_forDevice_(void *a1, const char *a2, ...)
{
  return [a1 handleConnectedPeripheral:forDevice:];
}

id objc_msgSend_handleConnectionFailureForPeripheral_withErrorCode_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleConnectionFailureForPeripheral:withErrorCode:");
}

id objc_msgSend_handleDisconnectionDuringFirmwareUpdate(void *a1, const char *a2, ...)
{
  return _[a1 handleDisconnectionDuringFirmwareUpdate];
}

id objc_msgSend_handleDurianData_opcode_ackOpcode_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleDurianData:opcode:ackOpcode:");
}

id objc_msgSend_handleEntryExitDelegateCallbackForRegion_withState_(void *a1, const char *a2, ...)
{
  return [a1 handleEntryExitDelegateCallbackForRegion:withState:];
}

id objc_msgSend_handleError_inSyncSession_(void *a1, const char *a2, ...)
{
  return [a1 handleError:inSyncSession:];
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_handleFailureToConnectWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleFailureToConnectWithError:");
}

id objc_msgSend_handleFetchedInputRecord_(void *a1, const char *a2, ...)
{
  return [a1 handleFetchedInputRecord:];
}

id objc_msgSend_handleFetchedOutputRecord_(void *a1, const char *a2, ...)
{
  return [a1 handleFetchedOutputRecord:];
}

id objc_msgSend_handleFetchedRecordDeletion_(void *a1, const char *a2, ...)
{
  return [a1 handleFetchedRecordDeletion:];
}

id objc_msgSend_handleFetchedRecordModification_(void *a1, const char *a2, ...)
{
  return [a1 handleFetchedRecordModification:];
}

id objc_msgSend_handleForIdentifier_error_(void *a1, const char *a2, ...)
{
  return [a1 handleForIdentifier:x0 error:&x1];
}

id objc_msgSend_handleForPredicate_error_(void *a1, const char *a2, ...)
{
  return [a1 handleForPredicate:error:];
}

id objc_msgSend_handleFoundDevice_(void *a1, const char *a2, ...)
{
  return [a1 handleFoundDevice:];
}

id objc_msgSend_handleGetRegionStateOnCompanion_(void *a1, const char *a2, ...)
{
  return [a1 handleGetRegionStateOnCompanion:];
}

id objc_msgSend_handleGroupStatusReply_(void *a1, const char *a2, ...)
{
  return [a1 handleGroupStatusReply:];
}

id objc_msgSend_handleHandoffTagsOnCompanion_forDeviceID_(void *a1, const char *a2, ...)
{
  return [a1 handleHandoffTagsOnCompanion:forDeviceID:];
}

id objc_msgSend_handleIngestResponse_data_url_didCompleteWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleIngestResponse:data:url:didCompleteWithError:");
}

id objc_msgSend_handleInvalidData_(void *a1, const char *a2, ...)
{
  return [a1 handleInvalidData:];
}

id objc_msgSend_handleKeyFetchFailureForDevice_withError_(void *a1, const char *a2, ...)
{
  return [a1 handleKeyFetchFailureForDevice:withError:];
}

id objc_msgSend_handleKeyRollData_(void *a1, const char *a2, ...)
{
  return [a1 handleKeyRollData:];
}

id objc_msgSend_handleLiveActivityUpdate_(void *a1, const char *a2, ...)
{
  return [a1 handleLiveActivityUpdate:];
}

id objc_msgSend_handleLocationData_(void *a1, const char *a2, ...)
{
  return [a1 handleLocationData:];
}

id objc_msgSend_handleMessageError_(void *a1, const char *a2, ...)
{
  return [a1 handleMessageError:];
}

id objc_msgSend_handleMessageResyncRequestWithMessageData_(void *a1, const char *a2, ...)
{
  return [a1 handleMessageResyncRequestWithMessageData:];
}

id objc_msgSend_handleMessageResyncResponseWithMessageData_(void *a1, const char *a2, ...)
{
  return [a1 handleMessageResyncResponseWithMessageData:];
}

id objc_msgSend_handleMessageSendError_identifier_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleMessageSendError:identifier:");
}

id objc_msgSend_handleMessageSendSuccessForIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 handleMessageSendSuccessForIdentifier:];
}

id objc_msgSend_handleMessageUsageUpdateWithMessageData_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleMessageUsageUpdateWithMessageData:");
}

id objc_msgSend_handleMultiDownloading(void *a1, const char *a2, ...)
{
  return _[a1 handleMultiDownloading];
}

id objc_msgSend_handleMultiStatusReply_(void *a1, const char *a2, ...)
{
  return [a1 handleMultiStatusReply:];
}

id objc_msgSend_handleMutexAlreadyHeldOnTask_(void *a1, const char *a2, ...)
{
  return [a1 handleMutexAlreadyHeldOnTask:];
}

id objc_msgSend_handleMutexErrorOnAction_(void *a1, const char *a2, ...)
{
  return [a1 handleMutexErrorOnAction:];
}

id objc_msgSend_handleNewLocation_(void *a1, const char *a2, ...)
{
  return [a1 handleNewLocation:];
}

id objc_msgSend_handleNotificationMetrics_(void *a1, const char *a2, ...)
{
  return [a1 handleNotificationMetrics:];
}

id objc_msgSend_handleOdometer_(void *a1, const char *a2, ...)
{
  return [a1 handleOdometer:];
}

id objc_msgSend_handlePair(void *a1, const char *a2, ...)
{
  return _[a1 handlePair];
}

id objc_msgSend_handlePairToDeviceWithPairingID_(void *a1, const char *a2, ...)
{
  return [a1 handlePairToDeviceWithPairingID:];
}

id objc_msgSend_handlePairing(void *a1, const char *a2, ...)
{
  return _[a1 handlePairing];
}

id objc_msgSend_handleProvisionalIntermediationForService_forClientKey_at_withReply_(void *a1, const char *a2, ...)
{
  return [a1 handleProvisionalIntermediationForService:forClientKey:at:withReply:];
}

id objc_msgSend_handlePublisherResponse_(void *a1, const char *a2, ...)
{
  return [a1 handlePublisherResponse:];
}

id objc_msgSend_handleQuickSwitch(void *a1, const char *a2, ...)
{
  return _[a1 handleQuickSwitch];
}

id objc_msgSend_handleReachability_(void *a1, const char *a2, ...)
{
  return [a1 handleReachability:];
}

id objc_msgSend_handleRegisterWithController_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleRegisterWithController:");
}

id objc_msgSend_handleRegistrationResponse_data_url_didCompleteWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleRegistrationResponse:data:url:didCompleteWithError:");
}

id objc_msgSend_handleResponse_(void *a1, const char *a2, ...)
{
  return [a1 handleResponse:];
}

id objc_msgSend_handleRetryHealthKitDeleteSamples_(void *a1, const char *a2, ...)
{
  return [a1 handleRetryHealthKitDeleteSamples:];
}

id objc_msgSend_handleServerRecordChanged_(void *a1, const char *a2, ...)
{
  return [a1 handleServerRecordChanged:];
}

id objc_msgSend_handleTokenFetchForDevice_onCondition_(void *a1, const char *a2, ...)
{
  return [a1 handleTokenFetchForDevice:onCondition:];
}

id objc_msgSend_handleUnRegisterController(void *a1, const char *a2, ...)
{
  return _[a1 handleUnRegisterController];
}

id objc_msgSend_handleUnknownItem_(void *a1, const char *a2, ...)
{
  return [a1 handleUnknownItem:];
}

id objc_msgSend_handleUnpair(void *a1, const char *a2, ...)
{
  return _[a1 handleUnpair];
}

id objc_msgSend_handleUnpairing(void *a1, const char *a2, ...)
{
  return _[a1 handleUnpairing];
}

id objc_msgSend_handleUpdatesToSim_Rat_WifiEmergency_bandInfo_(void *a1, const char *a2, ...)
{
  return [a1 handleUpdatesToSim:Rat:WifiEmergency:bandInfo:];
}

id objc_msgSend_handleUplinkFrequency_(void *a1, const char *a2, ...)
{
  return [a1 handleUplinkFrequency:];
}

id objc_msgSend_handleVlqmForActiveCall_(void *a1, const char *a2, ...)
{
  return [a1 handleVlqmForActiveCall];
}

id objc_msgSend_handleZeroActiveWatch(void *a1, const char *a2, ...)
{
  return _[a1 handleZeroActiveWatch];
}

id objc_msgSend_handleZoneDeleted_(void *a1, const char *a2, ...)
{
  return [a1 handleZoneDeleted:];
}

id objc_msgSend_handleZoneNotFound_(void *a1, const char *a2, ...)
{
  return [a1 handleZoneNotFound:];
}

id objc_msgSend_handleZonePurge_(void *a1, const char *a2, ...)
{
  return [a1 handleZonePurge:];
}

id objc_msgSend_handler(void *a1, const char *a2, ...)
{
  return _[a1 handler];
}

id objc_msgSend_handoffTag(void *a1, const char *a2, ...)
{
  return _[a1 handoffTag];
}

id objc_msgSend_hardwareRevision(void *a1, const char *a2, ...)
{
  return _[a1 hardwareRevision];
}

id objc_msgSend_hardwareType(void *a1, const char *a2, ...)
{
  return _[a1 hardwareType];
}

id objc_msgSend_hardwareVersion(void *a1, const char *a2, ...)
{
  return _[a1 hardwareVersion];
}

id objc_msgSend_hasActiveAggressiveScan(void *a1, const char *a2, ...)
{
  return _[a1 hasActiveAggressiveScan];
}

id objc_msgSend_hasActiveBTFindingScan(void *a1, const char *a2, ...)
{
  return _[a1 hasActiveBTFindingScan];
}

id objc_msgSend_hasAltitude(void *a1, const char *a2, ...)
{
  return _[a1 hasAltitude];
}

id objc_msgSend_hasAopPath(void *a1, const char *a2, ...)
{
  return _[a1 hasAopPath];
}

id objc_msgSend_hasArfcn(void *a1, const char *a2, ...)
{
  return _[a1 hasArfcn];
}

id objc_msgSend_hasArrivalDate(void *a1, const char *a2, ...)
{
  return _[a1 hasArrivalDate];
}

id objc_msgSend_hasAtLeastOneClientWithCLActivityTypeFitness(void *a1, const char *a2, ...)
{
  return _[a1 hasAtLeastOneClientWithCLActivityTypeFitness];
}

id objc_msgSend_hasAuthMask(void *a1, const char *a2, ...)
{
  return _[a1 hasAuthMask];
}

id objc_msgSend_hasBandclass(void *a1, const char *a2, ...)
{
  return _[a1 hasBandclass];
}

id objc_msgSend_hasBsid(void *a1, const char *a2, ...)
{
  return _[a1 hasBsid];
}

id objc_msgSend_hasBytesAvailable(void *a1, const char *a2, ...)
{
  return _[a1 hasBytesAvailable];
}

id objc_msgSend_hasCellID(void *a1, const char *a2, ...)
{
  return _[a1 hasCellID];
}

id objc_msgSend_hasChanges(void *a1, const char *a2, ...)
{
  return _[a1 hasChanges];
}

id objc_msgSend_hasChannel(void *a1, const char *a2, ...)
{
  return _[a1 hasChannel];
}

id objc_msgSend_hasConfidence(void *a1, const char *a2, ...)
{
  return _[a1 hasConfidence];
}

id objc_msgSend_hasCoordinate(void *a1, const char *a2, ...)
{
  return _[a1 hasCoordinate];
}

id objc_msgSend_hasCorrectiveCompensationMask(void *a1, const char *a2, ...)
{
  return _[a1 hasCorrectiveCompensationMask];
}

id objc_msgSend_hasCyclingToNonFitnessSeconds(void *a1, const char *a2, ...)
{
  return _[a1 hasCyclingToNonFitnessSeconds];
}

id objc_msgSend_hasDeltaDistance(void *a1, const char *a2, ...)
{
  return _[a1 hasDeltaDistance];
}

id objc_msgSend_hasDeltaDistanceAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 hasDeltaDistanceAccuracy];
}

id objc_msgSend_hasDeltaPositionX(void *a1, const char *a2, ...)
{
  return _[a1 hasDeltaPositionX];
}

id objc_msgSend_hasDeltaPositionY(void *a1, const char *a2, ...)
{
  return _[a1 hasDeltaPositionY];
}

id objc_msgSend_hasDepartureDate(void *a1, const char *a2, ...)
{
  return _[a1 hasDepartureDate];
}

id objc_msgSend_hasDestination(void *a1, const char *a2, ...)
{
  return _[a1 hasDestination];
}

id objc_msgSend_hasDestinationName(void *a1, const char *a2, ...)
{
  return _[a1 hasDestinationName];
}

id objc_msgSend_hasEastLng(void *a1, const char *a2, ...)
{
  return _[a1 hasEastLng];
}

id objc_msgSend_hasEstimate(void *a1, const char *a2, ...)
{
  return _[a1 hasEstimate];
}

id objc_msgSend_hasExecutedScheduleFromCellularConnectivity(void *a1, const char *a2, ...)
{
  return _[a1 hasExecutedScheduleFromCellularConnectivity];
}

id objc_msgSend_hasExecutedScheduleFromWifiConnectivity(void *a1, const char *a2, ...)
{
  return _[a1 hasExecutedScheduleFromWifiConnectivity];
}

id objc_msgSend_hasExpirationAgeSecs(void *a1, const char *a2, ...)
{
  return _[a1 hasExpirationAgeSecs];
}

id objc_msgSend_hasGPS(void *a1, const char *a2, ...)
{
  return _[a1 hasGPS];
}

id objc_msgSend_hasGenerationTimeSecs(void *a1, const char *a2, ...)
{
  return _[a1 hasGenerationTimeSecs];
}

id objc_msgSend_hasGroundAltitude(void *a1, const char *a2, ...)
{
  return _[a1 hasGroundAltitude];
}

id objc_msgSend_hasGroundAltitudeUncertainty(void *a1, const char *a2, ...)
{
  return _[a1 hasGroundAltitudeUncertainty];
}

id objc_msgSend_hasGuidanceLevel(void *a1, const char *a2, ...)
{
  return _[a1 hasGuidanceLevel];
}

id objc_msgSend_hasInfoMask(void *a1, const char *a2, ...)
{
  return _[a1 hasInfoMask];
}

id objc_msgSend_hasIsAllowOverCellular(void *a1, const char *a2, ...)
{
  return _[a1 hasIsAllowOverCellular];
}

id objc_msgSend_hasKey(void *a1, const char *a2, ...)
{
  return _[a1 hasKey];
}

id objc_msgSend_hasLineID(void *a1, const char *a2, ...)
{
  return _[a1 hasLineID];
}

id objc_msgSend_hasLocation(void *a1, const char *a2, ...)
{
  return _[a1 hasLocation];
}

id objc_msgSend_hasLoiAtFence(void *a1, const char *a2, ...)
{
  return _[a1 hasLoiAtFence];
}

id objc_msgSend_hasMaxAbsSlope(void *a1, const char *a2, ...)
{
  return _[a1 hasMaxAbsSlope];
}

id objc_msgSend_hasMcc(void *a1, const char *a2, ...)
{
  return _[a1 hasMcc];
}

id objc_msgSend_hasMnc(void *a1, const char *a2, ...)
{
  return _[a1 hasMnc];
}

id objc_msgSend_hasMoreData(void *a1, const char *a2, ...)
{
  return _[a1 hasMoreData];
}

id objc_msgSend_hasMotionActivityDebounceParameters(void *a1, const char *a2, ...)
{
  return _[a1 hasMotionActivityDebounceParameters];
}

id objc_msgSend_hasNavigationState(void *a1, const char *a2, ...)
{
  return _[a1 hasNavigationState];
}

id objc_msgSend_hasNid(void *a1, const char *a2, ...)
{
  return _[a1 hasNid];
}

id objc_msgSend_hasNonFitnessToCyclingSeconds(void *a1, const char *a2, ...)
{
  return _[a1 hasNonFitnessToCyclingSeconds];
}

id objc_msgSend_hasNonFitnessToRunningSeconds(void *a1, const char *a2, ...)
{
  return _[a1 hasNonFitnessToRunningSeconds];
}

id objc_msgSend_hasNorthLat(void *a1, const char *a2, ...)
{
  return _[a1 hasNorthLat];
}

id objc_msgSend_hasNorthWestLatitude(void *a1, const char *a2, ...)
{
  return _[a1 hasNorthWestLatitude];
}

id objc_msgSend_hasNorthWestLongitude(void *a1, const char *a2, ...)
{
  return _[a1 hasNorthWestLongitude];
}

id objc_msgSend_hasNotification(void *a1, const char *a2, ...)
{
  return _[a1 hasNotification];
}

id objc_msgSend_hasNrarfcn(void *a1, const char *a2, ...)
{
  return _[a1 hasNrarfcn];
}

id objc_msgSend_hasNumZaxisHarvestTraces(void *a1, const char *a2, ...)
{
  return _[a1 hasNumZaxisHarvestTraces];
}

id objc_msgSend_hasOdometer(void *a1, const char *a2, ...)
{
  return _[a1 hasOdometer];
}

id objc_msgSend_hasOrigin(void *a1, const char *a2, ...)
{
  return _[a1 hasOrigin];
}

id objc_msgSend_hasPid(void *a1, const char *a2, ...)
{
  return _[a1 hasPid];
}

id objc_msgSend_hasPnoffset(void *a1, const char *a2, ...)
{
  return _[a1 hasPnoffset];
}

id objc_msgSend_hasPowerAssertion(void *a1, const char *a2, ...)
{
  return _[a1 hasPowerAssertion];
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return [a1 hasPrefix:];
}

id objc_msgSend_hasPreparedForFirmwareDownload(void *a1, const char *a2, ...)
{
  return _[a1 hasPreparedForFirmwareDownload];
}

id objc_msgSend_hasPressureChangeFrom_to_(void *a1, const char *a2, ...)
{
  return [a1 hasPressureChangeFrom:to:];
}

id objc_msgSend_hasPsc(void *a1, const char *a2, ...)
{
  return _[a1 hasPsc];
}

id objc_msgSend_hasRawCoordinateLatitude(void *a1, const char *a2, ...)
{
  return _[a1 hasRawCoordinateLatitude];
}

id objc_msgSend_hasRawCoordinateLongitude(void *a1, const char *a2, ...)
{
  return _[a1 hasRawCoordinateLongitude];
}

id objc_msgSend_hasReach(void *a1, const char *a2, ...)
{
  return _[a1 hasReach];
}

id objc_msgSend_hasRegionalPrefetchMaxFloorCount(void *a1, const char *a2, ...)
{
  return _[a1 hasRegionalPrefetchMaxFloorCount];
}

id objc_msgSend_hasRegisteredForCellularConnectivity(void *a1, const char *a2, ...)
{
  return _[a1 hasRegisteredForCellularConnectivity];
}

id objc_msgSend_hasRegisteredForWifiConnectivity(void *a1, const char *a2, ...)
{
  return _[a1 hasRegisteredForWifiConnectivity];
}

id objc_msgSend_hasRouteSharingPolicyLongFormVideo_(void *a1, const char *a2, ...)
{
  return [a1 hasRouteSharingPolicyLongFormVideo:];
}

id objc_msgSend_hasRunningToNonFitnessSeconds(void *a1, const char *a2, ...)
{
  return _[a1 hasRunningToNonFitnessSeconds];
}

id objc_msgSend_hasScheduledArrival(void *a1, const char *a2, ...)
{
  return _[a1 hasScheduledArrival];
}

id objc_msgSend_hasScheduledDeparture(void *a1, const char *a2, ...)
{
  return _[a1 hasScheduledDeparture];
}

id objc_msgSend_hasScore(void *a1, const char *a2, ...)
{
  return _[a1 hasScore];
}

id objc_msgSend_hasSentAssetData(void *a1, const char *a2, ...)
{
  return _[a1 hasSentAssetData];
}

id objc_msgSend_hasSentCRCPacket(void *a1, const char *a2, ...)
{
  return _[a1 hasSentCRCPacket];
}

id objc_msgSend_hasSessionAttributes(void *a1, const char *a2, ...)
{
  return _[a1 hasSessionAttributes];
}

id objc_msgSend_hasSessionTimedOut_(void *a1, const char *a2, ...)
{
  return [a1 hasSessionTimedOut:];
}

id objc_msgSend_hasSid(void *a1, const char *a2, ...)
{
  return _[a1 hasSid];
}

id objc_msgSend_hasSignificantPrior(void *a1, const char *a2, ...)
{
  return _[a1 hasSignificantPrior];
}

id objc_msgSend_hasSlope(void *a1, const char *a2, ...)
{
  return _[a1 hasSlope];
}

id objc_msgSend_hasSouthEastLatitude(void *a1, const char *a2, ...)
{
  return _[a1 hasSouthEastLatitude];
}

id objc_msgSend_hasSouthEastLongitude(void *a1, const char *a2, ...)
{
  return _[a1 hasSouthEastLongitude];
}

id objc_msgSend_hasSouthLat(void *a1, const char *a2, ...)
{
  return _[a1 hasSouthLat];
}

id objc_msgSend_hasStartTime(void *a1, const char *a2, ...)
{
  return _[a1 hasStartTime];
}

id objc_msgSend_hasStopFrom(void *a1, const char *a2, ...)
{
  return _[a1 hasStopFrom];
}

id objc_msgSend_hasStopID(void *a1, const char *a2, ...)
{
  return _[a1 hasStopID];
}

id objc_msgSend_hasStopTime(void *a1, const char *a2, ...)
{
  return _[a1 hasStopTime];
}

id objc_msgSend_hasStopTo(void *a1, const char *a2, ...)
{
  return _[a1 hasStopTo];
}

id objc_msgSend_hasStrideCal(void *a1, const char *a2, ...)
{
  return _[a1 hasStrideCal];
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return [a1 hasSuffix:];
}

id objc_msgSend_hasSuppressShowingInSettings(void *a1, const char *a2, ...)
{
  return _[a1 hasSuppressShowingInSettings];
}

id objc_msgSend_hasTacID(void *a1, const char *a2, ...)
{
  return _[a1 hasTacID];
}

id objc_msgSend_hasTerrainElevation(void *a1, const char *a2, ...)
{
  return _[a1 hasTerrainElevation];
}

id objc_msgSend_hasTileType(void *a1, const char *a2, ...)
{
  return _[a1 hasTileType];
}

id objc_msgSend_hasTileX(void *a1, const char *a2, ...)
{
  return _[a1 hasTileX];
}

id objc_msgSend_hasTileY(void *a1, const char *a2, ...)
{
  return _[a1 hasTileY];
}

id objc_msgSend_hasTimestampGps(void *a1, const char *a2, ...)
{
  return _[a1 hasTimestampGps];
}

id objc_msgSend_hasTrackedTransportType(void *a1, const char *a2, ...)
{
  return _[a1 hasTrackedTransportType];
}

id objc_msgSend_hasTransportType(void *a1, const char *a2, ...)
{
  return _[a1 hasTransportType];
}

id objc_msgSend_hasTravelTime(void *a1, const char *a2, ...)
{
  return _[a1 hasTravelTime];
}

id objc_msgSend_hasTropicalSavannaBranchCount(void *a1, const char *a2, ...)
{
  return _[a1 hasTropicalSavannaBranchCount];
}

id objc_msgSend_hasTropicalSavannaProximity(void *a1, const char *a2, ...)
{
  return _[a1 hasTropicalSavannaProximity];
}

id objc_msgSend_hasTropicalSavannaTreeId(void *a1, const char *a2, ...)
{
  return _[a1 hasTropicalSavannaTreeId];
}

id objc_msgSend_hasUarfcn(void *a1, const char *a2, ...)
{
  return _[a1 hasUarfcn];
}

id objc_msgSend_hasValidData(void *a1, const char *a2, ...)
{
  return _[a1 hasValidData];
}

id objc_msgSend_hasValue(void *a1, const char *a2, ...)
{
  return _[a1 hasValue];
}

id objc_msgSend_hasValueForKey_(void *a1, const char *a2, ...)
{
  return [a1 hasValueForKey:];
}

id objc_msgSend_hasValueForKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 hasValueForKey:atKeyPath:];
}

id objc_msgSend_hasVersion(void *a1, const char *a2, ...)
{
  return _[a1 hasVersion];
}

id objc_msgSend_hasVerticalAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 hasVerticalAccuracy];
}

id objc_msgSend_hasWestLng(void *a1, const char *a2, ...)
{
  return _[a1 hasWestLng];
}

id objc_msgSend_hasZoneid(void *a1, const char *a2, ...)
{
  return _[a1 hasZoneid];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_hashedPublicKey(void *a1, const char *a2, ...)
{
  return _[a1 hashedPublicKey];
}

id objc_msgSend_hawkeyeOpcode(void *a1, const char *a2, ...)
{
  return _[a1 hawkeyeOpcode];
}

id objc_msgSend_hawkeyePayload(void *a1, const char *a2, ...)
{
  return _[a1 hawkeyePayload];
}

id objc_msgSend_hawkeyeTestMode(void *a1, const char *a2, ...)
{
  return _[a1 hawkeyeTestMode];
}

id objc_msgSend_healthWrapConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 healthWrapConfiguration];
}

id objc_msgSend_height(void *a1, const char *a2, ...)
{
  return _[a1 height];
}

id objc_msgSend_heightModifiedDate(void *a1, const char *a2, ...)
{
  return _[a1 heightModifiedDate];
}

id objc_msgSend_hexString(void *a1, const char *a2, ...)
{
  return _[a1 hexString];
}

id objc_msgSend_hidDevice(void *a1, const char *a2, ...)
{
  return _[a1 hidDevice];
}

id objc_msgSend_hint(void *a1, const char *a2, ...)
{
  return _[a1 hint];
}

id objc_msgSend_hints(void *a1, const char *a2, ...)
{
  return _[a1 hints];
}

id objc_msgSend_historicalFenceStateForFence_(void *a1, const char *a2, ...)
{
  return [a1 historicalFenceStateForFence:];
}

id objc_msgSend_historicalFenceStateForFenceName_(void *a1, const char *a2, ...)
{
  return [a1 historicalFenceStateForFenceName:];
}

id objc_msgSend_historicalFenceStates(void *a1, const char *a2, ...)
{
  return _[a1 historicalFenceStates];
}

id objc_msgSend_homeArchive(void *a1, const char *a2, ...)
{
  return _[a1 homeArchive];
}

id objc_msgSend_horizontalAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 horizontalAccuracy];
}

id objc_msgSend_horizontalUncertainty(void *a1, const char *a2, ...)
{
  return _[a1 horizontalUncertainty];
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _[a1 host];
}

id objc_msgSend_hour(void *a1, const char *a2, ...)
{
  return _[a1 hour];
}

id objc_msgSend_hr(void *a1, const char *a2, ...)
{
  return _[a1 hr];
}

id objc_msgSend_hrCadenceAgreementMean(void *a1, const char *a2, ...)
{
  return _[a1 hrCadenceAgreementMean];
}

id objc_msgSend_hrCadenceAgreementVariance(void *a1, const char *a2, ...)
{
  return _[a1 hrCadenceAgreementVariance];
}

id objc_msgSend_hrConfidence(void *a1, const char *a2, ...)
{
  return _[a1 hrConfidence];
}

id objc_msgSend_hrConfidenceMean(void *a1, const char *a2, ...)
{
  return _[a1 hrConfidenceMean];
}

id objc_msgSend_hrConfidenceVariance(void *a1, const char *a2, ...)
{
  return _[a1 hrConfidenceVariance];
}

id objc_msgSend_hrMax(void *a1, const char *a2, ...)
{
  return _[a1 hrMax];
}

id objc_msgSend_hrMean(void *a1, const char *a2, ...)
{
  return _[a1 hrMean];
}

id objc_msgSend_hrMin(void *a1, const char *a2, ...)
{
  return _[a1 hrMin];
}

id objc_msgSend_hrMinAdjusted(void *a1, const char *a2, ...)
{
  return _[a1 hrMinAdjusted];
}

id objc_msgSend_hrRecovery(void *a1, const char *a2, ...)
{
  return _[a1 hrRecovery];
}

id objc_msgSend_hrRecoveryReference(void *a1, const char *a2, ...)
{
  return _[a1 hrRecoveryReference];
}

id objc_msgSend_hrTime(void *a1, const char *a2, ...)
{
  return _[a1 hrTime];
}

id objc_msgSend_hrVariance(void *a1, const char *a2, ...)
{
  return _[a1 hrVariance];
}

id objc_msgSend_hwSupport(void *a1, const char *a2, ...)
{
  return _[a1 hwSupport];
}

id objc_msgSend_hydrateBeacons(void *a1, const char *a2, ...)
{
  return _[a1 hydrateBeacons];
}

id objc_msgSend_iAPTimeSyncEnable(void *a1, const char *a2, ...)
{
  return _[a1 iAPTimeSyncEnable];
}

id objc_msgSend_iCloudManagedAppleID(void *a1, const char *a2, ...)
{
  return _[a1 iCloudManagedAppleID];
}

id objc_msgSend_iOSSourceVersionNewEnough_(void *a1, const char *a2, ...)
{
  return [a1 iOSSourceVersionNewEnough:];
}

id objc_msgSend_iTunesManagedAppleID(void *a1, const char *a2, ...)
{
  return _[a1 iTunesManagedAppleID];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_identifierWithPid_(void *a1, const char *a2, ...)
{
  return [a1 identifierWithPid:];
}

id objc_msgSend_idsDeviceID(void *a1, const char *a2, ...)
{
  return _[a1 idsDeviceID];
}

id objc_msgSend_idsDeviceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 idsDeviceIdentifier];
}

id objc_msgSend_idsOptions(void *a1, const char *a2, ...)
{
  return _[a1 idsOptions];
}

id objc_msgSend_idsService(void *a1, const char *a2, ...)
{
  return _[a1 idsService];
}

id objc_msgSend_idsStatus(void *a1, const char *a2, ...)
{
  return _[a1 idsStatus];
}

id objc_msgSend_immutableData(void *a1, const char *a2, ...)
{
  return _[a1 immutableData];
}

id objc_msgSend_inHomeCountry(void *a1, const char *a2, ...)
{
  return _[a1 inHomeCountry];
}

id objc_msgSend_inOutdoorPedestrianSession(void *a1, const char *a2, ...)
{
  return _[a1 inOutdoorPedestrianSession];
}

id objc_msgSend_inOutdoorWorkout(void *a1, const char *a2, ...)
{
  return _[a1 inOutdoorWorkout];
}

id objc_msgSend_inUseAssertionInvalidatedDueToWatchConnectivityForClientKey_(void *a1, const char *a2, ...)
{
  return [a1 inUseAssertionInvalidatedDueToWatchConnectivityForClientKey:];
}

id objc_msgSend_inUseLevel(void *a1, const char *a2, ...)
{
  return _[a1 inUseLevel];
}

id objc_msgSend_inUseLevelIsAtLeast_(void *a1, const char *a2, ...)
{
  return [a1 inUseLevelIsAtLeast:];
}

id objc_msgSend_inVisitStatus(void *a1, const char *a2, ...)
{
  return _[a1 inVisitStatus];
}

id objc_msgSend_inactiveSubArchives(void *a1, const char *a2, ...)
{
  return _[a1 inactiveSubArchives];
}

id objc_msgSend_includeRegionalApps(void *a1, const char *a2, ...)
{
  return _[a1 includeRegionalApps];
}

id objc_msgSend_incomingResponseIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 incomingResponseIdentifier];
}

id objc_msgSend_incrementAttributionCountForServiceType_(void *a1, const char *a2, ...)
{
  return [a1 incrementAttributionCountForServiceType:];
}

id objc_msgSend_incrementCountBy_(void *a1, const char *a2, ...)
{
  return [a1 incrementCountBy:];
}

id objc_msgSend_incrementNotifications(void *a1, const char *a2, ...)
{
  return _[a1 incrementNotifications];
}

id objc_msgSend_incrementTowardsTarget_andCurrent_withIncrement_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "incrementTowardsTarget:andCurrent:withIncrement:");
}

id objc_msgSend_index(void *a1, const char *a2, ...)
{
  return _[a1 index];
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return [a1 indexOfObject:];
}

id objc_msgSend_indexOfObject_inSortedRange_options_usingComparator_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "indexOfObject:inSortedRange:options:usingComparator:");
}

id objc_msgSend_indexSet(void *a1, const char *a2, ...)
{
  return _[a1 indexSet];
}

id objc_msgSend_indicator(void *a1, const char *a2, ...)
{
  return _[a1 indicator];
}

id objc_msgSend_indicatorOverride(void *a1, const char *a2, ...)
{
  return _[a1 indicatorOverride];
}

id objc_msgSend_indices(void *a1, const char *a2, ...)
{
  return _[a1 indices];
}

id objc_msgSend_indoorAvailabilityTilesServerUrl(void *a1, const char *a2, ...)
{
  return _[a1 indoorAvailabilityTilesServerUrl];
}

id objc_msgSend_indoorBundle(void *a1, const char *a2, ...)
{
  return _[a1 indoorBundle];
}

id objc_msgSend_indoorEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 indoorEndpoint];
}

id objc_msgSend_indoorLocationOfInterestMergeRadiusKM(void *a1, const char *a2, ...)
{
  return _[a1 indoorLocationOfInterestMergeRadiusKM];
}

id objc_msgSend_indoorPrefetchClusterMergeRadius(void *a1, const char *a2, ...)
{
  return _[a1 indoorPrefetchClusterMergeRadius];
}

id objc_msgSend_indoorPrefetchMaxFloorCount(void *a1, const char *a2, ...)
{
  return _[a1 indoorPrefetchMaxFloorCount];
}

id objc_msgSend_indoorPrefetchMaxFloorsPerPrefetch(void *a1, const char *a2, ...)
{
  return _[a1 indoorPrefetchMaxFloorsPerPrefetch];
}

id objc_msgSend_indoorPrefetchRadiusKM(void *a1, const char *a2, ...)
{
  return _[a1 indoorPrefetchRadiusKM];
}

id objc_msgSend_indoorPrefetchRadiusMeters(void *a1, const char *a2, ...)
{
  return _[a1 indoorPrefetchRadiusMeters];
}

id objc_msgSend_indoorTilePrefetchMaxCount(void *a1, const char *a2, ...)
{
  return _[a1 indoorTilePrefetchMaxCount];
}

id objc_msgSend_indoorTilePrefetchRadius(void *a1, const char *a2, ...)
{
  return _[a1 indoorTilePrefetchRadius];
}

id objc_msgSend_indoord(void *a1, const char *a2, ...)
{
  return _[a1 indoord];
}

id objc_msgSend_induceCrashCommand(void *a1, const char *a2, ...)
{
  return _[a1 induceCrashCommand];
}

id objc_msgSend_induceCrashTask(void *a1, const char *a2, ...)
{
  return _[a1 induceCrashTask];
}

id objc_msgSend_inertCopy(void *a1, const char *a2, ...)
{
  return _[a1 inertCopy];
}

id objc_msgSend_inertialCovariance(void *a1, const char *a2, ...)
{
  return _[a1 inertialCovariance];
}

id objc_msgSend_inertialCovarianceInfo(void *a1, const char *a2, ...)
{
  return _[a1 inertialCovarianceInfo];
}

id objc_msgSend_inertialOdometry(void *a1, const char *a2, ...)
{
  return _[a1 inertialOdometry];
}

id objc_msgSend_inertialSamples(void *a1, const char *a2, ...)
{
  return _[a1 inertialSamples];
}

id objc_msgSend_inertialState(void *a1, const char *a2, ...)
{
  return _[a1 inertialState];
}

id objc_msgSend_inertialStateInfo(void *a1, const char *a2, ...)
{
  return _[a1 inertialStateInfo];
}

id objc_msgSend_info(void *a1, const char *a2, ...)
{
  return _[a1 info];
}

id objc_msgSend_infoMask(void *a1, const char *a2, ...)
{
  return _[a1 infoMask];
}

id objc_msgSend_informCoreUarpOfAssetChangeForProductGroup_andProductNumber_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "informCoreUarpOfAssetChangeForProductGroup:andProductNumber:");
}

id objc_msgSend_informFirmwareUpdateFailureToClientWithError_(void *a1, const char *a2, ...)
{
  return [a1 informFirmwareUpdateFailureToClientWithError:];
}

id objc_msgSend_ingestBTLEAdvertisement_(void *a1, const char *a2, ...)
{
  return [a1 ingestBTLEAdvertisement:];
}

id objc_msgSend_ingestTAEventIfSAServiceRunning_(void *a1, const char *a2, ...)
{
  return [a1 ingestTAEventIfSAServiceRunning:];
}

id objc_msgSend_ingestTAEventIfTAServiceRunning_(void *a1, const char *a2, ...)
{
  return [a1 ingestTAEventIfTAServiceRunning:];
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _[a1 init];
}

id objc_msgSend_initActivityHistogramWithActivities_dateInterval_(void *a1, const char *a2, ...)
{
  return [a1 initActivityHistogramWithActivities:dateInterval:];
}

id objc_msgSend_initAllDayContextManagers(void *a1, const char *a2, ...)
{
  return _[a1 initAllDayContextManagers];
}

id objc_msgSend_initAnalyticsCache(void *a1, const char *a2, ...)
{
  return _[a1 initAnalyticsCache];
}

id objc_msgSend_initAnalyticsTimer(void *a1, const char *a2, ...)
{
  return _[a1 initAnalyticsTimer];
}

id objc_msgSend_initAndMarkScanningStarted_(void *a1, const char *a2, ...)
{
  return [a1 initAndMarkScanningStarted:];
}

id objc_msgSend_initAndStartWithQueue_andController_(void *a1, const char *a2, ...)
{
  return [a1 initAndStartWithQueue:andController:];
}

id objc_msgSend_initCentroidDatabase(void *a1, const char *a2, ...)
{
  return _[a1 initCentroidDatabase];
}

id objc_msgSend_initCentroidDbAndMetadataDb(void *a1, const char *a2, ...)
{
  return _[a1 initCentroidDbAndMetadataDb];
}

id objc_msgSend_initContextManagersForNotification_(void *a1, const char *a2, ...)
{
  return [a1 initContextManagersForNotification:];
}

id objc_msgSend_initDataDictForDay_(void *a1, const char *a2, ...)
{
  return [a1 initDataDictForDay:];
}

id objc_msgSend_initFileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return [a1 initFileURLWithPath:x0 isDirectory:x1];
}

id objc_msgSend_initFor_(void *a1, const char *a2, ...)
{
  return [a1 initFor:];
}

id objc_msgSend_initForReadingFromData_error_(void *a1, const char *a2, ...)
{
  return [a1 initForReadingFromData:error:];
}

id objc_msgSend_initFromClientCondition_clientKeyPath_authorizationContext_universe_identifier_callbackHandler_(void *a1, const char *a2, ...)
{
  return [a1 initFromClientCondition:x0 keyPath:x1 authorizationContext:x2 universe:x3 identifier:x4 callbackHandler:x5];
}

id objc_msgSend_initFromClientCondition_clientKeyPath_authorizationContext_universe_identifier_removePersistingFenceFromMonitoring_callbackHandler_(void *a1, const char *a2, ...)
{
  return [a1 initFromClientCondition:x0 keyPath:x1 context:x2 universe:x3 identifier:x4 removePersistingFenceFromMonitoring:x5 callbackHandler:x6];
}

id objc_msgSend_initFromLOI_(void *a1, const char *a2, ...)
{
  return [a1 initFromLOI:];
}

id objc_msgSend_initFromLatLon_(void *a1, const char *a2, ...)
{
  return [a1 initFromLatLon:];
}

id objc_msgSend_initInSilo_(void *a1, const char *a2, ...)
{
  return [a1 initInSilo:];
}

id objc_msgSend_initInSilo_withIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initInSilo:withIdentifier:];
}

id objc_msgSend_initInSilo_withIdentifier_state_(void *a1, const char *a2, ...)
{
  return [a1 initInSilo:withIdentifier:state:];
}

id objc_msgSend_initInUniverse_(void *a1, const char *a2, ...)
{
  return [a1 initInUniverse:];
}

id objc_msgSend_initInUniverse_andIdentifier_andRadiusInMeters_andCallback_andStatusCallback_andErrorCallback_(void *a1, const char *a2, ...)
{
  return [a1 initInUniverse:x0 andIdentifier:x1 andRadiusInMeters:x2 andCallback:x3 andStatusCallback:x4 andErrorCallback:x5];
}

id objc_msgSend_initInUniverse_stepCountDb_(void *a1, const char *a2, ...)
{
  return [a1 initInUniverse:stepCountDb:];
}

id objc_msgSend_initInUniverse_withDelegate_(void *a1, const char *a2, ...)
{
  return [a1 initInUniverse:withDelegate:];
}

id objc_msgSend_initInUniverse_withExternal_andSettings_(void *a1, const char *a2, ...)
{
  return [a1 initInUniverse:withExternal:andSettings:];
}

id objc_msgSend_initInUniverse_withExternal_withSettings_(void *a1, const char *a2, ...)
{
  return [a1 initInUniverse:withExternal:withSettings:];
}

id objc_msgSend_initInUniverse_withSettings_(void *a1, const char *a2, ...)
{
  return [a1 initInUniverse:withSettings:];
}

id objc_msgSend_initKeyReconciler(void *a1, const char *a2, ...)
{
  return _[a1 initKeyReconciler];
}

id objc_msgSend_initNearbyAllowedWithCenter_radius_identifier_(void *a1, const char *a2, ...)
{
  return [a1 initNearbyAllowedWithCenter:radius:identifier:];
}

id objc_msgSend_initOnQueue_(void *a1, const char *a2, ...)
{
  return [a1 initOnQueue:];
}

id objc_msgSend_initOnSilo_hour_minute_second_block_(void *a1, const char *a2, ...)
{
  return [a1 initOnSilo:x0 hour:x1 minute:x2 second:x3 block:x4];
}

id objc_msgSend_initRangingHawkeyeTask(void *a1, const char *a2, ...)
{
  return _[a1 initRangingHawkeyeTask];
}

id objc_msgSend_initRecordWithCondition_options_event_(void *a1, const char *a2, ...)
{
  return [a1 initRecordWithCondition:options:event:];
}

id objc_msgSend_initRecordWithMonitoringRecord_(void *a1, const char *a2, ...)
{
  return [a1 initRecordWithMonitoringRecord:];
}

id objc_msgSend_initRequiringSecureCoding_(void *a1, const char *a2, ...)
{
  return [a1 initRequiringSecureCoding:];
}

id objc_msgSend_initRoseCommandWithParameters_(void *a1, const char *a2, ...)
{
  return [a1 initRoseCommandWithParameters:];
}

id objc_msgSend_initRoseNonOwnerCommandWithParameters_(void *a1, const char *a2, ...)
{
  return [a1 initRoseNonOwnerCommandWithParameters:];
}

id objc_msgSend_initRoseNonOwnerTaskWithParameters_(void *a1, const char *a2, ...)
{
  return [a1 initRoseNonOwnerTaskWithParameters:];
}

id objc_msgSend_initRoseTaskWithParameters_(void *a1, const char *a2, ...)
{
  return [a1 initRoseTaskWithParameters:];
}

id objc_msgSend_initToDirectory_prefix_rotation_(void *a1, const char *a2, ...)
{
  return [a1 initToDirectory:x0 prefix:x1 rotation:x2];
}

id objc_msgSend_initToFileAtPath_append_(void *a1, const char *a2, ...)
{
  return [a1 initToFileAtPath:x0 append:x1];
}

id objc_msgSend_initToMemory(void *a1, const char *a2, ...)
{
  return _[a1 initToMemory];
}

id objc_msgSend_initUnknown(void *a1, const char *a2, ...)
{
  return _[a1 initUnknown];
}

id objc_msgSend_initWith_(void *a1, const char *a2, ...)
{
  return [a1 initWith:];
}

id objc_msgSend_initWith_conformanceMode_(void *a1, const char *a2, ...)
{
  return [a1 initWith:x0 conformanceMode:x1];
}

id objc_msgSend_initWithADRPointer_(void *a1, const char *a2, ...)
{
  return [a1 initWithADRPointer:];
}

id objc_msgSend_initWithARSessionState_(void *a1, const char *a2, ...)
{
  return [a1 initWithARSessionState:];
}

id objc_msgSend_initWithAbsoluteTimeStamp_clientBundleIdentifier_maxProbabilityLabelIdentifier_maxProbability_probabilityVector_numDevicesVector_(void *a1, const char *a2, ...)
{
  return [a1 initWithAbsoluteTimeStamp:x0 clientBundleIdentifier:x1 maxProbabilityLabelIdentifier:x2 maxProbability:x3 probabilityVector:x4 numDevicesVector:x5];
}

id objc_msgSend_initWithAccessor_(void *a1, const char *a2, ...)
{
  return [a1 initWithAccessor:];
}

id objc_msgSend_initWithAccessory_(void *a1, const char *a2, ...)
{
  return [a1 initWithAccessory:];
}

id objc_msgSend_initWithAction_type_trackingIdentifier_observedLocations_(void *a1, const char *a2, ...)
{
  return [a1 initWithAction:x0 type:x1 trackingIdentifier:x2 observedLocations:x3];
}

id objc_msgSend_initWithActivityType_date_(void *a1, const char *a2, ...)
{
  return [a1 initWithActivityType:date:];
}

id objc_msgSend_initWithAddress_advertisementData_status_reserved_rssi_scanDate_(void *a1, const char *a2, ...)
{
  return [a1 initWithAddress:advertisementData:status:reserved:rssi:scanDate:];
}

id objc_msgSend_initWithAddress_advertisementData_status_reserved_rssi_scanDate_channel_didCauseWake_detailsBitmask_protocolID_(void *a1, const char *a2, ...)
{
  return [a1 initWithAddress:x0 advertisementData:x1 status:x2 reserved:x3 rssi:x4 scanDate:x5 channel:x6 didCauseWake:x7 detailsBitmask:x8 protocolID:x9];
}

id objc_msgSend_initWithAddress_advertisementData_status_reserved_rssi_scanDate_detailsBitmask_uuid_protocolID_(void *a1, const char *a2, ...)
{
  return [a1 initWithAddress:x0 advertisementData:x1 status:x2 reserved:x3 rssi:x4 scanDate:x5 detailsBitmask:x6 uuid:x7 protocolID:x8];
}

id objc_msgSend_initWithAddress_advertisementData_status_reserved_rssi_scanDate_isPosh_(void *a1, const char *a2, ...)
{
  return [a1 initWithAddress:x0 advertisementData:x1 status:x2 reserved:x3 rssi:x4 scanDate:x5 isPosh:x6];
}

id objc_msgSend_initWithAddress_advertisementData_status_reserved_rssi_scanDate_isPosh_networkID_(void *a1, const char *a2, ...)
{
  return [a1 initWithAddress:x0 advertisementData:x1 status:x2 reserved:x3 rssi:x4 scanDate:x5 isPosh:x6 networkID:x7];
}

id objc_msgSend_initWithAddress_advertisementData_status_reserved_rssi_scanDate_uuid_(void *a1, const char *a2, ...)
{
  return [a1 initWithAddress:x0 advertisementData:x1 status:x2 reserved:x3 rssi:x4 scanDate:x5 uuid:x6];
}

id objc_msgSend_initWithAddress_connectionToken_(void *a1, const char *a2, ...)
{
  return [a1 initWithAddress:x0 connectionToken:x1];
}

id objc_msgSend_initWithAddress_contactId_flags_eFlags_authTag_iTag_rssi_count_unixTime_(void *a1, const char *a2, ...)
{
  return [a1 initWithAddress:x0 contactId:x1 flags:x2 eFlags:x3 authTag:x4 iTag:x5 rssi:x6 count:x7 unixTime:x8];
}

id objc_msgSend_initWithAddress_ltk_primaryIndex_secondaryIndex_(void *a1, const char *a2, ...)
{
  return [a1 initWithAddress:x0 ltk:x1 primaryIndex:x2 secondaryIndex:x3];
}

id objc_msgSend_initWithAdvertisement_location_(void *a1, const char *a2, ...)
{
  return [a1 initWithAdvertisement:location:];
}

id objc_msgSend_initWithAdvertisement_maxActivityBasedSpeedSinceAdvertisement_(void *a1, const char *a2, ...)
{
  return [a1 initWithAdvertisement:x0 maxActivityBasedSpeedSinceAdvertisement:x1];
}

id objc_msgSend_initWithAltitude_(void *a1, const char *a2, ...)
{
  return [a1 initWithAltitude:];
}

id objc_msgSend_initWithAltitude_accuracy_precision_status_timestamp_(void *a1, const char *a2, ...)
{
  return [a1 initWithAltitude:x0 accuracy:x1 precision:x2 status:x3 timestamp:x4];
}

id objc_msgSend_initWithAnalyticsEvent_binPeriod_atCurrentTime_(void *a1, const char *a2, ...)
{
  return [a1 initWithAnalyticsEvent:x0 binPeriod:x1 atCurrentTime:x2];
}

id objc_msgSend_initWithApiKey_onServer_(void *a1, const char *a2, ...)
{
  return [a1 initWithApiKey:onServer:];
}

id objc_msgSend_initWithAppMonitor_inUniverse_(void *a1, const char *a2, ...)
{
  return [a1 initWithAppMonitor:inUniverse:];
}

id objc_msgSend_initWithAppMonitorProxy_(void *a1, const char *a2, ...)
{
  return [a1 initWithAppMonitorProxy:];
}

id objc_msgSend_initWithApplicationBundleIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithApplicationBundleIdentifier:];
}

id objc_msgSend_initWithArchive_(void *a1, const char *a2, ...)
{
  return [a1 initWithArchive:];
}

id objc_msgSend_initWithArchive_index_(void *a1, const char *a2, ...)
{
  return [a1 initWithArchive:x0, x1];
}

id objc_msgSend_initWithArchive_index_score_apHarvestCount_macsNotInALSDatabase_(void *a1, const char *a2, ...)
{
  return [a1 initWithArchive:x0 index:x1 score:x2 apHarvestCount:x3 macsNotInALSDatabase:x4];
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return [a1 initWithArray:];
}

id objc_msgSend_initWithAscending_confidence_dateInterval_labelVisit_limit_(void *a1, const char *a2, ...)
{
  return [a1 initWithAscending:x0 confidence:x1 dateInterval:x2 labelVisit:x3 limit:x4];
}

id objc_msgSend_initWithAscending_confidence_dateInterval_labelVisit_limit_sources_(void *a1, const char *a2, ...)
{
  return [a1 initWithAscending:x0 confidence:x1 dateInterval:x2 labelVisit:x3 limit:x4 sources:x5];
}

id objc_msgSend_initWithAscending_confidence_dateInterval_limit_(void *a1, const char *a2, ...)
{
  return [a1 initWithAscending:x0 confidence:x1 dateInterval:x2 limit:x3];
}

id objc_msgSend_initWithAssetType_assetData_maxPacketSize_(void *a1, const char *a2, ...)
{
  return [a1 initWithAssetType:x0 assetData:x1 maxPacketSize:x2];
}

id objc_msgSend_initWithAttributedEntity_(void *a1, const char *a2, ...)
{
  return [a1 initWithAttributedEntity:];
}

id objc_msgSend_initWithAttributionId_andTimer_(void *a1, const char *a2, ...)
{
  return [a1 initWithAttributionId:andTimer:];
}

id objc_msgSend_initWithAverageSpeed_enableFallbackModel_timeInterval_(void *a1, const char *a2, ...)
{
  return [a1 initWithAverageSpeed:x0 enableFallbackModel:x1 timeInterval:x2];
}

id objc_msgSend_initWithBackgroundActivityIdentifier_activityAttribution_showsWhenForeground_(void *a1, const char *a2, ...)
{
  return [a1 initWithBackgroundActivityIdentifier:x0 activityAttribution:x1 showsWhenForeground:x2];
}

id objc_msgSend_initWithBarometricAltimeter_(void *a1, const char *a2, ...)
{
  return [a1 initWithBarometricAltimeter:];
}

id objc_msgSend_initWithBase64EncodedString_options_(void *a1, const char *a2, ...)
{
  return [a1 initWithBase64EncodedString:x0, x1];
}

id objc_msgSend_initWithBatchedSensorSubscription_(void *a1, const char *a2, ...)
{
  return [a1 initWithBatchedSensorSubscription:];
}

id objc_msgSend_initWithBeaconIdentifier_type_date_location_(void *a1, const char *a2, ...)
{
  return [a1 initWithBeaconIdentifier:x0 type:x1 date:x2 location:x3];
}

id objc_msgSend_initWithBeaconType_transmitPower_(void *a1, const char *a2, ...)
{
  return [a1 initWithBeaconType:x0 transmitPower:x1];
}

id objc_msgSend_initWithBeaconUUID_address_deviceType_withAccessoryInfo_(void *a1, const char *a2, ...)
{
  return [a1 initWithBeaconUUID:address:deviceType:withAccessoryInfo:];
}

id objc_msgSend_initWithBegin_end_state_kValue_(void *a1, const char *a2, ...)
{
  return [a1 initWithBegin:x0 end:x1 state:x2 kValue:x3];
}

id objc_msgSend_initWithBool_(void *a1, const char *a2, ...)
{
  return [a1 initWithBool:x0];
}

id objc_msgSend_initWithBoutMetrics_(void *a1, const char *a2, ...)
{
  return [a1 initWithBoutMetrics:];
}

id objc_msgSend_initWithBoutMetricsRecorderDb_(void *a1, const char *a2, ...)
{
  return [a1 initWithBoutMetricsRecorderDb:];
}

id objc_msgSend_initWithBufferAndLength_length_(void *a1, const char *a2, ...)
{
  return [a1 initWithBufferAndLength:x0 length:x1];
}

id objc_msgSend_initWithBundleIDs_states_elevatedPriority_(void *a1, const char *a2, ...)
{
  return [a1 initWithBundleIDs:states:elevatedPriority:];
}

id objc_msgSend_initWithBundleIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithBundleIdentifier:];
}

id objc_msgSend_initWithBundleIdentifier_allowPlaceholder_error_(void *a1, const char *a2, ...)
{
  return [a1 initWithBundleIdentifier:x0 allowPlaceholder:x1 error:x2];
}

id objc_msgSend_initWithBundleIdentifier_error_(void *a1, const char *a2, ...)
{
  return [a1 initWithBundleIdentifier:error:];
}

id objc_msgSend_initWithBundleLocationProvider_inSilo_(void *a1, const char *a2, ...)
{
  return [a1 initWithBundleLocationProvider:inSilo:];
}

id objc_msgSend_initWithBundlePath_(void *a1, const char *a2, ...)
{
  return [a1 initWithBundlePath:];
}

id objc_msgSend_initWithBundleType_(void *a1, const char *a2, ...)
{
  return [a1 initWithBundleType:];
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return [a1 initWithBytes:length:];
}

id objc_msgSend_initWithBytes_length_encoding_(void *a1, const char *a2, ...)
{
  return [a1 initWithBytes:x0 length:x1 encoding:x2];
}

id objc_msgSend_initWithBytesNoCopy_length_deallocator_(void *a1, const char *a2, ...)
{
  return [a1 initWithBytesNoCopy:x0 length:x1 deallocator:x2];
}

id objc_msgSend_initWithBytesNoCopy_length_encoding_freeWhenDone_(void *a1, const char *a2, ...)
{
  return [a1 initWithBytesNoCopy:x0 length:x1 encoding:x2 freeWhenDone:x3];
}

id objc_msgSend_initWithCLBacklightStateNotifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithCLBacklightStateNotifier:];
}

id objc_msgSend_initWithCLMotionActivity_(void *a1, const char *a2, ...)
{
  return [a1 initWithCLMotionActivity:];
}

id objc_msgSend_initWithCLPIOSample_(void *a1, const char *a2, ...)
{
  return [a1 initWithCLPIOSample:];
}

id objc_msgSend_initWithCLSWOLFSummary_(void *a1, const char *a2, ...)
{
  return [a1 initWithCLSWOLFSummary:];
}

id objc_msgSend_initWithCLStrideCalEntry_(void *a1, const char *a2, ...)
{
  return [a1 initWithCLStrideCalEntry:];
}

id objc_msgSend_initWithCLWorkoutMets_(void *a1, const char *a2, ...)
{
  return [a1 initWithCLWorkoutMets:];
}

id objc_msgSend_initWithCString_encoding_(void *a1, const char *a2, ...)
{
  return [a1 initWithCString:x0 encoding:x1];
}

id objc_msgSend_initWithCalendarIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithCalendarIdentifier:];
}

id objc_msgSend_initWithCalibrationTracks_rawSpeedToKValueBins_stepCadenceToStrideLengthBins_(void *a1, const char *a2, ...)
{
  return [a1 initWithCalibrationTracks:x0 rawSpeedToKValueBins:x1 stepCadenceToStrideLengthBins:x2];
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 initWithCapacity:];
}

id objc_msgSend_initWithCenter_radius_(void *a1, const char *a2, ...)
{
  return [a1 initWithCenter:radius:];
}

id objc_msgSend_initWithCenter_radius_identifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithCenter:x0 radius:x1 identifier:x2];
}

id objc_msgSend_initWithCenter_radius_referenceFrame_allowMonitoringWhenNearby_lowPower_identifier_onBehalfOfBundleId_notifyOnEntry_notifyOnExit_conservativeEntry_emergency_(void *a1, const char *a2, ...)
{
  return [a1 initWithCenter:x0 radius:x1 referenceFrame:x2 allowMonitoringWhenNearby:x3 lowPower:x4 identifier:x5 onBehalfOfBundleId:x6 notifyOnEntry:x7 notifyOnExit:x8 conservativeEntry:x9 emergency:x10];
}

id objc_msgSend_initWithCenter_radius_referenceFrame_allowMonitoringWhenNearby_lowPower_identifier_onBehalfOfBundleId_notifyOnEntry_notifyOnExit_conservativeEntry_emergency_deviceId_handoffTag_(void *a1, const char *a2, ...)
{
  return [a1 initWithCenter:x0 radius:x1 referenceFrame:x2 allowMonitoringWhenNearby:x3 lowPower:x4 identifier:x5 onBehalfOfBundleId:x6 notifyOnEntry:x7 notifyOnExit:x8 conservativeEntry:x9 emergency:x10 deviceId:x11 handoffTag:x12];
}

id objc_msgSend_initWithClassifier_rootDirectory_basename_requestCode_itemCountThresholdForAutoCleanUp_(void *a1, const char *a2, ...)
{
  return [a1 initWithClassifier:x0 rootDirectory:x1 basename:x2 requestCode:x3 itemCountThresholdForAutoCleanUp:x4];
}

id objc_msgSend_initWithClient_(void *a1, const char *a2, ...)
{
  return [a1 initWithClient:];
}

id objc_msgSend_initWithClient_identifier_atTime_atMonotonicTime_(void *a1, const char *a2, ...)
{
  return [a1 initWithClient:a2 identifier:a3 atTime:a4 atMonotonicTime:a5];
}

id objc_msgSend_initWithClient_withIdentifier_usingReferenceFrame_atMachContinuousTime_(void *a1, const char *a2, ...)
{
  return [a1 initWithClient:a2 withIdentifier:a3 usingReferenceFrame:a4 atMachContinuousTime:a5];
}

id objc_msgSend_initWithClientCoordinate_(void *a1, const char *a2, ...)
{
  return [a1 initWithClientCoordinate:];
}

id objc_msgSend_initWithClientIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithClientIdentifier:];
}

id objc_msgSend_initWithClientLocation_(void *a1, const char *a2, ...)
{
  return [a1 initWithClientLocation:];
}

id objc_msgSend_initWithClientLocation_clientLocationPrivate_(void *a1, const char *a2, ...)
{
  return [a1 initWithClientLocation:x0 clientLocationPrivate:x1];
}

id objc_msgSend_initWithClientLocation_coarseMetaData_(void *a1, const char *a2, ...)
{
  return [a1 initWithClientLocation:x0 coarseMetaData:x1];
}

id objc_msgSend_initWithClientManagerPointer_andUniverse_(void *a1, const char *a2, ...)
{
  return [a1 initWithClientManagerPointer:andUniverse:];
}

id objc_msgSend_initWithClientMonitoringRecord_clientKeyPath_authorizationContext_universe_identifier_initForStopMonitoring_callbackHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "initWithClientMonitoringRecord:clientKeyPath:authorizationContext:universe:identifier:initForStopMonitoring:callbackHandler:");
}

id objc_msgSend_initWithCloseDeviceList_(void *a1, const char *a2, ...)
{
  return [a1 initWithCloseDeviceList:];
}

id objc_msgSend_initWithCoder_(void *a1, const char *a2, ...)
{
  return [a1 initWithCoder:];
}

id objc_msgSend_initWithCoexMetricDict_(void *a1, const char *a2, ...)
{
  return [a1 initWithCoexMetricDict:];
}

id objc_msgSend_initWithColdStorageManager_(void *a1, const char *a2, ...)
{
  return [a1 initWithColdStorageManager:];
}

id objc_msgSend_initWithCommand_desiredLatency_expectsResponse_completeOnPreemption_requiresMutex_(void *a1, const char *a2, ...)
{
  return [a1 initWithCommand:x0 desiredLatency:x1 expectsResponse:x2 completeOnPreemption:x3 requiresMutex:x4];
}

id objc_msgSend_initWithCommand_serviceUUID_characteristicUUID_(void *a1, const char *a2, ...)
{
  return [a1 initWithCommand:x0 serviceUUID:x1 characteristicUUID:x2];
}

id objc_msgSend_initWithCommand_serviceUUID_characteristicUUID_payload_(void *a1, const char *a2, ...)
{
  return [a1 initWithCommand:x0 serviceUUID:x1 characteristicUUID:x2 payload:x3];
}

id objc_msgSend_initWithCompanionNotifierCompanion_(void *a1, const char *a2, ...)
{
  return [a1 initWithCompanionNotifierCompanion:];
}

id objc_msgSend_initWithConcurrencyType_(void *a1, const char *a2, ...)
{
  return [a1 initWithConcurrencyType:];
}

id objc_msgSend_initWithConfidenceReasonEnum_(void *a1, const char *a2, ...)
{
  return [a1 initWithConfidenceReasonEnum:];
}

id objc_msgSend_initWithConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 initWithConfiguration:];
}

id objc_msgSend_initWithConfiguration_clientKeyPath_authorizationContext_universe_hasClassCAccess_callbackHandler_(void *a1, const char *a2, ...)
{
  return [a1 initWithConfiguration:x0 clientKeyPath:x1 authorizationContext:x2 universe:x3 hasClassCAccess:x4 callbackHandler:x5];
}

id objc_msgSend_initWithConfiguration_currentIndex_(void *a1, const char *a2, ...)
{
  return [a1 initWithConfiguration:x0 currentIndex:x1];
}

id objc_msgSend_initWithConnectionState_(void *a1, const char *a2, ...)
{
  return [a1 initWithConnectionState:];
}

id objc_msgSend_initWithContainerID_(void *a1, const char *a2, ...)
{
  return [a1 initWithContainerID:];
}

id objc_msgSend_initWithContainerIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithContainerIdentifier:];
}

id objc_msgSend_initWithContainerIdentifier_environment_(void *a1, const char *a2, ...)
{
  return [a1 initWithContainerIdentifier:environment:];
}

id objc_msgSend_initWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return [a1 initWithContentsOfFile:];
}

id objc_msgSend_initWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return [a1 initWithContentsOfURL:];
}

id objc_msgSend_initWithContext_(void *a1, const char *a2, ...)
{
  return [a1 initWithContext:];
}

id objc_msgSend_initWithContextManager_(void *a1, const char *a2, ...)
{
  return [a1 initWithContextManager:];
}

id objc_msgSend_initWithContextManager_andUniverse_andDelegate_andBuffers_(void *a1, const char *a2, ...)
{
  return [a1 initWithContextManager:a2 andUniverse:a3 andDelegate:a4 andBuffers:a5];
}

id objc_msgSend_initWithContextType_forNotification_startTime_(void *a1, const char *a2, ...)
{
  return [a1 initWithContextType:forNotification:startTime:];
}

id objc_msgSend_initWithController_(void *a1, const char *a2, ...)
{
  return [a1 initWithController:];
}

id objc_msgSend_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_course_courseAccuracy_speed_speedAccuracy_timestamp_(void *a1, const char *a2, ...)
{
  return [a1 initWithCoordinate:x0 altitude:x1 horizontalAccuracy:x2 verticalAccuracy:x3 course:x4 courseAccuracy:x5 speed:x6 speedAccuracy:x7 timestamp:x8];
}

id objc_msgSend_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_course_speed_timestamp_(void *a1, const char *a2, ...)
{
  return [a1 initWithCoordinate:x0 altitude:x1 horizontalAccuracy:x2 verticalAccuracy:x3 course:x4 speed:x5 timestamp:x6];
}

id objc_msgSend_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_timestamp_(void *a1, const char *a2, ...)
{
  return [a1 initWithCoordinate:x0 altitude:x1 horizontalAccuracy:x2 verticalAccuracy:x3 timestamp:x4];
}

id objc_msgSend_initWithCoordinate_horizontalAccuracy_arrivalDate_departureDate_detectionDate_(void *a1, const char *a2, ...)
{
  return [a1 initWithCoordinate:x0 horizontalAccuracy:x1 arrivalDate:x2 departureDate:x3 detectionDate:x4];
}

id objc_msgSend_initWithCoordinate_horizontalAccuracy_arrivalDate_departureDate_detectionDate_confidence_(void *a1, const char *a2, ...)
{
  return [a1 initWithCoordinate:x0 horizontalAccuracy:x1 arrivalDate:x2 departureDate:x3 detectionDate:x4 confidence:x5];
}

id objc_msgSend_initWithCoordinate_horizontalAccuracy_arrivalDate_departureDate_detectionDate_placeInference_(void *a1, const char *a2, ...)
{
  return [a1 initWithCoordinate:x0 horizontalAccuracy:x1 arrivalDate:x2 departureDate:x3 detectionDate:x4 placeInference:x5];
}

id objc_msgSend_initWithCoordinateRegion_(void *a1, const char *a2, ...)
{
  return [a1 initWithCoordinateRegion:];
}

id objc_msgSend_initWithDaemonClient_(void *a1, const char *a2, ...)
{
  return [a1 initWithDaemonClient:];
}

id objc_msgSend_initWithDaemonLocation_(void *a1, const char *a2, ...)
{
  return [a1 initWithDaemonLocation:];
}

id objc_msgSend_initWithDaemonLocation_rawMotionActivity_motionActivity_dominantMotionActivity_vehicleConnected_vehicleConnectionStateChanged_(void *a1, const char *a2, ...)
{
  return [a1 initWithDaemonLocation:x0 rawMotionActivity:x1 motionActivity:x2 dominantMotionActivity:x3 vehicleConnected:x4 vehicleConnectionStateChanged:x5];
}

id objc_msgSend_initWithDaemonLocationPrivate_(void *a1, const char *a2, ...)
{
  return [a1 initWithDaemonLocationPrivate:];
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return [a1 initWithData:];
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return [a1 initWithData:x0 encoding:x1];
}

id objc_msgSend_initWithDataType_(void *a1, const char *a2, ...)
{
  return [a1 initWithDataType:];
}

id objc_msgSend_initWithDatabase_dataSource_metadata_(void *a1, const char *a2, ...)
{
  return [a1 initWithDatabase:x0 dataSource:x1 metadata:x2];
}

id objc_msgSend_initWithDatabase_stateSerialization_delegate_(void *a1, const char *a2, ...)
{
  return [a1 initWithDatabase:x0 stateSerialization:x1 delegate:x2];
}

id objc_msgSend_initWithDate_(void *a1, const char *a2, ...)
{
  return [a1 initWithDate:x0];
}

id objc_msgSend_initWithDate_distance_averageSpeed_verticalDescent_runCount_maximumSpeed_(void *a1, const char *a2, ...)
{
  return [a1 initWithDate:x0 distance:x1 averageSpeed:x2 verticalDescent:x3 runCount:x4 maximumSpeed:x5];
}

id objc_msgSend_initWithDateInterval_(void *a1, const char *a2, ...)
{
  return [a1 initWithDateInterval:x0];
}

id objc_msgSend_initWithDateInterval_horizontalAccuracy_batchSize_boundingBoxLocation_(void *a1, const char *a2, ...)
{
  return [a1 initWithDateInterval:x0 horizontalAccuracy:x1 batchSize:x2 boundingBoxLocation:x3];
}

id objc_msgSend_initWithDateInterval_horizontalAccuracy_batchSize_boundingBoxLocation_type_(void *a1, const char *a2, ...)
{
  return [a1 initWithDateInterval:x0 horizontalAccuracy:x1 batchSize:x2 boundingBoxLocation:x3 type:x4];
}

id objc_msgSend_initWithDateInterval_horizontalAccuracy_batchSize_boundingBoxLocation_type_downsampleRequired_smoothingErrorThreshold_(void *a1, const char *a2, ...)
{
  return [a1 initWithDateInterval:x0 horizontalAccuracy:x1 batchSize:x2 boundingBoxLocation:x3 type:x4 downsampleRequired:x5 smoothingErrorThreshold:x6];
}

id objc_msgSend_initWithDateInterval_lookbackInterval_spatialGranularity_referenceLocation_referenceLocationSummary_distance_(void *a1, const char *a2, ...)
{
  return [a1 initWithDateInterval:x0 lookbackInterval:x1 spatialGranularity:x2 referenceLocation:x3 referenceLocationSummary:x4 distance:x5];
}

id objc_msgSend_initWithDefaultDirectories_(void *a1, const char *a2, ...)
{
  return [a1 initWithDefaultDirectories:];
}

id objc_msgSend_initWithDefaults(void *a1, const char *a2, ...)
{
  return _[a1 initWithDefaults];
}

id objc_msgSend_initWithDelegate_(void *a1, const char *a2, ...)
{
  return [a1 initWithDelegate:];
}

id objc_msgSend_initWithDelegate_andUniverse_(void *a1, const char *a2, ...)
{
  return [a1 initWithDelegate:andUniverse:];
}

id objc_msgSend_initWithDelegate_centralManager_optedIn_reconciler_queue_powerAssertionDelegate_(void *a1, const char *a2, ...)
{
  return [a1 initWithDelegate:a2 centralManager:a3 optedIn:a4 reconciler:a5 queue:a6 powerAssertionDelegate:a7];
}

id objc_msgSend_initWithDelegate_peripheral_(void *a1, const char *a2, ...)
{
  return [a1 initWithDelegate:a2 peripheral:a3];
}

id objc_msgSend_initWithDelegate_platformType_supportsPerTypeDuplicateFilter_(void *a1, const char *a2, ...)
{
  return [a1 initWithDelegate:x0 platformType:x1 supportsPerTypeDuplicateFilter:x2];
}

id objc_msgSend_initWithDelegate_queue_(void *a1, const char *a2, ...)
{
  return [a1 initWithDelegate:queue:];
}

id objc_msgSend_initWithDelegate_queue_matching_(void *a1, const char *a2, ...)
{
  return [a1 initWithDelegate:x0 queue:x1 matching:x2];
}

id objc_msgSend_initWithDelegate_queue_optedIn_(void *a1, const char *a2, ...)
{
  return [a1 initWithDelegate:x0 queue:x1 optedIn:x2];
}

id objc_msgSend_initWithDelegate_queue_options_(void *a1, const char *a2, ...)
{
  return [a1 initWithDelegate:x0 queue:x1 options:x2];
}

id objc_msgSend_initWithDelegate_settings_(void *a1, const char *a2, ...)
{
  return [a1 initWithDelegate:settings:];
}

id objc_msgSend_initWithDelegate_universe_moduleDictionary_setting_(void *a1, const char *a2, ...)
{
  return [a1 initWithDelegate:a2 universe:a3 moduleDictionary:a4 setting:a5];
}

id objc_msgSend_initWithDelegate_universeCopy_settings_(void *a1, const char *a2, ...)
{
  return [a1 initWithDelegate:a2 universeCopy:a3 settings:a4];
}

id objc_msgSend_initWithDelegate_withSilo_(void *a1, const char *a2, ...)
{
  return [a1 initWithDelegate:withSilo:];
}

id objc_msgSend_initWithDelegate_withUniverse_(void *a1, const char *a2, ...)
{
  return [a1 initWithDelegate:withUniverse:];
}

id objc_msgSend_initWithDeltaDistance_startDate_endDate_accuracy_rawSpeed_gpsSpeedAccuracy_timestampGps_deltaGroundAltitude_groundAltitudeUncertainty_originDevice_slope_maxAbsSlope_(void *a1, const char *a2, ...)
{
  return [a1 initWithDeltaDistance:x0 startDate:x1 endDate:x2 accuracy:x3 rawSpeed:x4 gpsSpeedAccuracy:x5 timestampGps:x6 deltaGroundAltitude:x7 groundAltitudeUncertainty:x8 originDevice:x9 slope:x10 maxAbsSlope:x11];
}

id objc_msgSend_initWithDeltaPositionX_deltaPositionY_deltaPositionZ_deltaVelocityX_deltaVelocityY_deltaVelocityZ_quaternionX_quaternionY_quaternionZ_quaternionW_rotationArbitraryToTrueNorth_staticFlag_timestamp_(void *a1, const char *a2, ...)
{
  return [a1 initWithDeltaPositionX:x0 deltaPositionY:x1 deltaPositionZ:x2 deltaVelocityX:x3 deltaVelocityY:x4 deltaVelocityZ:x5 quaternionX:x6 quaternionY:x7 quaternionZ:x8 quaternionW:x9 rotationArbitraryToTrueNorth:x10 staticFlag:x11 timestamp:x12];
}

id objc_msgSend_initWithDepth_andPressure_andSurfacePressure_andState_andDate_(void *a1, const char *a2, ...)
{
  return [a1 initWithDepth:andPressure:andSurfacePressure:andState:andDate:];
}

id objc_msgSend_initWithDescription_(void *a1, const char *a2, ...)
{
  return [a1 initWithDescription:];
}

id objc_msgSend_initWithDesiredNextKeyRollDate_nextWildIndex_(void *a1, const char *a2, ...)
{
  return [a1 initWithDesiredNextKeyRollDate:nextDesiredNextKeyRollDate nextWildIndex:nextWildIndex];
}

id objc_msgSend_initWithDeviceIdentifier_uwbRange_bleRSSI_(void *a1, const char *a2, ...)
{
  return [a1 initWithDeviceIdentifier:x0 uwbRange:x1 bleRSSI:x2];
}

id objc_msgSend_initWithDeviceUUID_deviceType_productData_manufacturerName_modelName_firmwareVersion_accessoryCategory_accessoryCapabilities_(void *a1, const char *a2, ...)
{
  return [a1 initWithDeviceUUID:x0 deviceType:x1 productData:x2 manufacturerName:x3 modelName:x4 firmwareVersion:x5 accessoryCategory:x6 accessoryCapabilities:x7];
}

id objc_msgSend_initWithDeviceUUID_deviceType_productData_manufacturerName_modelName_firmwareVersion_accessoryCategory_accessoryCapabilities_serialNumber_protocolImplementation_networkID_batteryType_batteryLevel_(void *a1, const char *a2, ...)
{
  return [a1 initWithDeviceUUID:x0 deviceType:x1 productData:x2 manufacturerName:x3 modelName:x4 firmwareVersion:x5 accessoryCategory:x6 accessoryCapabilities:x7 serialNumber:x8 protocolImplementation:x9 networkID:x10 batteryType:x11 batteryLevel:x12];
}

id objc_msgSend_initWithDeviceUUID_state_date_(void *a1, const char *a2, ...)
{
  return [a1 initWithDeviceUUID:x0 state:x1 date:x2];
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return [a1 initWithDictionary:];
}

id objc_msgSend_initWithDictionary_copyItems_(void *a1, const char *a2, ...)
{
  return [a1 initWithDictionary:x0 copyItems:x1];
}

id objc_msgSend_initWithDirectory_(void *a1, const char *a2, ...)
{
  return [a1 initWithDirectory:];
}

id objc_msgSend_initWithDirectory_itemCountThresholdForAutoCleanUp_(void *a1, const char *a2, ...)
{
  return [a1 initWithDirectory:x0 itemCountThresholdForAutoCleanUp:x1];
}

id objc_msgSend_initWithDirectory_requestCode_(void *a1, const char *a2, ...)
{
  return [a1 initWithDirectory:x0 requestCode:x1];
}

id objc_msgSend_initWithDirectory_requestCode_itemCountThresholdForAutoCleanUp_(void *a1, const char *a2, ...)
{
  return [a1 initWithDirectory:x0 requestCode:x1 itemCountThresholdForAutoCleanUp:x2];
}

id objc_msgSend_initWithDistance_inUniverse_handler_(void *a1, const char *a2, ...)
{
  return [a1 initWithDistance:x0 inUniverse:x1 handler:x2];
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return [a1 initWithDomain:x0 code:x1 userInfo:x2];
}

id objc_msgSend_initWithDomain_maxProbabilityMicroLocationIdentifier_maxProbability_probabilityVector_isStable_numDevicesVector_(void *a1, const char *a2, ...)
{
  return [a1 initWithDomain:x0 maxProbabilityMicroLocationIdentifier:x1 maxProbability:x2 probabilityVector:x3 isStable:x4 numDevicesVector:x5];
}

id objc_msgSend_initWithDouble_(void *a1, const char *a2, ...)
{
  return [a1 initWithDouble:];
}

id objc_msgSend_initWithDoubleValue_unit_(void *a1, const char *a2, ...)
{
  return [a1 initWithDoubleValue:x0 unit:x1];
}

id objc_msgSend_initWithEffectiveBundlePath_delegate_onQueue_(void *a1, const char *a2, ...)
{
  return [a1 initWithEffectiveBundlePath:x0 delegate:x1 onQueue:x2];
}

id objc_msgSend_initWithElevation_dateInterval_elevationUncertainty_estimationStatus_(void *a1, const char *a2, ...)
{
  return [a1 initWithElevation:x0 dateInterval:x1 elevationUncertainty:x2 estimationStatus:x3];
}

id objc_msgSend_initWithElevationGradeEntry_(void *a1, const char *a2, ...)
{
  return [a1 initWithElevationGradeEntry:];
}

id objc_msgSend_initWithElevationSubscription_(void *a1, const char *a2, ...)
{
  return [a1 initWithElevationSubscription:];
}

id objc_msgSend_initWithEndpoint_parameters_(void *a1, const char *a2, ...)
{
  return [a1 initWithEndpoint:parameters:];
}

id objc_msgSend_initWithEntityName_(void *a1, const char *a2, ...)
{
  return [a1 initWithEntityName:];
}

id objc_msgSend_initWithEnvironmentName_namedDelegatePort_queue_(void *a1, const char *a2, ...)
{
  return [a1 initWithEnvironmentName:namedDelegatePort:queue:];
}

id objc_msgSend_initWithEvent_andDate_(void *a1, const char *a2, ...)
{
  return [a1 initWithEvent:andDate:];
}

id objc_msgSend_initWithEventDate_type_(void *a1, const char *a2, ...)
{
  return [a1 initWithEventDate:x0 type:x1];
}

id objc_msgSend_initWithEventType_withDescription_withError_(void *a1, const char *a2, ...)
{
  return [a1 initWithEventType:withDescription:withError:];
}

id objc_msgSend_initWithExecutableIdentity_(void *a1, const char *a2, ...)
{
  return [a1 initWithExecutableIdentity:];
}

id objc_msgSend_initWithExecutableIdentity_website_systemService_(void *a1, const char *a2, ...)
{
  return [a1 initWithExecutableIdentity:website:systemService:];
}

id objc_msgSend_initWithExecutablePath_(void *a1, const char *a2, ...)
{
  return [a1 initWithExecutablePath:];
}

id objc_msgSend_initWithExplanation_target_attributes_(void *a1, const char *a2, ...)
{
  return [a1 initWithExplanation:x0 target:x1 attributes:x2];
}

id objc_msgSend_initWithExportDatabaseTablesResult_requestIdentifier_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "initWithExportDatabaseTablesResult:requestIdentifier:error:");
}

id objc_msgSend_initWithExportDir_fileName_sandboxExtensionTok_(void *a1, const char *a2, ...)
{
  return [a1 initWithExportDir:x0 fileName:x1 sandboxExtensionTok:x2];
}

id objc_msgSend_initWithFenceMonitor_(void *a1, const char *a2, ...)
{
  return [a1 initWithFenceMonitor:];
}

id objc_msgSend_initWithFetchRequest_(void *a1, const char *a2, ...)
{
  return [a1 initWithFetchRequest:];
}

id objc_msgSend_initWithFidelityPolicy_locations_accessPoints_(void *a1, const char *a2, ...)
{
  return [a1 initWithFidelityPolicy:locations:accessPoints:];
}

id objc_msgSend_initWithFidelityPolicy_locations_accessPoints_clientIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithFidelityPolicy:locations:accessPoints:clientIdentifier:];
}

id objc_msgSend_initWithFileDescriptor_(void *a1, const char *a2, ...)
{
  return [a1 initWithFileDescriptor:];
}

id objc_msgSend_initWithFileDescriptor_closeOnDealloc_(void *a1, const char *a2, ...)
{
  return [a1 initWithFileDescriptor:x0 closeOnDealloc:x1];
}

id objc_msgSend_initWithFilename_withDataProtectionClass_(void *a1, const char *a2, ...)
{
  return [a1 initWithFilename:withDataProtectionClass:];
}

id objc_msgSend_initWithFilteredElevation_(void *a1, const char *a2, ...)
{
  return [a1 initWithFilteredElevation:];
}

id objc_msgSend_initWithFingerprintErrorEnum_(void *a1, const char *a2, ...)
{
  return [a1 initWithFingerprintErrorEnum:];
}

id objc_msgSend_initWithFireTime_timeInterval_serviceIdentifier_wakeDevice_clTimer_silo_minimumEarlyFireProportion_(void *a1, const char *a2, ...)
{
  return [a1 initWithFireTime:x0 timeInterval:x1 serviceIdentifier:x2 wakeDevice:x3 clTimer:x4 silo:x5 minimumEarlyFireProportion:x6];
}

id objc_msgSend_initWithFloat_(void *a1, const char *a2, ...)
{
  return [a1 initWithFloat:];
}

id objc_msgSend_initWithFloor_inVenue_lastRelevant_locationContext_ranking_(void *a1, const char *a2, ...)
{
  return [a1 initWithFloor:x0 inVenue:x1 lastRelevant:x2 locationContext:x3 ranking:x4];
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return [a1 initWithFormat:];
}

id objc_msgSend_initWithGEOCoordinate_(void *a1, const char *a2, ...)
{
  return [a1 initWithGEOCoordinate:];
}

id objc_msgSend_initWithGaitMetrics_(void *a1, const char *a2, ...)
{
  return [a1 initWithGaitMetrics:];
}

id objc_msgSend_initWithGnssAWD_(void *a1, const char *a2, ...)
{
  return [a1 initWithGnssAWD:];
}

id objc_msgSend_initWithHRRecoveryInputHR_(void *a1, const char *a2, ...)
{
  return [a1 initWithHRRecoveryInputHR:];
}

id objc_msgSend_initWithHRRecoveryInputWR_(void *a1, const char *a2, ...)
{
  return [a1 initWithHRRecoveryInputWR:];
}

id objc_msgSend_initWithHRRecoverySession_(void *a1, const char *a2, ...)
{
  return [a1 initWithHRRecoverySession:];
}

id objc_msgSend_initWithHarvesterExternal_(void *a1, const char *a2, ...)
{
  return [a1 initWithHarvesterExternal:];
}

id objc_msgSend_initWithHarvesterExternal_andSilo_(void *a1, const char *a2, ...)
{
  return [a1 initWithHarvesterExternal:andSilo:];
}

id objc_msgSend_initWithHealthStore_(void *a1, const char *a2, ...)
{
  return [a1 initWithHealthStore:];
}

id objc_msgSend_initWithHealthStore_bundleIdentifier_quantityType_(void *a1, const char *a2, ...)
{
  return [a1 initWithHealthStore:x0 bundleIdentifier:x1 quantityType:x2];
}

id objc_msgSend_initWithHeartRate_confidence_timestamp_startDate_error_dataSource_mode_(void *a1, const char *a2, ...)
{
  return [a1 initWithHeartRate:x0 confidence:x1 timestamp:x2 startDate:x3 error:x4 dataSource:x5 mode:x6];
}

id objc_msgSend_initWithHeartRateData_(void *a1, const char *a2, ...)
{
  return [a1 initWithHeartRateData:];
}

id objc_msgSend_initWithHidDevice_matchingDict_(void *a1, const char *a2, ...)
{
  return [a1 initWithHidDevice:x0 matchingDict:x1];
}

id objc_msgSend_initWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithIdentifier:];
}

id objc_msgSend_initWithIdentifier_absoluteTimestamp_updateTimestamp_state_response_resolution_sosState_operatingMode_(void *a1, const char *a2, ...)
{
  return [a1 initWithIdentifier:x0 absoluteTimestamp:x1 updateTimestamp:x2 state:x3 response:x4 resolution:x5 sosState:x6 operatingMode:x7];
}

id objc_msgSend_initWithIdentifier_andType_(void *a1, const char *a2, ...)
{
  return [a1 initWithIdentifier:andType:];
}

id objc_msgSend_initWithIdentifier_dateInterval_quantity_resumeContext_(void *a1, const char *a2, ...)
{
  return [a1 initWithIdentifier:x0 dateInterval:x1 quantity:x2 resumeContext:x3];
}

id objc_msgSend_initWithIdentifier_keyType_(void *a1, const char *a2, ...)
{
  return [a1 initWithIdentifier:keyType:];
}

id objc_msgSend_initWithIdentifier_refinement_state_date_diagnostics_(void *a1, const char *a2, ...)
{
  return [a1 initWithIdentifier:x0 refinement:x1 state:x2 date:x3 diagnostics:x4];
}

id objc_msgSend_initWithIdentifier_targetQueue_(void *a1, const char *a2, ...)
{
  return [a1 initWithIdentifier:x0 targetQueue:x1];
}

id objc_msgSend_initWithIdentifier_targetQueue_waking_(void *a1, const char *a2, ...)
{
  return [a1 initWithIdentifier:x0 targetQueue:x1 waking:x2];
}

id objc_msgSend_initWithInUseLevel_registrationResult_transientAwareRegistrationResult_serviceMaskTuple_diagnosticMask_authorizedForWidgetUpdates_(void *a1, const char *a2, ...)
{
  return [a1 initWithInUseLevel:x0 registrationResult:x1 transientAwareRegistrationResult:x2 serviceMaskTuple:x3 diagnosticMask:x4 authorizedForWidgetUpdates:x5];
}

id objc_msgSend_initWithIncludeCrashLogs_(void *a1, const char *a2, ...)
{
  return [a1 initWithIncludeCrashLogs:];
}

id objc_msgSend_initWithInt_(void *a1, const char *a2, ...)
{
  return [a1 initWithInt:];
}

id objc_msgSend_initWithInternalName_binPeriod_aggregationPeriod_atCurrentTime_andSubmit_(void *a1, const char *a2, ...)
{
  return [a1 initWithInternalName:x0 binPeriod:x1 aggregationPeriod:x2 atCurrentTime:x3 andSubmit:x4];
}

id objc_msgSend_initWithInterval_motionActivityType_motionActivityConfidence_(void *a1, const char *a2, ...)
{
  return [a1 initWithInterval:x0 motionActivityType:x1 motionActivityConfidence:x2];
}

id objc_msgSend_initWithKey_ascending_(void *a1, const char *a2, ...)
{
  return [a1 initWithKey:ascending:];
}

id objc_msgSend_initWithKeyPointerFunctions_valuePointerFunctions_capacity_(void *a1, const char *a2, ...)
{
  return [a1 initWithKeyPointerFunctions:x0 valuePointerFunctions:x1 capacity:x2];
}

id objc_msgSend_initWithLabelIdentifier_probability_(void *a1, const char *a2, ...)
{
  return [a1 initWithLabelIdentifier:x0 probability:x1];
}

id objc_msgSend_initWithLatitude_longitude_(void *a1, const char *a2, ...)
{
  return [a1 initWithLatitude:x0 longitude:x1];
}

id objc_msgSend_initWithLatitude_longitude_andAltitude_(void *a1, const char *a2, ...)
{
  return [a1 initWithLatitude:x0 longitude:x1 andAltitude:x2];
}

id objc_msgSend_initWithLatitude_longitude_horizontalUncertainty_date_(void *a1, const char *a2, ...)
{
  return [a1 initWithLatitude:x0 longitude:x1 horizontalUncertainty:x2 date:x3];
}

id objc_msgSend_initWithLength_(void *a1, const char *a2, ...)
{
  return [a1 initWithLength:];
}

id objc_msgSend_initWithListener_silo_timeSync_(void *a1, const char *a2, ...)
{
  return [a1 initWithListener:a2 silo:a3 timeSync:a4];
}

id objc_msgSend_initWithLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithLocaleIdentifier:];
}

id objc_msgSend_initWithLocation_addressDictionary_region_areasOfInterest_mapItemSource_geoMapItemHandle_category_meCardAddress_muid_(void *a1, const char *a2, ...)
{
  return [a1 initWithLocation:x0 addressDictionary:x1 region:x2 areasOfInterest:x3 mapItemSource:x4 geoMapItemHandle:x5 category:x6 meCardAddress:x7 muid:x8];
}

id objc_msgSend_initWithLocation_addressDictionary_region_areasOfInterest_mapItemSource_geoMapItemHandle_meCardAddress_(void *a1, const char *a2, ...)
{
  return [a1 initWithLocation:x0 addressDictionary:x1 region:x2 areasOfInterest:x3 mapItemSource:x4 geoMapItemHandle:x5 meCardAddress:x6];
}

id objc_msgSend_initWithLocation_andPrivateLocation_(void *a1, const char *a2, ...)
{
  return [a1 initWithLocation:andPrivateLocation:];
}

id objc_msgSend_initWithLocationController_(void *a1, const char *a2, ...)
{
  return [a1 initWithLocationController:];
}

id objc_msgSend_initWithLocationType_remotePath_(void *a1, const char *a2, ...)
{
  return [a1 initWithLocationType:x0 remotePath:x1];
}

id objc_msgSend_initWithLocationTypeEnum_(void *a1, const char *a2, ...)
{
  return [a1 initWithLocationTypeEnum:];
}

id objc_msgSend_initWithLoiLocationProvider_(void *a1, const char *a2, ...)
{
  return [a1 initWithLoiLocationProvider:];
}

id objc_msgSend_initWithLong_(void *a1, const char *a2, ...)
{
  return [a1 initWithLong:x0];
}

id objc_msgSend_initWithMac_latitude_longitude_altitude_horizontalAccuracy_verticalAccuracy_reach_stationaryTimeInSeconds_loiType_lastUpdated_(void *a1, const char *a2, ...)
{
  return [a1 initWithMac:x0 latitude:x1 longitude:x2 altitude:x3 horizontalAccuracy:x4 verticalAccuracy:x5 reach:x6 stationaryTimeInSeconds:x7 loiType:x8 lastUpdated:x9];
}

id objc_msgSend_initWithMac_rssi_channel_age_date_(void *a1, const char *a2, ...)
{
  return [a1 initWithMac:rssi:channel:age:date:];
}

id objc_msgSend_initWithMacAddress_(void *a1, const char *a2, ...)
{
  return [a1 initWithMacAddress:];
}

id objc_msgSend_initWithMacAddress_timestamp_(void *a1, const char *a2, ...)
{
  return [a1 initWithMacAddress:timestamp:];
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return [a1 initWithMachServiceName:];
}

id objc_msgSend_initWithMachServiceName_options_(void *a1, const char *a2, ...)
{
  return [a1 initWithMachServiceName:options:];
}

id objc_msgSend_initWithMagneticAccessory_(void *a1, const char *a2, ...)
{
  return [a1 initWithMagneticAccessory:];
}

id objc_msgSend_initWithManagedObjectModel_(void *a1, const char *a2, ...)
{
  return [a1 initWithManagedObjectModel:];
}

id objc_msgSend_initWithManufacturer_modelName_serialNumber_firmwareVersion_productGroup_productNumber_(void *a1, const char *a2, ...)
{
  return [a1 initWithManufacturer:x0 modelName:x1 serialNumber:x2 firmwareVersion:x3 productGroup:x4 productNumber:x5];
}

id objc_msgSend_initWithMediator_(void *a1, const char *a2, ...)
{
  return [a1 initWithMediator:];
}

id objc_msgSend_initWithMemoryCapacity_diskCapacity_diskPath_(void *a1, const char *a2, ...)
{
  return [a1 initWithMemoryCapacity:x0 diskCapacity:x1 diskPath:x2];
}

id objc_msgSend_initWithMiLoConnectionSubscription_(void *a1, const char *a2, ...)
{
  return [a1 initWithMiLoConnectionSubscription:];
}

id objc_msgSend_initWithMicroLocationIdentifier_probability_(void *a1, const char *a2, ...)
{
  return [a1 initWithMicroLocationIdentifier:x0 probability:x1];
}

id objc_msgSend_initWithMicroLocationNotifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithMicroLocationNotifier:];
}

id objc_msgSend_initWithMode_(void *a1, const char *a2, ...)
{
  return [a1 initWithMode:];
}

id objc_msgSend_initWithMonitorGpsExternal_(void *a1, const char *a2, ...)
{
  return [a1 initWithMonitorGpsExternal:];
}

id objc_msgSend_initWithMotion_timestamp_(void *a1, const char *a2, ...)
{
  return [a1 initWithMotion:timestamp:];
}

id objc_msgSend_initWithMotionActivity_(void *a1, const char *a2, ...)
{
  return [a1 initWithMotionActivity:];
}

id objc_msgSend_initWithMotionActivity_endDate_(void *a1, const char *a2, ...)
{
  return [a1 initWithMotionActivity:x0 endDate:x1];
}

id objc_msgSend_initWithMotionAlarmSubscription_(void *a1, const char *a2, ...)
{
  return [a1 initWithMotionAlarmSubscription:];
}

id objc_msgSend_initWithMotionLogger_(void *a1, const char *a2, ...)
{
  return [a1 initWithMotionLogger:];
}

id objc_msgSend_initWithMovedBuffer_(void *a1, const char *a2, ...)
{
  return [a1 initWithMovedBuffer:];
}

id objc_msgSend_initWithNSDictionary_(void *a1, const char *a2, ...)
{
  return [a1 initWithNSDictionary:];
}

id objc_msgSend_initWithNVP_(void *a1, const char *a2, ...)
{
  return [a1 initWithNVP:];
}

id objc_msgSend_initWithName_managedObjectModel_(void *a1, const char *a2, ...)
{
  return [a1 initWithName:x0 managedObjectModel:x1];
}

id objc_msgSend_initWithName_path_onQueue_eventHandler_useMonitorQueueForVendingMonitor_vendingHandler_(void *a1, const char *a2, ...)
{
  return [a1 initWithName:x0 path:x1 onQueue:x2 eventHandler:x3 useMonitorQueueForVendingMonitor:x4 vendingHandler:x5];
}

id objc_msgSend_initWithName_type_duration_repeats_alarmId_bundleId_state_(void *a1, const char *a2, ...)
{
  return [a1 initWithName:x0 type:x1 duration:x2 repeats:x3 alarmId:x4 bundleId:x5 state:x6];
}

id objc_msgSend_initWithNonOwnerInformation_(void *a1, const char *a2, ...)
{
  return [a1 initWithNonOwnerInformation:];
}

id objc_msgSend_initWithNumClustersLearnedInModel_numRecordingTriggersAtCurrentLOI_numInputValidFingerprints_numInputValidFingerprintsLabeled_numInputValidFingerprintsUnlabeled_numFingerprintsBeforePruning_numFingerprintsAfterPruning_numWiFiAccessPoints_numBLESources_numUWBSources_(void *a1, const char *a2, ...)
{
  return [a1 initWithNumClustersLearnedInModel:numClustersLearnedInModel numRecordingTriggersAtCurrentLOI:numRecordingTriggersAtCurrentLOI numInputValidFingerprints:numInputValidFingerprints numInputValidFingerprintsLabeled:numInputValidFingerprintsLabeled numInputValidFingerprintsUnlabeled:numInputValidFingerprintsUnlabeled numFingerprintsBeforePruning:numFingerprintsBeforePruning numFingerprintsAfterPruning:numFingerprintsAfterPruning numWiFiAccessPoints:numWiFiAccessPoints numBLESources:numBLESources numUWBSources:numUWBSources];
}

id objc_msgSend_initWithNumInflightUploads_maxUploadFileSizeMB_maxUploadQuotaMB_(void *a1, const char *a2, ...)
{
  return [a1 initWithNumInflightUploads:maxUploadFileSizeMB:maxUploadQuotaMB:];
}

id objc_msgSend_initWithNumWiFiAccessPoints_numBLESources_numUWBSources_requestIdentifier_errors_(void *a1, const char *a2, ...)
{
  return [a1 initWithNumWiFiAccessPoints:numWiFiAccessPoints numBLESources:numBLESources numUWBSources:numUWBSources requestIdentifier:requestIdentifier errors:errors];
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return [a1 initWithObjects:];
}

id objc_msgSend_initWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return [a1 initWithObjectsAndKeys:];
}

id objc_msgSend_initWithOdometerEntry_(void *a1, const char *a2, ...)
{
  return [a1 initWithOdometerEntry:x0];
}

id objc_msgSend_initWithOdometerSubscription_(void *a1, const char *a2, ...)
{
  return [a1 initWithOdometerSubscription:];
}

id objc_msgSend_initWithOnBodyResult_confidence_timestamp_(void *a1, const char *a2, ...)
{
  return [a1 initWithOnBodyResult:x0 confidence:x1 timestamp:x2];
}

id objc_msgSend_initWithOpcode_payload_(void *a1, const char *a2, ...)
{
  return [a1 initWithOpcode:payload:];
}

id objc_msgSend_initWithOptions_(void *a1, const char *a2, ...)
{
  return [a1 initWithOptions:];
}

id objc_msgSend_initWithOverviewId_workouts_(void *a1, const char *a2, ...)
{
  return [a1 initWithOverviewId:workouts:];
}

id objc_msgSend_initWithOwnerClass_(void *a1, const char *a2, ...)
{
  return [a1 initWithOwnerClass:];
}

id objc_msgSend_initWithOwnerInformation_matchedIndex_sequence_error_(void *a1, const char *a2, ...)
{
  return [a1 initWithOwnerInformation:x0, x1, x2, x3];
}

id objc_msgSend_initWithParameters_delegate_(void *a1, const char *a2, ...)
{
  return [a1 initWithParameters:x0 delegate:x1];
}

id objc_msgSend_initWithPath_(void *a1, const char *a2, ...)
{
  return [a1 initWithPath:];
}

id objc_msgSend_initWithPayload_(void *a1, const char *a2, ...)
{
  return [a1 initWithPayload:];
}

id objc_msgSend_initWithPayload_requestTypeCode_endpoint_headers_(void *a1, const char *a2, ...)
{
  return [a1 initWithPayload:x0 requestTypeCode:x1 endpoint:x2 headers:x3];
}

id objc_msgSend_initWithPayloadV1_(void *a1, const char *a2, ...)
{
  return [a1 initWithPayloadV1:];
}

id objc_msgSend_initWithPayloadV2_(void *a1, const char *a2, ...)
{
  return [a1 initWithPayloadV2:];
}

id objc_msgSend_initWithPedestrianFenceClient_(void *a1, const char *a2, ...)
{
  return [a1 initWithPedestrianFenceClient:];
}

id objc_msgSend_initWithPencilState_(void *a1, const char *a2, ...)
{
  return [a1 initWithPencilState:];
}

id objc_msgSend_initWithPendingChanges_recordProvider_(void *a1, const char *a2, ...)
{
  return [a1 initWithPendingChanges:recordProvider:];
}

id objc_msgSend_initWithPersistence_(void *a1, const char *a2, ...)
{
  return [a1 initWithPersistence:];
}

id objc_msgSend_initWithPersistenceBytes_(void *a1, const char *a2, ...)
{
  return [a1 initWithPersistenceBytes:];
}

id objc_msgSend_initWithPid_name_queue_backgrounded_registration_(void *a1, const char *a2, ...)
{
  return [a1 initWithPid:x0 name:x1 queue:x2 backgrounded:x3 registration:x4];
}

id objc_msgSend_initWithPlaceIdentifier_score_confidence_placeMetadata_(void *a1, const char *a2, ...)
{
  return [a1 initWithPlaceIdentifier:x0 score:x1 confidence:x2 placeMetadata:x3];
}

id objc_msgSend_initWithPlacePredictions_locationSimilarityList_closeDeviceList_error_requestIdentifier_predictionTime_confidence_placeConfidenceReasons_localizationFingerprintMetaInfo_(void *a1, const char *a2, ...)
{
  return [a1 initWithPlacePredictions:x0 locationSimilarityList:x1 closeDeviceList:x2 error:x3 requestIdentifier:x4 predictionTime:x5 confidence:x6 placeConfidenceReasons:x7 localizationFingerprintMetaInfo:x8];
}

id objc_msgSend_initWithPlaces_(void *a1, const char *a2, ...)
{
  return [a1 initWithPlaces:];
}

id objc_msgSend_initWithPlaces_serviceType_(void *a1, const char *a2, ...)
{
  return [a1 initWithPlaces:serviceType:];
}

id objc_msgSend_initWithPredicate_anchor_options_resultsHandler_(void *a1, const char *a2, ...)
{
  return [a1 initWithPredicate:x0 anchor:x1 options:x2 resultsHandler:x3];
}

id objc_msgSend_initWithPredicate_resultsHandler_(void *a1, const char *a2, ...)
{
  return [a1 initWithPredicate:x0 resultsHandler:x1];
}

id objc_msgSend_initWithPredictedWalkDistanceBout_(void *a1, const char *a2, ...)
{
  return [a1 initWithPredictedWalkDistanceBout:];
}

id objc_msgSend_initWithPredictedWalkDistanceBoutEntry_(void *a1, const char *a2, ...)
{
  return [a1 initWithPredictedWalkDistanceBoutEntry:];
}

id objc_msgSend_initWithPredictedWalkDistanceBoutRecorderDb_(void *a1, const char *a2, ...)
{
  return [a1 initWithPredictedWalkDistanceBoutRecorderDb:];
}

id objc_msgSend_initWithPressure_stdDeviation_timestamp_(void *a1, const char *a2, ...)
{
  return [a1 initWithPressure:x0 stdDeviation:x1 timestamp:x2];
}

id objc_msgSend_initWithProperties_(void *a1, const char *a2, ...)
{
  return [a1 initWithProperties:];
}

id objc_msgSend_initWithProtobufData_type_isResponse_(void *a1, const char *a2, ...)
{
  return [a1 initWithProtobufData:x0 type:x1 isResponse:x2];
}

id objc_msgSend_initWithProvider_(void *a1, const char *a2, ...)
{
  return [a1 initWithProvider:];
}

id objc_msgSend_initWithProvider_onSilo_(void *a1, const char *a2, ...)
{
  return [a1 initWithProvider:onSilo:];
}

id objc_msgSend_initWithProximityUUID_identifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithProximityUUID:x0 identifier:x1];
}

id objc_msgSend_initWithProximityUUID_major_identifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithProximityUUID:x0 major:x1 identifier:x2];
}

id objc_msgSend_initWithProximityUUID_major_minor_identifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithProximityUUID:x0 major:x1 minor:x2 identifier:x3];
}

id objc_msgSend_initWithQuality_andReasons_(void *a1, const char *a2, ...)
{
  return [a1 initWithQuality:andReasons:];
}

id objc_msgSend_initWithQualityReasonEnum_(void *a1, const char *a2, ...)
{
  return [a1 initWithQualityReasonEnum:];
}

id objc_msgSend_initWithQuantityType_quantitySamplePredicate_options_anchorDate_intervalComponents_(void *a1, const char *a2, ...)
{
  return [a1 initWithQuantityType:x0 quantitySamplePredicate:x1 options:x2 anchorDate:x3 intervalComponents:x4];
}

id objc_msgSend_initWithQuantityType_quantitySamplePredicate_options_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 initWithQuantityType:x0 quantitySamplePredicate:x1 options:x2 completionHandler:x3];
}

id objc_msgSend_initWithQueue_(void *a1, const char *a2, ...)
{
  return [a1 initWithQueue:];
}

id objc_msgSend_initWithQueue_andController_(void *a1, const char *a2, ...)
{
  return [a1 initWithQueue:andController:];
}

id objc_msgSend_initWithQueue_canDownloadOverCellular_(void *a1, const char *a2, ...)
{
  return [a1 initWithQueue:x0 canDownloadOverCellular:x1];
}

id objc_msgSend_initWithQueue_decisionTreeObj_(void *a1, const char *a2, ...)
{
  return [a1 initWithQueue:x0 decisionTreeObj:x1];
}

id objc_msgSend_initWithQueue_defaultConfig_(void *a1, const char *a2, ...)
{
  return [a1 initWithQueue:x0 defaultConfig:x1];
}

id objc_msgSend_initWithQueue_helperObj_(void *a1, const char *a2, ...)
{
  return [a1 initWithQueue:x0 helperObj:x1];
}

id objc_msgSend_initWithQueue_mitigationConfig_cachedCoexMetricData_eventCB_coexMetricUpdateCB_(void *a1, const char *a2, ...)
{
  return [a1 initWithQueue:x0 mitigationConfig:x1 cachedCoexMetricData:x2 eventCB:x3 coexMetricUpdateCB:x4];
}

id objc_msgSend_initWithQueue_settings_(void *a1, const char *a2, ...)
{
  return [a1 initWithQueue:x0 settings:x1];
}

id objc_msgSend_initWithQueue_settings_advStore_btClient_(void *a1, const char *a2, ...)
{
  return [a1 initWithQueue:x0 settings:x1 advStore:x2 btClient:x3];
}

id objc_msgSend_initWithQueue_withSettings_(void *a1, const char *a2, ...)
{
  return [a1 initWithQueue:withSettings:];
}

id objc_msgSend_initWithQueue_withSettings_withPolicy_(void *a1, const char *a2, ...)
{
  return [a1 initWithQueue:x0 withSettings:x1 withPolicy:x2];
}

id objc_msgSend_initWithRadius_radialDisplacement_duration_(void *a1, const char *a2, ...)
{
  return [a1 initWithRadius:radialDisplacement:duration:];
}

id objc_msgSend_initWithRecordID_type_(void *a1, const char *a2, ...)
{
  return [a1 initWithRecordID:type:];
}

id objc_msgSend_initWithRecordName_zoneID_(void *a1, const char *a2, ...)
{
  return [a1 initWithRecordName:x0 zoneID:x1];
}

id objc_msgSend_initWithRecordType_recordID_(void *a1, const char *a2, ...)
{
  return [a1 initWithRecordType:recordID:];
}

id objc_msgSend_initWithRegion_eventType_eventDate_(void *a1, const char *a2, ...)
{
  return [a1 initWithRegion:eventType:eventDate:];
}

id objc_msgSend_initWithRequestTimestamp_hints_replyBlock_(void *a1, const char *a2, ...)
{
  return [a1 initWithRequestTimestamp:hints:replyBlock:];
}

id objc_msgSend_initWithRequester_(void *a1, const char *a2, ...)
{
  return [a1 initWithRequester:];
}

id objc_msgSend_initWithRootDirectory_classifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithRootDirectory:classifier:];
}

id objc_msgSend_initWithSample_(void *a1, const char *a2, ...)
{
  return [a1 initWithSample:];
}

id objc_msgSend_initWithSampleType_predicate_limit_sortDescriptors_resultsHandler_(void *a1, const char *a2, ...)
{
  return [a1 initWithSampleType:x0 predicate:x1 limit:x2 sortDescriptors:x3 resultsHandler:x4];
}

id objc_msgSend_initWithSampleType_samplePredicate_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 initWithSampleType:x0 samplePredicate:x1 completionHandler:x2];
}

id objc_msgSend_initWithSerializedOutdoorEstimatorLogEntry_(void *a1, const char *a2, ...)
{
  return [a1 initWithSerializedOutdoorEstimatorLogEntry:];
}

id objc_msgSend_initWithSerializedVIOEstimation_(void *a1, const char *a2, ...)
{
  return [a1 initWithSerializedVIOEstimation:];
}

id objc_msgSend_initWithSerializedVLLocalizationResult_(void *a1, const char *a2, ...)
{
  return [a1 initWithSerializedVLLocalizationResult:];
}

id objc_msgSend_initWithService_delegate_queue_(void *a1, const char *a2, ...)
{
  return [a1 initWithService:a2 delegate:a3 queue:a4];
}

id objc_msgSend_initWithService_priority_asMasterStore_options_(void *a1, const char *a2, ...)
{
  return [a1 initWithService:x0 priority:x1 asMasterStore:x2 options:x3];
}

id objc_msgSend_initWithServiceIdentifier_serviceType_locationTypes_(void *a1, const char *a2, ...)
{
  return [a1 initWithServiceIdentifier:x0 serviceType:x1 locationTypes:x2];
}

id objc_msgSend_initWithServiceName_(void *a1, const char *a2, ...)
{
  return [a1 initWithServiceName:];
}

id objc_msgSend_initWithServiceState_suspendReasons_serviceDescriptor_currentLocationOfInterestUuid_currentLocationOfInterestType_error_serviceQualityInfo_places_metaInfo_(void *a1, const char *a2, ...)
{
  return [a1 initWithServiceState:suspendReasons:serviceDescriptor:currentLocationOfInterestUuid:currentLocationOfInterestType:error:serviceQualityInfo:places:metaInfo:];
}

id objc_msgSend_initWithSessionId_locationType_poolLength_startDate_endDate_(void *a1, const char *a2, ...)
{
  return [a1 initWithSessionId:x0 locationType:x1 poolLength:x2 startDate:x3 endDate:x4];
}

id objc_msgSend_initWithSessionId_type_locationType_mode_startDate_endDate_(void *a1, const char *a2, ...)
{
  return [a1 initWithSessionId:x0 type:x1 locationType:x2 mode:x3 startDate:x4 endDate:x5];
}

id objc_msgSend_initWithSet_(void *a1, const char *a2, ...)
{
  return [a1 initWithSet:];
}

id objc_msgSend_initWithSettings_(void *a1, const char *a2, ...)
{
  return [a1 initWithSettings:];
}

id objc_msgSend_initWithSignalQuality_(void *a1, const char *a2, ...)
{
  return [a1 initWithSignalQuality:];
}

id objc_msgSend_initWithSignificantElevation_(void *a1, const char *a2, ...)
{
  return [a1 initWithSignificantElevation:];
}

id objc_msgSend_initWithSilo_(void *a1, const char *a2, ...)
{
  return [a1 initWithSilo:];
}

id objc_msgSend_initWithSilo_andMonitorRegion_andOnRegionChangedCallback_(void *a1, const char *a2, ...)
{
  return [a1 initWithSilo:x0 andMonitorRegion:x1 andOnRegionChangedCallback:x2];
}

id objc_msgSend_initWithSilo_iDSService_(void *a1, const char *a2, ...)
{
  return [a1 initWithSilo:iDSService:];
}

id objc_msgSend_initWithSilo_provider_(void *a1, const char *a2, ...)
{
  return [a1 initWithSilo:provider:];
}

id objc_msgSend_initWithSilo_vendor_(void *a1, const char *a2, ...)
{
  return [a1 initWithSilo:vendor:];
}

id objc_msgSend_initWithSkiEntry_(void *a1, const char *a2, ...)
{
  return [a1 initWithSkiEntry:];
}

id objc_msgSend_initWithSlot_(void *a1, const char *a2, ...)
{
  return [a1 initWithSlot:];
}

id objc_msgSend_initWithSpeeds_speedUB_(void *a1, const char *a2, ...)
{
  return [a1 initWithSpeeds:speedUB:];
}

id objc_msgSend_initWithSpringEntry_(void *a1, const char *a2, ...)
{
  return [a1 initWithSpringEntry:];
}

id objc_msgSend_initWithStart_end_(void *a1, const char *a2, ...)
{
  return [a1 initWithStart:end:];
}

id objc_msgSend_initWithStart_stop_distanceGps_distanceRawPed_steps_gpsSource_(void *a1, const char *a2, ...)
{
  return [a1 initWithStart:x0 stop:x1 distanceGps:x2 distanceRawPed:x3 steps:x4 gpsSource:x5];
}

id objc_msgSend_initWithStartDate_duration_(void *a1, const char *a2, ...)
{
  return [a1 initWithStartDate:x0 duration:x1];
}

id objc_msgSend_initWithStartDate_endDate_(void *a1, const char *a2, ...)
{
  return [a1 initWithStartDate:endDate:];
}

id objc_msgSend_initWithStartDate_endDate_elevationAscended_elevationDescended_source_recordId_sourceId_(void *a1, const char *a2, ...)
{
  return [a1 initWithStartDate:x0 endDate:x1 elevationAscended:x2 elevationDescended:x3 source:x4 recordId:x5 sourceId:x6];
}

id objc_msgSend_initWithStartDate_endDate_steps_distance_floorsAscended_floorsDescended_recordID_currentPace_currentCadence_firstStepTime_activeTime_sourceId_isOdometerDistance_isOdometerPace_pushes_workoutType_elevationAscended_elevationDescended_distanceSource_(void *a1, const char *a2, ...)
{
  return [a1 initWithStartDate:x0 endDate:x1 steps:x2 distance:x3 floorsAscended:x4 floorsDescended:x5 recordID:x6 currentPace:x7 currentCadence:x8 firstStepTime:x9 activeTime:x10 sourceId:x11 isOdometerDistance:x12 isOdometerPace:x13 pushes:x14 workoutType:x15 elevationAscended:x16 elevationDescended:x17 distanceSource:x18];
}

id objc_msgSend_initWithStartDate_eventType_action_reason_workoutType_(void *a1, const char *a2, ...)
{
  return [a1 initWithStartDate:x0 eventType:x1 action:x2 reason:x3 workoutType:x4];
}

id objc_msgSend_initWithStartDate_firedDate_alarmType_didWake_(void *a1, const char *a2, ...)
{
  return [a1 initWithStartDate:x0 firedDate:x1 alarmType:x2 didWake:x3];
}

id objc_msgSend_initWithStartDate_recordId_activityType_mets_natalies_basalNatalies_sourceId_(void *a1, const char *a2, ...)
{
  return [a1 initWithStartDate:x0 recordId:x1 activityType:x2 mets:x3 natalies:x4 basalNatalies:x5 sourceId:x6];
}

id objc_msgSend_initWithStartDate_recordId_sourceId_(void *a1, const char *a2, ...)
{
  return [a1 initWithStartDate:x0 recordId:x1 sourceId:x2];
}

id objc_msgSend_initWithStartDate_suitableForRunning_suitableForWalking_(void *a1, const char *a2, ...)
{
  return [a1 initWithStartDate:x0 suitableForRunning:x1 suitableForWalking:x2];
}

id objc_msgSend_initWithStartDate_type_confidence_(void *a1, const char *a2, ...)
{
  return [a1 initWithStartDate:x0 type:x1 confidence:x2];
}

id objc_msgSend_initWithStartTime_(void *a1, const char *a2, ...)
{
  return [a1 initWithStartTime:];
}

id objc_msgSend_initWithStarting_(void *a1, const char *a2, ...)
{
  return [a1 initWithStarting:];
}

id objc_msgSend_initWithStarting_isWiFiSwitchOn_quality_(void *a1, const char *a2, ...)
{
  return [a1 initWithStarting:x0 isWiFiSwitchOn:x1 quality:x2];
}

id objc_msgSend_initWithStarting_rat_deviceRegistrationState_quality_rrcStatus_(void *a1, const char *a2, ...)
{
  return [a1 initWithStarting:x0 rat:x1 deviceRegistrationState:x2 quality:x3 rrcStatus:x4];
}

id objc_msgSend_initWithState_confidence_observationInterval_additionalInfo_(void *a1, const char *a2, ...)
{
  return [a1 initWithState:x0 confidence:x1 observationInterval:x2 additionalInfo:x3];
}

id objc_msgSend_initWithState_date_(void *a1, const char *a2, ...)
{
  return [a1 initWithState:x0 date:x1];
}

id objc_msgSend_initWithState_startTime_(void *a1, const char *a2, ...)
{
  return [a1 initWithState:x0 startTime:x1];
}

id objc_msgSend_initWithState_workout_entryDate_(void *a1, const char *a2, ...)
{
  return [a1 initWithState:x0 workout:x1 entryDate:x2];
}

id objc_msgSend_initWithStatus_startDate_endDate_meanDelta_(void *a1, const char *a2, ...)
{
  return [a1 initWithStatus:x0 startDate:x1 endDate:x2 meanDelta:x3];
}

id objc_msgSend_initWithStepCountSubscription_(void *a1, const char *a2, ...)
{
  return [a1 initWithStepCountSubscription:];
}

id objc_msgSend_initWithStepEntry_(void *a1, const char *a2, ...)
{
  return [a1 initWithStepEntry:];
}

id objc_msgSend_initWithStoreIdentifier_type_(void *a1, const char *a2, ...)
{
  return [a1 initWithStoreIdentifier:type:];
}

id objc_msgSend_initWithStreamingAllowed_framerateFps_bitrateKbps_dropStreaming_uploadAllowed_uploadMitigation_source_(void *a1, const char *a2, ...)
{
  return [a1 initWithStreamingAllowed:x0 framerateFps:x1 bitrateKbps:x2 dropStreaming:x3 uploadAllowed:x4 uploadMitigation:x5 source:x6];
}

id objc_msgSend_initWithStrideCalEntry_(void *a1, const char *a2, ...)
{
  return [a1 initWithStrideCalEntry:];
}

id objc_msgSend_initWithStrideCalRecorderDb_(void *a1, const char *a2, ...)
{
  return [a1 initWithStrideCalRecorderDb:];
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return [a1 initWithString:x0];
}

id objc_msgSend_initWithSubjectUUID_studyUUID_channel_payloadType_certificate_(void *a1, const char *a2, ...)
{
  return [a1 initWithSubjectUUID:x0 studyUUID:x1 channel:x2 payloadType:x3 certificate:x4];
}

id objc_msgSend_initWithSubscription_(void *a1, const char *a2, ...)
{
  return [a1 initWithSubscription:];
}

id objc_msgSend_initWithSuspendReasonEnum_(void *a1, const char *a2, ...)
{
  return [a1 initWithSuspendReasonEnum:];
}

id objc_msgSend_initWithSwimEntry_(void *a1, const char *a2, ...)
{
  return [a1 initWithSwimEntry:];
}

id objc_msgSend_initWithSyncManager_silo_(void *a1, const char *a2, ...)
{
  return [a1 initWithSyncManager:silo:];
}

id objc_msgSend_initWithSystemStateType_isOn_date_(void *a1, const char *a2, ...)
{
  return [a1 initWithSystemStateType:isOn:date:];
}

id objc_msgSend_initWithTASPAdvertisement_deviceType_notificationState_date_(void *a1, const char *a2, ...)
{
  return [a1 initWithTASPAdvertisement:x0 deviceType:x1 notificationState:x2 date:x3];
}

id objc_msgSend_initWithTCCIdentity_(void *a1, const char *a2, ...)
{
  return [a1 initWithTCCIdentity:];
}

id objc_msgSend_initWithTechnology_numDevices_(void *a1, const char *a2, ...)
{
  return [a1 initWithTechnology:numDevices:];
}

id objc_msgSend_initWithTemperature_andTemperatureUncertainty_andDate_(void *a1, const char *a2, ...)
{
  return [a1 initWithTemperature:x0 andTemperatureUncertainty:x1 andDate:x2];
}

id objc_msgSend_initWithTestMode_(void *a1, const char *a2, ...)
{
  return [a1 initWithTestMode:];
}

id objc_msgSend_initWithThreshold_sampleCount_sampleRate_(void *a1, const char *a2, ...)
{
  return [a1 initWithThreshold:x0 sampleCount:x1 sampleRate:x2];
}

id objc_msgSend_initWithTime_andEvent_(void *a1, const char *a2, ...)
{
  return [a1 initWithTime:andEvent:];
}

id objc_msgSend_initWithTime_dataPeriodSec_deltaCourseRad_deltaSpeedMps_deltaCourseVarRad2_deltaSpeedVarMps2_deltaCourseSpeedCovarRadMps_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "initWithTime:dataPeriodSec:deltaCourseRad:deltaSpeedMps:deltaCourseVarRad2:deltaSpeedVarMps2:deltaCourseSpeedCovarRadMps:");
}

id objc_msgSend_initWithTime_latitude_longitude_horizontalAccuracy_course_courseAccuracy_speed_speedAccuracy_altitude_altitudeAccuracy_locType_(void *a1, const char *a2, ...)
{
  return [a1 initWithTime:x0 latitude:x1 longitude:x2 horizontalAccuracy:x3 course:x4 courseAccuracy:x5 speed:x6 speedAccuracy:x7 altitude:x8 altitudeAccuracy:x9 locType:x10];
}

id objc_msgSend_initWithTimeInterval_serviceIdentifier_target_selector_userInfo_(void *a1, const char *a2, ...)
{
  return [a1 initWithTimeInterval:x0 serviceIdentifier:x1 target:x2 selector:x3 userInfo:x4];
}

id objc_msgSend_initWithTimeInterval_sinceDate_(void *a1, const char *a2, ...)
{
  return [a1 initWithTimeInterval:x0 sinceDate:x1];
}

id objc_msgSend_initWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return [a1 initWithTimeIntervalSinceReferenceDate:];
}

id objc_msgSend_initWithTimeRange_vehicleName_vehicleModelName_vehicleBluetoothAddress_(void *a1, const char *a2, ...)
{
  return [a1 initWithTimeRange:x0 vehicleName:x1 vehicleModelName:x2 vehicleBluetoothAddress:x3];
}

id objc_msgSend_initWithTimeZone_zoneBoundary_(void *a1, const char *a2, ...)
{
  return [a1 initWithTimeZone:zoneBoundary];
}

id objc_msgSend_initWithTimestamp_(void *a1, const char *a2, ...)
{
  return [a1 initWithTimestamp:];
}

id objc_msgSend_initWithTimestamp_RSSI_uuid_ipv4_channel_(void *a1, const char *a2, ...)
{
  return [a1 initWithTimestamp:x0 RSSI:x1 uuid:x2 ipv4:x3 channel:x4];
}

id objc_msgSend_initWithTimestamp_illumination_(void *a1, const char *a2, ...)
{
  return [a1 initWithTimestamp:x0 illumination:x1];
}

id objc_msgSend_initWithTimestamp_intensity_intensityCalDelta_intensityBaselineDelta_ambient_pocketProbability_baselineConfidence_rxNtcC_scanFlags_pocketFlag_(void *a1, const char *a2, ...)
{
  return [a1 initWithTimestamp:x0 intensity:x1 intensityCalDelta:x2 intensityBaselineDelta:x3 ambient:x4 pocketProbability:x5 baselineConfidence:x6 rxNtcC:x7 scanFlags:x8 pocketFlag:x9];
}

id objc_msgSend_initWithTimestamp_latitude_longitude_horizontalAccuracy_altitude_verticalAccuracy_speed_speedAccuracy_course_courseAccuracy_deltaDistance_deltaDistanceAccuracy_groundAltitude_groundAltitudeUncertainty_pressure_pressureUncertainty_isSimulatedOrSpoofed_(void *a1, const char *a2, ...)
{
  return [a1 initWithTimestamp:x0 latitude:x1 longitude:x2 horizontalAccuracy:x3 altitude:x4 verticalAccuracy:x5 speed:x6 speedAccuracy:x7 course:x8 courseAccuracy:x9 deltaDistance:x10 deltaDistanceAccuracy:x11 groundAltitude:x12 groundAltitudeUncertainty:x13 pressure:x14 pressureUncertainty:x15 isSimulatedOrSpoofed:x16];
}

id objc_msgSend_initWithTimestamp_latitude_longitude_horizontalAccuracy_altitude_verticalAccuracy_speed_speedAccuracy_course_courseAccuracy_floorLevel_(void *a1, const char *a2, ...)
{
  return [a1 initWithTimestamp:x0 latitude:x1 longitude:x2 horizontalAccuracy:x3 altitude:x4 verticalAccuracy:x5 speed:x6 speedAccuracy:x7 course:x8 courseAccuracy:x9 floorLevel:x10];
}

id objc_msgSend_initWithTimestamp_machContinuousTimestamp_sampleInterval_deltaPosition_deltaVelocity_quaternion_referenceFrameContinuity_referenceFrame_staticFlag_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "initWithTimestamp:machContinuousTimestamp:sampleInterval:deltaPosition:deltaVelocity:quaternion:referenceFrameContinuity:referenceFrame:staticFlag:");
}

id objc_msgSend_initWithTimestamp_state_hints_(void *a1, const char *a2, ...)
{
  return [a1 initWithTimestamp:x0 state:x1 hints:x2];
}

id objc_msgSend_initWithTrack_session_(void *a1, const char *a2, ...)
{
  return [a1 initWithTrack:session:];
}

id objc_msgSend_initWithTrackRunController_(void *a1, const char *a2, ...)
{
  return [a1 initWithTrackRunController:];
}

id objc_msgSend_initWithTracksData_andLocation_(void *a1, const char *a2, ...)
{
  return [a1 initWithTracksData:andLocation:];
}

id objc_msgSend_initWithTransportType_andNavigationState_date_(void *a1, const char *a2, ...)
{
  return [a1 initWithTransportType:andNavigationState:date:];
}

id objc_msgSend_initWithTrigger_duration_onQueue_forClient_withHandler_(void *a1, const char *a2, ...)
{
  return [a1 initWithTrigger:x0 duration:x1 onQueue:x2 forClient:x3 withHandler:x4];
}

id objc_msgSend_initWithTrigger_duration_onQueue_withHandler_(void *a1, const char *a2, ...)
{
  return [a1 initWithTrigger:x0 duration:x1 onQueue:x2 withHandler:x3];
}

id objc_msgSend_initWithTripSegmentID_isFinalPart_modeOfTransport_tripLocations_startTripLocation_stopTripLocation_inertialOdometryData_(void *a1, const char *a2, ...)
{
  return [a1 initWithTripSegmentID:x0 isFinalPart:x1 modeOfTransport:x2 tripLocations:x3 startTripLocation:x4 stopTripLocation:x5 inertialOdometryData:x6];
}

id objc_msgSend_initWithType_(void *a1, const char *a2, ...)
{
  return [a1 initWithType:];
}

id objc_msgSend_initWithType_dataCollection_(void *a1, const char *a2, ...)
{
  return [a1 initWithType:dataCollection:];
}

id objc_msgSend_initWithType_latitude_longitude_horizontalAccuracy_date_(void *a1, const char *a2, ...)
{
  return [a1 initWithType:x0 latitude:x1 longitude:x2 horizontalAccuracy:x3 date:x4];
}

id objc_msgSend_initWithType_latitude_longitude_horizontalAccuracy_referenceFrame_date_(void *a1, const char *a2, ...)
{
  return [a1 initWithType:x0 latitude:x1 longitude:x2 horizontalAccuracy:x3 referenceFrame:x4 date:x5];
}

id objc_msgSend_initWithURL_(void *a1, const char *a2, ...)
{
  return [a1 initWithURL:];
}

id objc_msgSend_initWithURL_delegate_queue_(void *a1, const char *a2, ...)
{
  return [a1 initWithURL:x0 delegate:x1 queue:x2];
}

id objc_msgSend_initWithURL_error_(void *a1, const char *a2, ...)
{
  return [a1 initWithURL:error:];
}

id objc_msgSend_initWithURL_useCloudKit_(void *a1, const char *a2, ...)
{
  return [a1 initWithURL:x0 useCloudKit:x1];
}

id objc_msgSend_initWithUTF8String_(void *a1, const char *a2, ...)
{
  return [a1 initWithUTF8String:];
}

id objc_msgSend_initWithUUID_(void *a1, const char *a2, ...)
{
  return [a1 initWithUUID:];
}

id objc_msgSend_initWithUUID_address_successType_date_(void *a1, const char *a2, ...)
{
  return [a1 initWithUUID:x0 address:x1 successType:x2 date:x3];
}

id objc_msgSend_initWithUUID_deviceType_(void *a1, const char *a2, ...)
{
  return [a1 initWithUUID:x0 deviceType:x1];
}

id objc_msgSend_initWithUUID_major_(void *a1, const char *a2, ...)
{
  return [a1 initWithUUID:x0 major:x1];
}

id objc_msgSend_initWithUUID_major_minor_(void *a1, const char *a2, ...)
{
  return [a1 initWithUUID:x0 major:x1 minor:x2];
}

id objc_msgSend_initWithUUID_queue_centralManager_(void *a1, const char *a2, ...)
{
  return [a1 initWithUUID:x0 queue:x1 centralManager:x2];
}

id objc_msgSend_initWithUUID_withAISInfo_successType_date_(void *a1, const char *a2, ...)
{
  return [a1 initWithUUID:x0 withAISInfo:x1 successType:x2 date:x3];
}

id objc_msgSend_initWithUUIDBytes_(void *a1, const char *a2, ...)
{
  return [a1 initWithUUIDBytes:];
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return [a1 initWithUUIDString:];
}

id objc_msgSend_initWithUnderlyingQueue_(void *a1, const char *a2, ...)
{
  return [a1 initWithUnderlyingQueue:];
}

id objc_msgSend_initWithUniverse_(void *a1, const char *a2, ...)
{
  return [a1 initWithUniverse:];
}

id objc_msgSend_initWithUniverse_andDelegate_(void *a1, const char *a2, ...)
{
  return [a1 initWithUniverse:andDelegate:];
}

id objc_msgSend_initWithUniverse_andStateMachine_(void *a1, const char *a2, ...)
{
  return [a1 initWithUniverse:andStateMachine:];
}

id objc_msgSend_initWithUniverse_apnsTokenCallback_apnsMessageCallback_apnsReconnectedCallback_(void *a1, const char *a2, ...)
{
  return [a1 initWithUniverse:apnsTokenCallback:apnsMessageCallback:apnsReconnectedCallback:];
}

id objc_msgSend_initWithUniverse_buffers_(void *a1, const char *a2, ...)
{
  return [a1 initWithUniverse:buffers];
}

id objc_msgSend_initWithUniverse_delegate_(void *a1, const char *a2, ...)
{
  return [a1 initWithUniverse:delegate:];
}

id objc_msgSend_initWithUniverse_delegate_buffers_contextManager_(void *a1, const char *a2, ...)
{
  return [a1 initWithUniverse:a2 delegate:a3 buffers:a4 contextManager:a5];
}

id objc_msgSend_initWithUniverse_delegate_withBuffer_withSourceAggregator_(void *a1, const char *a2, ...)
{
  return [a1 initWithUniverse:a2 delegate:a3 withBuffer:a4 withSourceAggregator:a5];
}

id objc_msgSend_initWithUniverse_fenceAnalyticsManager_(void *a1, const char *a2, ...)
{
  return [a1 initWithUniverse:fenceAnalyticsManager:];
}

id objc_msgSend_initWithUniverse_initialMitigation_mitigationConfig_activeSim_Rat_wifiEmergency_cachedCoexMetricData_mitigationCB_coexMetricUpdateCB_(void *a1, const char *a2, ...)
{
  return [a1 initWithUniverse:x0 initialMitigation:x1 mitigationConfig:x2 activeSim:x3 Rat:x4 wifiEmergency:x5 cachedCoexMetricData:x6 mitigationCB:x7 coexMetricUpdateCB:x8];
}

id objc_msgSend_initWithUniverse_mitigationConfig_activeSim_Rat_wifiEmergency_cachedCoexMetricData_eventCB_coexMetricUpdateCB_(void *a1, const char *a2, ...)
{
  return [a1 initWithUniverse:mitigationConfig:activeSim:Rat:wifiEmergency:cachedCoexMetricData:eventCB:coexMetricUpdateCB:];
}

id objc_msgSend_initWithUniverse_pendingRequestsCB_streamingRequestCB_uploadRequestCB_streamingEndCB_uploadListCB_handleResponseCB_mitigationsCB_(void *a1, const char *a2, ...)
{
  return [a1 initWithUniverse:pendingRequestsCB:streamingRequestCB:uploadRequestCB:streamingEndCB:uploadListCB:handleResponseCB:mitigationsCB:];
}

id objc_msgSend_initWithUniverse_serviceCompletionCB_getMitigationCB_getUploadConfigCB_errorCB_(void *a1, const char *a2, ...)
{
  return [a1 initWithUniverse:x0 serviceCompletionCB:x1 getMitigationCB:x2 getUploadConfigCB:x3 errorCB:x4];
}

id objc_msgSend_initWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return [a1 initWithUnsignedShort:];
}

id objc_msgSend_initWithUpdateHandler_(void *a1, const char *a2, ...)
{
  return [a1 initWithUpdateHandler:];
}

id objc_msgSend_initWithUpdateRate_withDuration_(void *a1, const char *a2, ...)
{
  return [a1 initWithUpdateRate:withDuration:];
}

id objc_msgSend_initWithUserType_placeType_placemark_referenceLocation_confidence_preferredName_loiIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithUserType:x0 placeType:x1 placemark:x2 referenceLocation:x3 confidence:x4 preferredName:x5 loiIdentifier:x6];
}

id objc_msgSend_initWithValue_dirty_(void *a1, const char *a2, ...)
{
  return [a1 initWithValue:x0 dirty:x1];
}

id objc_msgSend_initWithValueOut_begin_end_state_(void *a1, const char *a2, ...)
{
  return [a1 initWithValueOut:begin:end:state:];
}

id objc_msgSend_initWithVehicleStateNotifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithVehicleStateNotifier:];
}

id objc_msgSend_initWithVehicularState_andVehicularHints_andOperatorState_date_(void *a1, const char *a2, ...)
{
  return [a1 initWithVehicularState:andVehicularHints:andOperatorState:date:];
}

id objc_msgSend_initWithVisit_(void *a1, const char *a2, ...)
{
  return [a1 initWithVisit:];
}

id objc_msgSend_initWithWalkingSpeedCalRecorderDb_(void *a1, const char *a2, ...)
{
  return [a1 initWithWalkingSpeedCalRecorderDb:];
}

id objc_msgSend_initWithWalkingSpeedStrideCal_(void *a1, const char *a2, ...)
{
  return [a1 initWithWalkingSpeedStrideCal:];
}

id objc_msgSend_initWithWaterSubmersionClient_(void *a1, const char *a2, ...)
{
  return [a1 initWithWaterSubmersionClient:];
}

id objc_msgSend_initWithWindowSize_(void *a1, const char *a2, ...)
{
  return [a1 initWithWindowSize:];
}

id objc_msgSend_initWithWindowSize_andCadence_andVerticalAccuracyThreshold_(void *a1, const char *a2, ...)
{
  return [a1 initWithWindowSize:x0 andCadence:x1 andVerticalAccuracyThreshold:x2];
}

id objc_msgSend_initWithWorkoutDistanceMeasures_(void *a1, const char *a2, ...)
{
  return [a1 initWithWorkoutDistanceMeasures:];
}

id objc_msgSend_initWithWorkoutSubscription_(void *a1, const char *a2, ...)
{
  return [a1 initWithWorkoutSubscription:];
}

id objc_msgSend_initWithX_Y_Z_(void *a1, const char *a2, ...)
{
  return [a1 initWithX:x0 Y:x1 Z:x2];
}

id objc_msgSend_initWithX_Y_Z_W_(void *a1, const char *a2, ...)
{
  return [a1 initWithX:x0 Y:x1 Z:x2 W:x3];
}

id objc_msgSend_initWithZone_(void *a1, const char *a2, ...)
{
  return [a1 initWithZone:];
}

id objc_msgSend_initWithZoneID_(void *a1, const char *a2, ...)
{
  return [a1 initWithZoneID:];
}

id objc_msgSend_initWithZoneName_ownerName_(void *a1, const char *a2, ...)
{
  return [a1 initWithZoneName:x0 ownerName:x1];
}

id objc_msgSend_initialCellParamsDeemedReceived(void *a1, const char *a2, ...)
{
  return _[a1 initialCellParamsDeemedReceived];
}

id objc_msgSend_initializeClientRequestsViewsWithZeroValues_(void *a1, const char *a2, ...)
{
  return [a1 initializeClientRequestsViewsWithZeroValues:];
}

id objc_msgSend_initializeCloudKitSchemaWithOptions_error_(void *a1, const char *a2, ...)
{
  return [a1 initializeCloudKitSchemaWithOptions:x0 error:x1];
}

id objc_msgSend_initializeKeychainItemWithIdentifier_keyType_(void *a1, const char *a2, ...)
{
  return [a1 initializeKeychainItemWithIdentifier:keyType:];
}

id objc_msgSend_initializeModeTransitions_(void *a1, const char *a2, ...)
{
  return [a1 initializeModeTransitions:];
}

id objc_msgSend_initializeScanTypeChangeViewsWithZeroValues(void *a1, const char *a2, ...)
{
  return _[a1 initializeScanTypeChangeViewsWithZeroValues];
}

id objc_msgSend_initializeSyncEngine(void *a1, const char *a2, ...)
{
  return _[a1 initializeSyncEngine];
}

id objc_msgSend_initializeTheSettings_(void *a1, const char *a2, ...)
{
  return [a1 initializeTheSettings:];
}

id objc_msgSend_initializeThresholds(void *a1, const char *a2, ...)
{
  return _[a1 initializeThresholds];
}

id objc_msgSend_initializeThresholdsGivenAltitude_andAccuracy_(void *a1, const char *a2, ...)
{
  return [a1 initializeThresholdsGivenAltitude:andAccuracy:];
}

id objc_msgSend_inlandWater(void *a1, const char *a2, ...)
{
  return _[a1 inlandWater];
}

id objc_msgSend_inlierIndices(void *a1, const char *a2, ...)
{
  return _[a1 inlierIndices];
}

id objc_msgSend_inliersCount(void *a1, const char *a2, ...)
{
  return _[a1 inliersCount];
}

id objc_msgSend_inputReportForDevice_report_length_(void *a1, const char *a2, ...)
{
  return [a1 inputReportForDevice:report:length:];
}

id objc_msgSend_inputStreamWithURL_(void *a1, const char *a2, ...)
{
  return [a1 inputStreamWithURL:];
}

id objc_msgSend_inputs(void *a1, const char *a2, ...)
{
  return _[a1 inputs];
}

id objc_msgSend_inputsAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 inputsAtIndex:];
}

id objc_msgSend_inputsCount(void *a1, const char *a2, ...)
{
  return _[a1 inputsCount];
}

id objc_msgSend_insertClient_withThreshold_(void *a1, const char *a2, ...)
{
  return [a1 insertClient:withThreshold:];
}

id objc_msgSend_insertDatums_device_metadata_completion_(void *a1, const char *a2, ...)
{
  return [a1 insertDatums:x0 device:x1 metadata:x2 completion:x3];
}

id objc_msgSend_insertFence_inSession_(void *a1, const char *a2, ...)
{
  return [a1 insertFence:inSession:];
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return [a1 insertObject:atIndex:];
}

id objc_msgSend_installFenceWithCenter_(void *a1, const char *a2, ...)
{
  return [a1 installFenceWithCenter:];
}

id objc_msgSend_installedEducationProfile(void *a1, const char *a2, ...)
{
  return _[a1 installedEducationProfile];
}

id objc_msgSend_installedProfileIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 installedProfileIdentifiers];
}

id objc_msgSend_installedProfileWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 installedProfileWithIdentifier:];
}

id objc_msgSend_installedRegion(void *a1, const char *a2, ...)
{
  return _[a1 installedRegion];
}

id objc_msgSend_instanceMethodSignatureForSelector_(void *a1, const char *a2, ...)
{
  return [a1 instanceMethodSignatureForSelector:];
}

id objc_msgSend_instancesRespondToSelector_(void *a1, const char *a2, ...)
{
  return [a1 instancesRespondToSelector:];
}

id objc_msgSend_intForKey_atKeyPath_defaultValue_(void *a1, const char *a2, ...)
{
  return [a1 intForKey:a2 atKeyPath:a3 defaultValue:a4];
}

id objc_msgSend_intForKey_defaultValue_(void *a1, const char *a2, ...)
{
  return [a1 intForKey:defaultValue:];
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_interVisitMetrics(void *a1, const char *a2, ...)
{
  return _[a1 interVisitMetrics];
}

id objc_msgSend_interestForClientKey_outInterest_(void *a1, const char *a2, ...)
{
  return [a1 interestForClientKey:outInterest:];
}

id objc_msgSend_interestTypeForClientKey_outType_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "interestTypeForClientKey:outType:");
}

id objc_msgSend_interestZones(void *a1, const char *a2, ...)
{
  return _[a1 interestZones];
}

id objc_msgSend_interestZonesAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 interestZonesAtIndex:];
}

id objc_msgSend_interestZonesCount(void *a1, const char *a2, ...)
{
  return _[a1 interestZonesCount];
}

id objc_msgSend_interestedPartyIso3166CountryCodes2(void *a1, const char *a2, ...)
{
  return _[a1 interestedPartyIso3166CountryCodes2];
}

id objc_msgSend_interface(void *a1, const char *a2, ...)
{
  return _[a1 interface];
}

id objc_msgSend_interfaceName(void *a1, const char *a2, ...)
{
  return _[a1 interfaceName];
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return [a1 interfaceWithProtocol:];
}

id objc_msgSend_internalRoadName(void *a1, const char *a2, ...)
{
  return _[a1 internalRoadName];
}

id objc_msgSend_interpPressure(void *a1, const char *a2, ...)
{
  return _[a1 interpPressure];
}

id objc_msgSend_interpolateWithStartTime_andStartValue_andEndTime_andEndValue_atTargetTime_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "interpolateWithStartTime:andStartValue:andEndTime:andEndValue:atTargetTime:");
}

id objc_msgSend_intersectsDateInterval_(void *a1, const char *a2, ...)
{
  return [a1 intersectsDateInterval:];
}

id objc_msgSend_interval(void *a1, const char *a2, ...)
{
  return _[a1 interval];
}

id objc_msgSend_intervalSinceLastSearchPartyKeyObservation(void *a1, const char *a2, ...)
{
  return _[a1 intervalSinceLastSearchPartyKeyObservation];
}

id objc_msgSend_intervalTimer(void *a1, const char *a2, ...)
{
  return _[a1 intervalTimer];
}

id objc_msgSend_invalid(void *a1, const char *a2, ...)
{
  return _[a1 invalid];
}

id objc_msgSend_invalidGradePercentage(void *a1, const char *a2, ...)
{
  return _[a1 invalidGradePercentage];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_invalidate_(void *a1, const char *a2, ...)
{
  return [a1 invalidate:];
}

id objc_msgSend_invalidateAndCancel(void *a1, const char *a2, ...)
{
  return _[a1 invalidateAndCancel];
}

id objc_msgSend_invalidateAndReleaseProbeClients(void *a1, const char *a2, ...)
{
  return _[a1 invalidateAndReleaseProbeClients];
}

id objc_msgSend_invalidateFetchPlaceInferenceTimer(void *a1, const char *a2, ...)
{
  return _[a1 invalidateFetchPlaceInferenceTimer];
}

id objc_msgSend_invalidateRangingSession(void *a1, const char *a2, ...)
{
  return _[a1 invalidateRangingSession];
}

id objc_msgSend_invertedSet(void *a1, const char *a2, ...)
{
  return _[a1 invertedSet];
}

id objc_msgSend_invocationWithMethodSignature_(void *a1, const char *a2, ...)
{
  return [a1 invocationWithMethodSignature:];
}

id objc_msgSend_invoke(void *a1, const char *a2, ...)
{
  return _[a1 invoke];
}

id objc_msgSend_ionosphereEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 ionosphereEndpoint];
}

id objc_msgSend_ipv4(void *a1, const char *a2, ...)
{
  return _[a1 ipv4];
}

id objc_msgSend_isAFire6OrOlderWatchPaired(void *a1, const char *a2, ...)
{
  return _[a1 isAFire6OrOlderWatchPaired];
}

id objc_msgSend_isARSessionActive(void *a1, const char *a2, ...)
{
  return _[a1 isARSessionActive];
}

id objc_msgSend_isAckTask_(void *a1, const char *a2, ...)
{
  return [a1 isAckTask:];
}

id objc_msgSend_isAcknowledgement(void *a1, const char *a2, ...)
{
  return _[a1 isAcknowledgement];
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _[a1 isActive];
}

id objc_msgSend_isActiveDeviceNearby(void *a1, const char *a2, ...)
{
  return _[a1 isActiveDeviceNearby];
}

id objc_msgSend_isActiveSubArchive(void *a1, const char *a2, ...)
{
  return _[a1 isActiveSubArchive];
}

id objc_msgSend_isActiveTaskOpcode_(void *a1, const char *a2, ...)
{
  return [a1 isActiveTaskOpcode:];
}

id objc_msgSend_isAdvertising(void *a1, const char *a2, ...)
{
  return _[a1 isAdvertising];
}

id objc_msgSend_isAggAdvCompleteTask_(void *a1, const char *a2, ...)
{
  return [a1 isAggAdvCompleteTask:];
}

id objc_msgSend_isAggressiveLongScanning(void *a1, const char *a2, ...)
{
  return _[a1 isAggressiveLongScanning];
}

id objc_msgSend_isAggressiveScanning(void *a1, const char *a2, ...)
{
  return _[a1 isAggressiveScanning];
}

id objc_msgSend_isAggressiveSettingDataDownloadLimitCrossed_building_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "isAggressiveSettingDataDownloadLimitCrossed:building:");
}

id objc_msgSend_isAirPodsProBuds_(void *a1, const char *a2, ...)
{
  return [a1 isAirPodsProBuds:];
}

id objc_msgSend_isAirPodsProCase_(void *a1, const char *a2, ...)
{
  return [a1 isAirPodsProCase:];
}

id objc_msgSend_isAirTag(void *a1, const char *a2, ...)
{
  return _[a1 isAirTag];
}

id objc_msgSend_isAllowOverCellular(void *a1, const char *a2, ...)
{
  return _[a1 isAllowOverCellular];
}

id objc_msgSend_isAlwaysOnEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isAlwaysOnEnabled];
}

id objc_msgSend_isAnySessionActive(void *a1, const char *a2, ...)
{
  return _[a1 isAnySessionActive];
}

id objc_msgSend_isAppInstalled_completion_(void *a1, const char *a2, ...)
{
  return [a1 isAppInstalled:completion:];
}

id objc_msgSend_isApple(void *a1, const char *a2, ...)
{
  return _[a1 isApple];
}

id objc_msgSend_isApplePersonalHotspot(void *a1, const char *a2, ...)
{
  return _[a1 isApplePersonalHotspot];
}

id objc_msgSend_isAttemptingConnection(void *a1, const char *a2, ...)
{
  return _[a1 isAttemptingConnection];
}

id objc_msgSend_isAuthLimited(void *a1, const char *a2, ...)
{
  return _[a1 isAuthLimited];
}

id objc_msgSend_isAuthSharingSubIdentity(void *a1, const char *a2, ...)
{
  return _[a1 isAuthSharingSubIdentity];
}

id objc_msgSend_isAuthorized(void *a1, const char *a2, ...)
{
  return _[a1 isAuthorized];
}

id objc_msgSend_isAuthorizedForLocation(void *a1, const char *a2, ...)
{
  return _[a1 isAuthorizedForLocation];
}

id objc_msgSend_isAuthorizedForServiceType_(void *a1, const char *a2, ...)
{
  return [a1 isAuthorizedForServiceType:];
}

id objc_msgSend_isAuthorizedForServiceTypeMask_(void *a1, const char *a2, ...)
{
  return [a1 isAuthorizedForServiceTypeMask:];
}

id objc_msgSend_isAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isAvailable];
}

id objc_msgSend_isBin_sameActivityAsBin_(void *a1, const char *a2, ...)
{
  return [a1 isBin:sameActivityAsBin:];
}

id objc_msgSend_isBinaryLogging(void *a1, const char *a2, ...)
{
  return _[a1 isBinaryLogging];
}

id objc_msgSend_isBridge(void *a1, const char *a2, ...)
{
  return _[a1 isBridge];
}

id objc_msgSend_isCalibrationAvailableForStepCadence_(void *a1, const char *a2, ...)
{
  return [a1 isCalibrationAvailableForStepCadence:];
}

id objc_msgSend_isCalibrationConvergedStdForBinWithSpeed_(void *a1, const char *a2, ...)
{
  return [a1 isCalibrationConvergedStdForBinWithSpeed:];
}

id objc_msgSend_isCallWithSideButtonPressesEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isCallWithSideButtonPressesEnabled];
}

id objc_msgSend_isCallWithVolumeLockHoldEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isCallWithVolumeLockHoldEnabled];
}

id objc_msgSend_isCancellablePlaySoundTask_(void *a1, const char *a2, ...)
{
  return [a1 isCancellablePlaySoundTask:];
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _[a1 isCancelled];
}

id objc_msgSend_isCapableOfAllHawkeyeServices(void *a1, const char *a2, ...)
{
  return _[a1 isCapableOfAllHawkeyeServices];
}

id objc_msgSend_isCapableOfDynamicConnectionLatency(void *a1, const char *a2, ...)
{
  return _[a1 isCapableOfDynamicConnectionLatency];
}

id objc_msgSend_isCapableOfFirmwareUpdate(void *a1, const char *a2, ...)
{
  return _[a1 isCapableOfFirmwareUpdate];
}

id objc_msgSend_isCentroidDatabaseValid(void *a1, const char *a2, ...)
{
  return _[a1 isCentroidDatabaseValid];
}

id objc_msgSend_isClassicallyConnected(void *a1, const char *a2, ...)
{
  return _[a1 isClassicallyConnected];
}

id objc_msgSend_isClassificationAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isClassificationAvailable];
}

id objc_msgSend_isClientActivityTypeAirborneActive(void *a1, const char *a2, ...)
{
  return _[a1 isClientActivityTypeAirborneActive];
}

id objc_msgSend_isClientActivityTypeFitnessActive(void *a1, const char *a2, ...)
{
  return _[a1 isClientActivityTypeFitnessActive];
}

id objc_msgSend_isClientWithKeyInterested_(void *a1, const char *a2, ...)
{
  return [a1 isClientWithKeyInterested:];
}

id objc_msgSend_isComplete(void *a1, const char *a2, ...)
{
  return _[a1 isComplete];
}

id objc_msgSend_isConfigurationControlPointTask(void *a1, const char *a2, ...)
{
  return _[a1 isConfigurationControlPointTask];
}

id objc_msgSend_isConflictResolutionMode(void *a1, const char *a2, ...)
{
  return _[a1 isConflictResolutionMode];
}

id objc_msgSend_isConnected(void *a1, const char *a2, ...)
{
  return _[a1 isConnected];
}

id objc_msgSend_isConservativeEntry(void *a1, const char *a2, ...)
{
  return _[a1 isConservativeEntry];
}

id objc_msgSend_isCorrectiveCompensationSupported(void *a1, const char *a2, ...)
{
  return _[a1 isCorrectiveCompensationSupported];
}

id objc_msgSend_isCurrentActiveDevice_(void *a1, const char *a2, ...)
{
  return [a1 isCurrentActiveDevice:];
}

id objc_msgSend_isDataCollectionAuthorized(void *a1, const char *a2, ...)
{
  return _[a1 isDataCollectionAuthorized];
}

id objc_msgSend_isDate_inSameDayAsDate_(void *a1, const char *a2, ...)
{
  return [a1 isDate:inSameDayAsDate:];
}

id objc_msgSend_isDebugControlPointTask(void *a1, const char *a2, ...)
{
  return _[a1 isDebugControlPointTask];
}

id objc_msgSend_isDefaultPairedDevice(void *a1, const char *a2, ...)
{
  return _[a1 isDefaultPairedDevice];
}

id objc_msgSend_isDefaultScanType_(void *a1, const char *a2, ...)
{
  return [a1 isDefaultScanType:];
}

id objc_msgSend_isDenyListAccessory_name_model_serialNumber_firmware_hardwareRevision_(void *a1, const char *a2, ...)
{
  return [a1 isDenyListAccessory:name:model:serialNumber:firmware:hardwareRevision:];
}

id objc_msgSend_isDeparture_(void *a1, const char *a2, ...)
{
  return [a1 isDeparture:];
}

id objc_msgSend_isDeviceNearbyAndConnected(void *a1, const char *a2, ...)
{
  return _[a1 isDeviceNearbyAndConnected];
}

id objc_msgSend_isDeviceSatellitePaired(void *a1, const char *a2, ...)
{
  return _[a1 isDeviceSatellitePaired];
}

id objc_msgSend_isDisabled(void *a1, const char *a2, ...)
{
  return _[a1 isDisabled];
}

id objc_msgSend_isDiscoveryRequiredForDevice_onCondition_withPeripheral_(void *a1, const char *a2, ...)
{
  return [a1 isDiscoveryRequiredForDevice:onCondition:withPeripheral:];
}

id objc_msgSend_isDisputed(void *a1, const char *a2, ...)
{
  return _[a1 isDisputed];
}

id objc_msgSend_isDrivable(void *a1, const char *a2, ...)
{
  return _[a1 isDrivable];
}

id objc_msgSend_isDurianConnectionLatency_lowerThan_(void *a1, const char *a2, ...)
{
  return [a1 isDurianConnectionLatency:lowerThan:];
}

id objc_msgSend_isEligibleForPreProcessing_(void *a1, const char *a2, ...)
{
  return [a1 isEligibleForPreProcessing:];
}

id objc_msgSend_isEmergency(void *a1, const char *a2, ...)
{
  return _[a1 isEmergency];
}

id objc_msgSend_isEmergencyFence(void *a1, const char *a2, ...)
{
  return _[a1 isEmergencyFence];
}

id objc_msgSend_isEmergencySetup(void *a1, const char *a2, ...)
{
  return _[a1 isEmergencySetup];
}

id objc_msgSend_isEmergencyText(void *a1, const char *a2, ...)
{
  return _[a1 isEmergencyText];
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isEnabled];
}

id objc_msgSend_isEndpointOnCurrentDevice(void *a1, const char *a2, ...)
{
  return _[a1 isEndpointOnCurrentDevice];
}

id objc_msgSend_isEndpointTask_(void *a1, const char *a2, ...)
{
  return [a1 isEndpointTask:];
}

id objc_msgSend_isEntry_(void *a1, const char *a2, ...)
{
  return [a1 isEntry:];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return [a1 isEqual:];
}

id objc_msgSend_isEqualToAdvertisement_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToAdvertisement:];
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToArray:];
}

id objc_msgSend_isEqualToData_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToData:];
}

id objc_msgSend_isEqualToDate_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToDate:];
}

id objc_msgSend_isEqualToDateInterval_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToDateInterval:];
}

id objc_msgSend_isEqualToDictionary_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToDictionary:];
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToNumber:];
}

id objc_msgSend_isEqualToPayload_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToPayload:];
}

id objc_msgSend_isEqualToSet_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToSet:];
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToString:];
}

id objc_msgSend_isEqualToTargetAdv_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToTargetAdv:];
}

id objc_msgSend_isFileURL(void *a1, const char *a2, ...)
{
  return _[a1 isFileURL];
}

id objc_msgSend_isFindMyNetwork(void *a1, const char *a2, ...)
{
  return _[a1 isFindMyNetwork];
}

id objc_msgSend_isFirmwareVersionCrashTask_(void *a1, const char *a2, ...)
{
  return [a1 isFirmwareVersionCrashTask:];
}

id objc_msgSend_isFreeWake(void *a1, const char *a2, ...)
{
  return _[a1 isFreeWake];
}

id objc_msgSend_isFwdlAbortTask_(void *a1, const char *a2, ...)
{
  return [a1 isFwdlAbortTask:];
}

id objc_msgSend_isGeoFenceAuthorizedAndPossible(void *a1, const char *a2, ...)
{
  return _[a1 isGeoFenceAuthorizedAndPossible];
}

id objc_msgSend_isGroupStatusResponse_(void *a1, const char *a2, ...)
{
  return [a1 isGroupStatusResponse:];
}

id objc_msgSend_isHawkeyeAccessory(void *a1, const char *a2, ...)
{
  return _[a1 isHawkeyeAccessory];
}

id objc_msgSend_isHealthDataAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isHealthDataAvailable];
}

id objc_msgSend_isHealthDataSubmissionAllowed(void *a1, const char *a2, ...)
{
  return _[a1 isHealthDataSubmissionAllowed];
}

id objc_msgSend_isHeleAccessory(void *a1, const char *a2, ...)
{
  return _[a1 isHeleAccessory];
}

id objc_msgSend_isHelperFence(void *a1, const char *a2, ...)
{
  return _[a1 isHelperFence];
}

id objc_msgSend_isHidden(void *a1, const char *a2, ...)
{
  return _[a1 isHidden];
}

id objc_msgSend_isIHAAuthorized(void *a1, const char *a2, ...)
{
  return _[a1 isIHAAuthorized];
}

id objc_msgSend_isInDisputedArea(void *a1, const char *a2, ...)
{
  return _[a1 isInDisputedArea];
}

id objc_msgSend_isInEmegencyState_(void *a1, const char *a2, ...)
{
  return [a1 isInEmegencyState:];
}

id objc_msgSend_isInHomeCountry(void *a1, const char *a2, ...)
{
  return _[a1 isInHomeCountry];
}

id objc_msgSend_isInIndia(void *a1, const char *a2, ...)
{
  return _[a1 isInIndia];
}

id objc_msgSend_isInMidRangeRssi_(void *a1, const char *a2, ...)
{
  return [a1 isInMidRangeRssi:];
}

id objc_msgSend_isInOutdoorWorkout(void *a1, const char *a2, ...)
{
  return _[a1 isInOutdoorWorkout];
}

id objc_msgSend_isInOutdoorWorkout_(void *a1, const char *a2, ...)
{
  return [a1 isInOutdoorWorkout:];
}

id objc_msgSend_isInVehicleNavigation(void *a1, const char *a2, ...)
{
  return _[a1 isInVehicleNavigation];
}

id objc_msgSend_isInVisit(void *a1, const char *a2, ...)
{
  return _[a1 isInVisit];
}

id objc_msgSend_isInZone(void *a1, const char *a2, ...)
{
  return _[a1 isInZone];
}

id objc_msgSend_isInZone_(void *a1, const char *a2, ...)
{
  return [a1 isInZone:];
}

id objc_msgSend_isIndoor_(void *a1, const char *a2, ...)
{
  return [a1 isIndoor:];
}

id objc_msgSend_isInitialCache(void *a1, const char *a2, ...)
{
  return _[a1 isInitialCache];
}

id objc_msgSend_isInsideSanctionedFloorTransitionPolygon_(void *a1, const char *a2, ...)
{
  return [a1 isInsideSanctionedFloorTransitionPolygon:];
}

id objc_msgSend_isInsideSanctionedPolygon_(void *a1, const char *a2, ...)
{
  return [a1 isInsideSanctionedPolygon:];
}

id objc_msgSend_isInternalInstall(void *a1, const char *a2, ...)
{
  return _[a1 isInternalInstall];
}

id objc_msgSend_isKappaVisible(void *a1, const char *a2, ...)
{
  return _[a1 isKappaVisible];
}

id objc_msgSend_isKeyPathRegisteredSystemService_(void *a1, const char *a2, ...)
{
  return [a1 isKeyPathRegisteredSystemService:];
}

id objc_msgSend_isKeyRollTask_(void *a1, const char *a2, ...)
{
  return [a1 isKeyRollTask:];
}

id objc_msgSend_isLeashSlotInUse(void *a1, const char *a2, ...)
{
  return _[a1 isLeashSlotInUse];
}

id objc_msgSend_isLeashable(void *a1, const char *a2, ...)
{
  return _[a1 isLeashable];
}

id objc_msgSend_isLegacyAggressiveOrDefaultScanning(void *a1, const char *a2, ...)
{
  return _[a1 isLegacyAggressiveOrDefaultScanning];
}

id objc_msgSend_isLegacyAggressiveScanning(void *a1, const char *a2, ...)
{
  return _[a1 isLegacyAggressiveScanning];
}

id objc_msgSend_isLinkDown(void *a1, const char *a2, ...)
{
  return _[a1 isLinkDown];
}

id objc_msgSend_isLinkEncrypted(void *a1, const char *a2, ...)
{
  return _[a1 isLinkEncrypted];
}

id objc_msgSend_isLocaleValidOnLocalDevice(void *a1, const char *a2, ...)
{
  return _[a1 isLocaleValidOnLocalDevice];
}

id objc_msgSend_isLocation_validOnDate_maxHorizontalAccuracy_(void *a1, const char *a2, ...)
{
  return [a1 isLocation:x0 validOnDate:x1 maxHorizontalAccuracy:x2];
}

id objc_msgSend_isLocationShiftEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isLocationShiftEnabled];
}

id objc_msgSend_isLocationShiftRequiredForCoordinate_(void *a1, const char *a2, ...)
{
  return [a1 isLocationShiftRequiredForCoordinate:x0];
}

id objc_msgSend_isLocationUsefulForCalibration_(void *a1, const char *a2, ...)
{
  return [a1 isLocationUsefulForCalibration:];
}

id objc_msgSend_isLocationUsefulForSmoothing_(void *a1, const char *a2, ...)
{
  return [a1 isLocationUsefulForSmoothing:];
}

id objc_msgSend_isLocked(void *a1, const char *a2, ...)
{
  return _[a1 isLocked];
}

id objc_msgSend_isLoggingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isLoggingEnabled];
}

id objc_msgSend_isLowLatency(void *a1, const char *a2, ...)
{
  return _[a1 isLowLatency];
}

id objc_msgSend_isLowPower(void *a1, const char *a2, ...)
{
  return _[a1 isLowPower];
}

id objc_msgSend_isMaintenanceActive(void *a1, const char *a2, ...)
{
  return _[a1 isMaintenanceActive];
}

id objc_msgSend_isMeasurement(void *a1, const char *a2, ...)
{
  return _[a1 isMeasurement];
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return [a1 isMemberOfClass:];
}

id objc_msgSend_isMessageOfType_(void *a1, const char *a2, ...)
{
  return [a1 isMessageOfType:];
}

id objc_msgSend_isMetadataDatabaseValid(void *a1, const char *a2, ...)
{
  return _[a1 isMetadataDatabaseValid];
}

id objc_msgSend_isModified(void *a1, const char *a2, ...)
{
  return _[a1 isModified];
}

id objc_msgSend_isMonitoring(void *a1, const char *a2, ...)
{
  return _[a1 isMonitoring];
}

id objc_msgSend_isMonitoringAvailableForClass_(void *a1, const char *a2, ...)
{
  return [a1 isMonitoringAvailableForClass:];
}

id objc_msgSend_isMultiConnectionEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isMultiConnectionEnabled];
}

id objc_msgSend_isMultiStatusResponse_(void *a1, const char *a2, ...)
{
  return [a1 isMultiStatusResponse:];
}

id objc_msgSend_isMutexProtectedRangingTask(void *a1, const char *a2, ...)
{
  return _[a1 isMutexProtectedRangingTask];
}

id objc_msgSend_isMutexProtectedSoundTask(void *a1, const char *a2, ...)
{
  return _[a1 isMutexProtectedSoundTask];
}

id objc_msgSend_isMutexTask_(void *a1, const char *a2, ...)
{
  return [a1 isMutexTask:];
}

id objc_msgSend_isNackTask_(void *a1, const char *a2, ...)
{
  return [a1 isNackTask:];
}

id objc_msgSend_isNearOwner(void *a1, const char *a2, ...)
{
  return _[a1 isNearOwner];
}

id objc_msgSend_isNearby(void *a1, const char *a2, ...)
{
  return _[a1 isNearby];
}

id objc_msgSend_isNewPayload_(void *a1, const char *a2, ...)
{
  return [a1 isNewPayload:];
}

id objc_msgSend_isNonHeleMaintenanceActive(void *a1, const char *a2, ...)
{
  return _[a1 isNonHeleMaintenanceActive];
}

id objc_msgSend_isNonOwnerControlPointTask(void *a1, const char *a2, ...)
{
  return _[a1 isNonOwnerControlPointTask];
}

id objc_msgSend_isNonOwnerSoundCompleteTask_(void *a1, const char *a2, ...)
{
  return [a1 isNonOwnerSoundCompleteTask:];
}

id objc_msgSend_isNonOwnerSoundTask_(void *a1, const char *a2, ...)
{
  return [a1 isNonOwnerSoundTask:];
}

id objc_msgSend_isNonProvisionallyAuthorizedForServiceType_(void *a1, const char *a2, ...)
{
  return [a1 isNonProvisionallyAuthorizedForServiceType:];
}

id objc_msgSend_isNonProvisionallyAuthorizedForServiceTypeMask_(void *a1, const char *a2, ...)
{
  return [a1 isNonProvisionallyAuthorizedForServiceTypeMask:];
}

id objc_msgSend_isNordicCrashTask_(void *a1, const char *a2, ...)
{
  return [a1 isNordicCrashTask:];
}

id objc_msgSend_isNotificationSupported_(void *a1, const char *a2, ...)
{
  return [a1 isNotificationSupported:];
}

id objc_msgSend_isOnDenyList_(void *a1, const char *a2, ...)
{
  return [a1 isOnDenyList:];
}

id objc_msgSend_isOnTileBorder(void *a1, const char *a2, ...)
{
  return _[a1 isOnTileBorder];
}

id objc_msgSend_isOnlyRemainingTask(void *a1, const char *a2, ...)
{
  return _[a1 isOnlyRemainingTask];
}

id objc_msgSend_isOrganDonor(void *a1, const char *a2, ...)
{
  return _[a1 isOrganDonor];
}

id objc_msgSend_isPaired(void *a1, const char *a2, ...)
{
  return _[a1 isPaired];
}

id objc_msgSend_isPairedOwnerInformationControlPointTask(void *a1, const char *a2, ...)
{
  return _[a1 isPairedOwnerInformationControlPointTask];
}

id objc_msgSend_isPairedSyncSessionActive(void *a1, const char *a2, ...)
{
  return _[a1 isPairedSyncSessionActive];
}

id objc_msgSend_isPlayingSound(void *a1, const char *a2, ...)
{
  return _[a1 isPlayingSound];
}

id objc_msgSend_isPocketStateAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isPocketStateAvailable];
}

id objc_msgSend_isPosh(void *a1, const char *a2, ...)
{
  return _[a1 isPosh];
}

id objc_msgSend_isPoshAccessory(void *a1, const char *a2, ...)
{
  return _[a1 isPoshAccessory];
}

id objc_msgSend_isPoshOptionalOpcode_(void *a1, const char *a2, ...)
{
  return [a1 isPoshOptionalOpcode:];
}

id objc_msgSend_isPoshTask_(void *a1, const char *a2, ...)
{
  return [a1 isPoshTask:];
}

id objc_msgSend_isPreciseFindingControlPointTask(void *a1, const char *a2, ...)
{
  return _[a1 isPreciseFindingControlPointTask];
}

id objc_msgSend_isProactiveLocationSession(void *a1, const char *a2, ...)
{
  return _[a1 isProactiveLocationSession];
}

id objc_msgSend_isQueryValidWithStartTime_andEndTime_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "isQueryValidWithStartTime:andEndTime:");
}

id objc_msgSend_isQuickSwitchInProgress(void *a1, const char *a2, ...)
{
  return _[a1 isQuickSwitchInProgress];
}

id objc_msgSend_isQuickSwitchModeOn(void *a1, const char *a2, ...)
{
  return _[a1 isQuickSwitchModeOn];
}

id objc_msgSend_isR1CrashTask_(void *a1, const char *a2, ...)
{
  return [a1 isR1CrashTask:];
}

id objc_msgSend_isRail(void *a1, const char *a2, ...)
{
  return _[a1 isRail];
}

id objc_msgSend_isRanging(void *a1, const char *a2, ...)
{
  return _[a1 isRanging];
}

id objc_msgSend_isRangingCompleteTask_(void *a1, const char *a2, ...)
{
  return [a1 isRangingCompleteTask:];
}

id objc_msgSend_isRangingSessionTask_(void *a1, const char *a2, ...)
{
  return [a1 isRangingSessionTask:];
}

id objc_msgSend_isRangingStartTask_(void *a1, const char *a2, ...)
{
  return [a1 isRangingStartTask:];
}

id objc_msgSend_isRawSpeedRun_(void *a1, const char *a2, ...)
{
  return [a1 isRawSpeedRun:];
}

id objc_msgSend_isRawSpeedValid_(void *a1, const char *a2, ...)
{
  return [a1 isRawSpeedValid:];
}

id objc_msgSend_isReadyToVacuumEncryptionClass_(void *a1, const char *a2, ...)
{
  return [a1 isReadyToVacuumEncryptionClass:];
}

id objc_msgSend_isRecording(void *a1, const char *a2, ...)
{
  return _[a1 isRecording];
}

id objc_msgSend_isRefDataAvailableBetweenStartTime_andEndTime_(void *a1, const char *a2, ...)
{
  return [a1 isRefDataAvailableBetweenStartTime:andEndTime:];
}

id objc_msgSend_isRegional_(void *a1, const char *a2, ...)
{
  return [a1 isRegional:];
}

id objc_msgSend_isRegisteredForSMS(void *a1, const char *a2, ...)
{
  return _[a1 isRegisteredForSMS];
}

id objc_msgSend_isRegisteredForVoice(void *a1, const char *a2, ...)
{
  return _[a1 isRegisteredForVoice];
}

id objc_msgSend_isRegistrationForcedHome(void *a1, const char *a2, ...)
{
  return _[a1 isRegistrationForcedHome];
}

id objc_msgSend_isRegulatorySyncSupportedOnWatch_(void *a1, const char *a2, ...)
{
  return [a1 isRegulatorySyncSupportedOnWatch:];
}

id objc_msgSend_isRemoteWatchStreamingCompatible(void *a1, const char *a2, ...)
{
  return _[a1 isRemoteWatchStreamingCompatible];
}

id objc_msgSend_isResetNotificationQueued(void *a1, const char *a2, ...)
{
  return _[a1 isResetNotificationQueued];
}

id objc_msgSend_isResetSync(void *a1, const char *a2, ...)
{
  return _[a1 isResetSync];
}

id objc_msgSend_isResubmitNeededwithOldLocationHacc_newLocationHacc_distance_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "isResubmitNeededwithOldLocationHacc:newLocationHacc:distance:");
}

id objc_msgSend_isRoadPedestrianNavigable(void *a1, const char *a2, ...)
{
  return _[a1 isRoadPedestrianNavigable];
}

id objc_msgSend_isRoseInitialized(void *a1, const char *a2, ...)
{
  return _[a1 isRoseInitialized];
}

id objc_msgSend_isRunCalibrationAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isRunCalibrationAvailable];
}

id objc_msgSend_isRunningStateInWindow(void *a1, const char *a2, ...)
{
  return _[a1 isRunningStateInWindow];
}

id objc_msgSend_isSOS(void *a1, const char *a2, ...)
{
  return _[a1 isSOS];
}

id objc_msgSend_isSafetyDataSubmissionAllowed(void *a1, const char *a2, ...)
{
  return _[a1 isSafetyDataSubmissionAllowed];
}

id objc_msgSend_isSameMaintQuarterHourForDevice_(void *a1, const char *a2, ...)
{
  return [a1 isSameMaintQuarterHourForDevice:];
}

id objc_msgSend_isSatelliteSystem(void *a1, const char *a2, ...)
{
  return _[a1 isSatelliteSystem];
}

id objc_msgSend_isScanning(void *a1, const char *a2, ...)
{
  return _[a1 isScanning];
}

id objc_msgSend_isSending(void *a1, const char *a2, ...)
{
  return _[a1 isSending];
}

id objc_msgSend_isServiceEnabled_(void *a1, const char *a2, ...)
{
  return [a1 isServiceEnabled:];
}

id objc_msgSend_isServiceRunning_(void *a1, const char *a2, ...)
{
  return [a1 isServiceRunning:];
}

id objc_msgSend_isSetMaxConnectionsTask_(void *a1, const char *a2, ...)
{
  return [a1 isSetMaxConnectionsTask:];
}

id objc_msgSend_isSimPresent(void *a1, const char *a2, ...)
{
  return _[a1 isSimPresent];
}

id objc_msgSend_isSimulatedBySoftware(void *a1, const char *a2, ...)
{
  return _[a1 isSimulatedBySoftware];
}

id objc_msgSend_isSoundCompleteTask_(void *a1, const char *a2, ...)
{
  return [a1 isSoundCompleteTask:];
}

id objc_msgSend_isStable(void *a1, const char *a2, ...)
{
  return _[a1 isStable];
}

id objc_msgSend_isStarting(void *a1, const char *a2, ...)
{
  return _[a1 isStarting];
}

id objc_msgSend_isStatusBarAssertionAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isStatusBarAssertionAvailable];
}

id objc_msgSend_isStepLengthValid(void *a1, const char *a2, ...)
{
  return _[a1 isStepLengthValid];
}

id objc_msgSend_isStewieActive(void *a1, const char *a2, ...)
{
  return _[a1 isStewieActive];
}

id objc_msgSend_isStreamingClientInFitnessSession(void *a1, const char *a2, ...)
{
  return _[a1 isStreamingClientInFitnessSession];
}

id objc_msgSend_isString_prefixedBy_(void *a1, const char *a2, ...)
{
  return [a1 isString:prefixedBy:];
}

id objc_msgSend_isStroller(void *a1, const char *a2, ...)
{
  return _[a1 isStroller];
}

id objc_msgSend_isSubscribedForMotion(void *a1, const char *a2, ...)
{
  return _[a1 isSubscribedForMotion];
}

id objc_msgSend_isSubscriptionActive(void *a1, const char *a2, ...)
{
  return _[a1 isSubscriptionActive];
}

id objc_msgSend_isSupervised(void *a1, const char *a2, ...)
{
  return _[a1 isSupervised];
}

id objc_msgSend_isSupported(void *a1, const char *a2, ...)
{
  return _[a1 isSupported];
}

id objc_msgSend_isSupportedForDerivedSpeedEstimate(void *a1, const char *a2, ...)
{
  return _[a1 isSupportedForDerivedSpeedEstimate];
}

id objc_msgSend_isSupportedForHardware_(void *a1, const char *a2, ...)
{
  return [a1 isSupportedForHardware:];
}

id objc_msgSend_isSupportedWithExplicitDisable_withIHAOverride_withIHAOptIn_withHwSupport_(void *a1, const char *a2, ...)
{
  return [a1 isSupportedWithExplicitDisable:withIHAOverride:withIHAOptIn:withHwSupport:];
}

id objc_msgSend_isTAAISDevice(void *a1, const char *a2, ...)
{
  return _[a1 isTAAISDevice];
}

id objc_msgSend_isTaskQueueEmpty(void *a1, const char *a2, ...)
{
  return _[a1 isTaskQueueEmpty];
}

id objc_msgSend_isTestingEnvironment(void *a1, const char *a2, ...)
{
  return _[a1 isTestingEnvironment];
}

id objc_msgSend_isThereAWatch(void *a1, const char *a2, ...)
{
  return _[a1 isThereAWatch];
}

id objc_msgSend_isThrottledFence(void *a1, const char *a2, ...)
{
  return _[a1 isThrottledFence];
}

id objc_msgSend_isTinkerWatch(void *a1, const char *a2, ...)
{
  return _[a1 isTinkerWatch];
}

id objc_msgSend_isTunnel(void *a1, const char *a2, ...)
{
  return _[a1 isTunnel];
}

id objc_msgSend_isUserAloneAt_withHints_(void *a1, const char *a2, ...)
{
  return [a1 isUserAloneAt:withHints:];
}

id objc_msgSend_isUserCurrentlyAloneWithHints_withReply_(void *a1, const char *a2, ...)
{
  return [a1 isUserCurrentlyAloneWithHints:withReply:];
}

id objc_msgSend_isUserStatsV2Opcode_(void *a1, const char *a2, ...)
{
  return [a1 isUserStatsV2Opcode:];
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return _[a1 isValid];
}

id objc_msgSend_isValidCKP(void *a1, const char *a2, ...)
{
  return _[a1 isValidCKP];
}

id objc_msgSend_isValidMslp_(void *a1, const char *a2, ...)
{
  return [a1 isValidMslp:];
}

id objc_msgSend_isValueInRun_(void *a1, const char *a2, ...)
{
  return [a1 isValueInRun:];
}

id objc_msgSend_isVehicleConnected(void *a1, const char *a2, ...)
{
  return _[a1 isVehicleConnected];
}

id objc_msgSend_isWalkCalibrationAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isWalkCalibrationAvailable];
}

id objc_msgSend_isWalkingSpeedValid(void *a1, const char *a2, ...)
{
  return _[a1 isWalkingSpeedValid];
}

id objc_msgSend_isWalkingSteadinessAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isWalkingSteadinessAvailable];
}

id objc_msgSend_isWatch(void *a1, const char *a2, ...)
{
  return _[a1 isWatch];
}

id objc_msgSend_isWatchBuildVersionPriorTo_(void *a1, const char *a2, ...)
{
  return [a1 isWatchBuildVersionPriorTo:];
}

id objc_msgSend_isWaterStateON(void *a1, const char *a2, ...)
{
  return _[a1 isWaterStateON];
}

id objc_msgSend_isWheelchairDataSubmissionAllowed(void *a1, const char *a2, ...)
{
  return _[a1 isWheelchairDataSubmissionAllowed];
}

id objc_msgSend_isWheelchairMode(void *a1, const char *a2, ...)
{
  return _[a1 isWheelchairMode];
}

id objc_msgSend_isWorkoutEndReminderEnabledWhenDeviceIsInMoveTimeMode_withCurrentSetting_(void *a1, const char *a2, ...)
{
  return [a1 isWorkoutEndReminderEnabledWhenDeviceIsInMoveTimeMode:withCurrentSetting:];
}

id objc_msgSend_isWorkoutResumeReminderEnabledWhenDeviceIsInMoveTimeMode_withCurrentSetting_(void *a1, const char *a2, ...)
{
  return [a1 isWorkoutResumeReminderEnabledWhenDeviceIsInMoveTimeMode:withCurrentSetting:];
}

id objc_msgSend_isWorkoutStartReminderEnabledWhenDeviceIsSatellitePaired_isInMoveTimeMode_withCurrentSetting_(void *a1, const char *a2, ...)
{
  return [a1 isWorkoutStartReminderEnabledWhenDeviceIsSatellitePaired:isInMoveTimeMode:withCurrentSetting:];
}

id objc_msgSend_iso3166CountryCode2(void *a1, const char *a2, ...)
{
  return _[a1 iso3166CountryCode2];
}

id objc_msgSend_itemJourneyStats(void *a1, const char *a2, ...)
{
  return _[a1 itemJourneyStats];
}

id objc_msgSend_iterateAllAnchorKeyPathsWithBlock_(void *a1, const char *a2, ...)
{
  return [a1 iterateAllAnchorKeyPathsWithBlock:];
}

id objc_msgSend_iterateIdentitiesRelatedToKeyPath_withBlock_(void *a1, const char *a2, ...)
{
  return [a1 iterateIdentitiesRelatedToKeyPath:withBlock:];
}

id objc_msgSend_iterateSecondaryData_forField_withHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "iterateSecondaryData:forField:withHandler:");
}

id objc_msgSend_iterateSubArchivesWithHandler_(void *a1, const char *a2, ...)
{
  return [a1 iterateSubArchivesWithHandler:];
}

id objc_msgSend_jacksonData(void *a1, const char *a2, ...)
{
  return _[a1 jacksonData];
}

id objc_msgSend_journeyCount(void *a1, const char *a2, ...)
{
  return _[a1 journeyCount];
}

id objc_msgSend_jsonObject(void *a1, const char *a2, ...)
{
  return _[a1 jsonObject];
}

id objc_msgSend_junctionIndex(void *a1, const char *a2, ...)
{
  return _[a1 junctionIndex];
}

id objc_msgSend_kValue(void *a1, const char *a2, ...)
{
  return _[a1 kValue];
}

id objc_msgSend_kValueForRawSpeed_(void *a1, const char *a2, ...)
{
  return [a1 kValueForRawSpeed:];
}

id objc_msgSend_kappaTriggersEmergencySOS(void *a1, const char *a2, ...)
{
  return _[a1 kappaTriggersEmergencySOS];
}

id objc_msgSend_key(void *a1, const char *a2, ...)
{
  return _[a1 key];
}

id objc_msgSend_keyCount(void *a1, const char *a2, ...)
{
  return _[a1 keyCount];
}

id objc_msgSend_keyEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 keyEnumerator];
}

id objc_msgSend_keyForClient_(void *a1, const char *a2, ...)
{
  return [a1 keyForClient:];
}

id objc_msgSend_keyFromDate_(void *a1, const char *a2, ...)
{
  return [a1 keyFromDate:x0];
}

id objc_msgSend_keyPath_sharesAuthWithKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 keyPath:sharesAuthWithKeyPath:];
}

id objc_msgSend_keyRollInterval(void *a1, const char *a2, ...)
{
  return _[a1 keyRollInterval];
}

id objc_msgSend_keySyncRecord(void *a1, const char *a2, ...)
{
  return _[a1 keySyncRecord];
}

id objc_msgSend_keychainItemData(void *a1, const char *a2, ...)
{
  return _[a1 keychainItemData];
}

id objc_msgSend_keysRemaining(void *a1, const char *a2, ...)
{
  return _[a1 keysRemaining];
}

id objc_msgSend_keysRemainingUntilWildRoll(void *a1, const char *a2, ...)
{
  return _[a1 keysRemainingUntilWildRoll];
}

id objc_msgSend_keysSortedByValueUsingSelector_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "keysSortedByValueUsingSelector:");
}

id objc_msgSend_kilocalorieUnit(void *a1, const char *a2, ...)
{
  return _[a1 kilocalorieUnit];
}

id objc_msgSend_kilopascals(void *a1, const char *a2, ...)
{
  return _[a1 kilopascals];
}

id objc_msgSend_krMaterials(void *a1, const char *a2, ...)
{
  return _[a1 krMaterials];
}

id objc_msgSend_kvStore(void *a1, const char *a2, ...)
{
  return _[a1 kvStore];
}

id objc_msgSend_label(void *a1, const char *a2, ...)
{
  return _[a1 label];
}

id objc_msgSend_lac(void *a1, const char *a2, ...)
{
  return _[a1 lac];
}

id objc_msgSend_lacID(void *a1, const char *a2, ...)
{
  return _[a1 lacID];
}

id objc_msgSend_lambda(void *a1, const char *a2, ...)
{
  return _[a1 lambda];
}

id objc_msgSend_laneCount(void *a1, const char *a2, ...)
{
  return _[a1 laneCount];
}

id objc_msgSend_lanes(void *a1, const char *a2, ...)
{
  return _[a1 lanes];
}

id objc_msgSend_largeCalorieUnit(void *a1, const char *a2, ...)
{
  return _[a1 largeCalorieUnit];
}

id objc_msgSend_lastARKitUpdate(void *a1, const char *a2, ...)
{
  return _[a1 lastARKitUpdate];
}

id objc_msgSend_lastARSessionState(void *a1, const char *a2, ...)
{
  return _[a1 lastARSessionState];
}

id objc_msgSend_lastAdvertisementDelta(void *a1, const char *a2, ...)
{
  return _[a1 lastAdvertisementDelta];
}

id objc_msgSend_lastAlertDate(void *a1, const char *a2, ...)
{
  return _[a1 lastAlertDate];
}

id objc_msgSend_lastClear(void *a1, const char *a2, ...)
{
  return _[a1 lastClear];
}

id objc_msgSend_lastCountryCode(void *a1, const char *a2, ...)
{
  return _[a1 lastCountryCode];
}

id objc_msgSend_lastEvaluationDate(void *a1, const char *a2, ...)
{
  return _[a1 lastEvaluationDate];
}

id objc_msgSend_lastEvent(void *a1, const char *a2, ...)
{
  return _[a1 lastEvent];
}

id objc_msgSend_lastExitContext(void *a1, const char *a2, ...)
{
  return _[a1 lastExitContext];
}

id objc_msgSend_lastFirmwareVersionForAllTagsSubmission(void *a1, const char *a2, ...)
{
  return _[a1 lastFirmwareVersionForAllTagsSubmission];
}

id objc_msgSend_lastFix(void *a1, const char *a2, ...)
{
  return _[a1 lastFix];
}

id objc_msgSend_lastGroupClassicDisconnectionDelta(void *a1, const char *a2, ...)
{
  return _[a1 lastGroupClassicDisconnectionDelta];
}

id objc_msgSend_lastGroupClassicDisconnectionTime(void *a1, const char *a2, ...)
{
  return _[a1 lastGroupClassicDisconnectionTime];
}

id objc_msgSend_lastGroupMaintenance(void *a1, const char *a2, ...)
{
  return _[a1 lastGroupMaintenance];
}

id objc_msgSend_lastHKUpdate(void *a1, const char *a2, ...)
{
  return _[a1 lastHKUpdate];
}

id objc_msgSend_lastHandledLocationAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 lastHandledLocationAccuracy];
}

id objc_msgSend_lastHandledLocationAge(void *a1, const char *a2, ...)
{
  return _[a1 lastHandledLocationAge];
}

id objc_msgSend_lastHandledLocationProvider(void *a1, const char *a2, ...)
{
  return _[a1 lastHandledLocationProvider];
}

id objc_msgSend_lastIndexObservationDate(void *a1, const char *a2, ...)
{
  return _[a1 lastIndexObservationDate];
}

id objc_msgSend_lastIndexObserved(void *a1, const char *a2, ...)
{
  return _[a1 lastIndexObserved];
}

id objc_msgSend_lastIndoorError(void *a1, const char *a2, ...)
{
  return _[a1 lastIndoorError];
}

id objc_msgSend_lastKnownIndoorOutdoorStateWithReply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "lastKnownIndoorOutdoorStateWithReply:");
}

id objc_msgSend_lastKnownLocationEnabled(void *a1, const char *a2, ...)
{
  return _[a1 lastKnownLocationEnabled];
}

id objc_msgSend_lastKnownMotionState(void *a1, const char *a2, ...)
{
  return _[a1 lastKnownMotionState];
}

id objc_msgSend_lastLeashBreak(void *a1, const char *a2, ...)
{
  return _[a1 lastLeashBreak];
}

id objc_msgSend_lastLocation(void *a1, const char *a2, ...)
{
  return _[a1 lastLocation];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}

id objc_msgSend_lastObservationTime(void *a1, const char *a2, ...)
{
  return _[a1 lastObservationTime];
}

id objc_msgSend_lastObservedBeacon(void *a1, const char *a2, ...)
{
  return _[a1 lastObservedBeacon];
}

id objc_msgSend_lastObservedIndex(void *a1, const char *a2, ...)
{
  return _[a1 lastObservedIndex];
}

id objc_msgSend_lastObservedType(void *a1, const char *a2, ...)
{
  return _[a1 lastObservedType];
}

id objc_msgSend_lastOdometer(void *a1, const char *a2, ...)
{
  return _[a1 lastOdometer];
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 lastPathComponent];
}

id objc_msgSend_lastPrefetchTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 lastPrefetchTimestamp];
}

id objc_msgSend_lastProcessedTime(void *a1, const char *a2, ...)
{
  return _[a1 lastProcessedTime];
}

id objc_msgSend_lastPublishDate(void *a1, const char *a2, ...)
{
  return _[a1 lastPublishDate];
}

id objc_msgSend_lastReconciledCriteria(void *a1, const char *a2, ...)
{
  return _[a1 lastReconciledCriteria];
}

id objc_msgSend_lastReconciliationTime(void *a1, const char *a2, ...)
{
  return _[a1 lastReconciliationTime];
}

id objc_msgSend_lastScanBufferEmptyDate(void *a1, const char *a2, ...)
{
  return _[a1 lastScanBufferEmptyDate];
}

id objc_msgSend_lastStepTime(void *a1, const char *a2, ...)
{
  return _[a1 lastStepTime];
}

id objc_msgSend_lastUpdateTime(void *a1, const char *a2, ...)
{
  return _[a1 lastUpdateTime];
}

id objc_msgSend_lastUpdated(void *a1, const char *a2, ...)
{
  return _[a1 lastUpdated];
}

id objc_msgSend_lastValidLocationWithHorizontalAccuracy_evaluationDate_error_(void *a1, const char *a2, ...)
{
  return [a1 lastValidLocationWithHorizontalAccuracy:x0 evaluationDate:x1 error:x2];
}

id objc_msgSend_lat(void *a1, const char *a2, ...)
{
  return _[a1 lat];
}

id objc_msgSend_latLng(void *a1, const char *a2, ...)
{
  return _[a1 latLng];
}

id objc_msgSend_latchSeparatedKeyHawkeyeTask(void *a1, const char *a2, ...)
{
  return _[a1 latchSeparatedKeyHawkeyeTask];
}

id objc_msgSend_laterDate_(void *a1, const char *a2, ...)
{
  return [a1 laterDate:];
}

id objc_msgSend_latestAbsoluteAltitude(void *a1, const char *a2, ...)
{
  return _[a1 latestAbsoluteAltitude];
}

id objc_msgSend_latestAdvertisement(void *a1, const char *a2, ...)
{
  return _[a1 latestAdvertisement];
}

id objc_msgSend_latestData(void *a1, const char *a2, ...)
{
  return _[a1 latestData];
}

id objc_msgSend_latestNavModeEstimate(void *a1, const char *a2, ...)
{
  return _[a1 latestNavModeEstimate];
}

id objc_msgSend_latestPosition(void *a1, const char *a2, ...)
{
  return _[a1 latestPosition];
}

id objc_msgSend_latestReason(void *a1, const char *a2, ...)
{
  return _[a1 latestReason];
}

id objc_msgSend_latitude(void *a1, const char *a2, ...)
{
  return _[a1 latitude];
}

id objc_msgSend_latitudeDeg(void *a1, const char *a2, ...)
{
  return _[a1 latitudeDeg];
}

id objc_msgSend_latlon(void *a1, const char *a2, ...)
{
  return _[a1 latlon];
}

id objc_msgSend_launchApplication_requiringAuthForServiceMask_(void *a1, const char *a2, ...)
{
  return [a1 launchApplication:requiringAuthForServiceMask:];
}

id objc_msgSend_launchDaemon_(void *a1, const char *a2, ...)
{
  return [a1 launchDaemon:];
}

id objc_msgSend_launchReason(void *a1, const char *a2, ...)
{
  return _[a1 launchReason];
}

id objc_msgSend_launchRemoteApplication_withReply_(void *a1, const char *a2, ...)
{
  return [a1 launchRemoteApplication:withReply:];
}

id objc_msgSend_launchWatchApplicationForCompanion_(void *a1, const char *a2, ...)
{
  return [a1 launchWatchApplicationForCompanion:];
}

id objc_msgSend_leashDisableTask(void *a1, const char *a2, ...)
{
  return _[a1 leashDisableTask];
}

id objc_msgSend_leashNeedsConfiguring(void *a1, const char *a2, ...)
{
  return _[a1 leashNeedsConfiguring];
}

id objc_msgSend_leashSlotsInUse(void *a1, const char *a2, ...)
{
  return _[a1 leashSlotsInUse];
}

id objc_msgSend_leashState(void *a1, const char *a2, ...)
{
  return _[a1 leashState];
}

id objc_msgSend_leashTask(void *a1, const char *a2, ...)
{
  return _[a1 leashTask];
}

id objc_msgSend_leashable(void *a1, const char *a2, ...)
{
  return _[a1 leashable];
}

id objc_msgSend_leashedTime(void *a1, const char *a2, ...)
{
  return _[a1 leashedTime];
}

id objc_msgSend_ledgerFile(void *a1, const char *a2, ...)
{
  return _[a1 ledgerFile];
}

id objc_msgSend_ledgerName(void *a1, const char *a2, ...)
{
  return _[a1 ledgerName];
}

id objc_msgSend_ledgerVersionNumber(void *a1, const char *a2, ...)
{
  return _[a1 ledgerVersionNumber];
}

id objc_msgSend_leechClients(void *a1, const char *a2, ...)
{
  return _[a1 leechClients];
}

id objc_msgSend_leeching(void *a1, const char *a2, ...)
{
  return _[a1 leeching];
}

id objc_msgSend_legacyClientKey(void *a1, const char *a2, ...)
{
  return _[a1 legacyClientKey];
}

id objc_msgSend_legacyInfo(void *a1, const char *a2, ...)
{
  return _[a1 legacyInfo];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_lengthOfBytesUsingEncoding_(void *a1, const char *a2, ...)
{
  return [a1 lengthOfBytesUsingEncoding:];
}

id objc_msgSend_level(void *a1, const char *a2, ...)
{
  return _[a1 level];
}

id objc_msgSend_limitStart_andEnd_maxDuration_from_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "limitStart:andEnd:maxDuration:from:");
}

id objc_msgSend_limitingCKP(void *a1, const char *a2, ...)
{
  return _[a1 limitingCKP];
}

id objc_msgSend_lineID(void *a1, const char *a2, ...)
{
  return _[a1 lineID];
}

id objc_msgSend_linkQuality(void *a1, const char *a2, ...)
{
  return _[a1 linkQuality];
}

id objc_msgSend_linkedDevicesWithRelationship_(void *a1, const char *a2, ...)
{
  return [a1 linkedDevicesWithRelationship:];
}

id objc_msgSend_listenForStatus_(void *a1, const char *a2, ...)
{
  return [a1 listenForStatus:];
}

id objc_msgSend_listener(void *a1, const char *a2, ...)
{
  return _[a1 listener];
}

id objc_msgSend_listenerBeginService(void *a1, const char *a2, ...)
{
  return _[a1 listenerBeginService];
}

id objc_msgSend_listenerDealloc(void *a1, const char *a2, ...)
{
  return _[a1 listenerDealloc];
}

id objc_msgSend_listenerEndService(void *a1, const char *a2, ...)
{
  return _[a1 listenerEndService];
}

id objc_msgSend_listenerInit(void *a1, const char *a2, ...)
{
  return _[a1 listenerInit];
}

id objc_msgSend_lng(void *a1, const char *a2, ...)
{
  return _[a1 lng];
}

id objc_msgSend_loadAndReturnError_(void *a1, const char *a2, ...)
{
  return [a1 loadAndReturnError:];
}

id objc_msgSend_loadCache(void *a1, const char *a2, ...)
{
  return _[a1 loadCache];
}

id objc_msgSend_loadLastAWDTimestamps(void *a1, const char *a2, ...)
{
  return _[a1 loadLastAWDTimestamps];
}

id objc_msgSend_loadPersistentStoresWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 loadPersistentStoresWithCompletionHandler:];
}

id objc_msgSend_loadStats(void *a1, const char *a2, ...)
{
  return _[a1 loadStats];
}

id objc_msgSend_loadWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return [a1 loadWithCompletionBlock:];
}

id objc_msgSend_loadWithCoordinator_(void *a1, const char *a2, ...)
{
  return [a1 loadWithCoordinator:];
}

id objc_msgSend_locManager(void *a1, const char *a2, ...)
{
  return _[a1 locManager];
}

id objc_msgSend_locType(void *a1, const char *a2, ...)
{
  return _[a1 locType];
}

id objc_msgSend_localDevice(void *a1, const char *a2, ...)
{
  return _[a1 localDevice];
}

id objc_msgSend_localEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 localEndpoint];
}

id objc_msgSend_localSecondsIntoDay_(void *a1, const char *a2, ...)
{
  return [a1 localSecondsIntoDay:];
}

id objc_msgSend_localTimeZone(void *a1, const char *a2, ...)
{
  return _[a1 localTimeZone];
}

id objc_msgSend_locality(void *a1, const char *a2, ...)
{
  return _[a1 locality];
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _[a1 localizedDescription];
}

id objc_msgSend_localizedFailureReason(void *a1, const char *a2, ...)
{
  return _[a1 localizedFailureReason];
}

id objc_msgSend_localizedInfoPlistStrings(void *a1, const char *a2, ...)
{
  return _[a1 localizedInfoPlistStrings];
}

id objc_msgSend_localizedName(void *a1, const char *a2, ...)
{
  return _[a1 localizedName];
}

id objc_msgSend_localizedNameWithPreferredLocalizations_(void *a1, const char *a2, ...)
{
  return [a1 localizedNameWithPreferredLocalizations:];
}

id objc_msgSend_localizedStringForLabel_(void *a1, const char *a2, ...)
{
  return [a1 localizedStringForLabel:];
}

id objc_msgSend_localizedStringFromDate_dateStyle_timeStyle_(void *a1, const char *a2, ...)
{
  return [a1 localizedStringFromDate:dateStyle:timeStyle:];
}

id objc_msgSend_location(void *a1, const char *a2, ...)
{
  return _[a1 location];
}

id objc_msgSend_locationAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 locationAccuracy];
}

id objc_msgSend_locationContext(void *a1, const char *a2, ...)
{
  return _[a1 locationContext];
}

id objc_msgSend_locationFingerprintAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 locationFingerprintAtIndex:];
}

id objc_msgSend_locationFingerprintsCount(void *a1, const char *a2, ...)
{
  return _[a1 locationFingerprintsCount];
}

id objc_msgSend_locationGroups(void *a1, const char *a2, ...)
{
  return _[a1 locationGroups];
}

id objc_msgSend_locationGroupsLoaded(void *a1, const char *a2, ...)
{
  return _[a1 locationGroupsLoaded];
}

id objc_msgSend_locationHistory(void *a1, const char *a2, ...)
{
  return _[a1 locationHistory];
}

id objc_msgSend_locationId(void *a1, const char *a2, ...)
{
  return _[a1 locationId];
}

id objc_msgSend_locationIsInZoneWithLatitude_longitude_horizontalAccuracy_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "locationIsInZoneWithLatitude:longitude:horizontalAccuracy:");
}

id objc_msgSend_locationIsUsable_(void *a1, const char *a2, ...)
{
  return [a1 locationIsUsable:];
}

id objc_msgSend_locationManager(void *a1, const char *a2, ...)
{
  return _[a1 locationManager];
}

id objc_msgSend_locationOfInterest(void *a1, const char *a2, ...)
{
  return _[a1 locationOfInterest];
}

id objc_msgSend_locationPrivate(void *a1, const char *a2, ...)
{
  return _[a1 locationPrivate];
}

id objc_msgSend_locationProvider(void *a1, const char *a2, ...)
{
  return _[a1 locationProvider];
}

id objc_msgSend_locationRestricted(void *a1, const char *a2, ...)
{
  return _[a1 locationRestricted];
}

id objc_msgSend_locationServicesEnabledStatus(void *a1, const char *a2, ...)
{
  return _[a1 locationServicesEnabledStatus];
}

id objc_msgSend_locationServicesToggleAsNotification(void *a1, const char *a2, ...)
{
  return _[a1 locationServicesToggleAsNotification];
}

id objc_msgSend_locationState(void *a1, const char *a2, ...)
{
  return _[a1 locationState];
}

id objc_msgSend_locationType(void *a1, const char *a2, ...)
{
  return _[a1 locationType];
}

id objc_msgSend_locationUpdatesIncludeMotionState(void *a1, const char *a2, ...)
{
  return _[a1 locationUpdatesIncludeMotionState];
}

id objc_msgSend_locations(void *a1, const char *a2, ...)
{
  return _[a1 locations];
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return _[a1 lock];
}

id objc_msgSend_lockState(void *a1, const char *a2, ...)
{
  return _[a1 lockState];
}

id objc_msgSend_logAccel800_(void *a1, const char *a2, ...)
{
  return [a1 logAccel800:];
}

id objc_msgSend_logAnalytics_(void *a1, const char *a2, ...)
{
  return [a1 logAnalytics:];
}

id objc_msgSend_logBins(void *a1, const char *a2, ...)
{
  return _[a1 logBins];
}

id objc_msgSend_logCollectionData(void *a1, const char *a2, ...)
{
  return _[a1 logCollectionData];
}

id objc_msgSend_logCoreAnalytics_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "logCoreAnalytics:");
}

id objc_msgSend_logData_(void *a1, const char *a2, ...)
{
  return [a1 logData:];
}

id objc_msgSend_logDeviceMotion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "logDeviceMotion:");
}

id objc_msgSend_logFalsePositiveSuppressionFeatures_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "logFalsePositiveSuppressionFeatures:");
}

id objc_msgSend_logFinalCoreAnalytics_(void *a1, const char *a2, ...)
{
  return [a1 logFinalCoreAnalytics:];
}

id objc_msgSend_logGyro200_(void *a1, const char *a2, ...)
{
  return [a1 logGyro200:];
}

id objc_msgSend_logHeartRate_(void *a1, const char *a2, ...)
{
  return [a1 logHeartRate:];
}

id objc_msgSend_logImpactEvent_(void *a1, const char *a2, ...)
{
  return [a1 logImpactEvent:];
}

id objc_msgSend_logImpactEventState_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "logImpactEventState:");
}

id objc_msgSend_logImpactSensorData_(void *a1, const char *a2, ...)
{
  return [a1 logImpactSensorData:];
}

id objc_msgSend_logLatencyMetricsInternal(void *a1, const char *a2, ...)
{
  return _[a1 logLatencyMetricsInternal];
}

id objc_msgSend_logOdometer_(void *a1, const char *a2, ...)
{
  return [a1 logOdometer:];
}

id objc_msgSend_logPressure_(void *a1, const char *a2, ...)
{
  return [a1 logPressure:];
}

id objc_msgSend_logRTLocationOfInterest_type_(void *a1, const char *a2, ...)
{
  return [a1 logRTLocationOfInterest:type:];
}

id objc_msgSend_logRoute_(void *a1, const char *a2, ...)
{
  return [a1 logRoute:];
}

id objc_msgSend_logSessionStats_(void *a1, const char *a2, ...)
{
  return [a1 logSessionStats:];
}

id objc_msgSend_logState_(void *a1, const char *a2, ...)
{
  return [a1 logState:];
}

id objc_msgSend_logSuppressionFeartures_(void *a1, const char *a2, ...)
{
  return [a1 logSuppressionFeartures:];
}

id objc_msgSend_logTaskCounts_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "logTaskCounts:");
}

id objc_msgSend_logToCA(void *a1, const char *a2, ...)
{
  return _[a1 logToCA];
}

id objc_msgSend_logTransitRoute_(void *a1, const char *a2, ...)
{
  return [a1 logTransitRoute:];
}

id objc_msgSend_loggerDataTypeFrom_(void *a1, const char *a2, ...)
{
  return [a1 loggerDataTypeFrom:];
}

id objc_msgSend_loggerDataTypeString_(void *a1, const char *a2, ...)
{
  return [a1 loggerDataTypeString:];
}

id objc_msgSend_loggingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 loggingEnabled];
}

id objc_msgSend_loggingPersistentEnabled(void *a1, const char *a2, ...)
{
  return _[a1 loggingPersistentEnabled];
}

id objc_msgSend_loggingPersistentInTempFolder(void *a1, const char *a2, ...)
{
  return _[a1 loggingPersistentInTempFolder];
}

id objc_msgSend_loggingPersistentMaxAge(void *a1, const char *a2, ...)
{
  return _[a1 loggingPersistentMaxAge];
}

id objc_msgSend_loggingVolatileMaxAge(void *a1, const char *a2, ...)
{
  return _[a1 loggingVolatileMaxAge];
}

id objc_msgSend_loiDistance(void *a1, const char *a2, ...)
{
  return _[a1 loiDistance];
}

id objc_msgSend_loiIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 loiIdentifier];
}

id objc_msgSend_loiRadius(void *a1, const char *a2, ...)
{
  return _[a1 loiRadius];
}

id objc_msgSend_loiType(void *a1, const char *a2, ...)
{
  return _[a1 loiType];
}

id objc_msgSend_lon(void *a1, const char *a2, ...)
{
  return _[a1 lon];
}

id objc_msgSend_longAggressiveScanCoexImpactedDuration(void *a1, const char *a2, ...)
{
  return _[a1 longAggressiveScanCoexImpactedDuration];
}

id objc_msgSend_longAggressiveScanNonCoexImpactedDuration(void *a1, const char *a2, ...)
{
  return _[a1 longAggressiveScanNonCoexImpactedDuration];
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_longValue(void *a1, const char *a2, ...)
{
  return _[a1 longValue];
}

id objc_msgSend_longitude(void *a1, const char *a2, ...)
{
  return _[a1 longitude];
}

id objc_msgSend_longitudeDeg(void *a1, const char *a2, ...)
{
  return _[a1 longitudeDeg];
}

id objc_msgSend_lookupStatsWithDate_stats_(void *a1, const char *a2, ...)
{
  return [a1 lookupStatsWithDate:x0 stats:x1];
}

id objc_msgSend_lowConfidenceVisitLeechClients(void *a1, const char *a2, ...)
{
  return _[a1 lowConfidenceVisitLeechClients];
}

id objc_msgSend_lowerQuartile(void *a1, const char *a2, ...)
{
  return _[a1 lowerQuartile];
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _[a1 lowercaseString];
}

id objc_msgSend_lteCellTowerAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 lteCellTowerAtIndex:];
}

id objc_msgSend_lteCellTowers(void *a1, const char *a2, ...)
{
  return _[a1 lteCellTowers];
}

id objc_msgSend_lteCellTowersCount(void *a1, const char *a2, ...)
{
  return _[a1 lteCellTowersCount];
}

id objc_msgSend_ltk(void *a1, const char *a2, ...)
{
  return _[a1 ltk];
}

id objc_msgSend_luxUnit(void *a1, const char *a2, ...)
{
  return _[a1 luxUnit];
}

id objc_msgSend_mac(void *a1, const char *a2, ...)
{
  return _[a1 mac];
}

id objc_msgSend_macAddress(void *a1, const char *a2, ...)
{
  return _[a1 macAddress];
}

id objc_msgSend_macID(void *a1, const char *a2, ...)
{
  return _[a1 macID];
}

id objc_msgSend_macModesAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 macModesAtIndex:];
}

id objc_msgSend_macModesCount(void *a1, const char *a2, ...)
{
  return _[a1 macModesCount];
}

id objc_msgSend_macOSSourceVersionNewEnough_(void *a1, const char *a2, ...)
{
  return [a1 macOSSourceVersionNewEnough:];
}

id objc_msgSend_macs(void *a1, const char *a2, ...)
{
  return _[a1 macs];
}

id objc_msgSend_macsAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 macsAtIndex:];
}

id objc_msgSend_macsCount(void *a1, const char *a2, ...)
{
  return _[a1 macsCount];
}

id objc_msgSend_macsNotInALSDatabase(void *a1, const char *a2, ...)
{
  return _[a1 macsNotInALSDatabase];
}

id objc_msgSend_main(void *a1, const char *a2, ...)
{
  return _[a1 main];
}

id objc_msgSend_mainArchive(void *a1, const char *a2, ...)
{
  return _[a1 mainArchive];
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _[a1 mainBundle];
}

id objc_msgSend_mainRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 mainRunLoop];
}

id objc_msgSend_maintainAllDevices_(void *a1, const char *a2, ...)
{
  return [a1 maintainAllDevices:];
}

id objc_msgSend_maintainedCategoryCountDictionary(void *a1, const char *a2, ...)
{
  return _[a1 maintainedCategoryCountDictionary];
}

id objc_msgSend_maintainedReasonCountDictionary(void *a1, const char *a2, ...)
{
  return _[a1 maintainedReasonCountDictionary];
}

id objc_msgSend_maintenanceIntervalOverride(void *a1, const char *a2, ...)
{
  return _[a1 maintenanceIntervalOverride];
}

id objc_msgSend_maintenanceOnWildObservationEnabled(void *a1, const char *a2, ...)
{
  return _[a1 maintenanceOnWildObservationEnabled];
}

id objc_msgSend_maintenanceOnlyCondition(void *a1, const char *a2, ...)
{
  return _[a1 maintenanceOnlyCondition];
}

id objc_msgSend_maintenanceTimerFiredWithInterval_(void *a1, const char *a2, ...)
{
  return [a1 maintenanceTimerFiredWithInterval:x0];
}

id objc_msgSend_major(void *a1, const char *a2, ...)
{
  return _[a1 major];
}

id objc_msgSend_makeObjectsPerformSelector_withObject_(void *a1, const char *a2, ...)
{
  return [a1 makeObjectsPerformSelector:withObject:];
}

id objc_msgSend_makeSafeAbsoluteElevation_(void *a1, const char *a2, ...)
{
  return [a1 makeSafeAbsoluteElevation:];
}

id objc_msgSend_makeSafeCFAbsoluteTime_(void *a1, const char *a2, ...)
{
  return [a1 makeSafeCFAbsoluteTime:];
}

id objc_msgSend_managedObjectContext(void *a1, const char *a2, ...)
{
  return _[a1 managedObjectContext];
}

id objc_msgSend_manager(void *a1, const char *a2, ...)
{
  return _[a1 manager];
}

id objc_msgSend_manufacturer(void *a1, const char *a2, ...)
{
  return _[a1 manufacturer];
}

id objc_msgSend_manufacturerData(void *a1, const char *a2, ...)
{
  return _[a1 manufacturerData];
}

id objc_msgSend_manufacturerName(void *a1, const char *a2, ...)
{
  return _[a1 manufacturerName];
}

id objc_msgSend_mapItem(void *a1, const char *a2, ...)
{
  return _[a1 mapItem];
}

id objc_msgSend_mapWorkoutTypeToHKWorkoutActivityType_(void *a1, const char *a2, ...)
{
  return [a1 mapWorkoutTypeToHKWorkoutActivityType:];
}

id objc_msgSend_mappedDataByDestructivelyCombiningPrimaryAndSecondaryData(void *a1, const char *a2, ...)
{
  return _[a1 mappedDataByDestructivelyCombiningPrimaryAndSecondaryData];
}

id objc_msgSend_mappedSecondaryData(void *a1, const char *a2, ...)
{
  return _[a1 mappedSecondaryData];
}

id objc_msgSend_mappedSecondaryDataByDestructivelyCombiningAllSecondaryData(void *a1, const char *a2, ...)
{
  return _[a1 mappedSecondaryDataByDestructivelyCombiningAllSecondaryData];
}

id objc_msgSend_maps488Details(void *a1, const char *a2, ...)
{
  return _[a1 maps488Details];
}

id objc_msgSend_markClientEmergencyEnablementTransition_(void *a1, const char *a2, ...)
{
  return [a1 markClientEmergencyEnablementTransition:];
}

id objc_msgSend_markClientEmergencyEnablementTransition_shouldOverrideDeauthorization_forBeneficiary_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "markClientEmergencyEnablementTransition:shouldOverrideDeauthorization:forBeneficiary:");
}

id objc_msgSend_markClientTemporaryAuthorizationGranted_forClientKey_andAuditToken_byLocationButton_voiceInteractionEnabled_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "markClientTemporaryAuthorizationGranted:forClientKey:andAuditToken:byLocationButton:voiceInteractionEnabled:");
}

id objc_msgSend_markModifiedClean(void *a1, const char *a2, ...)
{
  return _[a1 markModifiedClean];
}

id objc_msgSend_markModifiedDirty(void *a1, const char *a2, ...)
{
  return _[a1 markModifiedDirty];
}

id objc_msgSend_markReceivingLocationInformation_(void *a1, const char *a2, ...)
{
  return [a1 markReceivingLocationInformation:];
}

id objc_msgSend_markScanEndTimeFromBoot_withReason_withPolicy_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "markScanEndTimeFromBoot:withReason:withPolicy:");
}

id objc_msgSend_markScanStartTimeFromBoot_withReason_withRate_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "markScanStartTimeFromBoot:withReason:withRate:");
}

id objc_msgSend_markScanningStopped(void *a1, const char *a2, ...)
{
  return _[a1 markScanningStopped];
}

id objc_msgSend_markTemporaryPreciseAuthorizationGranted_forClientKey_(void *a1, const char *a2, ...)
{
  return [a1 markTemporaryPreciseAuthorizationGranted:forClientKey:];
}

id objc_msgSend_markXpcActivityDone_(void *a1, const char *a2, ...)
{
  return [a1 markXpcActivityDone:];
}

id objc_msgSend_markets(void *a1, const char *a2, ...)
{
  return _[a1 markets];
}

id objc_msgSend_marketsAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 marketsAtIndex:];
}

id objc_msgSend_marketsCount(void *a1, const char *a2, ...)
{
  return _[a1 marketsCount];
}

id objc_msgSend_marqueeAppsOnly(void *a1, const char *a2, ...)
{
  return _[a1 marqueeAppsOnly];
}

id objc_msgSend_masqueradeBundleId_(void *a1, const char *a2, ...)
{
  return [a1 masqueradeBundleId:];
}

id objc_msgSend_matchPrimaryIndices_(void *a1, const char *a2, ...)
{
  return [a1 matchPrimaryIndices:];
}

id objc_msgSend_matchSequence_index_hint_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "matchSequence:index:hint:");
}

id objc_msgSend_matchedIndex(void *a1, const char *a2, ...)
{
  return _[a1 matchedIndex];
}

id objc_msgSend_matchesInString_options_range_(void *a1, const char *a2, ...)
{
  return [a1 matchesInString:x0 options:x1 range:x2];
}

id objc_msgSend_matching(void *a1, const char *a2, ...)
{
  return _[a1 matching];
}

id objc_msgSend_maxAbsSlope(void *a1, const char *a2, ...)
{
  return _[a1 maxAbsSlope];
}

id objc_msgSend_maxActivityBasedSpeedSinceAdvertisement(void *a1, const char *a2, ...)
{
  return _[a1 maxActivityBasedSpeedSinceAdvertisement];
}

id objc_msgSend_maxBaseHeight(void *a1, const char *a2, ...)
{
  return _[a1 maxBaseHeight];
}

id objc_msgSend_maxCellularRSRP(void *a1, const char *a2, ...)
{
  return _[a1 maxCellularRSRP];
}

id objc_msgSend_maxExerciseMinuteDataEntries(void *a1, const char *a2, ...)
{
  return _[a1 maxExerciseMinuteDataEntries];
}

id objc_msgSend_maxNatalieEntries(void *a1, const char *a2, ...)
{
  return _[a1 maxNatalieEntries];
}

id objc_msgSend_maxPayloadSize(void *a1, const char *a2, ...)
{
  return _[a1 maxPayloadSize];
}

id objc_msgSend_maxPeakPowerInCall(void *a1, const char *a2, ...)
{
  return _[a1 maxPeakPowerInCall];
}

id objc_msgSend_maxPedometerEntries(void *a1, const char *a2, ...)
{
  return _[a1 maxPedometerEntries];
}

id objc_msgSend_maxPressure(void *a1, const char *a2, ...)
{
  return _[a1 maxPressure];
}

id objc_msgSend_maxThermalLevelInCall(void *a1, const char *a2, ...)
{
  return _[a1 maxThermalLevelInCall];
}

id objc_msgSend_maximumCountryLocationChangeAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 maximumCountryLocationChangeAccuracy];
}

id objc_msgSend_maximumCountryLocationChangeSpeed(void *a1, const char *a2, ...)
{
  return _[a1 maximumCountryLocationChangeSpeed];
}

id objc_msgSend_maximumDailyScans(void *a1, const char *a2, ...)
{
  return _[a1 maximumDailyScans];
}

id objc_msgSend_maximumWriteValueLengthForType_(void *a1, const char *a2, ...)
{
  return [a1 maximumWriteValueLengthForType:];
}

id objc_msgSend_mcc(void *a1, const char *a2, ...)
{
  return _[a1 mcc];
}

id objc_msgSend_meCardMapItem(void *a1, const char *a2, ...)
{
  return _[a1 meCardMapItem];
}

id objc_msgSend_meCardString(void *a1, const char *a2, ...)
{
  return _[a1 meCardString];
}

id objc_msgSend_meInfoList(void *a1, const char *a2, ...)
{
  return _[a1 meInfoList];
}

id objc_msgSend_mean(void *a1, const char *a2, ...)
{
  return _[a1 mean];
}

id objc_msgSend_meanMaxMets(void *a1, const char *a2, ...)
{
  return _[a1 meanMaxMets];
}

id objc_msgSend_meanPaceFinalFused(void *a1, const char *a2, ...)
{
  return _[a1 meanPaceFinalFused];
}

id objc_msgSend_meanPaceStepCount(void *a1, const char *a2, ...)
{
  return _[a1 meanPaceStepCount];
}

id objc_msgSend_meanSeaLevelPressure(void *a1, const char *a2, ...)
{
  return _[a1 meanSeaLevelPressure];
}

id objc_msgSend_mecardAddress(void *a1, const char *a2, ...)
{
  return _[a1 mecardAddress];
}

id objc_msgSend_mediaList(void *a1, const char *a2, ...)
{
  return _[a1 mediaList];
}

id objc_msgSend_mediaType(void *a1, const char *a2, ...)
{
  return _[a1 mediaType];
}

id objc_msgSend_medicalConditions(void *a1, const char *a2, ...)
{
  return _[a1 medicalConditions];
}

id objc_msgSend_medicalConditionsModifiedDate(void *a1, const char *a2, ...)
{
  return _[a1 medicalConditionsModifiedDate];
}

id objc_msgSend_medicalNotes(void *a1, const char *a2, ...)
{
  return _[a1 medicalNotes];
}

id objc_msgSend_medicalNotesModifiedDate(void *a1, const char *a2, ...)
{
  return _[a1 medicalNotesModifiedDate];
}

id objc_msgSend_medicationInfo(void *a1, const char *a2, ...)
{
  return _[a1 medicationInfo];
}

id objc_msgSend_medicationInfoModifiedDate(void *a1, const char *a2, ...)
{
  return _[a1 medicationInfoModifiedDate];
}

id objc_msgSend_member_(void *a1, const char *a2, ...)
{
  return [a1 member:];
}

id objc_msgSend_mergeFrom_(void *a1, const char *a2, ...)
{
  return [a1 mergeFrom:];
}

id objc_msgSend_mergeIntoDaemonLocation_(void *a1, const char *a2, ...)
{
  return [a1 mergeIntoDaemonLocation:];
}

id objc_msgSend_mergeLocationOfInterest_clusterRadius_(void *a1, const char *a2, ...)
{
  return [a1 mergeLocationOfInterest:clusterRadius:];
}

id objc_msgSend_message(void *a1, const char *a2, ...)
{
  return _[a1 message];
}

id objc_msgSend_messageFailedToSend_withError_recoverable_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "messageFailedToSend:withError:recoverable:");
}

id objc_msgSend_messageType(void *a1, const char *a2, ...)
{
  return _[a1 messageType];
}

id objc_msgSend_messagesWaitingForAck(void *a1, const char *a2, ...)
{
  return _[a1 messagesWaitingForAck];
}

id objc_msgSend_metSource(void *a1, const char *a2, ...)
{
  return _[a1 metSource];
}

id objc_msgSend_meta(void *a1, const char *a2, ...)
{
  return _[a1 meta];
}

id objc_msgSend_metaIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 metaIdentifier];
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _[a1 metadata];
}

id objc_msgSend_meterUnit(void *a1, const char *a2, ...)
{
  return _[a1 meterUnit];
}

id objc_msgSend_meters(void *a1, const char *a2, ...)
{
  return _[a1 meters];
}

id objc_msgSend_metricDictionary(void *a1, const char *a2, ...)
{
  return _[a1 metricDictionary];
}

id objc_msgSend_mets(void *a1, const char *a2, ...)
{
  return _[a1 mets];
}

id objc_msgSend_microLocationIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 microLocationIdentifier];
}

id objc_msgSend_midRangRssiDeviceThreshold(void *a1, const char *a2, ...)
{
  return _[a1 midRangRssiDeviceThreshold];
}

id objc_msgSend_midRangRssiLowerBound(void *a1, const char *a2, ...)
{
  return _[a1 midRangRssiLowerBound];
}

id objc_msgSend_midRangRssiUpperBound(void *a1, const char *a2, ...)
{
  return _[a1 midRangRssiUpperBound];
}

id objc_msgSend_migrateClientInterestData(void *a1, const char *a2, ...)
{
  return _[a1 migrateClientInterestData];
}

id objc_msgSend_migrateDictionaryAtKeyPath_toKeyPath_forceMigrationOnAuthCollision_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "migrateDictionaryAtKeyPath:toKeyPath:forceMigrationOnAuthCollision:");
}

id objc_msgSend_migrationSyncResetVersionNumbersNotification(void *a1, const char *a2, ...)
{
  return _[a1 migrationSyncResetVersionNumbersNotification];
}

id objc_msgSend_migrationVersionNumber(void *a1, const char *a2, ...)
{
  return _[a1 migrationVersionNumber];
}

id objc_msgSend_minBaseHeight(void *a1, const char *a2, ...)
{
  return _[a1 minBaseHeight];
}

id objc_msgSend_minCellularRSRP(void *a1, const char *a2, ...)
{
  return _[a1 minCellularRSRP];
}

id objc_msgSend_minPressure(void *a1, const char *a2, ...)
{
  return _[a1 minPressure];
}

id objc_msgSend_minimumConfidence(void *a1, const char *a2, ...)
{
  return _[a1 minimumConfidence];
}

id objc_msgSend_minimumMoveDistance(void *a1, const char *a2, ...)
{
  return _[a1 minimumMoveDistance];
}

id objc_msgSend_minor(void *a1, const char *a2, ...)
{
  return _[a1 minor];
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return [a1 minusSet:];
}

id objc_msgSend_minute(void *a1, const char *a2, ...)
{
  return _[a1 minute];
}

id objc_msgSend_minuteUnit(void *a1, const char *a2, ...)
{
  return _[a1 minuteUnit];
}

id objc_msgSend_mnc(void *a1, const char *a2, ...)
{
  return _[a1 mnc];
}

id objc_msgSend_mobileCrashReporterPath(void *a1, const char *a2, ...)
{
  return _[a1 mobileCrashReporterPath];
}

id objc_msgSend_mode(void *a1, const char *a2, ...)
{
  return _[a1 mode];
}

id objc_msgSend_modeIndicator(void *a1, const char *a2, ...)
{
  return _[a1 modeIndicator];
}

id objc_msgSend_modeIndicatorAsString_(void *a1, const char *a2, ...)
{
  return [a1 modeIndicatorAsString:];
}

id objc_msgSend_modeOfTransport(void *a1, const char *a2, ...)
{
  return _[a1 modeOfTransport];
}

id objc_msgSend_modeOfTransportation(void *a1, const char *a2, ...)
{
  return _[a1 modeOfTransportation];
}

id objc_msgSend_modeSemanticType(void *a1, const char *a2, ...)
{
  return _[a1 modeSemanticType];
}

id objc_msgSend_modeUpdateReason(void *a1, const char *a2, ...)
{
  return _[a1 modeUpdateReason];
}

id objc_msgSend_modeUpdateSource(void *a1, const char *a2, ...)
{
  return _[a1 modeUpdateSource];
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return _[a1 model];
}

id objc_msgSend_modelIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 modelIdentifier];
}

id objc_msgSend_modelName(void *a1, const char *a2, ...)
{
  return _[a1 modelName];
}

id objc_msgSend_modelNumber(void *a1, const char *a2, ...)
{
  return _[a1 modelNumber];
}

id objc_msgSend_modesAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 modesAtIndex:];
}

id objc_msgSend_modesCount(void *a1, const char *a2, ...)
{
  return _[a1 modesCount];
}

id objc_msgSend_modifications(void *a1, const char *a2, ...)
{
  return _[a1 modifications];
}

id objc_msgSend_monitorKinesiasExpiration(void *a1, const char *a2, ...)
{
  return _[a1 monitorKinesiasExpiration];
}

id objc_msgSend_monitorKinesiasStart(void *a1, const char *a2, ...)
{
  return _[a1 monitorKinesiasStart];
}

id objc_msgSend_monitorWithConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 monitorWithConfiguration:];
}

id objc_msgSend_monitoredIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 monitoredIdentifier];
}

id objc_msgSend_monitoredIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 monitoredIdentifiers];
}

id objc_msgSend_monitoredRegions(void *a1, const char *a2, ...)
{
  return _[a1 monitoredRegions];
}

id objc_msgSend_monitoring(void *a1, const char *a2, ...)
{
  return _[a1 monitoring];
}

id objc_msgSend_monitoringRecordForIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 monitoringRecordForIdentifier:];
}

id objc_msgSend_month(void *a1, const char *a2, ...)
{
  return _[a1 month];
}

id objc_msgSend_mostRecentLocation(void *a1, const char *a2, ...)
{
  return _[a1 mostRecentLocation];
}

id objc_msgSend_mostRecentRsrpValue(void *a1, const char *a2, ...)
{
  return _[a1 mostRecentRsrpValue];
}

id objc_msgSend_motion(void *a1, const char *a2, ...)
{
  return _[a1 motion];
}

id objc_msgSend_motionActivity(void *a1, const char *a2, ...)
{
  return _[a1 motionActivity];
}

id objc_msgSend_motionActivityConfidence(void *a1, const char *a2, ...)
{
  return _[a1 motionActivityConfidence];
}

id objc_msgSend_motionActivityType(void *a1, const char *a2, ...)
{
  return _[a1 motionActivityType];
}

id objc_msgSend_motionAlarmActive(void *a1, const char *a2, ...)
{
  return _[a1 motionAlarmActive];
}

id objc_msgSend_motionAlarmClients(void *a1, const char *a2, ...)
{
  return _[a1 motionAlarmClients];
}

id objc_msgSend_motionAlarmSubscription(void *a1, const char *a2, ...)
{
  return _[a1 motionAlarmSubscription];
}

id objc_msgSend_motionEvent_(void *a1, const char *a2, ...)
{
  return [a1 motionEvent:];
}

id objc_msgSend_motionState(void *a1, const char *a2, ...)
{
  return _[a1 motionState];
}

id objc_msgSend_motionStateAfterNMinusOneStateChange(void *a1, const char *a2, ...)
{
  return _[a1 motionStateAfterNMinusOneStateChange];
}

id objc_msgSend_motionStateAfterNMinusTwoStateChange(void *a1, const char *a2, ...)
{
  return _[a1 motionStateAfterNMinusTwoStateChange];
}

id objc_msgSend_motionStateBeforeNMinusOneStateChange(void *a1, const char *a2, ...)
{
  return _[a1 motionStateBeforeNMinusOneStateChange];
}

id objc_msgSend_motionStateBeforeStateChange(void *a1, const char *a2, ...)
{
  return _[a1 motionStateBeforeStateChange];
}

id objc_msgSend_motionTypeFromCLMotionActivity_(void *a1, const char *a2, ...)
{
  return [a1 motionTypeFromCLMotionActivity:x0];
}

id objc_msgSend_motionTypeFromMotionActivity_(void *a1, const char *a2, ...)
{
  return [a1 motionTypeFromMotionActivity:];
}

id objc_msgSend_motionVehicleConnected(void *a1, const char *a2, ...)
{
  return _[a1 motionVehicleConnected];
}

id objc_msgSend_motionVehicleConnectedStateChanged(void *a1, const char *a2, ...)
{
  return _[a1 motionVehicleConnectedStateChanged];
}

id objc_msgSend_moveItemAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "moveItemAtPath:toPath:error:");
}

id objc_msgSend_muid(void *a1, const char *a2, ...)
{
  return _[a1 muid];
}

id objc_msgSend_multiLeashedTime(void *a1, const char *a2, ...)
{
  return _[a1 multiLeashedTime];
}

id objc_msgSend_multiTimeV2(void *a1, const char *a2, ...)
{
  return _[a1 multiTimeV2];
}

id objc_msgSend_mungedUsageDataForPotentiallyOldUsageData_(void *a1, const char *a2, ...)
{
  return [a1 mungedUsageDataForPotentiallyOldUsageData:];
}

id objc_msgSend_mutableBytes(void *a1, const char *a2, ...)
{
  return _[a1 mutableBytes];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_mutexState(void *a1, const char *a2, ...)
{
  return _[a1 mutexState];
}

id objc_msgSend_nMinusOneState(void *a1, const char *a2, ...)
{
  return _[a1 nMinusOneState];
}

id objc_msgSend_nMinusOneStateChangeLocation(void *a1, const char *a2, ...)
{
  return _[a1 nMinusOneStateChangeLocation];
}

id objc_msgSend_nMinusOneStateChangeLocationAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 nMinusOneStateChangeLocationAccuracy];
}

id objc_msgSend_nMinusOneStateChangeLocationProvider(void *a1, const char *a2, ...)
{
  return _[a1 nMinusOneStateChangeLocationProvider];
}

id objc_msgSend_nMinusThreeState(void *a1, const char *a2, ...)
{
  return _[a1 nMinusThreeState];
}

id objc_msgSend_nMinusTwoState(void *a1, const char *a2, ...)
{
  return _[a1 nMinusTwoState];
}

id objc_msgSend_nMinusTwoStateChangeLocation(void *a1, const char *a2, ...)
{
  return _[a1 nMinusTwoStateChangeLocation];
}

id objc_msgSend_nMinusTwoStateChangeLocationAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 nMinusTwoStateChangeLocationAccuracy];
}

id objc_msgSend_nMinusTwoStateChangeLocationProvider(void *a1, const char *a2, ...)
{
  return _[a1 nMinusTwoStateChangeLocationProvider];
}

id objc_msgSend_nSigmaBetweenVisits(void *a1, const char *a2, ...)
{
  return _[a1 nSigmaBetweenVisits];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_nameForClient_(void *a1, const char *a2, ...)
{
  return [a1 nameForClient:];
}

id objc_msgSend_nameModifiedDate(void *a1, const char *a2, ...)
{
  return _[a1 nameModifiedDate];
}

id objc_msgSend_navModeEstimator(void *a1, const char *a2, ...)
{
  return _[a1 navModeEstimator];
}

id objc_msgSend_navigationState(void *a1, const char *a2, ...)
{
  return _[a1 navigationState];
}

id objc_msgSend_nearDepthLimitThreshold(void *a1, const char *a2, ...)
{
  return _[a1 nearDepthLimitThreshold];
}

id objc_msgSend_nearOwnerTimeV2(void *a1, const char *a2, ...)
{
  return _[a1 nearOwnerTimeV2];
}

id objc_msgSend_nearOwnerTimeoutOverride(void *a1, const char *a2, ...)
{
  return _[a1 nearOwnerTimeoutOverride];
}

id objc_msgSend_nearbyActionType(void *a1, const char *a2, ...)
{
  return _[a1 nearbyActionType];
}

id objc_msgSend_nearbyActivityLevel(void *a1, const char *a2, ...)
{
  return _[a1 nearbyActivityLevel];
}

id objc_msgSend_nearbyDeviceListener(void *a1, const char *a2, ...)
{
  return _[a1 nearbyDeviceListener];
}

id objc_msgSend_nearbyFlags(void *a1, const char *a2, ...)
{
  return _[a1 nearbyFlags];
}

id objc_msgSend_nearbyInfoV2AuthIntegrityTagData(void *a1, const char *a2, ...)
{
  return _[a1 nearbyInfoV2AuthIntegrityTagData];
}

id objc_msgSend_nearbyInfoV2AuthTagData(void *a1, const char *a2, ...)
{
  return _[a1 nearbyInfoV2AuthTagData];
}

id objc_msgSend_nearbyInfoV2DecryptedFlags(void *a1, const char *a2, ...)
{
  return _[a1 nearbyInfoV2DecryptedFlags];
}

id objc_msgSend_nearbyInfoV2Flags(void *a1, const char *a2, ...)
{
  return _[a1 nearbyInfoV2Flags];
}

id objc_msgSend_nearbyPairUniqueID(void *a1, const char *a2, ...)
{
  return _[a1 nearbyPairUniqueID];
}

id objc_msgSend_nearestVenues_availableVenues_latestPosition_availabilityZScoreConfidenceInterval_settings_isAllowedMultipleVenues_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "nearestVenues:availableVenues:latestPosition:availabilityZScoreConfidenceInterval:settings:isAllowedMultipleVenues:");
}

id objc_msgSend_neededDiscovery(void *a1, const char *a2, ...)
{
  return _[a1 neededDiscovery];
}

id objc_msgSend_needsRequestStateUpdateComparedTo_(void *a1, const char *a2, ...)
{
  return [a1 needsRequestStateUpdateComparedTo:];
}

id objc_msgSend_nestedBundlePath(void *a1, const char *a2, ...)
{
  return _[a1 nestedBundlePath];
}

id objc_msgSend_networkIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 networkIdentifier];
}

id objc_msgSend_newAssertionForBundle_withReason_(void *a1, const char *a2, ...)
{
  return [a1 newAssertionForBundle:withReason:];
}

id objc_msgSend_newAssertionWithReason_(void *a1, const char *a2, ...)
{
  return [a1 newAssertionWithReason:];
}

id objc_msgSend_newMitigationDict(void *a1, const char *a2, ...)
{
  return _[a1 newMitigationDict];
}

id objc_msgSend_newMitigationFromDict_(void *a1, const char *a2, ...)
{
  return [a1 newMitigationFromDict:];
}

id objc_msgSend_newSharedVendorUniverseWithSilo_(void *a1, const char *a2, ...)
{
  return [a1 newSharedVendorUniverseWithSilo:];
}

id objc_msgSend_newStreamingAllowed(void *a1, const char *a2, ...)
{
  return _[a1 newStreamingAllowed];
}

id objc_msgSend_newTimer(void *a1, const char *a2, ...)
{
  return _[a1 newTimer];
}

id objc_msgSend_newUploadAllowed(void *a1, const char *a2, ...)
{
  return _[a1 newUploadAllowed];
}

id objc_msgSend_newlineCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 newlineCharacterSet];
}

id objc_msgSend_nextAlignedKeyRollDate(void *a1, const char *a2, ...)
{
  return _[a1 nextAlignedKeyRollDate];
}

id objc_msgSend_nextConnectionMaterialForPeripheral_(void *a1, const char *a2, ...)
{
  return [a1 nextConnectionMaterialForPeripheral:];
}

id objc_msgSend_nextDateAfterDate_matchingHour_minute_second_options_(void *a1, const char *a2, ...)
{
  return [a1 nextDateAfterDate:x0 matchingHour:x1 minute:x2 second:x3 options:x4];
}

id objc_msgSend_nextEntryTime(void *a1, const char *a2, ...)
{
  return _[a1 nextEntryTime];
}

id objc_msgSend_nextFireDelay(void *a1, const char *a2, ...)
{
  return _[a1 nextFireDelay];
}

id objc_msgSend_nextFireTime(void *a1, const char *a2, ...)
{
  return _[a1 nextFireTime];
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return _[a1 nextObject];
}

id objc_msgSend_nextPacketOfMaxSize_(void *a1, const char *a2, ...)
{
  return [a1 nextPacketOfMaxSize:];
}

id objc_msgSend_nextWildIndex(void *a1, const char *a2, ...)
{
  return _[a1 nextWildIndex];
}

id objc_msgSend_nid(void *a1, const char *a2, ...)
{
  return _[a1 nid];
}

id objc_msgSend_nonFitnessToCyclingSeconds(void *a1, const char *a2, ...)
{
  return _[a1 nonFitnessToCyclingSeconds];
}

id objc_msgSend_nonFitnessToRunningSeconds(void *a1, const char *a2, ...)
{
  return _[a1 nonFitnessToRunningSeconds];
}

id objc_msgSend_northLat(void *a1, const char *a2, ...)
{
  return _[a1 northLat];
}

id objc_msgSend_northWestLatitude(void *a1, const char *a2, ...)
{
  return _[a1 northWestLatitude];
}

id objc_msgSend_northWestLongitude(void *a1, const char *a2, ...)
{
  return _[a1 northWestLongitude];
}

id objc_msgSend_notification(void *a1, const char *a2, ...)
{
  return _[a1 notification];
}

id objc_msgSend_notificationAcknowledged_(void *a1, const char *a2, ...)
{
  return [a1 notificationAcknowledged:];
}

id objc_msgSend_notificationSettings(void *a1, const char *a2, ...)
{
  return _[a1 notificationSettings];
}

id objc_msgSend_notificationStatusWithError_(void *a1, const char *a2, ...)
{
  return [a1 notificationStatusWithError:];
}

id objc_msgSend_notificationThrottleHours(void *a1, const char *a2, ...)
{
  return _[a1 notificationThrottleHours];
}

id objc_msgSend_notificationThrottleMaxPerPeriod(void *a1, const char *a2, ...)
{
  return _[a1 notificationThrottleMaxPerPeriod];
}

id objc_msgSend_notificationUnavailableReasons(void *a1, const char *a2, ...)
{
  return _[a1 notificationUnavailableReasons];
}

id objc_msgSend_notificationsInCompanionQueue(void *a1, const char *a2, ...)
{
  return _[a1 notificationsInCompanionQueue];
}

id objc_msgSend_notificationsInGizmoQueue(void *a1, const char *a2, ...)
{
  return _[a1 notificationsInGizmoQueue];
}

id objc_msgSend_notifier(void *a1, const char *a2, ...)
{
  return _[a1 notifier];
}

id objc_msgSend_notifierClientNumForCoparty_(void *a1, const char *a2, ...)
{
  return [a1 notifierClientNumForCoparty:];
}

id objc_msgSend_notifyClientsAggressiveScanEnded(void *a1, const char *a2, ...)
{
  return _[a1 notifyClientsAggressiveScanEnded];
}

id objc_msgSend_notifyClientsOfVisit_(void *a1, const char *a2, ...)
{
  return [a1 notifyClientsOfVisit:];
}

id objc_msgSend_notifyCrucialStates(void *a1, const char *a2, ...)
{
  return _[a1 notifyCrucialStates];
}

id objc_msgSend_notifyFromLastInfo(void *a1, const char *a2, ...)
{
  return _[a1 notifyFromLastInfo];
}

id objc_msgSend_notifyHKUpdates_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "notifyHKUpdates:");
}

id objc_msgSend_notifyMigrationPerformed(void *a1, const char *a2, ...)
{
  return _[a1 notifyMigrationPerformed];
}

id objc_msgSend_notifyMitigationNeeded_(void *a1, const char *a2, ...)
{
  return [a1 notifyMitigationNeeded:];
}

id objc_msgSend_notifyNewRequestAvailable(void *a1, const char *a2, ...)
{
  return _[a1 notifyNewRequestAvailable];
}

id objc_msgSend_notifyOnEntry(void *a1, const char *a2, ...)
{
  return _[a1 notifyOnEntry];
}

id objc_msgSend_notifyOnExit(void *a1, const char *a2, ...)
{
  return _[a1 notifyOnExit];
}

id objc_msgSend_notifyPassKitPayment_transaction_info_(void *a1, const char *a2, ...)
{
  return [a1 notifyPassKitPayment:transaction:info:];
}

id objc_msgSend_notifyTAWithDeviceInformation_type_state_date_(void *a1, const char *a2, ...)
{
  return [a1 notifyTAWithDeviceInformation:x0 type:x1 state:x2 date:x3];
}

id objc_msgSend_notifyWhenCacheIsPopulatedWithReply_(void *a1, const char *a2, ...)
{
  return [a1 notifyWhenCacheIsPopulatedWithReply:];
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _[a1 now];
}

id objc_msgSend_nr5GCellTowerAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 nr5GCellTowerAtIndex:];
}

id objc_msgSend_nr5GCellTowers(void *a1, const char *a2, ...)
{
  return _[a1 nr5GCellTowers];
}

id objc_msgSend_nr5GCellTowersCount(void *a1, const char *a2, ...)
{
  return _[a1 nr5GCellTowersCount];
}

id objc_msgSend_nrarfcn(void *a1, const char *a2, ...)
{
  return _[a1 nrarfcn];
}

id objc_msgSend_nsuuid(void *a1, const char *a2, ...)
{
  return _[a1 nsuuid];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _[a1 null];
}

id objc_msgSend_nullClientKeyPath(void *a1, const char *a2, ...)
{
  return _[a1 nullClientKeyPath];
}

id objc_msgSend_numDevices(void *a1, const char *a2, ...)
{
  return _[a1 numDevices];
}

id objc_msgSend_numDevicesVector(void *a1, const char *a2, ...)
{
  return _[a1 numDevicesVector];
}

id objc_msgSend_numDuplicateMediaSelections(void *a1, const char *a2, ...)
{
  return _[a1 numDuplicateMediaSelections];
}

id objc_msgSend_numMediaSelectIterations(void *a1, const char *a2, ...)
{
  return _[a1 numMediaSelectIterations];
}

id objc_msgSend_numPendingTasks(void *a1, const char *a2, ...)
{
  return _[a1 numPendingTasks];
}

id objc_msgSend_numPossiblePeripherals(void *a1, const char *a2, ...)
{
  return _[a1 numPossiblePeripherals];
}

id objc_msgSend_numProactiveAttempts(void *a1, const char *a2, ...)
{
  return _[a1 numProactiveAttempts];
}

id objc_msgSend_numProactiveConnects(void *a1, const char *a2, ...)
{
  return _[a1 numProactiveConnects];
}

id objc_msgSend_numWorkoutsContrToEstimate(void *a1, const char *a2, ...)
{
  return _[a1 numWorkoutsContrToEstimate];
}

id objc_msgSend_numZaxisHarvestTraces(void *a1, const char *a2, ...)
{
  return _[a1 numZaxisHarvestTraces];
}

id objc_msgSend_number(void *a1, const char *a2, ...)
{
  return _[a1 number];
}

id objc_msgSend_numberOfConsecutiveSyncSessionRetries(void *a1, const char *a2, ...)
{
  return _[a1 numberOfConsecutiveSyncSessionRetries];
}

id objc_msgSend_numberOfRebaseBtwRefresh(void *a1, const char *a2, ...)
{
  return _[a1 numberOfRebaseBtwRefresh];
}

id objc_msgSend_numberOfSteps(void *a1, const char *a2, ...)
{
  return _[a1 numberOfSteps];
}

id objc_msgSend_numberOfSurroundingCdmaCells(void *a1, const char *a2, ...)
{
  return _[a1 numberOfSurroundingCdmaCells];
}

id objc_msgSend_numberOfSurroundingCells(void *a1, const char *a2, ...)
{
  return _[a1 numberOfSurroundingCells];
}

id objc_msgSend_numberOfSurroundingLteCells(void *a1, const char *a2, ...)
{
  return _[a1 numberOfSurroundingLteCells];
}

id objc_msgSend_numberOfSurroundingNr5GCells(void *a1, const char *a2, ...)
{
  return _[a1 numberOfSurroundingNr5GCells];
}

id objc_msgSend_numberOfSurroundingWifis(void *a1, const char *a2, ...)
{
  return _[a1 numberOfSurroundingWifis];
}

id objc_msgSend_numberOfTrackEndedBtwRefresh(void *a1, const char *a2, ...)
{
  return _[a1 numberOfTrackEndedBtwRefresh];
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return [a1 numberWithBool:];
}

id objc_msgSend_numberWithChar_(void *a1, const char *a2, ...)
{
  return [a1 numberWithChar:];
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return [a1 numberWithDouble:];
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return [a1 numberWithFloat:];
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return [a1 numberWithInt:];
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return [a1 numberWithInteger:];
}

id objc_msgSend_numberWithLong_(void *a1, const char *a2, ...)
{
  return [a1 numberWithLong:];
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return [a1 numberWithLongLong:];
}

id objc_msgSend_numberWithShort_(void *a1, const char *a2, ...)
{
  return [a1 numberWithShort:];
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedChar:];
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedInt:];
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedInteger:];
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedLong:];
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedLongLong:];
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedShort:];
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _[a1 object];
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 objectAtIndex:];
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 objectAtIndexedSubscript:];
}

id objc_msgSend_objectDiscoveryMode(void *a1, const char *a2, ...)
{
  return _[a1 objectDiscoveryMode];
}

id objc_msgSend_objectEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 objectEnumerator];
}

id objc_msgSend_objectForInfoDictionaryKey_(void *a1, const char *a2, ...)
{
  return [a1 objectForInfoDictionaryKey:];
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return [a1 objectForKey:];
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 objectForKeyedSubscript:];
}

id objc_msgSend_objectSetupFlags(void *a1, const char *a2, ...)
{
  return _[a1 objectSetupFlags];
}

id objc_msgSend_objectType(void *a1, const char *a2, ...)
{
  return _[a1 objectType];
}

id objc_msgSend_objectsForKeys_notFoundMarker_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "objectsForKeys:notFoundMarker:");
}

id objc_msgSend_observationInterval(void *a1, const char *a2, ...)
{
  return _[a1 observationInterval];
}

id objc_msgSend_observeContentUpdatesWithHandler_(void *a1, const char *a2, ...)
{
  return [a1 observeContentUpdatesWithHandler:];
}

id objc_msgSend_observeDevice_(void *a1, const char *a2, ...)
{
  return [a1 observeDevice:];
}

id objc_msgSend_observedTransitAccessPointsCache(void *a1, const char *a2, ...)
{
  return _[a1 observedTransitAccessPointsCache];
}

id objc_msgSend_observerSession(void *a1, const char *a2, ...)
{
  return _[a1 observerSession];
}

id objc_msgSend_ocean(void *a1, const char *a2, ...)
{
  return _[a1 ocean];
}

id objc_msgSend_odometer(void *a1, const char *a2, ...)
{
  return _[a1 odometer];
}

id objc_msgSend_odometerTarget(void *a1, const char *a2, ...)
{
  return _[a1 odometerTarget];
}

id objc_msgSend_odometryClient_requestInterval_(void *a1, const char *a2, ...)
{
  return [a1 odometryClient:requestInterval:];
}

id objc_msgSend_odometryClient_requestInterval_sequenceNumber_(void *a1, const char *a2, ...)
{
  return [a1 odometryClient:requestInterval:sequenceNumber:];
}

id objc_msgSend_offset(void *a1, const char *a2, ...)
{
  return _[a1 offset];
}

id objc_msgSend_offsetInFile(void *a1, const char *a2, ...)
{
  return _[a1 offsetInFile];
}

id objc_msgSend_onAbsoluteAltitudeUpdate_(void *a1, const char *a2, ...)
{
  return [a1 onAbsoluteAltitudeUpdate:];
}

id objc_msgSend_onAddBout_(void *a1, const char *a2, ...)
{
  return [a1 onAddBout:];
}

id objc_msgSend_onAdvertisementBufferEmptied(void *a1, const char *a2, ...)
{
  return _[a1 onAdvertisementBufferEmptied];
}

id objc_msgSend_onAggressiveScanEnded(void *a1, const char *a2, ...)
{
  return _[a1 onAggressiveScanEnded];
}

id objc_msgSend_onAggressiveScanStarted(void *a1, const char *a2, ...)
{
  return _[a1 onAggressiveScanStarted];
}

id objc_msgSend_onAppMonitorNotification_data_(void *a1, const char *a2, ...)
{
  return [a1 onAppMonitorNotification:data];
}

id objc_msgSend_onAppUninstallationCheckActivity_(void *a1, const char *a2, ...)
{
  return [a1 onAppUninstallationCheckActivity:];
}

id objc_msgSend_onApplicationStateChange_(void *a1, const char *a2, ...)
{
  return [a1 onApplicationStateChange:];
}

id objc_msgSend_onApplicationStateMonitor_didUpdate_forProcess_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "onApplicationStateMonitor:didUpdate:forProcess:");
}

id objc_msgSend_onAvengerAdvertisement_reconciledInformation_(void *a1, const char *a2, ...)
{
  return [a1 onAvengerAdvertisement:reconciledInformation:];
}

id objc_msgSend_onBackgroundInertialOdometryState_(void *a1, const char *a2, ...)
{
  return [a1 onBackgroundInertialOdometryState:];
}

id objc_msgSend_onBarometerCalibrationNotification_track_data_(void *a1, const char *a2, ...)
{
  return [a1 onBarometerCalibrationNotification:track:data:];
}

id objc_msgSend_onBatchedAccelerometerData_(void *a1, const char *a2, ...)
{
  return [a1 onBatchedAccelerometerData:];
}

id objc_msgSend_onBatchedDeviceMotionData_(void *a1, const char *a2, ...)
{
  return [a1 onBatchedDeviceMotionData:];
}

id objc_msgSend_onBehalfOfBundleId(void *a1, const char *a2, ...)
{
  return _[a1 onBehalfOfBundleId];
}

id objc_msgSend_onBluetoothServiceNotification_data_(void *a1, const char *a2, ...)
{
  return [a1 onBluetoothServiceNotification:data];
}

id objc_msgSend_onCLEmergencyEnablementAssertion_(void *a1, const char *a2, ...)
{
  return [a1 onCLEmergencyEnablementAssertion];
}

id objc_msgSend_onCalorieAggregationActivity_(void *a1, const char *a2, ...)
{
  return [a1 onCalorieAggregationActivity:];
}

id objc_msgSend_onCapabilityChange(void *a1, const char *a2, ...)
{
  return _[a1 onCapabilityChange];
}

id objc_msgSend_onCardioChangeEvent(void *a1, const char *a2, ...)
{
  return _[a1 onCardioChangeEvent];
}

id objc_msgSend_onCatherineNotification_data_(void *a1, const char *a2, ...)
{
  return [a1 onCatherineNotification:data];
}

id objc_msgSend_onChangeEstimationActivity_(void *a1, const char *a2, ...)
{
  return [a1 onChangeEstimationActivity:];
}

id objc_msgSend_onCharger_(void *a1, const char *a2, ...)
{
  return [a1 onCharger:];
}

id objc_msgSend_onClassATimerActivity_withAlarmId_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "onClassATimerActivity:withAlarmId:");
}

id objc_msgSend_onClientAnomalyEventSubscriptionRequest_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "onClientAnomalyEventSubscriptionRequest:");
}

id objc_msgSend_onClientManagerNotification_data_(void *a1, const char *a2, ...)
{
  return [a1 onClientManagerNotification:data:];
}

id objc_msgSend_onCompanionConnectionNotification_data_(void *a1, const char *a2, ...)
{
  return [a1 onCompanionConnectionNotification:data:];
}

id objc_msgSend_onCompanionNotification_data_(void *a1, const char *a2, ...)
{
  return [a1 onCompanionNotification:data];
}

id objc_msgSend_onCompanionObservationWithType_(void *a1, const char *a2, ...)
{
  return [a1 onCompanionObservationWithType:];
}

id objc_msgSend_onCompanionRelativeElevationUpdate_(void *a1, const char *a2, ...)
{
  return [a1 onCompanionRelativeElevationUpdate:];
}

id objc_msgSend_onConditionUpdateCallbackHandler(void *a1, const char *a2, ...)
{
  return _[a1 onConditionUpdateCallbackHandler];
}

id objc_msgSend_onConnectionStateChangeForDeviceWithUUID_fromState_toState_(void *a1, const char *a2, ...)
{
  return [a1 onConnectionStateChangeForDeviceWithUUID:fromState:toState:];
}

id objc_msgSend_onCyclingDistanceUpdate_(void *a1, const char *a2, ...)
{
  return [a1 onCyclingDistanceUpdate:];
}

id objc_msgSend_onDaemonStatusNotification_data_(void *a1, const char *a2, ...)
{
  return [a1 onDaemonStatusNotification:data];
}

id objc_msgSend_onDailyAggregateFeatureComputeActivity_(void *a1, const char *a2, ...)
{
  return [a1 onDailyAggregateFeatureComputeActivity:];
}

id objc_msgSend_onDataCollectionChangedNotification(void *a1, const char *a2, ...)
{
  return _[a1 onDataCollectionChangedNotification];
}

id objc_msgSend_onDataCollectionRequested_(void *a1, const char *a2, ...)
{
  return [a1 onDataCollectionRequested:];
}

id objc_msgSend_onDbCleanupActivity_(void *a1, const char *a2, ...)
{
  return [a1 onDbCleanupActivity:];
}

id objc_msgSend_onDeepSubmersion_withStateChanged_(void *a1, const char *a2, ...)
{
  return [a1 onDeepSubmersion:x0 withStateChanged:x1];
}

id objc_msgSend_onDeferredStopTimerShouldPublish_(void *a1, const char *a2, ...)
{
  return [a1 onDeferredStopTimerShouldPublish:];
}

id objc_msgSend_onDeferredStopTimerShouldPublish_recordSubsequentSession_isMultiSportSession_withEvent_triggerDelay_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "onDeferredStopTimerShouldPublish:recordSubsequentSession:isMultiSportSession:withEvent:triggerDelay:");
}

id objc_msgSend_onElevationThresold_direction_(void *a1, const char *a2, ...)
{
  return [a1 onElevationThresold:direction:];
}

id objc_msgSend_onEnableEasySubmersion_(void *a1, const char *a2, ...)
{
  return [a1 onEnableEasySubmersion:];
}

id objc_msgSend_onFallSnippetNotification_data_(void *a1, const char *a2, ...)
{
  return [a1 onFallSnippetNotification:data];
}

id objc_msgSend_onFirstUnlock(void *a1, const char *a2, ...)
{
  return _[a1 onFirstUnlock];
}

id objc_msgSend_onForcedLocationNotification_data_(void *a1, const char *a2, ...)
{
  return [a1 onForcedLocationNotification:data];
}

id objc_msgSend_onForcedLocationNotificationSub_data_(void *a1, const char *a2, ...)
{
  return [a1 onForcedLocationNotificationSub:data:];
}

id objc_msgSend_onGnssNotification_data_(void *a1, const char *a2, ...)
{
  return [a1 onGnssNotification:data];
}

id objc_msgSend_onHRRecoveryEstimate_(void *a1, const char *a2, ...)
{
  return [a1 onHRRecoveryEstimate:];
}

id objc_msgSend_onHRRecoveryRegisterHRNotification(void *a1, const char *a2, ...)
{
  return _[a1 onHRRecoveryRegisterHRNotification];
}

id objc_msgSend_onHRRecoverySessionEnd(void *a1, const char *a2, ...)
{
  return _[a1 onHRRecoverySessionEnd];
}

id objc_msgSend_onHRRecoverySessionStart(void *a1, const char *a2, ...)
{
  return _[a1 onHRRecoverySessionStart];
}

id objc_msgSend_onHRRecoveryUnregisterHRNotification(void *a1, const char *a2, ...)
{
  return _[a1 onHRRecoveryUnregisterHRNotification];
}

id objc_msgSend_onImpactedFrequency(void *a1, const char *a2, ...)
{
  return _[a1 onImpactedFrequency];
}

id objc_msgSend_onIntervalTimerCreateEventAndIncrementPacket_(void *a1, const char *a2, ...)
{
  return [a1 onIntervalTimerCreateEventAndIncrementPacket:];
}

id objc_msgSend_onLeechedNotification_withData_(void *a1, const char *a2, ...)
{
  return [a1 onLeechedNotification:withData:];
}

id objc_msgSend_onLocationNotification_data_(void *a1, const char *a2, ...)
{
  return [a1 onLocationNotification:data:];
}

id objc_msgSend_onLocationUpdate_(void *a1, const char *a2, ...)
{
  return [a1 onLocationUpdate:];
}

id objc_msgSend_onLowConfidenceVisit_(void *a1, const char *a2, ...)
{
  return [a1 onLowConfidenceVisit:];
}

id objc_msgSend_onMiLoConnectionStatusEventUpdate_(void *a1, const char *a2, ...)
{
  return [a1 onMiLoConnectionStatusEventUpdate:];
}

id objc_msgSend_onMiLoDebugResponse_(void *a1, const char *a2, ...)
{
  return [a1 onMiLoDebugResponse:];
}

id objc_msgSend_onMiLoGenericEvent_(void *a1, const char *a2, ...)
{
  return [a1 onMiLoGenericEvent:];
}

id objc_msgSend_onMiLoObservationMetaInfo_(void *a1, const char *a2, ...)
{
  return [a1 onMiLoObservationMetaInfo:];
}

id objc_msgSend_onMiLoPredictionEventUpdate_(void *a1, const char *a2, ...)
{
  return [a1 onMiLoPredictionEventUpdate:];
}

id objc_msgSend_onMiLoServiceEventUpdate_(void *a1, const char *a2, ...)
{
  return [a1 onMiLoServiceEventUpdate:];
}

id objc_msgSend_onMobileAssetNotification_data_(void *a1, const char *a2, ...)
{
  return [a1 onMobileAssetNotification:data];
}

id objc_msgSend_onMobilityBoutMetrics_(void *a1, const char *a2, ...)
{
  return [a1 onMobilityBoutMetrics:];
}

id objc_msgSend_onMobilityClassificationActivity_(void *a1, const char *a2, ...)
{
  return [a1 onMobilityClassificationActivity:];
}

id objc_msgSend_onMobilityCompanionSyncActivity_(void *a1, const char *a2, ...)
{
  return [a1 onMobilityCompanionSyncActivity:];
}

id objc_msgSend_onMobilityProcessBoutsActivity_(void *a1, const char *a2, ...)
{
  return [a1 onMobilityProcessBoutsActivity:];
}

id objc_msgSend_onMonitorNotification_data_(void *a1, const char *a2, ...)
{
  return [a1 onMonitorNotification:data];
}

id objc_msgSend_onMotionActivityNotification_data_(void *a1, const char *a2, ...)
{
  return [a1 onMotionActivityNotification:data:];
}

id objc_msgSend_onMotionStateMediatorData_(void *a1, const char *a2, ...)
{
  return [a1 onMotionStateMediatorData:];
}

id objc_msgSend_onMotionStateMediatorNotification_data_(void *a1, const char *a2, ...)
{
  return [a1 onMotionStateMediatorNotification:data];
}

id objc_msgSend_onMotionStateNotification_data_(void *a1, const char *a2, ...)
{
  return [a1 onMotionStateNotification:data];
}

id objc_msgSend_onMotionStateObserverNotification_data_(void *a1, const char *a2, ...)
{
  return [a1 onMotionStateObserverNotification:data];
}

id objc_msgSend_onNatalimetryNotification_data_(void *a1, const char *a2, ...)
{
  return [a1 onNatalimetryNotification:data];
}

id objc_msgSend_onNetworkConnectivityChanged_(void *a1, const char *a2, ...)
{
  return [a1 onNetworkConnectivityChanged:];
}

id objc_msgSend_onNoMovementControllerEnablement_(void *a1, const char *a2, ...)
{
  return [a1 onNoMovementControllerEnablement:];
}

id objc_msgSend_onNotSubmerged(void *a1, const char *a2, ...)
{
  return _[a1 onNotSubmerged];
}

id objc_msgSend_onNotification_withData_(void *a1, const char *a2, ...)
{
  return [a1 onNotification:withData:];
}

id objc_msgSend_onObjectDiscoveryUpdatedState_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "onObjectDiscoveryUpdatedState:");
}

id objc_msgSend_onObservationForDeviceWithIdentifier_type_date_(void *a1, const char *a2, ...)
{
  return [a1 onObservationForDeviceWithIdentifier:x0 type:x1 date:x2];
}

id objc_msgSend_onObservationForDeviceWithUUID_type_(void *a1, const char *a2, ...)
{
  return [a1 onObservationForDeviceWithUUID:type:];
}

id objc_msgSend_onOdometerNotification_data_(void *a1, const char *a2, ...)
{
  return [a1 onOdometerNotification:data];
}

id objc_msgSend_onOneShotQueryResult_withError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "onOneShotQueryResult:withError:");
}

id objc_msgSend_onOutdoorUpdate_(void *a1, const char *a2, ...)
{
  return [a1 onOutdoorUpdate:];
}

id objc_msgSend_onP6MWDActivity_(void *a1, const char *a2, ...)
{
  return [a1 onP6MWDActivity:];
}

id objc_msgSend_onResultAvailable_(void *a1, const char *a2, ...)
{
  return [a1 onResultAvailable:];
}

id objc_msgSend_onRetrocomputeHealthKitSampleFailed_(void *a1, const char *a2, ...)
{
  return [a1 onRetrocomputeHealthKitSampleFailed:];
}

id objc_msgSend_onRetrocomputeHealthKitSampleSavedWithStartTime_activity_(void *a1, const char *a2, ...)
{
  return [a1 onRetrocomputeHealthKitSampleSavedWithStartTime:activity:];
}

id objc_msgSend_onRetrocomputePreprocessingActivity_(void *a1, const char *a2, ...)
{
  return [a1 onRetrocomputePreprocessingActivity:];
}

id objc_msgSend_onRetrocomputeStatusUpdate_(void *a1, const char *a2, ...)
{
  return [a1 onRetrocomputeStatusUpdate:];
}

id objc_msgSend_onRetryHealthKitDeleteSamples_(void *a1, const char *a2, ...)
{
  return [a1 onRetryHealthKitDeleteSamples:];
}

id objc_msgSend_onRetryTriggerRetrocompute_(void *a1, const char *a2, ...)
{
  return [a1 onRetryTriggerRetrocompute:];
}

id objc_msgSend_onScenarioTrigger_(void *a1, const char *a2, ...)
{
  return [a1 onScenarioTrigger:];
}

id objc_msgSend_onScheduledTileDownloadWithReachabilityRequirement_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "onScheduledTileDownloadWithReachabilityRequirement:");
}

id objc_msgSend_onShallowSubmersion_withStateChanged_(void *a1, const char *a2, ...)
{
  return [a1 onShallowSubmersion:withStateChanged:];
}

id objc_msgSend_onSignificantEventDetected_(void *a1, const char *a2, ...)
{
  return [a1 onSignificantEventDetected:];
}

id objc_msgSend_onSignificantLocationVisit_(void *a1, const char *a2, ...)
{
  return [a1 onSignificantLocationVisit:];
}

id objc_msgSend_onStateUpdate_(void *a1, const char *a2, ...)
{
  return [a1 onStateUpdate:];
}

id objc_msgSend_onStatusBarIconChange_(void *a1, const char *a2, ...)
{
  return [a1 onStatusBarIconChange:];
}

id objc_msgSend_onStatusBarIconChangeInternal_(void *a1, const char *a2, ...)
{
  return [a1 onStatusBarIconChangeInternal:];
}

id objc_msgSend_onStepNotification_data_(void *a1, const char *a2, ...)
{
  return [a1 onStepNotification:data:];
}

id objc_msgSend_onSubmersionMeasurementUpdate_(void *a1, const char *a2, ...)
{
  return [a1 onSubmersionMeasurementUpdate:];
}

id objc_msgSend_onSubmersionStateUpdate_(void *a1, const char *a2, ...)
{
  return [a1 onSubmersionStateUpdate:];
}

id objc_msgSend_onSubmersionTemperatureUpdate_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "onSubmersionTemperatureUpdate:");
}

id objc_msgSend_onSyncActivity_(void *a1, const char *a2, ...)
{
  return [a1 onSyncActivity:];
}

id objc_msgSend_onTelephonyNotification_data_(void *a1, const char *a2, ...)
{
  return [a1 onTelephonyNotification:data];
}

id objc_msgSend_onTileWasDownloadedNotification_data_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "onTileWasDownloadedNotification:data:");
}

id objc_msgSend_onTransitStateUpdate_(void *a1, const char *a2, ...)
{
  return [a1 onTransitStateUpdate:];
}

id objc_msgSend_onUpdatedSettings_(void *a1, const char *a2, ...)
{
  return [a1 onUpdatedSettings:];
}

id objc_msgSend_onUsageMetricsEvent_(void *a1, const char *a2, ...)
{
  return [a1 onUsageMetricsEvent:];
}

id objc_msgSend_onVdrNotification_data_(void *a1, const char *a2, ...)
{
  return [a1 onVdrNotification:data:];
}

id objc_msgSend_onVehicleStateUpdate_(void *a1, const char *a2, ...)
{
  return [a1 onVehicleStateUpdate:];
}

id objc_msgSend_onVehicularState(void *a1, const char *a2, ...)
{
  return _[a1 onVehicularState];
}

id objc_msgSend_onVisit_(void *a1, const char *a2, ...)
{
  return [a1 onVisit:];
}

id objc_msgSend_onWalkingSteadinessClassification_(void *a1, const char *a2, ...)
{
  return [a1 onWalkingSteadinessClassification:];
}

id objc_msgSend_onWifiServiceNotification_data_(void *a1, const char *a2, ...)
{
  return [a1 onWifiServiceNotification:data];
}

id objc_msgSend_onWorkoutEffortScoreUpdate_(void *a1, const char *a2, ...)
{
  return [a1 onWorkoutEffortScoreUpdate:];
}

id objc_msgSend_onWorkoutSessionUpdate_withOverview_andPriors_(void *a1, const char *a2, ...)
{
  return [a1 onWorkoutSessionUpdate:withOverview:andPriors:];
}

id objc_msgSend_onboardingStatusWithError_(void *a1, const char *a2, ...)
{
  return [a1 onboardingStatusWithError:];
}

id objc_msgSend_onboardingUnavailableReasons(void *a1, const char *a2, ...)
{
  return _[a1 onboardingUnavailableReasons];
}

id objc_msgSend_onlyHeleMaintainableDevices(void *a1, const char *a2, ...)
{
  return _[a1 onlyHeleMaintainableDevices];
}

id objc_msgSend_opcode(void *a1, const char *a2, ...)
{
  return _[a1 opcode];
}

id objc_msgSend_opcodeDescription(void *a1, const char *a2, ...)
{
  return _[a1 opcodeDescription];
}

id objc_msgSend_open(void *a1, const char *a2, ...)
{
  return _[a1 open];
}

id objc_msgSend_openAdvertisementsFile(void *a1, const char *a2, ...)
{
  return _[a1 openAdvertisementsFile];
}

id objc_msgSend_openApplication_withOptions_completion_(void *a1, const char *a2, ...)
{
  return [a1 openApplication:withOptions:completion:];
}

id objc_msgSend_openSensitiveURL_withOptions_(void *a1, const char *a2, ...)
{
  return [a1 openSensitiveURL:withOptions:];
}

id objc_msgSend_openURL_configuration_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 openURL:x0 configuration:x1 completionHandler:x2];
}

id objc_msgSend_operatingMode(void *a1, const char *a2, ...)
{
  return _[a1 operatingMode];
}

id objc_msgSend_operatingSystemVersion(void *a1, const char *a2, ...)
{
  return _[a1 operatingSystemVersion];
}

id objc_msgSend_operatingSystemVersionString(void *a1, const char *a2, ...)
{
  return _[a1 operatingSystemVersionString];
}

id objc_msgSend_operationQueue(void *a1, const char *a2, ...)
{
  return _[a1 operationQueue];
}

id objc_msgSend_optInScreenOffScan(void *a1, const char *a2, ...)
{
  return _[a1 optInScreenOffScan];
}

id objc_msgSend_optedIn(void *a1, const char *a2, ...)
{
  return _[a1 optedIn];
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return _[a1 options];
}

id objc_msgSend_optionsDictCreate_mtu_perform_nud_ipv6_ll_enable_dad_(void *a1, const char *a2, ...)
{
  return [a1 optionsDictCreate:x0 mtu:x1 perform_nud:x2 ipv6_ll:x3 enable_dad:x4];
}

id objc_msgSend_optionsWithDictionary_(void *a1, const char *a2, ...)
{
  return [a1 optionsWithDictionary:];
}

id objc_msgSend_orPredicateWithSubpredicates_(void *a1, const char *a2, ...)
{
  return [a1 orPredicateWithSubpredicates:];
}

id objc_msgSend_orientedBoundingRegion(void *a1, const char *a2, ...)
{
  return _[a1 orientedBoundingRegion];
}

id objc_msgSend_origin(void *a1, const char *a2, ...)
{
  return _[a1 origin];
}

id objc_msgSend_originDeviceToGpsSource_locationType_(void *a1, const char *a2, ...)
{
  return [a1 originDeviceToGpsSource:locationType:];
}

id objc_msgSend_originTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 originTimestamp];
}

id objc_msgSend_originalRequest(void *a1, const char *a2, ...)
{
  return _[a1 originalRequest];
}

id objc_msgSend_originatingUIType(void *a1, const char *a2, ...)
{
  return _[a1 originatingUIType];
}

id objc_msgSend_outOfSession(void *a1, const char *a2, ...)
{
  return _[a1 outOfSession];
}

id objc_msgSend_outdoorLocationAvailable_(void *a1, const char *a2, ...)
{
  return [a1 outdoorLocationAvailable:];
}

id objc_msgSend_outdoorUpdate(void *a1, const char *a2, ...)
{
  return _[a1 outdoorUpdate];
}

id objc_msgSend_outgoingResponseIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 outgoingResponseIdentifier];
}

id objc_msgSend_outputDeviceIDs(void *a1, const char *a2, ...)
{
  return _[a1 outputDeviceIDs];
}

id objc_msgSend_overrideWithConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 overrideWithConfiguration:];
}

id objc_msgSend_overviewId(void *a1, const char *a2, ...)
{
  return _[a1 overviewId];
}

id objc_msgSend_overwritePrimaryObject_(void *a1, const char *a2, ...)
{
  return [a1 overwritePrimaryObject];
}

id objc_msgSend_owner(void *a1, const char *a2, ...)
{
  return _[a1 owner];
}

id objc_msgSend_ownerLongSoundCount(void *a1, const char *a2, ...)
{
  return _[a1 ownerLongSoundCount];
}

id objc_msgSend_ownerShortSoundCount(void *a1, const char *a2, ...)
{
  return _[a1 ownerShortSoundCount];
}

id objc_msgSend_ownership(void *a1, const char *a2, ...)
{
  return _[a1 ownership];
}

id objc_msgSend_pace(void *a1, const char *a2, ...)
{
  return _[a1 pace];
}

id objc_msgSend_packageMessage_(void *a1, const char *a2, ...)
{
  return [a1 packageMessage:];
}

id objc_msgSend_pairedDevice(void *a1, const char *a2, ...)
{
  return _[a1 pairedDevice];
}

id objc_msgSend_pairedDeviceID(void *a1, const char *a2, ...)
{
  return _[a1 pairedDeviceID];
}

id objc_msgSend_pairedDeviceLastNearbyTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 pairedDeviceLastNearbyTimestamp];
}

id objc_msgSend_pairedDeviceLastSeenTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 pairedDeviceLastSeenTimestamp];
}

id objc_msgSend_pairedDeviceUUID(void *a1, const char *a2, ...)
{
  return _[a1 pairedDeviceUUID];
}

id objc_msgSend_pairingID(void *a1, const char *a2, ...)
{
  return _[a1 pairingID];
}

id objc_msgSend_parseAndNotifyDelegateOnDiscoveredPeripheral_RSSI_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "parseAndNotifyDelegateOnDiscoveredPeripheral:RSSI:");
}

id objc_msgSend_partIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 partIdentifier];
}

id objc_msgSend_partnerID(void *a1, const char *a2, ...)
{
  return _[a1 partnerID];
}

id objc_msgSend_passEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 passEndpoint];
}

id objc_msgSend_passcodeLocked(void *a1, const char *a2, ...)
{
  return _[a1 passcodeLocked];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_pathComponents(void *a1, const char *a2, ...)
{
  return _[a1 pathComponents];
}

id objc_msgSend_pathExtension(void *a1, const char *a2, ...)
{
  return _[a1 pathExtension];
}

id objc_msgSend_pathForDate_withBasePath_(void *a1, const char *a2, ...)
{
  return [a1 pathForDate:withBasePath:];
}

id objc_msgSend_pathForPrimaryData(void *a1, const char *a2, ...)
{
  return _[a1 pathForPrimaryData];
}

id objc_msgSend_pathForResource_ofType_(void *a1, const char *a2, ...)
{
  return [a1 pathForResource:ofType:];
}

id objc_msgSend_pathForSecondaryData(void *a1, const char *a2, ...)
{
  return _[a1 pathForSecondaryData];
}

id objc_msgSend_pathInfoWithURL_(void *a1, const char *a2, ...)
{
  return [a1 pathInfoWithURL:];
}

id objc_msgSend_pathWithComponents_(void *a1, const char *a2, ...)
{
  return [a1 pathWithComponents:];
}

id objc_msgSend_pause(void *a1, const char *a2, ...)
{
  return _[a1 pause];
}

id objc_msgSend_pauseEvent_bounce(void *a1, const char *a2, ...)
{
  return [a1 pauseEvent_bounce];
}

id objc_msgSend_pauseResetAndFreeRavenSupervisorWithCompletion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "pauseResetAndFreeRavenSupervisorWithCompletion:");
}

id objc_msgSend_pauseWorkout_(void *a1, const char *a2, ...)
{
  return [a1 pauseWorkout:];
}

id objc_msgSend_payload(void *a1, const char *a2, ...)
{
  return _[a1 payload];
}

id objc_msgSend_payloadIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 payloadIdentifier];
}

id objc_msgSend_payloadOffset(void *a1, const char *a2, ...)
{
  return _[a1 payloadOffset];
}

id objc_msgSend_payloads(void *a1, const char *a2, ...)
{
  return _[a1 payloads];
}

id objc_msgSend_pc(void *a1, const char *a2, ...)
{
  return _[a1 pc];
}

id objc_msgSend_pdState(void *a1, const char *a2, ...)
{
  return _[a1 pdState];
}

id objc_msgSend_peakHR(void *a1, const char *a2, ...)
{
  return _[a1 peakHR];
}

id objc_msgSend_peakPowerAtEndOfCall(void *a1, const char *a2, ...)
{
  return _[a1 peakPowerAtEndOfCall];
}

id objc_msgSend_peakPowerAtStartOfCall(void *a1, const char *a2, ...)
{
  return _[a1 peakPowerAtStartOfCall];
}

id objc_msgSend_peakPowerCriticalDuration(void *a1, const char *a2, ...)
{
  return _[a1 peakPowerCriticalDuration];
}

id objc_msgSend_peakPowerHeavyDuration(void *a1, const char *a2, ...)
{
  return _[a1 peakPowerHeavyDuration];
}

id objc_msgSend_peakPowerLightDuration(void *a1, const char *a2, ...)
{
  return _[a1 peakPowerLightDuration];
}

id objc_msgSend_peakPowerModerateDuration(void *a1, const char *a2, ...)
{
  return _[a1 peakPowerModerateDuration];
}

id objc_msgSend_peakPowerNominalDuration(void *a1, const char *a2, ...)
{
  return _[a1 peakPowerNominalDuration];
}

id objc_msgSend_pedometerArmConstrainedState(void *a1, const char *a2, ...)
{
  return _[a1 pedometerArmConstrainedState];
}

id objc_msgSend_pedometerBuffer(void *a1, const char *a2, ...)
{
  return _[a1 pedometerBuffer];
}

id objc_msgSend_pendingConnectionAttempt(void *a1, const char *a2, ...)
{
  return _[a1 pendingConnectionAttempt];
}

id objc_msgSend_pendingDisconnect(void *a1, const char *a2, ...)
{
  return _[a1 pendingDisconnect];
}

id objc_msgSend_pendingRecordZoneChanges(void *a1, const char *a2, ...)
{
  return _[a1 pendingRecordZoneChanges];
}

id objc_msgSend_peopleDensityState(void *a1, const char *a2, ...)
{
  return _[a1 peopleDensityState];
}

id objc_msgSend_perFrameCalibrationMatrices(void *a1, const char *a2, ...)
{
  return _[a1 perFrameCalibrationMatrices];
}

id objc_msgSend_perFrameDistortion(void *a1, const char *a2, ...)
{
  return _[a1 perFrameDistortion];
}

id objc_msgSend_perFrameVioPoses(void *a1, const char *a2, ...)
{
  return _[a1 perFrameVioPoses];
}

id objc_msgSend_perFrameVioStatusCodes(void *a1, const char *a2, ...)
{
  return _[a1 perFrameVioStatusCodes];
}

id objc_msgSend_percentUnit(void *a1, const char *a2, ...)
{
  return _[a1 percentUnit];
}

id objc_msgSend_percentageRemoteGPSSource(void *a1, const char *a2, ...)
{
  return _[a1 percentageRemoteGPSSource];
}

id objc_msgSend_performBlockAndWait_(void *a1, const char *a2, ...)
{
  return [a1 performBlockAndWait:];
}

id objc_msgSend_performBlockWhenArmed_(void *a1, const char *a2, ...)
{
  return [a1 performBlockWhenArmed:];
}

id objc_msgSend_performDbCleanUpOnActivity_(void *a1, const char *a2, ...)
{
  return [a1 performDbCleanUpOnActivity:];
}

id objc_msgSend_performFullSystemServiceSetup(void *a1, const char *a2, ...)
{
  return _[a1 performFullSystemServiceSetup];
}

id objc_msgSend_performMigration(void *a1, const char *a2, ...)
{
  return _[a1 performMigration];
}

id objc_msgSend_performMigrationWithReply_(void *a1, const char *a2, ...)
{
  return [a1 performMigrationWithReply:];
}

id objc_msgSend_performNotOptedInBOMScan(void *a1, const char *a2, ...)
{
  return _[a1 performNotOptedInBOMScan];
}

id objc_msgSend_performSelector_(void *a1, const char *a2, ...)
{
  return [a1 performSelector:];
}

id objc_msgSend_performSelector_withObject_(void *a1, const char *a2, ...)
{
  return [a1 performSelector:];
}

id objc_msgSend_performSyncWithCompletion_activity_(void *a1, const char *a2, ...)
{
  return [a1 performSyncWithCompletion:nil activity:nil];
}

id objc_msgSend_performTask_forClient_onDevice_(void *a1, const char *a2, ...)
{
  return [a1 performTask:forClient:onDevice:];
}

id objc_msgSend_performTemporaryAggressiveScan(void *a1, const char *a2, ...)
{
  return _[a1 performTemporaryAggressiveScan];
}

id objc_msgSend_performTemporaryAggressiveScan_(void *a1, const char *a2, ...)
{
  return [a1 performTemporaryAggressiveScan:];
}

id objc_msgSend_performTemporaryAggressiveScanForFindMyAccessoryManager_(void *a1, const char *a2, ...)
{
  return [a1 performTemporaryAggressiveScanForFindMyAccessoryManager:];
}

id objc_msgSend_performTemporaryHawkeyeLowEnergyScan(void *a1, const char *a2, ...)
{
  return _[a1 performTemporaryHawkeyeLowEnergyScan];
}

id objc_msgSend_performTemporaryHawkeyeLowEnergyScan_(void *a1, const char *a2, ...)
{
  return [a1 performTemporaryHawkeyeLowEnergyScan:];
}

id objc_msgSend_performTemporaryLongAggressiveScan(void *a1, const char *a2, ...)
{
  return _[a1 performTemporaryLongAggressiveScan];
}

id objc_msgSend_performTemporaryLongAggressiveScan_(void *a1, const char *a2, ...)
{
  return [a1 performTemporaryLongAggressiveScan:];
}

id objc_msgSend_periodIndex_(void *a1, const char *a2, ...)
{
  return [a1 periodIndex:];
}

id objc_msgSend_peripheral(void *a1, const char *a2, ...)
{
  return _[a1 peripheral];
}

id objc_msgSend_peripheralDataWithMeasuredPower_(void *a1, const char *a2, ...)
{
  return [a1 peripheralDataWithMeasuredPower:];
}

id objc_msgSend_persist(void *a1, const char *a2, ...)
{
  return _[a1 persist];
}

id objc_msgSend_persistAnalyticsCache(void *a1, const char *a2, ...)
{
  return _[a1 persistAnalyticsCache];
}

id objc_msgSend_persistLostEstimateToStagingTables_(void *a1, const char *a2, ...)
{
  return [a1 persistLostEstimateToStagingTables:];
}

id objc_msgSend_persistRetrocomputeResultsToStagingTables_(void *a1, const char *a2, ...)
{
  return [a1 persistRetrocomputeResultsToStagingTables];
}

id objc_msgSend_persistenceDirectory(void *a1, const char *a2, ...)
{
  return _[a1 persistenceDirectory];
}

id objc_msgSend_persistenceUnavailable(void *a1, const char *a2, ...)
{
  return _[a1 persistenceUnavailable];
}

id objc_msgSend_persistentStoreCoordinator(void *a1, const char *a2, ...)
{
  return _[a1 persistentStoreCoordinator];
}

id objc_msgSend_persistentStoreDescription(void *a1, const char *a2, ...)
{
  return _[a1 persistentStoreDescription];
}

id objc_msgSend_persistentStores(void *a1, const char *a2, ...)
{
  return _[a1 persistentStores];
}

id objc_msgSend_personalizationBVERCharacteristic(void *a1, const char *a2, ...)
{
  return _[a1 personalizationBVERCharacteristic];
}

id objc_msgSend_personalizationBoardIDCharacteristic(void *a1, const char *a2, ...)
{
  return _[a1 personalizationBoardIDCharacteristic];
}

id objc_msgSend_personalizationBootNonceHashCharacteristic(void *a1, const char *a2, ...)
{
  return _[a1 personalizationBootNonceHashCharacteristic];
}

id objc_msgSend_personalizationChipIDCharacteristic(void *a1, const char *a2, ...)
{
  return _[a1 personalizationChipIDCharacteristic];
}

id objc_msgSend_personalizationECIDCharacteristic(void *a1, const char *a2, ...)
{
  return _[a1 personalizationECIDCharacteristic];
}

id objc_msgSend_personalizationInformation(void *a1, const char *a2, ...)
{
  return _[a1 personalizationInformation];
}

id objc_msgSend_personalizationProdModeCharacteristic(void *a1, const char *a2, ...)
{
  return _[a1 personalizationProdModeCharacteristic];
}

id objc_msgSend_personalizationSecDomainCharacteristic(void *a1, const char *a2, ...)
{
  return _[a1 personalizationSecDomainCharacteristic];
}

id objc_msgSend_personalizationSecModeCharacteristic(void *a1, const char *a2, ...)
{
  return _[a1 personalizationSecModeCharacteristic];
}

id objc_msgSend_phoneNumber(void *a1, const char *a2, ...)
{
  return _[a1 phoneNumber];
}

id objc_msgSend_phoneNumberLabel(void *a1, const char *a2, ...)
{
  return _[a1 phoneNumberLabel];
}

id objc_msgSend_pictureData(void *a1, const char *a2, ...)
{
  return _[a1 pictureData];
}

id objc_msgSend_pid(void *a1, const char *a2, ...)
{
  return _[a1 pid];
}

id objc_msgSend_pipelinedDidStartLocalizing(void *a1, const char *a2, ...)
{
  return _[a1 pipelinedDidStartLocalizing];
}

id objc_msgSend_pipelinedEnabled(void *a1, const char *a2, ...)
{
  return _[a1 pipelinedEnabled];
}

id objc_msgSend_pipelinedSeeded(void *a1, const char *a2, ...)
{
  return _[a1 pipelinedSeeded];
}

id objc_msgSend_pipelinedVenues(void *a1, const char *a2, ...)
{
  return _[a1 pipelinedVenues];
}

id objc_msgSend_placeInference(void *a1, const char *a2, ...)
{
  return _[a1 placeInference];
}

id objc_msgSend_placeType(void *a1, const char *a2, ...)
{
  return _[a1 placeType];
}

id objc_msgSend_placeholderHawkeyeTask(void *a1, const char *a2, ...)
{
  return _[a1 placeholderHawkeyeTask];
}

id objc_msgSend_placemark(void *a1, const char *a2, ...)
{
  return _[a1 placemark];
}

id objc_msgSend_platterTargetBundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 platterTargetBundleIdentifier];
}

id objc_msgSend_pnoffset(void *a1, const char *a2, ...)
{
  return _[a1 pnoffset];
}

id objc_msgSend_poiEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 poiEndpoint];
}

id objc_msgSend_pointCount(void *a1, const char *a2, ...)
{
  return _[a1 pointCount];
}

id objc_msgSend_points2D(void *a1, const char *a2, ...)
{
  return _[a1 points2D];
}

id objc_msgSend_points3D(void *a1, const char *a2, ...)
{
  return _[a1 points3D];
}

id objc_msgSend_poolLength(void *a1, const char *a2, ...)
{
  return _[a1 poolLength];
}

id objc_msgSend_popConnectionMaterialForPeripheral_(void *a1, const char *a2, ...)
{
  return [a1 popConnectionMaterialForPeripheral:];
}

id objc_msgSend_port(void *a1, const char *a2, ...)
{
  return _[a1 port];
}

id objc_msgSend_possiblePeripherals(void *a1, const char *a2, ...)
{
  return _[a1 possiblePeripherals];
}

id objc_msgSend_possibleStops(void *a1, const char *a2, ...)
{
  return _[a1 possibleStops];
}

id objc_msgSend_postFollowUpItem_completion_(void *a1, const char *a2, ...)
{
  return [a1 postFollowUpItem:completion:];
}

id objc_msgSend_postalCode(void *a1, const char *a2, ...)
{
  return _[a1 postalCode];
}

id objc_msgSend_power(void *a1, const char *a2, ...)
{
  return _[a1 power];
}

id objc_msgSend_poweredOn(void *a1, const char *a2, ...)
{
  return _[a1 poweredOn];
}

id objc_msgSend_ppid(void *a1, const char *a2, ...)
{
  return _[a1 ppid];
}

id objc_msgSend_preDaytonaMapping(void *a1, const char *a2, ...)
{
  return _[a1 preDaytonaMapping];
}

id objc_msgSend_precipitationType(void *a1, const char *a2, ...)
{
  return _[a1 precipitationType];
}

id objc_msgSend_precision(void *a1, const char *a2, ...)
{
  return _[a1 precision];
}

id objc_msgSend_predicateForActivitySummariesBetweenStartDateComponents_endDateComponents_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "predicateForActivitySummariesBetweenStartDateComponents:endDateComponents:");
}

id objc_msgSend_predicateForObjectsFromSource_(void *a1, const char *a2, ...)
{
  return [a1 predicateForObjectsFromSource:];
}

id objc_msgSend_predicateForObjectsFromSources_(void *a1, const char *a2, ...)
{
  return [a1 predicateForObjectsFromSources:];
}

id objc_msgSend_predicateForObjectsWithDeviceProperty_allowedValues_(void *a1, const char *a2, ...)
{
  return [a1 predicateForObjectsWithDeviceProperty:allowedValues:];
}

id objc_msgSend_predicateForObjectsWithMetadataKey_(void *a1, const char *a2, ...)
{
  return [a1 predicateForObjectsWithMetadataKey:];
}

id objc_msgSend_predicateForObjectsWithMetadataKey_allowedValues_(void *a1, const char *a2, ...)
{
  return [a1 predicateForObjectsWithMetadataKey:allowedValues:];
}

id objc_msgSend_predicateForSamplesWithStartDate_endDate_options_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "predicateForSamplesWithStartDate:endDate:options:");
}

id objc_msgSend_predicateForWorkoutActivitiesWithWorkoutActivityType_(void *a1, const char *a2, ...)
{
  return [a1 predicateForWorkoutActivitiesWithWorkoutActivityType:];
}

id objc_msgSend_predicateForWorkoutsWithActivityPredicate_(void *a1, const char *a2, ...)
{
  return [a1 predicateForWorkoutsWithActivityPredicate:];
}

id objc_msgSend_predicateMatchingBundleIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 predicateMatchingBundleIdentifier:];
}

id objc_msgSend_predicateWithBlock_(void *a1, const char *a2, ...)
{
  return [a1 predicateWithBlock:];
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return [a1 predicateWithFormat:];
}

id objc_msgSend_preemptFirmwareUpdate(void *a1, const char *a2, ...)
{
  return _[a1 preemptFirmwareUpdate];
}

id objc_msgSend_preferredLanguages(void *a1, const char *a2, ...)
{
  return _[a1 preferredLanguages];
}

id objc_msgSend_preferredName(void *a1, const char *a2, ...)
{
  return _[a1 preferredName];
}

id objc_msgSend_prefetch_(void *a1, const char *a2, ...)
{
  return [a1 prefetch:];
}

id objc_msgSend_pregnancyDuration(void *a1, const char *a2, ...)
{
  return _[a1 pregnancyDuration];
}

id objc_msgSend_pregnancyEndDate(void *a1, const char *a2, ...)
{
  return _[a1 pregnancyEndDate];
}

id objc_msgSend_pregnancyStartDate(void *a1, const char *a2, ...)
{
  return _[a1 pregnancyStartDate];
}

id objc_msgSend_preloadBuildingTilesNear_radius_tileSetStyle_preloadToDiskOnly_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 preloadBuildingTilesNear:x0 radius:x1 tileSetStyle:x2 preloadToDiskOnly:x3 completionHandler:x4];
}

id objc_msgSend_preloadRoadTilesNear_radius_preloadToDiskOnly_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 preloadRoadTilesNear:x0 radius:x1 preloadToDiskOnly:x2 completionHandler:x3];
}

id objc_msgSend_preloadSectionTilesAtLatitude_longitude_config_type_building_section_numberOfsectionsToDownload_loiSectionData_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "preloadSectionTilesAtLatitude:longitude:config:type:building:section:numberOfsectionsToDownload:loiSectionData:");
}

id objc_msgSend_preloadTilesAPICallForSection_sectionDownloadRadius_maxSectionIndex_building_matcherLOIType_config_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 preloadTilesAPICallForSection:sectionDownloadRadius:maxSectionIndex:building:matcherLOIType:config:completionHandler:];
}

id objc_msgSend_preloadTilesAPICallForSectionWithSECheck_sectionDownloadRadius_maxSectionIndex_building_matcherLOIType_config_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "preloadTilesAPICallForSectionWithSECheck:sectionDownloadRadius:maxSectionIndex:building:matcherLOIType:config:completionHandler:");
}

id objc_msgSend_prepareBTLEScanner(void *a1, const char *a2, ...)
{
  return _[a1 prepareBTLEScanner];
}

id objc_msgSend_prepareToDoFullSync(void *a1, const char *a2, ...)
{
  return _[a1 prepareToDoFullSync];
}

id objc_msgSend_prepareToDoMigrationSync(void *a1, const char *a2, ...)
{
  return _[a1 prepareToDoMigrationSync];
}

id objc_msgSend_prepareToDoReunionSync(void *a1, const char *a2, ...)
{
  return _[a1 prepareToDoReunionSync];
}

id objc_msgSend_preprocessTask_(void *a1, const char *a2, ...)
{
  return [a1 preprocessTask:];
}

id objc_msgSend_pressure(void *a1, const char *a2, ...)
{
  return _[a1 pressure];
}

id objc_msgSend_pressureEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 pressureEndpoint];
}

id objc_msgSend_pressureMeasurement(void *a1, const char *a2, ...)
{
  return _[a1 pressureMeasurement];
}

id objc_msgSend_prettyBeaconType(void *a1, const char *a2, ...)
{
  return _[a1 prettyBeaconType];
}

id objc_msgSend_prevLoc(void *a1, const char *a2, ...)
{
  return _[a1 prevLoc];
}

id objc_msgSend_previousCountries(void *a1, const char *a2, ...)
{
  return _[a1 previousCountries];
}

id objc_msgSend_previousCountryCodeTimeStamp(void *a1, const char *a2, ...)
{
  return _[a1 previousCountryCodeTimeStamp];
}

id objc_msgSend_previousLocation(void *a1, const char *a2, ...)
{
  return _[a1 previousLocation];
}

id objc_msgSend_previousLocationAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 previousLocationAccuracy];
}

id objc_msgSend_previousLocationAge(void *a1, const char *a2, ...)
{
  return _[a1 previousLocationAge];
}

id objc_msgSend_previousLocationProvider(void *a1, const char *a2, ...)
{
  return _[a1 previousLocationProvider];
}

id objc_msgSend_primaryDataSize(void *a1, const char *a2, ...)
{
  return _[a1 primaryDataSize];
}

id objc_msgSend_primaryIndex(void *a1, const char *a2, ...)
{
  return _[a1 primaryIndex];
}

id objc_msgSend_primaryKey(void *a1, const char *a2, ...)
{
  return _[a1 primaryKey];
}

id objc_msgSend_primaryKeyPathForAuthLimitedKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 primaryKeyPathForAuthLimitedKeyPath:];
}

id objc_msgSend_primaryLanguageCode(void *a1, const char *a2, ...)
{
  return _[a1 primaryLanguageCode];
}

id objc_msgSend_primaryLanguageCodeModifiedDate(void *a1, const char *a2, ...)
{
  return _[a1 primaryLanguageCodeModifiedDate];
}

id objc_msgSend_principalClass(void *a1, const char *a2, ...)
{
  return _[a1 principalClass];
}

id objc_msgSend_printCurrentStats(void *a1, const char *a2, ...)
{
  return _[a1 printCurrentStats];
}

id objc_msgSend_printMeanSeaLevelPressureArray_withPrePhrase_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "printMeanSeaLevelPressureArray:withPrePhrase:");
}

id objc_msgSend_printMeanSeaLevelPressureElement_withPrePhrase_(void *a1, const char *a2, ...)
{
  return [a1 printMeanSeaLevelPressureElement:withPrePhrase:];
}

id objc_msgSend_prior(void *a1, const char *a2, ...)
{
  return _[a1 prior];
}

id objc_msgSend_priority(void *a1, const char *a2, ...)
{
  return _[a1 priority];
}

id objc_msgSend_privateCloudDatabase(void *a1, const char *a2, ...)
{
  return _[a1 privateCloudDatabase];
}

id objc_msgSend_privateOwnerSession(void *a1, const char *a2, ...)
{
  return _[a1 privateOwnerSession];
}

id objc_msgSend_proactiveMaintenanceCount(void *a1, const char *a2, ...)
{
  return _[a1 proactiveMaintenanceCount];
}

id objc_msgSend_probability(void *a1, const char *a2, ...)
{
  return _[a1 probability];
}

id objc_msgSend_probabilityVector(void *a1, const char *a2, ...)
{
  return _[a1 probabilityVector];
}

id objc_msgSend_probeClients(void *a1, const char *a2, ...)
{
  return _[a1 probeClients];
}

id objc_msgSend_processAcknowledgedTask(void *a1, const char *a2, ...)
{
  return _[a1 processAcknowledgedTask];
}

id objc_msgSend_processActiveScan_(void *a1, const char *a2, ...)
{
  return [a1 processActiveScan:];
}

id objc_msgSend_processAverageRSRPForCA_(void *a1, const char *a2, ...)
{
  return [a1 processAverageRSRPForCA:];
}

id objc_msgSend_processCells_inRange_timeReceived_requestType_tag_(void *a1, const char *a2, ...)
{
  return [a1 processCells:inRange:timeReceived:requestType:tag:];
}

id objc_msgSend_processCompletedTask(void *a1, const char *a2, ...)
{
  return _[a1 processCompletedTask];
}

id objc_msgSend_processDataWithMaxDuration_endTime_(void *a1, const char *a2, ...)
{
  return [a1 processDataWithMaxDuration:x0 endTime:x1];
}

id objc_msgSend_processEventTime_(void *a1, const char *a2, ...)
{
  return [a1 processEventTime:];
}

id objc_msgSend_processEventTimes_(void *a1, const char *a2, ...)
{
  return [a1 processEventTimes:];
}

id objc_msgSend_processEventsForTime_(void *a1, const char *a2, ...)
{
  return [a1 processEventsForTime:];
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 processIdentifier];
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return _[a1 processInfo];
}

id objc_msgSend_processMediaEndOfExtendedSessionNotification(void *a1, const char *a2, ...)
{
  return _[a1 processMediaEndOfExtendedSessionNotification];
}

id objc_msgSend_processMediaForMitigations_(void *a1, const char *a2, ...)
{
  return [a1 processMediaForMitigations:];
}

id objc_msgSend_processMediaForRequestID_callUUID_uploadURL_sharedInfoPrefix_combinedSecret_token_mediaList_mitigation_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "processMediaForRequestID:callUUID:uploadURL:sharedInfoPrefix:combinedSecret:token:mediaList:mitigation:completion:");
}

id objc_msgSend_processMediaServicesEndOfExtendedSessionNotification(void *a1, const char *a2, ...)
{
  return _[a1 processMediaServicesEndOfExtendedSessionNotification];
}

id objc_msgSend_processMediaServicesForRequestID_callUUID_uploadURL_sharedInfoPrefix_combinedSecret_token_mediaList_mitigation_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "processMediaServicesForRequestID:callUUID:uploadURL:sharedInfoPrefix:combinedSecret:token:mediaList:mitigation:completion:");
}

id objc_msgSend_processMediaServicesMitigations_(void *a1, const char *a2, ...)
{
  return [a1 processMediaServicesMitigations:];
}

id objc_msgSend_processName(void *a1, const char *a2, ...)
{
  return _[a1 processName];
}

id objc_msgSend_processNextIntervalWithRemainingDurationToProcess_endTime_updateCanContinue_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "processNextIntervalWithRemainingDurationToProcess:endTime:updateCanContinue:");
}

id objc_msgSend_processNextTask_(void *a1, const char *a2, ...)
{
  return [a1 processNextTask:];
}

id objc_msgSend_processPowerLevelForCA_(void *a1, const char *a2, ...)
{
  return [a1 processPowerLevelForCA:];
}

id objc_msgSend_processReceivedWiFiDeviceLinkScore_(void *a1, const char *a2, ...)
{
  return [a1 processReceivedWiFiDeviceLinkScore:];
}

id objc_msgSend_processScanCache_(void *a1, const char *a2, ...)
{
  return [a1 processScanCache:];
}

id objc_msgSend_processScdmaCells_inRange_timeReceived_requestType_tag_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "processScdmaCells:inRange:timeReceived:requestType:tag:");
}

id objc_msgSend_processSingleFenceAnalyticsData_(void *a1, const char *a2, ...)
{
  return [a1 processSingleFenceAnalyticsData:];
}

id objc_msgSend_processThermalLevelForCA_(void *a1, const char *a2, ...)
{
  return [a1 processThermalLevelForCA:];
}

id objc_msgSend_processTripSegmentData_withOptions_outputHandler_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "processTripSegmentData:withOptions:outputHandler:completionHandler:");
}

id objc_msgSend_processUARPMessage_(void *a1, const char *a2, ...)
{
  return [a1 processUARPMessage:];
}

id objc_msgSend_processWireless_inRange_timeReceived_requestType_tag_surroundingWifiBands_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "processWireless:inRange:timeReceived:requestType:tag:surroundingWifiBands:");
}

id objc_msgSend_processingCellTowers(void *a1, const char *a2, ...)
{
  return _[a1 processingCellTowers];
}

id objc_msgSend_processingWirelessAPs(void *a1, const char *a2, ...)
{
  return _[a1 processingWirelessAPs];
}

id objc_msgSend_productData(void *a1, const char *a2, ...)
{
  return _[a1 productData];
}

id objc_msgSend_productGroup(void *a1, const char *a2, ...)
{
  return _[a1 productGroup];
}

id objc_msgSend_productId(void *a1, const char *a2, ...)
{
  return _[a1 productId];
}

id objc_msgSend_productNumber(void *a1, const char *a2, ...)
{
  return _[a1 productNumber];
}

id objc_msgSend_productType(void *a1, const char *a2, ...)
{
  return _[a1 productType];
}

id objc_msgSend_programEntryScanNetworks_andExitScanNetworks_(void *a1, const char *a2, ...)
{
  return [a1 programEntryScanNetworks:andExitScanNetworks:];
}

id objc_msgSend_promoteStagingData_(void *a1, const char *a2, ...)
{
  return [a1 promoteStagingData:];
}

id objc_msgSend_promptPossibleFalseExitDetectionUI(void *a1, const char *a2, ...)
{
  return _[a1 promptPossibleFalseExitDetectionUI];
}

id objc_msgSend_properties(void *a1, const char *a2, ...)
{
  return _[a1 properties];
}

id objc_msgSend_propertyForKey_(void *a1, const char *a2, ...)
{
  return [a1 propertyForKey:];
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return [a1 propertyListWithData:x0 options:x1 format:x2 error:x3];
}

id objc_msgSend_protectionSpace(void *a1, const char *a2, ...)
{
  return _[a1 protectionSpace];
}

id objc_msgSend_protocolID(void *a1, const char *a2, ...)
{
  return _[a1 protocolID];
}

id objc_msgSend_protocolVersion(void *a1, const char *a2, ...)
{
  return _[a1 protocolVersion];
}

id objc_msgSend_provenance(void *a1, const char *a2, ...)
{
  return _[a1 provenance];
}

id objc_msgSend_provideSample_(void *a1, const char *a2, ...)
{
  return [a1 provideSample:];
}

id objc_msgSend_provideSampleBytes_length_(void *a1, const char *a2, ...)
{
  return [a1 provideSampleBytes:length:];
}

id objc_msgSend_provider(void *a1, const char *a2, ...)
{
  return _[a1 provider];
}

id objc_msgSend_providerDealloc(void *a1, const char *a2, ...)
{
  return _[a1 providerDealloc];
}

id objc_msgSend_providerInit(void *a1, const char *a2, ...)
{
  return _[a1 providerInit];
}

id objc_msgSend_providerOnVehicleStateNotification_(void *a1, const char *a2, ...)
{
  return [a1 providerOnVehicleStateNotification:];
}

id objc_msgSend_providerQueryMotionDataType_(void *a1, const char *a2, ...)
{
  return [a1 providerQueryMotionDataType:];
}

id objc_msgSend_providerSubscribeToMotionDataType_(void *a1, const char *a2, ...)
{
  return [a1 providerSubscribeToMotionDataType:];
}

id objc_msgSend_providerUnsubscribeToMotionDataType_(void *a1, const char *a2, ...)
{
  return [a1 providerUnsubscribeToMotionDataType:];
}

id objc_msgSend_provisionalServiceMask(void *a1, const char *a2, ...)
{
  return _[a1 provisionalServiceMask];
}

id objc_msgSend_proximityPairingSubType(void *a1, const char *a2, ...)
{
  return _[a1 proximityPairingSubType];
}

id objc_msgSend_proximityUUID(void *a1, const char *a2, ...)
{
  return _[a1 proximityUUID];
}

id objc_msgSend_proxy(void *a1, const char *a2, ...)
{
  return _[a1 proxy];
}

id objc_msgSend_proxyForRecipientObject_inSilo_recipientName_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "proxyForRecipientObject:inSilo:recipientName:");
}

id objc_msgSend_proxyForService_(void *a1, const char *a2, ...)
{
  return [a1 proxyForService:];
}

id objc_msgSend_proxyForService_forClient_(void *a1, const char *a2, ...)
{
  return [a1 proxyForService:forClient:];
}

id objc_msgSend_pruneActivityBasedBeaconPayloadCache(void *a1, const char *a2, ...)
{
  return _[a1 pruneActivityBasedBeaconPayloadCache];
}

id objc_msgSend_pruneAndGetSecondaryDataOlderThan_(void *a1, const char *a2, ...)
{
  return [a1 pruneAndGetSecondaryDataOlderThan:];
}

id objc_msgSend_pruneCache(void *a1, const char *a2, ...)
{
  return _[a1 pruneCache];
}

id objc_msgSend_pruneCacheWithSize_(void *a1, const char *a2, ...)
{
  return [a1 pruneCacheWithSize:];
}

id objc_msgSend_pruneLocationCacheAfterAdv(void *a1, const char *a2, ...)
{
  return _[a1 pruneLocationCacheAfterAdv];
}

id objc_msgSend_pruneLocationCacheBeforeAdv(void *a1, const char *a2, ...)
{
  return _[a1 pruneLocationCacheBeforeAdv];
}

id objc_msgSend_pruneMotionCacheAfterAdv(void *a1, const char *a2, ...)
{
  return _[a1 pruneMotionCacheAfterAdv];
}

id objc_msgSend_pruneMotionCacheBeforeAdv(void *a1, const char *a2, ...)
{
  return _[a1 pruneMotionCacheBeforeAdv];
}

id objc_msgSend_pruneOldStats(void *a1, const char *a2, ...)
{
  return _[a1 pruneOldStats];
}

id objc_msgSend_pruneScanCacheToQuarterHour(void *a1, const char *a2, ...)
{
  return _[a1 pruneScanCacheToQuarterHour];
}

id objc_msgSend_pruneSecondaryDataOlderThan_(void *a1, const char *a2, ...)
{
  return [a1 pruneSecondaryDataOlderThan:];
}

id objc_msgSend_psapID(void *a1, const char *a2, ...)
{
  return _[a1 psapID];
}

id objc_msgSend_psc(void *a1, const char *a2, ...)
{
  return _[a1 psc];
}

id objc_msgSend_publishDataFiles_metadata_startDate_endDate_settings_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "publishDataFiles:metadata:startDate:endDate:settings:");
}

id objc_msgSend_publishRecording(void *a1, const char *a2, ...)
{
  return _[a1 publishRecording];
}

id objc_msgSend_publishSeparationEventForBeacons_eventType_region_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "publishSeparationEventForBeacons:eventType:region:completion:")];
}

id objc_msgSend_publisher(void *a1, const char *a2, ...)
{
  return _[a1 publisher];
}

id objc_msgSend_pullDataFromPersistentStore(void *a1, const char *a2, ...)
{
  return _[a1 pullDataFromPersistentStore];
}

id objc_msgSend_purge_(void *a1, const char *a2, ...)
{
  return [a1 purge:];
}

id objc_msgSend_purgeAllMicroLocationData(void *a1, const char *a2, ...)
{
  return _[a1 purgeAllMicroLocationData];
}

id objc_msgSend_purgeMicroLocationSemiSupervisedDataForClient_(void *a1, const char *a2, ...)
{
  return [a1 purgeMicroLocationSemiSupervisedDataForClient:];
}

id objc_msgSend_purgeOlderRecords(void *a1, const char *a2, ...)
{
  return _[a1 purgeOlderRecords];
}

id objc_msgSend_pushElevationsFromTime_toTime_(void *a1, const char *a2, ...)
{
  return [a1 pushElevationsFromTime:x0 toTime:x1];
}

id objc_msgSend_quantity(void *a1, const char *a2, ...)
{
  return _[a1 quantity];
}

id objc_msgSend_quantitySampleWithType_quantity_startDate_endDate_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "quantitySampleWithType:quantity:startDate:endDate:")];
}

id objc_msgSend_quantitySampleWithType_quantity_startDate_endDate_device_metadata_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "quantitySampleWithType:quantity:startDate:endDate:device:metadata:");
}

id objc_msgSend_quantitySampleWithType_quantity_startDate_endDate_metadata_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "quantitySampleWithType:quantity:startDate:endDate:metadata:")];
}

id objc_msgSend_quantityType(void *a1, const char *a2, ...)
{
  return _[a1 quantityType];
}

id objc_msgSend_quantityTypeForIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 quantityTypeForIdentifier:];
}

id objc_msgSend_quantityWithUnit_doubleValue_(void *a1, const char *a2, ...)
{
  return [a1 quantityWithUnit:x0 doubleValue:x1];
}

id objc_msgSend_quarterHourDisconnect(void *a1, const char *a2, ...)
{
  return _[a1 quarterHourDisconnect];
}

id objc_msgSend_quaternion(void *a1, const char *a2, ...)
{
  return _[a1 quaternion];
}

id objc_msgSend_quaternionW(void *a1, const char *a2, ...)
{
  return _[a1 quaternionW];
}

id objc_msgSend_quaternionX(void *a1, const char *a2, ...)
{
  return _[a1 quaternionX];
}

id objc_msgSend_quaternionY(void *a1, const char *a2, ...)
{
  return _[a1 quaternionY];
}

id objc_msgSend_quaternionZ(void *a1, const char *a2, ...)
{
  return _[a1 quaternionZ];
}

id objc_msgSend_queryActivityStartingFromDate_toDate_toQueue_withHandler_(void *a1, const char *a2, ...)
{
  return [a1 queryActivityStartingFromDate:x0 toDate:x1 toQueue:x2 withHandler:x3];
}

id objc_msgSend_queryActivityWithAttribute_fromDate_toDate_toQueue_withHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "queryActivityWithAttribute:fromDate:toDate:toQueue:withHandler:");
}

id objc_msgSend_queryCalories_endDate_hkIdentifier_sources_caloriesHandler_(void *a1, const char *a2, ...)
{
  return [a1 queryCalories:x0 endDate:x1 hkIdentifier:x2 sources:x3 caloriesHandler:x4];
}

id objc_msgSend_queryCaloriesFromWorkouts_endDate_sources_workoutsHandler_(void *a1, const char *a2, ...)
{
  return [a1 queryCaloriesFromWorkouts:x0 endDate:x1 sources:x2 workoutsHandler:x3];
}

id objc_msgSend_queryElevationsFromDate_toDate_withBatchSize_fromRecordId_withReply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "queryElevationsFromDate:toDate:withBatchSize:fromRecordId:withReply:");
}

id objc_msgSend_queryExerciseMinutes_endDate_sources_exerciseMinutesHandler_(void *a1, const char *a2, ...)
{
  return [a1 queryExerciseMinutes:x0 endDate:x1 sources:x2 exerciseMinutesHandler:x3];
}

id objc_msgSend_queryFlightsClimbed_endDate_sources_flightsClimbedHandler_(void *a1, const char *a2, ...)
{
  return [a1 queryFlightsClimbed:x0 endDate:x1 sources:x2 flightsClimbedHandler:x3];
}

id objc_msgSend_queryForProximity_monitorInterval_withTimeout_(void *a1, const char *a2, ...)
{
  return [a1 queryForProximity:x0 monitorInterval:x1 withTimeout:x2];
}

id objc_msgSend_queryForTransitionEvents(void *a1, const char *a2, ...)
{
  return _[a1 queryForTransitionEvents];
}

id objc_msgSend_queryHRSource_workoutEndTime_(void *a1, const char *a2, ...)
{
  return [a1 queryHRSource:workoutEndTime:];
}

id objc_msgSend_queryHealthKitWithGroup_(void *a1, const char *a2, ...)
{
  return [a1 queryHealthKitWithGroup:];
}

id objc_msgSend_queryMetMinutesInTimeRange_withReply_(void *a1, const char *a2, ...)
{
  return [a1 queryMetMinutesInTimeRange:x0 withReply:x1];
}

id objc_msgSend_queryMetaData_(void *a1, const char *a2, ...)
{
  return [a1 queryMetaData:];
}

id objc_msgSend_queryMiloConnectionStatus_(void *a1, const char *a2, ...)
{
  return [a1 queryMiloConnectionStatus:];
}

id objc_msgSend_queryMotionStatesWithStartTime_endTime_isFromInternalClient_withReply_(void *a1, const char *a2, ...)
{
  return [a1 queryMotionStatesWithStartTime:x0 endTime:x1 isFromInternalClient:x2 withReply:x3];
}

id objc_msgSend_queryParams(void *a1, const char *a2, ...)
{
  return _[a1 queryParams];
}

id objc_msgSend_queryPedDistance_endDate_sources_distanceHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "queryPedDistance:endDate:sources:distanceHandler:");
}

id objc_msgSend_queryRemoteStepCadenceToStrideLengthBinsWithHandler_(void *a1, const char *a2, ...)
{
  return [a1 queryRemoteStepCadenceToStrideLengthBinsWithHandler:];
}

id objc_msgSend_queryServicesForClient_withConnectionToken_forUser_(void *a1, const char *a2, ...)
{
  return [a1 queryServicesForClient:withConnectionToken:forUser:];
}

id objc_msgSend_querySessionSWOLF_withReply_(void *a1, const char *a2, ...)
{
  return [a1 querySessionSWOLF:withReply:];
}

id objc_msgSend_querySignificantElevationDeltaFromDate_toDate_withReply_(void *a1, const char *a2, ...)
{
  return [a1 querySignificantElevationDeltaFromDate:x0 toDate:x1 withReply:x2];
}

id objc_msgSend_querySinceRecord_withReply_(void *a1, const char *a2, ...)
{
  return [a1 querySinceRecord:x0 withReply:x1];
}

id objc_msgSend_querySources(void *a1, const char *a2, ...)
{
  return _[a1 querySources];
}

id objc_msgSend_queryStateOntoQueue_andMonitorFor_withTimeout_andHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "queryStateOntoQueue:andMonitorFor:withTimeout:andHandler:");
}

id objc_msgSend_queryStepCadenceToStrideLengthBinsWithHandler_(void *a1, const char *a2, ...)
{
  return [a1 queryStepCadenceToStrideLengthBinsWithHandler:];
}

id objc_msgSend_queryStepCount_endDate_sources_stepCountHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "queryStepCount:endDate:sources:stepCountHandler:");
}

id objc_msgSend_queryTimeInDaylight_endDate_sources_timeInDaylightHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "queryTimeInDaylight:endDate:sources:timeInDaylightHandler:")];
}

id objc_msgSend_queryTimeInDaylightMetadata_endDate_sources_timeInDaylightMetadataHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "queryTimeInDaylightMetadata:endDate:sources:timeInDaylightMetadataHandler:")];
}

id objc_msgSend_queryTimeNonStatic_endDate_TimeNonStaticHandler_(void *a1, const char *a2, ...)
{
  return [a1 queryTimeNonStatic:x0 endDate:x1 TimeNonStaticHandler:x2];
}

id objc_msgSend_queryUsingRecord_withReply_(void *a1, const char *a2, ...)
{
  return [a1 queryUsingRecord:withReply:];
}

id objc_msgSend_queryVO2MaxInputsFromRecord_withReply_(void *a1, const char *a2, ...)
{
  return [a1 queryVO2MaxInputsFromRecord:withReply:];
}

id objc_msgSend_queryVO2MaxRetrocomputeStatusWithReply_(void *a1, const char *a2, ...)
{
  return [a1 queryVO2MaxRetrocomputeStatusWithReply:];
}

id objc_msgSend_queryWorkoutMets_withReply_(void *a1, const char *a2, ...)
{
  return [a1 queryWorkoutMets:withReply:];
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return _[a1 queue];
}

id objc_msgSend_queueDuration(void *a1, const char *a2, ...)
{
  return _[a1 queueDuration];
}

id objc_msgSend_quitForcedLocationState(void *a1, const char *a2, ...)
{
  return _[a1 quitForcedLocationState];
}

id objc_msgSend_radialDisplacement(void *a1, const char *a2, ...)
{
  return _[a1 radialDisplacement];
}

id objc_msgSend_radioTechnology(void *a1, const char *a2, ...)
{
  return _[a1 radioTechnology];
}

id objc_msgSend_radius(void *a1, const char *a2, ...)
{
  return _[a1 radius];
}

id objc_msgSend_radiusMeters(void *a1, const char *a2, ...)
{
  return _[a1 radiusMeters];
}

id objc_msgSend_raise(void *a1, const char *a2, ...)
{
  return _[a1 raise];
}

id objc_msgSend_raise_format_(void *a1, const char *a2, ...)
{
  return [a1 raise:];
}

id objc_msgSend_raiseRavenEventsFromData_(void *a1, const char *a2, ...)
{
  return [a1 raiseRavenEventsFromData:];
}

id objc_msgSend_rampType(void *a1, const char *a2, ...)
{
  return _[a1 rampType];
}

id objc_msgSend_randomDoubleWithMin_max_(void *a1, const char *a2, ...)
{
  return [a1 randomDoubleWithMin:max:];
}

id objc_msgSend_range(void *a1, const char *a2, ...)
{
  return _[a1 range];
}

id objc_msgSend_rangeOfCharacterFromSet_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "rangeOfCharacterFromSet:");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return [a1 rangeOfString:];
}

id objc_msgSend_rangeOfString_options_(void *a1, const char *a2, ...)
{
  return [a1 rangeOfString:x0 options:x1];
}

id objc_msgSend_rangingTime(void *a1, const char *a2, ...)
{
  return _[a1 rangingTime];
}

id objc_msgSend_rapportDiscoveryLink(void *a1, const char *a2, ...)
{
  return _[a1 rapportDiscoveryLink];
}

id objc_msgSend_rapportLink(void *a1, const char *a2, ...)
{
  return _[a1 rapportLink];
}

id objc_msgSend_rapportLinkActive(void *a1, const char *a2, ...)
{
  return _[a1 rapportLinkActive];
}

id objc_msgSend_rapportStreamingLink(void *a1, const char *a2, ...)
{
  return _[a1 rapportStreamingLink];
}

id objc_msgSend_rat(void *a1, const char *a2, ...)
{
  return _[a1 rat];
}

id objc_msgSend_ratAsString_(void *a1, const char *a2, ...)
{
  return [a1 ratAsString:];
}

id objc_msgSend_rate(void *a1, const char *a2, ...)
{
  return _[a1 rate];
}

id objc_msgSend_rateDurationInSeconds(void *a1, const char *a2, ...)
{
  return _[a1 rateDurationInSeconds];
}

id objc_msgSend_rawCoordinateLatitude(void *a1, const char *a2, ...)
{
  return _[a1 rawCoordinateLatitude];
}

id objc_msgSend_rawCoordinateLongitude(void *a1, const char *a2, ...)
{
  return _[a1 rawCoordinateLongitude];
}

id objc_msgSend_rawMotionActivity(void *a1, const char *a2, ...)
{
  return _[a1 rawMotionActivity];
}

id objc_msgSend_rawRSSI(void *a1, const char *a2, ...)
{
  return _[a1 rawRSSI];
}

id objc_msgSend_reInitializeDatabasesAndSyncEngineIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 reInitializeDatabasesAndSyncEngineIfNeeded];
}

id objc_msgSend_reach(void *a1, const char *a2, ...)
{
  return _[a1 reach];
}

id objc_msgSend_reachability(void *a1, const char *a2, ...)
{
  return _[a1 reachability];
}

id objc_msgSend_reachabilityStatus(void *a1, const char *a2, ...)
{
  return _[a1 reachabilityStatus];
}

id objc_msgSend_reactivate(void *a1, const char *a2, ...)
{
  return _[a1 reactivate];
}

id objc_msgSend_read_maxLength_(void *a1, const char *a2, ...)
{
  return [a1 read:x0 maxLength:x1];
}

id objc_msgSend_readAllStats(void *a1, const char *a2, ...)
{
  return _[a1 readAllStats];
}

id objc_msgSend_readConditionsFromFile(void *a1, const char *a2, ...)
{
  return _[a1 readConditionsFromFile];
}

id objc_msgSend_readData(void *a1, const char *a2, ...)
{
  return _[a1 readData];
}

id objc_msgSend_readDataOfLength_(void *a1, const char *a2, ...)
{
  return [a1 readDataOfLength:];
}

id objc_msgSend_readDataWithOptions_error_(void *a1, const char *a2, ...)
{
  return [a1 readDataWithOptions:x0 error:x1];
}

id objc_msgSend_readFrom_(void *a1, const char *a2, ...)
{
  return [a1 readFrom:];
}

id objc_msgSend_readHandler(void *a1, const char *a2, ...)
{
  return _[a1 readHandler];
}

id objc_msgSend_readMobileAssetConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 readMobileAssetConfiguration:];
}

id objc_msgSend_readTag_type_(void *a1, const char *a2, ...)
{
  return [a1 readTag:type:];
}

id objc_msgSend_readValueForCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 readValueForCharacteristic:];
}

id objc_msgSend_readonlyStoreAtKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 readonlyStoreAtKeyPath:];
}

id objc_msgSend_ready(void *a1, const char *a2, ...)
{
  return _[a1 ready];
}

id objc_msgSend_readyToFilter(void *a1, const char *a2, ...)
{
  return _[a1 readyToFilter];
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _[a1 reason];
}

id objc_msgSend_rebaseSignificantElevationWithEndTime_(void *a1, const char *a2, ...)
{
  return [a1 rebaseSignificantElevationWithEndTime:];
}

id objc_msgSend_receiveAdvertisement_(void *a1, const char *a2, ...)
{
  return [a1 receiveAdvertisement:];
}

id objc_msgSend_receiveBeaconPayload_(void *a1, const char *a2, ...)
{
  return [a1 receiveBeaconPayload:];
}

id objc_msgSend_receiveColdStorageDataUpdate_(void *a1, const char *a2, ...)
{
  return [a1 receiveColdStorageDataUpdate:];
}

id objc_msgSend_receiveLocation_(void *a1, const char *a2, ...)
{
  return [a1 receiveLocation:];
}

id objc_msgSend_receiveMobilityDataFromCompanion_(void *a1, const char *a2, ...)
{
  return [a1 receiveMobilityDataFromCompanion:];
}

id objc_msgSend_receiveMotionActivity_(void *a1, const char *a2, ...)
{
  return [a1 receiveMotionActivity:];
}

id objc_msgSend_receivePredictedWalkDistanceBout_(void *a1, const char *a2, ...)
{
  return [a1 receivePredictedWalkDistanceBout];
}

id objc_msgSend_receiveSignalEnvironment_(void *a1, const char *a2, ...)
{
  return [a1 receiveSignalEnvironment:];
}

id objc_msgSend_receiveVO2MaxCloudKitDailyStatsFromWatch_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "receiveVO2MaxCloudKitDailyStatsFromWatch:");
}

id objc_msgSend_receiveWorkoutDistanceAnalyticsMessage_(void *a1, const char *a2, ...)
{
  return [a1 receiveWorkoutDistanceAnalyticsMessage:];
}

id objc_msgSend_receivedMessageHandler(void *a1, const char *a2, ...)
{
  return _[a1 receivedMessageHandler];
}

id objc_msgSend_receivedTimeToAcceptTime(void *a1, const char *a2, ...)
{
  return _[a1 receivedTimeToAcceptTime];
}

id objc_msgSend_receivedTimeToFirstUserResponse(void *a1, const char *a2, ...)
{
  return _[a1 receivedTimeToFirstUserResponse];
}

id objc_msgSend_receivingEndUnacknowledgedMessages(void *a1, const char *a2, ...)
{
  return _[a1 receivingEndUnacknowledgedMessages];
}

id objc_msgSend_recentVisits(void *a1, const char *a2, ...)
{
  return _[a1 recentVisits];
}

id objc_msgSend_reconcileKey_matchedIndex_sequence_error_(void *a1, const char *a2, ...)
{
  return [a1 reconcileKey:x0 matchedIndex:x1 sequence:x2 error:x3];
}

id objc_msgSend_reconciledConnectionEnabled(void *a1, const char *a2, ...)
{
  return _[a1 reconciledConnectionEnabled];
}

id objc_msgSend_reconciler(void *a1, const char *a2, ...)
{
  return _[a1 reconciler];
}

id objc_msgSend_reconfigureRavenIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 reconfigureRavenIfNeeded];
}

id objc_msgSend_reconnectAfterLeashFailure(void *a1, const char *a2, ...)
{
  return _[a1 reconnectAfterLeashFailure];
}

id objc_msgSend_reconnectDevice_(void *a1, const char *a2, ...)
{
  return [a1 reconnectDevice:];
}

id objc_msgSend_reconnecting(void *a1, const char *a2, ...)
{
  return _[a1 reconnecting];
}

id objc_msgSend_record(void *a1, const char *a2, ...)
{
  return _[a1 record];
}

id objc_msgSend_recordChangeTag(void *a1, const char *a2, ...)
{
  return _[a1 recordChangeTag];
}

id objc_msgSend_recordFallEventInHealthKit_(void *a1, const char *a2, ...)
{
  return [a1 recordFallEventInHealthKit:];
}

id objc_msgSend_recordID(void *a1, const char *a2, ...)
{
  return _[a1 recordID];
}

id objc_msgSend_recordIDsToDelete(void *a1, const char *a2, ...)
{
  return _[a1 recordIDsToDelete];
}

id objc_msgSend_recordId(void *a1, const char *a2, ...)
{
  return _[a1 recordId];
}

id objc_msgSend_recordIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 recordIdentifier];
}

id objc_msgSend_recordName(void *a1, const char *a2, ...)
{
  return _[a1 recordName];
}

id objc_msgSend_recordType(void *a1, const char *a2, ...)
{
  return _[a1 recordType];
}

id objc_msgSend_recordWeatherData_(void *a1, const char *a2, ...)
{
  return [a1 recordWeatherData:];
}

id objc_msgSend_recordWorkoutSessionEvent_(void *a1, const char *a2, ...)
{
  return [a1 recordWorkoutSessionEvent:];
}

id objc_msgSend_recordWorkoutSessionPriors_(void *a1, const char *a2, ...)
{
  return [a1 recordWorkoutSessionPriors:];
}

id objc_msgSend_recordZone(void *a1, const char *a2, ...)
{
  return _[a1 recordZone];
}

id objc_msgSend_recordingURLs(void *a1, const char *a2, ...)
{
  return _[a1 recordingURLs];
}

id objc_msgSend_recordsToSave(void *a1, const char *a2, ...)
{
  return _[a1 recordsToSave];
}

id objc_msgSend_recoveryOnsetTime(void *a1, const char *a2, ...)
{
  return _[a1 recoveryOnsetTime];
}

id objc_msgSend_recoverySession(void *a1, const char *a2, ...)
{
  return _[a1 recoverySession];
}

id objc_msgSend_recoverySyncInProgress(void *a1, const char *a2, ...)
{
  return _[a1 recoverySyncInProgress];
}

id objc_msgSend_recreateKeyReconciler(void *a1, const char *a2, ...)
{
  return _[a1 recreateKeyReconciler];
}

id objc_msgSend_recvDataFromAccessory_data_error_(void *a1, const char *a2, ...)
{
  return [a1 recvDataFromAccessory:data:error:];
}

id objc_msgSend_reduceAccuracy_withReply_(void *a1, const char *a2, ...)
{
  return [a1 reduceAccuracy:withReply:];
}

id objc_msgSend_reevaluateMotionSubscription(void *a1, const char *a2, ...)
{
  return _[a1 reevaluateMotionSubscription];
}

id objc_msgSend_referenceFrame(void *a1, const char *a2, ...)
{
  return _[a1 referenceFrame];
}

id objc_msgSend_referenceLocation(void *a1, const char *a2, ...)
{
  return _[a1 referenceLocation];
}

id objc_msgSend_referenceTicks(void *a1, const char *a2, ...)
{
  return _[a1 referenceTicks];
}

id objc_msgSend_referenceTime(void *a1, const char *a2, ...)
{
  return _[a1 referenceTime];
}

id objc_msgSend_referenceWallTime(void *a1, const char *a2, ...)
{
  return _[a1 referenceWallTime];
}

id objc_msgSend_refillAwaitingMonitoringConditions_(void *a1, const char *a2, ...)
{
  return [a1 refillAwaitingMonitoringConditions];
}

id objc_msgSend_refresh(void *a1, const char *a2, ...)
{
  return _[a1 refresh];
}

id objc_msgSend_refreshCellMonitor_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "refreshCellMonitor:completion:");
}

id objc_msgSend_refreshHistoricalMeanSeaLevelPressureWithStartTime_andEndTime_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "refreshHistoricalMeanSeaLevelPressureWithStartTime:andEndTime:");
}

id objc_msgSend_refreshMetrics(void *a1, const char *a2, ...)
{
  return _[a1 refreshMetrics];
}

id objc_msgSend_refreshSettings(void *a1, const char *a2, ...)
{
  return _[a1 refreshSettings];
}

id objc_msgSend_refreshState(void *a1, const char *a2, ...)
{
  return _[a1 refreshState];
}

id objc_msgSend_regeotagBeaconPayloads(void *a1, const char *a2, ...)
{
  return _[a1 regeotagBeaconPayloads];
}

id objc_msgSend_regionCenterLocation(void *a1, const char *a2, ...)
{
  return _[a1 regionCenterLocation];
}

id objc_msgSend_regionChangeCallback(void *a1, const char *a2, ...)
{
  return _[a1 regionChangeCallback];
}

id objc_msgSend_regionForFence_(void *a1, const char *a2, ...)
{
  return [a1 regionForFence:];
}

id objc_msgSend_regionId(void *a1, const char *a2, ...)
{
  return _[a1 regionId];
}

id objc_msgSend_regionalLocationOfInterestMergeRadiusKM(void *a1, const char *a2, ...)
{
  return _[a1 regionalLocationOfInterestMergeRadiusKM];
}

id objc_msgSend_regionalPrefetchMaxFloorCount(void *a1, const char *a2, ...)
{
  return _[a1 regionalPrefetchMaxFloorCount];
}

id objc_msgSend_regionalPrefetchMaxFloorsPerPrefetch(void *a1, const char *a2, ...)
{
  return _[a1 regionalPrefetchMaxFloorsPerPrefetch];
}

id objc_msgSend_regionalPrefetchRadiusKM(void *a1, const char *a2, ...)
{
  return _[a1 regionalPrefetchRadiusKM];
}

id objc_msgSend_regionalTilePrefetchMaxCount(void *a1, const char *a2, ...)
{
  return _[a1 regionalTilePrefetchMaxCount];
}

id objc_msgSend_register_forNotification_registrationInfo_(void *a1, const char *a2, ...)
{
  return [a1 register:forNotification:registrationInfo:];
}

id objc_msgSend_registerAlarm_withReply_(void *a1, const char *a2, ...)
{
  return [a1 registerAlarm:withReply:];
}

id objc_msgSend_registerAndRunXPCActivity_withActivityIdentifier_andDescription_(void *a1, const char *a2, ...)
{
  return [a1 registerAndRunXPCActivity:withActivityIdentifier:andDescription:];
}

id objc_msgSend_registerCircularInterestZoneForClientKey_withId_latitude_longitude_serviceMaskOperator_provenanceType_radius_withReply_(void *a1, const char *a2, ...)
{
  return [a1 registerCircularInterestZoneForClientKey:withId:latitude:longitude:serviceMaskOperator:provenanceType:radius:withReply:];
}

id objc_msgSend_registerClient_adapter_systemClient_(void *a1, const char *a2, ...)
{
  return [a1 registerClient:adapter:systemClient:];
}

id objc_msgSend_registerClient_forElevationThreshold_(void *a1, const char *a2, ...)
{
  return [a1 registerClient:forElevationThreshold:];
}

id objc_msgSend_registerClient_forNotification_(void *a1, const char *a2, ...)
{
  return [a1 registerClient:forNotification:];
}

id objc_msgSend_registerClient_fromAuthSync_(void *a1, const char *a2, ...)
{
  return [a1 registerClient:fromAuthSync:];
}

id objc_msgSend_registerClient_queue_(void *a1, const char *a2, ...)
{
  return [a1 registerClient:queue:];
}

id objc_msgSend_registerDailyBlock_(void *a1, const char *a2, ...)
{
  return [a1 registerDailyBlock:];
}

id objc_msgSend_registerDatabaseAtURL_tableName_isClassB_sourceDevice_cloudKitDelegate_(void *a1, const char *a2, ...)
{
  return [a1 registerDatabaseAtURL:x0 tableName:x1 isClassB:x2 sourceDevice:x3 cloudKitDelegate:x4];
}

id objc_msgSend_registerDelegate_inSilo_(void *a1, const char *a2, ...)
{
  return [a1 registerDelegate:inSilo:];
}

id objc_msgSend_registerDelegate_withFilter_(void *a1, const char *a2, ...)
{
  return [a1 registerDelegate:withFilter:];
}

id objc_msgSend_registerDevice(void *a1, const char *a2, ...)
{
  return _[a1 registerDevice];
}

id objc_msgSend_registerEventID_options_handler_(void *a1, const char *a2, ...)
{
  return [a1 registerEventID:options:handler:];
}

id objc_msgSend_registerForAlgorithmSources(void *a1, const char *a2, ...)
{
  return _[a1 registerForAlgorithmSources];
}

id objc_msgSend_registerForAppMonitorNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForAppMonitorNotification];
}

id objc_msgSend_registerForAvengerScanner(void *a1, const char *a2, ...)
{
  return _[a1 registerForAvengerScanner];
}

id objc_msgSend_registerForBluetoothPowerNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForBluetoothPowerNotification];
}

id objc_msgSend_registerForBluetoothServiceNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForBluetoothServiceNotification];
}

id objc_msgSend_registerForClientManagerNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForClientManagerNotification];
}

id objc_msgSend_registerForCompanionConnectionUpdate(void *a1, const char *a2, ...)
{
  return _[a1 registerForCompanionConnectionUpdate];
}

id objc_msgSend_registerForCompanionConnectionUpdateWithUniverse_(void *a1, const char *a2, ...)
{
  return [a1 registerForCompanionConnectionUpdateWithUniverse:];
}

id objc_msgSend_registerForCompanionNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForCompanionNotification];
}

id objc_msgSend_registerForCyclingWorkoutDistanceUpdates_(void *a1, const char *a2, ...)
{
  return [a1 registerForCyclingWorkoutDistanceUpdates:];
}

id objc_msgSend_registerForDaemonStatusNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForDaemonStatusNotification];
}

id objc_msgSend_registerForData_(void *a1, const char *a2, ...)
{
  return [a1 registerForData:];
}

id objc_msgSend_registerForDataProtectionManagerNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForDataProtectionManagerNotification];
}

id objc_msgSend_registerForDataProtectionNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForDataProtectionNotification];
}

id objc_msgSend_registerForDeviceMatching_(void *a1, const char *a2, ...)
{
  return [a1 registerForDeviceMatching:];
}

id objc_msgSend_registerForDevicesMatching_options_(void *a1, const char *a2, ...)
{
  return [a1 registerForDevicesMatching:options:];
}

id objc_msgSend_registerForDurianConnectionStateChange(void *a1, const char *a2, ...)
{
  return _[a1 registerForDurianConnectionStateChange];
}

id objc_msgSend_registerForDurianService(void *a1, const char *a2, ...)
{
  return _[a1 registerForDurianService];
}

id objc_msgSend_registerForEventsNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForEventsNotification];
}

id objc_msgSend_registerForGeoCountryCodeConfigurationNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForGeoCountryCodeConfigurationNotification];
}

id objc_msgSend_registerForGeoNavListener(void *a1, const char *a2, ...)
{
  return _[a1 registerForGeoNavListener];
}

id objc_msgSend_registerForGnssNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForGnssNotification];
}

id objc_msgSend_registerForHKNanoLifestylePrivacyPreferencesChangedNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForHKNanoLifestylePrivacyPreferencesChangedNotification];
}

id objc_msgSend_registerForLocalNotifications(void *a1, const char *a2, ...)
{
  return _[a1 registerForLocalNotifications];
}

id objc_msgSend_registerForLocationNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForLocationNotification];
}

id objc_msgSend_registerForMiloPredictionEventUpdates_(void *a1, const char *a2, ...)
{
  return [a1 registerForMiloPredictionEventUpdates:];
}

id objc_msgSend_registerForMiloServiceEventUpdatesForClient_withToken_(void *a1, const char *a2, ...)
{
  return [a1 registerForMiloServiceEventUpdatesForClient:withToken:];
}

id objc_msgSend_registerForMobileAssetNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForMobileAssetNotification];
}

id objc_msgSend_registerForMobilityBoutMetrics_(void *a1, const char *a2, ...)
{
  return [a1 registerForMobilityBoutMetrics:];
}

id objc_msgSend_registerForMotionNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForMotionNotification];
}

id objc_msgSend_registerForMotionStateMediatorNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForMotionStateMediatorNotification];
}

id objc_msgSend_registerForNotifications(void *a1, const char *a2, ...)
{
  return _[a1 registerForNotifications];
}

id objc_msgSend_registerForOTASettingsNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForOTASettingsNotification];
}

id objc_msgSend_registerForPushToken_completion_(void *a1, const char *a2, ...)
{
  return [a1 registerForPushToken:completion:];
}

id objc_msgSend_registerForRetrocomputeStatusUpdates_(void *a1, const char *a2, ...)
{
  return [a1 registerForRetrocomputeStatusUpdates:];
}

id objc_msgSend_registerForRoutineMonitor(void *a1, const char *a2, ...)
{
  return _[a1 registerForRoutineMonitor];
}

id objc_msgSend_registerForSignalEnvironmentNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForSignalEnvironmentNotification];
}

id objc_msgSend_registerForStateUpdates_(void *a1, const char *a2, ...)
{
  return [a1 registerForStateUpdates:];
}

id objc_msgSend_registerForTaskWithIdentifier_usingQueue_launchHandler_(void *a1, const char *a2, ...)
{
  return [a1 registerForTaskWithIdentifier:usingQueue:launchHandler:];
}

id objc_msgSend_registerForTelephonyNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForTelephonyNotification];
}

id objc_msgSend_registerForTrackRunEnablementNotifications(void *a1, const char *a2, ...)
{
  return _[a1 registerForTrackRunEnablementNotifications];
}

id objc_msgSend_registerForUpdates_(void *a1, const char *a2, ...)
{
  return [a1 registerForUpdates:];
}

id objc_msgSend_registerForUsageMetricsUpdates_(void *a1, const char *a2, ...)
{
  return [a1 registerForUsageMetricsUpdates:];
}

id objc_msgSend_registerForVehicleStateNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForVehicleStateNotification];
}

id objc_msgSend_registerForVisionNotifications_(void *a1, const char *a2, ...)
{
  return [a1 registerForVisionNotifications:];
}

id objc_msgSend_registerForWalkingSteadiness_(void *a1, const char *a2, ...)
{
  return [a1 registerForWalkingSteadiness:];
}

id objc_msgSend_registerForWeatherUpdates_(void *a1, const char *a2, ...)
{
  return [a1 registerForWeatherUpdates:];
}

id objc_msgSend_registerForWifiScanResultsWithQueue_error_callback_(void *a1, const char *a2, ...)
{
  return [a1 registerForWifiScanResultsWithQueue:error:callback:];
}

id objc_msgSend_registerForWifiServiceNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForWifiServiceNotification];
}

id objc_msgSend_registerForWorkoutSessionUpdates_(void *a1, const char *a2, ...)
{
  return [a1 registerForWorkoutSessionUpdates:];
}

id objc_msgSend_registerForZoneChangesMatching_(void *a1, const char *a2, ...)
{
  return [a1 registerForZoneChangesMatching:];
}

id objc_msgSend_registerNotificationBlock_(void *a1, const char *a2, ...)
{
  return [a1 registerNotificationBlock:];
}

id objc_msgSend_registerNotificationBlock_forProperties_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "registerNotificationBlock:forProperties:");
}

id objc_msgSend_registerPaths_forBundleID_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 registerPaths:forBundleID:completionHandler:];
}

id objc_msgSend_registerPhenolicInterestZoneForClientKey_withId_phenolicLocation_serviceMaskOperator_provenanceType_withReply_(void *a1, const char *a2, ...)
{
  return [a1 registerPhenolicInterestZoneForClientKey:withId:phenolicLocation:serviceMaskOperator:provenanceType:withReply:];
}

id objc_msgSend_registerRequestHandlers(void *a1, const char *a2, ...)
{
  return _[a1 registerRequestHandlers];
}

id objc_msgSend_registerRequestID_options_handler_(void *a1, const char *a2, ...)
{
  return [a1 registerRequestID:options:handler:];
}

id objc_msgSend_registerSmartCoverStateObserver_(void *a1, const char *a2, ...)
{
  return [a1 registerSmartCoverStateObserver:];
}

id objc_msgSend_registerStrideCalDbForColdStorage_(void *a1, const char *a2, ...)
{
  return [a1 registerStrideCalDbForColdStorage:];
}

id objc_msgSend_registerSubIdentity_withType_forAnchorKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 registerSubIdentity:withType:forAnchorKeyPath:];
}

id objc_msgSend_registerWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 registerWithCompletionHandler:];
}

id objc_msgSend_registeredBlock(void *a1, const char *a2, ...)
{
  return _[a1 registeredBlock];
}

id objc_msgSend_registeredFiles(void *a1, const char *a2, ...)
{
  return _[a1 registeredFiles];
}

id objc_msgSend_registeredKeyPathForClientIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 registeredKeyPathForClientIdentifier:];
}

id objc_msgSend_registeredXPCTaskElevationProfile(void *a1, const char *a2, ...)
{
  return _[a1 registeredXPCTaskElevationProfile];
}

id objc_msgSend_registeredXPCTaskMSLP(void *a1, const char *a2, ...)
{
  return _[a1 registeredXPCTaskMSLP];
}

id objc_msgSend_registrationDisplayStatus(void *a1, const char *a2, ...)
{
  return _[a1 registrationDisplayStatus];
}

id objc_msgSend_registrationResult(void *a1, const char *a2, ...)
{
  return _[a1 registrationResult];
}

id objc_msgSend_regularExpressionWithPattern_options_error_(void *a1, const char *a2, ...)
{
  return [a1 regularExpressionWithPattern:x0 options:x1 error:x2];
}

id objc_msgSend_regulatoryDomainEstimates(void *a1, const char *a2, ...)
{
  return _[a1 regulatoryDomainEstimates];
}

id objc_msgSend_relationship(void *a1, const char *a2, ...)
{
  return _[a1 relationship];
}

id objc_msgSend_releaseAccuracyEnablementAssertionForClient_(void *a1, const char *a2, ...)
{
  return [a1 releaseAccuracyEnablementAssertionForClient:];
}

id objc_msgSend_releaseAllContextManagers(void *a1, const char *a2, ...)
{
  return _[a1 releaseAllContextManagers];
}

id objc_msgSend_releaseAndClearManager_(void *a1, const char *a2, ...)
{
  return [a1 releaseAndClearManager:];
}

id objc_msgSend_releaseAssertion(void *a1, const char *a2, ...)
{
  return _[a1 releaseAssertion];
}

id objc_msgSend_releaseBlocks(void *a1, const char *a2, ...)
{
  return _[a1 releaseBlocks];
}

id objc_msgSend_releaseContextManagersForNotification_(void *a1, const char *a2, ...)
{
  return [a1 releaseContextManagersForNotification:];
}

id objc_msgSend_releaseData(void *a1, const char *a2, ...)
{
  return _[a1 releaseData];
}

id objc_msgSend_releaseExtension_(void *a1, const char *a2, ...)
{
  return [a1 releaseExtension:];
}

id objc_msgSend_releaseMaintenancePowerAssertion_(void *a1, const char *a2, ...)
{
  return [a1 releaseMaintenancePowerAssertion:];
}

id objc_msgSend_releaseMapHelperServiceOSTransaction(void *a1, const char *a2, ...)
{
  return _[a1 releaseMapHelperServiceOSTransaction];
}

id objc_msgSend_releaseMutexWithReason_(void *a1, const char *a2, ...)
{
  return [a1 releaseMutexWithReason:];
}

id objc_msgSend_releaseOSTransaction(void *a1, const char *a2, ...)
{
  return _[a1 releaseOSTransaction];
}

id objc_msgSend_releasePowerAssertion(void *a1, const char *a2, ...)
{
  return _[a1 releasePowerAssertion];
}

id objc_msgSend_releasePowerAssertion_(void *a1, const char *a2, ...)
{
  return [a1 releasePowerAssertion:];
}

id objc_msgSend_releasePowerAssertions(void *a1, const char *a2, ...)
{
  return _[a1 releasePowerAssertions];
}

id objc_msgSend_relevancy_(void *a1, const char *a2, ...)
{
  return [a1 relevancy:];
}

id objc_msgSend_remainingBOMScans(void *a1, const char *a2, ...)
{
  return _[a1 remainingBOMScans];
}

id objc_msgSend_remoteDeviceMotionUpdate_atTime_(void *a1, const char *a2, ...)
{
  return [a1 remoteDeviceMotionUpdate:atTime:];
}

id objc_msgSend_remoteObjectInterface(void *a1, const char *a2, ...)
{
  return _[a1 remoteObjectInterface];
}

id objc_msgSend_remoteObjectProxy(void *a1, const char *a2, ...)
{
  return _[a1 remoteObjectProxy];
}

id objc_msgSend_remoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return [a1 remoteObjectProxyWithErrorHandler:];
}

id objc_msgSend_remoteTimeout(void *a1, const char *a2, ...)
{
  return _[a1 remoteTimeout];
}

id objc_msgSend_removeAllCarryingItems(void *a1, const char *a2, ...)
{
  return _[a1 removeAllCarryingItems];
}

id objc_msgSend_removeAllDiscoveryTypes(void *a1, const char *a2, ...)
{
  return _[a1 removeAllDiscoveryTypes];
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeAllPossiblePeripherals(void *a1, const char *a2, ...)
{
  return _[a1 removeAllPossiblePeripherals];
}

id objc_msgSend_removeAttribution_(void *a1, const char *a2, ...)
{
  return [a1 removeAttribution:];
}

id objc_msgSend_removeClient_(void *a1, const char *a2, ...)
{
  return [a1 removeClient:];
}

id objc_msgSend_removeClient_prepareSessionEndForSessionType_(void *a1, const char *a2, ...)
{
  return [a1 removeClient:prepareSessionEndForSessionType:];
}

id objc_msgSend_removeConditionFromMonitoringWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 removeConditionFromMonitoringWithIdentifier:];
}

id objc_msgSend_removeConditionsWithIdentifiers_(void *a1, const char *a2, ...)
{
  return [a1 removeConditionsWithIdentifiers:];
}

id objc_msgSend_removeDataSource_(void *a1, const char *a2, ...)
{
  return [a1 removeDataSource:];
}

id objc_msgSend_removeDelegate_(void *a1, const char *a2, ...)
{
  return [a1 removeDelegate:];
}

id objc_msgSend_removeDictionaryAtKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 removeDictionaryAtKeyPath:];
}

id objc_msgSend_removeDisableModules_setting_(void *a1, const char *a2, ...)
{
  return [a1 removeDisableModules:setting:];
}

id objc_msgSend_removeFence_(void *a1, const char *a2, ...)
{
  return [a1 removeFence:];
}

id objc_msgSend_removeGeofenceWithRegionId_(void *a1, const char *a2, ...)
{
  return [a1 removeGeofenceWithRegionId:];
}

id objc_msgSend_removeGeofencesNearLocationWithLatitude_andLongitude_(void *a1, const char *a2, ...)
{
  return [a1 removeGeofencesNearLocationWithLatitude:andLongitude:];
}

id objc_msgSend_removeInterestForClientKey_(void *a1, const char *a2, ...)
{
  return [a1 removeInterestForClientKey:];
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return [a1 removeItemAtPath:error:];
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return [a1 removeItemAtURL:x0 error:x1];
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return _[a1 removeLastObject];
}

id objc_msgSend_removeLingeringEntriesAtPeriod_(void *a1, const char *a2, ...)
{
  return [a1 removeLingeringEntriesAtPeriod:];
}

id objc_msgSend_removeMonitoredRegion_(void *a1, const char *a2, ...)
{
  return [a1 removeMonitoredRegion:];
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 removeObjectAtIndex:];
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return [a1 removeObjectForKey:];
}

id objc_msgSend_removeObjectsAtIndexes_(void *a1, const char *a2, ...)
{
  return [a1 removeObjectsAtIndexes:];
}

id objc_msgSend_removeObjectsForKeys_(void *a1, const char *a2, ...)
{
  return [a1 removeObjectsForKeys:];
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return [a1 removeObjectsInArray:];
}

id objc_msgSend_removeObjectsInRange_(void *a1, const char *a2, ...)
{
  return [a1 removeObjectsInRange:];
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return [a1 removeObserver];
}

id objc_msgSend_removeObserver_forKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 removeObserver:forKeyPath:];
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return [a1 removeObserver:name:object:];
}

id objc_msgSend_removeOldVisits(void *a1, const char *a2, ...)
{
  return _[a1 removeOldVisits];
}

id objc_msgSend_removePersistentStore_error_(void *a1, const char *a2, ...)
{
  return [a1 removePersistentStore:error];
}

id objc_msgSend_removePossiblePeripheral_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "removePossiblePeripheral:");
}

id objc_msgSend_removePossiblePeripheral_withError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "removePossiblePeripheral:withError:");
}

id objc_msgSend_removeRecordFromMonitoringWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 removeRecordFromMonitoringWithIdentifier:];
}

id objc_msgSend_removeResponseListener_(void *a1, const char *a2, ...)
{
  return [a1 removeResponseListener:];
}

id objc_msgSend_removeRhythmicGnssClient_(void *a1, const char *a2, ...)
{
  return [a1 removeRhythmicGnssClient:];
}

id objc_msgSend_removeSubscriptionWithIdentifier_callbackQueue_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 removeSubscriptionWithIdentifier:x0 callbackQueue:x1 completionHandler:x2];
}

id objc_msgSend_removeTrackRunSubscriptionForType_nploiIndex_(void *a1, const char *a2, ...)
{
  return [a1 removeTrackRunSubscriptionForType:nploiIndex:];
}

id objc_msgSend_removeValueForKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "removeValueForKey:atKeyPath:");
}

id objc_msgSend_repeats(void *a1, const char *a2, ...)
{
  return _[a1 repeats];
}

id objc_msgSend_replaceBytesInRange_withBytes_length_(void *a1, const char *a2, ...)
{
  return [a1 replaceBytesInRange:withBytes:length:];
}

id objc_msgSend_replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_(void *a1, const char *a2, ...)
{
  return [a1 replaceItemAtURL:x0 withItemAtURL:x1 backupItemName:x2 options:x3 resultingItemURL:&x4 error:&x5];
}

id objc_msgSend_replaceObjectAtIndex_withObject_(void *a1, const char *a2, ...)
{
  return [a1 replaceObjectAtIndex:withObject:];
}

id objc_msgSend_replaceOccurrencesOfString_withString_options_range_(void *a1, const char *a2, ...)
{
  return [a1 replaceOccurrencesOfString:x0 withString:x1 options:x2 range:x3];
}

id objc_msgSend_reply(void *a1, const char *a2, ...)
{
  return _[a1 reply];
}

id objc_msgSend_replyRequestsWithErrorCode_(void *a1, const char *a2, ...)
{
  return [a1 replyRequestsWithErrorCode:];
}

id objc_msgSend_replyRequestsWithResult(void *a1, const char *a2, ...)
{
  return _[a1 replyRequestsWithResult];
}

id objc_msgSend_reportCalibratedPressureCollection_(void *a1, const char *a2, ...)
{
  return [a1 reportCalibratedPressureCollection:];
}

id objc_msgSend_reportLocationUtilityEvent_atDate_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "reportLocationUtilityEvent:atDate:");
}

id objc_msgSend_reportRealtimeLocationCollection_(void *a1, const char *a2, ...)
{
  return [a1 reportRealtimeLocationCollection:];
}

id objc_msgSend_requestAnchorValueStatisticsWithReply_(void *a1, const char *a2, ...)
{
  return [a1 requestAnchorValueStatisticsWithReply:];
}

id objc_msgSend_requestArchivesForHarvester_(void *a1, const char *a2, ...)
{
  return [a1 requestArchivesForHarvester:];
}

id objc_msgSend_requestCarScanTimeViaDevice_(void *a1, const char *a2, ...)
{
  return [a1 requestCarScanTimeViaDevice:];
}

id objc_msgSend_requestChangeFencesStateMatchingHandoffTags_forDeviceID_(void *a1, const char *a2, ...)
{
  return [a1 requestChangeFencesStateMatchingHandoffTags:forDeviceID:];
}

id objc_msgSend_requestCode(void *a1, const char *a2, ...)
{
  return _[a1 requestCode];
}

id objc_msgSend_requestConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 requestConfiguration];
}

id objc_msgSend_requestCurrentMicroLocationForClient_withAdditionalInformation_(void *a1, const char *a2, ...)
{
  return [a1 requestCurrentMicroLocationForClient:withAdditionalInformation:];
}

id objc_msgSend_requestCurrentMicroLocationForClient_withAdditionalInformation_withReply_(void *a1, const char *a2, ...)
{
  return [a1 requestCurrentMicroLocationForClient:withAdditionalInformation:withReply:];
}

id objc_msgSend_requestDate(void *a1, const char *a2, ...)
{
  return _[a1 requestDate];
}

id objc_msgSend_requestDisconnection_(void *a1, const char *a2, ...)
{
  return [a1 requestDisconnection:];
}

id objc_msgSend_requestDisconnectionForDevice_(void *a1, const char *a2, ...)
{
  return [a1 requestDisconnectionForDevice:];
}

id objc_msgSend_requestDiscoveryScan(void *a1, const char *a2, ...)
{
  return _[a1 requestDiscoveryScan];
}

id objc_msgSend_requestDiscoveryViaDevice_(void *a1, const char *a2, ...)
{
  return [a1 requestDiscoveryViaDevice:];
}

id objc_msgSend_requestExportMiLoDatabaseTablesFromClient_withRequestIdentifier_connectionToken_(void *a1, const char *a2, ...)
{
  return [a1 requestExportMiLoDatabaseTablesFromClient:withRequestIdentifier:connectionToken:];
}

id objc_msgSend_requestForSchedulingTileDownload_(void *a1, const char *a2, ...)
{
  return [a1 requestForSchedulingTileDownload:];
}

id objc_msgSend_requestFullResync(void *a1, const char *a2, ...)
{
  return _[a1 requestFullResync];
}

id objc_msgSend_requestGuidanceState(void *a1, const char *a2, ...)
{
  return _[a1 requestGuidanceState];
}

id objc_msgSend_requestHawkeyeLowEnergyScan(void *a1, const char *a2, ...)
{
  return _[a1 requestHawkeyeLowEnergyScan];
}

id objc_msgSend_requestImportantLoisIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 requestImportantLoisIfNeeded];
}

id objc_msgSend_requestLabelObservationsForClient_withServiceIdentifier_withRequestIdentifier_withPlaceIdentifier_betweenStartDate_endDate_withConnectionToken_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "requestLabelObservationsForClient:withServiceIdentifier:withRequestIdentifier:withPlaceIdentifier:betweenStartDate:endDate:withConnectionToken:");
}

id objc_msgSend_requestLabelSingleObservationForClient_withServiceIdentifier_withRequestIdentifier_withPlaceIdentifier_withObservationRequestIdentifier_withConnectionToken_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "requestLabelSingleObservationForClient:withServiceIdentifier:withRequestIdentifier:withPlaceIdentifier:withObservationRequestIdentifier:withConnectionToken:");
}

id objc_msgSend_requestLocation(void *a1, const char *a2, ...)
{
  return _[a1 requestLocation];
}

id objc_msgSend_requestLocationUpdateWithParameters_(void *a1, const char *a2, ...)
{
  return [a1 requestLocationUpdateWithParameters:];
}

id objc_msgSend_requestLocationWithDesiredAccuracy_(void *a1, const char *a2, ...)
{
  return [a1 requestLocationWithDesiredAccuracy:];
}

id objc_msgSend_requestLoiRelatedTo_(void *a1, const char *a2, ...)
{
  return [a1 requestLoiRelatedTo:];
}

id objc_msgSend_requestMicroLocationLearningForClient_withServiceIdentifier_withRequestIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 requestMicroLocationLearningForClient:withServiceIdentifier:withRequestIdentifier:];
}

id objc_msgSend_requestMicroLocationLearningForClient_Legacy_withReply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "requestMicroLocationLearningForClient_Legacy:withReply:");
}

id objc_msgSend_requestMicroLocationRecordingScanForClient_withAdditionalInformation_withReply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "requestMicroLocationRecordingScanForClient:withAdditionalInformation:withReply:");
}

id objc_msgSend_requestMonitorWithConfiguration_completion_(void *a1, const char *a2, ...)
{
  return [a1 requestMonitorWithConfiguration:x0 completion:x1];
}

id objc_msgSend_requestObservationForClient_withServiceIdentifier_withRequestIdentifier_withPlaceIdentifier_withConnectionToken_(void *a1, const char *a2, ...)
{
  return [a1 requestObservationForClient:withServiceIdentifier:withRequestIdentifier:withPlaceIdentifier:withConnectionToken:];
}

id objc_msgSend_requestPurgeAllMiLoDataFromClient_withRequestIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 requestPurgeAllMiLoDataFromClient:withRequestIdentifier:];
}

id objc_msgSend_requestQ(void *a1, const char *a2, ...)
{
  return _[a1 requestQ];
}

id objc_msgSend_requestRTTiles_longitude_numberOfTiles_(void *a1, const char *a2, ...)
{
  return [a1 requestRTTiles:x0 longitude:x1 numberOfTiles:x2];
}

id objc_msgSend_requestReceivedTime(void *a1, const char *a2, ...)
{
  return _[a1 requestReceivedTime];
}

id objc_msgSend_requestRegionState_(void *a1, const char *a2, ...)
{
  return [a1 requestRegionState:];
}

id objc_msgSend_requestRemoveCustomLoiWithServiceIdentifier_withRequestIdentifier_withLoiIdentifier_withConnectionToken_(void *a1, const char *a2, ...)
{
  return [a1 requestRemoveCustomLoiWithServiceIdentifier:withRequestIdentifier:withLoiIdentifier:withConnectionToken:];
}

id objc_msgSend_requestRemoveLabelsForClient_withServiceIdentifier_withRequestIdentifier_withLabels_withConnectionToken_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "requestRemoveLabelsForClient:withServiceIdentifier:withRequestIdentifier:withLabels:withConnectionToken:");
}

id objc_msgSend_requestRouteSummary(void *a1, const char *a2, ...)
{
  return _[a1 requestRouteSummary];
}

id objc_msgSend_requestScan(void *a1, const char *a2, ...)
{
  return _[a1 requestScan];
}

id objc_msgSend_requestSingleShotMiLoPredictionForClient_withServiceIdentifier_withRequestIdentifier_withConnectionToken_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "requestSingleShotMiLoPredictionForClient:withServiceIdentifier:withRequestIdentifier:withConnectionToken:");
}

id objc_msgSend_requestStartUpdatingMicroLocationForClient_withServiceIdentifier_withRequestIdentifier_withConfiguration_withConnectionToken_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "requestStartUpdatingMicroLocationForClient:withServiceIdentifier:withRequestIdentifier:withConfiguration:withConnectionToken:");
}

id objc_msgSend_requestStateForRegion_(void *a1, const char *a2, ...)
{
  return [a1 requestStateForRegion:];
}

id objc_msgSend_requestStatusAtFirstUserResponse(void *a1, const char *a2, ...)
{
  return _[a1 requestStatusAtFirstUserResponse];
}

id objc_msgSend_requestStopUpdatingMicroLocationForClient_withServiceIdentifier_withRequestIdentifier_withConnectionToken_(void *a1, const char *a2, ...)
{
  return [a1 requestStopUpdatingMicroLocationForClient:withServiceIdentifier:withRequestIdentifier:withConnectionToken:];
}

id objc_msgSend_requestTileDownloadByType_lat_lon_seckey_details_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "requestTileDownloadByType:lat:lon:seckey:details:");
}

id objc_msgSend_requestTileDownloadByType_path_details_(void *a1, const char *a2, ...)
{
  return [a1 requestTileDownloadByType:path:details:];
}

id objc_msgSend_requestTileDownloadForLat_lon_details_(void *a1, const char *a2, ...)
{
  return [a1 requestTileDownloadForLat:lon:details:];
}

id objc_msgSend_requestTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 requestTimestamp];
}

id objc_msgSend_requestTokenForTopic_identifier_(void *a1, const char *a2, ...)
{
  return [a1 requestTokenForTopic:identifier:];
}

id objc_msgSend_requestTransitSummary(void *a1, const char *a2, ...)
{
  return _[a1 requestTransitSummary];
}

id objc_msgSend_requestTransitionToLocationState_(void *a1, const char *a2, ...)
{
  return [a1 requestTransitionToLocationState:];
}

id objc_msgSend_requestTransmissionTime(void *a1, const char *a2, ...)
{
  return _[a1 requestTransmissionTime];
}

id objc_msgSend_requestTypeCode(void *a1, const char *a2, ...)
{
  return _[a1 requestTypeCode];
}

id objc_msgSend_requestWithURL_(void *a1, const char *a2, ...)
{
  return [a1 requestWithURL:];
}

id objc_msgSend_requestedScanType(void *a1, const char *a2, ...)
{
  return _[a1 requestedScanType];
}

id objc_msgSend_requestsGpsAssistance(void *a1, const char *a2, ...)
{
  return _[a1 requestsGpsAssistance];
}

id objc_msgSend_requireNetworkAgentWithDomain_type_(void *a1, const char *a2, ...)
{
  return [a1 requireNetworkAgentWithDomain:type:];
}

id objc_msgSend_requiresMutex(void *a1, const char *a2, ...)
{
  return _[a1 requiresMutex];
}

id objc_msgSend_requiresSecureCoding(void *a1, const char *a2, ...)
{
  return _[a1 requiresSecureCoding];
}

id objc_msgSend_rereadConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 rereadConfiguration:];
}

id objc_msgSend_reregisterDevice(void *a1, const char *a2, ...)
{
  return _[a1 reregisterDevice];
}

id objc_msgSend_reschedule(void *a1, const char *a2, ...)
{
  return _[a1 reschedule];
}

id objc_msgSend_resendMotionStateTimer(void *a1, const char *a2, ...)
{
  return _[a1 resendMotionStateTimer];
}

id objc_msgSend_resendTimer(void *a1, const char *a2, ...)
{
  return _[a1 resendTimer];
}

id objc_msgSend_reserved(void *a1, const char *a2, ...)
{
  return _[a1 reserved];
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return _[a1 reset];
}

id objc_msgSend_reset_(void *a1, const char *a2, ...)
{
  return [a1 reset:];
}

id objc_msgSend_resetAnalytics(void *a1, const char *a2, ...)
{
  return _[a1 resetAnalytics];
}

id objc_msgSend_resetAnalyticsCache(void *a1, const char *a2, ...)
{
  return _[a1 resetAnalyticsCache];
}

id objc_msgSend_resetAsNotifcation(void *a1, const char *a2, ...)
{
  return _[a1 resetAsNotifcation];
}

id objc_msgSend_resetBOMScanIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 resetBOMScanIfNeeded];
}

id objc_msgSend_resetBodyMetrics(void *a1, const char *a2, ...)
{
  return _[a1 resetBodyMetrics];
}

id objc_msgSend_resetBytesInRange_(void *a1, const char *a2, ...)
{
  return [a1 resetBytesInRange:];
}

id objc_msgSend_resetCardioChangeEstimationActivity_withDelay_(void *a1, const char *a2, ...)
{
  return [a1 resetCardioChangeEstimationActivity:withDelay:];
}

id objc_msgSend_resetClient_(void *a1, const char *a2, ...)
{
  return [a1 resetClient:];
}

id objc_msgSend_resetClients(void *a1, const char *a2, ...)
{
  return _[a1 resetClients];
}

id objc_msgSend_resetControlPlaneStatus(void *a1, const char *a2, ...)
{
  return _[a1 resetControlPlaneStatus];
}

id objc_msgSend_resetCoreAnalyticsTimer(void *a1, const char *a2, ...)
{
  return _[a1 resetCoreAnalyticsTimer];
}

id objc_msgSend_resetDaemonPartOfCondition(void *a1, const char *a2, ...)
{
  return _[a1 resetDaemonPartOfCondition];
}

id objc_msgSend_resetDailyStats(void *a1, const char *a2, ...)
{
  return _[a1 resetDailyStats];
}

id objc_msgSend_resetDeviceConnections_(void *a1, const char *a2, ...)
{
  return [a1 resetDeviceConnections:];
}

id objc_msgSend_resetHawkeyeTask(void *a1, const char *a2, ...)
{
  return _[a1 resetHawkeyeTask];
}

id objc_msgSend_resetHeleMaintMetrics(void *a1, const char *a2, ...)
{
  return _[a1 resetHeleMaintMetrics];
}

id objc_msgSend_resetHistoricalStates(void *a1, const char *a2, ...)
{
  return _[a1 resetHistoricalStates];
}

id objc_msgSend_resetInVisitRebasedMslp(void *a1, const char *a2, ...)
{
  return _[a1 resetInVisitRebasedMslp];
}

id objc_msgSend_resetKeychainItem(void *a1, const char *a2, ...)
{
  return _[a1 resetKeychainItem];
}

id objc_msgSend_resetLeashState(void *a1, const char *a2, ...)
{
  return _[a1 resetLeashState];
}

id objc_msgSend_resetModemWithReason_(void *a1, const char *a2, ...)
{
  return [a1 resetModemWithReason:];
}

id objc_msgSend_resetNavModeEstimator(void *a1, const char *a2, ...)
{
  return _[a1 resetNavModeEstimator];
}

id objc_msgSend_resetNotificationConsumedForIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 resetNotificationConsumedForIdentifier:];
}

id objc_msgSend_resetQueryState(void *a1, const char *a2, ...)
{
  return _[a1 resetQueryState];
}

id objc_msgSend_resetRecoveryMode(void *a1, const char *a2, ...)
{
  return _[a1 resetRecoveryMode];
}

id objc_msgSend_resetRetrocomputePreProcessingActivity_withDelay_(void *a1, const char *a2, ...)
{
  return [a1 resetRetrocomputePreProcessingActivity:withDelay:];
}

id objc_msgSend_resetRetryCounters_(void *a1, const char *a2, ...)
{
  return [a1 resetRetryCounters:];
}

id objc_msgSend_resetStats(void *a1, const char *a2, ...)
{
  return _[a1 resetStats];
}

id objc_msgSend_resetStoredCalibrations(void *a1, const char *a2, ...)
{
  return _[a1 resetStoredCalibrations];
}

id objc_msgSend_resetSyncActivity_withDelay_(void *a1, const char *a2, ...)
{
  return [a1 resetSyncActivity:withDelay:];
}

id objc_msgSend_resetSyncStateKeysRetainingResetKeys_(void *a1, const char *a2, ...)
{
  return [a1 resetSyncStateKeysRetainingResetKeys:];
}

id objc_msgSend_resetUserProfileForKeys_(void *a1, const char *a2, ...)
{
  return [a1 resetUserProfileForKeys:];
}

id objc_msgSend_resetVehicularFalsePositiveSuppressionDnd(void *a1, const char *a2, ...)
{
  return _[a1 resetVehicularFalsePositiveSuppressionDnd];
}

id objc_msgSend_resetWeeklyRiskModuleComputeTime(void *a1, const char *a2, ...)
{
  return _[a1 resetWeeklyRiskModuleComputeTime];
}

id objc_msgSend_resetWithDate_(void *a1, const char *a2, ...)
{
  return [a1 resetWithDate:];
}

id objc_msgSend_resetWithTime_(void *a1, const char *a2, ...)
{
  return [a1 resetWithTime:];
}

id objc_msgSend_residualDistanceToPreviousVisit(void *a1, const char *a2, ...)
{
  return _[a1 residualDistanceToPreviousVisit];
}

id objc_msgSend_resolution(void *a1, const char *a2, ...)
{
  return _[a1 resolution];
}

id objc_msgSend_resolveAndUpdateTADeviceRecordStatusFor_withCompletion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "resolveAndUpdateTADeviceRecordStatusFor:withCompletion:");
}

id objc_msgSend_resolveNewScanTypeWithNewContext_(void *a1, const char *a2, ...)
{
  return [a1 resolveNewScanTypeWithNewContext:];
}

id objc_msgSend_response(void *a1, const char *a2, ...)
{
  return _[a1 response];
}

id objc_msgSend_responseWithAck_forMessage_(void *a1, const char *a2, ...)
{
  return [a1 responseWithAck:forMessage:];
}

id objc_msgSend_restartConnectionAttemptToDevice_(void *a1, const char *a2, ...)
{
  return [a1 restartConnectionAttemptToDevice:];
}

id objc_msgSend_restartMaintenanceConnections(void *a1, const char *a2, ...)
{
  return _[a1 restartMaintenanceConnections];
}

id objc_msgSend_restartTimer(void *a1, const char *a2, ...)
{
  return _[a1 restartTimer];
}

id objc_msgSend_restrictedMode(void *a1, const char *a2, ...)
{
  return _[a1 restrictedMode];
}

id objc_msgSend_resultPoseRotation(void *a1, const char *a2, ...)
{
  return _[a1 resultPoseRotation];
}

id objc_msgSend_resultPoseTranslation(void *a1, const char *a2, ...)
{
  return _[a1 resultPoseTranslation];
}

id objc_msgSend_resultProviderID(void *a1, const char *a2, ...)
{
  return _[a1 resultProviderID];
}

id objc_msgSend_results(void *a1, const char *a2, ...)
{
  return _[a1 results];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_resume_(void *a1, const char *a2, ...)
{
  return [a1 resume:];
}

id objc_msgSend_resumeAfterPendingStepCountNotifications(void *a1, const char *a2, ...)
{
  return _[a1 resumeAfterPendingStepCountNotifications];
}

id objc_msgSend_resumeEvent_bounce(void *a1, const char *a2, ...)
{
  return [a1 resumeEvent_bounce];
}

id objc_msgSend_resumeWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 resumeWithCompletion:];
}

id objc_msgSend_resumeWorkout_(void *a1, const char *a2, ...)
{
  return [a1 resumeWorkout:];
}

id objc_msgSend_retireClient_(void *a1, const char *a2, ...)
{
  return [a1 retireClient:];
}

id objc_msgSend_retireServiceWithName_(void *a1, const char *a2, ...)
{
  return [a1 retireServiceWithName:];
}

id objc_msgSend_retrieveAllActiveGeofences(void *a1, const char *a2, ...)
{
  return _[a1 retrieveAllActiveGeofences];
}

id objc_msgSend_retrieveBiasInfo(void *a1, const char *a2, ...)
{
  return _[a1 retrieveBiasInfo];
}

id objc_msgSend_retrieveCachedSubmersionState(void *a1, const char *a2, ...)
{
  return _[a1 retrieveCachedSubmersionState];
}

id objc_msgSend_retrieveCachedSurfacePressure(void *a1, const char *a2, ...)
{
  return _[a1 retrieveCachedSurfacePressure];
}

id objc_msgSend_retrieveLastPushedTime(void *a1, const char *a2, ...)
{
  return _[a1 retrieveLastPushedTime];
}

id objc_msgSend_retrieveLocationRelevancyDurationWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "retrieveLocationRelevancyDurationWithCompletionHandler:");
}

id objc_msgSend_retrieveLogsHawkeyeTask(void *a1, const char *a2, ...)
{
  return _[a1 retrieveLogsHawkeyeTask];
}

id objc_msgSend_retrieveMeanSeaLevelPressureEstimatorState(void *a1, const char *a2, ...)
{
  return _[a1 retrieveMeanSeaLevelPressureEstimatorState];
}

id objc_msgSend_retrieveOwnerLocationsDuringValidationPeriod_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "retrieveOwnerLocationsDuringValidationPeriod:completion:")];
}

id objc_msgSend_retrievePeripheralWithAddress_(void *a1, const char *a2, ...)
{
  return [a1 retrievePeripheralWithAddress:];
}

id objc_msgSend_retrieveSupportedResources_subKey_completion_(void *a1, const char *a2, ...)
{
  return [a1 retrieveSupportedResources:subKey:completion:];
}

id objc_msgSend_retrieveSymmetricKey_(void *a1, const char *a2, ...)
{
  return [a1 retrieveSymmetricKey:];
}

id objc_msgSend_retrocomputeForSamples_withRetrocomputeHistory_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "retrocomputeForSamples:withRetrocomputeHistory:");
}

id objc_msgSend_retrocomputeSession_withHealthKitSample_withRetrocomputeHistory_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "retrocomputeSession:withHealthKitSample:withRetrocomputeHistory:");
}

id objc_msgSend_retrocomputeStatusClients(void *a1, const char *a2, ...)
{
  return _[a1 retrocomputeStatusClients];
}

id objc_msgSend_retryActivityForEncryptionClass_reason_(void *a1, const char *a2, ...)
{
  return [a1 retryActivityForEncryptionClass:reason:];
}

id objc_msgSend_retryHealthKitDeleteSamples(void *a1, const char *a2, ...)
{
  return _[a1 retryHealthKitDeleteSamples];
}

id objc_msgSend_retryTriggerRetrocompute(void *a1, const char *a2, ...)
{
  return _[a1 retryTriggerRetrocompute];
}

id objc_msgSend_returnTypes(void *a1, const char *a2, ...)
{
  return _[a1 returnTypes];
}

id objc_msgSend_returnTypes_(void *a1, const char *a2, ...)
{
  return [a1 returnTypes:];
}

id objc_msgSend_reunionSyncDidComplete_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "reunionSyncDidComplete:");
}

id objc_msgSend_reunionSyncListPaths(void *a1, const char *a2, ...)
{
  return _[a1 reunionSyncListPaths];
}

id objc_msgSend_reunionSyncLists(void *a1, const char *a2, ...)
{
  return _[a1 reunionSyncLists];
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 reverseObjectEnumerator];
}

id objc_msgSend_revertToUnknownTimer(void *a1, const char *a2, ...)
{
  return _[a1 revertToUnknownTimer];
}

id objc_msgSend_roadClass(void *a1, const char *a2, ...)
{
  return _[a1 roadClass];
}

id objc_msgSend_roadID(void *a1, const char *a2, ...)
{
  return _[a1 roadID];
}

id objc_msgSend_roamAllowed(void *a1, const char *a2, ...)
{
  return _[a1 roamAllowed];
}

id objc_msgSend_rollWildKeyCommand(void *a1, const char *a2, ...)
{
  return _[a1 rollWildKeyCommand];
}

id objc_msgSend_rollWildKeyTask(void *a1, const char *a2, ...)
{
  return _[a1 rollWildKeyTask];
}

id objc_msgSend_roseAPVersion(void *a1, const char *a2, ...)
{
  return _[a1 roseAPVersion];
}

id objc_msgSend_roseDSPVersion(void *a1, const char *a2, ...)
{
  return _[a1 roseDSPVersion];
}

id objc_msgSend_rotateArbitraryToTrueNorth(void *a1, const char *a2, ...)
{
  return _[a1 rotateArbitraryToTrueNorth];
}

id objc_msgSend_rotateSecondaryFile(void *a1, const char *a2, ...)
{
  return _[a1 rotateSecondaryFile];
}

id objc_msgSend_rotateWithAxis_angle_originVector_(void *a1, const char *a2, ...)
{
  return [a1 rotateWithAxis:x0 angle:x1 originVector:x2];
}

id objc_msgSend_rotationRate(void *a1, const char *a2, ...)
{
  return _[a1 rotationRate];
}

id objc_msgSend_routeHintWatchdogTimer(void *a1, const char *a2, ...)
{
  return _[a1 routeHintWatchdogTimer];
}

id objc_msgSend_routineManager(void *a1, const char *a2, ...)
{
  return _[a1 routineManager];
}

id objc_msgSend_routineMonitor(void *a1, const char *a2, ...)
{
  return _[a1 routineMonitor];
}

id objc_msgSend_rowingModel(void *a1, const char *a2, ...)
{
  return _[a1 rowingModel];
}

id objc_msgSend_rscp(void *a1, const char *a2, ...)
{
  return _[a1 rscp];
}

id objc_msgSend_rsrp(void *a1, const char *a2, ...)
{
  return _[a1 rsrp];
}

id objc_msgSend_rssi(void *a1, const char *a2, ...)
{
  return _[a1 rssi];
}

id objc_msgSend_rtKitVersion(void *a1, const char *a2, ...)
{
  return _[a1 rtKitVersion];
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return _[a1 run];
}

id objc_msgSend_runAggregationForStagingTables(void *a1, const char *a2, ...)
{
  return _[a1 runAggregationForStagingTables];
}

id objc_msgSend_runNextPendingQuery(void *a1, const char *a2, ...)
{
  return _[a1 runNextPendingQuery];
}

id objc_msgSend_runWithConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 runWithConfiguration:];
}

id objc_msgSend_running(void *a1, const char *a2, ...)
{
  return _[a1 running];
}

id objc_msgSend_runningFindMyCertificationAssistant(void *a1, const char *a2, ...)
{
  return _[a1 runningFindMyCertificationAssistant];
}

id objc_msgSend_runningToNonFitnessSeconds(void *a1, const char *a2, ...)
{
  return _[a1 runningToNonFitnessSeconds];
}

id objc_msgSend_sampleCount(void *a1, const char *a2, ...)
{
  return _[a1 sampleCount];
}

id objc_msgSend_sampleInterval_s(void *a1, const char *a2, ...)
{
  return [a1 sampleInterval_s];
}

id objc_msgSend_sampleRate(void *a1, const char *a2, ...)
{
  return _[a1 sampleRate];
}

id objc_msgSend_sampleShouldBeWrittenToHK_(void *a1, const char *a2, ...)
{
  return [a1 sampleShouldBeWrittenToHK:];
}

id objc_msgSend_sampleType(void *a1, const char *a2, ...)
{
  return _[a1 sampleType];
}

id objc_msgSend_samples(void *a1, const char *a2, ...)
{
  return _[a1 samples];
}

id objc_msgSend_saveBeaconPayloads_completion_(void *a1, const char *a2, ...)
{
  return [a1 saveBeaconPayloads:completion:];
}

id objc_msgSend_saveBiasInfo(void *a1, const char *a2, ...)
{
  return _[a1 saveBiasInfo];
}

id objc_msgSend_saveCachedSubmersionState_(void *a1, const char *a2, ...)
{
  return [a1 saveCachedSubmersionState:];
}

id objc_msgSend_saveCachedSurfacePressure_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "saveCachedSurfacePressure:");
}

id objc_msgSend_saveCardioFitnessEventWithValue_threshold_dateInterval_options_completion_(void *a1, const char *a2, ...)
{
  return [a1 saveCardioFitnessEventWithValue:x0 threshold:x1 dateInterval:x2 options:x3 completion:x4];
}

id objc_msgSend_saveCurrentSyncProgress(void *a1, const char *a2, ...)
{
  return _[a1 saveCurrentSyncProgress];
}

id objc_msgSend_saveFeaturesToCache_(void *a1, const char *a2, ...)
{
  return [a1 saveFeaturesToCache:];
}

id objc_msgSend_saveInVisitRebasedMslpToPlist(void *a1, const char *a2, ...)
{
  return _[a1 saveInVisitRebasedMslpToPlist];
}

id objc_msgSend_saveInVisitStateToPlist(void *a1, const char *a2, ...)
{
  return _[a1 saveInVisitStateToPlist];
}

id objc_msgSend_saveInputsAndOutputsForSessionId_(void *a1, const char *a2, ...)
{
  return [a1 saveInputsAndOutputsForSessionId:];
}

id objc_msgSend_saveLastPushedTime_(void *a1, const char *a2, ...)
{
  return [a1 saveLastPushedTime:];
}

id objc_msgSend_saveMeanSeaLevelPressureArrayToPlist(void *a1, const char *a2, ...)
{
  return _[a1 saveMeanSeaLevelPressureArrayToPlist];
}

id objc_msgSend_saveObject_withCompletion_(void *a1, const char *a2, ...)
{
  return [a1 saveObject:withCompletion:];
}

id objc_msgSend_saveObjects_withCompletion_(void *a1, const char *a2, ...)
{
  return [a1 saveObjects:withCompletion:];
}

id objc_msgSend_saveRecentMeanSeaLevelPressureArrayToPlist(void *a1, const char *a2, ...)
{
  return _[a1 saveRecentMeanSeaLevelPressureArrayToPlist];
}

id objc_msgSend_saveRetrocomputedOutputs(void *a1, const char *a2, ...)
{
  return _[a1 saveRetrocomputedOutputs];
}

id objc_msgSend_saveStagingOutputToHealthKit_activity_(void *a1, const char *a2, ...)
{
  return [a1 saveStagingOutputToHealthKit:activity:];
}

id objc_msgSend_saveStats_(void *a1, const char *a2, ...)
{
  return [a1 saveStats:];
}

id objc_msgSend_savedRecords(void *a1, const char *a2, ...)
{
  return _[a1 savedRecords];
}

id objc_msgSend_savedZones(void *a1, const char *a2, ...)
{
  return _[a1 savedZones];
}

id objc_msgSend_scanAonDutyCycle(void *a1, const char *a2, ...)
{
  return _[a1 scanAonDutyCycle];
}

id objc_msgSend_scanBackoffTimeout(void *a1, const char *a2, ...)
{
  return _[a1 scanBackoffTimeout];
}

id objc_msgSend_scanDate(void *a1, const char *a2, ...)
{
  return _[a1 scanDate];
}

id objc_msgSend_scanDeliveryDelayTimer(void *a1, const char *a2, ...)
{
  return _[a1 scanDeliveryDelayTimer];
}

id objc_msgSend_scanDutyCycle(void *a1, const char *a2, ...)
{
  return _[a1 scanDutyCycle];
}

id objc_msgSend_scanEnabled(void *a1, const char *a2, ...)
{
  return _[a1 scanEnabled];
}

id objc_msgSend_scanEvents_atTime_(void *a1, const char *a2, ...)
{
  return [a1 scanEvents:atTime:];
}

id objc_msgSend_scanFlags(void *a1, const char *a2, ...)
{
  return _[a1 scanFlags];
}

id objc_msgSend_scanForPeripheralsWithServices_options_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "scanForPeripheralsWithServices:options:completion:");
}

id objc_msgSend_scanForceNoAopPolicy(void *a1, const char *a2, ...)
{
  return _[a1 scanForceNoAopPolicy];
}

id objc_msgSend_scanForceScreenOffOnly(void *a1, const char *a2, ...)
{
  return _[a1 scanForceScreenOffOnly];
}

id objc_msgSend_scanHexInt_(void *a1, const char *a2, ...)
{
  return [a1 scanHexInt:];
}

id objc_msgSend_scanPeriodicInterval(void *a1, const char *a2, ...)
{
  return _[a1 scanPeriodicInterval];
}

id objc_msgSend_scanSessionStartTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 scanSessionStartTimestamp];
}

id objc_msgSend_scanTimer(void *a1, const char *a2, ...)
{
  return _[a1 scanTimer];
}

id objc_msgSend_scanTypeUpdated_(void *a1, const char *a2, ...)
{
  return [a1 scanTypeUpdated:];
}

id objc_msgSend_scanWithDuplicates(void *a1, const char *a2, ...)
{
  return _[a1 scanWithDuplicates];
}

id objc_msgSend_scannerWithString_(void *a1, const char *a2, ...)
{
  return [a1 scannerWithString:];
}

id objc_msgSend_scdmaCellTowerAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 scdmaCellTowerAtIndex:];
}

id objc_msgSend_scdmaCellTowers(void *a1, const char *a2, ...)
{
  return _[a1 scdmaCellTowers];
}

id objc_msgSend_scdmaCellTowersCount(void *a1, const char *a2, ...)
{
  return _[a1 scdmaCellTowersCount];
}

id objc_msgSend_scenarioTriggerClients(void *a1, const char *a2, ...)
{
  return _[a1 scenarioTriggerClients];
}

id objc_msgSend_scheduleAISFetchTimeoutForDevice_(void *a1, const char *a2, ...)
{
  return [a1 scheduleAISFetchTimeoutForDevice:];
}

id objc_msgSend_scheduleActiveTaskTimeout_forTask_(void *a1, const char *a2, ...)
{
  return [a1 scheduleActiveTaskTimeout:forTask:];
}

id objc_msgSend_scheduleAppUninstallationCheck(void *a1, const char *a2, ...)
{
  return _[a1 scheduleAppUninstallationCheck];
}

id objc_msgSend_scheduleBackgroundTask(void *a1, const char *a2, ...)
{
  return _[a1 scheduleBackgroundTask];
}

id objc_msgSend_scheduleChangeEstimation(void *a1, const char *a2, ...)
{
  return _[a1 scheduleChangeEstimation];
}

id objc_msgSend_scheduleConnectionEvaluationForDevice_(void *a1, const char *a2, ...)
{
  return [a1 scheduleConnectionEvaluationForDevice:];
}

id objc_msgSend_scheduleConnectionTimeout_toDevice_forPeripeheral_(void *a1, const char *a2, ...)
{
  return [a1 scheduleConnectionTimeout:toDevice:forPeripeheral:];
}

id objc_msgSend_scheduleDailyAggregateFeatureCompute(void *a1, const char *a2, ...)
{
  return _[a1 scheduleDailyAggregateFeatureCompute];
}

id objc_msgSend_scheduleDailyResetBOMScan(void *a1, const char *a2, ...)
{
  return _[a1 scheduleDailyResetBOMScan];
}

id objc_msgSend_scheduleDisconnectionOnMissingBeaconWithUUID_(void *a1, const char *a2, ...)
{
  return [a1 scheduleDisconnectionOnMissingBeaconWithUUID:];
}

id objc_msgSend_scheduleDownloadsWithCellularConnectivity(void *a1, const char *a2, ...)
{
  return _[a1 scheduleDownloadsWithCellularConnectivity];
}

id objc_msgSend_scheduleDownloadsWithWifiConnectivity(void *a1, const char *a2, ...)
{
  return _[a1 scheduleDownloadsWithWifiConnectivity];
}

id objc_msgSend_scheduleEstimate(void *a1, const char *a2, ...)
{
  return _[a1 scheduleEstimate];
}

id objc_msgSend_scheduleInQueue_(void *a1, const char *a2, ...)
{
  return [a1 scheduleInQueue:];
}

id objc_msgSend_scheduleInRunLoop_(void *a1, const char *a2, ...)
{
  return [a1 scheduleInRunLoop:];
}

id objc_msgSend_scheduleLatencyTimeout_(void *a1, const char *a2, ...)
{
  return [a1 scheduleLatencyTimeout:];
}

id objc_msgSend_schedulePreemptedTaskTimeout_forTask_(void *a1, const char *a2, ...)
{
  return [a1 schedulePreemptedTaskTimeout:forTask:];
}

id objc_msgSend_scheduleRetrocomputePreprocessing(void *a1, const char *a2, ...)
{
  return _[a1 scheduleRetrocomputePreprocessing];
}

id objc_msgSend_scheduleStart(void *a1, const char *a2, ...)
{
  return _[a1 scheduleStart];
}

id objc_msgSend_scheduleStop_withHandler_(void *a1, const char *a2, ...)
{
  return [a1 scheduleStop:withHandler:];
}

id objc_msgSend_scheduleTimeout_forTaskUuid_withBlock_dictionary_(void *a1, const char *a2, ...)
{
  return [a1 scheduleTimeout:forTaskUuid:withBlock:dictionary:];
}

id objc_msgSend_scheduleTokenFetchTimeoutForDevice_(void *a1, const char *a2, ...)
{
  return [a1 scheduleTokenFetchTimeoutForDevice:];
}

id objc_msgSend_scheduleWeeklyRiskModelCompute(void *a1, const char *a2, ...)
{
  return _[a1 scheduleWeeklyRiskModelCompute];
}

id objc_msgSend_scheduledArrival(void *a1, const char *a2, ...)
{
  return _[a1 scheduledArrival];
}

id objc_msgSend_scheduledDeparture(void *a1, const char *a2, ...)
{
  return _[a1 scheduledDeparture];
}

id objc_msgSend_scheduledLinks(void *a1, const char *a2, ...)
{
  return _[a1 scheduledLinks];
}

id objc_msgSend_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return [a1 scheduledTimerWithTimeInterval:x0 target:x1 selector:x2 userInfo:x3 repeats:x4];
}

id objc_msgSend_scheme(void *a1, const char *a2, ...)
{
  return _[a1 scheme];
}

id objc_msgSend_score(void *a1, const char *a2, ...)
{
  return _[a1 score];
}

id objc_msgSend_secItemFormatToDictionary_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "secItemFormatToDictionary:");
}

id objc_msgSend_second(void *a1, const char *a2, ...)
{
  return _[a1 second];
}

id objc_msgSend_secondUnit(void *a1, const char *a2, ...)
{
  return _[a1 secondUnit];
}

id objc_msgSend_secondaryDataSize(void *a1, const char *a2, ...)
{
  return _[a1 secondaryDataSize];
}

id objc_msgSend_secondaryFileHandle(void *a1, const char *a2, ...)
{
  return _[a1 secondaryFileHandle];
}

id objc_msgSend_secondaryFileURLs(void *a1, const char *a2, ...)
{
  return _[a1 secondaryFileURLs];
}

id objc_msgSend_secondaryIndex(void *a1, const char *a2, ...)
{
  return _[a1 secondaryIndex];
}

id objc_msgSend_secondsFromGMT(void *a1, const char *a2, ...)
{
  return _[a1 secondsFromGMT];
}

id objc_msgSend_secondsFromGMTForDate_(void *a1, const char *a2, ...)
{
  return [a1 secondsFromGMTForDate:x0];
}

id objc_msgSend_secondsFromLastQuarterHour(void *a1, const char *a2, ...)
{
  return _[a1 secondsFromLastQuarterHour];
}

id objc_msgSend_secondsSinceLastDisconnection(void *a1, const char *a2, ...)
{
  return _[a1 secondsSinceLastDisconnection];
}

id objc_msgSend_secondsSinceLastProactiveMaintenanceAttempt(void *a1, const char *a2, ...)
{
  return _[a1 secondsSinceLastProactiveMaintenanceAttempt];
}

id objc_msgSend_sections(void *a1, const char *a2, ...)
{
  return _[a1 sections];
}

id objc_msgSend_sedentaryAlarmData(void *a1, const char *a2, ...)
{
  return _[a1 sedentaryAlarmData];
}

id objc_msgSend_seekToEndOfFile(void *a1, const char *a2, ...)
{
  return _[a1 seekToEndOfFile];
}

id objc_msgSend_seekToFileOffset_(void *a1, const char *a2, ...)
{
  return [a1 seekToFileOffset:];
}

id objc_msgSend_selectModels(void *a1, const char *a2, ...)
{
  return _[a1 selectModels];
}

id objc_msgSend_selectReferenceWithReference_withBaroElevation_betweenStartTime_andEndTime_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "selectReferenceWithReference:withBaroElevation:betweenStartTime:andEndTime:");
}

id objc_msgSend_semanticModeIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 semanticModeIdentifier];
}

id objc_msgSend_sendARSessionState_fromClient_(void *a1, const char *a2, ...)
{
  return [a1 sendARSessionState:fromClient:];
}

id objc_msgSend_sendAliveAgainMessage(void *a1, const char *a2, ...)
{
  return _[a1 sendAliveAgainMessage];
}

id objc_msgSend_sendAllUsageSyncData(void *a1, const char *a2, ...)
{
  return _[a1 sendAllUsageSyncData];
}

id objc_msgSend_sendAnalytics(void *a1, const char *a2, ...)
{
  return _[a1 sendAnalytics];
}

id objc_msgSend_sendAnalyticsBoutMetrics_(void *a1, const char *a2, ...)
{
  return [a1 sendAnalyticsBoutMetrics:];
}

id objc_msgSend_sendAnalyticsEventForId_(void *a1, const char *a2, ...)
{
  return [a1 sendAnalyticsEventForId:];
}

id objc_msgSend_sendAnalyticsEventWithXpcTaskWaitingTime_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sendAnalyticsEventWithXpcTaskWaitingTime:");
}

id objc_msgSend_sendAnalyticsForAllReadySessions(void *a1, const char *a2, ...)
{
  return _[a1 sendAnalyticsForAllReadySessions];
}

id objc_msgSend_sendAnalyticsSteadinessResult_(void *a1, const char *a2, ...)
{
  return [a1 sendAnalyticsSteadinessResult:];
}

id objc_msgSend_sendAnalyticsWeeklyEstimate_strideCalInfo_walkingWorkoutPaceStats_runningWorkoutPaceStats_userInfo_(void *a1, const char *a2, ...)
{
  return [a1 sendAnalyticsWeeklyEstimate:x0 strideCalInfo:x1 walkingWorkoutPaceStats:x2 runningWorkoutPaceStats:x3 userInfo:x4];
}

id objc_msgSend_sendBinarySMS_trackingID_(void *a1, const char *a2, ...)
{
  return [a1 sendBinarySMS:trackingID:];
}

id objc_msgSend_sendBufferedScanNotifications(void *a1, const char *a2, ...)
{
  return _[a1 sendBufferedScanNotifications];
}

id objc_msgSend_sendCAMetric_(void *a1, const char *a2, ...)
{
  return [a1 sendCAMetric:];
}

id objc_msgSend_sendClientRegisterAnalyticsWithCurrentUncertainty_andTime_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sendClientRegisterAnalyticsWithCurrentUncertainty:andTime:");
}

id objc_msgSend_sendCompanionData_activity_(void *a1, const char *a2, ...)
{
  return [a1 sendCompanionData:activity:];
}

id objc_msgSend_sendCompanionSyncAnalyticsWithMsgSize_isSuccess_isActivityDeferred_isActivityValid_isWatchPaired_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sendCompanionSyncAnalyticsWithMsgSize:isSuccess:isActivityDeferred:isActivityValid:isWatchPaired:");
}

id objc_msgSend_sendConnectionMetric(void *a1, const char *a2, ...)
{
  return _[a1 sendConnectionMetric];
}

id objc_msgSend_sendConnectionMetrics_forDevice_(void *a1, const char *a2, ...)
{
  return [a1 sendConnectionMetrics:forDevice:];
}

id objc_msgSend_sendCoreAnalyticsEvent_(void *a1, const char *a2, ...)
{
  return [a1 sendCoreAnalyticsEvent:];
}

id objc_msgSend_sendData_metaData_start_end_(void *a1, const char *a2, ...)
{
  return [a1 sendData:x0 metaData:x1 start:x2 end:x3];
}

id objc_msgSend_sendData_toPeripheral_(void *a1, const char *a2, ...)
{
  return [a1 sendData:toPeripheral:];
}

id objc_msgSend_sendDictionaryMessage_withOptions_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sendDictionaryMessage:withOptions:");
}

id objc_msgSend_sendDisconnectionMetric(void *a1, const char *a2, ...)
{
  return _[a1 sendDisconnectionMetric];
}

id objc_msgSend_sendDistancePercentageCoreAnalytics(void *a1, const char *a2, ...)
{
  return _[a1 sendDistancePercentageCoreAnalytics];
}

id objc_msgSend_sendElevationsFromEstimates_withCompletionBlock_(void *a1, const char *a2, ...)
{
  return [a1 sendElevationsFromEstimates:withCompletionBlock:];
}

id objc_msgSend_sendEphemeris_(void *a1, const char *a2, ...)
{
  return [a1 sendEphemeris:];
}

id objc_msgSend_sendEphemerisPointDataGpsWeek_gpsTOW_latitude_longitude_accuracy_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sendEphemerisPointDataGpsWeek:gpsTOW:latitude:longitude:accuracy:");
}

id objc_msgSend_sendEstimatedLocationMetricsAfterLocationScanWithFirstEstimatedLocation_newLocation_secondEstimatedLocation_error_timeOfInterest_referenceTime_responseTime_(void *a1, const char *a2, ...)
{
  return [a1 sendEstimatedLocationMetricsAfterLocationScanWithFirstEstimatedLocation:newLocation:secondEstimatedLocation:error:timeOfInterest:referenceTime:responseTime:];
}

id objc_msgSend_sendEstimatedLocationMetricsAtFirstAttemptForEstimatedLocation_estimationError_timeOfInterest_referenceTime_responseTime_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sendEstimatedLocationMetricsAtFirstAttemptForEstimatedLocation:estimationError:timeOfInterest:referenceTime:responseTime:");
}

id objc_msgSend_sendEvent_(void *a1, const char *a2, ...)
{
  return [a1 sendEvent:];
}

id objc_msgSend_sendEventID_event_destinationID_options_completion_(void *a1, const char *a2, ...)
{
  return [a1 sendEventID:x0 event:x1 destinationID:x2 options:x3 completion:x4];
}

id objc_msgSend_sendFirmwareUpdateMetrics_forDevice_(void *a1, const char *a2, ...)
{
  return [a1 sendFirmwareUpdateMetrics:forDevice:];
}

id objc_msgSend_sendFitnessAnalytics_(void *a1, const char *a2, ...)
{
  return [a1 sendFitnessAnalytics:];
}

id objc_msgSend_sendGPRMCDataStatusValueA_ValueV_ValueX_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sendGPRMCDataStatusValueA:ValueV:ValueX:");
}

id objc_msgSend_sendGPRMCDataStatusValues_(void *a1, const char *a2, ...)
{
  return [a1 sendGPRMCDataStatusValues:];
}

id objc_msgSend_sendGPSCoreAnalyticsAndUpdateTime(void *a1, const char *a2, ...)
{
  return _[a1 sendGPSCoreAnalyticsAndUpdateTime];
}

id objc_msgSend_sendGlobalAuthStatus_(void *a1, const char *a2, ...)
{
  return [a1 sendGlobalAuthStatus:];
}

id objc_msgSend_sendGpsWeek_gpsTOW_(void *a1, const char *a2, ...)
{
  return [a1 sendGpsWeek:gpsWeek gpsTOW:gpsTOW];
}

id objc_msgSend_sendHelloSequence(void *a1, const char *a2, ...)
{
  return _[a1 sendHelloSequence];
}

id objc_msgSend_sendInVisit_(void *a1, const char *a2, ...)
{
  return [a1 sendInVisit:];
}

id objc_msgSend_sendLastLocation_error_(void *a1, const char *a2, ...)
{
  return [a1 sendLastLocation:error];
}

id objc_msgSend_sendLocations(void *a1, const char *a2, ...)
{
  return _[a1 sendLocations];
}

id objc_msgSend_sendLocationsWithReply_(void *a1, const char *a2, ...)
{
  return [a1 sendLocationsWithReply:];
}

id objc_msgSend_sendMessage_(void *a1, const char *a2, ...)
{
  return [a1 sendMessage:];
}

id objc_msgSend_sendMessage_forTag_withError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sendMessage:forTag:withError:");
}

id objc_msgSend_sendMessage_forTag_withPayload_(void *a1, const char *a2, ...)
{
  return [a1 sendMessage:forTag:withPayload:];
}

id objc_msgSend_sendMessage_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sendMessage:toDestinations:priority:options:identifier:error:");
}

id objc_msgSend_sendMessage_type_priority_fireAndForget_encrypt_bypassConnectionCheck_timeout_nonWaking_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sendMessage:type:priority:fireAndForget:encrypt:bypassConnectionCheck:timeout:nonWaking:completionHandler:");
}

id objc_msgSend_sendMessage_withReplyClassesSync_(void *a1, const char *a2, ...)
{
  return [a1 sendMessage:withReplyClassesSync:];
}

id objc_msgSend_sendMessageToWatch_identifier_(void *a1, const char *a2, ...)
{
  return [a1 sendMessageToWatch:identifier:];
}

id objc_msgSend_sendMessageWithMessageType_dataPayload_priority_idsOptions_(void *a1, const char *a2, ...)
{
  return [a1 sendMessageWithMessageType:dataPayload:priority:idsOptions:];
}

id objc_msgSend_sendMetrics(void *a1, const char *a2, ...)
{
  return _[a1 sendMetrics];
}

id objc_msgSend_sendMonitorUpdateForDevice_added_(void *a1, const char *a2, ...)
{
  return [a1 sendMonitorUpdateForDevice:added:];
}

id objc_msgSend_sendMotionAlarmRequest(void *a1, const char *a2, ...)
{
  return _[a1 sendMotionAlarmRequest];
}

id objc_msgSend_sendMotionState(void *a1, const char *a2, ...)
{
  return _[a1 sendMotionState];
}

id objc_msgSend_sendNotification_(void *a1, const char *a2, ...)
{
  return [a1 sendNotification:];
}

id objc_msgSend_sendNotificationToClients_notificationData_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sendNotificationToClients:notificationData:");
}

id objc_msgSend_sendObservationForDevice_type_includeLocation_(void *a1, const char *a2, ...)
{
  return [a1 sendObservationForDevice:type:includeLocation:];
}

id objc_msgSend_sendObservationForIdentifier_type_date_location_(void *a1, const char *a2, ...)
{
  return [a1 sendObservationForIdentifier:type:date:location:];
}

id objc_msgSend_sendObservationForIdentifier_type_date_locationDate_includeLocation_locationHandler_(void *a1, const char *a2, ...)
{
  return [a1 sendObservationForIdentifier:x0 type:x1 date:x2 locationDate:x3 includeLocation:x4 locationHandler:x5];
}

id objc_msgSend_sendProtobuf_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return [a1 sendProtobuf:x0 toDestinations:x1 priority:x2 options:x3 identifier:x4 error:x5];
}

id objc_msgSend_sendRebaseAnalyticsWithAltitudeError_andUncertainty_andRefUncertainty_andDemAvailable_andWorkout_andReferenceSource_andCorrection_andDistance_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sendRebaseAnalyticsWithAltitudeError:andUncertainty:andRefUncertainty:andDemAvailable:andWorkout:andReferenceSource:andCorrection:andDistance:");
}

id objc_msgSend_sendReferenceTime_(void *a1, const char *a2, ...)
{
  return [a1 sendReferenceTime:];
}

id objc_msgSend_sendReferenceTime_locationLatitude_longitude_accuracy_(void *a1, const char *a2, ...)
{
  return [a1 sendReferenceTime:x0 locationLatitude:x1 longitude:x2 accuracy:x3];
}

id objc_msgSend_sendRegionEvent_forRegion_(void *a1, const char *a2, ...)
{
  return [a1 sendRegionEvent:forRegion:];
}

id objc_msgSend_sendRequestID_request_destinationID_options_responseHandler_(void *a1, const char *a2, ...)
{
  return [a1 sendRequestID:x0 request:x1 destinationID:x2 options:x3 responseHandler:x4];
}

id objc_msgSend_sendRetroComputeAnalytics(void *a1, const char *a2, ...)
{
  return _[a1 sendRetroComputeAnalytics];
}

id objc_msgSend_sendSMS_withMoreToFollow_trackingID_(void *a1, const char *a2, ...)
{
  return [a1 sendSMS:x0 withMoreToFollow:x1 trackingID:x2];
}

id objc_msgSend_sendSeparationStateForDevice_state_includeLocation_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sendSeparationStateForDevice:state:includeLocation:")];
}

id objc_msgSend_sendSimulatedLocation_(void *a1, const char *a2, ...)
{
  return [a1 sendSimulatedLocation:];
}

id objc_msgSend_sendSimulatedLocationUnavailable(void *a1, const char *a2, ...)
{
  return _[a1 sendSimulatedLocationUnavailable];
}

id objc_msgSend_sendStatusForFences_setBefore_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sendStatusForFences:setBefore:");
}

id objc_msgSend_sendSurfacePressureToAOP_(void *a1, const char *a2, ...)
{
  return [a1 sendSurfacePressureToAOP:];
}

id objc_msgSend_sendTimeInDaylightAnayltics_(void *a1, const char *a2, ...)
{
  return [a1 sendTimeInDaylightAnayltics:];
}

id objc_msgSend_sendToCoreAnalyticsWeeklyEstimate_(void *a1, const char *a2, ...)
{
  return [a1 sendToCoreAnalyticsWeeklyEstimate:];
}

id objc_msgSend_sendTrackAndScheduleNextTick_(void *a1, const char *a2, ...)
{
  return [a1 sendTrackAndScheduleNextTick:];
}

id objc_msgSend_sendTrackFrom_to_location_horrUnc_type_(void *a1, const char *a2, ...)
{
  return [a1 sendTrackFrom:x0 to:x1 location:x2 horrUnc:x3 type:x4];
}

id objc_msgSend_sendUARPMessageTaskWithPayload_(void *a1, const char *a2, ...)
{
  return [a1 sendUARPMessageTaskWithPayload:];
}

id objc_msgSend_sendUpdateToRDIfAllowed_(void *a1, const char *a2, ...)
{
  return [a1 sendUpdateToRDIfAllowed:];
}

id objc_msgSend_sendVIOEstimation_fromClient_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sendVIOEstimation:fromClient:");
}

id objc_msgSend_sendVLLocalizationResult_fromClient_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sendVLLocalizationResult:fromClient:");
}

id objc_msgSend_sendVehicleState(void *a1, const char *a2, ...)
{
  return _[a1 sendVehicleState];
}

id objc_msgSend_sendVisit_(void *a1, const char *a2, ...)
{
  return [a1 sendVisit:];
}

id objc_msgSend_sendVisitExitAnalyticsWithDuration_andRebaseEvent_andUncertaintyAtEntry_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sendVisitExitAnalyticsWithDuration:andRebaseEvent:andUncertaintyAtEntry:");
}

id objc_msgSend_sendVisitExitWifiImprovementAnalyticsEventWithDuration_uncertaintyAtVisitEntry_uncertaintyAtVisitExit_timeDiffBtwArrivalAndLastRebase_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sendVisitExitWifiImprovementAnalyticsEventWithDuration:uncertaintyAtVisitEntry:uncertaintyAtVisitExit:timeDiffBtwArrivalAndLastRebase:");
}

id objc_msgSend_sendVisitsToClient_(void *a1, const char *a2, ...)
{
  return [a1 sendVisitsToClient:];
}

id objc_msgSend_sensorErrorThreshold(void *a1, const char *a2, ...)
{
  return _[a1 sensorErrorThreshold];
}

id objc_msgSend_sensorRecorder(void *a1, const char *a2, ...)
{
  return _[a1 sensorRecorder];
}

id objc_msgSend_sentDatabaseChangesEvent(void *a1, const char *a2, ...)
{
  return _[a1 sentDatabaseChangesEvent];
}

id objc_msgSend_sentRecordZoneChangesEvent(void *a1, const char *a2, ...)
{
  return _[a1 sentRecordZoneChangesEvent];
}

id objc_msgSend_sentRefreshMslpAnalyticsWithAltitudeCorrection_uncertaintyBeforeCurrentRefresh_uncertaintyAfterCurrentRefresh_refreshDuration_xpcWaitingTime_timeDiffBtwRefresh_pressureDelta_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sentRefreshMslpAnalyticsWithAltitudeCorrection:uncertaintyBeforeCurrentRefresh:uncertaintyAfterCurrentRefresh:refreshDuration:xpcWaitingTime:timeDiffBtwRefresh:pressureDelta:");
}

id objc_msgSend_sequence(void *a1, const char *a2, ...)
{
  return _[a1 sequence];
}

id objc_msgSend_serialNumber(void *a1, const char *a2, ...)
{
  return _[a1 serialNumber];
}

id objc_msgSend_serializeMeta_toData_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "serializeMeta:toData:");
}

id objc_msgSend_serialized(void *a1, const char *a2, ...)
{
  return _[a1 serialized];
}

id objc_msgSend_serverTrust(void *a1, const char *a2, ...)
{
  return _[a1 serverTrust];
}

id objc_msgSend_service(void *a1, const char *a2, ...)
{
  return _[a1 service];
}

id objc_msgSend_service_nearbyDevicesChanged_(void *a1, const char *a2, ...)
{
  return [a1 service:nearbyDevicesChanged:];
}

id objc_msgSend_serviceMaskOperator(void *a1, const char *a2, ...)
{
  return _[a1 serviceMaskOperator];
}

id objc_msgSend_serviceTypeMask(void *a1, const char *a2, ...)
{
  return _[a1 serviceTypeMask];
}

id objc_msgSend_serviceUUID(void *a1, const char *a2, ...)
{
  return _[a1 serviceUUID];
}

id objc_msgSend_serviceWithIdentifier_completion_(void *a1, const char *a2, ...)
{
  return [a1 serviceWithIdentifier:completion:];
}

id objc_msgSend_services(void *a1, const char *a2, ...)
{
  return _[a1 services];
}

id objc_msgSend_session(void *a1, const char *a2, ...)
{
  return _[a1 session];
}

id objc_msgSend_sessionAttributes(void *a1, const char *a2, ...)
{
  return _[a1 sessionAttributes];
}

id objc_msgSend_sessionEndPowerLog_(void *a1, const char *a2, ...)
{
  return [a1 sessionEndPowerLog:];
}

id objc_msgSend_sessionForClient_(void *a1, const char *a2, ...)
{
  return [a1 sessionForClient:];
}

id objc_msgSend_sessionForFence_(void *a1, const char *a2, ...)
{
  return [a1 sessionForFence:];
}

id objc_msgSend_sessionHrRecovery(void *a1, const char *a2, ...)
{
  return _[a1 sessionHrRecovery];
}

id objc_msgSend_sessionID(void *a1, const char *a2, ...)
{
  return _[a1 sessionID];
}

id objc_msgSend_sessionId(void *a1, const char *a2, ...)
{
  return _[a1 sessionId];
}

id objc_msgSend_sessionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 sessionIdentifier];
}

id objc_msgSend_sessionMetadata(void *a1, const char *a2, ...)
{
  return _[a1 sessionMetadata];
}

id objc_msgSend_sessionStalenessInterval(void *a1, const char *a2, ...)
{
  return _[a1 sessionStalenessInterval];
}

id objc_msgSend_sessionState(void *a1, const char *a2, ...)
{
  return _[a1 sessionState];
}

id objc_msgSend_sessionStatusReport_(void *a1, const char *a2, ...)
{
  return [a1 sessionStatusReport:];
}

id objc_msgSend_sessionTimer(void *a1, const char *a2, ...)
{
  return _[a1 sessionTimer];
}

id objc_msgSend_sessionType(void *a1, const char *a2, ...)
{
  return _[a1 sessionType];
}

id objc_msgSend_sessionVo2Max(void *a1, const char *a2, ...)
{
  return _[a1 sessionVo2Max];
}

id objc_msgSend_sessionWithConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 sessionWithConfiguration:];
}

id objc_msgSend_sessionWithConfiguration_delegate_delegateQueue_(void *a1, const char *a2, ...)
{
  return [a1 sessionWithConfiguration:x0 delegate:x1 delegateQueue:x2];
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _[a1 set];
}

id objc_msgSend_setAbsoluteWildModeConfigurationTaskWithConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 setAbsoluteWildModeConfigurationTaskWithConfiguration:];
}

id objc_msgSend_setAccelSampleRate_(void *a1, const char *a2, ...)
{
  return [a1 setAccelSampleRate:];
}

id objc_msgSend_setAccelerometerOrientationModeConfigurationCommandWithConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 setAccelerometerOrientationModeConfigurationCommandWithConfiguration:];
}

id objc_msgSend_setAccelerometerOrientationModeConfigurationTaskWithConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 setAccelerometerOrientationModeConfigurationTaskWithConfiguration:];
}

id objc_msgSend_setAccelerometerSlopeModeConfigurationCommandWithConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 setAccelerometerSlopeModeConfigurationCommandWithConfiguration:];
}

id objc_msgSend_setAccelerometerSlopeModeConfigurationTaskWithConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 setAccelerometerSlopeModeConfigurationTaskWithConfiguration:];
}

id objc_msgSend_setAccessoryCapabilities_(void *a1, const char *a2, ...)
{
  return [a1 setAccessoryCapabilities:];
}

id objc_msgSend_setAccessoryCategory_(void *a1, const char *a2, ...)
{
  return [a1 setAccessoryCategory:];
}

id objc_msgSend_setAccessoryMeta_(void *a1, const char *a2, ...)
{
  return [a1 setAccessoryMeta:];
}

id objc_msgSend_setAccessoryName_(void *a1, const char *a2, ...)
{
  return [a1 setAccessoryName:];
}

id objc_msgSend_setAccessoryUUID_(void *a1, const char *a2, ...)
{
  return [a1 setAccessoryUUID:];
}

id objc_msgSend_setAccount_(void *a1, const char *a2, ...)
{
  return [a1 setAccount:];
}

id objc_msgSend_setAccuracy_(void *a1, const char *a2, ...)
{
  return [a1 setAccuracy:];
}

id objc_msgSend_setActionSetName_(void *a1, const char *a2, ...)
{
  return [a1 setActionSetName:];
}

id objc_msgSend_setActionSetType_(void *a1, const char *a2, ...)
{
  return [a1 setActionSetType:];
}

id objc_msgSend_setActionSetUUID_(void *a1, const char *a2, ...)
{
  return [a1 setActionSetUUID:];
}

id objc_msgSend_setActions_(void *a1, const char *a2, ...)
{
  return [a1 setActions:];
}

id objc_msgSend_setActiveAccessory_(void *a1, const char *a2, ...)
{
  return [a1 setActiveAccessory:];
}

id objc_msgSend_setActiveClients_(void *a1, const char *a2, ...)
{
  return [a1 setActiveClients:];
}

id objc_msgSend_setActiveConnectionAttempt_(void *a1, const char *a2, ...)
{
  return [a1 setActiveConnectionAttempt:];
}

id objc_msgSend_setActiveDeviceId_(void *a1, const char *a2, ...)
{
  return [a1 setActiveDeviceId:];
}

id objc_msgSend_setActiveDeviceNearbyStatus_(void *a1, const char *a2, ...)
{
  return [a1 setActiveDeviceNearbyStatus:];
}

id objc_msgSend_setActiveDisplayModes_(void *a1, const char *a2, ...)
{
  return [a1 setActiveDisplayModes:];
}

id objc_msgSend_setActivePairingID_(void *a1, const char *a2, ...)
{
  return [a1 setActivePairingID:];
}

id objc_msgSend_setActivePeripheral_(void *a1, const char *a2, ...)
{
  return [a1 setActivePeripheral:];
}

id objc_msgSend_setActivePeripheral_withError_(void *a1, const char *a2, ...)
{
  return [a1 setActivePeripheral:withError:];
}

id objc_msgSend_setActivePeripheralMaterial_(void *a1, const char *a2, ...)
{
  return [a1 setActivePeripheralMaterial:];
}

id objc_msgSend_setActivePeripheralReady_(void *a1, const char *a2, ...)
{
  return [a1 setActivePeripheralReady:];
}

id objc_msgSend_setActiveRequestCleanupTimer_(void *a1, const char *a2, ...)
{
  return [a1 setActiveRequestCleanupTimer:];
}

id objc_msgSend_setActiveRequests_(void *a1, const char *a2, ...)
{
  return [a1 setActiveRequests:];
}

id objc_msgSend_setActiveTask_(void *a1, const char *a2, ...)
{
  return [a1 setActiveTask:];
}

id objc_msgSend_setActiveTime_(void *a1, const char *a2, ...)
{
  return [a1 setActiveTime:];
}

id objc_msgSend_setActiveVo2maxOverride_(void *a1, const char *a2, ...)
{
  return [a1 setActiveVo2maxOverride:];
}

id objc_msgSend_setActiveWatchSyncSession_(void *a1, const char *a2, ...)
{
  return [a1 setActiveWatchSyncSession:];
}

id objc_msgSend_setActivity_(void *a1, const char *a2, ...)
{
  return [a1 setActivity:];
}

id objc_msgSend_setActivityAsDone_(void *a1, const char *a2, ...)
{
  return [a1 setActivityAsDone:];
}

id objc_msgSend_setActivityDuration_(void *a1, const char *a2, ...)
{
  return [a1 setActivityDuration:];
}

id objc_msgSend_setActivityOverrideMsg_(void *a1, const char *a2, ...)
{
  return [a1 setActivityOverrideMsg:];
}

id objc_msgSend_setActivityType_(void *a1, const char *a2, ...)
{
  return [a1 setActivityType:];
}

id objc_msgSend_setAdamId_(void *a1, const char *a2, ...)
{
  return [a1 setAdamId:];
}

id objc_msgSend_setAdaptedNotifier_(void *a1, const char *a2, ...)
{
  return [a1 setAdaptedNotifier:];
}

id objc_msgSend_setAdapter_(void *a1, const char *a2, ...)
{
  return [a1 setAdapter:];
}

id objc_msgSend_setAdjustedDistance_(void *a1, const char *a2, ...)
{
  return [a1 setAdjustedDistance:];
}

id objc_msgSend_setAdjustedDistanceToFenceBoundary_(void *a1, const char *a2, ...)
{
  return [a1 setAdjustedDistanceToFenceBoundary:];
}

id objc_msgSend_setAdvertiseRate_(void *a1, const char *a2, ...)
{
  return [a1 setAdvertiseRate:];
}

id objc_msgSend_setAge_(void *a1, const char *a2, ...)
{
  return [a1 setAge:];
}

id objc_msgSend_setAgeRating_(void *a1, const char *a2, ...)
{
  return [a1 setAgeRating:];
}

id objc_msgSend_setAggressiveAdvertisingTimeout_(void *a1, const char *a2, ...)
{
  return [a1 setAggressiveAdvertisingTimeout:];
}

id objc_msgSend_setAirplaneMode_(void *a1, const char *a2, ...)
{
  return [a1 setAirplaneMode:];
}

id objc_msgSend_setAirplaneModeEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setAirplaneModeEnabled:];
}

id objc_msgSend_setAirplaySolo_(void *a1, const char *a2, ...)
{
  return [a1 setAirplaySolo:];
}

id objc_msgSend_setAlarmId_(void *a1, const char *a2, ...)
{
  return [a1 setAlarmId:];
}

id objc_msgSend_setAlgorithmVersion_(void *a1, const char *a2, ...)
{
  return [a1 setAlgorithmVersion:];
}

id objc_msgSend_setAlignmentUncertainty_atIndex_date_forBeacon_completion_(void *a1, const char *a2, ...)
{
  return [a1 setAlignmentUncertainty:x0 atIndex:x1 date:x2 forBeacon:x3 completion:x4];
}

id objc_msgSend_setAlignmentUncertainty_atIndex_date_forDevice_(void *a1, const char *a2, ...)
{
  return [a1 setAlignmentUncertainty:x0 atIndex:x1 date:x2 forDevice:x3];
}

id objc_msgSend_setAliveAgainThrottleTimer_(void *a1, const char *a2, ...)
{
  return [a1 setAliveAgainThrottleTimer:];
}

id objc_msgSend_setAllDayHeartRate_(void *a1, const char *a2, ...)
{
  return [a1 setAllDayHeartRate:];
}

id objc_msgSend_setAllMaterials_(void *a1, const char *a2, ...)
{
  return [a1 setAllMaterials:];
}

id objc_msgSend_setAllSessions_(void *a1, const char *a2, ...)
{
  return [a1 setAllSessions:];
}

id objc_msgSend_setAllSuccess_(void *a1, const char *a2, ...)
{
  return [a1 setAllSuccess:];
}

id objc_msgSend_setAllowNetworkTileLoad_(void *a1, const char *a2, ...)
{
  return [a1 setAllowNetworkTileLoad:];
}

id objc_msgSend_setAllowOfflineData_(void *a1, const char *a2, ...)
{
  return [a1 setAllowOfflineData:];
}

id objc_msgSend_setAllowStaleData_(void *a1, const char *a2, ...)
{
  return [a1 setAllowStaleData:];
}

id objc_msgSend_setAllowableAuthorizationMask_forClientKey_(void *a1, const char *a2, ...)
{
  return [a1 setAllowableAuthorizationMask:forClientKey:];
}

id objc_msgSend_setAllowsCellularAccess_(void *a1, const char *a2, ...)
{
  return [a1 setAllowsCellularAccess:];
}

id objc_msgSend_setAllowsExpensiveAccess_(void *a1, const char *a2, ...)
{
  return [a1 setAllowsExpensiveAccess:];
}

id objc_msgSend_setAlternateIdentitiesMap_(void *a1, const char *a2, ...)
{
  return [a1 setAlternateIdentitiesMap:];
}

id objc_msgSend_setAltimeterReleaseTimer(void *a1, const char *a2, ...)
{
  return _[a1 setAltimeterReleaseTimer];
}

id objc_msgSend_setAltitude_(void *a1, const char *a2, ...)
{
  return [a1 setAltitude:];
}

id objc_msgSend_setAltitudeHAEM_(void *a1, const char *a2, ...)
{
  return [a1 setAltitudeHAEM:];
}

id objc_msgSend_setAltitudeHAEUncM_(void *a1, const char *a2, ...)
{
  return [a1 setAltitudeHAEUncM:];
}

id objc_msgSend_setAlwaysBeaconWildState_completion_(void *a1, const char *a2, ...)
{
  return [a1 setAlwaysBeaconWildState:completion:];
}

id objc_msgSend_setAnalyticsManager_(void *a1, const char *a2, ...)
{
  return [a1 setAnalyticsManager:];
}

id objc_msgSend_setApHarvestCount_(void *a1, const char *a2, ...)
{
  return [a1 setApHarvestCount:];
}

id objc_msgSend_setAppBundleId_(void *a1, const char *a2, ...)
{
  return [a1 setAppBundleId:];
}

id objc_msgSend_setAppBundleIdIndices_(void *a1, const char *a2, ...)
{
  return [a1 setAppBundleIdIndices:];
}

id objc_msgSend_setAppBundleIds_(void *a1, const char *a2, ...)
{
  return [a1 setAppBundleIds:];
}

id objc_msgSend_setAppState_(void *a1, const char *a2, ...)
{
  return [a1 setAppState:];
}

id objc_msgSend_setApplicableTimeSec_(void *a1, const char *a2, ...)
{
  return [a1 setApplicableTimeSec:];
}

id objc_msgSend_setApsConnectionMachServiceName_(void *a1, const char *a2, ...)
{
  return [a1 setApsConnectionMachServiceName:];
}

id objc_msgSend_setApsMachServiceName_(void *a1, const char *a2, ...)
{
  return [a1 setApsMachServiceName:];
}

id objc_msgSend_setArSessionActive_(void *a1, const char *a2, ...)
{
  return [a1 setArSessionActive:];
}

id objc_msgSend_setArchive_(void *a1, const char *a2, ...)
{
  return [a1 setArchive:];
}

id objc_msgSend_setAreLocationAccessoriesEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setAreLocationAccessoriesEnabled:];
}

id objc_msgSend_setArfcn_(void *a1, const char *a2, ...)
{
  return [a1 setArfcn:];
}

id objc_msgSend_setArgument_atIndex_(void *a1, const char *a2, ...)
{
  return [a1 setArgument:atIndex:];
}

id objc_msgSend_setArmed_(void *a1, const char *a2, ...)
{
  return [a1 setArmed:];
}

id objc_msgSend_setArray_(void *a1, const char *a2, ...)
{
  return [a1 setArray:];
}

id objc_msgSend_setArray_forKey_(void *a1, const char *a2, ...)
{
  return [a1 setArray:forKey:];
}

id objc_msgSend_setArray_forKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 setArray:x0 forKey:x1 atKeyPath:x2];
}

id objc_msgSend_setAssertionDuration_(void *a1, const char *a2, ...)
{
  return [a1 setAssertionDuration:];
}

id objc_msgSend_setAssetData_(void *a1, const char *a2, ...)
{
  return [a1 setAssetData:];
}

id objc_msgSend_setAssetDataCRC_(void *a1, const char *a2, ...)
{
  return [a1 setAssetDataCRC:];
}

id objc_msgSend_setAssetPacketizerQueue_(void *a1, const char *a2, ...)
{
  return [a1 setAssetPacketizerQueue:];
}

id objc_msgSend_setAssetTargetHeader_(void *a1, const char *a2, ...)
{
  return [a1 setAssetTargetHeader:];
}

id objc_msgSend_setAssetType_(void *a1, const char *a2, ...)
{
  return [a1 setAssetType:];
}

id objc_msgSend_setAssociatedStoreIds_(void *a1, const char *a2, ...)
{
  return [a1 setAssociatedStoreIds:];
}

id objc_msgSend_setAssociatedTo2GHzWiFi_(void *a1, const char *a2, ...)
{
  return [a1 setAssociatedTo2GHzWiFi:];
}

id objc_msgSend_setAttitude_(void *a1, const char *a2, ...)
{
  return [a1 setAttitude:];
}

id objc_msgSend_setAttribute_forKey_error_(void *a1, const char *a2, ...)
{
  return [a1 setAttribute:forKey:error:];
}

id objc_msgSend_setAttributes_ofItemAtPath_error_(void *a1, const char *a2, ...)
{
  return [a1 setAttributes:ofItemAtPath:error:];
}

id objc_msgSend_setAttributionIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setAttributionIdentifier:];
}

id objc_msgSend_setAttributionTimer_(void *a1, const char *a2, ...)
{
  return [a1 setAttributionTimer:];
}

id objc_msgSend_setAuthHeaderValue_(void *a1, const char *a2, ...)
{
  return [a1 setAuthHeaderValue:];
}

id objc_msgSend_setAuthMask_(void *a1, const char *a2, ...)
{
  return [a1 setAuthMask:];
}

id objc_msgSend_setAuthSession_(void *a1, const char *a2, ...)
{
  return [a1 setAuthSession:];
}

id objc_msgSend_setAuthStatus_(void *a1, const char *a2, ...)
{
  return [a1 setAuthStatus:];
}

id objc_msgSend_setAuthSyncStoreState_(void *a1, const char *a2, ...)
{
  return [a1 setAuthSyncStoreState:];
}

id objc_msgSend_setAuthorizationContext_(void *a1, const char *a2, ...)
{
  return [a1 setAuthorizationContext:];
}

id objc_msgSend_setAuthorized_(void *a1, const char *a2, ...)
{
  return [a1 setAuthorized:];
}

id objc_msgSend_setAvailabilityTiles_withZScoreConfidenceInterval_(void *a1, const char *a2, ...)
{
  return [a1 setAvailabilityTiles:withZScoreConfidenceInterval:];
}

id objc_msgSend_setAverageRSRP_(void *a1, const char *a2, ...)
{
  return [a1 setAverageRSRP:];
}

id objc_msgSend_setAverageSpeed_(void *a1, const char *a2, ...)
{
  return [a1 setAverageSpeed:];
}

id objc_msgSend_setBackgrounded_(void *a1, const char *a2, ...)
{
  return [a1 setBackgrounded:];
}

id objc_msgSend_setBandInfo_(void *a1, const char *a2, ...)
{
  return [a1 setBandInfo:];
}

id objc_msgSend_setBandclass_(void *a1, const char *a2, ...)
{
  return [a1 setBandclass:];
}

id objc_msgSend_setBandwidth_(void *a1, const char *a2, ...)
{
  return [a1 setBandwidth:];
}

id objc_msgSend_setBaroCalibrationIndication_(void *a1, const char *a2, ...)
{
  return [a1 setBaroCalibrationIndication:];
}

id objc_msgSend_setBarometricAltitudeAWDData_(void *a1, const char *a2, ...)
{
  return [a1 setBarometricAltitudeAWDData:];
}

id objc_msgSend_setBarometricAltitudeData_(void *a1, const char *a2, ...)
{
  return [a1 setBarometricAltitudeData:];
}

id objc_msgSend_setBatteryData_(void *a1, const char *a2, ...)
{
  return [a1 setBatteryData:];
}

id objc_msgSend_setBatterySaverModeEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setBatterySaverModeEnabled:];
}

id objc_msgSend_setBatteryStatusTaskWithBatteryStatus_(void *a1, const char *a2, ...)
{
  return [a1 setBatteryStatusTaskWithBatteryStatus:];
}

id objc_msgSend_setBeacon_(void *a1, const char *a2, ...)
{
  return [a1 setBeacon:];
}

id objc_msgSend_setBetaBlockerUse_(void *a1, const char *a2, ...)
{
  return [a1 setBetaBlockerUse:];
}

id objc_msgSend_setBiasInMeters_(void *a1, const char *a2, ...)
{
  return [a1 setBiasInMeters:];
}

id objc_msgSend_setBins_(void *a1, const char *a2, ...)
{
  return [a1 setBins:];
}

id objc_msgSend_setBleRSSIThresholdHint_(void *a1, const char *a2, ...)
{
  return [a1 setBleRSSIThresholdHint:];
}

id objc_msgSend_setBleScanRate_(void *a1, const char *a2, ...)
{
  return [a1 setBleScanRate:];
}

id objc_msgSend_setBleScanRateScreenOff_(void *a1, const char *a2, ...)
{
  return [a1 setBleScanRateScreenOff:];
}

id objc_msgSend_setBlockUpdateIsCycling_(void *a1, const char *a2, ...)
{
  return [a1 setBlockUpdateIsCycling:];
}

id objc_msgSend_setBluetoothStateChangedHandler_(void *a1, const char *a2, ...)
{
  return [a1 setBluetoothStateChangedHandler:];
}

id objc_msgSend_setBodyMetrics_(void *a1, const char *a2, ...)
{
  return [a1 setBodyMetrics:];
}

id objc_msgSend_setBomScanEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setBomScanEnabled:];
}

id objc_msgSend_setBool_forKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 setBool:x0 forKey:x1 atKeyPath:x2];
}

id objc_msgSend_setBottleneckRsrp_(void *a1, const char *a2, ...)
{
  return [a1 setBottleneckRsrp:];
}

id objc_msgSend_setBottleneckState_(void *a1, const char *a2, ...)
{
  return [a1 setBottleneckState:];
}

id objc_msgSend_setBottleneckToggleCount_(void *a1, const char *a2, ...)
{
  return [a1 setBottleneckToggleCount:];
}

id objc_msgSend_setBoutClients_(void *a1, const char *a2, ...)
{
  return [a1 setBoutClients:];
}

id objc_msgSend_setBsLatitude_(void *a1, const char *a2, ...)
{
  return [a1 setBsLatitude:];
}

id objc_msgSend_setBsLongitude_(void *a1, const char *a2, ...)
{
  return [a1 setBsLongitude:];
}

id objc_msgSend_setBsid_(void *a1, const char *a2, ...)
{
  return [a1 setBsid:];
}

id objc_msgSend_setBufferedDevices_(void *a1, const char *a2, ...)
{
  return [a1 setBufferedDevices:];
}

id objc_msgSend_setBundleId_(void *a1, const char *a2, ...)
{
  return [a1 setBundleId:];
}

id objc_msgSend_setBundleIds_(void *a1, const char *a2, ...)
{
  return [a1 setBundleIds:];
}

id objc_msgSend_setBwpSupport_(void *a1, const char *a2, ...)
{
  return [a1 setBwpSupport:];
}

id objc_msgSend_setBypassSupportedMessageModesCheck_(void *a1, const char *a2, ...)
{
  return [a1 setBypassSupportedMessageModesCheck:];
}

id objc_msgSend_setCachedPlaceInferences_(void *a1, const char *a2, ...)
{
  return [a1 setCachedPlaceInferences:];
}

id objc_msgSend_setCadence_(void *a1, const char *a2, ...)
{
  return [a1 setCadence:];
}

id objc_msgSend_setCadenceMean_(void *a1, const char *a2, ...)
{
  return [a1 setCadenceMean:];
}

id objc_msgSend_setCalTrackHandler_(void *a1, const char *a2, ...)
{
  return [a1 setCalTrackHandler:];
}

id objc_msgSend_setCalendar_(void *a1, const char *a2, ...)
{
  return [a1 setCalendar:];
}

id objc_msgSend_setCalibratedPressurePa_(void *a1, const char *a2, ...)
{
  return [a1 setCalibratedPressurePa:];
}

id objc_msgSend_setCalibratedPressureUncPa_(void *a1, const char *a2, ...)
{
  return [a1 setCalibratedPressureUncPa:];
}

id objc_msgSend_setCalibrationTrackCallback_(void *a1, const char *a2, ...)
{
  return [a1 setCalibrationTrackCallback:];
}

id objc_msgSend_setCallbackAdapter_(void *a1, const char *a2, ...)
{
  return [a1 setCallbackAdapter:];
}

id objc_msgSend_setCallbackHandler_(void *a1, const char *a2, ...)
{
  return [a1 setCallbackHandler:];
}

id objc_msgSend_setCalorieData_(void *a1, const char *a2, ...)
{
  return [a1 setCalorieData:];
}

id objc_msgSend_setCalorieDataDeprecated_(void *a1, const char *a2, ...)
{
  return [a1 setCalorieDataDeprecated:];
}

id objc_msgSend_setCapabilityChangeClients_(void *a1, const char *a2, ...)
{
  return [a1 setCapabilityChangeClients:];
}

id objc_msgSend_setCarryingItems_(void *a1, const char *a2, ...)
{
  return [a1 setCarryingItems:];
}

id objc_msgSend_setCdmaCellTowers_(void *a1, const char *a2, ...)
{
  return [a1 setCdmaCellTowers:];
}

id objc_msgSend_setCdmaEvdoTowers_(void *a1, const char *a2, ...)
{
  return [a1 setCdmaEvdoTowers:];
}

id objc_msgSend_setCellAvailable_(void *a1, const char *a2, ...)
{
  return [a1 setCellAvailable:];
}

id objc_msgSend_setCellID_(void *a1, const char *a2, ...)
{
  return [a1 setCellID:];
}

id objc_msgSend_setCellLatitude_(void *a1, const char *a2, ...)
{
  return [a1 setCellLatitude:];
}

id objc_msgSend_setCellLongitude_(void *a1, const char *a2, ...)
{
  return [a1 setCellLongitude:];
}

id objc_msgSend_setCellTowers_(void *a1, const char *a2, ...)
{
  return [a1 setCellTowers:];
}

id objc_msgSend_setCelltype_(void *a1, const char *a2, ...)
{
  return [a1 setCelltype:];
}

id objc_msgSend_setCellularBand_(void *a1, const char *a2, ...)
{
  return [a1 setCellularBand:];
}

id objc_msgSend_setCellularRAT_(void *a1, const char *a2, ...)
{
  return [a1 setCellularRAT:];
}

id objc_msgSend_setCentralReferenceTimeCommand(void *a1, const char *a2, ...)
{
  return _[a1 setCentralReferenceTimeCommand];
}

id objc_msgSend_setCentralReferenceTimeTask(void *a1, const char *a2, ...)
{
  return _[a1 setCentralReferenceTimeTask];
}

id objc_msgSend_setCfAbsoluteTimeS_(void *a1, const char *a2, ...)
{
  return [a1 setCfAbsoluteTimeS:];
}

id objc_msgSend_setChangeFlags_(void *a1, const char *a2, ...)
{
  return [a1 setChangeFlags:];
}

id objc_msgSend_setChangeType_(void *a1, const char *a2, ...)
{
  return [a1 setChangeType:];
}

id objc_msgSend_setChannel_(void *a1, const char *a2, ...)
{
  return [a1 setChannel:];
}

id objc_msgSend_setCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setCharacteristic:];
}

id objc_msgSend_setCharacteristicType_(void *a1, const char *a2, ...)
{
  return [a1 setCharacteristicType:];
}

id objc_msgSend_setCharacteristicUUID_(void *a1, const char *a2, ...)
{
  return [a1 setCharacteristicUUID:];
}

id objc_msgSend_setChoreaDetectionService_(void *a1, const char *a2, ...)
{
  return [a1 setChoreaDetectionService:];
}

id objc_msgSend_setCi_(void *a1, const char *a2, ...)
{
  return [a1 setCi:];
}

id objc_msgSend_setCkp_(void *a1, const char *a2, ...)
{
  return [a1 setCkp:];
}

id objc_msgSend_setClass_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return [a1 setClass:forSelector:argumentIndex:ofReply:];
}

id objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return [a1 setClasses:forSelector:argumentIndex:ofReply:];
}

id objc_msgSend_setClearClient_(void *a1, const char *a2, ...)
{
  return [a1 setClearClient:];
}

id objc_msgSend_setClient_(void *a1, const char *a2, ...)
{
  return [a1 setClient:];
}

id objc_msgSend_setClientActivityTypeAirborneActive_(void *a1, const char *a2, ...)
{
  return [a1 setClientActivityTypeAirborneActive:];
}

id objc_msgSend_setClientActivityTypeFitnessActive_(void *a1, const char *a2, ...)
{
  return [a1 setClientActivityTypeFitnessActive:];
}

id objc_msgSend_setClientAuthDate_(void *a1, const char *a2, ...)
{
  return [a1 setClientAuthDate:];
}

id objc_msgSend_setClientAuthorization_zoneIdentifier_subIdentityIdentifier_status_correctiveCompensation_mayIncreaseAuth_entity_(void *a1, const char *a2, ...)
{
  return [a1 setClientAuthorization:x0 zoneIdentifier:x1 subIdentityIdentifier:x2 status:x3 correctiveCompensation:x4 mayIncreaseAuth:x5 entity:x6];
}

id objc_msgSend_setClientAuthorizationCache_(void *a1, const char *a2, ...)
{
  return [a1 setClientAuthorizationCache:];
}

id objc_msgSend_setClientBackgroundIndicator_enabled_entity_(void *a1, const char *a2, ...)
{
  return [a1 setClientBackgroundIndicator:enabled:entity:];
}

id objc_msgSend_setClientIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setClientIdentifier:];
}

id objc_msgSend_setClientInterest_(void *a1, const char *a2, ...)
{
  return [a1 setClientInterest:];
}

id objc_msgSend_setClientKey_(void *a1, const char *a2, ...)
{
  return [a1 setClientKey:];
}

id objc_msgSend_setClientKeyToAuthContextMap_(void *a1, const char *a2, ...)
{
  return [a1 setClientKeyToAuthContextMap:];
}

id objc_msgSend_setClientKeyToClientInfoMap_(void *a1, const char *a2, ...)
{
  return [a1 setClientKeyToClientInfoMap:];
}

id objc_msgSend_setClientManager_(void *a1, const char *a2, ...)
{
  return [a1 setClientManager:];
}

id objc_msgSend_setClientMapMatchingActive_(void *a1, const char *a2, ...)
{
  return [a1 setClientMapMatchingActive:];
}

id objc_msgSend_setClientName_(void *a1, const char *a2, ...)
{
  return [a1 setClientName:];
}

id objc_msgSend_setClientRegistry_(void *a1, const char *a2, ...)
{
  return [a1 setClientRegistry:];
}

id objc_msgSend_setClients_(void *a1, const char *a2, ...)
{
  return [a1 setClients:];
}

id objc_msgSend_setClients_locationPushTo_(void *a1, const char *a2, ...)
{
  return [a1 setClients:locationPushTo:];
}

id objc_msgSend_setClients_significantLocationChangeTo_(void *a1, const char *a2, ...)
{
  return [a1 setClients:significantLocationChangeTo:];
}

id objc_msgSend_setClients_significantLocationVisitTo_(void *a1, const char *a2, ...)
{
  return [a1 setClients:significantLocationVisitTo:];
}

id objc_msgSend_setClients_transcriptSessionChangeTo_(void *a1, const char *a2, ...)
{
  return [a1 setClients:transcriptSessionChangeTo:];
}

id objc_msgSend_setClientsAuthorizationMap_(void *a1, const char *a2, ...)
{
  return [a1 setClientsAuthorizationMap:];
}

id objc_msgSend_setClientsInSession_(void *a1, const char *a2, ...)
{
  return [a1 setClientsInSession:];
}

id objc_msgSend_setCloudKitContainerOptions_(void *a1, const char *a2, ...)
{
  return [a1 setCloudKitContainerOptions:];
}

id objc_msgSend_setCmAttitude_(void *a1, const char *a2, ...)
{
  return [a1 setCmAttitude:];
}

id objc_msgSend_setCmPedometer_(void *a1, const char *a2, ...)
{
  return [a1 setCmPedometer:];
}

id objc_msgSend_setCoarseCoordinatesFromDefaultsWriteEntry(void *a1, const char *a2, ...)
{
  return _[a1 setCoarseCoordinatesFromDefaultsWriteEntry];
}

id objc_msgSend_setCoarseElevation_(void *a1, const char *a2, ...)
{
  return [a1 setCoarseElevation:];
}

id objc_msgSend_setCoarseElevationDeprecated_(void *a1, const char *a2, ...)
{
  return [a1 setCoarseElevationDeprecated:];
}

id objc_msgSend_setCollectionType_(void *a1, const char *a2, ...)
{
  return [a1 setCollectionType:];
}

id objc_msgSend_setCommand_(void *a1, const char *a2, ...)
{
  return [a1 setCommand:];
}

id objc_msgSend_setCompanionSyncActivityAsDone_(void *a1, const char *a2, ...)
{
  return [a1 setCompanionSyncActivityAsDone:];
}

id objc_msgSend_setConditionLimitExceeded_(void *a1, const char *a2, ...)
{
  return [a1 setConditionLimitExceeded:];
}

id objc_msgSend_setConditionUnsupported_(void *a1, const char *a2, ...)
{
  return [a1 setConditionUnsupported:];
}

id objc_msgSend_setConfidence_(void *a1, const char *a2, ...)
{
  return [a1 setConfidence:];
}

id objc_msgSend_setConformanceMode_(void *a1, const char *a2, ...)
{
  return [a1 setConformanceMode:];
}

id objc_msgSend_setConnection_(void *a1, const char *a2, ...)
{
  return [a1 setConnection:];
}

id objc_msgSend_setConnectionAttemptCount_(void *a1, const char *a2, ...)
{
  return [a1 setConnectionAttemptCount:];
}

id objc_msgSend_setConnectionReason_(void *a1, const char *a2, ...)
{
  return [a1 setConnectionReason:];
}

id objc_msgSend_setConnectionStatus_(void *a1, const char *a2, ...)
{
  return [a1 setConnectionStatus:];
}

id objc_msgSend_setConnectionUpdateHandler_(void *a1, const char *a2, ...)
{
  return [a1 setConnectionUpdateHandler:];
}

id objc_msgSend_setContainerOptions_(void *a1, const char *a2, ...)
{
  return [a1 setContainerOptions:];
}

id objc_msgSend_setContext_(void *a1, const char *a2, ...)
{
  return [a1 setContext:];
}

id objc_msgSend_setControlFlags_(void *a1, const char *a2, ...)
{
  return [a1 setControlFlags:];
}

id objc_msgSend_setController_(void *a1, const char *a2, ...)
{
  return [a1 setController:];
}

id objc_msgSend_setCorrectiveCompensationMask_(void *a1, const char *a2, ...)
{
  return [a1 setCorrectiveCompensationMask:];
}

id objc_msgSend_setCount_(void *a1, const char *a2, ...)
{
  return [a1 setCount:];
}

id objc_msgSend_setCountryCode_(void *a1, const char *a2, ...)
{
  return [a1 setCountryCode:];
}

id objc_msgSend_setCourse_(void *a1, const char *a2, ...)
{
  return [a1 setCourse:];
}

id objc_msgSend_setCourseAccuracy_(void *a1, const char *a2, ...)
{
  return [a1 setCourseAccuracy:];
}

id objc_msgSend_setCppObjectPtr_(void *a1, const char *a2, ...)
{
  return [a1 setCppObjectPtr:];
}

id objc_msgSend_setCsgId_(void *a1, const char *a2, ...)
{
  return [a1 setCsgId:];
}

id objc_msgSend_setCsgIndication_(void *a1, const char *a2, ...)
{
  return [a1 setCsgIndication:];
}

id objc_msgSend_setCumulativeStartTime_(void *a1, const char *a2, ...)
{
  return [a1 setCumulativeStartTime:];
}

id objc_msgSend_setCurrLeashBreakAPWakeDelta_(void *a1, const char *a2, ...)
{
  return [a1 setCurrLeashBreakAPWakeDelta:];
}

id objc_msgSend_setCurrentAssetPacketizer_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentAssetPacketizer:];
}

id objc_msgSend_setCurrentEstimate_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentEstimate:];
}

id objc_msgSend_setCurrentGranularity_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentGranularity:];
}

id objc_msgSend_setCurrentIndex_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentIndex:];
}

id objc_msgSend_setCurrentKeyIndex_forDevice_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentKeyIndex:forDevice:];
}

id objc_msgSend_setCurrentLatitude_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentLatitude:];
}

id objc_msgSend_setCurrentLocation_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentLocation:];
}

id objc_msgSend_setCurrentLongitude_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentLongitude:];
}

id objc_msgSend_setCurrentPowerLevel_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentPowerLevel:];
}

id objc_msgSend_setCurrentSpeed_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentSpeed:];
}

id objc_msgSend_setCurrentState_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentState:];
}

id objc_msgSend_setCurrentSyncSessionCollidedWithResetSync_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentSyncSessionCollidedWithResetSync:];
}

id objc_msgSend_setCurrentThermalLevel_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentThermalLevel:];
}

id objc_msgSend_setCurrentThermalLevelStartTime_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentThermalLevelStartTime:];
}

id objc_msgSend_setCurrentVisitHorizontalUncertainty_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentVisitHorizontalUncertainty:];
}

id objc_msgSend_setCurrentVisitLocation_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentVisitLocation:];
}

id objc_msgSend_setCurrentWPState_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentWPState:];
}

id objc_msgSend_setCurrentWildKeyIndex_forBeacon_completion_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentWildKeyIndex:forBeacon:completion:];
}

id objc_msgSend_setCurrentWildKeyIndex_forDevice_forEvent_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentWildKeyIndex:forDevice:forEvent:];
}

id objc_msgSend_setCurrentWorkoutType_isManualTransition_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentWorkoutType:isManualTransition:];
}

id objc_msgSend_setCurrentlyScheduled_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentlyScheduled:];
}

id objc_msgSend_setCurrentpeakPowerStartTime_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentpeakPowerStartTime:];
}

id objc_msgSend_setD2vtecDphi2_(void *a1, const char *a2, ...)
{
  return [a1 setD2vtecDphi2:];
}

id objc_msgSend_setD2vtecDtheta2_(void *a1, const char *a2, ...)
{
  return [a1 setD2vtecDtheta2:];
}

id objc_msgSend_setD2vtecDthetaphi_(void *a1, const char *a2, ...)
{
  return [a1 setD2vtecDthetaphi:];
}

id objc_msgSend_setDEPRECATEDFingerprints_(void *a1, const char *a2, ...)
{
  return [a1 setDEPRECATEDFingerprints:];
}

id objc_msgSend_setDaemonCondition_(void *a1, const char *a2, ...)
{
  return [a1 setDaemonCondition:];
}

id objc_msgSend_setDaemonControl_(void *a1, const char *a2, ...)
{
  return [a1 setDaemonControl:];
}

id objc_msgSend_setDaemonEvent_(void *a1, const char *a2, ...)
{
  return [a1 setDaemonEvent:];
}

id objc_msgSend_setData_(void *a1, const char *a2, ...)
{
  return [a1 setData:];
}

id objc_msgSend_setData_forKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 setData:forKey:atKeyPath:];
}

id objc_msgSend_setDataIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setDataIdentifier:];
}

id objc_msgSend_setDataPayload_(void *a1, const char *a2, ...)
{
  return [a1 setDataPayload:];
}

id objc_msgSend_setDataSize_(void *a1, const char *a2, ...)
{
  return [a1 setDataSize:];
}

id objc_msgSend_setDataSubType_(void *a1, const char *a2, ...)
{
  return [a1 setDataSubType:];
}

id objc_msgSend_setDateFormat_(void *a1, const char *a2, ...)
{
  return [a1 setDateFormat:];
}

id objc_msgSend_setDateStyle_(void *a1, const char *a2, ...)
{
  return [a1 setDateStyle:];
}

id objc_msgSend_setDay_(void *a1, const char *a2, ...)
{
  return [a1 setDay:];
}

id objc_msgSend_setDayLightSavings_(void *a1, const char *a2, ...)
{
  return [a1 setDayLightSavings:];
}

id objc_msgSend_setDebounceTimer_(void *a1, const char *a2, ...)
{
  return [a1 setDebounceTimer:];
}

id objc_msgSend_setDebugIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setDebugIdentifier:];
}

id objc_msgSend_setDeepEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setDeepEnabled:];
}

id objc_msgSend_setDeepestDepthForHK_(void *a1, const char *a2, ...)
{
  return [a1 setDeepestDepthForHK:];
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return [a1 setDelegate:];
}

id objc_msgSend_setDelegate_queue_(void *a1, const char *a2, ...)
{
  return [a1 setDelegate:queue:];
}

id objc_msgSend_setDelegateEntityName_(void *a1, const char *a2, ...)
{
  return [a1 setDelegateEntityName:];
}

id objc_msgSend_setDelegateQueue_(void *a1, const char *a2, ...)
{
  return [a1 setDelegateQueue:];
}

id objc_msgSend_setDeltaDistance_(void *a1, const char *a2, ...)
{
  return [a1 setDeltaDistance:];
}

id objc_msgSend_setDeltaDistanceAccuracy_(void *a1, const char *a2, ...)
{
  return [a1 setDeltaDistanceAccuracy:];
}

id objc_msgSend_setDeltaElevation_(void *a1, const char *a2, ...)
{
  return [a1 setDeltaElevation:];
}

id objc_msgSend_setDeltaPositionX_(void *a1, const char *a2, ...)
{
  return [a1 setDeltaPositionX:];
}

id objc_msgSend_setDeltaPositionY_(void *a1, const char *a2, ...)
{
  return [a1 setDeltaPositionY:];
}

id objc_msgSend_setDeltaPositionZ_(void *a1, const char *a2, ...)
{
  return [a1 setDeltaPositionZ:];
}

id objc_msgSend_setDeltaSyncObjectsInCompanionQueue_(void *a1, const char *a2, ...)
{
  return [a1 setDeltaSyncObjectsInCompanionQueue:];
}

id objc_msgSend_setDeltaSyncObjectsInGizmoQueue_(void *a1, const char *a2, ...)
{
  return [a1 setDeltaSyncObjectsInGizmoQueue:];
}

id objc_msgSend_setDeltaVelocityX_(void *a1, const char *a2, ...)
{
  return [a1 setDeltaVelocityX:];
}

id objc_msgSend_setDeltaVelocityY_(void *a1, const char *a2, ...)
{
  return [a1 setDeltaVelocityY:];
}

id objc_msgSend_setDeltaVelocityZ_(void *a1, const char *a2, ...)
{
  return [a1 setDeltaVelocityZ:];
}

id objc_msgSend_setDeploymentType_(void *a1, const char *a2, ...)
{
  return [a1 setDeploymentType:];
}

id objc_msgSend_setDepth_(void *a1, const char *a2, ...)
{
  return [a1 setDepth:];
}

id objc_msgSend_setDesiredAccuracy_(void *a1, const char *a2, ...)
{
  return [a1 setDesiredAccuracy:];
}

id objc_msgSend_setDesiredConnectionLatency(void *a1, const char *a2, ...)
{
  return _[a1 setDesiredConnectionLatency];
}

id objc_msgSend_setDesiredConnectionLatency_forPeripheral_completion_(void *a1, const char *a2, ...)
{
  return [a1 setDesiredConnectionLatency:forPeripheral:completion:];
}

id objc_msgSend_setDesiredEnablementState_(void *a1, const char *a2, ...)
{
  return [a1 setDesiredEnablementState:];
}

id objc_msgSend_setDestinationAddress_(void *a1, const char *a2, ...)
{
  return [a1 setDestinationAddress:];
}

id objc_msgSend_setDestinationDevice_(void *a1, const char *a2, ...)
{
  return [a1 setDestinationDevice:];
}

id objc_msgSend_setDestinations_(void *a1, const char *a2, ...)
{
  return [a1 setDestinations:];
}

id objc_msgSend_setDeviceChangedHandler_(void *a1, const char *a2, ...)
{
  return [a1 setDeviceChangedHandler:];
}

id objc_msgSend_setDeviceDelegate_(void *a1, const char *a2, ...)
{
  return [a1 setDeviceDelegate:];
}

id objc_msgSend_setDeviceFilter_(void *a1, const char *a2, ...)
{
  return [a1 setDeviceFilter:];
}

id objc_msgSend_setDeviceFoundHandler_(void *a1, const char *a2, ...)
{
  return [a1 setDeviceFoundHandler:];
}

id objc_msgSend_setDeviceJourneyCount_(void *a1, const char *a2, ...)
{
  return [a1 setDeviceJourneyCount:];
}

id objc_msgSend_setDeviceLostHandler_(void *a1, const char *a2, ...)
{
  return [a1 setDeviceLostHandler:];
}

id objc_msgSend_setDeviceMatching_(void *a1, const char *a2, ...)
{
  return [a1 setDeviceMatching:];
}

id objc_msgSend_setDeviceNearbyHandler_(void *a1, const char *a2, ...)
{
  return [a1 setDeviceNearbyHandler:];
}

id objc_msgSend_setDeviceNotificationHandler_(void *a1, const char *a2, ...)
{
  return [a1 setDeviceNotificationHandler:];
}

id objc_msgSend_setDeviceObservationDelegate_(void *a1, const char *a2, ...)
{
  return [a1 setDeviceObservationDelegate:];
}

id objc_msgSend_setDevicePressurePa_(void *a1, const char *a2, ...)
{
  return [a1 setDevicePressurePa:];
}

id objc_msgSend_setDevicePressureUncPa_(void *a1, const char *a2, ...)
{
  return [a1 setDevicePressureUncPa:];
}

id objc_msgSend_setDeviceType_(void *a1, const char *a2, ...)
{
  return [a1 setDeviceType:];
}

id objc_msgSend_setDeviceTypes_(void *a1, const char *a2, ...)
{
  return [a1 setDeviceTypes:];
}

id objc_msgSend_setDeviceUUID_(void *a1, const char *a2, ...)
{
  return [a1 setDeviceUUID:];
}

id objc_msgSend_setDevicesBufferedHandler_(void *a1, const char *a2, ...)
{
  return [a1 setDevicesBufferedHandler:];
}

id objc_msgSend_setDictionary_(void *a1, const char *a2, ...)
{
  return [a1 setDictionary:];
}

id objc_msgSend_setDictionary_forKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 setDictionary:forKey:atKeyPath:];
}

id objc_msgSend_setDidUpdateFireTime_(void *a1, const char *a2, ...)
{
  return [a1 setDidUpdateFireTime:];
}

id objc_msgSend_setDidWake_(void *a1, const char *a2, ...)
{
  return [a1 setDidWake:];
}

id objc_msgSend_setDimensionInt_(void *a1, const char *a2, ...)
{
  return [a1 setDimensionInt:];
}

id objc_msgSend_setDirectionOfTravelAssistance_(void *a1, const char *a2, ...)
{
  return [a1 setDirectionOfTravelAssistance:];
}

id objc_msgSend_setDirty_(void *a1, const char *a2, ...)
{
  return [a1 setDirty:];
}

id objc_msgSend_setDisableSystemWaking_(void *a1, const char *a2, ...)
{
  return [a1 setDisableSystemWaking:];
}

id objc_msgSend_setDisconnectHandler_(void *a1, const char *a2, ...)
{
  return [a1 setDisconnectHandler:];
}

id objc_msgSend_setDisconnectionReason_(void *a1, const char *a2, ...)
{
  return [a1 setDisconnectionReason:];
}

id objc_msgSend_setDiscoveryFlags_(void *a1, const char *a2, ...)
{
  return [a1 setDiscoveryFlags:];
}

id objc_msgSend_setDiscretionary_(void *a1, const char *a2, ...)
{
  return [a1 setDiscretionary:];
}

id objc_msgSend_setDispatchQueue_(void *a1, const char *a2, ...)
{
  return [a1 setDispatchQueue:];
}

id objc_msgSend_setDisplayStyle_(void *a1, const char *a2, ...)
{
  return [a1 setDisplayStyle:];
}

id objc_msgSend_setDistance_(void *a1, const char *a2, ...)
{
  return [a1 setDistance:];
}

id objc_msgSend_setDistanceFromNMinusOneStateChange_(void *a1, const char *a2, ...)
{
  return [a1 setDistanceFromNMinusOneStateChange:];
}

id objc_msgSend_setDistanceFromNMinusTwoStateChange_(void *a1, const char *a2, ...)
{
  return [a1 setDistanceFromNMinusTwoStateChange:];
}

id objc_msgSend_setDistanceGps_(void *a1, const char *a2, ...)
{
  return [a1 setDistanceGps:];
}

id objc_msgSend_setDistanceRawPed_(void *a1, const char *a2, ...)
{
  return [a1 setDistanceRawPed:];
}

id objc_msgSend_setDistanceToFenceBoundary_(void *a1, const char *a2, ...)
{
  return [a1 setDistanceToFenceBoundary:];
}

id objc_msgSend_setDoNotBlockBeforeFirstUnlock_(void *a1, const char *a2, ...)
{
  return [a1 setDoNotBlockBeforeFirstUnlock:];
}

id objc_msgSend_setDominantMotionActivity_(void *a1, const char *a2, ...)
{
  return [a1 setDominantMotionActivity:];
}

id objc_msgSend_setDominantMotionState_(void *a1, const char *a2, ...)
{
  return [a1 setDominantMotionState:];
}

id objc_msgSend_setDouble_forKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 setDouble:forKey:atKeyPath:];
}

id objc_msgSend_setDownlinkBandwidth_(void *a1, const char *a2, ...)
{
  return [a1 setDownlinkBandwidth:];
}

id objc_msgSend_setDstPort_(void *a1, const char *a2, ...)
{
  return [a1 setDstPort:];
}

id objc_msgSend_setDuration_(void *a1, const char *a2, ...)
{
  return [a1 setDuration:];
}

id objc_msgSend_setDurationInSeconds_(void *a1, const char *a2, ...)
{
  return [a1 setDurationInSeconds:];
}

id objc_msgSend_setDurianNonOwnerPreciseFindingCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setDurianNonOwnerPreciseFindingCharacteristic:];
}

id objc_msgSend_setDvtecDphi_(void *a1, const char *a2, ...)
{
  return [a1 setDvtecDphi:];
}

id objc_msgSend_setDvtecDtheta_(void *a1, const char *a2, ...)
{
  return [a1 setDvtecDtheta:];
}

id objc_msgSend_setE911Active_(void *a1, const char *a2, ...)
{
  return [a1 setE911Active:];
}

id objc_msgSend_setEcn0_(void *a1, const char *a2, ...)
{
  return [a1 setEcn0:];
}

id objc_msgSend_setEffectiveRadius_(void *a1, const char *a2, ...)
{
  return [a1 setEffectiveRadius:];
}

id objc_msgSend_setEffectiveRadiusMetersIfInstalled_(void *a1, const char *a2, ...)
{
  return [a1 setEffectiveRadiusMetersIfInstalled:];
}

id objc_msgSend_setElevation_(void *a1, const char *a2, ...)
{
  return [a1 setElevation:];
}

id objc_msgSend_setElevationAscended_(void *a1, const char *a2, ...)
{
  return [a1 setElevationAscended:];
}

id objc_msgSend_setElevationDeprecated_(void *a1, const char *a2, ...)
{
  return [a1 setElevationDeprecated:];
}

id objc_msgSend_setElevationDescended_(void *a1, const char *a2, ...)
{
  return [a1 setElevationDescended:];
}

id objc_msgSend_setEligibleForCalorimetry_(void *a1, const char *a2, ...)
{
  return [a1 setEligibleForCalorimetry:];
}

id objc_msgSend_setEligibleForDataCollection_(void *a1, const char *a2, ...)
{
  return [a1 setEligibleForDataCollection:];
}

id objc_msgSend_setEligibleForHealthKit_(void *a1, const char *a2, ...)
{
  return [a1 setEligibleForHealthKit:];
}

id objc_msgSend_setEmergencyBottleneckState_(void *a1, const char *a2, ...)
{
  return [a1 setEmergencyBottleneckState:];
}

id objc_msgSend_setEmergencyEnablementAssertionActive_(void *a1, const char *a2, ...)
{
  return [a1 setEmergencyEnablementAssertionActive:];
}

id objc_msgSend_setEnableCriticalReliability_(void *a1, const char *a2, ...)
{
  return [a1 setEnableCriticalReliability:];
}

id objc_msgSend_setEnabledTopics_ignoredTopics_(void *a1, const char *a2, ...)
{
  return [a1 setEnabledTopics:ignoredTopics:];
}

id objc_msgSend_setEnd_(void *a1, const char *a2, ...)
{
  return [a1 setEnd:];
}

id objc_msgSend_setEndDate_(void *a1, const char *a2, ...)
{
  return [a1 setEndDate:];
}

id objc_msgSend_setEndTime_(void *a1, const char *a2, ...)
{
  return [a1 setEndTime:];
}

id objc_msgSend_setEndowmentNamespaces_(void *a1, const char *a2, ...)
{
  return [a1 setEndowmentNamespaces:];
}

id objc_msgSend_setEndpoint_(void *a1, const char *a2, ...)
{
  return [a1 setEndpoint:];
}

id objc_msgSend_setEndpointSelector_(void *a1, const char *a2, ...)
{
  return [a1 setEndpointSelector:];
}

id objc_msgSend_setEntity_(void *a1, const char *a2, ...)
{
  return [a1 setEntity:];
}

id objc_msgSend_setEntryRadius_(void *a1, const char *a2, ...)
{
  return [a1 setEntryRadius:];
}

id objc_msgSend_setError_(void *a1, const char *a2, ...)
{
  return [a1 setError:];
}

id objc_msgSend_setErrorQueue_(void *a1, const char *a2, ...)
{
  return [a1 setErrorQueue:];
}

id objc_msgSend_setEstExitTime_(void *a1, const char *a2, ...)
{
  return [a1 setEstExitTime:];
}

id objc_msgSend_setEstimate_(void *a1, const char *a2, ...)
{
  return [a1 setEstimate:];
}

id objc_msgSend_setEstimatedHRRecoveryParam_(void *a1, const char *a2, ...)
{
  return [a1 setEstimatedHRRecoveryParam:];
}

id objc_msgSend_setEstimatedHRResponseParam_(void *a1, const char *a2, ...)
{
  return [a1 setEstimatedHRResponseParam:];
}

id objc_msgSend_setEstimatedMeanSeaLevelPressure_(void *a1, const char *a2, ...)
{
  return [a1 setEstimatedMeanSeaLevelPressure:];
}

id objc_msgSend_setEstimatedStateProbabilityOutdoor_(void *a1, const char *a2, ...)
{
  return [a1 setEstimatedStateProbabilityOutdoor:];
}

id objc_msgSend_setEstimatedUncertainty_(void *a1, const char *a2, ...)
{
  return [a1 setEstimatedUncertainty:];
}

id objc_msgSend_setEstimatedVo2Max_(void *a1, const char *a2, ...)
{
  return [a1 setEstimatedVo2Max:];
}

id objc_msgSend_setEstimatorAgeSec_(void *a1, const char *a2, ...)
{
  return [a1 setEstimatorAgeSec:];
}

id objc_msgSend_setEvaluator_(void *a1, const char *a2, ...)
{
  return [a1 setEvaluator:];
}

id objc_msgSend_setEventHandler_(void *a1, const char *a2, ...)
{
  return [a1 setEventHandler:];
}

id objc_msgSend_setEventLatency_(void *a1, const char *a2, ...)
{
  return [a1 setEventLatency:];
}

id objc_msgSend_setEventType_(void *a1, const char *a2, ...)
{
  return [a1 setEventType:];
}

id objc_msgSend_setEventTypeNMinusOneStateChange_(void *a1, const char *a2, ...)
{
  return [a1 setEventTypeNMinusOneStateChange:];
}

id objc_msgSend_setEventTypeNMinusTwoStateChange_(void *a1, const char *a2, ...)
{
  return [a1 setEventTypeNMinusTwoStateChange:];
}

id objc_msgSend_setExerciseMinute_(void *a1, const char *a2, ...)
{
  return [a1 setExerciseMinute:];
}

id objc_msgSend_setExitRadius_(void *a1, const char *a2, ...)
{
  return [a1 setExitRadius:];
}

id objc_msgSend_setExitState_(void *a1, const char *a2, ...)
{
  return [a1 setExitState:];
}

id objc_msgSend_setExitVisitTimestamp_(void *a1, const char *a2, ...)
{
  return [a1 setExitVisitTimestamp:];
}

id objc_msgSend_setExpectsResponse_(void *a1, const char *a2, ...)
{
  return [a1 setExpectsResponse:];
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return [a1 setExportedInterface:];
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return [a1 setExportedObject:];
}

id objc_msgSend_setF01_(void *a1, const char *a2, ...)
{
  return [a1 setF01:];
}

id objc_msgSend_setFADR_(void *a1, const char *a2, ...)
{
  return [a1 setFADR:];
}

id objc_msgSend_setFAggregateRecordsTimer_(void *a1, const char *a2, ...)
{
  return [a1 setFAggregateRecordsTimer:];
}

id objc_msgSend_setFCarrierBundleChangeCb_(void *a1, const char *a2, ...)
{
  return [a1 setFCarrierBundleChangeCb:];
}

id objc_msgSend_setFCellInfoCb_(void *a1, const char *a2, ...)
{
  return [a1 setFCellInfoCb:];
}

id objc_msgSend_setFCovariance_(void *a1, const char *a2, ...)
{
  return [a1 setFCovariance:];
}

id objc_msgSend_setFDataStatusCb_(void *a1, const char *a2, ...)
{
  return [a1 setFDataStatusCb:];
}

id objc_msgSend_setFDefaultBundleChangeCb_(void *a1, const char *a2, ...)
{
  return [a1 setFDefaultBundleChangeCb:];
}

id objc_msgSend_setFDisplayStatusCb_(void *a1, const char *a2, ...)
{
  return [a1 setFDisplayStatusCb:];
}

id objc_msgSend_setFEmergModeCb_(void *a1, const char *a2, ...)
{
  return [a1 setFEmergModeCb:];
}

id objc_msgSend_setFEndTime_(void *a1, const char *a2, ...)
{
  return [a1 setFEndTime:];
}

id objc_msgSend_setFH_(void *a1, const char *a2, ...)
{
  return [a1 setFH:];
}

id objc_msgSend_setFImsRegStatusCb_(void *a1, const char *a2, ...)
{
  return [a1 setFImsRegStatusCb:];
}

id objc_msgSend_setFIsRegisteredForTileDownload_(void *a1, const char *a2, ...)
{
  return [a1 setFIsRegisteredForTileDownload:];
}

id objc_msgSend_setFLinkQualityCb_(void *a1, const char *a2, ...)
{
  return [a1 setFLinkQualityCb:];
}

id objc_msgSend_setFLocationCoordinates_(void *a1, const char *a2, ...)
{
  return [a1 setFLocationCoordinates:];
}

id objc_msgSend_setFLocationHorizontalUncertainty_(void *a1, const char *a2, ...)
{
  return [a1 setFLocationHorizontalUncertainty:];
}

id objc_msgSend_setFNextTrackStartTime_(void *a1, const char *a2, ...)
{
  return [a1 setFNextTrackStartTime:];
}

id objc_msgSend_setFNotification_(void *a1, const char *a2, ...)
{
  return [a1 setFNotification:];
}

id objc_msgSend_setFOperatorBundleChangeCb_(void *a1, const char *a2, ...)
{
  return [a1 setFOperatorBundleChangeCb:];
}

id objc_msgSend_setFP_(void *a1, const char *a2, ...)
{
  return [a1 setFP:];
}

id objc_msgSend_setFPal_(void *a1, const char *a2, ...)
{
  return [a1 setFPal:];
}

id objc_msgSend_setFPhoneNumberInfoCb_(void *a1, const char *a2, ...)
{
  return [a1 setFPhoneNumberInfoCb:];
}

id objc_msgSend_setFQ_(void *a1, const char *a2, ...)
{
  return [a1 setFQ:];
}

id objc_msgSend_setFSensorRecorderQueryTimer_(void *a1, const char *a2, ...)
{
  return [a1 setFSensorRecorderQueryTimer:];
}

id objc_msgSend_setFSensorRecorderSubscribeTimer_(void *a1, const char *a2, ...)
{
  return [a1 setFSensorRecorderSubscribeTimer:];
}

id objc_msgSend_setFServingCellChangedCb_(void *a1, const char *a2, ...)
{
  return [a1 setFServingCellChangedCb:];
}

id objc_msgSend_setFServingNetworkChangedCb_(void *a1, const char *a2, ...)
{
  return [a1 setFServingNetworkChangedCb:];
}

id objc_msgSend_setFSimStatusCb_(void *a1, const char *a2, ...)
{
  return [a1 setFSimStatusCb:];
}

id objc_msgSend_setFSmsSentCb_(void *a1, const char *a2, ...)
{
  return [a1 setFSmsSentCb:];
}

id objc_msgSend_setFSpectatingLocation_(void *a1, const char *a2, ...)
{
  return [a1 setFSpectatingLocation:];
}

id objc_msgSend_setFStartTime_(void *a1, const char *a2, ...)
{
  return [a1 setFStartTime:];
}

id objc_msgSend_setFState_(void *a1, const char *a2, ...)
{
  return [a1 setFState:];
}

id objc_msgSend_setFStewieSupportChangedCb_(void *a1, const char *a2, ...)
{
  return [a1 setFStewieSupportChangedCb:];
}

id objc_msgSend_setFSubscriberMccCb_(void *a1, const char *a2, ...)
{
  return [a1 setFSubscriberMccCb:];
}

id objc_msgSend_setFSubscriptionInfoCb_(void *a1, const char *a2, ...)
{
  return [a1 setFSubscriptionInfoCb:];
}

id objc_msgSend_setFSuplSmsCb_(void *a1, const char *a2, ...)
{
  return [a1 setFSuplSmsCb:];
}

id objc_msgSend_setFTandemCapabilityChangeCb_(void *a1, const char *a2, ...)
{
  return [a1 setFTandemCapabilityChangeCb:];
}

id objc_msgSend_setFType_(void *a1, const char *a2, ...)
{
  return [a1 setFType:];
}

id objc_msgSend_setFVoiceLinkQualityCb_(void *a1, const char *a2, ...)
{
  return [a1 setFVoiceLinkQualityCb:];
}

id objc_msgSend_setFeelsLikeTemperature_(void *a1, const char *a2, ...)
{
  return [a1 setFeelsLikeTemperature:];
}

id objc_msgSend_setFence(void *a1, const char *a2, ...)
{
  return _[a1 setFence];
}

id objc_msgSend_setFence_forClient_withRadius_(void *a1, const char *a2, ...)
{
  return [a1 setFence:forClient:withRadius:];
}

id objc_msgSend_setFenceAnalyticsManager_(void *a1, const char *a2, ...)
{
  return [a1 setFenceAnalyticsManager:];
}

id objc_msgSend_setFenceCategoryType_(void *a1, const char *a2, ...)
{
  return [a1 setFenceCategoryType:];
}

id objc_msgSend_setFenceID_(void *a1, const char *a2, ...)
{
  return [a1 setFenceID:];
}

id objc_msgSend_setFenceIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setFenceIdentifier:];
}

id objc_msgSend_setFenceRadius_(void *a1, const char *a2, ...)
{
  return [a1 setFenceRadius:];
}

id objc_msgSend_setFenceType_(void *a1, const char *a2, ...)
{
  return [a1 setFenceType:];
}

id objc_msgSend_setFileHandleForReadWrite_(void *a1, const char *a2, ...)
{
  return [a1 setFileHandleForReadWrite:];
}

id objc_msgSend_setFilteredPressure_(void *a1, const char *a2, ...)
{
  return [a1 setFilteredPressure:];
}

id objc_msgSend_setFilteredVo2Max_(void *a1, const char *a2, ...)
{
  return [a1 setFilteredVo2Max:];
}

id objc_msgSend_setFindMyAppDidBackgroundOrExitHandler_(void *a1, const char *a2, ...)
{
  return [a1 setFindMyAppDidBackgroundOrExitHandler:];
}

id objc_msgSend_setFingerprints_(void *a1, const char *a2, ...)
{
  return [a1 setFingerprints:];
}

id objc_msgSend_setFinished_(void *a1, const char *a2, ...)
{
  return [a1 setFinished:];
}

id objc_msgSend_setFireInterval_(void *a1, const char *a2, ...)
{
  return [a1 setFireInterval:];
}

id objc_msgSend_setFiredTime_(void *a1, const char *a2, ...)
{
  return [a1 setFiredTime:];
}

id objc_msgSend_setFirmwareDownloadAssetsCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setFirmwareDownloadAssetsCharacteristic:];
}

id objc_msgSend_setFirmwareDownloadAssetsReadyCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setFirmwareDownloadAssetsReadyCharacteristic:];
}

id objc_msgSend_setFirmwareDownloadCommandCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setFirmwareDownloadCommandCharacteristic:];
}

id objc_msgSend_setFirmwareVersion_(void *a1, const char *a2, ...)
{
  return [a1 setFirmwareVersion:];
}

id objc_msgSend_setFirstRefreshAfterVisit_(void *a1, const char *a2, ...)
{
  return [a1 setFirstRefreshAfterVisit:];
}

id objc_msgSend_setFirstStepTime_(void *a1, const char *a2, ...)
{
  return [a1 setFirstStepTime:];
}

id objc_msgSend_setFirwmareDownloadStatusCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setFirwmareDownloadStatusCharacteristic:];
}

id objc_msgSend_setFitnessTracking_(void *a1, const char *a2, ...)
{
  return [a1 setFitnessTracking:];
}

id objc_msgSend_setFitnessTrackingEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setFitnessTrackingEnabled:];
}

id objc_msgSend_setFlags_(void *a1, const char *a2, ...)
{
  return [a1 setFlags:];
}

id objc_msgSend_setFlipNegativeTravelDirectionRoads_(void *a1, const char *a2, ...)
{
  return [a1 setFlipNegativeTravelDirectionRoads:];
}

id objc_msgSend_setFloor_(void *a1, const char *a2, ...)
{
  return [a1 setFloor:];
}

id objc_msgSend_setFloorsAscended_(void *a1, const char *a2, ...)
{
  return [a1 setFloorsAscended:];
}

id objc_msgSend_setFloorsDescended_(void *a1, const char *a2, ...)
{
  return [a1 setFloorsDescended:];
}

id objc_msgSend_setForceReason_(void *a1, const char *a2, ...)
{
  return [a1 setForceReason:];
}

id objc_msgSend_setFormatterBehavior_(void *a1, const char *a2, ...)
{
  return [a1 setFormatterBehavior:];
}

id objc_msgSend_setFprefDataSimChangedCb_(void *a1, const char *a2, ...)
{
  return [a1 setFprefDataSimChangedCb:];
}

id objc_msgSend_setFrequency_(void *a1, const char *a2, ...)
{
  return [a1 setFrequency:];
}

id objc_msgSend_setFromOwnerDevice_(void *a1, const char *a2, ...)
{
  return [a1 setFromOwnerDevice:];
}

id objc_msgSend_setFullPathForSyncState_(void *a1, const char *a2, ...)
{
  return [a1 setFullPathForSyncState:];
}

id objc_msgSend_setFullSessionTimeout_(void *a1, const char *a2, ...)
{
  return [a1 setFullSessionTimeout:];
}

id objc_msgSend_setFullSyncObjectsInCompanionQueue_(void *a1, const char *a2, ...)
{
  return [a1 setFullSyncObjectsInCompanionQueue:];
}

id objc_msgSend_setFullSyncObjectsInGizmoQueue_(void *a1, const char *a2, ...)
{
  return [a1 setFullSyncObjectsInGizmoQueue:];
}

id objc_msgSend_setGalileo_(void *a1, const char *a2, ...)
{
  return [a1 setGalileo:];
}

id objc_msgSend_setGender_(void *a1, const char *a2, ...)
{
  return [a1 setGender:];
}

id objc_msgSend_setGeoReferenceFrame_(void *a1, const char *a2, ...)
{
  return [a1 setGeoReferenceFrame:];
}

id objc_msgSend_setGeodeticAltitudeM_(void *a1, const char *a2, ...)
{
  return [a1 setGeodeticAltitudeM:];
}

id objc_msgSend_setGeofenceAtLocation_(void *a1, const char *a2, ...)
{
  return [a1 setGeofenceAtLocation:];
}

id objc_msgSend_setGetStartLocation_(void *a1, const char *a2, ...)
{
  return [a1 setGetStartLocation:];
}

id objc_msgSend_setGlobalConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 setGlobalConfiguration:];
}

id objc_msgSend_setGlonass_(void *a1, const char *a2, ...)
{
  return [a1 setGlonass:];
}

id objc_msgSend_setGps_(void *a1, const char *a2, ...)
{
  return [a1 setGps:];
}

id objc_msgSend_setGpsAltitude_(void *a1, const char *a2, ...)
{
  return [a1 setGpsAltitude:];
}

id objc_msgSend_setGpsAssistanceRequested_(void *a1, const char *a2, ...)
{
  return [a1 setGpsAssistanceRequested:];
}

id objc_msgSend_setGpsAssistantHasClients_forNotification_(void *a1, const char *a2, ...)
{
  return [a1 setGpsAssistantHasClients:forNotification:];
}

id objc_msgSend_setGpsCourseAccuracy_(void *a1, const char *a2, ...)
{
  return [a1 setGpsCourseAccuracy:];
}

id objc_msgSend_setGpsCourseRadians_(void *a1, const char *a2, ...)
{
  return [a1 setGpsCourseRadians:];
}

id objc_msgSend_setGpsFusionRequested_(void *a1, const char *a2, ...)
{
  return [a1 setGpsFusionRequested:];
}

id objc_msgSend_setGpsSource_(void *a1, const char *a2, ...)
{
  return [a1 setGpsSource:];
}

id objc_msgSend_setGpsSpeedAccuracy_(void *a1, const char *a2, ...)
{
  return [a1 setGpsSpeedAccuracy:];
}

id objc_msgSend_setGrade_(void *a1, const char *a2, ...)
{
  return [a1 setGrade:];
}

id objc_msgSend_setGradeMean_(void *a1, const char *a2, ...)
{
  return [a1 setGradeMean:];
}

id objc_msgSend_setGradeType_(void *a1, const char *a2, ...)
{
  return [a1 setGradeType:];
}

id objc_msgSend_setGradeVariance_(void *a1, const char *a2, ...)
{
  return [a1 setGradeVariance:];
}

id objc_msgSend_setGradient_(void *a1, const char *a2, ...)
{
  return [a1 setGradient:];
}

id objc_msgSend_setGroundAltitude_(void *a1, const char *a2, ...)
{
  return [a1 setGroundAltitude:];
}

id objc_msgSend_setGroundAltitudeUncertainty_(void *a1, const char *a2, ...)
{
  return [a1 setGroundAltitudeUncertainty:];
}

id objc_msgSend_setGroupIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setGroupIdentifier:];
}

id objc_msgSend_setGroupMaintDelta_forUUID_(void *a1, const char *a2, ...)
{
  return [a1 setGroupMaintDelta:forUUID:];
}

id objc_msgSend_setGscn_(void *a1, const char *a2, ...)
{
  return [a1 setGscn:];
}

id objc_msgSend_setGymLocations_(void *a1, const char *a2, ...)
{
  return [a1 setGymLocations:];
}

id objc_msgSend_setGyroSampleRate_(void *a1, const char *a2, ...)
{
  return [a1 setGyroSampleRate:];
}

id objc_msgSend_setHTTPBody_(void *a1, const char *a2, ...)
{
  return [a1 setHTTPBody:];
}

id objc_msgSend_setHTTPMethod_(void *a1, const char *a2, ...)
{
  return [a1 setHTTPMethod:];
}

id objc_msgSend_setHandler_(void *a1, const char *a2, ...)
{
  return [a1 setHandler:];
}

id objc_msgSend_setHardwareType_(void *a1, const char *a2, ...)
{
  return [a1 setHardwareType:];
}

id objc_msgSend_setHarvestingEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setHarvestingEnabled:];
}

id objc_msgSend_setHasAtLeastOneClientWithCLActivityTypeFitness_(void *a1, const char *a2, ...)
{
  return [a1 setHasAtLeastOneClientWithCLActivityTypeFitness:];
}

id objc_msgSend_setHasChangesAvailable(void *a1, const char *a2, ...)
{
  return _[a1 setHasChangesAvailable];
}

id objc_msgSend_setHasExecutedScheduleFromCellularConnectivity_(void *a1, const char *a2, ...)
{
  return [a1 setHasExecutedScheduleFromCellularConnectivity:];
}

id objc_msgSend_setHasExecutedScheduleFromWifiConnectivity_(void *a1, const char *a2, ...)
{
  return [a1 setHasExecutedScheduleFromWifiConnectivity:];
}

id objc_msgSend_setHasGPS_(void *a1, const char *a2, ...)
{
  return [a1 setHasGPS:];
}

id objc_msgSend_setHasLoiAtFence_(void *a1, const char *a2, ...)
{
  return [a1 setHasLoiAtFence:];
}

id objc_msgSend_setHasPreparedForFirmwareDownload_(void *a1, const char *a2, ...)
{
  return [a1 setHasPreparedForFirmwareDownload:];
}

id objc_msgSend_setHasRegisteredForCellularConnectivity_(void *a1, const char *a2, ...)
{
  return [a1 setHasRegisteredForCellularConnectivity:];
}

id objc_msgSend_setHasRegisteredForWifiConnectivity_(void *a1, const char *a2, ...)
{
  return [a1 setHasRegisteredForWifiConnectivity:];
}

id objc_msgSend_setHasSentAssetData_(void *a1, const char *a2, ...)
{
  return [a1 setHasSentAssetData:];
}

id objc_msgSend_setHasSentCRCPacket_(void *a1, const char *a2, ...)
{
  return [a1 setHasSentCRCPacket:];
}

id objc_msgSend_setHasSignificantPrior_(void *a1, const char *a2, ...)
{
  return [a1 setHasSignificantPrior:];
}

id objc_msgSend_setHasStrideCal_(void *a1, const char *a2, ...)
{
  return [a1 setHasStrideCal:];
}

id objc_msgSend_setHasWifiFallback_(void *a1, const char *a2, ...)
{
  return [a1 setHasWifiFallback:];
}

id objc_msgSend_setHashFunction_(void *a1, const char *a2, ...)
{
  return [a1 setHashFunction:];
}

id objc_msgSend_setHawkeyeConfigurationCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setHawkeyeConfigurationCharacteristic:];
}

id objc_msgSend_setHawkeyeDebugCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setHawkeyeDebugCharacteristic:];
}

id objc_msgSend_setHawkeyeFirmwareUpdateCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setHawkeyeFirmwareUpdateCharacteristic];
}

id objc_msgSend_setHawkeyeNonOwnerCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setHawkeyeNonOwnerCharacteristic:];
}

id objc_msgSend_setHawkeyeOpcode_(void *a1, const char *a2, ...)
{
  return [a1 setHawkeyeOpcode:];
}

id objc_msgSend_setHawkeyePairedOwnerInformationCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setHawkeyePairedOwnerInformationCharacteristic:];
}

id objc_msgSend_setHawkeyePayload_(void *a1, const char *a2, ...)
{
  return [a1 setHawkeyePayload:];
}

id objc_msgSend_setHawkeyePreciseFindingCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setHawkeyePreciseFindingCharacteristic:];
}

id objc_msgSend_setHawkeyeTestMode_(void *a1, const char *a2, ...)
{
  return [a1 setHawkeyeTestMode:];
}

id objc_msgSend_setHawkeyeUTMotionConfigWithSeparatedUTTimeoutSeconds_separatedUTBackoffTimeoutSeconds_(void *a1, const char *a2, ...)
{
  return [a1 setHawkeyeUTMotionConfigWithSeparatedUTTimeoutSeconds:separatedUTTimeoutSeconds separatedUTBackoffTimeoutSeconds:separatedUTBackoffTimeoutSeconds];
}

id objc_msgSend_setHeartRate_(void *a1, const char *a2, ...)
{
  return [a1 setHeartRate:];
}

id objc_msgSend_setHeartRateRecoveryEndTime_(void *a1, const char *a2, ...)
{
  return [a1 setHeartRateRecoveryEndTime:];
}

id objc_msgSend_setHeartRateRecoveryStartTime_(void *a1, const char *a2, ...)
{
  return [a1 setHeartRateRecoveryStartTime:];
}

id objc_msgSend_setHeightM_(void *a1, const char *a2, ...)
{
  return [a1 setHeightM:];
}

id objc_msgSend_setHeroAppRankInstalled_(void *a1, const char *a2, ...)
{
  return [a1 setHeroAppRankInstalled:];
}

id objc_msgSend_setHeroAppRankUnInstalled_(void *a1, const char *a2, ...)
{
  return [a1 setHeroAppRankUnInstalled:];
}

id objc_msgSend_setHgalCaptureMode_(void *a1, const char *a2, ...)
{
  return [a1 setHgalCaptureMode:];
}

id objc_msgSend_setHidDevice_(void *a1, const char *a2, ...)
{
  return [a1 setHidDevice:];
}

id objc_msgSend_setHidden_(void *a1, const char *a2, ...)
{
  return [a1 setHidden:];
}

id objc_msgSend_setHintForRegionState_significantRegion_withReply_(void *a1, const char *a2, ...)
{
  return [a1 setHintForRegionState:significantRegion:withReply:];
}

id objc_msgSend_setHmaxKm_(void *a1, const char *a2, ...)
{
  return [a1 setHmaxKm:];
}

id objc_msgSend_setHomeLocations_(void *a1, const char *a2, ...)
{
  return [a1 setHomeLocations:];
}

id objc_msgSend_setHomeUUID_(void *a1, const char *a2, ...)
{
  return [a1 setHomeUUID:];
}

id objc_msgSend_setHorizontalAccuracy_(void *a1, const char *a2, ...)
{
  return [a1 setHorizontalAccuracy:];
}

id objc_msgSend_setHorizontalUncM_(void *a1, const char *a2, ...)
{
  return [a1 setHorizontalUncM:];
}

id objc_msgSend_setHorzUncSemiMaj_(void *a1, const char *a2, ...)
{
  return [a1 setHorzUncSemiMaj:];
}

id objc_msgSend_setHorzUncSemiMajAz_(void *a1, const char *a2, ...)
{
  return [a1 setHorzUncSemiMajAz:];
}

id objc_msgSend_setHorzUncSemiMin_(void *a1, const char *a2, ...)
{
  return [a1 setHorzUncSemiMin:];
}

id objc_msgSend_setHour_(void *a1, const char *a2, ...)
{
  return [a1 setHour:];
}

id objc_msgSend_setHourAmbiguity_(void *a1, const char *a2, ...)
{
  return [a1 setHourAmbiguity:];
}

id objc_msgSend_setHr_(void *a1, const char *a2, ...)
{
  return [a1 setHr:];
}

id objc_msgSend_setHrCadenceAgreementMean_(void *a1, const char *a2, ...)
{
  return [a1 setHrCadenceAgreementMean:];
}

id objc_msgSend_setHrCadenceAgreementVariance_(void *a1, const char *a2, ...)
{
  return [a1 setHrCadenceAgreementVariance:];
}

id objc_msgSend_setHrConfidence_(void *a1, const char *a2, ...)
{
  return [a1 setHrConfidence:];
}

id objc_msgSend_setHrConfidenceMean_(void *a1, const char *a2, ...)
{
  return [a1 setHrConfidenceMean:];
}

id objc_msgSend_setHrConfidenceVariance_(void *a1, const char *a2, ...)
{
  return [a1 setHrConfidenceVariance:];
}

id objc_msgSend_setHrMax_(void *a1, const char *a2, ...)
{
  return [a1 setHrMax:];
}

id objc_msgSend_setHrMean_(void *a1, const char *a2, ...)
{
  return [a1 setHrMean:];
}

id objc_msgSend_setHrMin_(void *a1, const char *a2, ...)
{
  return [a1 setHrMin:];
}

id objc_msgSend_setHrTime_(void *a1, const char *a2, ...)
{
  return [a1 setHrTime:];
}

id objc_msgSend_setHrVariance_(void *a1, const char *a2, ...)
{
  return [a1 setHrVariance:];
}

id objc_msgSend_setHrmax_(void *a1, const char *a2, ...)
{
  return [a1 setHrmax:];
}

id objc_msgSend_setHrmin_(void *a1, const char *a2, ...)
{
  return [a1 setHrmin:];
}

id objc_msgSend_setHronset_(void *a1, const char *a2, ...)
{
  return [a1 setHronset:];
}

id objc_msgSend_setHttpRequestHeaders_(void *a1, const char *a2, ...)
{
  return [a1 setHttpRequestHeaders:];
}

id objc_msgSend_setIAPTimeSyncParams_(void *a1, const char *a2, ...)
{
  return [a1 setIAPTimeSyncParams:];
}

id objc_msgSend_setICloudManagedAppleID_(void *a1, const char *a2, ...)
{
  return [a1 setICloudManagedAppleID:];
}

id objc_msgSend_setITunesManagedAppleID_(void *a1, const char *a2, ...)
{
  return [a1 setITunesManagedAppleID:];
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setIdentifier:];
}

id objc_msgSend_setIdsOptions_(void *a1, const char *a2, ...)
{
  return [a1 setIdsOptions:];
}

id objc_msgSend_setIdsService_(void *a1, const char *a2, ...)
{
  return [a1 setIdsService:];
}

id objc_msgSend_setIdsStatus_(void *a1, const char *a2, ...)
{
  return [a1 setIdsStatus:];
}

id objc_msgSend_setInOutdoorWorkout_(void *a1, const char *a2, ...)
{
  return [a1 setInOutdoorWorkout:];
}

id objc_msgSend_setInVisitStatus_(void *a1, const char *a2, ...)
{
  return [a1 setInVisitStatus:];
}

id objc_msgSend_setIncidentalUseMode_forClient_(void *a1, const char *a2, ...)
{
  return [a1 setIncidentalUseMode:forClient:];
}

id objc_msgSend_setIncludeRegionalApps_(void *a1, const char *a2, ...)
{
  return [a1 setIncludeRegionalApps:];
}

id objc_msgSend_setIndoorBundle_(void *a1, const char *a2, ...)
{
  return [a1 setIndoorBundle:];
}

id objc_msgSend_setIndoord_(void *a1, const char *a2, ...)
{
  return [a1 setIndoord:];
}

id objc_msgSend_setInertialOdometry_(void *a1, const char *a2, ...)
{
  return [a1 setInertialOdometry:];
}

id objc_msgSend_setInertialSamples_(void *a1, const char *a2, ...)
{
  return [a1 setInertialSamples:];
}

id objc_msgSend_setInformativeText_(void *a1, const char *a2, ...)
{
  return [a1 setInformativeText:];
}

id objc_msgSend_setInitialResultsHandler_(void *a1, const char *a2, ...)
{
  return [a1 setInitialResultsHandler:];
}

id objc_msgSend_setInputReportHandler_(void *a1, const char *a2, ...)
{
  return [a1 setInputReportHandler:];
}

id objc_msgSend_setInputs_(void *a1, const char *a2, ...)
{
  return [a1 setInputs:];
}

id objc_msgSend_setInstalledEducationProfile_(void *a1, const char *a2, ...)
{
  return [a1 setInstalledEducationProfile:];
}

id objc_msgSend_setInstalledRegion_(void *a1, const char *a2, ...)
{
  return [a1 setInstalledRegion:];
}

id objc_msgSend_setInt_forKey_(void *a1, const char *a2, ...)
{
  return [a1 setInt:forKey:];
}

id objc_msgSend_setInt_forKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 setInt:forKey:atKeyPath:];
}

id objc_msgSend_setInterestZones_(void *a1, const char *a2, ...)
{
  return [a1 setInterestZones:];
}

id objc_msgSend_setInternalKeyMigrationComplete(void *a1, const char *a2, ...)
{
  return _[a1 setInternalKeyMigrationComplete];
}

id objc_msgSend_setInterpPressure_(void *a1, const char *a2, ...)
{
  return [a1 setInterpPressure:];
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return [a1 setInterruptionHandler:];
}

id objc_msgSend_setInterval_(void *a1, const char *a2, ...)
{
  return [a1 setInterval:];
}

id objc_msgSend_setIntervalDistributions_(void *a1, const char *a2, ...)
{
  return [a1 setIntervalDistributions:];
}

id objc_msgSend_setIntervalOverride_(void *a1, const char *a2, ...)
{
  return [a1 setIntervalOverride:];
}

id objc_msgSend_setIntervalTimer_(void *a1, const char *a2, ...)
{
  return [a1 setIntervalTimer:];
}

id objc_msgSend_setInvalid_(void *a1, const char *a2, ...)
{
  return [a1 setInvalid:];
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return [a1 setInvalidationHandler:];
}

id objc_msgSend_setIsActive_(void *a1, const char *a2, ...)
{
  return [a1 setIsActive:];
}

id objc_msgSend_setIsCalibratedBarometricAlt_(void *a1, const char *a2, ...)
{
  return [a1 setIsCalibratedBarometricAlt:];
}

id objc_msgSend_setIsClassicallyConnected_(void *a1, const char *a2, ...)
{
  return [a1 setIsClassicallyConnected:];
}

id objc_msgSend_setIsConflictResolutionMode_(void *a1, const char *a2, ...)
{
  return [a1 setIsConflictResolutionMode:];
}

id objc_msgSend_setIsConnected_(void *a1, const char *a2, ...)
{
  return [a1 setIsConnected:];
}

id objc_msgSend_setIsConservativeEntry_(void *a1, const char *a2, ...)
{
  return [a1 setIsConservativeEntry:];
}

id objc_msgSend_setIsCorrectiveCompensationSupported_(void *a1, const char *a2, ...)
{
  return [a1 setIsCorrectiveCompensationSupported:];
}

id objc_msgSend_setIsDeviceNearbyAndConnected_(void *a1, const char *a2, ...)
{
  return [a1 setIsDeviceNearbyAndConnected:];
}

id objc_msgSend_setIsEmergencyFence_(void *a1, const char *a2, ...)
{
  return [a1 setIsEmergencyFence:];
}

id objc_msgSend_setIsFreeWake_(void *a1, const char *a2, ...)
{
  return [a1 setIsFreeWake:];
}

id objc_msgSend_setIsFromLocationController_(void *a1, const char *a2, ...)
{
  return [a1 setIsFromLocationController:];
}

id objc_msgSend_setIsHelperFence_(void *a1, const char *a2, ...)
{
  return [a1 setIsHelperFence:];
}

id objc_msgSend_setIsInDisputedArea_(void *a1, const char *a2, ...)
{
  return [a1 setIsInDisputedArea:];
}

id objc_msgSend_setIsInVehicleNavigation_(void *a1, const char *a2, ...)
{
  return [a1 setIsInVehicleNavigation:];
}

id objc_msgSend_setIsInitialCache_(void *a1, const char *a2, ...)
{
  return [a1 setIsInitialCache:];
}

id objc_msgSend_setIsLimitedService_(void *a1, const char *a2, ...)
{
  return [a1 setIsLimitedService:];
}

id objc_msgSend_setIsLowPower_(void *a1, const char *a2, ...)
{
  return [a1 setIsLowPower:];
}

id objc_msgSend_setIsMapMatched_(void *a1, const char *a2, ...)
{
  return [a1 setIsMapMatched:];
}

id objc_msgSend_setIsMeasurement_(void *a1, const char *a2, ...)
{
  return [a1 setIsMeasurement:];
}

id objc_msgSend_setIsMonitoring_(void *a1, const char *a2, ...)
{
  return [a1 setIsMonitoring:];
}

id objc_msgSend_setIsMotorcycle_(void *a1, const char *a2, ...)
{
  return [a1 setIsMotorcycle:];
}

id objc_msgSend_setIsNearby_(void *a1, const char *a2, ...)
{
  return [a1 setIsNearby:];
}

id objc_msgSend_setIsOutdoorContext_(void *a1, const char *a2, ...)
{
  return [a1 setIsOutdoorContext:];
}

id objc_msgSend_setIsProactiveAttempt_(void *a1, const char *a2, ...)
{
  return [a1 setIsProactiveAttempt:];
}

id objc_msgSend_setIsProactiveLocation_(void *a1, const char *a2, ...)
{
  return [a1 setIsProactiveLocation:];
}

id objc_msgSend_setIsProactiveLocationSession_(void *a1, const char *a2, ...)
{
  return [a1 setIsProactiveLocationSession:];
}

id objc_msgSend_setIsQuickSwitchInProgress_(void *a1, const char *a2, ...)
{
  return [a1 setIsQuickSwitchInProgress:];
}

id objc_msgSend_setIsQuickSwitchModeOn_(void *a1, const char *a2, ...)
{
  return [a1 setIsQuickSwitchModeOn:];
}

id objc_msgSend_setIsSimPresent_(void *a1, const char *a2, ...)
{
  return [a1 setIsSimPresent:];
}

id objc_msgSend_setIsStalled_(void *a1, const char *a2, ...)
{
  return [a1 setIsStalled:];
}

id objc_msgSend_setIsStanding_(void *a1, const char *a2, ...)
{
  return [a1 setIsStanding:];
}

id objc_msgSend_setIsStreamingClientInFitnessSession_(void *a1, const char *a2, ...)
{
  return [a1 setIsStreamingClientInFitnessSession:];
}

id objc_msgSend_setIsStroller_(void *a1, const char *a2, ...)
{
  return [a1 setIsStroller:];
}

id objc_msgSend_setIsSubscribedForMotion_(void *a1, const char *a2, ...)
{
  return [a1 setIsSubscribedForMotion:];
}

id objc_msgSend_setIsThereAWatch_(void *a1, const char *a2, ...)
{
  return [a1 setIsThereAWatch:];
}

id objc_msgSend_setIsThrottledFence_(void *a1, const char *a2, ...)
{
  return [a1 setIsThrottledFence:];
}

id objc_msgSend_setIsVehicleConnected_(void *a1, const char *a2, ...)
{
  return [a1 setIsVehicleConnected:];
}

id objc_msgSend_setItemJourneyStats_(void *a1, const char *a2, ...)
{
  return [a1 setItemJourneyStats:];
}

id objc_msgSend_setJacksonData_(void *a1, const char *a2, ...)
{
  return [a1 setJacksonData:];
}

id objc_msgSend_setJourneyCount_(void *a1, const char *a2, ...)
{
  return [a1 setJourneyCount:];
}

id objc_msgSend_setKey_(void *a1, const char *a2, ...)
{
  return [a1 setKey:];
}

id objc_msgSend_setKeyRollInterval_(void *a1, const char *a2, ...)
{
  return [a1 setKeyRollInterval:];
}

id objc_msgSend_setKeyRollInterval_forBeacon_completion_(void *a1, const char *a2, ...)
{
  return [a1 setKeyRollInterval:forBeacon:completion:];
}

id objc_msgSend_setKeyRollIntervalForDevice_(void *a1, const char *a2, ...)
{
  return [a1 setKeyRollIntervalForDevice:];
}

id objc_msgSend_setKeyRollTimeout_forDevice_(void *a1, const char *a2, ...)
{
  return [a1 setKeyRollTimeout:forDevice:];
}

id objc_msgSend_setKeyRotationTimeoutCommandWithTimeout_(void *a1, const char *a2, ...)
{
  return [a1 setKeyRotationTimeoutCommandWithTimeout:];
}

id objc_msgSend_setKeyRotationTimeoutHawkeyeTaskWithTimeout_(void *a1, const char *a2, ...)
{
  return [a1 setKeyRotationTimeoutHawkeyeTaskWithTimeout:];
}

id objc_msgSend_setKeyRotationTimeoutTaskWithTimeout_(void *a1, const char *a2, ...)
{
  return [a1 setKeyRotationTimeoutTaskWithTimeout:];
}

id objc_msgSend_setKeyValuePairs_(void *a1, const char *a2, ...)
{
  return [a1 setKeyValuePairs:];
}

id objc_msgSend_setKeychainItemData_(void *a1, const char *a2, ...)
{
  return [a1 setKeychainItemData:];
}

id objc_msgSend_setKrMaterials_(void *a1, const char *a2, ...)
{
  return [a1 setKrMaterials:];
}

id objc_msgSend_setKvalue_(void *a1, const char *a2, ...)
{
  return [a1 setKvalue:];
}

id objc_msgSend_setKvalueTrack_(void *a1, const char *a2, ...)
{
  return [a1 setKvalueTrack:];
}

id objc_msgSend_setLabel_(void *a1, const char *a2, ...)
{
  return [a1 setLabel:];
}

id objc_msgSend_setLac_(void *a1, const char *a2, ...)
{
  return [a1 setLac:];
}

id objc_msgSend_setLacID_(void *a1, const char *a2, ...)
{
  return [a1 setLacID:];
}

id objc_msgSend_setLastARKitUpdate_(void *a1, const char *a2, ...)
{
  return [a1 setLastARKitUpdate:];
}

id objc_msgSend_setLastARSessionState_(void *a1, const char *a2, ...)
{
  return [a1 setLastARSessionState:];
}

id objc_msgSend_setLastAdvertisementDelta_(void *a1, const char *a2, ...)
{
  return [a1 setLastAdvertisementDelta:];
}

id objc_msgSend_setLastAlertDate_(void *a1, const char *a2, ...)
{
  return [a1 setLastAlertDate:];
}

id objc_msgSend_setLastCountryCode_(void *a1, const char *a2, ...)
{
  return [a1 setLastCountryCode:];
}

id objc_msgSend_setLastDisconnectionTime_(void *a1, const char *a2, ...)
{
  return [a1 setLastDisconnectionTime:];
}

id objc_msgSend_setLastEvaluationDate_(void *a1, const char *a2, ...)
{
  return [a1 setLastEvaluationDate:];
}

id objc_msgSend_setLastGroupClassicDisconnectionDelta_(void *a1, const char *a2, ...)
{
  return [a1 setLastGroupClassicDisconnectionDelta:];
}

id objc_msgSend_setLastGroupClassicDisconnectionTime_(void *a1, const char *a2, ...)
{
  return [a1 setLastGroupClassicDisconnectionTime:];
}

id objc_msgSend_setLastHKUpdate_(void *a1, const char *a2, ...)
{
  return [a1 setLastHKUpdate:];
}

id objc_msgSend_setLastHandledLocationAccuracy_(void *a1, const char *a2, ...)
{
  return [a1 setLastHandledLocationAccuracy:];
}

id objc_msgSend_setLastHandledLocationAge_(void *a1, const char *a2, ...)
{
  return [a1 setLastHandledLocationAge:];
}

id objc_msgSend_setLastHandledLocationProvider_(void *a1, const char *a2, ...)
{
  return [a1 setLastHandledLocationProvider:];
}

id objc_msgSend_setLastIndoorError_(void *a1, const char *a2, ...)
{
  return [a1 setLastIndoorError:];
}

id objc_msgSend_setLastKnownMotionState_(void *a1, const char *a2, ...)
{
  return [a1 setLastKnownMotionState:];
}

id objc_msgSend_setLastLeashBreak_(void *a1, const char *a2, ...)
{
  return [a1 setLastLeashBreak:];
}

id objc_msgSend_setLastLeashBreakAccessoryType_(void *a1, const char *a2, ...)
{
  return [a1 setLastLeashBreakAccessoryType:];
}

id objc_msgSend_setLastLocation_(void *a1, const char *a2, ...)
{
  return [a1 setLastLocation:];
}

id objc_msgSend_setLastLocationSettingsEventSource_(void *a1, const char *a2, ...)
{
  return [a1 setLastLocationSettingsEventSource:];
}

id objc_msgSend_setLastMonitoringState_(void *a1, const char *a2, ...)
{
  return [a1 setLastMonitoringState:];
}

id objc_msgSend_setLastObservationTime_(void *a1, const char *a2, ...)
{
  return [a1 setLastObservationTime:];
}

id objc_msgSend_setLastObservedBeacon_(void *a1, const char *a2, ...)
{
  return [a1 setLastObservedBeacon:];
}

id objc_msgSend_setLastObservedIndex_(void *a1, const char *a2, ...)
{
  return [a1 setLastObservedIndex:];
}

id objc_msgSend_setLastObservedType_(void *a1, const char *a2, ...)
{
  return [a1 setLastObservedType:];
}

id objc_msgSend_setLastOdometer_(void *a1, const char *a2, ...)
{
  return [a1 setLastOdometer:];
}

id objc_msgSend_setLastPrefetchTimestamp_(void *a1, const char *a2, ...)
{
  return [a1 setLastPrefetchTimestamp:];
}

id objc_msgSend_setLastProactiveMaintenanceTime_(void *a1, const char *a2, ...)
{
  return [a1 setLastProactiveMaintenanceTime:];
}

id objc_msgSend_setLastProcessedTime_(void *a1, const char *a2, ...)
{
  return [a1 setLastProcessedTime:];
}

id objc_msgSend_setLastReconciledAddress_(void *a1, const char *a2, ...)
{
  return [a1 setLastReconciledAddress:];
}

id objc_msgSend_setLastReconciledCriteria_(void *a1, const char *a2, ...)
{
  return [a1 setLastReconciledCriteria:];
}

id objc_msgSend_setLastReconciliationTime_(void *a1, const char *a2, ...)
{
  return [a1 setLastReconciliationTime:];
}

id objc_msgSend_setLastScanBufferEmptyDate_(void *a1, const char *a2, ...)
{
  return [a1 setLastScanBufferEmptyDate:];
}

id objc_msgSend_setLastUpdateTime_(void *a1, const char *a2, ...)
{
  return [a1 setLastUpdateTime:];
}

id objc_msgSend_setLastlocation_(void *a1, const char *a2, ...)
{
  return [a1 setLastlocation:];
}

id objc_msgSend_setLat_(void *a1, const char *a2, ...)
{
  return [a1 setLat:];
}

id objc_msgSend_setLatency_(void *a1, const char *a2, ...)
{
  return [a1 setLatency:];
}

id objc_msgSend_setLatestData_(void *a1, const char *a2, ...)
{
  return [a1 setLatestData:];
}

id objc_msgSend_setLatestNavModeEstimate_(void *a1, const char *a2, ...)
{
  return [a1 setLatestNavModeEstimate:];
}

id objc_msgSend_setLatestPosition_(void *a1, const char *a2, ...)
{
  return [a1 setLatestPosition:];
}

id objc_msgSend_setLatestReason_(void *a1, const char *a2, ...)
{
  return [a1 setLatestReason:];
}

id objc_msgSend_setLatitude_(void *a1, const char *a2, ...)
{
  return [a1 setLatitude:];
}

id objc_msgSend_setLatitudeDeg_(void *a1, const char *a2, ...)
{
  return [a1 setLatitudeDeg:];
}

id objc_msgSend_setLaunchReason_(void *a1, const char *a2, ...)
{
  return [a1 setLaunchReason:];
}

id objc_msgSend_setLeashState_(void *a1, const char *a2, ...)
{
  return [a1 setLeashState:];
}

id objc_msgSend_setLedgerForType_domain_monitor_client_path_(void *a1, const char *a2, ...)
{
  return [a1 setLedgerForType:x0 domain:x1 monitor:x2 client:x3 path:x4];
}

id objc_msgSend_setLeechClients_(void *a1, const char *a2, ...)
{
  return [a1 setLeechClients:];
}

id objc_msgSend_setLeeching_(void *a1, const char *a2, ...)
{
  return [a1 setLeeching:];
}

id objc_msgSend_setLength_(void *a1, const char *a2, ...)
{
  return [a1 setLength:];
}

id objc_msgSend_setListener_(void *a1, const char *a2, ...)
{
  return [a1 setListener:];
}

id objc_msgSend_setLocManager_(void *a1, const char *a2, ...)
{
  return [a1 setLocManager:];
}

id objc_msgSend_setLocalAddress_(void *a1, const char *a2, ...)
{
  return [a1 setLocalAddress:];
}

id objc_msgSend_setLocale_(void *a1, const char *a2, ...)
{
  return [a1 setLocale:];
}

id objc_msgSend_setLocation_(void *a1, const char *a2, ...)
{
  return [a1 setLocation:];
}

id objc_msgSend_setLocationAccuracy_(void *a1, const char *a2, ...)
{
  return [a1 setLocationAccuracy:];
}

id objc_msgSend_setLocationButtonUseMode_forClient_(void *a1, const char *a2, ...)
{
  return [a1 setLocationButtonUseMode:forClient:];
}

id objc_msgSend_setLocationFingerprints_(void *a1, const char *a2, ...)
{
  return [a1 setLocationFingerprints:];
}

id objc_msgSend_setLocationId_(void *a1, const char *a2, ...)
{
  return [a1 setLocationId:];
}

id objc_msgSend_setLocationManager_(void *a1, const char *a2, ...)
{
  return [a1 setLocationManager:];
}

id objc_msgSend_setLocationProvider_(void *a1, const char *a2, ...)
{
  return [a1 setLocationProvider:];
}

id objc_msgSend_setLocationPushesActive_forAppBundleIdentifier_completion_(void *a1, const char *a2, ...)
{
  return [a1 setLocationPushesActive:forAppBundleIdentifier:completion:];
}

id objc_msgSend_setLocationRestricted_(void *a1, const char *a2, ...)
{
  return [a1 setLocationRestricted:];
}

id objc_msgSend_setLocationServicesEnabledStatus_(void *a1, const char *a2, ...)
{
  return [a1 setLocationServicesEnabledStatus:];
}

id objc_msgSend_setLocationType_(void *a1, const char *a2, ...)
{
  return [a1 setLocationType:];
}

id objc_msgSend_setLocationUpdatesIncludeMotionState_(void *a1, const char *a2, ...)
{
  return [a1 setLocationUpdatesIncludeMotionState:];
}

id objc_msgSend_setLocation_CDMA_forCell_(void *a1, const char *a2, ...)
{
  return [a1 setLocation_CDMA:forCell:];
}

id objc_msgSend_setLocation_GSM_forCell_(void *a1, const char *a2, ...)
{
  return [a1 setLocation_GSM:forCell:];
}

id objc_msgSend_setLocation_LTE_forCell_(void *a1, const char *a2, ...)
{
  return [a1 setLocation_LTE:forCell:];
}

id objc_msgSend_setLocation_NR_forCell_(void *a1, const char *a2, ...)
{
  return [a1 setLocation_NR:forCell:];
}

id objc_msgSend_setLocation_SCDMA_forCell_(void *a1, const char *a2, ...)
{
  return [a1 setLocation_SCDMA:forCell:];
}

id objc_msgSend_setLocations_(void *a1, const char *a2, ...)
{
  return [a1 setLocations:];
}

id objc_msgSend_setLogRequestToFile_(void *a1, const char *a2, ...)
{
  return [a1 setLogRequestToFile:];
}

id objc_msgSend_setLogResponseToFile_(void *a1, const char *a2, ...)
{
  return [a1 setLogResponseToFile:];
}

id objc_msgSend_setLoggingEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setLoggingEnabled:];
}

id objc_msgSend_setLoiDistance_(void *a1, const char *a2, ...)
{
  return [a1 setLoiDistance:];
}

id objc_msgSend_setLoiRadius_(void *a1, const char *a2, ...)
{
  return [a1 setLoiRadius:];
}

id objc_msgSend_setLoiType_(void *a1, const char *a2, ...)
{
  return [a1 setLoiType:];
}

id objc_msgSend_setLon_(void *a1, const char *a2, ...)
{
  return [a1 setLon:];
}

id objc_msgSend_setLongitude_(void *a1, const char *a2, ...)
{
  return [a1 setLongitude:];
}

id objc_msgSend_setLongitudeDeg_(void *a1, const char *a2, ...)
{
  return [a1 setLongitudeDeg:];
}

id objc_msgSend_setLowConfidenceVisitLeechClients_(void *a1, const char *a2, ...)
{
  return [a1 setLowConfidenceVisitLeechClients:];
}

id objc_msgSend_setLsest_(void *a1, const char *a2, ...)
{
  return [a1 setLsest:];
}

id objc_msgSend_setLteCellTowers_(void *a1, const char *a2, ...)
{
  return [a1 setLteCellTowers:];
}

id objc_msgSend_setLtmOffset_(void *a1, const char *a2, ...)
{
  return [a1 setLtmOffset:];
}

id objc_msgSend_setMac_(void *a1, const char *a2, ...)
{
  return [a1 setMac:];
}

id objc_msgSend_setMacID_(void *a1, const char *a2, ...)
{
  return [a1 setMacID:];
}

id objc_msgSend_setMacModes_(void *a1, const char *a2, ...)
{
  return [a1 setMacModes:];
}

id objc_msgSend_setMachineFrequency_(void *a1, const char *a2, ...)
{
  return [a1 setMachineFrequency:];
}

id objc_msgSend_setMacs_(void *a1, const char *a2, ...)
{
  return [a1 setMacs:];
}

id objc_msgSend_setMacsNotInALSDatabase_(void *a1, const char *a2, ...)
{
  return [a1 setMacsNotInALSDatabase:];
}

id objc_msgSend_setMagneticAccuracy_(void *a1, const char *a2, ...)
{
  return [a1 setMagneticAccuracy:];
}

id objc_msgSend_setMagneticCalibration_(void *a1, const char *a2, ...)
{
  return [a1 setMagneticCalibration:];
}

id objc_msgSend_setMaintenanceOnlyCondition_(void *a1, const char *a2, ...)
{
  return [a1 setMaintenanceOnlyCondition:];
}

id objc_msgSend_setMake_(void *a1, const char *a2, ...)
{
  return [a1 setMake:];
}

id objc_msgSend_setManager_(void *a1, const char *a2, ...)
{
  return [a1 setManager:];
}

id objc_msgSend_setManufacturerName_(void *a1, const char *a2, ...)
{
  return [a1 setManufacturerName:];
}

id objc_msgSend_setMapMatchRoadType_(void *a1, const char *a2, ...)
{
  return [a1 setMapMatchRoadType:];
}

id objc_msgSend_setMapMatchedPositionAssistance_(void *a1, const char *a2, ...)
{
  return [a1 setMapMatchedPositionAssistance:];
}

id objc_msgSend_setMarkets_(void *a1, const char *a2, ...)
{
  return [a1 setMarkets:];
}

id objc_msgSend_setMarqueeAppsOnly_(void *a1, const char *a2, ...)
{
  return [a1 setMarqueeAppsOnly:];
}

id objc_msgSend_setMatching_(void *a1, const char *a2, ...)
{
  return [a1 setMatching:];
}

id objc_msgSend_setMaxAbsSlope_(void *a1, const char *a2, ...)
{
  return [a1 setMaxAbsSlope:];
}

id objc_msgSend_setMaxActivityBasedSpeedSinceAdvertisement_(void *a1, const char *a2, ...)
{
  return [a1 setMaxActivityBasedSpeedSinceAdvertisement:];
}

id objc_msgSend_setMaxCellularRSRP_(void *a1, const char *a2, ...)
{
  return [a1 setMaxCellularRSRP:];
}

id objc_msgSend_setMaxConcurrentMessages_(void *a1, const char *a2, ...)
{
  return [a1 setMaxConcurrentMessages:];
}

id objc_msgSend_setMaxConnectionsHawkeyeTaskWithCount_(void *a1, const char *a2, ...)
{
  return [a1 setMaxConnectionsHawkeyeTaskWithCount:];
}

id objc_msgSend_setMaxConnectionsTaskWithCount_(void *a1, const char *a2, ...)
{
  return [a1 setMaxConnectionsTaskWithCount:];
}

id objc_msgSend_setMaxPayloadSize_(void *a1, const char *a2, ...)
{
  return [a1 setMaxPayloadSize:];
}

id objc_msgSend_setMaxPeakPowerInCall_(void *a1, const char *a2, ...)
{
  return [a1 setMaxPeakPowerInCall:];
}

id objc_msgSend_setMaxPressure_(void *a1, const char *a2, ...)
{
  return [a1 setMaxPressure:];
}

id objc_msgSend_setMaxThermalLevelInCall_(void *a1, const char *a2, ...)
{
  return [a1 setMaxThermalLevelInCall:];
}

id objc_msgSend_setMaxThroughput_(void *a1, const char *a2, ...)
{
  return [a1 setMaxThroughput:];
}

id objc_msgSend_setMcc_(void *a1, const char *a2, ...)
{
  return [a1 setMcc:];
}

id objc_msgSend_setMctTimestamp_(void *a1, const char *a2, ...)
{
  return [a1 setMctTimestamp:];
}

id objc_msgSend_setMeCardMapItem_(void *a1, const char *a2, ...)
{
  return [a1 setMeCardMapItem:];
}

id objc_msgSend_setMeCardString_(void *a1, const char *a2, ...)
{
  return [a1 setMeCardString:];
}

id objc_msgSend_setMean_(void *a1, const char *a2, ...)
{
  return [a1 setMean:];
}

id objc_msgSend_setMeanMaxMets_(void *a1, const char *a2, ...)
{
  return [a1 setMeanMaxMets:];
}

id objc_msgSend_setMeanSeaLevelPressure_(void *a1, const char *a2, ...)
{
  return [a1 setMeanSeaLevelPressure:];
}

id objc_msgSend_setMeasurements_(void *a1, const char *a2, ...)
{
  return [a1 setMeasurements:];
}

id objc_msgSend_setMemoryCacheCountLimit_(void *a1, const char *a2, ...)
{
  return [a1 setMemoryCacheCountLimit:];
}

id objc_msgSend_setMemoryCacheTotalCostLimit_(void *a1, const char *a2, ...)
{
  return [a1 setMemoryCacheTotalCostLimit:];
}

id objc_msgSend_setMergePolicy_(void *a1, const char *a2, ...)
{
  return [a1 setMergePolicy:];
}

id objc_msgSend_setMessage_(void *a1, const char *a2, ...)
{
  return [a1 setMessage:];
}

id objc_msgSend_setMessageType_(void *a1, const char *a2, ...)
{
  return [a1 setMessageType:];
}

id objc_msgSend_setMessagesWaitingForAck_(void *a1, const char *a2, ...)
{
  return [a1 setMessagesWaitingForAck:];
}

id objc_msgSend_setMetSource_(void *a1, const char *a2, ...)
{
  return [a1 setMetSource:];
}

id objc_msgSend_setMeta_(void *a1, const char *a2, ...)
{
  return [a1 setMeta:];
}

id objc_msgSend_setMetricDimensions_(void *a1, const char *a2, ...)
{
  return [a1 setMetricDimensions:];
}

id objc_msgSend_setMets_(void *a1, const char *a2, ...)
{
  return [a1 setMets:];
}

id objc_msgSend_setMetsFM_(void *a1, const char *a2, ...)
{
  return [a1 setMetsFM:];
}

id objc_msgSend_setMetsHR_(void *a1, const char *a2, ...)
{
  return [a1 setMetsHR:];
}

id objc_msgSend_setMetsWR_(void *a1, const char *a2, ...)
{
  return [a1 setMetsWR:];
}

id objc_msgSend_setMicroLocationLoiClient_(void *a1, const char *a2, ...)
{
  return [a1 setMicroLocationLoiClient:];
}

id objc_msgSend_setMigrationVersionNumber(void *a1, const char *a2, ...)
{
  return _[a1 setMigrationVersionNumber];
}

id objc_msgSend_setMinCellularRSRP_(void *a1, const char *a2, ...)
{
  return [a1 setMinCellularRSRP:];
}

id objc_msgSend_setMinDurationBetweenInstances_(void *a1, const char *a2, ...)
{
  return [a1 setMinDurationBetweenInstances:];
}

id objc_msgSend_setMinPressure_(void *a1, const char *a2, ...)
{
  return [a1 setMinPressure:];
}

id objc_msgSend_setMinimumEarlyFireProportion_(void *a1, const char *a2, ...)
{
  return [a1 setMinimumEarlyFireProportion:];
}

id objc_msgSend_setMinimumPreferredUpdatedRate_(void *a1, const char *a2, ...)
{
  return [a1 setMinimumPreferredUpdatedRate:];
}

id objc_msgSend_setMinute_(void *a1, const char *a2, ...)
{
  return [a1 setMinute:];
}

id objc_msgSend_setMirroringDelegate_(void *a1, const char *a2, ...)
{
  return [a1 setMirroringDelegate:];
}

id objc_msgSend_setMnc_(void *a1, const char *a2, ...)
{
  return [a1 setMnc:];
}

id objc_msgSend_setMode_(void *a1, const char *a2, ...)
{
  return [a1 setMode:];
}

id objc_msgSend_setModeIndicator_(void *a1, const char *a2, ...)
{
  return [a1 setModeIndicator:];
}

id objc_msgSend_setModeString(void *a1, const char *a2, ...)
{
  return _[a1 setModeString];
}

id objc_msgSend_setModel_(void *a1, const char *a2, ...)
{
  return [a1 setModel:];
}

id objc_msgSend_setModelName_(void *a1, const char *a2, ...)
{
  return [a1 setModelName:];
}

id objc_msgSend_setMonitoring_(void *a1, const char *a2, ...)
{
  return [a1 setMonitoring:];
}

id objc_msgSend_setMonth_(void *a1, const char *a2, ...)
{
  return [a1 setMonth:];
}

id objc_msgSend_setMostRecentLocation_(void *a1, const char *a2, ...)
{
  return [a1 setMostRecentLocation:];
}

id objc_msgSend_setMotion_(void *a1, const char *a2, ...)
{
  return [a1 setMotion:];
}

id objc_msgSend_setMotionActivity_(void *a1, const char *a2, ...)
{
  return [a1 setMotionActivity:];
}

id objc_msgSend_setMotionAlarmActive_(void *a1, const char *a2, ...)
{
  return [a1 setMotionAlarmActive:];
}

id objc_msgSend_setMotionAlarmClients_(void *a1, const char *a2, ...)
{
  return [a1 setMotionAlarmClients:];
}

id objc_msgSend_setMotionState_(void *a1, const char *a2, ...)
{
  return [a1 setMotionState:];
}

id objc_msgSend_setMotionStateAfterNMinusOneStateChange_(void *a1, const char *a2, ...)
{
  return [a1 setMotionStateAfterNMinusOneStateChange:];
}

id objc_msgSend_setMotionStateAfterNMinusTwoStateChange_(void *a1, const char *a2, ...)
{
  return [a1 setMotionStateAfterNMinusTwoStateChange:];
}

id objc_msgSend_setMotionStateBeforeNMinusOneStateChange_(void *a1, const char *a2, ...)
{
  return [a1 setMotionStateBeforeNMinusOneStateChange:];
}

id objc_msgSend_setMotionStateBeforeStateChange_(void *a1, const char *a2, ...)
{
  return [a1 setMotionStateBeforeStateChange:];
}

id objc_msgSend_setMotionStateFunction_(void *a1, const char *a2, ...)
{
  return [a1 setMotionStateFunction:];
}

id objc_msgSend_setMotionVehicleConnected_(void *a1, const char *a2, ...)
{
  return [a1 setMotionVehicleConnected:];
}

id objc_msgSend_setMotionVehicleConnectedStateChanged_(void *a1, const char *a2, ...)
{
  return [a1 setMotionVehicleConnectedStateChanged:];
}

id objc_msgSend_setMountedConfidence_(void *a1, const char *a2, ...)
{
  return [a1 setMountedConfidence:];
}

id objc_msgSend_setMountedState_(void *a1, const char *a2, ...)
{
  return [a1 setMountedState:];
}

id objc_msgSend_setMuid_(void *a1, const char *a2, ...)
{
  return [a1 setMuid:];
}

id objc_msgSend_setMutexAction_(void *a1, const char *a2, ...)
{
  return [a1 setMutexAction:];
}

id objc_msgSend_setMutexAction_withLatency_(void *a1, const char *a2, ...)
{
  return [a1 setMutexAction:withLatency:];
}

id objc_msgSend_setMutexState_(void *a1, const char *a2, ...)
{
  return [a1 setMutexState:];
}

id objc_msgSend_setNMEASentencesToFilter_(void *a1, const char *a2, ...)
{
  return [a1 setNMEASentencesToFilter:];
}

id objc_msgSend_setNMinusOneState_(void *a1, const char *a2, ...)
{
  return [a1 setNMinusOneState:];
}

id objc_msgSend_setNMinusOneStateChangeLocation_(void *a1, const char *a2, ...)
{
  return [a1 setNMinusOneStateChangeLocation:];
}

id objc_msgSend_setNMinusOneStateChangeLocationAccuracy_(void *a1, const char *a2, ...)
{
  return [a1 setNMinusOneStateChangeLocationAccuracy:];
}

id objc_msgSend_setNMinusOneStateChangeLocationProvider_(void *a1, const char *a2, ...)
{
  return [a1 setNMinusOneStateChangeLocationProvider:];
}

id objc_msgSend_setNMinusThreeState_(void *a1, const char *a2, ...)
{
  return [a1 setNMinusThreeState:];
}

id objc_msgSend_setNMinusTwoState_(void *a1, const char *a2, ...)
{
  return [a1 setNMinusTwoState:];
}

id objc_msgSend_setNMinusTwoStateChangeLocation_(void *a1, const char *a2, ...)
{
  return [a1 setNMinusTwoStateChangeLocation:];
}

id objc_msgSend_setNMinusTwoStateChangeLocationAccuracy_(void *a1, const char *a2, ...)
{
  return [a1 setNMinusTwoStateChangeLocationAccuracy:];
}

id objc_msgSend_setNMinusTwoStateChangeLocationProvider_(void *a1, const char *a2, ...)
{
  return [a1 setNMinusTwoStateChangeLocationProvider:];
}

id objc_msgSend_setNPairs_(void *a1, const char *a2, ...)
{
  return [a1 setNPairs:];
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return [a1 setName:];
}

id objc_msgSend_setNatalieData_(void *a1, const char *a2, ...)
{
  return [a1 setNatalieData:];
}

id objc_msgSend_setNatalieFeatures_(void *a1, const char *a2, ...)
{
  return [a1 setNatalieFeatures:];
}

id objc_msgSend_setNearOwnerTimeout_(void *a1, const char *a2, ...)
{
  return [a1 setNearOwnerTimeout:];
}

id objc_msgSend_setNearOwnerTimeoutCommandWithTimeout_(void *a1, const char *a2, ...)
{
  return [a1 setNearOwnerTimeoutCommandWithTimeout:];
}

id objc_msgSend_setNearOwnerTimeoutOverride_(void *a1, const char *a2, ...)
{
  return [a1 setNearOwnerTimeoutOverride:];
}

id objc_msgSend_setNearOwnerTimeoutTaskWithTimeout_(void *a1, const char *a2, ...)
{
  return [a1 setNearOwnerTimeoutTaskWithTimeout:];
}

id objc_msgSend_setNearbyInfoV2DecryptedFlags_(void *a1, const char *a2, ...)
{
  return [a1 setNearbyInfoV2DecryptedFlags:];
}

id objc_msgSend_setNearbyPairUniqueID_(void *a1, const char *a2, ...)
{
  return [a1 setNearbyPairUniqueID:];
}

id objc_msgSend_setNearbyTimeoutHawkeyeTaskWithTimeout_asHele_(void *a1, const char *a2, ...)
{
  return [a1 setNearbyTimeoutHawkeyeTaskWithTimeout:asHele:];
}

id objc_msgSend_setNeedCellsTowers_(void *a1, const char *a2, ...)
{
  return [a1 setNeedCellsTowers:];
}

id objc_msgSend_setNeededDiscovery_(void *a1, const char *a2, ...)
{
  return [a1 setNeededDiscovery:];
}

id objc_msgSend_setNeedsResetSync(void *a1, const char *a2, ...)
{
  return _[a1 setNeedsResetSync];
}

id objc_msgSend_setNeedsToFetchChanges(void *a1, const char *a2, ...)
{
  return _[a1 setNeedsToFetchChanges];
}

id objc_msgSend_setNeighborGroup_(void *a1, const char *a2, ...)
{
  return [a1 setNeighborGroup:];
}

id objc_msgSend_setNeighborType_(void *a1, const char *a2, ...)
{
  return [a1 setNeighborType:];
}

id objc_msgSend_setNetworkAccessAllowed_(void *a1, const char *a2, ...)
{
  return [a1 setNetworkAccessAllowed:];
}

id objc_msgSend_setNewCriteria_(void *a1, const char *a2, ...)
{
  return [a1 setNewCriteria:];
}

id objc_msgSend_setNextFireDelay_(void *a1, const char *a2, ...)
{
  return [a1 setNextFireDelay:];
}

id objc_msgSend_setNextFireDelay_interval_(void *a1, const char *a2, ...)
{
  return [a1 setNextFireDelay:interval:];
}

id objc_msgSend_setNextFireTime_(void *a1, const char *a2, ...)
{
  return [a1 setNextFireTime:];
}

id objc_msgSend_setNextFireTime_interval_(void *a1, const char *a2, ...)
{
  return [a1 setNextFireTime:x0 interval:x1];
}

id objc_msgSend_setNid_(void *a1, const char *a2, ...)
{
  return [a1 setNid:];
}

id objc_msgSend_setNordicCrash_(void *a1, const char *a2, ...)
{
  return [a1 setNordicCrash:];
}

id objc_msgSend_setNotification_(void *a1, const char *a2, ...)
{
  return [a1 setNotification:];
}

id objc_msgSend_setNotificationsInCompanionQueue_(void *a1, const char *a2, ...)
{
  return [a1 setNotificationsInCompanionQueue:];
}

id objc_msgSend_setNotificationsInGizmoQueue_(void *a1, const char *a2, ...)
{
  return [a1 setNotificationsInGizmoQueue:];
}

id objc_msgSend_setNotifier_(void *a1, const char *a2, ...)
{
  return [a1 setNotifier:];
}

id objc_msgSend_setNotifyOnEntry_(void *a1, const char *a2, ...)
{
  return [a1 setNotifyOnEntry:];
}

id objc_msgSend_setNotifyOnExit_(void *a1, const char *a2, ...)
{
  return [a1 setNotifyOnExit:];
}

id objc_msgSend_setNotifyValue_forCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setNotifyValue:forCharacteristic:];
}

id objc_msgSend_setNpnCsgIdEf_(void *a1, const char *a2, ...)
{
  return [a1 setNpnCsgIdEf:];
}

id objc_msgSend_setNpnNwIdEf_(void *a1, const char *a2, ...)
{
  return [a1 setNpnNwIdEf:];
}

id objc_msgSend_setNr5GCellTowers_(void *a1, const char *a2, ...)
{
  return [a1 setNr5GCellTowers:];
}

id objc_msgSend_setNrarfcn_(void *a1, const char *a2, ...)
{
  return [a1 setNrarfcn:];
}

id objc_msgSend_setNumProactiveAttempts_(void *a1, const char *a2, ...)
{
  return [a1 setNumProactiveAttempts:];
}

id objc_msgSend_setNumWorkoutsContrToEstimate_(void *a1, const char *a2, ...)
{
  return [a1 setNumWorkoutsContrToEstimate:];
}

id objc_msgSend_setNumberOfConsecutiveSyncSessionRetries_(void *a1, const char *a2, ...)
{
  return [a1 setNumberOfConsecutiveSyncSessionRetries:];
}

id objc_msgSend_setNumberOfRebaseBtwRefresh_(void *a1, const char *a2, ...)
{
  return [a1 setNumberOfRebaseBtwRefresh:];
}

id objc_msgSend_setNumberOfSteps_(void *a1, const char *a2, ...)
{
  return [a1 setNumberOfSteps:];
}

id objc_msgSend_setNumberOfSurroundingCells_(void *a1, const char *a2, ...)
{
  return [a1 setNumberOfSurroundingCells:];
}

id objc_msgSend_setNumberOfSurroundingWifis_(void *a1, const char *a2, ...)
{
  return [a1 setNumberOfSurroundingWifis:];
}

id objc_msgSend_setNumberOfTrackEndedBtwRefresh_(void *a1, const char *a2, ...)
{
  return [a1 setNumberOfTrackEndedBtwRefresh:];
}

id objc_msgSend_setNwActivityDomain_(void *a1, const char *a2, ...)
{
  return [a1 setNwActivityDomain:];
}

id objc_msgSend_setNwActivityLabel_(void *a1, const char *a2, ...)
{
  return [a1 setNwActivityLabel:];
}

id objc_msgSend_setObfuscatedIdentifierTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setObfuscatedIdentifierTaskWithIdentifier:];
}

id objc_msgSend_setObject_atIndexedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 setObject:atIndexedSubscript:];
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return [a1 setObject:forKey:];
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 setObject:forKeyedSubscript:];
}

id objc_msgSend_setObjectIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setObjectIdentifier:];
}

id objc_msgSend_setObservationValue_(void *a1, const char *a2, ...)
{
  return [a1 setObservationValue:];
}

id objc_msgSend_setObservedTransitAccessPointsCache_(void *a1, const char *a2, ...)
{
  return [a1 setObservedTransitAccessPointsCache:];
}

id objc_msgSend_setOdometer_(void *a1, const char *a2, ...)
{
  return [a1 setOdometer:];
}

id objc_msgSend_setOdometerTarget_(void *a1, const char *a2, ...)
{
  return [a1 setOdometerTarget:];
}

id objc_msgSend_setOffset_(void *a1, const char *a2, ...)
{
  return [a1 setOffset:];
}

id objc_msgSend_setOnConditionUpdateCallbackHandler_(void *a1, const char *a2, ...)
{
  return [a1 setOnConditionUpdateCallbackHandler:];
}

id objc_msgSend_setOobKeys_(void *a1, const char *a2, ...)
{
  return [a1 setOobKeys:];
}

id objc_msgSend_setOperationMemoryThresholdBytes_(void *a1, const char *a2, ...)
{
  return [a1 setOperationMemoryThresholdBytes:];
}

id objc_msgSend_setOperationType_(void *a1, const char *a2, ...)
{
  return [a1 setOperationType:];
}

id objc_msgSend_setOperatorName_(void *a1, const char *a2, ...)
{
  return [a1 setOperatorName:];
}

id objc_msgSend_setOptedIn_(void *a1, const char *a2, ...)
{
  return [a1 setOptedIn:];
}

id objc_msgSend_setOption_forKey_(void *a1, const char *a2, ...)
{
  return [a1 setOption:forKey:];
}

id objc_msgSend_setOtaSettings_(void *a1, const char *a2, ...)
{
  return [a1 setOtaSettings:];
}

id objc_msgSend_setOutdoorConfidence_(void *a1, const char *a2, ...)
{
  return [a1 setOutdoorConfidence:];
}

id objc_msgSend_setOutdoorUpdate_(void *a1, const char *a2, ...)
{
  return [a1 setOutdoorUpdate:];
}

id objc_msgSend_setOutputDeviceIDs_(void *a1, const char *a2, ...)
{
  return [a1 setOutputDeviceIDs:];
}

id objc_msgSend_setOverrideAction_(void *a1, const char *a2, ...)
{
  return [a1 setOverrideAction:];
}

id objc_msgSend_setPace_(void *a1, const char *a2, ...)
{
  return [a1 setPace:];
}

id objc_msgSend_setPacebin_(void *a1, const char *a2, ...)
{
  return [a1 setPacebin:];
}

id objc_msgSend_setPairedDevice_(void *a1, const char *a2, ...)
{
  return [a1 setPairedDevice:];
}

id objc_msgSend_setPairedDeviceID_(void *a1, const char *a2, ...)
{
  return [a1 setPairedDeviceID:];
}

id objc_msgSend_setPairedDeviceLastNearbyTimestamp_(void *a1, const char *a2, ...)
{
  return [a1 setPairedDeviceLastNearbyTimestamp:];
}

id objc_msgSend_setPairedDeviceLastSeenTimestamp_(void *a1, const char *a2, ...)
{
  return [a1 setPairedDeviceLastSeenTimestamp:];
}

id objc_msgSend_setPairedDeviceRegistry_(void *a1, const char *a2, ...)
{
  return [a1 setPairedDeviceRegistry:];
}

id objc_msgSend_setPairedDeviceUUID_(void *a1, const char *a2, ...)
{
  return [a1 setPairedDeviceUUID:];
}

id objc_msgSend_setPairedModelId_(void *a1, const char *a2, ...)
{
  return [a1 setPairedModelId:];
}

id objc_msgSend_setPairedSyncSessionActive_(void *a1, const char *a2, ...)
{
  return [a1 setPairedSyncSessionActive:];
}

id objc_msgSend_setPal_(void *a1, const char *a2, ...)
{
  return [a1 setPal:];
}

id objc_msgSend_setPassSource_(void *a1, const char *a2, ...)
{
  return [a1 setPassSource:];
}

id objc_msgSend_setPassTypeId_(void *a1, const char *a2, ...)
{
  return [a1 setPassTypeId:];
}

id objc_msgSend_setPasscodeLocked_(void *a1, const char *a2, ...)
{
  return [a1 setPasscodeLocked:];
}

id objc_msgSend_setPayload_(void *a1, const char *a2, ...)
{
  return [a1 setPayload:];
}

id objc_msgSend_setPayloadIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setPayloadIdentifier:];
}

id objc_msgSend_setPayloadOffset_(void *a1, const char *a2, ...)
{
  return [a1 setPayloadOffset:];
}

id objc_msgSend_setPd2vtecDphi2D2vtecDphi2_(void *a1, const char *a2, ...)
{
  return [a1 setPd2vtecDphi2D2vtecDphi2:];
}

id objc_msgSend_setPd2vtecDtheta2D2vtecDtheta2_(void *a1, const char *a2, ...)
{
  return [a1 setPd2vtecDtheta2D2vtecDtheta2:];
}

id objc_msgSend_setPd2vtecDthetadphiD2vtecDthetadphi_(void *a1, const char *a2, ...)
{
  return [a1 setPd2vtecDthetadphiD2vtecDthetadphi:];
}

id objc_msgSend_setPdvtecDphiDvtecDphi_(void *a1, const char *a2, ...)
{
  return [a1 setPdvtecDphiDvtecDphi:];
}

id objc_msgSend_setPdvtecDthetaDvtecDtheta_(void *a1, const char *a2, ...)
{
  return [a1 setPdvtecDthetaDvtecDtheta:];
}

id objc_msgSend_setPeakPowerAtEndOfCall_(void *a1, const char *a2, ...)
{
  return [a1 setPeakPowerAtEndOfCall:];
}

id objc_msgSend_setPeakPowerAtStartOfCall_(void *a1, const char *a2, ...)
{
  return [a1 setPeakPowerAtStartOfCall:];
}

id objc_msgSend_setPendingConnectionAttempt_(void *a1, const char *a2, ...)
{
  return [a1 setPendingConnectionAttempt:];
}

id objc_msgSend_setPendingDisconnect_(void *a1, const char *a2, ...)
{
  return [a1 setPendingDisconnect:];
}

id objc_msgSend_setPendingMaterials_(void *a1, const char *a2, ...)
{
  return [a1 setPendingMaterials:];
}

id objc_msgSend_setPerMessageTimeout_(void *a1, const char *a2, ...)
{
  return [a1 setPerMessageTimeout:];
}

id objc_msgSend_setPeripheral_(void *a1, const char *a2, ...)
{
  return [a1 setPeripheral:];
}

id objc_msgSend_setPersistenceUnavailable_(void *a1, const char *a2, ...)
{
  return [a1 setPersistenceUnavailable:];
}

id objc_msgSend_setPersistentStoreCoordinator_(void *a1, const char *a2, ...)
{
  return [a1 setPersistentStoreCoordinator:];
}

id objc_msgSend_setPersistentStoreDescriptions_(void *a1, const char *a2, ...)
{
  return [a1 setPersistentStoreDescriptions:];
}

id objc_msgSend_setPersistentStoreDictionary_forClient_(void *a1, const char *a2, ...)
{
  return [a1 setPersistentStoreDictionary:forClient:];
}

id objc_msgSend_setPersonalizationBVERCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setPersonalizationBVERCharacteristic:];
}

id objc_msgSend_setPersonalizationBoardIDCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setPersonalizationBoardIDCharacteristic:];
}

id objc_msgSend_setPersonalizationBootNonceHashCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setPersonalizationBootNonceHashCharacteristic];
}

id objc_msgSend_setPersonalizationChipIDCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setPersonalizationChipIDCharacteristic:];
}

id objc_msgSend_setPersonalizationECIDCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setPersonalizationECIDCharacteristic];
}

id objc_msgSend_setPersonalizationProdModeCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setPersonalizationProdModeCharacteristic];
}

id objc_msgSend_setPersonalizationSecDomainCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setPersonalizationSecDomainCharacteristic:];
}

id objc_msgSend_setPersonalizationSecModeCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setPersonalizationSecModeCharacteristic:];
}

id objc_msgSend_setPfYieldStatusBeforeCalculatePose_(void *a1, const char *a2, ...)
{
  return [a1 setPfYieldStatusBeforeCalculatePose:];
}

id objc_msgSend_setPhmaxHmaxKm2_(void *a1, const char *a2, ...)
{
  return [a1 setPhmaxHmaxKm2:];
}

id objc_msgSend_setPhoneNumber_(void *a1, const char *a2, ...)
{
  return [a1 setPhoneNumber:];
}

id objc_msgSend_setPid_(void *a1, const char *a2, ...)
{
  return [a1 setPid:];
}

id objc_msgSend_setPilotPhase_(void *a1, const char *a2, ...)
{
  return [a1 setPilotPhase:];
}

id objc_msgSend_setPipelineDiagnosticReport_(void *a1, const char *a2, ...)
{
  return [a1 setPipelineDiagnosticReport:];
}

id objc_msgSend_setPipelinedDidStartLocalizing_(void *a1, const char *a2, ...)
{
  return [a1 setPipelinedDidStartLocalizing:];
}

id objc_msgSend_setPipelinedSeeded_(void *a1, const char *a2, ...)
{
  return [a1 setPipelinedSeeded:];
}

id objc_msgSend_setPipelinedVenues_(void *a1, const char *a2, ...)
{
  return [a1 setPipelinedVenues:];
}

id objc_msgSend_setPmax_(void *a1, const char *a2, ...)
{
  return [a1 setPmax:];
}

id objc_msgSend_setPnoffset_(void *a1, const char *a2, ...)
{
  return [a1 setPnoffset:];
}

id objc_msgSend_setPointCount_(void *a1, const char *a2, ...)
{
  return [a1 setPointCount:];
}

id objc_msgSend_setPort_(void *a1, const char *a2, ...)
{
  return [a1 setPort:];
}

id objc_msgSend_setPortAddressingScheme_(void *a1, const char *a2, ...)
{
  return [a1 setPortAddressingScheme:];
}

id objc_msgSend_setPoshNonOwnerCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setPoshNonOwnerCharacteristic:];
}

id objc_msgSend_setPower_(void *a1, const char *a2, ...)
{
  return [a1 setPower:];
}

id objc_msgSend_setPowerSaveMode_(void *a1, const char *a2, ...)
{
  return [a1 setPowerSaveMode:];
}

id objc_msgSend_setPowerSource_(void *a1, const char *a2, ...)
{
  return [a1 setPowerSource:];
}

id objc_msgSend_setPrbCoarseIndoorSaysIndoor_(void *a1, const char *a2, ...)
{
  return [a1 setPrbCoarseIndoorSaysIndoor:];
}

id objc_msgSend_setPrbGpsSaysIndoor_(void *a1, const char *a2, ...)
{
  return [a1 setPrbGpsSaysIndoor:];
}

id objc_msgSend_setPrbInjectionGainRetryLimitOk_(void *a1, const char *a2, ...)
{
  return [a1 setPrbInjectionGainRetryLimitOk:];
}

id objc_msgSend_setPrbInjectionOccupancyRetryLimitOk_(void *a1, const char *a2, ...)
{
  return [a1 setPrbInjectionOccupancyRetryLimitOk:];
}

id objc_msgSend_setPrbInlierEstimate_(void *a1, const char *a2, ...)
{
  return [a1 setPrbInlierEstimate:];
}

id objc_msgSend_setPrbLocalizerIoWrapperSaysWifiOk_(void *a1, const char *a2, ...)
{
  return [a1 setPrbLocalizerIoWrapperSaysWifiOk:];
}

id objc_msgSend_setPrbOnFloorsEstimate_(void *a1, const char *a2, ...)
{
  return [a1 setPrbOnFloorsEstimate:];
}

id objc_msgSend_setPrbParticleFilterSaysYield_(void *a1, const char *a2, ...)
{
  return [a1 setPrbParticleFilterSaysYield:];
}

id objc_msgSend_setPrbPipelinedSaysYield_(void *a1, const char *a2, ...)
{
  return [a1 setPrbPipelinedSaysYield:];
}

id objc_msgSend_setPrbWifiSaysIndoor_(void *a1, const char *a2, ...)
{
  return [a1 setPrbWifiSaysIndoor:];
}

id objc_msgSend_setPreDaytonaMapping_(void *a1, const char *a2, ...)
{
  return [a1 setPreDaytonaMapping:];
}

id objc_msgSend_setPrecipitationType_(void *a1, const char *a2, ...)
{
  return [a1 setPrecipitationType:];
}

id objc_msgSend_setPrecision_(void *a1, const char *a2, ...)
{
  return [a1 setPrecision:];
}

id objc_msgSend_setPredicate_(void *a1, const char *a2, ...)
{
  return [a1 setPredicate:];
}

id objc_msgSend_setPredicates_(void *a1, const char *a2, ...)
{
  return [a1 setPredicates:];
}

id objc_msgSend_setPreferStaleData_(void *a1, const char *a2, ...)
{
  return [a1 setPreferStaleData:];
}

id objc_msgSend_setPressure_(void *a1, const char *a2, ...)
{
  return [a1 setPressure:];
}

id objc_msgSend_setPressureLocation_(void *a1, const char *a2, ...)
{
  return [a1 setPressureLocation:];
}

id objc_msgSend_setPressureMeasurement_(void *a1, const char *a2, ...)
{
  return [a1 setPressureMeasurement:];
}

id objc_msgSend_setPrevLoc_(void *a1, const char *a2, ...)
{
  return [a1 setPrevLoc:];
}

id objc_msgSend_setPreviousCumulativeDeltaIOSTime_(void *a1, const char *a2, ...)
{
  return [a1 setPreviousCumulativeDeltaIOSTime:];
}

id objc_msgSend_setPreviousLocationAccuracy_(void *a1, const char *a2, ...)
{
  return [a1 setPreviousLocationAccuracy:];
}

id objc_msgSend_setPreviousLocationAge_(void *a1, const char *a2, ...)
{
  return [a1 setPreviousLocationAge:];
}

id objc_msgSend_setPreviousLocationProvider_(void *a1, const char *a2, ...)
{
  return [a1 setPreviousLocationProvider:];
}

id objc_msgSend_setPrior_(void *a1, const char *a2, ...)
{
  return [a1 setPrior:];
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return [a1 setPriority:];
}

id objc_msgSend_setPrivacyTimeOffset_(void *a1, const char *a2, ...)
{
  return [a1 setPrivacyTimeOffset:];
}

id objc_msgSend_setPrivateMode_(void *a1, const char *a2, ...)
{
  return [a1 setPrivateMode:];
}

id objc_msgSend_setProactiveMaintenanceCount_(void *a1, const char *a2, ...)
{
  return [a1 setProactiveMaintenanceCount:];
}

id objc_msgSend_setProductData_(void *a1, const char *a2, ...)
{
  return [a1 setProductData:];
}

id objc_msgSend_setProductId_(void *a1, const char *a2, ...)
{
  return [a1 setProductId:];
}

id objc_msgSend_setProperties_(void *a1, const char *a2, ...)
{
  return [a1 setProperties:];
}

id objc_msgSend_setProperty_forKey_(void *a1, const char *a2, ...)
{
  return [a1 setProperty:forKey:];
}

id objc_msgSend_setProtobufAction_forIncomingRequestsOfType_(void *a1, const char *a2, ...)
{
  return [a1 setProtobufAction:forIncomingRequestsOfType:];
}

id objc_msgSend_setProtocolImplementation_(void *a1, const char *a2, ...)
{
  return [a1 setProtocolImplementation:];
}

id objc_msgSend_setProtocolVersion_(void *a1, const char *a2, ...)
{
  return [a1 setProtocolVersion:];
}

id objc_msgSend_setProvenance_(void *a1, const char *a2, ...)
{
  return [a1 setProvenance:];
}

id objc_msgSend_setProvider_(void *a1, const char *a2, ...)
{
  return [a1 setProvider:];
}

id objc_msgSend_setProviderIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setProviderIdentifier:];
}

id objc_msgSend_setProxy_(void *a1, const char *a2, ...)
{
  return [a1 setProxy:];
}

id objc_msgSend_setPsc_(void *a1, const char *a2, ...)
{
  return [a1 setPsc:];
}

id objc_msgSend_setPvtec0Vtec0_(void *a1, const char *a2, ...)
{
  return [a1 setPvtec0Vtec0:];
}

id objc_msgSend_setQuality_(void *a1, const char *a2, ...)
{
  return [a1 setQuality:];
}

id objc_msgSend_setQuantizedDistChangeSinceLastCalibrationM_(void *a1, const char *a2, ...)
{
  return [a1 setQuantizedDistChangeSinceLastCalibrationM:];
}

id objc_msgSend_setQuantizedTimeChangeSinceLastCalibrationS_(void *a1, const char *a2, ...)
{
  return [a1 setQuantizedTimeChangeSinceLastCalibrationS:];
}

id objc_msgSend_setQuarterHourDisconnect_(void *a1, const char *a2, ...)
{
  return [a1 setQuarterHourDisconnect:];
}

id objc_msgSend_setQuaternion_(void *a1, const char *a2, ...)
{
  return [a1 setQuaternion:];
}

id objc_msgSend_setQueue_(void *a1, const char *a2, ...)
{
  return [a1 setQueue:];
}

id objc_msgSend_setQzss_(void *a1, const char *a2, ...)
{
  return [a1 setQzss:];
}

id objc_msgSend_setRadius_(void *a1, const char *a2, ...)
{
  return [a1 setRadius:];
}

id objc_msgSend_setRadiusMeters_(void *a1, const char *a2, ...)
{
  return [a1 setRadiusMeters:];
}

id objc_msgSend_setRangingRateWithConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 setRangingRateWithConfiguration:];
}

id objc_msgSend_setRapportStreamingLink_(void *a1, const char *a2, ...)
{
  return [a1 setRapportStreamingLink:];
}

id objc_msgSend_setRat_(void *a1, const char *a2, ...)
{
  return [a1 setRat:];
}

id objc_msgSend_setRawCoordinateLatitude_(void *a1, const char *a2, ...)
{
  return [a1 setRawCoordinateLatitude:];
}

id objc_msgSend_setRawCoordinateLongitude_(void *a1, const char *a2, ...)
{
  return [a1 setRawCoordinateLongitude:];
}

id objc_msgSend_setRawGradeType_(void *a1, const char *a2, ...)
{
  return [a1 setRawGradeType:];
}

id objc_msgSend_setRawMotionActivity_(void *a1, const char *a2, ...)
{
  return [a1 setRawMotionActivity:];
}

id objc_msgSend_setRawSpeed_(void *a1, const char *a2, ...)
{
  return [a1 setRawSpeed:];
}

id objc_msgSend_setRawSpeedToKValueBins_(void *a1, const char *a2, ...)
{
  return [a1 setRawSpeedToKValueBins:];
}

id objc_msgSend_setReach_(void *a1, const char *a2, ...)
{
  return [a1 setReach:];
}

id objc_msgSend_setReachability_(void *a1, const char *a2, ...)
{
  return [a1 setReachability:];
}

id objc_msgSend_setReachabilityStatus_(void *a1, const char *a2, ...)
{
  return [a1 setReachabilityStatus:];
}

id objc_msgSend_setReadData_(void *a1, const char *a2, ...)
{
  return [a1 setReadData:];
}

id objc_msgSend_setReadHandler_(void *a1, const char *a2, ...)
{
  return [a1 setReadHandler:];
}

id objc_msgSend_setReadHandler_maxDatagrams_(void *a1, const char *a2, ...)
{
  return [a1 setReadHandler:maxDatagrams:];
}

id objc_msgSend_setReadyForSubmission(void *a1, const char *a2, ...)
{
  return _[a1 setReadyForSubmission];
}

id objc_msgSend_setRealTimeHarvestTriggered_(void *a1, const char *a2, ...)
{
  return [a1 setRealTimeHarvestTriggered:];
}

id objc_msgSend_setReason_(void *a1, const char *a2, ...)
{
  return [a1 setReason:];
}

id objc_msgSend_setReceivedMessageHandler_(void *a1, const char *a2, ...)
{
  return [a1 setReceivedMessageHandler:];
}

id objc_msgSend_setReceivingEndUnacknowledgedMessages_(void *a1, const char *a2, ...)
{
  return [a1 setReceivingEndUnacknowledgedMessages:];
}

id objc_msgSend_setRecentLastPublishDate_(void *a1, const char *a2, ...)
{
  return [a1 setRecentLastPublishDate:];
}

id objc_msgSend_setRecentVisits_(void *a1, const char *a2, ...)
{
  return [a1 setRecentVisits:];
}

id objc_msgSend_setReconnecting_(void *a1, const char *a2, ...)
{
  return [a1 setReconnecting:];
}

id objc_msgSend_setRecordId_(void *a1, const char *a2, ...)
{
  return [a1 setRecordId:];
}

id objc_msgSend_setRecordIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setRecordIdentifier:];
}

id objc_msgSend_setRecordingTriggerMap_outputPathBase_(void *a1, const char *a2, ...)
{
  return [a1 setRecordingTriggerMap:outputPathBase:];
}

id objc_msgSend_setRecoverable_(void *a1, const char *a2, ...)
{
  return [a1 setRecoverable:];
}

id objc_msgSend_setRecoverySyncInProgress_(void *a1, const char *a2, ...)
{
  return [a1 setRecoverySyncInProgress:];
}

id objc_msgSend_setReferenceAltM_(void *a1, const char *a2, ...)
{
  return [a1 setReferenceAltM:];
}

id objc_msgSend_setReferenceAltUncM_(void *a1, const char *a2, ...)
{
  return [a1 setReferenceAltUncM];
}

id objc_msgSend_setReferenceFrame_(void *a1, const char *a2, ...)
{
  return [a1 setReferenceFrame:];
}

id objc_msgSend_setRefinement_(void *a1, const char *a2, ...)
{
  return [a1 setRefinement:];
}

id objc_msgSend_setRefreshGeotag_(void *a1, const char *a2, ...)
{
  return [a1 setRefreshGeotag:];
}

id objc_msgSend_setRegionCenterLocation_(void *a1, const char *a2, ...)
{
  return [a1 setRegionCenterLocation:];
}

id objc_msgSend_setRegionId_(void *a1, const char *a2, ...)
{
  return [a1 setRegionId:];
}

id objc_msgSend_setRegisteredBlock_(void *a1, const char *a2, ...)
{
  return [a1 setRegisteredBlock:];
}

id objc_msgSend_setRegisteredXPCTaskElevationProfile_(void *a1, const char *a2, ...)
{
  return [a1 setRegisteredXPCTaskElevationProfile:];
}

id objc_msgSend_setRegisteredXPCTaskMSLP_(void *a1, const char *a2, ...)
{
  return [a1 setRegisteredXPCTaskMSLP:];
}

id objc_msgSend_setRegularEntry_(void *a1, const char *a2, ...)
{
  return [a1 setRegularEntry:];
}

id objc_msgSend_setRelatedModes_atTime_startingWith_andTransitions_(void *a1, const char *a2, ...)
{
  return [a1 setRelatedModes:x0 atTime:x1 startingWith:x2 andTransitions:x3];
}

id objc_msgSend_setRelevance_forInterestZoneWithId_registeredForClientKey_withReply_(void *a1, const char *a2, ...)
{
  return [a1 setRelevance:forInterestZoneWithId:registeredForClientKey:withReply:];
}

id objc_msgSend_setReliability_(void *a1, const char *a2, ...)
{
  return [a1 setReliability:];
}

id objc_msgSend_setRemainingBOMScansTo_(void *a1, const char *a2, ...)
{
  return [a1 setRemainingBOMScansTo:];
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return [a1 setRemoteObjectInterface:];
}

id objc_msgSend_setReport_payload_length_(void *a1, const char *a2, ...)
{
  return [a1 setReport:payload:length:];
}

id objc_msgSend_setReport_reportLength_withIdentifier_forType_error_timeout_callback_(void *a1, const char *a2, ...)
{
  return [a1 setReport:x0 reportLength:x1 withIdentifier:x2 forType:x3 error:x4 timeout:x5 callback:x6];
}

id objc_msgSend_setRequestReceivedTime_(void *a1, const char *a2, ...)
{
  return [a1 setRequestReceivedTime:];
}

id objc_msgSend_setRequestStatusAtFirstUserResponse_(void *a1, const char *a2, ...)
{
  return [a1 setRequestStatusAtFirstUserResponse:];
}

id objc_msgSend_setRequestTransmissionTime_(void *a1, const char *a2, ...)
{
  return [a1 setRequestTransmissionTime:];
}

id objc_msgSend_setRequestedScanType_(void *a1, const char *a2, ...)
{
  return [a1 setRequestedScanType:];
}

id objc_msgSend_setRequiresExternalPower_(void *a1, const char *a2, ...)
{
  return [a1 setRequiresExternalPower:];
}

id objc_msgSend_setRequiresMutex_(void *a1, const char *a2, ...)
{
  return [a1 setRequiresMutex:];
}

id objc_msgSend_setRequiresNetworkConnectivity_(void *a1, const char *a2, ...)
{
  return [a1 setRequiresNetworkConnectivity:];
}

id objc_msgSend_setRequiresPowerPluggedIn_(void *a1, const char *a2, ...)
{
  return [a1 setRequiresPowerPluggedIn:];
}

id objc_msgSend_setRequiresSecureCoding_(void *a1, const char *a2, ...)
{
  return [a1 setRequiresSecureCoding:];
}

id objc_msgSend_setResendMotionStateTimer_(void *a1, const char *a2, ...)
{
  return [a1 setResendMotionStateTimer:];
}

id objc_msgSend_setResendTimer_(void *a1, const char *a2, ...)
{
  return [a1 setResendTimer:];
}

id objc_msgSend_setResetRecoveryMode_(void *a1, const char *a2, ...)
{
  return [a1 setResetRecoveryMode:];
}

id objc_msgSend_setResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return [a1 setResourceValue:forKey:error:];
}

id objc_msgSend_setRestrictedMode_(void *a1, const char *a2, ...)
{
  return [a1 setRestrictedMode:];
}

id objc_msgSend_setRetrocomputeStatusClients_(void *a1, const char *a2, ...)
{
  return [a1 setRetrocomputeStatusClients:];
}

id objc_msgSend_setRetryTimer_(void *a1, const char *a2, ...)
{
  return [a1 setRetryTimer:];
}

id objc_msgSend_setReunionSyncListPaths_(void *a1, const char *a2, ...)
{
  return [a1 setReunionSyncListPaths:];
}

id objc_msgSend_setReunionSyncLists_(void *a1, const char *a2, ...)
{
  return [a1 setReunionSyncLists:];
}

id objc_msgSend_setRevertToUnknownTimer_(void *a1, const char *a2, ...)
{
  return [a1 setRevertToUnknownTimer:];
}

id objc_msgSend_setRoseRangingParametersCommandWithParameters_(void *a1, const char *a2, ...)
{
  return [a1 setRoseRangingParametersCommandWithParameters:];
}

id objc_msgSend_setRoseRangingParametersNonOwnerCommandWithParameters_(void *a1, const char *a2, ...)
{
  return [a1 setRoseRangingParametersNonOwnerCommandWithParameters:];
}

id objc_msgSend_setRoseRangingParametersTaskWithParameters_(void *a1, const char *a2, ...)
{
  return [a1 setRoseRangingParametersTaskWithParameters:];
}

id objc_msgSend_setRotationInterval_(void *a1, const char *a2, ...)
{
  return [a1 setRotationInterval:];
}

id objc_msgSend_setRouteHintWatchdogTimer_(void *a1, const char *a2, ...)
{
  return [a1 setRouteHintWatchdogTimer:];
}

id objc_msgSend_setRoutineManager_(void *a1, const char *a2, ...)
{
  return [a1 setRoutineManager:];
}

id objc_msgSend_setRoutineMode_(void *a1, const char *a2, ...)
{
  return [a1 setRoutineMode:];
}

id objc_msgSend_setRoutineMonitor_(void *a1, const char *a2, ...)
{
  return [a1 setRoutineMonitor:];
}

id objc_msgSend_setRowingModel_(void *a1, const char *a2, ...)
{
  return [a1 setRowingModel:];
}

id objc_msgSend_setRscp_(void *a1, const char *a2, ...)
{
  return [a1 setRscp:];
}

id objc_msgSend_setRssi_(void *a1, const char *a2, ...)
{
  return [a1 setRssi:];
}

id objc_msgSend_setRunInertialIntegrator_(void *a1, const char *a2, ...)
{
  return [a1 setRunInertialIntegrator:];
}

id objc_msgSend_setRunMapIntegrator_(void *a1, const char *a2, ...)
{
  return [a1 setRunMapIntegrator:];
}

id objc_msgSend_setSatReport_(void *a1, const char *a2, ...)
{
  return [a1 setSatReport:];
}

id objc_msgSend_setScanDeliveryDelayTimer_(void *a1, const char *a2, ...)
{
  return [a1 setScanDeliveryDelayTimer:];
}

id objc_msgSend_setScanFlags_(void *a1, const char *a2, ...)
{
  return [a1 setScanFlags:];
}

id objc_msgSend_setScanRate_(void *a1, const char *a2, ...)
{
  return [a1 setScanRate:];
}

id objc_msgSend_setScanTimestamp_(void *a1, const char *a2, ...)
{
  return [a1 setScanTimestamp:];
}

id objc_msgSend_setScanType_(void *a1, const char *a2, ...)
{
  return [a1 setScanType:];
}

id objc_msgSend_setScannerDelegate_(void *a1, const char *a2, ...)
{
  return [a1 setScannerDelegate:];
}

id objc_msgSend_setScdmaCellTowers_(void *a1, const char *a2, ...)
{
  return [a1 setScdmaCellTowers:];
}

id objc_msgSend_setScenarioTriggerClients_(void *a1, const char *a2, ...)
{
  return [a1 setScenarioTriggerClients:];
}

id objc_msgSend_setSchoolLocations_(void *a1, const char *a2, ...)
{
  return [a1 setSchoolLocations:];
}

id objc_msgSend_setScore_(void *a1, const char *a2, ...)
{
  return [a1 setScore:];
}

id objc_msgSend_setScs_(void *a1, const char *a2, ...)
{
  return [a1 setScs:];
}

id objc_msgSend_setSecond_(void *a1, const char *a2, ...)
{
  return [a1 setSecond:];
}

id objc_msgSend_setSecondaryFileHandle_(void *a1, const char *a2, ...)
{
  return [a1 setSecondaryFileHandle:];
}

id objc_msgSend_setSecondaryPath_(void *a1, const char *a2, ...)
{
  return [a1 setSecondaryPath:];
}

id objc_msgSend_setSectorLatitude_(void *a1, const char *a2, ...)
{
  return [a1 setSectorLatitude:];
}

id objc_msgSend_setSectorLongitude_(void *a1, const char *a2, ...)
{
  return [a1 setSectorLongitude:];
}

id objc_msgSend_setSectorid_(void *a1, const char *a2, ...)
{
  return [a1 setSectorid:];
}

id objc_msgSend_setSedentaryAlarmData_(void *a1, const char *a2, ...)
{
  return [a1 setSedentaryAlarmData:];
}

id objc_msgSend_setSedentaryAlarmDataDeprecated_(void *a1, const char *a2, ...)
{
  return [a1 setSedentaryAlarmDataDeprecated:];
}

id objc_msgSend_setSelectionFeatureValue_value_(void *a1, const char *a2, ...)
{
  return [a1 setSelectionFeatureValue:value:];
}

id objc_msgSend_setSelector_(void *a1, const char *a2, ...)
{
  return [a1 setSelector:];
}

id objc_msgSend_setSensorRecorder_(void *a1, const char *a2, ...)
{
  return [a1 setSensorRecorder:];
}

id objc_msgSend_setSerializer_(void *a1, const char *a2, ...)
{
  return [a1 setSerializer:];
}

id objc_msgSend_setService_(void *a1, const char *a2, ...)
{
  return [a1 setService:];
}

id objc_msgSend_setServiceClass_(void *a1, const char *a2, ...)
{
  return [a1 setServiceClass:];
}

id objc_msgSend_setServiceMaskOperator_(void *a1, const char *a2, ...)
{
  return [a1 setServiceMaskOperator:];
}

id objc_msgSend_setServiceName_(void *a1, const char *a2, ...)
{
  return [a1 setServiceName:];
}

id objc_msgSend_setServiceProviderName_(void *a1, const char *a2, ...)
{
  return [a1 setServiceProviderName:];
}

id objc_msgSend_setServiceReplacementMap_missBehavior_(void *a1, const char *a2, ...)
{
  return [a1 setServiceReplacementMap:missBehavior:];
}

id objc_msgSend_setServiceType_(void *a1, const char *a2, ...)
{
  return [a1 setServiceType:];
}

id objc_msgSend_setServiceUUID_(void *a1, const char *a2, ...)
{
  return [a1 setServiceUUID:];
}

id objc_msgSend_setSession_(void *a1, const char *a2, ...)
{
  return [a1 setSession:];
}

id objc_msgSend_setSessionAttributes_(void *a1, const char *a2, ...)
{
  return [a1 setSessionAttributes:];
}

id objc_msgSend_setSessionCatherineData_(void *a1, const char *a2, ...)
{
  return [a1 setSessionCatherineData:];
}

id objc_msgSend_setSessionId_(void *a1, const char *a2, ...)
{
  return [a1 setSessionId:];
}

id objc_msgSend_setSessionMetadata_(void *a1, const char *a2, ...)
{
  return [a1 setSessionMetadata:];
}

id objc_msgSend_setSessionSendsLaunchEvents_(void *a1, const char *a2, ...)
{
  return [a1 setSessionSendsLaunchEvents:];
}

id objc_msgSend_setSessionStalenessInterval_(void *a1, const char *a2, ...)
{
  return [a1 setSessionStalenessInterval:];
}

id objc_msgSend_setSessionTimer_(void *a1, const char *a2, ...)
{
  return [a1 setSessionTimer:];
}

id objc_msgSend_setSessionType_(void *a1, const char *a2, ...)
{
  return [a1 setSessionType:];
}

id objc_msgSend_setSessionVo2Max_(void *a1, const char *a2, ...)
{
  return [a1 setSessionVo2Max:];
}

id objc_msgSend_setSet_(void *a1, const char *a2, ...)
{
  return [a1 setSet:];
}

id objc_msgSend_setSettings_(void *a1, const char *a2, ...)
{
  return [a1 setSettings:];
}

id objc_msgSend_setSettingsChangeHandler_(void *a1, const char *a2, ...)
{
  return [a1 setSettingsChangeHandler:];
}

id objc_msgSend_setSettingsDictionary_(void *a1, const char *a2, ...)
{
  return [a1 setSettingsDictionary:];
}

id objc_msgSend_setSettingsResetFollowUpState_(void *a1, const char *a2, ...)
{
  return [a1 setSettingsResetFollowUpState:];
}

id objc_msgSend_setSettledState_(void *a1, const char *a2, ...)
{
  return [a1 setSettledState:];
}

id objc_msgSend_setSharedURLCache_(void *a1, const char *a2, ...)
{
  return [a1 setSharedURLCache:];
}

id objc_msgSend_setShouldAddStoreAsynchronously_(void *a1, const char *a2, ...)
{
  return [a1 setShouldAddStoreAsynchronously:];
}

id objc_msgSend_setShouldConfirmHandlingPairingNotification_(void *a1, const char *a2, ...)
{
  return [a1 setShouldConfirmHandlingPairingNotification:];
}

id objc_msgSend_setShouldConfirmHandlingQuickSwitchNotification_(void *a1, const char *a2, ...)
{
  return [a1 setShouldConfirmHandlingQuickSwitchNotification:];
}

id objc_msgSend_setShouldInferMappingModelAutomatically_(void *a1, const char *a2, ...)
{
  return [a1 setShouldInferMappingModelAutomatically:];
}

id objc_msgSend_setShouldMigrateStoreAutomatically_(void *a1, const char *a2, ...)
{
  return [a1 setShouldMigrateStoreAutomatically:];
}

id objc_msgSend_setShouldResetAuthDbOnFullSync_(void *a1, const char *a2, ...)
{
  return [a1 setShouldResetAuthDbOnFullSync:];
}

id objc_msgSend_setShouldSendMoreDataInCurrentSyncSession_(void *a1, const char *a2, ...)
{
  return [a1 setShouldSendMoreDataInCurrentSyncSession:];
}

id objc_msgSend_setSid_(void *a1, const char *a2, ...)
{
  return [a1 setSid:];
}

id objc_msgSend_setSignalEnvironmentType_(void *a1, const char *a2, ...)
{
  return [a1 setSignalEnvironmentType:];
}

id objc_msgSend_setSignature_(void *a1, const char *a2, ...)
{
  return [a1 setSignature:];
}

id objc_msgSend_setSignificantFence_(void *a1, const char *a2, ...)
{
  return [a1 setSignificantFence:];
}

id objc_msgSend_setSilo_(void *a1, const char *a2, ...)
{
  return [a1 setSilo:];
}

id objc_msgSend_setSimpleBeacons_(void *a1, const char *a2, ...)
{
  return [a1 setSimpleBeacons:];
}

id objc_msgSend_setSimulationEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setSimulationEnabled:];
}

id objc_msgSend_setSlope_(void *a1, const char *a2, ...)
{
  return [a1 setSlope:];
}

id objc_msgSend_setSmoothedGPSAltitude_(void *a1, const char *a2, ...)
{
  return [a1 setSmoothedGPSAltitude:];
}

id objc_msgSend_setSmoothedGPSAltitudeUncertainty_(void *a1, const char *a2, ...)
{
  return [a1 setSmoothedGPSAltitudeUncertainty:];
}

id objc_msgSend_setSmoothingRequired_(void *a1, const char *a2, ...)
{
  return [a1 setSmoothingRequired:];
}

id objc_msgSend_setSmsType_(void *a1, const char *a2, ...)
{
  return [a1 setSmsType:];
}

id objc_msgSend_setSmscAddress_(void *a1, const char *a2, ...)
{
  return [a1 setSmscAddress:];
}

id objc_msgSend_setSoftwareBuild_(void *a1, const char *a2, ...)
{
  return [a1 setSoftwareBuild:];
}

id objc_msgSend_setSoftwareVersion_(void *a1, const char *a2, ...)
{
  return [a1 setSoftwareVersion:];
}

id objc_msgSend_setSource_(void *a1, const char *a2, ...)
{
  return [a1 setSource:];
}

id objc_msgSend_setSourceBundleIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setSourceBundleIdentifier:];
}

id objc_msgSend_setSpanLat_(void *a1, const char *a2, ...)
{
  return [a1 setSpanLat:];
}

id objc_msgSend_setSpanLon_(void *a1, const char *a2, ...)
{
  return [a1 setSpanLon:];
}

id objc_msgSend_setSpeed_(void *a1, const char *a2, ...)
{
  return [a1 setSpeed:];
}

id objc_msgSend_setSpeedAccuracy_(void *a1, const char *a2, ...)
{
  return [a1 setSpeedAccuracy:];
}

id objc_msgSend_setSpeedMean_(void *a1, const char *a2, ...)
{
  return [a1 setSpeedMean:];
}

id objc_msgSend_setSpeedMps_(void *a1, const char *a2, ...)
{
  return [a1 setSpeedMps:];
}

id objc_msgSend_setSpeedUncMps_(void *a1, const char *a2, ...)
{
  return [a1 setSpeedUncMps:];
}

id objc_msgSend_setSpeedVariance_(void *a1, const char *a2, ...)
{
  return [a1 setSpeedVariance:];
}

id objc_msgSend_setSrcPort_(void *a1, const char *a2, ...)
{
  return [a1 setSrcPort:];
}

id objc_msgSend_setStairClimbingModel_(void *a1, const char *a2, ...)
{
  return [a1 setStairClimbingModel:];
}

id objc_msgSend_setStart_(void *a1, const char *a2, ...)
{
  return [a1 setStart:];
}

id objc_msgSend_setStartAt_(void *a1, const char *a2, ...)
{
  return [a1 setStartAt:];
}

id objc_msgSend_setStartDate_(void *a1, const char *a2, ...)
{
  return [a1 setStartDate:];
}

id objc_msgSend_setStartScanningAwaitingResponse_(void *a1, const char *a2, ...)
{
  return [a1 setStartScanningAwaitingResponse:];
}

id objc_msgSend_setStartTime_(void *a1, const char *a2, ...)
{
  return [a1 setStartTime:];
}

id objc_msgSend_setStartTimestamp_(void *a1, const char *a2, ...)
{
  return [a1 setStartTimestamp:];
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return [a1 setState:];
}

id objc_msgSend_setStateDescriptor_(void *a1, const char *a2, ...)
{
  return [a1 setStateDescriptor:];
}

id objc_msgSend_setStateHandler_(void *a1, const char *a2, ...)
{
  return [a1 setStateHandler:];
}

id objc_msgSend_setStateInfoChangedBlock_(void *a1, const char *a2, ...)
{
  return [a1 setStateInfoChangedBlock:];
}

id objc_msgSend_setStationaryTimeInSeconds_(void *a1, const char *a2, ...)
{
  return [a1 setStationaryTimeInSeconds:];
}

id objc_msgSend_setStatus_(void *a1, const char *a2, ...)
{
  return [a1 setStatus:];
}

id objc_msgSend_setStatusBarIconForEntityClass_visible_(void *a1, const char *a2, ...)
{
  return [a1 setStatusBarIconForEntityClass:visible:];
}

id objc_msgSend_setStatusHandler_(void *a1, const char *a2, ...)
{
  return [a1 setStatusHandler:];
}

id objc_msgSend_setStatusInfo_(void *a1, const char *a2, ...)
{
  return [a1 setStatusInfo:];
}

id objc_msgSend_setStatusString_(void *a1, const char *a2, ...)
{
  return [a1 setStatusString:];
}

id objc_msgSend_setSteadinessClients_(void *a1, const char *a2, ...)
{
  return [a1 setSteadinessClients:];
}

id objc_msgSend_setStepCadenceToStrideLengthBins_(void *a1, const char *a2, ...)
{
  return [a1 setStepCadenceToStrideLengthBins:];
}

id objc_msgSend_setStepCountData_(void *a1, const char *a2, ...)
{
  return [a1 setStepCountData:];
}

id objc_msgSend_setSteps_(void *a1, const char *a2, ...)
{
  return [a1 setSteps:];
}

id objc_msgSend_setStepsSinceNMinusOneStateChange_(void *a1, const char *a2, ...)
{
  return [a1 setStepsSinceNMinusOneStateChange:];
}

id objc_msgSend_setStepsSinceNMinusTwoStateChange_(void *a1, const char *a2, ...)
{
  return [a1 setStepsSinceNMinusTwoStateChange:];
}

id objc_msgSend_setStewieSupported_(void *a1, const char *a2, ...)
{
  return [a1 setStewieSupported:];
}

id objc_msgSend_setStopScanningAwaitingResponse_(void *a1, const char *a2, ...)
{
  return [a1 setStopScanningAwaitingResponse:];
}

id objc_msgSend_setStopTime_(void *a1, const char *a2, ...)
{
  return [a1 setStopTime:];
}

id objc_msgSend_setStopTimestamp_(void *a1, const char *a2, ...)
{
  return [a1 setStopTimestamp:];
}

id objc_msgSend_setStreamingConnection_(void *a1, const char *a2, ...)
{
  return [a1 setStreamingConnection:];
}

id objc_msgSend_setStrideCalData_(void *a1, const char *a2, ...)
{
  return [a1 setStrideCalData:];
}

id objc_msgSend_setStrideCalDataDeprecated_(void *a1, const char *a2, ...)
{
  return [a1 setStrideCalDataDeprecated:];
}

id objc_msgSend_setString_(void *a1, const char *a2, ...)
{
  return [a1 setString:];
}

id objc_msgSend_setString_forKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 setString:forKey:atKeyPath:];
}

id objc_msgSend_setStrokeAmp_(void *a1, const char *a2, ...)
{
  return [a1 setStrokeAmp:];
}

id objc_msgSend_setStrokeFrequency_(void *a1, const char *a2, ...)
{
  return [a1 setStrokeFrequency:];
}

id objc_msgSend_setStrokePower_(void *a1, const char *a2, ...)
{
  return [a1 setStrokePower:];
}

id objc_msgSend_setSubjectToken_(void *a1, const char *a2, ...)
{
  return [a1 setSubjectToken:];
}

id objc_msgSend_setSubjectUUID_(void *a1, const char *a2, ...)
{
  return [a1 setSubjectUUID:];
}

id objc_msgSend_setSubmersionState_(void *a1, const char *a2, ...)
{
  return [a1 setSubmersionState:];
}

id objc_msgSend_setSumest_(void *a1, const char *a2, ...)
{
  return [a1 setSumest:];
}

id objc_msgSend_setSummaries_(void *a1, const char *a2, ...)
{
  return [a1 setSummaries:];
}

id objc_msgSend_setSupervised_(void *a1, const char *a2, ...)
{
  return [a1 setSupervised:];
}

id objc_msgSend_setSurfacePressure_(void *a1, const char *a2, ...)
{
  return [a1 setSurfacePressure:];
}

id objc_msgSend_setSyncCoordinator_(void *a1, const char *a2, ...)
{
  return [a1 setSyncCoordinator:];
}

id objc_msgSend_setSyncRestriction_(void *a1, const char *a2, ...)
{
  return [a1 setSyncRestriction:];
}

id objc_msgSend_setSyncService_(void *a1, const char *a2, ...)
{
  return [a1 setSyncService:];
}

id objc_msgSend_setSyncSessionRetryInterval_(void *a1, const char *a2, ...)
{
  return [a1 setSyncSessionRetryInterval:];
}

id objc_msgSend_setSystemServicesMap_(void *a1, const char *a2, ...)
{
  return [a1 setSystemServicesMap:];
}

id objc_msgSend_setSystemWakeTime_(void *a1, const char *a2, ...)
{
  return [a1 setSystemWakeTime:];
}

id objc_msgSend_setTaUnknownBeacon_(void *a1, const char *a2, ...)
{
  return [a1 setTaUnknownBeacon:];
}

id objc_msgSend_setTac_(void *a1, const char *a2, ...)
{
  return [a1 setTac:];
}

id objc_msgSend_setTacID_(void *a1, const char *a2, ...)
{
  return [a1 setTacID:];
}

id objc_msgSend_setTag_(void *a1, const char *a2, ...)
{
  return [a1 setTag:];
}

id objc_msgSend_setTagTypeCommandWithType_(void *a1, const char *a2, ...)
{
  return [a1 setTagTypeCommandWithType:];
}

id objc_msgSend_setTagTypeTaskWithType_(void *a1, const char *a2, ...)
{
  return [a1 setTagTypeTaskWithType:];
}

id objc_msgSend_setTarget_(void *a1, const char *a2, ...)
{
  return [a1 setTarget:];
}

id objc_msgSend_setTargetQueue_(void *a1, const char *a2, ...)
{
  return [a1 setTargetQueue:];
}

id objc_msgSend_setTargetUserSession_(void *a1, const char *a2, ...)
{
  return [a1 setTargetUserSession:];
}

id objc_msgSend_setTaskCompleted(void *a1, const char *a2, ...)
{
  return _[a1 setTaskCompleted];
}

id objc_msgSend_setTaskDescription_(void *a1, const char *a2, ...)
{
  return [a1 setTaskDescription:];
}

id objc_msgSend_setTemperature_(void *a1, const char *a2, ...)
{
  return [a1 setTemperature:];
}

id objc_msgSend_setTemperatureUncertainty_(void *a1, const char *a2, ...)
{
  return [a1 setTemperatureUncertainty:];
}

id objc_msgSend_setTemporaryAuthorizationStatusInfoForClient_data_(void *a1, const char *a2, ...)
{
  return [a1 setTemporaryAuthorizationStatusInfoForClient:data];
}

id objc_msgSend_setThermalLevel_(void *a1, const char *a2, ...)
{
  return [a1 setThermalLevel:];
}

id objc_msgSend_setThermalLevelAtEndOfCall_(void *a1, const char *a2, ...)
{
  return [a1 setThermalLevelAtEndOfCall:];
}

id objc_msgSend_setThermalLevelAtStartOfCall_(void *a1, const char *a2, ...)
{
  return [a1 setThermalLevelAtStartOfCall:];
}

id objc_msgSend_setThermalPressure_(void *a1, const char *a2, ...)
{
  return [a1 setThermalPressure:];
}

id objc_msgSend_setTiles_(void *a1, const char *a2, ...)
{
  return [a1 setTiles:];
}

id objc_msgSend_setTimeBetweenReconstructedPointsSeconds_(void *a1, const char *a2, ...)
{
  return [a1 setTimeBetweenReconstructedPointsSeconds:];
}

id objc_msgSend_setTimeEnd_(void *a1, const char *a2, ...)
{
  return [a1 setTimeEnd:];
}

id objc_msgSend_setTimeEndGpsLocationSegment_(void *a1, const char *a2, ...)
{
  return [a1 setTimeEndGpsLocationSegment:];
}

id objc_msgSend_setTimeFenceExit_(void *a1, const char *a2, ...)
{
  return [a1 setTimeFenceExit:];
}

id objc_msgSend_setTimeFenceStart_(void *a1, const char *a2, ...)
{
  return [a1 setTimeFenceStart:];
}

id objc_msgSend_setTimeOfCurrentStateChange_(void *a1, const char *a2, ...)
{
  return [a1 setTimeOfCurrentStateChange:];
}

id objc_msgSend_setTimeOfNMinusOneStateChange_(void *a1, const char *a2, ...)
{
  return [a1 setTimeOfNMinusOneStateChange:];
}

id objc_msgSend_setTimeOfNMinusTwoStateChange_(void *a1, const char *a2, ...)
{
  return [a1 setTimeOfNMinusTwoStateChange:];
}

id objc_msgSend_setTimeSinceDominantActivityChange_(void *a1, const char *a2, ...)
{
  return [a1 setTimeSinceDominantActivityChange:];
}

id objc_msgSend_setTimeSinceMotionActivityChange_(void *a1, const char *a2, ...)
{
  return [a1 setTimeSinceMotionActivityChange:];
}

id objc_msgSend_setTimeSinceNMinusOneStateChange_(void *a1, const char *a2, ...)
{
  return [a1 setTimeSinceNMinusOneStateChange:];
}

id objc_msgSend_setTimeSinceNMinusTwoStateChange_(void *a1, const char *a2, ...)
{
  return [a1 setTimeSinceNMinusTwoStateChange:];
}

id objc_msgSend_setTimeSinceWifiRoam_(void *a1, const char *a2, ...)
{
  return [a1 setTimeSinceWifiRoam:];
}

id objc_msgSend_setTimeStampLastBeepOnMoveScan_(void *a1, const char *a2, ...)
{
  return [a1 setTimeStampLastBeepOnMoveScan:];
}

id objc_msgSend_setTimeStart_(void *a1, const char *a2, ...)
{
  return [a1 setTimeStart:];
}

id objc_msgSend_setTimeStartGpsLocationSegment_(void *a1, const char *a2, ...)
{
  return [a1 setTimeStartGpsLocationSegment];
}

id objc_msgSend_setTimeStyle_(void *a1, const char *a2, ...)
{
  return [a1 setTimeStyle:];
}

id objc_msgSend_setTimeToInitialStateChange_(void *a1, const char *a2, ...)
{
  return [a1 setTimeToInitialStateChange:];
}

id objc_msgSend_setTimeZone_(void *a1, const char *a2, ...)
{
  return [a1 setTimeZone:];
}

id objc_msgSend_setTimeoutInterval_(void *a1, const char *a2, ...)
{
  return [a1 setTimeoutInterval:];
}

id objc_msgSend_setTimeoutIntervalForResource_(void *a1, const char *a2, ...)
{
  return [a1 setTimeoutIntervalForResource:];
}

id objc_msgSend_setTimeoutSeconds_(void *a1, const char *a2, ...)
{
  return [a1 setTimeoutSeconds:];
}

id objc_msgSend_setTimerForGPSOff(void *a1, const char *a2, ...)
{
  return _[a1 setTimerForGPSOff];
}

id objc_msgSend_setTimerForWifiOff(void *a1, const char *a2, ...)
{
  return _[a1 setTimerForWifiOff];
}

id objc_msgSend_setTimerWithInterval_(void *a1, const char *a2, ...)
{
  return [a1 setTimerWithInterval:];
}

id objc_msgSend_setTimestamp_(void *a1, const char *a2, ...)
{
  return [a1 setTimestamp:];
}

id objc_msgSend_setTimestampGps_(void *a1, const char *a2, ...)
{
  return [a1 setTimestampGps:];
}

id objc_msgSend_setTimestampLastBOMDailyLimitResetDate_(void *a1, const char *a2, ...)
{
  return [a1 setTimestampLastBOMDailyLimitResetDate:];
}

id objc_msgSend_setTimestampOfCalibrationS_(void *a1, const char *a2, ...)
{
  return [a1 setTimestampOfCalibrationS];
}

id objc_msgSend_setTimingAdvance_(void *a1, const char *a2, ...)
{
  return [a1 setTimingAdvance:];
}

id objc_msgSend_setTimoutBlock_(void *a1, const char *a2, ...)
{
  return [a1 setTimoutBlock:];
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return [a1 setTitle:];
}

id objc_msgSend_setTotalAdvertisementBuffersAvailable_(void *a1, const char *a2, ...)
{
  return [a1 setTotalAdvertisementBuffersAvailable:];
}

id objc_msgSend_setTouristApp_(void *a1, const char *a2, ...)
{
  return [a1 setTouristApp:];
}

id objc_msgSend_setTrack_(void *a1, const char *a2, ...)
{
  return [a1 setTrack:];
}

id objc_msgSend_setTrackRunHint_(void *a1, const char *a2, ...)
{
  return [a1 setTrackRunHint:];
}

id objc_msgSend_setTransactionAuthor_(void *a1, const char *a2, ...)
{
  return [a1 setTransactionAuthor];
}

id objc_msgSend_setTransmit_(void *a1, const char *a2, ...)
{
  return [a1 setTransmit:];
}

id objc_msgSend_setTransport_(void *a1, const char *a2, ...)
{
  return [a1 setTransport:];
}

id objc_msgSend_setTremorDetectionService_(void *a1, const char *a2, ...)
{
  return [a1 setTremorDetectionService:];
}

id objc_msgSend_setTrigger_(void *a1, const char *a2, ...)
{
  return [a1 setTrigger:];
}

id objc_msgSend_setTriggerEvent_(void *a1, const char *a2, ...)
{
  return [a1 setTriggerEvent:];
}

id objc_msgSend_setTriggerLocalizationScan_(void *a1, const char *a2, ...)
{
  return [a1 setTriggerLocalizationScan:];
}

id objc_msgSend_setTriggerRecordingScan_(void *a1, const char *a2, ...)
{
  return [a1 setTriggerRecordingScan:];
}

id objc_msgSend_setTriggerSubType_(void *a1, const char *a2, ...)
{
  return [a1 setTriggerSubType:];
}

id objc_msgSend_setTriggerTimestamp_(void *a1, const char *a2, ...)
{
  return [a1 setTriggerTimestamp:];
}

id objc_msgSend_setTriggerType_(void *a1, const char *a2, ...)
{
  return [a1 setTriggerType:];
}

id objc_msgSend_setTripId_(void *a1, const char *a2, ...)
{
  return [a1 setTripId:];
}

id objc_msgSend_setTripSegmentRecorderLoggingDirectory_(void *a1, const char *a2, ...)
{
  return [a1 setTripSegmentRecorderLoggingDirectory:];
}

id objc_msgSend_setTripTimestamp_(void *a1, const char *a2, ...)
{
  return [a1 setTripTimestamp:];
}

id objc_msgSend_setTropicalSavannaBranchCount_(void *a1, const char *a2, ...)
{
  return [a1 setTropicalSavannaBranchCount:];
}

id objc_msgSend_setTropicalSavannaProximity_(void *a1, const char *a2, ...)
{
  return [a1 setTropicalSavannaProximity:];
}

id objc_msgSend_setTropicalSavannaTreeId_(void *a1, const char *a2, ...)
{
  return [a1 setTropicalSavannaTreeId:];
}

id objc_msgSend_setTruthMets_(void *a1, const char *a2, ...)
{
  return [a1 setTruthMets:];
}

id objc_msgSend_setTruthMetsSource_(void *a1, const char *a2, ...)
{
  return [a1 setTruthMetsSource:];
}

id objc_msgSend_setTunnelBridgeAssistance_(void *a1, const char *a2, ...)
{
  return [a1 setTunnelBridgeAssistance:];
}

id objc_msgSend_setTunnelEndPointPositionAssistance_(void *a1, const char *a2, ...)
{
  return [a1 setTunnelEndPointPositionAssistance:];
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return [a1 setType:];
}

id objc_msgSend_setURL_(void *a1, const char *a2, ...)
{
  return [a1 setURL:];
}

id objc_msgSend_setUarfcn_(void *a1, const char *a2, ...)
{
  return [a1 setUarfcn:];
}

id objc_msgSend_setUlCenterFrequency_(void *a1, const char *a2, ...)
{
  return [a1 setUlCenterFrequency:];
}

id objc_msgSend_setUnacknowledgedMessages_(void *a1, const char *a2, ...)
{
  return [a1 setUnacknowledgedMessages:];
}

id objc_msgSend_setUnauthorizedPlaySoundRateLimitCommand_(void *a1, const char *a2, ...)
{
  return [a1 setUnauthorizedPlaySoundRateLimitCommand:];
}

id objc_msgSend_setUnauthorizedPlaySoundRateLimitTask_(void *a1, const char *a2, ...)
{
  return [a1 setUnauthorizedPlaySoundRateLimitTask:];
}

id objc_msgSend_setUncertainty_(void *a1, const char *a2, ...)
{
  return [a1 setUncertainty:];
}

id objc_msgSend_setUncertaintyInMeters_(void *a1, const char *a2, ...)
{
  return [a1 setUncertaintyInMeters:];
}

id objc_msgSend_setUnderlyingDictionary_(void *a1, const char *a2, ...)
{
  return [a1 setUnderlyingDictionary:];
}

id objc_msgSend_setUnderlyingQueue_(void *a1, const char *a2, ...)
{
  return [a1 setUnderlyingQueue:];
}

id objc_msgSend_setUndoManager_(void *a1, const char *a2, ...)
{
  return [a1 setUndoManager:];
}

id objc_msgSend_setUniqueCount_(void *a1, const char *a2, ...)
{
  return [a1 setUniqueCount:];
}

id objc_msgSend_setUniqueIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setUniqueIdentifier:];
}

id objc_msgSend_setUniverse_(void *a1, const char *a2, ...)
{
  return [a1 setUniverse:];
}

id objc_msgSend_setUnownedBeacon_(void *a1, const char *a2, ...)
{
  return [a1 setUnownedBeacon:];
}

id objc_msgSend_setUpAggregationOnTimer(void *a1, const char *a2, ...)
{
  return _[a1 setUpAggregationOnTimer];
}

id objc_msgSend_setUpClassificationActivityWithDeferral_(void *a1, const char *a2, ...)
{
  return [a1 setUpClassificationActivityWithDeferral:];
}

id objc_msgSend_setUpCloudKit(void *a1, const char *a2, ...)
{
  return _[a1 setUpCloudKit];
}

id objc_msgSend_setUpGPSSubscriptionForSurfaceCal(void *a1, const char *a2, ...)
{
  return _[a1 setUpGPSSubscriptionForSurfaceCal];
}

id objc_msgSend_setUpMobilityCompanionSyncActivity(void *a1, const char *a2, ...)
{
  return _[a1 setUpMobilityCompanionSyncActivity];
}

id objc_msgSend_setUpProcessBoutsActivity(void *a1, const char *a2, ...)
{
  return _[a1 setUpProcessBoutsActivity];
}

id objc_msgSend_setUpRepeatingActivityToDownloadTiles(void *a1, const char *a2, ...)
{
  return _[a1 setUpRepeatingActivityToDownloadTiles];
}

id objc_msgSend_setUpSyncActivity(void *a1, const char *a2, ...)
{
  return _[a1 setUpSyncActivity];
}

id objc_msgSend_setUpdateCount_(void *a1, const char *a2, ...)
{
  return [a1 setUpdateCount:];
}

id objc_msgSend_setUpdateHandler_(void *a1, const char *a2, ...)
{
  return [a1 setUpdateHandler:];
}

id objc_msgSend_setUpdateStartTime_(void *a1, const char *a2, ...)
{
  return [a1 setUpdateStartTime:];
}

id objc_msgSend_setUpdater_(void *a1, const char *a2, ...)
{
  return [a1 setUpdater:];
}

id objc_msgSend_setUpdating_(void *a1, const char *a2, ...)
{
  return [a1 setUpdating:];
}

id objc_msgSend_setUseCase_(void *a1, const char *a2, ...)
{
  return [a1 setUseCase:];
}

id objc_msgSend_setUseDeviceToDeviceEncryption_(void *a1, const char *a2, ...)
{
  return [a1 setUseDeviceToDeviceEncryption:];
}

id objc_msgSend_setUseParticleMapMatcherForSnappingInMapIntegrator_(void *a1, const char *a2, ...)
{
  return [a1 setUseParticleMapMatcherForSnappingInMapIntegrator:];
}

id objc_msgSend_setUseXPCService_(void *a1, const char *a2, ...)
{
  return [a1 setUseXPCService:];
}

id objc_msgSend_setUseZoneWidePCS_(void *a1, const char *a2, ...)
{
  return [a1 setUseZoneWidePCS:];
}

id objc_msgSend_setUserDataPreferred_(void *a1, const char *a2, ...)
{
  return [a1 setUserDataPreferred:];
}

id objc_msgSend_setUserDefaultVoice_(void *a1, const char *a2, ...)
{
  return [a1 setUserDefaultVoice:];
}

id objc_msgSend_setUserHeight_(void *a1, const char *a2, ...)
{
  return [a1 setUserHeight:];
}

id objc_msgSend_setUserInfo_(void *a1, const char *a2, ...)
{
  return [a1 setUserInfo:];
}

id objc_msgSend_setUserInitiated_(void *a1, const char *a2, ...)
{
  return [a1 setUserInitiated:];
}

id objc_msgSend_setUserMets_(void *a1, const char *a2, ...)
{
  return [a1 setUserMets:];
}

id objc_msgSend_setUserMetsSource_(void *a1, const char *a2, ...)
{
  return [a1 setUserMetsSource:];
}

id objc_msgSend_setUserProfile_merge_(void *a1, const char *a2, ...)
{
  return [a1 setUserProfile:merge:];
}

id objc_msgSend_setUserProfileFromCMNatalimeter_(void *a1, const char *a2, ...)
{
  return [a1 setUserProfileFromCMNatalimeter:];
}

id objc_msgSend_setUserRecordIDName_(void *a1, const char *a2, ...)
{
  return [a1 setUserRecordIDName:];
}

id objc_msgSend_setUserVisible_(void *a1, const char *a2, ...)
{
  return [a1 setUserVisible:];
}

id objc_msgSend_setUtcHawkeyeTask(void *a1, const char *a2, ...)
{
  return _[a1 setUtcHawkeyeTask];
}

id objc_msgSend_setUuid_(void *a1, const char *a2, ...)
{
  return [a1 setUuid:];
}

id objc_msgSend_setValid_(void *a1, const char *a2, ...)
{
  return [a1 setValid:];
}

id objc_msgSend_setValue_(void *a1, const char *a2, ...)
{
  return [a1 setValue:];
}

id objc_msgSend_setValue_forHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return [a1 setValue:forHTTPHeaderField:];
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return [a1 setValue:forKey:];
}

id objc_msgSend_setValue_forPragmaNamed_(void *a1, const char *a2, ...)
{
  return [a1 setValue:forPragmaNamed:];
}

id objc_msgSend_setValues_(void *a1, const char *a2, ...)
{
  return [a1 setValues:];
}

id objc_msgSend_setVariance_(void *a1, const char *a2, ...)
{
  return [a1 setVariance:];
}

id objc_msgSend_setVectorClocks_(void *a1, const char *a2, ...)
{
  return [a1 setVectorClocks:];
}

id objc_msgSend_setVehicleGyroAssistance_vehicleGyro_(void *a1, const char *a2, ...)
{
  return [a1 setVehicleGyroAssistance:vehicleGyro:];
}

id objc_msgSend_setVehicleSpeedAssistance_vehicleSpeed_(void *a1, const char *a2, ...)
{
  return [a1 setVehicleSpeedAssistance:vehicleSpeed:];
}

id objc_msgSend_setVehicleType_(void *a1, const char *a2, ...)
{
  return [a1 setVehicleType:];
}

id objc_msgSend_setVersion_(void *a1, const char *a2, ...)
{
  return [a1 setVersion:];
}

id objc_msgSend_setVerticalAccuracy_(void *a1, const char *a2, ...)
{
  return [a1 setVerticalAccuracy:];
}

id objc_msgSend_setVerticalSpeed_(void *a1, const char *a2, ...)
{
  return [a1 setVerticalSpeed:];
}

id objc_msgSend_setViewInformation_(void *a1, const char *a2, ...)
{
  return [a1 setViewInformation:];
}

id objc_msgSend_setViewName_(void *a1, const char *a2, ...)
{
  return [a1 setViewName:];
}

id objc_msgSend_setViewUUID_(void *a1, const char *a2, ...)
{
  return [a1 setViewUUID:];
}

id objc_msgSend_setVioEstimation_(void *a1, const char *a2, ...)
{
  return [a1 setVioEstimation:];
}

id objc_msgSend_setVisionNotificationProxy_(void *a1, const char *a2, ...)
{
  return [a1 setVisionNotificationProxy:];
}

id objc_msgSend_setVisitClients_(void *a1, const char *a2, ...)
{
  return [a1 setVisitClients:];
}

id objc_msgSend_setVisitDoubleTravelDirectionRoadsTwice_(void *a1, const char *a2, ...)
{
  return [a1 setVisitDoubleTravelDirectionRoadsTwice:];
}

id objc_msgSend_setVlLocalizationResult_(void *a1, const char *a2, ...)
{
  return [a1 setVlLocalizationResult:];
}

id objc_msgSend_setVo2MaxModelSource_(void *a1, const char *a2, ...)
{
  return [a1 setVo2MaxModelSource:];
}

id objc_msgSend_setVo2Mean_(void *a1, const char *a2, ...)
{
  return [a1 setVo2Mean:];
}

id objc_msgSend_setVo2Variance_(void *a1, const char *a2, ...)
{
  return [a1 setVo2Variance:];
}

id objc_msgSend_setVo2max_(void *a1, const char *a2, ...)
{
  return [a1 setVo2max:];
}

id objc_msgSend_setVtec0_(void *a1, const char *a2, ...)
{
  return [a1 setVtec0:];
}

id objc_msgSend_setWatchProductVersion_(void *a1, const char *a2, ...)
{
  return [a1 setWatchProductVersion:];
}

id objc_msgSend_setWaterTempCoefficients(void *a1, const char *a2, ...)
{
  return _[a1 setWaterTempCoefficients];
}

id objc_msgSend_setWaterTempEst_(void *a1, const char *a2, ...)
{
  return [a1 setWaterTempEst:];
}

id objc_msgSend_setWaterTempUncertainty_(void *a1, const char *a2, ...)
{
  return [a1 setWaterTempUncertainty:];
}

id objc_msgSend_setWeatherEstimateInMeter_(void *a1, const char *a2, ...)
{
  return [a1 setWeatherEstimateInMeter:];
}

id objc_msgSend_setWeatherPressure_(void *a1, const char *a2, ...)
{
  return [a1 setWeatherPressure:];
}

id objc_msgSend_setWeekday_(void *a1, const char *a2, ...)
{
  return [a1 setWeekday:];
}

id objc_msgSend_setWeightKG_(void *a1, const char *a2, ...)
{
  return [a1 setWeightKG:];
}

id objc_msgSend_setWifi2GHzCriticalState_(void *a1, const char *a2, ...)
{
  return [a1 setWifi2GHzCriticalState:];
}

id objc_msgSend_setWifiAltitudeScale_(void *a1, const char *a2, ...)
{
  return [a1 setWifiAltitudeScale:];
}

id objc_msgSend_setWifiAssociated_(void *a1, const char *a2, ...)
{
  return [a1 setWifiAssociated:];
}

id objc_msgSend_setWifiAvailable_(void *a1, const char *a2, ...)
{
  return [a1 setWifiAvailable:];
}

id objc_msgSend_setWifiPower_(void *a1, const char *a2, ...)
{
  return [a1 setWifiPower:];
}

id objc_msgSend_setWifiPowered_(void *a1, const char *a2, ...)
{
  return [a1 setWifiPowered:];
}

id objc_msgSend_setWifiScan_(void *a1, const char *a2, ...)
{
  return [a1 setWifiScan:];
}

id objc_msgSend_setWildKeyBase_interval_fallback_forBeacon_completion_(void *a1, const char *a2, ...)
{
  return [a1 setWildKeyBase:x0 interval:x1 fallback:x2 forBeacon:x3 completion:x4];
}

id objc_msgSend_setWildKeyBase_interval_fallback_forDevice_(void *a1, const char *a2, ...)
{
  return [a1 setWildKeyBase:x0 interval:x1 fallback:x2 forDevice:x3];
}

id objc_msgSend_setWildModeConfigurationCommandWithConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 setWildModeConfigurationCommandWithConfiguration:];
}

id objc_msgSend_setWildModeConfigurationTaskWithConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 setWildModeConfigurationTaskWithConfiguration:];
}

id objc_msgSend_setWirelessAPs_(void *a1, const char *a2, ...)
{
  return [a1 setWirelessAPs:];
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return [a1 setWithArray:];
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return [a1 setWithObject:];
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return [a1 setWithObjects:];
}

id objc_msgSend_setWithSet_(void *a1, const char *a2, ...)
{
  return [a1 setWithSet:];
}

id objc_msgSend_setWorkLocations_(void *a1, const char *a2, ...)
{
  return [a1 setWorkLocations:];
}

id objc_msgSend_setWorkingDirectory_(void *a1, const char *a2, ...)
{
  return [a1 setWorkingDirectory:];
}

id objc_msgSend_setWorkoutCount_(void *a1, const char *a2, ...)
{
  return [a1 setWorkoutCount:];
}

id objc_msgSend_setWorkoutEvent_(void *a1, const char *a2, ...)
{
  return [a1 setWorkoutEvent:];
}

id objc_msgSend_setWorkoutEventDeprecated_(void *a1, const char *a2, ...)
{
  return [a1 setWorkoutEventDeprecated:];
}

id objc_msgSend_setWorkoutMode_(void *a1, const char *a2, ...)
{
  return [a1 setWorkoutMode:];
}

id objc_msgSend_setWorkoutSuggestedStopTimeout_(void *a1, const char *a2, ...)
{
  return [a1 setWorkoutSuggestedStopTimeout:];
}

id objc_msgSend_setWorkoutType_(void *a1, const char *a2, ...)
{
  return [a1 setWorkoutType:];
}

id objc_msgSend_setWriter_(void *a1, const char *a2, ...)
{
  return [a1 setWriter:];
}

id objc_msgSend_setX_(void *a1, const char *a2, ...)
{
  return [a1 setX:];
}

id objc_msgSend_setXPCActivityToDone(void *a1, const char *a2, ...)
{
  return _[a1 setXPCActivityToDone];
}

id objc_msgSend_setXpcActivityCriteriaOverrides_(void *a1, const char *a2, ...)
{
  return [a1 setXpcActivityCriteriaOverrides:];
}

id objc_msgSend_setY_(void *a1, const char *a2, ...)
{
  return [a1 setY:];
}

id objc_msgSend_setYear_(void *a1, const char *a2, ...)
{
  return [a1 setYear:];
}

id objc_msgSend_setYieldStatusBeforeCalculatePose_(void *a1, const char *a2, ...)
{
  return [a1 setYieldStatusBeforeCalculatePose:];
}

id objc_msgSend_setYieldType_(void *a1, const char *a2, ...)
{
  return [a1 setYieldType:];
}

id objc_msgSend_setZ_(void *a1, const char *a2, ...)
{
  return [a1 setZ:];
}

id objc_msgSend_setZoneIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setZoneIdentifier:];
}

id objc_msgSend_setZoneType_(void *a1, const char *a2, ...)
{
  return [a1 setZoneType:];
}

id objc_msgSend_setZoneid_(void *a1, const char *a2, ...)
{
  return [a1 setZoneid:];
}

id objc_msgSend_set_requiresPowerPluggedIn_(void *a1, const char *a2, ...)
{
  return [a1 set_requiresPowerPluggedIn:];
}

id objc_msgSend_settings(void *a1, const char *a2, ...)
{
  return _[a1 settings];
}

id objc_msgSend_settingsDictionary(void *a1, const char *a2, ...)
{
  return _[a1 settingsDictionary];
}

id objc_msgSend_settingsVersion(void *a1, const char *a2, ...)
{
  return _[a1 settingsVersion];
}

id objc_msgSend_settleToTemperatureFromStart_toStop_withCurrent_withDecrement_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "settleToTemperatureFromStart:toStop:withCurrent:withDecrement:");
}

id objc_msgSend_settledState(void *a1, const char *a2, ...)
{
  return _[a1 settledState];
}

id objc_msgSend_setup(void *a1, const char *a2, ...)
{
  return _[a1 setup];
}

id objc_msgSend_setupAccessory_withListenerCall_(void *a1, const char *a2, ...)
{
  return [a1 setupAccessory:withListenerCall:];
}

id objc_msgSend_setupAltimeterReleaseTimer(void *a1, const char *a2, ...)
{
  return _[a1 setupAltimeterReleaseTimer];
}

id objc_msgSend_setupCLNotifiers(void *a1, const char *a2, ...)
{
  return _[a1 setupCLNotifiers];
}

id objc_msgSend_setupConfigurationTimer(void *a1, const char *a2, ...)
{
  return _[a1 setupConfigurationTimer];
}

id objc_msgSend_setupDaemonPartOfConditionWithAuthContext_clientKeyPath_universe_identifier_stopMonitoring_callbackHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "setupDaemonPartOfConditionWithAuthContext:clientKeyPath:universe:identifier:stopMonitoring:callbackHandler:");
}

id objc_msgSend_setupDbCleanupActivity(void *a1, const char *a2, ...)
{
  return _[a1 setupDbCleanupActivity];
}

id objc_msgSend_setupDictionary_atKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 setupDictionary:atKeyPath:];
}

id objc_msgSend_setupEphemeris(void *a1, const char *a2, ...)
{
  return _[a1 setupEphemeris];
}

id objc_msgSend_setupHealthKitQueries(void *a1, const char *a2, ...)
{
  return _[a1 setupHealthKitQueries];
}

id objc_msgSend_setupListener(void *a1, const char *a2, ...)
{
  return _[a1 setupListener];
}

id objc_msgSend_setupListeners(void *a1, const char *a2, ...)
{
  return _[a1 setupListeners];
}

id objc_msgSend_setupManager(void *a1, const char *a2, ...)
{
  return _[a1 setupManager];
}

id objc_msgSend_setupModuleWriters(void *a1, const char *a2, ...)
{
  return _[a1 setupModuleWriters];
}

id objc_msgSend_setupQueryTimer(void *a1, const char *a2, ...)
{
  return _[a1 setupQueryTimer];
}

id objc_msgSend_setupService(void *a1, const char *a2, ...)
{
  return _[a1 setupService];
}

id objc_msgSend_setupStoreCacheTimer(void *a1, const char *a2, ...)
{
  return _[a1 setupStoreCacheTimer];
}

id objc_msgSend_setupSyncActivity(void *a1, const char *a2, ...)
{
  return _[a1 setupSyncActivity];
}

id objc_msgSend_setupTimers(void *a1, const char *a2, ...)
{
  return _[a1 setupTimers];
}

id objc_msgSend_shareDuringEmergency(void *a1, const char *a2, ...)
{
  return _[a1 shareDuringEmergency];
}

id objc_msgSend_shared(void *a1, const char *a2, ...)
{
  return _[a1 shared];
}

id objc_msgSend_sharedAVSystemController(void *a1, const char *a2, ...)
{
  return _[a1 sharedAVSystemController];
}

id objc_msgSend_sharedAccessoryManager(void *a1, const char *a2, ...)
{
  return _[a1 sharedAccessoryManager];
}

id objc_msgSend_sharedBacklight(void *a1, const char *a2, ...)
{
  return _[a1 sharedBacklight];
}

id objc_msgSend_sharedClockManager(void *a1, const char *a2, ...)
{
  return _[a1 sharedClockManager];
}

id objc_msgSend_sharedConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 sharedConfiguration];
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return _[a1 sharedConnection];
}

id objc_msgSend_sharedDeviceConnection(void *a1, const char *a2, ...)
{
  return _[a1 sharedDeviceConnection];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_sharedInterface(void *a1, const char *a2, ...)
{
  return _[a1 sharedInterface];
}

id objc_msgSend_sharedMessageCenter(void *a1, const char *a2, ...)
{
  return _[a1 sharedMessageCenter];
}

id objc_msgSend_sharedRegistrar(void *a1, const char *a2, ...)
{
  return _[a1 sharedRegistrar];
}

id objc_msgSend_sharedScheduler(void *a1, const char *a2, ...)
{
  return _[a1 sharedScheduler];
}

id objc_msgSend_sharedSession(void *a1, const char *a2, ...)
{
  return _[a1 sharedSession];
}

id objc_msgSend_shiftCoordinate_accuracy_shiftedCoordinate_shiftedAccuracy_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "shiftCoordinate:accuracy:shiftedCoordinate:shiftedAccuracy:");
}

id objc_msgSend_shiftLocation_referenceLocation_latitudeShift_longitudeShift_directionShift_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "shiftLocation:referenceLocation:latitudeShift:longitudeShift:directionShift:");
}

id objc_msgSend_shortValue(void *a1, const char *a2, ...)
{
  return _[a1 shortValue];
}

id objc_msgSend_shouldActivateDevicePostConnection(void *a1, const char *a2, ...)
{
  return _[a1 shouldActivateDevicePostConnection];
}

id objc_msgSend_shouldAttemptForcedHeleMaintenanceOnDevice_(void *a1, const char *a2, ...)
{
  return [a1 shouldAttemptForcedHeleMaintenanceOnDevice:];
}

id objc_msgSend_shouldCompleteOnPreemptionByTask_(void *a1, const char *a2, ...)
{
  return [a1 shouldCompleteOnPreemptionByTask:];
}

id objc_msgSend_shouldConfirmHandlingPairingNotification(void *a1, const char *a2, ...)
{
  return _[a1 shouldConfirmHandlingPairingNotification];
}

id objc_msgSend_shouldConfirmHandlingQuickSwitchNotification(void *a1, const char *a2, ...)
{
  return _[a1 shouldConfirmHandlingQuickSwitchNotification];
}

id objc_msgSend_shouldConnectUsingLeashToDevice_(void *a1, const char *a2, ...)
{
  return [a1 shouldConnectUsingLeashToDevice:];
}

id objc_msgSend_shouldDisconnectReconnectForDevice_(void *a1, const char *a2, ...)
{
  return [a1 shouldDisconnectReconnectForDevice:];
}

id objc_msgSend_shouldDiscoverHawkeyeServices(void *a1, const char *a2, ...)
{
  return _[a1 shouldDiscoverHawkeyeServices];
}

id objc_msgSend_shouldDiscoverPoshServices(void *a1, const char *a2, ...)
{
  return _[a1 shouldDiscoverPoshServices];
}

id objc_msgSend_shouldDisplayEEDUIWithReply_(void *a1, const char *a2, ...)
{
  return [a1 shouldDisplayEEDUIWithReply:];
}

id objc_msgSend_shouldEnableGPSAtTime_(void *a1, const char *a2, ...)
{
  return [a1 shouldEnableGPSAtTime:];
}

id objc_msgSend_shouldEnableWifiAtTime_(void *a1, const char *a2, ...)
{
  return [a1 shouldEnableWifiAtTime:];
}

id objc_msgSend_shouldEvictForDevice_(void *a1, const char *a2, ...)
{
  return [a1 shouldEvictForDevice:];
}

id objc_msgSend_shouldFetchLocationsOfInterest(void *a1, const char *a2, ...)
{
  return _[a1 shouldFetchLocationsOfInterest];
}

id objc_msgSend_shouldForceWriteSampleToHealthKit(void *a1, const char *a2, ...)
{
  return _[a1 shouldForceWriteSampleToHealthKit];
}

id objc_msgSend_shouldHoldLeashForDevice_(void *a1, const char *a2, ...)
{
  return [a1 shouldHoldLeashForDevice:];
}

id objc_msgSend_shouldHoldPowerAssertionForScan_(void *a1, const char *a2, ...)
{
  return [a1 shouldHoldPowerAssertionForScan:];
}

id objc_msgSend_shouldKeepLocalDataOnAccountChange(void *a1, const char *a2, ...)
{
  return _[a1 shouldKeepLocalDataOnAccountChange];
}

id objc_msgSend_shouldLockoutNilr_(void *a1, const char *a2, ...)
{
  return [a1 shouldLockoutNilr:];
}

id objc_msgSend_shouldMigrate(void *a1, const char *a2, ...)
{
  return _[a1 shouldMigrate];
}

id objc_msgSend_shouldPlayAudioDuringCountdown(void *a1, const char *a2, ...)
{
  return _[a1 shouldPlayAudioDuringCountdown];
}

id objc_msgSend_shouldPreemptTask_(void *a1, const char *a2, ...)
{
  return [a1 shouldPreemptTask:];
}

id objc_msgSend_shouldRecompute_(void *a1, const char *a2, ...)
{
  return [a1 shouldRecompute:];
}

id objc_msgSend_shouldResetAuthDbOnFullSync(void *a1, const char *a2, ...)
{
  return _[a1 shouldResetAuthDbOnFullSync];
}

id objc_msgSend_shouldRunManager(void *a1, const char *a2, ...)
{
  return _[a1 shouldRunManager];
}

id objc_msgSend_shouldSendMoreDataInCurrentSyncSession(void *a1, const char *a2, ...)
{
  return _[a1 shouldSendMoreDataInCurrentSyncSession];
}

id objc_msgSend_shouldSendResetNotificationDuringMigrationSyncIgnoringCache_(void *a1, const char *a2, ...)
{
  return [a1 shouldSendResetNotificationDuringMigrationSyncIgnoringCache:];
}

id objc_msgSend_shouldServiceQuery(void *a1, const char *a2, ...)
{
  return _[a1 shouldServiceQuery];
}

id objc_msgSend_shouldStartNewTrack_(void *a1, const char *a2, ...)
{
  return [a1 shouldStartNewTrack:];
}

id objc_msgSend_shouldStartSpecialScan(void *a1, const char *a2, ...)
{
  return _[a1 shouldStartSpecialScan];
}

id objc_msgSend_shouldSubmit_calibrationType_(void *a1, const char *a2, ...)
{
  return [a1 shouldSubmit:calibrationType:];
}

id objc_msgSend_shouldThrottleNotification(void *a1, const char *a2, ...)
{
  return _[a1 shouldThrottleNotification];
}

id objc_msgSend_shouldTriggerFloorTransitionHarvest_atTime_(void *a1, const char *a2, ...)
{
  return [a1 shouldTriggerFloorTransitionHarvest:x0 atTime:x1];
}

id objc_msgSend_shouldUseAggressiveSettings(void *a1, const char *a2, ...)
{
  return _[a1 shouldUseAggressiveSettings];
}

id objc_msgSend_shouldUseIDSForLocationStreaming(void *a1, const char *a2, ...)
{
  return _[a1 shouldUseIDSForLocationStreaming];
}

id objc_msgSend_showEngineeringUIForOwnerUT_(void *a1, const char *a2, ...)
{
  return [a1 showEngineeringUIForOwnerUT:];
}

id objc_msgSend_showSAUserFeedbackDialogue_(void *a1, const char *a2, ...)
{
  return [a1 showSAUserFeedbackDialogue:];
}

id objc_msgSend_shutdown(void *a1, const char *a2, ...)
{
  return _[a1 shutdown];
}

id objc_msgSend_sid(void *a1, const char *a2, ...)
{
  return _[a1 sid];
}

id objc_msgSend_signData_withCompletion_(void *a1, const char *a2, ...)
{
  return [a1 signData:withCompletion:];
}

id objc_msgSend_signalEnvironmentType(void *a1, const char *a2, ...)
{
  return _[a1 signalEnvironmentType];
}

id objc_msgSend_signatureWithDomain_type_subType_subtypeContext_detectedProcess_triggerThresholdValues_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "signatureWithDomain:type:subType:subtypeContext:detectedProcess:triggerThresholdValues:");
}

id objc_msgSend_significantFence(void *a1, const char *a2, ...)
{
  return _[a1 significantFence];
}

id objc_msgSend_silo(void *a1, const char *a2, ...)
{
  return _[a1 silo];
}

id objc_msgSend_simpleBeacons(void *a1, const char *a2, ...)
{
  return _[a1 simpleBeacons];
}

id objc_msgSend_simplifiedLength_threshold_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "simplifiedLength:threshold:");
}

id objc_msgSend_simulateBeaconWithProximityUUID_major_minor_eventType_(void *a1, const char *a2, ...)
{
  return [a1 simulateBeaconWithProximityUUID:x0 major:x1 minor:x2 eventType:x3];
}

id objc_msgSend_simulateEvent_(void *a1, const char *a2, ...)
{
  return [a1 simulateEvent:];
}

id objc_msgSend_simulateFenceWithBundleID_andFenceID_eventType_atLocation_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "simulateFenceWithBundleID:andFenceID:eventType:atLocation:");
}

id objc_msgSend_simulateMotionSensorDataForType_payload_(void *a1, const char *a2, ...)
{
  return [a1 simulateMotionSensorDataForType:payload:];
}

id objc_msgSend_simulateSignificantLocationChange_(void *a1, const char *a2, ...)
{
  return [a1 simulateSignificantLocationChange:];
}

id objc_msgSend_simulateTriggerWithDelay_(void *a1, const char *a2, ...)
{
  return [a1 simulateTriggerWithDelay:];
}

id objc_msgSend_simulateTriggerWithDelay_forMode_(void *a1, const char *a2, ...)
{
  return [a1 simulateTriggerWithDelay:forMode:];
}

id objc_msgSend_simulateVisit_(void *a1, const char *a2, ...)
{
  return [a1 simulateVisit:];
}

id objc_msgSend_singleConnTime(void *a1, const char *a2, ...)
{
  return _[a1 singleConnTime];
}

id objc_msgSend_singleVisitDetectionMetrics(void *a1, const char *a2, ...)
{
  return _[a1 singleVisitDetectionMetrics];
}

id objc_msgSend_sinkWithCompletion_receiveInput_(void *a1, const char *a2, ...)
{
  return [a1 sinkWithCompletion:x0 receiveInput:x1];
}

id objc_msgSend_sizeOfType(void *a1, const char *a2, ...)
{
  return _[a1 sizeOfType];
}

id objc_msgSend_skipUpdatingRegulatoryDomain(void *a1, const char *a2, ...)
{
  return _[a1 skipUpdatingRegulatoryDomain];
}

id objc_msgSend_slamOrigin(void *a1, const char *a2, ...)
{
  return _[a1 slamOrigin];
}

id objc_msgSend_slamTrackDescriptors(void *a1, const char *a2, ...)
{
  return _[a1 slamTrackDescriptors];
}

id objc_msgSend_slamTrackImageIndices(void *a1, const char *a2, ...)
{
  return _[a1 slamTrackImageIndices];
}

id objc_msgSend_slamTrackObservations(void *a1, const char *a2, ...)
{
  return _[a1 slamTrackObservations];
}

id objc_msgSend_slamTracks(void *a1, const char *a2, ...)
{
  return _[a1 slamTracks];
}

id objc_msgSend_slamTracks2D(void *a1, const char *a2, ...)
{
  return _[a1 slamTracks2D];
}

id objc_msgSend_slamTracksCount(void *a1, const char *a2, ...)
{
  return _[a1 slamTracksCount];
}

id objc_msgSend_sleepDuration_ms(void *a1, const char *a2, ...)
{
  return [a1 sleepDuration_ms];
}

id objc_msgSend_slope(void *a1, const char *a2, ...)
{
  return _[a1 slope];
}

id objc_msgSend_slotID(void *a1, const char *a2, ...)
{
  return _[a1 slotID];
}

id objc_msgSend_slotId(void *a1, const char *a2, ...)
{
  return _[a1 slotId];
}

id objc_msgSend_snapLocation_withReply_(void *a1, const char *a2, ...)
{
  return [a1 snapLocation:x0 withReply:x1];
}

id objc_msgSend_snapshotWithSignature_delay_events_payload_actions_reply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "snapshotWithSignature:delay:events:payload:actions:reply:");
}

id objc_msgSend_snr(void *a1, const char *a2, ...)
{
  return _[a1 snr];
}

id objc_msgSend_sortDescriptorWithKey_ascending_(void *a1, const char *a2, ...)
{
  return [a1 sortDescriptorWithKey:ascending:];
}

id objc_msgSend_sortDevicesBasedOnConnectionlikelihood_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sortDevicesBasedOnConnectionlikelihood:");
}

id objc_msgSend_sortUsingComparator_(void *a1, const char *a2, ...)
{
  return [a1 sortUsingComparator:];
}

id objc_msgSend_sortUsingDescriptors_(void *a1, const char *a2, ...)
{
  return [a1 sortUsingDescriptors:];
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_sortedArrayUsingDescriptors_(void *a1, const char *a2, ...)
{
  return [a1 sortedArrayUsingDescriptors:];
}

id objc_msgSend_sortedArrayUsingSelector_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sortedArrayUsingSelector:");
}

id objc_msgSend_sosState(void *a1, const char *a2, ...)
{
  return _[a1 sosState];
}

id objc_msgSend_source(void *a1, const char *a2, ...)
{
  return _[a1 source];
}

id objc_msgSend_sourceAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 sourceAccuracy];
}

id objc_msgSend_sourceEvent(void *a1, const char *a2, ...)
{
  return _[a1 sourceEvent];
}

id objc_msgSend_sourceEventMetadata(void *a1, const char *a2, ...)
{
  return _[a1 sourceEventMetadata];
}

id objc_msgSend_sourceId(void *a1, const char *a2, ...)
{
  return _[a1 sourceId];
}

id objc_msgSend_sourceInformation(void *a1, const char *a2, ...)
{
  return _[a1 sourceInformation];
}

id objc_msgSend_sourceRevision(void *a1, const char *a2, ...)
{
  return _[a1 sourceRevision];
}

id objc_msgSend_sourceUpdated_(void *a1, const char *a2, ...)
{
  return [a1 sourceUpdated:];
}

id objc_msgSend_southEastLatitude(void *a1, const char *a2, ...)
{
  return _[a1 southEastLatitude];
}

id objc_msgSend_southEastLongitude(void *a1, const char *a2, ...)
{
  return _[a1 southEastLongitude];
}

id objc_msgSend_southLat(void *a1, const char *a2, ...)
{
  return _[a1 southLat];
}

id objc_msgSend_speed(void *a1, const char *a2, ...)
{
  return _[a1 speed];
}

id objc_msgSend_speedAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 speedAccuracy];
}

id objc_msgSend_speedCurrent(void *a1, const char *a2, ...)
{
  return _[a1 speedCurrent];
}

id objc_msgSend_speedInstant(void *a1, const char *a2, ...)
{
  return _[a1 speedInstant];
}

id objc_msgSend_speedLB(void *a1, const char *a2, ...)
{
  return _[a1 speedLB];
}

id objc_msgSend_speedLimit(void *a1, const char *a2, ...)
{
  return _[a1 speedLimit];
}

id objc_msgSend_speedLimitIsMPH(void *a1, const char *a2, ...)
{
  return _[a1 speedLimitIsMPH];
}

id objc_msgSend_speedMean(void *a1, const char *a2, ...)
{
  return _[a1 speedMean];
}

id objc_msgSend_speedUB(void *a1, const char *a2, ...)
{
  return _[a1 speedUB];
}

id objc_msgSend_speedVariance(void *a1, const char *a2, ...)
{
  return _[a1 speedVariance];
}

id objc_msgSend_ssid(void *a1, const char *a2, ...)
{
  return _[a1 ssid];
}

id objc_msgSend_stableIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 stableIdentifier];
}

id objc_msgSend_stageFirmwareUpdateOnAccessoryList_withUserIntent_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "stageFirmwareUpdateOnAccessoryList:withUserIntent:");
}

id objc_msgSend_stairClimbingModel(void *a1, const char *a2, ...)
{
  return _[a1 stairClimbingModel];
}

id objc_msgSend_stalenessTime(void *a1, const char *a2, ...)
{
  return _[a1 stalenessTime];
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _[a1 start];
}

id objc_msgSend_start_(void *a1, const char *a2, ...)
{
  return [a1 start:];
}

id objc_msgSend_start_recentLocation_triggerDelay_recentWeatherData_maxFileCount_(void *a1, const char *a2, ...)
{
  return [a1 start:x0 recentLocation:x1 triggerDelay:x2 recentWeatherData:x3 maxFileCount:x4];
}

id objc_msgSend_startAdvertising_(void *a1, const char *a2, ...)
{
  return [a1 startAdvertising:];
}

id objc_msgSend_startAggressiveAdvertisingTaskWithTimeout_(void *a1, const char *a2, ...)
{
  return [a1 startAggressiveAdvertisingTaskWithTimeout:];
}

id objc_msgSend_startAggressiveScan(void *a1, const char *a2, ...)
{
  return _[a1 startAggressiveScan];
}

id objc_msgSend_startAt(void *a1, const char *a2, ...)
{
  return _[a1 startAt];
}

id objc_msgSend_startAt_(void *a1, const char *a2, ...)
{
  return [a1 startAt:];
}

id objc_msgSend_startBTFindingScan(void *a1, const char *a2, ...)
{
  return _[a1 startBTFindingScan];
}

id objc_msgSend_startBackgroundInertialOdometryUpdatesForClient_withIdentifier_usingReferenceFrame_(void *a1, const char *a2, ...)
{
  return [a1 startBackgroundInertialOdometryUpdatesForClient:withIdentifier:usingReferenceFrame:];
}

id objc_msgSend_startBuffering(void *a1, const char *a2, ...)
{
  return _[a1 startBuffering];
}

id objc_msgSend_startCatalogDownload_options_then_(void *a1, const char *a2, ...)
{
  return [a1 startCatalogDownload:x0 options:x1 then:x2];
}

id objc_msgSend_startCoexFriendlyAggressiveScan(void *a1, const char *a2, ...)
{
  return _[a1 startCoexFriendlyAggressiveScan];
}

id objc_msgSend_startConnectionEventCounterForPeripheral_(void *a1, const char *a2, ...)
{
  return [a1 startConnectionEventCounterForPeripheral:];
}

id objc_msgSend_startConnectionlessScanningWithData_(void *a1, const char *a2, ...)
{
  return [a1 startConnectionlessScanningWithData:];
}

id objc_msgSend_startDate(void *a1, const char *a2, ...)
{
  return _[a1 startDate];
}

id objc_msgSend_startDayOfWeek(void *a1, const char *a2, ...)
{
  return _[a1 startDayOfWeek];
}

id objc_msgSend_startDem(void *a1, const char *a2, ...)
{
  return _[a1 startDem];
}

id objc_msgSend_startDeviceDiscovery(void *a1, const char *a2, ...)
{
  return _[a1 startDeviceDiscovery];
}

id objc_msgSend_startDeviceDiscoveryCommon(void *a1, const char *a2, ...)
{
  return _[a1 startDeviceDiscoveryCommon];
}

id objc_msgSend_startDownload_then_(void *a1, const char *a2, ...)
{
  return [a1 startDownload:x0 then:x1];
}

id objc_msgSend_startElevationSpectatorUpdates(void *a1, const char *a2, ...)
{
  return _[a1 startElevationSpectatorUpdates];
}

id objc_msgSend_startElevationUpdates(void *a1, const char *a2, ...)
{
  return _[a1 startElevationUpdates];
}

id objc_msgSend_startEventCounter(void *a1, const char *a2, ...)
{
  return _[a1 startEventCounter];
}

id objc_msgSend_startFactoryGYTT(void *a1, const char *a2, ...)
{
  return _[a1 startFactoryGYTT];
}

id objc_msgSend_startFirmwareUpdate_(void *a1, const char *a2, ...)
{
  return [a1 startFirmwareUpdate:];
}

id objc_msgSend_startGeoFenceWithRadius_(void *a1, const char *a2, ...)
{
  return [a1 startGeoFenceWithRadius:];
}

id objc_msgSend_startGpsOdometerSpectatorUpdates(void *a1, const char *a2, ...)
{
  return _[a1 startGpsOdometerSpectatorUpdates];
}

id objc_msgSend_startGpsOdometerUpdates(void *a1, const char *a2, ...)
{
  return _[a1 startGpsOdometerUpdates];
}

id objc_msgSend_startHKCollector_(void *a1, const char *a2, ...)
{
  return [a1 startHKCollector:];
}

id objc_msgSend_startHawkeyeLowEnergyScan(void *a1, const char *a2, ...)
{
  return _[a1 startHawkeyeLowEnergyScan];
}

id objc_msgSend_startJunction(void *a1, const char *a2, ...)
{
  return _[a1 startJunction];
}

id objc_msgSend_startLeechingLocation(void *a1, const char *a2, ...)
{
  return _[a1 startLeechingLocation];
}

id objc_msgSend_startLeechingLowConfidenceVisitsForClient_(void *a1, const char *a2, ...)
{
  return [a1 startLeechingLowConfidenceVisitsForClient:];
}

id objc_msgSend_startLeechingLowConfidenceVisitsWithHandler_(void *a1, const char *a2, ...)
{
  return [a1 startLeechingLowConfidenceVisitsWithHandler:];
}

id objc_msgSend_startLeechingVisitsForClient_(void *a1, const char *a2, ...)
{
  return [a1 startLeechingVisitsForClient:];
}

id objc_msgSend_startLeechingVisitsWithHandler_(void *a1, const char *a2, ...)
{
  return [a1 startLeechingVisitsWithHandler:];
}

id objc_msgSend_startLocation(void *a1, const char *a2, ...)
{
  return _[a1 startLocation];
}

id objc_msgSend_startLocationUpdates(void *a1, const char *a2, ...)
{
  return _[a1 startLocationUpdates];
}

id objc_msgSend_startMaintenanceTimer(void *a1, const char *a2, ...)
{
  return _[a1 startMaintenanceTimer];
}

id objc_msgSend_startMonitoring(void *a1, const char *a2, ...)
{
  return _[a1 startMonitoring];
}

id objc_msgSend_startMonitoringAvengerAdvertisementsForClient_clientName_(void *a1, const char *a2, ...)
{
  return [a1 startMonitoringAvengerAdvertisementsForClient:clientName:];
}

id objc_msgSend_startMonitoringCapabilityChangeForClient_(void *a1, const char *a2, ...)
{
  return [a1 startMonitoringCapabilityChangeForClient:];
}

id objc_msgSend_startMonitoringConnectionStateChangeForClient_(void *a1, const char *a2, ...)
{
  return [a1 startMonitoringConnectionStateChangeForClient:];
}

id objc_msgSend_startMonitoringDeviceForFirmwareUpdate_(void *a1, const char *a2, ...)
{
  return [a1 startMonitoringDeviceForFirmwareUpdate:];
}

id objc_msgSend_startMonitoringEmergencyState_(void *a1, const char *a2, ...)
{
  return [a1 startMonitoringEmergencyState:];
}

id objc_msgSend_startMonitoringEventType_error_(void *a1, const char *a2, ...)
{
  return [a1 startMonitoringEventType:error:];
}

id objc_msgSend_startMonitoringForRegion_(void *a1, const char *a2, ...)
{
  return [a1 startMonitoringForRegion:];
}

id objc_msgSend_startMonitoringPlaceInferencesForCache(void *a1, const char *a2, ...)
{
  return _[a1 startMonitoringPlaceInferencesForCache];
}

id objc_msgSend_startMonitoringPlaceInferencesWithOptions_handler_(void *a1, const char *a2, ...)
{
  return [a1 startMonitoringPlaceInferencesWithOptions:x0 handler:x1];
}

id objc_msgSend_startMonitoringRelayLocation_(void *a1, const char *a2, ...)
{
  return [a1 startMonitoringRelayLocation:];
}

id objc_msgSend_startMonitoringScenarioTriggerOfType_forClient_(void *a1, const char *a2, ...)
{
  return [a1 startMonitoringScenarioTriggerOfType:forClient:];
}

id objc_msgSend_startMonitoringScenarioTriggerOfType_withHandler_(void *a1, const char *a2, ...)
{
  return [a1 startMonitoringScenarioTriggerOfType:withHandler:];
}

id objc_msgSend_startMonitoringTransitStateForClient_(void *a1, const char *a2, ...)
{
  return [a1 startMonitoringTransitStateForClient:];
}

id objc_msgSend_startMonitoringVisitsForClient_(void *a1, const char *a2, ...)
{
  return [a1 startMonitoringVisitsForClient:];
}

id objc_msgSend_startMonitoringVisitsWithHandler_(void *a1, const char *a2, ...)
{
  return [a1 startMonitoringVisitsWithHandler:];
}

id objc_msgSend_startMotionDataListenerWithOptions_(void *a1, const char *a2, ...)
{
  return [a1 startMotionDataListenerWithOptions:];
}

id objc_msgSend_startNewMaintEventWithCount_leashable_deviceTypes_coex_loiType_(void *a1, const char *a2, ...)
{
  return [a1 startNewMaintEventWithCount:x0 leashable:x1 deviceTypes:x2 coex:x3 loiType:x4];
}

id objc_msgSend_startNonOwnerAggressiveAdvertisingTask(void *a1, const char *a2, ...)
{
  return _[a1 startNonOwnerAggressiveAdvertisingTask];
}

id objc_msgSend_startNonOwnerPoshAggressiveAdvertisingTask(void *a1, const char *a2, ...)
{
  return _[a1 startNonOwnerPoshAggressiveAdvertisingTask];
}

id objc_msgSend_startNonOwnerShortSoundHawkeyeTask(void *a1, const char *a2, ...)
{
  return _[a1 startNonOwnerShortSoundHawkeyeTask];
}

id objc_msgSend_startNonOwnerShortSoundPoshTask(void *a1, const char *a2, ...)
{
  return _[a1 startNonOwnerShortSoundPoshTask];
}

id objc_msgSend_startNonOwnerSoundHawkeyeTask(void *a1, const char *a2, ...)
{
  return _[a1 startNonOwnerSoundHawkeyeTask];
}

id objc_msgSend_startNonOwnerSoundPoshTask(void *a1, const char *a2, ...)
{
  return _[a1 startNonOwnerSoundPoshTask];
}

id objc_msgSend_startOfDayForDate_(void *a1, const char *a2, ...)
{
  return [a1 startOfDayForDate:];
}

id objc_msgSend_startPacketCapture_(void *a1, const char *a2, ...)
{
  return [a1 startPacketCapture:];
}

id objc_msgSend_startPermanentDeviceDiscovery(void *a1, const char *a2, ...)
{
  return _[a1 startPermanentDeviceDiscovery];
}

id objc_msgSend_startRanging(void *a1, const char *a2, ...)
{
  return _[a1 startRanging];
}

id objc_msgSend_startRangingHawkeyeTaskWithTargetEventCounter_(void *a1, const char *a2, ...)
{
  return [a1 startRangingHawkeyeTaskWithTargetEventCounter:];
}

id objc_msgSend_startRangingNonOwnerTaskWithTargetEventCounter_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "startRangingNonOwnerTaskWithTargetEventCounter:");
}

id objc_msgSend_startRoseRangingCommandWithParameters_(void *a1, const char *a2, ...)
{
  return [a1 startRoseRangingCommandWithParameters:];
}

id objc_msgSend_startRoseRangingNonOwnerCommandWithParameters_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "startRoseRangingNonOwnerCommandWithParameters:");
}

id objc_msgSend_startRoseRangingTaskWithParameters_(void *a1, const char *a2, ...)
{
  return [a1 startRoseRangingTaskWithParameters:];
}

id objc_msgSend_startScan(void *a1, const char *a2, ...)
{
  return _[a1 startScan];
}

id objc_msgSend_startScanForBeaconTypes_updateHandler_(void *a1, const char *a2, ...)
{
  return [a1 startScanForBeaconTypes:updateHandler:];
}

id objc_msgSend_startScanningAwaitingResponse(void *a1, const char *a2, ...)
{
  return _[a1 startScanningAwaitingResponse];
}

id objc_msgSend_startScanningWithOptions_(void *a1, const char *a2, ...)
{
  return [a1 startScanningWithOptions:];
}

id objc_msgSend_startScanningWithUseCase_(void *a1, const char *a2, ...)
{
  return [a1 startScanningWithUseCase:];
}

id objc_msgSend_startScanningWithUseCase_isScanUpgrade_(void *a1, const char *a2, ...)
{
  return [a1 startScanningWithUseCase:isScanUpgrade:];
}

id objc_msgSend_startService_interface_(void *a1, const char *a2, ...)
{
  return [a1 startService:interface:];
}

id objc_msgSend_startSession(void *a1, const char *a2, ...)
{
  return _[a1 startSession];
}

id objc_msgSend_startSessionForClient_(void *a1, const char *a2, ...)
{
  return [a1 startSessionForClient:];
}

id objc_msgSend_startSessionForClient_sequenceNumber_(void *a1, const char *a2, ...)
{
  return [a1 startSessionForClient:sequenceNumber:];
}

id objc_msgSend_startSessionForClient_withIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 startSessionForClient:withIdentifier:];
}

id objc_msgSend_startSessionMetricsWithTime_session_(void *a1, const char *a2, ...)
{
  return [a1 startSessionMetricsWithTime:x0 session:x1];
}

id objc_msgSend_startSessionWithState_fromClient_(void *a1, const char *a2, ...)
{
  return [a1 startSessionWithState:fromClient:];
}

id objc_msgSend_startShortSoundHawkeyeTask(void *a1, const char *a2, ...)
{
  return _[a1 startShortSoundHawkeyeTask];
}

id objc_msgSend_startSoundHawkeyeTask(void *a1, const char *a2, ...)
{
  return _[a1 startSoundHawkeyeTask];
}

id objc_msgSend_startSoundSequenceCommandWithSequence_(void *a1, const char *a2, ...)
{
  return [a1 startSoundSequenceCommandWithSequence:];
}

id objc_msgSend_startSoundSequenceTaskWithEncodedSequence_(void *a1, const char *a2, ...)
{
  return [a1 startSoundSequenceTaskWithEncodedSequence:];
}

id objc_msgSend_startSubmersionPowerAssertion(void *a1, const char *a2, ...)
{
  return _[a1 startSubmersionPowerAssertion];
}

id objc_msgSend_startTime(void *a1, const char *a2, ...)
{
  return _[a1 startTime];
}

id objc_msgSend_startTrack_(void *a1, const char *a2, ...)
{
  return [a1 startTrack:];
}

id objc_msgSend_startTrackingZone_forStates_transitionHandler_(void *a1, const char *a2, ...)
{
  return [a1 startTrackingZone:x0 forStates:x1 transitionHandler:x2];
}

id objc_msgSend_startUDPListner(void *a1, const char *a2, ...)
{
  return _[a1 startUDPListner];
}

id objc_msgSend_startUnauthorizedShortSoundCommand(void *a1, const char *a2, ...)
{
  return _[a1 startUnauthorizedShortSoundCommand];
}

id objc_msgSend_startUnauthorizedShortSoundTask(void *a1, const char *a2, ...)
{
  return _[a1 startUnauthorizedShortSoundTask];
}

id objc_msgSend_startUnauthorizedSoundCommand(void *a1, const char *a2, ...)
{
  return _[a1 startUnauthorizedSoundCommand];
}

id objc_msgSend_startUnauthorizedSoundTask(void *a1, const char *a2, ...)
{
  return _[a1 startUnauthorizedSoundTask];
}

id objc_msgSend_startUnlocked(void *a1, const char *a2, ...)
{
  return _[a1 startUnlocked];
}

id objc_msgSend_startUpdates(void *a1, const char *a2, ...)
{
  return _[a1 startUpdates];
}

id objc_msgSend_startUpdatesforAnalyzer_(void *a1, const char *a2, ...)
{
  return [a1 startUpdatesforAnalyzer:];
}

id objc_msgSend_startUpdatingLocation(void *a1, const char *a2, ...)
{
  return _[a1 startUpdatingLocation];
}

id objc_msgSend_startUpdatingLocationAtLocation_(void *a1, const char *a2, ...)
{
  return [a1 startUpdatingLocationAtLocation:];
}

id objc_msgSend_startUpdatingSimpleBeaconsWithContext_collectionDifference_completion_(void *a1, const char *a2, ...)
{
  return [a1 startUpdatingSimpleBeaconsWithContext:x0 collectionDifference:x1 completion:x2];
}

id objc_msgSend_startVisitMonitoring(void *a1, const char *a2, ...)
{
  return _[a1 startVisitMonitoring];
}

id objc_msgSend_startWatchAdvertisementBufferScan(void *a1, const char *a2, ...)
{
  return _[a1 startWatchAdvertisementBufferScan];
}

id objc_msgSend_startWatchAdvertisementBufferScan_(void *a1, const char *a2, ...)
{
  return [a1 startWatchAdvertisementBufferScan:];
}

id objc_msgSend_startWatchAdvertisementBufferScanning(void *a1, const char *a2, ...)
{
  return _[a1 startWatchAdvertisementBufferScanning];
}

id objc_msgSend_startWithError_(void *a1, const char *a2, ...)
{
  return [a1 startWithError:];
}

id objc_msgSend_startWsbClient(void *a1, const char *a2, ...)
{
  return _[a1 startWsbClient];
}

id objc_msgSend_startedAggressiveDiscoveryScan(void *a1, const char *a2, ...)
{
  return _[a1 startedAggressiveDiscoveryScan];
}

id objc_msgSend_startedBTFindingDiscoveryScan(void *a1, const char *a2, ...)
{
  return _[a1 startedBTFindingDiscoveryScan];
}

id objc_msgSend_startedHawkeyeLowEnergyScan(void *a1, const char *a2, ...)
{
  return _[a1 startedHawkeyeLowEnergyScan];
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _[a1 state];
}

id objc_msgSend_stateFromDepth_forceSubmersion_(void *a1, const char *a2, ...)
{
  return [a1 stateFromDepth:x0 forceSubmersion:x1];
}

id objc_msgSend_stateHandler(void *a1, const char *a2, ...)
{
  return _[a1 stateHandler];
}

id objc_msgSend_stateInfoWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 stateInfoWithCompletion:];
}

id objc_msgSend_stateSerialization(void *a1, const char *a2, ...)
{
  return _[a1 stateSerialization];
}

id objc_msgSend_stateUpdateEvent(void *a1, const char *a2, ...)
{
  return _[a1 stateUpdateEvent];
}

id objc_msgSend_staticFlag(void *a1, const char *a2, ...)
{
  return _[a1 staticFlag];
}

id objc_msgSend_stationary(void *a1, const char *a2, ...)
{
  return _[a1 stationary];
}

id objc_msgSend_stationaryTimeInSeconds(void *a1, const char *a2, ...)
{
  return _[a1 stationaryTimeInSeconds];
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _[a1 status];
}

id objc_msgSend_statusCode(void *a1, const char *a2, ...)
{
  return _[a1 statusCode];
}

id objc_msgSend_statusFlags(void *a1, const char *a2, ...)
{
  return _[a1 statusFlags];
}

id objc_msgSend_statusHandler(void *a1, const char *a2, ...)
{
  return _[a1 statusHandler];
}

id objc_msgSend_statusInfo(void *a1, const char *a2, ...)
{
  return _[a1 statusInfo];
}

id objc_msgSend_steadinessClients(void *a1, const char *a2, ...)
{
  return _[a1 steadinessClients];
}

id objc_msgSend_steadyStateHR(void *a1, const char *a2, ...)
{
  return _[a1 steadyStateHR];
}

id objc_msgSend_stepCadenceCurrent(void *a1, const char *a2, ...)
{
  return _[a1 stepCadenceCurrent];
}

id objc_msgSend_stepCount(void *a1, const char *a2, ...)
{
  return _[a1 stepCount];
}

id objc_msgSend_stepCountData(void *a1, const char *a2, ...)
{
  return _[a1 stepCountData];
}

id objc_msgSend_stepCountElevationNotification_(void *a1, const char *a2, ...)
{
  return [a1 stepCountElevationNotification:];
}

id objc_msgSend_stepCountGPS(void *a1, const char *a2, ...)
{
  return _[a1 stepCountGPS];
}

id objc_msgSend_stepLength(void *a1, const char *a2, ...)
{
  return _[a1 stepLength];
}

id objc_msgSend_steps(void *a1, const char *a2, ...)
{
  return _[a1 steps];
}

id objc_msgSend_stepsInWindow(void *a1, const char *a2, ...)
{
  return _[a1 stepsInWindow];
}

id objc_msgSend_stepsSinceNMinusOneStateChange(void *a1, const char *a2, ...)
{
  return _[a1 stepsSinceNMinusOneStateChange];
}

id objc_msgSend_stepsSinceNMinusTwoStateChange(void *a1, const char *a2, ...)
{
  return _[a1 stepsSinceNMinusTwoStateChange];
}

id objc_msgSend_stewieSupported(void *a1, const char *a2, ...)
{
  return _[a1 stewieSupported];
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return _[a1 stop];
}

id objc_msgSend_stopActiveLocationRequest(void *a1, const char *a2, ...)
{
  return _[a1 stopActiveLocationRequest];
}

id objc_msgSend_stopAdvertising(void *a1, const char *a2, ...)
{
  return _[a1 stopAdvertising];
}

id objc_msgSend_stopAggressiveAdvertisingTask(void *a1, const char *a2, ...)
{
  return _[a1 stopAggressiveAdvertisingTask];
}

id objc_msgSend_stopAggressiveScan(void *a1, const char *a2, ...)
{
  return _[a1 stopAggressiveScan];
}

id objc_msgSend_stopBTFindingScan(void *a1, const char *a2, ...)
{
  return _[a1 stopBTFindingScan];
}

id objc_msgSend_stopBTFindingScan_(void *a1, const char *a2, ...)
{
  return [a1 stopBTFindingScan:];
}

id objc_msgSend_stopBackgroundInertialOdometryUpdatesForClient_(void *a1, const char *a2, ...)
{
  return [a1 stopBackgroundInertialOdometryUpdatesForClient:];
}

id objc_msgSend_stopCircularZoneMonitoringForClient_withZoneId_(void *a1, const char *a2, ...)
{
  return [a1 stopCircularZoneMonitoringForClient:withZoneId:];
}

id objc_msgSend_stopCoexFriendlyAggressiveScan(void *a1, const char *a2, ...)
{
  return _[a1 stopCoexFriendlyAggressiveScan];
}

id objc_msgSend_stopConnectionEventCounterForPeripheral_(void *a1, const char *a2, ...)
{
  return [a1 stopConnectionEventCounterForPeripheral:];
}

id objc_msgSend_stopConnectionlessScanningWithData_(void *a1, const char *a2, ...)
{
  return [a1 stopConnectionlessScanningWithData:];
}

id objc_msgSend_stopDataCollection(void *a1, const char *a2, ...)
{
  return _[a1 stopDataCollection];
}

id objc_msgSend_stopDem(void *a1, const char *a2, ...)
{
  return _[a1 stopDem];
}

id objc_msgSend_stopDeviceDiscovery(void *a1, const char *a2, ...)
{
  return _[a1 stopDeviceDiscovery];
}

id objc_msgSend_stopElevationSpectatorUpdates(void *a1, const char *a2, ...)
{
  return _[a1 stopElevationSpectatorUpdates];
}

id objc_msgSend_stopElevationUpdates(void *a1, const char *a2, ...)
{
  return _[a1 stopElevationUpdates];
}

id objc_msgSend_stopEventCounter(void *a1, const char *a2, ...)
{
  return _[a1 stopEventCounter];
}

id objc_msgSend_stopFrom(void *a1, const char *a2, ...)
{
  return _[a1 stopFrom];
}

id objc_msgSend_stopGeoFence(void *a1, const char *a2, ...)
{
  return _[a1 stopGeoFence];
}

id objc_msgSend_stopGpsOdometerSpectatorUpdates(void *a1, const char *a2, ...)
{
  return _[a1 stopGpsOdometerSpectatorUpdates];
}

id objc_msgSend_stopGpsOdometerUpdates(void *a1, const char *a2, ...)
{
  return _[a1 stopGpsOdometerUpdates];
}

id objc_msgSend_stopHKCollector(void *a1, const char *a2, ...)
{
  return _[a1 stopHKCollector];
}

id objc_msgSend_stopHealthKitQueries(void *a1, const char *a2, ...)
{
  return _[a1 stopHealthKitQueries];
}

id objc_msgSend_stopID(void *a1, const char *a2, ...)
{
  return _[a1 stopID];
}

id objc_msgSend_stopLeechingLocation(void *a1, const char *a2, ...)
{
  return _[a1 stopLeechingLocation];
}

id objc_msgSend_stopLeechingLowConfidenceVisits(void *a1, const char *a2, ...)
{
  return _[a1 stopLeechingLowConfidenceVisits];
}

id objc_msgSend_stopLeechingLowConfidenceVisitsForClient_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "stopLeechingLowConfidenceVisitsForClient:");
}

id objc_msgSend_stopLeechingVisits(void *a1, const char *a2, ...)
{
  return _[a1 stopLeechingVisits];
}

id objc_msgSend_stopLeechingVisitsForClient_(void *a1, const char *a2, ...)
{
  return [a1 stopLeechingVisitsForClient:];
}

id objc_msgSend_stopListener(void *a1, const char *a2, ...)
{
  return _[a1 stopListener];
}

id objc_msgSend_stopListeningForForScheduledTileDownload_(void *a1, const char *a2, ...)
{
  return [a1 stopListeningForForScheduledTileDownload:];
}

id objc_msgSend_stopLocation(void *a1, const char *a2, ...)
{
  return _[a1 stopLocation];
}

id objc_msgSend_stopLocationSession(void *a1, const char *a2, ...)
{
  return _[a1 stopLocationSession];
}

id objc_msgSend_stopLocationUpdates(void *a1, const char *a2, ...)
{
  return _[a1 stopLocationUpdates];
}

id objc_msgSend_stopLogging(void *a1, const char *a2, ...)
{
  return _[a1 stopLogging];
}

id objc_msgSend_stopMaintenanceTimer(void *a1, const char *a2, ...)
{
  return _[a1 stopMaintenanceTimer];
}

id objc_msgSend_stopMonitoring(void *a1, const char *a2, ...)
{
  return _[a1 stopMonitoring];
}

id objc_msgSend_stopMonitoringAllConditions(void *a1, const char *a2, ...)
{
  return _[a1 stopMonitoringAllConditions];
}

id objc_msgSend_stopMonitoringAvengerAdvertisementsForClient_(void *a1, const char *a2, ...)
{
  return [a1 stopMonitoringAvengerAdvertisementsForClient:];
}

id objc_msgSend_stopMonitoringCapabilityChangeForClient_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "stopMonitoringCapabilityChangeForClient:");
}

id objc_msgSend_stopMonitoringConnectionStateChangeForClient_(void *a1, const char *a2, ...)
{
  return [a1 stopMonitoringConnectionStateChangeForClient:];
}

id objc_msgSend_stopMonitoringDeviceForFirmwareUpdate_(void *a1, const char *a2, ...)
{
  return [a1 stopMonitoringDeviceForFirmwareUpdate:];
}

id objc_msgSend_stopMonitoringEmergencyState_(void *a1, const char *a2, ...)
{
  return [a1 stopMonitoringEmergencyState:];
}

id objc_msgSend_stopMonitoringEventType_(void *a1, const char *a2, ...)
{
  return [a1 stopMonitoringEventType:];
}

id objc_msgSend_stopMonitoringForClient_(void *a1, const char *a2, ...)
{
  return [a1 stopMonitoringForClient:];
}

id objc_msgSend_stopMonitoringForRegion_(void *a1, const char *a2, ...)
{
  return [a1 stopMonitoringForRegion:];
}

id objc_msgSend_stopMonitoringHomeKitAccessoryForClient_(void *a1, const char *a2, ...)
{
  return [a1 stopMonitoringHomeKitAccessoryForClient:];
}

id objc_msgSend_stopMonitoringHomeKitSceneForClient_(void *a1, const char *a2, ...)
{
  return [a1 stopMonitoringHomeKitSceneForClient:];
}

id objc_msgSend_stopMonitoringNowPlayingForClient_(void *a1, const char *a2, ...)
{
  return [a1 stopMonitoringNowPlayingForClient:];
}

id objc_msgSend_stopMonitoringPlaceInferences(void *a1, const char *a2, ...)
{
  return _[a1 stopMonitoringPlaceInferences];
}

id objc_msgSend_stopMonitoringRelayLocation_(void *a1, const char *a2, ...)
{
  return [a1 stopMonitoringRelayLocation:];
}

id objc_msgSend_stopMonitoringScenarioTriggerOfType_(void *a1, const char *a2, ...)
{
  return [a1 stopMonitoringScenarioTriggerOfType:];
}

id objc_msgSend_stopMonitoringScenarioTriggerOfType_forClient_(void *a1, const char *a2, ...)
{
  return [a1 stopMonitoringScenarioTriggerOfType:forClient:];
}

id objc_msgSend_stopMonitoringTransitStateForClient_(void *a1, const char *a2, ...)
{
  return [a1 stopMonitoringTransitStateForClient:];
}

id objc_msgSend_stopMonitoringVisits(void *a1, const char *a2, ...)
{
  return _[a1 stopMonitoringVisits];
}

id objc_msgSend_stopMonitoringVisitsForClient_(void *a1, const char *a2, ...)
{
  return [a1 stopMonitoringVisitsForClient:];
}

id objc_msgSend_stopMotionAlarm(void *a1, const char *a2, ...)
{
  return _[a1 stopMotionAlarm];
}

id objc_msgSend_stopMotionDataListener(void *a1, const char *a2, ...)
{
  return _[a1 stopMotionDataListener];
}

id objc_msgSend_stopMotionDataProvider(void *a1, const char *a2, ...)
{
  return _[a1 stopMotionDataProvider];
}

id objc_msgSend_stopNonOwnerSoundHawkeyeTask(void *a1, const char *a2, ...)
{
  return _[a1 stopNonOwnerSoundHawkeyeTask];
}

id objc_msgSend_stopNonOwnerSoundPoshTask(void *a1, const char *a2, ...)
{
  return _[a1 stopNonOwnerSoundPoshTask];
}

id objc_msgSend_stopPacketCapture(void *a1, const char *a2, ...)
{
  return _[a1 stopPacketCapture];
}

id objc_msgSend_stopQuery_(void *a1, const char *a2, ...)
{
  return [a1 stopQuery:];
}

id objc_msgSend_stopRanging(void *a1, const char *a2, ...)
{
  return _[a1 stopRanging];
}

id objc_msgSend_stopRangingHawkeyeTask(void *a1, const char *a2, ...)
{
  return _[a1 stopRangingHawkeyeTask];
}

id objc_msgSend_stopRangingNonOwnerTask(void *a1, const char *a2, ...)
{
  return _[a1 stopRangingNonOwnerTask];
}

id objc_msgSend_stopRoseCommandWithParameters_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "stopRoseCommandWithParameters:");
}

id objc_msgSend_stopRoseNonOwnerCommandWithParameters_(void *a1, const char *a2, ...)
{
  return [a1 stopRoseNonOwnerCommandWithParameters:];
}

id objc_msgSend_stopRoseRangingCommand(void *a1, const char *a2, ...)
{
  return _[a1 stopRoseRangingCommand];
}

id objc_msgSend_stopRoseRangingNonOwnerCommandWithParameters_(void *a1, const char *a2, ...)
{
  return [a1 stopRoseRangingNonOwnerCommandWithParameters:];
}

id objc_msgSend_stopRoseRangingTask(void *a1, const char *a2, ...)
{
  return _[a1 stopRoseRangingTask];
}

id objc_msgSend_stopRoseTaskWithParameters_(void *a1, const char *a2, ...)
{
  return [a1 stopRoseTaskWithParameters:];
}

id objc_msgSend_stopScan(void *a1, const char *a2, ...)
{
  return _[a1 stopScan];
}

id objc_msgSend_stopScanning(void *a1, const char *a2, ...)
{
  return _[a1 stopScanning];
}

id objc_msgSend_stopScanningAwaitingResponse(void *a1, const char *a2, ...)
{
  return _[a1 stopScanningAwaitingResponse];
}

id objc_msgSend_stopScanningForType_(void *a1, const char *a2, ...)
{
  return [a1 stopScanningForType:];
}

id objc_msgSend_stopService(void *a1, const char *a2, ...)
{
  return _[a1 stopService];
}

id objc_msgSend_stopSoundCommand(void *a1, const char *a2, ...)
{
  return _[a1 stopSoundCommand];
}

id objc_msgSend_stopSoundHawkeyeTask(void *a1, const char *a2, ...)
{
  return _[a1 stopSoundHawkeyeTask];
}

id objc_msgSend_stopSoundTask(void *a1, const char *a2, ...)
{
  return _[a1 stopSoundTask];
}

id objc_msgSend_stopSyncing_(void *a1, const char *a2, ...)
{
  return [a1 stopSyncing:];
}

id objc_msgSend_stopTemporaryLongAggressiveScan(void *a1, const char *a2, ...)
{
  return _[a1 stopTemporaryLongAggressiveScan];
}

id objc_msgSend_stopTime(void *a1, const char *a2, ...)
{
  return _[a1 stopTime];
}

id objc_msgSend_stopTo(void *a1, const char *a2, ...)
{
  return _[a1 stopTo];
}

id objc_msgSend_stopTrack_(void *a1, const char *a2, ...)
{
  return [a1 stopTrack:];
}

id objc_msgSend_stopTrackingZone_(void *a1, const char *a2, ...)
{
  return [a1 stopTrackingZone:];
}

id objc_msgSend_stopTrackingZones(void *a1, const char *a2, ...)
{
  return _[a1 stopTrackingZones];
}

id objc_msgSend_stopUnauthorizedSoundCommand(void *a1, const char *a2, ...)
{
  return _[a1 stopUnauthorizedSoundCommand];
}

id objc_msgSend_stopUpdatingLocation(void *a1, const char *a2, ...)
{
  return _[a1 stopUpdatingLocation];
}

id objc_msgSend_stopUpdatingSimpleBeaconsWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 stopUpdatingSimpleBeaconsWithCompletion:];
}

id objc_msgSend_stopWatchAdvertisementBufferScan(void *a1, const char *a2, ...)
{
  return _[a1 stopWatchAdvertisementBufferScan];
}

id objc_msgSend_stopWatchAdvertisementBufferScan_(void *a1, const char *a2, ...)
{
  return [a1 stopWatchAdvertisementBufferScan:];
}

id objc_msgSend_stopWatchAdvertisementBufferScanning(void *a1, const char *a2, ...)
{
  return _[a1 stopWatchAdvertisementBufferScanning];
}

id objc_msgSend_stoppedAggressiveDiscoveryScan(void *a1, const char *a2, ...)
{
  return _[a1 stoppedAggressiveDiscoveryScan];
}

id objc_msgSend_stoppedBTFindingDiscoveryScan(void *a1, const char *a2, ...)
{
  return _[a1 stoppedBTFindingDiscoveryScan];
}

id objc_msgSend_stoppedHawkeyeLowEnergyScan(void *a1, const char *a2, ...)
{
  return _[a1 stoppedHawkeyeLowEnergyScan];
}

id objc_msgSend_storeCache_(void *a1, const char *a2, ...)
{
  return [a1 storeCache:];
}

id objc_msgSend_storeDataInPersistentStore(void *a1, const char *a2, ...)
{
  return _[a1 storeDataInPersistentStore];
}

id objc_msgSend_storeFrontIdentifierPromise(void *a1, const char *a2, ...)
{
  return _[a1 storeFrontIdentifierPromise];
}

id objc_msgSend_storeHRRecoveryToHealthKit_(void *a1, const char *a2, ...)
{
  return [a1 storeHRRecoveryToHealthKit:];
}

id objc_msgSend_storeLastAWDTimestamps(void *a1, const char *a2, ...)
{
  return _[a1 storeLastAWDTimestamps];
}

id objc_msgSend_storeRsrpUpdate_(void *a1, const char *a2, ...)
{
  return [a1 storeRsrpUpdate:];
}

id objc_msgSend_storeWithDictionary_(void *a1, const char *a2, ...)
{
  return [a1 storeWithDictionary:];
}

id objc_msgSend_streamingBitrate(void *a1, const char *a2, ...)
{
  return _[a1 streamingBitrate];
}

id objc_msgSend_streamingConnection(void *a1, const char *a2, ...)
{
  return _[a1 streamingConnection];
}

id objc_msgSend_streamingFPS(void *a1, const char *a2, ...)
{
  return _[a1 streamingFPS];
}

id objc_msgSend_strideCalData(void *a1, const char *a2, ...)
{
  return _[a1 strideCalData];
}

id objc_msgSend_strideCalibrationDatabase_didInsertEntry_(void *a1, const char *a2, ...)
{
  return [a1 strideCalibrationDatabase:didInsertEntry:];
}

id objc_msgSend_strideCalibratorSetSession_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "strideCalibratorSetSession:");
}

id objc_msgSend_strideLengthForStepCadence_(void *a1, const char *a2, ...)
{
  return [a1 strideLengthForStepCadence:];
}

id objc_msgSend_strideLengthFromStartDate_endDate_(void *a1, const char *a2, ...)
{
  return [a1 strideLengthFromStartDate:endDate:];
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _[a1 string];
}

id objc_msgSend_stringByAddingPercentEncodingWithAllowedCharacters_(void *a1, const char *a2, ...)
{
  return [a1 stringByAddingPercentEncodingWithAllowedCharacters:];
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return [a1 stringByAppendingFormat:];
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return [a1 stringByAppendingPathComponent:];
}

id objc_msgSend_stringByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return [a1 stringByAppendingPathExtension:];
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return [a1 stringByAppendingString:];
}

id objc_msgSend_stringByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 stringByDeletingLastPathComponent];
}

id objc_msgSend_stringByDeletingPathExtension(void *a1, const char *a2, ...)
{
  return _[a1 stringByDeletingPathExtension];
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return [a1 stringByReplacingOccurrencesOfString:];
}

id objc_msgSend_stringByResolvingSymlinksInPath(void *a1, const char *a2, ...)
{
  return _[a1 stringByResolvingSymlinksInPath];
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return [a1 stringByTrimmingCharactersInSet:];
}

id objc_msgSend_stringForKey_atKeyPath_defaultValue_(void *a1, const char *a2, ...)
{
  return [a1 stringForKey:atKeyPath:defaultValue:];
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return [a1 stringFromDate:];
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _[a1 stringValue];
}

id objc_msgSend_stringWithCString_encoding_(void *a1, const char *a2, ...)
{
  return [a1 stringWithCString:x0 encoding:x1];
}

id objc_msgSend_stringWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 stringWithCapacity:];
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return [a1 stringWithFormat:];
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return [a1 stringWithString:];
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return [a1 stringWithUTF8String:];
}

id objc_msgSend_stringWithValidatedFormat_validFormatSpecifiers_error_(void *a1, const char *a2, ...)
{
  return [a1 stringWithValidatedFormat:x0 validFormatSpecifiers:x1 error:x2];
}

id objc_msgSend_subAdministrativeArea(void *a1, const char *a2, ...)
{
  return _[a1 subAdministrativeArea];
}

id objc_msgSend_subIdentityId(void *a1, const char *a2, ...)
{
  return _[a1 subIdentityId];
}

id objc_msgSend_subIdentityIdWithType(void *a1, const char *a2, ...)
{
  return _[a1 subIdentityIdWithType];
}

id objc_msgSend_subIdentityType(void *a1, const char *a2, ...)
{
  return _[a1 subIdentityType];
}

id objc_msgSend_subLocality(void *a1, const char *a2, ...)
{
  return _[a1 subLocality];
}

id objc_msgSend_subThoroughfare(void *a1, const char *a2, ...)
{
  return _[a1 subThoroughfare];
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return [a1 subarrayWithRange:];
}

id objc_msgSend_subdataWithRange_(void *a1, const char *a2, ...)
{
  return [a1 subdataWithRange:];
}

id objc_msgSend_subjectMonitorRegistry(void *a1, const char *a2, ...)
{
  return _[a1 subjectMonitorRegistry];
}

id objc_msgSend_subjectToken(void *a1, const char *a2, ...)
{
  return _[a1 subjectToken];
}

id objc_msgSend_subjectUUID(void *a1, const char *a2, ...)
{
  return _[a1 subjectUUID];
}

id objc_msgSend_submersionMeasurementUpdate_(void *a1, const char *a2, ...)
{
  return [a1 submersionMeasurementUpdate:];
}

id objc_msgSend_submersionState(void *a1, const char *a2, ...)
{
  return _[a1 submersionState];
}

id objc_msgSend_submersionStateMachine(void *a1, const char *a2, ...)
{
  return _[a1 submersionStateMachine];
}

id objc_msgSend_submersionStateUpdate_(void *a1, const char *a2, ...)
{
  return [a1 submersionStateUpdate:];
}

id objc_msgSend_submitAWDMetric(void *a1, const char *a2, ...)
{
  return _[a1 submitAWDMetric];
}

id objc_msgSend_submitAllMetricsFromNotification_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "submitAllMetricsFromNotification:");
}

id objc_msgSend_submitBOMMetricsBoot(void *a1, const char *a2, ...)
{
  return _[a1 submitBOMMetricsBoot];
}

id objc_msgSend_submitBOMMetricsScansCompleted_andTimeSinceLastDisable_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "submitBOMMetricsScansCompleted:andTimeSinceLastDisable:");
}

id objc_msgSend_submitBufferEmptyAnalyticsCounts_numNOApplePosh_numNONonApplePosh_numWildAppleType18_numWildApplePosh_numWildNonApplePosh_totalNearOwnerAdv_totalWildAdv_timeSinceLastBufferEmpty_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "submitBufferEmptyAnalyticsCounts:numNOApplePosh:numNONonApplePosh:numWildAppleType18:numWildApplePosh:numWildNonApplePosh:totalNearOwnerAdv:totalWildAdv:timeSinceLastBufferEmpty:");
}

id objc_msgSend_submitCAConnectionMetrics_forDevice_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "submitCAConnectionMetrics:forDevice:");
}

id objc_msgSend_submitCAMaintenanceMetrics_(void *a1, const char *a2, ...)
{
  return [a1 submitCAMaintenanceMetrics:];
}

id objc_msgSend_submitCarMaintConnectionMetrics_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "submitCarMaintConnectionMetrics:");
}

id objc_msgSend_submitCarMaintMetrics_(void *a1, const char *a2, ...)
{
  return [a1 submitCarMaintMetrics:];
}

id objc_msgSend_submitClientRequestsEvent_client_scanType_(void *a1, const char *a2, ...)
{
  return [a1 submitClientRequestsEvent:client:scanType:];
}

id objc_msgSend_submitCoexMetricToCAWithBatteryLevelAtCallStart_batteryLevelAtCallEnd_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "submitCoexMetricToCAWithBatteryLevelAtCallStart:batteryLevelAtCallEnd:");
}

id objc_msgSend_submitCompletedMaintenanceMetrics_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "submitCompletedMaintenanceMetrics:");
}

id objc_msgSend_submitConnectionAttemptEvent_numberBTConnectionAttempts_connectionReason_deviceType_(void *a1, const char *a2, ...)
{
  return [a1 submitConnectionAttemptEvent:numberBTConnectionAttempts:connectionReason:deviceType:];
}

id objc_msgSend_submitConnectionAttemptSuccessEvent_krMaterial_connectionReason_deviceType_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "submitConnectionAttemptSuccessEvent:krMaterial:connectionReason:deviceType:");
}

id objc_msgSend_submitData(void *a1, const char *a2, ...)
{
  return _[a1 submitData];
}

id objc_msgSend_submitEmptyFinalResult(void *a1, const char *a2, ...)
{
  return _[a1 submitEmptyFinalResult];
}

id objc_msgSend_submitEvent_(void *a1, const char *a2, ...)
{
  return [a1 submitEvent:];
}

id objc_msgSend_submitFalseDetectionMetricsWithType_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "submitFalseDetectionMetricsWithType:");
}

id objc_msgSend_submitFirmwareVersionsForOwnedTag_firmwareVersion_(void *a1, const char *a2, ...)
{
  return [a1 submitFirmwareVersionsForOwnedTag:firmwareVersion];
}

id objc_msgSend_submitFirmwareVersionsForOwnedTags(void *a1, const char *a2, ...)
{
  return _[a1 submitFirmwareVersionsForOwnedTags];
}

id objc_msgSend_submitIntervalMetricsForEvent_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "submitIntervalMetricsForEvent:");
}

id objc_msgSend_submitKeyFetchEvent_numberMaterials_isDrift_deviceType_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "submitKeyFetchEvent:numberMaterials:isDrift:deviceType:");
}

id objc_msgSend_submitLatencyMetrics(void *a1, const char *a2, ...)
{
  return _[a1 submitLatencyMetrics];
}

id objc_msgSend_submitMaintenanceMetrics_forDevice_withReason_andCategory_andDuration_leashable_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "submitMaintenanceMetrics:forDevice:withReason:andCategory:andDuration:leashable:");
}

id objc_msgSend_submitMetricsIfPossible_(void *a1, const char *a2, ...)
{
  return [a1 submitMetricsIfPossible:];
}

id objc_msgSend_submitModeMetricsForEvent_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "submitModeMetricsForEvent:");
}

id objc_msgSend_submitNonTimerMaintenanceMetricsForDevice_proactive_(void *a1, const char *a2, ...)
{
  return [a1 submitNonTimerMaintenanceMetricsForDevice:proactive:];
}

id objc_msgSend_submitPendingConnectionAttemptMetrics_attemptDuration_connectionReason_deviceType_(void *a1, const char *a2, ...)
{
  return [a1 submitPendingConnectionAttemptMetrics:x0 attemptDuration:x1 connectionReason:x2 deviceType:x3];
}

id objc_msgSend_submitPercentageMetricsForEvent_(void *a1, const char *a2, ...)
{
  return [a1 submitPercentageMetricsForEvent:];
}

id objc_msgSend_submitPowerLogEvent_data_(void *a1, const char *a2, ...)
{
  return [a1 submitPowerLogEvent:data];
}

id objc_msgSend_submitRequest_(void *a1, const char *a2, ...)
{
  return [a1 submitRequest:];
}

id objc_msgSend_submitScanTypeChangeEvent_type_(void *a1, const char *a2, ...)
{
  return [a1 submitScanTypeChangeEvent:type:];
}

id objc_msgSend_submitSystemWakeLeashBreakMetricsPerAccessoryAtLoi_forLeashBreak_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "submitSystemWakeLeashBreakMetricsPerAccessoryAtLoi:forLeashBreak:");
}

id objc_msgSend_submitTaskMetricsForDevice_task_completed_errorCode_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "submitTaskMetricsForDevice:task:completed:errorCode:");
}

id objc_msgSend_submitTaskRequest_error_(void *a1, const char *a2, ...)
{
  return [a1 submitTaskRequest:error];
}

id objc_msgSend_submitUnexpectedMissingBeaconMetrics_disconnected_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "submitUnexpectedMissingBeaconMetrics:disconnected:");
}

id objc_msgSend_submitUserStats_payload_(void *a1, const char *a2, ...)
{
  return [a1 submitUserStats:payload:];
}

id objc_msgSend_submitUtObservationActionOfType_forDevice_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "submitUtObservationActionOfType:forDevice:");
}

id objc_msgSend_submitWifiAvailabilityEventToBiome(void *a1, const char *a2, ...)
{
  return _[a1 submitWifiAvailabilityEventToBiome];
}

id objc_msgSend_submitWowChangeEventToBiome(void *a1, const char *a2, ...)
{
  return _[a1 submitWowChangeEventToBiome];
}

id objc_msgSend_subpathsAtPath_(void *a1, const char *a2, ...)
{
  return [a1 subpathsAtPath:];
}

id objc_msgSend_subscribeOn_(void *a1, const char *a2, ...)
{
  return [a1 subscribeOn:];
}

id objc_msgSend_subscription(void *a1, const char *a2, ...)
{
  return _[a1 subscription];
}

id objc_msgSend_subscriptionType(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionType];
}

id objc_msgSend_subscriptions(void *a1, const char *a2, ...)
{
  return _[a1 subscriptions];
}

id objc_msgSend_subscriptionsInUse(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionsInUse];
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return [a1 substringFromIndex:];
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return [a1 substringToIndex:];
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return [a1 substringWithRange:];
}

id objc_msgSend_sufficientTimeElapsedSinceDisconnectionOfDevice_(void *a1, const char *a2, ...)
{
  return [a1 sufficientTimeElapsedSinceDisconnectionOfDevice:];
}

id objc_msgSend_sufficientTimeElapsedSinceLastProactiveMaintenanceOfDevice_(void *a1, const char *a2, ...)
{
  return [a1 sufficientTimeElapsedSinceLastProactiveMaintenanceOfDevice:];
}

id objc_msgSend_sumQuantity(void *a1, const char *a2, ...)
{
  return _[a1 sumQuantity];
}

id objc_msgSend_summaries(void *a1, const char *a2, ...)
{
  return _[a1 summaries];
}

id objc_msgSend_summariesAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 summariesAtIndex:];
}

id objc_msgSend_summariesCount(void *a1, const char *a2, ...)
{
  return _[a1 summariesCount];
}

id objc_msgSend_supervised(void *a1, const char *a2, ...)
{
  return _[a1 supervised];
}

id objc_msgSend_supportedRat(void *a1, const char *a2, ...)
{
  return _[a1 supportedRat];
}

id objc_msgSend_supportsCapability_(void *a1, const char *a2, ...)
{
  return [a1 supportsCapability:];
}

id objc_msgSend_supportsCarPlay(void *a1, const char *a2, ...)
{
  return _[a1 supportsCarPlay];
}

id objc_msgSend_supportsDeviceToDeviceEncryption(void *a1, const char *a2, ...)
{
  return _[a1 supportsDeviceToDeviceEncryption];
}

id objc_msgSend_supportsFragmentationForOpcode_(void *a1, const char *a2, ...)
{
  return [a1 supportsFragmentationForOpcode:];
}

id objc_msgSend_supportsLocation(void *a1, const char *a2, ...)
{
  return _[a1 supportsLocation];
}

id objc_msgSend_suppressShowingInSettings(void *a1, const char *a2, ...)
{
  return _[a1 suppressShowingInSettings];
}

id objc_msgSend_surfacePressure(void *a1, const char *a2, ...)
{
  return _[a1 surfacePressure];
}

id objc_msgSend_surroundingWifiBands(void *a1, const char *a2, ...)
{
  return _[a1 surroundingWifiBands];
}

id objc_msgSend_surroundingWifiBandsAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 surroundingWifiBandsAtIndex:];
}

id objc_msgSend_surroundingWifiBandsCount(void *a1, const char *a2, ...)
{
  return _[a1 surroundingWifiBandsCount];
}

id objc_msgSend_suspend(void *a1, const char *a2, ...)
{
  return _[a1 suspend];
}

id objc_msgSend_suspiciousDeviceContainsKoreaLocations_(void *a1, const char *a2, ...)
{
  return [a1 suspiciousDeviceContainsKoreaLocations:];
}

id objc_msgSend_swimWorkoutInstance_(void *a1, const char *a2, ...)
{
  return [a1 swimWorkoutInstance:];
}

id objc_msgSend_sync_(void *a1, const char *a2, ...)
{
  return [a1 sync:];
}

id objc_msgSend_syncCoordinator(void *a1, const char *a2, ...)
{
  return _[a1 syncCoordinator];
}

id objc_msgSend_syncCoordinatorWithServiceName_(void *a1, const char *a2, ...)
{
  return [a1 syncCoordinatorWithServiceName:];
}

id objc_msgSend_syncDidComplete(void *a1, const char *a2, ...)
{
  return _[a1 syncDidComplete];
}

id objc_msgSend_syncDidFailWithError_(void *a1, const char *a2, ...)
{
  return [a1 syncDidFailWithError:];
}

id objc_msgSend_syncKey(void *a1, const char *a2, ...)
{
  return _[a1 syncKey];
}

id objc_msgSend_syncRestriction(void *a1, const char *a2, ...)
{
  return _[a1 syncRestriction];
}

id objc_msgSend_syncService(void *a1, const char *a2, ...)
{
  return _[a1 syncService];
}

id objc_msgSend_syncSessionRetryInterval(void *a1, const char *a2, ...)
{
  return _[a1 syncSessionRetryInterval];
}

id objc_msgSend_syncSessionType(void *a1, const char *a2, ...)
{
  return _[a1 syncSessionType];
}

id objc_msgSend_syncgetActiveCall_(void *a1, const char *a2, ...)
{
  return [a1 syncgetActiveCall:];
}

id objc_msgSend_syncgetActiveGnssBands_(void *a1, const char *a2, ...)
{
  return [a1 syncgetActiveGnssBands:];
}

id objc_msgSend_syncgetActiveTechs_(void *a1, const char *a2, ...)
{
  return [a1 syncgetActiveTechs:];
}

id objc_msgSend_syncgetActivityOverride(void *a1, const char *a2, ...)
{
  return _[a1 syncgetActivityOverride];
}

id objc_msgSend_syncgetAddFence_(void *a1, const char *a2, ...)
{
  return [a1 syncgetAddFence:];
}

id objc_msgSend_syncgetAddProximityZone_(void *a1, const char *a2, ...)
{
  return [a1 syncgetAddProximityZone:];
}

id objc_msgSend_syncgetAirplaneMode_(void *a1, const char *a2, ...)
{
  return [a1 syncgetAirplaneMode:];
}

id objc_msgSend_syncgetAltitude_rel_undulation_(void *a1, const char *a2, ...)
{
  return [a1 syncgetAltitude:rel:undulation:];
}

id objc_msgSend_syncgetAltitude_rel_undulation_feedToAltFilter_(void *a1, const char *a2, ...)
{
  return [a1 syncgetAltitude:rel:undulation:feedToAltFilter:];
}

id objc_msgSend_syncgetAndSetOrChangeAppClipAuthorizationTime_forClient_(void *a1, const char *a2, ...)
{
  return [a1 syncgetAndSetOrChangeAppClipAuthorizationTime:forClient:];
}

id objc_msgSend_syncgetAppAvailabilityForLocation_radius_searchContext_availabilityList_includeRegionalApps_(void *a1, const char *a2, ...)
{
  return [a1 syncgetAppAvailabilityForLocation:x0 radius:x1 searchContext:x2 availabilityList:x3 includeRegionalApps:x4];
}

id objc_msgSend_syncgetApplyArchivedAuthorizationDecisionsAndDie_unlessTokenMatches_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "syncgetApplyArchivedAuthorizationDecisionsAndDie:unlessTokenMatches:");
}

id objc_msgSend_syncgetArchivedAuthorizationDecisions(void *a1, const char *a2, ...)
{
  return _[a1 syncgetArchivedAuthorizationDecisions];
}

id objc_msgSend_syncgetAssociatedNetwork_(void *a1, const char *a2, ...)
{
  return [a1 syncgetAssociatedNetwork:];
}

id objc_msgSend_syncgetAuthorizationContextIfClientIsNonZonal_(void *a1, const char *a2, ...)
{
  return [a1 syncgetAuthorizationContextIfClientIsNonZonal:];
}

id objc_msgSend_syncgetBatterySaverMode(void *a1, const char *a2, ...)
{
  return _[a1 syncgetBatterySaverMode];
}

id objc_msgSend_syncgetBestMatchLocation_forCell_(void *a1, const char *a2, ...)
{
  return [a1 syncgetBestMatchLocation:forCell:];
}

id objc_msgSend_syncgetBiasFit_(void *a1, const char *a2, ...)
{
  return [a1 syncgetBiasFit:];
}

id objc_msgSend_syncgetCanBundle_performFenceOperationFor_(void *a1, const char *a2, ...)
{
  return [a1 syncgetCanBundle:performFenceOperationFor:];
}

id objc_msgSend_syncgetClientEffectiveRegistrationResultWithTransientAwareness_(void *a1, const char *a2, ...)
{
  return [a1 syncgetClientEffectiveRegistrationResultWithTransientAwareness:];
}

id objc_msgSend_syncgetControlPlaneStatusReport_(void *a1, const char *a2, ...)
{
  return [a1 syncgetControlPlaneStatusReport:];
}

id objc_msgSend_syncgetCopyClients(void *a1, const char *a2, ...)
{
  return _[a1 syncgetCopyClients];
}

id objc_msgSend_syncgetCopyRawSpeedToKValueBins(void *a1, const char *a2, ...)
{
  return _[a1 syncgetCopyRawSpeedToKValueBins];
}

id objc_msgSend_syncgetCopyServingOperator_(void *a1, const char *a2, ...)
{
  return [a1 syncgetCopyServingOperator:];
}

id objc_msgSend_syncgetCopyServingProviderFromCarrierBundle_(void *a1, const char *a2, ...)
{
  return [a1 syncgetCopyServingProviderFromCarrierBundle:];
}

id objc_msgSend_syncgetCopyStepCadenceToStrideLengthBins(void *a1, const char *a2, ...)
{
  return _[a1 syncgetCopyStepCadenceToStrideLengthBins];
}

id objc_msgSend_syncgetDataAvailability(void *a1, const char *a2, ...)
{
  return _[a1 syncgetDataAvailability];
}

id objc_msgSend_syncgetDbUUID(void *a1, const char *a2, ...)
{
  return _[a1 syncgetDbUUID];
}

id objc_msgSend_syncgetDeleteTileFile_atPath_(void *a1, const char *a2, ...)
{
  return [a1 syncgetDeleteTileFile:atPath:];
}

id objc_msgSend_syncgetDeviceUnlockedSinceFirstBoot(void *a1, const char *a2, ...)
{
  return _[a1 syncgetDeviceUnlockedSinceFirstBoot];
}

id objc_msgSend_syncgetDoSync_(void *a1, const char *a2, ...)
{
  return [a1 syncgetDoSync:];
}

id objc_msgSend_syncgetEnabled(void *a1, const char *a2, ...)
{
  return _[a1 syncgetEnabled];
}

id objc_msgSend_syncgetFences_forBundle_(void *a1, const char *a2, ...)
{
  return [a1 syncgetFences:forBundle:];
}

id objc_msgSend_syncgetFences_forBundle_onBehalfOf_(void *a1, const char *a2, ...)
{
  return [a1 syncgetFences:forBundle:onBehalfOf:];
}

id objc_msgSend_syncgetFences_forKey_(void *a1, const char *a2, ...)
{
  return [a1 syncgetFences:forKey:];
}

id objc_msgSend_syncgetFetchColdStorageConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 syncgetFetchColdStorageConfiguration];
}

id objc_msgSend_syncgetForegroundApp_(void *a1, const char *a2, ...)
{
  return [a1 syncgetForegroundApp:];
}

id objc_msgSend_syncgetHasLingerClients(void *a1, const char *a2, ...)
{
  return _[a1 syncgetHasLingerClients];
}

id objc_msgSend_syncgetHasMonitoredFences_(void *a1, const char *a2, ...)
{
  return [a1 syncgetHasMonitoredFences:];
}

id objc_msgSend_syncgetHasMonitoredRegions_(void *a1, const char *a2, ...)
{
  return [a1 syncgetHasMonitoredRegions:];
}

id objc_msgSend_syncgetIconState(void *a1, const char *a2, ...)
{
  return _[a1 syncgetIconState];
}

id objc_msgSend_syncgetInsertWithBias_variance_temperature_timestamp_(void *a1, const char *a2, ...)
{
  return [a1 syncgetInsertWithBias:variance:temperature:timestamp:];
}

id objc_msgSend_syncgetIsApplicationInstalledLocally_(void *a1, const char *a2, ...)
{
  return [a1 syncgetIsApplicationInstalledLocally:];
}

id objc_msgSend_syncgetIsRegisteredOnCell(void *a1, const char *a2, ...)
{
  return _[a1 syncgetIsRegisteredOnCell];
}

id objc_msgSend_syncgetIsSimulationEnabled(void *a1, const char *a2, ...)
{
  return _[a1 syncgetIsSimulationEnabled];
}

id objc_msgSend_syncgetIsSleeping(void *a1, const char *a2, ...)
{
  return _[a1 syncgetIsSleeping];
}

id objc_msgSend_syncgetIsStrideCalibrationConvergedMedianForSpeed_(void *a1, const char *a2, ...)
{
  return [a1 syncgetIsStrideCalibrationConvergedMedianForSpeed:];
}

id objc_msgSend_syncgetIsTimerArmed(void *a1, const char *a2, ...)
{
  return _[a1 syncgetIsTimerArmed];
}

id objc_msgSend_syncgetIsTracking(void *a1, const char *a2, ...)
{
  return _[a1 syncgetIsTracking];
}

id objc_msgSend_syncgetLocation_(void *a1, const char *a2, ...)
{
  return [a1 syncgetLocation:];
}

id objc_msgSend_syncgetLocationClientKeys(void *a1, const char *a2, ...)
{
  return _[a1 syncgetLocationClientKeys];
}

id objc_msgSend_syncgetLocationPrivate_(void *a1, const char *a2, ...)
{
  return [a1 syncgetLocationPrivate:];
}

id objc_msgSend_syncgetMicroLocationInternalVersion_(void *a1, const char *a2, ...)
{
  return [a1 syncgetMicroLocationInternalVersion:];
}

id objc_msgSend_syncgetMonitoredRegions_forClient_(void *a1, const char *a2, ...)
{
  return [a1 syncgetMonitoredRegions:forClient:];
}

id objc_msgSend_syncgetName(void *a1, const char *a2, ...)
{
  return _[a1 syncgetName];
}

id objc_msgSend_syncgetNonFactoryRoundCount(void *a1, const char *a2, ...)
{
  return _[a1 syncgetNonFactoryRoundCount];
}

id objc_msgSend_syncgetNonSystemLocationClientKey(void *a1, const char *a2, ...)
{
  return _[a1 syncgetNonSystemLocationClientKey];
}

id objc_msgSend_syncgetNonSystemLocationClientKeys(void *a1, const char *a2, ...)
{
  return _[a1 syncgetNonSystemLocationClientKeys];
}

id objc_msgSend_syncgetNumTemperatures(void *a1, const char *a2, ...)
{
  return _[a1 syncgetNumTemperatures];
}

id objc_msgSend_syncgetQueryExerciseMinuteDataSince_records_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "syncgetQueryExerciseMinuteDataSince:records:");
}

id objc_msgSend_syncgetQueryLocationsForCells_useCache_(void *a1, const char *a2, ...)
{
  return [a1 syncgetQueryLocationsForCells:useCache:];
}

id objc_msgSend_syncgetQueryNatalieDataSince_records_(void *a1, const char *a2, ...)
{
  return [a1 syncgetQueryNatalieDataSince:x0 records:x1];
}

id objc_msgSend_syncgetQueryNearbys_forFenceKeys_(void *a1, const char *a2, ...)
{
  return [a1 syncgetQueryNearbys:forFenceKeys:];
}

id objc_msgSend_syncgetQueryPedometerDataSince_withResponseArray_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "syncgetQueryPedometerDataSince:withResponseArray:");
}

id objc_msgSend_syncgetQueryStartTime_andStopTime_(void *a1, const char *a2, ...)
{
  return [a1 syncgetQueryStartTime:andStopTime:];
}

id objc_msgSend_syncgetRawSpeedToKValueDefaultBins(void *a1, const char *a2, ...)
{
  return _[a1 syncgetRawSpeedToKValueDefaultBins];
}

id objc_msgSend_syncgetReachability(void *a1, const char *a2, ...)
{
  return _[a1 syncgetReachability];
}

id objc_msgSend_syncgetReferenceTime_(void *a1, const char *a2, ...)
{
  return [a1 syncgetReferenceTime:];
}

id objc_msgSend_syncgetRefreshCellMonitor(void *a1, const char *a2, ...)
{
  return _[a1 syncgetRefreshCellMonitor];
}

id objc_msgSend_syncgetRegisterPowerKeepAlive_client_dbgMessage_(void *a1, const char *a2, ...)
{
  return [a1 syncgetRegisterPowerKeepAlive:client:dbgMessage:];
}

id objc_msgSend_syncgetRegistrationResultToAuthorizationStatus_(void *a1, const char *a2, ...)
{
  return [a1 syncgetRegistrationResultToAuthorizationStatus:];
}

id objc_msgSend_syncgetRemoveFence_(void *a1, const char *a2, ...)
{
  return [a1 syncgetRemoveFence:];
}

id objc_msgSend_syncgetRemoveProximityZone_(void *a1, const char *a2, ...)
{
  return [a1 syncgetRemoveProximityZone:];
}

id objc_msgSend_syncgetResultReady_ForAnalyzer_(void *a1, const char *a2, ...)
{
  return [a1 syncgetResultReady:ForAnalyzer:];
}

id objc_msgSend_syncgetScanResult(void *a1, const char *a2, ...)
{
  return _[a1 syncgetScanResult];
}

id objc_msgSend_syncgetSedentaryAlarmData_since_(void *a1, const char *a2, ...)
{
  return [a1 syncgetSedentaryAlarmData:since];
}

id objc_msgSend_syncgetServingCells_addNeighborCells_(void *a1, const char *a2, ...)
{
  return [a1 syncgetServingCells:addNeighborCells:];
}

id objc_msgSend_syncgetSetLocationServicesEnabledStatically_withEventSource_(void *a1, const char *a2, ...)
{
  return [a1 syncgetSetLocationServicesEnabledStatically:withEventSource:];
}

id objc_msgSend_syncgetStartScanWithParameters_(void *a1, const char *a2, ...)
{
  return [a1 syncgetStartScanWithParameters:];
}

id objc_msgSend_syncgetStartScanWithType_lowPriority_lowLatency_passive_requester_channels_(void *a1, const char *a2, ...)
{
  return [a1 syncgetStartScanWithType:x0 lowPriority:x1 lowLatency:x2 passive:x3 requester:x4 channels:x5];
}

id objc_msgSend_syncgetStartScanWithType_lowPriority_passive_requester_(void *a1, const char *a2, ...)
{
  return [a1 syncgetStartScanWithType:lowPriority:passive:requester:];
}

id objc_msgSend_syncgetStartTimerForClient_andOptions_(void *a1, const char *a2, ...)
{
  return [a1 syncgetStartTimerForClient:andOptions:];
}

id objc_msgSend_syncgetStartTracking(void *a1, const char *a2, ...)
{
  return _[a1 syncgetStartTracking];
}

id objc_msgSend_syncgetStatusBarIconForEntityClass_(void *a1, const char *a2, ...)
{
  return [a1 syncgetStatusBarIconForEntityClass:];
}

id objc_msgSend_syncgetStepCadenceToStrideLengthDefaultBins(void *a1, const char *a2, ...)
{
  return _[a1 syncgetStepCadenceToStrideLengthDefaultBins];
}

id objc_msgSend_syncgetStopTimerForClient_(void *a1, const char *a2, ...)
{
  return [a1 syncgetStopTimerForClient:];
}

id objc_msgSend_syncgetStopTracking(void *a1, const char *a2, ...)
{
  return _[a1 syncgetStopTracking];
}

id objc_msgSend_syncgetSupportsMiniCalibration(void *a1, const char *a2, ...)
{
  return _[a1 syncgetSupportsMiniCalibration];
}

id objc_msgSend_syncgetTemporaryAuthorizationStatusForClient_(void *a1, const char *a2, ...)
{
  return [a1 syncgetTemporaryAuthorizationStatusForClient:];
}

id objc_msgSend_syncgetThermalLevel(void *a1, const char *a2, ...)
{
  return _[a1 syncgetThermalLevel];
}

id objc_msgSend_syncgetTileFilePath_latitude_longitude_isFileAccessible_isTileNotExistingOnServer_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "syncgetTileFilePath:latitude:longitude:isFileAccessible:isTileNotExistingOnServer:");
}

id objc_msgSend_syncgetTransitMacAddressesAmong_nearLatitude_longitude_resultMacAddresses_(void *a1, const char *a2, ...)
{
  return [a1 syncgetTransitMacAddressesAmong:x0 nearLatitude:x1 longitude:x2 resultMacAddresses:x3];
}

id objc_msgSend_syncgetUserProfile(void *a1, const char *a2, ...)
{
  return _[a1 syncgetUserProfile];
}

id objc_msgSend_syncgetUserProfileInternal(void *a1, const char *a2, ...)
{
  return _[a1 syncgetUserProfileInternal];
}

id objc_msgSend_syncgetWipeDatabase(void *a1, const char *a2, ...)
{
  return _[a1 syncgetWipeDatabase];
}

id objc_msgSend_syncgetZaxisStats_(void *a1, const char *a2, ...)
{
  return [a1 syncgetZaxisStats:];
}

id objc_msgSend_syncget_prepareSessionEndForSessionType_atEndTime_(void *a1, const char *a2, ...)
{
  return [a1 syncget_prepareSessionEndForSessionType:atEndTime:];
}

id objc_msgSend_syncgetadvertiseSelfAsBeaconForRegion_power_(void *a1, const char *a2, ...)
{
  return [a1 syncgetadvertiseSelfAsBeaconForRegion:power:];
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return _[a1 synchronize];
}

id objc_msgSend_synchronizeUserDefaultsDomain_keys_(void *a1, const char *a2, ...)
{
  return [a1 synchronizeUserDefaultsDomain:keys:];
}

id objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return [a1 synchronousRemoteObjectProxyWithErrorHandler:];
}

id objc_msgSend_systemCoexImpact_toState_(void *a1, const char *a2, ...)
{
  return [a1 systemCoexImpact:toState:];
}

id objc_msgSend_systemConnectivity_isConnected_(void *a1, const char *a2, ...)
{
  return [a1 systemConnectivity:isConnected:];
}

id objc_msgSend_systemMetricHeartbeat(void *a1, const char *a2, ...)
{
  return _[a1 systemMetricHeartbeat];
}

id objc_msgSend_systemServicesMap(void *a1, const char *a2, ...)
{
  return _[a1 systemServicesMap];
}

id objc_msgSend_systemVersion(void *a1, const char *a2, ...)
{
  return _[a1 systemVersion];
}

id objc_msgSend_systemWakeTime(void *a1, const char *a2, ...)
{
  return _[a1 systemWakeTime];
}

id objc_msgSend_systemWaking_atTime_(void *a1, const char *a2, ...)
{
  return [a1 systemWaking:atTime:];
}

id objc_msgSend_systemWillSleep_(void *a1, const char *a2, ...)
{
  return [a1 systemWillSleep:];
}

id objc_msgSend_taUnknownBeacon(void *a1, const char *a2, ...)
{
  return _[a1 taUnknownBeacon];
}

id objc_msgSend_tac(void *a1, const char *a2, ...)
{
  return _[a1 tac];
}

id objc_msgSend_tacID(void *a1, const char *a2, ...)
{
  return _[a1 tacID];
}

id objc_msgSend_tag(void *a1, const char *a2, ...)
{
  return _[a1 tag];
}

id objc_msgSend_tagSeparationSession(void *a1, const char *a2, ...)
{
  return _[a1 tagSeparationSession];
}

id objc_msgSend_tagSeparationStateChanged_beaconUUID_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "tagSeparationStateChanged:beaconUUID:completion:");
}

id objc_msgSend_takeAccuracyEnablementAssertionForClient_withDesiredAccuracy_(void *a1, const char *a2, ...)
{
  return [a1 takeAccuracyEnablementAssertionForClient:withDesiredAccuracy:];
}

id objc_msgSend_takeAssertion(void *a1, const char *a2, ...)
{
  return _[a1 takeAssertion];
}

id objc_msgSend_takeInUseAssertionForClientKey_reason_assertionLevel_withReply_(void *a1, const char *a2, ...)
{
  return [a1 takeInUseAssertionForClientKey:reason:assertionLevel:withReply:];
}

id objc_msgSend_takeMaintenancePowerAssertion(void *a1, const char *a2, ...)
{
  return _[a1 takeMaintenancePowerAssertion];
}

id objc_msgSend_takePower(void *a1, const char *a2, ...)
{
  return _[a1 takePower];
}

id objc_msgSend_takePowerAndScheduleRelease_(void *a1, const char *a2, ...)
{
  return [a1 takePowerAndScheduleRelease:];
}

id objc_msgSend_takePowerAssertion(void *a1, const char *a2, ...)
{
  return _[a1 takePowerAssertion];
}

id objc_msgSend_targetIsInProximity(void *a1, const char *a2, ...)
{
  return _[a1 targetIsInProximity];
}

id objc_msgSend_targetPressure(void *a1, const char *a2, ...)
{
  return _[a1 targetPressure];
}

id objc_msgSend_targetWithPid_(void *a1, const char *a2, ...)
{
  return [a1 targetWithPid:];
}

id objc_msgSend_taskDescription(void *a1, const char *a2, ...)
{
  return _[a1 taskDescription];
}

id objc_msgSend_taskIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 taskIdentifier];
}

id objc_msgSend_taskRequestForIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 taskRequestForIdentifier:];
}

id objc_msgSend_taskState(void *a1, const char *a2, ...)
{
  return _[a1 taskState];
}

id objc_msgSend_tearDownKeyReconciler(void *a1, const char *a2, ...)
{
  return _[a1 tearDownKeyReconciler];
}

id objc_msgSend_tearDownLocationAuthPrompt_(void *a1, const char *a2, ...)
{
  return [a1 tearDownLocationAuthPrompt:];
}

id objc_msgSend_teardownCLNotifiers(void *a1, const char *a2, ...)
{
  return _[a1 teardownCLNotifiers];
}

id objc_msgSend_teardownClient_(void *a1, const char *a2, ...)
{
  return [a1 teardownClient:];
}

id objc_msgSend_teardownListeners(void *a1, const char *a2, ...)
{
  return _[a1 teardownListeners];
}

id objc_msgSend_teardownManager(void *a1, const char *a2, ...)
{
  return _[a1 teardownManager];
}

id objc_msgSend_teardownService(void *a1, const char *a2, ...)
{
  return _[a1 teardownService];
}

id objc_msgSend_teardownTimers(void *a1, const char *a2, ...)
{
  return _[a1 teardownTimers];
}

id objc_msgSend_technology(void *a1, const char *a2, ...)
{
  return _[a1 technology];
}

id objc_msgSend_temperature(void *a1, const char *a2, ...)
{
  return _[a1 temperature];
}

id objc_msgSend_temperatureUncertainty(void *a1, const char *a2, ...)
{
  return _[a1 temperatureUncertainty];
}

id objc_msgSend_terminateActiveLocationRequest(void *a1, const char *a2, ...)
{
  return _[a1 terminateActiveLocationRequest];
}

id objc_msgSend_terminateBeaconing(void *a1, const char *a2, ...)
{
  return _[a1 terminateBeaconing];
}

id objc_msgSend_terminateFinalCrossValidation(void *a1, const char *a2, ...)
{
  return _[a1 terminateFinalCrossValidation];
}

id objc_msgSend_terminateScanSessionFor_(void *a1, const char *a2, ...)
{
  return [a1 terminateScanSessionFor:];
}

id objc_msgSend_terminateTemporaryLongAggressiveScan_(void *a1, const char *a2, ...)
{
  return [a1 terminateTemporaryLongAggressiveScan:];
}

id objc_msgSend_terrainElevation(void *a1, const char *a2, ...)
{
  return _[a1 terrainElevation];
}

id objc_msgSend_testMode(void *a1, const char *a2, ...)
{
  return _[a1 testMode];
}

id objc_msgSend_testModeTask_(void *a1, const char *a2, ...)
{
  return [a1 testModeTask:];
}

id objc_msgSend_thermal(void *a1, const char *a2, ...)
{
  return _[a1 thermal];
}

id objc_msgSend_thermalHeavyDuration(void *a1, const char *a2, ...)
{
  return _[a1 thermalHeavyDuration];
}

id objc_msgSend_thermalLevel(void *a1, const char *a2, ...)
{
  return _[a1 thermalLevel];
}

id objc_msgSend_thermalLevelAtEndOfCall(void *a1, const char *a2, ...)
{
  return _[a1 thermalLevelAtEndOfCall];
}

id objc_msgSend_thermalLevelAtStartOfCall(void *a1, const char *a2, ...)
{
  return _[a1 thermalLevelAtStartOfCall];
}

id objc_msgSend_thermalLightDuration(void *a1, const char *a2, ...)
{
  return _[a1 thermalLightDuration];
}

id objc_msgSend_thermalModerateDuration(void *a1, const char *a2, ...)
{
  return _[a1 thermalModerateDuration];
}

id objc_msgSend_thermalNominalDuration(void *a1, const char *a2, ...)
{
  return _[a1 thermalNominalDuration];
}

id objc_msgSend_thermalPressure(void *a1, const char *a2, ...)
{
  return _[a1 thermalPressure];
}

id objc_msgSend_thermalSleepingDuration(void *a1, const char *a2, ...)
{
  return _[a1 thermalSleepingDuration];
}

id objc_msgSend_thermalTrappingDuration(void *a1, const char *a2, ...)
{
  return _[a1 thermalTrappingDuration];
}

id objc_msgSend_thoroughfare(void *a1, const char *a2, ...)
{
  return _[a1 thoroughfare];
}

id objc_msgSend_threshold(void *a1, const char *a2, ...)
{
  return _[a1 threshold];
}

id objc_msgSend_thresholdBoundsForElevation_andAccuracy_upperBound_lowerBound_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "thresholdBoundsForElevation:andAccuracy:upperBound:lowerBound:");
}

id objc_msgSend_thresholdUpdated_initialized_above_(void *a1, const char *a2, ...)
{
  return [a1 thresholdUpdated:x0 initialized:x1 above:x2];
}

id objc_msgSend_tick_(void *a1, const char *a2, ...)
{
  return [a1 tick:];
}

id objc_msgSend_tickleArrow(void *a1, const char *a2, ...)
{
  return _[a1 tickleArrow];
}

id objc_msgSend_tilePrefetchPredictionActivityCycleAllowance(void *a1, const char *a2, ...)
{
  return _[a1 tilePrefetchPredictionActivityCycleAllowance];
}

id objc_msgSend_tilePrefetchRelevancyWindow(void *a1, const char *a2, ...)
{
  return _[a1 tilePrefetchRelevancyWindow];
}

id objc_msgSend_tileSetStyle(void *a1, const char *a2, ...)
{
  return _[a1 tileSetStyle];
}

id objc_msgSend_tileType(void *a1, const char *a2, ...)
{
  return _[a1 tileType];
}

id objc_msgSend_tileX(void *a1, const char *a2, ...)
{
  return _[a1 tileX];
}

id objc_msgSend_tileY(void *a1, const char *a2, ...)
{
  return _[a1 tileY];
}

id objc_msgSend_tiles(void *a1, const char *a2, ...)
{
  return _[a1 tiles];
}

id objc_msgSend_tilesAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 tilesAtIndex:];
}

id objc_msgSend_tilesCount(void *a1, const char *a2, ...)
{
  return _[a1 tilesCount];
}

id objc_msgSend_time(void *a1, const char *a2, ...)
{
  return _[a1 time];
}

id objc_msgSend_timeBetweenHKUpdates(void *a1, const char *a2, ...)
{
  return _[a1 timeBetweenHKUpdates];
}

id objc_msgSend_timeBetweenTriggers(void *a1, const char *a2, ...)
{
  return _[a1 timeBetweenTriggers];
}

id objc_msgSend_timeEnd(void *a1, const char *a2, ...)
{
  return _[a1 timeEnd];
}

id objc_msgSend_timeEndGpsLocationSegment(void *a1, const char *a2, ...)
{
  return _[a1 timeEndGpsLocationSegment];
}

id objc_msgSend_timeFenceExit(void *a1, const char *a2, ...)
{
  return _[a1 timeFenceExit];
}

id objc_msgSend_timeFenceStart(void *a1, const char *a2, ...)
{
  return _[a1 timeFenceStart];
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSince1970];
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return [a1 timeIntervalSinceDate:x0];
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceNow];
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_timeOfCurrentStateChange(void *a1, const char *a2, ...)
{
  return _[a1 timeOfCurrentStateChange];
}

id objc_msgSend_timeOfNMinusOneStateChange(void *a1, const char *a2, ...)
{
  return _[a1 timeOfNMinusOneStateChange];
}

id objc_msgSend_timeOfNMinusTwoStateChange(void *a1, const char *a2, ...)
{
  return _[a1 timeOfNMinusTwoStateChange];
}

id objc_msgSend_timeRange(void *a1, const char *a2, ...)
{
  return _[a1 timeRange];
}

id objc_msgSend_timeSinceDominantActivityChange(void *a1, const char *a2, ...)
{
  return _[a1 timeSinceDominantActivityChange];
}

id objc_msgSend_timeSinceMotionActivityChange(void *a1, const char *a2, ...)
{
  return _[a1 timeSinceMotionActivityChange];
}

id objc_msgSend_timeSinceNMinusOneStateChange(void *a1, const char *a2, ...)
{
  return _[a1 timeSinceNMinusOneStateChange];
}

id objc_msgSend_timeSinceNMinusTwoStateChange(void *a1, const char *a2, ...)
{
  return _[a1 timeSinceNMinusTwoStateChange];
}

id objc_msgSend_timeSinceWifiRoam(void *a1, const char *a2, ...)
{
  return _[a1 timeSinceWifiRoam];
}

id objc_msgSend_timeStart(void *a1, const char *a2, ...)
{
  return _[a1 timeStart];
}

id objc_msgSend_timeStartGpsLocationSegment(void *a1, const char *a2, ...)
{
  return _[a1 timeStartGpsLocationSegment];
}

id objc_msgSend_timeToActiveGiveup(void *a1, const char *a2, ...)
{
  return _[a1 timeToActiveGiveup];
}

id objc_msgSend_timeToInitialStateChange(void *a1, const char *a2, ...)
{
  return _[a1 timeToInitialStateChange];
}

id objc_msgSend_timeToRequestCheapActiveLocation(void *a1, const char *a2, ...)
{
  return _[a1 timeToRequestCheapActiveLocation];
}

id objc_msgSend_timeToUnknown(void *a1, const char *a2, ...)
{
  return _[a1 timeToUnknown];
}

id objc_msgSend_timeUserGetCloseToVisitLocation(void *a1, const char *a2, ...)
{
  return _[a1 timeUserGetCloseToVisitLocation];
}

id objc_msgSend_timeZoneForSecondsFromGMT_(void *a1, const char *a2, ...)
{
  return [a1 timeZoneForSecondsFromGMT:];
}

id objc_msgSend_timeZoneWithAbbreviation_(void *a1, const char *a2, ...)
{
  return [a1 timeZoneWithAbbreviation:];
}

id objc_msgSend_timeoutSeconds(void *a1, const char *a2, ...)
{
  return _[a1 timeoutSeconds];
}

id objc_msgSend_timer(void *a1, const char *a2, ...)
{
  return _[a1 timer];
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return _[a1 timestamp];
}

id objc_msgSend_timestampGps(void *a1, const char *a2, ...)
{
  return _[a1 timestampGps];
}

id objc_msgSend_timestampOfLastBOMDailyLimitResetDate(void *a1, const char *a2, ...)
{
  return _[a1 timestampOfLastBOMDailyLimitResetDate];
}

id objc_msgSend_timestampOfLastBeepOnMoveScanDate(void *a1, const char *a2, ...)
{
  return _[a1 timestampOfLastBeepOnMoveScanDate];
}

id objc_msgSend_timoutBlock(void *a1, const char *a2, ...)
{
  return _[a1 timoutBlock];
}

id objc_msgSend_toCLEEDRequestType_(void *a1, const char *a2, ...)
{
  return [a1 toCLEEDRequestType:];
}

id objc_msgSend_toHex_(void *a1, const char *a2, ...)
{
  return [a1 toHex:];
}

id objc_msgSend_toNSDictionary(void *a1, const char *a2, ...)
{
  return _[a1 toNSDictionary];
}

id objc_msgSend_toggleIntervalTimer(void *a1, const char *a2, ...)
{
  return _[a1 toggleIntervalTimer];
}

id objc_msgSend_toggleLocationUpdates_inFitnessSession_inAirborneSession_emergencyEnablementAssertionActive_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "toggleLocationUpdates:inFitnessSession:inAirborneSession:emergencyEnablementAssertionActive:");
}

id objc_msgSend_toggleManagerBySettingFlag_toState_(void *a1, const char *a2, ...)
{
  return [a1 toggleManagerBySettingFlag:toState:];
}

id objc_msgSend_toggleProactiveVehicleDetection_(void *a1, const char *a2, ...)
{
  return [a1 toggleProactiveVehicleDetection:];
}

id objc_msgSend_toggleSession(void *a1, const char *a2, ...)
{
  return _[a1 toggleSession];
}

id objc_msgSend_toggleUpdates(void *a1, const char *a2, ...)
{
  return _[a1 toggleUpdates];
}

id objc_msgSend_toggleVehicleStateListener_(void *a1, const char *a2, ...)
{
  return [a1 toggleVehicleStateListener:];
}

id objc_msgSend_toggleVehicleStateProvider_(void *a1, const char *a2, ...)
{
  return [a1 toggleVehicleStateProvider:];
}

id objc_msgSend_token(void *a1, const char *a2, ...)
{
  return _[a1 token];
}

id objc_msgSend_topHeight(void *a1, const char *a2, ...)
{
  return _[a1 topHeight];
}

id objc_msgSend_topic(void *a1, const char *a2, ...)
{
  return _[a1 topic];
}

id objc_msgSend_totalActiveContexts(void *a1, const char *a2, ...)
{
  return _[a1 totalActiveContexts];
}

id objc_msgSend_totalAttributionCount(void *a1, const char *a2, ...)
{
  return _[a1 totalAttributionCount];
}

id objc_msgSend_totalConnectionCount(void *a1, const char *a2, ...)
{
  return _[a1 totalConnectionCount];
}

id objc_msgSend_totalCountIncludingAllSubArchives(void *a1, const char *a2, ...)
{
  return _[a1 totalCountIncludingAllSubArchives];
}

id objc_msgSend_totalDistance(void *a1, const char *a2, ...)
{
  return _[a1 totalDistance];
}

id objc_msgSend_totalDistanceFused(void *a1, const char *a2, ...)
{
  return _[a1 totalDistanceFused];
}

id objc_msgSend_totalDistanceOdometer(void *a1, const char *a2, ...)
{
  return _[a1 totalDistanceOdometer];
}

id objc_msgSend_totalDistanceStepCount(void *a1, const char *a2, ...)
{
  return _[a1 totalDistanceStepCount];
}

id objc_msgSend_totalDistanceStepCountMobility(void *a1, const char *a2, ...)
{
  return _[a1 totalDistanceStepCountMobility];
}

id objc_msgSend_totalDistinctVisitCount(void *a1, const char *a2, ...)
{
  return _[a1 totalDistinctVisitCount];
}

id objc_msgSend_totalEnergyBurned(void *a1, const char *a2, ...)
{
  return _[a1 totalEnergyBurned];
}

id objc_msgSend_totalExpected(void *a1, const char *a2, ...)
{
  return _[a1 totalExpected];
}

id objc_msgSend_totalInterVisitMetric(void *a1, const char *a2, ...)
{
  return _[a1 totalInterVisitMetric];
}

id objc_msgSend_totalInterval(void *a1, const char *a2, ...)
{
  return _[a1 totalInterval];
}

id objc_msgSend_totalObservationsCount(void *a1, const char *a2, ...)
{
  return _[a1 totalObservationsCount];
}

id objc_msgSend_totalSecondaryPointsUnderAllSubArchives(void *a1, const char *a2, ...)
{
  return _[a1 totalSecondaryPointsUnderAllSubArchives];
}

id objc_msgSend_totalStepCount(void *a1, const char *a2, ...)
{
  return _[a1 totalStepCount];
}

id objc_msgSend_totalVisitCount(void *a1, const char *a2, ...)
{
  return _[a1 totalVisitCount];
}

id objc_msgSend_totalWritten(void *a1, const char *a2, ...)
{
  return _[a1 totalWritten];
}

id objc_msgSend_touristApp(void *a1, const char *a2, ...)
{
  return _[a1 touristApp];
}

id objc_msgSend_traceEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 traceEndpoint];
}

id objc_msgSend_track(void *a1, const char *a2, ...)
{
  return _[a1 track];
}

id objc_msgSend_trackId(void *a1, const char *a2, ...)
{
  return _[a1 trackId];
}

id objc_msgSend_trackedTransportType(void *a1, const char *a2, ...)
{
  return _[a1 trackedTransportType];
}

id objc_msgSend_trackingState(void *a1, const char *a2, ...)
{
  return _[a1 trackingState];
}

id objc_msgSend_transform(void *a1, const char *a2, ...)
{
  return _[a1 transform];
}

id objc_msgSend_transientAwareRegistrationResult(void *a1, const char *a2, ...)
{
  return _[a1 transientAwareRegistrationResult];
}

id objc_msgSend_transitionToState_event_task_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "transitionToState:event:task:");
}

id objc_msgSend_transitionWithEvent_(void *a1, const char *a2, ...)
{
  return [a1 transitionWithEvent:];
}

id objc_msgSend_translateCompanionSyncAuthObjectsInPlace_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "translateCompanionSyncAuthObjectsInPlace:");
}

id objc_msgSend_translatedKeyForSimulator_(void *a1, const char *a2, ...)
{
  return [a1 translatedKeyForSimulator:];
}

id objc_msgSend_translatedOpcode(void *a1, const char *a2, ...)
{
  return _[a1 translatedOpcode];
}

id objc_msgSend_transportType(void *a1, const char *a2, ...)
{
  return _[a1 transportType];
}

id objc_msgSend_travelDirection(void *a1, const char *a2, ...)
{
  return _[a1 travelDirection];
}

id objc_msgSend_travelTime(void *a1, const char *a2, ...)
{
  return _[a1 travelTime];
}

id objc_msgSend_tremorDetectionService(void *a1, const char *a2, ...)
{
  return _[a1 tremorDetectionService];
}

id objc_msgSend_trigger(void *a1, const char *a2, ...)
{
  return _[a1 trigger];
}

id objc_msgSend_trigger_metaData_start_end_response_resolution_isNearFall_isFallSubmissionAllowed_isNearFallSubmissionAllowed_(void *a1, const char *a2, ...)
{
  return [a1 trigger:x0 metaData:x1 start:x2 end:x3 response:x4 resolution:x5 isNearFall:x6 isFallSubmissionAllowed:x7 isNearFallSubmissionAllowed:x8];
}

id objc_msgSend_triggerAnalyticsCollect(void *a1, const char *a2, ...)
{
  return _[a1 triggerAnalyticsCollect];
}

id objc_msgSend_triggerClearAppClipAuthorizationIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 triggerClearAppClipAuthorizationIfNecessary];
}

id objc_msgSend_triggerKappaWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 triggerKappaWithCompletion:];
}

id objc_msgSend_triggerMetricHeartbeatNotification(void *a1, const char *a2, ...)
{
  return _[a1 triggerMetricHeartbeatNotification];
}

id objc_msgSend_triggerRetrocomputeWithReply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "triggerRetrocomputeWithReply:");
}

id objc_msgSend_triggerTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 triggerTimestamp];
}

id objc_msgSend_triggerType(void *a1, const char *a2, ...)
{
  return _[a1 triggerType];
}

id objc_msgSend_triggerWorkoutLocationEventForTesting_withReply_(void *a1, const char *a2, ...)
{
  return [a1 triggerWorkoutLocationEventForTesting:x0 withReply:x1];
}

id objc_msgSend_tripId(void *a1, const char *a2, ...)
{
  return _[a1 tripId];
}

id objc_msgSend_tripLocations(void *a1, const char *a2, ...)
{
  return _[a1 tripLocations];
}

id objc_msgSend_tripSegmentID(void *a1, const char *a2, ...)
{
  return _[a1 tripSegmentID];
}

id objc_msgSend_tripTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 tripTimestamp];
}

id objc_msgSend_tropicalSavannaBranchCount(void *a1, const char *a2, ...)
{
  return _[a1 tropicalSavannaBranchCount];
}

id objc_msgSend_tropicalSavannaProximity(void *a1, const char *a2, ...)
{
  return _[a1 tropicalSavannaProximity];
}

id objc_msgSend_tropicalSavannaTreeId(void *a1, const char *a2, ...)
{
  return _[a1 tropicalSavannaTreeId];
}

id objc_msgSend_truncateAtOffset_error_(void *a1, const char *a2, ...)
{
  return [a1 truncateAtOffset:error:];
}

id objc_msgSend_truncatedReason(void *a1, const char *a2, ...)
{
  return _[a1 truncatedReason];
}

id objc_msgSend_trustedTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 trustedTimestamp];
}

id objc_msgSend_txPower(void *a1, const char *a2, ...)
{
  return _[a1 txPower];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_typeSource(void *a1, const char *a2, ...)
{
  return _[a1 typeSource];
}

id objc_msgSend_uarfcn(void *a1, const char *a2, ...)
{
  return _[a1 uarfcn];
}

id objc_msgSend_uarpAssetLocationType(void *a1, const char *a2, ...)
{
  return _[a1 uarpAssetLocationType];
}

id objc_msgSend_uarpPacketCaptureEnabled(void *a1, const char *a2, ...)
{
  return _[a1 uarpPacketCaptureEnabled];
}

id objc_msgSend_ulCenterFrequency(void *a1, const char *a2, ...)
{
  return _[a1 ulCenterFrequency];
}

id objc_msgSend_unacknowledgedMessages(void *a1, const char *a2, ...)
{
  return _[a1 unacknowledgedMessages];
}

id objc_msgSend_unarchivedArrayOfObjectsOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return [a1 unarchivedArrayOfObjectsOfClass:fromData:error:];
}

id objc_msgSend_unarchivedObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return [a1 unarchivedObjectOfClass:x0 fromData:x1 error:x2];
}

id objc_msgSend_unarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "unarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend_unauthorizedTrackingTypeWithCompletion_completion_(void *a1, const char *a2, ...)
{
  return [a1 unauthorizedTrackingTypeWithCompletion:completion:];
}

id objc_msgSend_uncertainty(void *a1, const char *a2, ...)
{
  return _[a1 uncertainty];
}

id objc_msgSend_uncertaintyInMeters(void *a1, const char *a2, ...)
{
  return _[a1 uncertaintyInMeters];
}

id objc_msgSend_underlyingDictionary(void *a1, const char *a2, ...)
{
  return _[a1 underlyingDictionary];
}

id objc_msgSend_underlyingQueue(void *a1, const char *a2, ...)
{
  return _[a1 underlyingQueue];
}

id objc_msgSend_uninstallCurrentFence(void *a1, const char *a2, ...)
{
  return _[a1 uninstallCurrentFence];
}

id objc_msgSend_unionSet_(void *a1, const char *a2, ...)
{
  return [a1 unionSet:];
}

id objc_msgSend_uniqueIDOverride(void *a1, const char *a2, ...)
{
  return _[a1 uniqueIDOverride];
}

id objc_msgSend_unitFromString_(void *a1, const char *a2, ...)
{
  return [a1 unitFromString:];
}

id objc_msgSend_universe(void *a1, const char *a2, ...)
{
  return _[a1 universe];
}

id objc_msgSend_unixTime(void *a1, const char *a2, ...)
{
  return _[a1 unixTime];
}

id objc_msgSend_unknown(void *a1, const char *a2, ...)
{
  return _[a1 unknown];
}

id objc_msgSend_unknownBeaconsForUUIDs_completion_(void *a1, const char *a2, ...)
{
  return [a1 unknownBeaconsForUUIDs:x0 completion:x1];
}

id objc_msgSend_unload(void *a1, const char *a2, ...)
{
  return _[a1 unload];
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return _[a1 unlock];
}

id objc_msgSend_unownedBeacon(void *a1, const char *a2, ...)
{
  return _[a1 unownedBeacon];
}

id objc_msgSend_unpairCommand(void *a1, const char *a2, ...)
{
  return _[a1 unpairCommand];
}

id objc_msgSend_unpairHawkeyeTask(void *a1, const char *a2, ...)
{
  return _[a1 unpairHawkeyeTask];
}

id objc_msgSend_unpairTask(void *a1, const char *a2, ...)
{
  return _[a1 unpairTask];
}

id objc_msgSend_unregister_forNotification_(void *a1, const char *a2, ...)
{
  return [a1 unregister:forNotification:];
}

id objc_msgSend_unregisterAlarm_withReply_(void *a1, const char *a2, ...)
{
  return [a1 unregisterAlarm:withReply:];
}

id objc_msgSend_unregisterAllDeviceChanges(void *a1, const char *a2, ...)
{
  return _[a1 unregisterAllDeviceChanges];
}

id objc_msgSend_unregisterAllLocationNotifications(void *a1, const char *a2, ...)
{
  return _[a1 unregisterAllLocationNotifications];
}

id objc_msgSend_unregisterAllZoneChanges(void *a1, const char *a2, ...)
{
  return _[a1 unregisterAllZoneChanges];
}

id objc_msgSend_unregisterClient(void *a1, const char *a2, ...)
{
  return _[a1 unregisterClient];
}

id objc_msgSend_unregisterClient_forElevationThreshold_(void *a1, const char *a2, ...)
{
  return [a1 unregisterClient:forElevationThreshold:];
}

id objc_msgSend_unregisterClient_forNotification_(void *a1, const char *a2, ...)
{
  return [a1 unregisterClient:forNotification:];
}

id objc_msgSend_unregisterClient_systemClient_(void *a1, const char *a2, ...)
{
  return [a1 unregisterClient:systemClient:];
}

id objc_msgSend_unregisterDevice(void *a1, const char *a2, ...)
{
  return _[a1 unregisterDevice];
}

id objc_msgSend_unregisterForAlgorithmSources(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForAlgorithmSources];
}

id objc_msgSend_unregisterForAppMonitorNotification(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForAppMonitorNotification];
}

id objc_msgSend_unregisterForAvengerScanner(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForAvengerScanner];
}

id objc_msgSend_unregisterForBluetoothServiceNotification(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForBluetoothServiceNotification];
}

id objc_msgSend_unregisterForClientManagerNotification(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForClientManagerNotification];
}

id objc_msgSend_unregisterForCompanionConnectionUpdate(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForCompanionConnectionUpdate];
}

id objc_msgSend_unregisterForCompanionNotification(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForCompanionNotification];
}

id objc_msgSend_unregisterForCyclingWorkoutDistanceUpdates_(void *a1, const char *a2, ...)
{
  return [a1 unregisterForCyclingWorkoutDistanceUpdates:];
}

id objc_msgSend_unregisterForDaemonStatusNotification(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForDaemonStatusNotification];
}

id objc_msgSend_unregisterForData_(void *a1, const char *a2, ...)
{
  return [a1 unregisterForData:];
}

id objc_msgSend_unregisterForDataProtectionManagerNotification(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForDataProtectionManagerNotification];
}

id objc_msgSend_unregisterForDataProtectionNotification(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForDataProtectionNotification];
}

id objc_msgSend_unregisterForDeviceMatching_(void *a1, const char *a2, ...)
{
  return [a1 unregisterForDeviceMatching:];
}

id objc_msgSend_unregisterForDurianConnectionStateChange(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForDurianConnectionStateChange];
}

id objc_msgSend_unregisterForDurianService(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForDurianService];
}

id objc_msgSend_unregisterForGeoCountryCodeConfigurationNotification(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForGeoCountryCodeConfigurationNotification];
}

id objc_msgSend_unregisterForGeoNavListener(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForGeoNavListener];
}

id objc_msgSend_unregisterForGnssNotification(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForGnssNotification];
}

id objc_msgSend_unregisterForHKNanoLifestylePrivacyPreferencesChangedNotification(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForHKNanoLifestylePrivacyPreferencesChangedNotification];
}

id objc_msgSend_unregisterForLocalNotifications(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForLocalNotifications];
}

id objc_msgSend_unregisterForLocationNotification(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForLocationNotification];
}

id objc_msgSend_unregisterForMiloPredictionEventUpdates_(void *a1, const char *a2, ...)
{
  return [a1 unregisterForMiloPredictionEventUpdates:];
}

id objc_msgSend_unregisterForMiloServiceEventUpdatesForClient_withToken_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "unregisterForMiloServiceEventUpdatesForClient:withToken:");
}

id objc_msgSend_unregisterForMobileAssetNotification(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForMobileAssetNotification];
}

id objc_msgSend_unregisterForMobilityBoutMetrics_(void *a1, const char *a2, ...)
{
  return [a1 unregisterForMobilityBoutMetrics:];
}

id objc_msgSend_unregisterForMotionNotification(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForMotionNotification];
}

id objc_msgSend_unregisterForMotionStateMediatorNotification(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForMotionStateMediatorNotification];
}

id objc_msgSend_unregisterForNotifications(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForNotifications];
}

id objc_msgSend_unregisterForOTASettingsNotification(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForOTASettingsNotification];
}

id objc_msgSend_unregisterForRetrocomputeStatusUpdates_(void *a1, const char *a2, ...)
{
  return [a1 unregisterForRetrocomputeStatusUpdates:];
}

id objc_msgSend_unregisterForRoutineMonitor(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForRoutineMonitor];
}

id objc_msgSend_unregisterForSignalEnvironmentNotification(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForSignalEnvironmentNotification];
}

id objc_msgSend_unregisterForTelephonyNotification(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForTelephonyNotification];
}

id objc_msgSend_unregisterForTrackRunEnablementNotifications(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForTrackRunEnablementNotifications];
}

id objc_msgSend_unregisterForUpdates_(void *a1, const char *a2, ...)
{
  return [a1 unregisterForUpdates:];
}

id objc_msgSend_unregisterForUsageMetricsUpdates_(void *a1, const char *a2, ...)
{
  return [a1 unregisterForUsageMetricsUpdates:];
}

id objc_msgSend_unregisterForVehicleStateNotification(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForVehicleStateNotification];
}

id objc_msgSend_unregisterForWeatherUpdates_(void *a1, const char *a2, ...)
{
  return [a1 unregisterForWeatherUpdates:];
}

id objc_msgSend_unregisterForWifiServiceNotification(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForWifiServiceNotification];
}

id objc_msgSend_unregisterForWorkoutSessionUpdates_(void *a1, const char *a2, ...)
{
  return [a1 unregisterForWorkoutSessionUpdates:];
}

id objc_msgSend_unregisterForZoneChanges_(void *a1, const char *a2, ...)
{
  return [a1 unregisterForZoneChanges:];
}

id objc_msgSend_unregisterNotificationForKeys_(void *a1, const char *a2, ...)
{
  return [a1 unregisterNotificationForKeys:];
}

id objc_msgSend_unregisterXPCActivity_(void *a1, const char *a2, ...)
{
  return [a1 unregisterXPCActivity:];
}

id objc_msgSend_unsignedCharValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedCharValue];
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongLongValue];
}

id objc_msgSend_unsignedLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongValue];
}

id objc_msgSend_unsignedShortValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedShortValue];
}

id objc_msgSend_updateActiveDeviceId_(void *a1, const char *a2, ...)
{
  return [a1 updateActiveDeviceId:];
}

id objc_msgSend_updateActivePairedDeviceInfo(void *a1, const char *a2, ...)
{
  return _[a1 updateActivePairedDeviceInfo];
}

id objc_msgSend_updateAdjacentBin_withAlpha_valueOut_nativeBin_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "updateAdjacentBin:withAlpha:valueOut:nativeBin:");
}

id objc_msgSend_updateAirborneActivity_(void *a1, const char *a2, ...)
{
  return [a1 updateAirborneActivity:];
}

id objc_msgSend_updateAnalyticsWithAltitude_(void *a1, const char *a2, ...)
{
  return [a1 updateAnalyticsWithAltitude:];
}

id objc_msgSend_updateAuthorizationContext_(void *a1, const char *a2, ...)
{
  return [a1 updateAuthorizationContext:];
}

id objc_msgSend_updateAvailabilityStatus(void *a1, const char *a2, ...)
{
  return _[a1 updateAvailabilityStatus];
}

id objc_msgSend_updateBatteryStatus_beaconUUID_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "updateBatteryStatus:beaconUUID:completion:");
}

id objc_msgSend_updateBatteryStatus_forDevice_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "updateBatteryStatus:forDevice:");
}

id objc_msgSend_updateBeaconObservations_completion_(void *a1, const char *a2, ...)
{
  return [a1 updateBeaconObservations:completion:];
}

id objc_msgSend_updateBeaconUUID_firmwareUpdateState_systemVersion_error_completion_(void *a1, const char *a2, ...)
{
  return [a1 updateBeaconUUID:x0 firmwareUpdateState:x1 systemVersion:x2 error:x3 completion:x4];
}

id objc_msgSend_updateBiasUncertaintyWithAbsSigElevation_withCompanion_(void *a1, const char *a2, ...)
{
  return [a1 updateBiasUncertaintyWithAbsSigElevation:withCompanion:];
}

id objc_msgSend_updateBiasUncertaintyWithPressure_andTime_andLat_andLon_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "updateBiasUncertaintyWithPressure:andTime:andLat:andLon:");
}

id objc_msgSend_updateBinsWithTrack_(void *a1, const char *a2, ...)
{
  return [a1 updateBinsWithTrack:];
}

id objc_msgSend_updateBinsWithValueOut_valueIn_alpha_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "updateBinsWithValueOut:valueIn:alpha:")];
}

id objc_msgSend_updateBypassParameters(void *a1, const char *a2, ...)
{
  return _[a1 updateBypassParameters];
}

id objc_msgSend_updateCalibrationBins_(void *a1, const char *a2, ...)
{
  return [a1 updateCalibrationBins:];
}

id objc_msgSend_updateCallbackHandler_(void *a1, const char *a2, ...)
{
  return [a1 updateCallbackHandler:];
}

id objc_msgSend_updateCameraRunning_(void *a1, const char *a2, ...)
{
  return [a1 updateCameraRunning:];
}

id objc_msgSend_updateClientEvent_(void *a1, const char *a2, ...)
{
  return [a1 updateClientEvent:];
}

id objc_msgSend_updateClientEvent_forIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 updateClientEvent:forIdentifier:];
}

id objc_msgSend_updateClientsSubmersionMeasurement_(void *a1, const char *a2, ...)
{
  return [a1 updateClientsSubmersionMeasurement:];
}

id objc_msgSend_updateClientsSubmersionState_(void *a1, const char *a2, ...)
{
  return [a1 updateClientsSubmersionState:];
}

id objc_msgSend_updateClientsWithDictionary_(void *a1, const char *a2, ...)
{
  return [a1 updateClientsWithDictionary:];
}

id objc_msgSend_updateClientsWithHandler_(void *a1, const char *a2, ...)
{
  return [a1 updateClientsWithHandler:];
}

id objc_msgSend_updateCoexMetricDict_forCASubmission_(void *a1, const char *a2, ...)
{
  return [a1 updateCoexMetricDict:forCASubmission:];
}

id objc_msgSend_updateCompanionConnected_(void *a1, const char *a2, ...)
{
  return [a1 updateCompanionConnected:];
}

id objc_msgSend_updateComputeDemFlatnessMetric_(void *a1, const char *a2, ...)
{
  return [a1 updateComputeDemFlatnessMetric:];
}

id objc_msgSend_updateConfidence_(void *a1, const char *a2, ...)
{
  return [a1 updateConfidence:];
}

id objc_msgSend_updateContext_(void *a1, const char *a2, ...)
{
  return [a1 updateContext:];
}

id objc_msgSend_updateCount(void *a1, const char *a2, ...)
{
  return _[a1 updateCount];
}

id objc_msgSend_updateCurrentLocation_(void *a1, const char *a2, ...)
{
  return [a1 updateCurrentLocation:];
}

id objc_msgSend_updateCurrentState_previousState_location_locationReceivedTime_(void *a1, const char *a2, ...)
{
  return [a1 updateCurrentState:previousState:location:locationReceivedTime:];
}

id objc_msgSend_updateCyclingWorkout_(void *a1, const char *a2, ...)
{
  return [a1 updateCyclingWorkout:];
}

id objc_msgSend_updateDaemonEvent_(void *a1, const char *a2, ...)
{
  return [a1 updateDaemonEvent:];
}

id objc_msgSend_updateDaemonEvent_forIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 updateDaemonEvent:forIdentifier:];
}

id objc_msgSend_updateDesiredFireTimeToHour_minute_second_(void *a1, const char *a2, ...)
{
  return [a1 updateDesiredFireTimeToHour:minute:second:];
}

id objc_msgSend_updateDeviceConnectionState_state_(void *a1, const char *a2, ...)
{
  return [a1 updateDeviceConnectionState:state];
}

id objc_msgSend_updateDiagnosticMask_(void *a1, const char *a2, ...)
{
  return [a1 updateDiagnosticMask:];
}

id objc_msgSend_updateDurationInformationForCA_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "updateDurationInformationForCA:");
}

id objc_msgSend_updateElevationBiasBetweenStartTime_andEndTime_andNextTrackStartTime_(void *a1, const char *a2, ...)
{
  return [a1 updateElevationBiasBetweenStartTime:andEndTime:andNextTrackStartTime:];
}

id objc_msgSend_updateElevationBiasUnderDEMOrLatchedHighBetweenStartTime_andEndTime_andNextTrackStartTime_(void *a1, const char *a2, ...)
{
  return [a1 updateElevationBiasUnderDEMOrLatchedHighBetweenStartTime:andEndTime:andNextTrackStartTime:];
}

id objc_msgSend_updateEndpoint_withKey_(void *a1, const char *a2, ...)
{
  return [a1 updateEndpoint:withKey:];
}

id objc_msgSend_updateEntryDistanceAndPace_(void *a1, const char *a2, ...)
{
  return [a1 updateEntryDistanceAndPace:];
}

id objc_msgSend_updateEstimatedLocationMetrics_currentLocation_estimatedLocation_(void *a1, const char *a2, ...)
{
  return [a1 updateEstimatedLocationMetrics:x0 currentLocation:x1 estimatedLocation:x2];
}

id objc_msgSend_updateEstimatedWeatherWithCumulativeAscendingDelta_andDescendingDelta_andIosTimestamp_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "updateEstimatedWeatherWithCumulativeAscendingDelta:andDescendingDelta:andIosTimestamp:");
}

id objc_msgSend_updateEvent_(void *a1, const char *a2, ...)
{
  return [a1 updateEvent:];
}

id objc_msgSend_updateEvent_bounce_(void *a1, const char *a2, ...)
{
  return [a1 updateEvent_bounce:];
}

id objc_msgSend_updateGpsLocationBuffer_gpsSource_(void *a1, const char *a2, ...)
{
  return [a1 updateGpsLocationBuffer:gpsSource:];
}

id objc_msgSend_updateGpsOdometerBuffer_(void *a1, const char *a2, ...)
{
  return [a1 updateGpsOdometerBuffer:];
}

id objc_msgSend_updateGradient_(void *a1, const char *a2, ...)
{
  return [a1 updateGradient:];
}

id objc_msgSend_updateHandler(void *a1, const char *a2, ...)
{
  return _[a1 updateHandler];
}

id objc_msgSend_updateHistoricalFenceStateWithNotificationData_(void *a1, const char *a2, ...)
{
  return [a1 updateHistoricalFenceStateWithNotificationData:];
}

id objc_msgSend_updateHistoricalMslpArray_(void *a1, const char *a2, ...)
{
  return [a1 updateHistoricalMslpArray:];
}

id objc_msgSend_updateHistoricalMslpArray_from_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "updateHistoricalMslpArray:from:");
}

id objc_msgSend_updateICloudManagedAppleID(void *a1, const char *a2, ...)
{
  return _[a1 updateICloudManagedAppleID];
}

id objc_msgSend_updateIDSStatus(void *a1, const char *a2, ...)
{
  return _[a1 updateIDSStatus];
}

id objc_msgSend_updateIDSStatusAndNotify(void *a1, const char *a2, ...)
{
  return _[a1 updateIDSStatusAndNotify];
}

id objc_msgSend_updateITunesManagedAppleID(void *a1, const char *a2, ...)
{
  return _[a1 updateITunesManagedAppleID];
}

id objc_msgSend_updateInitializedThresholdsWithAltitude_(void *a1, const char *a2, ...)
{
  return [a1 updateInitializedThresholdsWithAltitude:];
}

id objc_msgSend_updateInputSystemFields_inputRecord_(void *a1, const char *a2, ...)
{
  return [a1 updateInputSystemFields:inputRecord];
}

id objc_msgSend_updateInstalledEducationProfile(void *a1, const char *a2, ...)
{
  return _[a1 updateInstalledEducationProfile];
}

id objc_msgSend_updateLastSampleInMeanSeaLevelPressureArray(void *a1, const char *a2, ...)
{
  return _[a1 updateLastSampleInMeanSeaLevelPressureArray];
}

id objc_msgSend_updateLocationAuthorization(void *a1, const char *a2, ...)
{
  return _[a1 updateLocationAuthorization];
}

id objc_msgSend_updateLocationDictionaryCachedCapabilities(void *a1, const char *a2, ...)
{
  return _[a1 updateLocationDictionaryCachedCapabilities];
}

id objc_msgSend_updateLocationUnknown(void *a1, const char *a2, ...)
{
  return _[a1 updateLocationUnknown];
}

id objc_msgSend_updateLocationsOfInterestFetchTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 updateLocationsOfInterestFetchTimestamp];
}

id objc_msgSend_updateLoiInfo_(void *a1, const char *a2, ...)
{
  return [a1 updateLoiInfo:];
}

id objc_msgSend_updateMetadata(void *a1, const char *a2, ...)
{
  return _[a1 updateMetadata];
}

id objc_msgSend_updateMonitoringState_(void *a1, const char *a2, ...)
{
  return [a1 updateMonitoringState:];
}

id objc_msgSend_updateMotion_conf_(void *a1, const char *a2, ...)
{
  return [a1 updateMotion:conf:];
}

id objc_msgSend_updateNativeBin_withAlpha_valueOut_(void *a1, const char *a2, ...)
{
  return [a1 updateNativeBin:withAlpha:valueOut:];
}

id objc_msgSend_updateNearbyStatusWithCompanionLinkDevice_didConnect_(void *a1, const char *a2, ...)
{
  return [a1 updateNearbyStatusWithCompanionLinkDevice:didConnect:];
}

id objc_msgSend_updateNearbyStatusWithDevices_(void *a1, const char *a2, ...)
{
  return [a1 updateNearbyStatusWithDevices:];
}

id objc_msgSend_updateNextFireTime(void *a1, const char *a2, ...)
{
  return _[a1 updateNextFireTime];
}

id objc_msgSend_updateOutputSystemFields_outputRecord_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "updateOutputSystemFields:outputRecord:");
}

id objc_msgSend_updatePAL_(void *a1, const char *a2, ...)
{
  return [a1 updatePAL:];
}

id objc_msgSend_updatePedometerBuffer_(void *a1, const char *a2, ...)
{
  return [a1 updatePedometerBuffer:];
}

id objc_msgSend_updatePhoneWorkoutElevationSubscription_(void *a1, const char *a2, ...)
{
  return [a1 updatePhoneWorkoutElevationSubscription:];
}

id objc_msgSend_updatePillButtonChoiceForOutstandingPrompt_(void *a1, const char *a2, ...)
{
  return [a1 updatePillButtonChoiceForOutstandingPrompt:];
}

id objc_msgSend_updatePrefetchParameters_(void *a1, const char *a2, ...)
{
  return [a1 updatePrefetchParameters:];
}

id objc_msgSend_updatePressureUncertaintyWithPressure_andTime_andLat_andLon_(void *a1, const char *a2, ...)
{
  return [a1 updatePressureUncertaintyWithPressure:andTime:andLat:andLon:];
}

id objc_msgSend_updatePromptedLatitude_longitude_(void *a1, const char *a2, ...)
{
  return [a1 updatePromptedLatitude:longitude:];
}

id objc_msgSend_updateProperty_value_forAccessory_(void *a1, const char *a2, ...)
{
  return [a1 updateProperty:value:forAccessory:];
}

id objc_msgSend_updateQuickSwitchMode(void *a1, const char *a2, ...)
{
  return _[a1 updateQuickSwitchMode];
}

id objc_msgSend_updateRate(void *a1, const char *a2, ...)
{
  return _[a1 updateRate];
}

id objc_msgSend_updateRegulatoryDomainEstimates(void *a1, const char *a2, ...)
{
  return _[a1 updateRegulatoryDomainEstimates];
}

id objc_msgSend_updateRelatedModesTo_atTime_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "updateRelatedModesTo:atTime:");
}

id objc_msgSend_updateRelativePressureCalibration(void *a1, const char *a2, ...)
{
  return _[a1 updateRelativePressureCalibration];
}

id objc_msgSend_updateRequestWithMediaItemList_(void *a1, const char *a2, ...)
{
  return [a1 updateRequestWithMediaItemList:];
}

id objc_msgSend_updateRetrocomputeHistory_withResult_(void *a1, const char *a2, ...)
{
  return [a1 updateRetrocomputeHistory:withResult:];
}

id objc_msgSend_updateRetrocomputeHistoryPostProcessing_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "updateRetrocomputeHistoryPostProcessing:");
}

id objc_msgSend_updateRetrocomputeLastTimestampToHealthKit_(void *a1, const char *a2, ...)
{
  return [a1 updateRetrocomputeLastTimestampToHealthKit:];
}

id objc_msgSend_updateRetrocomputeStatus_unavailableReasons_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "updateRetrocomputeStatus:unavailableReasons:");
}

id objc_msgSend_updateRetrySyncInterval_(void *a1, const char *a2, ...)
{
  return [a1 updateRetrySyncInterval:];
}

id objc_msgSend_updateReunionSyncListsWithAuthSyncMessageKey_(void *a1, const char *a2, ...)
{
  return [a1 updateReunionSyncListsWithAuthSyncMessageKey:];
}

id objc_msgSend_updateSensorRecorderSubscription(void *a1, const char *a2, ...)
{
  return _[a1 updateSensorRecorderSubscription];
}

id objc_msgSend_updateSession_(void *a1, const char *a2, ...)
{
  return [a1 updateSession:];
}

id objc_msgSend_updateStartTime(void *a1, const char *a2, ...)
{
  return _[a1 updateStartTime];
}

id objc_msgSend_updateStatsWithNVP_(void *a1, const char *a2, ...)
{
  return [a1 updateStatsWithNVP:];
}

id objc_msgSend_updateStatusBarLabel(void *a1, const char *a2, ...)
{
  return _[a1 updateStatusBarLabel];
}

id objc_msgSend_updateStrideLengthRun(void *a1, const char *a2, ...)
{
  return _[a1 updateStrideLengthRun];
}

id objc_msgSend_updateStrideLengthStepCadenceWalk(void *a1, const char *a2, ...)
{
  return _[a1 updateStrideLengthStepCadenceWalk];
}

id objc_msgSend_updateSubmersionStateFromAOPState_(void *a1, const char *a2, ...)
{
  return [a1 updateSubmersionStateFromAOPState:];
}

id objc_msgSend_updateSubmersionStateFromMeasurement_(void *a1, const char *a2, ...)
{
  return [a1 updateSubmersionStateFromMeasurement:];
}

id objc_msgSend_updateSupervised(void *a1, const char *a2, ...)
{
  return _[a1 updateSupervised];
}

id objc_msgSend_updateSurfaceCalWithSource_andPressureQueue_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "updateSurfaceCalWithSource:andPressureQueue:");
}

id objc_msgSend_updateSyncStoreState_(void *a1, const char *a2, ...)
{
  return [a1 updateSyncStoreState:];
}

id objc_msgSend_updateSyncStoreStateForVersionedKey_withUpdateReason_(void *a1, const char *a2, ...)
{
  return [a1 updateSyncStoreStateForVersionedKey:withUpdateReason:];
}

id objc_msgSend_updateSystemLoiType_isEntry_(void *a1, const char *a2, ...)
{
  return [a1 updateSystemLoiType:isEntry:];
}

id objc_msgSend_updateTAInfo_(void *a1, const char *a2, ...)
{
  return [a1 updateTAInfo:];
}

id objc_msgSend_updateTargetDemoDepth(void *a1, const char *a2, ...)
{
  return _[a1 updateTargetDemoDepth];
}

id objc_msgSend_updateTimeToInitialStateChangeForFence_previousStatus_timeOfStateChange_(void *a1, const char *a2, ...)
{
  return [a1 updateTimeToInitialStateChangeForFence:previousStatus:timeOfStateChange:];
}

id objc_msgSend_updateTimer(void *a1, const char *a2, ...)
{
  return _[a1 updateTimer];
}

id objc_msgSend_updateTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 updateTimestamp];
}

id objc_msgSend_updateToCurrentTime_(void *a1, const char *a2, ...)
{
  return [a1 updateToCurrentTime:];
}

id objc_msgSend_updateTunnelBridgeAssistance_(void *a1, const char *a2, ...)
{
  return [a1 updateTunnelBridgeAssistance:];
}

id objc_msgSend_updateUncertinatyAndSendCurrentEstimateMslpFrom_(void *a1, const char *a2, ...)
{
  return [a1 updateUncertinatyAndSendCurrentEstimateMslpFrom:];
}

id objc_msgSend_updateUserHeight_(void *a1, const char *a2, ...)
{
  return [a1 updateUserHeight:];
}

id objc_msgSend_updateVisitState_arrivalTime_departureTime_(void *a1, const char *a2, ...)
{
  return [a1 updateVisitState:arrivalTime:departureTime:];
}

id objc_msgSend_updateVolatileData_completion_(void *a1, const char *a2, ...)
{
  return [a1 updateVolatileData:completion:];
}

id objc_msgSend_updateWetState(void *a1, const char *a2, ...)
{
  return _[a1 updateWetState];
}

id objc_msgSend_updateWithAltitude_andAccuracy_upperBound_lowerBound_(void *a1, const char *a2, ...)
{
  return [a1 updateWithAltitude:andAccuracy:upperBound:lowerBound:];
}

id objc_msgSend_updateWithTDot_andTempMeasurement_(void *a1, const char *a2, ...)
{
  return [a1 updateWithTDot:andTempMeasurement:];
}

id objc_msgSend_updateWorkoutReminderMuteSetting_mute_(void *a1, const char *a2, ...)
{
  return [a1 updateWorkoutReminderMuteSetting:mute:];
}

id objc_msgSend_updateWorseMitigationsFrom_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "updateWorseMitigationsFrom:");
}

id objc_msgSend_updateWsbClient_(void *a1, const char *a2, ...)
{
  return [a1 updateWsbClient:];
}

id objc_msgSend_updateZoneMonitorLocation_(void *a1, const char *a2, ...)
{
  return [a1 updateZoneMonitorLocation:];
}

id objc_msgSend_updater(void *a1, const char *a2, ...)
{
  return _[a1 updater];
}

id objc_msgSend_updating(void *a1, const char *a2, ...)
{
  return _[a1 updating];
}

id objc_msgSend_updatingHK(void *a1, const char *a2, ...)
{
  return _[a1 updatingHK];
}

id objc_msgSend_updatingSurfacePressure(void *a1, const char *a2, ...)
{
  return _[a1 updatingSurfacePressure];
}

id objc_msgSend_uploadBeaconPayloadsIfAllowed(void *a1, const char *a2, ...)
{
  return _[a1 uploadBeaconPayloadsIfAllowed];
}

id objc_msgSend_uploadMigitation(void *a1, const char *a2, ...)
{
  return _[a1 uploadMigitation];
}

id objc_msgSend_uploadPayloadSize(void *a1, const char *a2, ...)
{
  return _[a1 uploadPayloadSize];
}

id objc_msgSend_uploadTaskWithRequest_fromData_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 uploadTaskWithRequest:x0 fromData:x1 completionHandler:x2];
}

id objc_msgSend_uploadTaskWithRequest_fromFile_(void *a1, const char *a2, ...)
{
  return [a1 uploadTaskWithRequest:x0 fromFile:x1];
}

id objc_msgSend_uploadURL(void *a1, const char *a2, ...)
{
  return _[a1 uploadURL];
}

id objc_msgSend_upperQuartile(void *a1, const char *a2, ...)
{
  return _[a1 upperQuartile];
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return _[a1 uppercaseString];
}

id objc_msgSend_useDefaultFirmwareAssetSourceForProductGroup_andProductNumber_forClient_(void *a1, const char *a2, ...)
{
  return [a1 useDefaultFirmwareAssetSourceForProductGroup:andProductNumber:forClient:];
}

id objc_msgSend_useLocalFirmwareAssetFromUrl_forProductGroup_forProductNumber_withSandboxExtension_forClient_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "useLocalFirmwareAssetFromUrl:forProductGroup:forProductNumber:withSandboxExtension:forClient:");
}

id objc_msgSend_userDataPreferred(void *a1, const char *a2, ...)
{
  return _[a1 userDataPreferred];
}

id objc_msgSend_userDefaultVoice(void *a1, const char *a2, ...)
{
  return _[a1 userDefaultVoice];
}

id objc_msgSend_userDismissedWorkoutAlert(void *a1, const char *a2, ...)
{
  return _[a1 userDismissedWorkoutAlert];
}

id objc_msgSend_userFocusComputedMode(void *a1, const char *a2, ...)
{
  return _[a1 userFocusComputedMode];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _[a1 userInfo];
}

id objc_msgSend_userMets(void *a1, const char *a2, ...)
{
  return _[a1 userMets];
}

id objc_msgSend_userMetsSource(void *a1, const char *a2, ...)
{
  return _[a1 userMetsSource];
}

id objc_msgSend_userName(void *a1, const char *a2, ...)
{
  return _[a1 userName];
}

id objc_msgSend_userStatsData(void *a1, const char *a2, ...)
{
  return _[a1 userStatsData];
}

id objc_msgSend_userTask(void *a1, const char *a2, ...)
{
  return _[a1 userTask];
}

id objc_msgSend_userType(void *a1, const char *a2, ...)
{
  return _[a1 userType];
}

id objc_msgSend_userTypeSource(void *a1, const char *a2, ...)
{
  return _[a1 userTypeSource];
}

id objc_msgSend_userlessClientKeyPath(void *a1, const char *a2, ...)
{
  return _[a1 userlessClientKeyPath];
}

id objc_msgSend_utAccelCount(void *a1, const char *a2, ...)
{
  return _[a1 utAccelCount];
}

id objc_msgSend_utLongSoundCount(void *a1, const char *a2, ...)
{
  return _[a1 utLongSoundCount];
}

id objc_msgSend_utShortSoundCount(void *a1, const char *a2, ...)
{
  return _[a1 utShortSoundCount];
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return _[a1 uuid];
}

id objc_msgSend_valid(void *a1, const char *a2, ...)
{
  return _[a1 valid];
}

id objc_msgSend_validMUID(void *a1, const char *a2, ...)
{
  return _[a1 validMUID];
}

id objc_msgSend_validateAccount(void *a1, const char *a2, ...)
{
  return _[a1 validateAccount];
}

id objc_msgSend_validateBodyMetrics(void *a1, const char *a2, ...)
{
  return _[a1 validateBodyMetrics];
}

id objc_msgSend_validateClientMonitoringRecordsByIdenitifier_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "validateClientMonitoringRecordsByIdenitifier:");
}

id objc_msgSend_validateRemoteDeviceForStreaming_(void *a1, const char *a2, ...)
{
  return [a1 validateRemoteDeviceForStreaming:];
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _[a1 value];
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return [a1 valueForEntitlement:];
}

id objc_msgSend_valueForHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return [a1 valueForHTTPHeaderField:];
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return [a1 valueForKey:];
}

id objc_msgSend_valueForKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 valueForKeyPath:];
}

id objc_msgSend_valueForProperty_(void *a1, const char *a2, ...)
{
  return [a1 valueForProperty:];
}

id objc_msgSend_valueOut(void *a1, const char *a2, ...)
{
  return _[a1 valueOut];
}

id objc_msgSend_valueOutForValueIn_(void *a1, const char *a2, ...)
{
  return [a1 valueOutForValueIn:];
}

id objc_msgSend_vanBurenVersion(void *a1, const char *a2, ...)
{
  return _[a1 vanBurenVersion];
}

id objc_msgSend_variance(void *a1, const char *a2, ...)
{
  return _[a1 variance];
}

id objc_msgSend_vectorClocks(void *a1, const char *a2, ...)
{
  return _[a1 vectorClocks];
}

id objc_msgSend_vectorClocksAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 vectorClocksAtIndex:];
}

id objc_msgSend_vectorClocksCount(void *a1, const char *a2, ...)
{
  return _[a1 vectorClocksCount];
}

id objc_msgSend_vehicleBluetoothAddress(void *a1, const char *a2, ...)
{
  return _[a1 vehicleBluetoothAddress];
}

id objc_msgSend_vehicleModelName(void *a1, const char *a2, ...)
{
  return _[a1 vehicleModelName];
}

id objc_msgSend_vehicleName(void *a1, const char *a2, ...)
{
  return _[a1 vehicleName];
}

id objc_msgSend_vehicularHints(void *a1, const char *a2, ...)
{
  return _[a1 vehicularHints];
}

id objc_msgSend_vehicularState(void *a1, const char *a2, ...)
{
  return _[a1 vehicularState];
}

id objc_msgSend_vehicularStateHint(void *a1, const char *a2, ...)
{
  return _[a1 vehicularStateHint];
}

id objc_msgSend_vendor(void *a1, const char *a2, ...)
{
  return _[a1 vendor];
}

id objc_msgSend_vendorId(void *a1, const char *a2, ...)
{
  return _[a1 vendorId];
}

id objc_msgSend_venueGroupDistance(void *a1, const char *a2, ...)
{
  return _[a1 venueGroupDistance];
}

id objc_msgSend_version(void *a1, const char *a2, ...)
{
  return _[a1 version];
}

id objc_msgSend_versionIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 versionIdentifiers];
}

id objc_msgSend_vertexs(void *a1, const char *a2, ...)
{
  return _[a1 vertexs];
}

id objc_msgSend_verticalAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 verticalAccuracy];
}

id objc_msgSend_verticalUncertainty(void *a1, const char *a2, ...)
{
  return _[a1 verticalUncertainty];
}

id objc_msgSend_vioEstimation(void *a1, const char *a2, ...)
{
  return _[a1 vioEstimation];
}

id objc_msgSend_visionNotificationProxy(void *a1, const char *a2, ...)
{
  return _[a1 visionNotificationProxy];
}

id objc_msgSend_visitClients(void *a1, const char *a2, ...)
{
  return _[a1 visitClients];
}

id objc_msgSend_visitDetectionMetrics(void *a1, const char *a2, ...)
{
  return _[a1 visitDetectionMetrics];
}

id objc_msgSend_visitEntryDelay(void *a1, const char *a2, ...)
{
  return _[a1 visitEntryDelay];
}

id objc_msgSend_visitEvent_withFamiliarityIndex_(void *a1, const char *a2, ...)
{
  return [a1 visitEvent:withFamiliarityIndex:];
}

id objc_msgSend_visitExitDelay(void *a1, const char *a2, ...)
{
  return _[a1 visitExitDelay];
}

id objc_msgSend_visits(void *a1, const char *a2, ...)
{
  return _[a1 visits];
}

id objc_msgSend_vlLocalizationResult(void *a1, const char *a2, ...)
{
  return _[a1 vlLocalizationResult];
}

id objc_msgSend_vo2MaxModelSource(void *a1, const char *a2, ...)
{
  return _[a1 vo2MaxModelSource];
}

id objc_msgSend_vo2Mean(void *a1, const char *a2, ...)
{
  return _[a1 vo2Mean];
}

id objc_msgSend_vo2Variance(void *a1, const char *a2, ...)
{
  return _[a1 vo2Variance];
}

id objc_msgSend_wakeOnWirelessEnabled(void *a1, const char *a2, ...)
{
  return _[a1 wakeOnWirelessEnabled];
}

id objc_msgSend_wakeUpLaunchdManagedClient_(void *a1, const char *a2, ...)
{
  return [a1 wakeUpLaunchdManagedClient:];
}

id objc_msgSend_walkBinCount(void *a1, const char *a2, ...)
{
  return _[a1 walkBinCount];
}

id objc_msgSend_walkableSide(void *a1, const char *a2, ...)
{
  return _[a1 walkableSide];
}

id objc_msgSend_walking(void *a1, const char *a2, ...)
{
  return _[a1 walking];
}

id objc_msgSend_walkingSpeed(void *a1, const char *a2, ...)
{
  return _[a1 walkingSpeed];
}

id objc_msgSend_wasCancelled(void *a1, const char *a2, ...)
{
  return _[a1 wasCancelled];
}

id objc_msgSend_watchMigrationDidEnd(void *a1, const char *a2, ...)
{
  return _[a1 watchMigrationDidEnd];
}

id objc_msgSend_watchMigrationDidStart(void *a1, const char *a2, ...)
{
  return _[a1 watchMigrationDidStart];
}

id objc_msgSend_watchNeedsDeltaSync_(void *a1, const char *a2, ...)
{
  return [a1 watchNeedsDeltaSync:];
}

id objc_msgSend_watchNeedsFullSync_(void *a1, const char *a2, ...)
{
  return [a1 watchNeedsFullSync:];
}

id objc_msgSend_watchProductVersion(void *a1, const char *a2, ...)
{
  return _[a1 watchProductVersion];
}

id objc_msgSend_waterTempEst(void *a1, const char *a2, ...)
{
  return _[a1 waterTempEst];
}

id objc_msgSend_waterTempUncertainty(void *a1, const char *a2, ...)
{
  return _[a1 waterTempUncertainty];
}

id objc_msgSend_wattUnit(void *a1, const char *a2, ...)
{
  return _[a1 wattUnit];
}

id objc_msgSend_weakToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _[a1 weakToStrongObjectsMapTable];
}

id objc_msgSend_weatherEstimateInMeter(void *a1, const char *a2, ...)
{
  return _[a1 weatherEstimateInMeter];
}

id objc_msgSend_weatherPressure(void *a1, const char *a2, ...)
{
  return _[a1 weatherPressure];
}

id objc_msgSend_website(void *a1, const char *a2, ...)
{
  return _[a1 website];
}

id objc_msgSend_weight(void *a1, const char *a2, ...)
{
  return _[a1 weight];
}

id objc_msgSend_weightModifiedDate(void *a1, const char *a2, ...)
{
  return _[a1 weightModifiedDate];
}

id objc_msgSend_westLng(void *a1, const char *a2, ...)
{
  return _[a1 westLng];
}

id objc_msgSend_wetStateUpdated_(void *a1, const char *a2, ...)
{
  return [a1 wetStateUpdated:];
}

id objc_msgSend_whitespaceAndNewlineCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 whitespaceAndNewlineCharacterSet];
}

id objc_msgSend_whitespaceCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 whitespaceCharacterSet];
}

id objc_msgSend_width(void *a1, const char *a2, ...)
{
  return _[a1 width];
}

id objc_msgSend_wifi2GHzCriticalState(void *a1, const char *a2, ...)
{
  return _[a1 wifi2GHzCriticalState];
}

id objc_msgSend_wifiAssociated(void *a1, const char *a2, ...)
{
  return _[a1 wifiAssociated];
}

id objc_msgSend_wifiAvailable(void *a1, const char *a2, ...)
{
  return _[a1 wifiAvailable];
}

id objc_msgSend_wifiBands(void *a1, const char *a2, ...)
{
  return _[a1 wifiBands];
}

id objc_msgSend_wifiBandsAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 wifiBandsAtIndex:];
}

id objc_msgSend_wifiBandsCount(void *a1, const char *a2, ...)
{
  return _[a1 wifiBandsCount];
}

id objc_msgSend_wifiPowered(void *a1, const char *a2, ...)
{
  return _[a1 wifiPowered];
}

id objc_msgSend_wifiScan(void *a1, const char *a2, ...)
{
  return _[a1 wifiScan];
}

id objc_msgSend_wildTime(void *a1, const char *a2, ...)
{
  return _[a1 wildTime];
}

id objc_msgSend_willFetchRecordZoneChangesEvent(void *a1, const char *a2, ...)
{
  return _[a1 willFetchRecordZoneChangesEvent];
}

id objc_msgSend_willSendChangesEvent(void *a1, const char *a2, ...)
{
  return _[a1 willSendChangesEvent];
}

id objc_msgSend_willStart(void *a1, const char *a2, ...)
{
  return _[a1 willStart];
}

id objc_msgSend_wirelessAPAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 wirelessAPAtIndex:];
}

id objc_msgSend_wirelessAPs(void *a1, const char *a2, ...)
{
  return _[a1 wirelessAPs];
}

id objc_msgSend_wirelessAPsCount(void *a1, const char *a2, ...)
{
  return _[a1 wirelessAPsCount];
}

id objc_msgSend_withClients_(void *a1, const char *a2, ...)
{
  return [a1 withClients:];
}

id objc_msgSend_workArchive(void *a1, const char *a2, ...)
{
  return _[a1 workArchive];
}

id objc_msgSend_workQ(void *a1, const char *a2, ...)
{
  return _[a1 workQ];
}

id objc_msgSend_workingDirectoryHasSufficientFreeSpace(void *a1, const char *a2, ...)
{
  return _[a1 workingDirectoryHasSufficientFreeSpace];
}

id objc_msgSend_workout(void *a1, const char *a2, ...)
{
  return _[a1 workout];
}

id objc_msgSend_workoutActivityType(void *a1, const char *a2, ...)
{
  return _[a1 workoutActivityType];
}

id objc_msgSend_workoutEvent(void *a1, const char *a2, ...)
{
  return _[a1 workoutEvent];
}

id objc_msgSend_workoutEvents(void *a1, const char *a2, ...)
{
  return _[a1 workoutEvents];
}

id objc_msgSend_workoutIsTypeRunning_(void *a1, const char *a2, ...)
{
  return [a1 workoutIsTypeRunning:];
}

id objc_msgSend_workoutIsTypeWalking_(void *a1, const char *a2, ...)
{
  return [a1 workoutIsTypeWalking:];
}

id objc_msgSend_workoutLabel(void *a1, const char *a2, ...)
{
  return _[a1 workoutLabel];
}

id objc_msgSend_workoutLocationTypeFromCMWorkoutType_(void *a1, const char *a2, ...)
{
  return [a1 workoutLocationTypeFromCMWorkoutType:];
}

id objc_msgSend_workoutName_(void *a1, const char *a2, ...)
{
  return [a1 workoutName:];
}

id objc_msgSend_workoutSessionId(void *a1, const char *a2, ...)
{
  return _[a1 workoutSessionId];
}

id objc_msgSend_workoutSnapshotWithReply_(void *a1, const char *a2, ...)
{
  return [a1 workoutSnapshotWithReply:];
}

id objc_msgSend_workoutType(void *a1, const char *a2, ...)
{
  return _[a1 workoutType];
}

id objc_msgSend_workouts(void *a1, const char *a2, ...)
{
  return _[a1 workouts];
}

id objc_msgSend_writeAdvertisement_(void *a1, const char *a2, ...)
{
  return [a1 writeAdvertisement:];
}

id objc_msgSend_writeAnomalyInfoToFileWithLastFallEvent_writeMask_fallNotifierConfig_stateLogger_statsLogger_sensorsLogger_pressureLogger_heartRateLogger_wristStateLogger_odometerLogger_falsePositiveSuppressionFeaturesLogger_hgalLogger_logDirectory_logFilePrefix_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "writeAnomalyInfoToFileWithLastFallEvent:writeMask:fallNotifierConfig:stateLogger:statsLogger:sensorsLogger:pressureLogger:heartRateLogger:wristStateLogger:odometerLogger:falsePositiveSuppressionFeaturesLogger:hgalLogger:logDirectory:logFilePrefix:");
}

id objc_msgSend_writeBigEndianFixed16_(void *a1, const char *a2, ...)
{
  return [a1 writeBigEndianFixed16:];
}

id objc_msgSend_writeBigEndianFixed32_(void *a1, const char *a2, ...)
{
  return [a1 writeBigEndianFixed32:];
}

id objc_msgSend_writeBigEndianShortThenString_(void *a1, const char *a2, ...)
{
  return [a1 writeBigEndianShortThenString:];
}

id objc_msgSend_writeBodyMetrics(void *a1, const char *a2, ...)
{
  return _[a1 writeBodyMetrics];
}

id objc_msgSend_writeData_(void *a1, const char *a2, ...)
{
  return [a1 writeData:];
}

id objc_msgSend_writeData_error_(void *a1, const char *a2, ...)
{
  return [a1 writeData:x0 error:x1];
}

id objc_msgSend_writeData_forTag_(void *a1, const char *a2, ...)
{
  return [a1 writeData:forTag:];
}

id objc_msgSend_writeDataOnUnlock(void *a1, const char *a2, ...)
{
  return _[a1 writeDataOnUnlock];
}

id objc_msgSend_writeFTPToHK_(void *a1, const char *a2, ...)
{
  return [a1 writeFTPToHK:];
}

id objc_msgSend_writeHealthKitInfo(void *a1, const char *a2, ...)
{
  return _[a1 writeHealthKitInfo];
}

id objc_msgSend_writeInitialHistoricalMeanSeaLevelPressureToMslwithTimestamp_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "writeInitialHistoricalMeanSeaLevelPressureToMslwithTimestamp:");
}

id objc_msgSend_writeJSONObject_toStream_options_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "writeJSONObject:toStream:options:error:");
}

id objc_msgSend_writeMeta_toHandle_(void *a1, const char *a2, ...)
{
  return [a1 writeMeta:toHandle:];
}

id objc_msgSend_writeOtherFallLoggerData_otherLoggerDirectory_otherLoggerFilePrefix_destinationLogger_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "writeOtherFallLoggerData:otherLoggerDirectory:otherLoggerFilePrefix:destinationLogger:");
}

id objc_msgSend_writeSecondaryObject_collectedAt_toField_(void *a1, const char *a2, ...)
{
  return [a1 writeSecondaryObject:collectedAt:toField:];
}

id objc_msgSend_writeSecondaryObject_toField_(void *a1, const char *a2, ...)
{
  return [a1 writeSecondaryObject:toField:];
}

id objc_msgSend_writeSteadinessEvent_startDate_endDate_source_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "writeSteadinessEvent:startDate:endDate:source:");
}

id objc_msgSend_writeStrideCalBins(void *a1, const char *a2, ...)
{
  return _[a1 writeStrideCalBins];
}

id objc_msgSend_writeTo_(void *a1, const char *a2, ...)
{
  return [a1 writeTo:];
}

id objc_msgSend_writeToFile_atomically_(void *a1, const char *a2, ...)
{
  return [a1 writeToFile:atomically:];
}

id objc_msgSend_writeToFile_options_error_(void *a1, const char *a2, ...)
{
  return [a1 writeToFile:x0 options:x1 error:x2];
}

id objc_msgSend_writeToHealthKitAppleWalkingSteadiness_startDate_endDate_source_(void *a1, const char *a2, ...)
{
  return [a1 writeToHealthKitAppleWalkingSteadiness:startDate:endDate:source:];
}

id objc_msgSend_writeToHealthKitPrediction_estimateTime_earliestTimeUsed_calibrationStatus_(void *a1, const char *a2, ...)
{
  return [a1 writeToHealthKitPrediction:estimateTime:earliestTimeUsed:calibrationStatus:];
}

id objc_msgSend_writeToHealthKitType_value_startDate_endDate_(void *a1, const char *a2, ...)
{
  return [a1 writeToHealthKitType:x0 value:x1 startDate:x2 endDate:x3];
}

id objc_msgSend_writeToHealthKitType_value_startDate_endDate_deviceSide_(void *a1, const char *a2, ...)
{
  return [a1 writeToHealthKitType:x0 value:x1 startDate:x2 endDate:x3 deviceSide:x4];
}

id objc_msgSend_writeToHealthRunningGroundContactTime_startDate_endDate_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "writeToHealthRunningGroundContactTime:startDate:endDate:")];
}

id objc_msgSend_writeToHealthRunningPower_startDate_endDate_(void *a1, const char *a2, ...)
{
  return [a1 writeToHealthRunningPower:startDate:endDate:];
}

id objc_msgSend_writeToHealthRunningSpeed_startDate_endDate_(void *a1, const char *a2, ...)
{
  return [a1 writeToHealthRunningSpeed:startDate:endDate:];
}

id objc_msgSend_writeToHealthRunningStrideLength_startDate_endDate_(void *a1, const char *a2, ...)
{
  return [a1 writeToHealthRunningStrideLength:startDate:endDate:];
}

id objc_msgSend_writeToURL_atomically_(void *a1, const char *a2, ...)
{
  return [a1 writeToURL:atomically:];
}

id objc_msgSend_writeToURL_options_error_(void *a1, const char *a2, ...)
{
  return [a1 writeToURL:options:error:];
}

id objc_msgSend_writeValue_forCharacteristic_type_(void *a1, const char *a2, ...)
{
  return [a1 writeValue:forCharacteristic:type:];
}

id objc_msgSend_writeWatchOrientation(void *a1, const char *a2, ...)
{
  return _[a1 writeWatchOrientation];
}

id objc_msgSend_writeWorkoutEvent_(void *a1, const char *a2, ...)
{
  return [a1 writeWorkoutEvent:];
}

id objc_msgSend_year(void *a1, const char *a2, ...)
{
  return _[a1 year];
}

id objc_msgSend_zipperedStoredLocationsBetweenStartTime_endTime_apartFromEachOther_lyingWithinTimeIntervals_custeredWithVisits_withReply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "zipperedStoredLocationsBetweenStartTime:endTime:apartFromEachOther:lyingWithinTimeIntervals:custeredWithVisits:withReply:");
}

id objc_msgSend_zoneID(void *a1, const char *a2, ...)
{
  return _[a1 zoneID];
}

id objc_msgSend_zoneIDForZoneName_(void *a1, const char *a2, ...)
{
  return [a1 zoneIDForZoneName:];
}

id objc_msgSend_zoneIDs(void *a1, const char *a2, ...)
{
  return _[a1 zoneIDs];
}

id objc_msgSend_zoneId(void *a1, const char *a2, ...)
{
  return _[a1 zoneId];
}

id objc_msgSend_zoneIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 zoneIdentifier];
}

id objc_msgSend_zoneName(void *a1, const char *a2, ...)
{
  return _[a1 zoneName];
}

id objc_msgSend_zoneType(void *a1, const char *a2, ...)
{
  return _[a1 zoneType];
}

id objc_msgSend_zoneid(void *a1, const char *a2, ...)
{
  return _[a1 zoneid];
}