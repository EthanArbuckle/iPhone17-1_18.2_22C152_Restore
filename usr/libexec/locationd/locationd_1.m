void sub_1000ADA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (v24 < 0) {
    operator delete(v23);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000ADAAC(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      v10 = (uint64_t *)v4;
    }
    else {
      v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  uint64_t v11 = *(void *)(v7 + 64);
  if (!v11) {
    return 0;
  }
  sub_1000B0168(a3, v11);
  return 1;
}

uint64_t sub_1000ADB1C(uint64_t a1, unsigned int *a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F9C68);
  }
  uint64_t v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v5 = *a2;
    *(_DWORD *)buf = 67240192;
    LODWORD(v17) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CellLoc, registerForNotificationInternal, notification, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F9C68);
    }
    v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLUnifiedCellLocationProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  sub_1000B015C();
  if (*a2 <= 4 && ((1 << *a2) & 0x19) != 0)
  {
    [objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLNetworkLocationProvider") resetRetryCounters:@"CLUnifiedCellLocationProvider"];
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F9C68);
    }
    int v6 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = sub_10008A168(*a2);
      *(_DWORD *)buf = 136446210;
      v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CellFlow, locreq, %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F9C68);
      }
      sub_10008A168(*a2);
      v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLUnifiedCellLocationProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    uint64_t v8 = *(void *)(a1 + 136);
    sub_1000B0164(buf, @"kCellInfoNotification");
    [*(id *)(v8 + 16) register:*(void *)(v8 + 8) forNotification:sub_1000F1244((unsigned int *)buf) registrationInfo:0];
    uint64_t v9 = *(void *)(a1 + 136);
    sub_1000B0164(buf, @"kCellMonitorRefreshResultNotification");
    [*(id *)(v9 + 16) register:*(void *)(v9 + 8) forNotification:sub_1000F1244((unsigned int *)buf) registrationInfo:0];
    [*(id *)(*(void *)(a1 + 144) + 16) register:*(void *)(*(void *)(a1 + 144) + 8) forNotification:3 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 144) + 16) register:*(void *)(*(void *)(a1 + 144) + 8) forNotification:0 registrationInfo:0];
    if (!*a2)
    {
      sub_10000EBE4(a1, "register");
      *(_DWORD *)buf = 0;
      int v10 = sub_1001072EC(a1, (int *)buf, 1);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F9C68);
      }
      uint64_t v11 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240192;
        LODWORD(v17) = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "UclpMetric, registrant, %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022F9C68);
        }
        v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLUnifiedCellLocationProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      AnalyticsSendEventLazy();
      if (*(double *)(a1 + 2640) == 0.0) {
        *(CFAbsoluteTime *)(a1 + 2640) = CFAbsoluteTimeGetCurrent();
      }
      ++*(_DWORD *)(a1 + 2616);
    }
  }
  return 1;
}

uint64_t sub_1000AE100(uint64_t a1, uint64_t a2, const __CFString *a3, const __CFDictionary *a4)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BB328);
  }
  uint64_t v7 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_1000FECE0(a3, (uint64_t)__p);
    uint64_t v8 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CTService: received notification %s", buf, 0xCu);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    sub_1000FECE0(a3, (uint64_t)buf);
    if (v50 >= 0) {
      v31 = buf;
    }
    else {
      v31 = *(unsigned char **)buf;
    }
    *(_DWORD *)theArray = 136315138;
    *(void *)&theArray[4] = v31;
    v32 = (char *)_os_log_send_and_compose_impl();
    if (v50 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)", "%s\n", v32);
    if (v32 != __p) {
      free(v32);
    }
  }
  if (CFEqual(kCTRegistrationCellChangedNotification, a3) || CFEqual(kCTRegistrationStatusChangedNotification, a3))
  {
    sub_10013FA80((int)theArray, a4);
    if ((sub_1000D29FC((uint64_t)theArray, kCTRegistrationInHomeCountry, (BOOL *)(a1 + 161)) & 1) == 0)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BB2A8);
      }
      uint64_t v9 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "couldn't get kCTRegistrationInHomeCountry, keeping current value", __p, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022BB2A8);
        }
        *(_WORD *)buf = 0;
        v35 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)", "%s\n", v35);
        if (v35 != __p) {
          free(v35);
        }
      }
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BB2A8);
    }
    int v10 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000FECE0(a3, (uint64_t)buf);
      uint64_t v11 = v50 >= 0 ? buf : *(unsigned char **)buf;
      int v12 = *(unsigned __int8 *)(a1 + 161);
      *(void *)__p = 68289538;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2082;
      *(void *)&__p[20] = v11;
      __int16 v52 = 1026;
      int v53 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"updated kCTRegistrationInHomeCountry from\", \"notification\":%{public, location:escape_only}s, \"fInHomeCountry\":%{public}hhd}", __p, 0x22u);
      if (v50 < 0) {
        operator delete(*(void **)buf);
      }
    }
    sub_10000D3AC((unsigned char *)a1);
    sub_10013F3C4(theArray);
  }
  if (CFEqual(kCTIndicatorRadioTransmitNotification, a3))
  {
    LOBYTE(v45) = 0;
    sub_10013FA80((int)buf, a4);
    if (sub_1000D29FC((uint64_t)buf, kCTRadioTransmitDCHStatus, (BOOL *)&v45))
    {
      if (!(_BYTE)v45)
      {
        *(_DWORD *)(a1 + 136) = 0;
        goto LABEL_40;
      }
      int v13 = 1;
    }
    else
    {
      int v13 = -1;
    }
    *(_DWORD *)(a1 + 136) = v13;
LABEL_40:
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    v15 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v16 = *(_DWORD *)(a1 + 136);
      *(_DWORD *)__p = 67109120;
      *(_DWORD *)&__p[4] = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CTService: cell transmit status is %d", __p, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      int v33 = *(_DWORD *)(a1 + 136);
      *(_DWORD *)theArray = 67109120;
      *(_DWORD *)&theArray[4] = v33;
      v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)", "%s\n", v34);
      if (v34 != __p) {
        free(v34);
      }
    }
    v17 = buf;
LABEL_46:
    sub_10013F3C4(v17);
    return (*(uint64_t (**)(uint64_t, const __CFString *, const __CFDictionary *))(*(void *)a1 + 256))(a1, a3, a4);
  }
  if (CFEqual(kCTConnectionInvalidatedNotification, a3))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    v14 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CTService: CommCenter server connection invalidated", __p, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      *(_WORD *)buf = 0;
      v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)", "%s\n", v36);
      if (v36 != __p) {
        free(v36);
      }
    }
    *(unsigned char *)(a1 + 160) = 0;
    sub_100972854(a1 + 176);
    sub_100559AA8(a1, 1);
  }
  else if (CFEqual(kCTDaemonReadyNotification, a3))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    v19 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CTService: CommCenter server connection ready", __p, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      *(_WORD *)buf = 0;
      v37 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)", "%s\n", v37);
      if (v37 != __p) {
        free(v37);
      }
    }
    *(unsigned char *)(a1 + 160) = 1;
    sub_1009729F0(a1 + 176);
    sub_1005593D0(a1);
  }
  else if (CFEqual(kCTCellMonitorUpdateNotification, a3))
  {
    *(void *)theArray = 0;
    if (sub_1000B0644(a1, (const void **)theArray))
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BB3A8);
      }
      v20 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        CFIndex Count = CFArrayGetCount(*(CFArrayRef *)theArray);
        *(_DWORD *)__p = 134217984;
        *(void *)&__p[4] = Count;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "@CellService, ctupdate, list, %lu", __p, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BB3A8);
        }
        CFIndex v38 = CFArrayGetCount(*(CFArrayRef *)theArray);
        *(_DWORD *)buf = 134217984;
        *(void *)&uint8_t buf[4] = v38;
        v39 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)", "%s\n", v39);
        if (v39 != __p) {
          free(v39);
        }
      }
      *(void *)__p = @"kCellRefreshNotification";
      *(void *)buf = *(void *)theArray;
      CFDictionaryRef v22 = CFDictionaryCreate(0, (const void **)__p, (const void **)buf, 1, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFDictionaryRef v23 = v22;
      CFRelease(*(CFTypeRef *)theArray);
      (*(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(void *)a1 + 256))(a1, @"kCellRefreshNotification", v22);
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BB3A8);
      }
      v28 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "CellService, outcome, emptylist, CTService", __p, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BB3A8);
        }
        *(_WORD *)buf = 0;
        v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)", "%s\n", v29);
        if (v29 != __p) {
          free(v29);
        }
      }
    }
  }
  else
  {
    if (CFEqual(kCTRadioModuleUplinkChangedNotification, a3))
    {
      sub_10013FA80((int)theArray, a4);
      uint64_t v45 = -1;
      unsigned int v44 = -1;
      if (sub_1004D0C04((uint64_t)theArray, kCTRadioModuleUplinkFrequencyValue, &v45)
        && (sub_1004D08E4((uint64_t)theArray, kCTRadioModuleUplinkBandwidthValue, &v44) & 1) != 0)
      {
        float v24 = (float)v44;
        *(float *)(a1 + 164) = (float)v45;
        *(float *)(a1 + 168) = v24;
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022BB2A8);
        }
        v25 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          double v26 = *(float *)(a1 + 164);
          double v27 = *(float *)(a1 + 168);
          *(_DWORD *)__p = 134349312;
          *(double *)&__p[4] = v26;
          *(_WORD *)&__p[12] = 2050;
          *(double *)&__p[14] = v27;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "#imd,kCTRadioModuleUplinkChangedNotification,freq(Hz),%{public}f,bw(Hz),%{public}f", __p, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022BB2A8);
          }
          double v41 = *(float *)(a1 + 164);
          double v42 = *(float *)(a1 + 168);
          *(_DWORD *)buf = 134349312;
          *(double *)&uint8_t buf[4] = v41;
          __int16 v48 = 2050;
          double v49 = v42;
          v43 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)", "%s\n", v43);
          if (v43 != __p) {
            free(v43);
          }
        }
        sub_100559D24(a1, *(float *)(a1 + 164), *(float *)(a1 + 168));
      }
      else
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022BB2A8);
        }
        v30 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__p = 0;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#imd,#cterror,couldn't get kCTRadioModuleUplinkChangedNotification values", __p, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022BB2A8);
          }
          *(_WORD *)buf = 0;
          v40 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)", "%s\n", v40);
          if (v40 != __p) {
            free(v40);
          }
        }
      }
      v17 = theArray;
      goto LABEL_46;
    }
    if (CFEqual(kCTCellularTransmitStateNotification, a3)) {
      sub_100559FCC(a1, a4);
    }
  }
  return (*(uint64_t (**)(uint64_t, const __CFString *, const __CFDictionary *))(*(void *)a1 + 256))(a1, a3, a4);
}

void sub_1000AF0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

const void **sub_1000AF11C(uint64_t a1, uint64_t a2, const void *a3)
{
  sub_1000AF214(&v7, a2);
  int v6 = a3;
  if (a3) {
    CFRetain(a3);
  }
  sub_1000AF494(a1, &v7, &v6, 0);
  return sub_1000DC024(&v6);
}

void sub_1000AF184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

const void **sub_1000AF198(uint64_t a1, uint64_t a2, const void *a3)
{
  sub_1000AF214(&v7, a2);
  int v6 = a3;
  if (a3) {
    CFRetain(a3);
  }
  sub_1000AF494(a1, &v7, &v6, 1);
  return sub_1000DC024(&v6);
}

void sub_1000AF200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

_DWORD *sub_1000AF214(_DWORD *a1, uint64_t a2)
{
  if (qword_10247B3A0 != -1) {
    dispatch_once(&qword_10247B3A0, &stru_1022BB2C8);
  }
  uint64_t v4 = (os_unfair_lock_s *)qword_10247B3A8;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000AF2E8;
  v7[3] = &unk_1022BB2E8;
  v7[4] = qword_10247B3A8;
  v7[5] = a2;
  os_unfair_lock_lock((os_unfair_lock_t)qword_10247B3A8);
  int v5 = sub_1000AF2E8((uint64_t)v7);
  os_unfair_lock_unlock(v4);
  *a1 = v5;
  return a1;
}

uint64_t sub_1000AF2E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v4 = (void **)(v2 + 16);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v5 = v2 + 16;
    do
    {
      CFComparisonResult v6 = CFStringCompare(*(CFStringRef *)(v3 + 32), *(CFStringRef *)(a1 + 40), 0);
      unsigned int v7 = (uint64_t *)(v3 + 8);
      if (v6 != kCFCompareLessThan)
      {
        unsigned int v7 = (uint64_t *)v3;
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v7;
    }
    while (*v7);
    if ((void **)v5 != v4
      && CFStringCompare(*(CFStringRef *)(a1 + 40), *(CFStringRef *)(v5 + 32), 0) != kCFCompareLessThan)
    {
      return *(unsigned int *)(v5 + 40);
    }
    uint64_t v9 = (_DWORD *)(v2 + 4);
    int v10 = *(_DWORD *)(v2 + 4);
    uint64_t v11 = *(CFStringRef **)(v2 + 16);
    if (v11)
    {
      while (1)
      {
        while (1)
        {
          int v12 = v11;
          if (CFStringCompare(*(CFStringRef *)(a1 + 40), v11[4], 0) != kCFCompareLessThan) {
            break;
          }
          uint64_t v11 = (CFStringRef *)*v12;
          uint64_t v4 = (void **)v12;
          if (!*v12)
          {
            uint64_t v4 = (void **)v12;
            goto LABEL_18;
          }
        }
        if (CFStringCompare(v12[4], *(CFStringRef *)(a1 + 40), 0) != kCFCompareLessThan) {
          break;
        }
        uint64_t v4 = (void **)(v12 + 1);
        uint64_t v11 = (CFStringRef *)v12[1];
        if (!v11) {
          goto LABEL_18;
        }
      }
      int v13 = *v4;
      if (*v4) {
        goto LABEL_21;
      }
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v9 = (_DWORD *)(v2 + 4);
    int v10 = *(_DWORD *)(v2 + 4);
  }
  int v12 = (CFStringRef *)(v2 + 16);
LABEL_18:
  int v13 = operator new(0x30uLL);
  v13[4] = *(void *)(a1 + 40);
  *((_DWORD *)v13 + 10) = 0;
  void *v13 = 0;
  v13[1] = 0;
  v13[2] = v12;
  *uint64_t v4 = v13;
  uint64_t v14 = **(void **)(v2 + 8);
  v15 = v13;
  if (v14)
  {
    *(void *)(v2 + 8) = v14;
    v15 = (uint64_t *)*v4;
  }
  sub_1000EDFE8(*(uint64_t **)(v2 + 16), v15);
  ++*(void *)(v2 + 24);
LABEL_21:
  *((_DWORD *)v13 + 10) = v10;
  int v16 = *(uint64_t **)(a1 + 40);
  v17 = v9;
  sub_1000FEE0C((uint64_t **)(v2 + 32), v9, (uint64_t)&unk_101D0B290, &v17)[5] = v16;
  uint64_t result = *(unsigned int *)(v2 + 4);
  *(_DWORD *)(v2 + 4) = result + 1;
  return result;
}

void sub_1000AF494(uint64_t a1, unsigned int *a2, const void **a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BB268);
  }
  uint64_t v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    int v11 = sub_1000F1244(a2);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    __int16 v23 = 2082;
    float v24 = v10;
    __int16 v25 = 2050;
    double v26 = (std::__shared_weak_count *)v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  int v12 = sub_1000F1244(a2);
  uint64_t v13 = *(void *)(a1 + 64);
  if (!v13) {
    goto LABEL_18;
  }
  uint64_t v14 = (uint64_t *)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v13 + 32);
    BOOL v16 = v15 < v12;
    if (v15 >= v12) {
      v17 = (uint64_t *)v13;
    }
    else {
      v17 = (uint64_t *)(v13 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t *)v13;
    }
    uint64_t v13 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t *)(a1 + 64) || v12 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    double v27 = v28;
    memset(v28, 0, sizeof(v28));
    v29 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v27);
    uint64_t v14 = sub_100562E38(a1 + 56, (uint64_t)buf);
    if (v26) {
      sub_1000DB0A0(v26);
    }
    sub_1000F5BB0((uint64_t)&buf[8], *(void **)&buf[16]);
    if (v29) {
      sub_1000DB0A0(v29);
    }
    sub_1000F5BB0((uint64_t)&v27, v28[0]);
  }
  if (!a4)
  {
    v20 = (std::__shared_weak_count *)v14[9];
    v14[8] = 0;
    v14[9] = 0;
    if (!v20) {
      goto LABEL_29;
    }
LABEL_28:
    sub_1000DB0A0(v20);
    goto LABEL_29;
  }
  sub_1000AFBB0(a3, buf);
  long long v18 = *(_OWORD *)buf;
  *(void *)buf = 0;
  *(void *)&buf[8] = 0;
  v19 = (std::__shared_weak_count *)v14[9];
  *((_OWORD *)v14 + 4) = v18;
  if (v19)
  {
    sub_1000DB0A0(v19);
    v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      goto LABEL_28;
    }
  }
LABEL_29:
  if (v14[7]) {
    sub_1000AFAD0();
  }
  os_activity_scope_leave(&state);
}

void sub_1000AFA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_1000AFAD0()
{
}

void sub_1000AFB88()
{
}

void *sub_1000AFBB0@<X0>(const void **a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x20uLL);
  uint64_t result = sub_1000AFC0C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1000AFBF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000AFC0C(void *a1, const void **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022BB4D8;
  uint64_t v3 = *a2;
  a1[3] = *a2;
  if (v3) {
    CFRetain(v3);
  }
  return a1;
}

void sub_1000AFC60(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1000AFC74(uint64_t a1, int a2, unsigned int *a3, uint64_t a4)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C6438);
  }
  uint64_t v8 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *(const char **)(a4 + 8);
    int v10 = *(_DWORD *)(a4 + 20);
    *(_DWORD *)buf = 67109632;
    unsigned int v19 = a2;
    __int16 v20 = 2048;
    v21 = v9;
    __int16 v22 = 1024;
    int v23 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLIENT: %d, registerForNotification, distanceFilter, %.1lf, operatingMode, %d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C6438);
    }
    BOOL v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLFilteredLocationController::registerForNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C6438);
  }
  int v11 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v12 = *a3;
    uint64_t v13 = sub_10008A168(*a3);
    *(_DWORD *)buf = 67109378;
    unsigned int v19 = v12;
    __int16 v20 = 2080;
    v21 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLIENT: register for notification, %d, %s", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C6438);
    }
    sub_10008A168(*a3);
    v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLFilteredLocationController::registerForNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  BOOL v14 = sub_1000AD0C8(a1, a2, (int *)a3, (long long *)a4);
  if (v14 && *a3 <= 2)
  {
    sub_100024444(a1, 1);
    sub_10003EE78(a1);
  }
  return v14;
}

uint64_t sub_1000B0030(uint64_t a1, int *a2, uint64_t a3)
{
  int v6 = *a2;
  if (*a2 > 0x27) {
    goto LABEL_7;
  }
  if (((1 << v6) & 0x8000000038) != 0) {
    return 0;
  }
  if (((1 << v6) & 3) != 0 && sub_10019F554(a1 + 184, a3)) {
    return 1;
  }
LABEL_7:

  return sub_1000AD5F4(a1, a2, a3);
}

uint64_t sub_1000B00DC(unsigned char *a1, _DWORD *a2)
{
  sub_1000B015C();
  if (!*a2 && !a1[109])
  {
    int v5 = 9;
    (*(void (**)(unsigned char *, int *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, &v5, 1, 0xFFFFFFFFLL);
  }
  return 1;
}

uint64_t sub_1000B015C()
{
  return 1;
}

uint64_t sub_1000B0168(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  long long v8 = *(_OWORD *)(a2 + 96);
  long long v9 = *(_OWORD *)(a2 + 112);
  long long v10 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 96) = v8;
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x201uLL);
  uint64_t v11 = *(void *)(a2 + 680);
  uint64_t v12 = *(void *)(a2 + 688);
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 680) = v11;
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 688);
  *(void *)(a1 + 688) = v12;
  if (v13) {
    sub_1000DB0A0(v13);
  }
  long long v14 = *(_OWORD *)(a2 + 696);
  long long v15 = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 728) = v15;
  *(_OWORD *)(a1 + 696) = v14;
  long long v16 = *(_OWORD *)(a2 + 744);
  long long v17 = *(_OWORD *)(a2 + 760);
  long long v18 = *(_OWORD *)(a2 + 776);
  *(void *)(a1 + 789) = *(void *)(a2 + 789);
  *(_OWORD *)(a1 + 760) = v17;
  *(_OWORD *)(a1 + 776) = v18;
  *(_OWORD *)(a1 + 744) = v16;
  uint64_t v19 = *(void *)(a2 + 800);
  uint64_t v20 = *(void *)(a2 + 808);
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 800) = v19;
  v21 = *(std::__shared_weak_count **)(a1 + 808);
  *(void *)(a1 + 808) = v20;
  if (v21) {
    sub_1000DB0A0(v21);
  }
  *(_OWORD *)(a1 + 816) = *(_OWORD *)(a2 + 816);
  long long v22 = *(_OWORD *)(a2 + 832);
  long long v23 = *(_OWORD *)(a2 + 848);
  long long v24 = *(_OWORD *)(a2 + 880);
  *(_OWORD *)(a1 + 864) = *(_OWORD *)(a2 + 864);
  *(_OWORD *)(a1 + 880) = v24;
  *(_OWORD *)(a1 + 832) = v22;
  *(_OWORD *)(a1 + 848) = v23;
  *(void *)(a1 + 896) = *(void *)(a2 + 896);
  std::string::operator=((std::string *)(a1 + 904), (const std::string *)(a2 + 904));
  long long v26 = *(_OWORD *)(a2 + 944);
  long long v25 = *(_OWORD *)(a2 + 960);
  *(_OWORD *)(a1 + 928) = *(_OWORD *)(a2 + 928);
  *(_OWORD *)(a1 + 944) = v26;
  *(_OWORD *)(a1 + 960) = v25;
  long long v27 = *(_OWORD *)(a2 + 1024);
  long long v29 = *(_OWORD *)(a2 + 976);
  long long v28 = *(_OWORD *)(a2 + 992);
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
  *(_OWORD *)(a1 + 1024) = v27;
  *(_OWORD *)(a1 + 976) = v29;
  *(_OWORD *)(a1 + 992) = v28;
  long long v30 = *(_OWORD *)(a2 + 1056);
  long long v31 = *(_OWORD *)(a2 + 1072);
  long long v32 = *(_OWORD *)(a2 + 1088);
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
  *(_OWORD *)(a1 + 1088) = v32;
  *(_OWORD *)(a1 + 1072) = v31;
  *(_OWORD *)(a1 + 1056) = v30;
  long long v33 = *(_OWORD *)(a2 + 1120);
  long long v34 = *(_OWORD *)(a2 + 1136);
  uint64_t v35 = *(void *)(a2 + 1152);
  *(_OWORD *)(a1 + 1104) = *(_OWORD *)(a2 + 1104);
  *(void *)(a1 + 1152) = v35;
  *(_OWORD *)(a1 + 1136) = v34;
  *(_OWORD *)(a1 + 1120) = v33;
  uint64_t v36 = *(void *)(a2 + 1160);
  uint64_t v37 = *(void *)(a2 + 1168);
  if (v37) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1160) = v36;
  CFIndex v38 = *(std::__shared_weak_count **)(a1 + 1168);
  *(void *)(a1 + 1168) = v37;
  if (v38) {
    sub_1000DB0A0(v38);
  }
  *(_OWORD *)(a1 + 1176) = *(_OWORD *)(a2 + 1176);
  long long v39 = *(_OWORD *)(a2 + 1192);
  long long v40 = *(_OWORD *)(a2 + 1208);
  long long v41 = *(_OWORD *)(a2 + 1240);
  *(_OWORD *)(a1 + 1224) = *(_OWORD *)(a2 + 1224);
  *(_OWORD *)(a1 + 1240) = v41;
  *(_OWORD *)(a1 + 1192) = v39;
  *(_OWORD *)(a1 + 1208) = v40;
  long long v42 = *(_OWORD *)(a2 + 1256);
  long long v43 = *(_OWORD *)(a2 + 1272);
  long long v44 = *(_OWORD *)(a2 + 1304);
  *(_OWORD *)(a1 + 1288) = *(_OWORD *)(a2 + 1288);
  *(_OWORD *)(a1 + 1304) = v44;
  *(_OWORD *)(a1 + 1256) = v42;
  *(_OWORD *)(a1 + 1272) = v43;
  uint64_t v45 = *(void **)(a1 + 1320);
  *(void *)(a1 + 1320) = *(id *)(a2 + 1320);

  *(_OWORD *)(a1 + 1328) = *(_OWORD *)(a2 + 1328);
  long long v46 = *(_OWORD *)(a2 + 1344);
  long long v47 = *(_OWORD *)(a2 + 1360);
  long long v48 = *(_OWORD *)(a2 + 1376);
  *(_OWORD *)(a1 + 1392) = *(_OWORD *)(a2 + 1392);
  *(_OWORD *)(a1 + 1376) = v48;
  *(_OWORD *)(a1 + 1360) = v47;
  *(_OWORD *)(a1 + 1344) = v46;
  long long v49 = *(_OWORD *)(a2 + 1408);
  long long v50 = *(_OWORD *)(a2 + 1424);
  long long v51 = *(_OWORD *)(a2 + 1440);
  *(_OWORD *)(a1 + 1456) = *(_OWORD *)(a2 + 1456);
  *(_OWORD *)(a1 + 1440) = v51;
  *(_OWORD *)(a1 + 1424) = v50;
  *(_OWORD *)(a1 + 1408) = v49;
  long long v52 = *(_OWORD *)(a2 + 1472);
  long long v53 = *(_OWORD *)(a2 + 1488);
  long long v54 = *(_OWORD *)(a2 + 1504);
  *(void *)(a1 + 1520) = *(void *)(a2 + 1520);
  *(_OWORD *)(a1 + 1504) = v54;
  *(_OWORD *)(a1 + 1488) = v53;
  *(_OWORD *)(a1 + 1472) = v52;
  return a1;
}

uint64_t sub_1000B03C4(uint64_t a1, int a2, int *a3, uint64_t *a4)
{
  int v32 = a2;
  int v6 = *a3;
  uint64_t v7 = *(void *)(a1 + 64);
  if (!v7) {
    goto LABEL_21;
  }
  uint64_t v10 = a1 + 64;
  do
  {
    int v11 = *(_DWORD *)(v7 + 32);
    BOOL v12 = v11 < v6;
    if (v11 >= v6) {
      uint64_t v13 = (uint64_t *)v7;
    }
    else {
      uint64_t v13 = (uint64_t *)(v7 + 8);
    }
    if (!v12) {
      uint64_t v10 = v7;
    }
    uint64_t v7 = *v13;
  }
  while (*v13);
  if (v10 == a1 + 64) {
    goto LABEL_21;
  }
  if (v6 < *(_DWORD *)(v10 + 32)) {
    goto LABEL_21;
  }
  uint64_t v16 = *(void *)(v10 + 48);
  uint64_t v14 = v10 + 48;
  uint64_t v15 = v16;
  if (!v16) {
    goto LABEL_21;
  }
  long long v17 = (uint64_t **)(v14 - 8);
  uint64_t v18 = v14;
  do
  {
    int v19 = *(_DWORD *)(v15 + 32);
    BOOL v20 = v19 < a2;
    if (v19 >= a2) {
      v21 = (uint64_t *)v15;
    }
    else {
      v21 = (uint64_t *)(v15 + 8);
    }
    if (!v20) {
      uint64_t v18 = v15;
    }
    uint64_t v15 = *v21;
  }
  while (*v21);
  if (v18 != v14 && *(_DWORD *)(v18 + 32) <= a2)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    long long v25 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(void *)buf = &v32;
      id v26 = [[sub_10008A098((uint64_t **)(a1 + 80), &v32, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[8] description];
      uint64_t v27 = *a3;
      *(void *)buf = &v32;
      long long v28 = sub_1000EBC94(v17, &v32, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5];
      uint64_t v29 = *a4;
      *(_DWORD *)buf = 68290306;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v34 = 2082;
      uint64_t v35 = "";
      __int16 v36 = 1026;
      int v37 = a2;
      __int16 v38 = 2114;
      id v39 = v26;
      __int16 v40 = 2050;
      uint64_t v41 = v27;
      __int16 v42 = 2050;
      long long v43 = v28;
      __int16 v44 = 2050;
      uint64_t v45 = v29;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"LocationController,updateRegistrationInfoForClient\", \"id\":%{public}d, \"client\":%{public, location:escape_only}@, \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld, \"from desiredAccuracy\":\"%{public}.1f\", \"to desiredAccuracy\":\"%{public}.1f\"}", buf, 0x40u);
    }
    *(void *)buf = &v32;
    long long v30 = sub_1000EBC94(v17, &v32, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    long long v31 = *(_OWORD *)a4;
    *(_OWORD *)((char *)v30 + 52) = *(_OWORD *)((char *)a4 + 12);
    *(_OWORD *)(v30 + 5) = v31;
    int v6 = *a3;
    uint64_t v22 = 1;
  }
  else
  {
LABEL_21:
    uint64_t v22 = 0;
  }
  if (v6 == 15 || v6 == 0) {
    sub_100674ACC((uint64_t **)a1, a3);
  }
  return v22;
}

const void *sub_1000B0644(uint64_t a1, const void **a2)
{
  if (!*(unsigned char *)(a1 + 160))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    long long v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)buf = 68289282;
      int v16 = 0;
      __int16 v17 = 2082;
      *(void *)uint64_t v18 = "";
      *(_WORD *)&v18[8] = 1026;
      *(_DWORD *)&v18[10] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  if (*(void *)(a1 + 144))
  {
    unint64_t v6 = _CTServerConnectionCellMonitorCopyCellInfo();
    int v7 = v6;
    unint64_t v8 = HIDWORD(v6);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    long long v9 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *a2;
      *(_DWORD *)buf = 67109888;
      int v16 = v7;
      __int16 v17 = 1024;
      *(_DWORD *)uint64_t v18 = v8;
      *(_WORD *)&v18[4] = 2048;
      *(void *)&v18[6] = v10;
      __int16 v19 = 1024;
      int v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning CELL_LOC: _CTServerConnectionCellMonitorCopyCellInfo failed err(%d,%d) cellsArray(%p) valid(%d)", buf, 0x1Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTelephonyService::createCTCellArray(CFArrayRef *)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    uint64_t result = *a2;
    if (*a2)
    {
      CFRelease(result);
      uint64_t result = 0;
      *a2 = 0;
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    BOOL v12 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    uint64_t result = (const void *)sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTelephonyService::createCTCellArray(CFArrayRef *)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
      return 0;
    }
  }
  return result;
}

void sub_1000B0A70()
{
}

void sub_1000B0B20()
{
}

void sub_1000B0B44(uint64_t a1, CLConnection *a2, uint64_t a3)
{
  uint64_t v6 = CLConnectionMessage::name(*(CLConnectionMessage **)a3);
  int v7 = __p;
  sub_100134750(__p, "/");
  uint64_t v8 = *(unsigned __int8 *)(v6 + 23);
  if ((v8 & 0x80u) == 0) {
    long long v9 = (char *)v6;
  }
  else {
    long long v9 = *(char **)v6;
  }
  if ((v132 & 0x80u) == 0)
  {
    int64_t v10 = v132;
  }
  else
  {
    int v7 = (void **)__p[0];
    int64_t v10 = (int64_t)__p[1];
  }
  if (v10)
  {
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(v6 + 8);
    }
    int v11 = &v9[v8];
    if (v8 >= v10)
    {
      int v28 = *(char *)v7;
      uint64_t v29 = v9;
      do
      {
        uint64_t v30 = v8 - v10;
        if (v30 == -1) {
          break;
        }
        long long v31 = (char *)memchr(v29, v28, v30 + 1);
        if (!v31) {
          break;
        }
        BOOL v12 = v31;
        if (!memcmp(v31, v7, v10)) {
          goto LABEL_12;
        }
        uint64_t v29 = v12 + 1;
        uint64_t v8 = v11 - (v12 + 1);
      }
      while (v8 >= v10);
    }
    BOOL v12 = v11;
LABEL_12:
    if (v12 == v11) {
      std::string::size_type v13 = -1;
    }
    else {
      std::string::size_type v13 = v12 - v9;
    }
  }
  else
  {
    std::string::size_type v13 = 0;
  }
  std::string::basic_string(&v130, (const std::string *)v6, 0, v13, (std::allocator<char> *)buf);
  if ((*((unsigned char *)&v130.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    std::string::size_type size = v130.__r_.__value_.__l.__size_;
    if (v130.__r_.__value_.__l.__size_ == 15
      && *(void *)v130.__r_.__value_.__l.__data_ == 0x6E6F697461636F4CLL
      && *(void *)(v130.__r_.__value_.__r.__words[0] + 7) == 0x726567616E614D6ELL)
    {
      goto LABEL_148;
    }
    if (v130.__r_.__value_.__l.__size_ == 19)
    {
      if (*(void *)v130.__r_.__value_.__l.__data_ == 0x6E6F697461636F4CLL
        && *(void *)(v130.__r_.__value_.__r.__words[0] + 8) == 0x4C72657461647055
        && *(void *)(v130.__r_.__value_.__r.__words[0] + 11) == 0x6576694C72657461)
      {
        goto LABEL_130;
      }
      std::string::size_type size = v130.__r_.__value_.__l.__size_;
    }
    if (size != 25) {
      goto LABEL_63;
    }
    if (*(void *)v130.__r_.__value_.__l.__data_ == 0x6E6F697461636F4CLL
      && *(void *)(v130.__r_.__value_.__r.__words[0] + 8) == 0x4872657461647055
      && *(void *)(v130.__r_.__value_.__r.__words[0] + 16) == 0x616369726F747369
      && *(unsigned char *)(v130.__r_.__value_.__r.__words[0] + 24) == 108)
    {
      goto LABEL_130;
    }
    std::string::size_type size = v130.__r_.__value_.__l.__size_;
    if (v130.__r_.__value_.__l.__size_ != 25) {
      goto LABEL_63;
    }
    if (*(void *)v130.__r_.__value_.__l.__data_ == 0x756F72676B636142
      && *(void *)(v130.__r_.__value_.__r.__words[0] + 8) == 0x697669746341646ELL
      && *(void *)(v130.__r_.__value_.__r.__words[0] + 16) == 0x6F69737365537974
      && *(unsigned char *)(v130.__r_.__value_.__r.__words[0] + 24) == 110)
    {
      goto LABEL_130;
    }
    if ((*((unsigned char *)&v130.__r_.__value_.__s + 23) & 0x80) != 0)
    {
LABEL_63:
      if (size == 19)
      {
        if (*(void *)v130.__r_.__value_.__l.__data_ == 0x756363416C6C7546
          && *(void *)(v130.__r_.__value_.__r.__words[0] + 8) == 0x7373655379636172
          && *(void *)(v130.__r_.__value_.__r.__words[0] + 11) == 0x6E6F697373655379)
        {
          goto LABEL_130;
        }
        std::string::size_type size = v130.__r_.__value_.__l.__size_;
      }
      if (size != 14) {
        goto LABEL_126;
      }
      uint64_t v27 = (std::string *)v130.__r_.__value_.__r.__words[0];
      goto LABEL_122;
    }
  }
  else
  {
    if (HIBYTE(v130.__r_.__value_.__r.__words[2]) <= 0x12u)
    {
      if (HIBYTE(v130.__r_.__value_.__r.__words[2]) != 14)
      {
        if (HIBYTE(v130.__r_.__value_.__r.__words[2]) != 15) {
          goto LABEL_126;
        }
        if (v130.__r_.__value_.__r.__words[0] != 0x6E6F697461636F4CLL
          || *(std::string::size_type *)((char *)v130.__r_.__value_.__r.__words + 7) != 0x726567616E614D6ELL)
        {
          goto LABEL_126;
        }
LABEL_148:
        long long v50 = *(CLConnectionMessage **)a3;
        uint64_t v51 = *(void *)(a3 + 8);
        v129[2] = v50;
        v129[3] = (CLConnectionMessage *)v51;
        if (v51) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 8), 1uLL, memory_order_relaxed);
        }
        sub_1000B20B0();
      }
      goto LABEL_121;
    }
    if (HIBYTE(v130.__r_.__value_.__r.__words[2]) != 19)
    {
      if (HIBYTE(v130.__r_.__value_.__r.__words[2]) == 25)
      {
        BOOL v32 = v130.__r_.__value_.__r.__words[0] == 0x6E6F697461636F4CLL
           && v130.__r_.__value_.__l.__size_ == 0x4872657461647055;
        BOOL v33 = v32 && v130.__r_.__value_.__r.__words[2] == 0x616369726F747369;
        if (v33 && LOBYTE(__p[0]) == 108) {
          goto LABEL_130;
        }
        BOOL v35 = v130.__r_.__value_.__r.__words[0] == 0x756F72676B636142
           && v130.__r_.__value_.__l.__size_ == 0x697669746341646ELL;
        BOOL v36 = v35 && v130.__r_.__value_.__r.__words[2] == 0x6F69737365537974;
        if (v36 && LOBYTE(__p[0]) == 110) {
          goto LABEL_130;
        }
      }
      goto LABEL_126;
    }
    if (v130.__r_.__value_.__r.__words[0] == 0x6E6F697461636F4CLL
      && v130.__r_.__value_.__l.__size_ == 0x4C72657461647055
      && *(std::string::size_type *)((char *)&v130.__r_.__value_.__r.__words[1] + 3) == 0x6576694C72657461)
    {
      goto LABEL_130;
    }
  }
  if (HIBYTE(v130.__r_.__value_.__r.__words[2]) == 14)
  {
LABEL_121:
    uint64_t v27 = &v130;
LABEL_122:
    std::string::size_type v42 = v27->__r_.__value_.__r.__words[0];
    uint64_t v43 = *(std::string::size_type *)((char *)v27->__r_.__value_.__r.__words + 6);
    if (v42 != 0x5365636976726553 || v43 != 0x6E6F697373655365) {
      goto LABEL_126;
    }
LABEL_130:
    long long v47 = *(CLConnectionMessage **)a3;
    uint64_t v46 = *(void *)(a3 + 8);
    v129[0] = v47;
    v129[1] = (CLConnectionMessage *)v46;
    if (v46) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
    }
    sub_1007A0718(a1, a2, v129, &v130);
    goto LABEL_133;
  }
  if (HIBYTE(v130.__r_.__value_.__r.__words[2]) == 19)
  {
    BOOL v40 = v130.__r_.__value_.__r.__words[0] == 0x756363416C6C7546
       && v130.__r_.__value_.__l.__size_ == 0x7373655379636172;
    if (v40 && *(std::string::size_type *)((char *)&v130.__r_.__value_.__r.__words[1] + 3) == 0x6E6F697373655379) {
      goto LABEL_130;
    }
  }
LABEL_126:
  if (sub_1000B2020("Monitor", &v130))
  {
    uint64_t v45 = *(CLConnectionMessage **)a3;
    uint64_t v46 = *(void *)(a3 + 8);
    v128[0] = v45;
    v128[1] = (CLConnectionMessage *)v46;
    if (v46) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
    }
    sub_1007A0FD8(a1, a2, v128);
LABEL_133:
    if (v46) {
      sub_1000DB0A0((std::__shared_weak_count *)v46);
    }
    goto LABEL_135;
  }
  if (sub_1000B2020("MotionActivityLite", &v130))
  {
    uint64_t v48 = *(void *)(a3 + 8);
    v126 = *(CLConnectionMessage **)a3;
    uint64_t v127 = v48;
    if (v48) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 8), 1uLL, memory_order_relaxed);
    }
    sub_1007A1364();
  }
  if (sub_1000B2020("InUseAssertion", &v130))
  {
    uint64_t v49 = *(void *)(a3 + 8);
    v124 = *(CLConnectionMessage **)a3;
    uint64_t v125 = v49;
    if (v49) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v49 + 8), 1uLL, memory_order_relaxed);
    }
    sub_100040E58();
  }
  if (sub_1000B2020("LocationIndependenceAssertion", &v130))
  {
    uint64_t v52 = *(void *)(a3 + 8);
    v122 = *(CLConnectionMessage **)a3;
    uint64_t v123 = v52;
    if (v52) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v52 + 8), 1uLL, memory_order_relaxed);
    }
    sub_1007A16F4();
  }
  if (sub_1000B2020("kCLConnectionMessageBBTimeFreqTransferAssert", &v130))
  {
    uint64_t v53 = *(void *)(a3 + 8);
    v120 = *(CLConnectionMessage **)a3;
    uint64_t v121 = v53;
    if (v53) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
    }
    sub_1007A1A84();
  }
  if (sub_1000B2020("kCLConnectionMessageGnssDisablementAssertReq", &v130))
  {
    uint64_t v54 = *(void *)(a3 + 8);
    v118 = *(CLConnectionMessage **)a3;
    uint64_t v119 = v54;
    if (v54) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
    }
    sub_1007A1E14();
  }
  if (sub_1000B2020("kCLConnectionMessageBBGnssStatusQuery", &v130))
  {
    uint64_t v55 = *(void *)(a3 + 8);
    v116 = *(CLConnectionMessage **)a3;
    uint64_t v117 = v55;
    if (v55) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
    }
    sub_1007A21A4();
  }
  if (sub_1000B2020("EmergencyEnablementAssertion", &v130))
  {
    uint64_t v56 = *(void *)(a3 + 8);
    v114 = *(CLConnectionMessage **)a3;
    uint64_t v115 = v56;
    if (v56) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v56 + 8), 1uLL, memory_order_relaxed);
    }
    sub_1007A2534();
  }
  if (sub_1000B2020("kCLConnectionMessageGnssExtensionsClient", &v130))
  {
    uint64_t v57 = *(void *)(a3 + 8);
    v112 = *(CLConnectionMessage **)a3;
    uint64_t v113 = v57;
    if (v57) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v57 + 8), 1uLL, memory_order_relaxed);
    }
    sub_1007A28C4();
  }
  if (sub_1000B2020("LaunchdManagedClients", &v130))
  {
    Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a3);
    id v59 = [Dictionary objectForKeyedSubscript:@"UUID"];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    v60 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      id v61 = [v59 UTF8String];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v61;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"UserEventAgent reached out to locationd with registration message.\", \"UUID\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    if (!*(void *)(a1 + 936))
    {
      *(void *)(a1 + 936) = a2;
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      v62 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        CLConnection::getName((uint64_t *)buf, a2);
        v63 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)v144 = 136446210;
        *(void *)&v144[4] = v63;
        _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "UserEventAgent connected (from %{public}s)", v144, 0xCu);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        CLConnection::getName((uint64_t *)v144, a2);
        if (v145 >= 0) {
          v96 = v144;
        }
        else {
          v96 = *(uint8_t **)v144;
        }
        *(_DWORD *)v142 = 136446210;
        *(void *)&v142[4] = v96;
        v97 = (char *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v145) < 0) {
          operator delete(*(void **)v144);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::handleNewConnectionWithFirstMsg(CLConnection *, std::shared_ptr<CLConnectionMessage>)", "%s\n", v97);
        if (v97 != buf) {
          free(v97);
        }
      }
      CLConnection::start(*(CLConnection **)(a1 + 936));
      goto LABEL_135;
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    v77 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      v78 = v144;
      CLConnection::getName((uint64_t *)v144, *(CLConnection **)(a1 + 936));
      if (v145 < 0) {
        v78 = *(uint8_t **)v144;
      }
      CLConnection::getName((uint64_t *)v142, a2);
      int v79 = v143;
      v80 = *(unsigned char **)v142;
      int RemotePid = CLConnection::getRemotePid(a2);
      v82 = v142;
      *(_DWORD *)buf = 68290563;
      if (v79 < 0) {
        v82 = v80;
      }
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v78;
      *(_WORD *)&unsigned char buf[28] = 2082;
      *(void *)&buf[30] = v82;
      __int16 v134 = 2114;
      v135 = Dictionary;
      __int16 v136 = 1026;
      int v137 = RemotePid;
      __int16 v138 = 2082;
      v139 = "assert";
      __int16 v140 = 2081;
      v141 = "!fUserEventAgentConnection";
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Connection to User Event Agent already exists.\", \"ExistingConnection\":%{public, location:escape_only}s, \"IncomingConnection\":%{public, location:escape_only}s, \"Payload\":%{public, location:escape_only}@, \"PID\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x4Au);
      if (v143 < 0) {
        operator delete(*(void **)v142);
      }
      if (SHIBYTE(v145) < 0) {
        operator delete(*(void **)v144);
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    v83 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      v84 = v144;
      CLConnection::getName((uint64_t *)v144, *(CLConnection **)(a1 + 936));
      if (v145 < 0) {
        v84 = *(uint8_t **)v144;
      }
      CLConnection::getName((uint64_t *)v142, a2);
      int v85 = v143;
      v86 = *(unsigned char **)v142;
      int v87 = CLConnection::getRemotePid(a2);
      v88 = v142;
      *(_DWORD *)buf = 68290563;
      if (v85 < 0) {
        v88 = v86;
      }
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v84;
      *(_WORD *)&unsigned char buf[28] = 2082;
      *(void *)&buf[30] = v88;
      __int16 v134 = 2114;
      v135 = Dictionary;
      __int16 v136 = 1026;
      int v137 = v87;
      __int16 v138 = 2082;
      v139 = "assert";
      __int16 v140 = 2081;
      v141 = "!fUserEventAgentConnection";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v83, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Connection to User Event Agent already exists.", "{\"msg%{public}.0s\":\"Connection to User Event Agent already exists.\", \"ExistingConnection\":%{public, location:escape_only}s, \"IncomingConnection\":%{public, location:escape_only}s, \"Payload\":%{public, location:escape_only}@, \"PID\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x4Au);
      if (v143 < 0) {
        operator delete(*(void **)v142);
      }
      if (SHIBYTE(v145) < 0) {
        operator delete(*(void **)v144);
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    v89 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      v90 = *(CLConnection **)(a1 + 936);
      v91 = v144;
      CLConnection::getName((uint64_t *)v144, v90);
      if (v145 < 0) {
        v91 = *(uint8_t **)v144;
      }
      CLConnection::getName((uint64_t *)v142, a2);
      int v92 = v143;
      v93 = *(unsigned char **)v142;
      int v94 = CLConnection::getRemotePid(a2);
      v95 = v142;
      *(_DWORD *)buf = 68290563;
      if (v92 < 0) {
        v95 = v93;
      }
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v91;
      *(_WORD *)&unsigned char buf[28] = 2082;
      *(void *)&buf[30] = v95;
      __int16 v134 = 2114;
      v135 = Dictionary;
      __int16 v136 = 1026;
      int v137 = v94;
      __int16 v138 = 2082;
      v139 = "assert";
      __int16 v140 = 2081;
      v141 = "!fUserEventAgentConnection";
      _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Connection to User Event Agent already exists.\", \"ExistingConnection\":%{public, location:escape_only}s, \"IncomingConnection\":%{public, location:escape_only}s, \"Payload\":%{public, location:escape_only}@, \"PID\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x4Au);
      if (v143 < 0) {
        operator delete(*(void **)v142);
      }
      if (SHIBYTE(v145) < 0) {
        operator delete(*(void **)v144);
      }
    }
    abort_report_np();
  }
  else
  {
    if (sub_1000B2020("Health", &v130))
    {
      uint64_t v64 = *(void *)(a3 + 8);
      v110 = *(CLConnectionMessage **)a3;
      uint64_t v111 = v64;
      if (v64) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v64 + 8), 1uLL, memory_order_relaxed);
      }
      sub_1007A2C54();
    }
    if (sub_1000B2020("SpringTracking", &v130))
    {
      uint64_t v65 = *(void *)(a3 + 8);
      v108 = *(CLConnectionMessage **)a3;
      uint64_t v109 = v65;
      if (v65) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v65 + 8), 1uLL, memory_order_relaxed);
      }
      sub_1007A2FE4();
    }
    if (sub_1000B2020("DurianManagement", &v130))
    {
      uint64_t v66 = *(void *)(a3 + 8);
      v106 = *(CLConnectionMessage **)a3;
      uint64_t v107 = v66;
      if (v66) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v66 + 8), 1uLL, memory_order_relaxed);
      }
      sub_1007A3374();
    }
    if (sub_1000B2020("DistributedSensing", &v130))
    {
      uint64_t v67 = *(void *)(a3 + 8);
      v104 = *(CLConnectionMessage **)a3;
      uint64_t v105 = v67;
      if (v67) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v67 + 8), 1uLL, memory_order_relaxed);
      }
      sub_1007A3704();
    }
    if (sub_1000B2020("kCLConnectionMessageAudioAccessoryUsageMetricsSubscription", &v130))
    {
      uint64_t v68 = *(void *)(a3 + 8);
      v102 = *(CLConnectionMessage **)a3;
      uint64_t v103 = v68;
      if (v68) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v68 + 8), 1uLL, memory_order_relaxed);
      }
      sub_1007A3A94();
    }
    if (sub_1000B2020("WaterSubmersion", &v130))
    {
      uint64_t v69 = *(void *)(a3 + 8);
      v100 = *(CLConnectionMessage **)a3;
      uint64_t v101 = v69;
      if (v69) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v69 + 8), 1uLL, memory_order_relaxed);
      }
      sub_1007A3E24();
    }
    if (!sub_1000B2020("CoreLocationAgent", &v130))
    {
      if (sub_1000B2020("PedestrianFence", &v130))
      {
        uint64_t v70 = *(void *)(a3 + 8);
        if (v70) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v70 + 8), 1uLL, memory_order_relaxed);
        }
        sub_1007A47F0();
      }
      uint64_t v71 = *(void *)(a3 + 8);
      if (v71) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v71 + 8), 1uLL, memory_order_relaxed);
      }
      sub_10001F7F0();
    }
    CLConnection::getUserName((uint64_t *)v144, a2);
    if (a1 + 872 == sub_10012FFE0(a1 + 864, (const void **)v144))
    {
      if (SHIBYTE(v145) < 0)
      {
        sub_1000DC48C(&v98, *(void **)v144, *(unint64_t *)&v144[8]);
      }
      else
      {
        long long v98 = *(_OWORD *)v144;
        uint64_t v99 = v145;
      }
      CLConnection::setDefaultMessageHandler();
      if (SHIBYTE(v145) < 0)
      {
        sub_1000DC48C(buf, *(void **)v144, *(unint64_t *)&v144[8]);
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)v144;
        *(void *)&buf[16] = v145;
      }
      *(void *)&buf[24] = a2;
      sub_1007E4398((uint64_t **)(a1 + 864), (const void **)buf, (uint64_t)buf);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      CLConnection::start(a2);
      if (qword_102419530 == -1) {
        goto LABEL_233;
      }
      goto LABEL_290;
    }
    sub_101A6D2E4();
    abort_report_np();
  }
  __break(1u);
LABEL_290:
  dispatch_once(&qword_102419530, &stru_1022C9768);
LABEL_233:
  v72 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    int v73 = SHIBYTE(v145);
    v74 = *(uint8_t **)v144;
    CLConnection::getName((uint64_t *)v142, a2);
    v75 = v144;
    if (v73 < 0) {
      v75 = v74;
    }
    if (v143 >= 0) {
      v76 = v142;
    }
    else {
      v76 = *(unsigned char **)v142;
    }
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = v75;
    *(_WORD *)&unsigned char buf[28] = 2082;
    *(void *)&buf[30] = v76;
    _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CoreLocationAgent connected\", \"User\":%{public, location:escape_only}s, \"Connection\":%{public, location:escape_only}s}", buf, 0x26u);
    if (v143 < 0) {
      operator delete(*(void **)v142);
    }
  }
  if (SHIBYTE(v99) < 0) {
    operator delete((void *)v98);
  }
  if (SHIBYTE(v145) < 0) {
    operator delete(*(void **)v144);
  }
LABEL_135:
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v130.__r_.__value_.__l.__data_);
  }
  if ((char)v132 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000B1E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a64 < 0) {
    operator delete(__p);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1000B2020(const char *a1, void *a2)
{
  size_t v4 = strlen(a1);
  if (*((char *)a2 + 23) < 0)
  {
    if (v4 == a2[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a2 = (void *)*a2;
      return memcmp(a2, a1, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a2 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      sub_1002E93D4();
    return memcmp(a2, a1, v4) == 0;
  }
  return 0;
}

void sub_1000B20B0()
{
}

void sub_1000B2334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000B2378(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 72);
}

uint64_t **sub_1000B2380(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        int v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    int64_t v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + 2) = *a3;
    sub_1000EDF90(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_1000B243C(uint64_t a1, CLConnection *a2, uint64_t a3, void *a4, void *a5)
{
  *(void *)a1 = off_1022E9D30;
  *(void *)(a1 + 8) = &off_1022E9E08;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = [a4 silo];
  *(void *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 71) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 112) = (id)sub_1000B66B8(4);
  *(unsigned char *)(a1 + 120) = 1;
  *(void *)(a1 + 128) = a1 + 128;
  *(void *)(a1 + 136) = a1 + 128;
  *(void *)(a1 + 144) = 0;
  uint64_t v8 = objc_opt_new();
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 168) = a1 + 176;
  *(void *)(a1 + 152) = v8;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 184) = 0;
  *(_WORD *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 194) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 196) = 0;
  *(unsigned char *)(a1 + 204) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = a2;
  *(void *)(a1 + 272) = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(unsigned char *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 320) = 1065353216;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 360) = 1065353216;
  *(_DWORD *)(a1 + 368) = 65537;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = off_1022B6DB8;
  unint64_t v9 = operator new(0x20uLL);
  v9[1] = 0;
  v9[2] = 0;
  *unint64_t v9 = off_1022B6DF0;
  *((_DWORD *)v9 + 6) = 31337;
  *(void *)(a1 + 408) = v9 + 3;
  *(void *)(a1 + 416) = v9;
  int64_t v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonClient(ctor)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v10, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v11 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v21 = 2082;
    uint64_t v22 = "";
    __int16 v23 = 2082;
    long long v24 = "activity";
    __int16 v25 = 2050;
    id v26 = (const char *)a1;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonClient(ctor)\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022EA328);
  }
  BOOL v12 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68290562;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v21 = 2082;
    uint64_t v22 = "";
    __int16 v23 = 2082;
    long long v24 = "state_transition";
    __int16 v25 = 2082;
    id v26 = "DaemonClient";
    __int16 v27 = 2050;
    __int16 v29 = 2082;
    uint64_t v28 = a1;
    uint64_t v30 = "lifecycle";
    __int16 v31 = 2050;
    uint64_t v32 = 0;
    __int16 v33 = 2050;
    uint64_t v34 = a1;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"state transition\", \"event\":%{public, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"id\":\"%{public}p\", \"property\":%{public, location:escape_only}s, \"old\":\"%{public}p\", \"new\":\"%{public}p\"}", buf, 0x4Eu);
  }
  *(_DWORD *)(a1 + 272) = CLConnection::getRemotePid(a2);
  sub_1000B6214();
  CLConnection::start(*(CLConnection **)(a1 + 264));
  sub_1000B2DE8(a1, a5);
  if (!sub_1000B5ECC(*(unsigned int *)(a1 + 272))) {
    goto LABEL_22;
  }
  sub_100134750(buf, "com.apple.locationd.prompt_from_background");
  int v13 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)a1 + 40))(a1, buf);
  int v14 = v13;
  if (SBYTE3(v24) < 0)
  {
    operator delete(*(void **)buf);
    if (v14)
    {
LABEL_12:
      *(unsigned char *)(a1 + 368) = 1;
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EA308);
      }
      uint64_t v15 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
      {
        int v16 = *(const char **)(a1 + 48);
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v21 = 2082;
        uint64_t v22 = "";
        __int16 v23 = 2114;
        long long v24 = v16;
        __int16 v25 = 2050;
        id v26 = (const char *)a1;
        __int16 v27 = 1026;
        LODWORD(v28) = 1;
        __int16 v17 = "{\"msg%{public}.0s\":\"#widgetkit entitled to show location prompts\", \"ClientKeyPath\":%{public, locatio"
              "n:escape_only}@, \"this\":\"%{public}p\", \"isWidgetKitExtension:\":%{public}hhd}";
LABEL_21:
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, v17, buf, 0x2Cu);
        goto LABEL_22;
      }
      goto LABEL_22;
    }
  }
  else if (v13)
  {
    goto LABEL_12;
  }
  *(unsigned char *)(a1 + 368) = 0;
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v15 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    uint64_t v18 = *(const char **)(a1 + 48);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v21 = 2082;
    uint64_t v22 = "";
    __int16 v23 = 2114;
    long long v24 = v18;
    __int16 v25 = 2050;
    id v26 = (const char *)a1;
    __int16 v27 = 1026;
    LODWORD(v28) = 1;
    __int16 v17 = "{\"msg%{public}.0s\":\"#widgetkit location prompts disabled\", \"ClientKeyPath\":%{public, location:escape_onl"
          "y}@, \"this\":\"%{public}p\", \"isWidgetKitExtension:\":%{public}hhd}";
    goto LABEL_21;
  }
LABEL_22:
  sub_1000B2B24(a1);
}

void sub_1000B29C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t *a10, os_activity_scope_state_s state, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  os_activity_scope_leave(&state);
  sub_10012E38C(a9);
  sub_10017FBB4(v18 + 160);
  sub_10017F9A8(v19);
  uint64_t v23 = v17[30];
  v17[30] = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = v17[29];
  v17[29] = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = v17[28];
  v17[28] = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = v17[27];
  v17[27] = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = *v21;
  uint64_t *v21 = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  sub_1000DB264(v18, *v20);
  sub_10017FF2C(a10);
  _Unwind_Resume(a1);
}

void sub_1000B2B24(uint64_t a1)
{
  uint64_t v2 = [[CLDaemonClientAdapter alloc] initWithDaemonClient:a1];
  *(void *)(a1 + 40) = v2;
  [(CLDaemonClientAdapter *)v2 setValid:1];
  sub_1000B2C0C();
}

void sub_1000B2C0C()
{
}

void sub_1000B2CC8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_1000B2D04(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_1022BE108;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    BOOL v12 = a3;
  }
  else {
    BOOL v12 = (uint64_t *)*a3;
  }
  id v13 = [[objc_msgSend(a4, "vendor") proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

void sub_1000B2DE8(uint64_t a1, void *a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  long long v155 = 0u;
  long long v156 = 0u;
  CLConnection::getAuditToken((uint64_t *)&v155, *(CLConnection **)(a1 + 264));
  long long v153 = v155;
  long long v154 = v156;
  int v5 = sub_1000B5784();
  if (![(CLClientKeyPath *)v5 isValidCKP])
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    uint64_t v6 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_ERROR))
    {
      int v7 = *(_DWORD *)(a1 + 272);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Couldn't get information from PID for DaemonClient registration. Defaulting natural identity to nullCKP.\", \"pid\":%{public}u}", buf, 0x18u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EA308);
      }
    }
    uint64_t v8 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      int v9 = *(_DWORD *)(a1 + 272);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v9;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get information from PID for DaemonClient registration. Defaulting natural identity to nullCKP.", "{\"msg%{public}.0s\":\"Couldn't get information from PID for DaemonClient registration. Defaulting natural identity to nullCKP.\", \"pid\":%{public}u}", buf, 0x18u);
    }
  }
  if (a2)
  {
    char v143 = [(CLClientKeyPath *)v5 bundleId];
    int64_t v10 = (CLClientKeyPath *)sub_1000B5598(*(void *)(a1 + 16), (uint64_t)v5);
    unsigned int v11 = [(CLClientKeyPath *)v10 isValidCKP];
    char v12 = v11;
    if (v11) {
      id v13 = v10;
    }
    else {
      id v13 = v5;
    }
    unint64_t v144 = (unint64_t)[a2 objectForKeyedSubscript:@"kCLConnectionMessageBundleIdentifierKey"];
    unint64_t v14 = (unint64_t)[a2 objectForKeyedSubscript:@"kCLConnectionMessageBundlePathKey"];
    if ([a2 objectForKey:@"kCLConnectionMessageClientSDKKey"])
    {
      unsigned int v15 = [[objc_msgSend(a2, "objectForKeyedSubscript:", @"kCLConnectionMessageClientSDKKey") unsignedIntValue];
      *(unsigned char *)(a1 + 192) = (v15 & 0xFFF80000) != 0;
      *(unsigned char *)(a1 + 193) = HIWORD(v15) > 0xAu;
      BOOL v16 = v15 > 0xCFFFF;
    }
    else
    {
      *(unsigned char *)(a1 + 192) = [[objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", @"kCLConnectionMessageClientSDKAtLeast2014Key"), "unsignedIntValue") unsignedIntValue] != 0;
      *(unsigned char *)(a1 + 193) = [[objc_msgSend(a2, "objectForKeyedSubscript:", @"kCLConnectionMessageClientSDKAtLeast2017Key") unsignedIntValue] != 0;
      BOOL v16 = [[objc_msgSend(a2, "objectForKeyedSubscript:", @"kCLConnectionMessageClientSDKAtLeast2019Key") unsignedIntValue] != 0;
    }
    *(unsigned char *)(a1 + 194) = v16;
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    uint64_t v18 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = *(unsigned __int8 *)(a1 + 192);
      int v20 = *(unsigned __int8 *)(a1 + 193);
      int v21 = *(unsigned __int8 *)(a1 + 194);
      *(_DWORD *)buf = 68290050;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(void *)&buf[20] = v13;
      *(_WORD *)&unsigned char buf[28] = 1026;
      *(_DWORD *)&buf[30] = v19;
      *(_WORD *)&buf[34] = 1026;
      *(_DWORD *)&buf[36] = v20;
      *(_WORD *)&buf[40] = 1026;
      *(_DWORD *)&buf[42] = v21;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"client sdk\", \"NaturalKeyPath\":%{public, location:escape_only}@, \"sdkAtLeast2014?\":%{public}hhd, \"sdkAtLeast2017?\":%{public}hhd, \"sdkAtLeast2019?\":%{public}hhd}", buf, 0x2Eu);
    }
    uint64_t v145 = a1;
    if (!(v144 | v14)) {
      goto LABEL_41;
    }
    sub_100134750(buf, "com.apple.locationd.effective_bundle");
    char v22 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 40))(a1, buf);
    char v23 = v22;
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if (v23)
      {
LABEL_28:
        if (v14)
        {
          unint64_t v24 = v144;
          id v25 = [(id)v14 stringByResolvingSymlinksInPath];
          if (v144) {
            unsigned int v26 = [[[objc_msgSend(*(id *)(a1 + 24), "vendor") proxyForService:@"CLAppMonitor"] syncgetIsApplicationInstalledLocally:v144];
          }
          else {
            unsigned int v26 = 1;
          }
          id v61 = +[NSURL fileURLWithPath:v25 isDirectory:1];
          if (([(NSURL *)v61 checkResourceIsReachableAndReturnError:0] & v26) != 1)
          {
LABEL_230:
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022EA308);
            }
            uint64_t v113 = qword_102419528;
            if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 68289794;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)&uint8_t buf[8] = 2082;
              *(void *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2114;
              *(void *)&buf[20] = v13;
              *(_WORD *)&unsigned char buf[28] = 2114;
              *(void *)&buf[30] = v25;
              *(_WORD *)&unsigned char buf[38] = 2114;
              *(void *)&buf[40] = v24;
              _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Failed bundle-path masquerading attempt\", \"NaturalKeyPath\":%{public, location:escape_only}@, \"NewBundlePath\":%{public, location:escape_only}@, \"NewLimitingBundleId\":%{public, location:escape_only}@}", buf, 0x30u);
              if (qword_102419520 != -1) {
                dispatch_once(&qword_102419520, &stru_1022EA308);
              }
            }
            v114 = qword_102419528;
            if (os_signpost_enabled((os_log_t)qword_102419528))
            {
              *(_DWORD *)buf = 68289794;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)&uint8_t buf[8] = 2082;
              *(void *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2114;
              *(void *)&buf[20] = v13;
              *(_WORD *)&unsigned char buf[28] = 2114;
              *(void *)&buf[30] = v25;
              *(_WORD *)&unsigned char buf[38] = 2114;
              *(void *)&buf[40] = v24;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v114, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed bundle-path masquerading attempt", "{\"msg%{public}.0s\":\"Failed bundle-path masquerading attempt\", \"NaturalKeyPath\":%{public, location:escape_only}@, \"NewBundlePath\":%{public, location:escape_only}@, \"NewLimitingBundleId\":%{public, location:escape_only}@}", buf, 0x30u);
            }
LABEL_37:
            BOOL v29 = 0;
            int v30 = 0;
            CFBundleRef v31 = 0;
            unsigned int v146 = 1;
            goto LABEL_52;
          }
          CLConnection::getAuditToken(v152, *(CLConnection **)(a1 + 264));
          v147 = +[NSBundle bundleWithURL:v61];
          sub_1000B73FC();
          if (v158 >= 0) {
            v62 = __p;
          }
          else {
            v62 = (void **)__p[0];
          }
          id v140 = v4;
          int v137 = +[NSString stringWithUTF8String:v62];
          id v63 = [(NSBundle *)v147 objectForInfoDictionaryKey:@"CLSystemServiceRadars"];
          id v142 = v25;
          v139 = v13;
          __int16 v138 = v61;
          if (v63 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          {
            long long v172 = 0u;
            long long v173 = 0u;
            memset(v171, 0, sizeof(v171));
            uint64_t v64 = (char *)[v63 countByEnumeratingWithState:v171 objects:buf count:16];
            if (v64)
            {
              uint64_t v65 = *(void *)v171[2];
              do
              {
                uint64_t v66 = 0;
                do
                {
                  if (*(void *)v171[2] != v65) {
                    objc_enumerationMutation(v63);
                  }
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) == 0)
                  {
                    if (qword_102419530 != -1) {
                      dispatch_once(&qword_102419530, &stru_1022EA328);
                    }
                    uint64_t v67 = qword_102419538;
                    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t v68 = [(NSBundle *)v147 bundlePath];
                      uint64_t v162 = 68289539;
                      __int16 v163 = 2082;
                      v164 = "";
                      __int16 v165 = 2113;
                      v166 = v68;
                      __int16 v167 = 2113;
                      v168 = (const char *)v63;
                      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationPrivacy System Service's CLSystemServiceRadars key does not only include radar numbers.\", \"Bundle\":%{private, location:escape_only}@, \"RadarsArray\":%{private, location:escape_only}@}", (uint8_t *)&v162, 0x26u);
                    }
                  }
                  ++v66;
                }
                while (v64 != v66);
                uint64_t v64 = (char *)[v63 countByEnumeratingWithState:v171 objects:buf count:16];
              }
              while (v64);
            }
          }
          else
          {
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022EA328);
            }
            v86 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
            {
              int v87 = [(NSBundle *)v147 bundlePath];
              *(_DWORD *)buf = 68289283;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)&uint8_t buf[8] = 2082;
              *(void *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2113;
              *(void *)&buf[20] = v87;
              _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationPrivacy System Service has no listed radars\", \"Bundle\":%{private, location:escape_only}@}", buf, 0x1Cu);
            }
          }
          id v4 = v140;
          id v13 = v139;
          unint64_t v24 = v144;
          CFURLRef v88 = (const __CFURL *)v138;
          if (sub_1001024C0([(NSBundle *)v147 bundlePath])
            && ![(NSBundle *)v147 objectForInfoDictionaryKey:@"CLSystemService"])
          {
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022EA328);
            }
            v89 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
            {
              v90 = [(NSBundle *)v147 bundlePath];
              uint64_t v162 = 68289283;
              __int16 v163 = 2082;
              v164 = "";
              __int16 v165 = 2113;
              v166 = v90;
              _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationPrivacy Bundle for LocationdInternalSystemService not marked as SystemService.\", \"Bundle\":%{private, location:escape_only}@}", (uint8_t *)&v162, 0x1Cu);
            }
          }
          v91 = [(NSBundle *)v147 objectForInfoDictionaryKey:@"CLEligibleMasqueraders"];
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022EA308);
          }
          int v92 = qword_102419528;
          if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
          {
            v93 = [(NSString *)[(NSBundle *)v147 bundlePath] UTF8String];
            uint64_t v162 = 68289539;
            __int16 v163 = 2082;
            v164 = "";
            __int16 v165 = 2113;
            v166 = v91;
            __int16 v167 = 2081;
            v168 = v93;
            _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLEligibleMasqueraders for bundle\", \"EligibleMasqueraders\":%{private, location:escape_only}@, \"Bundle\":%{private, location:escape_only}s}", (uint8_t *)&v162, 0x26u);
          }
          if (v91 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          {
            if (([(NSString *)v91 containsObject:v137] & 1) == 0)
            {
              if (qword_102419520 != -1) {
                dispatch_once(&qword_102419520, &stru_1022EA308);
              }
              int v94 = qword_102419528;
              if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
              {
                v95 = [(NSString *)[(NSBundle *)v147 bundlePath] UTF8String];
                v96 = v158 >= 0 ? __p : (void **)__p[0];
                v97 = [+[NSString stringWithUTF8String:v96] UTF8String];
                long long v98 = [[(NSString *)v91 description] UTF8String];
                uint64_t v162 = 68289794;
                __int16 v163 = 2082;
                v164 = "";
                __int16 v165 = 2082;
                v166 = (NSString *)v95;
                __int16 v167 = 2082;
                v168 = v97;
                __int16 v169 = 2082;
                v170 = v98;
                _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid masquerader for bundle\", \"Bundle\":%{public, location:escape_only}s, \"Client ProcessPath\":%{public, location:escape_only}s, \"EligibleMasqueraders for bundle\":%{public, location:escape_only}s}", (uint8_t *)&v162, 0x30u);
                id v25 = v142;
                CFURLRef v88 = (const __CFURL *)v138;
                if (qword_102419520 != -1) {
                  dispatch_once(&qword_102419520, &stru_1022EA308);
                }
              }
              uint64_t v99 = qword_102419528;
              if (os_signpost_enabled((os_log_t)qword_102419528))
              {
                CFURLRef v100 = v88;
                uint64_t v101 = [(NSString *)[(NSBundle *)v147 bundlePath] UTF8String];
                if (v158 >= 0) {
                  v102 = __p;
                }
                else {
                  v102 = (void **)__p[0];
                }
                uint64_t v103 = [+[NSString stringWithUTF8String:v102] UTF8String];
                v104 = [[(NSString *)v91 description] UTF8String];
                uint64_t v162 = 68289794;
                __int16 v163 = 2082;
                v164 = "";
                __int16 v165 = 2082;
                v166 = (NSString *)v101;
                __int16 v167 = 2082;
                v168 = v103;
                __int16 v169 = 2082;
                v170 = v104;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v99, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid masquerader for bundle", "{\"msg%{public}.0s\":\"Invalid masquerader for bundle\", \"Bundle\":%{public, location:escape_only}s, \"Client ProcessPath\":%{public, location:escape_only}s, \"EligibleMasqueraders for bundle\":%{public, location:escape_only}s}", (uint8_t *)&v162, 0x30u);
                int v105 = 0;
                id v25 = v142;
                CFURLRef v88 = v100;
              }
              else
              {
                int v105 = 0;
              }
LABEL_219:
              if (v158 < 0) {
                operator delete(__p[0]);
              }
              if (v105)
              {
                id v108 = sub_100103D58(*(void *)(a1 + 16), (uint64_t)+[CLClientKeyPath clientKeyPathWithClientAnchor:v25 anchorType:112]);
                if (v144)
                {
                  id v109 = sub_100103D58(*(void *)(a1 + 16), (uint64_t)+[CLClientKeyPath clientKeyPathWithClientAnchor:v144 anchorType:105]);
                  if (([v109 isValidCKP] & 1) == 0)
                  {
                    if (qword_102419520 != -1) {
                      dispatch_once(&qword_102419520, &stru_1022EA308);
                    }
                    uint64_t v127 = qword_102419528;
                    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 68289794;
                      *(_DWORD *)&uint8_t buf[4] = 0;
                      *(_WORD *)&uint8_t buf[8] = 2082;
                      *(void *)&buf[10] = "";
                      *(_WORD *)&buf[18] = 2114;
                      *(void *)&buf[20] = v139;
                      *(_WORD *)&unsigned char buf[28] = 2114;
                      *(void *)&buf[30] = v25;
                      *(_WORD *)&unsigned char buf[38] = 2114;
                      *(void *)&buf[40] = v144;
                      _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed auth-limited masquerading attempt; effectiveBundleIdentifier faile"
                        "d to register, but didn't we just check that it's installed??\", \"NaturalKeyPath\":%{public, lo"
                        "cation:escape_only}@, \"effectiveBundlePath\":%{public, location:escape_only}@, \"effectiveBundl"
                        "eIdentifier\":%{public, location:escape_only}@}",
                        buf,
                        0x30u);
                      if (qword_102419520 != -1) {
                        dispatch_once(&qword_102419520, &stru_1022EA308);
                      }
                    }
                    v128 = qword_102419528;
                    if (os_signpost_enabled((os_log_t)qword_102419528))
                    {
                      *(_DWORD *)buf = 68289794;
                      *(_DWORD *)&uint8_t buf[4] = 0;
                      *(_WORD *)&uint8_t buf[8] = 2082;
                      *(void *)&buf[10] = "";
                      *(_WORD *)&buf[18] = 2114;
                      *(void *)&buf[20] = v139;
                      *(_WORD *)&unsigned char buf[28] = 2114;
                      *(void *)&buf[30] = v25;
                      *(_WORD *)&unsigned char buf[38] = 2114;
                      *(void *)&buf[40] = v144;
                      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v128, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed auth-limited masquerading attempt; effectiveBundleIdentifier failed to register, but didn"
                        "'t we just check that it's installed??",
                        "{\"msg%{public}.0s\":\"Failed auth-limited masquerading attempt; effectiveBundleIdentifier faile"
                        "d to register, but didn't we just check that it's installed??\", \"NaturalKeyPath\":%{public, lo"
                        "cation:escape_only}@, \"effectiveBundlePath\":%{public, location:escape_only}@, \"effectiveBundl"
                        "eIdentifier\":%{public, location:escape_only}@}",
                        buf,
                        0x30u);
                    }
                    unsigned int v146 = 0;
                    int v30 = 0;
                    goto LABEL_278;
                  }
                  id v108 = sub_100103D58(*(void *)(a1 + 16), (uint64_t)+[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:subIdentityId:subIdentityType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:subIdentityId:subIdentityType:", [v109 bundleId], 108, v25, 112));
                }
                uint64_t v110 = (uint64_t)v108;
                unsigned int v146 = v144 == 0;
                if (qword_102419520 != -1) {
                  dispatch_once(&qword_102419520, &stru_1022EA308);
                }
                uint64_t v111 = qword_102419528;
                if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
                {
                  unsigned int v112 = sub_1000B558C(*(void *)(a1 + 16), v110);
                  *(_DWORD *)buf = 68289794;
                  *(_DWORD *)&uint8_t buf[4] = 0;
                  *(_WORD *)&uint8_t buf[8] = 2082;
                  *(void *)&buf[10] = "";
                  *(_WORD *)&buf[18] = 2114;
                  *(void *)&buf[20] = v139;
                  *(_WORD *)&unsigned char buf[28] = 2114;
                  *(void *)&buf[30] = v110;
                  *(_WORD *)&unsigned char buf[38] = 1026;
                  *(_DWORD *)&buf[40] = v112;
                  _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Client is setting effective bundle path\", \"NaturalKeyPath\":%{public, location:escape_only}@, \"MasqueradingKeyPath\":%{public, location:escape_only}@, \"SystemService\":%{public}hhd}", buf, 0x2Cu);
                }
                int v30 = 1;
                id v13 = (CLClientKeyPath *)v110;
LABEL_278:
                CFBundleRef v31 = CFBundleCreate(kCFAllocatorDefault, v88);
                BOOL v29 = 0;
                *(unsigned char *)(a1 + 104) = 1;
                goto LABEL_52;
              }
              goto LABEL_230;
            }
          }
          else
          {
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022EA328);
            }
            v106 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v107 = [(NSBundle *)v147 bundlePath];
              uint64_t v162 = 68289539;
              __int16 v163 = 2082;
              v164 = "";
              __int16 v165 = 2113;
              v166 = v107;
              __int16 v167 = 2113;
              v168 = (const char *)v137;
              _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationPrivacy Masquerading bundle has no EligibleMasqueraders\", \"Bundle\":%{private, location:escape_only}@, \"Masquerader\":%{private, location:escape_only}@}", (uint8_t *)&v162, 0x26u);
            }
          }
          int v105 = 1;
          goto LABEL_219;
        }
        if (v144)
        {
          uint64_t v32 = (CLClientKeyPath *)sub_100103D58(*(void *)(a1 + 16), (uint64_t)+[CLClientKeyPath clientKeyPathWithClientAnchor:v144 anchorType:105]);
          if ([(CLClientKeyPath *)v10 isValidCKP])
          {
            int v5 = v13;
          }
          else
          {
            uint64_t v115 = (CLClientKeyPath *)sub_1000B5598(*(void *)(a1 + 16), (uint64_t)v13);
            if ([(CLClientKeyPath *)v115 isValidCKP]) {
              int v5 = v115;
            }
            else {
              int v5 = v13;
            }
          }
          id v13 = v32;
          if ([(CLClientKeyPath *)v5 isValidCKP]) {
            unsigned int v146 = [(NSString *)[(CLClientKeyPath *)v32 bundleId] isEqualToString:[(CLClientKeyPath *)v5 bundleId]];
          }
          else {
            unsigned int v146 = 0;
          }
          v116 = [(CLClientKeyPath *)v32 bundleId];
          if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", @"CLAppMonitor"), "syncgetIsApplicationInstalledLocally:", v116))
          {
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022EA308);
            }
            uint64_t v117 = qword_102419528;
            if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
            {
              v118 = [(CLClientKeyPath *)v5 bundleId];
              uint64_t v119 = [(CLClientKeyPath *)v13 bundleId];
              *(_DWORD *)buf = 68289794;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)&uint8_t buf[8] = 2082;
              *(void *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2114;
              *(void *)&buf[20] = v118;
              *(_WORD *)&unsigned char buf[28] = 2114;
              *(void *)&buf[30] = v119;
              *(_WORD *)&unsigned char buf[38] = 1026;
              *(_DWORD *)&buf[40] = v146;
              _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Client is setting effective bundle identifier\", \"NaturalBundleId\":%{public, location:escape_only}@, \"MasqueradingBundleId\":%{public, location:escape_only}@, \"shouldAuthSlide\":%{public}hhd}", buf, 0x2Cu);
            }
            CFStringRef v120 = (const __CFString *)sub_101209378(v116);
            if (v120)
            {
              CFURLRef v121 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v120, kCFURLPOSIXPathStyle, 0);
              if (v121)
              {
                CFBundleRef v31 = CFBundleCreate(kCFAllocatorDefault, v121);
                CFRelease(v121);
                BOOL v29 = 0;
              }
              else
              {
                BOOL v29 = 0;
                CFBundleRef v31 = 0;
              }
            }
            else
            {
              int HasPrefix = CFStringHasPrefix(v116, @"com.apple.webapp-");
              CFBundleRef v31 = 0;
              BOOL v29 = HasPrefix != 0;
            }
            int v30 = 1;
            *(unsigned char *)(a1 + 104) = 1;
LABEL_52:
            id v34 = sub_1000B59AC(*(void *)(a1 + 16), (uint64_t)v13);
            if ([objc_msgSend(objc_msgSend(v34, "arrayForKey:defaultValue:", @"PluginBundleIds", 0), "containsObject:", v143])*(void *)(a1 + 96) = v143; {
            *(unsigned char *)(a1 + 90) = [v34 BOOLForKey:@"IsAppClip" defaultValue:0];
            }
            *(unsigned char *)(a1 + 74) = [v34 BOOLForKey:@"DefaultAccuracyReduced" defaultValue:0];
            *(unsigned char *)(a1 + 73) = [v34 BOOLForKey:@"AuthRequestsDisabled" defaultValue:0];
            unsigned int v36 = sub_1000B558C(*(void *)(a1 + 16), (uint64_t)v13);
            *(unsigned char *)(a1 + 91) = v36;
            if (v30 && !*(unsigned char *)(a1 + 104))
            {
              if (!*(void *)(a1 + 96)) {
                goto LABEL_67;
              }
              if (qword_102419520 != -1) {
                dispatch_once(&qword_102419520, &stru_1022EA308);
              }
              int v37 = qword_102419528;
              if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138543362;
                *(void *)&uint8_t buf[4] = v13;
                _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Client '%{public}@' is a plugin, auto-masquerading as its containing app", buf, 0xCu);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419520 != -1) {
                  dispatch_once(&qword_102419520, &stru_1022EA308);
                }
                LODWORD(v171[0]) = 138543362;
                *(void *)((char *)v171 + 4) = v13;
                std::string v130 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::processRegistration(NSDictionary *)", "%s\n", v130);
                if (v130 != buf) {
                  free(v130);
                }
              }
              if (sub_1000B5ECC(*(unsigned int *)(a1 + 272))
                && (__int16 v38 = *(void **)(a1 + 96)) != 0
                && (id v35 = sub_1001BEA24(v38)) != 0)
              {
                id v39 = +[NSBundle bundleWithURL:v35];
                if (v39)
                {
                  int v30 = 1;
                }
                else
                {
                  if (qword_102419530 != -1) {
                    dispatch_once(&qword_102419530, &stru_1022EA328);
                  }
                  v124 = qword_102419538;
                  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
                  {
                    *(_DWORD *)buf = 68289282;
                    *(_DWORD *)&uint8_t buf[4] = 0;
                    *(_WORD *)&uint8_t buf[8] = 2082;
                    *(void *)&buf[10] = "";
                    *(_WORD *)&buf[18] = 2114;
                    *(void *)&buf[20] = v13;
                    _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Avocado couldn't get bundle for client\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
                    if (qword_102419530 != -1) {
                      dispatch_once(&qword_102419530, &stru_1022EA328);
                    }
                  }
                  uint64_t v125 = qword_102419538;
                  if (os_signpost_enabled((os_log_t)qword_102419538))
                  {
                    *(_DWORD *)buf = 68289282;
                    *(_DWORD *)&uint8_t buf[4] = 0;
                    *(_WORD *)&uint8_t buf[8] = 2082;
                    *(void *)&buf[10] = "";
                    *(_WORD *)&buf[18] = 2114;
                    *(void *)&buf[20] = v13;
                    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v125, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Avocado couldn't get bundle for client", "{\"msg%{public}.0s\":\"#Avocado couldn't get bundle for client\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
                  }
                  int v30 = 0;
                }
                if ((sub_1004BF7A8(v39) & 1) == 0)
                {
                  if (qword_102419530 != -1) {
                    dispatch_once(&qword_102419530, &stru_1022EA328);
                  }
                  v126 = qword_102419538;
                  int v30 = 0;
                  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 68289282;
                    *(_DWORD *)&uint8_t buf[4] = 0;
                    *(_WORD *)&uint8_t buf[8] = 2082;
                    *(void *)&buf[10] = "";
                    *(_WORD *)&buf[18] = 2114;
                    *(void *)&buf[20] = v13;
                    _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #Avocado client did not set NSWidgetWantsLocation key in their info.plist\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
                    int v30 = 0;
                  }
                }
              }
              else
              {
LABEL_67:
                int v30 = 1;
              }
              BOOL v40 = [(CLClientKeyPath *)v13 bundleId];
              sub_100103240();
              if (!sub_10010145C()) {
                goto LABEL_73;
              }
              uint64_t v41 = *(void **)(a1 + 96);
              if (!v41) {
                goto LABEL_73;
              }
              sub_100134750(buf, (char *)[v41 UTF8String]);
              BOOL v42 = sub_1012098A8((uint64_t **)buf);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
              BOOL v40 = *(NSString **)(a1 + 96);
              if (!v42)
              {
                CFBundleRef v31 = sub_101209404(*(void **)(a1 + 96));
                if (!v31)
                {
                  if (qword_102419520 != -1) {
                    dispatch_once(&qword_102419520, &stru_1022EA308);
                  }
                  v60 = qword_102419528;
                  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 68289282;
                    *(_DWORD *)&uint8_t buf[4] = 0;
                    *(_WORD *)&uint8_t buf[8] = 2082;
                    *(void *)&buf[10] = "";
                    *(_WORD *)&buf[18] = 2114;
                    *(void *)&buf[20] = v13;
                    _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Could not find placeholder bundle for client\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
                  }
                  CFBundleRef v31 = 0;
                }
              }
              else
              {
LABEL_73:
                CFURLRef v43 = (const __CFURL *)sub_1001BEA24(v40);
                if (v43) {
                  CFBundleRef v31 = CFBundleCreate(kCFAllocatorDefault, v43);
                }
              }
            }
            id v44 = [[[a2 objectForKeyedSubscript:@"kCLConnectionMessageSubidentityKey"] stringByReplacingOccurrencesOfString:@":" withString:@"-"]
            if (v44)
            {
              uint64_t v45 = v13;
              if (qword_102419520 != -1) {
                dispatch_once(&qword_102419520, &stru_1022EA308);
              }
              uint64_t v46 = qword_102419528;
              if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 68289538;
                *(_DWORD *)&uint8_t buf[4] = 0;
                *(_WORD *)&uint8_t buf[8] = 2082;
                *(void *)&buf[10] = "";
                *(_WORD *)&buf[18] = 2114;
                *(void *)&buf[20] = v45;
                *(_WORD *)&unsigned char buf[28] = 2114;
                *(void *)&buf[30] = v44;
                _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"registering website daemon client\", \"ClientKeyPath\":%{public, location:escape_only}@, \"website\":%{public, location:escape_only}@}", buf, 0x26u);
              }
              id v13 = [(CLClientKeyPath *)v45 clientKeyPathWithReplacementSubIdentityId:v44 subIdentityType:119];
            }
            sub_1000B5F64(a1, v13);
            if (*(void *)(a1 + 48)) {
              int v47 = v30;
            }
            else {
              int v47 = 0;
            }
            *(void *)(a1 + 80) = 0;
            sub_1000B59B8(a1);
            if (*(unsigned char *)(a1 + 104) && !v31)
            {
              if (v29)
              {
                *(void *)(a1 + 80) = 3;
              }
              else
              {
                if (qword_102419530 != -1) {
                  dispatch_once(&qword_102419530, &stru_1022EA328);
                }
                uint64_t v55 = qword_102419538;
                if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
                {
                  uint64_t v56 = *(void *)(a1 + 48);
                  *(_DWORD *)buf = 138543362;
                  *(void *)&uint8_t buf[4] = v56;
                  _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_FAULT, "Could not access bundle for masquerading client %{public}@", buf, 0xCu);
                }
                if (sub_10013D1A0(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419530 != -1) {
                    dispatch_once(&qword_102419530, &stru_1022EA328);
                  }
                  uint64_t v133 = *(void *)(a1 + 48);
                  LODWORD(v171[0]) = 138543362;
                  *(void *)((char *)v171 + 4) = v133;
                  __int16 v134 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::processRegistration(NSDictionary *)", "%s\n", v134);
                  if (v134 != buf) {
                    free(v134);
                  }
                }
              }
              uint64_t v57 = 0;
              v171[0] = 0;
              if (!v47)
              {
                int v58 = 0;
LABEL_172:
                sub_1000B62B8(v145);
                if (qword_102419520 != -1) {
                  dispatch_once(&qword_102419520, &stru_1022EA308);
                }
                v84 = qword_102419528;
                if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v85 = *(void *)(v145 + 48);
                  *(_DWORD *)buf = 68289538;
                  *(_DWORD *)&uint8_t buf[4] = 0;
                  *(_WORD *)&uint8_t buf[8] = 2082;
                  *(void *)&buf[10] = "";
                  *(_WORD *)&buf[18] = 2114;
                  *(void *)&buf[20] = v85;
                  *(_WORD *)&unsigned char buf[28] = 2050;
                  *(void *)&buf[30] = v145;
                  _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonClient registered\", \"ClientKeyPath\":%{public, location:escape_only}@, \"tag\":\"%{public}p\"}", buf, 0x26u);
                }
                *(unsigned char *)(v145 + 72) = v58;
                if (v58 && (*(unsigned int (**)(uint64_t))(*(void *)v145 + 80))(v145)) {
                  sub_1007C000C(*(void *)(v145 + 16), *(void **)(v145 + 48), 0, 0, 1, 0, 1);
                }
                sub_1000B5B18(v145);
                sub_1000B55A4(*(void *)(v145 + 16), *(void **)(v145 + 48), *(unsigned __int8 *)(v145 + 204));
                if (*(unsigned char *)(v145 + 72))
                {
                  sub_1000417A8((uint64_t *)v145, &v148);
                  if (v149) {
                    sub_1000DB0A0(v149);
                  }
                  sub_1000411E8(v145);
                }
                goto LABEL_183;
              }
LABEL_164:
              v76 = *(void **)(a1 + 48);
              if ((v146 & ~v36) != 0) {
                sub_1001B35C0(*(void *)(a1 + 16), *(void *)(a1 + 48), *(void *)(a1 + 80), *(unsigned __int8 *)(a1 + 74));
              }
              uint64_t v77 = *(void *)(a1 + 16);
              v78 = (char *)[v76 legacyClientKey].UTF8String;
              if (v78) {
                int v79 = v78;
              }
              else {
                int v79 = "";
              }
              sub_100134750(buf, v79);
              sub_1001B316C(v77, (uint64_t)buf, v57);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
              uint64_t v80 = *(void *)(a1 + 16);
              Uniqueint RemotePid = CLConnection::getUniqueRemotePid(*(CLConnection **)(a1 + 264));
              sub_10004892C(v80, (uint64_t)v76, UniqueRemotePid, 1);
              id v82 = sub_1001B3CD8(*(void *)(a1 + 16), (uint64_t)v76);
              v159[0] = @"kCLConnectionMessageClientKeyForIdentityValidation";
              id v83 = [*(id *)(a1 + 48) clientKey];
              v159[1] = @"kCLConnectionMessageMonitorLedgerAccessKey";
              v160[0] = v83;
              v160[1] = v82;
              v171[0] = +[NSDictionary dictionaryWithObjects:v160 forKeys:v159 count:2];
              int v58 = 1;
              goto LABEL_172;
            }
            if (!v47)
            {
              int v58 = 0;
              v171[0] = 0;
              goto LABEL_172;
            }
            uint64_t v48 = v13;
            sub_100103240();
            if (sub_10010145C())
            {
              uint64_t v49 = *(void *)(a1 + 96);
              BOOL v50 = v49 != 0;
              if (v49 && !v31)
              {
                if (qword_102419520 != -1) {
                  dispatch_once(&qword_102419520, &stru_1022EA308);
                }
                uint64_t v51 = qword_102419528;
                if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                {
                  uint64_t v52 = *(void *)(a1 + 48);
                  *(_DWORD *)buf = 68289282;
                  *(_DWORD *)&uint8_t buf[4] = 0;
                  *(_WORD *)&uint8_t buf[8] = 2082;
                  *(void *)&buf[10] = "";
                  *(_WORD *)&buf[18] = 2114;
                  *(void *)&buf[20] = v52;
                  _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"WatchKit-Plugin connecting on watch , but companion placeholder bundle not found\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
                  if (qword_102419520 != -1) {
                    dispatch_once(&qword_102419520, &stru_1022EA308);
                  }
                }
                uint64_t v53 = qword_102419528;
                if (os_signpost_enabled((os_log_t)qword_102419528))
                {
                  uint64_t v54 = *(void *)(a1 + 48);
                  *(_DWORD *)buf = 68289282;
                  *(_DWORD *)&uint8_t buf[4] = 0;
                  *(_WORD *)&uint8_t buf[8] = 2082;
                  *(void *)&buf[10] = "";
                  *(_WORD *)&buf[18] = 2114;
                  *(void *)&buf[20] = v54;
                  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v53, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "WatchKit-Plugin connecting on watch , but companion placeholder bundle not found", "{\"msg%{public}.0s\":\"WatchKit-Plugin connecting on watch , but companion placeholder bundle not found\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
                }
              }
            }
            else
            {
              BOOL v50 = 0;
            }
            if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 80))(a1))
            {
              *(void *)(a1 + 80) |= 1uLL;
              uint64_t v57 = 0;
              if (sub_100102004((const __CFString *)[(CLClientKeyPath *)v48 bundlePath]))
              {
                *(void *)(a1 + 80) |= 4uLL;
                goto LABEL_155;
              }
            }
            else
            {
              if (*(unsigned char *)(a1 + 193)) {
                int v59 = 2;
              }
              else {
                int v59 = *(unsigned __int8 *)(a1 + 192);
              }
              v150[0] = _NSConcreteStackBlock;
              v150[1] = 3221225472;
              v150[2] = sub_100028CB4;
              v150[3] = &unk_1022E9E48;
              v150[4] = a1;
              v150[5] = v31;
              BOOL v151 = v50;
              uint64_t v69 = *(void *)(a1 + 80) | sub_100028BB4(v59, (uint64_t)v150);
              *(void *)(a1 + 80) = v69;
              if (!v31)
              {
                uint64_t v57 = 0;
LABEL_144:
                if (v69 == 1)
                {
                  if (qword_102419520 != -1) {
                    dispatch_once(&qword_102419520, &stru_1022EA308);
                  }
                  uint64_t v70 = qword_102419528;
                  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v71 = *(void *)(a1 + 48);
                    *(_DWORD *)buf = 138543362;
                    *(void *)&uint8_t buf[4] = v71;
                    _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "%{public}@ is creating a CLLocationManager, but does not have any NSLocation*UsageDescription keys", buf, 0xCu);
                  }
                  if (sub_10013D1A0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_102419520 != -1) {
                      dispatch_once(&qword_102419520, &stru_1022EA308);
                    }
                    uint64_t v72 = *(void *)(a1 + 48);
                    LODWORD(v171[0]) = 138543362;
                    *(void *)((char *)v171 + 4) = v72;
                    int v73 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::processRegistration(NSDictionary *)", "%s\n", v73);
                    if (v73 != buf) {
                      free(v73);
                    }
                  }
                  goto LABEL_161;
                }
LABEL_155:
                if (*(unsigned char *)(a1 + 90))
                {
                  if (qword_102419520 != -1) {
                    dispatch_once(&qword_102419520, &stru_1022EA308);
                  }
                  v74 = qword_102419528;
                  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v75 = *(void *)(a1 + 48);
                    *(_DWORD *)buf = 68289282;
                    *(_DWORD *)&uint8_t buf[4] = 0;
                    *(_WORD *)&uint8_t buf[8] = 2082;
                    *(void *)&buf[10] = "";
                    *(_WORD *)&buf[18] = 2114;
                    *(void *)&buf[20] = v75;
                    _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#appclip Removing Always from allowable authorizations\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
                  }
                  *(void *)(a1 + 80) &= ~4uLL;
                }
LABEL_161:
                if (v31) {
                  CFRelease(v31);
                }
                v171[0] = 0;
                goto LABEL_164;
              }
              uint64_t v57 = +[NSMutableDictionary dictionaryWithDictionary:sub_1000296A4(v31)];
            }
            uint64_t v69 = *(void *)(a1 + 80);
            goto LABEL_144;
          }
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022EA308);
          }
          v122 = qword_102419528;
          if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
          {
            id v123 = [(__CFString *)v116 UTF8String];
            *(_DWORD *)buf = 138543618;
            *(void *)&uint8_t buf[4] = v5;
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v123;
            _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_FAULT, "Client '%{public}@' is attempting to masquerade as uninstalled app with effective bundle identifier '%{public}s'", buf, 0x16u);
          }
          if (!sub_10013D1A0(115, 0))
          {
            BOOL v29 = 0;
            int v30 = 0;
            CFBundleRef v31 = 0;
LABEL_51:
            id v13 = v5;
            goto LABEL_52;
          }
          id v141 = v4;
          bzero(buf, 0x65CuLL);
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022EA308);
          }
          id v135 = [(__CFString *)v116 UTF8String];
          LODWORD(v171[0]) = 138543618;
          *(void *)((char *)v171 + 4) = v5;
          WORD2(v171[1]) = 2082;
          *(void *)((char *)&v171[1] + 6) = v135;
          __int16 v136 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonClient::processRegistration(NSDictionary *)", "%s\n", v136);
          if (v136 != buf) {
            free(v136);
          }
          BOOL v29 = 0;
          int v30 = 0;
          CFBundleRef v31 = 0;
          id v13 = v5;
LABEL_293:
          id v4 = v141;
          goto LABEL_52;
        }
LABEL_41:
        if (v12)
        {
          BOOL v29 = 0;
          CFBundleRef v31 = 0;
          unsigned int v146 = 1;
          id v13 = v10;
        }
        else
        {
          id v13 = (CLClientKeyPath *)sub_100103D58(*(void *)(a1 + 16), (uint64_t)v5);
          if (![(CLClientKeyPath *)v13 isValidCKP])
          {
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022EA308);
            }
            __int16 v33 = qword_102419528;
            if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 68289282;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)&uint8_t buf[8] = 2082;
              *(void *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2114;
              *(void *)&buf[20] = v5;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning naturalKeyPath registration resulted in nullCKP\", \"NaturalKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
            }
            BOOL v29 = 0;
            int v30 = 0;
            CFBundleRef v31 = 0;
            unsigned int v146 = 1;
            goto LABEL_51;
          }
          BOOL v29 = 0;
          CFBundleRef v31 = 0;
          unsigned int v146 = 1;
        }
        int v30 = 1;
        goto LABEL_52;
      }
    }
    else if (v22)
    {
      goto LABEL_28;
    }
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    uint64_t v27 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v28 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138544130;
      *(void *)&uint8_t buf[4] = v28;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = "com.apple.locationd.effective_bundle";
      *(_WORD *)&buf[22] = 2114;
      *(void *)&buf[24] = v144;
      *(_WORD *)&buf[32] = 2114;
      *(void *)&buf[34] = v14;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#Warning Client '%{public}@' does not have required entitlement '%{public}s' to set effective bundle identifier, '%{public}@', or effective bundle, '%{public}@'", buf, 0x2Au);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_37;
    }
    id v141 = v4;
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    uint64_t v131 = *(void *)(a1 + 48);
    LODWORD(v171[0]) = 138544130;
    *(void *)((char *)v171 + 4) = v131;
    WORD2(v171[1]) = 2082;
    *(void *)((char *)&v171[1] + 6) = "com.apple.locationd.effective_bundle";
    HIWORD(v171[2]) = 2114;
    v171[3] = v144;
    LOWORD(v172) = 2114;
    *(void *)((char *)&v172 + 2) = v14;
    unsigned __int8 v132 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::processRegistration(NSDictionary *)", "%s\n", v132);
    if (v132 != buf) {
      free(v132);
    }
    BOOL v29 = 0;
    int v30 = 0;
    CFBundleRef v31 = 0;
    unsigned int v146 = 1;
    goto LABEL_293;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  __int16 v17 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(void *)&buf[20] = v5;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Processing Registrationless client\", \"NaturalKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  sub_1000B5F64(a1, v5);
LABEL_183:
}

void sub_1000B5454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000B5584(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 91);
}

id sub_1000B558C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 136) isKeyPathRegisteredSystemService:a2];
}

id sub_1000B5598(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
}

void sub_1000B55A4(uint64_t a1, void *a2, int a3)
{
  id v6 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  if ([v6 isValidCKP])
  {
    int v7 = *(void **)(a1 + 136);
    if (a3) {
      [v7 setBool:1 forKey:@"BackgroundLocationCapability" atKeyPath:v6];
    }
    else {
      [v7 removeValueForKey:@"BackgroundLocationCapability" atKeyPath:v6];
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v12 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      int v13 = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      BOOL v16 = "";
      __int16 v17 = 2114;
      id v18 = v6;
      __int16 v19 = 1026;
      int v20 = a3;
      int v9 = "{\"msg%{public}.0s\":\"updated BackgroundLocationCapability\", \"Client\":%{public, location:escape_only}@, \""
           "BackgroundLocationCapability\":%{public}hhd}";
      int64_t v10 = v12;
      uint32_t v11 = 34;
      goto LABEL_13;
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      int v13 = 68289282;
      int v14 = 0;
      __int16 v15 = 2082;
      BOOL v16 = "";
      __int16 v17 = 2114;
      id v18 = a2;
      int v9 = "{\"msg%{public}.0s\":\"skip marking BackgroundLocationCapability. Client not found\", \"Client\":%{public, lo"
           "cation:escape_only}@}";
      int64_t v10 = v8;
      uint32_t v11 = 28;
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, v9, (uint8_t *)&v13, v11);
    }
  }
}

CLClientKeyPath *sub_1000B5784()
{
  char v7 = 0;
  sub_1000B71D0(&v7, (uint64_t)&__p);
  if (SBYTE3(v12) >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  v1 = +[NSString stringWithUTF8String:p_p];
  if (SBYTE3(v12) < 0) {
    operator delete(__p);
  }
  if ([(NSString *)v1 length])
  {
    if (v7) {
      uint64_t v2 = 101;
    }
    else {
      uint64_t v2 = 105;
    }
    uint64_t v3 = +[CLClientKeyPath clientKeyPathWithUserName:0 clientAnchor:v1 anchorType:v2];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      __p = (void *)68289282;
      __int16 v9 = 2082;
      int64_t v10 = "";
      __int16 v11 = 2114;
      uint64_t v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Determined clientKeyPath from audit token\", \"clientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    int v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      __p = (void *)68289026;
      __int16 v9 = 2082;
      int64_t v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Failed to get client info from audit token to create clientKeyPath. Returning #nullCKP\"}", (uint8_t *)&__p, 0x12u);
    }
    return (CLClientKeyPath *)+[CLClientKeyPath nullClientKeyPath];
  }
  return v3;
}

void sub_1000B5988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1000B59AC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 136) readonlyStoreAtKeyPath:a2];
}

id sub_1000B59B8(uint64_t a1)
{
  sub_100103240();
  if (sub_1000B5AD4() != 115) {
    return 0;
  }
  id result = [[objc_msgSend(*(id *)(a1 + 48), "bundlePath") isEqual:@"/System/Library/LocationBundles/AppleWatchFaces.bundle"];
  if (result)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    uint64_t v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      v5[0] = 68289026;
      v5[1] = 0;
      __int16 v6 = 2082;
      char v7 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Resetting watch faces auth on Apple Watch Ultra\"}", (uint8_t *)v5, 0x12u);
    }
    return (id)sub_100BD6518(a1, v4, @"AppleWatchUltraWatchFacesAuthReset");
  }
  return result;
}

uint64_t sub_1000B5AD4()
{
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  return dword_10247D340;
}

void sub_1000B5B18(uint64_t a1)
{
  sub_100103240();
  if (sub_1000EB1B0())
  {
    sub_100103240();
    BOOL v2 = sub_10010145C() ? *(unsigned char *)(a1 + 193) != 0 : *(void *)(a1 + 96) == 0;
    if (v2 && &_SBSCopyBundleInfoValueForKeyAndProcessID != 0)
    {
      CFArrayRef v4 = (const __CFArray *)SBSCopyBundleInfoValueForKeyAndProcessID();
      if (v4)
      {
        CFArrayRef v5 = v4;
        CFTypeID v6 = CFGetTypeID(v4);
        if (v6 == CFArrayGetTypeID())
        {
          v15.length = CFArrayGetCount(v5);
          v15.location = 0;
          if (CFArrayGetFirstIndexOfValue(v5, v15, @"location") != -1)
          {
            *(unsigned char *)(a1 + 204) = 1;
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022EA308);
            }
            char v7 = qword_102419528;
            if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v8 = *(void *)(a1 + 48);
              *(_DWORD *)buf = 138412290;
              uint64_t v14 = v8;
              _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "client '%@' supports background location", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419520 != -1) {
                dispatch_once(&qword_102419520, &stru_1022EA308);
              }
              uint64_t v12 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::assessClientCapabilities()", "%s\n", v12);
              if (v12 != (char *)buf) {
                free(v12);
              }
            }
          }
        }
        CFRelease(v5);
      }
      else
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022EA308);
        }
        __int16 v9 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
        {
          int v10 = *(_DWORD *)(a1 + 272);
          *(_DWORD *)buf = 67109120;
          LODWORD(v14) = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "PID %u either doesn't specify UIBackgroundModes, or SB timed out fetching them", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022EA308);
          }
          __int16 v11 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::assessClientCapabilities()", "%s\n", v11);
          if (v11 != (char *)buf) {
            free(v11);
          }
        }
      }
    }
  }
}

uint64_t sub_1000B5ECC(uint64_t a1)
{
  uint64_t result = objc_opt_class();
  if (result)
  {
    uint64_t result = objc_opt_class();
    if (result)
    {
      uint64_t v4 = 0;
      id v3 = [[[+[RBSProcessHandle handleForIdentifier:error:](RBSProcessHandle, "handleForIdentifier:error:", +[RBSProcessIdentifier identifierWithPid:](RBSProcessIdentifier, "identifierWithPid:", a1), &v4) bundle] extensionPointIdentifier];
      return v3 && ([v3 isEqualToString:@"com.apple.widgetkit-extension"] & 1) != 0;
    }
  }
  return result;
}

void sub_1000B5F64(uint64_t a1, void *a2)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022EA328);
  }
  uint64_t v4 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 48);
    int v10 = 68290562;
    int v11 = 0;
    __int16 v12 = 2082;
    int v13 = "";
    __int16 v14 = 2082;
    CFRange v15 = "state_transition";
    __int16 v16 = 2082;
    __int16 v17 = "DaemonClient";
    __int16 v18 = 2050;
    uint64_t v19 = a1;
    __int16 v20 = 2082;
    int v21 = "clientKeyPath";
    __int16 v22 = 2114;
    uint64_t v23 = v5;
    __int16 v24 = 2114;
    id v25 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"state transition\", \"event\":%{public, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"id\":\"%{public}p\", \"property\":%{public, location:escape_only}s, \"old\":%{public, location:escape_only}@, \"new\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x4Eu);
  }
  if (!*(void *)(a1 + 48)) {
    goto LABEL_16;
  }
  if (objc_msgSend(a2, "isEqual:")) {
    return;
  }
  if (!*(unsigned char *)(a1 + 72))
  {

LABEL_16:
    *(void *)(a1 + 48) = a2;
    return;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022EA328);
  }
  CFTypeID v6 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
  {
    char v7 = *(const char **)(a1 + 48);
    int v10 = 68289538;
    int v11 = 0;
    __int16 v12 = 2082;
    int v13 = "";
    __int16 v14 = 2114;
    CFRange v15 = v7;
    __int16 v16 = 2114;
    __int16 v17 = (const char *)a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Attempting to set CLDC clientKeyPath after we've already finished registration. Sticking with the ckp that we originally set fRegistrationReceived with\", \"old\":%{public, location:escape_only}@, \"new\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x26u);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
  }
  uint64_t v8 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    __int16 v9 = *(const char **)(a1 + 48);
    int v10 = 68289538;
    int v11 = 0;
    __int16 v12 = 2082;
    int v13 = "";
    __int16 v14 = 2114;
    CFRange v15 = v9;
    __int16 v16 = 2114;
    __int16 v17 = (const char *)a2;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Attempting to set CLDC clientKeyPath after we've already finished registration. Sticking with the ckp that we originally set fRegistrationReceived with", "{\"msg%{public}.0s\":\"Attempting to set CLDC clientKeyPath after we've already finished registration. Sticking with the ckp that we originally set fRegistrationReceived with\", \"old\":%{public, location:escape_only}@, \"new\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x26u);
  }
}

uint64_t sub_1000B6214()
{
  if (qword_102480840 != -1) {
    dispatch_once(&qword_102480840, &stru_1022E9E28);
  }
  return CLConnection::setDefaultMessageHandler();
}

void sub_1000B62B8(uint64_t a1)
{
  sub_1000E9420(&off_1022ED870, &v2);
  uint64_t v4 = v2;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_1000EFC20(a1, (uint64_t)&v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1000B6338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000B635C(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 264))
  {
    uint64_t isEntitled = CLConnection::isEntitled();
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    uint64_t v5 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = "not entitled";
      uint64_t v7 = *(void *)(a1 + 48);
      if (isEntitled) {
        uint64_t v6 = "entitled";
      }
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v8 = a2;
      }
      else {
        uint64_t v8 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 138412802;
      *(void *)__int16 v14 = v7;
      *(_WORD *)&v14[8] = 2080;
      *(void *)&v14[10] = v6;
      __int16 v15 = 2080;
      __int16 v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%@ is %s for %s", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EA308);
      }
      __int16 v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLDaemonClient::isEntitled(const std::string &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    int v10 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)__int16 v14 = 0;
      *(_WORD *)&v14[4] = 2082;
      *(void *)&v14[6] = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"The underlying fConnection in CLDaemonClient is no longer available\"}", buf, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EA308);
      }
    }
    int v11 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)__int16 v14 = 0;
      *(_WORD *)&v14[4] = 2082;
      *(void *)&v14[6] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "The underlying fConnection in CLDaemonClient is no longer available", "{\"msg%{public}.0s\":\"The underlying fConnection in CLDaemonClient is no longer available\"}", buf, 0x12u);
    }
    return 0;
  }
  return isEntitled;
}

uint64_t sub_1000B66B8(int a1)
{
  v3[4] = 0;
  v3[5] = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10079F36C;
  v3[3] = &unk_1022B8660;
  if (qword_10247E0B8 != -1) {
    dispatch_once(&qword_10247E0B8, v3);
  }
  if (a1 == 4) {
    return qword_10247E0B0;
  }
  if (a1 == 5) {
    return qword_10247E0A8;
  }
  return 0;
}

void sub_1000B6D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_1000064D0(v26);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B6DC8(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)uint64_t v5 = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  uint64_t v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*v7);
  }
  long long v8 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)uint64_t v7 = v8;
  *((unsigned char *)a2 + 71) = 0;
  *((unsigned char *)a2 + 48) = 0;
  __int16 v9 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v9);
  }
  long long v10 = *(long long *)((char *)a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(_OWORD *)__int16 v9 = v10;
  *((unsigned char *)a2 + 95) = 0;
  *((unsigned char *)a2 + 72) = 0;
  char v11 = *((unsigned char *)a2 + 98);
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(unsigned char *)(a1 + 98) = v11;
  __int16 v12 = (void **)(a1 + 104);
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*v12);
  }
  long long v13 = *(long long *)((char *)a2 + 104);
  *(void *)(a1 + 120) = *((void *)a2 + 15);
  *(_OWORD *)__int16 v12 = v13;
  *((unsigned char *)a2 + 127) = 0;
  *((unsigned char *)a2 + 104) = 0;
  __int16 v14 = (void **)(a1 + 128);
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*v14);
  }
  long long v15 = a2[8];
  *(void *)(a1 + 144) = *((void *)a2 + 18);
  *(_OWORD *)__int16 v14 = v15;
  *((unsigned char *)a2 + 151) = 0;
  *((unsigned char *)a2 + 128) = 0;
  __int16 v16 = (void **)(a1 + 152);
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*v16);
  }
  long long v17 = *(long long *)((char *)a2 + 152);
  *(void *)(a1 + 168) = *((void *)a2 + 21);
  *(_OWORD *)__int16 v16 = v17;
  *((unsigned char *)a2 + 175) = 0;
  *((unsigned char *)a2 + 152) = 0;
  __int16 v18 = *((_WORD *)a2 + 88);
  *(unsigned char *)(a1 + 178) = *((unsigned char *)a2 + 178);
  *(_WORD *)(a1 + 176) = v18;
  return a1;
}

void sub_1000B6F5C(std::string *__str@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 95) = 0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  id v3 = (char *)(a2 + 48);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 163) = 0u;
  std::string::operator=((std::string *)(a2 + 48), __str);
  *(_WORD *)(a2 + 97) = 0;
  if (*(char *)(a2 + 71) < 0)
  {
    if (!*(void *)(a2 + 56)) {
      return;
    }
    id v3 = *(char **)v3;
  }
  else if (!*(unsigned char *)(a2 + 71))
  {
    return;
  }
  long long v4 = (__CFString *)sub_1000B73E0(v3);
  CFStringRef v5 = v4;
  if (v4)
  {
    if (sub_100102484(v4)) {
      *(unsigned char *)(a2 + 97) = 1;
    }
    if (sub_1000B7030(v5)) {
      *(unsigned char *)(a2 + 98) = 1;
    }
    CFRelease(v5);
  }
}

void sub_1000B7018(_Unwind_Exception *a1)
{
  sub_1000064D0(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1000B7030(const __CFString *a1)
{
  uint64_t v2 = sub_1001020E0();
  return sub_1000B705C(v2, a1);
}

BOOL sub_1000B705C(uint64_t a1, const __CFString *a2)
{
  uint64_t v3 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16))(a1 + 48);
  CFBooleanRef v4 = sub_100102844(*(__CFDictionary **)(v3 - 40), a2, @"CLHarvestableSystemService");
  CFBooleanRef v5 = v4;
  if (v4)
  {
    BOOL v6 = CFBooleanGetValue(v4) != 0;
    CFRelease(v5);
  }
  else
  {
    BOOL v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  return v6;
}

void sub_1000B7130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_1000B7144@<X0>(std::string *__str@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 95) = 0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 163) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  uint64_t result = std::string::operator=((std::string *)(a2 + 104), __str);
  std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (size) {
    *(unsigned char *)(a2 + 96) = 1;
  }
  return result;
}

void sub_1000B71BC(_Unwind_Exception *a1)
{
  sub_1000064D0(v1);
  _Unwind_Resume(a1);
}

void sub_1000B71D0(unsigned char *a1@<X1>, uint64_t a2@<X8>)
{
  sub_1000B7298(__p);
  *a1 = 0;
  CFBooleanRef v4 = (void *)HIBYTE(v8);
  int v5 = SHIBYTE(v8);
  if (v8 < 0) {
    CFBooleanRef v4 = __p[1];
  }
  if (v4)
  {
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + 16) = v8;
  }
  else
  {
    *a1 = 1;
    sub_1000B73FC();
    if (v5 < 0)
    {
      BOOL v6 = __p[0];
      operator delete(v6);
    }
  }
}

void sub_1000B7280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (v10 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B7298(void *a1@<X8>)
{
  sub_1000B73FC();
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (v12 >= 0) {
    p_p = (char *)&__p;
  }
  else {
    p_p = (char *)__p;
  }
  CFStringRef v3 = sub_1000B73E0(p_p);
  if (v3)
  {
    CFURLRef v4 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v3, kCFURLPOSIXPathStyle, 0);
    if (v4)
    {
      int v5 = (const void *)_CFBundleCopyBundleURLForExecutableURL();
      if (v5)
      {
        Unique = (__CFBundle *)_CFBundleCreateUnique();
        uint64_t v7 = Unique;
        if (Unique)
        {
          CFStringRef Identifier = CFBundleGetIdentifier(Unique);
          if (Identifier)
          {
            sub_1000FECE0(Identifier, (uint64_t)&v9);
            *(_OWORD *)a1 = v9;
            a1[2] = v10;
          }
          CFRelease(v7);
        }
        CFRelease(v5);
      }
      CFRelease(v4);
    }
    CFRelease(v3);
  }
  if (v12 < 0) {
    operator delete(__p);
  }
}

void sub_1000B73A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef sub_1000B73E0(char *cStr)
{
  return CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
}

std::string *sub_1000B73FC()
{
  v0 = (audit_token_t *)__chkstk_darwin();
  uint64_t v2 = v1;
  v1->__r_.__value_.__r.__words[0] = 0;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  uint64_t result = (std::string *)proc_pidpath_audittoken(v0, buffer, 0x1000u);
  if ((int)result >= 1) {
    return std::string::assign(v2, buffer);
  }
  return result;
}

void sub_1000B749C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000B74B8(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (void *)sub_1000B7500(a1, 0, a2, a3, a4, a5);
  *uint64_t result = off_1022C40C8;
  return result;
}

uint64_t sub_1000B7500(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_1022B32C0;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    char v12 = a3;
  }
  else {
    char v12 = (uint64_t *)*a3;
  }
  id v13 = [[[a4 vendor] proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

void sub_1000B75E4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  int v40 = 0;
  unsigned int v32 = -1;
  *(_OWORD *)__int16 v33 = 0u;
  *(_OWORD *)id v34 = 0u;
  long long v35 = 0u;
  *(_OWORD *)unsigned int v36 = 0u;
  *(_OWORD *)int v37 = 0u;
  long long v38 = 0u;
  __int16 v39 = 0;
  if (*(void *)(a1 + 280) == a4)
  {
    if (([a3 pid] & 0x80000000) != 0)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102318608);
      }
      uint64_t v16 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v42 = 2082;
        CFURLRef v43 = "";
        uint64_t v8 = "{\"msg%{public}.0s\":\"RBS #AppMonitor received with invalid pid...adios!\"}";
        long long v9 = v16;
        uint32_t v10 = 18;
        goto LABEL_6;
      }
    }
    else if ([a3 bundle])
    {
      unsigned int v13 = [[objc_msgSend(a2, "state") taskState];
      unsigned int v32 = [a3 pid];
      std::string::assign((std::string *)v33, (const std::string::value_type *)[objc_msgSend(objc_msgSend(objc_msgSend(a3, "bundle"), "identifier"), "UTF8String") UTF8String]);
      switch(v13)
      {
        case 0u:
          int v14 = 0;
          int v15 = 0;
          int v40 = 0;
          break;
        case 1u:
          int v14 = 1;
          int v40 = 1;
          int v15 = 1;
          break;
        case 2u:
        case 4u:
          int v14 = 0;
          if ([objc_msgSend(objc_msgSend(objc_msgSend(a2, "state"), "endowmentNamespaces"), "containsObject:", @"com.apple.frontboard.visibility") int v15 = 4; {
          else
          }
            int v15 = 3;
          goto LABEL_32;
        case 3u:
          int v14 = 0;
          int v15 = 2;
LABEL_32:
          int v40 = v15;
          break;
        default:
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_102318608);
          }
          __int16 v18 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 68289282;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v42 = 2082;
            CFURLRef v43 = "";
            __int16 v44 = 2050;
            *(void *)uint64_t v45 = v13;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"RBS #AppMonitor unknown task state\", \"state\":%{public, location:RBSTaskState}lld}", buf, 0x1Cu);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_102318608);
            }
          }
          uint64_t v19 = qword_102419538;
          if (os_signpost_enabled((os_log_t)qword_102419538))
          {
            *(_DWORD *)buf = 68289282;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v42 = 2082;
            CFURLRef v43 = "";
            __int16 v44 = 2050;
            *(void *)uint64_t v45 = v13;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "RBS #AppMonitor unknown task state", "{\"msg%{public}.0s\":\"RBS #AppMonitor unknown task state\", \"state\":%{public, location:RBSTaskState}lld}", buf, 0x1Cu);
          }
          int v14 = 0;
          int v15 = 0;
          break;
      }
      if (!objc_msgSend(objc_msgSend(a3, "bundle"), "identifier"))
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102318608);
        }
        __int16 v20 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v42 = 2082;
          CFURLRef v43 = "";
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"RBS #AppMonitor failed to retreive bundleID\"}", buf, 0x12u);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_102318608);
          }
        }
        int v21 = qword_102419538;
        if (os_signpost_enabled((os_log_t)qword_102419538))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v42 = 2082;
          CFURLRef v43 = "";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "RBS #AppMonitor failed to retreive bundleID", "{\"msg%{public}.0s\":\"RBS #AppMonitor failed to retreive bundleID\"}", buf, 0x12u);
        }
      }
      if (v14)
      {
        LOBYTE(v39) = [[[objc_msgSend(objc_msgSend(a3, "lastExitContext"), "status")] code] == 3735943697;
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102318608);
        }
        __int16 v22 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          if (SHIBYTE(v34[0]) >= 0) {
            uint64_t v23 = v33;
          }
          else {
            uint64_t v23 = (void **)v33[0];
          }
          *(_DWORD *)buf = 68289794;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v42 = 2082;
          CFURLRef v43 = "";
          __int16 v44 = 1026;
          *(_DWORD *)uint64_t v45 = v32;
          *(_WORD *)&v45[4] = 2082;
          *(void *)&v45[6] = v23;
          *(_WORD *)&v45[14] = 1026;
          *(_DWORD *)&v45[16] = v39;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"RBS #dic AppMonitor received Termination\", \"pid\":%{public}d, \"bundleId\":%{public, location:escape_only}s, \"isUserKill\":%{public}hhd}", buf, 0x28u);
        }
      }
      std::string::assign((std::string *)&v37[1], (const std::string::value_type *)[objc_msgSend(objc_msgSend(objc_msgSend(a3, "bundle"), "path"), "UTF8String"));
      sub_1000A7BF0((void *)(a1 + 232), (unsigned __int8 *)v33);
      if ((v15 - 1) >= 3)
      {
        if (v15 == 4)
        {
          *(_DWORD *)(a1 + 120) = v32;
          std::string::operator=((std::string *)(a1 + 128), (const std::string *)v33);
          std::string::operator=((std::string *)(a1 + 152), (const std::string *)&v34[1]);
          std::string::operator=((std::string *)(a1 + 176), (const std::string *)v36);
          std::string::operator=((std::string *)(a1 + 200), (const std::string *)&v37[1]);
          *(_WORD *)(a1 + 224) = v39;
          *(_DWORD *)buf = 9;
          if (sub_1001072EC(a1, (int *)buf, 1)) {
            [*(id *)(a1 + 112) setNextFireDelay:5.0];
          }
          sub_1000A8B94(buf, (long long *)v33, (uint64_t)&v32);
          sub_1000A8D60(a1 + 232, buf, (long long *)buf);
          if (v52 < 0) {
            operator delete(__p);
          }
          if (v50 < 0) {
            operator delete(v49);
          }
          if (v48 < 0) {
            operator delete(v47);
          }
          if (v46 < 0) {
            operator delete(*(void **)&v45[12]);
          }
          if ((v45[3] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
      }
      else
      {
        if (*(char *)(a1 + 151) < 0)
        {
          __int16 v24 = *(const void **)(a1 + 128);
          size_t v25 = *(void *)(a1 + 136);
        }
        else
        {
          __int16 v24 = (const void *)(a1 + 128);
          size_t v25 = *(unsigned __int8 *)(a1 + 151);
        }
        if (SHIBYTE(v34[0]) >= 0) {
          uint64_t v26 = (void *)HIBYTE(v34[0]);
        }
        else {
          uint64_t v26 = v33[1];
        }
        if (SHIBYTE(v34[0]) >= 0) {
          uint64_t v27 = v33;
        }
        else {
          uint64_t v27 = (void **)v33[0];
        }
        if ((unint64_t)v26 >= v25) {
          size_t v28 = v25;
        }
        else {
          size_t v28 = (size_t)v26;
        }
        if (!memcmp(v24, v27, v28) && v26 == (void *)v25)
        {
          sub_101208904(a1 + 120);
          [*(id *)(a1 + 112) setNextFireDelay:1.79769313e308];
        }
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102318608);
      }
      BOOL v29 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        int v30 = sub_1000A7F94(&v40);
        if (SHIBYTE(v34[0]) >= 0) {
          CFBundleRef v31 = v33;
        }
        else {
          CFBundleRef v31 = (void **)v33[0];
        }
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v42 = 2082;
        CFURLRef v43 = "";
        __int16 v44 = 2082;
        *(void *)uint64_t v45 = v30;
        *(_WORD *)&v45[8] = 1026;
        *(_DWORD *)&v45[10] = v32;
        *(_WORD *)&v45[14] = 2082;
        *(void *)&v45[16] = v31;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"RBS #AppMonitor Post Application State Change Notification\", \"notification\":%{public, location:escape_only}s, \"pid\":%{public}d, \"bundleId\":%{public, location:escape_only}s}", buf, 0x2Cu);
      }
      (*(void (**)(uint64_t, int *, unsigned int *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &v40, &v32, 0, 0xFFFFFFFFLL, 0);
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102318608);
      }
      uint64_t v17 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v42 = 2082;
        CFURLRef v43 = "";
        __int16 v44 = 1026;
        *(_DWORD *)uint64_t v45 = [a3 pid];
        uint64_t v8 = "{\"msg%{public}.0s\":\"RBS #AppMonitor received null bundle info, discarding\", \"pid\":%{public}d}";
        long long v9 = v17;
        uint32_t v10 = 24;
        goto LABEL_6;
      }
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102318608);
    }
    uint64_t v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 280);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v42 = 2082;
      CFURLRef v43 = "";
      __int16 v44 = 2050;
      *(void *)uint64_t v45 = v7;
      *(_WORD *)&v45[8] = 2050;
      *(void *)&v45[10] = a4;
      uint64_t v8 = "{\"msg%{public}.0s\":\"RBS #AppMonitor #Warning you're not the one I'm expecting\", \"expected\":\"%{public}p"
           "\", \"received\":\"%{public}p\"}";
      long long v9 = v6;
      uint32_t v10 = 38;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, buf, v10);
    }
  }
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[1]);
  }
  if (SHIBYTE(v37[0]) < 0) {
    operator delete(v36[0]);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete(v34[1]);
  }
  if (SHIBYTE(v34[0]) < 0) {
    operator delete(v33[0]);
  }
}

void sub_1000B7F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_101208268((uint64_t)va1);
  sub_100783674((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000B8668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

void sub_1000B8704(uint64_t a1, double a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 96))(*(void *)(a1 + 24));
  v5.n128_f64[0] = a2;
  sub_1000B8D4C(v4, v5);
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 104))(*(void *)(a1 + 24));
  v7.n128_f64[0] = a2;
  sub_1000B9590(v6, v7);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 112))(*(void *)(a1 + 24));
  v9.n128_f64[0] = a2;
  sub_1000BA5E4(v8, v9);
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 128))(*(void *)(a1 + 24));
  v11.n128_f64[0] = a2;
  sub_1000B9CF4(v10, v11);
  uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120))(*(void *)(a1 + 24));
  v13.n128_f64[0] = a2;
  sub_1000BB7C4(v12, v13);
  uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 136))(*(void *)(a1 + 24));
  v15.n128_f64[0] = a2;
  sub_1000B8954(v14, v15);
  uint64_t v16 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 144))(*(void *)(a1 + 24));
  v17.n128_f64[0] = a2;
  sub_1000BB2D0(v16, v17);
  uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 160))(*(void *)(a1 + 24));
  v19.n128_f64[0] = a2;
  sub_1000BA0A0(v18, v19);
  uint64_t v20 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 152))(*(void *)(a1 + 24));
  v21.n128_f64[0] = a2;
  sub_1000B993C(v20, v21);
  uint64_t v22 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 168))(*(void *)(a1 + 24));
  v23.n128_f64[0] = a2;
  sub_1000BAD58(v22, v23);
  *(double *)(a1 + 32) = a2;
}

uint64_t sub_1000B8914(uint64_t a1)
{
  return a1 + 1448;
}

uint64_t sub_1000B891C(uint64_t a1)
{
  return a1 + 1680;
}

uint64_t sub_1000B8924(uint64_t a1)
{
  return a1 + 1872;
}

uint64_t sub_1000B892C(uint64_t a1)
{
  return a1 + 920;
}

uint64_t sub_1000B8934(uint64_t a1)
{
  return a1 + 2064;
}

uint64_t sub_1000B893C(uint64_t a1)
{
  return a1 + 2272;
}

uint64_t sub_1000B8944(uint64_t a1)
{
  return a1 + 296;
}

uint64_t sub_1000B894C(uint64_t a1)
{
  return a1 + 8;
}

void sub_1000B8954(uint64_t a1, __n128 a2)
{
  double v2 = a2.n128_f64[0];
  a2.n128_u64[0] = *(void *)(a1 + 64);
  *(double *)(a1 + 64) = v2;
  if (*(unsigned char *)(a1 + 8) && *(double *)(a1 + 72) < v2)
  {
    *(unsigned char *)(a1 + 8) = 0;
    uint64_t v4 = *(void (**)(__n128))(*(void *)a1 + 24);
    v4(a2);
    return;
  }
  if (a2.n128_f64[0] > v2)
  {
    __n128 v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 32);
        __n128 v5 = (void **)(*(void *)(a1 + 24) + 8);
        *(void *)(a1 + 24) = v5;
        unint64_t v7 = v8 - (void)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 28;
    }
    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_17:
        *(void *)(a1 + 96) = 0xBFF0000000000000;
        if (*(unsigned char *)(a1 + 8)) {
          sub_100AD8E44(a1);
        }
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022DCCA8);
        }
        __n128 v19 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          double v29 = v2;
          __int16 v30 = 2048;
          uint64_t v31 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022DCCA8);
          }
          __n128 v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLSourceBuffer<CLWorkoutPredictorTurnDetector::Turn>::update(CFAbsoluteTime) [T = CLWorkoutPredictorTurnDetector::Turn]", "%s\n", v21);
          if (v21 != (char *)buf) {
            free(v21);
          }
        }
        return;
      }
      uint64_t v9 = 56;
    }
    *(void *)(a1 + 48) = v9;
    goto LABEL_17;
  }
  if (*(double *)(a1 + 96) != -1.0)
  {
    unint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    __n128 v13 = (void *)(v11 + 8 * (v10 / 0x38));
    if (v12 == v11)
    {
      uint64_t v14 = 0;
      uint64_t v18 = 0;
      __n128 v15 = (void *)(a1 + 56);
      __n128 v17 = (void *)(v11 + 8 * ((*(void *)(a1 + 56) + v10) / 0x38));
    }
    else
    {
      uint64_t v14 = *(void *)(v11 + 8 * (v10 / 0x38)) + 72 * (v10 % 0x38);
      __n128 v15 = (void *)(a1 + 56);
      unint64_t v16 = *(void *)(a1 + 56) + v10;
      __n128 v17 = (void *)(v11 + 8 * (v16 / 0x38));
      uint64_t v18 = *v17 + 72 * (v16 % 0x38);
    }
    __n128 v23 = sub_100AD9184(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&v2, a1);
    unint64_t v24 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v25 = *(void *)(a1 + 24);
    uint64_t v26 = (void *)(v25 + 8 * (v24 / 0x38));
    uint64_t v27 = *(void *)(a1 + 32) == v25 ? 0 : *v26 + 72 * (v24 % 0x38);
    sub_100AD8ED8((void *)(a1 + 16), v23, v22, v26, v27);
    if (!*v15) {
      *(void *)(a1 + 96) = 0xBFF0000000000000;
    }
  }
}

void sub_1000B8D4C(uint64_t a1, __n128 a2)
{
  double v2 = a2.n128_f64[0];
  a2.n128_u64[0] = *(void *)(a1 + 64);
  *(double *)(a1 + 64) = v2;
  if (*(unsigned char *)(a1 + 8) && *(double *)(a1 + 72) < v2)
  {
    *(unsigned char *)(a1 + 8) = 0;
    uint64_t v4 = *(void (**)(__n128))(*(void *)a1 + 24);
    v4(a2);
    return;
  }
  if (a2.n128_f64[0] > v2)
  {
    __n128 v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 32);
        __n128 v5 = (void **)(*(void *)(a1 + 24) + 8);
        *(void *)(a1 + 24) = v5;
        unint64_t v7 = v8 - (void)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 12;
    }
    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_17:
        *(void *)(a1 + 104) = 0xBFF0000000000000;
        if (*(unsigned char *)(a1 + 8)) {
          sub_100AD83E4(a1);
        }
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022DCCA8);
        }
        __n128 v19 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          double v29 = v2;
          __int16 v30 = 2048;
          uint64_t v31 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022DCCA8);
          }
          __n128 v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLSourceBuffer<CLMotionCoprocessorInterface::MotionState>::update(CFAbsoluteTime) [T = CLMotionCoprocessorInterface::MotionState]", "%s\n", v21);
          if (v21 != (char *)buf) {
            free(v21);
          }
        }
        return;
      }
      uint64_t v9 = 25;
    }
    *(void *)(a1 + 48) = v9;
    goto LABEL_17;
  }
  if (*(double *)(a1 + 104) != -1.0)
  {
    unint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    __n128 v13 = (void *)(v11 + 8 * (v10 / 0x19));
    if (v12 == v11)
    {
      uint64_t v14 = 0;
      uint64_t v18 = 0;
      __n128 v15 = (void *)(a1 + 56);
      __n128 v17 = (void *)(v11 + 8 * ((*(void *)(a1 + 56) + v10) / 0x19));
    }
    else
    {
      uint64_t v14 = *(void *)(v11 + 8 * (v10 / 0x19)) + 160 * (v10 % 0x19);
      __n128 v15 = (void *)(a1 + 56);
      unint64_t v16 = *(void *)(a1 + 56) + v10;
      __n128 v17 = (void *)(v11 + 8 * (v16 / 0x19));
      uint64_t v18 = *v17 + 160 * (v16 % 0x19);
    }
    __n128 v23 = sub_1000B9164(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&v2, a1);
    unint64_t v24 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v25 = *(void *)(a1 + 24);
    uint64_t v26 = (void *)(v25 + 8 * (v24 / 0x19));
    uint64_t v27 = *(void *)(a1 + 32) == v25 ? 0 : (char *)(*v26 + 160 * (v24 % 0x19));
    sub_1000B9238((void *)(a1 + 16), v23, v22, v26, v27);
    if (!*v15) {
      *(void *)(a1 + 104) = 0xBFF0000000000000;
    }
  }
}

void *sub_1000B9164(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)(a2 + 8) <= *(double *)(a6 + 88))
    {
      a2 += 160;
      if (a2 - *result == 4000)
      {
        uint64_t v6 = result[1];
        ++result;
        a2 = v6;
      }
      if (a2 == a4) {
        return result;
      }
    }
  }
  if (a2 != a4)
  {
    uint64_t v7 = a2;
    uint64_t v8 = result;
    while (1)
    {
      v7 += 160;
      if (v7 - *v8 == 4000)
      {
        uint64_t v9 = v8[1];
        ++v8;
        uint64_t v7 = v9;
      }
      if (v7 == a4) {
        break;
      }
      if (*(double *)&a5 - *(double *)(v7 + 8) <= *(double *)(a6 + 88))
      {
        long long v10 = *(_OWORD *)(v7 + 16);
        *(_OWORD *)a2 = *(_OWORD *)v7;
        *(_OWORD *)(a2 + 16) = v10;
        long long v11 = *(_OWORD *)(v7 + 32);
        long long v12 = *(_OWORD *)(v7 + 48);
        long long v13 = *(_OWORD *)(v7 + 80);
        *(_OWORD *)(a2 + 64) = *(_OWORD *)(v7 + 64);
        *(_OWORD *)(a2 + 80) = v13;
        *(_OWORD *)(a2 + 32) = v11;
        *(_OWORD *)(a2 + 48) = v12;
        long long v14 = *(_OWORD *)(v7 + 96);
        long long v15 = *(_OWORD *)(v7 + 112);
        long long v16 = *(_OWORD *)(v7 + 144);
        *(_OWORD *)(a2 + 128) = *(_OWORD *)(v7 + 128);
        *(_OWORD *)(a2 + 144) = v16;
        *(_OWORD *)(a2 + 96) = v14;
        *(_OWORD *)(a2 + 112) = v15;
        a2 += 160;
        if (a2 - *result == 4000)
        {
          uint64_t v17 = result[1];
          ++result;
          a2 = v17;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1000B9238(void *a1, void *a2, char *a3, void *a4, char *a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 25 * (a4 - a2)
  }
       - 0x3333333333333333 * ((uint64_t)&a5[-*a4] >> 5)
       + 0x3333333333333333 * ((uint64_t)&a3[-*a2] >> 5);
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  uint64_t v9 = (char **)(v8 + 8 * (v7 / 0x19));
  if (a1[2] == v8) {
    long long v10 = 0;
  }
  else {
    long long v10 = &(*v9)[160 * (v7 % 0x19)];
  }
  if (a3 == v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = 25 * ((char **)a2 - v9)
  }
        - 0x3333333333333333 * ((uint64_t)&a3[-*a2] >> 5)
        + 0x3333333333333333 * ((v10 - *v9) >> 5);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x19);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_1000B94D4(v24, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_1000B94D4(v24, v6);
      sub_100AD84A8(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v24[0].n128_u64[0], (char *)v24[0].n128_u64[1], v24);
      uint64_t v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_10017D570((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_1000B94D4(v24, v6);
      __n128 v13 = v24[0];
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      long long v16 = (unsigned char **)(v15 + 8 * (v14 / 0x19));
      if (a1[2] == v15) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = &(*v16)[160 * (v14 % 0x19)];
      }
      v24[0] = v12;
      sub_1000BBE7C(v13.n128_u64[0], (unsigned char *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_1000BBE04(a1, 1) & 1) != 0)
        ;
    }
  }
  unint64_t v19 = a1[4];
  uint64_t v20 = a1[1];
  __n128 v21 = (void *)(v20 + 8 * (v19 / 0x19));
  if (a1[2] == v20) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = *v21 + 160 * (v19 % 0x19);
  }
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_1000B94D4(v24, v11);
  return v24[0].n128_u64[0];
}

void *sub_1000B94D4(void *result, uint64_t a2)
{
  if (a2)
  {
    double v2 = (void *)*result;
    unint64_t v3 = a2 - 0x3333333333333333 * ((uint64_t)(result[1] - *(void *)*result) >> 5);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 24 - v3;
      uint64_t v6 = &v2[-(v5 / 0x19)];
      *uint64_t result = v6;
      unint64_t v4 = *v6 + 160 * (25 * (v5 / 0x19) - v5) + 3840;
    }
    else
    {
      *uint64_t result = &v2[v3 / 0x19];
      unint64_t v4 = v2[v3 / 0x19] + 160 * (v3 % 0x19);
    }
    result[1] = v4;
  }
  return result;
}

void sub_1000B9590(uint64_t a1, __n128 a2)
{
  double v2 = a2.n128_f64[0];
  a2.n128_u64[0] = *(void *)(a1 + 64);
  *(double *)(a1 + 64) = v2;
  if (*(unsigned char *)(a1 + 8) && *(double *)(a1 + 72) < v2)
  {
    *(unsigned char *)(a1 + 8) = 0;
    unint64_t v4 = *(void (**)(__n128))(*(void *)a1 + 24);
    v4(a2);
    return;
  }
  if (a2.n128_f64[0] > v2)
  {
    unint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 32);
        unint64_t v5 = (void **)(*(void *)(a1 + 24) + 8);
        *(void *)(a1 + 24) = v5;
        unint64_t v7 = v8 - (void)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 128;
    }
    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_17:
        *(void *)(a1 + 96) = 0xBFF0000000000000;
        if (*(unsigned char *)(a1 + 8)) {
          sub_100AD865C(a1);
        }
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022DCCA8);
        }
        unint64_t v19 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          double v29 = v2;
          __int16 v30 = 2048;
          uint64_t v31 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022DCCA8);
          }
          __n128 v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLSourceBuffer<CLAmbientLightSensor_Type::CLALSLuxResult>::update(CFAbsoluteTime) [T = CLAmbientLightSensor_Type::CLALSLuxResult]", "%s\n", v21);
          if (v21 != (char *)buf) {
            free(v21);
          }
        }
        return;
      }
      uint64_t v9 = 256;
    }
    *(void *)(a1 + 48) = v9;
    goto LABEL_17;
  }
  if (*(double *)(a1 + 96) != -1.0)
  {
    unint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    __n128 v13 = (void *)(v11 + 8 * (v10 >> 8));
    if (v12 == v11)
    {
      uint64_t v15 = 0;
      uint64_t v18 = 0;
      unint64_t v14 = (void *)(a1 + 56);
      uint64_t v17 = (void *)(v11 + 8 * ((*(void *)(a1 + 56) + v10) >> 8));
    }
    else
    {
      unint64_t v14 = (void *)(a1 + 56);
      uint64_t v15 = (double *)(*v13 + 16 * v10);
      unint64_t v16 = *(void *)(a1 + 56) + v10;
      uint64_t v17 = (void *)(v11 + 8 * (v16 >> 8));
      uint64_t v18 = (double *)(*v17 + 16 * v16);
    }
    __n128 v23 = (char *)sub_10017C060(v13, v15, (uint64_t)v17, v18, *(uint64_t *)&v2, a1);
    unint64_t v24 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v25 = *(void *)(a1 + 24);
    uint64_t v26 = (char *)(v25 + 8 * (v24 >> 8));
    uint64_t v27 = *(void *)(a1 + 32) == v25 ? 0 : *(void *)v26 + 16 * v24;
    sub_100065154((void *)(a1 + 16), v23, v22, v26, v27);
    if (!*v14) {
      *(void *)(a1 + 96) = 0xBFF0000000000000;
    }
  }
}

void sub_1000B993C(uint64_t a1, __n128 a2)
{
  double v2 = a2.n128_f64[0];
  a2.n128_u64[0] = *(void *)(a1 + 64);
  *(double *)(a1 + 64) = v2;
  if (*(unsigned char *)(a1 + 8) && *(double *)(a1 + 72) < v2)
  {
    *(unsigned char *)(a1 + 8) = 0;
    unint64_t v4 = *(void (**)(__n128))(*(void *)a1 + 24);
    v4(a2);
    return;
  }
  if (a2.n128_f64[0] > v2)
  {
    unint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 32);
        unint64_t v5 = (void **)(*(void *)(a1 + 24) + 8);
        *(void *)(a1 + 24) = v5;
        unint64_t v7 = v8 - (void)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 64;
    }
    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_17:
        *(void *)(a1 + 96) = 0xBFF0000000000000;
        if (*(unsigned char *)(a1 + 8)) {
          sub_100ADA9E4(a1);
        }
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022DCCA8);
        }
        unint64_t v19 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          double v29 = v2;
          __int16 v30 = 2048;
          uint64_t v31 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022DCCA8);
          }
          __n128 v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLSourceBuffer<CLOutdoorGnssAvailabilityPredictor>::update(CFAbsoluteTime) [T = CLOutdoorGnssAvailabilityPredictor]", "%s\n", v21);
          if (v21 != (char *)buf) {
            free(v21);
          }
        }
        return;
      }
      uint64_t v9 = 128;
    }
    *(void *)(a1 + 48) = v9;
    goto LABEL_17;
  }
  if (*(double *)(a1 + 96) != -1.0)
  {
    unint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    __n128 v13 = (void *)(v11 + 8 * (v10 >> 7));
    if (v12 == v11)
    {
      unint64_t v14 = 0;
      uint64_t v18 = 0;
      uint64_t v15 = (void *)(a1 + 56);
      uint64_t v17 = (void *)(v11 + 8 * ((*(void *)(a1 + 56) + v10) >> 7));
    }
    else
    {
      unint64_t v14 = (_OWORD *)(*v13 + 32 * (v10 & 0x7F));
      uint64_t v15 = (void *)(a1 + 56);
      unint64_t v16 = *(void *)(a1 + 56) + v10;
      uint64_t v17 = (void *)(v11 + 8 * (v16 >> 7));
      uint64_t v18 = (_OWORD *)(*v17 + 32 * (v16 & 0x7F));
    }
    __n128 v23 = (char *)sub_10017C110(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&v2, a1);
    unint64_t v24 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v25 = *(void *)(a1 + 24);
    uint64_t v26 = (char *)(v25 + 8 * (v24 >> 7));
    uint64_t v27 = *(void *)(a1 + 32) == v25 ? 0 : *(void *)v26 + 32 * (v24 & 0x7F);
    sub_100173080((void *)(a1 + 16), v23, v22, v26, v27);
    if (!*v15) {
      *(void *)(a1 + 96) = 0xBFF0000000000000;
    }
  }
}

void sub_1000B9CF4(uint64_t a1, __n128 a2)
{
  double v2 = a2.n128_f64[0];
  a2.n128_u64[0] = *(void *)(a1 + 64);
  *(double *)(a1 + 64) = v2;
  if (*(unsigned char *)(a1 + 8) && *(double *)(a1 + 72) < v2)
  {
    *(unsigned char *)(a1 + 8) = 0;
    unint64_t v4 = *(void (**)(__n128))(*(void *)a1 + 24);
    v4(a2);
    return;
  }
  if (a2.n128_f64[0] > v2)
  {
    unint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 32);
        unint64_t v5 = (void **)(*(void *)(a1 + 24) + 8);
        *(void *)(a1 + 24) = v5;
        unint64_t v7 = v8 - (void)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 128;
    }
    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_17:
        *(void *)(a1 + 96) = 0xBFF0000000000000;
        if (*(unsigned char *)(a1 + 8)) {
          sub_100AD88C8(a1);
        }
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022DCCA8);
        }
        unint64_t v19 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          double v29 = v2;
          __int16 v30 = 2048;
          uint64_t v31 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022DCCA8);
          }
          __n128 v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLSourceBuffer<CLOutdoorLocationCoordinate>::update(CFAbsoluteTime) [T = CLOutdoorLocationCoordinate]", "%s\n", v21);
          if (v21 != (char *)buf) {
            free(v21);
          }
        }
        return;
      }
      uint64_t v9 = 256;
    }
    *(void *)(a1 + 48) = v9;
    goto LABEL_17;
  }
  if (*(double *)(a1 + 96) != -1.0)
  {
    unint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    __n128 v13 = (void *)(v11 + 8 * (v10 >> 8));
    if (v12 == v11)
    {
      uint64_t v15 = 0;
      uint64_t v18 = 0;
      unint64_t v14 = (void *)(a1 + 56);
      uint64_t v17 = (void *)(v11 + 8 * ((*(void *)(a1 + 56) + v10) >> 8));
    }
    else
    {
      unint64_t v14 = (void *)(a1 + 56);
      uint64_t v15 = (double *)(*v13 + 16 * v10);
      unint64_t v16 = *(void *)(a1 + 56) + v10;
      uint64_t v17 = (void *)(v11 + 8 * (v16 >> 8));
      uint64_t v18 = (double *)(*v17 + 16 * v16);
    }
    __n128 v23 = (char *)sub_10017C060(v13, v15, (uint64_t)v17, v18, *(uint64_t *)&v2, a1);
    unint64_t v24 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v25 = *(void *)(a1 + 24);
    uint64_t v26 = (char *)(v25 + 8 * (v24 >> 8));
    uint64_t v27 = *(void *)(a1 + 32) == v25 ? 0 : *(void *)v26 + 16 * v24;
    sub_100065154((void *)(a1 + 16), v23, v22, v26, v27);
    if (!*v14) {
      *(void *)(a1 + 96) = 0xBFF0000000000000;
    }
  }
}

void sub_1000BA0A0(uint64_t a1, __n128 a2)
{
  double v2 = a2.n128_f64[0];
  a2.n128_u64[0] = *(void *)(a1 + 64);
  *(double *)(a1 + 64) = v2;
  if (*(unsigned char *)(a1 + 8) && *(double *)(a1 + 72) < v2)
  {
    *(unsigned char *)(a1 + 8) = 0;
    unint64_t v4 = *(void (**)(__n128))(*(void *)a1 + 24);
    v4(a2);
    return;
  }
  if (a2.n128_f64[0] > v2)
  {
    unint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void ***)(a1 + 32);
    if (v6 == v5)
    {
      unint64_t v7 = (void *)(a1 + 56);
      uint64_t v6 = *(void ***)(a1 + 24);
    }
    else
    {
      unint64_t v7 = (void *)(a1 + 56);
      unint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = &v5[v8 / 0x55];
      unint64_t v10 = (unint64_t)*v9;
      unint64_t v11 = (unint64_t)*v9 + 48 * (v8 % 0x55);
      unint64_t v12 = (unint64_t)v5[(*(void *)(a1 + 56) + v8) / 0x55] + 48 * ((*(void *)(a1 + 56) + v8) % 0x55);
      if (v11 != v12)
      {
        do
        {
          __n128 v13 = *(void **)(v11 + 24);
          if (v13)
          {
            *(void *)(v11 + 32) = v13;
            operator delete(v13);
            unint64_t v10 = (unint64_t)*v9;
          }
          v11 += 48;
          if (v11 - v10 == 4080)
          {
            unint64_t v14 = (unint64_t)v9[1];
            ++v9;
            unint64_t v10 = v14;
            unint64_t v11 = v14;
          }
        }
        while (v11 != v12);
        unint64_t v5 = *(void ***)(a1 + 24);
        uint64_t v6 = *(void ***)(a1 + 32);
      }
    }
    *unint64_t v7 = 0;
    unint64_t v23 = (char *)v6 - (char *)v5;
    if ((unint64_t)((char *)v6 - (char *)v5) >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v24 = *(void *)(a1 + 32);
        unint64_t v5 = (void **)(*(void *)(a1 + 24) + 8);
        *(void *)(a1 + 24) = v5;
        unint64_t v23 = v24 - (void)v5;
      }
      while (v23 > 0x10);
    }
    if (v23 >> 3 == 1)
    {
      uint64_t v25 = 42;
    }
    else
    {
      if (v23 >> 3 != 2)
      {
LABEL_26:
        *(void *)(a1 + 96) = 0xBFF0000000000000;
        if (*(unsigned char *)(a1 + 8)) {
          sub_100AD9E10(a1);
        }
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022DCCA8);
        }
        uint64_t v26 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          uint64_t v27 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          *(double *)&uint8_t buf[4] = v2;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v27;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022DCCA8);
          }
          size_t v28 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLSourceBuffer<CLOutdoorGnssLeechLocation>::update(CFAbsoluteTime) [T = CLOutdoorGnssLeechLocation]", "%s\n", v28);
          if (v28 != (char *)buf) {
            free(v28);
          }
        }
        return;
      }
      uint64_t v25 = 85;
    }
    *(void *)(a1 + 48) = v25;
    goto LABEL_26;
  }
  long long v36 = 0u;
  memset(buf, 0, sizeof(buf));
  if (sub_1000BA568(a1, (uint64_t)buf))
  {
    unint64_t v15 = *(void *)(a1 + 48);
    uint64_t v16 = *(void *)(a1 + 24);
    uint64_t v17 = (void *)(v16 + 8 * (v15 / 0x55));
    if (*(void *)(a1 + 32) == v16)
    {
      uint64_t v18 = 0;
      uint64_t v22 = 0;
      unint64_t v19 = (void *)(a1 + 56);
      __n128 v21 = (void *)(v16 + 8 * ((*(void *)(a1 + 56) + v15) / 0x55));
    }
    else
    {
      uint64_t v18 = (long long *)(*(void *)(v16 + 8 * (v15 / 0x55)) + 48 * (v15 % 0x55));
      unint64_t v19 = (void *)(a1 + 56);
      unint64_t v20 = *(void *)(a1 + 56) + v15;
      __n128 v21 = (void *)(v16 + 8 * (v20 / 0x55));
      uint64_t v22 = (long long *)(*v21 + 48 * (v20 % 0x55));
    }
    __int16 v30 = sub_100ADA1C8(v17, v18, (uint64_t)v21, v22, *(uint64_t *)&v2, a1);
    unint64_t v31 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v32 = *(void *)(a1 + 24);
    __int16 v33 = (void *)(v32 + 8 * (v31 / 0x55));
    uint64_t v34 = *(void *)(a1 + 32) == v32 ? 0 : *v33 + 48 * (v31 % 0x55);
    sub_100AD9EA4((void *)(a1 + 16), v30, v29, v33, v34);
    if (!*v19) {
      *(void *)(a1 + 96) = 0xBFF0000000000000;
    }
  }
  if (*(void *)&buf[24])
  {
    *(void *)&long long v36 = *(void *)&buf[24];
    operator delete(*(void **)&buf[24]);
  }
}

void sub_1000BA53C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000BA568(uint64_t a1, uint64_t a2)
{
  double v2 = (long long *)(a1 + 96);
  double v3 = *(double *)(a1 + 96);
  if (v3 != -1.0)
  {
    long long v4 = *v2;
    *(void *)(a2 + 16) = *(void *)(a1 + 112);
    *(_OWORD *)a2 = v4;
    if (v2 != (long long *)a2) {
      sub_100ADA2D8((char *)(a2 + 24), *(char **)(a1 + 120), *(void *)(a1 + 128), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 2));
    }
  }
  return v3 != -1.0;
}

void sub_1000BA5E4(uint64_t a1, __n128 a2)
{
  double v2 = a2.n128_f64[0];
  a2.n128_u64[0] = *(void *)(a1 + 64);
  *(double *)(a1 + 64) = v2;
  if (*(unsigned char *)(a1 + 8) && *(double *)(a1 + 72) < v2)
  {
    *(unsigned char *)(a1 + 8) = 0;
    long long v4 = *(void (**)(__n128))(*(void *)a1 + 24);
    v4(a2);
    return;
  }
  if (a2.n128_f64[0] > v2)
  {
    unint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 32);
        unint64_t v5 = (void **)(*(void *)(a1 + 24) + 8);
        *(void *)(a1 + 24) = v5;
        unint64_t v7 = v8 - (void)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 8;
    }
    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_17:
        *(void *)(a1 + 96) = 0xBFF0000000000000;
        if (*(unsigned char *)(a1 + 8)) {
          sub_100186B50(a1);
        }
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022DCCA8);
        }
        unint64_t v19 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          double v29 = v2;
          __int16 v30 = 2048;
          uint64_t v31 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022DCCA8);
          }
          __n128 v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLSourceBuffer<CLExtendedStepCountEntry>::update(CFAbsoluteTime) [T = CLExtendedStepCountEntry]", "%s\n", v21);
          if (v21 != (char *)buf) {
            free(v21);
          }
        }
        return;
      }
      uint64_t v9 = 16;
    }
    *(void *)(a1 + 48) = v9;
    goto LABEL_17;
  }
  if (*(double *)(a1 + 96) != -1.0)
  {
    unint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    __n128 v13 = (void *)(v11 + 8 * (v10 >> 4));
    if (v12 == v11)
    {
      unint64_t v14 = 0;
      uint64_t v18 = 0;
      unint64_t v15 = (void *)(a1 + 56);
      uint64_t v17 = (void *)(v11 + 8 * ((*(void *)(a1 + 56) + v10) >> 4));
    }
    else
    {
      unint64_t v14 = (double *)(*v13 + 320 * (*(void *)(a1 + 48) & 0xFLL));
      unint64_t v15 = (void *)(a1 + 56);
      unint64_t v16 = *(void *)(a1 + 56) + v10;
      uint64_t v17 = (void *)(v11 + 8 * (v16 >> 4));
      uint64_t v18 = (double *)(*v17 + 320 * (v16 & 0xF));
    }
    unint64_t v23 = (char *)sub_1000BA9A4(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&v2, a1);
    unint64_t v24 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v25 = *(void *)(a1 + 24);
    uint64_t v26 = (char *)(v25 + 8 * (v24 >> 4));
    uint64_t v27 = *(void *)(a1 + 32) == v25 ? 0 : (char *)(*(void *)v26 + 320 * (v24 & 0xF));
    sub_1000BAAB8((void *)(a1 + 16), v23, v22, v26, v27);
    if (!*v15) {
      *(void *)(a1 + 96) = 0xBFF0000000000000;
    }
  }
}

void *sub_1000BA9A4(void *a1, double *__dst, uint64_t a3, double *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = __dst;
  if (__dst != a4)
  {
    while (*(double *)&a5 - *v8 <= *(double *)(a6 + 88))
    {
      v8 += 40;
      if ((double *)((char *)v8 - *a1) == (double *)5120)
      {
        uint64_t v11 = (double *)a1[1];
        ++a1;
        uint64_t v8 = v11;
      }
      if (v8 == a4) {
        return a1;
      }
    }
  }
  if (v8 != a4)
  {
    uint64_t v12 = v8;
    __n128 v13 = a1;
    while (1)
    {
      v12 += 40;
      if ((double *)((char *)v12 - *v13) == (double *)5120)
      {
        unint64_t v14 = (double *)v13[1];
        ++v13;
        uint64_t v12 = v14;
      }
      if (v12 == a4) {
        break;
      }
      if (*(double *)&a5 - *v12 <= *(double *)(a6 + 88))
      {
        memcpy(v8, v12, 0x140uLL);
        v8 += 40;
        if ((double *)((char *)v8 - *a1) == (double *)5120)
        {
          unint64_t v15 = (double *)a1[1];
          ++a1;
          uint64_t v8 = v15;
        }
      }
    }
  }
  return a1;
}

unint64_t sub_1000BAAB8(void *a1, char *a2, char *a3, char *a4, char *a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a5[-*(void *)a4] >> 6)
  }
       + 2 * (a4 - a2)
       + 0x3333333333333333 * ((uint64_t)&a3[-*(void *)a2] >> 6);
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  uint64_t v9 = (char **)(v8 + 8 * (v7 >> 4));
  if (a1[2] == v8) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = &(*v9)[320 * (a1[4] & 0xFLL)];
  }
  if (a3 == v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a3[-*(void *)a2] >> 6)
  }
        + 2 * (a2 - (char *)v9)
        + 0x3333333333333333 * ((v10 - *v9) >> 6);
  v22[0].n128_u64[0] = v8 + 8 * (v7 >> 4);
  v22[0].n128_u64[1] = (unint64_t)v10;
  sub_1000BACE4((uint64_t **)v22, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v22[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_1000BACE4((uint64_t **)v22, v6);
      sub_100AD86F0(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v22[0].n128_u64[0], (char *)v22[0].n128_u64[1], v22);
      uint64_t v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_100A32A04((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_1000BACE4((uint64_t **)v22, v6);
      __n128 v13 = v22[0];
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      unint64_t v16 = (unsigned char **)(v15 + 8 * (v14 >> 4));
      if (a1[2] == v15) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = &(*v16)[320 * (v14 & 0xF)];
      }
      v22[0] = v12;
      sub_1000BBC4C(v13.n128_u64[0], (unsigned char *)v13.n128_u64[1], v16, v17, (uint64_t)v22);
      a1[5] -= v6;
      while ((sub_1000BBBDC(a1, 1) & 1) != 0)
        ;
    }
  }
  uint64_t v19 = a1[1];
  if (a1[2] == v19) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(v19 + 8 * (a1[4] >> 4)) + 320 * (a1[4] & 0xFLL);
  }
  v22[0].n128_u64[0] = v19 + 8 * (a1[4] >> 4);
  v22[0].n128_u64[1] = v20;
  sub_1000BACE4((uint64_t **)v22, v11);
  return v22[0].n128_u64[0];
}

uint64_t **sub_1000BACE4(uint64_t **result, uint64_t a2)
{
  if (a2)
  {
    double v2 = *result;
    uint64_t v3 = a2 - 0x3333333333333333 * (((uint64_t)result[1] - **result) >> 6);
    if (v3 < 1)
    {
      unint64_t v7 = 15 - v3;
      uint64_t v8 = &v2[-(v7 >> 4)];
      *uint64_t result = v8;
      uint64_t v5 = *v8;
      unsigned int v6 = ~v7 & 0xF;
    }
    else
    {
      long long v4 = (uint64_t *)((char *)v2 + (((unint64_t)v3 >> 1) & 0x7FFFFFFFFFFFFFF8));
      *uint64_t result = v4;
      uint64_t v5 = *v4;
      unsigned int v6 = v3 & 0xF;
    }
    result[1] = (uint64_t *)(v5 + 320 * v6);
  }
  return result;
}

void sub_1000BAD58(uint64_t a1, __n128 a2)
{
  double v2 = a2.n128_f64[0];
  a2.n128_u64[0] = *(void *)(a1 + 64);
  *(double *)(a1 + 64) = v2;
  if (*(unsigned char *)(a1 + 8) && *(double *)(a1 + 72) < v2)
  {
    *(unsigned char *)(a1 + 8) = 0;
    long long v4 = *(void (**)(__n128))(*(void *)a1 + 24);
    v4(a2);
    return;
  }
  if (a2.n128_f64[0] > v2)
  {
    uint64_t v5 = *(void ***)(a1 + 24);
    unsigned int v6 = *(void ***)(a1 + 32);
    if (v6 == v5)
    {
      unint64_t v7 = (void *)(a1 + 56);
      unsigned int v6 = *(void ***)(a1 + 24);
    }
    else
    {
      unint64_t v7 = (void *)(a1 + 56);
      unint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = &v5[v8 / 0x49];
      unint64_t v10 = (unint64_t)*v9;
      unint64_t v11 = (unint64_t)*v9 + 56 * (v8 % 0x49);
      unint64_t v12 = (unint64_t)v5[(*(void *)(a1 + 56) + v8) / 0x49] + 56 * ((*(void *)(a1 + 56) + v8) % 0x49);
      if (v11 != v12)
      {
        do
        {
          __n128 v13 = *(void **)(v11 + 16);
          if (v13)
          {
            *(void *)(v11 + 24) = v13;
            operator delete(v13);
            unint64_t v10 = (unint64_t)*v9;
          }
          v11 += 56;
          if (v11 - v10 == 4088)
          {
            unint64_t v14 = (unint64_t)v9[1];
            ++v9;
            unint64_t v10 = v14;
            unint64_t v11 = v14;
          }
        }
        while (v11 != v12);
        uint64_t v5 = *(void ***)(a1 + 24);
        unsigned int v6 = *(void ***)(a1 + 32);
      }
    }
    *unint64_t v7 = 0;
    unint64_t v28 = (char *)v6 - (char *)v5;
    if ((unint64_t)((char *)v6 - (char *)v5) >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v29 = *(void *)(a1 + 32);
        uint64_t v5 = (void **)(*(void *)(a1 + 24) + 8);
        *(void *)(a1 + 24) = v5;
        unint64_t v28 = v29 - (void)v5;
      }
      while (v28 > 0x10);
    }
    if (v28 >> 3 == 1)
    {
      uint64_t v30 = 36;
    }
    else
    {
      if (v28 >> 3 != 2)
      {
LABEL_26:
        *(void *)(a1 + 96) = 0xBFF0000000000000;
        if (*(unsigned char *)(a1 + 8)) {
          sub_100ADAC04(a1);
        }
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022DCCA8);
        }
        uint64_t v31 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          uint64_t v32 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          *(double *)&uint8_t buf[4] = v2;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v32;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022DCCA8);
          }
          __int16 v33 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLSourceBuffer<CLOutdoorMapsRouteHint>::update(CFAbsoluteTime) [T = CLOutdoorMapsRouteHint]", "%s\n", v33);
          if (v33 != buf) {
            free(v33);
          }
        }
        return;
      }
      uint64_t v30 = 73;
    }
    *(void *)(a1 + 48) = v30;
    goto LABEL_26;
  }
  *(void *)buf = 0;
  *(void *)&uint8_t buf[8] = 0x600000006;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  *(void *)&buf[16] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v43 = _Q0;
  if (sub_1000BB24C(a1, (uint64_t)buf))
  {
    unint64_t v20 = *(void *)(a1 + 48);
    uint64_t v21 = *(void *)(a1 + 24);
    uint64_t v22 = (void *)(v21 + 8 * (v20 / 0x49));
    if (*(void *)(a1 + 32) == v21)
    {
      uint64_t v23 = 0;
      uint64_t v27 = 0;
      unint64_t v24 = (void *)(a1 + 56);
      uint64_t v26 = (void *)(v21
                     + (((unint64_t)(((*(void *)(a1 + 56) + v20) * (unsigned __int128)0x70381C0E070381C1uLL) >> 64) >> 2) & 0x1FFFFFFFFFFFFFF8));
    }
    else
    {
      uint64_t v23 = *(void *)(v21 + 8 * (v20 / 0x49)) + 56 * (v20 % 0x49);
      unint64_t v24 = (void *)(a1 + 56);
      unint64_t v25 = *(void *)(a1 + 56) + v20;
      uint64_t v26 = (void *)(v21 + 8 * (v25 / 0x49));
      uint64_t v27 = *v26 + 56 * (v25 % 0x49);
    }
    long long v35 = sub_100ADB004(v22, v23, (uint64_t)v26, v27, *(uint64_t *)&v2, a1);
    unint64_t v36 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v37 = *(void *)(a1 + 24);
    long long v38 = (void *)(v37 + 8 * (v36 / 0x49));
    uint64_t v39 = *(void *)(a1 + 32) == v37 ? 0 : *v38 + 56 * (v36 % 0x49);
    sub_100ADAC98((void *)(a1 + 16), v35, v34, v38, v39);
    if (!*v24) {
      *(void *)(a1 + 96) = 0xBFF0000000000000;
    }
  }
  if (*(void *)&buf[16])
  {
    uint64_t v41 = *(void *)&buf[16];
    operator delete(*(void **)&buf[16]);
  }
}

void sub_1000BB220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000BB24C(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 96);
  if (v2 != -1.0)
  {
    *(double *)a2 = v2;
    *(void *)(a2 + 8) = *(void *)(a1 + 104);
    if (a1 + 96 != a2) {
      sub_1008A9A00((char *)(a2 + 16), *(char **)(a1 + 112), *(void *)(a1 + 120), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 3));
    }
    *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 136);
  }
  return v2 != -1.0;
}

void sub_1000BB2D0(uint64_t a1, __n128 a2)
{
  double v2 = a2.n128_f64[0];
  a2.n128_u64[0] = *(void *)(a1 + 64);
  *(double *)(a1 + 64) = v2;
  if (*(unsigned char *)(a1 + 8) && *(double *)(a1 + 72) < v2)
  {
    *(unsigned char *)(a1 + 8) = 0;
    long long v4 = *(void (**)(__n128))(*(void *)a1 + 24);
    v4(a2);
    return;
  }
  if (a2.n128_f64[0] > v2)
  {
    uint64_t v5 = *(void ***)(a1 + 24);
    unsigned int v6 = *(void ***)(a1 + 32);
    if (v6 == v5)
    {
      unint64_t v7 = (void *)(a1 + 56);
      unsigned int v6 = *(void ***)(a1 + 24);
    }
    else
    {
      unint64_t v7 = (void *)(a1 + 56);
      unint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = &v5[v8 >> 7];
      uint64_t v10 = (uint64_t)*v9 + 32 * (v8 & 0x7F);
      uint64_t v11 = *(uint64_t *)((char *)v5 + (((*(void *)(a1 + 56) + v8) >> 4) & 0xFFFFFFFFFFFFFF8))
          + 32 * ((*(void *)(a1 + 56) + v8) & 0x7F);
      if (v10 != v11)
      {
        do
        {
          *(void *)buf = v10 + 8;
          sub_1000D7F78((void ***)buf);
          v10 += 32;
          if (v10 - (void)*v9 == 4096)
          {
            uint64_t v12 = (uint64_t)v9[1];
            ++v9;
            uint64_t v10 = v12;
          }
        }
        while (v10 != v11);
        uint64_t v5 = *(void ***)(a1 + 24);
        unsigned int v6 = *(void ***)(a1 + 32);
      }
    }
    *unint64_t v7 = 0;
    unint64_t v21 = (char *)v6 - (char *)v5;
    if (v21 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v22 = *(void *)(a1 + 32);
        uint64_t v5 = (void **)(*(void *)(a1 + 24) + 8);
        *(void *)(a1 + 24) = v5;
        unint64_t v21 = v22 - (void)v5;
      }
      while (v21 > 0x10);
    }
    if (v21 >> 3 == 1)
    {
      uint64_t v23 = 64;
    }
    else
    {
      if (v21 >> 3 != 2)
      {
LABEL_24:
        *(void *)(a1 + 96) = 0xBFF0000000000000;
        if (*(unsigned char *)(a1 + 8)) {
          sub_100AD9554(a1);
        }
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022DCCA8);
        }
        unint64_t v24 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          uint64_t v25 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          *(double *)&uint8_t buf[4] = v2;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022DCCA8);
          }
          uint64_t v26 = *(void *)(a1 + 64);
          *(_DWORD *)uint64_t v34 = 134218240;
          *(double *)&v34[4] = v2;
          __int16 v35 = 2048;
          uint64_t v36 = v26;
          uint64_t v27 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLSourceBuffer<CLOutdoorWifiScan>::update(CFAbsoluteTime) [T = CLOutdoorWifiScan]", "%s\n", v27);
          if (v27 != (char *)buf) {
            free(v27);
          }
        }
        return;
      }
      uint64_t v23 = 128;
    }
    *(void *)(a1 + 48) = v23;
    goto LABEL_24;
  }
  memset(buf, 0, 32);
  if (sub_1000BB754(a1, (uint64_t)buf))
  {
    unint64_t v13 = *(void *)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 24);
    uint64_t v15 = (void *)(v14 + 8 * (v13 >> 7));
    if (*(void *)(a1 + 32) == v14)
    {
      uint64_t v16 = 0;
      uint64_t v20 = 0;
      uint64_t v17 = (void *)(a1 + 56);
      uint64_t v19 = (void *)(v14 + 8 * ((*(void *)(a1 + 56) + v13) >> 7));
    }
    else
    {
      uint64_t v16 = *v15 + 32 * (*(void *)(a1 + 48) & 0x7FLL);
      uint64_t v17 = (void *)(a1 + 56);
      unint64_t v18 = *(void *)(a1 + 56) + v13;
      uint64_t v19 = (void *)(v14 + 8 * (v18 >> 7));
      uint64_t v20 = *v19 + 32 * (v18 & 0x7F);
    }
    uint64_t v29 = (char *)sub_100AD989C(v15, v16, (uint64_t)v19, v20, *(uint64_t *)&v2, a1);
    unint64_t v30 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v31 = *(void *)(a1 + 24);
    uint64_t v32 = (char *)(v31 + 8 * (v30 >> 7));
    uint64_t v33 = *(void *)(a1 + 32) == v31 ? 0 : *(void *)v32 + 32 * (v30 & 0x7F);
    sub_100AD95E8((void *)(a1 + 16), v29, v28, v32, v33);
    if (!*v17) {
      *(void *)(a1 + 96) = 0xBFF0000000000000;
    }
  }
  *(void *)uint64_t v34 = &buf[8];
  sub_1000D7F78((void ***)v34);
}

void sub_1000BB724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  a11 = (void **)&a16;
  sub_1000D7F78(&a11);
  _Unwind_Resume(a1);
}

BOOL sub_1000BB754(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 96);
  if (v2 != -1.0)
  {
    *(double *)a2 = v2;
    if (a1 + 96 != a2) {
      sub_1000DAC8C((uint64_t *)(a2 + 8), *(void *)(a1 + 104), *(void *)(a1 + 112), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 3));
    }
  }
  return v2 != -1.0;
}

void sub_1000BB7C4(uint64_t a1, __n128 a2)
{
  double v2 = a2.n128_f64[0];
  a2.n128_u64[0] = *(void *)(a1 + 64);
  *(double *)(a1 + 64) = v2;
  if (*(unsigned char *)(a1 + 8) && *(double *)(a1 + 72) < v2)
  {
    *(unsigned char *)(a1 + 8) = 0;
    long long v4 = *(void (**)(__n128))(*(void *)a1 + 24);
    v4(a2);
    return;
  }
  if (a2.n128_f64[0] > v2)
  {
    uint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v5 = (void **)(*(void *)(a1 + 24) + 8);
        *(void *)(a1 + 24) = v5;
        unint64_t v7 = v8 - (void)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 10;
    }
    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_17:
        *(void *)(a1 + 96) = 0xBFF0000000000000;
        if (*(unsigned char *)(a1 + 8)) {
          sub_1006C1B00(a1);
        }
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022DCCA8);
        }
        uint64_t v19 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          double v29 = v2;
          __int16 v30 = 2048;
          uint64_t v31 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022DCCA8);
          }
          unint64_t v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLSourceBuffer<CLOdometerEntry>::update(CFAbsoluteTime) [T = CLOdometerEntry]", "%s\n", v21);
          if (v21 != (char *)buf) {
            free(v21);
          }
        }
        return;
      }
      uint64_t v9 = 21;
    }
    *(void *)(a1 + 48) = v9;
    goto LABEL_17;
  }
  if (*(double *)(a1 + 96) != -1.0)
  {
    unint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    unint64_t v13 = (void *)(v11 + 8 * (v10 / 0x15));
    if (v12 == v11)
    {
      uint64_t v14 = 0;
      unint64_t v18 = 0;
      uint64_t v15 = (void *)(a1 + 56);
      uint64_t v17 = (void *)(v11 + 8 * ((*(void *)(a1 + 56) + v10) / 0x15));
    }
    else
    {
      uint64_t v14 = (double *)(*(void *)(v11 + 8 * (v10 / 0x15)) + 192 * (v10 % 0x15));
      uint64_t v15 = (void *)(a1 + 56);
      unint64_t v16 = *(void *)(a1 + 56) + v10;
      uint64_t v17 = (void *)(v11 + 8 * (v16 / 0x15));
      unint64_t v18 = (double *)(*v17 + 192 * (v16 % 0x15));
    }
    uint64_t v23 = sub_100AD895C(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&v2, a1);
    unint64_t v24 = *(void *)(a1 + 48) + *(void *)(a1 + 56);
    uint64_t v25 = *(void *)(a1 + 24);
    uint64_t v26 = (void *)(v25 + 8 * (v24 / 0x15));
    uint64_t v27 = *(void *)(a1 + 32) == v25 ? 0 : (char *)(*v26 + 192 * (v24 % 0x15));
    sub_100171BFC((void *)(a1 + 16), v23, v22, v26, v27);
    if (!*v15) {
      *(void *)(a1 + 96) = 0xBFF0000000000000;
    }
  }
}

uint64_t sub_1000BBBDC(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 2 * (v2 - v3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x10) {
    a2 = 1;
  }
  if (v5 < 0x20) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

double sub_1000BBC4C(unsigned char **a1, unsigned char *a2, unsigned char **a3, unsigned char *a4, uint64_t a5)
{
  int v7 = *(void ***)a5;
  uint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    unint64_t v10 = a1 + 1;
    sub_1000BBD08(a2, v8, *a1 + 5120, v7, &v13);
    uint64_t v8 = (char *)*((void *)&v14 + 1);
    int v7 = (void **)v14;
    *(void *)a5 = v14;
    for (*(void *)(a5 + 8) = v8; v10 != a3; *(void *)(a5 + 8) = v8)
    {
      uint64_t v11 = *v10++;
      sub_1000BBD08(v11, v8, v11 + 5120, v7, &v13);
      uint64_t v8 = (char *)*((void *)&v14 + 1);
      int v7 = (void **)v14;
      *(void *)a5 = v14;
    }
    a2 = *a3;
  }
  sub_1000BBD08(a2, v8, a4, v7, &v13);
  double result = *(double *)&v14;
  *(_OWORD *)a5 = v14;
  return result;
}

void *sub_1000BBD08@<X0>(unsigned char *__src@<X1>, char *__dst@<X4>, unsigned char *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a4;
  int v7 = __src;
  if (__src == a3)
  {
    uint64_t v9 = __src;
  }
  else
  {
    uint64_t v9 = a3;
    uint64_t v6 = a4 + 1;
    unint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - __dst + 5120) >> 6);
      unint64_t v12 = (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 6)) >= v11 ? v11 : 0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 6);
      if (v12) {
        double result = memmove(__dst, v7, 320 * v12);
      }
      v7 += 320 * v12;
      if (v7 == v9) {
        break;
      }
      long long v14 = (char *)*v6++;
      unint64_t v10 = v14;
      __dst = v14;
    }
    __dst += 320 * v12;
    if ((char *)*(v6 - 1) + 5120 == __dst) {
      __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

uint64_t sub_1000BBE04(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 25 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x19) {
    a2 = 1;
  }
  if (v5 < 0x32) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

double sub_1000BBE7C(void *a1, unsigned char *a2, unsigned char **a3, unsigned char *a4, uint64_t a5)
{
  int v7 = *(void ***)a5;
  uint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    unint64_t v10 = a1 + 1;
    for (i = (unsigned char *)(*a1 + 4000); ; i = v12 + 4000)
    {
      sub_1000BBF10(a2, v8, i, v7, &v14);
      uint64_t v8 = (char *)*((void *)&v15 + 1);
      int v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      unint64_t v12 = (unsigned char *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_1000BBF10(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_1000BBF10@<X0>(unsigned char *__src@<X1>, char *__dst@<X4>, unsigned char *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a4;
  int v7 = __src;
  if (__src == a3)
  {
    uint64_t v9 = __src;
  }
  else
  {
    uint64_t v9 = a3;
    uint64_t v6 = a4 + 1;
    unint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - __dst + 4000) >> 5);
      unint64_t v12 = (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 5)) >= v11 ? v11 : 0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 5);
      if (v12) {
        double result = memmove(__dst, v7, 160 * v12);
      }
      v7 += 160 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      unint64_t v10 = v14;
      __dst = v14;
    }
    __dst += 160 * v12;
    if ((char *)*(v6 - 1) + 4000 == __dst) {
      __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void sub_1000BBFFC(double *a1, double a2)
{
  sub_1000B8704((uint64_t)(a1 + 1), a2);
  if ((*(unsigned int (**)(double *))(*(void *)a1 + 88))(a1))
  {
    double Current = CFAbsoluteTimeGetCurrent();
    double v4 = a1[10];
    if (qword_1024192A0 != -1) {
      dispatch_once(&qword_1024192A0, &stru_1022F9488);
    }
    double v5 = vabdd_f64(Current, v4);
    uint64_t v6 = qword_1024192A8;
    if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *((void *)a1 + 12);
      uint64_t v8 = *((void *)a1 + 7);
      double v9 = sub_1000BC960((uint64_t)(a1 + 64));
      uint64_t v10 = *((void *)a1 + 9);
      *(_DWORD *)buf = 134219008;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v5;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)id v82 = v8;
      *(_WORD *)&v82[4] = 2048;
      *(double *)&v82[6] = v9;
      *(_WORD *)&v82[14] = 2048;
      *(void *)&v82[16] = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "IndoorOutdoor,TimeExceeded,maxAllowed,%f,timePassed,%f,locType,%d,distance,%f,outdoorProbability,%f", buf, 0x30u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192A0 != -1) {
        dispatch_once(&qword_1024192A0, &stru_1022F9488);
      }
      uint64_t v42 = *((void *)a1 + 12);
      uint64_t v43 = *((void *)a1 + 7);
      double v44 = sub_1000BC960((uint64_t)(a1 + 64));
      uint64_t v45 = *((void *)a1 + 9);
      LODWORD(__dst[0]) = 134219008;
      *(void *)((char *)__dst + 4) = v42;
      WORD2(__dst[1]) = 2048;
      *(double *)((char *)&__dst[1] + 6) = v5;
      HIWORD(__dst[2]) = 1024;
      LODWORD(__dst[3]) = v43;
      WORD2(__dst[3]) = 2048;
      *(double *)((char *)&__dst[3] + 6) = v44;
      HIWORD(__dst[4]) = 2048;
      __dst[5] = v45;
      char v46 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLIndoorOutdoorDetectorWatch::update(CFAbsoluteTime)", "%s\n", v46);
      if (v46 != buf) {
        free(v46);
      }
    }
    *((unsigned char *)a1 + 112) = 1;
    (*(void (**)(double *, uint64_t, void *))(*(void *)a1 + 72))(a1, 1, (void *)a1 + 7);
  }
  else
  {
    uint64_t v11 = (*(uint64_t (**)(void))(**((void **)a1 + 4) + 32))(*((void *)a1 + 4));
    sub_100186B50(v11);
    if (*((unsigned char *)a1 + 113))
    {
      uint64_t v12 = (*(uint64_t (**)(void))(**((void **)a1 + 4) + 56))(*((void *)a1 + 4));
      sub_100AD8E44(v12);
      uint64_t v13 = (*(uint64_t (**)(void))(**((void **)a1 + 4) + 40))(*((void *)a1 + 4));
      sub_1006C1B00(v13);
    }
    uint64_t v14 = (double *)((*(uint64_t (**)(void))(**((void **)a1 + 4) + 32))(*((void *)a1 + 4)) + 96);
    if (*v14 != -1.0)
    {
      memcpy(__dst, v14, sizeof(__dst));
      if (a1[11] == -1.79769313e308)
      {
        a1[11] = *(double *)__dst;
        sub_1010FFB80((uint64_t)(a1 + 77), __dst);
        memcpy(a1 + 15, __dst, 0x140uLL);
      }
      else
      {
        double v15 = a1[15];
        double v16 = a1[47];
        double v17 = CFAbsoluteTimeGetCurrent();
        uint64_t v18 = (uint64_t)(a1 + 64);
        sub_10005DA08((void *)a1 + 64, v15, v16, v17);
        memcpy(a1 + 15, __dst, 0x140uLL);
        sub_1000BC984((uint64_t)(a1 + 77), (uint64_t)&v58, v17);
        if (vabdd_f64(CFAbsoluteTimeGetCurrent(), a1[10]) <= fmin(a1[12], 110.0))
        {
          double v21 = v59;
        }
        else
        {
          double v19 = sub_1000BC960((uint64_t)(a1 + 64));
          uint64_t v20 = &v59;
          if (v19 > 100.0) {
            uint64_t v20 = (double *)&v58;
          }
          double v21 = *v20;
        }
        float v22 = sub_10005CF48((uint64_t)(a1 + 64), v17);
        float v23 = sub_1000814DC((uint64_t)(a1 + 55), v17);
        double v24 = sub_1000BC960((uint64_t)(a1 + 64));
        float v25 = sub_10005F940(v21, v22, v23, v24);
        double v26 = a1[7];
        double v27 = a1[8];
        uint64_t v28 = *((void *)a1 + 9);
        sub_10003BC5C((uint64_t)a1, (uint64_t)buf, v25);
        *(_OWORD *)(a1 + 7) = *(_OWORD *)buf;
        a1[9] = *(double *)&buf[16];
        if (*((void *)a1 + 8) != *(void *)&v27 || *((void *)a1 + 7) != *(void *)&v26)
        {
          if (qword_1024192A0 != -1) {
            dispatch_once(&qword_1024192A0, &stru_1022F9488);
          }
          double v29 = qword_1024192A8;
          if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_DEFAULT))
          {
            double v31 = a1[8];
            uint64_t v30 = *((void *)a1 + 9);
            uint64_t v32 = *((void *)a1 + 7);
            *(_DWORD *)buf = 134351104;
            *(void *)&uint8_t buf[4] = v28;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(double *)&buf[14] = v27;
            *(_WORD *)&buf[22] = 2050;
            *(double *)id v82 = v26;
            *(_WORD *)&v82[8] = 2050;
            *(void *)&v82[10] = v30;
            *(_WORD *)&v82[18] = 2050;
            *(double *)&v82[20] = v21;
            __int16 v83 = 2050;
            double v84 = v22;
            __int16 v85 = 2050;
            double v86 = v23;
            __int16 v87 = 2050;
            double v88 = v31;
            __int16 v89 = 2050;
            uint64_t v90 = v32;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "IndoorOutdoor,update,old probability,%{public}f,confidence,%{public}ld,state,%{public}ld,new probability,%{public}f,gpsOutdoor,%{public}f,wifiIndoor,%{public}f,alsOutdor,%{public}f,confidence,%{public}ld,state,%{public}ld", buf, 0x5Cu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024192A0 != -1) {
              dispatch_once(&qword_1024192A0, &stru_1022F9488);
            }
            double v54 = a1[8];
            double v53 = a1[9];
            uint64_t v55 = *((void *)a1 + 7);
            int v60 = 134351104;
            uint64_t v61 = v28;
            __int16 v62 = 2050;
            double v63 = v27;
            __int16 v64 = 2050;
            double v65 = v26;
            __int16 v66 = 2050;
            double v67 = v53;
            __int16 v68 = 2050;
            double v69 = v21;
            __int16 v70 = 2050;
            double v71 = v22;
            __int16 v72 = 2050;
            double v73 = v23;
            __int16 v74 = 2050;
            double v75 = v54;
            __int16 v76 = 2050;
            uint64_t v77 = v55;
            uint64_t v56 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLIndoorOutdoorDetectorWatch::update(CFAbsoluteTime)", "%s\n", v56);
            if (v56 != buf) {
              free(v56);
            }
          }
          if (!*((unsigned char *)a1 + 113)) {
            (*(void (**)(double *, void, void *))(*(void *)a1 + 72))(a1, 0, (void *)a1 + 7);
          }
        }
        double v33 = CFAbsoluteTimeGetCurrent();
        double v34 = a1[10];
        if (qword_1024192A0 != -1)
        {
          double v57 = v33;
          dispatch_once(&qword_1024192A0, &stru_1022F9488);
          double v33 = v57;
        }
        double v35 = vabdd_f64(v33, v34);
        uint64_t v36 = qword_1024192A8;
        if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_INFO))
        {
          uint64_t v37 = v58;
          double v38 = v59;
          double v39 = sub_1000BC960(v18);
          uint64_t v41 = *((void *)a1 + 7);
          uint64_t v40 = *((void *)a1 + 8);
          *(_DWORD *)buf = 134351360;
          *(void *)&uint8_t buf[4] = v37;
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(double *)&buf[14] = v38;
          *(_WORD *)&buf[22] = 2050;
          *(double *)id v82 = v35;
          *(_WORD *)&v82[8] = 2050;
          *(double *)&v82[10] = v39;
          *(_WORD *)&v82[18] = 2050;
          *(double *)&v82[20] = v21;
          __int16 v83 = 2050;
          double v84 = v22;
          __int16 v85 = 2050;
          double v86 = v23;
          __int16 v87 = 2050;
          double v88 = v25;
          __int16 v89 = 2050;
          uint64_t v90 = v40;
          __int16 v91 = 2050;
          uint64_t v92 = v41;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "IndoorOutdoor,probabilities,llr,%{public}f,discordant,%{public}f,timeSinceStart,%{public}f,totalDistance,%{public}f,gpsOutdoor,%{public}f,wifiIndoor,%{public}f,alsOutdoor,%{public}f,probability,%{public}f,confidence,%{public}ld,location,%{public}ld", buf, 0x66u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024192A0 != -1) {
            dispatch_once(&qword_1024192A0, &stru_1022F9488);
          }
          uint64_t v47 = v58;
          double v48 = v59;
          double v49 = sub_1000BC960(v18);
          uint64_t v51 = *((void *)a1 + 7);
          uint64_t v50 = *((void *)a1 + 8);
          int v60 = 134351360;
          uint64_t v61 = v47;
          __int16 v62 = 2050;
          double v63 = v48;
          __int16 v64 = 2050;
          double v65 = v35;
          __int16 v66 = 2050;
          double v67 = v49;
          __int16 v68 = 2050;
          double v69 = v21;
          __int16 v70 = 2050;
          double v71 = v22;
          __int16 v72 = 2050;
          double v73 = v23;
          __int16 v74 = 2050;
          double v75 = v25;
          __int16 v76 = 2050;
          uint64_t v77 = v50;
          __int16 v78 = 2050;
          uint64_t v79 = v51;
          char v52 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLIndoorOutdoorDetectorWatch::update(CFAbsoluteTime)", "%s\n", v52);
          if (v52 != buf) {
            free(v52);
          }
        }
      }
    }
  }
}

uint64_t sub_1000BC958(uint64_t a1)
{
  return a1 + 472;
}

double sub_1000BC960(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  uint64_t v2 = *(void *)(a1 + 80);
  if (v1 == v2) {
    return 0.0;
  }
  else {
    return *(double *)(v2 - 8) - *(double *)(v1 + 8);
  }
}

void sub_1000BC984(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  if (*(double *)(a1 + 1904) == -1.79769313e308 && *(_DWORD *)(a1 + 1872) >= 9u) {
    *(double *)(a1 + 1904) = a3;
  }
  double v6 = *(double *)(a1 + 48);
  double v7 = *(double *)(a1 + 304);
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0x80000000800000;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  long long v79 = xmmword_101D1E260;
  uint64_t v80 = 0x80000000800000;
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 56))(*(void *)(a1 + 40));
  int v9 = sub_1000BE1F4(v8, (uint64_t)&v73, v6 + -15.0);
  if (v9)
  {
    uint64_t v10 = *(unsigned __int16 *)(a1 + 786);
    unint64_t v11 = *(unsigned int *)(a1 + 788);
    uint64_t v12 = *(unsigned __int16 *)(a1 + 784);
    if (v12 + v10 >= v11) {
      uint64_t v13 = *(unsigned int *)(a1 + 788);
    }
    else {
      uint64_t v13 = 0;
    }
    *(double *)(a1 + 784 + 8 * (v12 + v10 - v13) + 8) = *((float *)&v79 + 2);
    if (v11 <= v10)
    {
      if (v12 + 1 < v11) {
        LOWORD(v11) = 0;
      }
      *(_WORD *)(a1 + 784) = v12 + 1 - v11;
    }
    else
    {
      *(_WORD *)(a1 + 786) = v10 + 1;
    }
    double v18 = *((float *)&v74 + 1);
    if (*(double *)(a1 + 1912) == -1.79769313e308) {
      *(double *)(a1 + 1912) = a3;
    }
  }
  else
  {
    uint64_t v14 = *(unsigned __int16 *)(a1 + 786);
    unint64_t v15 = *(unsigned int *)(a1 + 788);
    uint64_t v16 = *(unsigned __int16 *)(a1 + 784);
    if (v16 + v14 >= v15) {
      uint64_t v17 = *(unsigned int *)(a1 + 788);
    }
    else {
      uint64_t v17 = 0;
    }
    *(void *)(a1 + 784 + 8 * (v16 + v14 - v17) + 8) = 0;
    if (v15 <= v14)
    {
      if (v16 + 1 < v15) {
        LOWORD(v15) = 0;
      }
      *(_WORD *)(a1 + 784) = v16 + 1 - v15;
    }
    else
    {
      *(_WORD *)(a1 + 786) = v14 + 1;
    }
    double v18 = 0.0;
  }
  double v19 = sub_1000BD8EC((uint64_t *)a1, v6);
  double v21 = v20;
  sub_1000BF8A0(a1, *(_DWORD *)(a1 + 80) - *(_DWORD *)(a1 + 1876), v7, v18, v19, v20, *(double *)(a1 + 1880), *(double *)(a1 + 1888), v6, a3);
  *(_DWORD *)(a1 + 1876) = *(_DWORD *)(a1 + 80);
  *(double *)(a1 + 1880) = v18;
  *(double *)(a1 + 1888) = v21;
  float v22 = (double *)((*(uint64_t (**)(void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40)) + 96);
  if (*v22 != -1.0) {
    memcpy((void *)(a1 + 48), v22, 0x140uLL);
  }
  if (qword_1024192A0 != -1) {
    dispatch_once(&qword_1024192A0, &stru_1023118E0);
  }
  float v23 = qword_1024192A8;
  if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v24 = a1;
    if (*(char *)(a1 + 23) < 0) {
      uint64_t v24 = *(void *)a1;
    }
    int v25 = *(_DWORD *)(a1 + 1872);
    uint64_t v26 = *(void *)(a1 + 48);
    int v27 = *(_DWORD *)(a1 + 80);
    uint64_t v28 = *(void *)(a1 + 88);
    uint64_t v29 = *(void *)(a1 + 96);
    *(_DWORD *)buf = 136316418;
    *(void *)&uint8_t buf[4] = v24;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v25;
    *(_WORD *)&buf[18] = 2048;
    *(void *)&buf[20] = v26;
    *(_WORD *)&unsigned char buf[28] = 1024;
    *(_DWORD *)&buf[30] = v27;
    *(_WORD *)&buf[34] = 2048;
    *(void *)&buf[36] = v28;
    *(_WORD *)v102 = 2048;
    *(void *)&v102[2] = v29;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "IndoorOutdoor,context,%s,[%d][step],startTime,%f,stepCount,%u,stepDistance,%f,rawStepDistance,%f,", buf, 0x36u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192A0 != -1) {
      dispatch_once(&qword_1024192A0, &stru_1023118E0);
    }
    uint64_t v52 = a1;
    if (*(char *)(a1 + 23) < 0) {
      uint64_t v52 = *(void *)a1;
    }
    int v53 = *(_DWORD *)(a1 + 1872);
    uint64_t v54 = *(void *)(a1 + 48);
    int v55 = *(_DWORD *)(a1 + 80);
    uint64_t v56 = *(void *)(a1 + 88);
    uint64_t v57 = *(void *)(a1 + 96);
    int v81 = 136316418;
    uint64_t v82 = v52;
    __int16 v83 = 1024;
    *(_DWORD *)double v84 = v53;
    *(_WORD *)&v84[4] = 2048;
    *(void *)&v84[6] = v54;
    *(_WORD *)&v84[14] = 1024;
    *(_DWORD *)&v84[16] = v55;
    *(_WORD *)&v84[20] = 2048;
    *(void *)&v84[22] = v56;
    *(_WORD *)__int16 v85 = 2048;
    *(void *)&v85[2] = v57;
    uint64_t v58 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLIndoorOutdoorGPSModel::GpsModelResults CLIndoorOutdoorGPSModel::computeProbabilities(CFAbsoluteTime)", "%s\n", v58);
    if (v58 != buf) {
      free(v58);
    }
  }
  if (v9)
  {
    if (qword_1024192A0 != -1) {
      dispatch_once(&qword_1024192A0, &stru_1023118E0);
    }
    uint64_t v30 = qword_1024192A8;
    if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v31 = a1;
      if (*(char *)(a1 + 23) < 0) {
        uint64_t v31 = *(void *)a1;
      }
      int v32 = *(_DWORD *)(a1 + 1872);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = v31;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v32;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v73;
      *(_WORD *)&unsigned char buf[28] = 2048;
      *(double *)&buf[30] = *((float *)&v74 + 1);
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "IndoorOutdoor,context,%s[%d][turn-recv],startTime,%f,gyroHeadingRad,%f", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192A0 != -1) {
        dispatch_once(&qword_1024192A0, &stru_1023118E0);
      }
      uint64_t v33 = a1;
      if (*(char *)(a1 + 23) < 0) {
        uint64_t v33 = *(void *)a1;
      }
      int v34 = *(_DWORD *)(a1 + 1872);
      int v81 = 136315906;
      uint64_t v82 = v33;
      __int16 v83 = 1024;
      *(_DWORD *)double v84 = v34;
      *(_WORD *)&v84[4] = 2048;
      *(void *)&v84[6] = v73;
      *(_WORD *)&v84[14] = 2048;
      *(double *)&v84[16] = *((float *)&v74 + 1);
      double v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLIndoorOutdoorGPSModel::GpsModelResults CLIndoorOutdoorGPSModel::computeProbabilities(CFAbsoluteTime)", "%s\n", v35);
LABEL_86:
      if (v35 != buf) {
        free(v35);
      }
    }
  }
  else
  {
    if (qword_1024192A0 != -1) {
      dispatch_once(&qword_1024192A0, &stru_1023118E0);
    }
    uint64_t v36 = qword_1024192A8;
    if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v37 = a1;
      if (*(char *)(a1 + 23) < 0) {
        uint64_t v37 = *(void *)a1;
      }
      int v38 = *(_DWORD *)(a1 + 1872);
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v37;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v38;
      *(_WORD *)&buf[18] = 2048;
      *(double *)&buf[20] = v6 + -15.0;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "IndoorOutdoor,context,%s,[%d][turn-none],requestedSampleTime,%f", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192A0 != -1) {
        dispatch_once(&qword_1024192A0, &stru_1023118E0);
      }
      uint64_t v69 = a1;
      if (*(char *)(a1 + 23) < 0) {
        uint64_t v69 = *(void *)a1;
      }
      int v70 = *(_DWORD *)(a1 + 1872);
      int v81 = 136315650;
      uint64_t v82 = v69;
      __int16 v83 = 1024;
      *(_DWORD *)double v84 = v70;
      *(_WORD *)&v84[4] = 2048;
      *(double *)&v84[6] = v6 + -15.0;
      double v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLIndoorOutdoorGPSModel::GpsModelResults CLIndoorOutdoorGPSModel::computeProbabilities(CFAbsoluteTime)", "%s\n", v35);
      goto LABEL_86;
    }
  }
  *(double *)buf = v19;
  *(double *)&uint8_t buf[8] = v7;
  sub_1000C0748((unsigned __int16 *)(a1 + 1040), buf);
  double v39 = sub_1000BD82C(a1);
  long long v71 = 0u;
  long long v72 = 0u;
  sub_1000BD498(a1, (uint64_t)&v71);
  uint64_t v40 = v71;
  *(double *)a2 = v39;
  *(void *)(a2 + 8) = v40;
  int v41 = *(_DWORD *)(a1 + 1872);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 1952);
  *(_DWORD *)(a2 + 20) = v41;
  if (qword_1024192A0 != -1) {
    dispatch_once(&qword_1024192A0, &stru_1023118E0);
  }
  uint64_t v42 = qword_1024192A8;
  if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_INFO))
  {
    uint64_t v43 = a1;
    if (*(char *)(a1 + 23) < 0) {
      uint64_t v43 = *(void *)a1;
    }
    uint64_t v44 = *(void *)&v19;
    uint64_t v45 = *(void *)(a1 + 1944);
    if (v19 >= 9999.0) {
      uint64_t v44 = 0x40C3878000000000;
    }
    unint64_t v46 = *(unsigned __int16 *)(a1 + 368) + (unint64_t)*(unsigned __int16 *)(a1 + 370) - 1;
    unint64_t v47 = *(unsigned int *)(a1 + 372);
    if (v46 < v47) {
      unint64_t v47 = 0;
    }
    uint64_t v48 = a1 + 368 + 16 * (v46 - v47);
    uint64_t v50 = *(void *)(v48 + 8);
    uint64_t v49 = *(void *)(v48 + 16);
    int v51 = *(_DWORD *)(a1 + 1952);
    *(_DWORD *)buf = 136318210;
    *(void *)&uint8_t buf[4] = v43;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2048;
    *(void *)&unsigned char buf[24] = v44;
    *(_WORD *)&uint8_t buf[32] = 2048;
    *(void *)&buf[34] = v45;
    *(_WORD *)&buf[42] = 2048;
    *(void *)v102 = v50;
    *(_WORD *)&v102[8] = 2048;
    uint64_t v103 = v49;
    __int16 v104 = 2048;
    double v105 = v6;
    __int16 v106 = 1024;
    int v107 = v51;
    __int16 v108 = 2048;
    uint64_t v109 = v40;
    __int16 v110 = 2048;
    uint64_t v111 = *((void *)&v71 + 1);
    __int16 v112 = 2048;
    uint64_t v113 = *((void *)&v72 + 1);
    __int16 v114 = 1024;
    int v115 = v72;
    __int16 v116 = 2048;
    double v117 = v39;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "IndoorOutdoor,GPSResult,context,%s,stepDeltaDistance,%f,gpsDeltaDistance,%f,fResidScalar,%f,fIMUDistanceX,%f,fIMUDistanceY,%f,stepTimestamp,%f,fGpsState,%d,gpsDiscordanceProbability,%f,gpsDiscordanceRawProbability,%f,gpsDiscordance,%f,numValidDiscordanceSamples,%d,llrBufferSumProbability,%f", buf, 0x7Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192A0 != -1) {
      dispatch_once(&qword_1024192A0, &stru_1023118E0);
    }
    uint64_t v59 = a1;
    if (*(char *)(a1 + 23) < 0) {
      uint64_t v59 = *(void *)a1;
    }
    uint64_t v60 = *(void *)&v19;
    uint64_t v61 = *(void *)(a1 + 1944);
    if (v19 >= 9999.0) {
      uint64_t v60 = 0x40C3878000000000;
    }
    unint64_t v62 = *(unsigned __int16 *)(a1 + 368) + (unint64_t)*(unsigned __int16 *)(a1 + 370) - 1;
    unint64_t v63 = *(unsigned int *)(a1 + 372);
    if (v62 < v63) {
      unint64_t v63 = 0;
    }
    uint64_t v64 = a1 + 368 + 16 * (v62 - v63);
    uint64_t v66 = *(void *)(v64 + 8);
    uint64_t v65 = *(void *)(v64 + 16);
    int v67 = *(_DWORD *)(a1 + 1952);
    int v81 = 136318210;
    uint64_t v82 = v59;
    __int16 v83 = 2048;
    *(double *)double v84 = v7;
    *(_WORD *)&v84[8] = 2048;
    *(void *)&v84[10] = v60;
    *(_WORD *)&v84[18] = 2048;
    *(void *)&v84[20] = v61;
    *(_WORD *)&v84[28] = 2048;
    *(void *)__int16 v85 = v66;
    *(_WORD *)&v85[8] = 2048;
    uint64_t v86 = v65;
    __int16 v87 = 2048;
    double v88 = v6;
    __int16 v89 = 1024;
    int v90 = v67;
    __int16 v91 = 2048;
    uint64_t v92 = v71;
    __int16 v93 = 2048;
    uint64_t v94 = *((void *)&v71 + 1);
    __int16 v95 = 2048;
    uint64_t v96 = *((void *)&v72 + 1);
    __int16 v97 = 1024;
    int v98 = v72;
    __int16 v99 = 2048;
    double v100 = v39;
    __int16 v68 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLIndoorOutdoorGPSModel::GpsModelResults CLIndoorOutdoorGPSModel::computeProbabilities(CFAbsoluteTime)", "%s\n", v68);
    if (v68 != buf) {
      free(v68);
    }
  }
}

void sub_1000BD498(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = xmmword_101DA7410;
  *(_OWORD *)(a2 + 16) = unk_101DA7420;
  if (*(unsigned __int16 *)(a1 + 1042) >= 5u)
  {
    int v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    double v7 = (unsigned __int16 *)(a1 + 1040);
    double v8 = 0.0;
    double v9 = 0.0;
    do
    {
      uint64_t v10 = (double *)sub_1000BD630(v7, v5);
      double v11 = *v10;
      double v12 = v10[1];
      if (v12 <= 0.0 || v11 == 1.79769313e308)
      {
        uint64_t v14 = v6;
      }
      else
      {
        uint64_t v14 = (v6 + 1);
        if ((int)v6 >= 2)
        {
          double v9 = v9 + v12;
          double v8 = v8 + v11;
          *(_DWORD *)(a2 + 16) = ++v4;
        }
      }
      ++v5;
      uint64_t v6 = v14;
    }
    while (v5 < *(unsigned __int16 *)(a1 + 1042));
    if (v9 > 0.0)
    {
      double v15 = fmin(vabdd_f64(v9, v8) / v9, 1.0);
      *(double *)(a2 + 24) = v15;
      long long v19 = xmmword_101DA7400;
      double v20 = v15;
      sub_1010FFF74((uint64_t)&v20, &v21, (uint64_t *)&v19, 2, 1);
      double v16 = v22;
      *(double *)(a2 + 8) = v22;
      if (v4 > 5)
      {
        if (v4 > 0x11)
        {
LABEL_18:
          *(double *)a2 = v16;
          return;
        }
        double v17 = fmax(v16, 0.110000001);
        double v18 = 0.889999976;
      }
      else
      {
        double v17 = fmax(v16, 0.310000012);
        double v18 = 0.689999988;
      }
      double v16 = fmin(v17, v18);
      goto LABEL_18;
    }
  }
}

uint64_t sub_1000BD630(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102311920);
    }
    double v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102311920);
      }
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const T &CMQueue<CLIndoorOutdoorGPSModel::GpsStepDistancePair>::operator[](const size_t) const [T = CLIndoorOutdoorGPSModel::GpsStepDistancePair]", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[8 * (v4 - v5) + 4];
}

double sub_1000BD82C(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 1952))
  {
    case 0:
      double result = -1.0;
      break;
    case 1:
    case 5:
      double result = 0.49;
      break;
    case 2:
    case 3:
    case 4:
      long long v2 = xmmword_101DA73F0;
      uint64_t v3 = *(void *)(a1 + 1856);
      sub_1010FFF74((uint64_t)&v3, v4, (uint64_t *)&v2, 2, 1);
      double result = v4[1];
      break;
    default:
      double result = 0.0;
      break;
  }
  return result;
}

double sub_1000BD8EC(uint64_t *a1, double a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1[5] + 40))(a1[5]);
  int v5 = sub_1000BE0C4(v4, &v39, a2);
  double v6 = *((double *)&v39 + 1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1[5] + 40))(a1[5]);
  int v8 = sub_1000BE0C4(v7, &v34, a2 + 1.0 + 0.5);
  if (v5) {
    BOOL v9 = v6 == -1.0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    return 1.79769313e308;
  }
  int v10 = *((double *)&v34 + 1) == -1.0 ? 0 : v8;
  if (v10 != 1) {
    return 1.79769313e308;
  }
  double v11 = v41;
  if (vabdd_f64(v41, v36) > 0.001) {
    double v11 = sub_10126D95C(a2, v42, v37, v41, v36);
  }
  uint64_t v12 = v38;
  if (qword_1024192A0 != -1) {
    dispatch_once(&qword_1024192A0, &stru_1023118E0);
  }
  int v13 = qword_1024192A8;
  if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v14 = a1;
    if (*((char *)a1 + 23) < 0) {
      uint64_t v14 = (uint64_t *)*a1;
    }
    int v15 = *((_DWORD *)a1 + 468);
    *(_DWORD *)buf = 136318722;
    uint64_t v75 = v14;
    __int16 v76 = 1024;
    int v77 = v15;
    __int16 v78 = 2080;
    long long v79 = "GOOD";
    __int16 v80 = 2048;
    double v81 = v42;
    __int16 v82 = 2048;
    double v83 = v41;
    __int16 v84 = 2048;
    uint64_t v85 = v43;
    __int16 v86 = 2048;
    uint64_t v87 = v40;
    __int16 v88 = 2080;
    __int16 v89 = "GOOD";
    __int16 v90 = 2048;
    double v91 = v37;
    __int16 v92 = 2048;
    double v93 = v36;
    __int16 v94 = 2048;
    uint64_t v95 = v38;
    __int16 v96 = 2048;
    uint64_t v97 = v35;
    __int16 v98 = 2048;
    double v99 = a2;
    __int16 v100 = 2048;
    double v101 = v11;
    __int16 v102 = 2048;
    uint64_t v103 = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "IndoorOutdoor,context,%s,[%d][gps-current],[A-%s],timestampGps,%f,odometer,%f,gpsHeadingRad,%f,accuracy,%f[B-%s],timestampGps,%f,odometer,%f,gpsHeadingRad,%f,accuracy,%f[interp],startTime,%f,gpsDistance,%f,gpsHeadingRad,%f", buf, 0x94u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192A0 != -1) {
      dispatch_once(&qword_1024192A0, &stru_1023118E0);
    }
    uint64_t v31 = a1;
    if (*((char *)a1 + 23) < 0) {
      uint64_t v31 = (uint64_t *)*a1;
    }
    int v32 = *((_DWORD *)a1 + 468);
    int v44 = 136318722;
    uint64_t v45 = v31;
    __int16 v46 = 1024;
    int v47 = v32;
    __int16 v48 = 2080;
    uint64_t v49 = "GOOD";
    __int16 v50 = 2048;
    double v51 = v42;
    __int16 v52 = 2048;
    double v53 = v41;
    __int16 v54 = 2048;
    uint64_t v55 = v43;
    __int16 v56 = 2048;
    uint64_t v57 = v40;
    __int16 v58 = 2080;
    uint64_t v59 = "GOOD";
    __int16 v60 = 2048;
    double v61 = v37;
    __int16 v62 = 2048;
    double v63 = v36;
    __int16 v64 = 2048;
    uint64_t v65 = v38;
    __int16 v66 = 2048;
    uint64_t v67 = v35;
    __int16 v68 = 2048;
    double v69 = a2;
    __int16 v70 = 2048;
    double v71 = v11;
    __int16 v72 = 2048;
    uint64_t v73 = v12;
    uint64_t v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::tuple<double, double> CLIndoorOutdoorGPSModel::getGpsDeltaDistanceAndHeading(const CFAbsoluteTime) const", "%s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1[5] + 40))(a1[5]);
  int v17 = sub_1000BE0C4(v16, &v39, a2 + -2.56);
  double v18 = *((double *)&v39 + 1);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1[5] + 40))(a1[5]);
  int v20 = sub_1000BE0C4(v19, &v34, a2 + -2.56 + 1.0 + 0.5);
  double v21 = 1.79769313e308;
  if (v17 && v18 != -1.0)
  {
    if (*((double *)&v34 + 1) == -1.0) {
      int v22 = 0;
    }
    else {
      int v22 = v20;
    }
    if (v22 == 1)
    {
      double v23 = v41;
      if (vabdd_f64(v41, v36) > 0.001) {
        double v23 = sub_10126D95C(a2 + -2.56, v42, v37, v41, v36);
      }
      if (qword_1024192A0 != -1) {
        dispatch_once(&qword_1024192A0, &stru_1023118E0);
      }
      uint64_t v24 = qword_1024192A8;
      if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_DEBUG))
      {
        int v25 = a1;
        if (*((char *)a1 + 23) < 0) {
          int v25 = (uint64_t *)*a1;
        }
        int v26 = *((_DWORD *)a1 + 468);
        *(_DWORD *)buf = 136318722;
        uint64_t v75 = v25;
        __int16 v76 = 1024;
        int v77 = v26;
        __int16 v78 = 2080;
        long long v79 = "GOOD";
        __int16 v80 = 2048;
        double v81 = v42;
        __int16 v82 = 2048;
        double v83 = v41;
        __int16 v84 = 2048;
        uint64_t v85 = v43;
        __int16 v86 = 2048;
        uint64_t v87 = v40;
        __int16 v88 = 2080;
        __int16 v89 = "GOOD";
        __int16 v90 = 2048;
        double v91 = v37;
        __int16 v92 = 2048;
        double v93 = v36;
        __int16 v94 = 2048;
        uint64_t v95 = v38;
        __int16 v96 = 2048;
        uint64_t v97 = v35;
        __int16 v98 = 2048;
        double v99 = a2;
        __int16 v100 = 2048;
        double v101 = v23;
        __int16 v102 = 2048;
        uint64_t v103 = v12;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "IndoorOutdoor,context,%s,[%d][gps-previous],[A-%s],timestampGps,%f,odometer,%f,gpsHeadingRad,%f,accuracy,%f,[B-%s],timestampGps,%f,odometer,%f,gpsHeadingRad,%f,accuracy,%f,[interp],startTime,%f,gpsDistance,%f,gpsHeadingRad,%f", buf, 0x94u);
      }
      double v21 = v11 - v23;
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024192A0 != -1) {
          dispatch_once(&qword_1024192A0, &stru_1023118E0);
        }
        int v27 = a1;
        if (*((char *)a1 + 23) < 0) {
          int v27 = (uint64_t *)*a1;
        }
        int v28 = *((_DWORD *)a1 + 468);
        int v44 = 136318722;
        uint64_t v45 = v27;
        __int16 v46 = 1024;
        int v47 = v28;
        __int16 v48 = 2080;
        uint64_t v49 = "GOOD";
        __int16 v50 = 2048;
        double v51 = v42;
        __int16 v52 = 2048;
        double v53 = v41;
        __int16 v54 = 2048;
        uint64_t v55 = v43;
        __int16 v56 = 2048;
        uint64_t v57 = v40;
        __int16 v58 = 2080;
        uint64_t v59 = "GOOD";
        __int16 v60 = 2048;
        double v61 = v37;
        __int16 v62 = 2048;
        double v63 = v36;
        __int16 v64 = 2048;
        uint64_t v65 = v38;
        __int16 v66 = 2048;
        uint64_t v67 = v35;
        __int16 v68 = 2048;
        double v69 = a2;
        __int16 v70 = 2048;
        double v71 = v23;
        __int16 v72 = 2048;
        uint64_t v73 = v12;
        uint64_t v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "std::tuple<double, double> CLIndoorOutdoorGPSModel::getGpsDeltaDistanceAndHeading(const CFAbsoluteTime) const", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
      }
      return v21;
    }
    return 1.79769313e308;
  }
  return v21;
}

uint64_t sub_1000BE0BC(uint64_t a1)
{
  return a1 + 1096;
}

uint64_t sub_1000BE0C4(uint64_t a1, _OWORD *a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v4) {
    return 0;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  unint64_t v6 = v5 + v3;
  uint64_t v7 = (uint64_t *)(v4 + 8 * (v6 / 0x15));
  uint64_t v8 = *v7;
  uint64_t v9 = *v7 + 192 * (v6 % 0x15);
  unint64_t v10 = v5 / 0x15;
  uint64_t v11 = *(void *)(v4 + 8 * (v5 / 0x15));
  unint64_t v12 = v5 % 0x15;
  uint64_t v13 = v11 + 192 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      uint64_t v14 = v9;
      if (v9 == v8) {
        uint64_t v14 = *(v7 - 1) + 4032;
      }
      double v15 = *(double *)(v14 - 192);
      if (v15 <= a3 && v15 > a3 - *(double *)(a1 + 80)) {
        break;
      }
      if (v9 == v8)
      {
        uint64_t v16 = *--v7;
        uint64_t v8 = v16;
        uint64_t v9 = v16 + 4032;
      }
      v9 -= 192;
      if (v9 == v13)
      {
        uint64_t v9 = v11 + 192 * v12;
        break;
      }
    }
  }
  if (v9 == *(void *)(v4 + 8 * v10) + 192 * v12) {
    return 0;
  }
  if (v9 == *v7) {
    uint64_t v9 = *(v7 - 1) + 4032;
  }
  long long v17 = *(_OWORD *)(v9 - 192);
  long long v18 = *(_OWORD *)(v9 - 176);
  long long v19 = *(_OWORD *)(v9 - 144);
  a2[2] = *(_OWORD *)(v9 - 160);
  a2[3] = v19;
  *a2 = v17;
  a2[1] = v18;
  long long v20 = *(_OWORD *)(v9 - 128);
  long long v21 = *(_OWORD *)(v9 - 112);
  long long v22 = *(_OWORD *)(v9 - 80);
  a2[6] = *(_OWORD *)(v9 - 96);
  a2[7] = v22;
  a2[4] = v20;
  a2[5] = v21;
  long long v23 = *(_OWORD *)(v9 - 64);
  long long v24 = *(_OWORD *)(v9 - 48);
  long long v25 = *(_OWORD *)(v9 - 16);
  a2[10] = *(_OWORD *)(v9 - 32);
  a2[11] = v25;
  a2[8] = v23;
  a2[9] = v24;
  return 1;
}

uint64_t sub_1000BE1F4(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v4) {
    return 0;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  unint64_t v6 = v5 + v3;
  uint64_t v7 = (uint64_t *)(v4 + 8 * (v6 / 0x38));
  uint64_t v8 = *v7;
  uint64_t v9 = *v7 + 72 * (v6 % 0x38);
  unint64_t v10 = v5 / 0x38;
  uint64_t v11 = *(void *)(v4 + 8 * (v5 / 0x38));
  unint64_t v12 = v5 % 0x38;
  uint64_t v13 = v11 + 72 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      uint64_t v14 = v9;
      if (v9 == v8) {
        uint64_t v14 = *(v7 - 1) + 4032;
      }
      double v15 = *(double *)(v14 - 72);
      if (v15 <= a3 && v15 > a3 - *(double *)(a1 + 80)) {
        break;
      }
      if (v9 == v8)
      {
        uint64_t v16 = *--v7;
        uint64_t v8 = v16;
        uint64_t v9 = v16 + 4032;
      }
      v9 -= 72;
      if (v9 == v13)
      {
        uint64_t v9 = v11 + 72 * v12;
        break;
      }
    }
  }
  if (v9 == *(void *)(v4 + 8 * v10) + 72 * v12) {
    return 0;
  }
  if (v9 == *v7) {
    uint64_t v9 = *(v7 - 1) + 4032;
  }
  *(void *)a2 = *(void *)(v9 - 72);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v9 - 64);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(v9 - 48);
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(v9 - 44);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v9 - 40);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(v9 - 24);
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(v9 - 20);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(v9 - 16);
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(v9 - 12);
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(v9 - 8);
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(v9 - 4);
  return 1;
}

void sub_1000BE33C(unsigned __int16 *a1, unsigned int a2, unsigned int a3, int a4, int a5, double a6)
{
  unint64_t v8 = (unint64_t)(a6 * 1000000.0);
  v67[1] = 0.0;
  unint64_t v68 = v8;
  v67[0] = (float)(uint64_t)(a2 - (unint64_t)a3) / 100.0;
  v64[0] = 0;
  long long v65 = 0u;
  uint64_t v66 = 0;
  v64[1] = v8;
  if (*((unsigned __int8 *)a1 + 664) != a5)
  {
    if (*((unsigned char *)a1 + 648))
    {
      double v10 = -0.00355555548;
      if (a5) {
        double v10 = -0.0127999997;
      }
      long double v11 = exp(v10);
      *((_DWORD *)a1 + 142) = 0;
      *((long double *)a1 + 72) = 1.0 - v11;
      *((void *)a1 + 73) = 0;
    }
    else
    {
      double v12 = -0.00355555548;
      if (a5) {
        double v12 = -0.0127999997;
      }
      *((long double *)a1 + 72) = 1.0 - exp(v12);
      *((_DWORD *)a1 + 142) = 3;
    }
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_1022CF7A8);
    }
    uint64_t v13 = qword_1024191E8;
    if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = *((unsigned __int8 *)a1 + 648);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = a5;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "significant elevation break frequency change, inVisit, %d, resetCheck, %d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_1022CF7A8);
      }
      int v60 = *((unsigned __int8 *)a1 + 648);
      int v69 = 67109376;
      *(_DWORD *)__int16 v70 = a5;
      *(_WORD *)&v70[4] = 1024;
      *(_DWORD *)&v70[6] = v60;
      double v61 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSignificantElevationEstimator::updateWithVisit(CFAbsoluteTime, uint32_t, uint32_t, CLElevationSource, BOOL)", "%s\n", v61);
      if (v61 != buf) {
        free(v61);
      }
    }
    *((unsigned char *)a1 + 664) = a5;
  }
  sub_1000BEC9C(a1 + 24, (uint64_t)v67, (uint64_t)v64);
  uint64_t v15 = a1[1];
  unint64_t v16 = *((unsigned int *)a1 + 1);
  long long v17 = a1 + 4;
  uint64_t v18 = *a1;
  if (v18 + v15 >= v16) {
    uint64_t v19 = *((unsigned int *)a1 + 1);
  }
  else {
    uint64_t v19 = 0;
  }
  *(void *)&v17[4 * (v18 + v15 - v19)] = v8;
  if (v16 <= v15)
  {
    unint64_t v20 = v18 + 1;
    if (v20 < v16) {
      LOWORD(v16) = 0;
    }
    *a1 = v20 - v16;
  }
  else
  {
    LOWORD(v15) = v15 + 1;
    a1[1] = v15;
  }
  if (*((unsigned char *)a1 + 648)) {
    double v21 = *((double *)a1 + 78) + v67[0];
  }
  else {
    double v21 = *((double *)a1 + 79);
  }
  *((double *)a1 + 79) = v21;
  float v63 = 0.0;
  if ((_WORD)v15)
  {
    long long v22 = (unsigned __int16 **)(a1 + 336);
    while (1)
    {
      if (!sub_1000BEB68((uint64_t)(a1 + 24), *(void *)&v17[4 * *a1], &v63)) {
        return;
      }
      double v23 = (double)*(unint64_t *)&v17[4 * *a1] * 0.000001;
      *(double *)buf = v63;
      sub_1000BF84C((uint64_t)(a1 + 284), (double *)buf);
      double v24 = *((double *)a1 + 73);
      *((double *)a1 + 79) = v24 + *((double *)a1 + 78);
      *((unsigned char *)a1 + 648) = 0;
      int v25 = *((_DWORD *)a1 + 154);
      if (v25 == -1)
      {
        double v26 = v63;
        if (v24 + -0.25 > v63) {
          goto LABEL_36;
        }
        if (v24 < v26)
        {
          double v27 = *((double *)a1 + 74);
          if (v27 != 0.0) {
            goto LABEL_46;
          }
          goto LABEL_47;
        }
      }
      else
      {
        if (v25 == 1)
        {
          double v26 = v63;
          if (v24 + 0.25 >= v63)
          {
            if (v24 > v26)
            {
              double v27 = *((double *)a1 + 74);
              if (v27 != 0.0) {
                goto LABEL_46;
              }
              goto LABEL_47;
            }
            goto LABEL_42;
          }
LABEL_36:
          sub_1008B0468((uint64_t)a1, v23, v26);
          goto LABEL_42;
        }
        double v28 = v63;
        if (vabdd_f64(v63, v24) > 2.0)
        {
          sub_1008B08C8((uint64_t)a1, v23, v28 - v24);
          *((double *)a1 + 78) = *((double *)a1 + 78) - (v28 - *((double *)a1 + 73));
          *((double *)a1 + 73) = v28;
          *((_DWORD *)a1 + 142) = 3;
        }
      }
LABEL_42:
      double v27 = *((double *)a1 + 74);
      int v29 = *((_DWORD *)a1 + 150);
      if (v27 != 0.0) {
        *((_DWORD *)a1 + 150) = ++v29;
      }
      if (v29 < 12) {
        goto LABEL_48;
      }
      if (v27 != 0.0) {
LABEL_46:
      }
        sub_1008B08C8((uint64_t)a1, *((double *)a1 + 76), v27);
LABEL_47:
      *((void *)a1 + 74) = 0;
      *((_DWORD *)a1 + 150) = 0;
      *((_DWORD *)a1 + 154) = 0;
LABEL_48:
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1022CF788);
      }
      uint64_t v30 = qword_1024190D8;
      if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v31 = a1 + 336;
        if (*((char *)a1 + 695) < 0) {
          uint64_t v31 = *v22;
        }
        uint64_t v32 = *((void *)a1 + 73);
        uint64_t v33 = *((void *)a1 + 66);
        uint64_t v34 = *((void *)a1 + 67);
        double v35 = (float)*((unsigned int *)a1 + 136);
        double v36 = (float)*((unsigned int *)a1 + 137);
        uint64_t v37 = *((void *)a1 + 74);
        uint64_t v38 = *((void *)a1 + 76);
        double v39 = (float)*((int *)a1 + 154);
        uint64_t v40 = *((void *)a1 + 78);
        uint64_t v41 = *((void *)a1 + 79);
        uint64_t v42 = *((void *)a1 + 82);
        *(_DWORD *)buf = 134221826;
        *(double *)&uint8_t buf[4] = v63;
        *(_WORD *)&unsigned char buf[12] = 2048;
        uint64_t v101 = v32;
        __int16 v102 = 2048;
        uint64_t v103 = v33;
        __int16 v104 = 2048;
        uint64_t v105 = v34;
        __int16 v106 = 2048;
        double v107 = v35;
        __int16 v108 = 2048;
        double v109 = v36;
        __int16 v110 = 2048;
        uint64_t v111 = v37;
        __int16 v112 = 2048;
        uint64_t v113 = v38;
        __int16 v114 = 2048;
        double v115 = v39;
        __int16 v116 = 1024;
        int v117 = a4;
        __int16 v118 = 2080;
        uint64_t v119 = v31;
        __int16 v120 = 2048;
        double v121 = v23;
        __int16 v122 = 2048;
        double v123 = a6;
        __int16 v124 = 2048;
        uint64_t v125 = v40;
        __int16 v126 = 2048;
        uint64_t v127 = v41;
        __int16 v128 = 2048;
        uint64_t v129 = v42;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "Altitude,%f,ReferenceAltitude,%f,ElevationStartTime,%f,ElevationEndTime,%f,AscendedElevation,%f,DescendedElevation,%f,BufferedAscendedElevation,%f,BufferedTimeStamp,%f,AscendingState,%f,ElevationDeviceSource,%d,ElevationLabel,%s,EpochTime,%f,UpdateTime,%f,cumulativeAltitudeFilterResetChange,%f,weatherChangeEstimate,%f,weatherBias,%f", buf, 0x9Eu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190D0 != -1) {
          dispatch_once(&qword_1024190D0, &stru_1022CF788);
        }
        uint64_t v47 = *((void *)a1 + 73);
        uint64_t v48 = *((void *)a1 + 66);
        uint64_t v49 = *((void *)a1 + 67);
        uint64_t v50 = *((void *)a1 + 74);
        uint64_t v51 = *((void *)a1 + 76);
        int v52 = *((_DWORD *)a1 + 154);
        double v53 = a1 + 336;
        if (*((char *)a1 + 695) < 0) {
          double v53 = *v22;
        }
        uint64_t v54 = *((void *)a1 + 78);
        double v55 = (float)*((unsigned int *)a1 + 136);
        uint64_t v56 = *((void *)a1 + 79);
        uint64_t v57 = *((void *)a1 + 82);
        double v58 = (float)*((unsigned int *)a1 + 137);
        int v69 = 134221826;
        *(double *)__int16 v70 = v63;
        *(_WORD *)&v70[8] = 2048;
        uint64_t v71 = v47;
        __int16 v72 = 2048;
        uint64_t v73 = v48;
        __int16 v74 = 2048;
        uint64_t v75 = v49;
        __int16 v76 = 2048;
        double v77 = v55;
        __int16 v78 = 2048;
        double v79 = v58;
        __int16 v80 = 2048;
        uint64_t v81 = v50;
        __int16 v82 = 2048;
        uint64_t v83 = v51;
        __int16 v84 = 2048;
        double v85 = (float)v52;
        __int16 v86 = 1024;
        int v87 = a4;
        __int16 v88 = 2080;
        __int16 v89 = v53;
        __int16 v90 = 2048;
        double v91 = v23;
        __int16 v92 = 2048;
        double v93 = a6;
        __int16 v94 = 2048;
        uint64_t v95 = v54;
        __int16 v96 = 2048;
        uint64_t v97 = v56;
        __int16 v98 = 2048;
        uint64_t v99 = v57;
        uint64_t v59 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLSignificantElevationEstimator::updateWithVisit(CFAbsoluteTime, uint32_t, uint32_t, CLElevationSource, BOOL)", "%s\n", v59);
        if (v59 != buf) {
          free(v59);
        }
      }
      unsigned __int16 v43 = a1[1];
      if (v43)
      {
        unint64_t v44 = *a1 + 1;
        unint64_t v45 = *((unsigned int *)a1 + 1);
        if (v44 < v45) {
          LOWORD(v45) = 0;
        }
        *a1 = v44 - v45;
        unsigned __int16 v46 = v43 - 1;
        a1[1] = v46;
        if (v46) {
          continue;
        }
      }
      return;
    }
  }
}

uint64_t sub_1000BEB68(uint64_t a1, unint64_t a2, float *a3)
{
  if (!*(_WORD *)(a1 + 74)) {
    return 0;
  }
  uint64_t v5 = a1 + 80;
  uint64_t v6 = *(unsigned __int16 *)(a1 + 72);
  unint64_t v7 = *(unsigned __int16 *)(a1 + 74) + v6 - 1;
  unint64_t v8 = *(unsigned int *)(a1 + 76);
  if (v7 < v8) {
    unint64_t v8 = 0;
  }
  uint64_t v9 = v5 + 16 * (v7 - v8);
  unint64_t v10 = *(void *)(v9 + 8);
  if (v10 + 500000 < a2) {
    return 0;
  }
  if (v10 <= a2)
  {
    float v18 = *(float *)v9;
  }
  else
  {
    if (*(void *)(v5 + 16 * v6 + 8) < a2)
    {
      unint64_t v13 = 0;
      while (v13 < (unint64_t)*(unsigned __int16 *)(a1 + 74) - 1)
      {
        uint64_t v14 = sub_1000BF5B8((unsigned __int16 *)(a1 + 72), v13 + 1);
        float v15 = *(float *)v14;
        unint64_t v16 = *(void *)(v14 + 8);
        uint64_t v17 = sub_1000BF5B8((unsigned __int16 *)(a1 + 72), v13++);
        if (v16 > a2)
        {
          float v18 = *(float *)v17
              + (float)((float)((float)(v15 - *(float *)v17) * (float)(a2 - *(void *)(v17 + 8)))
                      / (float)(v16 - *(void *)(v17 + 8)));
          goto LABEL_14;
        }
      }
      return 1;
    }
    float v18 = *(float *)(v5 + 16 * v6);
  }
LABEL_14:
  *a3 = v18;
  return 1;
}

unsigned __int16 *sub_1000BEC9C(unsigned __int16 *a1, uint64_t a2, uint64_t a3)
{
  if (!*((unsigned char *)a1 + 448))
  {
    unint64_t v16 = *a1 + (unint64_t)a1[1] - 1;
    unint64_t v17 = *((unsigned int *)a1 + 1);
    if (v16 < v17) {
      unint64_t v17 = 0;
    }
    if (*(void *)(a2 + 8) > *(void *)&a1[8 * (v16 - v17) + 8]) {
      goto LABEL_14;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102311E98);
    }
    float v18 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v19 = *(void *)(a2 + 8);
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "fElevationBuffer timestamp did not move forward, timestamp, %llu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102311E98);
      }
      double v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CMFilteredElevationStepHistory::update(const CMElevationSample &, const CMStepCountSample &)", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    sub_1011189A4((uint64_t)a1);
    if (!*((unsigned char *)a1 + 448))
    {
LABEL_14:
      unint64_t v20 = a1[80] + (unint64_t)a1[81] - 1;
      unint64_t v21 = *((unsigned int *)a1 + 41);
      if (v20 < v21) {
        unint64_t v21 = 0;
      }
      if (*(void *)(a3 + 8) <= *(void *)&a1[20 * (v20 - v21) + 88])
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102311E98);
        }
        long long v22 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v23 = *(void *)(a3 + 8);
          *(_DWORD *)buf = 134217984;
          *(void *)&uint8_t buf[4] = v23;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "fStepHistory timestamp did not move forward, timestamp, %llu", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_102311E98);
          }
          int v29 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CMFilteredElevationStepHistory::update(const CMElevationSample &, const CMStepCountSample &)", "%s\n", v29);
          if (v29 != (char *)buf) {
            free(v29);
          }
        }
        sub_1011189A4((uint64_t)a1);
      }
    }
  }
  sub_1000BF7DC(a1 + 80, (long long *)a3);
  double result = sub_1000C0748(a1, (_OWORD *)a2);
  *((unsigned char *)a1 + 448) = 0;
  if (*((_DWORD *)a1 + 1) == a1[1])
  {
    uint64_t v7 = sub_1000BF5B8(a1, 0);
    float v8 = *(float *)v7;
    uint64_t v9 = *(void *)(v7 + 8);
    uint64_t v10 = sub_1000BF5B8(a1, 1uLL);
    float v11 = *(float *)v10;
    uint64_t v12 = *(void *)(v10 + 8);
    uint64_t v13 = sub_1000BF5B8(a1, 2uLL);
    if (*((unsigned char *)a1 + 449))
    {
      float v14 = (float)(v8 + v11) * 0.5;
      unint64_t v15 = (unint64_t)(v12 + v9) >> 1;
    }
    else
    {
      unint64_t v24 = a1[36] + (unint64_t)a1[37] - 1;
      unint64_t v25 = *((unsigned int *)a1 + 19);
      if (v24 < v25) {
        unint64_t v25 = 0;
      }
      uint64_t v26 = (uint64_t)&a1[8 * (v24 - v25) + 36];
      float v14 = *(float *)(v26 + 8);
      unint64_t v15 = *(void *)(v26 + 16);
    }
    unint64_t v27 = (unint64_t)(*(void *)(v13 + 8) + v12) >> 1;
    *(float *)buf = v14 + (float)((float)((float)(sub_1000BF148(a1) - v14) * (float)(v12 - v15)) / (float)(v27 - v15));
    *(void *)&uint8_t buf[8] = v12;
    double result = sub_1000C0748(a1 + 36, buf);
    *((unsigned char *)a1 + 449) = 0;
  }
  return result;
}

float sub_1000BF148(unsigned __int16 *a1)
{
  if (a1[1] > 2u) {
    goto LABEL_2;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102311E98);
  }
  uint64_t v6 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    uint64_t v7 = a1[1];
    *(_DWORD *)buf = 134217984;
    uint64_t v10 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Assertion failed: fElevationBuffer.size() > 2, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMFilteredElevationStepHistory.cpp, line 183,fElevationBufferSize,%zu.", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102311E98);
    }
    float v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "float CMFilteredElevationStepHistory::elevationBufferMedian() const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (a1[1])
  {
LABEL_2:
    unint64_t v2 = 0;
    float v3 = 0.0;
    do
      float v3 = v3 + *(float *)sub_1000BF5B8(a1, v2++);
    while (v2 < a1[1]);
  }
  else
  {
    float v3 = 0.0;
  }
  float v4 = COERCE_FLOAT(sub_1000BF3A8(a1, (unsigned int (*)(void, uint64_t, uint64_t, uint64_t))sub_1000BF7C8, 0));
  return (float)((float)(v3 - v4)
               - COERCE_FLOAT(sub_1000BF3A8(a1, (unsigned int (*)(void, uint64_t, uint64_t, uint64_t))sub_1000BF7B4, 0)))
       / (float)((unint64_t)a1[1] - 2);
}

uint64_t sub_1000BF3A8(unsigned __int16 *a1, unsigned int (*a2)(void, uint64_t, uint64_t, uint64_t), unint64_t a3)
{
  unint64_t v6 = a1[1];
  if (!a1[1])
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102311E98);
    }
    float v14 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Assertion failed: n > 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 179,.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102311E98);
      }
      unint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T CMQueue<CMElevationSample>::getComparison(int (*)(const T, const T), size_t) const [T = CMElevationSample]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  uint64_t v7 = (uint64_t *)sub_1000BF5B8(a1, a3);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (v6 > a3)
  {
    do
    {
      uint64_t v10 = (void *)sub_1000BF5B8(a1, a3);
      uint64_t v11 = *v10;
      uint64_t v12 = v10[1];
      if (a2(*v10, v12, v8, v9))
      {
        uint64_t v8 = v11;
        uint64_t v9 = v12;
      }
      ++a3;
    }
    while (v6 != a3);
  }
  return v8;
}

uint64_t sub_1000BF5B8(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102311E98);
    }
    uint64_t v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102311E98);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const T &CMQueue<CMElevationSample>::operator[](const size_t) const [T = CMElevationSample]", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[8 * (v4 - v5) + 4];
}

BOOL sub_1000BF7B4(int a1, uint64_t a2, int a3)
{
  return *(float *)&a1 < *(float *)&a3;
}

BOOL sub_1000BF7C8(int a1, uint64_t a2, int a3)
{
  return *(float *)&a3 < *(float *)&a1;
}

unsigned __int16 *sub_1000BF7DC(unsigned __int16 *result, long long *a2)
{
  unint64_t v2 = *((unsigned int *)result + 1);
  unint64_t v3 = *result + (unint64_t)result[1];
  if (v3 < v2) {
    unint64_t v2 = 0;
  }
  unint64_t v4 = &result[20 * (v3 - v2)];
  long long v6 = *a2;
  long long v5 = a2[1];
  *((void *)v4 + 5) = *((void *)a2 + 4);
  *(_OWORD *)(v4 + 4) = v6;
  *(_OWORD *)(v4 + 12) = v5;
  unsigned int v7 = result[1];
  unint64_t v8 = *((unsigned int *)result + 1);
  if (v8 <= v7)
  {
    unint64_t v9 = *result + 1;
    if (v9 < v8) {
      LOWORD(v8) = 0;
    }
    *double result = v9 - v8;
  }
  else
  {
    result[1] = v7 + 1;
  }
  return result;
}

uint64_t sub_1000BF84C(uint64_t result, double *a2)
{
  int v2 = *(_DWORD *)result;
  int v3 = *(_DWORD *)result + 1;
  *(_DWORD *)double result = v3;
  if (v2 > 2) {
    double v4 = *(double *)(result + 16) - *(double *)(result + 8) * (*(double *)(result + 16) - *a2);
  }
  else {
    double v4 = (*a2 + *(double *)(result + 16) * (double)v2) * (float)(1.0 / (float)v3);
  }
  *(double *)(result + 16) = v4;
  return result;
}

void sub_1000BF8A0(uint64_t a1, int a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  float v14 = (unsigned __int16 *)(a1 + 368);
  if (*(_WORD *)(a1 + 370))
  {
    uint64_t v20 = a1 + 376;
    unint64_t v21 = *(unsigned __int16 *)(a1 + 370) + (unint64_t)*(unsigned __int16 *)(a1 + 368) - 1;
    unint64_t v22 = *(unsigned int *)(a1 + 372);
    if (v21 < v22) {
      unint64_t v22 = 0;
    }
    uint64_t v23 = (double *)(v20 + 16 * (v21 - v22));
    double v24 = *v23;
    __double2 v25 = __sincos_stret(a4);
    double v26 = v23[1] + v25.__sinval * a3;
    *(double *)&long long v88 = v24 + v25.__cosval * a3;
    *((double *)&v88 + 1) = v26;
    sub_1000C0748(v14, &v88);
    if ((*(void *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || a6 == 1.79769313e308
      || (*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || a5 == 1.79769313e308)
    {
      unint64_t v33 = *(unsigned __int16 *)(a1 + 504) + (unint64_t)*(unsigned __int16 *)(a1 + 506) - 1;
      unint64_t v34 = *(unsigned int *)(a1 + 508);
      if (v33 < v34) {
        unint64_t v34 = 0;
      }
      uint64_t v35 = a1 + 504 + 16 * (v33 - v34);
      double v32 = *(double *)(v35 + 16);
      *(void *)&long long v88 = *(void *)(v35 + 8);
    }
    else
    {
      unint64_t v27 = *(unsigned __int16 *)(a1 + 504) + (unint64_t)*(unsigned __int16 *)(a1 + 506) - 1;
      unint64_t v28 = *(unsigned int *)(a1 + 508);
      if (v27 < v28) {
        unint64_t v28 = 0;
      }
      uint64_t v29 = a1 + 504 + 16 * (v27 - v28);
      double v30 = *(double *)(v29 + 8);
      __double2 v31 = __sincos_stret(a6);
      *(double *)&long long v88 = v30 + v31.__cosval * a5;
      double v32 = *(double *)(v29 + 16) + v31.__sinval * a5;
    }
    *((double *)&v88 + 1) = v32;
    sub_1000C0748((unsigned __int16 *)(a1 + 504), &v88);
    if (a2 && *(double *)(a1 + 1896) == 0.0) {
      *(double *)(a1 + 1896) = a9;
    }
    double v36 = *(double *)(a1 + 1912);
    if (v36 == -1.79769313e308 || a10 - v36 <= 23.04) {
      *(void *)(a1 + 1928) = 0x7FF8000000000000;
    }
    else {
      sub_1000BFF84(a1, v14, 1, (unsigned __int16 *)(a1 + 640), (double *)(a1 + 1928));
    }
    sub_1000BFF84(a1, (unsigned __int16 *)(a1 + 504), 0, (unsigned __int16 *)(a1 + 712), (double *)(a1 + 1936));
    sub_1000C0184(a1, a5, a6, a7, a8);
    if (qword_1024192A0 != -1) {
      dispatch_once(&qword_1024192A0, &stru_1023118E0);
    }
    double v39 = qword_1024192A8;
    if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v40 = a1;
      if (*(char *)(a1 + 23) < 0) {
        uint64_t v40 = *(void *)a1;
      }
      double v41 = a5;
      if (a5 >= 9999.0) {
        double v41 = 9999.0;
      }
      unint64_t v42 = *(unsigned int *)(a1 + 788);
      unint64_t v43 = *(unsigned __int16 *)(a1 + 784) + (unint64_t)*(unsigned __int16 *)(a1 + 786) - 1;
      if (v43 < v42) {
        unint64_t v42 = 0;
      }
      uint64_t v44 = *(void *)(a1 + 784 + 8 * (v43 - v42) + 8);
      uint64_t v45 = *(void *)(a1 + 1928);
      uint64_t v46 = *(void *)(a1 + 1936);
      uint64_t v47 = *(void *)(a1 + 1944);
      unint64_t v48 = *(unsigned __int16 *)(a1 + 368) + (unint64_t)*(unsigned __int16 *)(a1 + 370) - 1;
      unint64_t v49 = *(unsigned int *)(a1 + 372);
      if (v48 < v49) {
        unint64_t v49 = 0;
      }
      uint64_t v50 = (uint64_t *)(v20 + 16 * (v48 - v49));
      uint64_t v52 = *v50;
      uint64_t v51 = v50[1];
      unint64_t v53 = *(unsigned __int16 *)(a1 + 504) + (unint64_t)*(unsigned __int16 *)(a1 + 506) - 1;
      unint64_t v54 = *(unsigned int *)(a1 + 508);
      if (v53 < v54) {
        unint64_t v54 = 0;
      }
      uint64_t v55 = a1 + 504 + 16 * (v53 - v54);
      uint64_t v56 = *(void *)(v55 + 8);
      uint64_t v57 = *(void *)(v55 + 16);
      uint64_t v58 = *(void *)(a1 + 1848);
      uint64_t v59 = *(void *)(a1 + 1856);
      uint64_t v60 = *(void *)(a1 + 1864);
      int v61 = *(_DWORD *)(a1 + 1952);
      *(_DWORD *)buf = 136319490;
      *(void *)&uint8_t buf[4] = v40;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&unsigned char buf[14] = a3;
      __int16 v126 = 2048;
      double v127 = a4;
      __int16 v128 = 2048;
      double v129 = v41;
      __int16 v130 = 2048;
      double v131 = a6;
      __int16 v132 = 2048;
      uint64_t v133 = v44;
      __int16 v134 = 2048;
      uint64_t v135 = v45;
      __int16 v136 = 2048;
      uint64_t v137 = v46;
      __int16 v138 = 2048;
      uint64_t v139 = v47;
      __int16 v140 = 2048;
      uint64_t v141 = v52;
      __int16 v142 = 2048;
      uint64_t v143 = v51;
      __int16 v144 = 2048;
      uint64_t v145 = v56;
      __int16 v146 = 2048;
      uint64_t v147 = v57;
      __int16 v148 = 2048;
      uint64_t v149 = v58;
      __int16 v150 = 2048;
      uint64_t v151 = v59;
      __int16 v152 = 2048;
      uint64_t v153 = v60;
      __int16 v154 = 2048;
      double v155 = a9;
      __int16 v156 = 1024;
      int v157 = v61;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "in-out-metrics,context,%s,stepDeltaDistance,%f,gyroHeadingRadians,%f,gpsDeltaDistance,%f,gpsHeadingRadians,%f,bodySum,%f,fTurnEnv,%f,fGPSTurnEnv,%f,fResidScalar,%f,fIMUDistanceX,%f,fIMUDistanceY,%f,fGPSDistanceX,%f,fGPSDistanceY,%f,fGpsWanderLLRBufferSum,%f,fGpsLLRBufferSum,%f,fGpsFixBufferSum,%f,stepTimestamp,%f,fGpsState,%d", buf, 0xB2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192A0 != -1) {
        dispatch_once(&qword_1024192A0, &stru_1023118E0);
      }
      uint64_t v62 = a1;
      if (*(char *)(a1 + 23) < 0) {
        uint64_t v62 = *(void *)a1;
      }
      double v63 = a5;
      if (a5 >= 9999.0) {
        double v63 = 9999.0;
      }
      unint64_t v64 = *(unsigned int *)(a1 + 788);
      unint64_t v65 = *(unsigned __int16 *)(a1 + 784) + (unint64_t)*(unsigned __int16 *)(a1 + 786) - 1;
      if (v65 < v64) {
        unint64_t v64 = 0;
      }
      uint64_t v66 = *(void *)(a1 + 784 + 8 * (v65 - v64) + 8);
      uint64_t v67 = *(void *)(a1 + 1928);
      uint64_t v68 = *(void *)(a1 + 1936);
      uint64_t v69 = *(void *)(a1 + 1944);
      unint64_t v70 = *(unsigned __int16 *)(a1 + 368) + (unint64_t)*(unsigned __int16 *)(a1 + 370) - 1;
      unint64_t v71 = *(unsigned int *)(a1 + 372);
      if (v70 < v71) {
        unint64_t v71 = 0;
      }
      __int16 v72 = (uint64_t *)(v20 + 16 * (v70 - v71));
      uint64_t v74 = *v72;
      uint64_t v73 = v72[1];
      unint64_t v75 = *(unsigned __int16 *)(a1 + 504) + (unint64_t)*(unsigned __int16 *)(a1 + 506) - 1;
      unint64_t v76 = *(unsigned int *)(a1 + 508);
      if (v75 < v76) {
        unint64_t v76 = 0;
      }
      uint64_t v77 = a1 + 504 + 16 * (v75 - v76);
      uint64_t v79 = *(void *)(v77 + 8);
      uint64_t v78 = *(void *)(v77 + 16);
      uint64_t v80 = *(void *)(a1 + 1848);
      uint64_t v81 = *(void *)(a1 + 1856);
      uint64_t v82 = *(void *)(a1 + 1864);
      int v83 = *(_DWORD *)(a1 + 1952);
      int v89 = 136319490;
      uint64_t v90 = v62;
      __int16 v91 = 2048;
      double v92 = a3;
      __int16 v93 = 2048;
      double v94 = a4;
      __int16 v95 = 2048;
      double v96 = v63;
      __int16 v97 = 2048;
      double v98 = a6;
      __int16 v99 = 2048;
      uint64_t v100 = v66;
      __int16 v101 = 2048;
      uint64_t v102 = v67;
      __int16 v103 = 2048;
      uint64_t v104 = v68;
      __int16 v105 = 2048;
      uint64_t v106 = v69;
      __int16 v107 = 2048;
      uint64_t v108 = v74;
      __int16 v109 = 2048;
      uint64_t v110 = v73;
      __int16 v111 = 2048;
      uint64_t v112 = v79;
      __int16 v113 = 2048;
      uint64_t v114 = v78;
      __int16 v115 = 2048;
      uint64_t v116 = v80;
      __int16 v117 = 2048;
      uint64_t v118 = v81;
      __int16 v119 = 2048;
      uint64_t v120 = v82;
      __int16 v121 = 2048;
      double v122 = a9;
      __int16 v123 = 1024;
      int v124 = v83;
      __int16 v84 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIndoorOutdoorGPSModel::processSamples(const double, const double, const double, const double, const double, const double, const CFAbsoluteTime, const CFAbsoluteTime, const uint32_t)", "%s\n", v84);
      if (v84 != buf) {
        free(v84);
      }
    }
  }
  else
  {
    __double2 v37 = __sincos_stret(a4);
    *(double *)buf = v37.__cosval * a3;
    *(double *)&uint8_t buf[8] = v37.__sinval * a3;
    sub_1000C0748(v14, buf);
    if (a6 == 1.79769313e308 || a5 == 1.79769313e308)
    {
      *(void *)buf = 0;
      double v86 = 0.0;
    }
    else
    {
      __double2 v85 = __sincos_stret(a6);
      *(double *)buf = v85.__cosval * a5;
      double v86 = v85.__sinval * a5;
    }
    *(double *)&uint8_t buf[8] = v86;
    sub_1000C0748((unsigned __int16 *)(a1 + 504), buf);
  }
  ++*(_DWORD *)(a1 + 1872);
}

void sub_1000BFF84(uint64_t a1, unsigned __int16 *a2, int a3, unsigned __int16 *a4, double *a5)
{
  unsigned int v5 = a2[1];
  if (v5 >= 7)
  {
    unsigned int v11 = v5 - 1;
    if (sub_1000C0850(a1, a2, v5 - 1, 6) > 7.62947002)
    {
      __int16 v12 = a2 + 4;
      uint64_t v13 = a2[1];
      unint64_t v14 = *a2 + v13 - 1;
      unint64_t v15 = *((unsigned int *)a2 + 1);
      if (v14 < v15) {
        unint64_t v15 = 0;
      }
      double v16 = *(double *)&v12[8 * (v14 - v15)];
      double v17 = *(double *)sub_1000C0928(a2, v13 - 6);
      uint64_t v18 = a2[1];
      unint64_t v19 = *a2 + v18 - 1;
      unint64_t v20 = *((unsigned int *)a2 + 1);
      if (v19 < v20) {
        unint64_t v20 = 0;
      }
      double v21 = *(double *)&v12[8 * (v19 - v20) + 4];
      uint64_t v22 = sub_1000C0928(a2, v18 - 6);
      double v23 = *(double *)(v22 + 8);
      double v24 = sub_1000C0850(v22, a2, v11, 5);
      if (fabs(v24) > 0.0001)
      {
        double v25 = sqrt((v16 - v17) * (v16 - v17) + (v21 - v23) * (v21 - v23)) / v24;
        uint64_t v26 = a4[1];
        unint64_t v27 = *((unsigned int *)a4 + 1);
        uint64_t v28 = *a4;
        if (v28 + v26 >= v27) {
          uint64_t v29 = *((unsigned int *)a4 + 1);
        }
        else {
          uint64_t v29 = 0;
        }
        *(double *)&a4[4 * (v28 + v26 - v29) + 4] = v25;
        if (v27 <= v26)
        {
          if (v28 + 1 < v27) {
            LOWORD(v27) = 0;
          }
          *a4 = v28 + 1 - v27;
          if (!a3) {
            goto LABEL_13;
          }
        }
        else
        {
          a4[1] = v26 + 1;
          if (!a3)
          {
LABEL_13:
            BOOL v30 = 0;
            goto LABEL_18;
          }
        }
        BOOL v30 = sub_1010FFD5C((unsigned __int16 *)(a1 + 784), (unsigned int (*)(double, double))sub_1010FFF5C, 0) >= 0.349065848;
LABEL_18:
        if (*(_DWORD *)(a1 + 1872) >= 9u && !v30)
        {
          double v31 = sub_1010FFD5C(a4, (unsigned int (*)(double, double))sub_1010FFF68, 0);
          long double v32 = acos(v31);
          *a5 = (v32 + v32) * 57.2957802;
        }
      }
    }
  }
}

void sub_1000C0184(uint64_t a1, double a2, double a3, double a4, double a5)
{
  if (a2 == 1.79769313e308)
  {
    uint64_t v7 = a1 + 2952;
    uint64_t v8 = a1 + 1952;
    do
    {
      unint64_t v9 = *(unsigned __int16 *)(v8 + 8) + (unint64_t)*(unsigned __int16 *)(v8 + 10);
      if (v9 - 1 >= *(unsigned int *)(v8 + 12)) {
        uint64_t v10 = *(unsigned int *)(v8 + 12);
      }
      else {
        uint64_t v10 = 0;
      }
      sub_1000C0748((unsigned __int16 *)(v8 + 8), (_OWORD *)(v8 - 16 * v10 + 16 * v9));
      uint64_t v11 = v8 + 256;
      v8 += 248;
    }
    while (v11 != v7);
  }
  else
  {
    for (uint64_t i = 1960; i != 2952; i += 248)
      sub_1010FFBAC(a1, (double *)(a1 + i), a3, a4, a5, a2);
  }
  if (*(_DWORD *)(a1 + 1872) < 9u) {
    return;
  }
  uint64_t v16 = 0;
  uint64_t v17 = a1 + 1960;
  unsigned int v18 = -1;
  do
  {
    if (sub_1000C07A8(a1, v17))
    {
      if (v18 != -1) {
        sub_101AA22D4();
      }
      unsigned int v18 = v16;
    }
    ++v16;
    v17 += 248;
  }
  while (v16 != 4);
  if (v18 == -1)
  {
    *(void *)(a1 + 1944) = 0x7FF8000000000000;
    return;
  }
  double v19 = *(double *)(a1 + 248 * v18 + 2184);
  if (v19 > 1.0) {
    double v19 = 1.0;
  }
  *(double *)(a1 + 1944) = v19;
  unsigned int v20 = *(_DWORD *)(a1 + 1952) - 5;
  double v21 = *(double *)(a1 + 1936) - *(double *)(a1 + 1928);
  BOOL v22 = COERCE__INT64(fabs(v21)) > 0x7FEFFFFFFFFFFFFFLL;
  if (v20 >= 0xFFFFFFFD && !v22)
  {
    sub_1010FFAA8(a1, v21);
    uint64_t v24 = *(unsigned __int16 *)(a1 + 858);
    unint64_t v25 = *(unsigned int *)(a1 + 860);
    uint64_t v26 = *(unsigned __int16 *)(a1 + 856);
    if (v26 + v24 >= v25) {
      uint64_t v27 = *(unsigned int *)(a1 + 860);
    }
    else {
      uint64_t v27 = 0;
    }
    *(void *)(a1 + 856 + 8 * (v26 + v24 - v27) + 8) = v23;
    if (v25 <= v24)
    {
      if (v26 + 1 < v25) {
        LOWORD(v25) = 0;
      }
      *(_WORD *)(a1 + 856) = v26 + 1 - v25;
    }
    else
    {
      *(_WORD *)(a1 + 858) = v24 + 1;
    }
  }
  double v28 = *(double *)(a1 + 1944);
  uint64_t v29 = (_WORD *)(a1 + 928);
  if (v20 < 0xFFFFFFFD || (*(void *)(a1 + 1944) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    uint64_t v36 = *(unsigned __int16 *)(a1 + 930);
    unint64_t v37 = *(unsigned int *)(a1 + 932);
    uint64_t v38 = *(unsigned __int16 *)(a1 + 928);
    if (v38 + v36 >= v37) {
      uint64_t v40 = *(unsigned int *)(a1 + 932);
    }
    else {
      uint64_t v40 = 0;
    }
    *(void *)&v29[4 * (v38 + v36 - v40) + 4] = 0;
  }
  else
  {
    long double v30 = exp(v28 * -10.0) * 10.0;
    double v31 = *(double *)(a1 + 24);
    long double v32 = (1.0 - v28) * -10.0;
    long double v33 = v30 / v31;
    long double v34 = exp(v32);
    double v35 = log10(v33 / (v34 * 10.0 / v31));
    if ((*(void *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
      double v35 = 0.0;
    }
    uint64_t v36 = *(unsigned __int16 *)(a1 + 930);
    unint64_t v37 = *(unsigned int *)(a1 + 932);
    uint64_t v38 = *(unsigned __int16 *)(a1 + 928);
    if (v38 + v36 >= v37) {
      uint64_t v39 = *(unsigned int *)(a1 + 932);
    }
    else {
      uint64_t v39 = 0;
    }
    *(double *)(a1 + 928 + 8 * (v38 + v36 - v39) + 8) = v35;
  }
  if (v37 <= v36)
  {
    if (v38 + 1 < v37) {
      LOWORD(v37) = 0;
    }
    _WORD *v29 = v38 + 1 - v37;
  }
  else
  {
    *(_WORD *)(a1 + 930) = v36 + 1;
  }
  v52[0] = a2 != 1.79769313e308 && *(double *)(a1 + 1904) != -1.79769313e308;
  sub_1000C0D88((unsigned __int16 *)(a1 + 1000), v52);
  *(double *)(a1 + 1848) = sub_1000C0B24((unsigned __int16 *)(a1 + 856));
  *(double *)(a1 + 1856) = sub_1000C0B24((unsigned __int16 *)(a1 + 928));
  double v41 = sub_1000C0DE0((unsigned __int16 *)(a1 + 1000));
  *(double *)(a1 + 1864) = v41;
  int v42 = *(_DWORD *)(a1 + 1952);
  if (!v42 && v41 < 6.0) {
    goto LABEL_53;
  }
  if (!v42 && v41 >= 6.0 || v42 == 1 && v41 >= 6.0) {
    goto LABEL_60;
  }
  if (v42 == 1)
  {
    if (*(_DWORD *)(a1 + 1920) <= 0x19u)
    {
      int v43 = 1;
      goto LABEL_55;
    }
    int v43 = 5;
LABEL_54:
    *(_DWORD *)(a1 + 1952) = v43;
LABEL_55:
    ++*(_DWORD *)(a1 + 1920);
    goto LABEL_63;
  }
  if (v42 == 2 && v41 < 6.0) {
    goto LABEL_53;
  }
  if (v42 == 2)
  {
    double v51 = *(double *)(a1 + 1856);
    if (v51 <= -20.0)
    {
      int v43 = 3;
    }
    else
    {
      if (v51 < 22.0 || *(double *)(a1 + 1848) < -5.0)
      {
        int v43 = 2;
        goto LABEL_62;
      }
      int v43 = 4;
    }
    goto LABEL_61;
  }
  if (v42 == 3 && v41 >= 6.0)
  {
    if (*(double *)(a1 + 1856) < 0.0 || *(double *)(a1 + 1848) < -5.0)
    {
      int v43 = 3;
      goto LABEL_62;
    }
    goto LABEL_60;
  }
  if (v42 == 4 && v41 < 6.0)
  {
LABEL_53:
    int v43 = 1;
    goto LABEL_54;
  }
  if (v42 == 4)
  {
    if (*(double *)(a1 + 1856) > 0.0) {
      goto LABEL_97;
    }
LABEL_60:
    int v43 = 2;
LABEL_61:
    *(_DWORD *)(a1 + 1952) = v43;
    goto LABEL_62;
  }
  if (v42 == 5 && v41 >= 6.0) {
    goto LABEL_60;
  }
LABEL_97:
  int v43 = *(_DWORD *)(a1 + 1952);
  if (v42 == 5) {
    goto LABEL_55;
  }
LABEL_62:
  *(_DWORD *)(a1 + 1920) = 0;
LABEL_63:
  if (v42 != v43)
  {
    if (qword_1024192A0 != -1) {
      dispatch_once(&qword_1024192A0, &stru_1023118E0);
    }
    uint64_t v44 = qword_1024192A8;
    if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v45 = a1;
      if (*(char *)(a1 + 23) < 0) {
        uint64_t v45 = *(void *)a1;
      }
      int v46 = *(_DWORD *)(a1 + 1952);
      int v47 = *(_DWORD *)(a1 + 1920);
      uint64_t v48 = *(void *)(a1 + 1864);
      uint64_t v49 = *(void *)(a1 + 1848);
      uint64_t v50 = *(void *)(a1 + 1856);
      v52[0] = 68290818;
      v52[1] = 0;
      __int16 v53 = 2082;
      unint64_t v54 = "";
      __int16 v55 = 2082;
      uint64_t v56 = v45;
      __int16 v57 = 1026;
      int v58 = v42;
      __int16 v59 = 1026;
      int v60 = v46;
      __int16 v61 = 1026;
      int v62 = v47;
      __int16 v63 = 2050;
      uint64_t v64 = v48;
      __int16 v65 = 2050;
      uint64_t v66 = v49;
      __int16 v67 = 2050;
      uint64_t v68 = v50;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"IndoorOutdoorGpsChange\", \"Context\":%{public, location:escape_only}s, \"Old GPS State\":%{public}d, \"New GPS State\":%{public}d, \"Epochs No Fix\":%{public}d, \"GPS fix buffer sum\":\"%{public}.9f\", \"GPS wander LLR sum\":\"%{public}.9f\", \"GPS LLR sum\":\"%{public}.9f\"}", (uint8_t *)v52, 0x4Cu);
    }
  }
}

unsigned __int16 *sub_1000C0748(unsigned __int16 *result, _OWORD *a2)
{
  unint64_t v2 = *((unsigned int *)result + 1);
  unint64_t v3 = *result + (unint64_t)result[1];
  if (v3 < v2) {
    unint64_t v2 = 0;
  }
  *(_OWORD *)&result[8 * (v3 - v2) + 4] = *a2;
  unsigned int v4 = result[1];
  unint64_t v5 = *((unsigned int *)result + 1);
  if (v5 <= v4)
  {
    unint64_t v6 = *result + 1;
    if (v6 < v5) {
      LOWORD(v5) = 0;
    }
    *double result = v6 - v5;
  }
  else
  {
    result[1] = v4 + 1;
  }
  return result;
}

BOOL sub_1000C07A8(uint64_t a1, uint64_t a2)
{
  int v2 = (*(_DWORD *)(a1 + 1872) + 1) & 7;
  int v3 = *(_DWORD *)(a2 + 232);
  if (v2 == v3)
  {
    int v5 = *(unsigned __int16 *)(a2 + 2);
    double v6 = sub_1000C0850(a1, (unsigned __int16 *)(a1 + 368), *(unsigned __int16 *)(a1 + 370) - 1, 7);
    double v8 = sub_1000C0850(v7, (unsigned __int16 *)a2, v5 - 1, 7);
    if (v6 <= 12.207152) {
      double v9 = NAN;
    }
    else {
      double v9 = vabdd_f64(v8, v6) / v6;
    }
    *(double *)(a2 + 224) = v9;
    *(double *)(a2 + 240) = v6;
  }
  return v2 == v3;
}

double sub_1000C0850(uint64_t a1, unsigned __int16 *a2, unsigned int a3, uint64_t a4)
{
  if (a2[1] <= a3) {
    sub_101AA2140();
  }
  if (!a4) {
    return 0.0;
  }
  uint64_t v5 = a3;
  uint64_t v6 = -a4;
  double v7 = 0.0;
  do
  {
    double v8 = *(double *)sub_1000C0928(a2, v5 + v6 + 1);
    double v9 = *(double *)(sub_1000C0928(a2, v5 + v6 + 1) + 8);
    double v10 = *(double *)sub_1000C0928(a2, v5 + v6);
    uint64_t v11 = sub_1000C0928(a2, v5 + v6);
    double v7 = v7 + sqrt((v8 - v10) * (v8 - v10) + (v9 - *(double *)(v11 + 8)) * (v9 - *(double *)(v11 + 8)));
  }
  while (!__CFADD__(v6++, 1));
  return v7;
}

uint64_t sub_1000C0928(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102311920);
    }
    double v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102311920);
      }
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const T &CMQueue<CMVector<double, 2>>::operator[](const size_t) const [T = CMVector<double, 2>]", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[8 * (v4 - v5) + 4];
}

double sub_1000C0B24(unsigned __int16 *a1)
{
  if (!a1[1]) {
    return 0.0;
  }
  unint64_t v2 = 0;
  double v3 = 0.0;
  do
    double v3 = v3 + *(double *)sub_1000C0B8C(a1, v2++);
  while (v2 < a1[1]);
  return v3;
}

uint64_t sub_1000C0B8C(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022D6308);
    }
    double v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022D6308);
      }
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const T &CMQueue<double>::operator[](const size_t) const [T = double]", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[4 * (v4 - v5) + 4];
}

unsigned __int16 *sub_1000C0D88(unsigned __int16 *result, _DWORD *a2)
{
  uint64_t v2 = result[1];
  unint64_t v3 = *((unsigned int *)result + 1);
  uint64_t v4 = *result;
  if (v4 + v2 < v3) {
    unint64_t v3 = 0;
  }
  *(_DWORD *)&result[2 * (v4 + v2 - v3) + 4] = *a2;
  unint64_t v5 = *((unsigned int *)result + 1);
  if (v5 <= v2)
  {
    __int16 v6 = v4 + 1;
    if (v4 + 1 >= v5) {
      __int16 v7 = *((_DWORD *)result + 1);
    }
    else {
      __int16 v7 = 0;
    }
    *double result = v6 - v7;
  }
  else
  {
    result[1] = v2 + 1;
  }
  return result;
}

double sub_1000C0DE0(unsigned __int16 *a1)
{
  if (!a1[1]) {
    return 0.0;
  }
  unint64_t v2 = 0;
  double v3 = 0.0;
  do
    double v3 = v3 + (double)*(int *)sub_1000C0E4C(a1, v2++);
  while (v2 < a1[1]);
  return v3;
}

uint64_t sub_1000C0E4C(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB7A0);
    }
    __int16 v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB7A0);
      }
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const T &CMQueue<int>::operator[](const size_t) const [T = int]", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[2 * (v4 - v5) + 4];
}

uint64_t sub_1000C1048(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 488);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248A400 + 8);
    }
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 488);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_40;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_10248A400 + 16);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_43;
  }
LABEL_40:
  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_10248A400 + 24);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_46;
  }
LABEL_43:
  uint64_t v10 = *(void *)(v5 + 32);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_10248A400 + 32);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v10, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_49;
  }
LABEL_46:
  uint64_t v11 = *(void *)(v5 + 40);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_10248A400 + 40);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v11, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_52;
  }
LABEL_49:
  uint64_t v12 = *(void *)(v5 + 48);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_10248A400 + 48);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v12, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_55;
  }
LABEL_52:
  uint64_t v13 = *(void *)(v5 + 56);
  if (!v13) {
    uint64_t v13 = *(void *)(qword_10248A400 + 56);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v13, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_58;
  }
LABEL_55:
  uint64_t v14 = *(void *)(v5 + 64);
  if (!v14) {
    uint64_t v14 = *(void *)(qword_10248A400 + 64);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v14, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_61;
  }
LABEL_58:
  uint64_t v15 = *(void *)(v5 + 72);
  if (!v15) {
    uint64_t v15 = *(void *)(qword_10248A400 + 72);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v15, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_64;
  }
LABEL_61:
  uint64_t v16 = *(void *)(v5 + 80);
  if (!v16) {
    uint64_t v16 = *(void *)(qword_10248A400 + 80);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v16, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_67;
  }
LABEL_64:
  uint64_t v17 = *(void *)(v5 + 88);
  if (!v17) {
    uint64_t v17 = *(void *)(qword_10248A400 + 88);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v17, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_70;
  }
LABEL_67:
  uint64_t v18 = *(void *)(v5 + 96);
  if (!v18) {
    uint64_t v18 = *(void *)(qword_10248A400 + 96);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, v18, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_73;
  }
LABEL_70:
  uint64_t v19 = *(void *)(v5 + 104);
  if (!v19) {
    uint64_t v19 = *(void *)(qword_10248A400 + 104);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, v19, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_76;
  }
LABEL_73:
  uint64_t v20 = *(void *)(v5 + 112);
  if (!v20) {
    uint64_t v20 = *(void *)(qword_10248A400 + 112);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, v20, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_79;
  }
LABEL_76:
  uint64_t v21 = *(void *)(v5 + 120);
  if (!v21) {
    uint64_t v21 = *(void *)(qword_10248A400 + 120);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, v21, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_82;
  }
LABEL_79:
  uint64_t v22 = *(void *)(v5 + 128);
  if (!v22) {
    uint64_t v22 = *(void *)(qword_10248A400 + 128);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, v22, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_85;
  }
LABEL_82:
  uint64_t v23 = *(void *)(v5 + 136);
  if (!v23) {
    uint64_t v23 = *(void *)(qword_10248A400 + 136);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, v23, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_88;
  }
LABEL_85:
  uint64_t v24 = *(void *)(v5 + 144);
  if (!v24) {
    uint64_t v24 = *(void *)(qword_10248A400 + 144);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, v24, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_91;
  }
LABEL_88:
  uint64_t v25 = *(void *)(v5 + 152);
  if (!v25) {
    uint64_t v25 = *(void *)(qword_10248A400 + 152);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, v25, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_94;
  }
LABEL_91:
  uint64_t v26 = *(void *)(v5 + 160);
  if (!v26) {
    uint64_t v26 = *(void *)(qword_10248A400 + 160);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, v26, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_97;
  }
LABEL_94:
  uint64_t v27 = *(void *)(v5 + 168);
  if (!v27) {
    uint64_t v27 = *(void *)(qword_10248A400 + 168);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, v27, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_100;
  }
LABEL_97:
  uint64_t v28 = *(void *)(v5 + 176);
  if (!v28) {
    uint64_t v28 = *(void *)(qword_10248A400 + 176);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, v28, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_103;
  }
LABEL_100:
  uint64_t v29 = *(void *)(v5 + 184);
  if (!v29) {
    uint64_t v29 = *(void *)(qword_10248A400 + 184);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17, v29, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x800000) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_106;
  }
LABEL_103:
  uint64_t v30 = *(void *)(v5 + 192);
  if (!v30) {
    uint64_t v30 = *(void *)(qword_10248A400 + 192);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x18, v30, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_109;
  }
LABEL_106:
  uint64_t v31 = *(void *)(v5 + 200);
  if (!v31) {
    uint64_t v31 = *(void *)(qword_10248A400 + 200);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x19, v31, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_112;
  }
LABEL_109:
  uint64_t v32 = *(void *)(v5 + 208);
  if (!v32) {
    uint64_t v32 = *(void *)(qword_10248A400 + 208);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1A, v32, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_115;
  }
LABEL_112:
  uint64_t v33 = *(void *)(v5 + 216);
  if (!v33) {
    uint64_t v33 = *(void *)(qword_10248A400 + 216);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1B, v33, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_118;
  }
LABEL_115:
  uint64_t v34 = *(void *)(v5 + 224);
  if (!v34) {
    uint64_t v34 = *(void *)(qword_10248A400 + 224);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1C, v34, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_121;
  }
LABEL_118:
  uint64_t v35 = *(void *)(v5 + 232);
  if (!v35) {
    uint64_t v35 = *(void *)(qword_10248A400 + 232);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1D, v35, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_124;
  }
LABEL_121:
  uint64_t v36 = *(void *)(v5 + 240);
  if (!v36) {
    uint64_t v36 = *(void *)(qword_10248A400 + 240);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1E, v36, a2, a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_130;
    }
    goto LABEL_127;
  }
LABEL_124:
  uint64_t v37 = *(void *)(v5 + 248);
  if (!v37) {
    uint64_t v37 = *(void *)(qword_10248A400 + 248);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1F, v37, a2, a4);
  if ((*(_DWORD *)(v5 + 488) & 0x80000000) != 0)
  {
LABEL_127:
    uint64_t v38 = *(void *)(v5 + 256);
    if (!v38) {
      uint64_t v38 = *(void *)(qword_10248A400 + 256);
    }
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x20, v38, a2, a4);
  }
LABEL_130:
  int v39 = *(_DWORD *)(v5 + 492);
  if (v39)
  {
    uint64_t v40 = *(void *)(v5 + 264);
    if (!v40) {
      uint64_t v40 = *(void *)(qword_10248A400 + 264);
    }
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x21, v40, a2, a4);
    int v39 = *(_DWORD *)(v5 + 492);
    if ((v39 & 2) == 0)
    {
LABEL_132:
      if ((v39 & 4) == 0) {
        goto LABEL_133;
      }
      goto LABEL_165;
    }
  }
  else if ((v39 & 2) == 0)
  {
    goto LABEL_132;
  }
  uint64_t v41 = *(void *)(v5 + 272);
  if (!v41) {
    uint64_t v41 = *(void *)(qword_10248A400 + 272);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22, v41, a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 4) == 0)
  {
LABEL_133:
    if ((v39 & 8) == 0) {
      goto LABEL_134;
    }
    goto LABEL_168;
  }
LABEL_165:
  uint64_t v42 = *(void *)(v5 + 280);
  if (!v42) {
    uint64_t v42 = *(void *)(qword_10248A400 + 280);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x23, v42, a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 8) == 0)
  {
LABEL_134:
    if ((v39 & 0x10) == 0) {
      goto LABEL_135;
    }
    goto LABEL_171;
  }
LABEL_168:
  uint64_t v43 = *(void *)(v5 + 288);
  if (!v43) {
    uint64_t v43 = *(void *)(qword_10248A400 + 288);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3EC, v43, a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x10) == 0)
  {
LABEL_135:
    if ((v39 & 0x20) == 0) {
      goto LABEL_136;
    }
    goto LABEL_174;
  }
LABEL_171:
  uint64_t v44 = *(void *)(v5 + 296);
  if (!v44) {
    uint64_t v44 = *(void *)(qword_10248A400 + 296);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3EE, v44, a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x20) == 0)
  {
LABEL_136:
    if ((v39 & 0x40) == 0) {
      goto LABEL_137;
    }
    goto LABEL_177;
  }
LABEL_174:
  uint64_t v45 = *(void *)(v5 + 304);
  if (!v45) {
    uint64_t v45 = *(void *)(qword_10248A400 + 304);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3EF, v45, a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x40) == 0)
  {
LABEL_137:
    if ((v39 & 0x80) == 0) {
      goto LABEL_138;
    }
    goto LABEL_180;
  }
LABEL_177:
  uint64_t v46 = *(void *)(v5 + 312);
  if (!v46) {
    uint64_t v46 = *(void *)(qword_10248A400 + 312);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F0, v46, a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x80) == 0)
  {
LABEL_138:
    if ((v39 & 0x100) == 0) {
      goto LABEL_139;
    }
    goto LABEL_183;
  }
LABEL_180:
  uint64_t v47 = *(void *)(v5 + 320);
  if (!v47) {
    uint64_t v47 = *(void *)(qword_10248A400 + 320);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F2, v47, a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x100) == 0)
  {
LABEL_139:
    if ((v39 & 0x200) == 0) {
      goto LABEL_140;
    }
    goto LABEL_186;
  }
LABEL_183:
  uint64_t v48 = *(void *)(v5 + 328);
  if (!v48) {
    uint64_t v48 = *(void *)(qword_10248A400 + 328);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F4, v48, a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x200) == 0)
  {
LABEL_140:
    if ((v39 & 0x400) == 0) {
      goto LABEL_141;
    }
    goto LABEL_189;
  }
LABEL_186:
  uint64_t v49 = *(void *)(v5 + 336);
  if (!v49) {
    uint64_t v49 = *(void *)(qword_10248A400 + 336);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F6, v49, a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x400) == 0)
  {
LABEL_141:
    if ((v39 & 0x800) == 0) {
      goto LABEL_142;
    }
    goto LABEL_192;
  }
LABEL_189:
  uint64_t v50 = *(void *)(v5 + 344);
  if (!v50) {
    uint64_t v50 = *(void *)(qword_10248A400 + 344);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F8, v50, a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x800) == 0)
  {
LABEL_142:
    if ((v39 & 0x1000) == 0) {
      goto LABEL_143;
    }
    goto LABEL_195;
  }
LABEL_192:
  uint64_t v51 = *(void *)(v5 + 352);
  if (!v51) {
    uint64_t v51 = *(void *)(qword_10248A400 + 352);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F9, v51, a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x1000) == 0)
  {
LABEL_143:
    if ((v39 & 0x2000) == 0) {
      goto LABEL_144;
    }
    goto LABEL_198;
  }
LABEL_195:
  uint64_t v52 = *(void *)(v5 + 360);
  if (!v52) {
    uint64_t v52 = *(void *)(qword_10248A400 + 360);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D0, v52, a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x2000) == 0)
  {
LABEL_144:
    if ((v39 & 0x4000) == 0) {
      goto LABEL_145;
    }
    goto LABEL_201;
  }
LABEL_198:
  uint64_t v53 = *(void *)(v5 + 368);
  if (!v53) {
    uint64_t v53 = *(void *)(qword_10248A400 + 368);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D1, v53, a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x4000) == 0)
  {
LABEL_145:
    if ((v39 & 0x8000) == 0) {
      goto LABEL_146;
    }
    goto LABEL_204;
  }
LABEL_201:
  uint64_t v54 = *(void *)(v5 + 376);
  if (!v54) {
    uint64_t v54 = *(void *)(qword_10248A400 + 376);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D2, v54, a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x8000) == 0)
  {
LABEL_146:
    if ((v39 & 0x10000) == 0) {
      goto LABEL_147;
    }
    goto LABEL_205;
  }
LABEL_204:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D3, *(_DWORD *)(v5 + 480), (int)a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x10000) == 0)
  {
LABEL_147:
    if ((v39 & 0x20000) == 0) {
      goto LABEL_148;
    }
    goto LABEL_208;
  }
LABEL_205:
  uint64_t v55 = *(void *)(v5 + 384);
  if (!v55) {
    uint64_t v55 = *(void *)(qword_10248A400 + 384);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D4, v55, a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x20000) == 0)
  {
LABEL_148:
    if ((v39 & 0x40000) == 0) {
      goto LABEL_149;
    }
    goto LABEL_211;
  }
LABEL_208:
  uint64_t v56 = *(void *)(v5 + 392);
  if (!v56) {
    uint64_t v56 = *(void *)(qword_10248A400 + 392);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D5, v56, a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x40000) == 0)
  {
LABEL_149:
    if ((v39 & 0x80000) == 0) {
      goto LABEL_150;
    }
    goto LABEL_214;
  }
LABEL_211:
  uint64_t v57 = *(void *)(v5 + 400);
  if (!v57) {
    uint64_t v57 = *(void *)(qword_10248A400 + 400);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D6, v57, a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x80000) == 0)
  {
LABEL_150:
    if ((v39 & 0x100000) == 0) {
      goto LABEL_151;
    }
    goto LABEL_217;
  }
LABEL_214:
  uint64_t v58 = *(void *)(v5 + 408);
  if (!v58) {
    uint64_t v58 = *(void *)(qword_10248A400 + 408);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D7, v58, a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x100000) == 0)
  {
LABEL_151:
    if ((v39 & 0x200000) == 0) {
      goto LABEL_152;
    }
    goto LABEL_220;
  }
LABEL_217:
  uint64_t v59 = *(void *)(v5 + 416);
  if (!v59) {
    uint64_t v59 = *(void *)(qword_10248A400 + 416);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D8, v59, a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x200000) == 0)
  {
LABEL_152:
    if ((v39 & 0x400000) == 0) {
      goto LABEL_153;
    }
    goto LABEL_223;
  }
LABEL_220:
  uint64_t v60 = *(void *)(v5 + 424);
  if (!v60) {
    uint64_t v60 = *(void *)(qword_10248A400 + 424);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D9, v60, a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x400000) == 0)
  {
LABEL_153:
    if ((v39 & 0x800000) == 0) {
      goto LABEL_154;
    }
    goto LABEL_226;
  }
LABEL_223:
  uint64_t v61 = *(void *)(v5 + 432);
  if (!v61) {
    uint64_t v61 = *(void *)(qword_10248A400 + 432);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7DA, v61, a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x800000) == 0)
  {
LABEL_154:
    if ((v39 & 0x1000000) == 0) {
      goto LABEL_155;
    }
    goto LABEL_229;
  }
LABEL_226:
  uint64_t v62 = *(void *)(v5 + 440);
  if (!v62) {
    uint64_t v62 = *(void *)(qword_10248A400 + 440);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7DB, v62, a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x1000000) == 0)
  {
LABEL_155:
    if ((v39 & 0x2000000) == 0) {
      goto LABEL_156;
    }
    goto LABEL_232;
  }
LABEL_229:
  uint64_t v63 = *(void *)(v5 + 448);
  if (!v63) {
    uint64_t v63 = *(void *)(qword_10248A400 + 448);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7DC, v63, a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x2000000) == 0)
  {
LABEL_156:
    if ((v39 & 0x4000000) == 0) {
      goto LABEL_157;
    }
    goto LABEL_235;
  }
LABEL_232:
  uint64_t v64 = *(void *)(v5 + 456);
  if (!v64) {
    uint64_t v64 = *(void *)(qword_10248A400 + 456);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7DD, v64, a2, a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x4000000) == 0)
  {
LABEL_157:
    if ((v39 & 0x8000000) == 0) {
      return result;
    }
    goto LABEL_238;
  }
LABEL_235:
  uint64_t v65 = *(void *)(v5 + 464);
  if (!v65) {
    uint64_t v65 = *(void *)(qword_10248A400 + 464);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7DE, v65, a2, a4);
  if ((*(_DWORD *)(v5 + 492) & 0x8000000) != 0)
  {
LABEL_238:
    uint64_t v66 = *(void *)(v5 + 472);
    if (!v66) {
      uint64_t v66 = *(void *)(qword_10248A400 + 472);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7DF, v66, a2, a4);
  }
  return result;
}

uint64_t sub_1000C1AC0(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 184);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248AF70 + 8);
    }
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 184);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 176), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_28:
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_10248AF70 + 16);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_34;
  }
LABEL_31:
  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_10248AF70 + 24);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_37;
  }
LABEL_34:
  uint64_t v10 = *(void *)(v5 + 32);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_10248AF70 + 32);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v10, a2, a4);
  int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }
LABEL_37:
  uint64_t v11 = *(void *)(v5 + 40);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_10248AF70 + 40);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v11, a2, a4);
  int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_43;
  }
LABEL_40:
  uint64_t v12 = *(void *)(v5 + 48);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_10248AF70 + 48);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v12, a2, a4);
  int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_46;
  }
LABEL_43:
  uint64_t v13 = *(void *)(v5 + 56);
  if (!v13) {
    uint64_t v13 = *(void *)(qword_10248AF70 + 56);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v13, a2, a4);
  int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_49;
  }
LABEL_46:
  uint64_t v14 = *(void *)(v5 + 64);
  if (!v14) {
    uint64_t v14 = *(void *)(qword_10248AF70 + 64);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v14, a2, a4);
  int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_52;
  }
LABEL_49:
  uint64_t v15 = *(void *)(v5 + 72);
  if (!v15) {
    uint64_t v15 = *(void *)(qword_10248AF70 + 72);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v15, a2, a4);
  int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_55;
  }
LABEL_52:
  uint64_t v16 = *(void *)(v5 + 80);
  if (!v16) {
    uint64_t v16 = *(void *)(qword_10248AF70 + 80);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v16, a2, a4);
  int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_58;
  }
LABEL_55:
  uint64_t v17 = *(void *)(v5 + 88);
  if (!v17) {
    uint64_t v17 = *(void *)(qword_10248AF70 + 88);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, v17, a2, a4);
  int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_61;
  }
LABEL_58:
  uint64_t v18 = *(void *)(v5 + 96);
  if (!v18) {
    uint64_t v18 = *(void *)(qword_10248AF70 + 96);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, v18, a2, a4);
  int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_64;
  }
LABEL_61:
  uint64_t v19 = *(void *)(v5 + 104);
  if (!v19) {
    uint64_t v19 = *(void *)(qword_10248AF70 + 104);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, v19, a2, a4);
  int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_67;
  }
LABEL_64:
  uint64_t v20 = *(void *)(v5 + 112);
  if (!v20) {
    uint64_t v20 = *(void *)(qword_10248AF70 + 112);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, v20, a2, a4);
  int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_70;
  }
LABEL_67:
  uint64_t v21 = *(void *)(v5 + 120);
  if (!v21) {
    uint64_t v21 = *(void *)(qword_10248AF70 + 120);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, v21, a2, a4);
  int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_73;
  }
LABEL_70:
  uint64_t v22 = *(void *)(v5 + 128);
  if (!v22) {
    uint64_t v22 = *(void *)(qword_10248AF70 + 128);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, v22, a2, a4);
  int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_76;
  }
LABEL_73:
  uint64_t v23 = *(void *)(v5 + 136);
  if (!v23) {
    uint64_t v23 = *(void *)(qword_10248AF70 + 136);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, v23, a2, a4);
  int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_79;
  }
LABEL_76:
  uint64_t v24 = *(void *)(v5 + 144);
  if (!v24) {
    uint64_t v24 = *(void *)(qword_10248AF70 + 144);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, v24, a2, a4);
  int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_82;
  }
LABEL_79:
  uint64_t v25 = *(void *)(v5 + 152);
  if (!v25) {
    uint64_t v25 = *(void *)(qword_10248AF70 + 152);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, v25, a2, a4);
  int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0) {
      return result;
    }
    goto LABEL_85;
  }
LABEL_82:
  uint64_t v26 = *(void *)(v5 + 160);
  if (!v26) {
    uint64_t v26 = *(void *)(qword_10248AF70 + 160);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, v26, a2, a4);
  if ((*(_DWORD *)(v5 + 184) & 0x200000) != 0)
  {
LABEL_85:
    uint64_t v27 = *(void *)(v5 + 168);
    if (!v27) {
      uint64_t v27 = *(void *)(qword_10248AF70 + 168);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, v27, a2, a4);
  }
  return result;
}

uint64_t sub_1000C1EB0(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 20);
  if (v6)
  {
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    int v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
  {
    int v7 = *(_DWORD *)(v5 + 12);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return result;
}

uint64_t sub_1000C1F1C(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 36);
  if ((v5 & 1) == 0)
  {
    if ((v5 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v4 + 16), a3);
    if ((*(_DWORD *)(v4 + 36) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
  int v5 = *(_DWORD *)(v4 + 36);
  if ((v5 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 4) == 0) {
    return result;
  }
LABEL_7:
  double v6 = *(double *)(v4 + 24);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, v6, a3);
}

uint64_t sub_1000C1FA8(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 36);
  if (v6)
  {
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_8:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AF00 + 16);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 36) & 8) != 0)
  {
LABEL_11:
    uint64_t v8 = *(void *)(v5 + 24);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248AF00 + 24);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v8, a2, a4);
  }
  return result;
}

uint64_t sub_1000C2070(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 112);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248AF08 + 8);
    }
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 112);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_10248AF08 + 16);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_22:
  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_10248AF08 + 24);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_25:
  uint64_t v10 = *(void *)(v5 + 32);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_10248AF08 + 32);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v10, a2, a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 48), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (int)a2, *(double *)(v5 + 40), a3);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(_DWORD *)(v5 + 52), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_31:
  uint64_t v11 = *(void *)(v5 + 56);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_10248AF08 + 56);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v11, a2, a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_34:
  uint64_t v12 = *(void *)(v5 + 64);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_10248AF08 + 64);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v12, a2, a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(_DWORD *)(v5 + 104), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_41;
  }
LABEL_38:
  uint64_t v13 = *(void *)(v5 + 72);
  if (!v13) {
    uint64_t v13 = *(void *)(qword_10248AF08 + 72);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v13, a2, a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }
LABEL_41:
  uint64_t v14 = *(void *)(v5 + 80);
  if (!v14) {
    uint64_t v14 = *(void *)(qword_10248AF08 + 80);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, v14, a2, a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      return result;
    }
    goto LABEL_47;
  }
LABEL_44:
  uint64_t v15 = *(void *)(v5 + 88);
  if (!v15) {
    uint64_t v15 = *(void *)(qword_10248AF08 + 88);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, v15, a2, a4);
  if ((*(_DWORD *)(v5 + 112) & 0x2000) != 0)
  {
LABEL_47:
    uint64_t v16 = *(void *)(v5 + 96);
    if (!v16) {
      uint64_t v16 = *(void *)(qword_10248AF08 + 96);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, v16, a2, a4);
  }
  return result;
}

uint64_t sub_1000C22D0(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 36);
  if ((v5 & 1) == 0)
  {
    if ((v5 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v4 + 16), a3);
    if ((*(_DWORD *)(v4 + 36) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
  int v5 = *(_DWORD *)(v4 + 36);
  if ((v5 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 4) == 0) {
    return result;
  }
LABEL_7:
  double v6 = *(double *)(v4 + 24);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, v6, a3);
}

uint64_t sub_1000C235C(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 28);
  if (v5)
  {
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    int v5 = *(_DWORD *)(v4 + 28);
  }
  if ((v5 & 2) != 0)
  {
    double v6 = *(double *)(v4 + 16);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, v6, a3);
  }
  return result;
}

uint64_t sub_1000C23C8(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 152);
  if (v6)
  {
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 48), (int)a2, a4);
    int v6 = *(_DWORD *)(v5 + 152);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v7 = *(void *)(v5 + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_102489CE0 + 8);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  int v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_29;
  }
LABEL_28:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(double *)(v5 + 16), a3);
  int v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_30;
  }
LABEL_29:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (int)a2, *(double *)(v5 + 24), a3);
  int v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }
LABEL_30:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (int)a2, *(double *)(v5 + 32), a3);
  int v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_32;
  }
LABEL_31:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (int)a2, *(double *)(v5 + 40), a3);
  int v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }
LABEL_32:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, (int)a2, *(double *)(v5 + 56), a3);
  int v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, (int)a2, *(double *)(v5 + 64), a3);
  int v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, (int)a2, *(double *)(v5 + 72), a3);
  int v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, (int)a2, *(double *)(v5 + 80), a3);
  int v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(_DWORD *)(v5 + 52), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, (int)a2, *(double *)(v5 + 88), a3);
  int v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(_DWORD *)(v5 + 104), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_39:
  uint64_t v8 = *(void *)(v5 + 96);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_102489CE0 + 96);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, v8, a2, a4);
  int v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, (int)a2, *(double *)(v5 + 112), a3);
  int v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(_DWORD *)(v5 + 108), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, *(_DWORD *)(v5 + 120), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, *(_DWORD *)(v5 + 124), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, *(_DWORD *)(v5 + 128), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_22;
    }
LABEL_48:
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, (int)a2, *(double *)(v5 + 136), a3);
    if ((*(_DWORD *)(v5 + 152) & 0x200000) == 0) {
      return result;
    }
    goto LABEL_49;
  }
LABEL_47:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, *(_DWORD *)(v5 + 132), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x100000) != 0) {
    goto LABEL_48;
  }
LABEL_22:
  if ((v6 & 0x200000) == 0) {
    return result;
  }
LABEL_49:
  int v9 = *(unsigned __int8 *)(v5 + 144);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, v9, (BOOL)a2, a4);
}

uint64_t sub_1000C2688(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 364);
  if (v6)
  {
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (int)a2, *(double *)(result + 8), a3);
    int v6 = *(_DWORD *)(v5 + 364);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_64;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(double *)(v5 + 16), a3);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_65;
  }
LABEL_64:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(double *)(v5 + 24), a3);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_66;
  }
LABEL_65:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (int)a2, *(double *)(v5 + 32), a3);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_67;
  }
LABEL_66:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (int)a2, *(double *)(v5 + 40), a3);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_68;
  }
LABEL_67:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (int)a2, *(float *)(v5 + 48), a3);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_69;
  }
LABEL_68:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, (int)a2, *(float *)(v5 + 52), a3);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_70;
  }
LABEL_69:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, (int)a2, *(float *)(v5 + 56), a3);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_71;
  }
LABEL_70:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned __int8 *)(v5 + 112), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_72;
  }
LABEL_71:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(_DWORD *)(v5 + 60), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_75;
  }
LABEL_72:
  uint64_t v10 = *(void *)(v5 + 64);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_102489D00 + 64);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v10, a2, a4);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_76;
  }
LABEL_75:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, (int)a2, *(double *)(v5 + 72), a3);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_77;
  }
LABEL_76:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(_DWORD *)(v5 + 80), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_78;
  }
LABEL_77:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(_DWORD *)(v5 + 84), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_79;
  }
LABEL_78:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, *(unsigned __int8 *)(v5 + 113), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_82;
  }
LABEL_79:
  uint64_t v11 = *(void *)(v5 + 88);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_102489D00 + 88);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, v11, a2, a4);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_83;
  }
LABEL_82:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, *(_DWORD *)(v5 + 96), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_84;
  }
LABEL_83:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, (int)a2, *(float *)(v5 + 100), a3);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_87;
  }
LABEL_84:
  uint64_t v12 = *(void *)(v5 + 104);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_102489D00 + 104);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, v12, a2, a4);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_88;
  }
LABEL_87:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, (int)a2, *(double *)(v5 + 120), a3);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_89;
  }
LABEL_88:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, (int)a2, *(double *)(v5 + 128), a3);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_90;
  }
LABEL_89:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, *(_DWORD *)(v5 + 116), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_91;
  }
LABEL_90:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17, *(unsigned __int8 *)(v5 + 114), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x800000) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_94;
  }
LABEL_91:
  uint64_t v13 = *(void *)(v5 + 136);
  if (!v13) {
    uint64_t v13 = *(void *)(qword_102489D00 + 136);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x18, v13, a2, a4);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_95;
  }
LABEL_94:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x19, (int)a2, *(double *)(v5 + 144), a3);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_96;
  }
LABEL_95:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1A, (int)a2, *(double *)(v5 + 152), a3);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_97;
  }
LABEL_96:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1B, (int)a2, *(double *)(v5 + 160), a3);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_98;
  }
LABEL_97:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1C, (int)a2, *(double *)(v5 + 168), a3);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_99;
  }
LABEL_98:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1D, (int)a2, *(double *)(v5 + 176), a3);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_32;
    }
LABEL_100:
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1F, *(unsigned __int8 *)(v5 + 115), (BOOL)a2, a4);
    if ((*(_DWORD *)(v5 + 364) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_101;
  }
LABEL_99:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1E, (int)a2, *(double *)(v5 + 184), a3);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x40000000) != 0) {
    goto LABEL_100;
  }
LABEL_32:
  if ((v6 & 0x80000000) == 0) {
    goto LABEL_33;
  }
LABEL_101:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x20, (int)a2, *(double *)(v5 + 192), a3);
LABEL_33:
  int v7 = *(_DWORD *)(v5 + 368);
  if (v7)
  {
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x21, (int)a2, *(double *)(v5 + 200), a3);
    int v7 = *(_DWORD *)(v5 + 368);
    if ((v7 & 2) == 0)
    {
LABEL_35:
      if ((v7 & 4) == 0) {
        goto LABEL_36;
      }
      goto LABEL_104;
    }
  }
  else if ((v7 & 2) == 0)
  {
    goto LABEL_35;
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22, *(unsigned __int8 *)(v5 + 276), (BOOL)a2, a4);
  int v7 = *(_DWORD *)(v5 + 368);
  if ((v7 & 4) == 0)
  {
LABEL_36:
    if ((v7 & 8) == 0) {
      goto LABEL_37;
    }
    goto LABEL_107;
  }
LABEL_104:
  uint64_t v14 = *(void *)(v5 + 208);
  if (!v14) {
    uint64_t v14 = *(void *)(qword_102489D00 + 208);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x23, v14, a2, a4);
  int v7 = *(_DWORD *)(v5 + 368);
  if ((v7 & 8) == 0)
  {
LABEL_37:
    if ((v7 & 0x10) == 0) {
      goto LABEL_38;
    }
    goto LABEL_108;
  }
LABEL_107:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x24, (int)a2, *(double *)(v5 + 216), a3);
  int v7 = *(_DWORD *)(v5 + 368);
  if ((v7 & 0x10) == 0)
  {
LABEL_38:
    if ((v7 & 0x20) == 0) {
      goto LABEL_39;
    }
    goto LABEL_109;
  }
LABEL_108:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x25, *(_DWORD *)(v5 + 272), (int)a2, a4);
  int v7 = *(_DWORD *)(v5 + 368);
  if ((v7 & 0x20) == 0)
  {
LABEL_39:
    if ((v7 & 0x40) == 0) {
      goto LABEL_40;
    }
    goto LABEL_110;
  }
LABEL_109:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x26, (int)a2, *(double *)(v5 + 224), a3);
  int v7 = *(_DWORD *)(v5 + 368);
  if ((v7 & 0x40) == 0)
  {
LABEL_40:
    if ((v7 & 0x80) == 0) {
      goto LABEL_41;
    }
    goto LABEL_111;
  }
LABEL_110:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x27, (int)a2, *(double *)(v5 + 232), a3);
  int v7 = *(_DWORD *)(v5 + 368);
  if ((v7 & 0x80) == 0)
  {
LABEL_41:
    if ((v7 & 0x100) == 0) {
      goto LABEL_42;
    }
    goto LABEL_112;
  }
LABEL_111:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x28, (int)a2, *(double *)(v5 + 240), a3);
  int v7 = *(_DWORD *)(v5 + 368);
  if ((v7 & 0x100) == 0)
  {
LABEL_42:
    if ((v7 & 0x200) == 0) {
      goto LABEL_43;
    }
    goto LABEL_113;
  }
LABEL_112:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x29, (int)a2, *(double *)(v5 + 248), a3);
  int v7 = *(_DWORD *)(v5 + 368);
  if ((v7 & 0x200) == 0)
  {
LABEL_43:
    if ((v7 & 0x400) == 0) {
      goto LABEL_44;
    }
    goto LABEL_114;
  }
LABEL_113:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2A, (int)a2, *(double *)(v5 + 256), a3);
  int v7 = *(_DWORD *)(v5 + 368);
  if ((v7 & 0x400) == 0)
  {
LABEL_44:
    if ((v7 & 0x800) == 0) {
      goto LABEL_45;
    }
    goto LABEL_115;
  }
LABEL_114:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2B, *(unsigned __int8 *)(v5 + 277), (BOOL)a2, a4);
  int v7 = *(_DWORD *)(v5 + 368);
  if ((v7 & 0x800) == 0)
  {
LABEL_45:
    if ((v7 & 0x1000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
LABEL_115:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2C, (int)a2, *(double *)(v5 + 264), a3);
  if ((*(_DWORD *)(v5 + 368) & 0x1000) != 0) {
LABEL_46:
  }
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2D, (int)a2, *(double *)(v5 + 280), a3);
LABEL_47:
  if (*(int *)(v5 + 296) >= 1)
  {
    uint64_t v8 = 0;
    do
      double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2E, *(void *)(*(void *)(v5 + 288) + 8 * v8++), a2, a4);
    while (v8 < *(int *)(v5 + 296));
  }
  int v9 = *(_DWORD *)(v5 + 368);
  if ((v9 & 0x4000) != 0)
  {
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2F, *(_DWORD *)(v5 + 312), (int)a2, a4);
    int v9 = *(_DWORD *)(v5 + 368);
    if ((v9 & 0x8000) == 0)
    {
LABEL_52:
      if ((v9 & 0x10000) == 0) {
        goto LABEL_53;
      }
      goto LABEL_121;
    }
  }
  else if ((v9 & 0x8000) == 0)
  {
    goto LABEL_52;
  }
  uint64_t v15 = *(void *)(v5 + 320);
  if (!v15) {
    uint64_t v15 = *(void *)(qword_102489D00 + 320);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x30, v15, a2, a4);
  int v9 = *(_DWORD *)(v5 + 368);
  if ((v9 & 0x10000) == 0)
  {
LABEL_53:
    if ((v9 & 0x20000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_122;
  }
LABEL_121:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x31, *(_DWORD *)(v5 + 316), (int)a2, a4);
  int v9 = *(_DWORD *)(v5 + 368);
  if ((v9 & 0x20000) == 0)
  {
LABEL_54:
    if ((v9 & 0x40000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_123;
  }
LABEL_122:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x32, (int)a2, *(double *)(v5 + 328), a3);
  int v9 = *(_DWORD *)(v5 + 368);
  if ((v9 & 0x40000) == 0)
  {
LABEL_55:
    if ((v9 & 0x80000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_124;
  }
LABEL_123:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x33, (int)a2, *(double *)(v5 + 336), a3);
  int v9 = *(_DWORD *)(v5 + 368);
  if ((v9 & 0x80000) == 0)
  {
LABEL_56:
    if ((v9 & 0x100000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_125;
  }
LABEL_124:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x34, *(_DWORD *)(v5 + 344), (int)a2, a4);
  int v9 = *(_DWORD *)(v5 + 368);
  if ((v9 & 0x100000) == 0)
  {
LABEL_57:
    if ((v9 & 0x200000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_126;
  }
LABEL_125:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x35, *(unsigned __int8 *)(v5 + 278), (BOOL)a2, a4);
  int v9 = *(_DWORD *)(v5 + 368);
  if ((v9 & 0x200000) == 0)
  {
LABEL_58:
    if ((v9 & 0x400000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_127;
  }
LABEL_126:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x36, *(_DWORD *)(v5 + 348), (int)a2, a4);
  int v9 = *(_DWORD *)(v5 + 368);
  if ((v9 & 0x400000) == 0)
  {
LABEL_59:
    if ((v9 & 0x800000) == 0) {
      goto LABEL_60;
    }
LABEL_128:
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x38, *(unsigned __int8 *)(v5 + 279), (BOOL)a2, a4);
    if ((*(_DWORD *)(v5 + 368) & 0x1000000) == 0) {
      return result;
    }
    goto LABEL_129;
  }
LABEL_127:
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x37, *(_DWORD *)(v5 + 352), (int)a2, a4);
  int v9 = *(_DWORD *)(v5 + 368);
  if ((v9 & 0x800000) != 0) {
    goto LABEL_128;
  }
LABEL_60:
  if ((v9 & 0x1000000) == 0) {
    return result;
  }
LABEL_129:
  int v16 = *(unsigned __int8 *)(v5 + 356);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x39, v16, (BOOL)a2, a4);
}

uint64_t sub_1000C2D80(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 28);
  if (v5)
  {
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    int v5 = *(_DWORD *)(v4 + 28);
  }
  if ((v5 & 2) != 0)
  {
    double v6 = *(double *)(v4 + 16);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, v6, a3);
  }
  return result;
}

uint64_t sub_1000C2DEC(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 40);
  if (v6)
  {
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    int v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v5 + 24), a3);
      if ((*(_DWORD *)(v5 + 40) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 16), a3);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return result;
  }
LABEL_9:
  int v7 = *(_DWORD *)(v5 + 32);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, a2, a4);
}

uint64_t sub_1000C2E94(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 28);
  if (v5)
  {
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    int v5 = *(_DWORD *)(v4 + 28);
  }
  if ((v5 & 2) != 0)
  {
    double v6 = *(double *)(v4 + 16);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, v6, a3);
  }
  return result;
}

uint64_t sub_1000C2F00(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 32);
  if (v6)
  {
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    int v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 24), a2, a4);
      if ((*(_DWORD *)(v5 + 32) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 16), a3);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return result;
  }
LABEL_9:
  int v7 = *(unsigned __int8 *)(v5 + 25);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, a2, a4);
}

uint64_t sub_1000C2FA8(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 44);
  if (v5)
  {
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    int v5 = *(_DWORD *)(v4 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v4 + 24), a3);
      if ((*(_DWORD *)(v4 + 44) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v4 + 16), a3);
  int v5 = *(_DWORD *)(v4 + 44);
  if ((v5 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v5 & 8) == 0) {
    return result;
  }
LABEL_9:
  double v6 = *(double *)(v4 + 32);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, a2, v6, a3);
}

uint64_t sub_1000C3050(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 72);
  if (v6)
  {
    uint64_t v9 = *(void *)(result + 8);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_10248AE48 + 8);
    }
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v9, a2, a4);
    int v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 16), (BOOL)a2, a4);
  if ((*(_DWORD *)(v5 + 72) & 4) != 0) {
LABEL_4:
  }
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 20), (int)a2, a4);
LABEL_5:
  if (*(int *)(v5 + 32) >= 1)
  {
    uint64_t v7 = 0;
    do
      double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(void *)(*(void *)(v5 + 24) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 32));
  }
  int v8 = *(_DWORD *)(v5 + 72);
  if ((v8 & 0x10) == 0)
  {
    if ((v8 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_18:
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    if ((*(_DWORD *)(v5 + 72) & 0x40) == 0) {
      return result;
    }
    goto LABEL_19;
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 64), (int)a2, a4);
  int v8 = *(_DWORD *)(v5 + 72);
  if ((v8 & 0x20) != 0) {
    goto LABEL_18;
  }
LABEL_10:
  if ((v8 & 0x40) == 0) {
    return result;
  }
LABEL_19:
  uint64_t v10 = *(void *)(v5 + 56);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_10248AE48 + 56);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v10, a2, a4);
}

uint64_t sub_1000C3190(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AE38 + 16);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_1000C322C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 36);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_102489ED8 + 8);
    }
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_10:
      double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(double *)(v5 + 16), a3);
      if ((*(_DWORD *)(v5 + 36) & 8) == 0) {
        return result;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 24), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return result;
  }
LABEL_11:
  int v8 = *(_DWORD *)(v5 + 28);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v8, (int)a2, a4);
}

id sub_1000C32E4(uint64_t a1, int a2, void *a3)
{
  id result = sub_1000EB27C(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1000C3334(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 48), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F8060);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLConfigAsset::onTelephonyNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F8060);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLConfigAsset::onTelephonyNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1000F3E68(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1000C34F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C3510(uint64_t a1, int *a2, CFDictionaryRef *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 792), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CB2A8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssController::onTelephonyNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CB2A8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssController::onTelephonyNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1000C36EC((void *)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1000C36CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C36EC(void *a1, uint64_t a2, int *a3, CFDictionaryRef *a4)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022CB788);
  }
  uint64_t v7 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v8 = (const __CFString *)sub_1000FA17C(a3);
    sub_1000FECE0(v8, (uint64_t)__p);
    uint64_t v9 = v14 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 68289282;
    int v16 = 0;
    __int16 v17 = 2082;
    __int16 v18 = "";
    __int16 v19 = 2082;
    uint64_t v20 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"received CT notification\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  (*(void (**)(void, int *, CFDictionaryRef *))(*(void *)*a1 + 304))(*a1, a3, a4);
  uint64_t v10 = (float32x2_t *)a1[147];
  if (v10) {
    sub_1000F7F88(v10, a3, a4);
  }
  uint64_t v11 = a1[154];
  if (v11) {
    sub_1000C3908(v11, a3);
  }
  uint64_t v12 = a1[148];
  if (v12) {
    sub_1000C3C30(v12, a3, a4);
  }
}

uint64_t sub_1000C3894(uint64_t a1, int *a2, const __CFDictionary **a3)
{
  int v6 = *(unsigned char **)(a1 + 1672);
  if (v6) {
    sub_101958C64(v6, a2, a3);
  }
  uint64_t result = *(void *)(a1 + 3192);
  if (result)
  {
    return sub_1000FC584(result, a2, a3);
  }
  return result;
}

void sub_1000C3908(uint64_t a1, int *a2)
{
  uint64_t v4 = (const void *)sub_1000FA17C(a2);
  if (CFEqual(v4, @"kAtLeastOneVoiceCallInProgress") && !*(unsigned char *)(a1 + 53))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FA0E8);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "L5Context,kAtLeastOneVoiceCallInProgress", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FA0E8);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssL5Context::feedTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    *(unsigned char *)(a1 + 53) = 1;
    goto LABEL_17;
  }
  uint64_t v5 = (const void *)sub_1000FA17C(a2);
  if (CFEqual(v5, @"kNoVoiceCallInProgress") && *(unsigned char *)(a1 + 53))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FA0E8);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "L5Context,kNoVoiceCallInProgress", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FA0E8);
      }
      CFStringRef v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssL5Context::feedTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    *(unsigned char *)(a1 + 53) = 0;
LABEL_17:
    sub_100E12E74(a1);
  }
}

void sub_1000C3C30(uint64_t a1, int *a2, CFDictionaryRef *a3)
{
  if (*a3
    || (int v6 = (const void *)sub_1000FA17C(a2), CFEqual(@"kCLTelephonyServiceConnectedNotification", v6))
    || (uint64_t v7 = (const void *)sub_1000FA17C(a2), CFEqual(@"kCLTelephonyServiceDisconnectedNotification", v7))
    || (CFStringRef v8 = (const void *)sub_1000FA17C(a2), CFEqual(@"kCLTelephonyServiceResetNotification", v8))
    || (uint64_t v9 = (const void *)sub_1000FA17C(a2), CFEqual(@"kCallStatusChangeNotification", v9))
    || (uint64_t v10 = (const void *)sub_1000FA17C(a2), CFEqual(@"kAtLeastOneVoiceCallInProgress", v10))
    || (uint64_t v11 = (const void *)sub_1000FA17C(a2), CFEqual(@"kNoVoiceCallInProgress", v11)))
  {
    uint64_t v12 = (const void *)sub_1000FA17C(a2);
    if (CFEqual(@"kUplinkFreqBwNotification", v12))
    {
      if (*a3)
      {
        sub_10013FA80((int)v52, *a3);
        LODWORD(v50) = -1082130432;
        LODWORD(v61) = -1082130432;
        BOOL v49 = 0;
        int v13 = sub_1000D29FC((uint64_t)v52, @"kUplinkFreqBwValid", &v49);
        sub_1004D123C((uint64_t)v52, @"kUplinkFreqKey", (float *)&v50);
        int v15 = v14;
        sub_1004D123C((uint64_t)v52, @"kUplinkBwKey", (float *)&v61);
        if ((v13 & v15 & v16) != 1 || !v49)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102343F68);
          }
          __int16 v18 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#warning,#gnssawd,Cellular-AWD,kUplinkFreqBwNotification,error fetching cellular bandwidth and frequency", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102343F68);
            }
            LOWORD(v48[0]) = 0;
            __int16 v19 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v19);
            if (v19 != (char *)buf) {
              free(v19);
            }
          }
        }
        else
        {
          *(float32x2_t *)(a1 + 2524) = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(v61, v50)), (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL)));
          sub_1000C7F88(buf);
          LOBYTE(v48[0]) = 0;
          int v32 = sub_1000D2988(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v48);
          if (LOBYTE(v48[0])) {
            int v33 = v32;
          }
          else {
            int v33 = 0;
          }
          if (*(void *)v56) {
            sub_1000DB0A0(*(std::__shared_weak_count **)v56);
          }
          if (v33)
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102343F68);
            }
            uint64_t v34 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
            {
              double v35 = *(float *)(a1 + 2524);
              double v36 = *(float *)(a1 + 2528);
              *(_DWORD *)buf = 68289538;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)uint64_t v56 = 2082;
              *(void *)&v56[2] = "";
              __int16 v57 = 2050;
              double v58 = v35;
              __int16 v59 = 2050;
              double v60 = v36;
              _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnssawd,Cellular-AWD,kUplinkFreqBwNotification\", \"freq(MHz)\":\"%{public}f\", \"bw(MHz)\":\"%{public}f\"}", buf, 0x26u);
            }
          }
          *(_DWORD *)(a1 + 2360) = *(_DWORD *)(a1 + 2352);
        }
        sub_10013F3C4(v52);
        return;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      uint64_t v31 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "#warning,#gnssawd,Cellular-AWD,kUplinkFreqBwNotification,data is nil", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1)
        {
LABEL_84:
          *(_WORD *)uint64_t v52 = 0;
          uint64_t v38 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v38);
          if (v38 == (char *)buf) {
            return;
          }
LABEL_85:
          free(v38);
          return;
        }
LABEL_123:
        dispatch_once(&qword_1024193D0, &stru_102343F68);
        goto LABEL_84;
      }
    }
    else
    {
      uint64_t v20 = (const void *)sub_1000FA17C(a2);
      if (!CFEqual(@"kCellInfoNotification", v20)) {
        return;
      }
      if (*a3)
      {
        *(_OWORD *)uint64_t v52 = 0u;
        long long v53 = 0u;
        int v54 = 1065353216;
        sub_1000C6E88(a1 + 2616);
        if (sub_1000FF5A4(*a3, (uint64_t)v52))
        {
          long long v50 = 0uLL;
          uint64_t v51 = 0;
          *(_DWORD *)buf = 0;
          uint64_t v61 = (uint64_t)buf;
          if (*((void *)sub_1000FF948((uint64_t)v52, (int *)buf, (uint64_t)&unk_101D0B290, (_DWORD **)&v61) + 3))
          {
            sub_1000C7F88(buf);
            LOBYTE(v61) = 0;
            int v21 = sub_1000D2988(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)&v61);
            if ((_BYTE)v61) {
              int v22 = v21;
            }
            else {
              int v22 = 0;
            }
            if (*(void *)v56) {
              sub_1000DB0A0(*(std::__shared_weak_count **)v56);
            }
            if (v22)
            {
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_102343F68);
              }
              uint64_t v23 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = 0;
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,kCellInfoNotification,serving cell found for sim,%d", buf, 8u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_102343F68);
                }
                uint64_t v61 = 67109120;
                uint64_t v46 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v46);
                if (v46 != (char *)buf) {
                  free(v46);
                }
              }
            }
            sub_10010D904(0, (uint64_t)v52, (uint64_t *)&v50);
            sub_1000FA8B8((uint64_t *)&v50, buf);
            v48[0] = 0;
            uint64_t v61 = (uint64_t)v48;
            uint64_t v24 = sub_1000C7FFC(a1 + 2616, v48, (uint64_t)&unk_101D0B290, (_DWORD **)&v61);
            sub_1000F399C((uint64_t)(v24 + 3), (uint64_t)buf);
            sub_1000F3950((uint64_t)buf);
          }
          uint64_t v25 = *((void *)&v50 + 1);
          uint64_t v26 = v50;
          while (v25 != v26)
          {
            v25 -= 696;
            sub_1000FA860((uint64_t)&v51, v25);
          }
          *((void *)&v50 + 1) = v26;
          if (sub_1000FFBA8())
          {
            v48[0] = 1;
            uint64_t v61 = (uint64_t)v48;
            if (*((void *)sub_1000FF948((uint64_t)v52, v48, (uint64_t)&unk_101D0B290, (_DWORD **)&v61) + 3))
            {
              sub_1000C7F88(buf);
              LOBYTE(v61) = 0;
              int v27 = sub_1000D2988(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)&v61);
              if ((_BYTE)v61) {
                int v28 = v27;
              }
              else {
                int v28 = 0;
              }
              if (*(void *)v56) {
                sub_1000DB0A0(*(std::__shared_weak_count **)v56);
              }
              if (v28)
              {
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_102343F68);
                }
                uint64_t v29 = qword_1024193D8;
                if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 67109120;
                  *(_DWORD *)&uint8_t buf[4] = 1;
                  _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,kCellInfoNotification,serving cell found for sim,%d", buf, 8u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_102343F68);
                  }
                  uint64_t v61 = 0x104000100;
                  uint64_t v47 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v47);
                  if (v47 != (char *)buf) {
                    free(v47);
                  }
                }
              }
              sub_10010D904(1, (uint64_t)v52, (uint64_t *)&v50);
              sub_1000FA8B8((uint64_t *)&v50, buf);
              v48[0] = 1;
              uint64_t v61 = (uint64_t)v48;
              uint64_t v30 = sub_1000C7FFC(a1 + 2616, v48, (uint64_t)&unk_101D0B290, (_DWORD **)&v61);
              sub_1000F399C((uint64_t)(v30 + 3), (uint64_t)buf);
              sub_1000F3950((uint64_t)buf);
            }
          }
          if (*(void *)(a1 + 2640)) {
            sub_1000C6F24(a1);
          }
          *(void *)buf = &v50;
          sub_1000FA7C8((void ***)buf);
        }
        else
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102343F68);
          }
          int v39 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "#warning,#gnssawd,error fetching cell info", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102343F68);
            }
            LOWORD(v50) = 0;
            uint64_t v45 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v45);
            if (v45 != (char *)buf) {
              free(v45);
            }
          }
        }
        sub_1000FF568((uint64_t)v52);
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        uint64_t v37 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "#warning,#gnssawd,Cellular-AWD,kCellInfoNotification,data is nil", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 == -1) {
            goto LABEL_84;
          }
          goto LABEL_123;
        }
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    uint64_t v40 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      CFStringRef v41 = (const __CFString *)sub_1000FA17C(a2);
      sub_1000FECE0(v41, (uint64_t)buf);
      uint64_t v42 = (SBYTE3(v58) & 0x80u) == 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)uint64_t v52 = 136446210;
      *(void *)&v52[4] = v42;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "#warning,#gnssawd,dropping %{public}s,empty data", v52, 0xCu);
      if (SBYTE3(v58) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      CFStringRef v43 = (const __CFString *)sub_1000FA17C(a2);
      sub_1000FECE0(v43, (uint64_t)v52);
      if ((SBYTE7(v53) & 0x80u) == 0) {
        uint64_t v44 = v52;
      }
      else {
        uint64_t v44 = *(uint8_t **)v52;
      }
      LODWORD(v50) = 136446210;
      *(void *)((char *)&v50 + 4) = v44;
      uint64_t v38 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE7(v53) < 0) {
        operator delete(*(void **)v52);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v38);
      if (v38 != (char *)buf) {
        goto LABEL_85;
      }
    }
  }
}

void sub_1000C4AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  a23 = (void **)&a13;
  sub_1000FA7C8(&a23);
  sub_1000FF568((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_1000C4B84(uint64_t a1, int *a2, void **a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F9C48);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    CFStringRef v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLUnifiedCellLocationProvider::onTelephonyNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F9C48);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLUnifiedCellLocationProvider::onTelephonyNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1000F6214(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1000C4D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C4D60(int a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 24), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102324BA0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    CFStringRef v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHarvestControllerExternal::onTelephonyNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102324BA0);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHarvestControllerExternal::onTelephonyNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1000C4F4C(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1000C4F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C4F4C(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    int v5 = 0;
  }
  else
  {
    uint64_t v4 = sub_101AB413C();
  }
  sub_1000C4F80(v4, a2, a3, a4, v5);
}

void sub_1000C4F80(uint64_t a1, int a2, int *a3, uint64_t a4, int a5)
{
  uint64_t v10 = (const void *)sub_1000FA17C(a3);
  if (CFEqual(v10, kCTCallStatusChangeNotification))
  {
    char v14 = 0;
    if ((*(unsigned int (**)(void, char *))(**(void **)(a1 + 48) + 304))(*(void *)(a1 + 48), &v14)) {
      *(unsigned char *)(a1 + 972) = v14;
    }
  }
  sub_1000C52B4(a1);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1000C5920;
  v12[3] = &unk_1022BAA70;
  int v13 = a2;
  if (a5) {
    unsigned int v11 = 5;
  }
  else {
    unsigned int v11 = 4;
  }
  v12[4] = a3;
  v12[5] = a4;
  sub_1000C5414(a1, v11, (uint64_t)v12);
  sub_1000C509C(a1);
}

void sub_1000C509C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 973))
  {
    *(unsigned char *)(a1 + 973) = 0;
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    unint64_t v2 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      int v6 = 68289026;
      int v7 = 0;
      __int16 v8 = 2082;
      uint64_t v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#uploadTimer unlocked\"}", (uint8_t *)&v6, 0x12u);
    }
    if (*(unsigned char *)(a1 + 974))
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      double v3 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        int v6 = 68289026;
        int v7 = 0;
        __int16 v8 = 2082;
        uint64_t v9 = "";
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"cleaning dirty #uploadTimer times\"}", (uint8_t *)&v6, 0x12u);
      }
      double v4 = sub_10054C1A0(a1);
      sub_10054BD6C(a1, v4);
      *(unsigned char *)(a1 + 974) = 0;
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    int v5 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      int v6 = 68289026;
      int v7 = 0;
      __int16 v8 = 2082;
      uint64_t v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#uploadTimer already unlocked\"}", (uint8_t *)&v6, 0x12u);
    }
  }
}

void sub_1000C52B4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 973))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    uint64_t v1 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      int v3 = 68289026;
      int v4 = 0;
      __int16 v5 = 2082;
      int v6 = "";
      unint64_t v2 = "{\"msg%{public}.0s\":\"#uploadTimer already locked\"}";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, v2, (uint8_t *)&v3, 0x12u);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 973) = 1;
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    uint64_t v1 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      int v3 = 68289026;
      int v4 = 0;
      __int16 v5 = 2082;
      int v6 = "";
      unint64_t v2 = "{\"msg%{public}.0s\":\"#uploadTimer locked\"}";
      goto LABEL_10;
    }
  }
}

void sub_1000C5414(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v4 = *(void *)(a1 + 88) + 40 * a2 + 16;
  __int16 v5 = (uint64_t **)(a1 + 64);
  while (1)
  {
    uint64_t v4 = *(void *)v4;
    if (!v4) {
      break;
    }
    int v15 = (_DWORD *)(v4 + 16);
    int v6 = sub_1000C5658(v5, (int *)(v4 + 16), (uint64_t)&unk_101D0B290, &v15);
    sub_1000C553C((uint64_t *)&v12, (long long *)(v6 + 5));
  }
  int v7 = v12;
  for (uint64_t i = v13; v7 != i; v7 += 2)
  {
    uint64_t v10 = *v7;
    uint64_t v9 = (std::__shared_weak_count *)v7[1];
    unsigned int v11 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(a3 + 16))(a3, &v10);
    if (v11) {
      sub_1000DB0A0(v11);
    }
  }
  __int16 v16 = (void **)&v12;
  sub_1000C5954(&v16);
}

void sub_1000C550C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  a16 = (void **)&a11;
  sub_1000C5954(&a16);
  _Unwind_Resume(a1);
}

void **sub_1000C553C(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  int v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)sub_1000C571C((uint64_t)result, v13);
    int v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)int v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    sub_1000C5754(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = sub_1000C5898(v18);
  }
  else
  {
    *int v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1000C5644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000C5898((void **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_1000C5658(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  int v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x38uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    *((void *)v11 + 6) = 0;
    sub_1000EDF90(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void *sub_1000C571C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_1001D7FA0();
  }
  return operator new(16 * a2);
}

uint64_t sub_1000C5754(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000C57CC((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000C57CC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_1000C5860((uint64_t)v12);
  return v10;
}

uint64_t sub_1000C5860(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1002CFBC4(a1);
  }
  return a1;
}

void **sub_1000C5898(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1000C58CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      sub_1000DB0A0(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

uint64_t sub_1000C5920(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)*a2 + 40))(*a2, *(unsigned int *)(a1 + 48), *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_1000C5954(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1000C59A8((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void sub_1000C59A8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      sub_1000DB0A0(v4);
    }
  }
  a1[1] = v2;
}

void sub_1000C59F4(uint64_t a1, uint64_t a2, int *a3, id *a4)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102307DD0);
  }
  uint64_t v7 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v8 = (const __CFString *)sub_1000FA17C(a3);
    sub_1000FECE0(v8, (uint64_t)&__p);
    long long v9 = v57[13] >= 0 ? &__p : (void **)__p;
    int v10 = *(unsigned __int8 *)(a1 + 417);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(void *)&buf[20] = 1;
    *(_WORD *)&unsigned char buf[28] = 2082;
    *(void *)&buf[30] = v9;
    __int16 v61 = 1026;
    LODWORD(v62) = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#msim onTelephonyNotification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"notification\":%{public, location:escape_only}s, \"harvestingDisabledDueToInvalidInUseSubsriptionsCount\":%{public}hhd}", buf, 0x2Cu);
    if ((v57[13] & 0x80000000) != 0) {
      operator delete(__p);
    }
  }
  sub_1000C6AEC(a1, a3, a4);
  sub_1000C6D08(a1, a3, a4);
  if (!*(unsigned char *)(a1 + 417))
  {
    unint64_t v11 = (_OWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 368) + 56))(*(void *)(a1 + 368));
    ++*(_DWORD *)(a1 + 204);
    char v12 = (*(uint64_t (**)(void, _OWORD *))(**(void **)(a1 + 56) + 184))(*(void *)(a1 + 56), v11);
    char v13 = (const void *)sub_1000FA17C(a3);
    if (!CFEqual(v13, @"kCellInfoNotification"))
    {
      uint64_t v16 = (const void *)sub_1000FA17C(a3);
      if (CFEqual(v16, @"kServingCellChangedNotification")
        || (long long v17 = (const void *)sub_1000FA17C(a3), CFEqual(v17, @"kServingNetworkChangedNotification")))
      {
        if ([*a4 objectForKey:@"kSlotOne"])
        {
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_102307DD0);
          }
          __int16 v18 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#msim CellMonitorRefresh requested for SimOne", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419560 != -1) {
              dispatch_once(&qword_102419560, &stru_102307DD0);
            }
            LOWORD(__p) = 0;
            uint64_t v46 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSubHarvesterCell::onTelephonyHarvestNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v46);
            if (v46 != buf) {
              free(v46);
            }
          }
          *(unsigned char *)(a1 + 488) = 1;
          (*(void (**)(void, void))(**(void **)(a1 + 352) + 144))(*(void *)(a1 + 352), 0);
        }
        else if ([*a4 objectForKey:@"kSlotTwo"])
        {
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_102307DD0);
          }
          uint64_t v23 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "#msim CellMonitorRefresh requested for SimTwo", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419560 != -1) {
              dispatch_once(&qword_102419560, &stru_102307DD0);
            }
            LOWORD(__p) = 0;
            uint64_t v47 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSubHarvesterCell::onTelephonyHarvestNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v47);
            if (v47 != buf) {
              free(v47);
            }
          }
          *(unsigned char *)(a1 + 512) = 1;
          (*(void (**)(void, uint64_t))(**(void **)(a1 + 352) + 144))(*(void *)(a1 + 352), 1);
        }
        else
        {
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_102307DD0);
          }
          double v36 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
          {
            CFStringRef v37 = (const __CFString *)sub_1000FA17C(a3);
            sub_1000FECE0(v37, (uint64_t)&__p);
            if (v57[13] >= 0) {
              p_p = &__p;
            }
            else {
              p_p = __p;
            }
            id v39 = *a4;
            *(_DWORD *)buf = 68289794;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            *(_WORD *)&buf[18] = 2050;
            *(void *)&buf[20] = 1;
            *(_WORD *)&unsigned char buf[28] = 2082;
            *(void *)&buf[30] = p_p;
            __int16 v61 = 2114;
            id v62 = v39;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#msim onTelephonyNotification received notification for invalid slot\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"notification\":%{public, location:escape_only}s, \"Data\":%{public, location:escape_only}@}", buf, 0x30u);
            if ((v57[13] & 0x80000000) != 0) {
              operator delete(__p);
            }
            if (qword_102419560 != -1) {
              dispatch_once(&qword_102419560, &stru_102307DD0);
            }
          }
          uint64_t v40 = qword_102419568;
          if (os_signpost_enabled((os_log_t)qword_102419568))
          {
            CFStringRef v41 = (const __CFString *)sub_1000FA17C(a3);
            sub_1000FECE0(v41, (uint64_t)&__p);
            uint64_t v42 = v57[13] >= 0 ? &__p : (void **)__p;
            id v43 = *a4;
            *(_DWORD *)buf = 68289794;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            *(_WORD *)&buf[18] = 2050;
            *(void *)&buf[20] = 1;
            *(_WORD *)&unsigned char buf[28] = 2082;
            *(void *)&buf[30] = v42;
            __int16 v61 = 2114;
            id v62 = v43;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v40, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#msim onTelephonyNotification received notification for invalid slot", "{\"msg%{public}.0s\":\"#msim onTelephonyNotification received notification for invalid slot\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"notification\":%{public, location:escape_only}s, \"Data\":%{public, location:escape_only}@}", buf, 0x30u);
            if ((v57[13] & 0x80000000) != 0) {
              operator delete(__p);
            }
          }
        }
      }
      else
      {
        uint64_t v24 = (const void *)sub_1000FA17C(a3);
        if (CFEqual(v24, @"kTimingAdvanceInfoNotification"))
        {
          if (*a4)
          {
            sub_10013FA80((int)v54, (CFDictionaryRef)*a4);
            uint64_t v25 = (int *)(a1 + 528);
            sub_10013E418((uint64_t)v54, @"kTimingAdvanceLTEKey", (_DWORD *)(a1 + 528));
            uint64_t v26 = (int *)(a1 + 532);
            sub_10013E418((uint64_t)v54, @"kTimingAdvanceNRKey", (_DWORD *)(a1 + 532));
            int v27 = (uint64_t *)(a1 + 536);
            sub_1000A6A10((uint64_t)v54, @"kTimingAdvanceTimeStampKey", (void *)(a1 + 536));
            int v28 = (unsigned __int8 *)(a1 + 544);
            sub_1000D29FC((uint64_t)v54, @"kTimingAdvanceisLTEKey", (BOOL *)(a1 + 544));
            uint64_t v29 = (BOOL *)(a1 + 545);
            sub_1000D29FC((uint64_t)v54, @"kTimingAdvanceisNRKey", v29);
            if (qword_102419560 != -1) {
              dispatch_once(&qword_102419560, &stru_102307DD0);
            }
            uint64_t v30 = qword_102419568;
            if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
            {
              int v31 = *v25;
              int v32 = *v26;
              uint64_t v33 = *v27;
              int v34 = *v28;
              BOOL v35 = *v29;
              *(_DWORD *)buf = 67241216;
              *(_DWORD *)&uint8_t buf[4] = v31;
              *(_WORD *)&uint8_t buf[8] = 1026;
              *(_DWORD *)&buf[10] = v32;
              *(_WORD *)&unsigned char buf[14] = 2050;
              *(void *)&buf[16] = v33;
              *(_WORD *)&unsigned char buf[24] = 1026;
              *(_DWORD *)&buf[26] = v34;
              *(_WORD *)&buf[30] = 1026;
              *(_DWORD *)&uint8_t buf[32] = v35;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#timingadvance,lte_ta_val,%{public}d,nr_ta_val,%{public}d,taQuerytimestamp,%{public}f,istaLte,%{public}d,istaNr,%{public}d", buf, 0x24u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419560 != -1) {
                dispatch_once(&qword_102419560, &stru_102307DD0);
              }
              int v48 = *v25;
              int v49 = *v26;
              uint64_t v50 = *v27;
              int v51 = *v28;
              BOOL v52 = *v29;
              LODWORD(__p) = 67241216;
              HIDWORD(__p) = v48;
              __int16 v56 = 1026;
              *(_DWORD *)__int16 v57 = v49;
              *(_WORD *)&v57[4] = 2050;
              *(void *)&v57[6] = v50;
              *(_WORD *)&v57[14] = 1026;
              *(_DWORD *)&v57[16] = v51;
              __int16 v58 = 1026;
              BOOL v59 = v52;
              long long v53 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSubHarvesterCell::onTelephonyHarvestNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v53);
              if (v53 != buf) {
                free(v53);
              }
            }
            sub_10013F3C4(v54);
          }
          else
          {
            if (qword_102419560 != -1) {
              dispatch_once(&qword_102419560, &stru_102307DD0);
            }
            uint64_t v44 = qword_102419568;
            if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "#timingadvance data is empty", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419560 != -1) {
                dispatch_once(&qword_102419560, &stru_102307DD0);
              }
              LOWORD(__p) = 0;
              uint64_t v45 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSubHarvesterCell::onTelephonyHarvestNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v45);
              if (v45 != buf) {
                free(v45);
              }
            }
          }
        }
      }
      return;
    }
    sub_1000CE770(a1, a4);
    if ((v12 & 1) == 0)
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102307DD0);
      }
      uint64_t v19 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2050;
        *(void *)&buf[20] = 1;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"onTelephonyNotification gps location not eligible - skip harvetsing\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
      }
      return;
    }
    memset(buf, 0, 32);
    *(_DWORD *)&uint8_t buf[32] = 1065353216;
    sub_1000FF5A4(*a4, (uint64_t)buf);
    v54[0] = 0;
    __p = v54;
    id v14 = [*((id *)sub_1000FF948((uint64_t)buf, v54, (uint64_t)&unk_101D0B290, (_DWORD **)&__p) + 3) count];
    if (sub_1000FFBA8())
    {
      v54[0] = 1;
      __p = v54;
      BOOL v15 = [*((id *)sub_1000FF948((uint64_t)buf, v54, (uint64_t)&unk_101D0B290, (_DWORD **)&__p) + 3) count] != 0;
      if (!v14) {
        goto LABEL_36;
      }
    }
    else
    {
      BOOL v15 = 0;
      if (!v14) {
        goto LABEL_36;
      }
    }
    if (*(unsigned char *)(a1 + 488))
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102307DD0);
      }
      uint64_t v20 = (unsigned char *)(a1 + 488);
      int v21 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
      {
        __p = (void *)68289282;
        __int16 v56 = 2082;
        *(void *)__int16 v57 = "";
        *(_WORD *)&v57[8] = 2050;
        *(void *)&v57[10] = 1;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#msim pending cellMonitorRefreshRequest found for SimOne\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&__p, 0x1Cu);
      }
      sub_100FA4690(a1, v11, 0);
      goto LABEL_43;
    }
LABEL_36:
    if (!v15 || !*(unsigned char *)(a1 + 512)) {
      goto LABEL_44;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307DD0);
    }
    uint64_t v20 = (unsigned char *)(a1 + 512);
    int v22 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      __p = (void *)68289282;
      __int16 v56 = 2082;
      *(void *)__int16 v57 = "";
      *(_WORD *)&v57[8] = 2050;
      *(void *)&v57[10] = 1;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#msim pending cellMonitorRefreshRequest found for SimTwo\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&__p, 0x1Cu);
    }
    sub_100FA4690(a1, v11, 1);
LABEL_43:
    unsigned char *v20 = 0;
LABEL_44:
    sub_1000FF568((uint64_t)buf);
  }
}

void sub_1000C675C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

BOOL sub_1000C6798(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 1072))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    uint64_t v2 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      int v11 = 0;
      __int16 v12 = 2082;
      char v13 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning: faking harvest eligibility\"}", buf, 0x12u);
    }
    return 1;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1))
  {
    if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 168) + 48))(*(void *)(a1 + 168), a2)) {
      return 1;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    CFStringRef v8 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Pos harvesting not eligible as gps harvetsing is ineligible", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      long long v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLHarvestController::isPosHarvestingEligible(const CLDaemonLocation &) const", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
      return 0;
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    uint64_t v6 = qword_102419568;
    BOOL result = os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO);
    if (result)
    {
      double v7 = (*(double (**)(uint64_t))(*(void *)a1 + 64))(a1) - *(double *)(a2 + 76);
      *(_DWORD *)buf = 68289283;
      int v11 = 0;
      __int16 v12 = 2082;
      char v13 = "";
      __int16 v14 = 2049;
      double v15 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"not harvesting, harvesting now allowed\", \"age_s\":\"%{private}.09f\"}", buf, 0x1Cu);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000C6AE4(uint64_t a1)
{
  return a1 + 92;
}

void sub_1000C6AEC(uint64_t a1, int *a2, id *a3)
{
  uint64_t v5 = (const void *)sub_1000FA17C(a2);
  if (CFEqual(v5, @"kSubscriptionsInUseNotification"))
  {
    id v6 = [*a3 valueForKey:@"kSubscriptionsInUseKey"];
    id v7 = [v6 count];
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307DD0);
    }
    CFStringRef v8 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 424);
      int v12 = 68290050;
      int v13 = 0;
      __int16 v14 = 2082;
      double v15 = "";
      __int16 v16 = 2050;
      uint64_t v17 = 1;
      __int16 v18 = 2114;
      uint64_t v19 = v9;
      __int16 v20 = 2114;
      id v21 = v6;
      __int16 v22 = 1026;
      BOOL v23 = v6 == 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#msim updated InUseSubscriptions\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"OldInUseSubscriptions\":%{public, location:escape_only}@, \"NewInUseSubscriptions\":%{public, location:escape_only}@, \"hasError\":%{public}hhd}", (uint8_t *)&v12, 0x36u);
    }

    *(void *)(a1 + 424) = v6;
    if (v6) {
      BOOL v10 = (unint64_t)v7 >= 3;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102307DD0);
      }
      int v11 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = 68289282;
        int v13 = 0;
        __int16 v14 = 2082;
        double v15 = "";
        __int16 v16 = 2050;
        uint64_t v17 = 1;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#msim Cell-Harvesting does not support more than 2 in-use subscriptions. Harvester disabled\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v12, 0x1Cu);
      }
      *(unsigned char *)(a1 + 417) = 1;
    }
  }
}

void sub_1000C6D08(uint64_t a1, int *a2, id *a3)
{
  uint64_t v5 = (const void *)sub_1000FA17C(a2);
  if (CFEqual(v5, @"kSimInfoChangedNotification"))
  {
    id v6 = [*a3 objectForKey:@"kSlotOne"];
    id v7 = [*a3 objectForKey:@"kSlotTwo"];
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307DD0);
    }
    CFStringRef v8 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      v9[0] = 68289795;
      v9[1] = 0;
      __int16 v10 = 2082;
      int v11 = "";
      __int16 v12 = 2050;
      uint64_t v13 = 1;
      __int16 v14 = 2113;
      id v15 = v6;
      __int16 v16 = 2113;
      id v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#msim update sim info\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"SimOneInfo\":%{private, location:escape_only}@, \"SimTwoInfo\":%{private, location:escape_only}@}", (uint8_t *)v9, 0x30u);
    }
    if (v6)
    {

      *(void *)(a1 + 480) = v6;
    }
    if (v7)
    {

      *(void *)(a1 + 504) = v7;
    }
  }
}

void sub_1000C6E88(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_1000C6EE0(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_1000C6EE0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      sub_1000F3950((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_1000C6F24(uint64_t a1)
{
  sub_1000C7F88(buf);
  v52[0] = 0;
  int v2 = sub_1000D2988(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", v52);
  if (v52[0]) {
    int v3 = v2;
  }
  else {
    int v3 = 0;
  }
  if (v71) {
    sub_1000DB0A0(v71);
  }
  if (v3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,processServingCell", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      *(_WORD *)BOOL v52 = 0;
      uint64_t v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::processServingCell()", "%s\n", v38);
      if (v38 != (char *)buf) {
        free(v38);
      }
    }
  }
  v52[0] = 0;
  char v54 = 0;
  v55[0] = 0;
  *(void *)buf = v55;
  if (*((unsigned char *)sub_1000C7FFC(a1 + 2616, v55, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 720))
  {
    v55[0] = 0;
    *(void *)buf = v55;
    uint64_t v5 = sub_1000C7FFC(a1 + 2616, v55, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1000C8260((uint64_t)v52, (uint64_t)(v5 + 3));
LABEL_16:
    if (!v54) {
      return sub_1000F3950((uint64_t)v52);
    }
    if (v53 < 3) {
      goto LABEL_20;
    }
    if (v53 == 9)
    {
      sub_1000C7F88(buf);
      LOBYTE(v55[0]) = 0;
      int v12 = sub_1000D2988(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v55);
      if (LOBYTE(v55[0])) {
        int v13 = v12;
      }
      else {
        int v13 = 0;
      }
      if (v71) {
        sub_1000DB0A0(v71);
      }
      if (v13)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        __int16 v14 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,kCellInfoNotification SCDMA", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102343F68);
          }
          LOWORD(v55[0]) = 0;
          int v48 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::processServingCell()", "%s\n", v48);
          if (v48 != (char *)buf) {
            free(v48);
          }
        }
      }
      *(_DWORD *)(a1 + 2500) = *(_DWORD *)sub_1006E744C((uint64_t)v52);
      *(_DWORD *)(a1 + 2504) = *(_DWORD *)(sub_1006E744C((uint64_t)v52) + 4);
      goto LABEL_92;
    }
    if (v53 == 7)
    {
LABEL_20:
      sub_1000C7F88(buf);
      LOBYTE(v55[0]) = 0;
      int v7 = sub_1000D2988(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v55);
      if (LOBYTE(v55[0])) {
        int v8 = v7;
      }
      else {
        int v8 = 0;
      }
      if (v71) {
        sub_1000DB0A0(v71);
      }
      if (v8)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        uint64_t v9 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,kCellInfoNotification GSM", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102343F68);
          }
          LOWORD(v55[0]) = 0;
          uint64_t v47 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::processServingCell()", "%s\n", v47);
          if (v47 != (char *)buf) {
            free(v47);
          }
        }
      }
      *(_DWORD *)(a1 + 2500) = *(_DWORD *)sub_1006E6690((uint64_t)v52);
      *(_DWORD *)(a1 + 2504) = *(_DWORD *)(sub_1006E6690((uint64_t)v52) + 4);
      sub_1000C843C((id *)a1);
    }
    else
    {
      if (v53 - 3 > 2)
      {
        if (v53 == 10)
        {
          sub_1000C7F88(buf);
          LOBYTE(v55[0]) = 0;
          int v21 = sub_1000D2988(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v55);
          if (LOBYTE(v55[0])) {
            int v22 = v21;
          }
          else {
            int v22 = 0;
          }
          if (v71) {
            sub_1000DB0A0(v71);
          }
          if (v22)
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102343F68);
            }
            BOOL v23 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,kCellInfoNotification 5G", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_102343F68);
              }
              LOWORD(v55[0]) = 0;
              int v51 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::processServingCell()", "%s\n", v51);
              if (v51 != (char *)buf) {
                free(v51);
              }
            }
          }
          *(_DWORD *)(a1 + 2500) = *(_DWORD *)sub_1006E8278((uint64_t)v52);
          *(_DWORD *)(a1 + 2504) = *(_DWORD *)(sub_1006E8278((uint64_t)v52) + 4);
          *(_DWORD *)(a1 + 2516) = *(_DWORD *)(sub_1006E8278((uint64_t)v52) + 32);
          sub_1000C843C((id *)a1);
        }
        else
        {
          if (v53 != 6)
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102343F68);
            }
            double v36 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "#warning,#gnssawd,Cellular-AWD,Unhandled serving cell", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_102343F68);
              }
              LOWORD(v55[0]) = 0;
              CFStringRef v37 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::processServingCell()", "%s\n", v37);
              if (v37 != (char *)buf) {
                free(v37);
              }
            }
            goto LABEL_92;
          }
          sub_1000C7F88(buf);
          LOBYTE(v55[0]) = 0;
          int v18 = sub_1000D2988(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v55);
          if (LOBYTE(v55[0])) {
            int v19 = v18;
          }
          else {
            int v19 = 0;
          }
          if (v71) {
            sub_1000DB0A0(v71);
          }
          if (v19)
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102343F68);
            }
            __int16 v20 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,kCellInfoNotification LTE", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_102343F68);
              }
              LOWORD(v55[0]) = 0;
              uint64_t v50 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::processServingCell()", "%s\n", v50);
              if (v50 != (char *)buf) {
                free(v50);
              }
            }
          }
          *(_DWORD *)(a1 + 2500) = *(_DWORD *)sub_100117098((uint64_t)v52);
          *(_DWORD *)(a1 + 2504) = *(_DWORD *)(sub_100117098((uint64_t)v52) + 4);
          *(_DWORD *)(a1 + 2516) = *(_DWORD *)(sub_100117098((uint64_t)v52) + 24);
          sub_1000C843C((id *)a1);
        }
      }
      else
      {
        sub_1000C7F88(buf);
        LOBYTE(v55[0]) = 0;
        int v15 = sub_1000D2988(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v55);
        if (LOBYTE(v55[0])) {
          int v16 = v15;
        }
        else {
          int v16 = 0;
        }
        if (v71) {
          sub_1000DB0A0(v71);
        }
        if (v16)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102343F68);
          }
          id v17 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,kCellInfoNotification CDMA", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102343F68);
            }
            LOWORD(v55[0]) = 0;
            int v49 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::processServingCell()", "%s\n", v49);
            if (v49 != (char *)buf) {
              free(v49);
            }
          }
        }
        *(_DWORD *)(a1 + 2508) = *(_DWORD *)(sub_1006E58D4((uint64_t)v52) + 32);
        *(_DWORD *)(a1 + 2512) = *(_DWORD *)(sub_1006E58D4((uint64_t)v52) + 36);
        *(_DWORD *)(a1 + 2516) = *(_DWORD *)(sub_1006E58D4((uint64_t)v52) + 48);
      }
      *(_DWORD *)(a1 + 2356) = *(_DWORD *)(a1 + 2352);
    }
LABEL_92:
    *(_DWORD *)(a1 + 2520) = v53;
    sub_1000C7F88(buf);
    LOBYTE(v55[0]) = 0;
    int v24 = sub_1000D2988(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v55);
    if (LOBYTE(v55[0])) {
      int v25 = v24;
    }
    else {
      int v25 = 0;
    }
    if (v71) {
      sub_1000DB0A0(v71);
    }
    if (!v25) {
      return sub_1000F3950((uint64_t)v52);
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    uint64_t v26 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v27 = *(_DWORD *)(a1 + 2500);
      int v28 = *(_DWORD *)(a1 + 2504);
      int v29 = *(_DWORD *)(a1 + 2508);
      int v30 = *(_DWORD *)(a1 + 2512);
      int v31 = *(_DWORD *)(a1 + 2516);
      int v32 = *(_DWORD *)(a1 + 2520);
      int v33 = *(_DWORD *)(a1 + 2536);
      int v34 = *(_DWORD *)(a1 + 2532);
      *(_DWORD *)buf = 67110912;
      *(_DWORD *)&uint8_t buf[4] = v27;
      LOWORD(v71) = 1024;
      *(_DWORD *)((char *)&v71 + 2) = v28;
      HIWORD(v71) = 1024;
      int v72 = v29;
      __int16 v73 = 1024;
      int v74 = v30;
      __int16 v75 = 1024;
      int v76 = v31;
      __int16 v77 = 1024;
      int v78 = v32;
      __int16 v79 = 1024;
      int v80 = v33;
      __int16 v81 = 1024;
      int v82 = v34;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,processServingCell,MCC,%d,MNC,%d,SID,%d,NID,%d,BandInfo,%d,RAT,%d,RSRP,%d,SNR,%d", buf, 0x32u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return sub_1000F3950((uint64_t)v52);
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    int v39 = *(_DWORD *)(a1 + 2500);
    int v40 = *(_DWORD *)(a1 + 2504);
    int v41 = *(_DWORD *)(a1 + 2508);
    int v42 = *(_DWORD *)(a1 + 2512);
    int v43 = *(_DWORD *)(a1 + 2516);
    int v44 = *(_DWORD *)(a1 + 2520);
    int v45 = *(_DWORD *)(a1 + 2536);
    int v46 = *(_DWORD *)(a1 + 2532);
    v55[0] = 67110912;
    v55[1] = v39;
    __int16 v56 = 1024;
    int v57 = v40;
    __int16 v58 = 1024;
    int v59 = v41;
    __int16 v60 = 1024;
    int v61 = v42;
    __int16 v62 = 1024;
    int v63 = v43;
    __int16 v64 = 1024;
    int v65 = v44;
    __int16 v66 = 1024;
    int v67 = v45;
    __int16 v68 = 1024;
    int v69 = v46;
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::processServingCell()", "%s\n", v11);
LABEL_120:
    if (v11 != (char *)buf) {
      free(v11);
    }
    return sub_1000F3950((uint64_t)v52);
  }
  v55[0] = 1;
  *(void *)buf = v55;
  if (*((unsigned char *)sub_1000C7FFC(a1 + 2616, v55, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 720))
  {
    v55[0] = 1;
    *(void *)buf = v55;
    id v6 = sub_1000C7FFC(a1 + 2616, v55, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1000C8260((uint64_t)v52, (uint64_t)(v6 + 3));
    goto LABEL_16;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343F68);
  }
  __int16 v10 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#warning,#gnssawd,Couldn't get current serving cell", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    LOWORD(v55[0]) = 0;
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::processServingCell()", "%s\n", v11);
    goto LABEL_120;
  }
  return sub_1000F3950((uint64_t)v52);
}

void sub_1000C7EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000F3950((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000C7F88(void *a1@<X8>)
{
  if (qword_102489F90 != -1) {
    dispatch_once_f(&qword_102489F90, 0, (dispatch_function_t)sub_10051EBE0);
  }
  uint64_t v2 = *(void *)(qword_102489F98 + 144);
  *a1 = *(void *)(qword_102489F98 + 136);
  a1[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t *sub_1000C7FFC(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    __int16 v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = a1 + 16;
  __int16 v14 = operator new(0x2D8uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  void *v14 = 0;
  v14[1] = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *((unsigned char *)v14 + 24) = 0;
  *((unsigned char *)v14 + 720) = 0;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100100330(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  int v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  uint64_t i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  sub_1000C83E4((uint64_t)v24, 0);
  return i;
}

void sub_1000C8248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000C83E4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_1000C8260(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 696) == *(unsigned __int8 *)(a2 + 696))
  {
    if (*(unsigned char *)(a1 + 696))
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      long long v4 = *(_OWORD *)(a2 + 16);
      long long v5 = *(_OWORD *)(a2 + 32);
      long long v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)(a1 + 48) = v6;
      *(_OWORD *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
      if (a1 != a2) {
        sub_1000FB43C((char *)(a1 + 88), *(char **)(a2 + 88), *(void *)(a2 + 96), (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 2);
      }
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      long long v7 = *(_OWORD *)(a2 + 128);
      long long v8 = *(_OWORD *)(a2 + 144);
      long long v9 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v9;
      *(_OWORD *)(a1 + 128) = v7;
      *(_OWORD *)(a1 + 144) = v8;
      long long v10 = *(_OWORD *)(a2 + 192);
      long long v11 = *(_OWORD *)(a2 + 208);
      long long v12 = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 240) = v12;
      *(_OWORD *)(a1 + 192) = v10;
      *(_OWORD *)(a1 + 208) = v11;
      long long v13 = *(_OWORD *)(a2 + 256);
      long long v14 = *(_OWORD *)(a2 + 272);
      long long v15 = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a1 + 300) = *(_OWORD *)(a2 + 300);
      *(_OWORD *)(a1 + 272) = v14;
      *(_OWORD *)(a1 + 288) = v15;
      *(_OWORD *)(a1 + 256) = v13;
      std::string::operator=((std::string *)(a1 + 320), (const std::string *)(a2 + 320));
      long long v17 = *(_OWORD *)(a2 + 360);
      long long v16 = *(_OWORD *)(a2 + 376);
      *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
      *(_OWORD *)(a1 + 360) = v17;
      *(_OWORD *)(a1 + 376) = v16;
      long long v18 = *(_OWORD *)(a2 + 440);
      long long v20 = *(_OWORD *)(a2 + 392);
      long long v19 = *(_OWORD *)(a2 + 408);
      *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
      *(_OWORD *)(a1 + 440) = v18;
      *(_OWORD *)(a1 + 392) = v20;
      *(_OWORD *)(a1 + 408) = v19;
      long long v22 = *(_OWORD *)(a2 + 472);
      long long v21 = *(_OWORD *)(a2 + 488);
      long long v23 = *(_OWORD *)(a2 + 456);
      *(_DWORD *)(a1 + 504) = *(_DWORD *)(a2 + 504);
      *(_OWORD *)(a1 + 472) = v22;
      *(_OWORD *)(a1 + 488) = v21;
      *(_OWORD *)(a1 + 456) = v23;
      long long v24 = *(_OWORD *)(a2 + 640);
      long long v25 = *(_OWORD *)(a2 + 656);
      long long v26 = *(_OWORD *)(a2 + 672);
      *(_DWORD *)(a1 + 688) = *(_DWORD *)(a2 + 688);
      *(_OWORD *)(a1 + 656) = v25;
      *(_OWORD *)(a1 + 672) = v26;
      *(_OWORD *)(a1 + 640) = v24;
      long long v27 = *(_OWORD *)(a2 + 576);
      long long v28 = *(_OWORD *)(a2 + 592);
      long long v29 = *(_OWORD *)(a2 + 624);
      *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
      *(_OWORD *)(a1 + 624) = v29;
      *(_OWORD *)(a1 + 576) = v27;
      *(_OWORD *)(a1 + 592) = v28;
      long long v30 = *(_OWORD *)(a2 + 512);
      long long v31 = *(_OWORD *)(a2 + 528);
      long long v32 = *(_OWORD *)(a2 + 560);
      *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
      *(_OWORD *)(a1 + 560) = v32;
      *(_OWORD *)(a1 + 512) = v30;
      *(_OWORD *)(a1 + 528) = v31;
    }
  }
  else if (*(unsigned char *)(a1 + 696))
  {
    sub_100DD88E4(a1);
  }
  else
  {
    sub_10010F6A4(a1, a2);
    *(unsigned char *)(a1 + 696) = 1;
  }
}

void sub_1000C83E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1000F3950((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
}

id sub_1000C843C(id *a1)
{
  sub_1000C7F88(buf);
  v9[0] = 0;
  int v2 = sub_1000D2988(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", v9);
  if (v9[0]) {
    int v3 = v2;
  }
  else {
    int v3 = 0;
  }
  if (v11) {
    sub_1000DB0A0(v11);
  }
  if (v3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    long long v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,fetchSignalStrengthMeasurementsWithReply", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      *(_WORD *)long long v9 = 0;
      long long v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::fetchSignalStrengthMeasurementsWithReply()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  id v5 = [[objc_msgSend(*a1, "vendor") proxyForService:@"CLTelephonyService"];
  [v5 registerDelegate:sub_1000C86C4((uint64_t)(a1 + 305)) inSilo:[*a1 silo]];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10017603C;
  v8[3] = &unk_102343F48;
  v8[4] = a1;
  return [v5 fetchSignalStrengthMeasurementForSim:0 withReply:v8];
}

void sub_1000C86A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    sub_1000DB0A0(a20);
  }
  _Unwind_Resume(exception_object);
}

id sub_1000C86C4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (!v1)
  {
    int v3 = objc_alloc_init(CLCallbackDropNullDelegate);
    *(void *)(a1 + 24) = v3;
    [(CLCallbackDropNullDelegate *)v3 setValid:1];
    uint64_t v1 = *(void **)(a1 + 24);
  }
  id v4 = v1;

  return v4;
}

void sub_1000C871C(uint64_t a1, int *a2, void **a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 56), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10234C7E0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v29 = 1;
    long long v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNearbydInterfaceManager::onTelephonyNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10234C7E0);
    }
    long long v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v41 = 2082;
      int v42 = "activity";
      __int16 v43 = 2050;
      uint64_t v44 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNearbydInterfaceManager::onTelephonyNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v29 = 0;
  }
  long long v9 = (const void *)sub_1000FA17C(a2);
  int v10 = CFEqual(v9, @"kCellInfoNotification");
  long long v11 = *a3;
  if (v10) {
    BOOL v12 = v11 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    uint64_t v35 = 0;
    uint64_t v34 = 0;
    uint64_t v36 = 0;
    v32[0] = 0;
    char v33 = 0;
    memset(v30, 0, sizeof(v30));
    int v31 = 1065353216;
    if (!sub_1000FF5A4(v11, (uint64_t)v30))
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C7C0);
      }
      long long v15 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#NearbydIfMgr,#ci,kCellInfoNotification,[3]:error fetching cell info", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_69;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C7C0);
      }
      *(_WORD *)CFStringRef v37 = 0;
      long long v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNearbydInterfaceManager::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v16);
      goto LABEL_30;
    }
    *(_DWORD *)buf = 0;
    *(void *)CFStringRef v37 = buf;
    if (*((void *)sub_1000FF948((uint64_t)v30, (int *)buf, (uint64_t)&unk_101D0B290, (_DWORD **)v37) + 3))
    {
      sub_10010D904(0, (uint64_t)v30, &v34);
      sub_1000FA8B8(&v34, buf);
      sub_1000F399C((uint64_t)v32, (uint64_t)buf);
      sub_1000F3950((uint64_t)buf);
      if (v33)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_10234C7C0);
        }
        long long v13 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)&uint8_t buf[4] = 0x66FD0EB66FD0EB67 * ((v35 - v34) >> 3);
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&unsigned char buf[14] = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#ci,kCellInfoNotification,[1]:cellcount,%lu,sim %d", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_10234C7C0);
          }
          *(_DWORD *)CFStringRef v37 = 134218240;
          *(void *)&v37[4] = 0x66FD0EB66FD0EB67 * ((v35 - v34) >> 3);
          __int16 v38 = 1024;
          int v39 = 0;
          long long v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v26);
          if (v26 != buf) {
            free(v26);
          }
        }
        int v14 = sub_1000C95E4((uint64_t)v32);
        sub_1000C965C(a4, 0, v14);
        goto LABEL_45;
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C7C0);
      }
      long long v19 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#ci,kCellInfoNotification,[0]:serving cell missing", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2))
      {
LABEL_45:
        uint64_t v20 = v35;
        uint64_t v21 = v34;
        while (v20 != v21)
        {
          v20 -= 696;
          sub_1000FA860((uint64_t)&v36, v20);
        }
        uint64_t v35 = v21;
        if (!sub_1000FFBA8()) {
          goto LABEL_69;
        }
        *(_DWORD *)buf = 1;
        *(void *)CFStringRef v37 = buf;
        if (*((void *)sub_1000FF948((uint64_t)v30, (int *)buf, (uint64_t)&unk_101D0B290, (_DWORD **)v37) + 3))
        {
          sub_10010D904(1, (uint64_t)v30, &v34);
          sub_1000FA8B8(&v34, buf);
          sub_1000F399C((uint64_t)v32, (uint64_t)buf);
          sub_1000F3950((uint64_t)buf);
          if (v33)
          {
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_10234C7C0);
            }
            long long v22 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)&uint8_t buf[4] = 0x66FD0EB66FD0EB67 * ((v35 - v34) >> 3);
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&unsigned char buf[14] = 1;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#ci,kCellInfoNotification,[1]:cellcount,%lu,sim %d", buf, 0x12u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_10234C7C0);
              }
              *(_DWORD *)CFStringRef v37 = 134218240;
              *(void *)&v37[4] = 0x66FD0EB66FD0EB67 * ((v35 - v34) >> 3);
              __int16 v38 = 1024;
              int v39 = 1;
              long long v27 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v27);
              if (v27 != buf) {
                free(v27);
              }
            }
            int v23 = sub_1000C95E4((uint64_t)v32);
            sub_1000C965C(a4, 1, v23);
LABEL_69:
            sub_1000FF568((uint64_t)v30);
            sub_1000F3950((uint64_t)v32);
            *(void *)buf = &v34;
            sub_1000FA7C8((void ***)buf);
            goto LABEL_70;
          }
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_10234C7C0);
          }
          long long v25 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#ci,kCellInfoNotification,[0]:serving cell missing", buf, 2u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_69;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_10234C7C0);
          }
          *(_WORD *)CFStringRef v37 = 0;
          long long v16 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v16);
        }
        else
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_10234C7C0);
          }
          long long v24 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = 1;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#ci,kCellInfoNotification,[2]:received nil CellInfo from CT for sim %d", buf, 8u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_69;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_10234C7C0);
          }
          *(void *)CFStringRef v37 = 0x104000100;
          long long v16 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v16);
        }
LABEL_30:
        if (v16 != buf) {
          free(v16);
        }
        goto LABEL_69;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C7C0);
      }
      *(_WORD *)CFStringRef v37 = 0;
      long long v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v18);
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C7C0);
      }
      long long v17 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#ci,kCellInfoNotification,[2]:received nil CellInfo from CT for sim %d", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_45;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C7C0);
      }
      *(void *)CFStringRef v37 = 67109120;
      long long v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v18);
    }
    if (v18 != buf) {
      free(v18);
    }
    goto LABEL_45;
  }
LABEL_70:
  sub_1000C9478(a4, 0, 1);
  sub_1000C9478(a4, 1, 1);
  if (v29) {
    os_activity_scope_leave(&state);
  }
}

void sub_1000C93F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  os_activity_scope_state_s v5 = va_arg(va1, os_activity_scope_state_s);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  sub_1000FF568((uint64_t)va1);
  sub_1000F3950((uint64_t)va2);
  STACK[0x360] = (unint64_t)&STACK[0x320];
  sub_1000FA7C8((void ***)&STACK[0x360]);
  if ((_BYTE)v7) {
    os_activity_scope_leave((os_activity_scope_state_t)va);
  }
  _Unwind_Resume(a1);
}

void sub_1000C9478(uint64_t a1, int a2, int a3)
{
  long long v6 = sub_1000C9530((void *)(a1 + 8), a2);
  if (!v6) {
    return;
  }
  uint64_t v7 = (const std::string *)v6;
  if (a3)
  {
    if (*((char *)v6 + 47) < 0)
    {
      if (!v6[4]) {
        goto LABEL_8;
      }
    }
    else if (!*((unsigned char *)v6 + 47))
    {
      goto LABEL_8;
    }
    if (sub_10016C458() - *((double *)v6 + 10) < *(double *)&qword_102479EE8) {
      return;
    }
  }
LABEL_8:
  if (std::string::compare(v7 + 1, "_SPL::MCC::000"))
  {
    sub_1000C965C(a1, a2, 0);
  }
}

uint64_t *sub_1000C9530(void *a1, int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  os_activity_scope_state_s v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (BOOL result = *v5; result; BOOL result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1000C95E4(uint64_t a1)
{
  if (!*(unsigned char *)a1) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 3) {
    return *(unsigned int *)(a1 + 12);
  }
  if (v1 == 9) {
    return *(unsigned int *)(a1 + 44);
  }
  if (v1 == 7) {
    return *(unsigned int *)(a1 + 12);
  }
  if (v1 - 3 <= 2)
  {
    uint8x8_t v3 = *(unsigned int **)(a1 + 88);
    if (*(unsigned int **)(a1 + 96) != v3) {
      return *v3;
    }
    return 0xFFFFFFFFLL;
  }
  if (v1 != 10)
  {
    if (v1 == 6) {
      return *(unsigned int *)(a1 + 512);
    }
    return 0xFFFFFFFFLL;
  }
  return *(unsigned int *)(a1 + 600);
}

void sub_1000C965C(uint64_t a1, int a2, int a3)
{
  unsigned int v103 = a2;
  if (*(unsigned char *)a1 && *(unsigned char *)(a1 + 1) && (!a3 || !*(unsigned char *)(a1 + 96)))
  {
    memset(&v102, 0, sizeof(v102));
    if (!a3)
    {
      long long v6 = &off_10234C790;
      goto LABEL_9;
    }
    if (a3 == 901)
    {
      long long v6 = &off_10234C798;
LABEL_9:
      std::string::assign(&v102, *v6);
      goto LABEL_135;
    }
    unint64_t v7 = a3;
    unint64_t v8 = *(void *)(a1 + 144);
    if (v8)
    {
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        unint64_t v10 = a3;
        if (v8 <= a3) {
          unint64_t v10 = a3 % v8;
        }
      }
      else
      {
        unint64_t v10 = (v8 - 1) & a3;
      }
      uint64_t v11 = *(uint64_t ***)(*(void *)(a1 + 136) + 8 * v10);
      if (v11)
      {
        for (uint64_t i = *v11; i; uint64_t i = (uint64_t *)*i)
        {
          unint64_t v13 = i[1];
          if (v13 == a3)
          {
            if (*((_DWORD *)i + 4) == a3)
            {
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_10234C7C0);
              }
              double v86 = qword_102419538;
              if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
              {
                int v87 = i + 3;
                if (*((char *)i + 47) < 0) {
                  int v87 = (void *)*v87;
                }
                LODWORD(buf[0]) = 67109378;
                HIDWORD(buf[0]) = a3;
                LOWORD(buf[1]) = 2080;
                *(void *)((char *)&buf[1] + 2) = v87;
                _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#toCountryIso,mcc:%d,isCountryCode:%s", (uint8_t *)buf, 0x12u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419530 != -1) {
                  dispatch_once(&qword_102419530, &stru_10234C7C0);
                }
                uint64_t v100 = i + 3;
                if (*((char *)i + 47) < 0) {
                  uint64_t v100 = (void *)*v100;
                }
                LODWORD(__str.__r_.__value_.__l.__data_) = 67109378;
                HIDWORD(__str.__r_.__value_.__r.__words[0]) = a3;
                LOWORD(__str.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v100;
                __int16 v101 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "std::string CLNearbydInterfaceManager::toCountryIso(int)", "%s\n", v101);
                if (v101 != (char *)buf) {
                  free(v101);
                }
              }
              if (*((char *)i + 47) < 0) {
                sub_1000DC48C(&__dst, (void *)i[3], i[4]);
              }
              else {
                std::string __dst = *(std::string *)((unsigned char *)i + 1);
              }
              goto LABEL_132;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v13 >= v8) {
                v13 %= v8;
              }
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v10) {
              break;
            }
          }
        }
      }
    }
    snprintf((char *)&__str, 0x20uLL, "%d", a3);
    CFStringCreateWithCString(kCFAllocatorDefault, (const char *)&__str, 0x8000100u);
    id v104 = 0;
    unint64_t v14 = _CTServerConnectionCopyISOForMCC();
    id v15 = 0;
    memset(&__dst, 0, sizeof(__dst));
    if (v14) {
      BOOL v16 = 1;
    }
    else {
      BOOL v16 = v104 == 0;
    }
    if (v16)
    {
      long long v17 = (uint64_t *)HIDWORD(v14);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C7C0);
      }
      long long v18 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf[0]) = 67109376;
        HIDWORD(buf[0]) = v14;
        LOWORD(buf[1]) = 1024;
        *(_DWORD *)((char *)&buf[1] + 2) = HIDWORD(v14);
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#NearbydIfMgr,#toCountryIsoNonCached,_CTServerConnectionCopyISOForMCC failed,domain,%d,error,%d", (uint8_t *)buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 0))
      {
LABEL_54:
        LODWORD(buf[0]) = a3;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_1000DC48C(&buf[1], __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          int v24 = buf[0];
          unint64_t v7 = SLODWORD(buf[0]);
        }
        else
        {
          *(std::string *)&buf[1] = __dst;
          int v24 = a3;
        }
        unint64_t v25 = *(void *)(a1 + 144);
        if (v25)
        {
          uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
          v26.i16[0] = vaddlv_u8(v26);
          if (v26.u32[0] > 1uLL)
          {
            long long v17 = (uint64_t *)v7;
            if (v25 <= v7) {
              long long v17 = (uint64_t *)(v7 % v25);
            }
          }
          else
          {
            long long v17 = (uint64_t *)((v25 - 1) & v7);
          }
          long long v27 = *(uint64_t ***)(*(void *)(a1 + 136) + 8 * (void)v17);
          if (v27)
          {
            for (j = *v27; j; j = (uint64_t *)*j)
            {
              unint64_t v29 = j[1];
              if (v29 == v7)
              {
                if (*((_DWORD *)j + 4) == v24) {
                  goto LABEL_130;
                }
              }
              else
              {
                if (v26.u32[0] > 1uLL)
                {
                  if (v29 >= v25) {
                    v29 %= v25;
                  }
                }
                else
                {
                  v29 &= v25 - 1;
                }
                if ((uint64_t *)v29 != v17) {
                  break;
                }
              }
            }
          }
        }
        long long v30 = (char *)operator new(0x30uLL);
        int v31 = (void *)(a1 + 152);
        *(void *)long long v30 = 0;
        *((void *)v30 + 1) = v7;
        *((_DWORD *)v30 + 4) = v24;
        *(_OWORD *)(v30 + 24) = *(_OWORD *)&buf[1];
        *((void *)v30 + 5) = buf[3];
        memset(&buf[1], 0, 24);
        float v32 = (float)(unint64_t)(*(void *)(a1 + 160) + 1);
        float v33 = *(float *)(a1 + 168);
        if (v25 && (float)(v33 * (float)v25) >= v32)
        {
          unint64_t v7 = (unint64_t)v17;
          goto LABEL_120;
        }
        BOOL v34 = 1;
        if (v25 >= 3) {
          BOOL v34 = (v25 & (v25 - 1)) != 0;
        }
        unint64_t v35 = v34 | (2 * v25);
        unint64_t v36 = vcvtps_u32_f32(v32 / v33);
        if (v35 <= v36) {
          int8x8_t prime = (int8x8_t)v36;
        }
        else {
          int8x8_t prime = (int8x8_t)v35;
        }
        if (*(void *)&prime == 1)
        {
          int8x8_t prime = (int8x8_t)2;
        }
        else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
        {
          int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
          unint64_t v25 = *(void *)(a1 + 144);
        }
        if (*(void *)&prime <= v25)
        {
          if (*(void *)&prime >= v25) {
            goto LABEL_116;
          }
          unint64_t v44 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 160) / *(float *)(a1 + 168));
          if (v25 < 3 || (uint8x8_t v45 = (uint8x8_t)vcnt_s8((int8x8_t)v25), v45.i16[0] = vaddlv_u8(v45), v45.u32[0] > 1uLL))
          {
            unint64_t v44 = std::__next_prime(v44);
          }
          else
          {
            uint64_t v46 = 1 << -(char)__clz(v44 - 1);
            if (v44 >= 2) {
              unint64_t v44 = v46;
            }
          }
          if (*(void *)&prime <= v44) {
            int8x8_t prime = (int8x8_t)v44;
          }
          if (*(void *)&prime >= v25)
          {
            unint64_t v25 = *(void *)(a1 + 144);
            goto LABEL_116;
          }
          if (!*(void *)&prime)
          {
            long long v88 = *(void **)(a1 + 136);
            *(void *)(a1 + 136) = 0;
            if (v88) {
              operator delete(v88);
            }
            unint64_t v25 = 0;
            *(void *)(a1 + 144) = 0;
            goto LABEL_116;
          }
        }
        if (*(void *)&prime >> 61) {
          sub_1001D7FA0();
        }
        __int16 v38 = operator new(8 * *(void *)&prime);
        int v39 = *(void **)(a1 + 136);
        *(void *)(a1 + 136) = v38;
        if (v39) {
          operator delete(v39);
        }
        uint64_t v40 = 0;
        *(int8x8_t *)(a1 + 144) = prime;
        do
          *(void *)(*(void *)(a1 + 136) + 8 * v40++) = 0;
        while (*(void *)&prime != v40);
        __int16 v41 = (void *)*v31;
        if (*v31)
        {
          unint64_t v42 = v41[1];
          uint8x8_t v43 = (uint8x8_t)vcnt_s8(prime);
          v43.i16[0] = vaddlv_u8(v43);
          if (v43.u32[0] > 1uLL)
          {
            if (v42 >= *(void *)&prime) {
              v42 %= *(void *)&prime;
            }
          }
          else
          {
            v42 &= *(void *)&prime - 1;
          }
          *(void *)(*(void *)(a1 + 136) + 8 * v42) = v31;
          uint64_t v47 = (void *)*v41;
          if (*v41)
          {
            do
            {
              unint64_t v48 = v47[1];
              if (v43.u32[0] > 1uLL)
              {
                if (v48 >= *(void *)&prime) {
                  v48 %= *(void *)&prime;
                }
              }
              else
              {
                v48 &= *(void *)&prime - 1;
              }
              if (v48 != v42)
              {
                uint64_t v49 = *(void *)(a1 + 136);
                if (!*(void *)(v49 + 8 * v48))
                {
                  *(void *)(v49 + 8 * v48) = v41;
                  goto LABEL_112;
                }
                *__int16 v41 = *v47;
                *uint64_t v47 = **(void **)(*(void *)(a1 + 136) + 8 * v48);
                **(void **)(*(void *)(a1 + 136) + 8 * v48) = v47;
                uint64_t v47 = v41;
              }
              unint64_t v48 = v42;
LABEL_112:
              __int16 v41 = v47;
              uint64_t v47 = (void *)*v47;
              unint64_t v42 = v48;
            }
            while (v47);
          }
        }
        unint64_t v25 = (unint64_t)prime;
LABEL_116:
        if ((v25 & (v25 - 1)) != 0)
        {
          if (v25 <= v7) {
            v7 %= v25;
          }
        }
        else
        {
          v7 &= v25 - 1;
        }
LABEL_120:
        uint64_t v50 = *(void *)(a1 + 136);
        int v51 = *(void **)(v50 + 8 * v7);
        if (v51)
        {
          *(void *)long long v30 = *v51;
        }
        else
        {
          *(void *)long long v30 = *v31;
          void *v31 = v30;
          *(void *)(v50 + 8 * v7) = v31;
          if (!*(void *)v30)
          {
LABEL_129:
            ++*(void *)(a1 + 160);
LABEL_130:
            if (SHIBYTE(buf[3]) < 0) {
              operator delete((void *)buf[1]);
            }
LABEL_132:
            if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v102.__r_.__value_.__l.__data_);
            }
            std::string v102 = __dst;
LABEL_135:
            int v53 = SHIBYTE(v102.__r_.__value_.__r.__words[2]);
            std::string::size_type size = v102.__r_.__value_.__l.__size_;
            if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v55 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v55 = v102.__r_.__value_.__l.__size_;
            }
            if (!v55)
            {
LABEL_184:
              if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v102.__r_.__value_.__l.__data_);
              }
              return;
            }
            __int16 v56 = sub_1000C9530((void *)(a1 + 8), a2);
            if (!v56)
            {
              if (v53 < 0) {
                sub_1000DC48C(&__str, v102.__r_.__value_.__l.__data_, size);
              }
              else {
                std::string __str = v102;
              }
              LOBYTE(v106) = 1;
              __int16 v109 = 0;
              uint64_t v110 = 0;
              uint64_t v108 = 0;
              double v111 = sub_10016C458();
              int v63 = (std::string *)sub_1019EFA90(a1 + 8, a2, &v103);
              std::string::operator=(v63 + 1, &__str);
              v63[2].__r_.__value_.__s.__data_[0] = v106;
              if (&v63[1] != &__str) {
                sub_1019EF7A8((uint64_t)&v63[2].__r_.__value_.__l.__size_, v108, v109, 0xAAAAAAAAAAAAAAABLL * (((char *)v109 - (char *)v108) >> 3));
              }
              *(double *)&v63[3].__r_.__value_.__l.__size_ = v111;
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_10234C7C0);
              }
              __int16 v64 = qword_102419538;
              if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
              {
                p_str = &__str;
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                }
                LODWORD(buf[0]) = 67109634;
                HIDWORD(buf[0]) = a2;
                LOWORD(buf[1]) = 2080;
                *(void *)((char *)&buf[1] + 2) = p_str;
                WORD1(buf[2]) = 1024;
                HIDWORD(buf[2]) = v106;
                _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#setIsoCountryFromMcc, did not find instance=%d - added it as new instance with iso=%s, sendIt=%d", (uint8_t *)buf, 0x18u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419530 != -1) {
                  dispatch_once(&qword_102419530, &stru_10234C7C0);
                }
                __int16 v93 = &__str;
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  __int16 v93 = (std::string *)__str.__r_.__value_.__r.__words[0];
                }
                LODWORD(__dst.__r_.__value_.__l.__data_) = 67109634;
                HIDWORD(__dst.__r_.__value_.__r.__words[0]) = a2;
                LOWORD(__dst.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v93;
                WORD1(__dst.__r_.__value_.__r.__words[2]) = 1024;
                HIDWORD(__dst.__r_.__value_.__r.__words[2]) = v106;
                double v94 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::setIsoCountryFromMcc(SimInstance, int)", "%s\n", v94);
                if (v94 != (char *)buf) {
                  free(v94);
                }
              }
              buf[0] = &v108;
              sub_1000A7B4C((void ***)buf);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              goto LABEL_173;
            }
            int v57 = v56;
            __int16 v58 = (std::string *)(v56 + 3);
            uint64_t v59 = *((unsigned __int8 *)v56 + 47);
            if ((v59 & 0x80u) == 0) {
              uint64_t v60 = *((unsigned __int8 *)v56 + 47);
            }
            else {
              uint64_t v60 = v56[4];
            }
            if (v60 != v55) {
              goto LABEL_168;
            }
            if (v53 >= 0) {
              int v61 = &v102;
            }
            else {
              int v61 = (std::string *)v102.__r_.__value_.__r.__words[0];
            }
            if ((v59 & 0x80) != 0)
            {
              if (memcmp(v58->__r_.__value_.__l.__data_, v61, v56[4]))
              {
LABEL_168:
                std::string::operator=(v58, &v102);
                *((double *)v57 + 10) = sub_10016C458();
                *((unsigned char *)v57 + 48) = 1;
                if (qword_102419530 != -1) {
                  dispatch_once(&qword_102419530, &stru_10234C7C0);
                }
                __int16 v66 = qword_102419538;
                if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v67 = v57[10];
                  int v68 = *((unsigned __int8 *)v57 + 48);
                  LODWORD(buf[0]) = 67109888;
                  HIDWORD(buf[0]) = a2;
                  LOWORD(buf[1]) = 1024;
                  *(_DWORD *)((char *)&buf[1] + 2) = a3;
                  HIWORD(buf[1]) = 2048;
                  buf[2] = v67;
                  LOWORD(buf[3]) = 1024;
                  *(_DWORD *)((char *)&buf[3] + 2) = v68;
                  _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#setIsoCountryFromMcc,Updated existing mccEntry,instance=%d,mcc=%d,timestamp=%.1f,sendIt=%d", (uint8_t *)buf, 0x1Eu);
                }
                if (!sub_10013D1A0(115, 2)) {
                  goto LABEL_173;
                }
                bzero(buf, 0x65CuLL);
                if (qword_102419530 != -1) {
                  dispatch_once(&qword_102419530, &stru_10234C7C0);
                }
                std::string::size_type v91 = v57[10];
                int v92 = *((unsigned __int8 *)v57 + 48);
                __str.__r_.__value_.__r.__words[0] = __PAIR64__(a2, 67109888);
                LOWORD(__str.__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = a3;
                HIWORD(__str.__r_.__value_.__r.__words[1]) = 2048;
                __str.__r_.__value_.__r.__words[2] = v91;
                __int16 v106 = 1024;
                int v107 = v92;
                int v82 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::setIsoCountryFromMcc(SimInstance, int)", "%s\n", v82);
                goto LABEL_235;
              }
            }
            else if (*((unsigned char *)v56 + 47))
            {
              __int16 v62 = (unsigned __int8 *)(v56 + 3);
              while (*v62 == v61->__r_.__value_.__s.__data_[0])
              {
                ++v62;
                int v61 = (std::string *)((char *)v61 + 1);
                if (!--v59) {
                  goto LABEL_187;
                }
              }
              goto LABEL_168;
            }
LABEL_187:
            if (*((unsigned char *)v57 + 48))
            {
              if (sub_10016C458() - *((double *)v57 + 10) < 600.0)
              {
                if (qword_102419530 != -1) {
                  dispatch_once(&qword_102419530, &stru_10234C7C0);
                }
                int v74 = qword_102419538;
                if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v75 = v57[10];
                  int v76 = *((unsigned __int8 *)v57 + 48);
                  LODWORD(buf[0]) = 134218240;
                  *(void *)((char *)buf + 4) = v75;
                  WORD2(buf[1]) = 1024;
                  *(_DWORD *)((char *)&buf[1] + 6) = v76;
                  _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#setIsoCountryFromMcc,isoCountryCode is not new - waiting for kMinIntervalBetweenIDSMessages to expire before sending another IDS message,timestamp=%.1f, sendIt=%d", (uint8_t *)buf, 0x12u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419530 != -1) {
                    dispatch_once(&qword_102419530, &stru_10234C7C0);
                  }
                  std::string::size_type v97 = v57[10];
                  int v98 = *((unsigned __int8 *)v57 + 48);
                  LODWORD(__str.__r_.__value_.__l.__data_) = 134218240;
                  *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = v97;
                  WORD2(__str.__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = v98;
                  __int16 v99 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::setIsoCountryFromMcc(SimInstance, int)", "%s\n", v99);
                  if (v99 != (char *)buf) {
                    free(v99);
                  }
                }
                char v69 = 1;
                goto LABEL_174;
              }
              *((double *)v57 + 10) = sub_10016C458();
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_10234C7C0);
              }
              int v83 = qword_102419538;
              if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v84 = v57[10];
                int v85 = *((unsigned __int8 *)v57 + 48);
                LODWORD(buf[0]) = 134218240;
                *(void *)((char *)buf + 4) = v84;
                WORD2(buf[1]) = 1024;
                *(_DWORD *)((char *)&buf[1] + 6) = v85;
                _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#setIsoCountryFromMcc,isoCountryCode is not new but kMinIntervalBetweenIDSMessages has expired, send another IDS message,timestamp=%.1f, sendIt=%d", (uint8_t *)buf, 0x12u);
              }
              if (!sub_10013D1A0(115, 2))
              {
LABEL_173:
                char v69 = 0;
LABEL_174:
                uint64_t v70 = v103;
                if (*((unsigned char *)sub_1019EFA90(a1 + 8, v103, &v103) + 48)) {
                  char v71 = v69;
                }
                else {
                  char v71 = 1;
                }
                if ((v71 & 1) == 0)
                {
                  if (qword_102419530 != -1) {
                    dispatch_once(&qword_102419530, &stru_10234C7C0);
                  }
                  int v72 = qword_102419538;
                  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
                  {
                    int v73 = *((unsigned __int8 *)sub_1019EFA90(a1 + 8, v70, &v103) + 48);
                    LODWORD(buf[0]) = 67109120;
                    HIDWORD(buf[0]) = v73;
                    _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#setIsoCountryFromMcc, calling sendIsoCountryToWatch(instance),sendIt=%d", (uint8_t *)buf, 8u);
                  }
                  if (sub_10013D1A0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_102419530 != -1) {
                      dispatch_once(&qword_102419530, &stru_10234C7C0);
                    }
                    int v89 = *((unsigned __int8 *)sub_1019EFA90(a1 + 8, v70, &v103) + 48);
                    LODWORD(__str.__r_.__value_.__l.__data_) = 67109120;
                    HIDWORD(__str.__r_.__value_.__r.__words[0]) = v89;
                    uint64_t v90 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::setIsoCountryFromMcc(SimInstance, int)", "%s\n", v90);
                    if (v90 != (char *)buf) {
                      free(v90);
                    }
                  }
                  sub_1019EF1B4(a1, v70);
                }
                goto LABEL_184;
              }
              bzero(buf, 0x65CuLL);
              if (qword_102419530 == -1) {
                goto LABEL_201;
              }
            }
            else
            {
              *((double *)v57 + 10) = sub_10016C458();
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_10234C7C0);
              }
              __int16 v77 = qword_102419538;
              if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v78 = v57[10];
                int v79 = *((unsigned __int8 *)v57 + 48);
                LODWORD(buf[0]) = 134218240;
                *(void *)((char *)buf + 4) = v78;
                WORD2(buf[1]) = 1024;
                *(_DWORD *)((char *)&buf[1] + 6) = v79;
                _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#setIsoCountryFromMcc,isoCountryCode is not new - setting its timestamp to current time,timestamp=%.1f, sendIt=%d", (uint8_t *)buf, 0x12u);
              }
              if (!sub_10013D1A0(115, 2)) {
                goto LABEL_173;
              }
              bzero(buf, 0x65CuLL);
              if (qword_102419530 == -1) {
                goto LABEL_201;
              }
            }
            dispatch_once(&qword_102419530, &stru_10234C7C0);
LABEL_201:
            std::string::size_type v80 = v57[10];
            int v81 = *((unsigned __int8 *)v57 + 48);
            LODWORD(__str.__r_.__value_.__l.__data_) = 134218240;
            *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = v80;
            WORD2(__str.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = v81;
            int v82 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::setIsoCountryFromMcc(SimInstance, int)", "%s\n", v82);
LABEL_235:
            if (v82 != (char *)buf) {
              free(v82);
            }
            goto LABEL_173;
          }
          unint64_t v52 = *(void *)(*(void *)v30 + 8);
          if ((v25 & (v25 - 1)) != 0)
          {
            if (v52 >= v25) {
              v52 %= v25;
            }
          }
          else
          {
            v52 &= v25 - 1;
          }
          int v51 = (void *)(*(void *)(a1 + 136) + 8 * v52);
        }
        *int v51 = v30;
        goto LABEL_129;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C7C0);
      }
      int v113 = 67109376;
      int v114 = v14;
      __int16 v115 = 1024;
      LODWORD(v116) = HIDWORD(v14);
      long long v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "std::string CLNearbydInterfaceManager::toCountryIsoNonCached(int)", "%s\n", v19);
    }
    else
    {
      std::string::assign(&__dst, (const std::string::value_type *)[objc_msgSend(objc_msgSend(0, "uppercaseString"), "UTF8String") UTF8String]);
      std::string::size_type v20 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v20 = __dst.__r_.__value_.__l.__size_;
      }
      if (!v20)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_10234C7C0);
        }
        uint64_t v21 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf[0]) = 67109120;
          HIDWORD(buf[0]) = a3;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#toCountryIsoNonCached,mcc=%d,countryCode,empty", (uint8_t *)buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_10234C7C0);
          }
          int v113 = 67109120;
          int v114 = a3;
          double v96 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "std::string CLNearbydInterfaceManager::toCountryIsoNonCached(int)", "%s\n", v96);
          if (v96 != (char *)buf) {
            free(v96);
          }
        }
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C7C0);
      }
      long long v17 = &qword_102419000;
      long long v22 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        p_dst = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf[0]) = 67109378;
        HIDWORD(buf[0]) = a3;
        LOWORD(buf[1]) = 2080;
        *(void *)((char *)&buf[1] + 2) = p_dst;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#toCountryIsoNonCached,mcc:%d,isCountryCode:%s,fromCache", (uint8_t *)buf, 0x12u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_54;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C7C0);
      }
      __int16 v95 = &__dst;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        __int16 v95 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      int v113 = 67109378;
      int v114 = a3;
      __int16 v115 = 2080;
      uint64_t v116 = v95;
      long long v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::string CLNearbydInterfaceManager::toCountryIsoNonCached(int)", "%s\n", v19);
    }
    if (v19 != (char *)buf) {
      free(v19);
    }
    goto LABEL_54;
  }
}

void sub_1000CAD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000CAE28(uint64_t a1, int *a2, CFDictionaryRef *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10230B660);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLEmergencyController::onTelephonyNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10230B660);
    }
    uint8x8_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      id v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLEmergencyController::onTelephonyNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1000CB004(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1000CAFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000CB004(uint64_t a1, uint64_t a2, int *a3, CFDictionaryRef *a4)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10230B640);
  }
  uint64_t v7 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v8 = (const __CFString *)sub_1000FA17C(a3);
    sub_1000FECE0(v8, (uint64_t)__p);
    uint8x8_t v9 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#EmergCon,EMERGENCY:notification,%{public}s", buf, 0xCu);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10230B640);
    }
    CFStringRef v97 = (const __CFString *)sub_1000FA17C(a3);
    sub_1000FECE0(v97, (uint64_t)buf);
    if ((SBYTE7(v174) & 0x80u) == 0) {
      int v98 = buf;
    }
    else {
      int v98 = *(uint8_t **)buf;
    }
    LODWORD(__str.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v98;
    __int16 v99 = (char *)_os_log_send_and_compose_impl();
    if (SBYTE7(v174) < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v99);
    if (v99 != __p) {
      free(v99);
    }
  }
  if (*a4
    || (unint64_t v10 = (const void *)sub_1000FA17C(a3), CFEqual(@"kCLTelephonyServiceConnectedNotification", v10))
    || (char v11 = (const void *)sub_1000FA17C(a3), CFEqual(@"kCLTelephonyServiceDisconnectedNotification", v11))
    || (uint64_t v12 = (const void *)sub_1000FA17C(a3), CFEqual(@"kCLTelephonyServiceResetNotification", v12))
    || (int v13 = (const void *)sub_1000FA17C(a3), CFEqual(@"kCallStatusChangeNotification", v13))
    || (__int16 v14 = (const void *)sub_1000FA17C(a3), CFEqual(@"kAtLeastOneVoiceCallInProgress", v14))
    || (id v15 = (const void *)sub_1000FA17C(a3), CFEqual(@"kNoVoiceCallInProgress", v15)))
  {
    sub_1000D1990(*(void *)(a1 + 688), a3, a4);
    __int16 v16 = (const void *)sub_1000FA17C(a3);
    if (CFEqual(@"kEmergencyModeChangeNotification", v16))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10230B640);
      }
      long long v17 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(void *)__p = 68289282;
        *(_WORD *)&__p[8] = 2082;
        *(void *)&__p[10] = "";
        *(_WORD *)&__p[18] = 2082;
        *(void *)&__p[20] = "CLTelephonyService_Type::kEmergencyModeChangeNotification";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon EMERGENCY:notification\", \"notif\":%{public, location:escape_only}s}", __p, 0x1Cu);
      }
      sub_10055E140((uint64_t)__p, *a4);
      long long v169 = *(_OWORD *)__p;
      int v170 = *(_DWORD *)&__p[16];
      sub_10101B794(a1, (unsigned __int8 *)&v169);
      return;
    }
    __int16 v18 = (const void *)sub_1000FA17C(a3);
    if (CFEqual(v18, @"kRegistrationDisplayStatusNotification"))
    {
      *(_OWORD *)buf = 0u;
      long long v174 = 0u;
      int v175 = 1065353216;
      if (sub_101330F90(*a4, (uint64_t)buf))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10230B640);
        }
        uint64_t v19 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(v171.__r_.__value_.__l.__data_) = 0;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
          int v20 = *((unsigned __int8 *)sub_100980D50((uint64_t)buf, (int *)&v171, (uint64_t)&unk_101D0B290, &__str) + 48);
          *(void *)__p = 68289539;
          *(_WORD *)&__p[8] = 2082;
          *(void *)&__p[10] = "";
          *(_WORD *)&__p[18] = 1026;
          *(_DWORD *)&__p[20] = 0;
          *(_WORD *)&__p[24] = 1025;
          *(_DWORD *)&__p[26] = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon,kRegistrationDisplayStatusNotification\", \"sim\":%{public}d, \"inHomeCountry\":%{private}d}", __p, 0x1Eu);
        }
        uint64_t v21 = *(void *)(a1 + 688);
        LODWORD(__str.__r_.__value_.__l.__data_) = 0;
        *(void *)__p = &__str;
        long long v22 = sub_100980D50((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101D0B290, (_DWORD **)__p);
        sub_10147B28C(v21, 0, *((unsigned __int8 *)v22 + 48));
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10230B640);
        }
        int v23 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(v171.__r_.__value_.__l.__data_) = 0;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
          int v24 = *((unsigned __int8 *)sub_100980D50((uint64_t)buf, (int *)&v171, (uint64_t)&unk_101D0B290, &__str) + 51);
          *(void *)__p = 68289283;
          *(_WORD *)&__p[8] = 2082;
          *(void *)&__p[10] = "";
          *(_WORD *)&__p[18] = 1025;
          *(_DWORD *)&__p[20] = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon,kRegistrationDisplayStatusNotification\", \"isSatelliteSystem\":%{private}hhd}", __p, 0x18u);
        }
        uint64_t v25 = *(void *)(a1 + 688);
        LODWORD(__str.__r_.__value_.__l.__data_) = 0;
        *(void *)__p = &__str;
        uint8x8_t v26 = sub_100980D50((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101D0B290, (_DWORD **)__p);
        sub_10147B524(v25, 0, *((unsigned __int8 *)v26 + 51));
        if (*(unsigned char *)(a1 + 133))
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10230B640);
          }
          long long v27 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(v171.__r_.__value_.__l.__data_) = 1;
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
            int v28 = *((unsigned __int8 *)sub_100980D50((uint64_t)buf, (int *)&v171, (uint64_t)&unk_101D0B290, &__str) + 48);
            *(void *)__p = 68289539;
            *(_WORD *)&__p[8] = 2082;
            *(void *)&__p[10] = "";
            *(_WORD *)&__p[18] = 1026;
            *(_DWORD *)&__p[20] = 1;
            *(_WORD *)&__p[24] = 1025;
            *(_DWORD *)&__p[26] = v28;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon,kRegistrationDisplayStatusNotification\", \"sim\":%{public}d, \"inHomeCountry\":%{private}d}", __p, 0x1Eu);
          }
          uint64_t v29 = *(void *)(a1 + 688);
          LODWORD(__str.__r_.__value_.__l.__data_) = 1;
          *(void *)__p = &__str;
          long long v30 = sub_100980D50((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101D0B290, (_DWORD **)__p);
          sub_10147B28C(v29, 1, *((unsigned __int8 *)v30 + 48));
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10230B640);
          }
          int v31 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(v171.__r_.__value_.__l.__data_) = 1;
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
            int v32 = *((unsigned __int8 *)sub_100980D50((uint64_t)buf, (int *)&v171, (uint64_t)&unk_101D0B290, &__str) + 51);
            *(void *)__p = 68289283;
            *(_WORD *)&__p[8] = 2082;
            *(void *)&__p[10] = "";
            *(_WORD *)&__p[18] = 1025;
            *(_DWORD *)&__p[20] = v32;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon,kRegistrationDisplayStatusNotification\", \"isSatelliteSystem\":%{private}hhd}", __p, 0x18u);
          }
          uint64_t v33 = *(void *)(a1 + 688);
          LODWORD(__str.__r_.__value_.__l.__data_) = 1;
          *(void *)__p = &__str;
          BOOL v34 = sub_100980D50((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101D0B290, (_DWORD **)__p);
          sub_10147B524(v33, 1u, *((unsigned __int8 *)v34 + 51));
        }
        unint64_t v35 = *(uint64_t **)(a1 + 672);
        if (v35)
        {
          uint64_t v36 = *v35;
          if (*v35)
          {
            LODWORD(__str.__r_.__value_.__l.__data_) = 0;
            *(void *)__p = &__str;
            CFStringRef v37 = sub_100980D50((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101D0B290, (_DWORD **)__p);
            sub_100F7D63C(v36, (const char *)v37 + 24);
          }
        }
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10230B640);
        }
        uint64_t v47 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__p = 0;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "#EmergCon,kRegistrationDisplayStatusNotification,error fetching InHomeCountry", __p, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10230B640);
          }
          LOWORD(__str.__r_.__value_.__l.__data_) = 0;
          uint64_t v116 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v116);
          if (v116 != __p) {
            free(v116);
          }
        }
      }
      sub_1000DB114((uint64_t)buf);
      return;
    }
    __int16 v38 = (const void *)sub_1000FA17C(a3);
    if (CFEqual(v38, @"kInHomeCountryNotification"))
    {
      *(_OWORD *)buf = 0u;
      long long v174 = 0u;
      int v175 = 1065353216;
      if (sub_101330A88(*a4, (uint64_t)buf))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10230B640);
        }
        int v39 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(v171.__r_.__value_.__l.__data_) = 0;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
          int v40 = *((unsigned __int8 *)sub_10097F690((uint64_t)buf, (int *)&v171, (uint64_t)&unk_101D0B290, &__str) + 20);
          *(void *)__p = 68289539;
          *(_WORD *)&__p[8] = 2082;
          *(void *)&__p[10] = "";
          *(_WORD *)&__p[18] = 1026;
          *(_DWORD *)&__p[20] = 0;
          *(_WORD *)&__p[24] = 1025;
          *(_DWORD *)&__p[26] = v40;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon,kInHomeCountryNotification\", \"sim\":%{public}d, \"inHomeCountry\":%{private}d}", __p, 0x1Eu);
        }
        uint64_t v41 = *(void *)(a1 + 688);
        LODWORD(__str.__r_.__value_.__l.__data_) = 0;
        *(void *)__p = &__str;
        unint64_t v42 = sub_10097F690((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101D0B290, (_DWORD **)__p);
        sub_10147B28C(v41, 0, *((unsigned __int8 *)v42 + 20));
        if (*(unsigned char *)(a1 + 133))
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10230B640);
          }
          uint8x8_t v43 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(v171.__r_.__value_.__l.__data_) = 1;
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
            int v44 = *((unsigned __int8 *)sub_10097F690((uint64_t)buf, (int *)&v171, (uint64_t)&unk_101D0B290, &__str) + 20);
            *(void *)__p = 68289539;
            *(_WORD *)&__p[8] = 2082;
            *(void *)&__p[10] = "";
            *(_WORD *)&__p[18] = 1026;
            *(_DWORD *)&__p[20] = 1;
            *(_WORD *)&__p[24] = 1025;
            *(_DWORD *)&__p[26] = v44;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon,kInHomeCountryNotification\", \"sim\":%{public}d, \"inHomeCountry\":%{private}d}", __p, 0x1Eu);
          }
          uint64_t v45 = *(void *)(a1 + 688);
          LODWORD(__str.__r_.__value_.__l.__data_) = 1;
          *(void *)__p = &__str;
          uint64_t v46 = sub_10097F690((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101D0B290, (_DWORD **)__p);
          sub_10147B28C(v45, 1, *((unsigned __int8 *)v46 + 20));
        }
        goto LABEL_81;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10230B640);
      }
      int v57 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "#EmergCon,kInHomeCountryNotification,error fetching InHomeCountry", __p, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_81;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10230B640);
      }
      LOWORD(__str.__r_.__value_.__l.__data_) = 0;
      uint64_t v120 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v120);
      if (v120 == __p) {
        goto LABEL_81;
      }
LABEL_262:
      free(v120);
LABEL_81:
      sub_1000D7D80((uint64_t)buf);
      return;
    }
    unint64_t v48 = (const void *)sub_1000FA17C(a3);
    if (CFEqual(v48, @"kDataStatusNotification"))
    {
      *(_OWORD *)buf = 0u;
      long long v174 = 0u;
      int v175 = 1065353216;
      if (sub_10133145C(*a4, (uint64_t)buf))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10230B640);
        }
        uint64_t v49 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v171.__r_.__value_.__l.__data_) = 0;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
          int v50 = *((unsigned __int8 *)sub_1007006D0((uint64_t)buf, (int *)&v171, (uint64_t)&unk_101D0B290, &__str) + 52);
          *(void *)__p = 68289538;
          *(_WORD *)&__p[8] = 2082;
          *(void *)&__p[10] = "";
          *(_WORD *)&__p[18] = 1026;
          *(_DWORD *)&__p[20] = 0;
          *(_WORD *)&__p[24] = 1026;
          *(_DWORD *)&__p[26] = v50;
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmergCon,kDataStatusNotification\", \"inst\":%{public}d, \"InHomeCountry\":%{public}d}", __p, 0x1Eu);
        }
        uint64_t v51 = *(void *)(a1 + 688);
        LODWORD(__str.__r_.__value_.__l.__data_) = 0;
        *(void *)__p = &__str;
        unint64_t v52 = sub_1007006D0((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101D0B290, (_DWORD **)__p);
        sub_10147B28C(v51, 0, *((unsigned __int8 *)v52 + 52));
        if (*(unsigned char *)(a1 + 133))
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10230B640);
          }
          int v53 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v171.__r_.__value_.__l.__data_) = 1;
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
            int v54 = *((unsigned __int8 *)sub_1007006D0((uint64_t)buf, (int *)&v171, (uint64_t)&unk_101D0B290, &__str) + 52);
            *(void *)__p = 68289538;
            *(_WORD *)&__p[8] = 2082;
            *(void *)&__p[10] = "";
            *(_WORD *)&__p[18] = 1026;
            *(_DWORD *)&__p[20] = 1;
            *(_WORD *)&__p[24] = 1026;
            *(_DWORD *)&__p[26] = v54;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmergCon,kDataStatusNotification\", \"inst\":%{public}d, \"InHomeCountry\":%{public}d}", __p, 0x1Eu);
          }
          uint64_t v55 = *(void *)(a1 + 688);
          LODWORD(__str.__r_.__value_.__l.__data_) = 1;
          *(void *)__p = &__str;
          __int16 v56 = sub_1007006D0((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101D0B290, (_DWORD **)__p);
          sub_10147B28C(v55, 1, *((unsigned __int8 *)v56 + 52));
        }
        goto LABEL_81;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10230B640);
      }
      __int16 v64 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "#EmergCon,kDataStatusNotification,error fetching InHomeCountry", __p, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_81;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10230B640);
      }
      LOWORD(__str.__r_.__value_.__l.__data_) = 0;
      uint64_t v120 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v120);
      if (v120 == __p) {
        goto LABEL_81;
      }
      goto LABEL_262;
    }
    __int16 v58 = (const void *)sub_1000FA17C(a3);
    if (CFEqual(v58, @"kPhoneNumberStatusNotification"))
    {
      *(_OWORD *)buf = 0u;
      long long v174 = 0u;
      int v175 = 1065353216;
      if (sub_1013333DC(*a4, (uint64_t)buf))
      {
        *(_DWORD *)__p = 0;
        if (sub_10011853C(buf, (int *)__p))
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10230B640);
          }
          uint64_t v59 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(v171.__r_.__value_.__l.__data_) = 0;
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
            uint64_t v60 = sub_100981438((uint64_t)buf, (int *)&v171, (uint64_t)&unk_101D0B290, &__str);
            int v61 = v60 + 3;
            if (*((char *)v60 + 47) < 0) {
              int v61 = (void *)*v61;
            }
            *(_DWORD *)__p = 136380675;
            *(void *)&__p[4] = v61;
            _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "#EmergCon,kPhoneNumberStatusNotification,phoneNumberOne,%{private}s", __p, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_10230B640);
            }
            unsigned int v168 = 0;
            v171.__r_.__value_.__r.__words[0] = (std::string::size_type)&v168;
            __int16 v132 = sub_100981438((uint64_t)buf, (int *)&v168, (uint64_t)&unk_101D0B290, &v171);
            uint64_t v133 = v132 + 3;
            if (*((char *)v132 + 47) < 0) {
              uint64_t v133 = (void *)*v133;
            }
            LODWORD(__str.__r_.__value_.__l.__data_) = 136380675;
            *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v133;
            __int16 v134 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v134);
            if (v134 != __p) {
              free(v134);
            }
          }
          uint64_t v62 = *(void *)(a1 + 688);
          LODWORD(__str.__r_.__value_.__l.__data_) = 0;
          *(void *)__p = &__str;
          int v63 = sub_100981438((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101D0B290, (_DWORD **)__p);
          if (*((char *)v63 + 47) < 0) {
            sub_1000DC48C(&__dst, (void *)v63[3], v63[4]);
          }
          else {
            std::string __dst = *(std::string *)((unsigned char *)v63 + 1);
          }
          sub_10147D430(v62, 0, &__dst);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
        }
        if (*(unsigned char *)(a1 + 133))
        {
          *(_DWORD *)__p = 1;
          if (sub_10011853C(buf, (int *)__p))
          {
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_10230B640);
            }
            int v85 = qword_1024193E8;
            if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(v171.__r_.__value_.__l.__data_) = 1;
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
              double v86 = sub_100981438((uint64_t)buf, (int *)&v171, (uint64_t)&unk_101D0B290, &__str);
              int v87 = v86 + 3;
              if (*((char *)v86 + 47) < 0) {
                int v87 = (void *)*v87;
              }
              *(_DWORD *)__p = 136380675;
              *(void *)&__p[4] = v87;
              _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "#EmergCon,kPhoneNumberStatusNotification,phoneNumberTwo,%{private}s", __p, 0xCu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(__p, 0x65CuLL);
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_10230B640);
              }
              unsigned int v168 = 1;
              v171.__r_.__value_.__r.__words[0] = (std::string::size_type)&v168;
              uint64_t v135 = sub_100981438((uint64_t)buf, (int *)&v168, (uint64_t)&unk_101D0B290, &v171);
              __int16 v136 = v135 + 3;
              if (*((char *)v135 + 47) < 0) {
                __int16 v136 = (void *)*v136;
              }
              LODWORD(__str.__r_.__value_.__l.__data_) = 136380675;
              *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v136;
              uint64_t v137 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v137);
              if (v137 != __p) {
                free(v137);
              }
            }
            uint64_t v88 = *(void *)(a1 + 688);
            LODWORD(__str.__r_.__value_.__l.__data_) = 1;
            *(void *)__p = &__str;
            int v89 = sub_100981438((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101D0B290, (_DWORD **)__p);
            if (*((char *)v89 + 47) < 0) {
              sub_1000DC48C(&v166, (void *)v89[3], v89[4]);
            }
            else {
              std::string v166 = *(std::string *)((unsigned char *)v89 + 1);
            }
            sub_10147D430(v88, 1u, &v166);
            if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v166.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10230B640);
        }
        uint64_t v67 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__p = 0;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "#EmergCon,kPhoneNumberStatusNotification,error fetching phone numbers", __p, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10230B640);
          }
          LOWORD(__str.__r_.__value_.__l.__data_) = 0;
          int v68 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v68);
          if (v68 != __p) {
            free(v68);
          }
        }
      }
      sub_1000DB114((uint64_t)buf);
      return;
    }
    int v65 = (const void *)sub_1000FA17C(a3);
    if (CFEqual(v65, @"kAltAccountConfiguredNotification"))
    {
      __str.__r_.__value_.__s.__data_[0] = 0;
      if (sub_101333538(*a4, (BOOL *)&__str))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10230B640);
        }
        __int16 v66 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__p = 67174657;
          *(_DWORD *)&__p[4] = __str.__r_.__value_.__s.__data_[0];
          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "#EmergCon,kAltAccountConfiguredNotification,isAltAccountConfigured,%{private}d", __p, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10230B640);
          }
          *(_DWORD *)buf = 67174657;
          *(_DWORD *)&uint8_t buf[4] = __str.__r_.__value_.__s.__data_[0];
          __int16 v138 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v138);
          if (v138 != __p) {
            free(v138);
          }
        }
        sub_10147E290(*(void *)(a1 + 688), __str.__r_.__value_.__s.__data_[0]);
        return;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10230B640);
      }
      int v83 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_ERROR, "#EmergCon,kAltAccountConfiguredNotification,error fetching alt account configuration", __p, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193E0 == -1)
        {
LABEL_151:
          *(_WORD *)buf = 0;
          uint64_t v84 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v84);
          goto LABEL_152;
        }
LABEL_365:
        dispatch_once(&qword_1024193E0, &stru_10230B640);
        goto LABEL_151;
      }
    }
    else
    {
      char v69 = (const void *)sub_1000FA17C(a3);
      if (CFEqual(v69, @"kSimStatusChangeNotification"))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10230B640);
        }
        uint64_t v70 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
        {
          *(void *)__p = 68289282;
          *(_WORD *)&__p[8] = 2082;
          *(void *)&__p[10] = "";
          *(_WORD *)&__p[18] = 2082;
          *(void *)&__p[20] = "CLTelephonyService_Type::kSimStatusChangeNotification";
          _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon EMERGENCY:notification\", \"notif\":%{public, location:escape_only}s}", __p, 0x1Cu);
        }
        *(_OWORD *)buf = 0u;
        long long v174 = 0u;
        int v175 = 1065353216;
        if (sub_101331F28(*a4, (uint64_t)buf))
        {
          memset(&__str, 0, sizeof(__str));
          memset(&v171, 0, sizeof(v171));
          unsigned int v168 = 0;
          *(void *)__p = &v168;
          char v71 = (const std::string *)sub_100981110((uint64_t)buf, (int *)&v168, (uint64_t)&unk_101D0B290, (_DWORD **)__p);
          std::string::operator=(&__str, v71 + 1);
          unsigned int v168 = 0;
          *(void *)__p = &v168;
          int v72 = (const std::string *)sub_100981110((uint64_t)buf, (int *)&v168, (uint64_t)&unk_101D0B290, (_DWORD **)__p);
          std::string::operator=(&v171, v72 + 2);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10230B640);
          }
          int v73 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
          {
            p_str = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            uint64_t v75 = &v171;
            if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v75 = (std::string *)v171.__r_.__value_.__r.__words[0];
            }
            *(void *)__p = 68289795;
            *(_WORD *)&__p[8] = 2082;
            *(void *)&__p[10] = "";
            *(_WORD *)&__p[18] = 1026;
            *(_DWORD *)&__p[20] = 0;
            *(_WORD *)&__p[24] = 2081;
            *(void *)&__p[26] = p_str;
            *(_WORD *)&__p[34] = 2081;
            v177 = v75;
            _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon,kSimStatusChangeNotification\", \"sim\":%{public}d, \"imsi\":%{private, location:escape_only}s, \"imei\":%{private, location:escape_only}s}", __p, 0x2Cu);
          }
          sub_10147C1A4(*(void *)(a1 + 688), 0, &__str, &v171);
          unsigned int v168 = 0;
          *(void *)__p = &v168;
          int v76 = (std::string *)sub_100981438(a1 + 312, (int *)&v168, (uint64_t)&unk_101D0B290, (_DWORD **)__p);
          std::string::operator=(v76 + 1, &__str);
          if (*(unsigned char *)(a1 + 133))
          {
            unsigned int v168 = 1;
            *(void *)__p = &v168;
            __int16 v77 = (const std::string *)sub_100981110((uint64_t)buf, (int *)&v168, (uint64_t)&unk_101D0B290, (_DWORD **)__p);
            std::string::operator=(&__str, v77 + 1);
            unsigned int v168 = 1;
            *(void *)__p = &v168;
            uint64_t v78 = (const std::string *)sub_100981110((uint64_t)buf, (int *)&v168, (uint64_t)&unk_101D0B290, (_DWORD **)__p);
            std::string::operator=(&v171, v78 + 2);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_10230B640);
            }
            int v79 = qword_1024193E8;
            if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
            {
              std::string::size_type v80 = &__str;
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v80 = (std::string *)__str.__r_.__value_.__r.__words[0];
              }
              int v81 = &v171;
              if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                int v81 = (std::string *)v171.__r_.__value_.__r.__words[0];
              }
              *(void *)__p = 68289795;
              *(_WORD *)&__p[8] = 2082;
              *(void *)&__p[10] = "";
              *(_WORD *)&__p[18] = 1026;
              *(_DWORD *)&__p[20] = 1;
              *(_WORD *)&__p[24] = 2081;
              *(void *)&__p[26] = v80;
              *(_WORD *)&__p[34] = 2081;
              v177 = v81;
              _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon,kSimStatusChangeNotification\", \"sim\":%{public}d, \"imsi\":%{private, location:escape_only}s, \"imei\":%{private, location:escape_only}s}", __p, 0x2Cu);
            }
            sub_10147C1A4(*(void *)(a1 + 688), 1, &__str, &v171);
            unsigned int v168 = 1;
            *(void *)__p = &v168;
            int v82 = (std::string *)sub_100981438(a1 + 312, (int *)&v168, (uint64_t)&unk_101D0B290, (_DWORD **)__p);
            std::string::operator=(v82 + 1, &__str);
          }
          if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v171.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10230B640);
          }
          double v96 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)__p = 0;
            _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_ERROR, "#EmergCon,kSimStatusChangeNotification,error fetching imsi and imei", __p, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_10230B640);
            }
            LOWORD(__str.__r_.__value_.__l.__data_) = 0;
            uint64_t v149 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v149);
            if (v149 != __p) {
              free(v149);
            }
          }
        }
        sub_100981028((uint64_t)buf);
      }
      else
      {
        __int16 v95 = (const void *)sub_1000FA17C(a3);
        if (CFEqual(v95, @"kCellInfoNotification"))
        {
          *(_OWORD *)buf = 0u;
          long long v174 = 0u;
          int v175 = 1065353216;
          if (sub_1000FF5A4(*a4, (uint64_t)buf))
          {
            sub_1000F326C(a1, 0, (uint64_t)buf);
            if (sub_1000FFBA8()) {
              sub_1000F326C(a1, 1, (uint64_t)buf);
            }
          }
          else
          {
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_10230B640);
            }
            __int16 v105 = qword_1024193E8;
            if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)__p = 0;
              _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_ERROR, "#EmergCon,#ci,kCellInfoNotification,error fetching cell info", __p, 2u);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(__p, 0x65CuLL);
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_10230B640);
              }
              LOWORD(__str.__r_.__value_.__l.__data_) = 0;
              __int16 v154 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v154);
              if (v154 != __p) {
                free(v154);
              }
            }
          }
          sub_1000FF568((uint64_t)buf);
        }
        else
        {
          uint64_t v100 = (const void *)sub_1000FA17C(a3);
          if (CFEqual(v100, @"kSmsSentNotification"))
          {
            *(void *)buf = 0;
            BOOL v165 = 0;
            LODWORD(__str.__r_.__value_.__l.__data_) = 0;
            LODWORD(v171.__r_.__value_.__l.__data_) = -1;
            unsigned int v168 = -1;
            if (sub_101332FF8(*a4, buf, &v165, &__str, &v171, &v168))
            {
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_10230B640);
              }
              __int16 v101 = qword_1024193E8;
              if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
              {
                unsigned int v102 = [*(id *)buf slotID];
                *(void *)__p = 68290306;
                *(_WORD *)&__p[8] = 2082;
                *(void *)&__p[10] = "";
                *(_WORD *)&__p[18] = 1026;
                *(_DWORD *)&__p[20] = v102;
                *(_WORD *)&__p[24] = 1026;
                *(_DWORD *)&__p[26] = v165;
                *(_WORD *)&__p[30] = 1026;
                *(_DWORD *)&__p[32] = __str.__r_.__value_.__l.__data_;
                LOWORD(v177) = 1026;
                *(_DWORD *)((char *)&v177 + 2) = v171.__r_.__value_.__l.__data_;
                HIWORD(v177) = 1026;
                unsigned int v178 = v168;
                _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon,kSmsSentNotification\", \"inst\":%{public}d, \"success\":%{public}hhd, \"messageID\":%{public}d, \"sendError\":%{public}d, \"modemError\":%{public}d}", __p, 0x30u);
              }
              uint64_t v103 = *(void *)(a1 + 688);
              uint64_t v104 = sub_100090424((uint64_t)[*(id *)buf slotID]);
              sub_10147BED4(v103, v104, v165, LODWORD(__str.__r_.__value_.__l.__data_), LODWORD(v171.__r_.__value_.__l.__data_), v168);
            }
            else
            {
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_10230B640);
              }
              __int16 v115 = qword_1024193E8;
              if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)__p = 0;
                _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_ERROR, "#EmergCon,kSmsSentNotification,error fetching SMS info", __p, 2u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1024193E0 != -1) {
                  dispatch_once(&qword_1024193E0, &stru_10230B640);
                }
                uint64_t v84 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v84);
LABEL_152:
                if (v84 == __p) {
                  return;
                }
LABEL_185:
                free(v84);
              }
            }
          }
          else
          {
            __int16 v106 = (const void *)sub_1000FA17C(a3);
            if (CFEqual(v106, @"kSubscriberMccAndMncNotification"))
            {
              *(_OWORD *)buf = 0u;
              long long v174 = 0u;
              int v175 = 1065353216;
              if (sub_1000D1F9C(*a4, (uint64_t)buf))
              {
                LODWORD(__str.__r_.__value_.__l.__data_) = 0;
                *(void *)__p = &__str;
                int v107 = *((_DWORD *)sub_1000D22E4((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101D0B290, (_DWORD **)__p)
                       + 5);
                LODWORD(__str.__r_.__value_.__l.__data_) = 0;
                *(void *)__p = &__str;
                int v108 = *((_DWORD *)sub_1000D22E4((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101D0B290, (_DWORD **)__p)
                       + 6);
                LODWORD(__str.__r_.__value_.__l.__data_) = 0;
                *(void *)__p = &__str;
                int v109 = *((unsigned __int8 *)sub_1000D22E4((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101D0B290, (_DWORD **)__p)+ 28);
                if (qword_1024193E0 != -1) {
                  dispatch_once(&qword_1024193E0, &stru_10230B640);
                }
                uint64_t v110 = qword_1024193E8;
                if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
                {
                  *(void *)__p = 68290050;
                  *(_WORD *)&__p[8] = 2082;
                  *(void *)&__p[10] = "";
                  *(_WORD *)&__p[18] = 1026;
                  *(_DWORD *)&__p[20] = 0;
                  *(_WORD *)&__p[24] = 1026;
                  *(_DWORD *)&__p[26] = v107;
                  *(_WORD *)&__p[30] = 1026;
                  *(_DWORD *)&__p[32] = v108;
                  LOWORD(v177) = 1026;
                  *(_DWORD *)((char *)&v177 + 2) = v109;
                  _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon,kSubscriberMccAndMncNotification\", \"sim\":%{public}d, \"mcc\":%{public}d, \"mnc\":%{public}d, \"is3DigitMnc\":%{public}hhd}", __p, 0x2Au);
                }
                sub_10147C510(*(std::string **)(a1 + 688), 0, v107, v108);
                LODWORD(__str.__r_.__value_.__l.__data_) = 0;
                *(void *)__p = &__str;
                *((_DWORD *)sub_1000F3C48(a1 + 352, (int *)&__str, (uint64_t)&unk_101D0B290, (_DWORD **)__p) + 5) = v107;
                LODWORD(__str.__r_.__value_.__l.__data_) = 0;
                *(void *)__p = &__str;
                *((_DWORD *)sub_1000F3C48(a1 + 392, (int *)&__str, (uint64_t)&unk_101D0B290, (_DWORD **)__p) + 5) = v108;
                if (*(unsigned char *)(a1 + 133))
                {
                  LODWORD(__str.__r_.__value_.__l.__data_) = 1;
                  *(void *)__p = &__str;
                  int v111 = *((_DWORD *)sub_1000D22E4((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101D0B290, (_DWORD **)__p)
                         + 5);
                  LODWORD(__str.__r_.__value_.__l.__data_) = 1;
                  *(void *)__p = &__str;
                  int v112 = *((_DWORD *)sub_1000D22E4((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101D0B290, (_DWORD **)__p)
                         + 6);
                  LODWORD(__str.__r_.__value_.__l.__data_) = 1;
                  *(void *)__p = &__str;
                  int v113 = *((unsigned __int8 *)sub_1000D22E4((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101D0B290, (_DWORD **)__p)+ 28);
                  if (qword_1024193E0 != -1) {
                    dispatch_once(&qword_1024193E0, &stru_10230B640);
                  }
                  int v114 = qword_1024193E8;
                  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
                  {
                    *(void *)__p = 68290050;
                    *(_WORD *)&__p[8] = 2082;
                    *(void *)&__p[10] = "";
                    *(_WORD *)&__p[18] = 1026;
                    *(_DWORD *)&__p[20] = 1;
                    *(_WORD *)&__p[24] = 1026;
                    *(_DWORD *)&__p[26] = v111;
                    *(_WORD *)&__p[30] = 1026;
                    *(_DWORD *)&__p[32] = v112;
                    LOWORD(v177) = 1026;
                    *(_DWORD *)((char *)&v177 + 2) = v113;
                    _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon,kSubscriberMccAndMncNotification\", \"sim\":%{public}d, \"mcc\":%{public}d, \"mnc\":%{public}d, \"is3DigitMnc\":%{public}hhd}", __p, 0x2Au);
                  }
                  sub_10147C510(*(std::string **)(a1 + 688), 1, v111, v112);
                  LODWORD(__str.__r_.__value_.__l.__data_) = 1;
                  *(void *)__p = &__str;
                  *((_DWORD *)sub_1000F3C48(a1 + 352, (int *)&__str, (uint64_t)&unk_101D0B290, (_DWORD **)__p) + 5) = v111;
                  LODWORD(__str.__r_.__value_.__l.__data_) = 1;
                  *(void *)__p = &__str;
                  *((_DWORD *)sub_1000F3C48(a1 + 392, (int *)&__str, (uint64_t)&unk_101D0B290, (_DWORD **)__p) + 5) = v112;
                }
              }
              else
              {
                if (qword_1024193E0 != -1) {
                  dispatch_once(&qword_1024193E0, &stru_10230B640);
                }
                __int16 v119 = qword_1024193E8;
                if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)__p = 0;
                  _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_ERROR, "#EmergCon,kSubscriberMccAndMncNotification,error fetching MCC and MNC", __p, 2u);
                }
                if (sub_10013D1A0(115, 0))
                {
                  bzero(__p, 0x65CuLL);
                  if (qword_1024193E0 != -1) {
                    dispatch_once(&qword_1024193E0, &stru_10230B640);
                  }
                  LOWORD(__str.__r_.__value_.__l.__data_) = 0;
                  double v155 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v155);
                  if (v155 != __p) {
                    free(v155);
                  }
                }
              }
              sub_1000D7D80((uint64_t)buf);
            }
            else
            {
              __int16 v117 = (const void *)sub_1000FA17C(a3);
              if (CFEqual(@"kCLTelephonyServiceDisconnectedNotification", v117))
              {
                if (qword_1024193E0 != -1) {
                  dispatch_once(&qword_1024193E0, &stru_10230B640);
                }
                uint64_t v118 = qword_1024193E8;
                if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
                {
                  *(void *)__p = 68289282;
                  *(_WORD *)&__p[8] = 2082;
                  *(void *)&__p[10] = "";
                  *(_WORD *)&__p[18] = 2082;
                  *(void *)&__p[20] = "CLTelephonyService_Type::kDisconnectedNotification";
                  _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon EMERGENCY:notification\", \"notif\":%{public, location:escape_only}s}", __p, 0x1Cu);
                }
                *(void *)(a1 + 48) = 0;
                sub_10101BE7C(a1, 0);
                *(unsigned char *)(a1 + 92) = 0;
                *(void *)(a1 + 96) = 0x400000000;
                *(_WORD *)(a1 + 104) = 256;
                *(unsigned char *)(a1 + 106) = 0;
                *(_DWORD *)(a1 + 108) = 255;
                sub_101019704(a1);
              }
              else
              {
                __int16 v121 = (const void *)sub_1000FA17C(a3);
                if (CFEqual(@"kLinkQualityNotification", v121))
                {
                  double v122 = *(unsigned int ***)(a1 + 672);
                  if (v122 && *v122) {
                    sub_100F7DAE8(*v122, *a4);
                  }
                }
                else
                {
                  __int16 v123 = (const void *)sub_1000FA17C(a3);
                  if (CFEqual(@"kCLCellularTransmitStateNotification", v123))
                  {
                    if (qword_1024193E0 != -1) {
                      dispatch_once(&qword_1024193E0, &stru_10230B640);
                    }
                    int v124 = qword_1024193E8;
                    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)__p = 0;
                      _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_DEBUG, "#EmergencyBiome, Biome RRC notification", __p, 2u);
                    }
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(__p, 0x65CuLL);
                      if (qword_1024193E0 != -1) {
                        dispatch_once(&qword_1024193E0, &stru_10230B640);
                      }
                      *(_WORD *)buf = 0;
                      __int16 v156 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v156);
                      if (v156 != __p) {
                        free(v156);
                      }
                    }
                    memset(__p, 0, 24);
                    sub_10013FA80((int)buf, *a4);
                    __str.__r_.__value_.__s.__data_[0] = 0;
                    uint64_t v125 = *(void **)(a1 + 672);
                    if (v125 && *v125)
                    {
                      if (sub_1000D29FC((uint64_t)buf, @"kCLCellularTransmitStateNotification", (BOOL *)&__str))
                      {
                        __int16 v126 = **(const std::string ***)(a1 + 672);
                        if (__str.__r_.__value_.__s.__data_[0]) {
                          double v127 = v126 + 4;
                        }
                        else {
                          double v127 = v126 + 3;
                        }
                      }
                      else
                      {
                        double v127 = (const std::string *)(**(void **)(a1 + 672) + 48);
                      }
                      std::string::operator=((std::string *)__p, v127);
                      sub_100F7DE38(**(void **)(a1 + 672), (uint64_t)__p);
                    }
                    sub_10013F3C4(buf);
                    if ((__p[23] & 0x80000000) != 0) {
                      operator delete(*(void **)__p);
                    }
                  }
                  else
                  {
                    __int16 v128 = (const void *)sub_1000FA17C(a3);
                    if (CFEqual(@"kStewieSupportNotification", v128))
                    {
                      __str.__r_.__value_.__s.__data_[0] = 0;
                      BOOL v129 = sub_101334B5C(*a4, &__str);
                      int v130 = _os_feature_enabled_impl();
                      if (v129)
                      {
                        if (v130)
                        {
                          if (qword_1024193E0 != -1) {
                            dispatch_once(&qword_1024193E0, &stru_10230B640);
                          }
                          double v131 = qword_1024193E8;
                          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
                          {
                            *(_DWORD *)__p = 67240192;
                            *(_DWORD *)&__p[4] = __str.__r_.__value_.__s.__data_[0];
                            _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_DEBUG, "#EmergCon,kStewieSupportNotification,supported,%{public}d", __p, 8u);
                          }
                          if (sub_10013D1A0(115, 2))
                          {
                            bzero(__p, 0x65CuLL);
                            if (qword_1024193E0 != -1) {
                              dispatch_once(&qword_1024193E0, &stru_10230B640);
                            }
                            *(_DWORD *)buf = 67240192;
                            *(_DWORD *)&uint8_t buf[4] = __str.__r_.__value_.__s.__data_[0];
                            int v157 = (char *)_os_log_send_and_compose_impl();
                            sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v157);
                            if (v157 != __p) {
                              free(v157);
                            }
                          }
                        }
                        sub_10147E29C(*(void *)(a1 + 688), __str.__r_.__value_.__s.__data_[0]);
                      }
                      else if (v130)
                      {
                        if (qword_1024193E0 != -1) {
                          dispatch_once(&qword_1024193E0, &stru_10230B640);
                        }
                        __int16 v148 = qword_1024193E8;
                        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
                        {
                          *(_WORD *)__p = 0;
                          _os_log_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_ERROR, "#EmergCon,kStewieSupportNotification,error fetching Stewie support", __p, 2u);
                        }
                        if (sub_10013D1A0(115, 0))
                        {
                          bzero(__p, 0x65CuLL);
                          if (qword_1024193E0 == -1) {
                            goto LABEL_151;
                          }
                          goto LABEL_365;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v139 = (const void *)sub_1000FA17C(a3);
                      if (CFEqual(v139, @"kImsRegStatusNotification"))
                      {
                        *(_OWORD *)buf = 0u;
                        long long v174 = 0u;
                        int v175 = 1065353216;
                        if (sub_101334D68(*a4, (uint64_t)buf))
                        {
                          if (qword_1024193E0 != -1) {
                            dispatch_once(&qword_1024193E0, &stru_10230B640);
                          }
                          __int16 v140 = qword_1024193E8;
                          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
                          {
                            LODWORD(v171.__r_.__value_.__l.__data_) = 0;
                            *(void *)__p = &v171;
                            int v141 = *((unsigned __int8 *)sub_10098170C((uint64_t)buf, (int *)&v171, (uint64_t)&unk_101D0B290, (_DWORD **)__p)+ 20);
                            LODWORD(__str.__r_.__value_.__l.__data_) = 67240192;
                            HIDWORD(__str.__r_.__value_.__r.__words[0]) = v141;
                            _os_log_impl((void *)&_mh_execute_header, v140, OS_LOG_TYPE_DEBUG, "#EmergCon, Received kImsRegStatusNotification with sms reg status %{public}d", (uint8_t *)&__str, 8u);
                          }
                          if (sub_10013D1A0(115, 2))
                          {
                            bzero(__p, 0x65CuLL);
                            if (qword_1024193E0 != -1) {
                              dispatch_once(&qword_1024193E0, &stru_10230B640);
                            }
                            unsigned int v168 = 0;
                            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v168;
                            int v159 = *((unsigned __int8 *)sub_10098170C((uint64_t)buf, (int *)&v168, (uint64_t)&unk_101D0B290, &__str)+ 20);
                            LODWORD(v171.__r_.__value_.__l.__data_) = 67240192;
                            HIDWORD(v171.__r_.__value_.__r.__words[0]) = v159;
                            v160 = (char *)_os_log_send_and_compose_impl();
                            sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v160);
                            if (v160 != __p) {
                              free(v160);
                            }
                          }
                          uint64_t v142 = *(void *)(a1 + 688);
                          LODWORD(__str.__r_.__value_.__l.__data_) = 0;
                          *(void *)__p = &__str;
                          uint64_t v143 = sub_10098170C((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101D0B290, (_DWORD **)__p);
                          sub_10147E564(v142, 0, (unsigned char *)v143 + 20);
                          if (sub_1000FFBA8())
                          {
                            if (qword_1024193E0 != -1) {
                              dispatch_once(&qword_1024193E0, &stru_10230B640);
                            }
                            __int16 v144 = qword_1024193E8;
                            if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
                            {
                              LODWORD(v171.__r_.__value_.__l.__data_) = 1;
                              *(void *)__p = &v171;
                              int v145 = *((unsigned __int8 *)sub_10098170C((uint64_t)buf, (int *)&v171, (uint64_t)&unk_101D0B290, (_DWORD **)__p)+ 20);
                              LODWORD(__str.__r_.__value_.__l.__data_) = 67240192;
                              HIDWORD(__str.__r_.__value_.__r.__words[0]) = v145;
                              _os_log_impl((void *)&_mh_execute_header, v144, OS_LOG_TYPE_DEBUG, "#EmergCon, Received kImsRegStatusNotification with sms reg status %{public}d", (uint8_t *)&__str, 8u);
                            }
                            if (sub_10013D1A0(115, 2))
                            {
                              bzero(__p, 0x65CuLL);
                              if (qword_1024193E0 != -1) {
                                dispatch_once(&qword_1024193E0, &stru_10230B640);
                              }
                              unsigned int v168 = 1;
                              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v168;
                              int v163 = *((unsigned __int8 *)sub_10098170C((uint64_t)buf, (int *)&v168, (uint64_t)&unk_101D0B290, &__str)+ 20);
                              LODWORD(v171.__r_.__value_.__l.__data_) = 67240192;
                              HIDWORD(v171.__r_.__value_.__r.__words[0]) = v163;
                              v164 = (char *)_os_log_send_and_compose_impl();
                              sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v164);
                              if (v164 != __p) {
                                free(v164);
                              }
                            }
                            uint64_t v146 = *(void *)(a1 + 688);
                            LODWORD(__str.__r_.__value_.__l.__data_) = 1;
                            *(void *)__p = &__str;
                            uint64_t v147 = sub_10098170C((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101D0B290, (_DWORD **)__p);
                            sub_10147E564(v146, 1u, (unsigned char *)v147 + 20);
                          }
                        }
                        else
                        {
                          if (qword_1024193E0 != -1) {
                            dispatch_once(&qword_1024193E0, &stru_10230B640);
                          }
                          uint64_t v153 = qword_1024193E8;
                          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
                          {
                            *(_WORD *)__p = 0;
                            _os_log_impl((void *)&_mh_execute_header, v153, OS_LOG_TYPE_ERROR, "#EmergCon,#ci,kImsRegStatusNotification,error fetching cell info", __p, 2u);
                          }
                          if (sub_10013D1A0(115, 0))
                          {
                            bzero(__p, 0x65CuLL);
                            if (qword_1024193E0 != -1) {
                              dispatch_once(&qword_1024193E0, &stru_10230B640);
                            }
                            LOWORD(__str.__r_.__value_.__l.__data_) = 0;
                            char v158 = (char *)_os_log_send_and_compose_impl();
                            sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v158);
                            if (v158 != __p) {
                              free(v158);
                            }
                          }
                        }
                        sub_1000D7D80((uint64_t)buf);
                      }
                      else
                      {
                        __int16 v150 = (const void *)sub_1000FA17C(a3);
                        if (CFEqual(v150, @"kVoiceLinkQualityNotification"))
                        {
                          if (qword_1024193E0 != -1) {
                            dispatch_once(&qword_1024193E0, &stru_10230B640);
                          }
                          uint64_t v151 = qword_1024193E8;
                          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
                          {
                            CFDictionaryRef v152 = *a4;
                            *(_DWORD *)__p = 138543362;
                            *(void *)&__p[4] = v152;
                            _os_log_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_DEBUG, "#EmergCon, Received kVoiceLinkQualityNotification with vlqm %{public}@", __p, 0xCu);
                          }
                          if (sub_10013D1A0(115, 2))
                          {
                            bzero(__p, 0x65CuLL);
                            if (qword_1024193E0 != -1) {
                              dispatch_once(&qword_1024193E0, &stru_10230B640);
                            }
                            CFDictionaryRef v161 = *a4;
                            *(_DWORD *)buf = 138543362;
                            *(void *)&uint8_t buf[4] = v161;
                            uint64_t v162 = (char *)_os_log_send_and_compose_impl();
                            sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v162);
                            if (v162 != __p) {
                              free(v162);
                            }
                          }
                          if (sub_1013352A0(*a4, a1 + 472)) {
                            sub_10147DFE4(*(void *)(a1 + 688), a1 + 472);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10230B640);
    }
    uint64_t v90 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v91 = (const __CFString *)sub_1000FA17C(a3);
      sub_1000FECE0(v91, (uint64_t)__p);
      int v92 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v92;
      _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_ERROR, "#EmergCon,dropping %{public}s,empty data", buf, 0xCu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10230B640);
      }
      CFStringRef v93 = (const __CFString *)sub_1000FA17C(a3);
      sub_1000FECE0(v93, (uint64_t)buf);
      if ((SBYTE7(v174) & 0x80u) == 0) {
        double v94 = buf;
      }
      else {
        double v94 = *(uint8_t **)buf;
      }
      LODWORD(__str.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v94;
      uint64_t v84 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE7(v174) < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v84);
      if (v84 != __p) {
        goto LABEL_185;
      }
    }
  }
}

void sub_1000CE580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
}

id sub_1000CE770(uint64_t a1, id *a2)
{
  id v4 = [*a2 objectForKey:@"kSlotOne"];
  id v5 = [*a2 objectForKey:@"kSlotTwo"];
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102307DD0);
  }
  long long v6 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 68289794;
    v8[1] = 0;
    __int16 v9 = 2082;
    unint64_t v10 = "";
    __int16 v11 = 2050;
    uint64_t v12 = 1;
    __int16 v13 = 2114;
    id v14 = v4;
    __int16 v15 = 2114;
    id v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#msim update CellInfo\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"CellInfoSimOne\":%{public, location:escape_only}@, \"CellInfoSimTwo\":%{public, location:escape_only}@}", (uint8_t *)v8, 0x30u);
  }
  if ([v4 count])
  {

    *(void *)(a1 + 472) = v4;
  }
  id result = [v5 count];
  if (result)
  {

    id result = v5;
    *(void *)(a1 + 496) = result;
  }
  return result;
}

void sub_1000CE8E4(uint64_t a1, int *a2, CFDictionaryRef *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102343078);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    CFStringRef v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssInterference::onTelephonyNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102343078);
    }
    __int16 v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssInterference::onTelephonyNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1000CEAC0(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1000CEAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

double *sub_1000CEAC0(uint64_t a1, uint64_t a2, int *a3, CFDictionaryRef *a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343058);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v8 = (const __CFString *)sub_1000FA17C(a3);
    sub_1000FECE0(v8, (uint64_t)__p);
    __int16 v9 = v21 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#imd,gnss,onTelephonyNotification,Received notification,%s", buf, 0xCu);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343058);
    }
    CFStringRef v13 = (const __CFString *)sub_1000FA17C(a3);
    sub_1000FECE0(v13, (uint64_t)buf);
    if (v17 >= 0) {
      __int16 v14 = buf;
    }
    else {
      __int16 v14 = *(unsigned char **)buf;
    }
    int v18 = 136315138;
    uint64_t v19 = v14;
    __int16 v15 = (char *)_os_log_send_and_compose_impl();
    if (v17 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssInterference::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v15);
    if (v15 != (char *)__p) {
      free(v15);
    }
  }
  unint64_t v10 = (const void *)sub_1000FA17C(a3);
  if (CFEqual(@"kUplinkFreqBwNotification", v10))
  {
    sub_101846E9C(a1, a4);
  }
  else
  {
    char v11 = (const void *)sub_1000FA17C(a3);
    if (CFEqual(@"kCellInfoNotification", v11)) {
      sub_1000CF19C(a1, (void **)a4);
    }
  }
  return sub_1000CED50(a1);
}

double *sub_1000CED50(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t v2 = *(void *)(a1 + 48);
    if (v2) {
      sub_1018450A4(v2, *(float *)(a1 + 20));
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343058);
    }
    uint8x8_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#imd,Unable to get uplink frequency disabling BT AFH", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343058);
      }
      long long v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssInterference::updateInterferenceMonitoring()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    uint64_t v4 = *(void *)(a1 + 48);
    if (v4) {
      sub_101845094(v4);
    }
  }
  id result = *(double **)(a1 + 56);
  if (result)
  {
    if (*(unsigned char *)(a1 + 44)) {
      return (double *)sub_1000CEF28(result, *(_DWORD *)(a1 + 40), *(double *)(a1 + 32));
    }
  }
  return result;
}

uint64_t sub_1000CEF28(double *a1, int a2, double a3)
{
  double v6 = sub_10016C458();
  if ((a2 - 13) >= 2)
  {
    a3 = *a1;
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023437A8);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      double v8 = *a1;
      int v13 = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 1026;
      int v18 = a2;
      __int16 v19 = 2050;
      double v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssInterference, CLLTEBand13Band14Handler::handleBand, logging new fMachTimeOfLastBand13Band14Notification\", \"LTE-Band\":%{public}u, \"fMachTimeOfLastBand13Band14Notification\":\"%{public}f\"}", (uint8_t *)&v13, 0x22u);
    }
    *a1 = a3;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023437A8);
  }
  double v9 = v6 - a3;
  unint64_t v10 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    double v11 = *a1;
    int v13 = 68289794;
    int v14 = 0;
    __int16 v15 = 2082;
    __int16 v16 = "";
    __int16 v17 = 1026;
    int v18 = a2;
    __int16 v19 = 2050;
    double v20 = v11;
    __int16 v21 = 1026;
    BOOL v22 = v9 < 259200.0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssInterference, CLLTEBand13Band14Handler::handleBand, \", \"LTE-Band\":%{public}u, \"fMachTimeOfLastBand13Band14Notification\":\"%{public}f\", \"band13Band14UsedRecently\":%{public}d}", (uint8_t *)&v13, 0x28u);
  }
  return sub_1000CF130((uint64_t)(a1 + 1), v9 < 259200.0, 1);
}

uint64_t sub_1000CF130(uint64_t a1, char a2, char a3)
{
  char v6 = a2;
  char v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, char *, char *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

void sub_1000CF18C(uint64_t a1, unsigned __int8 *a2, char *a3)
{
}

void sub_1000CF19C(uint64_t a1, void **a2)
{
  *(unsigned char *)(a1 + 44) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    memset(v9, 0, sizeof(v9));
    int v10 = 1065353216;
    if (sub_1000FF5A4(v3, (uint64_t)v9))
    {
      *(_DWORD *)buf = 0;
      int v14 = buf;
      if (*((void *)sub_1000FF948((uint64_t)v9, (int *)buf, (uint64_t)&unk_101D0B290, (_DWORD **)&v14) + 3))
      {
        sub_10010D904(0, (uint64_t)v9, &v11);
        sub_1000FA8B8(&v11, buf);
        if (v21 && *(_DWORD *)v16 == 6)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(sub_100117098((uint64_t)buf) + 24);
          *(double *)(a1 + 32) = sub_10016C458();
          *(unsigned char *)(a1 + 44) = 1;
        }
        sub_1000F3950((uint64_t)buf);
      }
      uint64_t v5 = v11;
      for (uint64_t i = v12; i != v5; sub_1000FA860((uint64_t)&v13, i))
        i -= 696;
      uint64_t v12 = v5;
      if (sub_1000FFBA8())
      {
        *(_DWORD *)buf = 1;
        int v14 = buf;
        if (*((void *)sub_1000FF948((uint64_t)v9, (int *)buf, (uint64_t)&unk_101D0B290, (_DWORD **)&v14) + 3))
        {
          sub_10010D904(1, (uint64_t)v9, &v11);
          sub_1000FA8B8(&v11, buf);
          if (v21 && *(_DWORD *)v16 == 6)
          {
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(sub_100117098((uint64_t)buf) + 24);
            *(double *)(a1 + 32) = sub_10016C458();
            *(unsigned char *)(a1 + 44) = 1;
          }
          sub_1000F3950((uint64_t)buf);
        }
      }
    }
    sub_1000FF568((uint64_t)v9);
    *(void *)buf = &v11;
    sub_1000FA7C8((void ***)buf);
    if (*(unsigned char *)(a1 + 44))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343058);
      }
      char v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v7 = *(_DWORD *)(a1 + 40);
        uint64_t v8 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)__int16 v16 = 2082;
        *(void *)&v16[2] = "";
        __int16 v17 = 1026;
        int v18 = v7;
        __int16 v19 = 2050;
        uint64_t v20 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#imd,Received notification\", \"band_info\":%{public}u, \"MachTime(s)\":\"%{public}f\"}", buf, 0x22u);
      }
    }
  }
}

void sub_1000CF444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a14;
  sub_1000FA7C8(&a19);
  _Unwind_Resume(a1);
}

void sub_1000CF48C(uint64_t a1, int *a2, void **a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 208), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DEA68);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAnalyticsLogger::onTelephonyNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DEA68);
    }
    double v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAnalyticsLogger::onTelephonyNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1000CF668(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1000CF648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000CF668(uint64_t a1, uint64_t a2, int *a3, void **a4)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022DE9A8);
  }
  uint64_t v7 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v8 = (const __CFString *)sub_1000FA17C(a3);
    sub_1000FECE0(v8, (uint64_t)__p);
    double v9 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#ca,onTelephonyServiceNotification,%{public}s", buf, 0xCu);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    CFStringRef v64 = (const __CFString *)sub_1000FA17C(a3);
    sub_1000FECE0(v64, (uint64_t)buf);
    if ((SBYTE7(v99) & 0x80u) == 0) {
      int v65 = buf;
    }
    else {
      int v65 = *(uint8_t **)buf;
    }
    LODWORD(v102[0]) = 136446210;
    *(void *)((char *)v102 + 4) = v65;
    __int16 v66 = (char *)_os_log_send_and_compose_impl();
    if (SBYTE7(v99) < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v66);
    if (v66 != (char *)__p) {
      free(v66);
    }
  }
  int v10 = (const void *)sub_1000FA17C(a3);
  if (CFEqual(@"kEmergencyModeChangeNotification", v10))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    char v11 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#ca,kEmergencyModeChangeNotification", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      *(_WORD *)buf = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v12);
      if (v12 != (char *)__p) {
        free(v12);
      }
    }
    return;
  }
  int v13 = (const void *)sub_1000FA17C(a3);
  if (CFEqual(v13, @"kDataStatusNotification"))
  {
    *(_OWORD *)buf = 0u;
    long long v99 = 0u;
    int v100 = 1065353216;
    if (sub_10133145C(*a4, (uint64_t)buf))
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      __int16 v14 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v91) = 0;
        *(void *)&v102[0] = &v91;
        int v15 = *((unsigned __int8 *)sub_1007006D0((uint64_t)buf, (int *)&v91, (uint64_t)&unk_101D0B290, (_DWORD **)v102)
              + 52);
        __p[0] = (void *)68289538;
        LOWORD(__p[1]) = 2082;
        *(void **)((char *)&__p[1] + 2) = "";
        WORD1(__p[2]) = 1026;
        HIDWORD(__p[2]) = 0;
        __int16 v105 = 1026;
        int v106 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ca,kDataStatusNotification\", \"inst\":%{public}d, \"InHomeCountry\":%{public}d}", (uint8_t *)__p, 0x1Eu);
      }
      if (sub_1000FFBA8())
      {
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022DE9A8);
        }
        __int16 v16 = qword_102419608;
        if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v91) = 1;
          *(void *)&v102[0] = &v91;
          int v17 = *((unsigned __int8 *)sub_1007006D0((uint64_t)buf, (int *)&v91, (uint64_t)&unk_101D0B290, (_DWORD **)v102)
                + 52);
          __p[0] = (void *)68289538;
          LOWORD(__p[1]) = 2082;
          *(void **)((char *)&__p[1] + 2) = "";
          WORD1(__p[2]) = 1026;
          HIDWORD(__p[2]) = 1;
          __int16 v105 = 1026;
          int v106 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ca,kDataStatusNotification\", \"inst\":%{public}d, \"InHomeCountry\":%{public}d}", (uint8_t *)__p, 0x1Eu);
        }
      }
    }
    else
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      char v21 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#ca,kDataStatusNotification,error fetching InHomeCountry", (uint8_t *)__p, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022DE9A8);
        }
        LOWORD(v102[0]) = 0;
        uint64_t v67 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v67);
        if (v67 != (char *)__p) {
          free(v67);
        }
      }
    }
    sub_1000D7D80((uint64_t)buf);
    return;
  }
  __int16 v18 = (const void *)sub_1000FA17C(a3);
  if (CFEqual(v18, @"kAltAccountConfiguredNotification"))
  {
    LOBYTE(v102[0]) = 0;
    if (sub_101333538((CFDictionaryRef)*a4, (BOOL *)v102))
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      uint64_t v19 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(__p[0]) = 67174657;
        HIDWORD(__p[0]) = LOBYTE(v102[0]);
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#ca,kAltAccountConfiguredNotification,isAltAccountConfigured,%{private}d", (uint8_t *)__p, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022DE9A8);
        }
        *(_DWORD *)buf = 67174657;
        *(_DWORD *)&uint8_t buf[4] = LOBYTE(v102[0]);
        int v68 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v68);
        if (v68 != (char *)__p) {
          free(v68);
        }
      }
      LODWORD(__p[0]) = 30;
      if (LOBYTE(v102[0]))
      {
        v95[0] = 1;
        v95[6] = 0;
        sub_100117AF0(a1, (int *)__p, (uint64_t)v95);
        uint64_t v20 = v95;
      }
      else
      {
        v94[0] = 0;
        v94[6] = 0;
        sub_100117AF0(a1, (int *)__p, (uint64_t)v94);
        uint64_t v20 = v94;
      }
      sub_100118010((uint64_t)v20);
    }
    return;
  }
  BOOL v22 = (const void *)sub_1000FA17C(a3);
  if (CFEqual(v22, @"kCellInfoNotification"))
  {
    int v23 = *a4;
    if (!*a4) {
      return;
    }
    uint64_t v91 = 0;
    uint64_t v92 = 0;
    uint64_t v93 = 0;
    memset(v102, 0, sizeof(v102));
    int v103 = 1065353216;
    if (sub_1000FF5A4(v23, (uint64_t)v102))
    {
      LODWORD(__p[0]) = 0;
      *(void *)buf = __p;
      if (*((void *)sub_1000FF948((uint64_t)v102, (int *)__p, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 3))
      {
        sub_10010D904(0, (uint64_t)v102, &v91);
        sub_1000FA8B8(&v91, buf);
        if (v101)
        {
          if (qword_102419600 != -1) {
            dispatch_once(&qword_102419600, &stru_1022DE9A8);
          }
          int v24 = qword_102419608;
          if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
          {
            __p[0] = (void *)67109120;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#ca,kCellInfoNotification,serving cell found for sim,%d", (uint8_t *)__p, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_102419600 != -1) {
              dispatch_once(&qword_102419600, &stru_1022DE9A8);
            }
            int v96 = 67109120;
            int v97 = 0;
            uint64_t v70 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v70);
            if (v70 != (char *)__p) {
              free(v70);
            }
          }
          sub_1001175F8(a1, 0, (uint64_t)buf);
        }
        else
        {
          if (qword_102419600 != -1) {
            dispatch_once(&qword_102419600, &stru_1022DE9A8);
          }
          int v57 = qword_102419608;
          if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "#ca,kCellInfoNotification,serving cell missing", (uint8_t *)__p, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_102419600 != -1) {
              dispatch_once(&qword_102419600, &stru_1022DE9A8);
            }
            LOWORD(v96) = 0;
            char v71 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v71);
            if (v71 != (char *)__p) {
              free(v71);
            }
          }
        }
        sub_1000F3950((uint64_t)buf);
      }
      else
      {
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022DE9A8);
        }
        uint64_t v55 = qword_102419608;
        if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
        {
          __p[0] = (void *)67109120;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "#ca,kCellInfoNotification,received nil CellInfo from CT for sim %d", (uint8_t *)__p, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_102419600 != -1) {
            dispatch_once(&qword_102419600, &stru_1022DE9A8);
          }
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v56 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v56);
          if (v56 != (char *)__p) {
            free(v56);
          }
        }
      }
      uint64_t v59 = v91;
      for (uint64_t i = v92; i != v59; sub_1000FA860((uint64_t)&v93, i))
        i -= 696;
      uint64_t v92 = v59;
      if (!sub_1000FFBA8()) {
        goto LABEL_167;
      }
      LODWORD(__p[0]) = 1;
      *(void *)buf = __p;
      if (*((void *)sub_1000FF948((uint64_t)v102, (int *)__p, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 3))
      {
        sub_10010D904(1, (uint64_t)v102, &v91);
        sub_1000FA8B8(&v91, buf);
        if (v101)
        {
          if (qword_102419600 != -1) {
            dispatch_once(&qword_102419600, &stru_1022DE9A8);
          }
          uint64_t v60 = qword_102419608;
          if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
          {
            __p[0] = (void *)0x104000100;
            _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "#ca,kCellInfoNotification,serving cell found for sim,%d", (uint8_t *)__p, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_102419600 != -1) {
              dispatch_once(&qword_102419600, &stru_1022DE9A8);
            }
            int v96 = 67109120;
            int v97 = 1;
            int v72 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v72);
            if (v72 != (char *)__p) {
              free(v72);
            }
          }
          sub_1001175F8(a1, 1, (uint64_t)buf);
        }
        else
        {
          if (qword_102419600 != -1) {
            dispatch_once(&qword_102419600, &stru_1022DE9A8);
          }
          int v63 = qword_102419608;
          if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "#ca,kCellInfoNotification,serving cell missing", (uint8_t *)__p, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_102419600 != -1) {
              dispatch_once(&qword_102419600, &stru_1022DE9A8);
            }
            LOWORD(v96) = 0;
            int v74 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v74);
            if (v74 != (char *)__p) {
              free(v74);
            }
          }
        }
        sub_1000F3950((uint64_t)buf);
LABEL_167:
        sub_1000FF568((uint64_t)v102);
        __p[0] = &v91;
        sub_1000FA7C8((void ***)__p);
        return;
      }
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      int v61 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
      {
        __p[0] = (void *)0x104000100;
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "#ca,kCellInfoNotification,received nil CellInfo from CT for sim %d", (uint8_t *)__p, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_167;
      }
      bzero(__p, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = 1;
      unint64_t v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v35);
    }
    else
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      BOOL v34 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "#ca,kCellInfoNotification,error fetching cell info", (uint8_t *)__p, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_167;
      }
      bzero(__p, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      *(_WORD *)buf = 0;
      unint64_t v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v35);
    }
    if (v35 != (char *)__p) {
      free(v35);
    }
    goto LABEL_167;
  }
  uint64_t v25 = (const void *)sub_1000FA17C(a3);
  if (CFEqual(v25, @"kSubscriberMccAndMncNotification"))
  {
    *(_OWORD *)buf = 0u;
    long long v99 = 0u;
    int v100 = 1065353216;
    if (sub_1000D1F9C(*a4, (uint64_t)buf))
    {
      LODWORD(v102[0]) = 0;
      __p[0] = v102;
      uint64_t v26 = *((unsigned int *)sub_1000D22E4((uint64_t)buf, (int *)v102, (uint64_t)&unk_101D0B290, (_DWORD **)__p) + 5);
      LODWORD(v102[0]) = 0;
      __p[0] = v102;
      int v27 = *((_DWORD *)sub_1000D22E4((uint64_t)buf, (int *)v102, (uint64_t)&unk_101D0B290, (_DWORD **)__p) + 6);
      LODWORD(v102[0]) = 0;
      __p[0] = v102;
      int v28 = *((unsigned __int8 *)sub_1000D22E4((uint64_t)buf, (int *)v102, (uint64_t)&unk_101D0B290, (_DWORD **)__p) + 28);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      uint64_t v29 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
      {
        __p[0] = (void *)68290050;
        LOWORD(__p[1]) = 2082;
        *(void **)((char *)&__p[1] + 2) = "";
        WORD1(__p[2]) = 1026;
        HIDWORD(__p[2]) = 0;
        __int16 v105 = 1026;
        int v106 = v26;
        __int16 v107 = 1026;
        int v108 = v27;
        __int16 v109 = 1026;
        int v110 = v28;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ca,kSubscriberMccAndMncNotification\", \"CarrierSim\":%{public}d, \"Carriermcc\":%{public}d, \"CarrierMnc\":%{public}d, \"is3DigitMnc\":%{public}hhd}", (uint8_t *)__p, 0x2Au);
      }
      LODWORD(__p[0]) = 4;
      v90[0] = v26;
      v90[6] = 0;
      sub_100117AF0(a1, (int *)__p, (uint64_t)v90);
      sub_100118010((uint64_t)v90);
      LODWORD(__p[0]) = 5;
      v89[0] = v27;
      v89[6] = 0;
      sub_100117AF0(a1, (int *)__p, (uint64_t)v89);
      sub_100118010((uint64_t)v89);
      LODWORD(v102[0]) = 6;
      sub_10011899C(v26, __p);
      long long v86 = *(_OWORD *)__p;
      int v87 = __p[2];
      memset(__p, 0, sizeof(__p));
      int v88 = 6;
      sub_100117AF0(a1, (int *)v102, (uint64_t)&v86);
      sub_100118010((uint64_t)&v86);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      if (sub_1000FFBA8())
      {
        LODWORD(v102[0]) = 1;
        __p[0] = v102;
        uint64_t v30 = *((unsigned int *)sub_1000D22E4((uint64_t)buf, (int *)v102, (uint64_t)&unk_101D0B290, (_DWORD **)__p) + 5);
        LODWORD(v102[0]) = 1;
        __p[0] = v102;
        int v31 = *((_DWORD *)sub_1000D22E4((uint64_t)buf, (int *)v102, (uint64_t)&unk_101D0B290, (_DWORD **)__p) + 6);
        LODWORD(v102[0]) = 1;
        __p[0] = v102;
        int v32 = *((unsigned __int8 *)sub_1000D22E4((uint64_t)buf, (int *)v102, (uint64_t)&unk_101D0B290, (_DWORD **)__p) + 28);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022DE9A8);
        }
        uint64_t v33 = qword_102419608;
        if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
        {
          __p[0] = (void *)68290050;
          LOWORD(__p[1]) = 2082;
          *(void **)((char *)&__p[1] + 2) = "";
          WORD1(__p[2]) = 1026;
          HIDWORD(__p[2]) = 1;
          __int16 v105 = 1026;
          int v106 = v30;
          __int16 v107 = 1026;
          int v108 = v31;
          __int16 v109 = 1026;
          int v110 = v32;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ca,kSubscriberMccAndMncNotification\", \"CarrierSim\":%{public}d, \"CarrierMcc\":%{public}d, \"CarrierMnc\":%{public}d, \"is3DigitMnc\":%{public}hhd}", (uint8_t *)__p, 0x2Au);
        }
        LODWORD(__p[0]) = 12;
        v85[0] = v30;
        v85[6] = 0;
        sub_100117AF0(a1, (int *)__p, (uint64_t)v85);
        sub_100118010((uint64_t)v85);
        LODWORD(__p[0]) = 13;
        v84[0] = v31;
        v84[6] = 0;
        sub_100117AF0(a1, (int *)__p, (uint64_t)v84);
        sub_100118010((uint64_t)v84);
        LODWORD(v102[0]) = 16;
        sub_10011899C(v30, __p);
        long long v81 = *(_OWORD *)__p;
        int v82 = __p[2];
        memset(__p, 0, sizeof(__p));
        int v83 = 6;
        sub_100117AF0(a1, (int *)v102, (uint64_t)&v81);
        sub_100118010((uint64_t)&v81);
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      int v54 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "#ca,kSubscriberMccAndMncNotification,error fetching MCC and MNC", (uint8_t *)__p, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022DE9A8);
        }
        LOWORD(v102[0]) = 0;
        char v69 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v69);
        if (v69 != (char *)__p) {
          free(v69);
        }
      }
    }
    sub_1000D7D80((uint64_t)buf);
  }
  else
  {
    uint64_t v36 = (const void *)sub_1000FA17C(a3);
    if (CFEqual(v36, @"kSubscriptionChangeNotification"))
    {
      CFStringRef v37 = *a4;
      if (*a4)
      {
        *(_OWORD *)buf = 0u;
        long long v99 = 0u;
        int v100 = 1065353216;
        if (sub_101332B64(v37, (uint64_t)buf))
        {
          LODWORD(v91) = 0;
          LODWORD(v102[0]) = 33;
          __p[0] = &v91;
          if (*((unsigned char *)sub_100980B28((uint64_t)buf, (int *)&v91, (uint64_t)&unk_101D0B290, (_DWORD **)__p) + 20)) {
            int v38 = 1;
          }
          else {
            int v38 = 2;
          }
          v80[0] = v38;
          v80[6] = 0;
          sub_100117AF0(a1, (int *)v102, (uint64_t)v80);
          sub_100118010((uint64_t)v80);
          LODWORD(v102[0]) = 34;
          __p[0] = &v91;
          if (*((unsigned char *)sub_100980B28((uint64_t)buf, (int *)&v91, (uint64_t)&unk_101D0B290, (_DWORD **)__p) + 21)) {
            int v39 = 1;
          }
          else {
            int v39 = 2;
          }
          v79[0] = v39;
          v79[6] = 0;
          sub_100117AF0(a1, (int *)v102, (uint64_t)v79);
          sub_100118010((uint64_t)v79);
          LODWORD(v102[0]) = 22;
          __p[0] = &v91;
          if (*((unsigned char *)sub_100980B28((uint64_t)buf, (int *)&v91, (uint64_t)&unk_101D0B290, (_DWORD **)__p) + 22)) {
            int v40 = 1;
          }
          else {
            int v40 = 2;
          }
          v78[0] = v40;
          v78[6] = 0;
          sub_100117AF0(a1, (int *)v102, (uint64_t)v78);
          sub_100118010((uint64_t)v78);
          if (qword_102419600 != -1) {
            dispatch_once(&qword_102419600, &stru_1022DE9A8);
          }
          uint64_t v41 = qword_102419608;
          if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
          {
            int v42 = v91;
            *(void *)&v102[0] = &v91;
            int v43 = *((unsigned __int8 *)sub_100980B28((uint64_t)buf, (int *)&v91, (uint64_t)&unk_101D0B290, (_DWORD **)v102)+ 20);
            *(void *)&v102[0] = &v91;
            int v44 = *((unsigned __int8 *)sub_100980B28((uint64_t)buf, (int *)&v91, (uint64_t)&unk_101D0B290, (_DWORD **)v102)+ 21);
            *(void *)&v102[0] = &v91;
            int v45 = *((unsigned __int8 *)sub_100980B28((uint64_t)buf, (int *)&v91, (uint64_t)&unk_101D0B290, (_DWORD **)v102)+ 22);
            __p[0] = (void *)68290050;
            LOWORD(__p[1]) = 2082;
            *(void **)((char *)&__p[1] + 2) = "";
            WORD1(__p[2]) = 1026;
            HIDWORD(__p[2]) = v42;
            __int16 v105 = 1026;
            int v106 = v43;
            __int16 v107 = 1026;
            int v108 = v44;
            __int16 v109 = 1026;
            int v110 = v45;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ca,kSubscriptionChangeNotification\", \"sim\":%{public}d, \"userDataPreferred\":%{public}hhd, \"userDefaultVoice\":%{public}hhd, \"isSimPresent\":%{public}hhd}", (uint8_t *)__p, 0x2Au);
          }
          if (sub_1000FFBA8())
          {
            int v96 = 1;
            LODWORD(v102[0]) = 35;
            __p[0] = &v96;
            if (*((unsigned char *)sub_100980B28((uint64_t)buf, &v96, (uint64_t)&unk_101D0B290, (_DWORD **)__p) + 20)) {
              int v46 = 1;
            }
            else {
              int v46 = 2;
            }
            v77[0] = v46;
            v77[6] = 0;
            sub_100117AF0(a1, (int *)v102, (uint64_t)v77);
            sub_100118010((uint64_t)v77);
            LODWORD(v102[0]) = 36;
            __p[0] = &v96;
            if (*((unsigned char *)sub_100980B28((uint64_t)buf, &v96, (uint64_t)&unk_101D0B290, (_DWORD **)__p) + 21)) {
              int v47 = 1;
            }
            else {
              int v47 = 2;
            }
            v76[0] = v47;
            v76[6] = 0;
            sub_100117AF0(a1, (int *)v102, (uint64_t)v76);
            sub_100118010((uint64_t)v76);
            LODWORD(v102[0]) = 23;
            __p[0] = &v96;
            if (*((unsigned char *)sub_100980B28((uint64_t)buf, &v96, (uint64_t)&unk_101D0B290, (_DWORD **)__p) + 22)) {
              int v48 = 1;
            }
            else {
              int v48 = 2;
            }
            v75[0] = v48;
            v75[6] = 0;
            sub_100117AF0(a1, (int *)v102, (uint64_t)v75);
            sub_100118010((uint64_t)v75);
            if (qword_102419600 != -1) {
              dispatch_once(&qword_102419600, &stru_1022DE9A8);
            }
            uint64_t v49 = qword_102419608;
            if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
            {
              int v50 = v96;
              *(void *)&v102[0] = &v96;
              int v51 = *((unsigned __int8 *)sub_100980B28((uint64_t)buf, &v96, (uint64_t)&unk_101D0B290, (_DWORD **)v102) + 20);
              *(void *)&v102[0] = &v96;
              int v52 = *((unsigned __int8 *)sub_100980B28((uint64_t)buf, &v96, (uint64_t)&unk_101D0B290, (_DWORD **)v102) + 21);
              *(void *)&v102[0] = &v96;
              int v53 = *((unsigned __int8 *)sub_100980B28((uint64_t)buf, &v96, (uint64_t)&unk_101D0B290, (_DWORD **)v102) + 22);
              __p[0] = (void *)68290050;
              LOWORD(__p[1]) = 2082;
              *(void **)((char *)&__p[1] + 2) = "";
              WORD1(__p[2]) = 1026;
              HIDWORD(__p[2]) = v50;
              __int16 v105 = 1026;
              int v106 = v51;
              __int16 v107 = 1026;
              int v108 = v52;
              __int16 v109 = 1026;
              int v110 = v53;
              _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ca,kSubscriptionChangeNotification\", \"sim\":%{public}d, \"userDataPreferred\":%{public}hhd, \"userDefaultVoice\":%{public}hhd, \"isSimPresent\":%{public}hhd}", (uint8_t *)__p, 0x2Au);
            }
          }
        }
        else
        {
          if (qword_102419600 != -1) {
            dispatch_once(&qword_102419600, &stru_1022DE9A8);
          }
          uint64_t v62 = qword_102419608;
          if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, "#ca,kSubscriptionChangeNotification,error fetching context", (uint8_t *)__p, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(__p, 0x65CuLL);
            if (qword_102419600 != -1) {
              dispatch_once(&qword_102419600, &stru_1022DE9A8);
            }
            LOWORD(v102[0]) = 0;
            int v73 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v73);
            if (v73 != (char *)__p) {
              free(v73);
            }
          }
        }
        sub_1000D7D80((uint64_t)buf);
      }
    }
  }
}

void sub_1000D13B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  STACK[0x4F0] = (unint64_t)&a59;
  sub_1000FA7C8((void ***)&STACK[0x4F0]);
  _Unwind_Resume(a1);
}

void sub_1000D1570(uint64_t a1, int a2, char a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  char v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    int v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "isBand13Active,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::handleLTEBand13Or14State(BOOL, BOOL)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (*(unsigned __int8 *)(a1 + 608) != a2)
  {
    if (!*(unsigned char *)(a1 + 608) || (a3 & 1) != 0)
    {
      *(void *)(a1 + 680) = *(void *)(a1 + 600);
      *(_WORD *)(a1 + 688) = *(_WORD *)(a1 + 608);
      sub_10084E014((void *)(a1 + 696), a1 + 616);
      sub_10084E014((void *)(a1 + 728), a1 + 648);
      *(unsigned char *)(a1 + 608) = a2;
      sub_100839F84(a1 + 2624, 15);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      CFStringRef v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v9 = *(unsigned __int8 *)(a1 + 608);
        *(_DWORD *)buf = 67240192;
        int v13 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLGnssController::handleLTEBand13Or14State, fOperatingContext.fDeviceOperatingContext.fB13, %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_27;
        }
        goto LABEL_29;
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      uint64_t v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "fB13 currently set,not resetting it", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1)
        {
LABEL_27:
          char v11 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::handleLTEBand13Or14State(BOOL, BOOL)", "%s\n", v11);
          if (v11 != (char *)buf) {
            free(v11);
          }
          return;
        }
LABEL_29:
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        goto LABEL_27;
      }
    }
  }
}

void sub_1000D1990(uint64_t a1, int *a2, CFDictionaryRef *a3)
{
}

void sub_1000D1998(uint64_t a1, int *a2, void **a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232C7F8);
  }
  BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    char v12 = 1;
    int v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLKappaNotifier::onTelephony", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232C7F8);
    }
    int v10 = qword_102419588;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLKappaNotifier::onTelephony\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  sub_1000D1B70(v7, v8, a2, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_1000D1B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D1B70(uint64_t a1, uint64_t a2, int *a3, void **a4)
{
  if (*a4)
  {
    uint64_t v5 = (const void *)sub_1000FA17C(a3);
    if (CFEqual(v5, @"kServingMccAndMncNotification"))
    {
      memset(v16, 0, sizeof(v16));
      int v17 = 1065353216;
      if (sub_1000D1F9C(*a4, (uint64_t)v16))
      {
        LODWORD(v18) = 0;
        *(void *)buf = &v18;
        uint64_t v15 = *(void *)((char *)sub_1000D22E4((uint64_t)v16, (int *)&v18, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 20);
        LODWORD(v18) = 1;
        *(void *)buf = &v18;
        uint64_t v14 = *(void *)((char *)sub_1000D22E4((uint64_t)v16, (int *)&v18, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 20);
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        char v6 = qword_102419108;
        if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(v7) = 67109888;
          HIDWORD(v7) = v15;
          *(void *)buf = v7;
          __int16 v25 = 1024;
          *(_DWORD *)((unint64_t)buf | 0xA) = HIDWORD(v15);
          __int16 v26 = 1024;
          int v27 = v14;
          __int16 v28 = 1024;
          int v29 = HIDWORD(v14);
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "MCC/MNC %d/%d, %d/%d", buf, 0x1Au);
        }
        uint64_t v8 = sub_10013D1A0(115, 2);
        if (v8)
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419100 != -1) {
            dispatch_once(&qword_102419100, &stru_10232C638);
          }
          LODWORD(v12) = 67109888;
          HIDWORD(v12) = v15;
          uint64_t v18 = v12;
          __int16 v19 = 1024;
          *(_DWORD *)((unint64_t)&v18 | 0xA) = HIDWORD(v15);
          __int16 v20 = 1024;
          int v21 = v14;
          __int16 v22 = 1024;
          int v23 = HIDWORD(v14);
          int v13 = (char *)_os_log_send_and_compose_impl();
          uint64_t v8 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaNotifier::onTelephony(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v13);
          if (v13 != (char *)buf) {
            free(v13);
          }
        }
        v9.i64[0] = v15;
        v9.i64[1] = v14;
        *(int16x4_t *)buf = vmovn_s32(v9);
        sub_1000D2D08(v8, 6, buf, 8uLL);
      }
      else
      {
        if (qword_102419100 != -1) {
          dispatch_once(&qword_102419100, &stru_10232C638);
        }
        int v10 = qword_102419108;
        if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "error fetching MCC and MNC", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419100 != -1) {
            dispatch_once(&qword_102419100, &stru_10232C638);
          }
          LOWORD(v18) = 0;
          char v11 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLKappaNotifier::onTelephony(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v11);
          if (v11 != (char *)buf) {
            free(v11);
          }
        }
      }
      sub_1000D7D80((uint64_t)v16);
    }
  }
}

void sub_1000D1F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1000D7D80((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D1F9C(void *a1, uint64_t a2)
{
  CFDictionaryRef v4 = (const __CFDictionary *)[a1 objectForKey:@"kSlotOne"];
  if (!v4)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    int32x4_t v9 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl couldn't get Sim Status Change information for SIM 1", buf, 2u);
    }
    uint64_t v7 = 0;
    if (!sub_10013D1A0(115, 0)) {
      return v7;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    LOWORD(v14[0]) = 0;
LABEL_23:
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromMccAndMncDictionary(CFDictionaryRef, std::unordered_map<SimInstance, CLCTMccAndMnc> &)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
    return 0;
  }
  sub_1000D2D04((uint64_t)buf, v4);
  int v13 = 0;
  v14[0] = &v13;
  uint64_t v5 = sub_1000D22E4(a2, &v13, (uint64_t)&unk_101D0B290, v14);
  *(void *)((char *)v5 + 20) = *(void *)buf;
  *((unsigned char *)v5 + 28) = v16;
  if (!sub_1000FFBA8()) {
    return 1;
  }
  CFDictionaryRef v6 = (const __CFDictionary *)[a1 objectForKey:@"kSlotTwo"];
  if (v6)
  {
    sub_1000D2D04((uint64_t)buf, v6);
    uint64_t v7 = 1;
    int v13 = 1;
    v14[0] = &v13;
    uint64_t v8 = sub_1000D22E4(a2, &v13, (uint64_t)&unk_101D0B290, v14);
    *(void *)((char *)v8 + 20) = *(void *)buf;
    *((unsigned char *)v8 + 28) = v16;
    return v7;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102320830);
  }
  int v10 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#ctcl couldn't get Sim Status Change information for SIM 2", buf, 2u);
  }
  uint64_t v7 = 0;
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    LOWORD(v14[0]) = 0;
    goto LABEL_23;
  }
  return v7;
}

void *sub_1000D22E4(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      char v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          char v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  char v11 = operator new(0x20uLL);
  *char v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *(void *)((char *)v11 + 20) = -1;
  *((unsigned char *)v11 + 28) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100100330(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  __int16 v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *char v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *char v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    __int16 v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1000D24FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D2510(uint64_t a1, const __CFDictionary *a2)
{
  *(void *)a1 = -1;
  uint64_t v3 = (_DWORD *)(a1 + 4);
  *(unsigned char *)(a1 + 8) = 0;
  unint64_t v4 = (BOOL *)(a1 + 8);
  sub_10013FA80((int)v10, a2);
  if (sub_10013E418((uint64_t)v10, @"kMccKey", (_DWORD *)a1))
  {
    if (sub_10013E418((uint64_t)v10, @"kMncKey", v3))
    {
      if ((sub_1000D29FC((uint64_t)v10, @"kIs3DigitMnc", v4) & 1) == 0)
      {
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BB348);
        }
        uint64_t v5 = qword_102419608;
        if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#clct,CLCTMccMnc, couldn't get value for is3DigitMnc", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419600 == -1) {
            goto LABEL_25;
          }
          goto LABEL_27;
        }
      }
    }
    else
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BB348);
      }
      unint64_t v7 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#clct,CLCTMccMnc, couldn't get value for mnc", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 == -1) {
          goto LABEL_25;
        }
        goto LABEL_27;
      }
    }
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    CFDictionaryRef v6 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#clct,CLCTMccMnc, couldn't get value for mcc", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 == -1)
      {
LABEL_25:
        uint8x8_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTMccAndMnc::CLCTMccAndMnc(CFDictionaryRef)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
        goto LABEL_23;
      }
LABEL_27:
      dispatch_once(&qword_102419600, &stru_1022BB348);
      goto LABEL_25;
    }
  }
LABEL_23:
  sub_10013F3C4(v10);
  return a1;
}

void sub_1000D2960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D2988(uint64_t a1, const char *a2, BOOL *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  uint64_t v6 = sub_1000D29FC(a1, (uint64_t)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t sub_1000D29FC(uint64_t a1, uint64_t a2, BOOL *a3)
{
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf)) {
    return 0;
  }
  uint64_t v6 = sub_1000D2C98(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    unint64_t v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      uint64_t v20 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      int v13 = 138412546;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      uint64_t v16 = a2;
      char v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, BOOL &, int) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t sub_1000D2C98(const void *a1, BOOL *a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFBooleanGetTypeID() && v4 != CFNumberGetTypeID()) {
    return 0;
  }
  *a2 = CFBooleanGetValue((CFBooleanRef)a1) != 0;
  return 1;
}

void sub_1000D2D08(uint64_t a1, char a2, void *a3, unint64_t a4)
{
  unint64_t v7 = (const void *)sub_1000D2E34(0);
  if (v7)
  {
    if (v8)
    {
      sub_1000D2DB4((uint64_t)v8, a2, a3, a4);
    }
  }
}

void sub_1000D2DB4(uint64_t a1, char a2, void *__src, unint64_t a4)
{
  int v7 = 0;
  memset(v6, 0, sizeof(v6));
  LOBYTE(v6[0]) = 65;
  BYTE1(v6[0]) = a2;
  if (__src && a4)
  {
    size_t v5 = 96;
    if (a4 < 0x60) {
      size_t v5 = a4;
    }
    memcpy((char *)v6 + 4, __src, v5);
  }
  sub_1000D2EC0(a1 + 192, v6, 0);
}

uint64_t sub_1000D2E34(char a1)
{
  uint64_t result = qword_10248AAB0;
  if (!qword_10248AAB0)
  {
    uint64_t v3 = sub_1000D3E78();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    double v4[2] = sub_100C6108C;
    v4[3] = &unk_1022BBE00;
    char v5 = a1;
    sub_1009E8E94(v3, (uint64_t)v4);
    return qword_10248AAB0;
  }
  return result;
}

void sub_1000D2EC0(uint64_t a1, long long *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v11[0] = 0;
    v11[1] = v11;
    v11[2] = 0x9812000000;
    v11[3] = sub_100176944;
    v11[4] = nullsub_49;
    v11[5] = "";
    long long v4 = a2[5];
    long long v16 = a2[4];
    long long v17 = v4;
    int v18 = *((_DWORD *)a2 + 24);
    long long v5 = a2[1];
    long long v12 = *a2;
    long long v13 = v5;
    long long v6 = a2[3];
    long long v14 = a2[2];
    long long v15 = v6;
    if (aBlock) {
      int v7 = _Block_copy(aBlock);
    }
    else {
      int v7 = 0;
    }
    uint8x8_t v9 = *(NSObject **)a1;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100171F54;
    v10[3] = &unk_1022BCA88;
    v10[5] = v11;
    v10[6] = a1;
    v10[4] = v7;
    dispatch_async(v9, v10);
    _Block_object_dispose(v11, 8);
  }
  else if (aBlock)
  {
    uint64_t v8 = (void (*)(void *, void))*((void *)aBlock + 2);
    v8(aBlock, 0);
  }
}

void sub_1000D300C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D3024(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = sub_10012FD50(*a2);
  sub_1000D30A4(v3, v4);
  long long v5 = *(uint64_t (**)(void))(*(void *)*a2 + 24);

  return v5();
}

void sub_1000D30A4(uint64_t a1, int a2)
{
  sub_10012FFCC(a2, __p);
  unint64_t v3 = v8;
  unsigned __int8 v4 = v8;
  if ((v8 & 0x80u) != 0) {
    unint64_t v3 = (unint64_t)__p[1];
  }
  if (v3)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022BABE0);
    }
    long long v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      long long v6 = __p;
      if ((v8 & 0x80u) != 0) {
        long long v6 = (void **)__p[0];
      }
      *(_DWORD *)buf = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      long long v12 = "";
      __int16 v13 = 2082;
      long long v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"markReceivingLocationInformation\", \"Client\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    (*(void (**)(void, void **))(**(void **)(a1 + 48) + 64))(*(void *)(a1 + 48), __p);
    unsigned __int8 v4 = v8;
  }
  if ((v4 & 0x80) != 0) {
    operator delete(__p[0]);
  }
}

void sub_1000D31F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D321C(uint64_t a1, uint64_t a2, __IOHIDServiceClient *a3, uint64_t a4)
{
  if (a3)
  {
    int Type = IOHIDEventGetType();
    if (Type)
    {
      uint8x8_t v9 = *(uint64_t **)(a1 + 8);
      int v10 = *(uint64_t **)(a1 + 16);
      if (v9 != v10)
      {
        int v11 = Type;
        do
        {
          long long v12 = (std::__shared_weak_count *)v9[1];
          if (v12)
          {
            uint64_t v13 = *v9;
            atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            long long v14 = std::__shared_weak_count::lock(v12);
            if (v14)
            {
              long long v15 = v14;
              if (v13)
              {
                long long v16 = *(void (**)(void, uint64_t, __IOHIDServiceClient *, uint64_t))(v13 + 48);
                if (v16)
                {
                  if (*(__IOHIDServiceClient **)(v13 + 24) == a3
                    || ((v17 = *(_DWORD *)(v13 + 144)) != 0 ? (BOOL v18 = v17 == v11) : (BOOL v18 = 0), v18))
                  {
                    v16(*(void *)(v13 + 56), a2, a3, a4);
                  }
                }
              }
              sub_1000DB0A0(v15);
            }
            std::__shared_weak_count::__release_weak(v12);
          }
          v9 += 2;
        }
        while (v9 != v10);
      }
    }
    else
    {
      uint64_t valuePtr = 0;
      CFNumberRef RegistryID = (const __CFNumber *)IOHIDServiceClientGetRegistryID(a3);
      CFNumberGetValue(RegistryID, kCFNumberSInt64Type, &valuePtr);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022DAA18);
      }
      unint64_t v21 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134283777;
        int v40 = a3;
        __int16 v41 = 2050;
        uint64_t v42 = valuePtr;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "[CLIoHidInterface] Got null event,sender %{private}p,registryID %{public}llx", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022DAA18);
        }
        int v35 = 134283777;
        uint64_t v36 = a3;
        __int16 v37 = 2050;
        uint64_t v38 = valuePtr;
        uint64_t v33 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::onEvent(void *, void *, IOHIDEventRef)", "%s\n", v33);
        if (v33 != (char *)buf) {
          free(v33);
        }
      }
      int v23 = *(uint64_t **)(a1 + 8);
      for (uint64_t i = *(uint64_t **)(a1 + 16); v23 != i; v23 += 2)
      {
        int v24 = (std::__shared_weak_count *)v23[1];
        if (v24)
        {
          uint64_t v25 = *v23;
          atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          __int16 v26 = std::__shared_weak_count::lock(v24);
          if (v26)
          {
            int v27 = v26;
            if (v25)
            {
              if (*(void *)(v25 + 8) == valuePtr && *(void *)(v25 + 128))
              {
                if (qword_102418FD0 != -1) {
                  dispatch_once(&qword_102418FD0, &stru_1022DAA18);
                }
                __int16 v28 = qword_102418FD8;
                if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Fetching historical events", buf, 2u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102418FD0 != -1) {
                    dispatch_once(&qword_102418FD0, &stru_1022DAA18);
                  }
                  LOWORD(v35) = 0;
                  int v31 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::onEvent(void *, void *, IOHIDEventRef)", "%s\n", v31);
                  if (v31 != (char *)buf) {
                    free(v31);
                  }
                }
                (*(void (**)(void))(v25 + 128))(*(void *)(v25 + 136));
              }
              else
              {
                if (qword_102418FD0 != -1) {
                  dispatch_once(&qword_102418FD0, &stru_1022DAA18);
                }
                int v29 = qword_102418FD8;
                if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Did not fetch historical events", buf, 2u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102418FD0 != -1) {
                    dispatch_once(&qword_102418FD0, &stru_1022DAA18);
                  }
                  LOWORD(v35) = 0;
                  uint64_t v30 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::onEvent(void *, void *, IOHIDEventRef)", "%s\n", v30);
                  if (v30 != (char *)buf) {
                    free(v30);
                  }
                }
              }
            }
            sub_1000DB0A0(v27);
          }
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    }
    __int16 v19 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Received null sender", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022DAA18);
      }
      LOWORD(v35) = 0;
      int v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::onEvent(void *, void *, IOHIDEventRef)", "%s\n", v32);
      if (v32 != (char *)buf) {
        free(v32);
      }
    }
  }
}

void sub_1000D38B4(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v2);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1000D38F4()
{
  IOHIDEventGetVendorDefinedData();
  if (qword_102418FE0 != -1) {
    dispatch_once(&qword_102418FE0, &stru_1022BC920);
  }
  v0 = qword_102418FE8;
  if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Empty payload", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_1022BC920);
    }
    unsigned int v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static void CLSPU::onCMAServiceIohidEvent(void *, void *, void *, IOHIDEventRef)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_1000D3AD4(uint64_t a1, unsigned char *a2, uint64_t a3, void *a4)
{
  sub_1000D3E78();
  sub_1000D5B68();
  if (a3) {
    int v8 = *a2;
  }
  else {
    int v8 = 0;
  }
  unsigned __int8 v14 = v8;
  *(void *)(a1 + 352) = *a4;
  if ((sub_1000D40E4(a1 + 152, a2, a3) & 1) == 0)
  {
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_102310410);
    }
    uint8x8_t v9 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v8;
      __int16 v20 = 2048;
      uint64_t v21 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "CMMotionCoprocessorReply::visit() type %d, length %lu failed.", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_102310410);
      }
      int v15 = 67109376;
      int v16 = v8;
      __int16 v17 = 2048;
      uint64_t v18 = a3;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionCoprocessor::onMotionCoprocessor(const uint8_t *, size_t, const CFTimeInterval &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  if (*(unsigned char *)(a1 + 652))
  {
    *(void *)buf = &v14;
    int v10 = sub_1000D3EBC(a1 + 1832, &v14, (uint64_t)&unk_101D0B290, (unsigned char **)buf);
    ++v10[3];
  }
  else
  {
    sub_1000D51B8(a1);
    *(void *)buf = &v14;
    int v11 = sub_1000D3EBC(a1 + 1872, &v14, (uint64_t)&unk_101D0B290, (unsigned char **)buf);
    ++v11[3];
    double v12 = sub_1000D3E50();
    if (v12 - *(double *)(a1 + 1824) > 300.0)
    {
      sub_1010DF204(a1, 0);
      *(double *)(a1 + 1824) = v12;
    }
  }
}

double sub_1000D3D90(unint64_t a1)
{
  double v2 = *(double *)&qword_102489030;
  if (*(double *)&qword_102489030 == 0.0)
  {
    mach_timebase_info(&info);
    if (info.denom)
    {
      uint32_t denom = info.denom;
      uint32_t numer = info.numer;
      do
      {
        uint32_t v5 = denom;
        uint32_t denom = numer % denom;
        uint32_t numer = v5;
      }
      while (denom);
    }
    else
    {
      uint32_t v5 = info.numer;
    }
    unsigned int v6 = 1000000000;
    uint32_t v7 = info.numer / v5;
    do
    {
      uint32_t v8 = v7;
      uint32_t v7 = v6;
      unsigned int v6 = v8 % v6;
    }
    while (v6);
    double v2 = (double)(info.numer / v5 / v7) / (double)(0x3B9ACA00 / v7 * (unint64_t)(info.denom / v5));
    *(double *)&qword_102489030 = v2;
  }
  return v2 * (double)a1;
}

double sub_1000D3E50()
{
  uint64_t v0 = mach_absolute_time();

  return sub_1000D3D90(v0);
}

uint64_t sub_1000D3E78()
{
  if (qword_10247F878 != -1) {
    dispatch_once(&qword_10247F878, &stru_1022D8598);
  }
  return qword_10248A7D0;
}

void *sub_1000D3EBC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      int v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          int v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  int v11 = operator new(0x20uLL);
  *int v11 = 0;
  v11[1] = v7;
  *((unsigned char *)v11 + 16) = **a4;
  v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100100330(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  __int16 v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *int v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *int v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    __int16 v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1000D40D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D40E4(uint64_t a1, unsigned char *a2, int a3)
{
  uint64_t v3 = 0;
  switch(*a2)
  {
    case 1:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
      return 1;
    case 2:
      if (a3 != 72) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
      return 1;
    case 3:
      if (a3 != 105) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
      return 1;
    case 4:
      if (a3 != 64) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
      return 1;
    case 5:
      if (a3 != 16) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
      return 1;
    case 6:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 64))(a1);
      return 1;
    case 7:
      if (a3 != 212) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 72))(a1);
      return 1;
    case 8:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
      return 1;
    case 9:
      if (a3 != 212) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
      return 1;
    case 0xA:
      if (a3 != 193) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 272))(a1);
      return 1;
    case 0xC:
      if (a3 != 12) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      return 1;
    case 0xD:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 104))(a1);
      return 1;
    case 0xE:
      if (a3 != 55) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
      return 1;
    case 0xF:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 120))(a1);
      return 1;
    case 0x11:
      if (a3 != 36) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 128))(a1);
      return 1;
    case 0x14:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 152))(a1);
      return 1;
    case 0x15:
      if (a3 != 48) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 160))(a1);
      return 1;
    case 0x17:
      if (a3 != 21) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 168))(a1);
      return 1;
    case 0x18:
      if (a3 != 89) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 176))(a1);
      return 1;
    case 0x19:
      if (a3 != 218) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
      return 1;
    case 0x1B:
      if (a3 != 132) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 200))(a1);
      return 1;
    case 0x1C:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
      return 1;
    case 0x1D:
      if (a3 != 32) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 136))(a1);
      return 1;
    case 0x1F:
      if (a3 != 12) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
      return 1;
    case 0x20:
      if (a3 != 157) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 208))(a1);
      return 1;
    case 0x21:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 216))(a1);
      return 1;
    case 0x22:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 224))(a1);
      return 1;
    case 0x23:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 232))(a1);
      return 1;
    case 0x24:
      if (a3 != 28) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 248))(a1);
      return 1;
    case 0x25:
      if (a3 != 21) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 256))(a1);
      return 1;
    case 0x26:
      if (a3 != 16) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 264))(a1);
      return 1;
    case 0x27:
      if (a3 != 205) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 280))(a1);
      return 1;
    case 0x28:
      if (a3 != 25) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 288))(a1);
      return 1;
    case 0x29:
      if (a3 != 69) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 296))(a1);
      return 1;
    case 0x2B:
      if (a3 != 28) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 240))(a1);
      return 1;
    case 0x2C:
      if (a3 != 29) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 312))(a1);
      return 1;
    case 0x2D:
      if (a3 != 37) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 320))(a1);
      return 1;
    case 0x2E:
      if (a3 != 45) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 328))(a1);
      return 1;
    case 0x2F:
      if (a3 != 113) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 336))(a1);
      return 1;
    case 0x30:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 304))(a1);
      return 1;
    case 0x31:
      if (a3 != 68) {
        return 0;
      }
      unint64_t v4 = *(void (**)(void))(*(void *)a1 + 352);
      goto LABEL_126;
    case 0x32:
      if (a3 != 43) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 360))(a1);
      return 1;
    case 0x33:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 368))(a1);
      return 1;
    case 0x34:
      if (a3 != 49) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 384))(a1);
      return 1;
    case 0x35:
      if (a3 != 20) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 392))(a1);
      return 1;
    case 0x36:
      if (a3 != 12) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 400))(a1);
      return 1;
    case 0x37:
      if (a3 != 30) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 408))(a1);
      return 1;
    case 0x38:
      if (a3 != 28) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 416))(a1);
      return 1;
    case 0x39:
      if (a3 != 57) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 344))(a1);
      return 1;
    case 0x3A:
      if (a3 != 232) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 376))(a1);
      return 1;
    case 0x3B:
      if (a3 != 44) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 472))(a1);
      return 1;
    case 0x3C:
      if (a3 != 10) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 488))(a1);
      return 1;
    case 0x40:
      if (a3 != 29) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 424))(a1);
      return 1;
    case 0x41:
      if (a3 != 9) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 440))(a1);
      return 1;
    case 0x42:
      if (a3 != 12) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 448))(a1);
      return 1;
    case 0x43:
      if (a3 != 12) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 496))(a1);
      return 1;
    case 0x44:
      if (a3 != 76) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 456))(a1);
      return 1;
    case 0x45:
      if (a3 != 39) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 504))(a1);
      return 1;
    case 0x47:
      if (a3 != 45) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 512))(a1);
      return 1;
    case 0x48:
      if (a3 != 16) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 528))(a1);
      return 1;
    case 0x49:
      if (a3 != 83) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 520))(a1);
      return 1;
    case 0x4A:
      if (a3 != 51) {
        return 0;
      }
      unint64_t v4 = *(void (**)(void))(*(void *)a1 + 544);
LABEL_126:
      v4();
      return 1;
    case 0x4B:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 552))(a1);
      return 1;
    case 0x4C:
      if (a3 != 10) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 536))(a1);
      return 1;
    case 0x4D:
      if (a3 != 13) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 480))(a1);
      return 1;
    case 0x4E:
      if (a3 != 58) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 464))(a1);
      return 1;
    case 0x4F:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 560))(a1);
      return 1;
    case 0x50:
      if (a3 != 18) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 568))(a1);
      return 1;
    case 0x52:
      if (a3 != 26) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 576))(a1);
      return 1;
    case 0x53:
      if (a3 != 22) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 584))(a1);
      return 1;
    case 0x54:
      if (a3 != 17) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 592))(a1);
      return 1;
    case 0x55:
      if (a3 != 20) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 600))(a1);
      return 1;
    case 0x56:
      if (a3 != 113) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 608))(a1);
      return 1;
    case 0x57:
      if (a3 != 8) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 616))(a1);
      return 1;
    case 0x58:
      if (a3 != 61) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 624))(a1);
      return 1;
    case 0x59:
      if (a3 != 47) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 432))(a1);
      return 1;
    case 0x5A:
      if (a3 != 210) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 632))(a1);
      return 1;
    case 0x5B:
      if (a3 != 88) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 640))(a1);
      return 1;
    case 0x5C:
      if (a3 != 17) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 648))(a1);
      return 1;
    case 0xB0:
      if (a3 != 17) {
        return 0;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 144))(a1);
      return 1;
    default:
      return v3;
  }
}

void sub_1000D51B8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 859))
  {
    *(void *)(a1 + 408) = *(void *)(a1 + 400);
    uint64_t v3 = *(void ***)(a1 + 504);
    uint64_t v4 = *(void *)(a1 + 512);
    *(void *)(a1 + 536) = 0;
    unint64_t v5 = v4 - (void)v3;
    if (v5 >= 0x11)
    {
      do
      {
        operator delete(*v3);
        uint64_t v6 = *(void *)(a1 + 512);
        uint64_t v3 = (void **)(*(void *)(a1 + 504) + 8);
        *(void *)(a1 + 504) = v3;
        unint64_t v5 = v6 - (void)v3;
      }
      while (v5 > 0x10);
    }
    if (v5 >> 3 == 1)
    {
      uint64_t v7 = 12;
    }
    else
    {
      if (v5 >> 3 != 2) {
        goto LABEL_10;
      }
      uint64_t v7 = 25;
    }
    *(void *)(a1 + 528) = v7;
    goto LABEL_10;
  }
  uint64_t v2 = sub_1000D5BCC();
  sub_1000D5B64(buf, v2, (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 432) - *(void *)(a1 + 424)) >> 4)) > 1);
  sub_1000D5B00(buf);
LABEL_10:
  if (!*(unsigned char *)(a1 + 859))
  {
    uint64_t v23 = *(void *)(a1 + 1264);
    if (!v23 || ((*(void (**)(void))(v23 + 16))(), !*(unsigned char *)(a1 + 859)))
    {
      *(void *)(a1 + 432) = *(void *)(a1 + 424);
      goto LABEL_40;
    }
  }
  uint64_t v8 = *(void *)(a1 + 424);
  uint64_t v9 = *(void *)(a1 + 432);
  if (v8 == v9)
  {
    *(void *)(a1 + 432) = v8;
LABEL_35:
    if (*(void *)(a1 + 448) != *(void *)(a1 + 456))
    {
      sub_100103240();
      if (sub_10010145C())
      {
        int v24 = *(long long **)(a1 + 448);
        uint64_t v25 = *(long long **)(a1 + 456);
        while (v24 != v25)
        {
          long long v26 = *v24;
          long long v27 = v24[1];
          long long v28 = v24[3];
          long long v66 = v24[2];
          long long v67 = v28;
          *(_OWORD *)buf = v26;
          *(_OWORD *)&uint8_t buf[16] = v27;
          sub_1000E01AC(a1, 20, (uint64_t)buf, 64);
          v24 += 4;
        }
      }
    }
    goto LABEL_40;
  }
  int v53 = (_OWORD *)(a1 + 424);
  do
  {
    double v10 = *(double *)(v8 + 8);
    double v11 = *(double *)(a1 + 1408);
    if (v10 > v11 && v10 < v11 + 600.0)
    {
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_102310450);
      }
      float v13 = qword_102419018;
      if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = *(void *)(v8 + 8);
        int v15 = *(_DWORD *)(v8 + 24);
        uint64_t v16 = *(void *)(v8 + 72);
        *(_DWORD *)buf = 134349568;
        *(void *)&uint8_t buf[4] = v14;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v15;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = v16;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#fmc After vehicle disconnect, startTime, %{public}f, stepCount, %d, currentPace, %f", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419010 != -1) {
          dispatch_once(&qword_102419010, &stru_102310450);
        }
        double v17 = *(double *)(v8 + 8);
        int v18 = *(_DWORD *)(v8 + 24);
        uint64_t v19 = *(void *)(v8 + 72);
        int v59 = 134349568;
        double v60 = v17;
        __int16 v61 = 1024;
        *(_DWORD *)uint64_t v62 = v18;
        *(_WORD *)&v62[4] = 2048;
        *(void *)&v62[6] = v19;
        __int16 v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::notifyClientsWithBufferedData()", "%s\n", v20);
        if (v20 != buf) {
          free(v20);
        }
      }
    }
    v8 += 176;
  }
  while (v8 != v9);
  unint64_t v21 = (char *)operator new(0x30uLL);
  *((void *)v21 + 1) = 0;
  *((void *)v21 + 2) = 0;
  *(void *)unint64_t v21 = off_102310680;
  *(_OWORD *)(v21 + 24) = *v53;
  *((void *)v21 + 5) = *(void *)(a1 + 440);
  *(void *)int v53 = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  v58[0] = (uint64_t)(v21 + 24);
  v58[1] = (uint64_t)v21;
  sub_1001AB1C8(a1, v58);
  sub_1000DB0A0((std::__shared_weak_count *)v21);
  int v22 = *(unsigned __int8 *)(a1 + 859);
  *(void *)(a1 + 432) = *(void *)(a1 + 424);
  if (v22) {
    goto LABEL_35;
  }
LABEL_40:
  if (*(unsigned char *)(a1 + 860))
  {
    uint64_t v30 = *(std::__shared_weak_count_vtbl **)(a1 + 448);
    uint64_t v29 = *(void *)(a1 + 456);
    if (v30 != (std::__shared_weak_count_vtbl *)v29)
    {
      int v31 = (std::__shared_weak_count *)operator new(0x30uLL);
      v31->__shared_owners_ = 0;
      v31->__shared_weak_owners_ = 0;
      v31->__vftable = (std::__shared_weak_count_vtbl *)off_1023106D0;
      v31[1].__vftable = v30;
      uint64_t v32 = *(void *)(a1 + 464);
      v31[1].__shared_owners_ = v29;
      v31[1].__shared_weak_owners_ = v32;
      *(void *)(a1 + 448) = 0;
      *(void *)(a1 + 456) = 0;
      *(void *)(a1 + 464) = 0;
      v57[0] = (uint64_t)&v31[1];
      v57[1] = (uint64_t)v31;
      sub_1001AAC64(a1, v57);
      sub_1000DB0A0(v31);
    }
  }
  *(void *)(a1 + 456) = *(void *)(a1 + 448);
  if (!*(unsigned char *)(a1 + 859))
  {
    *(void *)(a1 + 480) = *(void *)(a1 + 472);
    goto LABEL_61;
  }
  uint64_t v33 = *(std::__shared_weak_count_vtbl **)(a1 + 472);
  uint64_t v34 = *(void *)(a1 + 480);
  if (v33 == (std::__shared_weak_count_vtbl *)v34)
  {
    *(void *)(a1 + 480) = v33;
  }
  else
  {
    int v35 = (std::__shared_weak_count *)operator new(0x30uLL);
    v35->__shared_owners_ = 0;
    v35->__shared_weak_owners_ = 0;
    v35->__vftable = (std::__shared_weak_count_vtbl *)off_102310720;
    v35[1].__vftable = v33;
    uint64_t v36 = *(void *)(a1 + 488);
    v35[1].__shared_owners_ = v34;
    v35[1].__shared_weak_owners_ = v36;
    *(void *)(a1 + 472) = 0;
    *(void *)(a1 + 480) = 0;
    *(void *)(a1 + 488) = 0;
    v56[0] = (uint64_t)&v35[1];
    v56[1] = (uint64_t)v35;
    sub_1010CE71C(a1, v56);
    sub_1000DB0A0(v35);
    int v37 = *(unsigned __int8 *)(a1 + 859);
    *(void *)(a1 + 480) = *(void *)(a1 + 472);
    if (!v37) {
      goto LABEL_61;
    }
  }
  uint64_t v38 = *(long long **)(a1 + 544);
  for (uint64_t i = *(long long **)(a1 + 552); v38 != i; v38 += 2)
  {
    long long v40 = v38[1];
    long long v54 = *v38;
    long long v55 = v40;
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102310470);
    }
    __int16 v41 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349824;
      *(void *)&uint8_t buf[4] = *((void *)&v54 + 1);
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = v55;
      *(_WORD *)&unsigned char buf[22] = 2050;
      *(void *)&unsigned char buf[24] = *((void *)&v55 + 1);
      LOWORD(v66) = 2050;
      *(void *)((char *)&v66 + 2) = v54;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "notifying,straightness,%{public}.3f,confidence,%{public}.3f,startTimestamp,%{public}.3f,stopTimestamp,%{public}.3f", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102310470);
      }
      int v59 = 134349824;
      double v60 = *((double *)&v54 + 1);
      __int16 v61 = 2050;
      *(void *)uint64_t v62 = v55;
      *(_WORD *)&v62[8] = 2050;
      *(void *)&v62[10] = *((void *)&v55 + 1);
      __int16 v63 = 2050;
      uint64_t v64 = v54;
      uint64_t v42 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::notifyClientsWithBufferedData()", "%s\n", v42);
      if (v42 != buf) {
        free(v42);
      }
    }
    sub_1000E01AC(a1, 35, (uint64_t)&v54, 32);
  }
LABEL_61:
  *(void *)(a1 + 552) = *(void *)(a1 + 544);
  uint64_t v44 = *(void *)(a1 + 400);
  uint64_t v43 = *(void *)(a1 + 408);
  if (v44 != v43)
  {
    do
    {
      sub_1000E01AC(a1, v44 != v43 - 160, v44, 160);
      double v45 = *(double *)(v44 + 8);
      double v46 = *(double *)(a1 + 1408);
      if (v45 > v46 && v45 < v46 + 600.0)
      {
        int v48 = *(_DWORD *)(v44 + 24);
        int v49 = *(unsigned __int8 *)(v44 + 28);
        int v50 = *(unsigned __int8 *)(v44 + 29);
        if (qword_102419010 != -1) {
          dispatch_once(&qword_102419010, &stru_102310450);
        }
        int v51 = qword_102419018;
        if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134349824;
          *(double *)&uint8_t buf[4] = v45;
          *(_WORD *)&unsigned char buf[12] = 1026;
          *(_DWORD *)&unsigned char buf[14] = v48;
          *(_WORD *)&unsigned char buf[18] = 1026;
          *(_DWORD *)&buf[20] = v49;
          *(_WORD *)&unsigned char buf[24] = 1026;
          *(_DWORD *)&buf[26] = v50;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "#fmc After vehicle disconnect, startTime, %{public}f, motionType, %{public}d, confidence, %{public}d, mounted, %{public}d", buf, 0x1Eu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419010 != -1) {
            dispatch_once(&qword_102419010, &stru_102310450);
          }
          int v59 = 134349824;
          double v60 = v45;
          __int16 v61 = 1026;
          *(_DWORD *)uint64_t v62 = v48;
          *(_WORD *)&v62[4] = 1026;
          *(_DWORD *)&v62[6] = v49;
          *(_WORD *)&v62[10] = 1026;
          *(_DWORD *)&v62[12] = v50;
          int v52 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::notifyClientsWithBufferedData()", "%s\n", v52);
          if (v52 != buf) {
            free(v52);
          }
        }
      }
      uint64_t v43 = *(void *)(a1 + 408);
      v44 += 160;
    }
    while (v44 != v43);
    *(void *)(a1 + 408) = *(void *)(a1 + 400);
  }
}

void sub_1000D5A94(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D5AB8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", @"CLStepCountNotifier"), "resumeAfterPendingStepCountNotifications"];
  }
  return a1;
}

uint64_t sub_1000D5B04(uint64_t a1, void *a2, int a3)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = a3;
  if (a3)
  {
    [objc_msgSend(objc_msgSend(objc_msgSend(a2, "vendor"), "proxyForService:", @"CLNatalimetryNotifier"), "pause");
    [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", @"CLOutdoorService"), "pause");
  }
  return a1;
}

void sub_1000D5B68()
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  if (qword_10247F878 != -1) {
    dispatch_once(&qword_10247F878, &stru_1022D8598);
  }
  if (Current != *(CFRunLoopRef *)qword_10248A7D0) {
    sub_101A77160();
  }
}

uint64_t sub_1000D5BCC()
{
  if (qword_10247F888 != -1) {
    dispatch_once(&qword_10247F888, &stru_1022D85B8);
  }
  return qword_10247F880;
}

void sub_1000D5C14(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int16 *)(a2 + 2) < 0x11u)
  {
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_102310410);
    }
    unint64_t v5 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289538;
      int v7 = 0;
      __int16 v8 = 2082;
      uint64_t v9 = "";
      __int16 v10 = 1040;
      int v11 = 72;
      __int16 v12 = 2098;
      uint64_t v13 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"received AOP log\", \"log\":%{public, location:CMMotionCoprocessorReply_Log}.*P}", buf, 0x22u);
    }
  }
  else
  {
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_102310410);
    }
    uint64_t v2 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Invalid CMMotionCoprocessorReply::Log structure.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_102310410);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitLog(const CMMotionCoprocessorReply::Log *)", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void *sub_1000D5E48(void *result)
{
  if (result)
  {
    unsigned int v1 = result;
    unint64_t TimeStamp = IOHIDEventGetTimeStamp();
    double v3 = sub_1000D3D90(TimeStamp);
    uint64_t v4 = (void *)v1[5];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_100172608;
    v5[3] = &unk_1022B8660;
    v5[4] = v1;
    *(double *)&v5[5] = v3;
    return [v4 async:v5];
  }
  return result;
}

uint64_t sub_1000D5EDC(uint64_t a1, uint64_t a2)
{
  return sub_1000D5EEC(a1 - 152, a2);
}

double sub_1000D5EE4(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = sub_1000D64B0(a1 - 152, a2).n128_u64[0];
  return result;
}

uint64_t sub_1000D5EEC(uint64_t a1, uint64_t a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  double v5 = (double)*(unint64_t *)(a2 + 5) - (double)*(unint64_t *)(a2 + 41);
  double v6 = *(double *)(a1 + 352);
  if (*(unsigned char *)(a1 + 653))
  {
    if (*(unsigned char *)(a1 + 652))
    {
      char v7 = 0;
      goto LABEL_6;
    }
    sub_1010CE1FC(a1);
    *(unsigned char *)(a1 + 653) = 0;
  }
  char v7 = 1;
LABEL_6:
  double v8 = *(double *)(a1 + 664);
  unint64_t v9 = *(void *)(a2 + 33);
  double v10 = v5 / 1000000.0;
  if (v9)
  {
    double v11 = *(double *)(a1 + 352) + ((double)v9 - (double)*(unint64_t *)(a2 + 41)) / 1000000.0;
    double v12 = *(double *)(a1 + 664);
    if ((v7 & 1) == 0)
    {
      double v12 = *(double *)(a1 + 664);
      if (!*(unsigned char *)(a1 + 652))
      {
        sub_1010CE1FC(a1);
        *(unsigned char *)(a1 + 653) = 0;
        double v12 = *(double *)(a1 + 664);
      }
    }
    double v13 = v11 + v12;
  }
  else
  {
    double v13 = 0.0;
  }
  double v14 = v6 + v10;
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102310430);
  }
  double v15 = v14 + v8;
  uint64_t v16 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v17 = *(void *)(a2 + 41);
    double v18 = *(float *)(a2 + 1);
    uint64_t v19 = *(void *)(a2 + 5);
    double v20 = *(float *)(a2 + 25);
    double v21 = *(float *)(a2 + 17);
    double v22 = *(float *)(a2 + 29);
    *(_DWORD *)buf = 134351104;
    *(double *)uint64_t v36 = Current;
    *(_WORD *)&v36[8] = 2050;
    *(void *)&v36[10] = v17;
    *(_WORD *)&v36[18] = 2050;
    double v37 = v18;
    *(_WORD *)uint64_t v38 = 2050;
    *(void *)&v38[2] = v19;
    *(_WORD *)&v38[10] = 2050;
    *(double *)&v38[12] = v20;
    __int16 v39 = 2050;
    double v40 = v15;
    __int16 v41 = 2050;
    double v42 = v13;
    __int16 v43 = 2050;
    double v44 = v21;
    __int16 v45 = 2050;
    double v46 = v22;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "visitKFFilteredPressure,nowAP,%{public}f,nowAOP,%{public}llu,filteredPressure,%{public}f,pressureTimestamp,%{public}llu,kfElevation,%{public}f,wallTimePressureCorrected,%{public}f,wallTimeKFCorrected,%{public}f,temperatureDerivative,%{public}f,absAltUnc,%{public}f", buf, 0x5Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    uint64_t v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitKFFilteredPressure(const CMMotionCoprocessorReply::KFFilteredPressure *)", "%s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
  }
  if (vabdd_f64(Current, *(double *)(a1 + 1424)) > 10.0)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    uint64_t v23 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = *(void *)(a2 + 41);
      double v25 = *(float *)(a2 + 1);
      uint64_t v26 = *(void *)(a2 + 5);
      double v27 = *(float *)(a2 + 25);
      double v28 = *(float *)(a2 + 17);
      double v29 = *(float *)(a2 + 29);
      *(_DWORD *)buf = 134351104;
      *(double *)uint64_t v36 = Current;
      *(_WORD *)&v36[8] = 2050;
      *(void *)&v36[10] = v24;
      *(_WORD *)&v36[18] = 2050;
      double v37 = v25;
      *(_WORD *)uint64_t v38 = 2050;
      *(void *)&v38[2] = v26;
      *(_WORD *)&v38[10] = 2050;
      *(double *)&v38[12] = v27;
      __int16 v39 = 2050;
      double v40 = v15;
      __int16 v41 = 2050;
      double v42 = v13;
      __int16 v43 = 2050;
      double v44 = v28;
      __int16 v45 = 2050;
      double v46 = v29;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "visitKFFilteredPressure,nowAP,%{public}f,nowAOP,%{public}llu,filteredPressure,%{public}f,pressureTimestamp,%{public}llu,kfElevation,%{public}f,wallTimePressureCorrected,%{public}f,wallTimeKFCorrected,%{public}f,temperatureDerivative,%{public}f,absAltUnc,%{public}f", buf, 0x5Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102310430);
      }
      uint64_t v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitKFFilteredPressure(const CMMotionCoprocessorReply::KFFilteredPressure *)", "%s\n", v34);
      if (v34 != (char *)buf) {
        free(v34);
      }
    }
    *(double *)(a1 + 1424) = Current;
  }
  *(_DWORD *)buf = *(_DWORD *)(a2 + 1);
  uint64_t v30 = *(void *)(a2 + 21);
  *(double *)&v36[4] = v15;
  *(void *)&v36[12] = v30;
  LODWORD(v37) = *(_DWORD *)(a2 + 29);
  uint64_t v31 = *(void *)(a2 + 13);
  *(double *)uint64_t v38 = v13;
  *(void *)&v38[8] = v31;
  return sub_1000E01AC(a1, 30, (uint64_t)buf, 48);
}

__n128 sub_1000D64B0(uint64_t a1, uint64_t a2)
{
  if (qword_102418FE0 != -1) {
    dispatch_once(&qword_102418FE0, &stru_102310410);
  }
  uint64_t v4 = qword_102418FE8;
  if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a2 + 1);
    uint64_t v6 = *(void *)(a2 + 9);
    *(_DWORD *)buf = 134218240;
    uint64_t v10 = v5;
    __int16 v11 = 2048;
    uint64_t v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "MotionCoprocessor received TimeSync data machTimestamp,%llu,oscarTimestamp,%llu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_102310410);
    }
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitTimeSync(const CMMotionCoprocessorReply::TimeSync *)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  __n128 result = *(__n128 *)a2;
  *(unsigned char *)(a1 + 1400) = *(unsigned char *)(a2 + 16);
  *(__n128 *)(a1 + 1384) = result;
  return result;
}

void sub_1000D669C(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_1000DB55C(v66);
  sub_1000DB55C(v40);
  sub_1000D76D0((uint64_t)v66, v2);
  sub_1000D9488((uint64_t)v68, v2 + 808);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_1000E0950;
  v25[3] = &unk_1022F2D48;
  v25[4] = v2;
  v26[0] = mach_absolute_time();
  v26[1] = (uint64_t)v25;
  nullsub_41(&__p, v7);
  sub_1000DEB88((uint64_t)v66, v27);
  sub_1000DCC14((uint64_t)&__p);
  sub_1000D76D0((uint64_t)v66, (uint64_t)v31);
  sub_1000D846C((uint64_t)v67, (uint64_t)v38);
  sub_1000D9488((uint64_t)v68, (uint64_t)v39);
  sub_1000D7DCC((uint64_t)v39);
  sub_1000D7C60((uint64_t)v38);
  sub_1000D7B80((uint64_t)v31);
  sub_1000D7DCC((uint64_t)v30);
  sub_1000D7C60((uint64_t)v29);
  sub_1000D7B80((uint64_t)v27);
  sub_1000DF290((uint64_t)v66, v27);
  sub_1000DDFD8((uint64_t)&__p);
  sub_1000D76D0((uint64_t)v66, (uint64_t)v31);
  sub_1000D846C((uint64_t)v67, (uint64_t)v38);
  sub_1000D9488((uint64_t)v68, (uint64_t)v39);
  sub_1000D7DCC((uint64_t)v39);
  sub_1000D7C60((uint64_t)v38);
  sub_1000D7B80((uint64_t)v31);
  sub_1000D7DCC((uint64_t)v30);
  sub_1000D7C60((uint64_t)v29);
  sub_1000D7B80((uint64_t)v27);
  sub_1000DF524((uint64_t)v66, v27);
  sub_1000DE3B4(v4);
  sub_1000D76D0((uint64_t)v66, (uint64_t)v31);
  sub_1000D846C((uint64_t)v67, (uint64_t)v38);
  sub_1000D9488((uint64_t)v68, (uint64_t)v39);
  sub_1000D7DCC((uint64_t)v39);
  sub_1000D7C60((uint64_t)v38);
  sub_1000D7B80((uint64_t)v31);
  sub_1000D7DCC((uint64_t)v30);
  sub_1000D7C60((uint64_t)v29);
  sub_1000D7B80((uint64_t)v27);
  unint64_t v8 = *(void *)(v4 + 24);
  v24.n128_u64[0] = *(void *)(v4 + 16);
  v24.n128_u64[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000DBFCC(&__p, &v24);
  sub_1000DEDD0((uint64_t)v66, v27);
  sub_1000DD914((uint64_t)&__p);
  sub_1000D76D0((uint64_t)v66, (uint64_t)v31);
  sub_1000D846C((uint64_t)v67, (uint64_t)v38);
  sub_1000D9488((uint64_t)v68, (uint64_t)v39);
  sub_1000D7DCC((uint64_t)v39);
  sub_1000D7C60((uint64_t)v38);
  sub_1000D7B80((uint64_t)v31);
  sub_1000D7DCC((uint64_t)v30);
  sub_1000D7C60((uint64_t)v29);
  sub_1000D7B80((uint64_t)v27);
  if (__p.n128_u64[1]) {
    sub_1000DB0A0((std::__shared_weak_count *)__p.n128_u64[1]);
  }
  if (v24.n128_u64[1]) {
    sub_1000DB0A0((std::__shared_weak_count *)v24.n128_u64[1]);
  }
  sub_1000DF0DC(&__p, (long long *)(v4 + 32));
  sub_1000DF12C((uint64_t)v66, v27);
  sub_1000DDE08((uint64_t)&__p);
  sub_1000D76D0((uint64_t)v66, (uint64_t)v31);
  sub_1000D846C((uint64_t)v67, (uint64_t)v38);
  sub_1000D9488((uint64_t)v68, (uint64_t)v39);
  sub_1000D7DCC((uint64_t)v39);
  sub_1000D7C60((uint64_t)v38);
  sub_1000D7B80((uint64_t)v31);
  sub_1000D7DCC((uint64_t)v30);
  sub_1000D7C60((uint64_t)v29);
  sub_1000D7B80((uint64_t)v27);
  if (v23 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  unint64_t v9 = *(void *)(v4 + 24);
  v21.n128_u64[0] = *(void *)(v4 + 16);
  v21.n128_u64[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000DBFCC(&__p, &v21);
  sub_1000DEA18((uint64_t)v66, v27);
  sub_1000DC6F0((uint64_t)&__p);
  sub_1000D76D0((uint64_t)v66, (uint64_t)v31);
  sub_1000D846C((uint64_t)v67, (uint64_t)v38);
  sub_1000D9488((uint64_t)v68, (uint64_t)v39);
  sub_1000D7DCC((uint64_t)v39);
  sub_1000D7C60((uint64_t)v38);
  sub_1000D7B80((uint64_t)v31);
  sub_1000D7DCC((uint64_t)v30);
  sub_1000D7C60((uint64_t)v29);
  sub_1000D7B80((uint64_t)v27);
  if (__p.n128_u64[1]) {
    sub_1000DB0A0((std::__shared_weak_count *)__p.n128_u64[1]);
  }
  if (v21.n128_u64[1]) {
    sub_1000DB0A0((std::__shared_weak_count *)v21.n128_u64[1]);
  }
  sub_1000DF87C(v6);
  sub_1000D9488(v6 + 1352, (uint64_t)v68);
  sub_1000DF694((uint64_t)v66, v27);
  sub_1000DE5D4((uint64_t)&__p);
  sub_1000D76D0((uint64_t)v40, (uint64_t)v31);
  sub_1000D846C((uint64_t)v41, (uint64_t)v38);
  sub_1000D9488((uint64_t)v60, (uint64_t)v39);
  sub_1000D7DCC((uint64_t)v39);
  sub_1000D7C60((uint64_t)v38);
  sub_1000D7B80((uint64_t)v31);
  sub_1000D7DCC((uint64_t)v30);
  sub_1000D7C60((uint64_t)v29);
  sub_1000D7B80((uint64_t)v27);
  *(_OWORD *)(v6 + 216) = *(_OWORD *)&v44[56];
  *(_OWORD *)(v6 + 232) = v45;
  *(_OWORD *)(v6 + 248) = v46[0];
  *(_OWORD *)(v6 + 257) = *(_OWORD *)((char *)v46 + 9);
  nullsub_41(&__p, v10);
  sub_1000DE8F4((uint64_t)v66, v27);
  sub_1000DC56C((uint64_t)&__p);
  sub_1000D76D0((uint64_t)v40, (uint64_t)v31);
  sub_1000D846C((uint64_t)v41, (uint64_t)v38);
  sub_1000D9488((uint64_t)v60, (uint64_t)v39);
  sub_1000D7DCC((uint64_t)v39);
  sub_1000D7C60((uint64_t)v38);
  sub_1000D7B80((uint64_t)v31);
  sub_1000D7DCC((uint64_t)v30);
  sub_1000D7C60((uint64_t)v29);
  sub_1000D7B80((uint64_t)v27);
  sub_1000D9048(v6, (uint64_t)&v43);
  sub_1000D8D80(v6 + 56, (uint64_t)v44);
  sub_1000D9488(v6 + 1352, (uint64_t)v60);
  sub_1000DF7B8((uint64_t)v66, v27);
  sub_1000DE750((uint64_t)&__p);
  sub_1000D76D0((uint64_t)v40, (uint64_t)v31);
  sub_1000D846C((uint64_t)v41, (uint64_t)v38);
  sub_1000D9488((uint64_t)v60, (uint64_t)v39);
  sub_1000D7DCC((uint64_t)v39);
  sub_1000D7C60((uint64_t)v38);
  sub_1000D7B80((uint64_t)v31);
  sub_1000D7DCC((uint64_t)v30);
  sub_1000D7C60((uint64_t)v29);
  sub_1000D7B80((uint64_t)v27);
  sub_1000D8F98(v6 + 112, (uint64_t)&v42);
  *(_DWORD *)(v6 + 208) = v47;
  *(unsigned char *)(v6 + 212) = v48;
  sub_1000DECAC((uint64_t)v66, v27);
  sub_1000DD588((uint64_t)&__p);
  sub_1000D76D0((uint64_t)v40, (uint64_t)v31);
  sub_1000D846C((uint64_t)v41, (uint64_t)v38);
  sub_1000D9488((uint64_t)v60, (uint64_t)v39);
  sub_1000D7DCC((uint64_t)v39);
  sub_1000D7C60((uint64_t)v38);
  sub_1000D7B80((uint64_t)v31);
  sub_1000D7DCC((uint64_t)v30);
  sub_1000D7C60((uint64_t)v29);
  sub_1000D7B80((uint64_t)v27);
  *(void *)(v6 + 280) = v49;
  *(unsigned char *)(v6 + 288) = v50;
  *(_WORD *)(v6 + 296) = v51;
  *(void *)(v6 + 304) = v52;
  *(unsigned char *)(v6 + 312) = v53;
  *(_WORD *)(v6 + 320) = v54;
  unint64_t v11 = *(void *)(v4 + 24);
  v20.n128_u64[0] = *(void *)(v4 + 16);
  v20.n128_u64[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000DBFCC(&__p, &v20);
  sub_1000DF3B4((uint64_t)v66, v27);
  sub_1000DE170((uint64_t)&__p);
  sub_1000D76D0((uint64_t)v40, (uint64_t)v31);
  sub_1000D846C((uint64_t)v41, (uint64_t)v38);
  sub_1000D9488((uint64_t)v60, (uint64_t)v39);
  sub_1000D7DCC((uint64_t)v39);
  sub_1000D7C60((uint64_t)v38);
  sub_1000D7B80((uint64_t)v31);
  sub_1000D7DCC((uint64_t)v30);
  sub_1000D7C60((uint64_t)v29);
  sub_1000D7B80((uint64_t)v27);
  if (__p.n128_u64[1]) {
    sub_1000DB0A0((std::__shared_weak_count *)__p.n128_u64[1]);
  }
  if (v20.n128_u64[1]) {
    sub_1000DB0A0((std::__shared_weak_count *)v20.n128_u64[1]);
  }
  *(_WORD *)(v6 + 322) = v55;
  sub_1000D8E10(v6 + 328, (uint64_t)&v56);
  sub_1000D8CA8(v6 + 1136, (uint64_t)&v57);
  *(void *)(v6 + 4780) = v62;
  *(unsigned char *)(v6 + 4788) = v63;
  *(void *)(v6 + 4792) = v64;
  *(unsigned char *)(v6 + 4800) = v65;
  uint64_t v12 = v60[426];
  uint64_t v13 = v61;
  if (v61) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v61 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(v6 + 4760) = v12;
  double v14 = *(std::__shared_weak_count **)(v6 + 4768);
  *(void *)(v6 + 4768) = v13;
  if (v14) {
    sub_1000DB0A0(v14);
  }
  sub_1000DEE94((uint64_t)v66, v27);
  sub_1000DDAC0((uint64_t)&__p);
  sub_1000D76D0((uint64_t)v40, (uint64_t)v31);
  sub_1000D846C((uint64_t)v41, (uint64_t)v38);
  sub_1000D9488((uint64_t)v60, (uint64_t)v39);
  sub_1000D7DCC((uint64_t)v39);
  sub_1000D7C60((uint64_t)v38);
  sub_1000D7B80((uint64_t)v31);
  sub_1000D7DCC((uint64_t)v30);
  sub_1000D7C60((uint64_t)v29);
  sub_1000D7B80((uint64_t)v27);
  sub_1000D8BD0(v6 + 1168, (uint64_t)&v58);
  sub_1000DEFB8((uint64_t)v66, v27);
  sub_1000DDCA0((uint64_t)&__p);
  sub_1000D76D0((uint64_t)v40, (uint64_t)v31);
  sub_1000D846C((uint64_t)v41, (uint64_t)v38);
  sub_1000D9488((uint64_t)v60, (uint64_t)v39);
  sub_1000D7DCC((uint64_t)v39);
  sub_1000D7C60((uint64_t)v38);
  sub_1000D7B80((uint64_t)v31);
  sub_1000D7DCC((uint64_t)v30);
  sub_1000D7C60((uint64_t)v29);
  sub_1000D7B80((uint64_t)v27);
  sub_1000D87AC((std::string *)(v6 + 1320), &v59);
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_102311C70);
  }
  double v15 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    sub_1000DC058(v2 + 3760);
    int v16 = v28;
    uint64_t v17 = (void **)v27[0];
    sub_1000DC058(v6 + 4304);
    double v18 = v27;
    if (v16 < 0) {
      double v18 = v17;
    }
    if (v23 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (__n128 *)__p.n128_u64[0];
    }
    v31[0] = 68289538;
    v31[1] = 0;
    __int16 v32 = 2082;
    uint64_t v33 = "";
    __int16 v34 = 2082;
    int v35 = v18;
    __int16 v36 = 2082;
    double v37 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"wifi location update request state change\", \"before\":%{public, location:escape_only}s, \"after\":%{public, location:escape_only}s}", (uint8_t *)v31, 0x26u);
    if (v23 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    if (v28 < 0) {
      operator delete(v27[0]);
    }
  }
  sub_1000E0900(v26);
  sub_1000D7DCC((uint64_t)v60);
  sub_1000D7C60((uint64_t)v41);
  sub_1000D7B80((uint64_t)v40);
  sub_1000D7DCC((uint64_t)v68);
  sub_1000D7C60((uint64_t)v67);
  sub_1000D7B80((uint64_t)v66);
}

void sub_1000D73CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  sub_1000E0E50(v38);
  sub_1000E0900(&a31);
  sub_10050BAA0((uint64_t)&STACK[0x3318]);
  sub_10050BAA0((uint64_t)&STACK[0x4C60]);
  _Unwind_Resume(a1);
}

void sub_1000D76D0(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a1;
  int v5 = *(_DWORD *)a2;
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
    uint64_t v6 = (unsigned char *)(a2 + 8);
    double v14 = (_OWORD *)(a2 + 8);
    uint64_t v7 = (unsigned char *)(a1 + 8);
    switch(v4 ^ (v4 >> 31))
    {
      case 0:
      case 1:
      case 2:
      case 0xD:
      case 0x11:
      case 0x1B:
      case 0x1C:
      case 0x1D:
        return;
      case 3:
      case 0xC:
      case 0xE:
      case 0x17:
        *uint64_t v7 = *v6;
        return;
      case 4:
      case 9:
      case 0xB:
      case 0xF:
      case 0x13:
      case 0x16:
      case 0x19:
      case 0x1A:
        *(_DWORD *)uint64_t v7 = *(_DWORD *)v6;
        return;
      case 5:
      case 6:
        sub_1000D9D94(a1 + 8, a2 + 8);
        return;
      case 7:
        sub_10050E1D4((uint64_t *)&v14, (uint64_t)v7);
        return;
      case 8:
        sub_10050E9DC((uint64_t *)&v14, (uint64_t)v7);
        return;
      case 0xA:
      case 0x14:
      case 0x15:
        *(void *)uint64_t v7 = *(void *)v6;
        return;
      case 0x10:
        sub_1000DAEA8(&v14, (uint64_t)v7);
        return;
      case 0x12:
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
        return;
      case 0x18:
        uint64_t v9 = *(void *)v6;
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        *(void *)uint64_t v7 = v9;
        std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        long long v11 = *(_OWORD *)(a2 + 80);
        long long v10 = *(_OWORD *)(a2 + 96);
        long long v12 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
        *(_OWORD *)(a1 + 80) = v11;
        *(_OWORD *)(a1 + 96) = v10;
        *(_OWORD *)(a1 + 64) = v12;
        std::string::operator=((std::string *)(a1 + 128), (const std::string *)(a2 + 128));
        return;
      default:
        goto LABEL_44;
    }
  }
  double v14 = (_OWORD *)a1;
  int v15 = v5 ^ (v5 >> 31);
  unint64_t v8 = (long long *)(a2 + 8);
  switch(v15)
  {
    case 0:
      sub_1000D7B80(a1);
      *(_DWORD *)a1 = 0;
      return;
    case 1:
      sub_1000D7B80(a1);
      int v13 = 1;
      goto LABEL_42;
    case 2:
      sub_1000D7B80(a1);
      int v13 = 2;
      goto LABEL_42;
    case 3:
      sub_1000D7B80(a1);
      *(unsigned char *)(a1 + 8) = *(unsigned char *)v8;
      int v13 = 3;
      goto LABEL_42;
    case 4:
      sub_1000D7B80(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v8;
      int v13 = 4;
      goto LABEL_42;
    case 5:
    case 6:
      sub_10050EC70((uint64_t)&v14, (uint64_t)v8);
      return;
    case 7:
      sub_10050ED34((uint64_t)&v14, (uint64_t)v8);
      return;
    case 8:
      sub_10050F22C((uint64_t)&v14, (uint64_t)v8);
      return;
    case 9:
      sub_1000D7B80(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v8;
      int v13 = 9;
      goto LABEL_42;
    case 10:
      sub_1000D7B80(a1);
      *(void *)(a1 + 8) = *(void *)v8;
      int v13 = 10;
      goto LABEL_42;
    case 11:
      sub_1000D7B80(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v8;
      int v13 = 11;
      goto LABEL_42;
    case 12:
      sub_1000D7B80(a1);
      *(unsigned char *)(a1 + 8) = *(unsigned char *)v8;
      int v13 = 12;
      goto LABEL_42;
    case 13:
      sub_1000D7B80(a1);
      int v13 = 13;
      goto LABEL_42;
    case 14:
      sub_1000D7B80(a1);
      *(unsigned char *)(a1 + 8) = *(unsigned char *)v8;
      int v13 = 14;
      goto LABEL_42;
    case 15:
      sub_1000D7B80(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v8;
      int v13 = 15;
      goto LABEL_42;
    case 16:
      sub_1000D7A9C((uint64_t)&v14, v8);
      return;
    case 17:
      sub_1000D7B80(a1);
      int v13 = 17;
      goto LABEL_42;
    case 18:
      sub_1000D7B80(a1);
      *(_OWORD *)(a1 + 8) = *v8;
      int v13 = 18;
      goto LABEL_42;
    case 19:
      sub_1000D7B80(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v8;
      int v13 = 19;
      goto LABEL_42;
    case 20:
      sub_1000D7B80(a1);
      *(void *)(a1 + 8) = *(void *)v8;
      int v13 = 20;
      goto LABEL_42;
    case 21:
      sub_1000D7B80(a1);
      *(void *)(a1 + 8) = *(void *)v8;
      int v13 = 21;
      goto LABEL_42;
    case 22:
      sub_1000D7B80(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v8;
      int v13 = 22;
      goto LABEL_42;
    case 23:
      sub_1000D7B80(a1);
      *(unsigned char *)(a1 + 8) = *(unsigned char *)v8;
      int v13 = 23;
      goto LABEL_42;
    case 24:
      sub_10050F38C((uint64_t)&v14, (uint64_t *)v8);
      return;
    case 25:
      sub_1000D7B80(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v8;
      int v13 = 25;
      goto LABEL_42;
    case 26:
      sub_1000D7B80(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v8;
      int v13 = 26;
      goto LABEL_42;
    case 27:
      sub_1000D7B80(a1);
      int v13 = 27;
      goto LABEL_42;
    case 28:
      sub_1000D7B80(a1);
      int v13 = 28;
      goto LABEL_42;
    case 29:
      sub_1000D7B80(a1);
      int v13 = 29;
LABEL_42:
      *(_DWORD *)a1 = v13;
      return;
    default:
LABEL_44:
      sub_10050EA98();
  }
}

__n128 sub_1000D7A9C(uint64_t a1, long long *a2)
{
  sub_1000D7B80(*(void *)a1);
  uint64_t v4 = *(void *)a1;
  long long v5 = *a2;
  *(_OWORD *)(v4 + 24) = a2[1];
  *(_OWORD *)(v4 + 8) = v5;
  long long v6 = a2[2];
  long long v7 = a2[3];
  long long v8 = a2[4];
  *(_OWORD *)(v4 + 88) = a2[5];
  *(_OWORD *)(v4 + 72) = v8;
  *(_OWORD *)(v4 + 56) = v7;
  *(_OWORD *)(v4 + 40) = v6;
  long long v9 = a2[6];
  long long v10 = a2[7];
  long long v11 = a2[8];
  *(_OWORD *)(v4 + 148) = *(long long *)((char *)a2 + 140);
  *(_OWORD *)(v4 + 136) = v11;
  *(_OWORD *)(v4 + 120) = v10;
  *(_OWORD *)(v4 + 104) = v9;
  memcpy((void *)(v4 + 168), a2 + 10, 0x201uLL);
  *(void *)(v4 + 688) = *((void *)a2 + 85);
  uint64_t v12 = *((void *)a2 + 86);
  *(void *)(v4 + 696) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  long long v13 = *(long long *)((char *)a2 + 696);
  long long v14 = *(long long *)((char *)a2 + 728);
  *(_OWORD *)(v4 + 720) = *(long long *)((char *)a2 + 712);
  *(_OWORD *)(v4 + 736) = v14;
  *(_OWORD *)(v4 + 704) = v13;
  __n128 result = *(__n128 *)((char *)a2 + 744);
  long long v16 = *(long long *)((char *)a2 + 760);
  long long v17 = *(long long *)((char *)a2 + 776);
  *(void *)(v4 + 797) = *(void *)((char *)a2 + 789);
  *(_OWORD *)(v4 + 768) = v16;
  *(_OWORD *)(v4 + 784) = v17;
  *(__n128 *)(v4 + 752) = result;
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  return result;
}

void sub_1000D7B80(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  switch(*(_DWORD *)a1 ^ (*(int *)a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      return;
    case 5:
    case 6:
      if (*(unsigned char *)(a1 + 96) && *(char *)(a1 + 39) < 0)
      {
        uint64_t v2 = *(void **)(a1 + 16);
        operator delete(v2);
      }
      break;
    case 7:
      sub_10050EB3C((uint64_t)&v4, v1);
      break;
    case 8:
      sub_10050EB88((uint64_t)&v4, v1);
      break;
    case 0x10:
      uint64_t v3 = *(std::__shared_weak_count **)(a1 + 696);
      if (v3)
      {
        sub_1000DB0A0(v3);
      }
      break;
    case 0x18:
      sub_10050EBD4((uint64_t)&v4, v1);
      break;
    default:
      sub_10050EA98();
  }
}

uint64_t sub_1000D7C60(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2200) && *(char *)(a1 + 2199) < 0) {
    operator delete(*(void **)(a1 + 2176));
  }
  sub_1000D8214(a1 + 2024);
  if (*(unsigned char *)(a1 + 2016))
  {
    uint64_t v2 = *(void **)(a1 + 1992);
    if (v2)
    {
      *(void *)(a1 + 2000) = v2;
      operator delete(v2);
    }
  }
  if (*(unsigned char *)(a1 + 1984))
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 1872);
    if (v3) {
      sub_1000DB0A0(v3);
    }
  }
  if (*(unsigned char *)(a1 + 1056)) {
    sub_1000D7D80(a1 + 1008);
  }
  if (*(unsigned char *)(a1 + 1000)) {
    sub_1000D7D80(a1 + 952);
  }
  sub_1000D8260(a1 + 856);
  char v4 = *(void **)(a1 + 824);
  if (v4)
  {
    *(void *)(a1 + 832) = v4;
    operator delete(v4);
  }
  if (*(unsigned char *)(a1 + 808) && *(char *)(a1 + 807) < 0) {
    operator delete(*(void **)(a1 + 784));
  }
  sub_1000D7D80(a1 + 456);
  sub_1000D7D80(a1 + 416);
  sub_1000D7D80(a1 + 376);
  sub_1000D82B4(a1 + 336);
  sub_1000D7D80(a1 + 296);
  long long v6 = (void **)(a1 + 264);
  sub_1000D7F04(&v6);
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t sub_1000D7D80(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  char v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1000D7DCC(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 3416);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  sub_1000D7D80(a1 + 3288);
  uint64_t v12 = (void **)(a1 + 3264);
  sub_1000D7F04(&v12);
  if (*(char *)(a1 + 3095) < 0) {
    operator delete(*(void **)(a1 + 3072));
  }
  if (*(char *)(a1 + 2991) < 0) {
    operator delete(*(void **)(a1 + 2968));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 2824);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  char v4 = *(std::__shared_weak_count **)(a1 + 1920);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  long long v5 = *(std::__shared_weak_count **)(a1 + 1800);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  long long v6 = *(std::__shared_weak_count **)(a1 + 1000);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  long long v7 = *(std::__shared_weak_count **)(a1 + 304);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  if (*(unsigned char *)(a1 + 280) && *(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  long long v8 = *(std::__shared_weak_count **)(a1 + 184);
  if (v8) {
    sub_1000DB0A0(v8);
  }
  long long v9 = *(std::__shared_weak_count **)(a1 + 168);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  long long v10 = *(std::__shared_weak_count **)(a1 + 152);
  if (v10) {
    sub_1000DB0A0(v10);
  }
  return a1;
}

uint64_t sub_1000D7EB4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  char v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void sub_1000D7F04(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    char v4 = (void **)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        long long v6 = v4;
        sub_1000D7F78(&v6);
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1000D7F78(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1000D7FCC((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1000D7FCC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 88)
  {
    if (*(char *)(i - 57) < 0) {
      operator delete(*(void **)(i - 80));
    }
  }
  a1[1] = v2;
}

uint64_t sub_1000D801C(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 13;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 26;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    long long v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

uint64_t sub_1000D80C4(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 128;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 256;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    long long v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

uint64_t sub_1000D816C(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 85;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 170;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    long long v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

uint64_t sub_1000D8214(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 144))
  {
    if (*(char *)(a1 + 143) < 0) {
      operator delete(*(void **)(a1 + 120));
    }
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*(void **)(a1 + 16));
    }
  }
  return a1;
}

uint64_t sub_1000D8260(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    if (*(unsigned char *)(a1 + 80))
    {
      uint64_t v2 = *(void **)(a1 + 56);
      if (v2)
      {
        *(void *)(a1 + 64) = v2;
        operator delete(v2);
      }
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
  }
  return a1;
}

uint64_t sub_1000D82B4(uint64_t a1)
{
  sub_1000D82F0(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1000D82F0(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 55) < 0) {
        operator delete(v2[4]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *sub_1000D833C(void *a1, void *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = 32 * (v9 - v8) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_1000D9EA8(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }
  long long v13 = (void *)(v8 + 8 * (v11 >> 8));
  if (v9 == v8) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *v13 + 16 * v11;
  }
  v22[0] = v8 + 8 * (v11 >> 8);
  v22[1] = v14;
  __n128 result = sub_1000D9B0C((uint64_t)v22, a4);
  while (v14 != v16)
  {
    long long v17 = (_OWORD *)(v13 == result ? v16 : *v13 + 4096);
    if ((_OWORD *)v14 == v17)
    {
      long long v17 = (_OWORD *)v14;
    }
    else
    {
      double v18 = (_OWORD *)v14;
      do
      {
        long long v19 = *a3++;
        *double v18 = v19;
        if ((long long *)((char *)a3 - *a2) == (long long *)4096)
        {
          __n128 v20 = (long long *)a2[1];
          ++a2;
          a3 = v20;
        }
        ++v18;
      }
      while (v18 != v17);
    }
    a1[5] += ((uint64_t)v17 - v14) >> 4;
    if (v13 == result) {
      break;
    }
    uint64_t v21 = v13[1];
    ++v13;
    uint64_t v14 = v21;
  }
  return result;
}

uint64_t sub_1000D846C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  long long v6 = *(_OWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v5;
  *(_OWORD *)(a1 + 64) = v7;
  std::string::operator=((std::string *)(a1 + 128), (const std::string *)(a2 + 128));
  long long v8 = *(_OWORD *)(a2 + 184);
  long long v9 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 184) = v8;
  long long v10 = *(_OWORD *)(a2 + 216);
  long long v11 = *(_OWORD *)(a2 + 232);
  long long v12 = *(_OWORD *)(a2 + 241);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 241) = v12;
  *(_OWORD *)(a1 + 232) = v11;
  *(_OWORD *)(a1 + 216) = v10;
  if (a1 == a2)
  {
    *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  }
  else
  {
    sub_1000D9904(a1 + 264, *(uint64_t **)(a2 + 264), *(uint64_t **)(a2 + 272), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 272) - *(void *)(a2 + 264)) >> 3));
    *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
    *(_DWORD *)(a1 + 328) = *(_DWORD *)(a2 + 328);
    sub_1000D86B4((void *)(a1 + 296), *(void **)(a2 + 312), 0);
    *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 368);
    sub_1000D9234((void *)(a1 + 336), *(uint64_t **)(a2 + 352), 0);
    *(_DWORD *)(a1 + 408) = *(_DWORD *)(a2 + 408);
    sub_1000D9360((void *)(a1 + 376), *(uint64_t **)(a2 + 392), 0);
    *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
    sub_1000D86B4((void *)(a1 + 416), *(void **)(a2 + 432), 0);
    *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
    sub_1000D86B4((void *)(a1 + 456), *(void **)(a2 + 472), 0);
  }
  memcpy((void *)(a1 + 496), (const void *)(a2 + 496), 0x120uLL);
  sub_1000D87AC((std::string *)(a1 + 784), (const std::string *)(a2 + 784));
  *(unsigned char *)(a1 + 816) = *(unsigned char *)(a2 + 816);
  if (a1 != a2) {
    sub_1000D90D8((char *)(a1 + 824), *(char **)(a2 + 824), *(void *)(a2 + 832), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(a2 + 832) - *(void *)(a2 + 824)) >> 3));
  }
  *(_WORD *)(a1 + 848) = *(_WORD *)(a2 + 848);
  sub_1000D8F98(a1 + 856, a2 + 856);
  sub_1000D9048(a1 + 952, a2 + 952);
  sub_1000D8D80(a1 + 1008, a2 + 1008);
  long long v13 = *(_OWORD *)(a2 + 1064);
  long long v14 = *(_OWORD *)(a2 + 1080);
  long long v15 = *(_OWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1096) = *(_OWORD *)(a2 + 1096);
  *(_OWORD *)(a1 + 1112) = v15;
  *(_OWORD *)(a1 + 1064) = v13;
  *(_OWORD *)(a1 + 1080) = v14;
  long long v16 = *(_OWORD *)(a2 + 1128);
  long long v17 = *(_OWORD *)(a2 + 1144);
  long long v18 = *(_OWORD *)(a2 + 1160);
  *(_DWORD *)(a1 + 1176) = *(_DWORD *)(a2 + 1176);
  *(_OWORD *)(a1 + 1144) = v17;
  *(_OWORD *)(a1 + 1160) = v18;
  *(_OWORD *)(a1 + 1128) = v16;
  sub_1000D8E10(a1 + 1184, a2 + 1184);
  sub_1000D8CA8(a1 + 1992, a2 + 1992);
  sub_1000D8BD0(a1 + 2024, a2 + 2024);
  sub_1000D87AC((std::string *)(a1 + 2176), (const std::string *)(a2 + 2176));
  return a1;
}

void sub_1000D86B4(void *a1, void *a2, void *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  long long v8 = (void *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      _DWORD v8[2] = a2[2];
      long long v9 = (void *)*v8;
      sub_1000D88A8(a1, v8);
      a2 = (void *)*a2;
      long long v8 = v9;
      if (!v9) {
        goto LABEL_9;
      }
    }
    do
    {
      long long v10 = (void *)*v8;
      operator delete(v8);
      long long v8 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      sub_1000D8850(a1, a2 + 2);
      a2 = (void *)*a2;
    }
  }
}

void sub_1000D8778(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1000D8798(_Unwind_Exception *a1)
{
}

void sub_1000D87AC(std::string *__dst, const std::string *a2)
{
  if (__dst[1].__r_.__value_.__s.__data_[0] == a2[1].__r_.__value_.__s.__data_[0])
  {
    if (__dst[1].__r_.__value_.__s.__data_[0])
    {
      std::string::operator=(__dst, a2);
    }
  }
  else if (__dst[1].__r_.__value_.__s.__data_[0])
  {
    if (SHIBYTE(__dst->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst->__r_.__value_.__l.__data_);
    }
    __dst[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_1000DC48C(__dst, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      __dst->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v3;
    }
    __dst[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

void *sub_1000D8850(void *a1, void *a2)
{
  sub_1000D8B5C((uint64_t)a1, a2, (uint64_t)&v4);
  return sub_1000D88A8(a1, v4);
}

void sub_1000D888C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000D88A8(void *a1, void *a2)
{
  uint64_t v4 = a2 + 2;
  unint64_t v5 = sub_1000D8908((uint64_t)(a2 + 2));
  a2[1] = v5;
  uint64_t v6 = sub_1000D8910((uint64_t)a1, v5, v4);
  sub_1000D8A74(a1, a2, v6);
  return a2;
}

uint64_t sub_1000D8908(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_1000D8910(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      size_t v12 = v11;
    }
    else {
      size_t v12 = v10;
    }
    sub_1000DA9E4(a1, v12);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v13.i16[0] = vaddlv_u8(v13);
  unint64_t v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  long long v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (v16)
  {
    long long v17 = (void *)*v16;
    if (*v16)
    {
      int v18 = 0;
      do
      {
        unint64_t v19 = v17[1];
        if (v14 > 1)
        {
          unint64_t v20 = v17[1];
          if (v19 >= v6) {
            unint64_t v20 = v19 % v6;
          }
        }
        else
        {
          unint64_t v20 = v19 & (v6 - 1);
        }
        if (v20 != v15) {
          break;
        }
        BOOL v21 = v19 == a2 && sub_100B39178(v17 + 2, a3);
        if (v18 & !v21) {
          break;
        }
        v18 |= v21;
        long long v16 = (void *)*v16;
        long long v17 = (void *)*v16;
      }
      while (*v16);
    }
  }
  return v16;
}

void *sub_1000D8A74(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

uint64_t sub_1000D8B5C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  unint64_t v6 = operator new(0x18uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *unint64_t v6 = 0;
  v6[1] = 0;
  v6[2] = *a2;
  *(unsigned char *)(a3 + 16) = 1;
  uint64_t result = sub_1000D8908((uint64_t)(v6 + 2));
  v6[1] = result;
  return result;
}

void sub_1000D8BB8(_Unwind_Exception *a1)
{
  void *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1000D8BD0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 144) == *(unsigned __int8 *)(a2 + 144))
  {
    if (*(unsigned char *)(a1 + 144))
    {
      uint64_t v4 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)a1 = v4;
      std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      long long v5 = *(_OWORD *)(a2 + 72);
      long long v6 = *(_OWORD *)(a2 + 88);
      long long v7 = *(_OWORD *)(a2 + 100);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 100) = v7;
      *(_OWORD *)(a1 + 88) = v6;
      *(_OWORD *)(a1 + 72) = v5;
      std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
    }
  }
  else if (*(unsigned char *)(a1 + 144))
  {
    sub_10050FD60(a1);
  }
  else
  {
    sub_10050FDAC(a1, (uint64_t *)a2);
    *(unsigned char *)(a1 + 144) = 1;
  }
}

void sub_1000D8CA8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2 && *(unsigned char *)(a1 + 24))
    {
      uint64_t v3 = *(void *)(a2 + 8);
      unint64_t v4 = 0x6F96F96F96F96F97 * ((v3 - *(void *)a2) >> 2);
      long long v5 = *(char **)a2;
      sub_10050FAE4((char *)a1, v5, v3, v4);
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    long long v6 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v6;
      operator delete(v6);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    sub_10050FCE4((void *)a1, *(const void **)a2, *(void *)(a2 + 8), 0x6F96F96F96F96F97 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
    *(unsigned char *)(a1 + 24) = 1;
  }
}

void sub_1000D8D80(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(unsigned char *)(a1 + 48))
    {
      if (a1 != a2)
      {
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        sub_1000D86B4((void *)a1, *(void **)(a2 + 16), 0);
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    }
  }
  else if (*(unsigned char *)(a1 + 48))
  {
    sub_1000D7D80(a1);
    *(unsigned char *)(a1 + 48) = 0;
  }
  else
  {
    sub_1000E346C(a1, a2);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(unsigned char *)(a1 + 48) = 1;
  }
}

__n128 sub_1000D8E10(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 800) == *(unsigned __int8 *)(a2 + 800))
  {
    if (*(unsigned char *)(a1 + 800))
    {
      long long v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      long long v5 = *(_OWORD *)(a2 + 32);
      long long v6 = *(_OWORD *)(a2 + 48);
      long long v7 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v7;
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)(a1 + 48) = v6;
      long long v8 = *(_OWORD *)(a2 + 96);
      long long v9 = *(_OWORD *)(a2 + 112);
      long long v10 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 112) = v9;
      *(_OWORD *)(a1 + 128) = v10;
      *(_OWORD *)(a1 + 96) = v8;
      memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x201uLL);
      uint64_t v11 = *(void *)(a2 + 680);
      uint64_t v12 = *(void *)(a2 + 688);
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(a1 + 680) = v11;
      uint8x8_t v13 = *(std::__shared_weak_count **)(a1 + 688);
      *(void *)(a1 + 688) = v12;
      if (v13) {
        sub_1000DB0A0(v13);
      }
      long long v14 = *(_OWORD *)(a2 + 696);
      long long v15 = *(_OWORD *)(a2 + 728);
      *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
      *(_OWORD *)(a1 + 728) = v15;
      *(_OWORD *)(a1 + 696) = v14;
      __n128 result = *(__n128 *)(a2 + 744);
      long long v17 = *(_OWORD *)(a2 + 760);
      long long v18 = *(_OWORD *)(a2 + 776);
      *(void *)(a1 + 789) = *(void *)(a2 + 789);
      *(_OWORD *)(a1 + 760) = v17;
      *(_OWORD *)(a1 + 776) = v18;
      *(__n128 *)(a1 + 744) = result;
    }
  }
  else if (*(unsigned char *)(a1 + 800))
  {
    unint64_t v19 = *(std::__shared_weak_count **)(a1 + 688);
    if (v19) {
      sub_1000DB0A0(v19);
    }
    *(unsigned char *)(a1 + 800) = 0;
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v20;
    long long v21 = *(_OWORD *)(a2 + 32);
    long long v22 = *(_OWORD *)(a2 + 48);
    long long v23 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v23;
    *(_OWORD *)(a1 + 32) = v21;
    *(_OWORD *)(a1 + 48) = v22;
    long long v24 = *(_OWORD *)(a2 + 96);
    long long v25 = *(_OWORD *)(a2 + 112);
    long long v26 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
    *(_OWORD *)(a1 + 112) = v25;
    *(_OWORD *)(a1 + 128) = v26;
    *(_OWORD *)(a1 + 96) = v24;
    memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x201uLL);
    *(void *)(a1 + 680) = *(void *)(a2 + 680);
    uint64_t v27 = *(void *)(a2 + 688);
    *(void *)(a1 + 688) = v27;
    if (v27) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
    }
    long long v28 = *(_OWORD *)(a2 + 696);
    long long v29 = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
    *(_OWORD *)(a1 + 728) = v29;
    *(_OWORD *)(a1 + 696) = v28;
    __n128 result = *(__n128 *)(a2 + 744);
    long long v30 = *(_OWORD *)(a2 + 760);
    long long v31 = *(_OWORD *)(a2 + 776);
    *(void *)(a1 + 789) = *(void *)(a2 + 789);
    *(_OWORD *)(a1 + 760) = v30;
    *(_OWORD *)(a1 + 776) = v31;
    *(__n128 *)(a1 + 744) = result;
    *(unsigned char *)(a1 + 800) = 1;
  }
  return result;
}

void sub_1000D8F98(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 88) == *(unsigned __int8 *)(a2 + 88))
  {
    if (*(unsigned char *)(a1 + 88))
    {
      long long v4 = *(_OWORD *)a2;
      *(void *)(a1 + 13) = *(void *)(a2 + 13);
      *(_OWORD *)a1 = v4;
      std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
      sub_10050F8C0(a1 + 48, a2 + 48);
    }
  }
  else if (*(unsigned char *)(a1 + 88))
  {
    sub_10050F86C(a1);
  }
  else
  {
    sub_10050F9AC(a1, (long long *)a2);
    *(unsigned char *)(a1 + 88) = 1;
  }
}

void sub_1000D9048(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(unsigned char *)(a1 + 48))
    {
      if (a1 != a2)
      {
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        sub_1000D86B4((void *)a1, *(void **)(a2 + 16), 0);
      }
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
    }
  }
  else if (*(unsigned char *)(a1 + 48))
  {
    sub_1000D7D80(a1);
    *(unsigned char *)(a1 + 48) = 0;
  }
  else
  {
    sub_1000E346C(a1, a2);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(unsigned char *)(a1 + 48) = 1;
  }
}

char *sub_1000D90D8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  long long v7 = result;
  uint64_t v8 = *((void *)result + 2);
  long long v9 = *(char **)result;
  if (0xD37A6F4DE9BD37A7 * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x1642C8590B21642) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0xD37A6F4DE9BD37A7 * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0xB21642C8590B21) {
      unint64_t v12 = 0x1642C8590B21642;
    }
    else {
      unint64_t v12 = v11;
    }
    __n128 result = sub_10050F7C8(v7, v12);
    long long v14 = (char *)v7[1];
    uint8x8_t v13 = (void **)(v7 + 1);
    long long v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      long long v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint8x8_t v13 = (void **)(result + 8);
  long long v15 = (unsigned char *)*((void *)result + 1);
  if (0xD37A6F4DE9BD37A7 * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v15 - v9);
    long long v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    long long v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  std::__shared_weak_count *v13 = &v9[v17];
  return result;
}

void sub_1000D9234(void *a1, uint64_t *a2, uint64_t *a3)
{
  long long v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v8 = (void **)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      unint64_t v10 = v8;
    }
    else
    {
      do
      {
        _DWORD v8[2] = (void *)v4[2];
        v8[3] = (void *)v4[3];
        std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v4 + 4));
        long long v11 = *(_OWORD *)(v4 + 7);
        long long v12 = *(_OWORD *)(v4 + 9);
        long long v13 = *(_OWORD *)(v4 + 11);
        v8[13] = (void *)v4[13];
        *(_OWORD *)(v8 + 11) = v13;
        *(_OWORD *)(v8 + 9) = v12;
        *(_OWORD *)(v8 + 7) = v11;
        unint64_t v10 = (void **)*v8;
        sub_1000D88A8(a1, v8);
        long long v4 = (uint64_t *)*v4;
        if (!v10) {
          break;
        }
        uint64_t v8 = v10;
      }
      while (v4 != a3);
    }
    sub_1000D82F0((int)a1, v10);
  }
  while (v4 != a3)
  {
    sub_10050F56C(a1, (uint64_t)(v4 + 2));
    long long v4 = (uint64_t *)*v4;
  }
}

void sub_1000D9330(void *a1)
{
  __cxa_begin_catch(a1);
  sub_1000D82F0(v1, v2);
  __cxa_rethrow();
}

void sub_1000D934C(_Unwind_Exception *a1)
{
}

void sub_1000D9360(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint64_t v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      _DWORD v8[2] = a2[2];
      long long v9 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(v8 + 5) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(v8 + 3) = v9;
      long long v10 = *(_OWORD *)(a2 + 7);
      long long v11 = *(_OWORD *)(a2 + 9);
      long long v12 = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(v8 + 13) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(v8 + 11) = v12;
      *(_OWORD *)(v8 + 9) = v11;
      *(_OWORD *)(v8 + 7) = v10;
      long long v13 = (uint64_t *)*v8;
      sub_1000D88A8(a1, v8);
      a2 = (uint64_t *)*a2;
      uint64_t v8 = v13;
      if (!v13) {
        goto LABEL_9;
      }
    }
    do
    {
      long long v14 = (uint64_t *)*v8;
      operator delete(v8);
      uint64_t v8 = v14;
    }
    while (v14);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      sub_10050F6E0(a1, (uint64_t)(a2 + 2));
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_1000D9454(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    int v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1000D9474(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D9488(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  long long v7 = *(_OWORD *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 96);
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  uint64_t v11 = *(void *)(a2 + 144);
  uint64_t v10 = *(void *)(a2 + 152);
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  long long v12 = *(std::__shared_weak_count **)(a1 + 152);
  *(void *)(a1 + 144) = v11;
  *(void *)(a1 + 152) = v10;
  if (v12) {
    sub_1000DB0A0(v12);
  }
  uint64_t v14 = *(void *)(a2 + 160);
  uint64_t v13 = *(void *)(a2 + 168);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  long long v15 = *(std::__shared_weak_count **)(a1 + 168);
  *(void *)(a1 + 160) = v14;
  *(void *)(a1 + 168) = v13;
  if (v15) {
    sub_1000DB0A0(v15);
  }
  uint64_t v17 = *(void *)(a2 + 176);
  uint64_t v16 = *(void *)(a2 + 184);
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  long long v18 = *(std::__shared_weak_count **)(a1 + 184);
  *(void *)(a1 + 176) = v17;
  *(void *)(a1 + 184) = v16;
  if (v18) {
    sub_1000DB0A0(v18);
  }
  sub_1000D9D94(a1 + 192, a2 + 192);
  *(_WORD *)(a1 + 288) = *(_WORD *)(a2 + 288);
  uint64_t v20 = *(void *)(a2 + 296);
  uint64_t v19 = *(void *)(a2 + 304);
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  long long v21 = *(std::__shared_weak_count **)(a1 + 304);
  *(void *)(a1 + 296) = v20;
  *(void *)(a1 + 304) = v19;
  if (v21) {
    sub_1000DB0A0(v21);
  }
  long long v22 = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 328) = v22;
  long long v23 = *(_OWORD *)(a2 + 344);
  long long v24 = *(_OWORD *)(a2 + 360);
  long long v25 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = v25;
  *(_OWORD *)(a1 + 344) = v23;
  *(_OWORD *)(a1 + 360) = v24;
  long long v26 = *(_OWORD *)(a2 + 408);
  long long v27 = *(_OWORD *)(a2 + 424);
  long long v28 = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 452) = *(_OWORD *)(a2 + 452);
  *(_OWORD *)(a1 + 424) = v27;
  *(_OWORD *)(a1 + 440) = v28;
  *(_OWORD *)(a1 + 408) = v26;
  memcpy((void *)(a1 + 472), (const void *)(a2 + 472), 0x201uLL);
  uint64_t v29 = *(void *)(a2 + 992);
  uint64_t v30 = *(void *)(a2 + 1000);
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 992) = v29;
  long long v31 = *(std::__shared_weak_count **)(a1 + 1000);
  *(void *)(a1 + 1000) = v30;
  if (v31) {
    sub_1000DB0A0(v31);
  }
  long long v32 = *(_OWORD *)(a2 + 1008);
  long long v33 = *(_OWORD *)(a2 + 1024);
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
  *(_OWORD *)(a1 + 1008) = v32;
  *(_OWORD *)(a1 + 1024) = v33;
  long long v34 = *(_OWORD *)(a2 + 1056);
  long long v35 = *(_OWORD *)(a2 + 1072);
  long long v36 = *(_OWORD *)(a2 + 1088);
  *(void *)(a1 + 1101) = *(void *)(a2 + 1101);
  *(_OWORD *)(a1 + 1088) = v36;
  *(_OWORD *)(a1 + 1072) = v35;
  *(_OWORD *)(a1 + 1056) = v34;
  long long v37 = *(_OWORD *)(a2 + 1192);
  long long v39 = *(_OWORD *)(a2 + 1144);
  long long v38 = *(_OWORD *)(a2 + 1160);
  *(_OWORD *)(a1 + 1176) = *(_OWORD *)(a2 + 1176);
  *(_OWORD *)(a1 + 1192) = v37;
  *(_OWORD *)(a1 + 1144) = v39;
  *(_OWORD *)(a1 + 1160) = v38;
  long long v41 = *(_OWORD *)(a2 + 1224);
  long long v40 = *(_OWORD *)(a2 + 1240);
  long long v42 = *(_OWORD *)(a2 + 1208);
  *(_OWORD *)(a1 + 1252) = *(_OWORD *)(a2 + 1252);
  *(_OWORD *)(a1 + 1224) = v41;
  *(_OWORD *)(a1 + 1240) = v40;
  *(_OWORD *)(a1 + 1208) = v42;
  long long v43 = *(_OWORD *)(a2 + 1128);
  *(_OWORD *)(a1 + 1112) = *(_OWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1128) = v43;
  memcpy((void *)(a1 + 1272), (const void *)(a2 + 1272), 0x201uLL);
  uint64_t v44 = *(void *)(a2 + 1792);
  uint64_t v45 = *(void *)(a2 + 1800);
  if (v45) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v45 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1792) = v44;
  double v46 = *(std::__shared_weak_count **)(a1 + 1800);
  *(void *)(a1 + 1800) = v45;
  if (v46) {
    sub_1000DB0A0(v46);
  }
  long long v47 = *(_OWORD *)(a2 + 1808);
  long long v48 = *(_OWORD *)(a2 + 1824);
  *(_OWORD *)(a1 + 1840) = *(_OWORD *)(a2 + 1840);
  *(_OWORD *)(a1 + 1824) = v48;
  *(_OWORD *)(a1 + 1808) = v47;
  long long v49 = *(_OWORD *)(a2 + 1856);
  long long v50 = *(_OWORD *)(a2 + 1872);
  long long v51 = *(_OWORD *)(a2 + 1888);
  *(void *)(a1 + 1901) = *(void *)(a2 + 1901);
  *(_OWORD *)(a1 + 1888) = v51;
  *(_OWORD *)(a1 + 1872) = v50;
  *(_OWORD *)(a1 + 1856) = v49;
  uint64_t v52 = *(void *)(a2 + 1912);
  uint64_t v53 = *(void *)(a2 + 1920);
  if (v53) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1912) = v52;
  __int16 v54 = *(std::__shared_weak_count **)(a1 + 1920);
  *(void *)(a1 + 1920) = v53;
  if (v54) {
    sub_1000DB0A0(v54);
  }
  memcpy((void *)(a1 + 1928), (const void *)(a2 + 1928), 0x170uLL);
  memcpy((void *)(a1 + 2296), (const void *)(a2 + 2296), 0x201uLL);
  uint64_t v55 = *(void *)(a2 + 2816);
  uint64_t v56 = *(void *)(a2 + 2824);
  if (v56) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v56 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 2816) = v55;
  uint64_t v57 = *(std::__shared_weak_count **)(a1 + 2824);
  *(void *)(a1 + 2824) = v56;
  if (v57) {
    sub_1000DB0A0(v57);
  }
  long long v58 = *(_OWORD *)(a2 + 2832);
  long long v59 = *(_OWORD *)(a2 + 2848);
  *(_OWORD *)(a1 + 2864) = *(_OWORD *)(a2 + 2864);
  *(_OWORD *)(a1 + 2848) = v59;
  *(_OWORD *)(a1 + 2832) = v58;
  long long v60 = *(_OWORD *)(a2 + 2880);
  long long v61 = *(_OWORD *)(a2 + 2896);
  long long v62 = *(_OWORD *)(a2 + 2912);
  *(void *)(a1 + 2925) = *(void *)(a2 + 2925);
  *(_OWORD *)(a1 + 2912) = v62;
  *(_OWORD *)(a1 + 2896) = v61;
  *(_OWORD *)(a1 + 2880) = v60;
  uint64_t v63 = *(void *)(a2 + 2936);
  *(unsigned char *)(a1 + 2944) = *(unsigned char *)(a2 + 2944);
  *(void *)(a1 + 2936) = v63;
  uint64_t v64 = *(void *)(a2 + 2952);
  *(unsigned char *)(a1 + 2960) = *(unsigned char *)(a2 + 2960);
  *(void *)(a1 + 2952) = v64;
  std::string::operator=((std::string *)(a1 + 2968), (const std::string *)(a2 + 2968));
  *(_OWORD *)(a1 + 2992) = *(_OWORD *)(a2 + 2992);
  long long v65 = *(_OWORD *)(a2 + 3024);
  long long v66 = *(_OWORD *)(a2 + 3040);
  long long v67 = *(_OWORD *)(a2 + 3052);
  *(_OWORD *)(a1 + 3008) = *(_OWORD *)(a2 + 3008);
  *(_OWORD *)(a1 + 3052) = v67;
  *(_OWORD *)(a1 + 3040) = v66;
  *(_OWORD *)(a1 + 3024) = v65;
  std::string::operator=((std::string *)(a1 + 3072), (const std::string *)(a2 + 3072));
  long long v69 = *(_OWORD *)(a2 + 3112);
  long long v68 = *(_OWORD *)(a2 + 3128);
  *(_OWORD *)(a1 + 3096) = *(_OWORD *)(a2 + 3096);
  *(_OWORD *)(a1 + 3112) = v69;
  *(_OWORD *)(a1 + 3128) = v68;
  long long v70 = *(_OWORD *)(a2 + 3192);
  long long v72 = *(_OWORD *)(a2 + 3144);
  long long v71 = *(_OWORD *)(a2 + 3160);
  *(_OWORD *)(a1 + 3176) = *(_OWORD *)(a2 + 3176);
  *(_OWORD *)(a1 + 3192) = v70;
  *(_OWORD *)(a1 + 3144) = v72;
  *(_OWORD *)(a1 + 3160) = v71;
  long long v74 = *(_OWORD *)(a2 + 3224);
  long long v73 = *(_OWORD *)(a2 + 3240);
  long long v75 = *(_OWORD *)(a2 + 3208);
  *(unsigned char *)(a1 + 3256) = *(unsigned char *)(a2 + 3256);
  *(_OWORD *)(a1 + 3224) = v74;
  *(_OWORD *)(a1 + 3240) = v73;
  *(_OWORD *)(a1 + 3208) = v75;
  if (a1 != a2)
  {
    sub_1000D9904(a1 + 3264, *(uint64_t **)(a2 + 3264), *(uint64_t **)(a2 + 3272), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 3272) - *(void *)(a2 + 3264)) >> 3));
    *(_DWORD *)(a1 + 3320) = *(_DWORD *)(a2 + 3320);
    sub_1000D86B4((void *)(a1 + 3288), *(void **)(a2 + 3304), 0);
  }
  long long v76 = *(_OWORD *)(a2 + 3328);
  *(void *)(a1 + 3344) = *(void *)(a2 + 3344);
  *(_OWORD *)(a1 + 3328) = v76;
  long long v77 = *(_OWORD *)(a2 + 3352);
  long long v78 = *(_OWORD *)(a2 + 3368);
  long long v79 = *(_OWORD *)(a2 + 3384);
  *(void *)(a1 + 3399) = *(void *)(a2 + 3399);
  *(_OWORD *)(a1 + 3368) = v78;
  *(_OWORD *)(a1 + 3384) = v79;
  *(_OWORD *)(a1 + 3352) = v77;
  uint64_t v80 = *(void *)(a2 + 3408);
  uint64_t v81 = *(void *)(a2 + 3416);
  if (v81) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v81 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 3408) = v80;
  int v82 = *(std::__shared_weak_count **)(a1 + 3416);
  *(void *)(a1 + 3416) = v81;
  if (v82) {
    sub_1000DB0A0(v82);
  }
  long long v83 = *(_OWORD *)(a2 + 3424);
  *(_OWORD *)(a1 + 3433) = *(_OWORD *)(a2 + 3433);
  *(_OWORD *)(a1 + 3424) = v83;
  return a1;
}

void sub_1000D9904(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  long long v9 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_1000DA970((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_1000DA584((void *)a1, v11);
    long long v12 = sub_1000DA620(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    sub_1000D9A88((uint64_t)&v17, a2, v13, (uint64_t *)v9);
    long long v12 = sub_1000DA620(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_1000D9A88((uint64_t)&v18, a2, a3, (uint64_t *)v9);
  long long v15 = v14;
  uint64_t v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      uint64_t v19 = v16;
      sub_1000D7F78(&v19);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1000D9A78(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1000D9A80(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *sub_1000D9A88(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  long long v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != a4) {
        sub_1000DAC8C(a4, *v5, v5[1], 0x2E8BA2E8BA2E8BA3 * ((v5[1] - *v5) >> 3));
      }
      v5 += 3;
      a4 += 3;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void *sub_1000D9B0C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 4);
    if (v4 < 1) {
      result -= (unint64_t)(255 - v4) >> 8;
    }
    else {
      result += (unint64_t)v4 >> 8;
    }
  }
  return result;
}

double sub_1000D9B68(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  if (a1 == a3)
  {
    unint64_t v11 = *(void ***)a5;
    long long v12 = *(char **)(a5 + 8);
    unint64_t v10 = __src;
  }
  else
  {
    uint64_t v8 = a1 + 1;
    sub_1000D9C38(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      long long v9 = *v8++;
      sub_1000D9C38(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    unint64_t v10 = *a3;
    unint64_t v11 = *(void ***)a5;
    long long v12 = *(char **)(a5 + 8);
  }
  sub_1000D9C38(v10, v12, a4, v11, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_1000D9C38@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  long long v6 = a4;
  if (__src != a3)
  {
    long long v9 = __src;
    long long v6 = a4 + 1;
    unint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      uint64_t v12 = (a3 - v9) >> 4 >= v11 >> 4 ? v11 >> 4 : (a3 - v9) >> 4;
      if (v12) {
        __src = (char *)memmove(__dst, v9, 16 * v12);
      }
      v9 += 16 * v12;
      if (v9 == a3) {
        break;
      }
      uint64_t v13 = (char *)*v6++;
      unint64_t v10 = v13;
      std::string __dst = v13;
    }
    __dst += 16 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst) {
      std::string __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

void *sub_1000D9CF8(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)*result;
    unint64_t v3 = a2 - 0x5555555555555555 * ((uint64_t)(result[1] - *(void *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 169 - v3;
      long long v6 = &v2[-(v5 / 0xAA)];
      *double result = v6;
      unint64_t v4 = *v6 + 24 * (170 * (v5 / 0xAA) - v5) + 4056;
    }
    else
    {
      *double result = &v2[v3 / 0xAA];
      unint64_t v4 = v2[v3 / 0xAA] + 24 * (v3 % 0xAA);
    }
    result[1] = v4;
  }
  return result;
}

void sub_1000D9D94(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 88) == *(unsigned __int8 *)(a2 + 88))
  {
    if (*(unsigned char *)(a1 + 88))
    {
      *(void *)a1 = *(void *)a2;
      std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
      long long v5 = *(_OWORD *)(a2 + 48);
      long long v4 = *(_OWORD *)(a2 + 64);
      long long v6 = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(_OWORD *)(a1 + 48) = v5;
      *(_OWORD *)(a1 + 64) = v4;
      *(_OWORD *)(a1 + 32) = v6;
    }
  }
  else if (*(unsigned char *)(a1 + 88))
  {
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
    *(unsigned char *)(a1 + 88) = 0;
  }
  else
  {
    sub_1000D9E2C(a1, a2);
    *(unsigned char *)(a1 + 88) = 1;
  }
}

uint64_t sub_1000D9E2C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1000DC48C((unsigned char *)v4, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v4 = v5;
  }
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 32) = v6;
  return a1;
}

void sub_1000D9EA8(void *a1, unint64_t a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((_BYTE)v5) {
    unint64_t v6 = (v5 >> 8) + 1;
  }
  else {
    unint64_t v6 = v5 >> 8;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 8) {
    unint64_t v8 = v7 >> 8;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 8)
  {
    for (a1[4] = v7 - (v8 << 8); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      char v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          uint64_t v29 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v28);
          long long v31 = &v29[8 * (v28 >> 2)];
          long long v32 = (uint64_t *)a1[1];
          unint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            unint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            long long v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)long long v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          long long v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            unint64_t v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          long long v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            unint64_t v3 = (char *)a1[1];
          }
          long long v27 = &v3[-8 * (v24 >> 1)];
          unint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)unint64_t v3 = v18;
      unint64_t v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_10017F0B4(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_1002D02D8((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 255;
          }
          else {
            uint64_t v64 = 256;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 8);
      if (v8)
      {
        long long v66 = (char *)a1[2];
        do
        {
          long long v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          long long v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              long long v79 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v78);
              uint64_t v81 = &v79[8 * (v78 >> 2)];
              int v82 = (uint64_t *)a1[1];
              long long v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                long long v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                int v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)int v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              int v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                long long v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              long long v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                long long v66 = (char *)a1[1];
              }
              long long v77 = &v66[-8 * (v74 >> 1)];
              long long v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)long long v66 = v69;
          long long v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      uint64_t v91 = a1 + 3;
      if (v13) {
        long long v15 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v13);
      }
      else {
        long long v15 = 0;
      }
      uint64_t v38 = v8 << 8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        int v88 = operator new(0x1000uLL);
        sub_1000DA434(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        long long v39 = (void *)a1[1];
        long long v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              long long v49 = (char *)sub_1000DA54C((uint64_t)v91, v48);
              long long v51 = (uint64_t *)__p[1];
              long long v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                long long v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                __int16 v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)__int16 v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              uint64_t v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                long long v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              uint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                long long v40 = (char *)__p[1];
              }
              long long v47 = &v40[-8 * (v44 >> 1)];
              long long v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)long long v40 = *v39;
          long long v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          long long v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      uint64_t v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1002D03F8((uint64_t)__p, v57);
      }
      long long v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_1000DA3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000DA434(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    unint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      char v17 = (char *)sub_1000DA54C(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      long long v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      unint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      long long v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void *sub_1000DA54C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_1001D7FA0();
  }
  return operator new(8 * a2);
}

char *sub_1000DA584(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_1001D7FD4();
  }
  double result = (char *)sub_1000DA5D8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_1000DA5D8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_1001D7FA0();
  }
  return operator new(24 * a2);
}

void *sub_1000DA620(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  _DWORD v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      double v4[2] = 0;
      sub_1000DA6E8(v4, *v6, v6[1], 0x2E8BA2E8BA2E8BA3 * ((v6[1] - *v6) >> 3));
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_1000DA938((uint64_t)v8);
  return v4;
}

void sub_1000DA6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1000DA6E8(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_1000DA770(result, a4);
    double result = (void *)sub_1000DA7C8((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1000DA750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1000D7F78(&a9);
  _Unwind_Resume(a1);
}

char *sub_1000DA770(void *a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    sub_1001D7FD4();
  }
  double result = (char *)sub_1000DA8B4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

uint64_t sub_1000DA7C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v17 = a4;
  uint64_t v18 = a4;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  char v16 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = (long long *)(a2 + 8);
    do
    {
      uint64_t v7 = (uint64_t)v6 - 8;
      *(void *)uint64_t v4 = *((void *)v6 - 1);
      BOOL v8 = (unsigned char *)(v4 + 8);
      if (*((char *)v6 + 23) < 0)
      {
        sub_1000DC48C(v8, *(void **)v6, *((void *)v6 + 1));
        uint64_t v10 = v18;
      }
      else
      {
        long long v9 = *v6;
        *(void *)(v4 + 24) = *((void *)v6 + 2);
        *(_OWORD *)BOOL v8 = v9;
        uint64_t v10 = v4;
      }
      long long v11 = *(long long *)((char *)v6 + 24);
      long long v12 = *(long long *)((char *)v6 + 40);
      long long v13 = *(long long *)((char *)v6 + 56);
      *(void *)(v4 + 80) = *((void *)v6 + 9);
      *(_OWORD *)(v4 + 48) = v12;
      *(_OWORD *)(v4 + 64) = v13;
      *(_OWORD *)(v4 + 32) = v11;
      uint64_t v4 = v10 + 88;
      uint64_t v18 = v10 + 88;
      uint64_t v6 = (long long *)((char *)v6 + 88);
    }
    while (v7 + 88 != a3);
  }
  char v16 = 1;
  sub_1000DA900((uint64_t)v15);
  return v4;
}

void sub_1000DA8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1000DA8B4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    sub_1001D7FA0();
  }
  return operator new(88 * a2);
}

uint64_t sub_1000DA900(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10050EA50(a1);
  }
  return a1;
}

uint64_t sub_1000DA938(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10050F520(a1);
  }
  return a1;
}

void sub_1000DA970(void ***a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    unint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        unint64_t v5 = v3;
        sub_1000D7F78(&v5);
      }
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1000DA9E4(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_1000DAAD4(a1, prime);
    }
  }
}

void sub_1000DAAD4(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_1001D7FA0();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = (void *)*v7; *v7; uint64_t i = (void *)*v7)
      {
        unint64_t v13 = i[1];
        if (v10 > 1)
        {
          if (v13 >= a2) {
            v13 %= a2;
          }
        }
        else
        {
          v13 &= a2 - 1;
        }
        if (v13 == v8)
        {
          uint64_t v7 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          int64_t v14 = (void *)*i;
          if (*i)
          {
            long long v15 = i;
            while (1)
            {
              BOOL v16 = sub_100B39178(i + 2, v14 + 2);
              uint64_t v17 = (void *)*v15;
              if (!v16) {
                break;
              }
              int64_t v14 = (void *)*v17;
              long long v15 = (void *)*v15;
              if (!*v17) {
                goto LABEL_31;
              }
            }
            int64_t v14 = (void *)*v15;
            uint64_t v17 = v15;
          }
          else
          {
            uint64_t v17 = i;
          }
LABEL_31:
          *uint64_t v7 = v14;
          void *v17 = **(void **)(*(void *)a1 + 8 * v13);
          **(void **)(*(void *)a1 + 8 * v13) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          uint64_t v7 = i;
          unint64_t v8 = v13;
        }
      }
    }
  }
  else
  {
    long long v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void sub_1000DAC8C(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3) < a4)
  {
    sub_10017C740(a1);
    if (a4 > 0x2E8BA2E8BA2E8BALL) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL) {
      unint64_t v11 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_1000DA770(a1, v11);
    uint64_t v12 = sub_1000DA7C8(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0x2E8BA2E8BA2E8BA3 * ((a1[1] - v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((a1[1] - v9) >> 3);
    sub_1000DAE24(a2, v13, v9);
    uint64_t v12 = sub_1000DA7C8(v8, v13, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  sub_1000DAE24(a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = a1[1];
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 57) < 0) {
        operator delete(*(void **)(v16 - 80));
      }
      v16 -= 88;
    }
    while (v16 != v15);
  }
  a1[1] = v15;
}

void sub_1000DAE14(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1000DAE1C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1000DAE24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    *(void *)a3 = *(void *)v4;
    std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v4 + 8));
    long long v7 = *(_OWORD *)(v4 + 48);
    long long v6 = *(_OWORD *)(v4 + 64);
    long long v8 = *(_OWORD *)(v4 + 32);
    *(void *)(a3 + 80) = *(void *)(v4 + 80);
    *(_OWORD *)(a3 + 48) = v7;
    *(_OWORD *)(a3 + 64) = v6;
    *(_OWORD *)(a3 + 32) = v8;
    a3 += 88;
    v4 += 88;
  }
  while (v4 != v5);
  return v5;
}

__n128 sub_1000DAEA8(_OWORD **a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  long long v4 = (*a1)[1];
  *(_OWORD *)a2 = **a1;
  *(_OWORD *)(a2 + 16) = v4;
  long long v5 = v3[2];
  long long v6 = v3[3];
  long long v7 = v3[5];
  *(_OWORD *)(a2 + 64) = v3[4];
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)(a2 + 48) = v6;
  long long v8 = v3[6];
  long long v9 = v3[7];
  long long v10 = v3[8];
  *(_OWORD *)(a2 + 140) = *(_OWORD *)((char *)v3 + 140);
  *(_OWORD *)(a2 + 112) = v9;
  *(_OWORD *)(a2 + 128) = v10;
  *(_OWORD *)(a2 + 96) = v8;
  memcpy((void *)(a2 + 160), v3 + 10, 0x201uLL);
  uint64_t v11 = *((void *)v3 + 85);
  uint64_t v12 = *((void *)v3 + 86);
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a2 + 680) = v11;
  uint64_t v13 = *(std::__shared_weak_count **)(a2 + 688);
  *(void *)(a2 + 688) = v12;
  if (v13) {
    sub_1000DB0A0(v13);
  }
  long long v14 = *(_OWORD *)((char *)v3 + 696);
  long long v15 = *(_OWORD *)((char *)v3 + 728);
  *(_OWORD *)(a2 + 712) = *(_OWORD *)((char *)v3 + 712);
  *(_OWORD *)(a2 + 728) = v15;
  *(_OWORD *)(a2 + 696) = v14;
  __n128 result = *(__n128 *)((char *)v3 + 744);
  long long v17 = *(_OWORD *)((char *)v3 + 760);
  long long v18 = *(_OWORD *)((char *)v3 + 776);
  *(void *)(a2 + 789) = *(void *)((char *)v3 + 789);
  *(_OWORD *)(a2 + 760) = v17;
  *(_OWORD *)(a2 + 776) = v18;
  *(__n128 *)(a2 + 744) = result;
  return result;
}

uint64_t sub_1000DAF68(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    long long v4 = a1 + 5;
    unint64_t v3 = (void **)a1[1];
  }
  else
  {
    long long v4 = a1 + 5;
    unint64_t v5 = a1[4];
    long long v6 = &v2[v5 >> 8];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 16 * v5;
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((unsigned char *)a1 + 40) + v5);
    if (v8 != v9)
    {
      do
      {
        long long v10 = *(std::__shared_weak_count **)(v8 + 8);
        if (v10)
        {
          sub_1000DB0A0(v10);
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      unint64_t v3 = (void **)a1[2];
    }
  }
  *long long v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 128;
  }
  else
  {
    if (v13 != 2) {
      goto LABEL_18;
    }
    uint64_t v14 = 256;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    long long v15 = *v2++;
    operator delete(v15);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

void sub_1000DB0A0(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t sub_1000DB114(uint64_t a1)
{
  sub_1000DB150(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1000DB150(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      unint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0) {
        operator delete(v2[3]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_1000DB19C(uint64_t a1)
{
  return sub_1000DB114(a1 + 24);
}

void sub_1000DB1A4(uint64_t a1)
{
  sub_1000DB1CC((uint64_t)&v1, a1 + 24);
}

void sub_1000DB1CC(uint64_t a1, uint64_t a2)
{
  sub_1000DB264(a2 + 264, *(char **)(a2 + 272));
  sub_1000DB264(a2 + 176, *(char **)(a2 + 184));
  sub_1000DB2C8(a2 + 152, *(void **)(a2 + 160));
  sub_1000DB264(a2 + 128, *(char **)(a2 + 136));
  sub_1000DB264(a2 + 104, *(char **)(a2 + 112));
  sub_1000DB264(a2 + 80, *(char **)(a2 + 88));
  sub_1000DB264(a2 + 56, *(char **)(a2 + 64));
  sub_1000DB264(a2 + 32, *(char **)(a2 + 40));
  unint64_t v3 = *(char **)(a2 + 16);

  sub_1000DB264(a2 + 8, v3);
}

void sub_1000DB264(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1000DB264(a1, *(void *)a2);
    sub_1000DB264(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void sub_1000DB2C8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1000DB2C8(a1, *a2);
    sub_1000DB2C8(a1, a2[1]);
    sub_1005103F8((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_1000DB324(uint64_t a1)
{
  return sub_1000DB114(a1 + 24);
}

void sub_1000DB32C(uint64_t a1)
{
}

void sub_1000DB334(uint64_t a1)
{
  sub_1000DB35C((uint64_t)&v1, a1 + 24);
}

void sub_1000DB35C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(std::__shared_weak_count **)(a2 + 1168);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  if (*(char *)(a2 + 927) < 0) {
    operator delete(*(void **)(a2 + 904));
  }
  long long v4 = *(std::__shared_weak_count **)(a2 + 808);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  unint64_t v5 = *(std::__shared_weak_count **)(a2 + 688);
  if (v5)
  {
    sub_1000DB0A0(v5);
  }
}

uint64_t sub_1000DB3D4(uint64_t a1)
{
  *(_DWORD *)a1 = 0xFFFF;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_OWORD *)(a1 + 20) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v9 = _Q0;
  *(_OWORD *)(a1 + 36) = _Q0;
  *(_OWORD *)(a1 + 52) = _Q0;
  *(_OWORD *)(a1 + 68) = _Q0;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 88) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(unsigned char *)(a1 + 152) = 0;
  sub_1000DBC34(a1 + 160);
  *(unsigned char *)(a1 + 824) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  *(void *)(a1 + 813) = 0;
  *(void *)(a1 + 832) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 848) = xmmword_101D21938;
  *(_OWORD *)(a1 + 864) = unk_101D21948;
  *(_OWORD *)(a1 + 880) = xmmword_101D21928;
  *(void *)(a1 + 896) = 0xBFF0000000000000;
  *(void *)(a1 + 904) = 0;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_DWORD *)(a1 + 928) = 0;
  *(void *)(a1 + 936) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 944) = v9;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_DWORD *)(a1 + 1176) = 78;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)(a1 + 1368) = _D0;
  *(void *)(a1 + 1376) = 0x7FF8000000000000;
  *(_DWORD *)(a1 + 1384) = -1082130432;
  *(void *)(a1 + 1392) = 0x7FF8000000000000;
  *(void *)(a1 + 1400) = 0;
  *(_DWORD *)(a1 + 1408) = -1082130432;
  *(_WORD *)(a1 + 1416) = 0x8000;
  *(unsigned char *)(a1 + 1418) = 0;
  *(void *)(a1 + 1424) = 0;
  *(_WORD *)(a1 + 1432) = 0x8000;
  *(void *)(a1 + 1440) = 0x100000003;
  *(_DWORD *)(a1 + 1448) = 2;
  *(unsigned char *)(a1 + 1452) = 0;
  *(_DWORD *)(a1 + 1456) = -1;
  *(void *)(a1 + 1464) = 0;
  *(unsigned char *)(a1 + 1472) = 0;
  *(_DWORD *)(a1 + 1476) = 0;
  *(unsigned char *)(a1 + 1480) = 0;
  *(void *)(a1 + 1520) = 0;
  *(_DWORD *)(a1 + 1512) = 0;
  *(void *)(a1 + 1504) = 0;
  *(_OWORD *)(a1 + 1488) = 0u;
  return a1;
}

_DWORD *sub_1000DB55C(_DWORD *a1)
{
  *a1 = 0;
  sub_1000DB5C4((uint64_t)(a1 + 202));
  sub_1000DB6E4((uint64_t)(a1 + 754));
  return a1;
}

void sub_1000DB5A0(_Unwind_Exception *a1)
{
  sub_1000D7C60(v2);
  sub_1000D7B80(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DB5C4(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  sub_1000DBCB4(a1 + 8);
  *(_DWORD *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 156) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(unsigned char *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(void *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(unsigned char *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_DWORD *)(a1 + 368) = 1065353216;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 408) = 1065353216;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_DWORD *)(a1 + 448) = 1065353216;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_DWORD *)(a1 + 488) = 1065353216;
  *(unsigned char *)(a1 + 496) = 0;
  *(unsigned char *)(a1 + 592) = 0;
  sub_1000DBC38(a1 + 600);
  *(unsigned char *)(a1 + 784) = 0;
  *(unsigned char *)(a1 + 808) = 0;
  *(unsigned char *)(a1 + 816) = 0;
  *(unsigned char *)(a1 + 856) = 0;
  *(unsigned char *)(a1 + 944) = 0;
  *(unsigned char *)(a1 + 952) = 0;
  *(unsigned char *)(a1 + 1000) = 0;
  *(unsigned char *)(a1 + 1008) = 0;
  *(unsigned char *)(a1 + 1056) = 0;
  *(unsigned char *)(a1 + 1064) = 0;
  *(unsigned char *)(a1 + 1120) = 0;
  *(unsigned char *)(a1 + 1128) = 0;
  *(unsigned char *)(a1 + 1132) = 0;
  *(unsigned char *)(a1 + 1136) = 0;
  *(unsigned char *)(a1 + 1144) = 0;
  *(_WORD *)(a1 + 1152) = 0;
  *(unsigned char *)(a1 + 1160) = 0;
  *(unsigned char *)(a1 + 1168) = 0;
  *(unsigned char *)(a1 + 1184) = 0;
  *(unsigned char *)(a1 + 1984) = 0;
  *(unsigned char *)(a1 + 1992) = 0;
  *(unsigned char *)(a1 + 2016) = 0;
  *(unsigned char *)(a1 + 2024) = 0;
  *(unsigned char *)(a1 + 2168) = 0;
  *(unsigned char *)(a1 + 2176) = 0;
  *(unsigned char *)(a1 + 2200) = 0;
  *(_WORD *)(a1 + 848) = 0;
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_DWORD *)(a1 + 1176) = 0;
  return a1;
}

uint64_t sub_1000DB6E4(uint64_t a1)
{
  *(unsigned char *)(sub_1000DBF0C(a1) + 136) = 0;
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = off_1022B81C8;
  *((void *)v2 + 7) = 0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *(void *)(a1 + 144) = v2 + 24;
  *(void *)(a1 + 152) = v2;
  unint64_t v3 = (char *)operator new(0x48uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)unint64_t v3 = off_1022B8218;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *((_DWORD *)v3 + 14) = 1065353216;
  *((void *)v3 + 8) = 0;
  *(void *)(a1 + 160) = v3 + 24;
  *(void *)(a1 + 168) = v3;
  long long v4 = operator new(0x50uLL);
  v4[1] = 0;
  double v4[2] = 0;
  *long long v4 = off_1022B8268;
  v4[3] = off_1022B82B8;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *(void *)(a1 + 176) = v4 + 3;
  *(void *)(a1 + 184) = v4;
  *(unsigned char *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  *(_WORD *)(a1 + 288) = 0;
  unint64_t v5 = (char *)operator new(0x48uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)unint64_t v5 = off_1022B82F0;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(void *)(a1 + 296) = v5 + 24;
  *(void *)(a1 + 304) = v5;
  *(_DWORD *)(a1 + 312) = 0xFFFF;
  *(void *)(a1 + 324) = 0;
  *(void *)(a1 + 316) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v14 = _Q0;
  *(_OWORD *)(a1 + 332) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 348) = _Q0;
  *(_OWORD *)(a1 + 364) = _Q0;
  *(_OWORD *)(a1 + 380) = _Q0;
  *(_DWORD *)(a1 + 396) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 400) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 424) = 0;
  *(void *)(a1 + 428) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 436) = 0x7FFFFFFF;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 440) = 0;
  *(unsigned char *)(a1 + 464) = 0;
  sub_1000DBC34(a1 + 472);
  *(_DWORD *)(a1 + 1112) = 0xFFFF;
  *(void *)(a1 + 1124) = 0;
  *(void *)(a1 + 1116) = 0;
  *(_OWORD *)(a1 + 1132) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 1148) = v14;
  *(_OWORD *)(a1 + 1164) = v14;
  *(_OWORD *)(a1 + 1180) = v14;
  *(_DWORD *)(a1 + 1196) = 0;
  *(void *)(a1 + 1200) = 0xBFF0000000000000;
  *(void *)(a1 + 1216) = 0;
  *(void *)(a1 + 1208) = 0;
  *(_DWORD *)(a1 + 1224) = 0;
  *(void *)(a1 + 1228) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1236) = 0x7FFFFFFF;
  *(void *)(a1 + 1240) = 0;
  *(void *)(a1 + 1256) = 0;
  *(void *)(a1 + 1248) = 0;
  *(unsigned char *)(a1 + 1264) = 0;
  sub_1000DBC34(a1 + 1272);
  uint64_t v15 = 0x4066800000000000;
  sub_10051024C(&v15, (void *)(a1 + 1912));
  sub_1000DBC38(a1 + 1928);
  sub_1000DBC38(a1 + 2112);
  sub_1000DBC34(a1 + 2296);
  *(void *)(a1 + 2936) = 0;
  *(unsigned char *)(a1 + 2944) = 0;
  sub_1000DBCB4(a1 + 2952);
  *(_DWORD *)(a1 + 3096) = 0;
  *(_OWORD *)(a1 + 3104) = 0u;
  *(_OWORD *)(a1 + 3120) = 0u;
  *(unsigned char *)(a1 + 3136) = 1;
  *(_DWORD *)(a1 + 3140) = 0;
  *(void *)(a1 + 3144) = 0x4018000000000000;
  *(_DWORD *)(a1 + 3152) = 0;
  *(unsigned char *)(a1 + 3156) = 0;
  *(unsigned char *)(a1 + 3256) = 0;
  *(_OWORD *)(a1 + 3160) = 0u;
  *(_OWORD *)(a1 + 3176) = 0u;
  *(_OWORD *)(a1 + 3192) = 0u;
  *(_OWORD *)(a1 + 3208) = 0u;
  *(_OWORD *)(a1 + 3224) = 0u;
  *(_OWORD *)(a1 + 3240) = 0u;
  *(_OWORD *)(a1 + 3264) = 0u;
  *(_OWORD *)(a1 + 3280) = 0u;
  *(_OWORD *)(a1 + 3296) = 0u;
  *(void *)(a1 + 3312) = 0;
  *(_DWORD *)(a1 + 3320) = 1065353216;
  *(_DWORD *)(a1 + 3328) = -1;
  *(void *)(a1 + 3348) = 0;
  *(_DWORD *)(a1 + 3356) = 0;
  *(void *)(a1 + 3332) = 0;
  *(void *)(a1 + 3340) = 0;
  *(_DWORD *)(a1 + 3360) = 16777217;
  *(_OWORD *)(a1 + 3368) = 0u;
  *(_OWORD *)(a1 + 3384) = 0u;
  *(_DWORD *)(a1 + 3400) = 1176256512;
  *(_WORD *)(a1 + 3404) = 0;
  *(unsigned char *)(a1 + 3406) = 0;
  sub_1000DBDD4((void *)(a1 + 3408));
  *(unsigned char *)(a1 + 3424) = 0;
  *(void *)(a1 + 3428) = sub_1000DBCA8();
  *(_DWORD *)(a1 + 3436) = v11;
  *(void *)(a1 + 3440) = sub_1000DBCA8();
  *(_DWORD *)(a1 + 3448) = v12;
  return a1;
}

void sub_1000DBA30(_Unwind_Exception *a1)
{
  sub_10050FE8C(v3);
  sub_10050EC2C(v2);
  unint64_t v5 = *(std::__shared_weak_count **)(v1 + 2824);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  long long v6 = *(std::__shared_weak_count **)(v1 + 1920);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(v1 + 1800);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(v1 + 1000);
  if (v8) {
    sub_1000DB0A0(v8);
  }
  long long v9 = *(std::__shared_weak_count **)(v1 + 304);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (*(unsigned char *)(v1 + 280) && *(char *)(v1 + 223) < 0) {
    operator delete(*(void **)(v1 + 200));
  }
  long long v10 = *(std::__shared_weak_count **)(v1 + 184);
  if (v10) {
    sub_1000DB0A0(v10);
  }
  if (*(void *)(v1 + 168)) {
    sub_1000DB0A0(*(std::__shared_weak_count **)(v1 + 168));
  }
  if (*(void *)(v1 + 152)) {
    sub_1000DB0A0(*(std::__shared_weak_count **)(v1 + 152));
  }
  _Unwind_Resume(a1);
}

double sub_1000DBB08(uint64_t a1)
{
  *(_OWORD *)a1 = xmmword_101D1C320;
  *(void *)(a1 + 16) = 0xBFF0000000000000;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = -1082130432;
  *(unsigned char *)(a1 + 52) = 1;
  *(_DWORD *)(a1 + 56) = 1;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0xBFF0000000000000;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 124) = -1;
  *(void *)(a1 + 136) = -1;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 312) = -1;
  *(_DWORD *)(a1 + 332) = 0;
  *(_OWORD *)(a1 + 336) = xmmword_101D1C320;
  *(_DWORD *)(a1 + 352) = 1;
  *(unsigned char *)(a1 + 356) = 0;
  *(void *)(a1 + 376) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 384) = _Q1;
  *(_OWORD *)(a1 + 400) = xmmword_101D1C570;
  *(void *)(a1 + 416) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(void *)(a1 + 448) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 464) = xmmword_101D1C570;
  *(_OWORD *)(a1 + 480) = _Q1;
  *(_OWORD *)(a1 + 496) = xmmword_101D1C570;
  *(unsigned char *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 544) = xmmword_101D1C570;
  *(void *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 568) = -1;
  *(unsigned char *)(a1 + 576) = 0;
  *(void *)(a1 + 584) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 592) = _Q1;
  *(_WORD *)(a1 + 608) = 0;
  *(unsigned char *)(a1 + 610) = 0;
  *(unsigned char *)(a1 + 636) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 280) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 316) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  double result = 0.0;
  *(_OWORD *)(a1 + 612) = xmmword_101D47CB0;
  *(void *)(a1 + 628) = 0;
  return result;
}

__n128 sub_1000DBC38(uint64_t a1)
{
  *(_DWORD *)a1 = 0xFFFF;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 4) = 0;
  *(_OWORD *)(a1 + 20) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a1 + 36) = result;
  *(__n128 *)(a1 + 52) = result;
  *(__n128 *)(a1 + 68) = result;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 156) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 180) = 0;
  *(_WORD *)(a1 + 182) = 0;
  return result;
}

uint64_t sub_1000DBCA8()
{
  return 0x90800000000;
}

uint64_t sub_1000DBCB4(uint64_t a1)
{
  sub_100134750(__p, "default");
  sub_1000DBD34(a1, 0, 0, (long long *)__p, 0.0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1000DBD18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000DBD34(uint64_t a1, int a2, char a3, long long *a4, double a5)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 8) = a3;
  uint64_t v7 = a1 + 16;
  if (*((char *)a4 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)v7, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v8 = *a4;
    *(void *)(v7 + 16) = *((void *)a4 + 2);
    *(_OWORD *)uint64_t v7 = v8;
  }
  *(double *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 52) = 0;
  *(void *)(a1 + 56) = 0xFFFFFFFF00000000;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 64) = _Q0;
  *(_OWORD *)(a1 + 80) = _Q0;
  *(void *)(a1 + 96) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 108) = 1;
  *(unsigned char *)(a1 + 110) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = 0;
  return a1;
}

void sub_1000DBDD4(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x160uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = off_1022B8390;
  sub_1000DBE44((uint64_t)&v3, (uint64_t)(v2 + 3));
  *a1 = v2 + 3;
  a1[1] = v2;
}

__n128 sub_1000DBE44(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 256) = 0;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a2 + 8) = a2 + 16;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 32) = a2 + 40;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = a2 + 64;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = a2 + 88;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = a2 + 112;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = a2 + 136;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 152) = a2 + 160;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = a2 + 184;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 244) = 0u;
  *(void *)(a2 + 264) = a2 + 272;
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 288) = 0;
  *(void *)(a2 + 296) = 0;
  *(void *)(a2 + 280) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a2 + 304) = result;
  *(void *)(a2 + 320) = 0xBFF0000000000000;
  return result;
}

uint64_t sub_1000DBF0C(uint64_t a1)
{
  return a1;
}

double sub_1000DBF34(uint64_t a1)
{
  *(_OWORD *)a1 = xmmword_101DB3600;
  *(_OWORD *)(a1 + 16) = xmmword_101DB3600;
  *(void *)(a1 + 32) = sub_1000DBFA0()[3];
  *(void *)(a1 + 40) = sub_1000DBFA0()[4];
  *(void *)(a1 + 48) = sub_1000DBFA0()[5];
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 56) = _Q0;
  *(_OWORD *)(a1 + 72) = _Q0;
  *(unsigned char *)(a1 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

uint64_t *sub_1000DBFA0()
{
  return &qword_10248D4E0;
}

double sub_1000DBFAC(uint64_t a1, void *a2)
{
  *(void *)a1 = *a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  return result;
}

__n128 sub_1000DBFCC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

const void **sub_1000DBFDC(uint64_t a1)
{
  __n128 result = *(const void ***)(a1 + 32);
  if (result)
  {
    sub_1000DC024(result);
    operator delete();
  }
  return result;
}

const void **sub_1000DC024(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_1000DC058(uint64_t a1)
{
  sub_10010F274((uint64_t)v24);
  uint64_t v2 = sub_100132EFC(v25, (uint64_t)"Request, type, ", 15);
  unsigned int v3 = *(_DWORD *)a1 - 1;
  if (v3 > 6) {
    char v4 = "none";
  }
  else {
    char v4 = off_1022C4E20[v3];
  }
  size_t v5 = strlen(v4);
  long long v6 = sub_100132EFC(v2, (uint64_t)v4, v5);
  uint64_t v7 = sub_100132EFC(v6, (uint64_t)", lowPriority, ", 15);
  if (*(unsigned char *)(a1 + 8)) {
    long long v8 = "yes";
  }
  else {
    long long v8 = "no";
  }
  if (*(unsigned char *)(a1 + 8)) {
    uint64_t v9 = 3;
  }
  else {
    uint64_t v9 = 2;
  }
  long long v10 = sub_100132EFC(v7, (uint64_t)v8, v9);
  int v11 = sub_100132EFC(v10, (uint64_t)", requester, ", 13);
  int v12 = *(char *)(a1 + 39);
  if (v12 >= 0) {
    uint64_t v13 = a1 + 16;
  }
  else {
    uint64_t v13 = *(void *)(a1 + 16);
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(a1 + 39);
  }
  else {
    uint64_t v14 = *(void *)(a1 + 24);
  }
  uint64_t v15 = sub_100132EFC(v11, v13, v14);
  sub_100132EFC(v15, (uint64_t)", numOfRequestedScans, ", 23);
  uint64_t v16 = (void *)std::ostream::operator<<();
  long long v17 = sub_100132EFC(v16, (uint64_t)", timestamp, ", 13);
  uint64_t v18 = *v17;
  *(_DWORD *)((char *)v17 + *(void *)(*v17 - 24) + 8) = *(_DWORD *)((unsigned char *)v17 + *(void *)(*v17 - 24) + 8) & 0xFFFFFEFB | 4;
  *(uint64_t *)((char *)v17 + *(void *)(v18 - 24) + 16) = 1;
  uint64_t v19 = (void *)std::ostream::operator<<();
  uint64_t v20 = sub_100132EFC(v19, (uint64_t)", age, ", 7);
  uint64_t v21 = *v20;
  *(_DWORD *)((char *)v20 + *(void *)(*v20 - 24) + 8) = *(_DWORD *)((unsigned char *)v20 + *(void *)(*v20 - 24) + 8) & 0xFFFFFEFB | 4;
  *(uint64_t *)((char *)v20 + *(void *)(v21 - 24) + 16) = 1;
  CFAbsoluteTimeGetCurrent();
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v24
  v25[0] = v22;
  if (v26 < 0) {
    operator delete((void *)v25[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1000DC3A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

const void **sub_1000DC3C0(uint64_t a1)
{
  return sub_1000DC024((const void **)(a1 + 24));
}

char *sub_1000DC3CC(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  char v4 = __dst;
  int v11 = __dst;
  int v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  _OWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_1000DC48C(v4, *(void **)v6, *((void *)v6 + 1));
        char v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)char v4 = v7;
      }
      long long v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      int v12 = v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_1000DC52C((uint64_t)v9);
  return v4;
}

void sub_1000DC478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1000DC48C(unsigned char *__dst, void *__src, unint64_t a3)
{
  size_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_1000E6574();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    long long v8 = operator new(v6 + 1);
    v5[1] = a3;
    _DWORD v5[2] = v7 | 0x8000000000000000;
    *size_t v5 = v8;
    size_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_1000DC52C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1001D86C4(a1);
  }
  return a1;
}

void sub_1000DC56C(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = (int *)v1;
  char v4 = v3;
  sub_1000DE958(v5, v1);
  sub_1000DC638(v2, (uint64_t)v5, v4);
  sub_1000D7DCC((uint64_t)&v7);
  sub_1000D7C60((uint64_t)&v6);
  sub_1000D7B80((uint64_t)v5);
}

void sub_1000DC61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000DC638(int *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
      sub_1000DE894(a3, a2);
      break;
    case 7:
      sub_100CAACA4(a2, (uint64_t)(a1 + 2), (uint64_t)a3);
      break;
    case 8:
      sub_100CAC248(a2, a3);
      break;
    case 0x1D:
      sub_100CAC610(a2, a3);
      break;
    default:
      sub_10050EA98();
  }
}

void sub_1000DC6F0(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = (int *)v1;
  char v4 = v3;
  sub_1000DEA7C((uint64_t)v6, v1, v5);
  sub_1000DC7CC(v2, (uint64_t)v6, v4);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  sub_1000D7DCC((uint64_t)&v8);
  sub_1000D7C60((uint64_t)&v7);
  sub_1000D7B80((uint64_t)v6);
}

void sub_1000DC7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000DC7CC(int *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  unsigned int v3 = a1 + 2;
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      uint64_t v4 = a2;
      goto LABEL_4;
    case 1:
      uint64_t v4 = a2;
      goto LABEL_4;
    case 2:
      uint64_t v4 = a2;
      goto LABEL_4;
    case 3:
      sub_1011F7BEC(a2, a3);
      return;
    case 4:
      uint64_t v4 = a2;
      goto LABEL_4;
    case 5:
      uint64_t v4 = a2;
      goto LABEL_4;
    case 6:
      uint64_t v4 = a2;
      goto LABEL_4;
    case 7:
      sub_1011F691C(a2, (uint64_t)v3, (uint64_t)a3);
      return;
    case 8:
      sub_1011F4CCC(a2, (uint64_t)a3);
      return;
    case 9:
      uint64_t v4 = a2;
      goto LABEL_4;
    case 0xA:
      uint64_t v4 = a2;
      goto LABEL_4;
    case 0xB:
      uint64_t v4 = a2;
      goto LABEL_4;
    case 0xC:
      uint64_t v4 = a2;
      goto LABEL_4;
    case 0xD:
      uint64_t v4 = a2;
      goto LABEL_4;
    case 0xE:
      uint64_t v4 = a2;
      goto LABEL_4;
    case 0xF:
      uint64_t v4 = a2;
      goto LABEL_4;
    case 0x10:
      uint64_t v4 = a2;
      goto LABEL_4;
    case 0x11:
      uint64_t v4 = a2;
      goto LABEL_4;
    case 0x12:
      uint64_t v4 = a2;
      goto LABEL_4;
    case 0x13:
      uint64_t v4 = a2;
      goto LABEL_4;
    case 0x14:
      sub_1011F2FC0(a2, (uint64_t)a3);
      return;
    case 0x15:
      uint64_t v4 = a2;
      goto LABEL_4;
    case 0x16:
      sub_1011F4804(a2, v3, (uint64_t)a3);
      return;
    case 0x17:
      uint64_t v4 = a2;
      goto LABEL_4;
    case 0x18:
      sub_1011F5058(a2, (uint64_t)v3, (uint64_t)a3);
      return;
    case 0x19:
      uint64_t v4 = a2;
      goto LABEL_4;
    case 0x1A:
      uint64_t v4 = a2;
      goto LABEL_4;
    case 0x1B:
      uint64_t v4 = a2;
      goto LABEL_4;
    case 0x1C:
      uint64_t v4 = a2;
LABEL_4:
      sub_1000DCBC0(v4, a3);
      break;
    case 0x1D:
      sub_1011F1DE4(a2, (uint64_t)a3);
      break;
    default:
      sub_10050EA98();
  }
}

_DWORD *sub_1000DCBC0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  if (*(double *)(a1 + 1428) != -1.0 || *(_DWORD *)(a1 + 1564))
  {
    uint64_t v3 = sub_101AA6B00();
    return (_DWORD *)sub_1000DCC14(v3);
  }
  else
  {
    return sub_1000DE9B8(a2, a1);
  }
}

void sub_1000DCC14(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = (_DWORD *)v1;
  uint64_t v4 = v3;
  sub_1000DEBEC(v5, v1);
  sub_1000DCCE0(v2, (uint64_t)v5, v4);
  sub_1000D7DCC((uint64_t)&v7);
  sub_1000D7C60((uint64_t)&v6);
  sub_1000D7B80((uint64_t)v5);
}

void sub_1000DCCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000DCCE0(_DWORD *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v3 = (__n128 *)(a1 + 2);
  size_t v5 = a3 + 1490;
  switch(*a1 ^ ((int)*a1 >> 31))
  {
    case 0:
    case 1:
    case 0x13:
      sub_1000DEB28(a3, a2);
      break;
    case 2:
      sub_100E3B410(a2, (uint64_t)a3);
      break;
    case 3:
      sub_100E3B818(a2, v3, (uint64_t)a3);
      break;
    case 4:
      sub_100E38CBC(a2, v3, (uint64_t)a3);
      break;
    case 5:
      sub_100E38F50(a2, (uint64_t)v3, (uint64_t)a3);
      break;
    case 6:
      sub_100E394A0(a2, (uint64_t)v3, (uint64_t)a3);
      break;
    case 7:
      sub_100E396D8(a2, (uint64_t)v3, a3);
      break;
    case 8:
      sub_100E3BAB4(a2, (uint64_t *)v3, (uint64_t)a3);
      break;
    case 9:
      sub_100E3CC3C(a2, v3, (uint64_t)a3);
      break;
    case 0xA:
      sub_100E3D69C(a2, v3, a3);
      break;
    case 0xB:
      sub_100E3CBA0(a2, (int *)v3, (uint64_t)a3);
      break;
    case 0xC:
      sub_1000DEB28(a3, a2);
      v5[417] = v3->n128_u8[0];
      break;
    case 0xD:
      uint64_t v6 = sub_1000DEB28(a3, a2);
      if ((*(_DWORD *)(a2 + 6368) - 1) >= 2) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = *(void *)(a2 + 6384);
      }
      *((void *)v6 + 744) = v7;
      if (*(int *)(a2 + 6400) >= 1) {
        *size_t v5 = 1;
      }
      break;
    case 0xE:
      sub_1000DEB28(a3, a2);
      v5[418] = v3->n128_u8[0];
      break;
    case 0xF:
      sub_1000DEB28(a3, a2)[1593] = v3->n128_u32[0];
      break;
    case 0x10:
      sub_1000DD1AC(a2, (uint64_t)v3, (uint64_t)a3);
      break;
    case 0x11:
      sub_100E3FD40(a2, a3);
      break;
    case 0x12:
      sub_100E3D70C(a2, v3, (uint64_t)a3);
      break;
    case 0x14:
      sub_100E3DE64(a2, (int *)v3, (uint64_t)a3);
      break;
    case 0x15:
      sub_100E3D784(a2);
      break;
    case 0x16:
      sub_100E3E924(a2, v3, a3);
      break;
    case 0x17:
      sub_100E45490(a2, (unsigned __int8 *)v3, (uint64_t)a3);
      break;
    case 0x18:
      sub_100E3EB0C(a2, (uint64_t)v3, (uint64_t)a3);
      break;
    case 0x19:
      sub_100E44B04(a2, v3, (uint64_t)a3);
      break;
    case 0x1A:
      sub_100E44EEC(a2, v3, (uint64_t)a3);
      break;
    case 0x1B:
      sub_100E38998(a2, (uint64_t)a3);
      break;
    case 0x1C:
      sub_1000DEB28(a3, a2)[1587] = 0;
      break;
    case 0x1D:
      sub_100E45C80(a2, (uint64_t)a3);
      break;
    default:
      sub_10050EA98();
  }
}

_DWORD *sub_1000DD1AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result = sub_1000DEB28((_DWORD *)a3, a1);
  if (*(_DWORD *)(a2 + 96) != 4 || *(_DWORD *)(a2 + 84) >= 0x42u)
  {
    long long v6 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a3 + 3424) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a3 + 3440) = v6;
    *(_OWORD *)(a3 + 3456) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a3 + 3468) = *(_OWORD *)(a2 + 140);
    long long v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a3 + 3360) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a3 + 3376) = v7;
    long long v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a3 + 3392) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a3 + 3408) = v8;
    long long v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a3 + 3328) = *(_OWORD *)a2;
    *(_OWORD *)(a3 + 3344) = v9;
    memcpy((void *)(a3 + 3488), (const void *)(a2 + 160), 0x201uLL);
    uint64_t v10 = *(void *)(a2 + 680);
    uint64_t v11 = *(void *)(a2 + 688);
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a3 + 4008) = v10;
    int v12 = *(std::__shared_weak_count **)(a3 + 4016);
    *(void *)(a3 + 4016) = v11;
    if (v12) {
      sub_1000DB0A0(v12);
    }
    long long v13 = *(_OWORD *)(a2 + 776);
    *(_OWORD *)(a3 + 4088) = *(_OWORD *)(a2 + 760);
    *(_OWORD *)(a3 + 4104) = v13;
    *(void *)(a3 + 4117) = *(void *)(a2 + 789);
    long long v14 = *(_OWORD *)(a2 + 712);
    *(_OWORD *)(a3 + 4024) = *(_OWORD *)(a2 + 696);
    *(_OWORD *)(a3 + 4040) = v14;
    long long v15 = *(_OWORD *)(a2 + 744);
    *(_OWORD *)(a3 + 4056) = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a3 + 4072) = v15;
    if (*(_DWORD *)(a2 + 96) == 6)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022FBF90);
      }
      uint64_t v16 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        sub_10005BA4C();
        long long v17 = v35 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136380675;
        *(void *)&uint8_t buf[4] = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "WifiCalc, integrity, updating reference cell location to %{private}s", buf, 0xCu);
        if (v35 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022FBF90);
        }
        sub_10005BA4C();
        if (v31 >= 0) {
          unint64_t v28 = buf;
        }
        else {
          unint64_t v28 = *(unsigned char **)buf;
        }
        int v32 = 136380675;
        uint64_t v33 = v28;
        uint64_t v29 = (char *)_os_log_send_and_compose_impl();
        if (v31 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::LeechLocation &) const", "%s\n", v29);
        if (v29 != (char *)__p) {
          free(v29);
        }
      }
      long long v18 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a3 + 4224) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a3 + 4240) = v18;
      *(_OWORD *)(a3 + 4256) = *(_OWORD *)(a2 + 128);
      long long v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a3 + 4160) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a3 + 4176) = v19;
      long long v20 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a3 + 4192) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a3 + 4208) = v20;
      long long v21 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a3 + 4128) = *(_OWORD *)a2;
      *(_OWORD *)(a3 + 4268) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a3 + 4144) = v21;
      memcpy((void *)(a3 + 4288), (const void *)(a2 + 160), 0x201uLL);
      uint64_t v22 = *(void *)(a2 + 680);
      uint64_t v23 = *(void *)(a2 + 688);
      if (v23) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(a3 + 4808) = v22;
      uint64_t v24 = *(std::__shared_weak_count **)(a3 + 4816);
      *(void *)(a3 + 4816) = v23;
      if (v24) {
        sub_1000DB0A0(v24);
      }
      long long v25 = *(_OWORD *)(a2 + 776);
      *(_OWORD *)(a3 + 4888) = *(_OWORD *)(a2 + 760);
      *(_OWORD *)(a3 + 4904) = v25;
      *(void *)(a3 + 4917) = *(void *)(a2 + 789);
      long long v26 = *(_OWORD *)(a2 + 712);
      *(_OWORD *)(a3 + 4824) = *(_OWORD *)(a2 + 696);
      *(_OWORD *)(a3 + 4840) = v26;
      long long v27 = *(_OWORD *)(a2 + 744);
      *(_OWORD *)(a3 + 4856) = *(_OWORD *)(a2 + 728);
      *(_OWORD *)(a3 + 4872) = v27;
    }
    return (_DWORD *)sub_1000DFB88(*(void *)(a3 + 4928), a2);
  }
  return result;
}

void sub_1000DD568(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

void sub_1000DD588(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = (int *)v1;
  uint64_t v4 = v3;
  sub_1000DED10(v5, v1);
  sub_1000DD654(v2, (uint64_t)v5, v4);
  sub_1000D7DCC((uint64_t)&v7);
  sub_1000D7C60((uint64_t)&v6);
  sub_1000D7B80((uint64_t)v5);
}

void sub_1000DD638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000DD654(int *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v4 = a1 + 2;
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 9:
    case 0xC:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1D:
      sub_1000DEC4C(a3, a2);
      break;
    case 2:
      sub_100DF5174(a2, (uint64_t)a3);
      break;
    case 3:
      sub_100DF4D74(a2, v4, (uint64_t)a3);
      break;
    case 4:
      sub_100DF48EC(a2, v4, (uint64_t)a3);
      break;
    case 5:
      sub_100DF55CC(a2, (uint64_t)v4, (uint64_t)a3);
      break;
    case 6:
      sub_100DF57C8(a2, a3);
      break;
    case 7:
      sub_100DF4B3C(a2, (uint64_t)a3);
      break;
    case 8:
      sub_100DF5828(a2, (uint64_t)a3);
      break;
    case 0xA:
      sub_100DF6364(a2, v4, (uint64_t)a3);
      break;
    case 0xB:
      sub_100DF5A2C(a2, (uint64_t)a3);
      break;
    case 0xD:
      sub_100DF6708(a2, (uint64_t)a3);
      break;
    case 0x14:
      sub_100DF6154(a2, (uint64_t)a3);
      break;
    case 0x15:
      sub_100DF5D7C(a2, v4, (uint64_t)a3);
      break;
    case 0x18:
      sub_100DF68EC(a2, (uint64_t)a3);
      break;
    case 0x1A:
      size_t v5 = sub_1000DEC4C(a3, a2);
      if (*(int *)(a2 + 6400) <= 0 && !*((unsigned char *)v5 + 1961)) {
        *((unsigned char *)v5 + 1961) = 1;
      }
      break;
    case 0x1B:
      sub_100DF539C(a2, (uint64_t)a3);
      break;
    case 0x1C:
      sub_100DF6DF0(a2, (uint64_t)a3);
      break;
    default:
      sub_10050EA98();
  }
}

void sub_1000DD914(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = (int *)v1;
  uint64_t v4 = v3;
  uint64_t v7 = *v5;
  uint64_t v6 = (std::__shared_weak_count *)v5[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1000DF9A4((uint64_t)v8, v1);
  v10[432] = v7;
  uint64_t v11 = v6;
  sub_1000DDA20(v2, (uint64_t)v8, v4);
  if (v11) {
    sub_1000DB0A0(v11);
  }
  sub_1000D7DCC((uint64_t)v10);
  sub_1000D7C60((uint64_t)&v9);
  sub_1000D7B80((uint64_t)v8);
}

void sub_1000DD9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000DDA20@<X0>(int *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v3 = (uint64_t)(a1 + 2);
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      uint64_t result = (uint64_t)sub_1000DED70(a3, a2);
      break;
    case 7:
      uint64_t result = sub_1007F6BB0(a2, v3, a3);
      break;
    case 0x14:
      uint64_t result = sub_1007F6B34(a2, v3, a3);
      break;
    default:
      sub_10050EA98();
  }
  return result;
}

void sub_1000DDAC0(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = (int *)v1;
  uint64_t v4 = v3;
  sub_1000DEEF8(v5, v1);
  sub_1000DDB8C(v2, (uint64_t)v5, v4);
  sub_1000D7DCC((uint64_t)&v7);
  sub_1000D7C60((uint64_t)&v6);
  sub_1000D7B80((uint64_t)v5);
}

void sub_1000DDB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000DDB8C(int *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v3 = a1 + 2;
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x18:
    case 0x1A:
    case 0x1C:
    case 0x1D:
      sub_1000DEE34(a3, a2);
      break;
    case 1:
      sub_100DE266C(a2, a3);
      break;
    case 4:
      sub_100DE28D0(a2, v3, a3);
      break;
    case 9:
      sub_100DE2A08(a2, v3, a3);
      break;
    case 0x17:
      sub_100DE2B40(a2, a3);
      break;
    case 0x19:
      sub_100DE2C74(a2, v3, a3);
      break;
    case 0x1B:
      sub_100DE2DAC(a2, a3);
      break;
    default:
      sub_10050EA98();
  }
}

void sub_1000DDCA0(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = (int *)v1;
  uint64_t v4 = v3;
  sub_1000DF01C(v5, v1);
  sub_1000DDD6C(v2, (uint64_t)v5, v4);
  sub_1000D7DCC((uint64_t)&v7);
  sub_1000D7C60((uint64_t)&v6);
  sub_1000D7B80((uint64_t)v5);
}

void sub_1000DDD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000DDD6C(int *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1D:
      sub_1000DEF58(a3, a2);
      break;
    case 0x14:
      sub_100ECBCD0(a2, a1 + 2, a3);
      break;
    case 0x1C:
      sub_100ECBA40(a2, a3);
      break;
    default:
      sub_10050EA98();
  }
}

void sub_1000DDE08(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = (int *)v1;
  uint64_t v4 = v3;
  sub_1000DF190(v6, v1, v5);
  sub_1000DDEF0(v2, (uint64_t)v6, v4);
  if (v10 < 0) {
    operator delete(__p);
  }
  sub_1000D7DCC((uint64_t)&v8);
  sub_1000D7C60((uint64_t)&v7);
  sub_1000D7B80((uint64_t)v6);
}

void sub_1000DDED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100946030((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000DDEF0(int *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
      sub_1000DF07C(a3, a2);
      break;
    case 7:
      sub_100940534(a2, (uint64_t)a3);
      break;
    case 8:
      sub_100940614(a2, (uint64_t)a3);
      break;
    case 0x14:
      sub_10093D52C(a2, (uint64_t)a3);
      break;
    case 0x18:
      sub_10094046C(a2, (uint64_t)a3);
      break;
    case 0x1D:
      sub_10094301C(a2, (uint64_t)a3);
      break;
    default:
      sub_10050EA98();
  }
}

void sub_1000DDFD8(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = (int *)v1;
  uint64_t v4 = v3;
  sub_1000DF2F4(v5, v1);
  sub_1000DE0A4(v2, (uint64_t)v5, v4);
  sub_1000D7DCC((uint64_t)&v7);
  sub_1000D7C60((uint64_t)&v6);
  sub_1000D7B80((uint64_t)v5);
}

void sub_1000DE088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000DE0A4(int *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      sub_1000DF230(a3, a2);
      break;
    case 7:
      sub_100FEC9F8(a2);
      break;
    case 9:
      sub_100FECFC4(a2, a3);
      break;
    case 0x14:
      sub_100FECE88(a2, a3);
      break;
    case 0x18:
      sub_100FECECC(a2);
      break;
    default:
      sub_10050EA98();
  }
}

void sub_1000DE170(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = (int *)v1;
  uint64_t v4 = v3;
  sub_1000DF418((uint64_t)v6, v1, v5);
  sub_1000DE24C(v2, v6, v4);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  sub_1000D7DCC((uint64_t)&v8);
  sub_1000D7C60((uint64_t)&v7);
  sub_1000D7B80((uint64_t)v6);
}

void sub_1000DE230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000DE24C(int *a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v3 = a1 + 2;
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x1A:
    case 0x1C:
      sub_1000DF354(a3, (uint64_t)a2);
      break;
    case 4:
      sub_10050DE70((uint64_t)a2, v3, (uint64_t)a3);
      break;
    case 7:
      sub_10050C28C((uint64_t)a2);
      break;
    case 8:
      sub_10050CED4((uint64_t)a2, a3);
      break;
    case 0x13:
      sub_10050DBC4(a2, v3, (uint64_t)a3);
      break;
    case 0x14:
      sub_10050CDC4((uint64_t)a2);
      break;
    case 0x18:
      sub_10050CCD0((uint64_t)a2);
      break;
    case 0x19:
      sub_10050DF64((uint64_t)a2, (uint64_t)a3);
      break;
    case 0x1B:
      sub_10050BADC((uint64_t)a2, (uint64_t)a3);
      break;
    case 0x1D:
      sub_10050D6B4((uint64_t)a2, a3);
      break;
    default:
      sub_10050EA98();
  }
}

void sub_1000DE3B4(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = (int *)v1;
  uint64_t v4 = v3;
  uint64_t v6 = (std::__shared_weak_count *)v5[1];
  v7[0] = *v5;
  v7[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1000DF588((uint64_t)v8, v1, v7);
  sub_1000DE4C4(v2, (uint64_t)v8, v4);
  if (v11) {
    sub_1000DB0A0(v11);
  }
  sub_1000D7DCC((uint64_t)&v10);
  sub_1000D7C60((uint64_t)&v9);
  sub_1000D7B80((uint64_t)v8);
  if (v6) {
    sub_1000DB0A0(v6);
  }
}

void sub_1000DE49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10050E04C((uint64_t)va);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  _Unwind_Resume(a1);
}

void sub_1000DE4C4(int *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
      sub_1000DF4C4(a3, a2);
      break;
    case 7:
      sub_100C62A5C(a2);
      break;
    case 8:
      sub_100C62D1C(a2);
      break;
    case 9:
      sub_100C6307C(a2);
      break;
    case 0x14:
      sub_100C61350(a2);
      break;
    case 0x18:
      sub_100C627A4(a2);
      break;
    case 0x1D:
      sub_100C63290(a2);
      break;
    default:
      sub_10050EA98();
  }
}

void sub_1000DE5D4(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = (int *)v1;
  uint64_t v4 = v3;
  sub_1000DF6F8(v5, v1);
  sub_1000DE6A0(v2, (uint64_t)v5, v4);
  sub_1000D7DCC((uint64_t)&v7);
  sub_1000D7C60((uint64_t)&v6);
  sub_1000D7B80((uint64_t)v5);
}

void sub_1000DE684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_1000DE6A0@<D0>(int *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      sub_1000DF634(a3, a2);
      break;
    case 7:
      double result = sub_100AC6328(a2, (uint64_t)a3);
      break;
    case 0x14:
      double result = sub_100AC5E90(a2, (uint64_t)a3);
      break;
    case 0x18:
      double result = sub_100AC629C(a2, (uint64_t)a3);
      break;
    default:
      sub_10050EA98();
  }
  return result;
}

void sub_1000DE750(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = (int *)v1;
  uint64_t v4 = v3;
  sub_1000DF81C(v5, v1);
  sub_1000DE81C(v2, v5, v4);
  sub_1000D7DCC((uint64_t)&v7);
  sub_1000D7C60((uint64_t)&v6);
  sub_1000D7B80((uint64_t)v5);
}

void sub_1000DE800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000DE81C(int *a1@<X0>, unsigned char *a2@<X1>, _DWORD *a3@<X8>)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      sub_1000DF758(a3, (uint64_t)a2);
      break;
    case 0x17:
      sub_1012F8E44(a2, (uint64_t)a3);
      break;
    default:
      sub_10050EA98();
  }
}

_DWORD *sub_1000DE894(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DB55C(a1);
  sub_1000D76D0((uint64_t)v4, a2);
  sub_1000D846C((uint64_t)(a1 + 202), a2 + 808);
  sub_1000D9488((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1000DE8E0(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DE8F4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1000D9488((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_1000DE944(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1000DE958(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DB55C(a1);
  sub_1000D76D0((uint64_t)v4, a2);
  sub_1000D846C((uint64_t)(a1 + 202), a2 + 808);
  sub_1000D9488((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1000DE9A4(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1000DE9B8(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DB55C(a1);
  sub_1000D76D0((uint64_t)v4, a2);
  sub_1000D846C((uint64_t)(a1 + 202), a2 + 808);
  sub_1000D9488((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1000DEA04(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DEA18@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1000D9488((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_1000DEA68(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DEA7C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1000DB55C((_DWORD *)a1);
  *(_OWORD *)(v6 + 1618) = 0u;
  sub_1000D76D0((uint64_t)v6, a2);
  sub_1000D846C(a1 + 808, a2 + 808);
  sub_1000D9488(a1 + 3016, a2 + 3016);
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 6472) = v8;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 6480);
  *(void *)(a1 + 6480) = v7;
  if (v9) {
    sub_1000DB0A0(v9);
  }
  return a1;
}

void sub_1000DEB08(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 6480);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1000DEB28(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DB55C(a1);
  sub_1000D76D0((uint64_t)v4, a2);
  sub_1000D846C((uint64_t)(a1 + 202), a2 + 808);
  sub_1000D9488((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1000DEB74(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DEB88@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1000D9488((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_1000DEBD8(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1000DEBEC(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DB55C(a1);
  sub_1000D76D0((uint64_t)v4, a2);
  sub_1000D846C((uint64_t)(a1 + 202), a2 + 808);
  sub_1000D9488((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1000DEC38(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1000DEC4C(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DB55C(a1);
  sub_1000D76D0((uint64_t)v4, a2);
  sub_1000D846C((uint64_t)(a1 + 202), a2 + 808);
  sub_1000D9488((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1000DEC98(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DECAC@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1000D9488((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_1000DECFC(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1000DED10(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DB55C(a1);
  sub_1000D76D0((uint64_t)v4, a2);
  sub_1000D846C((uint64_t)(a1 + 202), a2 + 808);
  sub_1000D9488((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1000DED5C(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1000DED70(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DB55C(a1);
  sub_1000D76D0((uint64_t)v4, a2);
  sub_1000D846C((uint64_t)(a1 + 202), a2 + 808);
  sub_1000D9488((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1000DEDBC(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DEDD0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1000D9488((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_1000DEE20(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1000DEE34(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DB55C(a1);
  sub_1000D76D0((uint64_t)v4, a2);
  sub_1000D846C((uint64_t)(a1 + 202), a2 + 808);
  sub_1000D9488((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1000DEE80(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DEE94@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1000D9488((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_1000DEEE4(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1000DEEF8(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DB55C(a1);
  sub_1000D76D0((uint64_t)v4, a2);
  sub_1000D846C((uint64_t)(a1 + 202), a2 + 808);
  sub_1000D9488((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1000DEF44(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1000DEF58(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DB55C(a1);
  sub_1000D76D0((uint64_t)v4, a2);
  sub_1000D846C((uint64_t)(a1 + 202), a2 + 808);
  sub_1000D9488((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1000DEFA4(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DEFB8@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1000D9488((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_1000DF008(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1000DF01C(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DB55C(a1);
  sub_1000D76D0((uint64_t)v4, a2);
  sub_1000D846C((uint64_t)(a1 + 202), a2 + 808);
  sub_1000D9488((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1000DF068(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1000DF07C(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DB55C(a1);
  sub_1000D76D0((uint64_t)v4, a2);
  sub_1000D846C((uint64_t)(a1 + 202), a2 + 808);
  sub_1000D9488((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1000DF0C8(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

void *sub_1000DF0DC(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v3;
  }
  return __dst;
}

uint64_t sub_1000DF12C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1000D9488((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_1000DF17C(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1000DF190(_DWORD *a1, uint64_t a2, const std::string *a3)
{
  uint64_t v6 = sub_1000DB55C(a1);
  uint64_t v7 = (std::string *)(v6 + 1618);
  *((void *)v6 + 811) = 0;
  *(_OWORD *)(v6 + 1618) = 0u;
  sub_1000D76D0((uint64_t)v6, a2);
  sub_1000D846C((uint64_t)(a1 + 202), a2 + 808);
  sub_1000D9488((uint64_t)(a1 + 754), a2 + 3016);
  std::string::operator=(v7, a3);
  return a1;
}

void sub_1000DF208(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 6495) < 0) {
    operator delete(*v2);
  }
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1000DF230(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DB55C(a1);
  sub_1000D76D0((uint64_t)v4, a2);
  sub_1000D846C((uint64_t)(a1 + 202), a2 + 808);
  sub_1000D9488((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1000DF27C(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DF290@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1000D9488((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_1000DF2E0(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1000DF2F4(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DB55C(a1);
  sub_1000D76D0((uint64_t)v4, a2);
  sub_1000D846C((uint64_t)(a1 + 202), a2 + 808);
  sub_1000D9488((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1000DF340(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1000DF354(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DB55C(a1);
  sub_1000D76D0((uint64_t)v4, a2);
  sub_1000D846C((uint64_t)(a1 + 202), a2 + 808);
  sub_1000D9488((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1000DF3A0(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DF3B4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1000D9488((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_1000DF404(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DF418(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1000DB55C((_DWORD *)a1);
  *(_OWORD *)(v6 + 1618) = 0u;
  sub_1000D76D0((uint64_t)v6, a2);
  sub_1000D846C(a1 + 808, a2 + 808);
  sub_1000D9488(a1 + 3016, a2 + 3016);
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 6472) = v8;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 6480);
  *(void *)(a1 + 6480) = v7;
  if (v9) {
    sub_1000DB0A0(v9);
  }
  return a1;
}

void sub_1000DF4A4(_Unwind_Exception *a1)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 6480);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1000DF4C4(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DB55C(a1);
  sub_1000D76D0((uint64_t)v4, a2);
  sub_1000D846C((uint64_t)(a1 + 202), a2 + 808);
  sub_1000D9488((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1000DF510(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DF524@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1000D9488((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_1000DF574(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DF588(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1000DB55C((_DWORD *)a1);
  *(_OWORD *)(v6 + 1618) = 0u;
  sub_1000D76D0((uint64_t)v6, a2);
  sub_1000D846C(a1 + 808, a2 + 808);
  sub_1000D9488(a1 + 3016, a2 + 3016);
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 6472) = v8;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 6480);
  *(void *)(a1 + 6480) = v7;
  if (v9) {
    sub_1000DB0A0(v9);
  }
  return a1;
}

void sub_1000DF614(_Unwind_Exception *a1)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 6480);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1000DF634(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DB55C(a1);
  sub_1000D76D0((uint64_t)v4, a2);
  sub_1000D846C((uint64_t)(a1 + 202), a2 + 808);
  sub_1000D9488((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1000DF680(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DF694@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1000D9488((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_1000DF6E4(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1000DF6F8(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DB55C(a1);
  sub_1000D76D0((uint64_t)v4, a2);
  sub_1000D846C((uint64_t)(a1 + 202), a2 + 808);
  sub_1000D9488((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1000DF744(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1000DF758(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DB55C(a1);
  sub_1000D76D0((uint64_t)v4, a2);
  sub_1000D846C((uint64_t)(a1 + 202), a2 + 808);
  sub_1000D9488((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1000DF7A4(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DF7B8@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1000D9488((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_1000DF808(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1000DF81C(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DB55C(a1);
  sub_1000D76D0((uint64_t)v4, a2);
  sub_1000D846C((uint64_t)(a1 + 202), a2 + 808);
  sub_1000D9488((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1000DF868(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DF87C(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 212) = 0;
  *(unsigned char *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 272) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  *(_WORD *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 312) = 0;
  *(unsigned char *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 1128) = 0;
  *(unsigned char *)(a1 + 1136) = 0;
  *(unsigned char *)(a1 + 1160) = 0;
  *(unsigned char *)(a1 + 1168) = 0;
  *(unsigned char *)(a1 + 1312) = 0;
  *(unsigned char *)(a1 + 1320) = 0;
  *(unsigned char *)(a1 + 1344) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  sub_1000DB6E4(a1 + 1352);
  return a1;
}

void sub_1000DF924(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 1344) && *(char *)(v1 + 1343) < 0) {
    operator delete(*(void **)(v1 + 1320));
  }
  sub_1000D8214(v4);
  if (*(unsigned char *)(v1 + 1160))
  {
    uint64_t v6 = *(void **)(v1 + 1136);
    if (v6)
    {
      *(void *)(v1 + 1144) = v6;
      operator delete(v6);
    }
  }
  if (*(unsigned char *)(v1 + 1128))
  {
    uint64_t v7 = *(std::__shared_weak_count **)(v1 + 1016);
    if (v7) {
      sub_1000DB0A0(v7);
    }
  }
  sub_1000D8260(v3);
  if (*(unsigned char *)(v1 + 104)) {
    sub_1000D7D80(v2);
  }
  if (*(unsigned char *)(v1 + 48)) {
    sub_1000D7D80(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000DF9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DFA18(a1, a2);
  sub_1000E2FA8(v4 + 808, a2 + 808);
  sub_1000E1B64(a1 + 3016, a2 + 3016);
  return a1;
}

void sub_1000DF9F4(_Unwind_Exception *a1)
{
  sub_1000D7C60(v2);
  sub_1000D7B80(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DFA18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  uint64_t v21 = v4;
  int v6 = *(_DWORD *)a2;
  uint64_t v5 = a2 + 8;
  switch(v6 ^ (v6 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 0xD:
    case 0x11:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      break;
    case 3:
    case 0xC:
    case 0xE:
    case 0x17:
      *(unsigned char *)uint64_t v4 = *(unsigned char *)v5;
      break;
    case 4:
    case 9:
    case 0xB:
    case 0xF:
    case 0x13:
    case 0x16:
    case 0x19:
    case 0x1A:
      *(_DWORD *)uint64_t v4 = *(_DWORD *)v5;
      break;
    case 5:
    case 6:
      sub_1000E23EC((unsigned char *)v4, v5);
      break;
    case 7:
      sub_100510520(&v21, v5);
      break;
    case 8:
      sub_10051057C(&v21, v5);
      break;
    case 0xA:
    case 0x14:
    case 0x15:
      *(void *)uint64_t v4 = *(void *)v5;
      break;
    case 0x10:
      long long v7 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
      *(_OWORD *)(v4 + 16) = v7;
      long long v8 = *(_OWORD *)(v5 + 32);
      long long v9 = *(_OWORD *)(v5 + 48);
      long long v10 = *(_OWORD *)(v5 + 80);
      *(_OWORD *)(v4 + 64) = *(_OWORD *)(v5 + 64);
      *(_OWORD *)(v4 + 80) = v10;
      *(_OWORD *)(v4 + 32) = v8;
      *(_OWORD *)(v4 + 48) = v9;
      long long v11 = *(_OWORD *)(v5 + 96);
      long long v12 = *(_OWORD *)(v5 + 112);
      long long v13 = *(_OWORD *)(v5 + 128);
      *(_OWORD *)(v4 + 140) = *(_OWORD *)(v5 + 140);
      *(_OWORD *)(v4 + 112) = v12;
      *(_OWORD *)(v4 + 128) = v13;
      *(_OWORD *)(v4 + 96) = v11;
      memcpy((void *)(a1 + 168), (const void *)(a2 + 168), 0x201uLL);
      *(void *)(a1 + 688) = *(void *)(a2 + 688);
      uint64_t v14 = *(void *)(a2 + 696);
      *(void *)(a1 + 696) = v14;
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      }
      long long v15 = *(_OWORD *)(a2 + 704);
      long long v16 = *(_OWORD *)(a2 + 736);
      *(_OWORD *)(a1 + 720) = *(_OWORD *)(a2 + 720);
      *(_OWORD *)(a1 + 736) = v16;
      *(_OWORD *)(a1 + 704) = v15;
      long long v17 = *(_OWORD *)(a2 + 752);
      long long v18 = *(_OWORD *)(a2 + 768);
      long long v19 = *(_OWORD *)(a2 + 784);
      *(void *)(a1 + 797) = *(void *)(a2 + 797);
      *(_OWORD *)(a1 + 768) = v18;
      *(_OWORD *)(a1 + 784) = v19;
      *(_OWORD *)(a1 + 752) = v17;
      break;
    case 0x12:
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
      break;
    case 0x18:
      sub_100510608(&v21, (uint64_t *)v5);
      break;
    default:
      sub_10050EA98();
  }
  *(_DWORD *)a1 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  return a1;
}

uint64_t sub_1000DFB88(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000E6DB4(a2);
  if (result)
  {
    int v5 = *(_DWORD *)(a2 + 96);
    BOOL v6 = v5 == 10 || v5 == 1;
    if (!v6 || *(double *)(a2 + 20) > 30.0 || sub_100BCE3BC(a2) > *(double *)a1) {
      return 0;
    }
    uint64_t v7 = *(void *)(a1 + 48);
    if (v7
      && ((double v8 = *(double *)(a2 + 76),
           double v9 = *(double *)(*(void *)(*(void *)(a1 + 16) + 8 * ((v7 + *(void *)(a1 + 40) - 1) / 0x1AuLL))
                          + 156 * ((v7 + *(void *)(a1 + 40) - 1) % 0x1AuLL)
                          + 76),
           v8 >= v9)
        ? (BOOL v10 = v8 - v9 < 1.0)
        : (BOOL v10 = 1),
          v10))
    {
      return 0;
    }
    else
    {
      sub_10017DEF8((void *)(a1 + 8), a2);
      while (*(void *)(a1 + 48))
      {
        if (sub_100BCE3BC(*(void *)(*(void *)(a1 + 16) + 8 * (*(void *)(a1 + 40) / 0x1AuLL))+ 156 * (*(void *)(a1 + 40) % 0x1AuLL)) <= *(double *)a1)break; {
        *(int64x2_t *)(a1 + 40) = vaddq_s64(*(int64x2_t *)(a1 + 40), (int64x2_t)xmmword_101D0A740);
        }
        sub_10041F9E4(a1 + 8, 1);
      }
      double v11 = sub_10016C458();
      if (v11 - *(double *)(a1 + 56) >= 10.0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10231F6B0);
        }
        long long v12 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v13 = *(void *)(a1 + 48);
          sub_10005BA4C();
          uint64_t v14 = v33 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 134349315;
          *(void *)&uint8_t buf[4] = v13;
          __int16 v25 = 2081;
          long long v26 = v14;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLReferenceLocations, size %{public}zu, latest ref location %{private}s", buf, 0x16u);
          if (v33 < 0) {
            operator delete(__p[0]);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10231F6B0);
          }
          uint64_t v18 = *(void *)(a1 + 48);
          sub_10005BA4C();
          if (v27 >= 0) {
            long long v19 = buf;
          }
          else {
            long long v19 = *(unsigned char **)buf;
          }
          int v28 = 134349315;
          uint64_t v29 = v18;
          __int16 v30 = 2081;
          char v31 = v19;
          long long v20 = (char *)_os_log_send_and_compose_impl();
          if (v27 < 0) {
            operator delete(*(void **)buf);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLReferenceLocations::receiveLocation(const CLDaemonLocation &)", "%s\n", v20);
          if (v20 != (char *)__p) {
            free(v20);
          }
        }
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10231F6B0);
        }
        long long v15 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v16 = *(void *)(a1 + 48);
          sub_10005BA4C();
          long long v17 = v33 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 134349315;
          *(void *)&uint8_t buf[4] = v16;
          __int16 v25 = 2081;
          long long v26 = v17;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLReferenceLocations, size %{public}zu, oldest ref location %{private}s", buf, 0x16u);
          if (v33 < 0) {
            operator delete(__p[0]);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10231F6B0);
          }
          uint64_t v21 = *(void *)(a1 + 48);
          sub_10005BA4C();
          if (v27 >= 0) {
            uint64_t v22 = buf;
          }
          else {
            uint64_t v22 = *(unsigned char **)buf;
          }
          int v28 = 134349315;
          uint64_t v29 = v21;
          __int16 v30 = 2081;
          char v31 = v22;
          uint64_t v23 = (char *)_os_log_send_and_compose_impl();
          if (v27 < 0) {
            operator delete(*(void **)buf);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLReferenceLocations::receiveLocation(const CLDaemonLocation &)", "%s\n", v23);
          if (v23 != (char *)__p) {
            free(v23);
          }
        }
        *(double *)(a1 + 56) = v11;
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_1000E01AC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *(void *)(result + 16);
  int v9 = a2;
  uint64_t v10 = v8 + 80 * (int)a2;
  double v11 = *(void **)(v10 + 32);
  if (v11 != (void *)(v10 + 40))
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)v11[4] + 16))(v11[4], a2, a3, a4);
      *((_DWORD *)v11 + 10) = (*((_DWORD *)v11 + 10) + 1) % *((_DWORD *)v11 + 11);
      long long v12 = (void *)v11[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          long long v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v11[2];
          BOOL v14 = *v13 == (void)v11;
          double v11 = v13;
        }
        while (!v14);
      }
      uint64_t v8 = *(void *)(v7 + 16);
      double v11 = v13;
    }
    while (v13 != (void *)(v8 + 80 * v9 + 40));
  }
  uint64_t v15 = v8 + 80 * v9;
  uint64_t v16 = *(void *)(v15 + 64);
  if (v16 != v15 + 56)
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v16 + 16) + 16))(*(void *)(v16 + 16), a2, a3, a4);
      uint64_t v16 = *(void *)(v16 + 8);
    }
    while (v16 != *(void *)(v7 + 16) + 80 * v9 + 56);
  }
  return result;
}

id sub_1000E0308(void *a1, int a2, void *__src, unint64_t a4)
{
  LODWORD(__dst) = 2139095039;
  *((void *)&__dst + 1) = 0x7FEFFFFFFFFFFFFFLL;
  *(int32x2_t *)&long long v22 = vdup_n_s32(0x7F7FFFFFu);
  DWORD2(v22) = 2139095039;
  unsigned long long v23 = __PAIR128__(v22, 0x7FEFFFFFFFFFFFFFLL);
  if (a4 >= 0x30) {
    size_t v8 = 48;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x31)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B6B88);
    }
    int v9 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      unint64_t v33 = 0x8000000101E46B5CLL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v34 = 2048;
      uint64_t v35 = 48;
      __int16 v36 = 2048;
      unint64_t v37 = a4;
      __int16 v38 = 1024;
      int v39 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B6B88);
      }
      int v24 = 136315906;
      unint64_t v25 = 0x8000000101E46B5CLL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v26 = 2048;
      uint64_t v27 = 48;
      __int16 v28 = 2048;
      unint64_t v29 = a4;
      __int16 v30 = 1024;
      int v31 = a2;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLBarometerCalibration_Types::CMKFFilteredPressureSample>::dispatchData(int, const void *, size_t) [T = CLBarometerCalibration_Types::CMKFFilteredPressureSample]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  uint64_t v13 = (void *)a1[4];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  _OWORD v16[2] = sub_100171140;
  v16[3] = &unk_1022B6C50;
  v16[4] = v12;
  v16[5] = v11;
  long long v17 = __dst;
  long long v18 = v22;
  unsigned long long v19 = v23;
  uint64_t v20 = v10;
  return [v13 async:v16];
}

id sub_1000E05F4(void *a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0xE0) {
    size_t v8 = 224;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(__dst, __src, v8);
  if (a4 >= 0xE1)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10234C770);
    }
    int v9 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      unint64_t v42 = (unint64_t)"N28CLMotionCoprocessorInterface16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v43 = 2048;
      uint64_t v44 = 224;
      __int16 v45 = 2048;
      unint64_t v46 = a4;
      __int16 v47 = 1024;
      int v48 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234C770);
      }
      int v33 = 136315906;
      unint64_t v34 = (unint64_t)"N28CLMotionCoprocessorInterface16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v35 = 2048;
      uint64_t v36 = 224;
      __int16 v37 = 2048;
      unint64_t v38 = a4;
      __int16 v39 = 1024;
      int v40 = a2;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLMotionCoprocessorInterface::NotificationData>::dispatchData(int, const void *, size_t) [T = CLMotionCoprocessorInterface::NotificationData]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  uint64_t v13 = (void *)a1[4];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  _OWORD v16[2] = sub_100172594;
  v16[3] = &unk_1022BEE40;
  v16[4] = v12;
  v16[5] = v11;
  long long v27 = __dst[10];
  long long v28 = __dst[11];
  long long v29 = __dst[12];
  long long v30 = __dst[13];
  long long v23 = __dst[6];
  long long v24 = __dst[7];
  long long v25 = __dst[8];
  long long v26 = __dst[9];
  long long v19 = __dst[2];
  long long v20 = __dst[3];
  long long v21 = __dst[4];
  long long v22 = __dst[5];
  long long v17 = __dst[0];
  long long v18 = __dst[1];
  uint64_t v31 = v10;
  return [v13 async:v16];
}

uint64_t *sub_1000E0900(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = mach_absolute_time();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v2, v3, v4);
  return a1;
}

void sub_1000E0950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = sub_1000D3D90(a3 - a2);
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_102311C70);
  }
  uint64_t v7 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    size_t v8 = sub_1000E0EF0(*(int **)(a1 + 32));
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 4176);
    v10[0] = 68290562;
    v10[1] = 0;
    __int16 v11 = 2082;
    uint64_t v12 = "";
    __int16 v13 = 2082;
    BOOL v14 = "elapsed";
    __int16 v15 = 2050;
    uint64_t v16 = a2;
    __int16 v17 = 2050;
    uint64_t v18 = a3;
    __int16 v19 = 2050;
    double v20 = v6;
    __int16 v21 = 2082;
    long long v22 = v8;
    __int16 v23 = 2050;
    uint64_t v24 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLWifi1SystemLogic::apply\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"event\":%{public, location:escape_only}s, \"now_s\":\"%{public}.09f\"}", (uint8_t *)v10, 0x4Eu);
  }
}

uint64_t sub_1000E0AA0(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_1000E1294((uint64_t *)v13, (uint64_t)"wifi1Event", 0);
  v18[0] = 0;
  sub_1000DB6E4((uint64_t)v19);
  sub_1000E1494((uint64_t)v18, v2);
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
  }
  int v5 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    double v6 = sub_1000E0EF0(v18);
    int v14 = 136446210;
    __int16 v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@WifiLogic, handleInput, %{public}s", (uint8_t *)&v14, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v14, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
    }
    uint64_t v9 = sub_1000E0EF0(v18);
    int v16 = 136446210;
    __int16 v17 = v9;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleEvent(CL::Wifi1::Events::EventUnion)", "%s\n", v10);
    if (v10 != (char *)&v14) {
      free(v10);
    }
  }
  sub_1000E244C((uint64_t)v12, v4 + 224);
  sub_10010714C(v4, (uint64_t)v12, (uint64_t)&v14);
  sub_1000E2978((uint64_t)v19, (uint64_t)&v14);
  sub_1000D7DCC((uint64_t)&v14);
  sub_1000D7DCC((uint64_t)v12);
  sub_1000D669C(v4 + 168);
  sub_1000E1934((uint64_t)v11, (uint64_t)&v14);
  uint64_t v7 = sub_1000E3BB4(v4);
  sub_1000E0E50((uint64_t)v11);
  sub_1000E0E50((uint64_t)&v14);
  sub_1000D7DCC((uint64_t)v19);
  sub_1000D7B80((uint64_t)v18);
  sub_1000E1098(v13);
  return v7;
}

void sub_1000E0DBC(_Unwind_Exception *a1)
{
  sub_1000D7DCC(v1);
  sub_1000D7B80((uint64_t)&STACK[0x3350]);
  sub_1000E1098((id *)&STACK[0x2058]);
  _Unwind_Resume(a1);
}

void sub_1000E0E30(void *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  JUMPOUT(0x1000E0E28);
}

void sub_1000E0E40()
{
}

void sub_1000E0E48()
{
}

uint64_t sub_1000E0E50(uint64_t a1)
{
  sub_1000D7DCC(a1 + 1352);
  if (*(unsigned char *)(a1 + 1344) && *(char *)(a1 + 1343) < 0) {
    operator delete(*(void **)(a1 + 1320));
  }
  sub_1000D8214(a1 + 1168);
  if (*(unsigned char *)(a1 + 1160))
  {
    uint64_t v2 = *(void **)(a1 + 1136);
    if (v2)
    {
      *(void *)(a1 + 1144) = v2;
      operator delete(v2);
    }
  }
  if (*(unsigned char *)(a1 + 1128))
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 1016);
    if (v3) {
      sub_1000DB0A0(v3);
    }
  }
  sub_1000D8260(a1 + 112);
  if (*(unsigned char *)(a1 + 104)) {
    sub_1000D7D80(a1 + 56);
  }
  if (*(unsigned char *)(a1 + 48)) {
    sub_1000D7D80(a1);
  }
  return a1;
}

const char *sub_1000E0EF0(int *a1)
{
  int v1 = *a1 ^ (*a1 >> 31);
  uint64_t result = "None";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "Wifi::ScanReady";
      break;
    case 2:
      uint64_t result = "Wifi::ScanError";
      break;
    case 3:
      uint64_t result = "Wifi::ScanBusy";
      break;
    case 4:
      uint64_t result = "Wifi::Power";
      break;
    case 5:
      uint64_t result = "Wifi::LinkStatus";
      break;
    case 6:
      uint64_t result = "Wifi::Roam";
      break;
    case 7:
      uint64_t result = "Wifi::Scan";
      break;
    case 8:
      uint64_t result = "Wifi::Wsb";
      break;
    case 9:
      uint64_t result = "System::Privacy";
      break;
    case 10:
      uint64_t result = "System::Reachability";
      break;
    case 11:
      uint64_t result = "System::CoarseMotion";
      break;
    case 12:
      uint64_t result = "System::BatterySaverMode";
      break;
    case 13:
      uint64_t result = "System::DeviceWake";
      break;
    case 14:
      uint64_t result = "System::CompanionNearby";
      break;
    case 15:
      uint64_t result = "System::SignalEnvironment";
      break;
    case 16:
      uint64_t result = "System::LeechLocation";
      break;
    case 17:
      uint64_t result = "System::MetricHeartbeat";
      break;
    case 18:
      uint64_t result = "System::Elevation";
      break;
    case 19:
      uint64_t result = "Network::AlsError";
      break;
    case 20:
      uint64_t result = "Network::AlsFinished";
      break;
    case 21:
      uint64_t result = "Network::AlsRequestResult";
      break;
    case 22:
      uint64_t result = "Network::AlsAllUnknown";
      break;
    case 23:
      uint64_t result = "Client::EmergencyState";
      break;
    case 24:
      uint64_t result = "Client::LocationRequest";
      break;
    case 25:
      uint64_t result = "Client::Registration";
      break;
    case 26:
      uint64_t result = "Client::Unregistration";
      break;
    case 27:
      uint64_t result = "Client::UpdateTimer";
      break;
    case 28:
      uint64_t result = "Client::WsbTimer";
      break;
    case 29:
      uint64_t result = "ReprocessWifiScanBuffer";
      break;
    default:
      sub_10050EA98();
  }
  return result;
}

id *sub_1000E1098(id *a1)
{
  if (a1[1])
  {
    if (qword_102419610 != -1) {
      dispatch_once(&qword_102419610, &stru_10234E0B0);
    }
    uint64_t v2 = qword_102419618;
    if (os_log_type_enabled((os_log_t)qword_102419618, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = a1[1];
      *(_DWORD *)buf = 134349314;
      uint64_t v7 = a1;
      __int16 v8 = 2114;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "os_transaction releasing: (%{public}p) %{public}@", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419610 != -1) {
        dispatch_once(&qword_102419610, &stru_10234E0B0);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLAutoOSTransaction::~CLAutoOSTransaction()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }

    a1[1] = 0;
  }

  *a1 = 0;
  return a1;
}

void sub_1000E1288(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t *sub_1000E1294(uint64_t *a1, uint64_t a2, int a3)
{
  *a1 = os_transaction_create();
  a1[1] = 0;
  if (!a3)
  {
    a1[1] = (uint64_t)+[NSString stringWithUTF8String:a2];
    if (qword_102419610 != -1) {
      dispatch_once(&qword_102419610, &stru_10234E0B0);
    }
    double v6 = qword_102419618;
    if (os_log_type_enabled((os_log_t)qword_102419618, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[1];
      *(_DWORD *)buf = 134349314;
      __int16 v11 = a1;
      __int16 v12 = 2114;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "os_transaction created: (%{public}p) %{public}@", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419610 != -1) {
        dispatch_once(&qword_102419610, &stru_10234E0B0);
      }
      id v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLAutoOSTransaction::CLAutoOSTransaction(const char *, LoggingPolicy)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  return a1;
}

void sub_1000E1494(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a1;
  int v5 = *(_DWORD *)a2;
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
    double v6 = (unsigned char *)(a2 + 8);
    long long v28 = (uint64_t *)(a2 + 8);
    uint64_t v7 = (unsigned char *)(a1 + 8);
    switch(v4 ^ (v4 >> 31))
    {
      case 0:
      case 1:
      case 2:
      case 0xD:
      case 0x11:
      case 0x1B:
      case 0x1C:
      case 0x1D:
        return;
      case 3:
      case 0xC:
      case 0xE:
      case 0x17:
        *uint64_t v7 = *v6;
        return;
      case 4:
      case 9:
      case 0xB:
      case 0xF:
      case 0x13:
      case 0x16:
      case 0x19:
      case 0x1A:
        *(_DWORD *)uint64_t v7 = *(_DWORD *)v6;
        return;
      case 5:
      case 6:
        sub_1000E2DB0(a1 + 8, a2 + 8);
        return;
      case 7:
        sub_10068A638(&v28, (uint64_t)v7);
        return;
      case 8:
        sub_10068A784((uint64_t *)&v28, (uint64_t)v7);
        return;
      case 0xA:
      case 0x14:
      case 0x15:
        *(void *)uint64_t v7 = *(void *)v6;
        return;
      case 0x10:
        sub_10068A7E0((_OWORD **)&v28, (uint64_t)v7);
        return;
      case 0x12:
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
        return;
      case 0x18:
        sub_10068A898(&v28, (uint64_t)v7);
        return;
      default:
        goto LABEL_44;
    }
  }
  long long v28 = (uint64_t *)a1;
  int v29 = v5 ^ (v5 >> 31);
  __int16 v8 = (unsigned char *)(a2 + 8);
  switch(v29)
  {
    case 0:
      sub_1000D7B80(a1);
      *(_DWORD *)a1 = 0;
      return;
    case 1:
      sub_1000D7B80(a1);
      int v9 = 1;
      goto LABEL_42;
    case 2:
      sub_1000D7B80(a1);
      int v9 = 2;
      goto LABEL_42;
    case 3:
      sub_1000D7B80(a1);
      *(unsigned char *)(a1 + 8) = *v8;
      int v9 = 3;
      goto LABEL_42;
    case 4:
      sub_1000D7B80(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v8;
      int v9 = 4;
      goto LABEL_42;
    case 5:
    case 6:
      sub_10068A958((uint64_t)&v28, a2 + 8);
      return;
    case 7:
      sub_10068A9E8((uint64_t)&v28, a2 + 8);
      return;
    case 8:
      sub_10068AA9C((uint64_t)&v28, a2 + 8);
      return;
    case 9:
      sub_1000D7B80(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v8;
      int v9 = 9;
      goto LABEL_42;
    case 10:
      sub_1000D7B80(a1);
      *(void *)(a1 + 8) = *(void *)v8;
      int v9 = 10;
      goto LABEL_42;
    case 11:
      sub_1000D7B80(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v8;
      int v9 = 11;
      goto LABEL_42;
    case 12:
      sub_1000D7B80(a1);
      *(unsigned char *)(a1 + 8) = *v8;
      int v9 = 12;
      goto LABEL_42;
    case 13:
      sub_1000D7B80(a1);
      int v9 = 13;
      goto LABEL_42;
    case 14:
      sub_1000D7B80(a1);
      *(unsigned char *)(a1 + 8) = *v8;
      int v9 = 14;
      goto LABEL_42;
    case 15:
      sub_1000D7B80(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v8;
      int v9 = 15;
      goto LABEL_42;
    case 16:
      sub_1000D7B80(a1);
      long long v10 = *(_OWORD *)v8;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = v10;
      long long v11 = *(_OWORD *)(a2 + 40);
      long long v12 = *(_OWORD *)(a2 + 56);
      long long v13 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 72) = v13;
      *(_OWORD *)(a1 + 56) = v12;
      *(_OWORD *)(a1 + 40) = v11;
      long long v14 = *(_OWORD *)(a2 + 104);
      long long v15 = *(_OWORD *)(a2 + 120);
      long long v16 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 148) = *(_OWORD *)(a2 + 148);
      *(_OWORD *)(a1 + 136) = v16;
      *(_OWORD *)(a1 + 120) = v15;
      *(_OWORD *)(a1 + 104) = v14;
      memcpy((void *)(a1 + 168), (const void *)(a2 + 168), 0x201uLL);
      *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
      *(_OWORD *)(a2 + 688) = 0u;
      long long v17 = *(_OWORD *)(a2 + 704);
      long long v18 = *(_OWORD *)(a2 + 736);
      *(_OWORD *)(a1 + 720) = *(_OWORD *)(a2 + 720);
      *(_OWORD *)(a1 + 736) = v18;
      *(_OWORD *)(a1 + 704) = v17;
      long long v20 = *(_OWORD *)(a2 + 752);
      long long v19 = *(_OWORD *)(a2 + 768);
      long long v21 = *(_OWORD *)(a2 + 784);
      *(void *)(a1 + 797) = *(void *)(a2 + 797);
      *(_OWORD *)(a1 + 768) = v19;
      *(_OWORD *)(a1 + 784) = v21;
      *(_OWORD *)(a1 + 752) = v20;
      int v9 = 16;
      goto LABEL_42;
    case 17:
      sub_1000D7B80(a1);
      int v9 = 17;
      goto LABEL_42;
    case 18:
      sub_1000D7B80(a1);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)v8;
      int v9 = 18;
      goto LABEL_42;
    case 19:
      sub_1000D7B80(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v8;
      int v9 = 19;
      goto LABEL_42;
    case 20:
      sub_1000D7B80(a1);
      *(void *)(a1 + 8) = *(void *)v8;
      int v9 = 20;
      goto LABEL_42;
    case 21:
      sub_1000D7B80(a1);
      *(void *)(a1 + 8) = *(void *)v8;
      int v9 = 21;
      goto LABEL_42;
    case 22:
      sub_1000D7B80(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v8;
      int v9 = 22;
      goto LABEL_42;
    case 23:
      sub_1000D7B80(a1);
      *(unsigned char *)(a1 + 8) = *v8;
      int v9 = 23;
      goto LABEL_42;
    case 24:
      sub_1000D7B80(a1);
      uint64_t v22 = *(void *)v8;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 8) = v22;
      long long v23 = *(_OWORD *)(a2 + 24);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v23;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 24) = 0;
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      long long v25 = *(_OWORD *)(a2 + 80);
      long long v24 = *(_OWORD *)(a2 + 96);
      long long v26 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
      *(_OWORD *)(a1 + 80) = v25;
      *(_OWORD *)(a1 + 96) = v24;
      *(_OWORD *)(a1 + 64) = v26;
      long long v27 = *(_OWORD *)(a2 + 128);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = v27;
      *(void *)(a2 + 136) = 0;
      *(void *)(a2 + 144) = 0;
      *(void *)(a2 + 128) = 0;
      int v9 = 24;
      goto LABEL_42;
    case 25:
      sub_1000D7B80(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v8;
      int v9 = 25;
      goto LABEL_42;
    case 26:
      sub_1000D7B80(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v8;
      int v9 = 26;
      goto LABEL_42;
    case 27:
      sub_1000D7B80(a1);
      int v9 = 27;
      goto LABEL_42;
    case 28:
      sub_1000D7B80(a1);
      int v9 = 28;
      goto LABEL_42;
    case 29:
      sub_1000D7B80(a1);
      int v9 = 29;
LABEL_42:
      *(_DWORD *)a1 = v9;
      return;
    default:
LABEL_44:
      sub_10050EA98();
  }
}

uint64_t sub_1000E1934(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000E3990(a1, a2);
  sub_1000E38CC(v4 + 56, a2 + 56);
  sub_1000E3938((unsigned char *)(a1 + 112), a2 + 112);
  long long v5 = *(_OWORD *)(a2 + 208);
  long long v6 = *(_OWORD *)(a2 + 224);
  long long v7 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v7;
  *(_OWORD *)(a1 + 208) = v5;
  *(_OWORD *)(a1 + 224) = v6;
  long long v8 = *(_OWORD *)(a2 + 272);
  long long v9 = *(_OWORD *)(a2 + 288);
  long long v10 = *(_OWORD *)(a2 + 304);
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 288) = v9;
  *(_OWORD *)(a1 + 304) = v10;
  *(_OWORD *)(a1 + 272) = v8;
  *(unsigned char *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 1128) = 0;
  if (*(unsigned char *)(a2 + 1128))
  {
    long long v11 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v11;
    long long v12 = *(_OWORD *)(a2 + 360);
    long long v13 = *(_OWORD *)(a2 + 376);
    long long v14 = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 408) = v14;
    *(_OWORD *)(a1 + 360) = v12;
    *(_OWORD *)(a1 + 376) = v13;
    long long v15 = *(_OWORD *)(a2 + 424);
    long long v16 = *(_OWORD *)(a2 + 440);
    long long v17 = *(_OWORD *)(a2 + 456);
    *(_OWORD *)(a1 + 468) = *(_OWORD *)(a2 + 468);
    *(_OWORD *)(a1 + 440) = v16;
    *(_OWORD *)(a1 + 456) = v17;
    *(_OWORD *)(a1 + 424) = v15;
    memcpy((void *)(a1 + 488), (const void *)(a2 + 488), 0x201uLL);
    *(void *)(a1 + 1008) = *(void *)(a2 + 1008);
    uint64_t v18 = *(void *)(a2 + 1016);
    *(void *)(a1 + 1016) = v18;
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
    long long v19 = *(_OWORD *)(a2 + 1024);
    long long v20 = *(_OWORD *)(a2 + 1040);
    *(_OWORD *)(a1 + 1056) = *(_OWORD *)(a2 + 1056);
    *(_OWORD *)(a1 + 1040) = v20;
    *(_OWORD *)(a1 + 1024) = v19;
    long long v21 = *(_OWORD *)(a2 + 1072);
    long long v22 = *(_OWORD *)(a2 + 1088);
    long long v23 = *(_OWORD *)(a2 + 1104);
    *(void *)(a1 + 1117) = *(void *)(a2 + 1117);
    *(_OWORD *)(a1 + 1104) = v23;
    *(_OWORD *)(a1 + 1088) = v22;
    *(_OWORD *)(a1 + 1072) = v21;
    *(unsigned char *)(a1 + 1128) = 1;
  }
  sub_1000E3820(a1 + 1136, a2 + 1136);
  sub_1000E3720((unsigned char *)(a1 + 1168), a2 + 1168);
  sub_1000E3778(a1 + 1320, (long long *)(a2 + 1320));
  sub_1000E1B64(a1 + 1352, a2 + 1352);
  return a1;
}

void sub_1000E1ABC(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 1344) && *(char *)(v1 + 1343) < 0) {
    operator delete(*v6);
  }
  sub_1000D8214(v5);
  if (*(unsigned char *)(v1 + 1160))
  {
    long long v8 = *v4;
    if (*v4)
    {
      *(void *)(v1 + 1144) = v8;
      operator delete(v8);
    }
  }
  if (*(unsigned char *)(v1 + 1128))
  {
    long long v9 = *(std::__shared_weak_count **)(v1 + 1016);
    if (v9) {
      sub_1000DB0A0(v9);
    }
  }
  sub_1000D8260(v3);
  if (*(unsigned char *)(v1 + 104)) {
    sub_1000D7D80(v2);
  }
  if (*(unsigned char *)(v1 + 48)) {
    sub_1000D7D80(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000E1B64(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  long long v7 = *(_OWORD *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 96);
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  uint64_t v10 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000E23EC((unsigned char *)(a1 + 192), a2 + 192);
  *(_WORD *)(a1 + 288) = *(_WORD *)(a2 + 288);
  uint64_t v13 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  long long v14 = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 328) = v14;
  long long v15 = *(_OWORD *)(a2 + 344);
  long long v16 = *(_OWORD *)(a2 + 360);
  long long v17 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = v17;
  *(_OWORD *)(a1 + 344) = v15;
  *(_OWORD *)(a1 + 360) = v16;
  long long v18 = *(_OWORD *)(a2 + 408);
  long long v19 = *(_OWORD *)(a2 + 424);
  long long v20 = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 452) = *(_OWORD *)(a2 + 452);
  *(_OWORD *)(a1 + 424) = v19;
  *(_OWORD *)(a1 + 440) = v20;
  *(_OWORD *)(a1 + 408) = v18;
  memcpy((void *)(a1 + 472), (const void *)(a2 + 472), 0x201uLL);
  *(void *)(a1 + 992) = *(void *)(a2 + 992);
  uint64_t v21 = *(void *)(a2 + 1000);
  *(void *)(a1 + 1000) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  long long v22 = *(_OWORD *)(a2 + 1008);
  long long v23 = *(_OWORD *)(a2 + 1024);
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
  *(_OWORD *)(a1 + 1008) = v22;
  *(_OWORD *)(a1 + 1024) = v23;
  long long v24 = *(_OWORD *)(a2 + 1056);
  long long v25 = *(_OWORD *)(a2 + 1072);
  long long v26 = *(_OWORD *)(a2 + 1088);
  *(void *)(a1 + 1101) = *(void *)(a2 + 1101);
  *(_OWORD *)(a1 + 1088) = v26;
  *(_OWORD *)(a1 + 1072) = v25;
  *(_OWORD *)(a1 + 1056) = v24;
  long long v27 = *(_OWORD *)(a2 + 1192);
  long long v29 = *(_OWORD *)(a2 + 1144);
  long long v28 = *(_OWORD *)(a2 + 1160);
  *(_OWORD *)(a1 + 1176) = *(_OWORD *)(a2 + 1176);
  *(_OWORD *)(a1 + 1192) = v27;
  *(_OWORD *)(a1 + 1144) = v29;
  *(_OWORD *)(a1 + 1160) = v28;
  long long v31 = *(_OWORD *)(a2 + 1224);
  long long v30 = *(_OWORD *)(a2 + 1240);
  long long v32 = *(_OWORD *)(a2 + 1208);
  *(_OWORD *)(a1 + 1252) = *(_OWORD *)(a2 + 1252);
  *(_OWORD *)(a1 + 1224) = v31;
  *(_OWORD *)(a1 + 1240) = v30;
  *(_OWORD *)(a1 + 1208) = v32;
  long long v33 = *(_OWORD *)(a2 + 1128);
  *(_OWORD *)(a1 + 1112) = *(_OWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1128) = v33;
  memcpy((void *)(a1 + 1272), (const void *)(a2 + 1272), 0x201uLL);
  *(void *)(a1 + 1792) = *(void *)(a2 + 1792);
  uint64_t v34 = *(void *)(a2 + 1800);
  *(void *)(a1 + 1800) = v34;
  if (v34) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
  }
  long long v35 = *(_OWORD *)(a2 + 1808);
  long long v36 = *(_OWORD *)(a2 + 1824);
  *(_OWORD *)(a1 + 1840) = *(_OWORD *)(a2 + 1840);
  *(_OWORD *)(a1 + 1824) = v36;
  *(_OWORD *)(a1 + 1808) = v35;
  long long v37 = *(_OWORD *)(a2 + 1856);
  long long v38 = *(_OWORD *)(a2 + 1872);
  long long v39 = *(_OWORD *)(a2 + 1888);
  *(void *)(a1 + 1901) = *(void *)(a2 + 1901);
  *(_OWORD *)(a1 + 1888) = v39;
  *(_OWORD *)(a1 + 1872) = v38;
  *(_OWORD *)(a1 + 1856) = v37;
  *(void *)(a1 + 1912) = *(void *)(a2 + 1912);
  uint64_t v40 = *(void *)(a2 + 1920);
  *(void *)(a1 + 1920) = v40;
  if (v40) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
  }
  memcpy((void *)(a1 + 1928), (const void *)(a2 + 1928), 0x170uLL);
  memcpy((void *)(a1 + 2296), (const void *)(a2 + 2296), 0x201uLL);
  *(void *)(a1 + 2816) = *(void *)(a2 + 2816);
  uint64_t v41 = *(void *)(a2 + 2824);
  *(void *)(a1 + 2824) = v41;
  if (v41) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
  }
  long long v42 = *(_OWORD *)(a2 + 2832);
  long long v43 = *(_OWORD *)(a2 + 2848);
  *(_OWORD *)(a1 + 2864) = *(_OWORD *)(a2 + 2864);
  *(_OWORD *)(a1 + 2848) = v43;
  *(_OWORD *)(a1 + 2832) = v42;
  long long v44 = *(_OWORD *)(a2 + 2880);
  long long v45 = *(_OWORD *)(a2 + 2896);
  long long v46 = *(_OWORD *)(a2 + 2912);
  *(void *)(a1 + 2925) = *(void *)(a2 + 2925);
  *(_OWORD *)(a1 + 2912) = v46;
  *(_OWORD *)(a1 + 2896) = v45;
  *(_OWORD *)(a1 + 2880) = v44;
  uint64_t v47 = *(void *)(a2 + 2936);
  *(unsigned char *)(a1 + 2944) = *(unsigned char *)(a2 + 2944);
  *(void *)(a1 + 2936) = v47;
  uint64_t v48 = *(void *)(a2 + 2952);
  *(unsigned char *)(a1 + 2960) = *(unsigned char *)(a2 + 2960);
  *(void *)(a1 + 2952) = v48;
  if (*(char *)(a2 + 2991) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 2968), *(void **)(a2 + 2968), *(void *)(a2 + 2976));
  }
  else
  {
    long long v49 = *(_OWORD *)(a2 + 2968);
    *(void *)(a1 + 2984) = *(void *)(a2 + 2984);
    *(_OWORD *)(a1 + 2968) = v49;
  }
  *(_OWORD *)(a1 + 2992) = *(_OWORD *)(a2 + 2992);
  long long v50 = *(_OWORD *)(a2 + 3008);
  long long v51 = *(_OWORD *)(a2 + 3024);
  long long v52 = *(_OWORD *)(a2 + 3040);
  *(_OWORD *)(a1 + 3052) = *(_OWORD *)(a2 + 3052);
  *(_OWORD *)(a1 + 3040) = v52;
  *(_OWORD *)(a1 + 3024) = v51;
  *(_OWORD *)(a1 + 3008) = v50;
  uint64_t v53 = (unsigned char *)(a1 + 3072);
  if (*(char *)(a2 + 3095) < 0)
  {
    sub_1000DC48C(v53, *(void **)(a2 + 3072), *(void *)(a2 + 3080));
  }
  else
  {
    long long v54 = *(_OWORD *)(a2 + 3072);
    *(void *)(a1 + 3088) = *(void *)(a2 + 3088);
    *(_OWORD *)uint64_t v53 = v54;
  }
  long long v55 = *(_OWORD *)(a2 + 3096);
  long long v56 = *(_OWORD *)(a2 + 3128);
  *(_OWORD *)(a1 + 3112) = *(_OWORD *)(a2 + 3112);
  *(_OWORD *)(a1 + 3128) = v56;
  *(_OWORD *)(a1 + 3096) = v55;
  long long v57 = *(_OWORD *)(a2 + 3144);
  long long v58 = *(_OWORD *)(a2 + 3160);
  long long v59 = *(_OWORD *)(a2 + 3192);
  *(_OWORD *)(a1 + 3176) = *(_OWORD *)(a2 + 3176);
  *(_OWORD *)(a1 + 3192) = v59;
  *(_OWORD *)(a1 + 3144) = v57;
  *(_OWORD *)(a1 + 3160) = v58;
  long long v60 = *(_OWORD *)(a2 + 3208);
  long long v61 = *(_OWORD *)(a2 + 3224);
  long long v62 = *(_OWORD *)(a2 + 3240);
  *(unsigned char *)(a1 + 3256) = *(unsigned char *)(a2 + 3256);
  *(_OWORD *)(a1 + 3224) = v61;
  *(_OWORD *)(a1 + 3240) = v62;
  *(_OWORD *)(a1 + 3208) = v60;
  *(void *)(a1 + 3280) = 0;
  *(_OWORD *)(a1 + 3264) = 0u;
  sub_1000E208C((void *)(a1 + 3264), *(uint64_t **)(a2 + 3264), *(uint64_t **)(a2 + 3272), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 3272) - *(void *)(a2 + 3264)) >> 3));
  sub_1000E346C(a1 + 3288, a2 + 3288);
  long long v63 = *(_OWORD *)(a2 + 3328);
  *(void *)(a1 + 3344) = *(void *)(a2 + 3344);
  *(_OWORD *)(a1 + 3328) = v63;
  long long v64 = *(_OWORD *)(a2 + 3352);
  long long v65 = *(_OWORD *)(a2 + 3368);
  long long v66 = *(_OWORD *)(a2 + 3384);
  *(void *)(a1 + 3399) = *(void *)(a2 + 3399);
  *(_OWORD *)(a1 + 3368) = v65;
  *(_OWORD *)(a1 + 3384) = v66;
  *(_OWORD *)(a1 + 3352) = v64;
  *(void *)(a1 + 3408) = *(void *)(a2 + 3408);
  uint64_t v67 = *(void *)(a2 + 3416);
  *(void *)(a1 + 3416) = v67;
  if (v67) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v67 + 8), 1uLL, memory_order_relaxed);
  }
  long long v68 = *(_OWORD *)(a2 + 3424);
  *(_OWORD *)(a1 + 3433) = *(_OWORD *)(a2 + 3433);
  *(_OWORD *)(a1 + 3424) = v68;
  return a1;
}

void sub_1000E1FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(char *)(v10 + 2991) < 0) {
    operator delete(*v11);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(v10 + 2824);
  if (v13) {
    sub_1000DB0A0(v13);
  }
  long long v14 = *(std::__shared_weak_count **)(v10 + 1920);
  if (v14) {
    sub_1000DB0A0(v14);
  }
  long long v15 = *(std::__shared_weak_count **)(v10 + 1800);
  if (v15) {
    sub_1000DB0A0(v15);
  }
  long long v16 = *(std::__shared_weak_count **)(v10 + 1000);
  if (v16) {
    sub_1000DB0A0(v16);
  }
  long long v17 = *(std::__shared_weak_count **)(v10 + 304);
  if (v17) {
    sub_1000DB0A0(v17);
  }
  if (*(unsigned char *)(v10 + 280) && *(char *)(v10 + 223) < 0) {
    operator delete(*(void **)(v10 + 200));
  }
  long long v18 = *(std::__shared_weak_count **)(v10 + 184);
  if (v18) {
    sub_1000DB0A0(v18);
  }
  long long v19 = *(std::__shared_weak_count **)(v10 + 168);
  if (v19) {
    sub_1000DB0A0(v19);
  }
  long long v20 = *(std::__shared_weak_count **)(v10 + 152);
  if (v20) {
    sub_1000DB0A0(v20);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000E208C(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_1000DA584(result, a4);
    uint64_t result = sub_1000DA620((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1000E20F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1000D7F04(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E2114(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v3 = a2[4];
  uint64_t v4 = a2[1];
  if (a2[2] == v4)
  {
    long long v5 = 0;
    long long v8 = 0;
    long long v7 = (void *)(v4 + ((((a2[5] + v3) * (unsigned __int128)0x4EC4EC4EC4EC4EC5uLL) >> 64) & 0x7FFFFFFFFFFFFFF8));
  }
  else
  {
    long long v5 = (_OWORD *)(*(void *)(v4 + 8 * (v3 / 0x1A)) + 156 * (v3 % 0x1A));
    unint64_t v6 = a2[5] + v3;
    long long v7 = (void *)(v4 + 8 * (v6 / 0x1A));
    long long v8 = (_OWORD *)(*v7 + 156 * (v6 % 0x1A));
  }
  sub_1000E21E4((void *)a1, (void *)(v4 + 8 * (v3 / 0x1A)), v5, v7, v8);
  return a1;
}

void sub_1000E21D0(_Unwind_Exception *a1)
{
  sub_1000D7EB4(v1);
  _Unwind_Resume(a1);
}

void *sub_1000E21E4(void *a1, void *a2, _OWORD *a3, void *a4, _OWORD *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = 26 * (a4 - a2)
  }
       + 0x6F96F96F96F96F97 * (((uint64_t)a5 - *a4) >> 2)
       - 0x6F96F96F96F96F97 * (((uint64_t)a3 - *a2) >> 2);
  return sub_1000E2248(a1, a2, a3, v5);
}

void *sub_1000E2248(void *a1, void *a2, _OWORD *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = 26 * ((v9 - v8) >> 3) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_1013F16EC(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }
  uint64_t v13 = (void *)(v8 + 8 * (v11 / 0x1A));
  if (v9 == v8) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = *v13 + 156 * (v11 % 0x1A);
  }
  long long v29 = (void *)(v8 + 8 * (v11 / 0x1A));
  unint64_t v30 = v14;
  uint64_t result = sub_1013F1CA4(&v29, a4);
  uint64_t v16 = v30;
  if (v14 != v30)
  {
    long long v17 = v29;
    do
    {
      if (v13 == v17) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = *v13 + 4056;
      }
      if (v14 == v18)
      {
        uint64_t v18 = v14;
      }
      else
      {
        long long v19 = (_OWORD *)v14;
        do
        {
          long long v20 = a3[1];
          _OWORD *v19 = *a3;
          v19[1] = v20;
          long long v21 = a3[2];
          long long v22 = a3[3];
          long long v23 = a3[5];
          v19[4] = a3[4];
          v19[5] = v23;
          v19[2] = v21;
          v19[3] = v22;
          long long v24 = a3[6];
          long long v25 = a3[7];
          long long v26 = a3[8];
          *(_OWORD *)((char *)v19 + 140) = *(_OWORD *)((char *)a3 + 140);
          v19[7] = v25;
          v19[8] = v26;
          v19[6] = v24;
          a3 = (_OWORD *)((char *)a3 + 156);
          if ((_OWORD *)((char *)a3 - *a2) == (_OWORD *)4056)
          {
            long long v27 = (_OWORD *)a2[1];
            ++a2;
            a3 = v27;
          }
          long long v19 = (_OWORD *)((char *)v19 + 156);
        }
        while (v19 != (_OWORD *)v18);
      }
      a1[5] += 0x6F96F96F96F96F97 * ((uint64_t)(v18 - v14) >> 2);
      if (v13 == v17) {
        break;
      }
      unint64_t v28 = v13[1];
      ++v13;
      unint64_t v14 = v28;
    }
    while (v28 != v16);
  }
  return result;
}

unsigned char *sub_1000E23EC(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[88] = 0;
  if (*(unsigned char *)(a2 + 88))
  {
    sub_1000D9E2C((uint64_t)a1, a2);
    a1[88] = 1;
  }
  return a1;
}

void sub_1000E2430(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 88)) {
    sub_101A57C04(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000E244C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  long long v7 = *(_OWORD *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 96);
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  if (*(unsigned char *)(a2 + 280))
  {
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    long long v10 = *(_OWORD *)(a2 + 200);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = v10;
    *(void *)(a2 + 208) = 0;
    *(void *)(a2 + 216) = 0;
    *(void *)(a2 + 200) = 0;
    long long v11 = *(_OWORD *)(a2 + 224);
    long long v12 = *(_OWORD *)(a2 + 240);
    long long v13 = *(_OWORD *)(a2 + 256);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(_OWORD *)(a1 + 240) = v12;
    *(_OWORD *)(a1 + 256) = v13;
    *(_OWORD *)(a1 + 224) = v11;
    *(unsigned char *)(a1 + 280) = 1;
  }
  *(_WORD *)(a1 + 288) = *(_WORD *)(a2 + 288);
  uint64_t v14 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v14;
  *(_OWORD *)(a2 + 296) = 0u;
  long long v15 = *(_OWORD *)(a2 + 392);
  long long v17 = *(_OWORD *)(a2 + 344);
  long long v16 = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = v15;
  *(_OWORD *)(a1 + 344) = v17;
  *(_OWORD *)(a1 + 360) = v16;
  long long v19 = *(_OWORD *)(a2 + 424);
  long long v18 = *(_OWORD *)(a2 + 440);
  long long v20 = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 452) = *(_OWORD *)(a2 + 452);
  *(_OWORD *)(a1 + 424) = v19;
  *(_OWORD *)(a1 + 440) = v18;
  *(_OWORD *)(a1 + 408) = v20;
  long long v21 = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 328) = v21;
  memcpy((void *)(a1 + 472), (const void *)(a2 + 472), 0x201uLL);
  *(_OWORD *)(a1 + 992) = *(_OWORD *)(a2 + 992);
  *(_OWORD *)(a2 + 992) = 0u;
  long long v22 = *(_OWORD *)(a2 + 1040);
  long long v23 = *(_OWORD *)(a2 + 1024);
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
  *(_OWORD *)(a1 + 1024) = v23;
  *(_OWORD *)(a1 + 1040) = v22;
  long long v24 = *(_OWORD *)(a2 + 1056);
  uint64_t v25 = *(void *)(a2 + 1101);
  long long v26 = *(_OWORD *)(a2 + 1072);
  *(_OWORD *)(a1 + 1088) = *(_OWORD *)(a2 + 1088);
  *(_OWORD *)(a1 + 1072) = v26;
  *(void *)(a1 + 1101) = v25;
  *(_OWORD *)(a1 + 1056) = v24;
  long long v27 = *(_OWORD *)(a2 + 1128);
  *(_OWORD *)(a1 + 1112) = *(_OWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1128) = v27;
  long long v29 = *(_OWORD *)(a2 + 1224);
  long long v28 = *(_OWORD *)(a2 + 1240);
  long long v30 = *(_OWORD *)(a2 + 1208);
  *(_OWORD *)(a1 + 1252) = *(_OWORD *)(a2 + 1252);
  *(_OWORD *)(a1 + 1224) = v29;
  *(_OWORD *)(a1 + 1240) = v28;
  *(_OWORD *)(a1 + 1208) = v30;
  long long v32 = *(_OWORD *)(a2 + 1144);
  long long v31 = *(_OWORD *)(a2 + 1160);
  long long v33 = *(_OWORD *)(a2 + 1192);
  *(_OWORD *)(a1 + 1176) = *(_OWORD *)(a2 + 1176);
  *(_OWORD *)(a1 + 1192) = v33;
  *(_OWORD *)(a1 + 1144) = v32;
  *(_OWORD *)(a1 + 1160) = v31;
  memcpy((void *)(a1 + 1272), (const void *)(a2 + 1272), 0x201uLL);
  *(_OWORD *)(a1 + 1792) = *(_OWORD *)(a2 + 1792);
  *(_OWORD *)(a2 + 1792) = 0u;
  long long v34 = *(_OWORD *)(a2 + 1840);
  long long v35 = *(_OWORD *)(a2 + 1824);
  *(_OWORD *)(a1 + 1808) = *(_OWORD *)(a2 + 1808);
  *(_OWORD *)(a1 + 1824) = v35;
  *(_OWORD *)(a1 + 1840) = v34;
  long long v36 = *(_OWORD *)(a2 + 1856);
  uint64_t v37 = *(void *)(a2 + 1901);
  long long v38 = *(_OWORD *)(a2 + 1888);
  *(_OWORD *)(a1 + 1872) = *(_OWORD *)(a2 + 1872);
  *(_OWORD *)(a1 + 1888) = v38;
  *(void *)(a1 + 1901) = v37;
  *(_OWORD *)(a1 + 1856) = v36;
  *(void *)(a1 + 1912) = *(void *)(a2 + 1912);
  *(void *)(a1 + 1920) = *(void *)(a2 + 1920);
  *(_OWORD *)(a2 + 1912) = 0u;
  memcpy((void *)(a1 + 1928), (const void *)(a2 + 1928), 0x170uLL);
  memcpy((void *)(a1 + 2296), (const void *)(a2 + 2296), 0x201uLL);
  *(_OWORD *)(a1 + 2816) = *(_OWORD *)(a2 + 2816);
  *(_OWORD *)(a2 + 2816) = 0u;
  long long v39 = *(_OWORD *)(a2 + 2864);
  long long v40 = *(_OWORD *)(a2 + 2848);
  *(_OWORD *)(a1 + 2832) = *(_OWORD *)(a2 + 2832);
  *(_OWORD *)(a1 + 2848) = v40;
  *(_OWORD *)(a1 + 2864) = v39;
  long long v41 = *(_OWORD *)(a2 + 2880);
  uint64_t v42 = *(void *)(a2 + 2925);
  long long v43 = *(_OWORD *)(a2 + 2912);
  *(_OWORD *)(a1 + 2896) = *(_OWORD *)(a2 + 2896);
  *(_OWORD *)(a1 + 2912) = v43;
  *(void *)(a1 + 2925) = v42;
  *(_OWORD *)(a1 + 2880) = v41;
  uint64_t v44 = *(void *)(a2 + 2936);
  *(unsigned char *)(a1 + 2944) = *(unsigned char *)(a2 + 2944);
  *(void *)(a1 + 2936) = v44;
  char v45 = *(unsigned char *)(a2 + 2960);
  *(void *)(a1 + 2952) = *(void *)(a2 + 2952);
  *(unsigned char *)(a1 + 2960) = v45;
  uint64_t v46 = *(void *)(a2 + 2984);
  *(_OWORD *)(a1 + 2968) = *(_OWORD *)(a2 + 2968);
  *(void *)(a1 + 2984) = v46;
  *(void *)(a2 + 2984) = 0;
  *(_OWORD *)(a2 + 2968) = 0u;
  *(_OWORD *)(a1 + 2992) = *(_OWORD *)(a2 + 2992);
  long long v47 = *(_OWORD *)(a2 + 3008);
  long long v48 = *(_OWORD *)(a2 + 3024);
  long long v49 = *(_OWORD *)(a2 + 3040);
  *(_OWORD *)(a1 + 3052) = *(_OWORD *)(a2 + 3052);
  *(_OWORD *)(a1 + 3040) = v49;
  *(_OWORD *)(a1 + 3024) = v48;
  *(_OWORD *)(a1 + 3008) = v47;
  uint64_t v50 = *(void *)(a2 + 3088);
  *(_OWORD *)(a1 + 3072) = *(_OWORD *)(a2 + 3072);
  *(void *)(a1 + 3088) = v50;
  *(void *)(a2 + 3088) = 0;
  *(_OWORD *)(a2 + 3072) = 0u;
  long long v51 = *(_OWORD *)(a2 + 3096);
  long long v52 = *(_OWORD *)(a2 + 3128);
  *(_OWORD *)(a1 + 3112) = *(_OWORD *)(a2 + 3112);
  *(_OWORD *)(a1 + 3128) = v52;
  *(_OWORD *)(a1 + 3096) = v51;
  long long v53 = *(_OWORD *)(a2 + 3144);
  long long v54 = *(_OWORD *)(a2 + 3160);
  long long v55 = *(_OWORD *)(a2 + 3192);
  *(_OWORD *)(a1 + 3176) = *(_OWORD *)(a2 + 3176);
  *(_OWORD *)(a1 + 3192) = v55;
  *(_OWORD *)(a1 + 3144) = v53;
  *(_OWORD *)(a1 + 3160) = v54;
  long long v56 = *(_OWORD *)(a2 + 3208);
  long long v57 = *(_OWORD *)(a2 + 3224);
  long long v58 = *(_OWORD *)(a2 + 3240);
  *(unsigned char *)(a1 + 3256) = *(unsigned char *)(a2 + 3256);
  *(_OWORD *)(a1 + 3224) = v57;
  *(_OWORD *)(a1 + 3240) = v58;
  *(_OWORD *)(a1 + 3208) = v56;
  *(void *)(a1 + 3280) = 0;
  *(_OWORD *)(a1 + 3264) = 0u;
  *(_OWORD *)(a1 + 3264) = *(_OWORD *)(a2 + 3264);
  *(void *)(a1 + 3280) = *(void *)(a2 + 3280);
  *(_OWORD *)(a2 + 3264) = 0u;
  *(void *)(a2 + 3280) = 0;
  sub_1000E2908(a1 + 3288, (uint64_t *)(a2 + 3288));
  long long v59 = *(_OWORD *)(a2 + 3328);
  *(void *)(a1 + 3344) = *(void *)(a2 + 3344);
  *(_OWORD *)(a1 + 3328) = v59;
  long long v60 = *(_OWORD *)(a2 + 3352);
  long long v61 = *(_OWORD *)(a2 + 3368);
  long long v62 = *(_OWORD *)(a2 + 3384);
  *(void *)(a1 + 3399) = *(void *)(a2 + 3399);
  *(_OWORD *)(a1 + 3368) = v61;
  *(_OWORD *)(a1 + 3384) = v62;
  *(_OWORD *)(a1 + 3352) = v60;
  *(_OWORD *)(a1 + 3408) = *(_OWORD *)(a2 + 3408);
  *(_OWORD *)(a2 + 3408) = 0u;
  long long v63 = *(_OWORD *)(a2 + 3424);
  *(_OWORD *)(a1 + 3433) = *(_OWORD *)(a2 + 3433);
  *(_OWORD *)(a1 + 3424) = v63;
  return a1;
}

uint64_t sub_1000E2830(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v4 = a2[4];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  long long v7 = (char *)(v5 + 8 * (v4 >> 8));
  if (v6 == v5)
  {
    long long v8 = 0;
    long long v11 = 0;
    long long v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 8));
  }
  else
  {
    long long v8 = (long long *)(*(void *)v7 + 16 * v4);
    unint64_t v9 = a2[5] + v4;
    long long v10 = (char *)(v5 + 8 * (v9 >> 8));
    long long v11 = (long long *)(*(void *)v10 + 16 * v9);
  }
  sub_1000E28D4((void *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_1000E28C0(_Unwind_Exception *a1)
{
  sub_1000D7EB4(v1);
  _Unwind_Resume(a1);
}

void *sub_1000E28D4(void *a1, char *a2, long long *a3, char *a4, long long *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = (((uint64_t)a5 - *(void *)a4) >> 4) + 32 * (a4 - a2) - (((uint64_t)a3 - *(void *)a2) >> 4);
  }
  return sub_1000D833C(a1, a2, a3, v5);
}

uint64_t sub_1000E2908(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)uint64_t result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  unint64_t v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    *unint64_t v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t sub_1000E2978(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  long long v7 = *(_OWORD *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 96);
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  long long v10 = *(_OWORD *)(a2 + 144);
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  long long v11 = *(std::__shared_weak_count **)(a1 + 152);
  *(_OWORD *)(a1 + 144) = v10;
  if (v11) {
    sub_1000DB0A0(v11);
  }
  long long v12 = *(_OWORD *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  long long v13 = *(std::__shared_weak_count **)(a1 + 168);
  *(_OWORD *)(a1 + 160) = v12;
  if (v13) {
    sub_1000DB0A0(v13);
  }
  long long v14 = *(_OWORD *)(a2 + 176);
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  long long v15 = *(std::__shared_weak_count **)(a1 + 184);
  *(_OWORD *)(a1 + 176) = v14;
  if (v15) {
    sub_1000DB0A0(v15);
  }
  sub_1000E2DB0(a1 + 192, a2 + 192);
  *(_WORD *)(a1 + 288) = *(_WORD *)(a2 + 288);
  long long v16 = *(_OWORD *)(a2 + 296);
  *(void *)(a2 + 296) = 0;
  *(void *)(a2 + 304) = 0;
  long long v17 = *(std::__shared_weak_count **)(a1 + 304);
  *(_OWORD *)(a1 + 296) = v16;
  if (v17) {
    sub_1000DB0A0(v17);
  }
  long long v18 = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 328) = v18;
  long long v19 = *(_OWORD *)(a2 + 344);
  long long v20 = *(_OWORD *)(a2 + 360);
  long long v21 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = v21;
  *(_OWORD *)(a1 + 344) = v19;
  *(_OWORD *)(a1 + 360) = v20;
  long long v22 = *(_OWORD *)(a2 + 408);
  long long v23 = *(_OWORD *)(a2 + 424);
  long long v24 = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 452) = *(_OWORD *)(a2 + 452);
  *(_OWORD *)(a1 + 424) = v23;
  *(_OWORD *)(a1 + 440) = v24;
  *(_OWORD *)(a1 + 408) = v22;
  memcpy((void *)(a1 + 472), (const void *)(a2 + 472), 0x201uLL);
  long long v25 = *(_OWORD *)(a2 + 992);
  *(_OWORD *)(a2 + 992) = 0u;
  long long v26 = *(std::__shared_weak_count **)(a1 + 1000);
  *(_OWORD *)(a1 + 992) = v25;
  if (v26) {
    sub_1000DB0A0(v26);
  }
  long long v27 = *(_OWORD *)(a2 + 1008);
  long long v28 = *(_OWORD *)(a2 + 1024);
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
  *(_OWORD *)(a1 + 1008) = v27;
  *(_OWORD *)(a1 + 1024) = v28;
  long long v29 = *(_OWORD *)(a2 + 1056);
  long long v30 = *(_OWORD *)(a2 + 1072);
  long long v31 = *(_OWORD *)(a2 + 1088);
  *(void *)(a1 + 1101) = *(void *)(a2 + 1101);
  *(_OWORD *)(a1 + 1088) = v31;
  *(_OWORD *)(a1 + 1072) = v30;
  *(_OWORD *)(a1 + 1056) = v29;
  long long v32 = *(_OWORD *)(a2 + 1192);
  long long v34 = *(_OWORD *)(a2 + 1144);
  long long v33 = *(_OWORD *)(a2 + 1160);
  *(_OWORD *)(a1 + 1176) = *(_OWORD *)(a2 + 1176);
  *(_OWORD *)(a1 + 1192) = v32;
  *(_OWORD *)(a1 + 1144) = v34;
  *(_OWORD *)(a1 + 1160) = v33;
  long long v36 = *(_OWORD *)(a2 + 1224);
  long long v35 = *(_OWORD *)(a2 + 1240);
  long long v37 = *(_OWORD *)(a2 + 1208);
  *(_OWORD *)(a1 + 1252) = *(_OWORD *)(a2 + 1252);
  *(_OWORD *)(a1 + 1224) = v36;
  *(_OWORD *)(a1 + 1240) = v35;
  *(_OWORD *)(a1 + 1208) = v37;
  long long v38 = *(_OWORD *)(a2 + 1128);
  *(_OWORD *)(a1 + 1112) = *(_OWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1128) = v38;
  memcpy((void *)(a1 + 1272), (const void *)(a2 + 1272), 0x201uLL);
  long long v39 = *(_OWORD *)(a2 + 1792);
  *(_OWORD *)(a2 + 1792) = 0u;
  long long v40 = *(std::__shared_weak_count **)(a1 + 1800);
  *(_OWORD *)(a1 + 1792) = v39;
  if (v40) {
    sub_1000DB0A0(v40);
  }
  long long v41 = *(_OWORD *)(a2 + 1808);
  long long v42 = *(_OWORD *)(a2 + 1824);
  *(_OWORD *)(a1 + 1840) = *(_OWORD *)(a2 + 1840);
  *(_OWORD *)(a1 + 1824) = v42;
  *(_OWORD *)(a1 + 1808) = v41;
  long long v43 = *(_OWORD *)(a2 + 1856);
  long long v44 = *(_OWORD *)(a2 + 1872);
  long long v45 = *(_OWORD *)(a2 + 1888);
  *(void *)(a1 + 1901) = *(void *)(a2 + 1901);
  *(_OWORD *)(a1 + 1888) = v45;
  *(_OWORD *)(a1 + 1872) = v44;
  *(_OWORD *)(a1 + 1856) = v43;
  long long v46 = *(_OWORD *)(a2 + 1912);
  *(_OWORD *)(a2 + 1912) = 0u;
  long long v47 = *(std::__shared_weak_count **)(a1 + 1920);
  *(_OWORD *)(a1 + 1912) = v46;
  if (v47) {
    sub_1000DB0A0(v47);
  }
  memcpy((void *)(a1 + 1928), (const void *)(a2 + 1928), 0x170uLL);
  memcpy((void *)(a1 + 2296), (const void *)(a2 + 2296), 0x201uLL);
  long long v48 = *(_OWORD *)(a2 + 2816);
  *(_OWORD *)(a2 + 2816) = 0u;
  long long v49 = *(std::__shared_weak_count **)(a1 + 2824);
  *(_OWORD *)(a1 + 2816) = v48;
  if (v49) {
    sub_1000DB0A0(v49);
  }
  long long v50 = *(_OWORD *)(a2 + 2832);
  long long v51 = *(_OWORD *)(a2 + 2848);
  *(_OWORD *)(a1 + 2864) = *(_OWORD *)(a2 + 2864);
  *(_OWORD *)(a1 + 2848) = v51;
  *(_OWORD *)(a1 + 2832) = v50;
  long long v52 = *(_OWORD *)(a2 + 2880);
  long long v53 = *(_OWORD *)(a2 + 2896);
  long long v54 = *(_OWORD *)(a2 + 2912);
  *(void *)(a1 + 2925) = *(void *)(a2 + 2925);
  *(_OWORD *)(a1 + 2912) = v54;
  *(_OWORD *)(a1 + 2896) = v53;
  *(_OWORD *)(a1 + 2880) = v52;
  uint64_t v55 = *(void *)(a2 + 2936);
  *(unsigned char *)(a1 + 2944) = *(unsigned char *)(a2 + 2944);
  *(void *)(a1 + 2936) = v55;
  uint64_t v56 = *(void *)(a2 + 2952);
  *(unsigned char *)(a1 + 2960) = *(unsigned char *)(a2 + 2960);
  *(void *)(a1 + 2952) = v56;
  long long v57 = (void **)(a1 + 2968);
  if (*(char *)(a1 + 2991) < 0) {
    operator delete(*v57);
  }
  long long v58 = *(_OWORD *)(a2 + 2968);
  *(void *)(a1 + 2984) = *(void *)(a2 + 2984);
  *(_OWORD *)long long v57 = v58;
  *(unsigned char *)(a2 + 2991) = 0;
  *(unsigned char *)(a2 + 2968) = 0;
  long long v59 = *(_OWORD *)(a2 + 3052);
  long long v60 = *(_OWORD *)(a2 + 3040);
  long long v61 = *(_OWORD *)(a2 + 3024);
  *(_OWORD *)(a1 + 3008) = *(_OWORD *)(a2 + 3008);
  *(_OWORD *)(a1 + 3024) = v61;
  *(_OWORD *)(a1 + 3040) = v60;
  *(_OWORD *)(a1 + 3052) = v59;
  *(_OWORD *)(a1 + 2992) = *(_OWORD *)(a2 + 2992);
  long long v62 = (void **)(a1 + 3072);
  if (*(char *)(a1 + 3095) < 0) {
    operator delete(*v62);
  }
  long long v63 = *(_OWORD *)(a2 + 3072);
  *(void *)(a1 + 3088) = *(void *)(a2 + 3088);
  *(_OWORD *)long long v62 = v63;
  *(unsigned char *)(a2 + 3095) = 0;
  *(unsigned char *)(a2 + 3072) = 0;
  long long v65 = *(_OWORD *)(a2 + 3176);
  long long v64 = *(_OWORD *)(a2 + 3192);
  long long v66 = *(_OWORD *)(a2 + 3160);
  *(_OWORD *)(a1 + 3144) = *(_OWORD *)(a2 + 3144);
  *(_OWORD *)(a1 + 3160) = v66;
  *(_OWORD *)(a1 + 3176) = v65;
  *(_OWORD *)(a1 + 3192) = v64;
  long long v68 = *(_OWORD *)(a2 + 3112);
  long long v67 = *(_OWORD *)(a2 + 3128);
  *(_OWORD *)(a1 + 3096) = *(_OWORD *)(a2 + 3096);
  *(_OWORD *)(a1 + 3112) = v68;
  *(_OWORD *)(a1 + 3128) = v67;
  long long v69 = *(_OWORD *)(a2 + 3208);
  long long v70 = *(_OWORD *)(a2 + 3224);
  long long v71 = *(_OWORD *)(a2 + 3240);
  *(unsigned char *)(a1 + 3256) = *(unsigned char *)(a2 + 3256);
  *(_OWORD *)(a1 + 3224) = v70;
  *(_OWORD *)(a1 + 3240) = v71;
  *(_OWORD *)(a1 + 3208) = v69;
  sub_1000DA970((void ***)(a1 + 3264));
  *(_OWORD *)(a1 + 3264) = *(_OWORD *)(a2 + 3264);
  *(void *)(a1 + 3280) = *(void *)(a2 + 3280);
  *(void *)(a2 + 3280) = 0;
  *(_OWORD *)(a2 + 3264) = 0u;
  sub_1000E2E9C(a1 + 3288, (uint64_t *)(a2 + 3288));
  long long v72 = *(_OWORD *)(a2 + 3328);
  *(void *)(a1 + 3344) = *(void *)(a2 + 3344);
  *(_OWORD *)(a1 + 3328) = v72;
  long long v73 = *(_OWORD *)(a2 + 3352);
  long long v74 = *(_OWORD *)(a2 + 3368);
  long long v75 = *(_OWORD *)(a2 + 3384);
  *(void *)(a1 + 3399) = *(void *)(a2 + 3399);
  *(_OWORD *)(a1 + 3368) = v74;
  *(_OWORD *)(a1 + 3384) = v75;
  *(_OWORD *)(a1 + 3352) = v73;
  long long v76 = *(_OWORD *)(a2 + 3408);
  *(_OWORD *)(a2 + 3408) = 0u;
  long long v77 = *(std::__shared_weak_count **)(a1 + 3416);
  *(_OWORD *)(a1 + 3408) = v76;
  if (v77) {
    sub_1000DB0A0(v77);
  }
  long long v78 = *(_OWORD *)(a2 + 3424);
  *(_OWORD *)(a1 + 3433) = *(_OWORD *)(a2 + 3433);
  *(_OWORD *)(a1 + 3424) = v78;
  return a1;
}

__n128 sub_1000E2DB0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 88) == *(unsigned __int8 *)(a2 + 88))
  {
    if (*(unsigned char *)(a1 + 88))
    {
      *(void *)a1 = *(void *)a2;
      long long v4 = (void **)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*v4);
      }
      long long v5 = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(_OWORD *)long long v4 = v5;
      *(unsigned char *)(a2 + 31) = 0;
      *(unsigned char *)(a2 + 8) = 0;
      __n128 result = *(__n128 *)(a2 + 32);
      long long v7 = *(_OWORD *)(a2 + 48);
      long long v8 = *(_OWORD *)(a2 + 64);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(_OWORD *)(a1 + 48) = v7;
      *(_OWORD *)(a1 + 64) = v8;
      *(__n128 *)(a1 + 32) = result;
    }
  }
  else if (*(unsigned char *)(a1 + 88))
  {
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
    *(unsigned char *)(a1 + 88) = 0;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    long long v9 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v9;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    __n128 result = *(__n128 *)(a2 + 32);
    long long v10 = *(_OWORD *)(a2 + 48);
    long long v11 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v10;
    *(_OWORD *)(a1 + 64) = v11;
    *(__n128 *)(a1 + 32) = result;
    *(unsigned char *)(a1 + 88) = 1;
  }
  return result;
}

void sub_1000E2E9C(uint64_t a1, uint64_t *a2)
{
  sub_1000E2F40((void *)a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  long long v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  long long v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *long long v7 = 0;
    v7[1] = 0;
  }
}

void *sub_1000E2F40(void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    __n128 result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        __n128 result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

uint64_t sub_1000E2FA8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  char v4 = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = v4;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 24), *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v5;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  long long v6 = *(_OWORD *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 64) = v6;
  uint64_t v9 = (unsigned char *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    sub_1000DC48C(v9, *(void **)(a2 + 128), *(void *)(a2 + 136));
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)uint64_t v9 = v10;
  }
  long long v11 = *(_OWORD *)(a2 + 152);
  long long v12 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v12;
  *(_OWORD *)(a1 + 152) = v11;
  long long v13 = *(_OWORD *)(a2 + 200);
  long long v14 = *(_OWORD *)(a2 + 216);
  long long v15 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v15;
  *(_OWORD *)(a1 + 216) = v14;
  *(_OWORD *)(a1 + 200) = v13;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = 0;
  sub_1000E208C((void *)(a1 + 264), *(uint64_t **)(a2 + 264), *(uint64_t **)(a2 + 272), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 272) - *(void *)(a2 + 264)) >> 3));
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  sub_1000E346C(a1 + 296, a2 + 296);
  sub_1000E3AC4(a1 + 336, a2 + 336);
  sub_1000E3B3C(a1 + 376, a2 + 376);
  sub_1000E346C(a1 + 416, a2 + 416);
  sub_1000E346C(a1 + 456, a2 + 456);
  memcpy((void *)(a1 + 496), (const void *)(a2 + 496), 0x120uLL);
  sub_1000E3A78(a1 + 784, (long long *)(a2 + 784));
  *(unsigned char *)(a1 + 816) = *(unsigned char *)(a2 + 816);
  *(void *)(a1 + 824) = 0;
  *(void *)(a1 + 840) = 0;
  *(void *)(a1 + 832) = 0;
  sub_1000E39FC((void *)(a1 + 824), *(const void **)(a2 + 824), *(void *)(a2 + 832), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(a2 + 832) - *(void *)(a2 + 824)) >> 3));
  *(_WORD *)(a1 + 848) = *(_WORD *)(a2 + 848);
  sub_1000E3938((unsigned char *)(a1 + 856), a2 + 856);
  sub_1000E3990(a1 + 952, a2 + 952);
  sub_1000E38CC(a1 + 1008, a2 + 1008);
  long long v16 = *(_OWORD *)(a2 + 1064);
  long long v17 = *(_OWORD *)(a2 + 1080);
  long long v18 = *(_OWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1096) = *(_OWORD *)(a2 + 1096);
  *(_OWORD *)(a1 + 1112) = v18;
  *(_OWORD *)(a1 + 1064) = v16;
  *(_OWORD *)(a1 + 1080) = v17;
  long long v19 = *(_OWORD *)(a2 + 1128);
  long long v20 = *(_OWORD *)(a2 + 1144);
  long long v21 = *(_OWORD *)(a2 + 1160);
  *(_DWORD *)(a1 + 1176) = *(_DWORD *)(a2 + 1176);
  *(_OWORD *)(a1 + 1144) = v20;
  *(_OWORD *)(a1 + 1160) = v21;
  *(_OWORD *)(a1 + 1128) = v19;
  *(unsigned char *)(a1 + 1184) = 0;
  *(unsigned char *)(a1 + 1984) = 0;
  if (*(unsigned char *)(a2 + 1984))
  {
    long long v22 = *(_OWORD *)(a2 + 1200);
    *(_OWORD *)(a1 + 1184) = *(_OWORD *)(a2 + 1184);
    *(_OWORD *)(a1 + 1200) = v22;
    long long v23 = *(_OWORD *)(a2 + 1216);
    long long v24 = *(_OWORD *)(a2 + 1232);
    long long v25 = *(_OWORD *)(a2 + 1264);
    *(_OWORD *)(a1 + 1248) = *(_OWORD *)(a2 + 1248);
    *(_OWORD *)(a1 + 1264) = v25;
    *(_OWORD *)(a1 + 1216) = v23;
    *(_OWORD *)(a1 + 1232) = v24;
    long long v26 = *(_OWORD *)(a2 + 1280);
    long long v27 = *(_OWORD *)(a2 + 1296);
    long long v28 = *(_OWORD *)(a2 + 1312);
    *(_OWORD *)(a1 + 1324) = *(_OWORD *)(a2 + 1324);
    *(_OWORD *)(a1 + 1296) = v27;
    *(_OWORD *)(a1 + 1312) = v28;
    *(_OWORD *)(a1 + 1280) = v26;
    memcpy((void *)(a1 + 1344), (const void *)(a2 + 1344), 0x201uLL);
    *(void *)(a1 + 1864) = *(void *)(a2 + 1864);
    uint64_t v29 = *(void *)(a2 + 1872);
    *(void *)(a1 + 1872) = v29;
    if (v29) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
    }
    long long v30 = *(_OWORD *)(a2 + 1880);
    long long v31 = *(_OWORD *)(a2 + 1912);
    *(_OWORD *)(a1 + 1896) = *(_OWORD *)(a2 + 1896);
    *(_OWORD *)(a1 + 1912) = v31;
    *(_OWORD *)(a1 + 1880) = v30;
    long long v32 = *(_OWORD *)(a2 + 1928);
    long long v33 = *(_OWORD *)(a2 + 1944);
    long long v34 = *(_OWORD *)(a2 + 1960);
    *(void *)(a1 + 1973) = *(void *)(a2 + 1973);
    *(_OWORD *)(a1 + 1944) = v33;
    *(_OWORD *)(a1 + 1960) = v34;
    *(_OWORD *)(a1 + 1928) = v32;
    *(unsigned char *)(a1 + 1984) = 1;
  }
  sub_1000E3820(a1 + 1992, a2 + 1992);
  sub_1000E3720((unsigned char *)(a1 + 2024), a2 + 2024);
  sub_1000E3778(a1 + 2176, (long long *)(a2 + 2176));
  return a1;
}

void sub_1000E331C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (*(char *)(v17 + 47) < 0) {
    operator delete(*v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000E343C()
{
}

void sub_1000E3444()
{
}

void sub_1000E344C()
{
}

void sub_1000E3454()
{
}

void sub_1000E345C()
{
}

void sub_1000E3464()
{
}

uint64_t sub_1000E346C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100100330(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_1000E34E4(a1, i + 2, i + 2);
  return a1;
}

void sub_1000E34CC(_Unwind_Exception *a1)
{
  sub_1000D7D80(v1);
  _Unwind_Resume(a1);
}

void *sub_1000E34E4(uint64_t a1, void *a2, void *a3)
{
  unint64_t v7 = sub_1000D8908((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    long long v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v8)
        {
          if (sub_100B39178(i + 2, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100100330(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  long long v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    void *i = *v22;
LABEL_38:
    *long long v22 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    long long v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1000E370C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_1000E3720(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[144] = 0;
  if (*(unsigned char *)(a2 + 144))
  {
    sub_10050FDAC((uint64_t)a1, (uint64_t *)a2);
    a1[144] = 1;
  }
  return a1;
}

void sub_1000E3764(_Unwind_Exception *a1)
{
  sub_1000D8214(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E3778(uint64_t a1, long long *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  sub_1000E37C4((_OWORD *)a1, a2);
  return a1;
}

void sub_1000E37A8(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    sub_101A63E0C((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_1000E37C4(_OWORD *__dst, long long *a2)
{
  if (*((unsigned char *)a2 + 24))
  {
    uint64_t v2 = __dst;
    if (*((char *)a2 + 23) < 0)
    {
      long long __dst = sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      *((void *)__dst + 2) = *((void *)a2 + 2);
      *long long __dst = v3;
    }
    v2[24] = 1;
  }
  return __dst;
}

uint64_t sub_1000E3820(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  sub_1000E386C((void *)a1, a2);
  return a1;
}

void sub_1000E3850(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    sub_101A5DAEC(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000E386C(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    *__n128 result = 0;
    result[1] = 0;
    result[2] = 0;
    __n128 result = sub_10050FCE4(result, *(const void **)a2, *(void *)(a2 + 8), 0x6F96F96F96F96F97 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
    *((unsigned char *)v2 + 24) = 1;
  }
  return result;
}

uint64_t sub_1000E38CC(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    sub_1000E346C(a1, a2);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(unsigned char *)(a1 + 48) = 1;
  }
  return a1;
}

void sub_1000E391C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 48)) {
    sub_1000D7D80(v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1000E3938(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[88] = 0;
  if (*(unsigned char *)(a2 + 88))
  {
    sub_10050F9AC((uint64_t)a1, (long long *)a2);
    a1[88] = 1;
  }
  return a1;
}

void sub_1000E397C(_Unwind_Exception *a1)
{
  sub_1000D8260(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E3990(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    sub_1000E346C(a1, a2);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(unsigned char *)(a1 + 48) = 1;
  }
  return a1;
}

void sub_1000E39E0(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 48)) {
    sub_1000D7D80(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000E39FC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    __n128 result = sub_10050F7C8(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1000E3A5C(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000E3A78(uint64_t a1, long long *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  sub_1000E37C4((_OWORD *)a1, a2);
  return a1;
}

void sub_1000E3AA8(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    sub_101A52034(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000E3AC4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100100330(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_1005106E4(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_1000E3B24(_Unwind_Exception *a1)
{
  sub_1000D82B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E3B3C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100100330(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_1005109DC(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_1000E3B9C(_Unwind_Exception *a1)
{
  sub_1000D7D80(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E3BB4(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_1000D9488(v3 + 224, v1 + 1352);
  if (*(unsigned char *)(v2 + 1312))
  {
    unsigned int v6 = sub_100684214(v4, (uint64_t *)(v2 + 1168));
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
    }
    uint64_t v7 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long v174 = 67240192;
      *(_DWORD *)&v174[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, newUpdate, didStart, %{public}d", v174, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v174, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
      }
      *(_DWORD *)__n128 __p = 67240192;
      *(_DWORD *)&__p[4] = v6;
      size_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v8);
      if (v8 != v174) {
        free(v8);
      }
    }
  }
  else
  {
    unsigned int v6 = 0;
  }
  if (*(unsigned char *)(v2 + 1344))
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
    }
    unint64_t v9 = (void *)(v2 + 1320);
    uint8x8_t v10 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      unint64_t v11 = (void *)(v2 + 1320);
      if (*(char *)(v2 + 1343) < 0) {
        unint64_t v11 = (void *)*v9;
      }
      *(_DWORD *)long long v174 = 136446210;
      *(void *)&v174[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "@WsbReproc, reason, %{public}s", v174, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v174, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
      }
      if (*(char *)(v2 + 1343) < 0) {
        unint64_t v9 = (void *)*v9;
      }
      *(_DWORD *)__n128 __p = 136446210;
      *(void *)&__p[4] = v9;
      int v98 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v98);
      if (v98 != v174) {
        free(v98);
      }
    }
    v173[0] = 29;
    sub_1000E0AA0(v4, v173);
    sub_1000D7B80((uint64_t)v173);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
    }
    long long v12 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long v174 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, reprocWsb", v174, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v174, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
      }
      *(_WORD *)__n128 __p = 0;
      long long v99 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v99);
      if (v99 != v174) {
        free(v99);
      }
    }
  }
  if (*(unsigned char *)(v2 + 48))
  {
    long long v13 = *(void **)(v2 + 16);
    memset(__p, 0, 24);
    unint64_t v14 = 0;
    if (v13)
    {
      float v15 = v13;
      do
      {
        ++v14;
        float v15 = (void *)*v15;
      }
      while (v15);
    }
    sub_10068CEF0(__p, v13, 0, v14);
    unsigned int v16 = (*(uint64_t (**)(void, unsigned char *, void, void, uint64_t))(**(void **)(v4 + 120) + 160))(*(void *)(v4 + 120), __p, *(unsigned __int8 *)(v2 + 40), *(unsigned __int8 *)(v2 + 41), v2 + 44);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
    }
    BOOL v17 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long v174 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, alsreq", v174, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v174, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
      }
      LOWORD(v130) = 0;
      int v100 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v100);
      if (v100 != v174) {
        free(v100);
      }
    }
    uint64_t v172 = v16;
    int v171 = 21;
    sub_1000E0AA0(v4, &v171);
    sub_1000D7B80((uint64_t)&v171);
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }
  }
  if (*(unsigned char *)(v2 + 104))
  {
    unint64_t v18 = *(void **)(v2 + 72);
    memset(__p, 0, 24);
    unint64_t v19 = 0;
    if (v18)
    {
      size_t v20 = v18;
      do
      {
        ++v19;
        size_t v20 = (void *)*v20;
      }
      while (v20);
    }
    sub_10068CEF0(__p, v18, 0, v19);
    unint64_t v170 = (*(unsigned int (**)(void, unsigned char *, uint64_t, void, uint64_t))(**(void **)(v4 + 120) + 160))(*(void *)(v4 + 120), __p, 1, 0, v2 + 96) | (unint64_t)&_mh_execute_header;
    int v169 = 21;
    sub_1000E0AA0(v4, &v169);
    sub_1000D7B80((uint64_t)&v169);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
    }
    uint64_t v21 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long v174 = 134349056;
      *(void *)&v174[4] = (uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 3;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, alswsb, aps, %{public}lu", v174, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v174, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
      }
      int v130 = 134349056;
      uint64_t v131 = (uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 3;
      char v101 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v101);
      if (v101 != v174) {
        free(v101);
      }
    }
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }
  }
  if (!*(unsigned char *)(v2 + 200))
  {
    unsigned int v127 = v6;
    goto LABEL_80;
  }
  uint64_t v22 = *(void *)(v4 + 120);
  char v23 = *(unsigned char *)(v2 + 112);
  int v24 = *(_DWORD *)(v2 + 128);
  int v25 = *(unsigned __int8 *)(v2 + 132);
  if (*(char *)(v2 + 159) < 0)
  {
    sub_1000DC48C(__dst, *(void **)(v2 + 136), *(void *)(v2 + 144));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)(v2 + 136);
    uint64_t v129 = *(void *)(v2 + 152);
  }
  char v26 = *(unsigned char *)(v2 + 192);
  if (v26)
  {
    memset(v174, 0, 24);
    sub_10010F834(v174, *(const void **)(v2 + 168), *(void *)(v2 + 176), (uint64_t)(*(void *)(v2 + 176) - *(void *)(v2 + 168)) >> 2);
    char v26 = 1;
  }
  else
  {
    v174[0] = 0;
  }
  v174[24] = v26;
  unsigned int v127 = (*(uint64_t (**)(uint64_t, void, BOOL, BOOL, void **, unsigned char *))(*(void *)v22 + 144))(v22, v23, v24 == 1, v25 != 0, __dst, v174);
  if (v174[24] && *(void *)v174)
  {
    *(void *)&v174[8] = *(void *)v174;
    operator delete(*(void **)v174);
  }
  if (SHIBYTE(v129) < 0) {
    operator delete(__dst[0]);
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
  }
  long long v27 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    int v28 = *(char *)(v2 + 112);
    uint64_t v29 = "normal";
    int v30 = *(unsigned __int8 *)(v2 + 132);
    if (*(_DWORD *)(v2 + 128) == 1) {
      uint64_t v29 = "low";
    }
    *(_DWORD *)long long v174 = 68290050;
    if (v30) {
      long long v31 = "low";
    }
    else {
      long long v31 = "default";
    }
    *(_DWORD *)&v174[4] = 0;
    *(_WORD *)&v174[8] = 2082;
    *(void *)&v174[10] = "";
    *(_WORD *)&v174[18] = 1026;
    *(_DWORD *)&v174[20] = v28;
    *(_WORD *)&v174[24] = 2082;
    *(void *)&v174[26] = v29;
    *(_WORD *)&v174[34] = 2082;
    *(void *)&v174[36] = v31;
    *(_WORD *)&v174[44] = 1026;
    *(_DWORD *)&v174[46] = v127;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"requesting wifi scan\", \"scan_type\":%{public}d, \"priority\":%{public, location:escape_only}s, \"latency\":%{public, location:escape_only}s, \"scan_request_successful\":%{public}hhd}", v174, 0x32u);
    uint64_t v32 = qword_1024193B0;
    if ((v6 ^ 1 | v127)) {
      goto LABEL_75;
    }
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
    }
LABEL_72:
    long long v33 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long v174 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "value of didStartScan being reset to false after successfully beginning a scan", v174, 2u);
    }
    BOOL v34 = sub_10013D1A0(115, 0);
    uint64_t v32 = qword_1024193B0;
    if (v34)
    {
      bzero(v174, 0x65CuLL);
      if (v32 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
      }
      *(_WORD *)__n128 __p = 0;
      __int16 v126 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v126);
      if (v126 != v174) {
        free(v126);
      }
      uint64_t v32 = qword_1024193B0;
    }
LABEL_75:
    if (v32 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
    }
    goto LABEL_77;
  }
  if (((v6 ^ 1 | v127) & 1) == 0) {
    goto LABEL_72;
  }
LABEL_77:
  long long v35 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long v174 = 67240192;
    *(_DWORD *)&v174[4] = v127;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, scanreq, didStart, %{public}d", v174, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v174, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
    }
    *(_DWORD *)__n128 __p = 67240192;
    *(_DWORD *)&__p[4] = v127;
    unsigned int v102 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v102);
    if (v102 != v174) {
      free(v102);
    }
  }
LABEL_80:
  if (*(unsigned char *)(v2 + 212))
  {
    int v36 = *(_DWORD *)(v2 + 208);
    if (v36 == 1)
    {
      (*(void (**)(void, void))(**(void **)(v4 + 120) + 168))(*(void *)(v4 + 120), 0);
      (*(void (**)(void, uint64_t))(**(void **)(v4 + 120) + 176))(*(void *)(v4 + 120), 1);
    }
    else if (!v36)
    {
      (*(void (**)(void, void))(**(void **)(v4 + 120) + 176))(*(void *)(v4 + 120), 0);
      (*(void (**)(void, uint64_t))(**(void **)(v4 + 120) + 168))(*(void *)(v4 + 120), 1);
    }
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
    }
    long long v37 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_DWORD *)(v2 + 208)) {
        long long v38 = "powoffajon";
      }
      else {
        long long v38 = "ajoffpowon";
      }
      *(_DWORD *)long long v174 = 136446210;
      *(void *)&v174[4] = v38;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "@WifiLogic, decision, wifipower, %{public}s", v174, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v174, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
      }
      if (*(_DWORD *)(v2 + 208)) {
        int v103 = "powoffajon";
      }
      else {
        int v103 = "ajoffpowon";
      }
      *(_DWORD *)__n128 __p = 136446210;
      *(void *)&__p[4] = v103;
      uint64_t v104 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v104);
      if (v104 != v174) {
        free(v104);
      }
    }
  }
  if (*(unsigned char *)(v2 + 272))
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
    }
    long long v39 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v40 = *(void *)(v2 + 256);
      uint64_t v41 = *(void *)(v2 + 264);
      *(void *)long long v174 = 68289539;
      *(_WORD *)&v174[8] = 2082;
      *(void *)&v174[10] = "";
      *(_WORD *)&v174[18] = 2049;
      *(void *)&v174[20] = v40;
      *(_WORD *)&v174[28] = 2049;
      *(void *)&v174[30] = v41;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"requesting wifi tile download\", \"latitude\":\"%{private}f\", \"longitude\":\"%{private}f\"}", v174, 0x26u);
    }
    (*(void (**)(void, uint64_t, double, double))(**(void **)(v4 + 120) + 208))(*(void *)(v4 + 120), v2 + 216, *(double *)(v2 + 256), *(double *)(v2 + 264));
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
    }
    long long v42 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v43 = *(void *)(v2 + 256);
      uint64_t v44 = *(void *)(v2 + 264);
      *(_DWORD *)long long v174 = 134283777;
      *(void *)&v174[4] = v43;
      *(_WORD *)&v174[12] = 2049;
      *(void *)&v174[14] = v44;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, tiledl, %{private}.02f, %{private}.02f", v174, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v174, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
      }
      uint64_t v105 = *(void *)(v2 + 256);
      uint64_t v106 = *(void *)(v2 + 264);
      *(_DWORD *)__n128 __p = 134283777;
      *(void *)&__p[4] = v105;
      *(_WORD *)&__p[12] = 2049;
      *(void *)&__p[14] = v106;
      __int16 v107 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v107);
      if (v107 != v174) {
        free(v107);
      }
    }
  }
  if (*(unsigned char *)(v2 + 288))
  {
    double v45 = *(double *)(v2 + 280);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
    }
    long long v46 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(void *)long long v174 = 68289282;
      *(_WORD *)&v174[8] = 2082;
      *(void *)&v174[10] = "";
      *(_WORD *)&v174[18] = 2050;
      *(double *)&v174[20] = v45;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"update schedule of refresh timer\", \"delay_s\":\"%{public}.09f\"}", v174, 0x1Cu);
    }
    sub_100689730(v4, v47, v45);
    *(unsigned char *)(v4 + 152) = *(double *)(v2 + 280) == 15.0;
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
    }
    long long v48 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      int v49 = *(unsigned __int8 *)(v4 + 152);
      *(_DWORD *)long long v174 = 134349312;
      *(double *)&v174[4] = v45;
      *(_WORD *)&v174[12] = 1026;
      *(_DWORD *)&v174[14] = v49;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, timer, %{public}.1f, reIssue, %{public}d", v174, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v174, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
      }
      int v108 = *(unsigned __int8 *)(v4 + 152);
      *(_DWORD *)__n128 __p = 134349312;
      *(double *)&__p[4] = v45;
      *(_WORD *)&__p[12] = 1026;
      *(_DWORD *)&__p[14] = v108;
      __int16 v109 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v109);
      if (v109 != v174) {
        free(v109);
      }
    }
  }
  if (*(unsigned char *)(v2 + 297))
  {
    sub_100689730(v4, v5, 1.79769313e308);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
    }
    long long v50 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long v174 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, timer, cancel", v174, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v174, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
      }
      *(_WORD *)__n128 __p = 0;
      int v110 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v110);
      if (v110 != v174) {
        free(v110);
      }
    }
  }
  if (*(unsigned char *)(v2 + 312))
  {
    double v51 = *(double *)(v2 + 304);
    [*(id *)(v4 + 144) setNextFireDelay:v51];
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
    }
    long long v52 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long v174 = 134349056;
      *(double *)&v174[4] = v51;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, wsbtimer, %{public}.1f", v174, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v174, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
      }
      *(_DWORD *)__n128 __p = 134349056;
      *(double *)&__p[4] = v51;
      int v111 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v111);
      if (v111 != v174) {
        free(v111);
      }
    }
  }
  if (*(unsigned char *)(v2 + 321))
  {
    [*(id *)(v4 + 144) setNextFireDelay:1.79769313e308];
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
    }
    long long v53 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long v174 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, wsbtimer, cancel", v174, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v174, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
      }
      *(_WORD *)__n128 __p = 0;
      int v112 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v112);
      if (v112 != v174) {
        free(v112);
      }
    }
  }
  if (*(unsigned char *)(v2 + 323))
  {
    sub_1006D4120(1u);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022C1FF0);
    }
    long long v54 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v174 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "@ClxWifi, Fix, 0, ll, N/A", v174, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v174, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022C1FF0);
      }
      *(_WORD *)__n128 __p = 0;
      int v113 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v113);
      if (v113 != v174) {
        free(v113);
      }
    }
    *(unsigned char *)(v4 + 152) = 0;
    uint64_t v55 = *(void *)(v4 + 120);
    *(_DWORD *)long long v174 = 9;
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v55 + 104))(v55, v174, 1);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
    }
    uint64_t v56 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long v174 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, notifyUnavail", v174, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v174, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
      }
      *(_WORD *)__n128 __p = 0;
      uint64_t v118 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v118);
      if (v118 != v174) {
        free(v118);
      }
    }
  }
  if (*(unsigned char *)(v2 + 1128))
  {
    sub_1000DB3D4((uint64_t)__p);
    long long v57 = *(_OWORD *)(v2 + 440);
    long long v152 = *(_OWORD *)(v2 + 424);
    long long v153 = v57;
    v154[0] = *(_OWORD *)(v2 + 456);
    *(_OWORD *)((char *)v154 + 12) = *(_OWORD *)(v2 + 468);
    long long v58 = *(_OWORD *)(v2 + 376);
    *(_OWORD *)&__p[32] = *(_OWORD *)(v2 + 360);
    long long v150 = v58;
    long long v59 = *(_OWORD *)(v2 + 408);
    *(_OWORD *)uint64_t v151 = *(_OWORD *)(v2 + 392);
    *(_OWORD *)&v151[16] = v59;
    long long v60 = *(_OWORD *)(v2 + 344);
    *(_OWORD *)__n128 __p = *(_OWORD *)(v2 + 328);
    *(_OWORD *)&__p[16] = v60;
    memcpy(v155, (const void *)(v2 + 488), sizeof(v155));
    uint64_t v61 = *(void *)(v2 + 1008);
    long long v62 = *(std::__shared_weak_count **)(v2 + 1016);
    if (v62) {
      atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v156 = v61;
    long long v63 = v157;
    int v157 = v62;
    if (v63) {
      sub_1000DB0A0(v63);
    }
    long long v64 = *(_OWORD *)(v2 + 1072);
    long long v65 = *(_OWORD *)(v2 + 1104);
    long long v162 = *(_OWORD *)(v2 + 1088);
    *(_OWORD *)int v163 = v65;
    long long v66 = *(_OWORD *)(v2 + 1040);
    long long v158 = *(_OWORD *)(v2 + 1024);
    long long v159 = v66;
    long long v160 = *(_OWORD *)(v2 + 1056);
    long long v161 = v64;
    *(void *)&v163[13] = *(void *)(v2 + 1117);
    double v67 = *(double *)(v2 + 4720);
    double v68 = *(double *)(v2 + 4456);
    double v69 = *(double *)(v2 + 4472);
    double v70 = *(double *)&v151[12];
    if (qword_102419650 != -1) {
      dispatch_once(&qword_102419650, &stru_1022C20E0);
    }
    double v71 = v67 - v68;
    double v72 = v67 - v69;
    double v73 = v67 - v70;
    long long v74 = qword_102419658;
    if (os_log_type_enabled((os_log_t)qword_102419658, OS_LOG_TYPE_DEBUG))
    {
      float v75 = v71;
      float v76 = v72;
      float v77 = v73;
      *(_DWORD *)long long v174 = 136318466;
      *(void *)&v174[4] = "WiFi";
      *(_WORD *)&v174[12] = 1024;
      *(_DWORD *)&v174[14] = 1;
      *(_WORD *)&v174[18] = 2048;
      *(void *)&v174[20] = *(void *)&__p[4];
      *(_WORD *)&v174[28] = 2048;
      *(void *)&v174[30] = *(void *)&__p[12];
      *(_WORD *)&v174[38] = 2048;
      *(void *)&v174[40] = *(void *)&__p[20];
      *(_WORD *)&v174[48] = 1024;
      *(_DWORD *)&v174[50] = *(_DWORD *)&v151[20];
      *(_WORD *)int v175 = 2048;
      *(double *)&v175[2] = v75;
      __int16 v176 = 2048;
      double v177 = v76;
      __int16 v178 = 1024;
      int v179 = 0;
      __int16 v180 = 2048;
      uint64_t v181 = *(void *)&__p[28];
      __int16 v182 = 2048;
      uint64_t v183 = *(void *)&__p[36];
      __int16 v184 = 1024;
      int v185 = 0;
      __int16 v186 = 2048;
      double v187 = v77;
      __int16 v188 = 1024;
      int v189 = v154[0];
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Confidence,%d,TTF,%.3f,sinceReg,%.3f,Confirmed,%d,Altitude,%.2f,VerticalAccuracy,%.2lf,locationSimulated,%d,notifiedLocationAge,%f,integrity,%d", v174, 0x7Au);
    }
    if (sub_10013D1A0(117, 2))
    {
      bzero(v174, 0x65CuLL);
      if (qword_102419650 != -1) {
        dispatch_once(&qword_102419650, &stru_1022C20E0);
      }
      float v114 = v71;
      float v115 = v72;
      float v116 = v73;
      int v130 = 136318466;
      uint64_t v131 = (uint64_t)"WiFi";
      __int16 v132 = 1024;
      *(_DWORD *)uint64_t v133 = 1;
      *(_WORD *)&v133[4] = 2048;
      *(void *)&v133[6] = *(void *)&__p[4];
      *(_WORD *)&v133[14] = 2048;
      *(void *)&v133[16] = *(void *)&__p[12];
      *(_WORD *)&v133[24] = 2048;
      *(void *)&v133[26] = *(void *)&__p[20];
      *(_WORD *)&v133[34] = 1024;
      *(_DWORD *)&v133[36] = *(_DWORD *)&v151[20];
      *(_WORD *)__int16 v134 = 2048;
      *(double *)&v134[2] = v114;
      __int16 v135 = 2048;
      double v136 = v115;
      __int16 v137 = 1024;
      int v138 = 0;
      __int16 v139 = 2048;
      uint64_t v140 = *(void *)&__p[28];
      __int16 v141 = 2048;
      uint64_t v142 = *(void *)&__p[36];
      __int16 v143 = 1024;
      int v144 = 0;
      __int16 v145 = 2048;
      double v146 = v116;
      __int16 v147 = 1024;
      int v148 = v154[0];
      __int16 v117 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("LOCATION", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v117);
      if (v117 != v174) {
        free(v117);
      }
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022C1FF0);
    }
    long long v78 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long v174 = 134284801;
      *(void *)&v174[4] = *(void *)&__p[4];
      *(_WORD *)&v174[12] = 2049;
      *(void *)&v174[14] = *(void *)&__p[12];
      *(_WORD *)&v174[22] = 2050;
      *(void *)&v174[24] = *(void *)&__p[20];
      *(_WORD *)&v174[32] = 2049;
      *(void *)&v174[34] = *(void *)&__p[28];
      *(_WORD *)&v174[42] = 2050;
      *(void *)&v174[44] = *(void *)&__p[36];
      *(_WORD *)&v174[52] = 2050;
      *(void *)int v175 = *(void *)&v151[12];
      _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "@ClxWifi, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, course, -1.0, alt, %{private}.1f, altunc, %{public}.1f, timestamp, %{public}.3f", v174, 0x3Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v174, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022C1FF0);
      }
      int v130 = 134284801;
      uint64_t v131 = *(void *)&__p[4];
      __int16 v132 = 2049;
      *(void *)uint64_t v133 = *(void *)&__p[12];
      *(_WORD *)&v133[8] = 2050;
      *(void *)&v133[10] = *(void *)&__p[20];
      *(_WORD *)&v133[18] = 2049;
      *(void *)&v133[20] = *(void *)&__p[28];
      *(_WORD *)&v133[28] = 2050;
      *(void *)&v133[30] = *(void *)&__p[36];
      *(_WORD *)&v133[38] = 2050;
      *(void *)__int16 v134 = *(void *)&v151[12];
      __int16 v119 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v119);
      if (v119 != v174) {
        free(v119);
      }
    }
    sub_1006D4120(0);
    uint64_t v79 = *(void *)(v4 + 120);
    *(_DWORD *)long long v174 = 0;
    (*(void (**)(uint64_t, unsigned char *, unsigned char *, void, uint64_t, void))(*(void *)v79 + 112))(v79, v174, __p, 0, 0xFFFFFFFFLL, 0);
    sub_10156653C(v174);
    sub_10156667C(*(_OWORD **)v174, __p);
    if (*(void *)&v174[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&v174[8]);
    }
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
    }
    uint64_t v80 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long v174 = 0;
      _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, notifyLoc", v174, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v174, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
      }
      LOWORD(v130) = 0;
      uint64_t v120 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v120);
      if (v120 != v174) {
        free(v120);
      }
    }

    if (v167) {
      sub_1000DB0A0(v167);
    }
    if (v166 < 0) {
      operator delete(v165);
    }
    if (*((void *)&v164 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v164 + 1));
    }
    if (v157) {
      sub_1000DB0A0(v157);
    }
  }
  if (*(unsigned char *)(v2 + 1160))
  {
    if (*(void *)(v2 + 1136) == *(void *)(v2 + 1144)) {
      sub_101A69C04(qword_1024193B0 == -1);
    }
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
    }
    uint64_t v81 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v82 = 0x6F96F96F96F96F97 * ((uint64_t)(*(void *)(v2 + 1144) - *(void *)(v2 + 1136)) >> 2);
      *(_DWORD *)long long v174 = 134349056;
      *(void *)&v174[4] = v82;
      _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEBUG, "notifying clients of %{public}ld batched wifi locations", v174, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v174, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
      }
      uint64_t v121 = 0x6F96F96F96F96F97 * ((uint64_t)(*(void *)(v2 + 1144) - *(void *)(v2 + 1136)) >> 2);
      *(_DWORD *)__n128 __p = 134349056;
      *(void *)&__p[4] = v121;
      double v122 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v122);
      if (v122 != v174) {
        free(v122);
      }
    }
    sub_1000DB3D4((uint64_t)__p);
    uint64_t v83 = *(void *)(v2 + 1144);
    long long v84 = *(_OWORD *)(v83 - 140);
    *(_OWORD *)__n128 __p = *(_OWORD *)(v83 - 156);
    *(_OWORD *)&__p[16] = v84;
    long long v85 = *(_OWORD *)(v83 - 108);
    long long v86 = *(_OWORD *)(v83 - 76);
    long long v87 = *(_OWORD *)(v83 - 124);
    *(_OWORD *)uint64_t v151 = *(_OWORD *)(v83 - 92);
    *(_OWORD *)&v151[16] = v86;
    *(_OWORD *)&__p[32] = v87;
    long long v150 = v85;
    long long v88 = *(_OWORD *)(v83 - 44);
    long long v89 = *(_OWORD *)(v83 - 28);
    long long v90 = *(_OWORD *)(v83 - 60);
    *(_OWORD *)((char *)v154 + 12) = *(_OWORD *)(v83 - 16);
    long long v153 = v88;
    v154[0] = v89;
    long long v152 = v90;
    sub_10068CF68((uint64_t *)(v2 + 1136), v174);
    long long v91 = *(_OWORD *)v174;
    *(void *)long long v174 = 0;
    *(void *)&v174[8] = 0;
    uint64_t v92 = (std::__shared_weak_count *)*((void *)&v164 + 1);
    long long v164 = v91;
    if (v92)
    {
      sub_1000DB0A0(v92);
      if (*(void *)&v174[8]) {
        sub_1000DB0A0(*(std::__shared_weak_count **)&v174[8]);
      }
    }
    uint64_t v93 = *(void *)(v4 + 120);
    *(_DWORD *)long long v174 = 22;
    (*(void (**)(uint64_t, unsigned char *, unsigned char *, void, uint64_t, void))(*(void *)v93 + 112))(v93, v174, __p, 0, 0xFFFFFFFFLL, 0);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
    }
    double v94 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v95 = 0x6F96F96F96F96F97 * ((uint64_t)(*(void *)(v2 + 1144) - *(void *)(v2 + 1136)) >> 2);
      *(_DWORD *)long long v174 = 134349056;
      *(void *)&v174[4] = v95;
      _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "WsbCalc, notify, %{public}lu", v174, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v174, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
      }
      uint64_t v123 = 0x6F96F96F96F96F97 * ((uint64_t)(*(void *)(v2 + 1144) - *(void *)(v2 + 1136)) >> 2);
      int v130 = 134349056;
      uint64_t v131 = v123;
      int v124 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v124);
      if (v124 != v174) {
        free(v124);
      }
    }
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
    }
    int v96 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long v174 = 0;
      _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, notifyBatched", v174, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v174, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
      }
      LOWORD(v130) = 0;
      uint64_t v125 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v125);
      if (v125 != v174) {
        free(v125);
      }
    }

    if (v167) {
      sub_1000DB0A0(v167);
    }
    if (v166 < 0) {
      operator delete(v165);
    }
    if (*((void *)&v164 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v164 + 1));
    }
    if (v157) {
      sub_1000DB0A0(v157);
    }
  }
  return v127;
}

void sub_1000E647C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p)
{
}

void sub_1000E6574()
{
}

uint64_t sub_1000E658C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000E65E0(a1 - 352);
  if ((result & 1) == 0)
  {
    return sub_10006BD74(a1 + 256, a2);
  }
  return result;
}

uint64_t sub_1000E65E0(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 904);
  int v3 = sub_1000E67C8(a1);
  if ((v3 & 1) == 0)
  {
    sub_1001AF4C8((void *)(a1 + 608));
    if (v2)
    {
      if (!*(unsigned char *)(a1 + 440))
      {
        double v4 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
        if (v4 - sub_100939FB0(a1 + 608) >= *(double *)(a1 + 416))
        {
          sub_100D4B270(a1, 0);
          sub_100D6B950(a1);
        }
      }
    }
  }
  return v3 ^ 1u;
}

uint64_t sub_1000E6694(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 904) || sub_1000E6E34(a1 + 608)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 88)) {
    return 1;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F4580);
  }
  int v3 = qword_102419568;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v4)
  {
    sub_10012FD50(a1);
    v5[0] = 68289282;
    v5[1] = 0;
    __int16 v6 = 2082;
    uint64_t v7 = "";
    __int16 v8 = 2050;
    uint64_t v9 = sub_10012FD50(a1);
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning: Harvesting was turned off but we're still checking for active traces\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v5, 0x1Cu);
    return 0;
  }
  return result;
}

uint64_t sub_1000E67C8(uint64_t a1)
{
  if (!(*(unsigned int (**)(void))(**(void **)(a1 + 56) + 160))(*(void *)(a1 + 56))
    || !*(unsigned char *)(a1 + 88))
  {
    return 0;
  }

  return sub_1000E6694(a1);
}

uint64_t sub_1000E6840(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 80))(*(void *)(a1 + 32));
  if ((result & 1) == 0)
  {
    while (1)
    {
      id v3 = [*(id *)(a1 + 48) count];
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
      if ((unint64_t)v3 <= (int)result) {
        break;
      }
      [*(id *)(a1 + 48) removeObjectAtIndex:0];
    }
  }
  return result;
}

uint64_t sub_1000E68D8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

BOOL sub_1000E68E0(uint64_t a1, uint64_t a2)
{
  if (!sub_1000E6DB4(a2)
    || vabdd_f64((*(double (**)(void))(**(void **)(a1 + 32) + 64))(*(void *)(a1 + 32)), *(double *)(a2 + 76)) > 5.0)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022D6648);
    }
    BOOL v4 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      double v5 = vabdd_f64((*(double (**)(void))(**(void **)(a1 + 32) + 64))(*(void *)(a1 + 32)), *(double *)(a2 + 76));
      *(_DWORD *)buf = 134217984;
      *(double *)float v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "invalid/stale location (age %.3fs) - ignoring", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022D6648);
    }
    vabdd_f64((*(double (**)(void))(**(void **)(a1 + 32) + 64))(*(void *)(a1 + 32)), *(double *)(a2 + 76));
LABEL_30:
    long long v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLMonitorGps::isGpsHarvestingEligible(const CLDaemonLocation &) const", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
    return 0;
  }
  if (*(int *)(a1 + 72) > 4)
  {
    if (*(int *)(a1 + 88) < 181 || *(unsigned char *)(a1 + 64)) {
      return 1;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022D6648);
    }
    uint64_t v9 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      int v10 = *(_DWORD *)(a1 + 88);
      uint64_t v11 = *(void *)(a1 + 96);
      uint64_t v12 = *(void *)(a1 + 104);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)float v15 = v10;
      *(_WORD *)&v15[4] = 2048;
      *(void *)&v15[6] = v11;
      __int16 v16 = 2048;
      uint64_t v17 = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%d consecutive clamps at <%+.8f,%+.8f> - not harvesting", buf, 0x1Cu);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 == -1) {
        goto LABEL_30;
      }
LABEL_33:
      dispatch_once(&qword_102419560, &stru_1022D6648);
      goto LABEL_30;
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022D6648);
    }
    uint64_t v7 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      int v8 = *(_DWORD *)(a1 + 72);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)float v15 = v8;
      *(_WORD *)&v15[4] = 1024;
      *(_DWORD *)&v15[6] = 5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "not harvesting yet; GPS warming count is %d < %d",
        buf,
        0xEu);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 == -1) {
        goto LABEL_30;
      }
      goto LABEL_33;
    }
  }
  return result;
}

uint64_t sub_1000E6DB4(uint64_t a1)
{
  uint64_t result = 0;
  if (*(double *)(a1 + 20) > 0.0)
  {
    double v3 = *(double *)(a1 + 4);
    if (v3 <= 90.0 && v3 >= -90.0)
    {
      double v4 = *(double *)(a1 + 12);
      if (v4 <= 180.0 && v4 >= -180.0)
      {
        BOOL v5 = fabs(v3) >= 0.0000001;
        return fabs(v4) >= 0.0000001 || v5;
      }
    }
  }
  return result;
}

BOOL sub_1000E6E34(uint64_t a1)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 32) + 80))(*(void *)(a1 + 32))) {
    return 0;
  }
  double v3 = (*(double (**)(void))(**(void **)a1 + 64))() - *(double *)(a1 + 56);
  return v3 > (*(double (**)(void))(**(void **)(a1 + 32) + 64))(*(void *)(a1 + 32));
}

uint64_t sub_1000E6EF0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t sub_1000E6EFC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 24))();
}

double sub_1000E6F24(uint64_t a1)
{
  return *(double *)(a1 + 40);
}

uint64_t sub_1000E6F34(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1000E6F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1000E6F60(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    IOHIDEventGetVendorDefinedData();
    if (qword_1024192E0 != -1) {
      dispatch_once(&qword_1024192E0, &stru_102311AD8);
    }
    int v2 = qword_1024192E8;
    if (os_log_type_enabled((os_log_t)qword_1024192E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Empty payload, returning", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192E0 != -1) {
        dispatch_once(&qword_1024192E0, &stru_102311AD8);
      }
      double v3 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPUInertialOdometryInterface::onIoHidEvent(IOHIDEventRef)", "%s\n");
LABEL_18:
      if (v3 != buf) {
        free(v3);
      }
    }
  }
  else
  {
    if (qword_1024192E0 != -1) {
      dispatch_once(&qword_1024192E0, &stru_102311AD8);
    }
    double v4 = qword_1024192E8;
    if (os_log_type_enabled((os_log_t)qword_1024192E8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Event ref invalid", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192E0 != -1) {
        dispatch_once(&qword_1024192E0, &stru_102311AD8);
      }
      double v3 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLSPUInertialOdometryInterface::onIoHidEvent(IOHIDEventRef)", "%s\n");
      goto LABEL_18;
    }
  }
}

void sub_1000E724C(uint64_t a1, unsigned __int8 *a2, size_t a3, double a4)
{
  *(double *)(a1 + 24) = a4;
  sub_1000E7B40(__dst, a2, a3);
  if (a3) {
    int v7 = *a2;
  }
  else {
    int v7 = 0;
  }
  if (qword_1024192E0 != -1) {
    dispatch_once(&qword_1024192E0, &stru_102311AD8);
  }
  int v8 = qword_1024192E8;
  if (os_log_type_enabled((os_log_t)qword_1024192E8, OS_LOG_TYPE_DEBUG))
  {
    int buf = 67240448;
    int v19 = v7;
    __int16 v20 = 2050;
    size_t v21 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "type,%{public}d,size,%{public}lu", (uint8_t *)&buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024192E0 != -1) {
      dispatch_once(&qword_1024192E0, &stru_102311AD8);
    }
    int v14 = 67240448;
    int v15 = v7;
    __int16 v16 = 2050;
    size_t v17 = a3;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPUInertialOdometryInterface::visitIoHidEvent(const uint8_t *, size_t, const CFTimeInterval)", "%s\n", v11);
    if (v11 != (char *)&buf) {
      free(v11);
    }
  }
  if (v7 == 255)
  {
    if (qword_1024192E0 != -1) {
      dispatch_once(&qword_1024192E0, &stru_102311AD8);
    }
    uint64_t v9 = qword_1024192E8;
    if (os_log_type_enabled((os_log_t)qword_1024192E8, OS_LOG_TYPE_FAULT))
    {
      int buf = 67240448;
      int v19 = 255;
      __int16 v20 = 2050;
      size_t v21 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Bad report,type,%{public}d,size,%{public}lu", (uint8_t *)&buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024192E0 != -1) {
        dispatch_once(&qword_1024192E0, &stru_102311AD8);
      }
      int v14 = 67240448;
      int v15 = 255;
      __int16 v16 = 2050;
      size_t v17 = a3;
LABEL_32:
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLSPUInertialOdometryInterface::visitIoHidEvent(const uint8_t *, size_t, const CFTimeInterval)", "%s\n", v12);
      if (v12 != (char *)&buf) {
        free(v12);
      }
    }
  }
  else if ((sub_1000E76A4(__dst, a1) & 1) == 0)
  {
    if (qword_1024192E0 != -1) {
      dispatch_once(&qword_1024192E0, &stru_102311AD8);
    }
    int v10 = qword_1024192E8;
    if (os_log_type_enabled((os_log_t)qword_1024192E8, OS_LOG_TYPE_FAULT))
    {
      int buf = 67240192;
      int v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "CMInertialOdometryReport::visit() type %{public}d failed.", (uint8_t *)&buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024192E0 != -1) {
        dispatch_once(&qword_1024192E0, &stru_102311AD8);
      }
      int v14 = 67240192;
      int v15 = v7;
      goto LABEL_32;
    }
  }
}

uint64_t sub_1000E76A4(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = *a1;
  switch(v2)
  {
    case 255:
      return 0;
    case 2:
      (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)a2 + 24))(a2, a1);
      break;
    case 1:
      (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)a2 + 16))(a2, a1);
      break;
  }
  return 1;
}

uint64_t sub_1000E7740(uint64_t a1, uint64_t a2)
{
  return sub_1000E7748(a1 - 32, a2);
}

uint64_t sub_1000E7748(uint64_t a1, uint64_t a2)
{
  if (qword_1024192E0 != -1) {
    dispatch_once(&qword_1024192E0, &stru_1023066D0);
  }
  double v4 = qword_1024192E8;
  if (os_log_type_enabled((os_log_t)qword_1024192E8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a2 + 1);
    uint64_t v6 = *(void *)(a1 + 56);
    double v7 = sub_1000D3E50();
    double v8 = *(float *)(a2 + 9);
    double v9 = *(float *)(a2 + 13);
    double v10 = *(float *)(a2 + 17);
    double v11 = *(float *)(a2 + 21);
    double v12 = *(float *)(a2 + 25);
    double v13 = *(float *)(a2 + 29);
    uint64_t v14 = *(void *)(a2 + 33);
    uint64_t v15 = *(void *)(a2 + 41);
    uint64_t v16 = *(void *)(a2 + 49);
    uint64_t v17 = *(void *)(a2 + 57);
    uint64_t v18 = *(void *)(a2 + 65);
    uint64_t v19 = *(void *)(a2 + 73);
    int v20 = *(unsigned __int8 *)(a2 + 101);
    *(_DWORD *)int buf = 134352896;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(void *)&unsigned char buf[14] = v6;
    *(_WORD *)&unsigned char buf[22] = 2050;
    *(double *)&unsigned char buf[24] = v7;
    *(_WORD *)int v25 = 2050;
    *(double *)&v25[2] = v8;
    *(_WORD *)&v25[10] = 2050;
    *(double *)&v25[12] = v9;
    *(_WORD *)&v25[20] = 2050;
    *(double *)&v25[22] = v10;
    *(_WORD *)&v25[30] = 2050;
    *(double *)&v25[32] = v11;
    *(_WORD *)char v26 = 2050;
    *(double *)&uint64_t v26[2] = v12;
    *(_WORD *)&v26[10] = 2050;
    *(double *)&v26[12] = v13;
    *(_WORD *)&v26[20] = 2050;
    *(void *)&v26[22] = v14;
    *(_WORD *)&v26[30] = 2050;
    uint64_t v27 = v15;
    __int16 v28 = 2050;
    uint64_t v29 = v16;
    __int16 v30 = 2050;
    uint64_t v31 = v17;
    __int16 v32 = 2050;
    uint64_t v33 = v18;
    __int16 v34 = 2050;
    uint64_t v35 = v19;
    __int16 v36 = 1026;
    int v37 = v20;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Report,aopTimestamp,%{public}llu,reportTimestamp,%{public}f,machTimeNow,%{public}f,posX,%{public}f,posY,%{public}f,posZ,%{public}f,dvCumsumX,%{public}f,dvCumsumY,%{public}f,dvCumsumZ,%{public}f,tsPosRollover,%{public}llu,tsVelRollover,%{public}llu,tsDeltaPosXUnavailable,%{public}llu,tsDeltaPosYUnavailable,%{public}llu,tsDeltaPosZUnavailable,%{public}llu,tsDMReinit,%{public}llu,displacingState,%{public}u", buf, 0x9Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192E0 != -1) {
      dispatch_once(&qword_1024192E0, &stru_1023066D0);
    }
    sub_1000D3E50();
    char v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLInertialOdometryNotifier::visitInertialOdometry(const CMInertialOdometryReport::InertialOdometry *)", "%s\n", v23);
    if (v23 != buf) {
      free(v23);
    }
  }
  *(void *)int buf = *(void *)(a1 + 56);
  *(void *)&uint8_t buf[8] = *(void *)(a2 + 1);
  *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)(a2 + 9);
  *(void *)int v25 = *(void *)(a2 + 25);
  *(_OWORD *)&v25[8] = *(_OWORD *)(a2 + 33);
  *(_OWORD *)&v25[24] = *(_OWORD *)(a2 + 49);
  *(_OWORD *)char v26 = *(_OWORD *)(a2 + 65);
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 81);
  float v21 = *(float *)(a2 + 97) - *(double *)(*(void *)(a1 + 72) + 8);
  *(float *)&uint64_t v27 = v21;
  BYTE4(v27) = *(unsigned char *)(a2 + 101);
  return sub_1000E7BA0(a1, 0, (uint64_t)buf, 112);
}

unsigned char *sub_1000E7B40(unsigned char *__dst, unsigned __int8 *a2, size_t a3)
{
  if (!a3) {
    goto LABEL_8;
  }
  int v4 = *a2;
  uint64_t v5 = 102;
  if (v4 != 2) {
    uint64_t v5 = 0;
  }
  BOOL v6 = v4 == 1;
  uint64_t v7 = 8;
  if (!v6) {
    uint64_t v7 = v5;
  }
  if (v7 == a3) {
    memcpy(__dst, a2, a3);
  }
  else {
LABEL_8:
  }
    *long long __dst = -1;
  return __dst;
}

uint64_t sub_1000E7BA0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *(void *)(result + 16);
  int v9 = a2;
  uint64_t v10 = v8 + 80 * (int)a2;
  double v11 = *(void **)(v10 + 32);
  if (v11 != (void *)(v10 + 40))
  {
    do
    {
      int v12 = *((_DWORD *)v11 + 10);
      if (!v12)
      {
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)v11[4] + 16))(v11[4], a2, a3, a4);
        int v12 = *((_DWORD *)v11 + 10);
      }
      *((_DWORD *)v11 + 10) = (v12 + 1) % *((_DWORD *)v11 + 11);
      double v13 = (void *)v11[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          double v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)v11[2];
          BOOL v15 = *v14 == (void)v11;
          double v11 = v14;
        }
        while (!v15);
      }
      uint64_t v8 = *(void *)(v7 + 16);
      double v11 = v14;
    }
    while (v14 != (void *)(v8 + 80 * v9 + 40));
  }
  uint64_t v16 = v8 + 80 * v9;
  uint64_t v17 = *(void *)(v16 + 64);
  if (v17 != v16 + 56)
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v17 + 16) + 16))(*(void *)(v17 + 16), a2, a3, a4);
      uint64_t v17 = *(void *)(v17 + 8);
    }
    while (v17 != *(void *)(v7 + 16) + 80 * v9 + 56);
  }
  return result;
}

id sub_1000E7D08(void *a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x70) {
    size_t v8 = 112;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(__dst, __src, v8);
  if (a4 >= 0x71)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10230B258);
    }
    int v9 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315906;
      unint64_t v35 = 0x8000000101D9CF0ALL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v36 = 2048;
      uint64_t v37 = 112;
      __int16 v38 = 2048;
      unint64_t v39 = a4;
      __int16 v40 = 1024;
      int v41 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10230B258);
      }
      int v26 = 136315906;
      unint64_t v27 = 0x8000000101D9CF0ALL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v28 = 2048;
      uint64_t v29 = 112;
      __int16 v30 = 2048;
      unint64_t v31 = a4;
      __int16 v32 = 1024;
      int v33 = a2;
      BOOL v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLInertialOdometryNotifier::InertialOdometryData>::dispatchData(int, const void *, size_t) [T = CLInertialOdometryNotifier::InertialOdometryData]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  double v13 = (void *)a1[4];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  _OWORD v16[2] = sub_10017722C;
  v16[3] = &unk_1022CEF10;
  v16[4] = v12;
  v16[5] = v11;
  long long v21 = __dst[4];
  long long v22 = __dst[5];
  long long v23 = __dst[6];
  long long v17 = __dst[0];
  long long v18 = __dst[1];
  long long v20 = __dst[3];
  long long v19 = __dst[2];
  uint64_t v24 = v10;
  return [v13 async:v16];
}

id sub_1000E7FE8(uint64_t a1, int a2, void *a3)
{
  id result = sub_1000EBC34(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1000E8038(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102319290);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    size_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationSubscription::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102319290);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      BOOL v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationSubscription::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1000E8448(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1000E81F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000E8448(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  sub_1000E9354(v25);
  uint64_t v7 = *(unsigned int *)a3;
  if (v7 > 0x27) {
    return sub_10013F3C4(v25);
  }
  if (((1 << v7) & 0x800040003FLL) != 0)
  {
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    void v24[2] = sub_1000E9368;
    v24[3] = &unk_1022ACDD8;
    v24[4] = a1;
    sub_1000E95F8(a1, (_OWORD *)a4, (uint64_t)v24);
    if (*(unsigned char *)(a1 + 312))
    {
      size_t v8 = *(int **)(a4 + 800);
      if (v8)
      {
        for (unint64_t i = 0; i < sub_1010FB9FC(v8); ++i)
        {
          sub_1010FB258(*(void *)(a4 + 800), i, (uint64_t)buf);
          sub_1001298B4(a1, (uint64_t)buf);
          size_t v8 = *(int **)(a4 + 800);
        }
      }
      else
      {
        sub_1001298B4(a1, a4);
      }
      v29[0] = @"ClientKey";
      uint64_t v10 = (void *)(a1 + 328);
      if (*(char *)(a1 + 351) < 0) {
        uint64_t v10 = (void *)*v10;
      }
      v30[0] = +[NSString stringWithUTF8String:v10];
      v29[1] = @"DeliveredLocationCount";
      v30[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 436)];
      v29[2] = @"DesiredHAccuracy";
      _OWORD v30[2] = +[NSNumber numberWithDouble:*(double *)(a1 + 384)];
      v29[3] = @"ReportedHAccuracy";
      v30[3] = +[NSNumber numberWithDouble:*(double *)(a4 + 20)];
      v29[4] = @"CorrectiveCompensation";
      v30[4] = +[NSNumber numberWithBool:sub_100138A70(a1, 12) ^ 1];
      +[NSDictionary dictionaryWithObjects:v30 forKeys:v29 count:5];
      AnalyticsSendEvent();
      double Current = CFAbsoluteTimeGetCurrent();
      double v12 = *(double *)(a4 + 76);
      if (vabdd_f64(Current, v12) < 3.0)
      {
        double v13 = v12 - *(double *)(a1 + 320);
        if (v13 < 0.0) {
          double v13 = 0.0;
        }
        if (*(double *)(a1 + 408) < 0.0) {
          *(double *)(a1 + 408) = v13;
        }
        if (*(double *)(a1 + 416) < 0.0 && *(_DWORD *)(a4 + 96) == 1) {
          *(double *)(a1 + 416) = v13;
        }
        double v14 = *(double *)(a1 + 400);
        double v15 = *(double *)(a4 + 20);
        if (v14 < 0.0 || v15 >= 0.0 && v15 < v14) {
          *(double *)(a1 + 400) = v15;
        }
        double v16 = *(double *)(a4 + 44);
        if (*(double *)(a1 + 424) < v16) {
          *(double *)(a1 + 424) = v16;
        }
      }
    }
    return sub_10013F3C4(v25);
  }
  if (v7 != 9)
  {
    if (((1 << v7) & 0xC10000000) == 0) {
      return sub_10013F3C4(v25);
    }
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    a1 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      int v22 = *(_DWORD *)a3;
      *(_DWORD *)int buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)a1, OS_LOG_TYPE_DEFAULT, "Wiring bug: %{public}d should not notify", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      int v23 = *(_DWORD *)a3;
      int v26 = 67240192;
      int v27 = v23;
      a1 = _os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", (const char *)a1);
      if ((uint8_t *)a1 != buf) {
        free((void *)a1);
      }
    }
    abort_report_np();
    __break(1u);
LABEL_53:
    dispatch_once(&qword_102419520, &stru_1023192B0);
    goto LABEL_41;
  }
  a3 = &qword_102419000;
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023192B0);
  }
  long long v17 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "notifying clients of unavailable location", buf, 2u);
  }
  if (!sub_10013D1A0(115, 2)) {
    goto LABEL_31;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102419520 != -1) {
    goto LABEL_53;
  }
LABEL_41:
  LOWORD(v26) = 0;
  long long v20 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v20);
  if (v20 != (char *)buf) {
    free(v20);
  }
LABEL_31:
  *(void *)int buf = sub_1000E9358((uint64_t)v25);
  sub_10122DE20(a1);
  if (*(unsigned char *)(a1 + 241))
  {
    if (a3[164] != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    __int16 v18 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "BATCH: location unavailable caused batch failure", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (a3[164] != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      LOWORD(v26) = 0;
      long long v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    sub_10122C1BC(a1, 11);
  }
  return sub_10013F3C4(v25);
}

void sub_1000E8B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E8B44(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1000E9354(v31);
  if (sub_1000E9370(v2))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    double v3 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(v2 + 24);
      uint64_t v5 = sub_1000E9360(v2);
      uint64_t v6 = *(void *)(v2 + 304);
      *(_DWORD *)int buf = 68290307;
      *(_DWORD *)unint64_t v35 = 0;
      *(_WORD *)&v35[4] = 2082;
      *(void *)&v35[6] = "";
      __int16 v36 = 2114;
      uint64_t v37 = v4;
      __int16 v38 = 2050;
      uint64_t v39 = v5;
      __int16 v40 = 1040;
      *(_DWORD *)int v41 = 156;
      *(_WORD *)&v41[4] = 2097;
      *(void *)&v41[6] = a1 + 40;
      *(_WORD *)&v41[14] = 2050;
      *(void *)&v41[16] = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Sending location to client\", \"Client\":%{public, location:escape_only}@, \"DC\":\"%{public}p\", \"location\":%{private, location:CLClientLocation}.*P, \"desiredAccuracy\":\"%{public}f\"}", buf, 0x40u);
    }
    if (objc_msgSend(objc_msgSend(*(id *)(v2 + 24), "clientAnchor"), "isEqualToString:", @"/System/Library/PrivateFrameworks/IPTelephony.framework"))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102319310);
      }
      uint64_t v7 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = *(void *)(a1 + 44);
        uint64_t v9 = *(void *)(a1 + 52);
        uint64_t v10 = *(void *)(a1 + 68);
        uint64_t v11 = *(void *)(a1 + 60);
        *(_DWORD *)int buf = 68290051;
        *(_DWORD *)unint64_t v35 = 0;
        *(_WORD *)&v35[4] = 2082;
        *(void *)&v35[6] = "";
        __int16 v36 = 2049;
        uint64_t v37 = v8;
        __int16 v38 = 2049;
        uint64_t v39 = v9;
        __int16 v40 = 2049;
        *(void *)int v41 = v10;
        *(_WORD *)&v41[8] = 2049;
        *(void *)&v41[10] = v11;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#awd #thumper Caching location \", \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"alt\":\"%{private}f\", \"accuracy\":\"%{private}f\"}", buf, 0x3Au);
      }
      id v12 = [[[*(id *)(v2 + 8) vendor] proxyForService:@"CLGnssProvider"];
      long long v13 = *(_OWORD *)(a1 + 152);
      v29[6] = *(_OWORD *)(a1 + 136);
      v29[7] = v13;
      v30[0] = *(_OWORD *)(a1 + 168);
      *(_OWORD *)((char *)v30 + 12) = *(_OWORD *)(a1 + 180);
      long long v14 = *(_OWORD *)(a1 + 88);
      v29[2] = *(_OWORD *)(a1 + 72);
      v29[3] = v14;
      long long v15 = *(_OWORD *)(a1 + 120);
      v29[4] = *(_OWORD *)(a1 + 104);
      void v29[5] = v15;
      long long v16 = *(_OWORD *)(a1 + 56);
      v29[0] = *(_OWORD *)(a1 + 40);
      v29[1] = v16;
      [v12 cacheEmergencyAWDStatistics:v29];
    }
    long long v17 = (void *)sub_1000E9358((uint64_t)v31);
    if (objc_msgSend(objc_msgSend(v17, "allKeys"), "containsObject:", @"CoarseMetaData"))
    {
      id v18 = [v17 valueForKey:@"CoarseMetaData"];
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      uint64_t v19 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
      {
        id v20 = [v18 length];
        *(_DWORD *)int buf = 134217984;
        *(void *)unint64_t v35 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CoarseMetaData found in nvp. Encoded data size : %lu", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1023192B0);
        }
        id v25 = [v18 length];
        int v32 = 134217984;
        id v33 = v25;
        int v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::deliverLocationToClient(const CLLocationProvider_Type::NotificationData &)_block_invoke", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
    }
    if (*(_DWORD *)(a1 + 136) == 12) {
      sub_10122DBD4(v2);
    }
    else {
      sub_1000E9398(v2);
    }
    double v21 = *(double *)(a1 + 200);
    if (v21 >= 0.0)
    {
      *(double *)(v2 + 248) = v21;
      *(void *)(v2 + 256) = *(void *)(a1 + 116);
    }
    if (*(unsigned char *)(v2 + 241)
      && (*(double *)(a1 + 116) > *(double *)(v2 + 272) || *(double *)(v2 + 248) > *(double *)(v2 + 264)))
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      int v22 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v23 = *(void *)(v2 + 24);
        *(_DWORD *)int buf = 138412290;
        *(void *)unint64_t v35 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "BATCH: successfully ended for %@", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1023192B0);
        }
        int v27 = *(void **)(v2 + 24);
        int v32 = 138412290;
        id v33 = v27;
        __int16 v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::deliverLocationToClient(const CLLocationProvider_Type::NotificationData &)_block_invoke", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      sub_10122BF58(v2);
      sub_10122C1BC(v2, 0xFFFFFFFFLL);
    }
  }
  return sub_10013F3C4(v31);
}

void sub_1000E9134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void *sub_1000E9174(void *a1)
{
  *a1 = off_1022B6710;
  a1[1] = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  a1[1] = Mutable;
  if (!Mutable)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    double v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "could not create new mutable dictionary", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLNameValuePair::CLNameValuePair()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return a1;
}

uint64_t sub_1000E9358(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1000E9360(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_1000E9368(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000E9370(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 56))();
}

void sub_1000E9398(uint64_t a1)
{
  sub_1000E9420(off_1023194D0, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1000E9404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000E9420@<X0>(char **a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  id result = sub_1000E9484(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1000E9470(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000E9484(void *a1, char **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B2330;
  sub_1000E94F8((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1000E94E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000E94F8(uint64_t a1, uint64_t a2, char **a3)
{
  sub_100134750(&__p, *a3);
  CLConnectionMessage::CLConnectionMessage();
  if (v4 < 0) {
    operator delete(__p);
  }
}

void sub_1000E9550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000E956C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  double v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_1000E95E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000E95F8(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  unsigned __int8 v6 = [[*(id *)(a1 + 176) objectForKeyedSubscript:@"kCLConnectionMessageDynamicAccuracyReductionKey"] BOOLValue];
  if [*(id *)(a1 + 16) isAuthorizedForServiceType:12] && (v6)
  {
    uint64_t v7 = *(void *)(a1 + 528);
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 536);
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_1000DB0A0(v8);
    }
    sub_1000EF97C((uint64_t)v28, (uint64_t)a2);
    uint64_t v9 = (void *)sub_1001A0484(a1);
    id v10 = objc_alloc((Class)CLLocation);
    long long v11 = a2[7];
    v26[6] = a2[6];
    v26[7] = v11;
    v27[0] = a2[8];
    *(_OWORD *)((char *)v27 + 12) = *(_OWORD *)((char *)a2 + 140);
    long long v12 = a2[3];
    uint64_t v26[2] = a2[2];
    v26[3] = v12;
    long long v13 = a2[5];
    v26[4] = a2[4];
    v26[5] = v13;
    long long v14 = a2[1];
    v26[0] = *a2;
    v26[1] = v14;
    id v15 = [v10 initWithClientLocation:v26];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3321888768;
    v17[2] = sub_10122D8C4;
    v17[3] = &unk_1023191A0;
    v17[5] = v7;
    id v18 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1000EF97C((uint64_t)&v19, (uint64_t)v28);
    v17[4] = a3;
    [v9 reduceAccuracy:v15 withReply:v17];

    if (v24) {
      sub_1000DB0A0(v24);
    }
    if (v23 < 0) {
      operator delete(__p);
    }
    if (v21) {
      sub_1000DB0A0(v21);
    }
    if (v20) {
      sub_1000DB0A0(v20);
    }
    if (v18) {
      std::__shared_weak_count::__release_weak(v18);
    }

    if (v33) {
      sub_1000DB0A0(v33);
    }
    if (v32 < 0) {
      operator delete(v31);
    }
    if (v30) {
      sub_1000DB0A0(v30);
    }
    if (v29) {
      sub_1000DB0A0(v29);
    }
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    long long v16 = *(void (**)(uint64_t, _OWORD *))(a3 + 16);
    v16(a3, a2);
  }
}

void sub_1000E9850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  sub_100458658(v16);
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  sub_100458658((uint64_t)&STACK[0x6D8]);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000E98AC(unsigned char *a1, UInt8 *a2, uint64_t a3)
{
  v7[0] = sub_1000E98F0(a1);
  v7[1] = v5;
  return sub_1000E9B98(a2, a3, (uint64_t)v7);
}

unint64_t sub_1000E98F0(unsigned char *a1)
{
  uint64_t v2 = sub_1000E9974((uint64_t)a1);
  if (v2)
  {
    double v3 = v2;
    unsigned int v4 = sub_1000E9B64((uint64_t)v2);
    int v5 = *((unsigned __int8 *)v3 + 194) << 8;
    unint64_t v6 = v4;
  }
  else
  {
    int v5 = 0;
    unint64_t v6 = 0;
  }
  if (a1[277] || a1[278] || a1[279]) {
    int v7 = 0x10000;
  }
  else {
    int v7 = a1[280] << 16;
  }
  return (v7 | v5) & 0xFFFF00 | v6;
}

void *sub_1000E9974(uint64_t a1)
{
  id result = sub_1000E9A00((void *)(a1 + 288), (uint64_t *)&v5);
  if (result)
  {
    uint64_t v2 = (const void *)result[3];
    if (v2)
    {
      if (result) {
        return result;
      }
    }
    else
    {
      id result = (void *)sub_101A86F60();
    }
    double v3 = (void *)sub_101A870C4(result);
    return sub_1000E9A00(v3, v4);
  }
  return result;
}

void *sub_1000E9A00(void *a1, uint64_t *a2)
{
  unint64_t v3 = *(void *)(*a2 + 8);
  if ((v3 & 0x8000000000000000) != 0)
  {
    unsigned int v4 = (unsigned __int8 *)(v3 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v5 = 5381;
    do
    {
      unint64_t v3 = v5;
      unsigned int v6 = *v4++;
      uint64_t v5 = (33 * v5) ^ v6;
    }
    while (v6);
  }
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v3;
    if (v3 >= *(void *)&v7) {
      unint64_t v10 = v3 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v3;
  }
  long long v11 = *(void **)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  long long v12 = (void *)*v11;
  if (*v11)
  {
    do
    {
      unint64_t v13 = v12[1];
      if (v3 == v13)
      {
        if (sub_1000E9B14(v12[2], *a2)) {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v13 >= *(void *)&v7) {
            v13 %= *(void *)&v7;
          }
        }
        else
        {
          v13 &= *(void *)&v7 - 1;
        }
        if (v13 != v10) {
          return 0;
        }
      }
      long long v12 = (void *)*v12;
    }
    while (v12);
  }
  return v12;
}

BOOL sub_1000E9B14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

id sub_1000E9B64(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 176) objectForKeyedSubscript:@"kCLConnectionMessageAlteredAccessoryLocationsKey"];

  return [v1 BOOLValue];
}

uint64_t sub_1000E9B98(UInt8 *bytes, uint64_t a2, uint64_t a3)
{
  BOOL v6 = 0;
  unsigned int v33 = 0;
  UInt8 v32 = 1;
  if (!*(unsigned char *)a3) {
    BOOL v6 = *((_DWORD *)bytes + 24) == 3 && *((_DWORD *)bytes + 33) == 2;
  }
  uint64_t v8 = *((void *)bytes + 100);
  if (v8 && (*(double *)(sub_1002D4CD0(v8) + 76) < *(double *)(a3 + 8) ? (int v9 = 1) : (int v9 = v6), v9 != 1))
  {
    if (*(unsigned char *)(a3 + 3)) {
      int v20 = 1;
    }
    else {
      int v20 = sub_1010FB9FC(*((int **)bytes + 100));
    }
    unsigned int v33 = v20;
    uint64_t v24 = (const UInt8 *)sub_1002D4CD0(*((void *)bytes + 100));
    CFDataRef v18 = CFDataCreate(kCFAllocatorDefault, v24, 156 * v20);
    UInt8 v32 = *(unsigned char *)(sub_1000E9360(*((void *)bytes + 100)) + 52);
    if (!*(unsigned char *)(a3 + 2))
    {
      CFDataRef v19 = 0;
      if (!v18) {
        goto LABEL_49;
      }
      goto LABEL_38;
    }
    id v25 = (const UInt8 *)sub_1000E9360(*((void *)bytes + 100));
    CFDataRef v19 = CFDataCreate(kCFAllocatorDefault, v25, 560 * v20);
  }
  else
  {
    long long v10 = *((_OWORD *)bytes + 7);
    v30[6] = *((_OWORD *)bytes + 6);
    v30[7] = v10;
    v31[0] = *((_OWORD *)bytes + 8);
    *(_OWORD *)((char *)v31 + 12) = *(_OWORD *)(bytes + 140);
    long long v11 = *((_OWORD *)bytes + 3);
    _OWORD v30[2] = *((_OWORD *)bytes + 2);
    v30[3] = v11;
    long long v12 = *((_OWORD *)bytes + 5);
    v30[4] = *((_OWORD *)bytes + 4);
    void v30[5] = v12;
    long long v13 = *((_OWORD *)bytes + 1);
    v30[0] = *(_OWORD *)bytes;
    v30[1] = v13;
    if (v6)
    {
      uint64_t result = sub_1015515A8((uint64_t)v30, (uint64_t)(bytes + 160));
      if (!result) {
        return result;
      }
      CFAllocatorRef v15 = kCFAllocatorDefault;
      uint64_t v16 = (const UInt8 *)v30;
      CFAllocatorRef v17 = kCFAllocatorDefault;
    }
    else
    {
      CFAllocatorRef v15 = kCFAllocatorDefault;
      CFAllocatorRef v17 = kCFAllocatorDefault;
      uint64_t v16 = bytes;
    }
    CFDataRef v18 = CFDataCreate(v17, v16, 156);
    unsigned int v33 = 1;
    UInt8 v32 = bytes[212];
    if (*(unsigned char *)(a3 + 2))
    {
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      *(_OWORD *)bytesa = 0u;
      long long v35 = 0u;
      sub_100BCE8BC(bytesa, bytes + 160);
      CFDataRef v19 = CFDataCreate(v15, bytesa, 560);
    }
    else
    {
      CFDataRef v19 = 0;
    }
    uint64_t v21 = *((void *)bytes + 165);
    if (v21 && (sub_1000EA8A4(a2, "CoarseMetaData", v21) & 1) == 0)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D258);
      }
      int v22 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)bytesa = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "Failed to convert Coarse MetaData to nvp", bytesa, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(bytesa, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10232D258);
        }
        char v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "int CLLocationProvider_Type::locationDataToNvpWithOptions(const CLLocationProvider_Type::NotificationData &, CLNameValuePair &, const CLLocationProvider_Type::LocationDataSerializationOptions &)", "%s\n", v23);
        if (v23 != (char *)bytesa)
        {
          free(v23);
          if (!v18) {
            goto LABEL_49;
          }
LABEL_38:
          if (!sub_1000EA8A4(a2, "Locations", (uint64_t)v18)
            || !sub_1000EA838(a2, "LocationCount", &v33)
            || !sub_1000EA238(a2, "ForceMapMatching", (unsigned char *)(a3 + 1))
            || !sub_1000EA238(a2, "IsFitnessMatch", &v32))
          {
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_10232D258);
            }
            int v26 = qword_102419638;
            if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)bytesa = 0;
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "Failed to convert location to nvp", bytesa, 2u);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(bytesa, 0x65CuLL);
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_10232D258);
              }
              LOWORD(v30[0]) = 0;
              __int16 v28 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "int CLLocationProvider_Type::locationDataToNvpWithOptions(const CLLocationProvider_Type::NotificationData &, CLNameValuePair &, const CLLocationProvider_Type::LocationDataSerializationOptions &)", "%s\n", v28);
              if (v28 != (char *)bytesa) {
                free(v28);
              }
            }
            unsigned int v33 = 0;
          }
          CFRelease(v18);
          goto LABEL_49;
        }
      }
    }
  }
  if (v18) {
    goto LABEL_38;
  }
LABEL_49:
  if (v19)
  {
    if ((sub_1000EA8A4(a2, "LocationsPrivate", (uint64_t)v19) & 1) == 0)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232D258);
      }
      int v27 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)bytesa = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "Failed to convert location private to nvp", bytesa, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(bytesa, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10232D258);
        }
        LOWORD(v30[0]) = 0;
        uint64_t v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "int CLLocationProvider_Type::locationDataToNvpWithOptions(const CLLocationProvider_Type::NotificationData &, CLNameValuePair &, const CLLocationProvider_Type::LocationDataSerializationOptions &)", "%s\n", v29);
        if (v29 != (char *)bytesa) {
          free(v29);
        }
      }
    }
    CFRelease(v19);
  }
  return v33;
}

BOOL sub_1000EA238(uint64_t a1, const char *a2, unsigned char *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  BOOL v6 = sub_1000EA52C(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1000EA2A4(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    BOOL v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1000FECE0(a2, (uint64_t)__p);
      int8x8_t v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      sub_1000FECE0(a2, (uint64_t)buf);
      if (v12 >= 0) {
        int v9 = buf;
      }
      else {
        int v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      long long v14 = v9;
      long long v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const int &)", "%s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_1000EA52C(uint64_t a1, const __CFString *a2, unsigned char *a3)
{
  CFNumberRef v5 = (CFTypeRef *)&kCFBooleanTrue;
  if (!*a3) {
    CFNumberRef v5 = (CFTypeRef *)&kCFBooleanFalse;
  }
  CFTypeRef v6 = *v5;
  CFRetain(*v5);
  if (v6)
  {
    (*(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(void *)a1 + 896))(a1, a2, v6);
    CFRelease(v6);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    int8x8_t v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1000FECE0(a2, (uint64_t)__p);
      uint64_t v8 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      sub_1000FECE0(a2, (uint64_t)buf);
      if (v13 >= 0) {
        long long v10 = buf;
      }
      else {
        long long v10 = *(unsigned char **)buf;
      }
      int v14 = 136446210;
      CFAllocatorRef v15 = v10;
      long long v11 = (char *)_os_log_send_and_compose_impl();
      if (v13 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const BOOL &)", "%s\n", v11);
      if (v11 != (char *)__p) {
        free(v11);
      }
    }
  }
  return v6 != 0;
}

uint64_t sub_1000EA7C8(CFMutableDictionaryRef *a1, const void *a2, const void *a3)
{
  CFDictionarySetValue(a1[1], a2, a3);
  unsigned int v4 = (uint64_t (*)(CFMutableDictionaryRef *))*((void *)*a1 + 106);

  return v4(a1);
}

BOOL sub_1000EA838(uint64_t a1, const char *a2, const void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  BOOL v6 = sub_1000EA2A4(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t sub_1000EA8A4(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(void *)a1 + 896))(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return 1;
}

void sub_1000EA934(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  uint64_t v4 = *a2;
  CFStringRef v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    int8x8_t v7 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    int8x8_t v7 = 0;
  }
  uint64_t v6 = v4;
  uint64_t v8 = a3;
  double v9 = a4;
  sub_1000EFC20(a1, (uint64_t)&v6);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_1000EA9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1000EA9CC(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    int8x8_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_1000EAAC4(a4);
    uint64_t v10 = *(void *)a3 + 80;
    long long v11 = (uint64_t **)(*(void *)a3 + 40);
    int v14 = (int *)(*(void *)a2 + 32);
    char v12 = sub_1000EAEE4(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 5);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

id sub_1000EAAC4(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_1000EAB24(a1);
}

id sub_1000EAB24(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022C99A8);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D2DEBALL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLClientManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022C99A8);
      }
      CFStringRef v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)int buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D2DEBALL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022C99A8);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

uint64_t **sub_1000EAEE4(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  int8x8_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        __int16 v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        int8x8_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        int8x8_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    __int16 v9 = a1 + 1;
LABEL_10:
    __int16 v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 5) = 0;
    sub_1000EDF90(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

unsigned char *sub_1000EAFAC(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    int8x8_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_1000EB32C(a4);
    uint64_t v10 = *(void *)a3 + 80;
    __int16 v11 = (uint64_t **)(*(void *)a3 + 40);
    int v14 = (int *)(*(void *)a2 + 32);
    unint64_t v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

unsigned char *sub_1000EB0A4(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    int8x8_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v15) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_1000EB27C(a4);
    uint64_t v10 = *(void *)a3 + 80;
    __int16 v11 = (uint64_t **)(*(void *)a3 + 40);
    char v16 = (int *)(*(void *)a2 + 32);
    unint64_t v12 = sub_1000EB1B8(v11, v16, (uint64_t)&unk_101D0B290, &v16);
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v15, v9, v10, v12 + 4);
    if (result)
    {
      LODWORD(v16) = *(_DWORD *)(*(void *)a3 + 32);
      uint64_t v13 = *(void **)(*(void *)a2 + 64);
      uint64_t v14 = sub_1000F1244((unsigned int *)&v16);
      return [v13 onNotification:v14 withData:a4, v15];
    }
  }
  return result;
}

uint64_t sub_1000EB1B0()
{
  return 1;
}

uint64_t **sub_1000EB1B8(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  int8x8_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        id v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        int8x8_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        int8x8_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    id v9 = a1 + 1;
LABEL_10:
    __int16 v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((unsigned char *)v11 + 32) = 0;
    sub_1000EDF90(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

id sub_1000EB27C(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_1000EBD60(a1);
}

id sub_1000EB2DC(uint64_t a1, int a2, void *a3)
{
  id result = sub_1000EB32C(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

id sub_1000EB32C(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_1000EB38C(a1);
}

id sub_1000EB38C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102318798);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DAE313 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLAppMonitor_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102318798);
      }
      CFStringRef v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)int buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DAE313 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_102318798);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_1000EB74C(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    CFStringRef v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      __int16 v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          unint64_t v12 = (uint64_t *)v4;
        }
        else {
          unint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          __int16 v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        long long v49 = v9;
        id v13 = sub_1000EBC34(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          uint64_t v15 = a1 + 11;
          char v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 8);
            CFDataRef v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                CFDataRef v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              long long v48 = v19;
              sub_1000EBB3C(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              uint64_t v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  UInt8 v32 = (uint64_t *)v27;
                }
                else {
                  UInt8 v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  uint64_t v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              long long v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                long long v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 32);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    long long v39 = (uint64_t *)v36;
                  }
                  else {
                    long long v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    long long v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 8))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 32);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      long long v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      long long v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  long long v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      long long v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      long long v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              long long v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022C4250);
              }
              uint64_t v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                id v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  id v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 8);
                *(_DWORD *)int buf = 136446466;
                long long v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022C4250);
                }
                long long v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  long long v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 8);
                int v50 = 136446466;
                long long v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                long long v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_1000EBB3C(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    int8x8_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_1000EBC34(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    unint64_t v12 = sub_1000EBC94(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    id result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 5);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

id sub_1000EBC34(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_1000EC120(a1);
}

uint64_t **sub_1000EBC94(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  int8x8_t v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        id v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        int8x8_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        int8x8_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    id v9 = a1 + 1;
LABEL_10:
    BOOL v11 = (char *)operator new(0x48uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 8) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v11 + 40) = _Q0;
    sub_1000EDF90(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

id sub_1000EBD60(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BB518);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D23362 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLTelephonyService_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BB518);
      }
      CFStringRef v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)int buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D23362 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022BB518);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_1000EC120(void *a1)
{
  id v2 = [a1 binaryVersion];
  id v3 = [a1 sizeOfType];
  if (v2 != (id)1)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022B3240);
      }
      int8x8_t v7 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 134218498;
        id v12 = v2;
        __int16 v13 = 2048;
        uint64_t v14 = 1;
        __int16 v15 = 2080;
        unint64_t v16 = 0x8000000101D2B4A8 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_34;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022B3240);
      }
      id v8 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)int buf = 134218498;
        id v12 = v2;
        __int16 v13 = 2048;
        uint64_t v14 = 1;
        __int16 v15 = 2080;
        unint64_t v16 = 0x8000000101D2B4A8 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_34;
      }
    }
    goto LABEL_36;
  }
  id v4 = v3;
  id result = [a1 cppObjectPtr];
  if (v4 == (id)1528) {
    return result;
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1022B3240);
    }
    __int16 v9 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 134218498;
      id v12 = v4;
      __int16 v13 = 2048;
      uint64_t v14 = 1528;
      __int16 v15 = 2080;
      unint64_t v16 = 0x8000000101D2B4A8 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Size mismatch between encoded (%zu) and decoded (%zu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_34;
    }
    goto LABEL_36;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_1022B3240);
  }
  int v6 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 134218498;
    id v12 = v4;
    __int16 v13 = 2048;
    uint64_t v14 = 1528;
    __int16 v15 = 2080;
    unint64_t v16 = 0x8000000101D2B4A8 & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Size mismatch between encoded (%zu) and decoded (%zu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_36:
  }
    dispatch_once(&qword_102418F90, &stru_1022B3240);
LABEL_34:
  uint64_t v10 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLLocationProvider_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v10);
  if (v10 != (char *)buf) {
    free(v10);
  }
  return 0;
}

uint64_t sub_1000EC760(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v58 = a2;
  *(void *)int buf = &v58;
  uint64_t v10 = sub_1000ECD24(a1 + 1064, (int *)&v58, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  uint64_t result = sub_1000ED11C(a1, v58, a3);
  if (!result) {
    return result;
  }
  int v12 = *a3;
  if (*a3 >= 5)
  {
    if (v12 == 9)
    {
      *((_DWORD *)v10 + 8) = 0xFFFF;
      *(uint64_t *)((char *)v10 + 44) = 0;
      *(uint64_t *)((char *)v10 + 36) = 0;
      *(_OWORD *)((char *)v10 + 52) = xmmword_101D1C320;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)((char *)v10 + 68) = _Q0;
      *(_OWORD *)((char *)v10 + 84) = _Q0;
      *(_OWORD *)((char *)v10 + 100) = _Q0;
      *((_DWORD *)v10 + 29) = 0;
      uint8_t v10[16] = 0;
      v10[17] = 0;
      v10[15] = 0xBFF0000000000000;
      *((_DWORD *)v10 + 36) = 0;
      *(uint64_t *)((char *)v10 + 148) = 0xBFF0000000000000;
      *((_DWORD *)v10 + 39) = 0x7FFFFFFF;
      v10[21] = 0;
      v10[22] = 0;
      v10[20] = 0;
      uint64_t result = 1;
      *((unsigned char *)v10 + 184) = 0;
      return result;
    }
    if (v12 != 39) {
      return 1;
    }
  }
  __int16 v13 = v10 + 4;
  BOOL v14 = sub_1000EDA70((uint64_t)(v10 + 4), a4, 1);
  double Current = CFAbsoluteTimeGetCurrent();
  double v16 = *(double *)(a4 + 76);
  if (v14 || v16 < *(double *)((char *)v10 + 108)) {
    return 0;
  }
  double v18 = *(double *)(a4 + 20);
  double v19 = *(double *)((char *)v10 + 52);
  if (v19 < 0.0
    || ((v20 = *(double *)(a6 + 8), v21 = v19 - v18, v20 >= 0.0) ? (BOOL v22 = v20 < v21) : (BOOL v22 = 1),
        v22 || (int v23 = (double *)(a1 + 128), sub_1000F1268(v23, (uint64_t)(v10 + 4), a4), v20 < v24)))
  {
    if (Current - v16 <= 1.0)
    {
      if (v18 > 0.0)
      {
        long long v33 = *(_OWORD *)(a4 + 16);
        _OWORD *v13 = *(_OWORD *)a4;
        *((_OWORD *)v10 + 3) = v33;
        long long v34 = *(_OWORD *)(a4 + 32);
        long long v35 = *(_OWORD *)(a4 + 48);
        long long v36 = *(_OWORD *)(a4 + 80);
        *((_OWORD *)v10 + 6) = *(_OWORD *)(a4 + 64);
        *((_OWORD *)v10 + 7) = v36;
        *((_OWORD *)v10 + 4) = v34;
        *((_OWORD *)v10 + 5) = v35;
        long long v37 = *(_OWORD *)(a4 + 96);
        long long v38 = *(_OWORD *)(a4 + 112);
        long long v39 = *(_OWORD *)(a4 + 128);
        *(_OWORD *)((char *)v10 + 172) = *(_OWORD *)(a4 + 140);
        *((_OWORD *)v10 + 9) = v38;
        *((_OWORD *)v10 + 10) = v39;
        *((_OWORD *)v10 + 8) = v37;
      }
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C6438);
      }
      id v25 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v26 = *(void *)(a4 + 4);
        uint64_t v27 = *(void *)(a4 + 12);
        CFAbsoluteTime v28 = CFAbsoluteTimeGetCurrent() - *(double *)(a4 + 76);
        *(_DWORD *)int buf = 134218496;
        *(void *)&uint8_t buf[4] = v26;
        __int16 v72 = 2048;
        uint64_t v73 = v27;
        __int16 v74 = 2048;
        CFAbsoluteTime v75 = v28;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "<%+.8f,%+.8f> is stale from %.3fs ago, not using for distance filtering", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C6438);
        }
        uint64_t v29 = *(void *)(a4 + 4);
        uint64_t v30 = *(void *)(a4 + 12);
        CFAbsoluteTime v31 = CFAbsoluteTimeGetCurrent() - *(double *)(a4 + 76);
        int v59 = 134218496;
        uint64_t v60 = v29;
        __int16 v61 = 2048;
        uint64_t v62 = v30;
        __int16 v63 = 2048;
        CFAbsoluteTime v64 = v31;
        UInt8 v32 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLFilteredLocationController::shouldNotifyClient(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, const char &, CLLocationProvider_Type::RegInfo &)", "%s\n", v32);
        if (v32 != buf) {
          free(v32);
        }
      }
    }
    return 1;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C6438);
  }
  BOOL v44 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v45 = *(void *)(a6 + 8);
    uint64_t v46 = *(uint64_t *)((char *)v10 + 36);
    double v47 = *(double *)((char *)v10 + 44);
    uint64_t v48 = *(void *)(a4 + 4);
    uint64_t v57 = *(void *)(a4 + 12);
    sub_1000F1268(v23, (uint64_t)(v10 + 4), a4);
    *(_DWORD *)int buf = 134219264;
    *(void *)&uint8_t buf[4] = v45;
    __int16 v72 = 2048;
    uint64_t v73 = v46;
    __int16 v74 = 2048;
    CFAbsoluteTime v75 = v47;
    __int16 v76 = 2048;
    uint64_t v77 = v48;
    __int16 v78 = 2048;
    uint64_t v79 = v57;
    __int16 v80 = 2048;
    uint64_t v81 = v49;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "distance filter %.2f not exceeded by <%+.8f,%+.8f> and <%+.8f,%+.8f> (distance %.2f)", buf, 0x3Eu);
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C6438);
    }
    uint64_t v50 = *(void *)(a6 + 8);
    uint64_t v51 = *(uint64_t *)((char *)v10 + 36);
    double v52 = *(double *)((char *)v10 + 44);
    uint64_t v53 = *(void *)(a4 + 4);
    uint64_t v54 = *(void *)(a4 + 12);
    sub_1000F1268(v23, (uint64_t)v13, a4);
    int v59 = 134219264;
    uint64_t v60 = v50;
    __int16 v61 = 2048;
    uint64_t v62 = v51;
    __int16 v63 = 2048;
    CFAbsoluteTime v64 = v52;
    __int16 v65 = 2048;
    uint64_t v66 = v53;
    __int16 v67 = 2048;
    uint64_t v68 = v54;
    __int16 v69 = 2048;
    uint64_t v70 = v55;
    __int16 v56 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLFilteredLocationController::shouldNotifyClient(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, const char &, CLLocationProvider_Type::RegInfo &)", "%s\n", v56);
    if (v56 != buf) {
      free(v56);
    }
    return 0;
  }
  return result;
}

uint64_t *sub_1000ECD24(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  int v6 = (uint64_t **)(a1 + 8);
  CFStringRef v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        id v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        CFStringRef v5 = *v8;
        int v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      CFStringRef v5 = v8[1];
      if (!v5)
      {
        int v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    id v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    sub_10017C90C(a1, a4, (uint64_t)&v11);
    sub_1000EDF90((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

BOOL sub_1000ECDE0(char *a1, uint64_t a2, unsigned int *a3)
{
  int v17 = a2;
  int v6 = (*(uint64_t (**)(char *))(*(void *)a1 + 104))(a1);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C6438);
  }
  int v7 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v8 = *a3;
    int v9 = sub_10008A168(*a3);
    *(_DWORD *)int buf = 67109634;
    unsigned int v24 = v8;
    __int16 v25 = 2080;
    uint64_t v26 = v9;
    __int16 v27 = 1024;
    int v28 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLIENT: unregister for notification, %d, %s, wasRegistered, %d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C6438);
    }
    unsigned int v13 = *a3;
    BOOL v14 = sub_10008A168(*a3);
    v18[0] = 67109634;
    v18[1] = v13;
    __int16 v19 = 2080;
    double v20 = v14;
    __int16 v21 = 1024;
    int v22 = v6;
    __int16 v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLFilteredLocationController::unregisterForNotification(int, const CLLocationProvider_Type::Notification &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  BOOL v10 = sub_1000ED620(a1, a2, (int *)a3);
  if (v10)
  {
    if (*a3 < 3) {
      int v11 = v6;
    }
    else {
      int v11 = 0;
    }
    if (v11 == 1)
    {
      sub_100024444((uint64_t)a1, 0);
      sub_10003EE78((uint64_t)a1);
    }
    *(_DWORD *)int buf = 0;
    if (((*(uint64_t (**)(char *, uint64_t, uint8_t *))(*(void *)a1 + 104))(a1, a2, buf) & 1) == 0)
    {
      v18[0] = 1;
      if (((*(uint64_t (**)(char *, uint64_t, _DWORD *))(*(void *)a1 + 104))(a1, a2, v18) & 1) == 0)
      {
        int v16 = 2;
        if (((*(uint64_t (**)(char *, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v16) & 1) == 0) {
          sub_1000ED9F4((uint64_t)(a1 + 1064), &v17);
        }
      }
    }
  }
  return v10;
}

uint64_t sub_1000ED11C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  switch(*a3)
  {
    case 1:
      int v10 = 0;
      int v5 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v10);
      return v5 ^ 1u;
    case 2:
      int v10 = 1;
      if ((*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v10)) {
        return 0;
      }
      int v9 = 0;
      int v5 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v9);
      return v5 ^ 1u;
    case 3:
      int v10 = 2;
      if ((*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v10)) {
        return 0;
      }
      int v9 = 1;
      if ((*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v9)) {
        return 0;
      }
      int v8 = 0;
      int v5 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v8);
      return v5 ^ 1u;
    case 4:
      goto LABEL_4;
    default:
      if (*a3 != 39) {
        return 1;
      }
LABEL_4:
      int v10 = 3;
      if ((*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v10)) {
        return 0;
      }
      int v9 = 2;
      if ((*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v9)) {
        return 0;
      }
      int v8 = 1;
      if ((*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v8)) {
        return 0;
      }
      int v7 = 0;
      int v5 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v7);
      return v5 ^ 1u;
  }
}

BOOL sub_1000ED39C(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        __int16 v21 = (uint64_t *)v15;
      }
      else {
        __int16 v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B31A0);
    }
    int v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)int buf = 136446466;
      unsigned int v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B31A0);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::clientRegistered(int, const Notification_T &) [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1000ED620(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        unsigned int v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            unsigned int v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10017C890((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022B31A0);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v27 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                long long v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022B31A0);
                }
                uint64_t v29 = a1 + 8;
                if (a1[31] < 0) {
                  uint64_t v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  uint64_t v30 = buf;
                }
                else {
                  uint64_t v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                long long v38 = v29;
                __int16 v39 = 2082;
                int v40 = v30;
                CFAbsoluteTime v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1000ED9F4(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    int v5 = *(_DWORD *)(v2 + 28);
    BOOL v6 = v5 < v3;
    if (v5 >= v3) {
      int v7 = (uint64_t *)v2;
    }
    else {
      int v7 = (uint64_t *)(v2 + 8);
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 28)) {
    return 0;
  }
  sub_1000F0A30((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

BOOL sub_1000EDA70(uint64_t a1, uint64_t a2, int a3)
{
  if (a1 && a2)
  {
    if (a3)
    {
      double v5 = *(double *)(a1 + 88);
      double v6 = *(double *)(a2 + 88);
      BOOL v8 = v5 == -1.0 && v6 == -1.0 || vabdd_f64(v5 + *(double *)(a1 + 76), *(double *)(a2 + 76) + v6) < 2.22044605e-16;
    }
    else
    {
      BOOL v8 = *(double *)(a1 + 76) == *(double *)(a2 + 76);
    }
    if (*(double *)(a1 + 4) != *(double *)(a2 + 4)
      || *(double *)(a1 + 12) != *(double *)(a2 + 12)
      || *(double *)(a1 + 20) != *(double *)(a2 + 20)
      || *(double *)(a1 + 28) != *(double *)(a2 + 28)
      || *(double *)(a1 + 36) != *(double *)(a2 + 36)
      || *(double *)(a1 + 44) != *(double *)(a2 + 44)
      || *(double *)(a1 + 60) != *(double *)(a2 + 60))
    {
      return 0;
    }
    if (*(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96)) {
      BOOL v8 = 0;
    }
    if (!v8) {
      return 0;
    }
    if (*(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124) || *(_DWORD *)(a1 + 132) == *(_DWORD *)(a2 + 132)) {
      return *(_DWORD *)(a1 + 124) == *(_DWORD *)(a2 + 124);
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5E98);
    }
    int v11 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      uint64_t v12 = *(void *)(a1 + 4);
      uint64_t v13 = *(void *)(a1 + 12);
      int v14 = *(_DWORD *)(a1 + 132);
      uint64_t v15 = *(void *)(a2 + 4);
      uint64_t v16 = *(void *)(a2 + 12);
      int v17 = *(_DWORD *)(a2 + 132);
      *(_DWORD *)int buf = 134219264;
      uint64_t v21 = v12;
      __int16 v22 = 2048;
      uint64_t v23 = v13;
      __int16 v24 = 1024;
      int v25 = v14;
      __int16 v26 = 2048;
      uint64_t v27 = v15;
      __int16 v28 = 2048;
      uint64_t v29 = v16;
      __int16 v30 = 1024;
      int v31 = v17;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "CLCommonCompareLocationEqualityClient compared two coordinates that were identical other than their reference frames: (%lf, %lf, %d) (%lf, %lf, %d)", buf, 0x36u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B5E98);
      }
      int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "Boolean CLCommonCompareLocationEqualityClientWithTimeCheck(const CLClientLocation *, const CLClientLocation *, BOOL)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    if (!*(_DWORD *)(a1 + 132)) {
      return 1;
    }
    return *(_DWORD *)(a2 + 132) == 0;
  }
  else
  {
    return (a1 | a2) == 0;
  }
}

_OWORD *sub_1000EDDFC(uint64_t **a1, uint64_t a2, uint64_t a3, long long *a4)
{
  int v7 = (void **)sub_10014F4E4((uint64_t)a1, &v18, a2);
  BOOL v8 = *v7;
  if (!*v7)
  {
    int v9 = (uint64_t **)v7;
    BOOL v8 = operator new(0xE0uLL);
    _DWORD v8[2] = *(_OWORD *)a3;
    *((void *)v8 + 6) = *(void *)(a3 + 16);
    *(_OWORD *)((char *)v8 + 56) = *(_OWORD *)(a3 + 24);
    *((void *)v8 + 9) = *(void *)(a3 + 40);
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    long long v10 = *a4;
    long long v11 = a4[1];
    long long v12 = a4[3];
    v8[7] = a4[2];
    v8[8] = v12;
    void v8[5] = v10;
    v8[6] = v11;
    long long v13 = a4[4];
    long long v14 = a4[5];
    long long v15 = a4[8];
    v8[12] = a4[7];
    v8[13] = v15;
    long long v16 = a4[6];
    v8[10] = v14;
    v8[11] = v16;
    v8[9] = v13;
    sub_1000EDF90(a1, v18, v9, (uint64_t *)v8);
  }
  return v8;
}

uint64_t **sub_1000EDED4(uint64_t **a1, int *a2, _DWORD *a3)
{
  double v6 = a1 + 1;
  double v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        double v5 = *v8;
        double v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      double v5 = v8[1];
      if (!v5)
      {
        double v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v8 = a1 + 1;
LABEL_10:
    long long v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    sub_1000EDF90(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *sub_1000EDF90(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  double v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  BOOL result = sub_1000EDFE8(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_1000EDFE8(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      int v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), double v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            int v9 = (uint64_t **)a2[2];
          }
          else
          {
            int v9 = (uint64_t **)v2[1];
            long long v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              _DWORD v10[2] = (uint64_t)v2;
              int v3 = (uint64_t *)v2[2];
            }
            _OWORD v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *int v9 = v2;
            v2[2] = (uint64_t)v9;
            int v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *int v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), double v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            int v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          int v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *double v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void sub_1000EE180(char *a1, int *a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  if (!a1[111])
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C4110);
    }
    long long v15 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      long long v16 = a1 + 8;
      if (a1[31] < 0) {
        long long v16 = (void *)*v16;
      }
      *(_DWORD *)int buf = 136380675;
      int v37 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "LocationProvider,#Warning. Provider %{private}s is not enabled. Check defaults writes or internal settings", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_41;
    }
LABEL_95:
    dispatch_once(&qword_102419380, &stru_1022C4110);
LABEL_41:
    int v19 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationProvider::notifyClientsWithData(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, BOOL, int, BOOL)", "%s\n");
    goto LABEL_75;
  }
  int v10 = *a2;
  if (*a2 >= 6 && v10 != 39 && v10 != 10) {
    goto LABEL_52;
  }
  if (a6)
  {
    if (a1[109]) {
      goto LABEL_10;
    }
LABEL_33:
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C4110);
    }
    int v17 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = a1 + 8;
      if (a1[31] < 0) {
        uint64_t v18 = (void *)*v18;
      }
      *(_DWORD *)int buf = 136315138;
      int v37 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "LocationProvider,Ignoring location for %s", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_41;
    }
    goto LABEL_95;
  }
  if (a1[109]) {
    goto LABEL_33;
  }
LABEL_10:
  if (!sub_1000EF68C(*(double *)(a3 + 4), *(double *)(a3 + 12)))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C4110);
    }
    uint64_t v20 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      uint64_t v21 = a1 + 8;
      if (a1[31] < 0) {
        uint64_t v21 = (void *)*v21;
      }
      int v22 = *a2;
      uint64_t v23 = *(void *)(a3 + 4);
      uint64_t v24 = *(void *)(a3 + 12);
      *(_DWORD *)int buf = 136381443;
      int v37 = v21;
      __int16 v38 = 1024;
      int v39 = v22;
      __int16 v40 = 2048;
      uint64_t v41 = v23;
      __int16 v42 = 2048;
      uint64_t v43 = v24;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "LocationProvider,Provider %{private}s is notifying clients (type=%d) of an invalid position (<%+.8f,%+.8f>)", buf, 0x26u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_74;
    }
LABEL_96:
    dispatch_once(&qword_102419380, &stru_1022C4110);
LABEL_74:
    int v19 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLLocationProvider::notifyClientsWithData(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, BOOL, int, BOOL)", "%s\n");
LABEL_75:
    if (v19 != buf) {
      free(v19);
    }
    return;
  }
  if (*(double *)(a3 + 36) > 0.0 && !sub_1000F0E28(*(double *)(a3 + 28)))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C4110);
    }
    uint64_t v27 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      __int16 v28 = a1 + 8;
      if (a1[31] < 0) {
        __int16 v28 = (void *)*v28;
      }
      int v29 = *a2;
      uint64_t v30 = *(void *)(a3 + 28);
      uint64_t v31 = *(void *)(a3 + 36);
      *(_DWORD *)int buf = 136381443;
      int v37 = v28;
      __int16 v38 = 1024;
      int v39 = v29;
      __int16 v40 = 2048;
      uint64_t v41 = v30;
      __int16 v42 = 2048;
      uint64_t v43 = v31;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "LocationProvider,Provider %{private}s is notifying clients (type=%d) of an invalid altitude %.2f (accuracy %.2f)", buf, 0x26u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_74;
    }
    goto LABEL_96;
  }
  if (sub_1000EF668(*(double *)(a3 + 4), *(double *)(a3 + 12)))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C4110);
    }
    uint64_t v12 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      uint64_t v13 = a1 + 8;
      if (a1[31] < 0) {
        uint64_t v13 = (void *)*v13;
      }
      int v14 = *a2;
      *(_DWORD *)int buf = 136380931;
      int v37 = v13;
      __int16 v38 = 1024;
      int v39 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "LocationProvider,Provider %{private}s is notifying clients (type=%d) of a <0,0> position", buf, 0x12u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_74;
    }
    goto LABEL_96;
  }
  int v10 = *a2;
LABEL_52:
  if ((v10 - 1) < 2)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C4110);
    }
    int v25 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v26 = a1 + 8;
      if (a1[31] < 0) {
        __int16 v26 = (void *)*v26;
      }
      *(_DWORD *)int buf = 136315138;
      int v37 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "LocationProvider,#Warning Provider %s should not be sending coarse and fine notifications directly", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C4110);
      }
      __int16 v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationProvider::notifyClientsWithData(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, BOOL, int, BOOL)", "%s\n", v34);
      if (v34 != (char *)buf) {
        free(v34);
      }
    }
    goto LABEL_65;
  }
  if (v10 != 9)
  {
    if (!v10)
    {
      if (*(double *)(a3 + 76) + *(double *)(a3 + 88) > CFAbsoluteTimeGetCurrent())
      {
        *(_DWORD *)int buf = 9;
        (*(void (**)(char *, uint8_t *))(*(void *)a1 + 120))(a1, buf);
      }
      *(_DWORD *)int buf = 3;
      sub_1000EEEC0((uint64_t)a1, (int *)buf, a3, a4);
      *(_DWORD *)int buf = 4;
      sub_1000EEEC0((uint64_t)a1, (int *)buf, a3, a4);
      *(_DWORD *)int buf = 39;
      sub_1000EEEC0((uint64_t)a1, (int *)buf, a3, a4);
      *(_DWORD *)int buf = 2;
      sub_1000EEEC0((uint64_t)a1, (int *)buf, a3, a4);
      *(_DWORD *)int buf = 1;
      sub_1000EEEC0((uint64_t)a1, (int *)buf, a3, a4);
      *(_DWORD *)int buf = 5;
      sub_1000EEEC0((uint64_t)a1, (int *)buf, a3, a4);
    }
LABEL_65:
    sub_1000EEEC0((uint64_t)a1, a2, a3, a4);
    return;
  }
  *(_DWORD *)int buf = 0;
  (*(void (**)(char *, uint8_t *))(*(void *)a1 + 120))(a1, buf);
  *(_DWORD *)int buf = 2;
  (*(void (**)(char *, uint8_t *))(*(void *)a1 + 120))(a1, buf);
  *(_DWORD *)int buf = 1;
  (*(void (**)(char *, uint8_t *))(*(void *)a1 + 120))(a1, buf);
  *(_DWORD *)int buf = 3;
  (*(void (**)(char *, uint8_t *))(*(void *)a1 + 120))(a1, buf);
  *(_DWORD *)int buf = 4;
  (*(void (**)(char *, uint8_t *))(*(void *)a1 + 120))(a1, buf);
  *(_DWORD *)int buf = 39;
  (*(void (**)(char *, uint8_t *))(*(void *)a1 + 120))(a1, buf);
  *(_DWORD *)int buf = 5;
  (*(void (**)(char *, uint8_t *))(*(void *)a1 + 120))(a1, buf);
  if (!a1[112])
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C4110);
    }
    int v32 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      long long v33 = a1 + 8;
      if (a1[31] < 0) {
        long long v33 = (void *)*v33;
      }
      *(_DWORD *)int buf = 136315138;
      int v37 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "LocationProvider,Sending location unavailable notification through for %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C4110);
      }
      long long v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationProvider::notifyClientsWithData(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, BOOL, int, BOOL)", "%s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
    }
    a1[112] = 1;
    goto LABEL_65;
  }
}

void sub_1000EEEC0(uint64_t a1, int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C4250);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    uint64_t v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)int buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    __int16 v23 = 2082;
    uint64_t v24 = v10;
    __int16 v25 = 2050;
    __int16 v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  int v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      int v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    uint64_t v27 = v28;
    memset(v28, 0, sizeof(v28));
    int v29 = 0;
    sub_10017E180((uint64_t)buf, a2, (uint64_t)&v27);
    int v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v26) {
      sub_1000DB0A0(v26);
    }
    sub_1000F5BB0((uint64_t)&buf[8], *(void **)&buf[16]);
    if (v29) {
      sub_1000DB0A0(v29);
    }
    sub_1000F5BB0((uint64_t)&v27, v28[0]);
  }
  if (!a4)
  {
    uint64_t v20 = (std::__shared_weak_count *)v14[9];
    v14[8] = 0;
    v14[9] = 0;
    if (!v20) {
      goto LABEL_29;
    }
LABEL_28:
    sub_1000DB0A0(v20);
    goto LABEL_29;
  }
  sub_1000EF5B0(a3, buf);
  long long v18 = *(_OWORD *)buf;
  *(void *)int buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  int v19 = (std::__shared_weak_count *)v14[9];
  *((_OWORD *)v14 + 4) = v18;
  if (v19)
  {
    sub_1000DB0A0(v19);
    uint64_t v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      goto LABEL_28;
    }
  }
LABEL_29:
  if (v14[7]) {
    sub_1000EF4DC();
  }
  os_activity_scope_leave(&state);
}

void sub_1000EF490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_1000EF4DC()
{
}

void sub_1000EF58C()
{
}

void *sub_1000EF5B0@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x610uLL);
  BOOL result = sub_1000EF60C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1000EF5F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000EF60C(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B3270;
  sub_1000EF97C((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1000EF654(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1000EF668(double a1, double a2)
{
  BOOL v2 = fabs(a1) < 0.00003;
  return fabs(a2) < 0.00003 && v2;
}

BOOL sub_1000EF68C(double a1, double a2)
{
  BOOL v2 = a1 <= 90.0;
  if (a1 < -90.0) {
    BOOL v2 = 0;
  }
  if (a2 > 180.0) {
    BOOL v2 = 0;
  }
  return a2 >= -180.0 && v2;
}

void sub_1000EF6D4(uint64_t a1, uint64_t a2)
{
  sub_1000EF97C((uint64_t)v24, a2);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3321888768;
  int v14 = sub_1000E8B44;
  int v15 = &unk_1023191D0;
  uint64_t v16 = a1;
  sub_1000EF97C((uint64_t)&v17, (uint64_t)v24);
  uint64_t v3 = *(void *)(a1 + 560);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 568);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_1000DB0A0(v4);
  }
  if ([*(id *)(a1 + 16) isNonProvisionallyAuthorizedForServiceType:5])
  {
    v14((uint64_t)v13);
  }
  else
  {
    id v5 = objc_alloc((Class)CLLocation);
    void v11[6] = v24[6];
    v11[7] = v24[7];
    v12[0] = v25[0];
    *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)((char *)v25 + 12);
    v11[2] = v24[2];
    v11[3] = v24[3];
    v11[4] = v24[4];
    v11[5] = v24[5];
    v11[0] = v24[0];
    v11[1] = v24[1];
    id v6 = [v5 initWithClientLocation:v11];
    uint64_t v7 = (void *)sub_1001A0484(a1);
    id v8 = [*(id *)(a1 + 24) legacyClientKey];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3321888768;
    _OWORD v9[2] = sub_10122DC58;
    void v9[3] = &unk_102319230;
    v9[5] = a1;
    v9[6] = v3;
    int v10 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    v9[4] = v13;
    [v7 handleProvisionalIntermediationForService:5 forClientKey:v8 at:v6 withReply:v9];
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  if (v22) {
    sub_1000DB0A0(v22);
  }
  if (v21 < 0) {
    operator delete(__p);
  }
  if (v19) {
    sub_1000DB0A0(v19);
  }
  if (v18) {
    sub_1000DB0A0(v18);
  }

  if (v30) {
    sub_1000DB0A0(v30);
  }
  if (v29 < 0) {
    operator delete(v28);
  }
  if (v27) {
    sub_1000DB0A0(v27);
  }
  if (v26) {
    sub_1000DB0A0(v26);
  }
}

void sub_1000EF92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  sub_100458658(v17);
  sub_100458658((uint64_t)&STACK[0x708]);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EF97C(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  long long v8 = *(_OWORD *)(a2 + 96);
  long long v9 = *(_OWORD *)(a2 + 112);
  long long v10 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 96) = v8;
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x201uLL);
  *(void *)(a1 + 680) = *(void *)(a2 + 680);
  uint64_t v11 = *(void *)(a2 + 688);
  *(void *)(a1 + 688) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  long long v12 = *(_OWORD *)(a2 + 696);
  long long v13 = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 728) = v13;
  *(_OWORD *)(a1 + 696) = v12;
  long long v14 = *(_OWORD *)(a2 + 744);
  long long v15 = *(_OWORD *)(a2 + 760);
  long long v16 = *(_OWORD *)(a2 + 776);
  *(void *)(a1 + 789) = *(void *)(a2 + 789);
  *(_OWORD *)(a1 + 760) = v15;
  *(_OWORD *)(a1 + 776) = v16;
  *(_OWORD *)(a1 + 744) = v14;
  *(void *)(a1 + 800) = *(void *)(a2 + 800);
  uint64_t v17 = *(void *)(a2 + 808);
  *(void *)(a1 + 808) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 816) = *(_OWORD *)(a2 + 816);
  long long v18 = *(_OWORD *)(a2 + 832);
  long long v19 = *(_OWORD *)(a2 + 848);
  long long v20 = *(_OWORD *)(a2 + 880);
  *(_OWORD *)(a1 + 864) = *(_OWORD *)(a2 + 864);
  *(_OWORD *)(a1 + 880) = v20;
  *(_OWORD *)(a1 + 832) = v18;
  *(_OWORD *)(a1 + 848) = v19;
  *(void *)(a1 + 896) = *(void *)(a2 + 896);
  if (*(char *)(a2 + 927) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 904), *(void **)(a2 + 904), *(void *)(a2 + 912));
  }
  else
  {
    long long v21 = *(_OWORD *)(a2 + 904);
    *(void *)(a1 + 920) = *(void *)(a2 + 920);
    *(_OWORD *)(a1 + 904) = v21;
  }
  long long v22 = *(_OWORD *)(a2 + 928);
  long long v23 = *(_OWORD *)(a2 + 960);
  *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
  *(_OWORD *)(a1 + 960) = v23;
  *(_OWORD *)(a1 + 928) = v22;
  long long v24 = *(_OWORD *)(a2 + 976);
  long long v25 = *(_OWORD *)(a2 + 992);
  long long v26 = *(_OWORD *)(a2 + 1024);
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
  *(_OWORD *)(a1 + 1024) = v26;
  *(_OWORD *)(a1 + 976) = v24;
  *(_OWORD *)(a1 + 992) = v25;
  long long v27 = *(_OWORD *)(a2 + 1040);
  long long v28 = *(_OWORD *)(a2 + 1056);
  long long v29 = *(_OWORD *)(a2 + 1072);
  *(_OWORD *)(a1 + 1088) = *(_OWORD *)(a2 + 1088);
  *(_OWORD *)(a1 + 1072) = v29;
  *(_OWORD *)(a1 + 1056) = v28;
  *(_OWORD *)(a1 + 1040) = v27;
  long long v30 = *(_OWORD *)(a2 + 1104);
  long long v31 = *(_OWORD *)(a2 + 1120);
  long long v32 = *(_OWORD *)(a2 + 1136);
  *(void *)(a1 + 1152) = *(void *)(a2 + 1152);
  *(_OWORD *)(a1 + 1136) = v32;
  *(_OWORD *)(a1 + 1120) = v31;
  *(_OWORD *)(a1 + 1104) = v30;
  *(void *)(a1 + 1160) = *(void *)(a2 + 1160);
  uint64_t v33 = *(void *)(a2 + 1168);
  *(void *)(a1 + 1168) = v33;
  if (v33) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 1176) = *(_OWORD *)(a2 + 1176);
  long long v34 = *(_OWORD *)(a2 + 1192);
  long long v35 = *(_OWORD *)(a2 + 1208);
  long long v36 = *(_OWORD *)(a2 + 1240);
  *(_OWORD *)(a1 + 1224) = *(_OWORD *)(a2 + 1224);
  *(_OWORD *)(a1 + 1240) = v36;
  *(_OWORD *)(a1 + 1192) = v34;
  *(_OWORD *)(a1 + 1208) = v35;
  long long v37 = *(_OWORD *)(a2 + 1256);
  long long v38 = *(_OWORD *)(a2 + 1272);
  long long v39 = *(_OWORD *)(a2 + 1304);
  *(_OWORD *)(a1 + 1288) = *(_OWORD *)(a2 + 1288);
  *(_OWORD *)(a1 + 1304) = v39;
  *(_OWORD *)(a1 + 1256) = v37;
  *(_OWORD *)(a1 + 1272) = v38;
  *(void *)(a1 + 1320) = 0;
  *(void *)(a1 + 1320) = *(id *)(a2 + 1320);
  *(_OWORD *)(a1 + 1328) = *(_OWORD *)(a2 + 1328);
  long long v40 = *(_OWORD *)(a2 + 1344);
  long long v41 = *(_OWORD *)(a2 + 1360);
  long long v42 = *(_OWORD *)(a2 + 1376);
  *(_OWORD *)(a1 + 1392) = *(_OWORD *)(a2 + 1392);
  *(_OWORD *)(a1 + 1376) = v42;
  *(_OWORD *)(a1 + 1360) = v41;
  *(_OWORD *)(a1 + 1344) = v40;
  long long v43 = *(_OWORD *)(a2 + 1408);
  long long v44 = *(_OWORD *)(a2 + 1424);
  long long v45 = *(_OWORD *)(a2 + 1440);
  *(_OWORD *)(a1 + 1456) = *(_OWORD *)(a2 + 1456);
  *(_OWORD *)(a1 + 1440) = v45;
  *(_OWORD *)(a1 + 1424) = v44;
  *(_OWORD *)(a1 + 1408) = v43;
  long long v46 = *(_OWORD *)(a2 + 1472);
  long long v47 = *(_OWORD *)(a2 + 1488);
  long long v48 = *(_OWORD *)(a2 + 1504);
  *(void *)(a1 + 1520) = *(void *)(a2 + 1520);
  *(_OWORD *)(a1 + 1504) = v48;
  *(_OWORD *)(a1 + 1488) = v47;
  *(_OWORD *)(a1 + 1472) = v46;
  return a1;
}

void sub_1000EFBD8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 808);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  long long v4 = *(std::__shared_weak_count **)(v1 + 688);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000EFC20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, v4))
  {
    uint64_t v5 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    if (objc_msgSend(*(id *)(a1 + 112), "isNonProvisionallyAuthorizedForServiceTypeMask:", sub_1000F048C(a1, v5)))
    {
      long long v6 = *(std::__shared_weak_count **)(a2 + 8);
      long long v23 = *(CLConnectionMessage **)a2;
      long long v24 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      CLConnection::sendMessage();
      if (v24) {
        sub_1000DB0A0(v24);
      }
      uint64_t v7 = *(void *)(a2 + 16);
      if ((v7 & 0x7F) != 0)
      {
        sub_1000F0918((uint64_t *)a1, v7, *(double *)(a2 + 24));
        uint64_t v8 = *(void *)(a2 + 16) & 0x14;
        if (!v8)
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022EA328);
          }
          long long v9 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
          {
            uint64_t v10 = *(void *)(a1 + 48);
            *(_DWORD *)int buf = 68289282;
            int v26 = 0;
            __int16 v27 = 2082;
            long long v28 = "";
            __int16 v29 = 2114;
            uint64_t v30 = v10;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"markReceivingLocationInformation\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
          }
        }
        uint64_t v11 = *(void *)(a1 + 16);
        if (objc_msgSend(*(id *)(a1 + 48), "isAuthLimited", v23)) {
          id v12 = sub_1007BEA40(*(void *)(a1 + 16), *(void *)(a1 + 48));
        }
        else {
          id v12 = *(id *)(a1 + 48);
        }
        long long v20 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        int v21 = *((char *)v20 + 23);
        if (v21 < 0)
        {
          if (v20[1] != 39)
          {
LABEL_37:
            BOOL v22 = 1;
            goto LABEL_38;
          }
          long long v20 = (void *)*v20;
        }
        else if (v21 != 39)
        {
          goto LABEL_37;
        }
        BOOL v22 = memcmp(v20, "kCLConnectionMessageCompensatedLocation", 0x27uLL) != 0;
LABEL_38:
        sub_100103838(v11, v12, v22, v8 != 0);
      }
    }
    else
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022EA308);
      }
      uint64_t v17 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
      {
        uint64_t v18 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        if (*(char *)(v18 + 23) >= 0) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = *(void *)v18;
        }
        *(_DWORD *)int buf = 68289282;
        int v26 = 0;
        __int16 v27 = 2082;
        long long v28 = "";
        __int16 v29 = 2082;
        uint64_t v30 = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Client not authorized for message\", \"message\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      sub_100BD63C0((__n128 **)(a1 + 128), (__n128 *)a2);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022EA328);
    }
    long long v13 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = *(void *)(a1 + 48);
      uint64_t v15 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
      if (*(char *)(v15 + 23) >= 0) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = *(void *)v15;
      }
      *(_DWORD *)int buf = 68289538;
      int v26 = 0;
      __int16 v27 = 2082;
      long long v28 = "";
      __int16 v29 = 2114;
      uint64_t v30 = v14;
      __int16 v31 = 2082;
      uint64_t v32 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Warning Client not interested in this message\", \"ClientKeyPath\":%{public, location:escape_only}@, \"message\":%{public, location:escape_only}s}", buf, 0x26u);
    }
  }
}

void sub_1000EFFC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000F006C(uint64_t a1, uint64_t *a2)
{
  if (sub_1000F00D8(a2)) {
    return 1;
  }
  uint64_t v5 = *(void **)(a1 + 152);
  if (*((char *)a2 + 23) >= 0) {
    long long v6 = a2;
  }
  else {
    long long v6 = (uint64_t *)*a2;
  }
  return [v5 objectForKeyedSubscript:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6)] != 0;
}

BOOL sub_1000F00D8(void *a1)
{
  uint64_t v1 = a1;
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v5 = a1[1];
    if (v5 == 36)
    {
      if (!memcmp((const void *)*a1, "kCLConnectionMessageRegionMonitoring", 0x24uLL)) {
        return 1;
      }
      uint64_t v5 = v1[1];
    }
    else if (v5 == 39 && !memcmp((const void *)*a1, "kCLConnectionMessageAuthorizationStatus", 0x27uLL))
    {
      return 1;
    }
    if (v5 == 31)
    {
      if (*(void *)*v1 == 0x656E6E6F434C436BLL
        && *(void *)(*v1 + 8) == 0x73654D6E6F697463
        && *(void *)(*v1 + 16) == 0x6967655265676173
        && *(void *)(*v1 + 23) == 0x65746174536E6F69)
      {
        return 1;
      }
      uint64_t v5 = v1[1];
    }
    if (v5 == 41)
    {
      if (!memcmp((const void *)*v1, "kCLConnectionMessageRegionMonitoringError", 0x29uLL)) {
        return 1;
      }
      uint64_t v5 = v1[1];
    }
    if (v5 == 51)
    {
      if (!memcmp((const void *)*v1, "kCLConnectionMessageRegionMonitoringResponseDelayed", 0x33uLL)) {
        return 1;
      }
      uint64_t v5 = v1[1];
    }
    if (v5 != 54) {
      goto LABEL_54;
    }
    a1 = (void *)*v1;
    goto LABEL_36;
  }
  unsigned int v2 = *((unsigned __int8 *)a1 + 23);
  if (v2 > 0x28)
  {
    switch(v2)
    {
      case ')':
        uint64_t v3 = "kCLConnectionMessageRegionMonitoringError";
        size_t v4 = 41;
        break;
      case '3':
        uint64_t v3 = "kCLConnectionMessageRegionMonitoringResponseDelayed";
        size_t v4 = 51;
        break;
      case '6':
LABEL_36:
        uint64_t v3 = "kCLConnectionMessageRegionMonitoringNoLocationWatchdog";
        size_t v4 = 54;
        break;
      default:
        goto LABEL_54;
    }
LABEL_53:
    if (memcmp(a1, v3, v4)) {
      goto LABEL_54;
    }
    return 1;
  }
  switch(v2)
  {
    case 0x1Fu:
      if (*a1 == 0x656E6E6F434C436BLL
        && a1[1] == 0x73654D6E6F697463
        && a1[2] == 0x6967655265676173
        && *(void *)((char *)a1 + 23) == 0x65746174536E6F69)
      {
        return 1;
      }
      break;
    case 0x24u:
      if (memcmp(a1, "kCLConnectionMessageRegionMonitoring", 0x24uLL)) {
        break;
      }
      return 1;
    case 0x27u:
      uint64_t v3 = "kCLConnectionMessageAuthorizationStatus";
      size_t v4 = 39;
      goto LABEL_53;
  }
LABEL_54:
  if (sub_1000F03F8(v1, "kCLConnectionMessageRegionMonitoringSetupCompleted")
    || sub_1000F03F8(v1, "LocationManager/kCLConnectionMessageRegistration")
    || sub_1000F03F8(v1, "kCLConnectionMessageError")
    || sub_1000F03F8(v1, "kCLConnectionMessageBatch")
    || sub_1000F03F8(v1, "kCLConnectionMessageAutopauseStatus")
    || sub_1000F03F8(v1, "kCLConnectionMessageSignificantLocationVisit")
    || sub_1000F03F8(v1, "kCLConnectionMessageSignificantLocationVisitState")
    || sub_1000F03F8(v1, "kCLConnectionMessageLocationPush"))
  {
    return 1;
  }

  return sub_1000F03F8(v1, "kCLConnectionMessageTranscriptSession");
}

BOOL sub_1000F03F8(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      sub_1002E93D4();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

uint64_t sub_1000F048C(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 23);
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    uint64_t v5 = (uint64_t *)a2;
    switch(*(unsigned char *)(a2 + 23))
    {
      case 0x1B:
        goto LABEL_78;
      case 0x1C:
        if (*(void *)a2 != 0x656E6E6F434C436BLL
          || *(void *)(a2 + 8) != 0x73654D6E6F697463
          || *(void *)(a2 + 16) != 0x61636F4C65676173
          || *(_DWORD *)(a2 + 24) != 1852795252)
        {
          goto LABEL_88;
        }
        goto LABEL_41;
      case 0x1D:
      case 0x1E:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
        goto LABEL_88;
      case 0x1F:
        goto LABEL_47;
      case 0x24:
        goto LABEL_43;
      default:
        if (v4 == 39
          && (!memcmp((const void *)a2, "kCLConnectionMessageCompensatedLocation", 0x27uLL)
           || !memcmp((const void *)a2, "kCLConnectionMessageLocationUnavailable", 0x27uLL)))
        {
          goto LABEL_41;
        }
        goto LABEL_88;
    }
  }
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9 == 28)
  {
    BOOL v10 = **(void **)a2 == 0x656E6E6F434C436BLL && *(void *)(*(void *)a2 + 8) == 0x73654D6E6F697463;
    BOOL v11 = v10 && *(void *)(*(void *)a2 + 16) == 0x61636F4C65676173;
    if (v11 && *(_DWORD *)(*(void *)a2 + 24) == 1852795252) {
      goto LABEL_41;
    }
  }
  if (v9 != 39) {
    goto LABEL_35;
  }
  if (!memcmp(*(const void **)a2, "kCLConnectionMessageCompensatedLocation", 0x27uLL)) {
    goto LABEL_41;
  }
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9 != 39)
  {
LABEL_35:
    if (v9 != 36) {
      goto LABEL_64;
    }
    if (!memcmp(*(const void **)a2, "kCLConnectionMessageRegionMonitoring", 0x24uLL)) {
      return 3;
    }
LABEL_63:
    uint64_t v9 = *(void *)(a2 + 8);
LABEL_64:
    if (v9 != 31)
    {
LABEL_76:
      if (v9 != 27) {
        goto LABEL_88;
      }
      uint64_t v5 = *(uint64_t **)a2;
LABEL_78:
      uint64_t v20 = *v5;
      uint64_t v21 = v5[1];
      uint64_t v22 = v5[2];
      uint64_t v23 = *(uint64_t *)((char *)v5 + 19);
      if (v20 == 0x656E6E6F434C436BLL
        && v21 == 0x73654D6E6F697463
        && v22 == 0x676E615265676173
        && v23 == 0x676E69676E615265)
      {
        return 4;
      }
      goto LABEL_88;
    }
    if (**(void **)a2 != 0x656E6E6F434C436BLL
      || *(void *)(*(void *)a2 + 8) != 0x73654D6E6F697463
      || *(void *)(*(void *)a2 + 16) != 0x6967655265676173
      || *(void *)(*(void *)a2 + 23) != 0x65746174536E6F69)
    {
LABEL_75:
      uint64_t v9 = *(void *)(a2 + 8);
      goto LABEL_76;
    }
    return 3;
  }
  if (!memcmp(*(const void **)a2, "kCLConnectionMessageLocationUnavailable", 0x27uLL))
  {
LABEL_41:
    if (sub_1000F08D4()) {
      return 16;
    }
    if ([*(id *)(a1 + 112) inUseLevelIsAtLeast:3]) {
      return 16;
    }
    return 32;
  }
  if ((v4 & 0x80) != 0) {
    goto LABEL_35;
  }
  uint64_t v5 = (uint64_t *)a2;
  if (v4 == 27) {
    goto LABEL_78;
  }
  if (v4 == 31) {
    goto LABEL_47;
  }
  if (v4 != 36) {
    goto LABEL_88;
  }
LABEL_43:
  if (!memcmp((const void *)a2, "kCLConnectionMessageRegionMonitoring", 0x24uLL)) {
    return 3;
  }
  if ((v4 & 0x80) != 0) {
    goto LABEL_63;
  }
  uint64_t v5 = (uint64_t *)a2;
  if (v4 == 27) {
    goto LABEL_78;
  }
  if (v4 != 31) {
    goto LABEL_88;
  }
LABEL_47:
  if (*(void *)a2 == 0x656E6E6F434C436BLL
    && *(void *)(a2 + 8) == 0x73654D6E6F697463
    && *(void *)(a2 + 16) == 0x6967655265676173
    && *(void *)(a2 + 23) == 0x65746174536E6F69)
  {
    return 3;
  }
  if ((v4 & 0x80) != 0) {
    goto LABEL_75;
  }
  uint64_t v5 = (uint64_t *)a2;
  if (v4 == 27) {
    goto LABEL_78;
  }
LABEL_88:
  if (sub_1000F03F8((void *)a2, "kCLConnectionMessageSignificantLocationChange")) {
    return 2048;
  }
  if (sub_1000F03F8((void *)a2, "kCLConnectionMessageSignificantLocationVisit")
    || sub_1000F03F8((void *)a2, "kCLConnectionMessageSignificantLocationVisitState"))
  {
    return 64;
  }
  if (sub_1000F03F8((void *)a2, "kCLConnectionMessageTranscriptFetch")) {
    return 65552;
  }
  return 0;
}

uint64_t sub_1000F08D4()
{
  if (qword_10247D498 != -1) {
    dispatch_once(&qword_10247D498, &stru_1022C66F0);
  }
  return byte_10247D490;
}

void sub_1000F0918(uint64_t *a1, uint64_t a2, double a3)
{
  if ((a2 & 0x14) == 0) {
    return;
  }
  char v4 = a2;
  uint64_t v6 = a1[8];
  uint64_t v7 = v6 & a2;
  if ((v6 & a2) != 0)
  {
    if ((a2 & 0x10) == 0) {
      goto LABEL_4;
    }
  }
  else
  {
    a1[8] = v6 | a2;
    if ((a2 & 0x10) == 0)
    {
LABEL_4:
      if ((a2 & 4) == 0) {
        return;
      }
      goto LABEL_11;
    }
  }
  uint64_t v8 = a1[2];
  if ([(id)a1[6] isAuthLimited]) {
    id v9 = sub_1007BEA40(a1[2], a1[6]);
  }
  else {
    id v9 = (id)a1[6];
  }
  sub_100102A58(v8, (uint64_t)v9, 4, v7 == 0, a3);
  if ((v4 & 4) != 0)
  {
LABEL_11:
    uint64_t v10 = a1[2];
    if ([(id)a1[6] isAuthLimited]) {
      id v11 = sub_1007BEA40(a1[2], a1[6]);
    }
    else {
      id v11 = (id)a1[6];
    }
    sub_100102A58(v10, (uint64_t)v11, 2, v7 == 0, a3);
  }
}

uint64_t *sub_1000F0A30(uint64_t **a1, uint64_t *a2)
{
  unsigned int v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      unsigned int v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    char v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      char v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  uint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_1000F0AA4(v6, a2);
  return v3;
}

uint64_t *sub_1000F0AA4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    char v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      char v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  uint64_t v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *uint64_t v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      BOOL result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      BOOL result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      long long v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      void v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      uint64_t *v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        BOOL result = v7;
      }
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    uint64_t v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      uint64_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *uint64_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        void v7[2] = (uint64_t)v15;
        uint64_t v16 = v7;
      }
      else
      {
        uint64_t v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      long long v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      void v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *long long v24 = v23;
      goto LABEL_72;
    }
    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    void v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      BOOL result = v7;
    }
    uint64_t v7 = *(uint64_t **)v12;
  }
  uint64_t v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  uint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    uint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    uint64_t *v20 = (uint64_t)v7;
    void v7[2] = (uint64_t)v20;
    uint64_t v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  long long v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  void v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

BOOL sub_1000F0E28(double a1)
{
  return a1 < 1000000.0 && a1 > -500.0;
}

void sub_1000F0E4C(void *a1, unsigned int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    int v6 = sub_1000F1244(a2);
    int v8 = a1 + 8;
    uint64_t v7 = a1[8];
    if (v7)
    {
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v7 + 32);
        BOOL v11 = v10 < v6;
        if (v10 >= v6) {
          uint64_t v12 = (uint64_t *)v7;
        }
        else {
          uint64_t v12 = (uint64_t *)(v7 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v7;
        }
        uint64_t v7 = *v12;
      }
      while (*v12);
      if (v9 != v8 && v6 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        id v13 = sub_1000EB27C(a3);
        (*(void (**)(void *, unsigned int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          uint64_t v15 = a1 + 11;
          uint64_t v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            uint64_t v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                uint64_t v22 = (uint64_t *)v17;
              }
              else {
                uint64_t v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                uint64_t v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              long long v48 = v19;
              sub_1000EB0A4(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              int v27 = sub_1000F1244(a2);
              uint64_t v28 = a1[8];
              if (!v28) {
                return;
              }
              __int16 v29 = a1 + 8;
              do
              {
                int v30 = *(_DWORD *)(v28 + 32);
                BOOL v31 = v30 < v27;
                if (v30 >= v27) {
                  uint64_t v32 = (uint64_t *)v28;
                }
                else {
                  uint64_t v32 = (uint64_t *)(v28 + 8);
                }
                if (!v31) {
                  __int16 v29 = (void *)v28;
                }
                uint64_t v28 = *v32;
              }
              while (*v32);
              if (v29 == v8 || v27 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                long long v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    long long v39 = (uint64_t *)v36;
                  }
                  else {
                    long long v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    long long v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      long long v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      long long v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  long long v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      long long v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      long long v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              long long v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022BB268);
              }
              long long v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                uint64_t v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  uint64_t v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)int buf = 136446466;
                uint64_t v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022BB268);
                }
                long long v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  long long v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                uint64_t v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                long long v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

uint64_t sub_1000F1244(unsigned int *a1)
{
  uint64_t result = *a1;
  if (result == -1) {
    sub_101A64FF8();
  }
  return result;
}

void sub_1000F1268(double *a1, uint64_t a2, uint64_t a3)
{
  double v6 = *(double *)(a2 + 36);
  double v7 = *(double *)(a3 + 36);
  if (v6 <= 0.0 || v7 <= 0.0)
  {
    if (v6 <= 0.0)
    {
      double v9 = 0.0;
      if (v7 <= 0.0) {
        goto LABEL_26;
      }
      double v8 = *(double *)(a3 + 28);
    }
    else
    {
      double v8 = *(double *)(a2 + 28);
    }
  }
  else
  {
    double v8 = (*(double *)(a2 + 28) + *(double *)(a3 + 28)) * 0.5;
  }
  double v9 = -450.0;
  if (v8 >= -450.0)
  {
    double v9 = 1000000.0;
    if (v8 <= 1000000.0)
    {
      double v9 = v8;
      goto LABEL_26;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314CD8);
    }
    BOOL v11 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 134218240;
      unint64_t v18 = 0x412E848000000000;
      __int16 v19 = 2048;
      double v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning refAlt > %.1lf,refAlt,%.1lf,using the max", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1) {
        goto LABEL_23;
      }
      goto LABEL_29;
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314CD8);
    }
    int v10 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 134218240;
      unint64_t v18 = 0xC07C200000000000;
      __int16 v19 = 2048;
      double v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning refAlt < %.1lf,refAlt,%.1lf,using the min", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1)
      {
LABEL_23:
        uint64_t v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "double CLDistanceCalc::calculateDistance(const CLDaemonLocation &, const CLDaemonLocation &)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
        goto LABEL_26;
      }
LABEL_29:
      dispatch_once(&qword_102419630, &stru_102314CD8);
      goto LABEL_23;
    }
  }
LABEL_26:
  double v13 = *(double *)(a2 + 4);
  double v14 = *(double *)(a2 + 12);
  double v15 = *(double *)(a3 + 4);
  double v16 = *(double *)(a3 + 12);
  if (sub_1000F1724(v13, v14, v15, v16)) {
    sub_101171810(v13, v14, v15, v16);
  }
  else {
    sub_1000F1648(a1, v13, v14, v15, v16, v9);
  }
}

long double sub_1000F1648(double *a1, double a2, double a3, double a4, double a5, double a6)
{
  double v14 = 0.0;
  double v15 = 0.0;
  if (!sub_1000F1724(a2, a3, a4, a5) && sub_1000F17A8(a1, &v15, &v14, &v13, a2, a3, a6, a4, a5, a6)) {
    return sqrt(v14 * v14 + v15 * v15);
  }

  return sub_101171810(a2, a3, a4, a5);
}

BOOL sub_1000F1724(double a1, double a2, double a3, double a4)
{
  if (a2 < 0.0) {
    a2 = a2 + 360.0;
  }
  if (a4 < 0.0) {
    a4 = a4 + 360.0;
  }
  double v4 = a4 - a2;
  if (v4 <= 180.0)
  {
    if (v4 < -180.0) {
      double v4 = v4 + 360.0;
    }
  }
  else
  {
    double v4 = v4 + -360.0;
  }
  unsigned int v5 = (int)v4;
  if ((int)v4 < 0) {
    unsigned int v5 = -v5;
  }
  int v6 = (int)a3 - (int)a1;
  if (v6 < 0) {
    int v6 = (int)a1 - (int)a3;
  }
  return v6 > 2 || v5 > 2;
}

BOOL sub_1000F17A8(double *a1, double *a2, double *a3, double *a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v10 = vabdd_f64(a5, a8);
  if (v10 <= 2.0)
  {
    double v21 = a1[3];
    if (v21 == 0.0 || vabdd_f64(a5, v21) > 0.005)
    {
      double v22 = (a5 + a8) * 0.5;
      a1[2] = v22 * 0.0174532925;
      a1[3] = v22;
      __double2 v23 = __sincos_stret(v22 * 0.0174532925);
      double v24 = v23.__sinval * -0.00669437999 * v23.__sinval + 1.0;
      double v25 = sqrt(v24);
      *a1 = 6335439.33 / (v24 * v25);
      a1[1] = 6378137.0 / v25;
      a1[4] = v23.__cosval;
    }
    double v26 = 360.0;
    double v27 = a6 + 360.0;
    if (a6 >= 0.0) {
      double v27 = a6;
    }
    double v28 = a9 + 360.0;
    if (a9 >= 0.0) {
      double v28 = a9;
    }
    double v29 = v28 - v27;
    if (v29 <= 180.0)
    {
      if (v29 >= -180.0)
      {
LABEL_13:
        *a2 = (a8 - a5) * 0.0174532925 * (*a1 + a7);
        *a3 = v29 * 0.0174532925 * ((a1[1] + a7) * a1[4]);
        *a4 = a10 - a7;
        return v10 <= 2.0;
      }
    }
    else
    {
      double v26 = -360.0;
    }
    double v29 = v29 + v26;
    goto LABEL_13;
  }
  return v10 <= 2.0;
}

uint64_t sub_1000F1944(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  int v19 = a2;
  if (*a3)
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_102301560);
    }
    uint64_t v6 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
    {
      *(void *)int buf = &v19;
      id v7 = [[[objc_msgSend(sub_10008A098((uint64_t **)(a1 + 80), &v19, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[8], "description") UTF8String];
      uint64_t v8 = *a3;
      *(_DWORD *)int buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v21 = 2082;
      double v22 = "";
      __int16 v23 = 2082;
      id v24 = v7;
      __int16 v25 = 2050;
      uint64_t v26 = v8;
      double v9 = "{\"msg%{public}.0s\":\"notifying\", \"client\":%{public, location:escape_only}s, \"notification\":%{public, l"
           "ocation:CLLocationProvider_Type::Notification}lld}";
      double v10 = v6;
      uint32_t v11 = 38;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, v9, buf, v11);
    }
  }
  else
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_102301560);
    }
    uint64_t v13 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
    {
      *(void *)int buf = &v19;
      id v14 = [[objc_msgSend(objc_msgSend(sub_10008A098((uint64_t **)(a1 + 80), &v19, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[8], "description"), "UTF8String");
      uint64_t v15 = *(void *)(a4 + 20);
      uint64_t v16 = *(unsigned int *)(a4 + 96);
      uint64_t v17 = *(unsigned int *)(a4 + 512);
      *(_DWORD *)int buf = 68290050;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v21 = 2082;
      double v22 = "";
      __int16 v23 = 2082;
      id v24 = v14;
      __int16 v25 = 2050;
      uint64_t v26 = v15;
      __int16 v27 = 2050;
      uint64_t v28 = v16;
      __int16 v29 = 2050;
      uint64_t v30 = v17;
      double v9 = "{\"msg%{public}.0s\":\"notifying location\", \"client\":%{public, location:escape_only}s, \"accuracy\":\"%{pu"
           "blic}f\", \"type\":%{public, location:CLLocationType}lld, \"origin device\":%{public, location:CLClientLocati"
           "onOriginDevice}lld}";
      double v10 = v13;
      uint32_t v11 = 58;
      goto LABEL_10;
    }
  }
  return 1;
}

void sub_1000F1B68(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C6418);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFilteredLocationController::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C6418);
    }
    double v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFilteredLocationController::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1000F1D44(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1000F1D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F1D44(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  unsigned int v15 = *a3;
  if (v15 > 2 || (unsigned int v15 = 0, *(double *)(a1 + 1024) < 0.0) || *(double *)(a1 + 1032) < 15.0)
  {
LABEL_24:
    (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v15, a4, 1, 0xFFFFFFFFLL, 0);
    sub_1000F224C(a1 + 184, (int *)&v15, a4);
    return;
  }
  double v6 = sub_100018B28(a1, a4);
  if (v6 >= CFAbsoluteTimeGetCurrent() + 15.0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C6438);
    }
    uint64_t v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 134217984;
      *(double *)&uint8_t buf[4] = v6 - CFAbsoluteTimeGetCurrent();
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "turning off location requests and re-scheduling for %.3fs later", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C6438);
      }
      int v16 = 134217984;
      double v17 = v6 - CFAbsoluteTimeGetCurrent();
      __int16 v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFilteredLocationController::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    [*(id *)(*(void *)(a1 + 168) + 16) unregister:*(void *)(*(void *)(a1 + 168) + 8) forNotification:0];
    [*(id *)(*(void *)(a1 + 168) + 16) unregister:*(void *)(*(void *)(a1 + 168) + 8) forNotification:1];
    [*(id *)(*(void *)(a1 + 168) + 16) unregister:*(void *)(*(void *)(a1 + 168) + 8) forNotification:2];
    int v16 = 0;
    *(void *)int buf = &v16;
    *((unsigned char *)sub_1000EB1B8((uint64_t **)(a1 + 1040), &v16, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = 0;
    int v16 = 1;
    *(void *)int buf = &v16;
    *((unsigned char *)sub_1000EB1B8((uint64_t **)(a1 + 1040), &v16, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = 0;
    int v16 = 2;
    *(void *)int buf = &v16;
    *((unsigned char *)sub_1000EB1B8((uint64_t **)(a1 + 1040), &v16, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = 0;
    [*(id *)(a1 + 1016) setNextFireTime:v6];
    id v8 = [[[*(id *)(a1 + 32) vendor] proxyForService:@"CLDaemonStatus"];
    CFDateRef v9 = *(const __CFDate **)(a1 + 1096);
    if (v9 && (double AbsoluteTime = CFDateGetAbsoluteTime(v9), AbsoluteTime < CFAbsoluteTimeGetCurrent()))
    {
      unsigned int v11 = [v8 syncgetRegisterPowerKeepAlive:1 client:a1 dbgMessage:@"CLFilteredLocationController::onLocationNotification"];
      sub_100731CFC(a1);
      if (v11) {
        [v8 syncgetRegisterPowerKeepAlive:0 client:a1 dbgMessage:@"CLFilteredLocationController::onLocationNotification"];
      }
    }
    else
    {
      sub_100731CFC(a1);
    }
    goto LABEL_24;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C6438);
  }
  uint64_t v12 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 134217984;
    *(double *)&uint8_t buf[4] = v6 - CFAbsoluteTimeGetCurrent();
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "leaving location as it would turn on in %.3fs anyway", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C6438);
    }
    int v16 = 134217984;
    double v17 = v6 - CFAbsoluteTimeGetCurrent();
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFilteredLocationController::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
}

void sub_1000F224C(uint64_t a1, int *a2, uint64_t a3)
{
  [*(id *)(a1 + 8) silo];
  if (*(unsigned char *)(a1 + 24))
  {
    if (*a2 >= 6)
    {
      if (*a2 == 22)
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10231F568);
        }
        double v6 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          int v7 = *(_DWORD *)(a1 + 824);
          uint64_t v8 = sub_1010FB9FC(*(int **)(a3 + 800));
          *(_DWORD *)int buf = 67109376;
          int v23 = v7;
          __int16 v24 = 2048;
          uint64_t v25 = v8;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Received kNotificationWifiLocationBatched, num,%u,Size, %lu", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10231F568);
          }
          int v13 = *(_DWORD *)(a1 + 824);
          uint64_t v14 = sub_1010FB9FC(*(int **)(a3 + 800));
          int v18 = 67109376;
          int v19 = v13;
          __int16 v20 = 2048;
          uint64_t v21 = v14;
          unsigned int v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLLastConfidentLocation::onNewLocations(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
        if (sub_1010FB9FC(*(int **)(a3 + 800)))
        {
          unint64_t v9 = sub_1010FB9FC(*(int **)(a3 + 800)) - 1;
          do
          {
            if (v9 == -1) {
              break;
            }
            sub_1010FB258(*(void *)(a3 + 800), v9, (uint64_t)&v18);
            sub_1010FB770(*(void *)(a3 + 800), v9, (uint64_t)buf);
            char v10 = sub_1000F4FD4(a1, (long long *)&v18, (uint64_t)buf, 1);
            if (v26) {
              sub_1000DB0A0(v26);
            }
            --v9;
          }
          while ((v10 & 1) == 0);
        }
        sub_1012F9770(a1);
      }
      else
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10231F568);
        }
        unsigned int v11 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          int v12 = *a2;
          *(_DWORD *)int buf = 67109120;
          int v23 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Received unknown notification %d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10231F568);
          }
          int v16 = *a2;
          int v18 = 67109120;
          int v19 = v16;
          double v17 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLLastConfidentLocation::onNewLocations(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v17);
          if (v17 != (char *)buf) {
            free(v17);
          }
        }
      }
    }
    else
    {
      sub_1000F4FD4(a1, (long long *)a3, a3 + 160, 0);
    }
  }
}

void sub_1000F2680(_Unwind_Exception *a1)
{
  if (STACK[0x2C0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2C0]);
  }
  _Unwind_Resume(a1);
}

void sub_1000F26A0(uint64_t a1, int a2, uint64_t a3)
{
  int v30 = a2;
  uint64_t v28 = 0;
  uint64_t v27 = 0;
  uint64_t v29 = 0;
  v24[0] = 0;
  char v26 = 0;
  uint64_t v5 = sub_1000F4E80(a2, 1);
  *(void *)BOOL v31 = &v30;
  double v6 = &qword_102419000;
  if (!*((void *)sub_10010D968(a3, &v30, (uint64_t)&unk_101D0B290, (_DWORD **)v31) + 3))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022F8040);
    }
    int v13 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#CLConfig,handleCellInfoChange,received nil CellInfo from CT for inst %d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_26;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022F8040);
    }
    *(_DWORD *)BOOL v31 = 67109120;
    *(_DWORD *)&v31[4] = v30;
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLConfigAsset::handleCellInfoChange(SimInstance, std::unordered_map<SimInstance, CLCTCellInfo> &)", "%s\n", v14);
LABEL_62:
    if (v14 != buf) {
      free(v14);
    }
    goto LABEL_26;
  }
  sub_10010D904(v30, a3, &v27);
  sub_1000FA8B8(&v27, buf);
  sub_1000F399C((uint64_t)v24, (uint64_t)buf);
  sub_1000F3950((uint64_t)buf);
  if (!v26)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022F8040);
    }
    unsigned int v15 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#CLConfig,handleCellInfoChange,serving cell missing", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_26;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022F8040);
    }
    *(_WORD *)BOOL v31 = 0;
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLConfigAsset::handleCellInfoChange(SimInstance, std::unordered_map<SimInstance, CLCTCellInfo> &)", "%s\n", v14);
    goto LABEL_62;
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022F8040);
  }
  int v7 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 134218240;
    *(void *)&uint8_t buf[4] = 0x66FD0EB66FD0EB67 * ((v28 - v27) >> 3);
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = v30;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#CLConfig,handleCellInfoChange,cellcount,%lu,inst,%d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022F8040);
    }
    *(_DWORD *)BOOL v31 = 134218240;
    *(void *)&v31[4] = 0x66FD0EB66FD0EB67 * ((v28 - v27) >> 3);
    __int16 v32 = 1024;
    int v33 = v30;
    int v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLConfigAsset::handleCellInfoChange(SimInstance, std::unordered_map<SimInstance, CLCTCellInfo> &)", "%s\n", v23);
    if (v23 != buf) {
      free(v23);
    }
  }
  if (v25 < 3) {
    goto LABEL_11;
  }
  if (v25 == 9)
  {
    uint64_t v8 = *(unsigned int *)sub_1006E744C((uint64_t)v24);
    uint64_t v9 = sub_1006E744C((uint64_t)v24);
    goto LABEL_12;
  }
  if (v25 == 7)
  {
LABEL_11:
    uint64_t v8 = *(unsigned int *)sub_1006E6690((uint64_t)v24);
    uint64_t v9 = sub_1006E6690((uint64_t)v24);
LABEL_12:
    uint64_t v10 = *(unsigned int *)(v9 + 4);
    uint64_t v11 = 0xFFFFFFFFLL;
    uint64_t v12 = 0xFFFFFFFFLL;
    goto LABEL_28;
  }
  if (v25 - 3 <= 2)
  {
    uint64_t v12 = *(unsigned int *)(sub_1006E58D4((uint64_t)v24) + 32);
    uint64_t v11 = *(unsigned int *)(sub_1006E58D4((uint64_t)v24) + 36);
    goto LABEL_27;
  }
  if (v25 == 10)
  {
    uint64_t v8 = *(unsigned int *)sub_1006E8278((uint64_t)v24);
    uint64_t v9 = sub_1006E8278((uint64_t)v24);
    goto LABEL_12;
  }
  if (v25 == 6)
  {
    uint64_t v8 = *(unsigned int *)sub_100117098((uint64_t)v24);
    uint64_t v9 = sub_100117098((uint64_t)v24);
    goto LABEL_12;
  }
LABEL_26:
  uint64_t v11 = 0xFFFFFFFFLL;
  uint64_t v12 = 0xFFFFFFFFLL;
LABEL_27:
  uint64_t v10 = 0xFFFFFFFFLL;
  uint64_t v8 = 0xFFFFFFFFLL;
LABEL_28:
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022F8040);
  }
  int v16 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 68290307;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    __int16 v35 = 1026;
    int v36 = v30;
    __int16 v37 = 1025;
    int v38 = v8;
    __int16 v39 = 1025;
    int v40 = v10;
    __int16 v41 = 1025;
    int v42 = v12;
    __int16 v43 = 1025;
    int v44 = v11;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLConfig,handleCellInfoChange,operator mcc and mnc updated\", \"inst\":%{public}d, \"MCC\":%{private}d, \"MNC\":%{private}d, \"SID\":%{private}d, \"NID\":%{private}d}", buf, 0x30u);
  }
  for (unint64_t i = *(uint64_t **)(a1 + 272); i; unint64_t i = (uint64_t *)*i)
  {
    uint64_t v18 = i[3];
    if (v18)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v18 + 56))(v18, v5, v8, v10, v12, v11);
    }
    else
    {
      if (v6[192] != -1) {
        dispatch_once(&qword_102419600, &stru_1022F8040);
      }
      int v19 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        id v20 = [(__CFString *)sub_100DD1524(*((_DWORD *)i + 4)) UTF8String];
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,handleCellInfoChange,pointer for component was null", buf, 0xCu);
      }
      double v6 = &qword_102419000;
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022F8040);
        }
        id v21 = [(__CFString *)sub_100DD1524(*((_DWORD *)i + 4)) UTF8String];
        *(_DWORD *)BOOL v31 = 136446210;
        *(void *)&v31[4] = v21;
        double v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLConfigAsset::handleCellInfoChange(SimInstance, std::unordered_map<SimInstance, CLCTCellInfo> &)", "%s\n", v22);
        if (v22 != buf) {
          free(v22);
        }
        double v6 = &qword_102419000;
      }
    }
  }
  sub_1000F3950((uint64_t)v24);
  *(void *)int buf = &v27;
  sub_1000FA7C8((void ***)buf);
}

void sub_1000F2F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000F3950((uint64_t)va);
  STACK[0x320] = (unint64_t)&STACK[0x2E0];
  sub_1000FA7C8((void ***)&STACK[0x320]);
  _Unwind_Resume(a1);
}

char *sub_1000F2F9C(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  int v11 = a2;
  uint64_t v12 = &v11;
  uint64_t result = sub_1000F3008(a1 + 240, &v11, (uint64_t)&unk_101D0B290, &v12);
  *((_DWORD *)result + 12) = a3;
  *((_DWORD *)result + 13) = a4;
  *((_DWORD *)result + 14) = a5;
  *((_DWORD *)result + 15) = a6;
  return result;
}

char *sub_1000F3008(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      int v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          int v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  int v13 = (void *)(a1 + 16);
  int v11 = (char *)operator new(0x48uLL);
  *(void *)int v11 = 0;
  *((void *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *((void *)v11 + 6) = -1;
  *((void *)v11 + 7) = -1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100100330(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  id v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)int v11 = *v21;
LABEL_38:
    void *v21 = v11;
    goto LABEL_39;
  }
  *(void *)int v11 = *v13;
  void *v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*(void *)v11)
  {
    unint64_t v22 = *(void *)(*(void *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    id v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1000F3250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_10050E97C(v11, v10);
  _Unwind_Resume(a1);
}

void sub_1000F326C(uint64_t a1, int a2, uint64_t a3)
{
  int v20 = a2;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  uint64_t v19 = 0;
  v14[0] = 0;
  char v16 = 0;
  *(void *)id v21 = &v20;
  if (!*((void *)sub_10010D968(a3, &v20, (uint64_t)&unk_101D0B290, (_DWORD **)v21) + 3))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10230B640);
    }
    uint64_t v10 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#EmergCon,#ci,kCellInfoNotification,received nil CellInfo from CT for sim %d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_29;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10230B640);
    }
    *(_DWORD *)id v21 = 67109120;
    *(_DWORD *)&v21[4] = v20;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyController::processCellInfoNotification(SimInstance, std::unordered_map<SimInstance, CLCTCellInfo> &)", "%s\n", v11);
LABEL_44:
    if (v11 != buf) {
      free(v11);
    }
    goto LABEL_29;
  }
  sub_10010D904(v20, a3, &v17);
  sub_1000FA8B8(&v17, buf);
  sub_1000F399C((uint64_t)v14, (uint64_t)buf);
  sub_1000F3950((uint64_t)buf);
  if (v16)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10230B640);
    }
    uint64_t v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 134218240;
      *(void *)&uint8_t buf[4] = 0x66FD0EB66FD0EB67 * ((v18 - v17) >> 3);
      __int16 v25 = 1024;
      int v26 = v20;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#EmergCon,#ci,kCellInfoNotification,cellcount,%lu,sim %d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10230B640);
      }
      *(_DWORD *)id v21 = 134218240;
      *(void *)&v21[4] = 0x66FD0EB66FD0EB67 * ((v18 - v17) >> 3);
      __int16 v22 = 1024;
      int v23 = v20;
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyController::processCellInfoNotification(SimInstance, std::unordered_map<SimInstance, CLCTCellInfo> &)", "%s\n", v13);
      if (v13 != buf) {
        free(v13);
      }
    }
    sub_100116824(*(void *)(a1 + 688), v20, (uint64_t)v14);
    unsigned int v6 = v15;
    *(void *)id v21 = &v20;
    *((_DWORD *)sub_1000F3C48(a1 + 272, &v20, (uint64_t)&unk_101D0B290, (_DWORD **)v21) + 5) = v6;
    unint64_t v7 = *(_DWORD ***)(a1 + 672);
    if (v7 && *v7) {
      sub_1001146DC(*v7, (uint64_t)v14);
    }
    if (v15 >= 3)
    {
      if (v15 == 9)
      {
        int v8 = *(_DWORD *)sub_1006E744C((uint64_t)v14);
        *(void *)id v21 = &v20;
        uint8x8_t v9 = sub_1000F3C48(a1 + 432, &v20, (uint64_t)&unk_101D0B290, (_DWORD **)v21);
        goto LABEL_15;
      }
      if (v15 != 7)
      {
        if (v15 - 3 <= 2)
        {
          *(void *)id v21 = &v20;
          *((_DWORD *)sub_1000F3C48(a1 + 432, &v20, (uint64_t)&unk_101D0B290, (_DWORD **)v21) + 5) = -1;
          goto LABEL_29;
        }
        if (v15 == 10)
        {
          int v8 = *(_DWORD *)sub_1006E8278((uint64_t)v14);
          *(void *)id v21 = &v20;
          uint8x8_t v9 = sub_1000F3C48(a1 + 432, &v20, (uint64_t)&unk_101D0B290, (_DWORD **)v21);
        }
        else
        {
          if (v15 != 6) {
            goto LABEL_29;
          }
          int v8 = *(_DWORD *)sub_100117098((uint64_t)v14);
          *(void *)id v21 = &v20;
          uint8x8_t v9 = sub_1000F3C48(a1 + 432, &v20, (uint64_t)&unk_101D0B290, (_DWORD **)v21);
        }
        goto LABEL_15;
      }
    }
    int v8 = *(_DWORD *)sub_1006E6690((uint64_t)v14);
    *(void *)id v21 = &v20;
    uint8x8_t v9 = sub_1000F3C48(a1 + 432, &v20, (uint64_t)&unk_101D0B290, (_DWORD **)v21);
LABEL_15:
    *((_DWORD *)v9 + 5) = v8;
    goto LABEL_29;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10230B640);
  }
  unint64_t v12 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#EmergCon,#ci,kCellInfoNotification,serving cell missing", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10230B640);
    }
    *(_WORD *)id v21 = 0;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyController::processCellInfoNotification(SimInstance, std::unordered_map<SimInstance, CLCTCellInfo> &)", "%s\n", v11);
    goto LABEL_44;
  }
LABEL_29:
  sub_1000F3950((uint64_t)v14);
  *(void *)int buf = &v17;
  sub_1000FA7C8((void ***)buf);
}

void sub_1000F390C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000F3950((uint64_t)va);
  STACK[0x310] = (unint64_t)&STACK[0x2D0];
  sub_1000FA7C8((void ***)&STACK[0x310]);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F3950(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 696))
  {
    if (*(char *)(a1 + 343) < 0) {
      operator delete(*(void **)(a1 + 320));
    }
    uint64_t v2 = *(void **)(a1 + 88);
    if (v2)
    {
      *(void *)(a1 + 96) = v2;
      operator delete(v2);
    }
  }
  return a1;
}

__n128 sub_1000F399C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 696) == *(unsigned __int8 *)(a2 + 696))
  {
    if (*(unsigned char *)(a1 + 696))
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      long long v4 = *(_OWORD *)(a2 + 16);
      long long v5 = *(_OWORD *)(a2 + 32);
      long long v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)(a1 + 48) = v6;
      *(_OWORD *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
      sub_1000F4EBC(a1 + 88, (__n128 *)(a2 + 88));
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      long long v7 = *(_OWORD *)(a2 + 128);
      long long v8 = *(_OWORD *)(a2 + 144);
      long long v9 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v9;
      *(_OWORD *)(a1 + 128) = v7;
      *(_OWORD *)(a1 + 144) = v8;
      long long v10 = *(_OWORD *)(a2 + 192);
      long long v11 = *(_OWORD *)(a2 + 208);
      long long v12 = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 240) = v12;
      *(_OWORD *)(a1 + 192) = v10;
      *(_OWORD *)(a1 + 208) = v11;
      long long v13 = *(_OWORD *)(a2 + 256);
      long long v14 = *(_OWORD *)(a2 + 272);
      long long v15 = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a1 + 300) = *(_OWORD *)(a2 + 300);
      *(_OWORD *)(a1 + 272) = v14;
      *(_OWORD *)(a1 + 288) = v15;
      *(_OWORD *)(a1 + 256) = v13;
      char v16 = (void **)(a1 + 320);
      if (*(char *)(a1 + 343) < 0) {
        operator delete(*v16);
      }
      long long v17 = *(_OWORD *)(a2 + 320);
      *(void *)(a1 + 336) = *(void *)(a2 + 336);
      *(_OWORD *)char v16 = v17;
      *(unsigned char *)(a2 + 343) = 0;
      *(unsigned char *)(a2 + 320) = 0;
      long long v19 = *(_OWORD *)(a2 + 424);
      long long v18 = *(_OWORD *)(a2 + 440);
      long long v20 = *(_OWORD *)(a2 + 408);
      *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
      *(_OWORD *)(a1 + 408) = v20;
      *(_OWORD *)(a1 + 424) = v19;
      *(_OWORD *)(a1 + 440) = v18;
      long long v22 = *(_OWORD *)(a2 + 360);
      long long v21 = *(_OWORD *)(a2 + 376);
      *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
      *(_OWORD *)(a1 + 360) = v22;
      *(_OWORD *)(a1 + 376) = v21;
      long long v23 = *(_OWORD *)(a2 + 456);
      long long v24 = *(_OWORD *)(a2 + 472);
      long long v25 = *(_OWORD *)(a2 + 488);
      *(_DWORD *)(a1 + 504) = *(_DWORD *)(a2 + 504);
      *(_OWORD *)(a1 + 472) = v24;
      *(_OWORD *)(a1 + 488) = v25;
      *(_OWORD *)(a1 + 456) = v23;
      long long v26 = *(_OWORD *)(a2 + 512);
      long long v27 = *(_OWORD *)(a2 + 528);
      long long v28 = *(_OWORD *)(a2 + 560);
      *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
      *(_OWORD *)(a1 + 560) = v28;
      *(_OWORD *)(a1 + 512) = v26;
      *(_OWORD *)(a1 + 528) = v27;
      long long v29 = *(_OWORD *)(a2 + 576);
      long long v30 = *(_OWORD *)(a2 + 592);
      long long v31 = *(_OWORD *)(a2 + 624);
      *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
      *(_OWORD *)(a1 + 624) = v31;
      *(_OWORD *)(a1 + 576) = v29;
      *(_OWORD *)(a1 + 592) = v30;
      __n128 result = *(__n128 *)(a2 + 640);
      long long v33 = *(_OWORD *)(a2 + 656);
      long long v34 = *(_OWORD *)(a2 + 672);
      *(_DWORD *)(a1 + 688) = *(_DWORD *)(a2 + 688);
      *(_OWORD *)(a1 + 656) = v33;
      *(_OWORD *)(a1 + 672) = v34;
      *(__n128 *)(a1 + 640) = result;
    }
  }
  else if (*(unsigned char *)(a1 + 696))
  {
    sub_100DD88E4(a1);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    long long v35 = *(_OWORD *)(a2 + 16);
    long long v36 = *(_OWORD *)(a2 + 32);
    long long v37 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
    *(_OWORD *)(a1 + 32) = v36;
    *(_OWORD *)(a1 + 48) = v37;
    *(_OWORD *)(a1 + 16) = v35;
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 88) = 0;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 88) = 0;
    long long v38 = *(_OWORD *)(a2 + 176);
    long long v40 = *(_OWORD *)(a2 + 128);
    long long v39 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v38;
    *(_OWORD *)(a1 + 128) = v40;
    *(_OWORD *)(a1 + 144) = v39;
    long long v41 = *(_OWORD *)(a2 + 240);
    long long v43 = *(_OWORD *)(a2 + 192);
    long long v42 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v41;
    *(_OWORD *)(a1 + 192) = v43;
    *(_OWORD *)(a1 + 208) = v42;
    long long v45 = *(_OWORD *)(a2 + 272);
    long long v44 = *(_OWORD *)(a2 + 288);
    long long v46 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 300) = *(_OWORD *)(a2 + 300);
    *(_OWORD *)(a1 + 272) = v45;
    *(_OWORD *)(a1 + 288) = v44;
    *(_OWORD *)(a1 + 256) = v46;
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    long long v47 = *(_OWORD *)(a2 + 320);
    *(void *)(a1 + 336) = *(void *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = v47;
    *(void *)(a2 + 328) = 0;
    *(void *)(a2 + 336) = 0;
    *(void *)(a2 + 320) = 0;
    long long v48 = *(_OWORD *)(a2 + 440);
    long long v50 = *(_OWORD *)(a2 + 392);
    long long v49 = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(a1 + 440) = v48;
    *(_OWORD *)(a1 + 392) = v50;
    *(_OWORD *)(a1 + 408) = v49;
    long long v51 = *(_OWORD *)(a2 + 344);
    long long v52 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v52;
    *(_OWORD *)(a1 + 344) = v51;
    long long v54 = *(_OWORD *)(a2 + 472);
    long long v53 = *(_OWORD *)(a2 + 488);
    long long v55 = *(_OWORD *)(a2 + 456);
    *(_DWORD *)(a1 + 504) = *(_DWORD *)(a2 + 504);
    *(_OWORD *)(a1 + 472) = v54;
    *(_OWORD *)(a1 + 488) = v53;
    *(_OWORD *)(a1 + 456) = v55;
    long long v56 = *(_OWORD *)(a2 + 512);
    long long v57 = *(_OWORD *)(a2 + 528);
    long long v58 = *(_OWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 560) = v58;
    *(_OWORD *)(a1 + 512) = v56;
    *(_OWORD *)(a1 + 528) = v57;
    long long v59 = *(_OWORD *)(a2 + 576);
    long long v60 = *(_OWORD *)(a2 + 592);
    long long v61 = *(_OWORD *)(a2 + 624);
    *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
    *(_OWORD *)(a1 + 624) = v61;
    *(_OWORD *)(a1 + 576) = v59;
    *(_OWORD *)(a1 + 592) = v60;
    __n128 result = *(__n128 *)(a2 + 640);
    long long v62 = *(_OWORD *)(a2 + 656);
    long long v63 = *(_OWORD *)(a2 + 672);
    *(_DWORD *)(a1 + 688) = *(_DWORD *)(a2 + 688);
    *(_OWORD *)(a1 + 656) = v62;
    *(_OWORD *)(a1 + 672) = v63;
    *(__n128 *)(a1 + 640) = result;
    *(unsigned char *)(a1 + 696) = 1;
  }
  return result;
}

void *sub_1000F3C48(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    long long v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      long long v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          long long v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  long long v11 = operator new(0x18uLL);
  *long long v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100100330(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  long long v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *long long v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *long long v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    long long v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1000F3E54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000F3E68(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4)
{
  if (!*a4) {
    return;
  }
  unint64_t v7 = (const void *)sub_1000FA17C(a3);
  if (CFEqual(v7, @"kBundleChangeNotification"))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022F8040);
    }
    unint64_t v8 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#CLConfig,received CLTelephonyService_Type::kBundleChangeNotification", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022F8040);
      }
      LOWORD(v32) = 0;
      long long v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLConfigAsset::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
    sub_100DD1C1C(a1, *a4);
    return;
  }
  uint8x8_t v9 = (const void *)sub_1000FA17C(a3);
  if (CFEqual(v9, @"kDefaultBundleChangeNotification"))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022F8040);
    }
    long long v10 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#CLConfig,received CLTelephonyService_Type::kDefaultBundleChangeNotification", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022F8040);
      }
      LOWORD(v32) = 0;
      long long v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLConfigAsset::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    sub_100DD1E48(a1, *a4);
    return;
  }
  long long v11 = (const void *)sub_1000FA17C(a3);
  if (!CFEqual(v11, @"kCellInfoNotification"))
  {
    float v13 = (const void *)sub_1000FA17C(a3);
    if (CFEqual(v13, @"kSubscriberMccAndMncNotification"))
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022F8040);
      }
      float v14 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#CLConfig,received CLTelephonyService_Type::kSubscriberMccAndMncNotification", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022F8040);
        }
        LOWORD(v32) = 0;
        long long v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLConfigAsset::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      long long v32 = 0u;
      long long v33 = 0u;
      int v34 = 1065353216;
      if (sub_1000D1F9C((void *)*a4, (uint64_t)&v32))
      {
        v31[0] = 0;
        *(void *)int buf = v31;
        BOOL v15 = sub_1000D22E4((uint64_t)&v32, v31, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        sub_100DD2074(a1, 0, *(void *)((char *)v15 + 20), *((_DWORD *)v15 + 7));
        if (*(unsigned char *)(a1 + 296))
        {
          v31[0] = 1;
          *(void *)int buf = v31;
          unint64_t v16 = sub_1000D22E4((uint64_t)&v32, v31, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
          sub_100DD2074(a1, 1, *(void *)((char *)v16 + 20), *((_DWORD *)v16 + 7));
        }
LABEL_61:
        sub_1000D7D80((uint64_t)&v32);
        return;
      }
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022F8040);
      }
      long long v22 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#CLConfig,kSubscriberMccAndMncNotification,error fetching MCC and MNC", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_61;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419600 == -1)
      {
LABEL_88:
        LOWORD(v31[0]) = 0;
        long long v30 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLConfigAsset::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v30);
        if (v30 != (char *)buf) {
          free(v30);
        }
        goto LABEL_61;
      }
    }
    else
    {
      size_t v18 = (const void *)sub_1000FA17C(a3);
      if (!CFEqual(v18, @"kServingMccAndMncNotification")) {
        return;
      }
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022F8040);
      }
      uint64_t v19 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#CLConfig,received CLTelephonyService_Type::kServingMccAndMncNotification", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022F8040);
        }
        LOWORD(v32) = 0;
        long long v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLConfigAsset::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
      }
      long long v32 = 0u;
      long long v33 = 0u;
      int v34 = 1065353216;
      if (sub_1000D1F9C((void *)*a4, (uint64_t)&v32))
      {
        v31[0] = 0;
        *(void *)int buf = v31;
        long long v20 = sub_1000D22E4((uint64_t)&v32, v31, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        sub_1000F4AE4(a1, 0, *(void *)((char *)v20 + 20), *((_DWORD *)v20 + 7));
        if (*(unsigned char *)(a1 + 296))
        {
          v31[0] = 1;
          *(void *)int buf = v31;
          unint64_t v21 = sub_1000D22E4((uint64_t)&v32, v31, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
          sub_1000F4AE4(a1, 1, *(void *)((char *)v21 + 20), *((_DWORD *)v21 + 7));
        }
        goto LABEL_61;
      }
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022F8040);
      }
      long long v23 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#CLConfig,kServingMccAndMncNotification,error fetching MCC and MNC", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_61;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419600 == -1) {
        goto LABEL_88;
      }
    }
    dispatch_once(&qword_102419600, &stru_1022F8040);
    goto LABEL_88;
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022F8040);
  }
  unint64_t v12 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#CLConfig,received CLTelephonyService_Type::kCellInfoNotification", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022F8040);
    }
    LOWORD(v32) = 0;
    long long v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLConfigAsset::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  long long v32 = 0u;
  long long v33 = 0u;
  int v34 = 1065353216;
  if (sub_1000FF5A4((void *)*a4, (uint64_t)&v32))
  {
    sub_1000F26A0(a1, 0, (uint64_t)&v32);
    if (sub_1000FFBA8()) {
      sub_1000F26A0(a1, 1, (uint64_t)&v32);
    }
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022F8040);
    }
    unint64_t v17 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#CLConfig,handleCellInfoChange,error fetching cell info", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022F8040);
      }
      LOWORD(v31[0]) = 0;
      long long v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLConfigAsset::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
  }
  sub_1000FF568((uint64_t)&v32);
}

void sub_1000F4A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000D7D80((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000F4AE4(uint64_t a1, int a2, unint64_t a3, char a4)
{
  unint64_t v8 = HIDWORD(a3);
  uint64_t v9 = sub_1000F4E80(a2, 1);
  if (a3 == -1 && v8 == -1)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022F8040);
    }
    long long v10 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 68289282;
      *(_DWORD *)uint64_t v19 = 0;
      *(_WORD *)&v19[4] = 2082;
      *(void *)&v19[6] = "";
      __int16 v20 = 1026;
      int v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLConfig,handleServingMccMncChange,operator mcc and mnc are invalid\", \"inst\":%{public}d}", buf, 0x18u);
    }
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022F8040);
    }
    uint64_t v11 = a4 & 1;
    unint64_t v12 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 68290050;
      *(_DWORD *)uint64_t v19 = 0;
      *(_WORD *)&v19[4] = 2082;
      *(void *)&v19[6] = "";
      __int16 v20 = 1026;
      int v21 = a2;
      __int16 v22 = 1026;
      int v23 = a3;
      __int16 v24 = 1026;
      int v25 = v8;
      __int16 v26 = 1026;
      int v27 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLConfig,handleServingMccMncChange,operator mcc and mnc updated\", \"inst\":%{public}d, \"MCC\":%{public}d, \"MNC\":%{public}d, \"is3DigitMnc\":%{public}hhd}", buf, 0x2Au);
    }
    for (unint64_t i = *(uint64_t **)(a1 + 272); i; unint64_t i = (uint64_t *)*i)
    {
      uint64_t v14 = i[3];
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t))(*(void *)v14 + 64))(v14, v9, a3, v8, v11);
      }
      else
      {
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022F8040);
        }
        BOOL v15 = qword_102419608;
        if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
        {
          id v16 = [(__CFString *)sub_100DD1524(*((_DWORD *)i + 4)) UTF8String];
          *(_DWORD *)int buf = 136446210;
          *(void *)uint64_t v19 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,handleServingMccMncChange,pointer for component was null", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419600 != -1) {
            dispatch_once(&qword_102419600, &stru_1022F8040);
          }
          [(__CFString *)sub_100DD1524(*((_DWORD *)i + 4)) UTF8String];
          unint64_t v17 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLConfigAsset::handleServingMccMncChange(SimInstance, CLCTMccAndMnc)", "%s\n", v17);
          if (v17 != (char *)buf) {
            free(v17);
          }
        }
      }
    }
  }
}

uint64_t sub_1000F4E80(int a1, int a2)
{
  if (a2 == 1) {
    unsigned int v2 = 3;
  }
  else {
    unsigned int v2 = 2;
  }
  if (a2 == 255) {
    unsigned int v2 = 255;
  }
  int v3 = a2 == 1;
  if (a2 == 255) {
    int v3 = 255;
  }
  if (a1) {
    unsigned int v4 = 255;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a1 == 1) {
    return v2;
  }
  else {
    return v4;
  }
}

__n128 sub_1000F4EBC(uint64_t a1, __n128 *a2)
{
  unsigned int v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t **sub_1000F4F10(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = a1 + 1;
  long long v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        long long v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      long long v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    sub_1000EDF90(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_1000F4FD4(uint64_t a1, long long *a2, uint64_t a3, int a4)
{
  [*(id *)(a1 + 8) silo];
  uint64_t result = sub_1000F564C(a1, (uint64_t)a2);
  if (result)
  {
    if (sub_1000F50EC(a1, (uint64_t)a2, a4))
    {
      return 0;
    }
    else
    {
      long long v9 = *a2;
      *(_OWORD *)(a1 + 44) = a2[1];
      *(_OWORD *)(a1 + 28) = v9;
      long long v10 = a2[2];
      long long v11 = a2[3];
      long long v12 = a2[4];
      *(_OWORD *)(a1 + 108) = a2[5];
      *(_OWORD *)(a1 + 92) = v12;
      *(_OWORD *)(a1 + 76) = v11;
      *(_OWORD *)(a1 + 60) = v10;
      long long v13 = a2[6];
      long long v14 = a2[7];
      long long v15 = a2[8];
      *(_OWORD *)(a1 + 168) = *(long long *)((char *)a2 + 140);
      *(_OWORD *)(a1 + 156) = v15;
      *(_OWORD *)(a1 + 140) = v14;
      *(_OWORD *)(a1 + 124) = v13;
      memcpy((void *)(a1 + 184), (const void *)a3, 0x201uLL);
      uint64_t v16 = *(void *)(a3 + 520);
      uint64_t v17 = *(void *)(a3 + 528);
      if (v17) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(a1 + 704) = v16;
      size_t v18 = *(std::__shared_weak_count **)(a1 + 712);
      *(void *)(a1 + 712) = v17;
      if (v18) {
        sub_1000DB0A0(v18);
      }
      long long v19 = *(_OWORD *)(a3 + 536);
      long long v20 = *(_OWORD *)(a3 + 568);
      *(_OWORD *)(a1 + 736) = *(_OWORD *)(a3 + 552);
      *(_OWORD *)(a1 + 752) = v20;
      *(_OWORD *)(a1 + 720) = v19;
      long long v21 = *(_OWORD *)(a3 + 584);
      long long v22 = *(_OWORD *)(a3 + 600);
      long long v23 = *(_OWORD *)(a3 + 616);
      *(void *)(a1 + 813) = *(void *)(a3 + 629);
      *(_OWORD *)(a1 + 784) = v22;
      *(_OWORD *)(a1 + 800) = v23;
      *(_OWORD *)(a1 + 768) = v21;
      return 1;
    }
  }
  return result;
}

uint64_t sub_1000F50EC(uint64_t a1, uint64_t a2, int a3)
{
  [*(id *)(a1 + 8) silo];
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  double v7 = *(double *)(a1 + 104);
  if (Current < v7)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231F568);
    }
    unint64_t v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 104);
      *(_DWORD *)int buf = 134217984;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#Warning Last confident location is in future, timestamp,%.03lf", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231F568);
      }
      long long v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLLastConfidentLocation::isPreviousLocationPreferred(const CLDaemonLocation &, BOOL)", "%s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
    }
    *(_DWORD *)(a1 + 28) = 0xFFFF;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = xmmword_101D1C320;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a1 + 64) = _Q0;
    *(_OWORD *)(a1 + 80) = _Q0;
    *(_OWORD *)(a1 + 96) = _Q0;
    *(_DWORD *)(a1 + 112) = 0;
    *(void *)(a1 + 116) = 0xBFF0000000000000;
    *(_OWORD *)(a1 + 124) = 0u;
    *(_DWORD *)(a1 + 140) = 0;
    *(void *)(a1 + 144) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 152) = 0x7FFFFFFF;
    *(void *)(a1 + 156) = 0;
    *(_OWORD *)(a1 + 164) = 0u;
    *(unsigned char *)(a1 + 180) = 0;
    sub_1000DBC34(buf);
    memcpy((void *)(a1 + 184), buf, 0x201uLL);
    long long v14 = v34;
    long long v34 = 0u;
    long long v15 = *(std::__shared_weak_count **)(a1 + 712);
    *(_OWORD *)(a1 + 704) = v14;
    if (v15)
    {
      sub_1000DB0A0(v15);
      uint64_t v16 = (std::__shared_weak_count *)*((void *)&v34 + 1);
      long long v17 = v40[0];
      *(_OWORD *)(a1 + 784) = v39;
      *(_OWORD *)(a1 + 800) = v17;
      *(void *)(a1 + 813) = *(void *)((char *)v40 + 13);
      long long v18 = v36;
      *(_OWORD *)(a1 + 720) = v35;
      *(_OWORD *)(a1 + 736) = v18;
      long long v19 = v38;
      *(_OWORD *)(a1 + 752) = v37;
      *(_OWORD *)(a1 + 768) = v19;
      if (v16) {
        sub_1000DB0A0(v16);
      }
    }
    else
    {
      long long v20 = v40[0];
      *(_OWORD *)(a1 + 784) = v39;
      *(_OWORD *)(a1 + 800) = v20;
      *(void *)(a1 + 813) = *(void *)((char *)v40 + 13);
      long long v21 = v36;
      *(_OWORD *)(a1 + 720) = v35;
      *(_OWORD *)(a1 + 736) = v21;
      long long v22 = v38;
      *(_OWORD *)(a1 + 752) = v37;
      *(_OWORD *)(a1 + 768) = v22;
    }
    double v7 = *(double *)(a1 + 104);
  }
  double v23 = *(double *)(a2 + 76);
  if (v23 < v7)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231F568);
    }
    __int16 v24 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v25 = *(void *)(a2 + 76);
      uint64_t v26 = *(void *)(a1 + 104);
      *(_DWORD *)int buf = 134218240;
      *(void *)&uint8_t buf[4] = v25;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&unsigned char buf[14] = v26;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Skipping new location with an older timestamp,%.03lf,cached,%.03lf", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 == -1)
    {
LABEL_41:
      long long v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLLastConfidentLocation::isPreviousLocationPreferred(const CLDaemonLocation &, BOOL)", "%s\n", v32);
      if (v32 != (char *)buf) {
        free(v32);
      }
      return 1;
    }
LABEL_43:
    dispatch_once(&qword_102419630, &stru_10231F568);
    goto LABEL_41;
  }
  if (*(double *)(a1 + 48) < 65.0)
  {
    int v28 = *(double *)(a2 + 20) >= 65.0 ? 1 : a3;
    if (v23 < v7 + 10.0 && v28 != 0)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231F568);
      }
      long long v30 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "Skipping new location, since having recent more confident location", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1) {
        goto LABEL_41;
      }
      goto LABEL_43;
    }
  }
  return 0;
}

uint64_t sub_1000F564C(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 8) silo];
  uint64_t result = 0;
  double v4 = *(double *)(a2 + 20);
  if (v4 > 100.0 || v4 < 0.0) {
    return result;
  }
  if (!sub_1000EF68C(*(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231F568);
    }
    double v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Skipping new location with invalid coordinate", buf, 2u);
    }
    BOOL v8 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v8) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 == -1) {
      goto LABEL_34;
    }
    goto LABEL_39;
  }
  if (!sub_1000EF68C(*(double *)(a2 + 100), *(double *)(a2 + 108)))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231F568);
    }
    uint64_t v9 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Skipping new location with invalid rawCoordinate", buf, 2u);
    }
    BOOL v10 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v10) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 == -1) {
      goto LABEL_34;
    }
    goto LABEL_39;
  }
  if (!sub_1000EF668(*(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (!sub_1000EF668(*(double *)(a2 + 100), *(double *)(a2 + 108))) {
      return 1;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231F568);
    }
    long long v11 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Skipping new location with rawCoordinate in null-island", buf, 2u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v12) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 == -1)
    {
LABEL_34:
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLLastConfidentLocation::isQualifiedAsConfident(const CLDaemonLocation &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
      return 0;
    }
LABEL_39:
    dispatch_once(&qword_102419630, &stru_10231F568);
    goto LABEL_34;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231F568);
  }
  long long v5 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Skipping new location with coordinate in null-island", buf, 2u);
  }
  BOOL v6 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 == -1) {
      goto LABEL_34;
    }
    goto LABEL_39;
  }
  return result;
}

uint64_t sub_1000F5AE4(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 108)) {
    return 0xFFFFFFFFLL;
  }
  double v7 = (int *)v8;
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v9 = a2;
  int v3 = (unsigned int *)(a1 + 104);
  ++*(_DWORD *)(a1 + 104);
  BOOL v10 = (_DWORD *)(a1 + 104);
  double v4 = sub_10008A098((uint64_t **)(a1 + 80), (int *)(a1 + 104), (uint64_t)&unk_101D0B290, &v10);
  if (v4 + 5 != (uint64_t **)&v7) {
    sub_1000F5C04(v4 + 5, v7, (int *)v8);
  }
  long long v5 = (void *)v8[0];
  v4[8] = v9;
  uint64_t v2 = *v3;
  sub_1000F5BB0((uint64_t)&v7, v5);
  return v2;
}

void sub_1000F5B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_1000F5BB0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1000F5BB0(a1, *a2);
    sub_1000F5BB0(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t **sub_1000F5C04(uint64_t **result, int *a2, int *a3)
{
  long long v5 = result;
  if (result[2])
  {
    BOOL v6 = *result;
    double v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    void v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      BOOL v8 = (uint64_t *)v6[1];
    }
    else {
      BOOL v8 = v6;
    }
    long long v14 = result;
    long long v15 = v8;
    uint64_t v16 = v8;
    if (v8)
    {
      long long v15 = sub_1002FABD8((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = v9[7];
          sub_100446F18(v5, (uint64_t)v8);
          BOOL v8 = v15;
          uint64_t v16 = v15;
          if (v15) {
            long long v15 = sub_1002FABD8((uint64_t)v15);
          }
          BOOL v10 = (int *)*((void *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              BOOL v10 = *(int **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (int *)*((void *)v9 + 2);
              BOOL v11 = *(void *)a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)sub_1002FAC2C((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_1000288D0(v5, a2 + 7);
      BOOL v12 = (int *)*((void *)a2 + 1);
      if (v12)
      {
        do
        {
          long long v13 = v12;
          BOOL v12 = *(int **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          long long v13 = (int *)*((void *)a2 + 2);
          BOOL v11 = *(void *)v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1000F5D54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002FAC2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000F5D68(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *a2;
  sub_1000EF97C((uint64_t)v6, a3);
  [a4 onLeechedNotification:v5 withData:v6];

  if (v11) {
    sub_1000DB0A0(v11);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
}

void sub_1000F5DF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000F5E0C(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *a2;
  sub_1000EF97C((uint64_t)v6, a3);
  [a4 onLocationNotification:v5 data:v6];

  if (v11) {
    sub_1000DB0A0(v11);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
}

void sub_1000F5E9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000F5EB0(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *a2;
  sub_1000EF97C((uint64_t)v6, a3);
  [a4 onLocationNotification:v5 data:v6];

  if (v11) {
    sub_1000DB0A0(v11);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
}

void sub_1000F5F40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000F5F54(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *a2;
  sub_1000EF97C((uint64_t)v6, a3);
  [a4 onLocationNotification:v5 data:v6];

  if (v11) {
    sub_1000DB0A0(v11);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
}

void sub_1000F5FE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1000F5FF8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onLocationNotification:a2 data:a3];
}

id sub_1000F6008(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onLocationNotification:a2 data:a3];
}

void sub_1000F6018(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *a2;
  sub_1000EF97C((uint64_t)v6, a3);
  [a4 onLocationNotification:v5 data:v6];

  if (v11) {
    sub_1000DB0A0(v11);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
}

void sub_1000F60A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000F60BC(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *a2;
  sub_1000EF97C((uint64_t)v6, a3);
  [a4 onLocationNotification:v5 data:v6];

  if (v11) {
    sub_1000DB0A0(v11);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
}

void sub_1000F614C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000F6160(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *a2;
  sub_1000EF97C((uint64_t)v6, a3);
  [a4 onLocationNotification:v5 data:v6];

  if (v11) {
    sub_1000DB0A0(v11);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
}

void sub_1000F61F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1000F6204(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onLocationNotification:a2 data:a3];
}

void sub_1000F6214(uint64_t a1, uint64_t a2, int *a3, void **a4)
{
  double v7 = *a4;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F9C68);
  }
  BOOL v8 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v9 = (const __CFString *)sub_1000FA17C(a3);
    sub_1000FECE0(v9, (uint64_t)__p);
    char v10 = v62 >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = v10;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = v7 != 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "@CellFlow, ctnotify, %{public}s, havedata, %{public}d", buf, 0x12u);
    if (SHIBYTE(v62) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F9C68);
    }
    CFStringRef v44 = (const __CFString *)sub_1000FA17C(a3);
    sub_1000FECE0(v44, (uint64_t)buf);
    if ((buf[23] & 0x80u) == 0) {
      long long v45 = buf;
    }
    else {
      long long v45 = *(uint8_t **)buf;
    }
    LODWORD(v59[0]) = 136446466;
    *(uint64_t *)((char *)v59 + 4) = (uint64_t)v45;
    WORD2(v59[1]) = 1026;
    *(_DWORD *)((char *)&v59[1] + 6) = v7 != 0;
    long long v46 = (char *)_os_log_send_and_compose_impl();
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v46);
    if (v46 != __p) {
      free(v46);
    }
  }
  if (sub_1000FC450())
  {
    sub_1000E9354(__p);
    uint64_t v11 = sub_1000FA17C(a3);
    sub_1001074FC((uint64_t)__p, "telNotification", v11);
    sub_1000FC45C((uint64_t)__p, (uint64_t)"telNotification");
    sub_10013F3C4(__p);
  }
  if (v7)
  {
    id v12 = (const void *)sub_1000FA17C(a3);
    if (CFEqual(v12, @"kCellInfoNotification")) {
      ++*(_DWORD *)(a1 + 2624);
    }
    long long v13 = (const void *)sub_1000FA17C(a3);
    if (CFEqual(v13, @"kCellMonitorRefreshResultNotification")) {
      ++*(_DWORD *)(a1 + 2628);
    }
  }
  if (sub_1001198CC() != 1)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F9C68);
    }
    uint64_t v16 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__n128 __p = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "CellFlow, outcome, LS Off", __p, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F9C68);
    }
    *(_WORD *)int buf = 0;
    long long v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v17);
LABEL_114:
    if (v17 != __p) {
      free(v17);
    }
    return;
  }
  long long v14 = (const void *)sub_1000FA17C(a3);
  if (CFEqual(v14, @"kCLTelephonyServiceDisconnectedNotification"))
  {
    sub_100036190((void *)a1, (void **)"disconnect");
    (*(void (**)(uint64_t, const char *))(*(void *)a1 + 384))(a1, "disconnect");
LABEL_20:
    long long v15 = "x";
    goto LABEL_21;
  }
  long long v20 = (const void *)sub_1000FA17C(a3);
  if (CFEqual(v20, @"kCellInfoNotification"))
  {
    if (v7)
    {
      memset(v59, 0, 24);
      memset(buf, 0, sizeof(buf));
      int v58 = 1065353216;
      long long v15 = "x";
      if (sub_1000FF5A4(*a4, (uint64_t)buf))
      {
        *(_DWORD *)__n128 __p = 0;
        uint64_t v52 = (uint64_t)__p;
        uint64_t v21 = *((void *)sub_1000FF948((uint64_t)buf, (int *)__p, (uint64_t)&unk_101D0B290, (_DWORD **)&v52) + 3);
        sub_10010D904(0, (uint64_t)buf, v59);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022F9C68);
        }
        long long v22 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)__n128 __p = 0x104020300;
          *(_WORD *)&__p[8] = 2050;
          *(void *)&__p[10] = 0x66FD0EB66FD0EB67 * ((v59[1] - v59[0]) >> 3);
          __int16 v61 = 1026;
          int v62 = v21 == 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "@CellFlow, infonotify, inst, %{public}d, cells, %{public}lu, empty, %{public}d", __p, 0x18u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022F9C68);
          }
          uint64_t v52 = 0x104020300;
          __int16 v53 = 2050;
          uint64_t v54 = 0x66FD0EB66FD0EB67 * ((v59[1] - v59[0]) >> 3);
          __int16 v55 = 1026;
          BOOL v56 = v21 == 0;
          long long v48 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v48);
          if (v48 != __p) {
            free(v48);
          }
        }
        uint64_t v23 = *(void *)(a1 + 2504);
        uint64_t v24 = *(void *)(a1 + 2496);
        memset(v51, 0, sizeof(v51));
        sub_1000F71D8(v51, v59[0], v59[1], 0x66FD0EB66FD0EB67 * ((v59[1] - v59[0]) >> 3));
        sub_1000FB548(v51, 0, (uint64_t *)(a1 + 2472), (uint64_t *)(a1 + 2496));
        *(void *)__n128 __p = v51;
        sub_1000FA7C8((void ***)__p);
        if (v21) {
          BOOL v25 = 0;
        }
        else {
          BOOL v25 = v23 == v24;
        }
        if (!v25) {
          long long v15 = "cellinfo";
        }
        uint64_t v27 = v59[0];
        for (uint64_t i = v59[1]; i != v27; sub_1000FA860((uint64_t)&v59[2], i))
          i -= 696;
        v59[1] = v27;
        if (sub_1000FFBA8())
        {
          *(_DWORD *)__n128 __p = 1;
          uint64_t v52 = (uint64_t)__p;
          uint64_t v28 = *((void *)sub_1000FF948((uint64_t)buf, (int *)__p, (uint64_t)&unk_101D0B290, (_DWORD **)&v52) + 3);
          sub_10010D904(1, (uint64_t)buf, v59);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022F9C68);
          }
          long long v29 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
          {
            *(void *)__n128 __p = 0x204020300;
            *(_WORD *)&__p[8] = 2050;
            *(void *)&__p[10] = 0x66FD0EB66FD0EB67 * ((v59[1] - v59[0]) >> 3);
            __int16 v61 = 1026;
            int v62 = v28 == 0;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "@CellFlow, infonotify, inst, %{public}d, cells, %{public}lu, empty, %{public}d", __p, 0x18u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022F9C68);
            }
            uint64_t v52 = 0x204020300;
            __int16 v53 = 2050;
            uint64_t v54 = 0x66FD0EB66FD0EB67 * ((v59[1] - v59[0]) >> 3);
            __int16 v55 = 1026;
            BOOL v56 = v28 == 0;
            long long v49 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v49);
            if (v49 != __p) {
              free(v49);
            }
          }
          uint64_t v30 = *(void *)(a1 + 2528);
          uint64_t v31 = *(void *)(a1 + 2520);
          memset(v50, 0, sizeof(v50));
          sub_1000F71D8(v50, v59[0], v59[1], 0x66FD0EB66FD0EB67 * ((v59[1] - v59[0]) >> 3));
          sub_1000FB548(v50, 1, (uint64_t *)(a1 + 2472), (uint64_t *)(a1 + 2496));
          *(void *)__n128 __p = v50;
          sub_1000FA7C8((void ***)__p);
          if (v28) {
            BOOL v32 = 0;
          }
          else {
            BOOL v32 = v30 == v31;
          }
          if (!v32) {
            long long v15 = "cellinfo";
          }
        }
        long long v33 = "x";
      }
      else
      {
        long long v33 = "fetchfail";
      }
      sub_1000FF568((uint64_t)buf);
      *(void *)__n128 __p = v59;
      sub_1000FA7C8((void ***)__p);
    }
    else
    {
      long long v33 = "nulldata";
      long long v15 = "x";
    }
    if (strlen(v33) >= 2)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F9C68);
      }
      long long v36 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__n128 __p = 136446210;
        *(void *)&__p[4] = v33;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "CellFlow, infonotify, error, %{public}s", __p, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        return;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F9C68);
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = v33;
      long long v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLUnifiedCellLocationProvider::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v17);
      goto LABEL_114;
    }
  }
  else
  {
    long long v34 = (const void *)sub_1000FA17C(a3);
    if (!CFEqual(v34, @"kCellMonitorRefreshResultNotification"))
    {
      long long v37 = (const void *)sub_1000FA17C(a3);
      if (CFEqual(v37, @"kCLTelephonyServiceResetNotification"))
      {
        sub_100036190((void *)a1, (void **)"reset");
        long long v15 = "reset";
        goto LABEL_21;
      }
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F9C68);
      }
      long long v38 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v39 = (const __CFString *)sub_1000FA17C(a3);
        sub_1000FECE0(v39, (uint64_t)__p);
        long long v40 = v62 >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = v40;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "CellService, unknown, %{public}s", buf, 0xCu);
        if (SHIBYTE(v62) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022F9C68);
        }
        CFStringRef v41 = (const __CFString *)sub_1000FA17C(a3);
        sub_1000FECE0(v41, (uint64_t)buf);
        if ((buf[23] & 0x80u) == 0) {
          long long v42 = buf;
        }
        else {
          long long v42 = *(uint8_t **)buf;
        }
        LODWORD(v59[0]) = 136446210;
        *(uint64_t *)((char *)v59 + 4) = (uint64_t)v42;
        long long v43 = (char *)_os_log_send_and_compose_impl();
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v43);
        if (v43 != __p) {
          free(v43);
        }
      }
      goto LABEL_20;
    }
    long long v15 = "x";
    if (v7)
    {
      __p[0] = 0;
      unsigned __int8 v35 = sub_1001A5904((CFDictionaryRef)*a4, __p);
      if ((v35 & (__p[0] == 0)) != 0) {
        long long v15 = "monitorrefresh";
      }
    }
  }
LABEL_21:
  if (sub_1000FC500(a1) && strlen(v15) >= 2)
  {
    sub_100E01A30(a1, (uint64_t)v15);
    return;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F9C68);
  }
  long long v18 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v19 = sub_1000FC500(a1);
    *(_DWORD *)__n128 __p = 67240450;
    *(_DWORD *)&__p[4] = v19;
    *(_WORD *)&__p[8] = 2082;
    *(void *)&__p[10] = v15;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "@CellFlow, skipcalc, clients, %{public}d, get, %{public}s", __p, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F9C68);
    }
    BOOL v47 = sub_1000FC500(a1);
    *(_DWORD *)int buf = 67240450;
    *(_DWORD *)&uint8_t buf[4] = v47;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = v15;
    long long v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v17);
    goto LABEL_114;
  }
}

void sub_1000F716C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33)
{
  a33 = (void **)&a29;
  sub_1000FA7C8(&a33);
  _Unwind_Resume(a1);
}

void *sub_1000F71D8(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    sub_1000FB168(result, a4);
    uint64_t result = (void *)sub_1000FB1C0((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1000F7240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1000FA7C8(&a9);
  _Unwind_Resume(a1);
}

void sub_1000F7260(uint64_t a1, int *a2, CFDictionaryRef *a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  BOOL v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(_DWORD *)(a1 + 8512);
    CFStringRef v8 = (const __CFString *)sub_1000FA17C(a2);
    sub_1000FECE0(v8, (uint64_t)&__p);
    uint64_t v9 = v56 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)int buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v7;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,%s", buf, 0x12u);
    if (SHIBYTE(v56) < 0) {
      operator delete(__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v33 = *(_DWORD *)(a1 + 8512);
    CFStringRef v34 = (const __CFString *)sub_1000FA17C(a2);
    sub_1000FECE0(v34, (uint64_t)buf);
    if ((buf[23] & 0x80u) == 0) {
      unsigned __int8 v35 = buf;
    }
    else {
      unsigned __int8 v35 = *(uint8_t **)buf;
    }
    LODWORD(v53) = 67109378;
    HIDWORD(v53) = v33;
    LOWORD(v54) = 2080;
    *(void *)((char *)&v54 + 2) = v35;
    long long v36 = (char *)_os_log_send_and_compose_impl();
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v36);
    if (v36 != (char *)&__p) {
      free(v36);
    }
  }
  uint64_t v10 = (const void *)sub_1000FA17C(a2);
  if (CFEqual(@"kCLTelephonyServiceDisconnectedNotification", v10))
  {
    sub_100DD88E4(a1 + 6128);
    __n128 __p = 0;
    long long v56 = 0uLL;
    sub_10011BAFC(a1 + 3352, &__p);
    *(void *)int buf = &__p;
    sub_1000FA7C8((void ***)buf);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    uint64_t v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v12 = *(_DWORD *)(a1 + 8512);
      LODWORD(__p) = 67109120;
      HIDWORD(__p) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,cellInfo,erased", (uint8_t *)&__p, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_16;
    }
    bzero(&__p, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_77;
    }
LABEL_88:
    dispatch_once(&qword_1024193D0, &stru_102349958);
LABEL_77:
    int v39 = *(_DWORD *)(a1 + 8512);
    *(_DWORD *)int buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v39;
    long long v40 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v40);
    if (v40 != (char *)&__p) {
      free(v40);
    }
    goto LABEL_16;
  }
  uint64_t v16 = (const void *)sub_1000FA17C(a2);
  if (!CFEqual(@"kCellInfoNotification", v16))
  {
    uint64_t v24 = (const void *)sub_1000FA17C(a2);
    if (!CFEqual(@"kCellRefreshNotification", v24)) {
      goto LABEL_16;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    BOOL v25 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v26 = *(_DWORD *)(a1 + 8512);
      LODWORD(__p) = 67109120;
      HIDWORD(__p) = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,kCellRefreshNotification", (uint8_t *)&__p, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_16;
    }
    bzero(&__p, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_77;
    }
    goto LABEL_88;
  }
  if (*a3)
  {
    sub_10013FA80((int)v45, *a3);
    uint64_t v53 = 0;
    long long v54 = 0uLL;
    memset(buf, 0, sizeof(buf));
    int v52 = 1065353216;
    BOOL v17 = sub_1000FF5A4(*a3, (uint64_t)buf);
    BOOL v18 = v17;
    if (v17)
    {
      BOOL v19 = (int *)(a1 + 8512);
      long long v46 = (_DWORD *)(a1 + 8512);
      if (*((void *)sub_10010D968((uint64_t)buf, (int *)(a1 + 8512), (uint64_t)&unk_101D0B290, &v46) + 3))
      {
        sub_10010D904(*v19, (uint64_t)buf, &v53);
        sub_1000FA8B8(&v53, &__p);
        sub_1000F399C(a1 + 6128, (uint64_t)&__p);
        sub_1000F3950((uint64_t)&__p);
        sub_10011BAFC(a1 + 3352, &v53);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102349958);
        }
        long long v20 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v21 = *v19;
          LODWORD(__p) = 67109632;
          HIDWORD(__p) = v21;
          LOWORD(v56) = 2048;
          *(void *)((char *)&v56 + 2) = 0x66FD0EB66FD0EB67 * (((uint64_t)v54 - v53) >> 3);
          WORD5(v56) = 1024;
          HIDWORD(v56) = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,#ci,cellInfo,refreshed,cellcount,%lu,sim,%d", (uint8_t *)&__p, 0x18u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102349958);
          }
          int v41 = *v19;
          LODWORD(v46) = 67109632;
          HIDWORD(v46) = v41;
          __int16 v47 = 2048;
          uint64_t v48 = 0x66FD0EB66FD0EB67 * (((uint64_t)v54 - v53) >> 3);
          __int16 v49 = 1024;
          int v50 = v41;
          long long v42 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v42);
          if (v42 != (char *)&__p) {
            free(v42);
          }
        }
        if ((sub_1000FEF64() || sub_1000FEED0()) && sub_1000FF52C() && sub_100119964())
        {
          if ((uint64_t *)(a1 + 6832) != &v53) {
            sub_1000FAFC4(a1 + 6832, v53, v54, 0x66FD0EB66FD0EB67 * (((uint64_t)v54 - v53) >> 3));
          }
          uint64_t v22 = *(void *)(*(void *)(a1 + 48) + 40);
          uint64_t v23 = *(unsigned int *)(a1 + 8512);
          memset(v44, 0, sizeof(v44));
          sub_1000F71D8(v44, *(void *)(a1 + 6832), *(void *)(a1 + 6840), 0x66FD0EB66FD0EB67 * ((uint64_t)(*(void *)(a1 + 6840) - *(void *)(a1 + 6832)) >> 3));
          sub_100115118(v22, v23, v44);
          __n128 __p = v44;
          sub_1000FA7C8((void ***)&__p);
        }
        goto LABEL_61;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      uint64_t v31 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v32 = *v19;
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v32;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,#ci,cellInfo,emptycells", (uint8_t *)&__p, 8u);
      }
      if (!sub_10013D1A0(115, 2))
      {
LABEL_61:
        sub_1000FF568((uint64_t)buf);
        __n128 __p = &v53;
        sub_1000FA7C8((void ***)&__p);
        sub_10013F3C4(v45);
        if (!v18) {
          return;
        }
        goto LABEL_16;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      int v43 = *v19;
      LODWORD(v46) = 67109120;
      HIDWORD(v46) = v43;
      uint64_t v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v30);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      uint64_t v27 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v28 = *(_DWORD *)(a1 + 8512);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v28;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,#ci,cellInfo,error fetching cell info", (uint8_t *)&__p, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_61;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      int v29 = *(_DWORD *)(a1 + 8512);
      LODWORD(v46) = 67109120;
      HIDWORD(v46) = v29;
      uint64_t v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v30);
    }
    if (v30 != (char *)&__p) {
      free(v30);
    }
    goto LABEL_61;
  }
LABEL_16:
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  long long v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v14 = *(_DWORD *)(a1 + 8512);
    LODWORD(__p) = 67109120;
    HIDWORD(__p) = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,fSupl.onTelephonyNotification", (uint8_t *)&__p, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v37 = *(_DWORD *)(a1 + 8512);
    *(_DWORD *)int buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v37;
    long long v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v38);
    if (v38 != (char *)&__p) {
      free(v38);
    }
  }
  sub_1000FA934(a1 + 3352, a2, (void **)a3);
  long long v15 = (const void *)sub_1000FA17C(a2);
  if (CFEqual(@"kSimStatusChangeNotification", v15)) {
    sub_1019AAA1C(a1);
  }
}

void sub_1000F7F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31)
{
  a31 = (void **)&a27;
  sub_1000FA7C8(&a31);
  sub_10013F3C4(&a14);
  _Unwind_Resume(a1);
}

void sub_1000F7F88(float32x2_t *a1, int *a2, CFDictionaryRef *a3)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102343DC0);
  }
  BOOL v6 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v7 = (const __CFString *)sub_1000FA17C(a2);
    sub_1000FECE0(v7, (uint64_t)v95);
    CFStringRef v8 = v97[3] >= 0 ? v95 : *(unsigned char **)v95;
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#awd,onTelephonyNotification,%s", buf, 0xCu);
    if ((v97[3] & 0x80000000) != 0) {
      operator delete(*(void **)v95);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v95, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102343DC0);
    }
    CFStringRef v70 = (const __CFString *)sub_1000FA17C(a2);
    sub_1000FECE0(v70, (uint64_t)buf);
    if ((SBYTE7(v90) & 0x80u) == 0) {
      double v71 = buf;
    }
    else {
      double v71 = *(uint8_t **)buf;
    }
    LODWORD(v93[0]) = 136315138;
    *(id *)((char *)v93 + 4) = v71;
    __int16 v72 = (char *)_os_log_send_and_compose_impl();
    if (SBYTE7(v90) < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v72);
    if (v72 != v95) {
      free(v72);
    }
  }
  uint64_t v9 = (const void *)sub_1000FA17C(a2);
  if (CFEqual(@"kUplinkFreqBwNotification", v9))
  {
    if (*a3)
    {
      sub_10013FA80((int)buf, *a3);
      LODWORD(v93[0]) = -1082130432;
      LODWORD(v84) = -1082130432;
      LOBYTE(v87) = 0;
      int v10 = sub_1000D29FC((uint64_t)buf, @"kUplinkFreqBwValid", (BOOL *)&v87);
      sub_1004D123C((uint64_t)buf, @"kUplinkFreqKey", (float *)v93);
      int v12 = v11;
      sub_1004D123C((uint64_t)buf, @"kUplinkBwKey", (float *)&v84);
      if ((v10 & v12 & v13) == 1 && (_BYTE)v87)
      {
        a1[81] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(v84, v93[0])), (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL)));
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343E00);
        }
        int v14 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          double v15 = a1[81].f32[0];
          double v16 = a1[81].f32[1];
          *(_DWORD *)uint64_t v95 = 68289538;
          *(_DWORD *)&v95[4] = 0;
          *(_WORD *)&v95[8] = 2082;
          *(void *)&v95[10] = "";
          __int16 v96 = 2050;
          *(double *)int v97 = v15;
          *(_WORD *)&v97[8] = 2050;
          double v98 = v16;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#awd,kUplinkFreqBwNotification\", \"freq(MHz)\":\"%{public}f\", \"bw(MHz)\":\"%{public}f\"}", v95, 0x26u);
        }
      }
      sub_10013F3C4(buf);
      return;
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102343DC0);
    }
    BOOL v19 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v95 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#awd,kUplinkFreqBwNotification,error fetching info", v95, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(v95, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_71;
      }
LABEL_243:
      dispatch_once(&qword_1024193E0, &stru_102343DC0);
      goto LABEL_71;
    }
    return;
  }
  BOOL v17 = (const void *)sub_1000FA17C(a2);
  if (CFEqual(v17, @"kSubscriptionChangeNotification"))
  {
    CFDictionaryRef v18 = *a3;
    if (*a3)
    {
      *(_OWORD *)int buf = 0u;
      long long v90 = 0u;
      int v91 = 1065353216;
      if (sub_101332B64(v18, (uint64_t)buf))
      {
        sub_1018708D8((uint64_t)a1, 0, (uint64_t)buf);
        if (sub_1000FFBA8()) {
          sub_1018708D8((uint64_t)a1, 1, (uint64_t)buf);
        }
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102343DC0);
        }
        uint64_t v24 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "#awd,kSubscriptionChangeNotification,error fetching context", v95, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(v95, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102343DC0);
          }
          LOWORD(v93[0]) = 0;
          __int16 v74 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v74);
          if (v74 != v95) {
            free(v74);
          }
        }
      }
      sub_1000D7D80((uint64_t)buf);
      return;
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102343DC0);
    }
    uint64_t v23 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v95 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#awd,kSubscriptionChangeNotification,error fetching info", v95, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(v95, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        goto LABEL_243;
      }
      goto LABEL_71;
    }
    return;
  }
  long long v20 = (const void *)sub_1000FA17C(a2);
  if (CFEqual(@"kPrefDataSimChangedNotification", v20))
  {
    CFDictionaryRef v21 = *a3;
    if (!*a3) {
      return;
    }
    v93[0] = 0;
    if (sub_1013327EC(v21, v93))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102343DC0);
      }
      uint64_t v22 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t v95 = 138477827;
        *(id *)&v95[4] = v93[0];
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#awd,kPrefDSChangedNotification,context,%{private}@", v95, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(v95, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102343DC0);
        }
        *(_DWORD *)int buf = 138477827;
        *(id *)&uint8_t buf[4] = v93[0];
        CFAbsoluteTime v75 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v75);
        if (v75 != v95) {
          free(v75);
        }
      }
      a1[80].i32[0] = sub_100090424((uint64_t)[v93[0] slotID]);
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102343DC0);
      }
      int v28 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v95 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "#awd,kPrefDSChangedNotification,error fetching info", v95, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(v95, 0x65CuLL);
        if (qword_1024193E0 == -1) {
          goto LABEL_71;
        }
        goto LABEL_243;
      }
    }
    return;
  }
  BOOL v25 = (const void *)sub_1000FA17C(a2);
  if (CFEqual(@"kCellInfoNotification", v25))
  {
    CFDictionaryRef v26 = *a3;
    if (!*a3) {
      return;
    }
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    memset(v93, 0, sizeof(v93));
    int v94 = 1065353216;
    if (sub_1000FF5A4(v26, (uint64_t)v93))
    {
      *(_DWORD *)uint64_t v95 = 0;
      *(void *)int buf = v95;
      if (*((void *)sub_1000FF948((uint64_t)v93, (int *)v95, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 3))
      {
        sub_10010D904(0, (uint64_t)v93, &v84);
        sub_1000FA8B8(&v84, buf);
        if (v92)
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102343DC0);
          }
          uint64_t v27 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t v95 = 67109120;
            *(_DWORD *)&v95[4] = 0;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "#awd,kCellInfoNotification,serving cell found for sim,%d", v95, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(v95, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102343DC0);
            }
            int v87 = 67109120;
            int v88 = 0;
            __int16 v76 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v76);
            if (v76 != v95) {
              free(v76);
            }
          }
          sub_100116CB0((uint64_t)a1, 0, (uint64_t)buf);
        }
        else
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102343DC0);
          }
          long long v57 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t v95 = 0;
            _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "#awd,kCellInfoNotification,serving cell missing", v95, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(v95, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102343DC0);
            }
            LOWORD(v87) = 0;
            __int16 v78 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v78);
            if (v78 != v95) {
              free(v78);
            }
          }
        }
        sub_1000F3950((uint64_t)buf);
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102343DC0);
        }
        int v52 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t v95 = 67109120;
          *(_DWORD *)&v95[4] = 0;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "#awd,kCellInfoNotification,received nil CellInfo from CT for sim %d", v95, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(v95, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102343DC0);
          }
          *(_DWORD *)int buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = 0;
          uint64_t v53 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v53);
          if (v53 != v95) {
            free(v53);
          }
        }
      }
      uint64_t v59 = v84;
      for (uint64_t i = v85; i != v59; sub_1000FA860((uint64_t)&v86, i))
        i -= 696;
      uint64_t v85 = v59;
      if (!sub_1000FFBA8()) {
        goto LABEL_171;
      }
      *(_DWORD *)uint64_t v95 = 1;
      *(void *)int buf = v95;
      if (*((void *)sub_1000FF948((uint64_t)v93, (int *)v95, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 3))
      {
        sub_10010D904(1, (uint64_t)v93, &v84);
        sub_1000FA8B8(&v84, buf);
        if (v92)
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102343DC0);
          }
          long long v60 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t v95 = 67109120;
            *(_DWORD *)&v95[4] = 1;
            _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "#awd,kCellInfoNotification,serving cell found for sim,%d", v95, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(v95, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102343DC0);
            }
            int v87 = 67109120;
            int v88 = 1;
            uint64_t v79 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v79);
            if (v79 != v95) {
              free(v79);
            }
          }
          sub_100116CB0((uint64_t)a1, 1, (uint64_t)buf);
        }
        else
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102343DC0);
          }
          CFAbsoluteTime v64 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t v95 = 0;
            _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "#awd,kCellInfoNotification,serving cell missing", v95, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(v95, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102343DC0);
            }
            LOWORD(v87) = 0;
            uint64_t v81 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v81);
            if (v81 != v95) {
              free(v81);
            }
          }
        }
        sub_1000F3950((uint64_t)buf);
LABEL_171:
        sub_1000FF568((uint64_t)v93);
        *(void *)uint64_t v95 = &v84;
        sub_1000FA7C8((void ***)v95);
        return;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102343DC0);
      }
      __int16 v61 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t v95 = 67109120;
        *(_DWORD *)&v95[4] = 1;
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "#awd,kCellInfoNotification,received nil CellInfo from CT for sim %d", v95, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_171;
      }
      bzero(v95, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102343DC0);
      }
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = 1;
      long long v45 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v45);
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102343DC0);
      }
      CFStringRef v44 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v95 = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "#awd,kCellInfoNotification,error fetching cell info", v95, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_171;
      }
      bzero(v95, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102343DC0);
      }
      *(_WORD *)int buf = 0;
      long long v45 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v45);
    }
    if (v45 != v95) {
      free(v45);
    }
    goto LABEL_171;
  }
  uint64_t v30 = (const void *)sub_1000FA17C(a2);
  if (CFEqual(@"kSubscriberMccAndMncNotification", v30))
  {
    CFDictionaryRef v31 = *a3;
    if (*a3)
    {
      *(_OWORD *)int buf = 0u;
      long long v90 = 0u;
      int v91 = 1065353216;
      if (sub_1000D1F9C(v31, (uint64_t)buf))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102343DC0);
        }
        int v32 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(v84) = 0;
          v93[0] = &v84;
          int v33 = *((_DWORD *)sub_1000D22E4((uint64_t)buf, (int *)&v84, (uint64_t)&unk_101D0B290, (_DWORD **)v93) + 5);
          int v87 = 0;
          v93[0] = &v87;
          int v34 = *((_DWORD *)sub_1000D22E4((uint64_t)buf, &v87, (uint64_t)&unk_101D0B290, (_DWORD **)v93) + 6);
          int v83 = 0;
          v93[0] = &v83;
          int v35 = *((unsigned __int8 *)sub_1000D22E4((uint64_t)buf, &v83, (uint64_t)&unk_101D0B290, (_DWORD **)v93) + 28);
          *(_DWORD *)uint64_t v95 = 68290050;
          *(_DWORD *)&v95[4] = 0;
          *(_WORD *)&v95[8] = 2082;
          *(void *)&v95[10] = "";
          __int16 v96 = 1026;
          *(_DWORD *)int v97 = 0;
          *(_WORD *)&v97[4] = 1026;
          *(_DWORD *)&v97[6] = v33;
          LOWORD(v98) = 1026;
          *(_DWORD *)((char *)&v98 + 2) = v34;
          HIWORD(v98) = 1026;
          int v99 = v35;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#awd,kSubscriberMccAndMncNotification\", \"sim\":%{public}d, \"mcc\":%{public}d, \"mnc\":%{public}d, \"is3DigitMnc\":%{public}hhd}", v95, 0x2Au);
        }
        LODWORD(v93[0]) = 0;
        *(void *)uint64_t v95 = v93;
        int v36 = *((_DWORD *)sub_1000D22E4((uint64_t)buf, (int *)v93, (uint64_t)&unk_101D0B290, (_DWORD **)v95) + 5);
        LODWORD(v84) = 0;
        *(void *)uint64_t v95 = &v84;
        int v37 = sub_1000D22E4((uint64_t)buf, (int *)&v84, (uint64_t)&unk_101D0B290, (_DWORD **)v95);
        sub_101870C48((uint64_t)a1, 0, v36, *((_DWORD *)v37 + 6));
        if (sub_1000FFBA8())
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102343DC0);
          }
          long long v38 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(v84) = 1;
            v93[0] = &v84;
            int v39 = *((_DWORD *)sub_1000D22E4((uint64_t)buf, (int *)&v84, (uint64_t)&unk_101D0B290, (_DWORD **)v93) + 5);
            int v87 = 1;
            v93[0] = &v87;
            int v40 = *((_DWORD *)sub_1000D22E4((uint64_t)buf, &v87, (uint64_t)&unk_101D0B290, (_DWORD **)v93) + 6);
            int v83 = 1;
            v93[0] = &v83;
            int v41 = *((unsigned __int8 *)sub_1000D22E4((uint64_t)buf, &v83, (uint64_t)&unk_101D0B290, (_DWORD **)v93) + 28);
            *(_DWORD *)uint64_t v95 = 68290050;
            *(_DWORD *)&v95[4] = 0;
            *(_WORD *)&v95[8] = 2082;
            *(void *)&v95[10] = "";
            __int16 v96 = 1026;
            *(_DWORD *)int v97 = 1;
            *(_WORD *)&v97[4] = 1026;
            *(_DWORD *)&v97[6] = v39;
            LOWORD(v98) = 1026;
            *(_DWORD *)((char *)&v98 + 2) = v40;
            HIWORD(v98) = 1026;
            int v99 = v41;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#awd,kSubscriberMccAndMncNotification\", \"sim\":%{public}d, \"mcc\":%{public}d, \"mnc\":%{public}d, \"is3DigitMnc\":%{public}hhd}", v95, 0x2Au);
          }
          LODWORD(v93[0]) = 1;
          *(void *)uint64_t v95 = v93;
          int v42 = *((_DWORD *)sub_1000D22E4((uint64_t)buf, (int *)v93, (uint64_t)&unk_101D0B290, (_DWORD **)v95) + 5);
          LODWORD(v84) = 1;
          *(void *)uint64_t v95 = &v84;
          int v43 = sub_1000D22E4((uint64_t)buf, (int *)&v84, (uint64_t)&unk_101D0B290, (_DWORD **)v95);
          sub_101870C48((uint64_t)a1, 1, v42, *((_DWORD *)v43 + 6));
        }
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102343DC0);
        }
        long long v54 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "#awd,kSubscriberMccAndMncNotification,error fetching MCC/MNC", v95, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(v95, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102343DC0);
          }
          LOWORD(v93[0]) = 0;
          uint64_t v77 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v77);
          if (v77 != v95) {
            free(v77);
          }
        }
      }
      sub_1000D7D80((uint64_t)buf);
    }
    return;
  }
  long long v46 = (const void *)sub_1000FA17C(a2);
  if (CFEqual(@"kDataStatusNotification", v46))
  {
    CFDictionaryRef v47 = *a3;
    if (*a3)
    {
      *(_OWORD *)int buf = 0u;
      long long v90 = 0u;
      int v91 = 1065353216;
      if (sub_10133145C(v47, (uint64_t)buf))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102343DC0);
        }
        uint64_t v48 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v84) = 0;
          v93[0] = &v84;
          int v49 = *((_DWORD *)sub_1007006D0((uint64_t)buf, (int *)&v84, (uint64_t)&unk_101D0B290, (_DWORD **)v93) + 9);
          *(_DWORD *)uint64_t v95 = 68289538;
          *(_DWORD *)&v95[4] = 0;
          *(_WORD *)&v95[8] = 2082;
          *(void *)&v95[10] = "";
          __int16 v96 = 1026;
          *(_DWORD *)int v97 = 0;
          *(_WORD *)&v97[4] = 1026;
          *(_DWORD *)&v97[6] = v49;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#awd,kDataStatusNotification\", \"sim\":%{public}d, \"RAT\":%{public}d}", v95, 0x1Eu);
        }
        if (sub_1000FFBA8())
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102343DC0);
          }
          int v50 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v84) = 1;
            v93[0] = &v84;
            int v51 = *((_DWORD *)sub_1007006D0((uint64_t)buf, (int *)&v84, (uint64_t)&unk_101D0B290, (_DWORD **)v93) + 9);
            *(_DWORD *)uint64_t v95 = 68289538;
            *(_DWORD *)&v95[4] = 0;
            *(_WORD *)&v95[8] = 2082;
            *(void *)&v95[10] = "";
            __int16 v96 = 1026;
            *(_DWORD *)int v97 = 1;
            *(_WORD *)&v97[4] = 1026;
            *(_DWORD *)&v97[6] = v51;
            _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#awd,kDataStatusNotification\", \"sim\":%{public}d, \"RAT\":%{public}d}", v95, 0x1Eu);
          }
        }
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102343DC0);
        }
        long long v63 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_ERROR, "#awd,copyValuesFromDataStatusDictionary,failed", v95, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(v95, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102343DC0);
          }
          LOWORD(v93[0]) = 0;
          __int16 v80 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v80);
          if (v80 != v95) {
            free(v80);
          }
        }
      }
      sub_1000D7D80((uint64_t)buf);
      return;
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102343DC0);
    }
    int v62 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v95 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, "#awd,kDataStatusNotification,error fetching info", v95, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(v95, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        goto LABEL_243;
      }
      goto LABEL_71;
    }
  }
  else
  {
    __int16 v55 = (const void *)sub_1000FA17C(a2);
    if (CFEqual(v55, @"kAltAccountConfiguredNotification"))
    {
      CFDictionaryRef v56 = *a3;
      if (!*a3) {
        return;
      }
      LOBYTE(v93[0]) = 0;
      if (sub_101333538(v56, (BOOL *)v93))
      {
        a1[96].i32[0] = LOBYTE(v93[0]);
        return;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102343DC0);
      }
      __int16 v69 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v95 = 0;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "#awd,kAltAccountConfiguredNotification,error fetching alt account configuration", v95, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return;
      }
      bzero(v95, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        goto LABEL_243;
      }
LABEL_71:
      *(_WORD *)int buf = 0;
      int v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v29);
      if (v29 != v95) {
        free(v29);
      }
      return;
    }
    __int16 v65 = (const void *)sub_1000FA17C(a2);
    if (!CFEqual(@"kTandemCapabilityNotification", v65)) {
      return;
    }
    CFDictionaryRef v66 = *a3;
    if (!*a3) {
      return;
    }
    v93[0] = 0;
    if (sub_1013337C0(v66, v93))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102343DC0);
      }
      __int16 v67 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t v95 = 134217984;
        *(id *)&v95[4] = v93[0];
        _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "#awd,kTandemCapabilityNotification,tandemCapability,%ld", v95, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(v95, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102343DC0);
        }
        *(_DWORD *)int buf = 134217984;
        *(id *)&uint8_t buf[4] = v93[0];
        uint64_t v82 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v82);
        if (v82 != v95) {
          free(v82);
        }
      }
      if ((unint64_t)v93[0] - 1 < 4) {
        __int32 v68 = (__int32)v93[0];
      }
      else {
        __int32 v68 = 0;
      }
      a1[80].i32[1] = v68;
      return;
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102343DC0);
    }
    uint64_t v73 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v95 = 0;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_ERROR, "#awd,kTandemCapabilityNotification,error fetching context", v95, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(v95, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        goto LABEL_243;
      }
      goto LABEL_71;
    }
  }
}

void sub_1000FA08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_1000F3950((uint64_t)va1);
  sub_1000FF568((uint64_t)&STACK[0x300]);
  *(void *)(v3 + 48) = va;
  sub_1000FA7C8((void ***)&STACK[0x330]);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FA17C(int *a1)
{
  if (qword_10247B3A0 != -1) {
    dispatch_once(&qword_10247B3A0, &stru_1022BB2C8);
  }
  uint64_t v2 = (os_unfair_lock_s *)qword_10247B3A8;
  int v3 = *a1;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000FA248;
  v6[3] = &unk_1022BB308;
  v6[4] = qword_10247B3A8;
  int v7 = v3;
  os_unfair_lock_lock((os_unfair_lock_t)qword_10247B3A8);
  uint64_t v4 = sub_1000FA248((uint64_t)v6);
  os_unfair_lock_unlock(v2);
  return v4;
}

uint64_t sub_1000FA248(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  int v3 = (void *)(v1 + 40);
  uint64_t v2 = v4;
  if (!v4) {
    goto LABEL_12;
  }
  int v5 = *(_DWORD *)(a1 + 40);
  BOOL v6 = v3;
  do
  {
    int v7 = *(_DWORD *)(v2 + 32);
    BOOL v8 = v7 < v5;
    if (v7 >= v5) {
      uint64_t v9 = (uint64_t *)v2;
    }
    else {
      uint64_t v9 = (uint64_t *)(v2 + 8);
    }
    if (!v8) {
      BOOL v6 = (void *)v2;
    }
    uint64_t v2 = *v9;
  }
  while (*v9);
  if (v6 == v3 || v5 < *((_DWORD *)v6 + 8))
  {
LABEL_12:
    uint64_t v27 = *(void *)(a1 + 32);
    uint64_t v11 = *(void **)(v27 + 32);
    if (v11 != v3) {
      goto LABEL_29;
    }
    while (1)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      int v12 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        int v13 = *(_DWORD *)(a1 + 40);
        int v14 = *(_DWORD *)(v27 + 4);
        *(_DWORD *)int buf = 67109376;
        int v29 = v13;
        __int16 v30 = 1024;
        LODWORD(v31) = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Request to decode unknown integer %d is a programmer error. fSize %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BB328);
        }
        BOOL v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CFStringRef (anonymous namespace)::NotificationMap::notificationFromInt(int)_block_invoke", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      double v15 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)int buf = 68289539;
        int v29 = 0;
        __int16 v30 = 2082;
        CFDictionaryRef v31 = "";
        __int16 v32 = 2082;
        *(void *)int v33 = "assert";
        *(_WORD *)&v33[8] = 2081;
        *(void *)&v33[10] = "0";
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BB328);
        }
      }
      double v16 = qword_102419638;
      if (os_signpost_enabled((os_log_t)qword_102419638))
      {
        *(_DWORD *)int buf = 68289539;
        int v29 = 0;
        __int16 v30 = 2082;
        CFDictionaryRef v31 = "";
        __int16 v32 = 2082;
        *(void *)int v33 = "assert";
        *(_WORD *)&v33[8] = 2081;
        *(void *)&v33[10] = "0";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BB328);
        }
      }
      BOOL v17 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 68289539;
        int v29 = 0;
        __int16 v30 = 2082;
        CFDictionaryRef v31 = "";
        __int16 v32 = 2082;
        *(void *)int v33 = "assert";
        *(_WORD *)&v33[8] = 2081;
        *(void *)&v33[10] = "0";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }
      abort_report_np();
LABEL_29:
      uint64_t v18 = qword_1024193D0;
      do
      {
        if (v18 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022BB388);
        }
        BOOL v19 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          int v20 = *((_DWORD *)v11 + 8);
          uint64_t v21 = v11[5];
          *(_DWORD *)int buf = 68289794;
          int v29 = 0;
          __int16 v30 = 2082;
          CFDictionaryRef v31 = "";
          __int16 v32 = 1026;
          *(_DWORD *)int v33 = v20;
          *(_WORD *)&v33[4] = 2050;
          *(void *)&v33[6] = v21;
          *(_WORD *)&v33[14] = 2114;
          *(void *)&v33[16] = v21;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Int2NotifMap\", \"Key\":%{public}d, \"NotifPtr\":\"%{public}p\", \"NotifVal\":%{public, location:escape_only}@}", buf, 0x2Cu);
          uint64_t v18 = qword_1024193D0;
        }
        else
        {
          uint64_t v18 = -1;
        }
        uint64_t v22 = (void *)v11[1];
        if (v22)
        {
          do
          {
            uint64_t v23 = v22;
            uint64_t v22 = (void *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            uint64_t v23 = (void *)v11[2];
            BOOL v24 = *v23 == (void)v11;
            uint64_t v11 = v23;
          }
          while (!v24);
        }
        uint64_t v11 = v23;
      }
      while (v23 != v3);
    }
  }
  return v6[5];
}

void sub_1000FA7C8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 696;
        sub_1000FA860((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1000FA860(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 343) < 0) {
    operator delete(*(void **)(a2 + 320));
  }
  int v3 = *(void **)(a2 + 88);
  if (v3)
  {
    *(void *)(a2 + 96) = v3;
    operator delete(v3);
  }
}

uint64_t *sub_1000FA8B8@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = 0;
  a2[696] = 0;
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  if (*result != v4)
  {
    while (!*(unsigned char *)v3 || *(_DWORD *)(v3 + 4) != 0)
    {
      v3 += 696;
      if (v3 == v4) {
        return result;
      }
    }
  }
  if (v3 != v4) {
    return (uint64_t *)sub_10010F54C((uint64_t)a2, v3);
  }
  return result;
}

void sub_1000FA920(_Unwind_Exception *a1)
{
  sub_1000F3950(v1);
  _Unwind_Resume(a1);
}

void sub_1000FA934(uint64_t a1, int *a2, void **a3)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  BOOL v6 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v7 = (const __CFString *)sub_1000FA17C(a2);
    sub_1000FECE0(v7, (uint64_t)__p);
    BOOL v8 = (SBYTE7(v27) & 0x80u) == 0 ? __p : (void **)__p[0];
    *(_DWORD *)int buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v33 = 2082;
    int v34 = "";
    __int16 v35 = 2082;
    int v36 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#nilr,#supl,received CT notification\", \"notification\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (SBYTE7(v27) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v9 = (const void *)sub_1000FA17C(a2);
  if (CFEqual(@"kSimStatusChangeNotification", v9))
  {
    *(_OWORD *)__n128 __p = 0u;
    long long v27 = 0u;
    int v28 = 1065353216;
    if (sub_101331F28(*a3, (uint64_t)__p))
    {
      *(void *)int buf = a1 + 2564;
      uint64_t v10 = (const std::string *)sub_100981110((uint64_t)__p, (int *)(a1 + 2564), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      std::string::operator=((std::string *)(a1 + 376), v10 + 1);
      *(void *)int buf = a1 + 2564;
      uint64_t v11 = (const std::string *)sub_100981110((uint64_t)__p, (int *)(a1 + 2564), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      std::string::operator=((std::string *)(a1 + 432), v11 + 2);
      *(void *)int buf = a1 + 2564;
      int v12 = (const std::string *)sub_100981110((uint64_t)__p, (int *)(a1 + 2564), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      std::string::operator=((std::string *)(a1 + 400), v12 + 3);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233D3A0);
      }
      double v16 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        int v17 = *(_DWORD *)(a1 + 2564);
        *(_DWORD *)int buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,copySimStatusChangeFromDictionary error", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233D3A0);
        }
        int v20 = *(_DWORD *)(a1 + 2564);
        LODWORD(v31) = 67109120;
        HIDWORD(v31) = v20;
        uint64_t v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrSupl::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
      }
    }
    sub_100981028((uint64_t)__p);
  }
  else
  {
    int v13 = (const void *)sub_1000FA17C(a2);
    if (CFEqual(@"kSuplInitPayloadNotification", v13))
    {
      id v31 = 0;
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&long long v27 = 0;
      if (sub_101331BBC((CFDictionaryRef)*a3, &v31, (unint64_t *)__p))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        int v14 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = *(_DWORD *)(a1 + 2564);
          *(_DWORD *)int buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#supl suplInitCT", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10233D380);
          }
          int v22 = *(_DWORD *)(a1 + 2564);
          int v29 = 67109120;
          int v30 = v22;
          uint64_t v23 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v23);
          if (v23 != (char *)buf) {
            free(v23);
          }
        }
        sub_1017D3ADC(a1, (char **)__p);
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        uint64_t v18 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          int v19 = *(_DWORD *)(a1 + 2564);
          *(_DWORD *)int buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,copySuplPayloadfromDictionary returned error", buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10233D380);
          }
          int v24 = *(_DWORD *)(a1 + 2564);
          int v29 = 67109120;
          int v30 = v24;
          BOOL v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrSupl::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v25);
          if (v25 != (char *)buf) {
            free(v25);
          }
        }
      }

      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1000FAF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000FAFC4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (0x66FD0EB66FD0EB67 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_1017C82E0((void **)a1);
    if (a4 > 0x5E293205E29320) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0xCDFA1D6CDFA1D6CELL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x66FD0EB66FD0EB67 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)) >= 0x2F149902F14990) {
      unint64_t v11 = 0x5E293205E29320;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_1000FB168((void *)a1, v11);
    uint64_t v12 = sub_1000FB1C0(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x66FD0EB66FD0EB67 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    sub_1000FB2A4((uint64_t)&v17, a2, v13, (uint64_t)v9);
    uint64_t v12 = sub_1000FB1C0(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_1000FB2A4((uint64_t)&v18, a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 696;
      sub_1000FA860(v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1000FB158(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1000FB160(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_1000FB168(void *a1, unint64_t a2)
{
  if (a2 >= 0x5E293205E29321) {
    sub_1001D7FD4();
  }
  uint64_t result = (char *)sub_10010FAD4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[696 * v4];
  return result;
}

uint64_t sub_1000FB1C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  _OWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_1000FC2C4(a1, v4, v6);
      v6 += 696;
      uint64_t v4 = v12 + 696;
      v12 += 696;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_1000FB26C((uint64_t)v9);
  return v4;
}

void sub_1000FB258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000FB26C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10068FE18((uint64_t *)a1);
  }
  return a1;
}

uint64_t sub_1000FB2A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a2 + 96;
  do
  {
    uint64_t v7 = v6 - 96;
    *(_OWORD *)a4 = *(_OWORD *)(v6 - 96);
    long long v8 = *(_OWORD *)(v6 - 80);
    long long v9 = *(_OWORD *)(v6 - 64);
    long long v10 = *(_OWORD *)(v6 - 48);
    *(_OWORD *)(a4 + 60) = *(_OWORD *)(v6 - 36);
    *(_OWORD *)(a4 + 32) = v9;
    *(_OWORD *)(a4 + 48) = v10;
    *(_OWORD *)(a4 + 16) = v8;
    *(_DWORD *)(a4 + 80) = *(_DWORD *)(v6 - 16);
    if (a4 != v6 - 96) {
      sub_1000FB43C((char *)(a4 + 88), *(char **)(v6 - 8), *(void *)v6, (uint64_t)(*(void *)v6 - *(void *)(v6 - 8)) >> 2);
    }
    *(_OWORD *)(a4 + 112) = *(_OWORD *)(v6 + 16);
    long long v11 = *(_OWORD *)(v6 + 32);
    long long v12 = *(_OWORD *)(v6 + 48);
    long long v13 = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(a4 + 160) = *(_OWORD *)(v6 + 64);
    *(_OWORD *)(a4 + 176) = v13;
    *(_OWORD *)(a4 + 128) = v11;
    *(_OWORD *)(a4 + 144) = v12;
    long long v14 = *(_OWORD *)(v6 + 96);
    long long v15 = *(_OWORD *)(v6 + 112);
    long long v16 = *(_OWORD *)(v6 + 144);
    *(_OWORD *)(a4 + 224) = *(_OWORD *)(v6 + 128);
    *(_OWORD *)(a4 + 240) = v16;
    *(_OWORD *)(a4 + 192) = v14;
    *(_OWORD *)(a4 + 208) = v15;
    long long v17 = *(_OWORD *)(v6 + 160);
    long long v18 = *(_OWORD *)(v6 + 176);
    long long v19 = *(_OWORD *)(v6 + 192);
    *(_OWORD *)(a4 + 300) = *(_OWORD *)(v6 + 204);
    *(_OWORD *)(a4 + 272) = v18;
    *(_OWORD *)(a4 + 288) = v19;
    *(_OWORD *)(a4 + 256) = v17;
    std::string::operator=((std::string *)(a4 + 320), (const std::string *)(v6 + 224));
    long long v20 = *(_OWORD *)(v6 + 280);
    long long v21 = *(_OWORD *)(v6 + 264);
    *(_OWORD *)(a4 + 344) = *(_OWORD *)(v6 + 248);
    *(_OWORD *)(a4 + 360) = v21;
    *(_OWORD *)(a4 + 376) = v20;
    long long v22 = *(_OWORD *)(v6 + 312);
    long long v23 = *(_OWORD *)(v6 + 328);
    long long v24 = *(_OWORD *)(v6 + 344);
    *(_OWORD *)(a4 + 392) = *(_OWORD *)(v6 + 296);
    *(_OWORD *)(a4 + 440) = v24;
    *(_OWORD *)(a4 + 424) = v23;
    *(_OWORD *)(a4 + 408) = v22;
    long long v25 = *(_OWORD *)(v6 + 376);
    long long v26 = *(_OWORD *)(v6 + 392);
    int v27 = *(_DWORD *)(v6 + 408);
    *(_OWORD *)(a4 + 456) = *(_OWORD *)(v6 + 360);
    *(_DWORD *)(a4 + 504) = v27;
    *(_OWORD *)(a4 + 488) = v26;
    *(_OWORD *)(a4 + 472) = v25;
    long long v28 = *(_OWORD *)(v6 + 544);
    long long v29 = *(_OWORD *)(v6 + 560);
    long long v30 = *(_OWORD *)(v6 + 576);
    *(_DWORD *)(a4 + 688) = *(_DWORD *)(v6 + 592);
    *(_OWORD *)(a4 + 656) = v29;
    *(_OWORD *)(a4 + 672) = v30;
    *(_OWORD *)(a4 + 640) = v28;
    long long v31 = *(_OWORD *)(v6 + 480);
    long long v32 = *(_OWORD *)(v6 + 496);
    long long v33 = *(_OWORD *)(v6 + 528);
    *(_OWORD *)(a4 + 608) = *(_OWORD *)(v6 + 512);
    *(_OWORD *)(a4 + 624) = v33;
    *(_OWORD *)(a4 + 576) = v31;
    *(_OWORD *)(a4 + 592) = v32;
    long long v34 = *(_OWORD *)(v6 + 416);
    long long v35 = *(_OWORD *)(v6 + 432);
    long long v36 = *(_OWORD *)(v6 + 464);
    *(_OWORD *)(a4 + 544) = *(_OWORD *)(v6 + 448);
    *(_OWORD *)(a4 + 560) = v36;
    *(_OWORD *)(a4 + 512) = v34;
    *(_OWORD *)(a4 + 528) = v35;
    a4 += 696;
    v6 += 696;
  }
  while (v7 + 696 != v5);
  return v5;
}

char *sub_1000FB43C(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  long long v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 62) {
      sub_1001D7FD4();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_10017C6FC(v7, v11);
    long long v13 = (char *)v7[1];
    long long v12 = (void **)(v7 + 1);
    long long v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      long long v18 = v9;
      long long v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  long long v12 = (void **)(result + 8);
  long long v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    long long v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    long long v18 = v9;
    long long v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *long long v12 = &v9[v17];
  return result;
}

void sub_1000FB548(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022C2220);
  }
  uint64_t v5 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 1875962727 * ((unint64_t)(a1[1] - *a1) >> 3);
    *(_DWORD *)int buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = a2 + 1;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@CellService, selection, inst, %{public}d, count, %{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022C2220);
    }
    int v125 = 1875962727 * ((unint64_t)(a1[1] - *a1) >> 3);
    *(_DWORD *)double v146 = 67240448;
    *(_DWORD *)&v146[4] = a2 + 1;
    *(_WORD *)&v146[8] = 1026;
    *(_DWORD *)&v146[10] = v125;
    __int16 v126 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::selectCurrentCells(CLCellVector, int, CLCellVector &, CLCellVector (&)[2])", "%s\n", v126);
    if (v126 != buf) {
      free(v126);
    }
  }
  uint64_t v7 = &a4[3 * a2];
  uint64_t v10 = v7[1];
  long long v9 = v7 + 1;
  uint64_t v8 = v10;
  double v136 = &a4[3 * a2];
  uint64_t v11 = *v136;
  if (v10 != *v136)
  {
    do
    {
      v8 -= 696;
      sub_1000FA860((uint64_t)&a4[3 * a2 + 2], v8);
    }
    while (v8 != v11);
  }
  *long long v9 = v11;
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  if (*a1 == v13)
  {
    uint64_t v137 = 0;
  }
  else
  {
    uint64_t v137 = 0;
    __int16 v135 = &a4[3 * a2 + 2];
    do
    {
      *(_OWORD *)double v146 = *(_OWORD *)v12;
      long long v14 = *(_OWORD *)(v12 + 16);
      long long v15 = *(_OWORD *)(v12 + 32);
      long long v16 = *(_OWORD *)(v12 + 48);
      *(_OWORD *)&v146[60] = *(_OWORD *)(v12 + 60);
      *(_OWORD *)&v146[32] = v15;
      *(_OWORD *)&v146[48] = v16;
      *(_OWORD *)&v146[16] = v14;
      int v147 = *(_DWORD *)(v12 + 80);
      uint64_t v149 = 0;
      uint64_t v150 = 0;
      int v148 = 0;
      sub_10010F834(&v148, *(const void **)(v12 + 88), *(void *)(v12 + 96), (uint64_t)(*(void *)(v12 + 96) - *(void *)(v12 + 88)) >> 2);
      long long v151 = *(_OWORD *)(v12 + 112);
      long long v17 = *(_OWORD *)(v12 + 128);
      long long v18 = *(_OWORD *)(v12 + 144);
      long long v19 = *(_OWORD *)(v12 + 176);
      long long v154 = *(_OWORD *)(v12 + 160);
      long long v155 = v19;
      long long v152 = v17;
      long long v153 = v18;
      long long v20 = *(_OWORD *)(v12 + 192);
      long long v21 = *(_OWORD *)(v12 + 208);
      long long v22 = *(_OWORD *)(v12 + 240);
      long long v158 = *(_OWORD *)(v12 + 224);
      long long v159 = v22;
      long long v156 = v20;
      long long v157 = v21;
      long long v23 = *(_OWORD *)(v12 + 256);
      long long v24 = *(_OWORD *)(v12 + 272);
      long long v25 = *(_OWORD *)(v12 + 288);
      *(_OWORD *)((char *)v162 + 12) = *(_OWORD *)(v12 + 300);
      long long v161 = v24;
      v162[0] = v25;
      long long v160 = v23;
      if (*(char *)(v12 + 343) < 0)
      {
        sub_1000DC48C(&__p, *(void **)(v12 + 320), *(void *)(v12 + 328));
      }
      else
      {
        long long v26 = *(_OWORD *)(v12 + 320);
        uint64_t v164 = *(void *)(v12 + 336);
        long long __p = v26;
      }
      long long v27 = *(_OWORD *)(v12 + 344);
      long long v28 = *(_OWORD *)(v12 + 376);
      long long v166 = *(_OWORD *)(v12 + 360);
      long long v167 = v28;
      long long v165 = v27;
      long long v29 = *(_OWORD *)(v12 + 392);
      long long v30 = *(_OWORD *)(v12 + 408);
      long long v31 = *(_OWORD *)(v12 + 440);
      long long v170 = *(_OWORD *)(v12 + 424);
      long long v171 = v31;
      long long v168 = v29;
      long long v169 = v30;
      long long v32 = *(_OWORD *)(v12 + 456);
      long long v33 = *(_OWORD *)(v12 + 472);
      long long v34 = *(_OWORD *)(v12 + 488);
      int v175 = *(_DWORD *)(v12 + 504);
      long long v173 = v33;
      long long v174 = v34;
      long long v172 = v32;
      long long v35 = *(_OWORD *)(v12 + 512);
      long long v36 = *(_OWORD *)(v12 + 528);
      long long v37 = *(_OWORD *)(v12 + 560);
      long long v178 = *(_OWORD *)(v12 + 544);
      long long v179 = v37;
      long long v176 = v35;
      long long v177 = v36;
      long long v38 = *(_OWORD *)(v12 + 576);
      long long v39 = *(_OWORD *)(v12 + 592);
      long long v40 = *(_OWORD *)(v12 + 624);
      long long v182 = *(_OWORD *)(v12 + 608);
      long long v183 = v40;
      long long v180 = v38;
      long long v181 = v39;
      long long v41 = *(_OWORD *)(v12 + 640);
      long long v42 = *(_OWORD *)(v12 + 656);
      long long v43 = *(_OWORD *)(v12 + 672);
      int v187 = *(_DWORD *)(v12 + 688);
      long long v185 = v42;
      long long v186 = v43;
      long long v184 = v41;
      if (v146[0])
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022C2220);
        }
        CFStringRef v44 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100108874((uint64_t)v146);
          long long v45 = buf;
          if (buf[23] < 0) {
            long long v45 = *(unsigned char **)buf;
          }
          *(_DWORD *)int v138 = 67240451;
          *(_DWORD *)&v138[4] = a2 + 1;
          __int16 v139 = 2081;
          uint64_t v140 = v45;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "@CellService, selection, inst, %{public}d, %{private}s", v138, 0x12u);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022C2220);
          }
          sub_100108874((uint64_t)v146);
          uint64_t v48 = v138;
          if (v141 < 0) {
            uint64_t v48 = *(uint8_t **)v138;
          }
          int v142 = 67240451;
          int v143 = a2 + 1;
          __int16 v144 = 2081;
          __int16 v145 = v48;
          int v49 = (char *)_os_log_send_and_compose_impl();
          if (v141 < 0) {
            operator delete(*(void **)v138);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::selectCurrentCells(CLCellVector, int, CLCellVector &, CLCellVector (&)[2])", "%s\n", v49);
          if (v49 != buf) {
            free(v49);
          }
        }
        sub_100108C54((uint64_t)v146, -1, -1, -1, -1);
        ++HIDWORD(v137);
        if (*(_DWORD *)&v146[4])
        {
          uint64_t v46 = *v9;
          if (*v9 >= (unint64_t)*v135)
          {
            uint64_t v47 = sub_1005630D0(v136, (uint64_t)v146);
          }
          else
          {
            sub_1000FC2C4((uint64_t)v135, *v9, (uint64_t)v146);
            uint64_t v47 = v46 + 696;
            *long long v9 = v46 + 696;
          }
          *long long v9 = v47;
        }
        else
        {
          sub_1001084B4(v136, *v136 + 696 * (int)v137, (uint64_t)v146);
          LODWORD(v137) = v137 + 1;
        }
      }
      if (SHIBYTE(v164) < 0) {
        operator delete((void *)__p);
      }
      if (v148)
      {
        uint64_t v149 = v148;
        operator delete(v148);
      }
      v12 += 696;
    }
    while (v12 != v13);
    if (v137) {
      sub_1001087E4((uint64_t)v136, *v136 + 696 * (int)v137, *v9);
    }
    else {
      LODWORD(v137) = 0;
    }
  }
  uint64_t v51 = *a3;
  uint64_t v50 = a3[1];
  if (v50 != *a3)
  {
    do
    {
      v50 -= 696;
      sub_1000FA860((uint64_t)(a3 + 2), v50);
    }
    while (v50 != v51);
  }
  a3[1] = v51;
  uint64_t v52 = *a4;
  uint64_t v53 = a4[1];
  if (*a4 != v53)
  {
    do
    {
      *(_OWORD *)int buf = *(_OWORD *)v52;
      long long v54 = *(_OWORD *)(v52 + 16);
      long long v55 = *(_OWORD *)(v52 + 32);
      long long v56 = *(_OWORD *)(v52 + 48);
      *(_OWORD *)&buf[60] = *(_OWORD *)(v52 + 60);
      *(_OWORD *)&uint8_t buf[32] = v55;
      *(_OWORD *)&buf[48] = v56;
      *(_OWORD *)&uint8_t buf[16] = v54;
      int v189 = *(_DWORD *)(v52 + 80);
      v191 = 0;
      uint64_t v192 = 0;
      v190 = 0;
      sub_10010F834(&v190, *(const void **)(v52 + 88), *(void *)(v52 + 96), (uint64_t)(*(void *)(v52 + 96) - *(void *)(v52 + 88)) >> 2);
      long long v193 = *(_OWORD *)(v52 + 112);
      long long v57 = *(_OWORD *)(v52 + 128);
      long long v58 = *(_OWORD *)(v52 + 144);
      long long v59 = *(_OWORD *)(v52 + 176);
      long long v196 = *(_OWORD *)(v52 + 160);
      long long v197 = v59;
      long long v194 = v57;
      long long v195 = v58;
      long long v60 = *(_OWORD *)(v52 + 192);
      long long v61 = *(_OWORD *)(v52 + 208);
      long long v62 = *(_OWORD *)(v52 + 240);
      long long v200 = *(_OWORD *)(v52 + 224);
      long long v201 = v62;
      long long v198 = v60;
      long long v199 = v61;
      long long v63 = *(_OWORD *)(v52 + 256);
      long long v64 = *(_OWORD *)(v52 + 272);
      long long v65 = *(_OWORD *)(v52 + 288);
      *(_OWORD *)((char *)v204 + 12) = *(_OWORD *)(v52 + 300);
      long long v203 = v64;
      v204[0] = v65;
      long long v202 = v63;
      if (*(char *)(v52 + 343) < 0)
      {
        sub_1000DC48C(&v205, *(void **)(v52 + 320), *(void *)(v52 + 328));
      }
      else
      {
        long long v66 = *(_OWORD *)(v52 + 320);
        uint64_t v206 = *(void *)(v52 + 336);
        long long v205 = v66;
      }
      long long v67 = *(_OWORD *)(v52 + 344);
      long long v68 = *(_OWORD *)(v52 + 376);
      long long v208 = *(_OWORD *)(v52 + 360);
      long long v209 = v68;
      long long v207 = v67;
      long long v69 = *(_OWORD *)(v52 + 392);
      long long v70 = *(_OWORD *)(v52 + 408);
      long long v71 = *(_OWORD *)(v52 + 440);
      long long v212 = *(_OWORD *)(v52 + 424);
      long long v213 = v71;
      long long v210 = v69;
      long long v211 = v70;
      long long v72 = *(_OWORD *)(v52 + 456);
      long long v73 = *(_OWORD *)(v52 + 472);
      long long v74 = *(_OWORD *)(v52 + 488);
      int v217 = *(_DWORD *)(v52 + 504);
      long long v215 = v73;
      long long v216 = v74;
      long long v214 = v72;
      long long v75 = *(_OWORD *)(v52 + 512);
      long long v76 = *(_OWORD *)(v52 + 528);
      long long v77 = *(_OWORD *)(v52 + 560);
      long long v220 = *(_OWORD *)(v52 + 544);
      long long v221 = v77;
      long long v218 = v75;
      long long v219 = v76;
      long long v78 = *(_OWORD *)(v52 + 576);
      long long v79 = *(_OWORD *)(v52 + 592);
      long long v80 = *(_OWORD *)(v52 + 624);
      long long v224 = *(_OWORD *)(v52 + 608);
      long long v225 = v80;
      long long v222 = v78;
      long long v223 = v79;
      long long v81 = *(_OWORD *)(v52 + 640);
      long long v82 = *(_OWORD *)(v52 + 656);
      long long v83 = *(_OWORD *)(v52 + 672);
      int v229 = *(_DWORD *)(v52 + 688);
      long long v227 = v82;
      long long v228 = v83;
      long long v226 = v81;
      unint64_t v84 = a3[1];
      if (v84 >= a3[2])
      {
        uint64_t v85 = sub_1005630D0(a3, (uint64_t)buf);
      }
      else
      {
        sub_1000FC2C4((uint64_t)(a3 + 2), a3[1], (uint64_t)buf);
        uint64_t v85 = v84 + 696;
        a3[1] = v84 + 696;
      }
      a3[1] = v85;
      if (SHIBYTE(v206) < 0) {
        operator delete((void *)v205);
      }
      if (v190)
      {
        v191 = v190;
        operator delete(v190);
      }
      v52 += 696;
    }
    while (v52 != v53);
  }
  uint64_t v86 = a4[3];
  for (uint64_t i = a4[4]; v86 != i; v86 += 696)
  {
    *(_OWORD *)int buf = *(_OWORD *)v86;
    long long v88 = *(_OWORD *)(v86 + 16);
    long long v89 = *(_OWORD *)(v86 + 32);
    long long v90 = *(_OWORD *)(v86 + 48);
    *(_OWORD *)&buf[60] = *(_OWORD *)(v86 + 60);
    *(_OWORD *)&uint8_t buf[32] = v89;
    *(_OWORD *)&buf[48] = v90;
    *(_OWORD *)&uint8_t buf[16] = v88;
    int v189 = *(_DWORD *)(v86 + 80);
    v191 = 0;
    uint64_t v192 = 0;
    v190 = 0;
    sub_10010F834(&v190, *(const void **)(v86 + 88), *(void *)(v86 + 96), (uint64_t)(*(void *)(v86 + 96) - *(void *)(v86 + 88)) >> 2);
    long long v193 = *(_OWORD *)(v86 + 112);
    long long v91 = *(_OWORD *)(v86 + 128);
    long long v92 = *(_OWORD *)(v86 + 144);
    long long v93 = *(_OWORD *)(v86 + 176);
    long long v196 = *(_OWORD *)(v86 + 160);
    long long v197 = v93;
    long long v194 = v91;
    long long v195 = v92;
    long long v94 = *(_OWORD *)(v86 + 192);
    long long v95 = *(_OWORD *)(v86 + 208);
    long long v96 = *(_OWORD *)(v86 + 240);
    long long v200 = *(_OWORD *)(v86 + 224);
    long long v201 = v96;
    long long v198 = v94;
    long long v199 = v95;
    long long v97 = *(_OWORD *)(v86 + 256);
    long long v98 = *(_OWORD *)(v86 + 272);
    long long v99 = *(_OWORD *)(v86 + 288);
    *(_OWORD *)((char *)v204 + 12) = *(_OWORD *)(v86 + 300);
    long long v203 = v98;
    v204[0] = v99;
    long long v202 = v97;
    if (*(char *)(v86 + 343) < 0)
    {
      sub_1000DC48C(&v205, *(void **)(v86 + 320), *(void *)(v86 + 328));
    }
    else
    {
      long long v100 = *(_OWORD *)(v86 + 320);
      uint64_t v206 = *(void *)(v86 + 336);
      long long v205 = v100;
    }
    long long v101 = *(_OWORD *)(v86 + 344);
    long long v102 = *(_OWORD *)(v86 + 376);
    long long v208 = *(_OWORD *)(v86 + 360);
    long long v209 = v102;
    long long v207 = v101;
    long long v103 = *(_OWORD *)(v86 + 392);
    long long v104 = *(_OWORD *)(v86 + 408);
    long long v105 = *(_OWORD *)(v86 + 440);
    long long v212 = *(_OWORD *)(v86 + 424);
    long long v213 = v105;
    long long v210 = v103;
    long long v211 = v104;
    long long v106 = *(_OWORD *)(v86 + 456);
    long long v107 = *(_OWORD *)(v86 + 472);
    long long v108 = *(_OWORD *)(v86 + 488);
    int v217 = *(_DWORD *)(v86 + 504);
    long long v215 = v107;
    long long v216 = v108;
    long long v214 = v106;
    long long v109 = *(_OWORD *)(v86 + 512);
    long long v110 = *(_OWORD *)(v86 + 528);
    long long v111 = *(_OWORD *)(v86 + 560);
    long long v220 = *(_OWORD *)(v86 + 544);
    long long v221 = v111;
    long long v218 = v109;
    long long v219 = v110;
    long long v112 = *(_OWORD *)(v86 + 576);
    long long v113 = *(_OWORD *)(v86 + 592);
    long long v114 = *(_OWORD *)(v86 + 624);
    long long v224 = *(_OWORD *)(v86 + 608);
    long long v225 = v114;
    long long v222 = v112;
    long long v223 = v113;
    long long v115 = *(_OWORD *)(v86 + 640);
    long long v116 = *(_OWORD *)(v86 + 656);
    long long v117 = *(_OWORD *)(v86 + 672);
    int v229 = *(_DWORD *)(v86 + 688);
    long long v227 = v116;
    long long v228 = v117;
    long long v226 = v115;
    unint64_t v118 = a3[1];
    if (v118 >= a3[2])
    {
      uint64_t v119 = sub_1005630D0(a3, (uint64_t)buf);
    }
    else
    {
      sub_1000FC2C4((uint64_t)(a3 + 2), a3[1], (uint64_t)buf);
      uint64_t v119 = v118 + 696;
      a3[1] = v118 + 696;
    }
    a3[1] = v119;
    if (SHIBYTE(v206) < 0) {
      operator delete((void *)v205);
    }
    if (v190)
    {
      v191 = v190;
      operator delete(v190);
    }
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022C2220);
  }
  uint64_t v120 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v121 = 0x66FD0EB66FD0EB67 * ((a3[1] - *a3) >> 3);
    uint64_t v122 = 0x66FD0EB66FD0EB67 * ((a1[1] - *a1) >> 3);
    uint64_t v123 = 0x66FD0EB66FD0EB67 * ((a4[1] - *a4) >> 3);
    uint64_t v124 = 0x66FD0EB66FD0EB67 * ((a4[4] - a4[3]) >> 3);
    *(_DWORD *)int buf = 134350592;
    *(void *)&uint8_t buf[4] = v121;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = a2;
    *(_WORD *)&unsigned char buf[18] = 2050;
    *(void *)&buf[20] = v122;
    *(_WORD *)&unsigned char buf[28] = 1026;
    *(_DWORD *)&buf[30] = HIDWORD(v137);
    *(_WORD *)&buf[34] = 1026;
    *(_DWORD *)&buf[36] = v137;
    *(_WORD *)&buf[40] = 2050;
    *(void *)&buf[42] = v123;
    *(_WORD *)&buf[50] = 2050;
    *(void *)&buf[52] = v124;
    _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEFAULT, "CellFlow, selectsize, %{public}lu, thisslot, %{public}d, %{public}lu, valid, %{public}d, serving, %{public}d, slotcells, %{public}lu, %{public}lu", buf, 0x3Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022C2220);
    }
    uint64_t v127 = 0x66FD0EB66FD0EB67 * ((a3[1] - *a3) >> 3);
    uint64_t v128 = 0x66FD0EB66FD0EB67 * ((a1[1] - *a1) >> 3);
    uint64_t v129 = 0x66FD0EB66FD0EB67 * ((a4[1] - *a4) >> 3);
    uint64_t v130 = 0x66FD0EB66FD0EB67 * ((a4[4] - a4[3]) >> 3);
    *(_DWORD *)double v146 = 134350592;
    *(void *)&v146[4] = v127;
    *(_WORD *)&v146[12] = 1026;
    *(_DWORD *)&v146[14] = a2;
    *(_WORD *)&v146[18] = 2050;
    *(void *)&v146[20] = v128;
    *(_WORD *)&v146[28] = 1026;
    *(_DWORD *)&v146[30] = HIDWORD(v137);
    *(_WORD *)&v146[34] = 1026;
    *(_DWORD *)&v146[36] = v137;
    *(_WORD *)&v146[40] = 2050;
    *(void *)&v146[42] = v129;
    *(_WORD *)&v146[50] = 2050;
    *(void *)&v146[52] = v130;
    uint64_t v131 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::selectCurrentCells(CLCellVector, int, CLCellVector &, CLCellVector (&)[2])", "%s\n", v131);
    if (v131 != buf) {
      free(v131);
    }
  }
}

void sub_1000FC23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

__n128 sub_1000FC2C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  long long v5 = *(_OWORD *)(a3 + 16);
  long long v6 = *(_OWORD *)(a3 + 32);
  long long v7 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 60) = *(_OWORD *)(a3 + 60);
  *(_OWORD *)(a2 + 32) = v6;
  *(_OWORD *)(a2 + 48) = v7;
  *(_OWORD *)(a2 + 16) = v5;
  uint64_t v8 = a3 + 80;
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a3 + 80);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  uint64_t v9 = a2 + 88;
  *(void *)(a2 + 104) = 0;
  sub_10010F834((void *)(a2 + 88), *(const void **)(a3 + 88), *(void *)(a3 + 96), (uint64_t)(*(void *)(a3 + 96) - *(void *)(a3 + 88)) >> 2);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(v8 + 32);
  long long v10 = *(_OWORD *)(v8 + 48);
  long long v11 = *(_OWORD *)(v8 + 64);
  long long v12 = *(_OWORD *)(v8 + 80);
  *(_OWORD *)(v9 + 88) = *(_OWORD *)(v8 + 96);
  *(_OWORD *)(v9 + 72) = v12;
  *(_OWORD *)(v9 + 56) = v11;
  *(_OWORD *)(v9 + 40) = v10;
  long long v13 = *(_OWORD *)(v8 + 112);
  long long v14 = *(_OWORD *)(v8 + 128);
  long long v15 = *(_OWORD *)(v8 + 144);
  *(_OWORD *)(v9 + 152) = *(_OWORD *)(v8 + 160);
  *(_OWORD *)(v9 + 136) = v15;
  *(_OWORD *)(v9 + 120) = v14;
  *(_OWORD *)(v9 + 104) = v13;
  long long v16 = *(_OWORD *)(v8 + 176);
  long long v17 = *(_OWORD *)(v8 + 192);
  long long v18 = *(_OWORD *)(v8 + 208);
  *(_OWORD *)(v9 + 212) = *(_OWORD *)(v8 + 220);
  *(_OWORD *)(v9 + 200) = v18;
  *(_OWORD *)(v9 + 184) = v17;
  *(_OWORD *)(v9 + 168) = v16;
  long long v19 = (unsigned char *)(v9 + 232);
  if (*(char *)(v8 + 263) < 0)
  {
    sub_1000DC48C(v19, *(void **)(a3 + 320), *(void *)(a3 + 328));
  }
  else
  {
    long long v20 = *(_OWORD *)(v8 + 240);
    *(void *)(v9 + 248) = *(void *)(v8 + 256);
    *(_OWORD *)long long v19 = v20;
  }
  long long v21 = *(_OWORD *)(a3 + 344);
  long long v22 = *(_OWORD *)(a3 + 376);
  *(_OWORD *)(a2 + 360) = *(_OWORD *)(a3 + 360);
  *(_OWORD *)(a2 + 376) = v22;
  *(_OWORD *)(a2 + 344) = v21;
  long long v23 = *(_OWORD *)(a3 + 392);
  long long v24 = *(_OWORD *)(a3 + 408);
  long long v25 = *(_OWORD *)(a3 + 440);
  *(_OWORD *)(a2 + 424) = *(_OWORD *)(a3 + 424);
  *(_OWORD *)(a2 + 440) = v25;
  *(_OWORD *)(a2 + 392) = v23;
  *(_OWORD *)(a2 + 408) = v24;
  long long v26 = *(_OWORD *)(a3 + 456);
  long long v27 = *(_OWORD *)(a3 + 472);
  long long v28 = *(_OWORD *)(a3 + 488);
  *(_DWORD *)(a2 + 504) = *(_DWORD *)(a3 + 504);
  *(_OWORD *)(a2 + 472) = v27;
  *(_OWORD *)(a2 + 488) = v28;
  *(_OWORD *)(a2 + 456) = v26;
  long long v29 = *(_OWORD *)(a3 + 512);
  long long v30 = *(_OWORD *)(a3 + 528);
  long long v31 = *(_OWORD *)(a3 + 560);
  *(_OWORD *)(a2 + 544) = *(_OWORD *)(a3 + 544);
  *(_OWORD *)(a2 + 560) = v31;
  *(_OWORD *)(a2 + 512) = v29;
  *(_OWORD *)(a2 + 528) = v30;
  long long v32 = *(_OWORD *)(a3 + 576);
  long long v33 = *(_OWORD *)(a3 + 592);
  long long v34 = *(_OWORD *)(a3 + 624);
  *(_OWORD *)(a2 + 608) = *(_OWORD *)(a3 + 608);
  *(_OWORD *)(a2 + 624) = v34;
  *(_OWORD *)(a2 + 576) = v32;
  *(_OWORD *)(a2 + 592) = v33;
  __n128 result = *(__n128 *)(a3 + 640);
  long long v36 = *(_OWORD *)(a3 + 656);
  long long v37 = *(_OWORD *)(a3 + 672);
  *(_DWORD *)(a2 + 688) = *(_DWORD *)(a3 + 688);
  *(_OWORD *)(a2 + 656) = v36;
  *(_OWORD *)(a2 + 672) = v37;
  *(__n128 *)(a2 + 640) = result;
  return result;
}

void sub_1000FC434(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 96) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000FC450()
{
  return byte_102477430;
}

uint64_t sub_1000FC45C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1000E9358(a1);

  return sub_1000FC494(v3, a2);
}

uint64_t sub_1000FC494(uint64_t result, uint64_t a2)
{
  if (byte_102477430)
  {
    uint64_t v2 = result;
    uint64_t v3 = +[NSString stringWithCString:a2 encoding:4];
    return _PLLogTimeSensitiveRegisteredEvent(4, v3, v2, 0);
  }
  return result;
}

BOOL sub_1000FC500(uint64_t a1)
{
  int v4 = 0;
  uint64_t v2 = 1;
  if (!sub_1001072EC(a1, &v4, 1))
  {
    int v5 = 3;
    uint64_t v2 = 1;
    if (!sub_1001072EC(a1, &v5, 1))
    {
      int v6 = 4;
      return sub_1001072EC(a1, &v6, 1) != 0;
    }
  }
  return v2;
}

uint64_t sub_1000FC584(uint64_t a1, int *a2, CFDictionaryRef *a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v7 = (const __CFString *)sub_1000FA17C(a2);
    sub_1000FECE0(v7, (uint64_t)&v107);
    uint64_t v8 = v111 >= 0 ? &v107 : (_DWORD **)v107;
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,onTelephonyNotification,%s", buf, 0xCu);
    if (SHIBYTE(v111) < 0) {
      operator delete(v107);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v107, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    CFStringRef v80 = (const __CFString *)sub_1000FA17C(a2);
    sub_1000FECE0(v80, (uint64_t)buf);
    if ((buf[23] & 0x80u) == 0) {
      long long v81 = buf;
    }
    else {
      long long v81 = *(uint8_t **)buf;
    }
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v81;
    long long v82 = (char *)_os_log_send_and_compose_impl();
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v82);
    if (v82 != (char *)&v107) {
      free(v82);
    }
  }
  sub_10013FA80((int)v102, *a3);
  int v100 = 255;
  int v101 = 0;
  uint64_t v9 = (const void *)sub_1000FA17C(a2);
  if (!CFEqual(@"kSuplInitPayloadNotification", v9))
  {
    long long v18 = (const void *)sub_1000FA17C(a2);
    if (CFEqual(@"kSimStatusChangeNotification", v18))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      long long v19 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        long long v107 = (_DWORD *)67109120;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#nilr,#nifc,invoke,%d,onTelephonyNotification(notification, data)", (uint8_t *)&v107, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&v107, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346DC8);
        }
        *(_DWORD *)int buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = 0;
        long long v83 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v83);
        if (v83 != (char *)&v107) {
          free(v83);
        }
      }
      if (sub_1000FED50(a1, 0))
      {
        long long v107 = &dword_101E49DA0;
        long long v20 = sub_1000FEE0C((uint64_t **)(a1 + 760), &dword_101E49DA0, (uint64_t)&unk_101D0B290, &v107);
        sub_1000F7260((uint64_t)v20[5], a2, a3);
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346DC8);
        }
        long long v34 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
        {
          LOWORD(v107) = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "Invalid instance", (uint8_t *)&v107, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(&v107, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102346DC8);
          }
          *(_WORD *)int buf = 0;
          long long v88 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v88);
          if (v88 != (char *)&v107) {
            free(v88);
          }
        }
      }
      if (!sub_1000FED50(a1, 1)) {
        return sub_10013F3C4(v102);
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      long long v35 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        long long v107 = (_DWORD *)0x104000100;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "#nilr,#nifc,invoke,%d,onTelephonyNotification(notification, data)", (uint8_t *)&v107, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&v107, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346DC8);
        }
        *(_DWORD *)int buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = 1;
        long long v89 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v89);
        if (v89 != (char *)&v107) {
          free(v89);
        }
      }
      if (sub_1000FED50(a1, 1))
      {
LABEL_93:
        long long v107 = &dword_101E49DA4;
        long long v30 = sub_1000FEE0C((uint64_t **)(a1 + 760), &dword_101E49DA4, (uint64_t)&unk_101D0B290, &v107);
        goto LABEL_117;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      long long v37 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(v107) = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_FAULT, "Invalid instance", (uint8_t *)&v107, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return sub_10013F3C4(v102);
      }
      bzero(&v107, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_159:
        *(_WORD *)int buf = 0;
        long long v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v17);
        goto LABEL_160;
      }
LABEL_321:
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
      goto LABEL_159;
    }
    long long v31 = (const void *)sub_1000FA17C(a2);
    if (CFEqual(@"kCellInfoNotification", v31))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      long long v32 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        long long v107 = (_DWORD *)67109120;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "#nilr,#nifc,invoke,%d,onTelephonyNotification(notification, data)", (uint8_t *)&v107, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&v107, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346DC8);
        }
        *(_DWORD *)int buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = 0;
        long long v90 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v90);
        if (v90 != (char *)&v107) {
          free(v90);
        }
      }
      if (sub_1000FED50(a1, 0))
      {
        long long v107 = &dword_101E49DA0;
        long long v33 = sub_1000FEE0C((uint64_t **)(a1 + 760), &dword_101E49DA0, (uint64_t)&unk_101D0B290, &v107);
        sub_1000F7260((uint64_t)v33[5], a2, a3);
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346DC8);
        }
        long long v40 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
        {
          LOWORD(v107) = 0;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_FAULT, "Invalid instance", (uint8_t *)&v107, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(&v107, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102346DC8);
          }
          *(_WORD *)int buf = 0;
          long long v91 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v91);
          if (v91 != (char *)&v107) {
            free(v91);
          }
        }
      }
      if (sub_1000FED50(a1, 1))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346DC8);
        }
        long long v41 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          long long v107 = (_DWORD *)0x104000100;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "#nilr,#nifc,invoke,%d,onTelephonyNotification(notification, data)", (uint8_t *)&v107, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&v107, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102346DC8);
          }
          *(_DWORD *)int buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = 1;
          long long v92 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v92);
          if (v92 != (char *)&v107) {
            free(v92);
          }
        }
        if (sub_1000FED50(a1, 1))
        {
          long long v107 = &dword_101E49DA4;
          long long v42 = sub_1000FEE0C((uint64_t **)(a1 + 760), &dword_101E49DA4, (uint64_t)&unk_101D0B290, &v107);
          sub_1000F7260((uint64_t)v42[5], a2, a3);
        }
        else
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102346DC8);
          }
          long long v43 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
          {
            LOWORD(v107) = 0;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_FAULT, "Invalid instance", (uint8_t *)&v107, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(&v107, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102346DC8);
            }
            *(_WORD *)int buf = 0;
            long long v94 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v94);
            if (v94 != (char *)&v107) {
              free(v94);
            }
          }
        }
      }
      if (sub_1000FEF64())
      {
        CFDictionaryRef v44 = *a3;
        if (!*a3) {
          return sub_10013F3C4(v102);
        }
      }
      else
      {
        BOOL v45 = sub_1000FEED0();
        CFDictionaryRef v44 = *a3;
        if (!*a3) {
          BOOL v45 = 0;
        }
        if (!v45) {
          return sub_10013F3C4(v102);
        }
      }
      memset(__p, 0, 24);
      memset(buf, 0, sizeof(buf));
      int v105 = 1065353216;
      if (sub_1000FF5A4(v44, (uint64_t)buf))
      {
        *(void *)long long v103 = a1 + 1232;
        if (*((void *)sub_10010D968((uint64_t)buf, (int *)(a1 + 1232), (uint64_t)&unk_101D0B290, (_DWORD **)v103) + 3))
        {
          sub_10010D904(*(_DWORD *)(a1 + 1232), (uint64_t)buf, (uint64_t *)__p);
          sub_1000FA8B8((uint64_t *)__p, &v107);
          sub_1000F399C(a1, (uint64_t)&v107);
          sub_1000F3950((uint64_t)&v107);
        }
        else
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102346DC8);
          }
          uint64_t v50 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            long long v107 = (_DWORD *)68289026;
            __int16 v108 = 2082;
            long long v109 = "";
            _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ci,cellInfo,error fetching cell info\"}", (uint8_t *)&v107, 0x12u);
          }
        }
      }
      sub_1000FF568((uint64_t)buf);
      long long v107 = __p;
      sub_1000FA7C8((void ***)&v107);
      return sub_10013F3C4(v102);
    }
    long long v38 = (const void *)sub_1000FA17C(a2);
    if (CFEqual(@"kCellRefreshNotification", v38))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      long long v39 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        long long v107 = (_DWORD *)67109120;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "#nilr,#nifc,invoke,%d,onTelephonyNotification(notification, data)", (uint8_t *)&v107, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&v107, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346DC8);
        }
        *(_DWORD *)int buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = 0;
        long long v93 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v93);
        if (v93 != (char *)&v107) {
          free(v93);
        }
      }
      if (sub_1000FED50(a1, 0))
      {
        long long v107 = &dword_101E49DA0;
        long long v30 = sub_1000FEE0C((uint64_t **)(a1 + 760), &dword_101E49DA0, (uint64_t)&unk_101D0B290, &v107);
        goto LABEL_117;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      int v49 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(v107) = 0;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_FAULT, "Invalid instance", (uint8_t *)&v107, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return sub_10013F3C4(v102);
      }
      bzero(&v107, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_159;
      }
      goto LABEL_321;
    }
    uint64_t v46 = (const void *)sub_1000FA17C(a2);
    if (CFEqual(@"kCLTelephonyServiceDisconnectedNotification", v46))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      uint64_t v47 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        long long v107 = (_DWORD *)67109120;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,onTelephonyNotification(notification, data)", (uint8_t *)&v107, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&v107, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346DC8);
        }
        *(_DWORD *)int buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = 0;
        long long v95 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v95);
        if (v95 != (char *)&v107) {
          free(v95);
        }
      }
      if (sub_1000FED50(a1, 0))
      {
        long long v107 = &dword_101E49DA0;
        uint64_t v48 = sub_1000FEE0C((uint64_t **)(a1 + 760), &dword_101E49DA0, (uint64_t)&unk_101D0B290, &v107);
        sub_1000F7260((uint64_t)v48[5], a2, a3);
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346DC8);
        }
        long long v59 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
        {
          LOWORD(v107) = 0;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_FAULT, "Invalid instance", (uint8_t *)&v107, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(&v107, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102346DC8);
          }
          *(_WORD *)int buf = 0;
          long long v96 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v96);
          if (v96 != (char *)&v107) {
            free(v96);
          }
        }
      }
      if (!sub_1000FED50(a1, 1)) {
        return sub_10013F3C4(v102);
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      long long v60 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        long long v107 = (_DWORD *)0x104000100;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,onTelephonyNotification(notification, data)", (uint8_t *)&v107, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&v107, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346DC8);
        }
        *(_DWORD *)int buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = 1;
        long long v97 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v97);
        if (v97 != (char *)&v107) {
          free(v97);
        }
      }
      if (sub_1000FED50(a1, 1)) {
        goto LABEL_93;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      long long v63 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(v107) = 0;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_FAULT, "Invalid instance", (uint8_t *)&v107, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return sub_10013F3C4(v102);
      }
      bzero(&v107, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_159;
      }
      goto LABEL_321;
    }
    uint64_t v52 = (const void *)sub_1000FA17C(a2);
    if (CFEqual(v52, @"kSubscriptionChangeNotification") && (sub_1000FEF64() || sub_1000FEED0()))
    {
      CFDictionaryRef v53 = *a3;
      if (*a3)
      {
        memset(buf, 0, sizeof(buf));
        int v105 = 1065353216;
        if (sub_101332B64(v53, (uint64_t)buf))
        {
          v103[0] = 0;
          long long v107 = v103;
          int v54 = *((unsigned __int8 *)sub_100980B28((uint64_t)buf, v103, (uint64_t)&unk_101D0B290, &v107) + 20);
          long long v107 = v103;
          int v55 = *((unsigned __int8 *)sub_100980B28((uint64_t)buf, v103, (uint64_t)&unk_101D0B290, &v107) + 22);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102346DC8);
          }
          long long v56 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            int v57 = v103[0];
            __p[0] = v103;
            int v58 = *((unsigned __int8 *)sub_100980B28((uint64_t)buf, v103, (uint64_t)&unk_101D0B290, (_DWORD **)__p) + 21);
            long long v107 = (_DWORD *)68290050;
            __int16 v108 = 2082;
            long long v109 = "";
            __int16 v110 = 1026;
            int v111 = v57;
            __int16 v112 = 1026;
            int v113 = v54;
            __int16 v114 = 1026;
            int v115 = v58;
            __int16 v116 = 1026;
            int v117 = v55;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#timingadvance,kSubscriptionChangeNotification for sim1\", \"sim\":%{public}d, \"userDataPreferred\":%{public}hhd, \"userDefaultVoice\":%{public}hhd, \"isSimPresent\":%{public}hhd}", (uint8_t *)&v107, 0x2Au);
          }
          if (v54 && v55)
          {
            *(_DWORD *)(a1 + 1232) = 0;
          }
          else if (sub_1000FFBA8())
          {
            int v99 = 1;
            long long v107 = &v99;
            int v75 = *((unsigned __int8 *)sub_100980B28((uint64_t)buf, &v99, (uint64_t)&unk_101D0B290, &v107) + 20);
            long long v107 = &v99;
            int v76 = *((unsigned __int8 *)sub_100980B28((uint64_t)buf, &v99, (uint64_t)&unk_101D0B290, &v107) + 22);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102346DC8);
            }
            long long v77 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
            {
              int v78 = v99;
              __p[0] = &v99;
              int v79 = *((unsigned __int8 *)sub_100980B28((uint64_t)buf, &v99, (uint64_t)&unk_101D0B290, (_DWORD **)__p) + 21);
              long long v107 = (_DWORD *)68290050;
              __int16 v108 = 2082;
              long long v109 = "";
              __int16 v110 = 1026;
              int v111 = v78;
              __int16 v112 = 1026;
              int v113 = v75;
              __int16 v114 = 1026;
              int v115 = v79;
              __int16 v116 = 1026;
              int v117 = v76;
              _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#timingadvance,kSubscriptionChangeNotification for sim2\", \"sim\":%{public}d, \"userDataPreferred\":%{public}hhd, \"userDefaultVoice\":%{public}hhd, \"isSimPresent\":%{public}hhd}", (uint8_t *)&v107, 0x2Au);
            }
            if (v75 && v76) {
              *(_DWORD *)(a1 + 1232) = 1;
            }
          }
        }
        else
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102346DC8);
          }
          long long v71 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v107) = 0;
            _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "#timingadvance,kSubscriptionChangeNotification,error fetching context", (uint8_t *)&v107, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(&v107, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102346DC8);
            }
            LOWORD(__p[0]) = 0;
            long long v72 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v72);
            if (v72 != (char *)&v107) {
              free(v72);
            }
          }
        }
        sub_1000D7D80((uint64_t)buf);
      }
      return sub_10013F3C4(v102);
    }
    long long v61 = (const void *)sub_1000FA17C(a2);
    if (!CFEqual(v61, @"kCLCellularTransmitStateNotification")) {
      return sub_10013F3C4(v102);
    }
    if (sub_1000FEF64())
    {
      CFDictionaryRef v62 = *a3;
      if (!*a3) {
        return sub_10013F3C4(v102);
      }
    }
    else
    {
      BOOL v64 = sub_1000FEED0();
      CFDictionaryRef v62 = *a3;
      if (*a3) {
        BOOL v65 = v64;
      }
      else {
        BOOL v65 = 0;
      }
      if (!v65) {
        return sub_10013F3C4(v102);
      }
    }
    sub_10013FA80((int)__p, v62);
    long long v66 = (BOOL *)(a1 + 1236);
    if (sub_1000D29FC((uint64_t)__p, @"kCLCellularTransmitStateNotification", v66))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      long long v67 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        BOOL v68 = *v66;
        LODWORD(v107) = 67109120;
        HIDWORD(v107) = v68;
        _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "#nifc #timingadvance,kTransmitStateNotification, %d", (uint8_t *)&v107, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_236;
      }
      bzero(&v107, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      BOOL v69 = *v66;
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v69;
      long long v70 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v70);
      if (v70 == (char *)&v107) {
        goto LABEL_236;
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      long long v73 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000FECE0(@"kCLCellularTransmitStateNotification", (uint64_t)&v107);
        long long v74 = v111 >= 0 ? &v107 : (_DWORD **)v107;
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = v74;
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "#Warning,#cts,key,%{public}s,notExist", buf, 0xCu);
        if (SHIBYTE(v111) < 0) {
          operator delete(v107);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_236;
      }
      bzero(&v107, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      sub_1000FECE0(@"kCLCellularTransmitStateNotification", (uint64_t)buf);
      if ((buf[23] & 0x80u) == 0) {
        long long v98 = buf;
      }
      else {
        long long v98 = *(uint8_t **)buf;
      }
      v103[0] = 136446210;
      *(void *)&v103[1] = v98;
      long long v70 = (char *)_os_log_send_and_compose_impl();
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v70);
      if (v70 == (char *)&v107) {
        goto LABEL_236;
      }
    }
    free(v70);
LABEL_236:
    sub_10013F3C4(__p);
    return sub_10013F3C4(v102);
  }
  if (sub_10013E418((uint64_t)v102, @"kSlotIdKey", &v101))
  {
    int v10 = sub_100090424(v101);
    signed int v11 = v10;
    int v100 = v10;
    if (!*(unsigned char *)(a1 + 792) && v10)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      long long v12 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v13 = (const __CFString *)sub_1000FA17C(a2);
        sub_1000FECE0(v13, (uint64_t)buf);
        long long v14 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
        LODWORD(v107) = 67109634;
        HIDWORD(v107) = v11;
        __int16 v108 = 2080;
        long long v109 = (const char *)v14;
        __int16 v110 = 1024;
        int v111 = v101;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#nilr,#nifc,#ins%d,onTelephonyNotification,%s,invalidInstance,slot,%d", (uint8_t *)&v107, 0x18u);
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&v107, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346DC8);
        }
        CFStringRef v15 = (const __CFString *)sub_1000FA17C(a2);
        sub_1000FECE0(v15, (uint64_t)__p);
        if (SHIBYTE(__p[2]) >= 0) {
          long long v16 = __p;
        }
        else {
          long long v16 = (void **)__p[0];
        }
        *(_DWORD *)int buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v11;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = v16;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v101;
        long long v17 = (char *)_os_log_send_and_compose_impl();
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_55;
      }
      return sub_10013F3C4(v102);
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    long long v26 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v27 = (const __CFString *)sub_1000FA17C(a2);
      sub_1000FECE0(v27, (uint64_t)&v107);
      long long v28 = v111 >= 0 ? &v107 : (_DWORD **)v107;
      *(_DWORD *)int buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = v28;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,#ins%d,onTelephonyNotification,%s", buf, 0x12u);
      if (SHIBYTE(v111) < 0) {
        operator delete(v107);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v107, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      CFStringRef v84 = (const __CFString *)sub_1000FA17C(a2);
      sub_1000FECE0(v84, (uint64_t)buf);
      if ((buf[23] & 0x80u) == 0) {
        uint64_t v85 = buf;
      }
      else {
        uint64_t v85 = *(uint8_t **)buf;
      }
      LODWORD(__p[0]) = 67109378;
      HIDWORD(__p[0]) = v11;
      LOWORD(__p[1]) = 2080;
      *(void **)((char *)&__p[1] + 2) = v85;
      uint64_t v86 = (char *)_os_log_send_and_compose_impl();
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v86);
      if (v86 != (char *)&v107) {
        free(v86);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    long long v29 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v107) = 67109120;
      HIDWORD(v107) = v11;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,onTelephonyNotification(notification, data)", (uint8_t *)&v107, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v107, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v11;
      int v87 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v87);
      if (v87 != (char *)&v107) {
        free(v87);
      }
    }
    if (sub_1000FED50(a1, v11))
    {
      long long v107 = &v100;
      long long v30 = sub_1000FEE0C((uint64_t **)(a1 + 760), &v100, (uint64_t)&unk_101D0B290, &v107);
LABEL_117:
      sub_1000F7260((uint64_t)v30[5], a2, a3);
      return sub_10013F3C4(v102);
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    long long v36 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v107) = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "Invalid instance", (uint8_t *)&v107, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return sub_10013F3C4(v102);
    }
    bzero(&v107, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    *(_WORD *)int buf = 0;
    long long v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v17);
LABEL_160:
    if (v17 != (char *)&v107)
    {
LABEL_161:
      free(v17);
      return sub_10013F3C4(v102);
    }
    return sub_10013F3C4(v102);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  long long v21 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    CFStringRef v22 = (const __CFString *)sub_1000FA17C(a2);
    sub_1000FECE0(v22, (uint64_t)&v107);
    long long v23 = v111 >= 0 ? &v107 : (_DWORD **)v107;
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = v23;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#nilr,#nifc,onTelephonyNotification,%s,slot,na", buf, 0xCu);
    if (SHIBYTE(v111) < 0) {
      operator delete(v107);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(&v107, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    CFStringRef v24 = (const __CFString *)sub_1000FA17C(a2);
    sub_1000FECE0(v24, (uint64_t)buf);
    if ((buf[23] & 0x80u) == 0) {
      long long v25 = buf;
    }
    else {
      long long v25 = *(uint8_t **)buf;
    }
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v25;
    long long v17 = (char *)_os_log_send_and_compose_impl();
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
LABEL_55:
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v17);
    if (v17 == (char *)&v107) {
      return sub_10013F3C4(v102);
    }
    goto LABEL_161;
  }
  return sub_10013F3C4(v102);
}

void sub_1000FEBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  sub_10013F3C4(va1);
  sub_10013F3C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_1000FECE0@<W0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  BOOL result = sub_10013D274(a1, (std::string *)a2);
  if (!result)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(unsigned char **)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 23) = 0;
    }
  }
  return result;
}

void sub_1000FED34(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000FED50(uint64_t a1, signed int a2)
{
  BOOL result = 0;
  int v13 = a2;
  if (a2) {
    BOOL v4 = *(unsigned char *)(a1 + 792) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  int v5 = !v4;
  if (a2 <= 1 && v5)
  {
    uint64_t v6 = *(void *)(a1 + 768);
    if (!v6) {
      return 0;
    }
    uint64_t v7 = (uint64_t **)(a1 + 760);
    uint64_t v8 = a1 + 768;
    uint64_t v9 = v8;
    do
    {
      signed int v10 = *(_DWORD *)(v6 + 32);
      BOOL v11 = v10 < a2;
      if (v10 >= a2) {
        uint64_t v12 = (uint64_t *)v6;
      }
      else {
        uint64_t v12 = (uint64_t *)(v6 + 8);
      }
      if (!v11) {
        uint64_t v9 = v6;
      }
      uint64_t v6 = *v12;
    }
    while (*v12);
    if (v9 != v8 && *(_DWORD *)(v9 + 32) <= a2)
    {
      uint64_t v14 = &v13;
      return sub_1000FEE0C(v7, &v13, (uint64_t)&unk_101D0B290, &v14)[5] != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t **sub_1000FEE0C(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    BOOL v11 = operator new(0x30uLL);
    _OWORD v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    sub_1000EDF90(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

BOOL sub_1000FEED0()
{
  if ((sub_1000FF52C() & 1) == 0 && (sub_1000FFFBC() & 1) == 0 && !sub_1000FFF30()) {
    return 0;
  }
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D4A8 != -1) {
    dispatch_once(&qword_10247D4A8, &stru_1022C6710);
  }
  return (byte_10247D4A0 & 1) != 0;
}

BOOL sub_1000FEF64()
{
  sub_1000C7F88(&v3);
  BOOL v5 = 0;
  int v0 = sub_1000D2988(v3, "TimingAdvanceSupport", &v5);
  if (v5) {
    int v1 = v0;
  }
  else {
    int v1 = 0;
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if (!v1 || (sub_1000FF52C() & 1) == 0 && (sub_1000FFFBC() & 1) == 0 && !sub_1000FFF30()) {
    return 0;
  }
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D4A8 != -1) {
    dispatch_once(&qword_10247D4A8, &stru_1022C6710);
  }
  return (byte_10247D4A0 & 1) != 0;
}

void sub_1000FF048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000FF060(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  BOOL v5 = (void *)sub_100103D58();
  uint64_t v6 = (uint64_t)v5;
  if (v5)
  {
    [v5 cppClientKey];
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v18 = 0;
  }
  if (*a3)
  {
    if (sub_1001239E8(a1, v6, (uint64_t)a3))
    {
      sub_10010702C((uint64_t **)(a1 + 728), (const void **)__p, (uint64_t)__p);
      if (([*(id *)(a1 + 136) isKeyPathRegisteredSystemService:v6] & 1) == 0) {
        sub_10010702C((uint64_t **)(a1 + 752), (const void **)__p, (uint64_t)__p);
      }
    }
    if (*((double *)a3 + 1) == INFINITY)
    {
      if (*((_DWORD *)a3 + 6))
      {
        if (a3[29]) {
          double v8 = 2147483650.0;
        }
        else {
          double v8 = -1.0;
        }
        [*(id *)(a1 + 136) setDouble:@"LocationDesiredAccuracy" forKey:v6 atKeyPath:v8];
        uint64_t v9 = sub_100121FEC(v8);
        [*(id *)(a1 + 136) setArray:v9 forKey:@"LocationTechnologiesInUse" atKeyPath:v6];
        CFRelease(v9);
      }
      else
      {
        [*(id *)(a1 + 136) removeValueForKey:@"LocationDesiredAccuracy" atKeyPath:v6];
        [*(id *)(a1 + 136) removeValueForKey:@"LocationTechnologiesInUse" atKeyPath:v6];
      }
    }
    else
    {
      [*(id *)(a1 + 136) setDouble:v6 forKey:@"LocationDesiredAccuracy" atKeyPath:@"LocationDesiredAccuracy"];
      uint64_t v7 = sub_100121FEC(*((double *)a3 + 1));
      [*(id *)(a1 + 136) setArray:v7 forKey:@"LocationTechnologiesInUse" atKeyPath:v6];
      CFRelease(v7);
    }
    int v10 = *(void **)(a1 + 136);
    if (*((double *)a3 + 2) <= 0.0) {
      [v10 removeValueForKey:@"LocationDistanceFilter" atKeyPath:v6];
    }
    else {
      [v10 setDouble:v6 forKey:@"LocationDistanceFilter" atKeyPath:v11];
    }
    [*(id *)(a1 + 136) setBool:a3[28] forKey:@"BatchEnabled" atKeyPath:v6];
  }
  else
  {
    sub_1001055EC((uint64_t **)(a1 + 728), (const void **)__p);
    sub_1001055EC((uint64_t **)(a1 + 752), (const void **)__p);
    [*(id *)(a1 + 136) removeValueForKey:@"LocationTechnologiesInUse" atKeyPath:v6];
    [*(id *)(a1 + 136) removeValueForKey:@"LocationDesiredAccuracy" atKeyPath:v6];
    [*(id *)(a1 + 136) removeValueForKey:@"LocationDistanceFilter" atKeyPath:v6];
    [*(id *)(a1 + 136) removeValueForKey:@"BatchEnabled" atKeyPath:v6];
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  BOOL v11 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = *(void *)(a1 + 744);
    *(_DWORD *)int buf = 134349056;
    uint64_t v22 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "currently %{public}lu non-system location clients", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v15 = *(void *)(a1 + 744);
    int v19 = 134349056;
    uint64_t v20 = v15;
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::setClientState(CLClientKeyPath *, const CLClientManager_Type::ClientState &)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  int v13 = *a3;
  v14.n128_f64[0] = CFAbsoluteTimeGetCurrent();
  sub_1001005FC(a1, v6, 4, v13 != 0, 0, 0, v14);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000FF498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000FF52C()
{
  uint64_t result = sub_1000FFC30();
  if (result) {
    return (sub_1000FFD88() & 1) == 0 && (sub_1000FFCFC() & 1) == 0 && !sub_1000FFC88();
  }
  return result;
}

uint64_t sub_1000FF568(uint64_t a1)
{
  sub_10010057C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

BOOL sub_1000FF5A4(void *a1, uint64_t a2)
{
  id v4 = [a1 objectForKey:@"kSlotOne"];
  if (!v4)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    uint64_t v9 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl couldn't get cell information for SIM 1", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    LOWORD(v13) = 0;
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromCellInfoDictionary(CFDictionaryRef, std::unordered_map<SimInstance, CLCTCellInfo> &)", "%s\n", v10);
LABEL_23:
    if (v10 != (char *)buf) {
      free(v10);
    }
    return 0;
  }
  sub_10010032C(&v13, v4);
  int v12 = 0;
  *(void *)int buf = &v12;
  BOOL v5 = sub_1000FF948(a2, &v12, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  sub_100100090((id *)v5 + 3, &v13);
  sub_1001005F8(&v13);
  if (!sub_1000FFBA8()) {
    return 1;
  }
  id v6 = [a1 objectForKey:@"kSlotTwo"];
  if (v6)
  {
    sub_10010032C(&v13, v6);
    int v12 = 1;
    *(void *)int buf = &v12;
    uint64_t v7 = sub_1000FF948(a2, &v12, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_100100090((id *)v7 + 3, &v13);
    sub_1001005F8(&v13);
    return 1;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102320830);
  }
  BOOL v11 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#ctcl couldn't get cell information for SIM 2", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102320830);
    }
    LOWORD(v13) = 0;
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromCellInfoDictionary(CFDictionaryRef, std::unordered_map<SimInstance, CLCTCellInfo> &)", "%s\n", v10);
    goto LABEL_23;
  }
  return result;
}

void sub_1000FF928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1001005F8(va);
  _Unwind_Resume(a1);
}

char *sub_1000FF948(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(char ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = *(char **)i)
      {
        unint64_t v12 = *((void *)i + 1);
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = a1 + 16;
  __n128 v14 = (char *)operator new(0x20uLL);
  v24[0] = v14;
  v24[1] = (char *)(a1 + 16);
  *(void *)__n128 v14 = 0;
  *((void *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *((void *)v14 + 3) = 0;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100100330(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  long long v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(char **)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(char **)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  uint64_t i = v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  sub_1001000D4(v24, 0);
  return i;
}

void sub_1000FFB90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001000D4((char **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FFBA8()
{
  if (qword_10247D4A8 != -1) {
    dispatch_once(&qword_10247D4A8, &stru_1022C6710);
  }
  if (byte_10247D4A0 != 1) {
    return 0;
  }
  if (sub_1000FFFBC() & 1) != 0 || (sub_1000FFF30() & 1) != 0 || (sub_1000FFC30()) {
    return 1;
  }

  return sub_10073C6AC();
}

uint64_t sub_1000FFC30()
{
  if ((sub_1000FFD88() & 1) != 0
    || (sub_1000FFCFC() & 1) != 0
    || (sub_1000FFEA4() & 1) != 0
    || sub_1000FFC88()
    || (sub_1000FFE14() & 1) != 0)
  {
    return 1;
  }

  return sub_100737DF0();
}

BOOL sub_1000FFC88()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  return dword_10247D340 == 219;
}

uint64_t sub_1000FFCFC()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  return ((dword_10247D340 - 172) < 0x27) & (0x4400020033uLL >> (dword_10247D340
                                                                                           + 84));
}

uint64_t sub_1000FFD88()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  return ((dword_10247D340 - 168) < 0x21) & (0x14000000FuLL >> (dword_10247D340
                                                                                          + 88));
}

uint64_t sub_1000FFE14()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  return ((dword_10247D340 - 180) < 0x40) & (0xB0500C5410000003 >> (dword_10247D340
                                                                                                + 76));
}

uint64_t sub_1000FFEA4()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  return ((dword_10247D340 - 178) < 0x35) & (0x140C0000000003uLL >> (dword_10247D340
                                                                                               + 78));
}

uint64_t sub_1000FFF30()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  return ((dword_10247D340 - 139) < 0x34) & (0x900000005001DuLL >> (dword_10247D340
                                                                                              + 117));
}

uint64_t sub_1000FFFBC()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  uint64_t result = 1;
  if (dword_10247D340 > 134)
  {
    if (((dword_10247D340 - 135) > 0xA || ((1 << (dword_10247D340 + 121)) & 0x405) == 0)
      && dword_10247D340 != 202
      && dword_10247D340 != 204)
    {
      return 0;
    }
  }
  else if ((dword_10247D340 - 34) > 0x2E {
         || ((1 << (dword_10247D340 - 34)) & 0x700000008001) == 0)
  }
  {
    return 0;
  }
  return result;
}

id *sub_100100090(id *a1, id *a2)
{
  if (a1 != a2)
  {

    *a1 = *a2;
    *a2 = 0;
  }
  return a1;
}

void sub_1001000D4(char **a1, char *a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      sub_1001005F8(v2 + 24);
    }
    operator delete(v2);
  }
}

id *sub_10010012C(id *a1, void *a2)
{
  *a1 = 0;
  id v3 = [a2 valueForKey:@"kCellRefreshNotification"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    *a1 = v3;
    id v4 = v3;
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022BB348);
  }
  BOOL v5 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [*a1 count];
    *(_DWORD *)int buf = 134217984;
    id v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#clct,CLCTCellInfo, received cellList size,%lu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    [*a1 count];
    unint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTelephonyService_Type::CLCTCellInfo::CLCTCellInfo(CFDictionaryRef)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return a1;
}

void sub_100100330(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_100100420(a1, prime);
    }
  }
}

void sub_100100420(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_1001D7FA0();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      BOOL v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *BOOL v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            BOOL v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          BOOL v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    id v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void sub_10010057C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      id v3 = (void *)*v2;
      sub_1001005F8(v2 + 3);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

id *sub_1001005C0(id *a1)
{
  if (*a1)
  {

    *a1 = 0;
  }
  return a1;
}

uint64_t sub_1001005FC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, double a7)
{
  id v12 = sub_100103D58(a1, a2);
  BOOL v64 = 0;
  uint64_t v65 = 0;
  unint64_t v59 = a3;
  sub_100101464(a3, &v65, &v64);
  if (sub_1001013C0(a1, a3, (uint64_t)v12, a6 == 0))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022C97E8);
    }
    uint64_t v13 = qword_102419528;
    a5 = 0;
    a4 = 0;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Non-persistent SLC usage detected\"}", buf, 0x12u);
      a5 = 0;
      a4 = 0;
    }
  }
  if (a6 != 1)
  {
    uint64_t v22 = v65;
    [*(id *)(a1 + 136) doubleForKey:v65 atKeyPath:v12 defaultValue:-1.0];
    double v24 = v23;
    char v25 = v64;
    [*(id *)(a1 + 136) doubleForKey:v64 atKeyPath:v12 defaultValue:-1.0];
    if (a4)
    {
      BOOL v27 = v26 != -1.0 || v24 == -1.0;
      if (!v27 && v24 <= a7)
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022C97E8);
        }
        long long v28 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 138412290;
          *(void *)&uint8_t buf[4] = v12;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "#Warning, new start time for %@ is after it's stored time", buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 2)) {
          return 0;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419520 == -1) {
          goto LABEL_123;
        }
        goto LABEL_125;
      }
      [*(id *)(a1 + 136) setDouble:v22 forKey:v12 atKeyPath:a7];
      [*(id *)(a1 + 136) removeValueForKey:v25 atKeyPath:v12];
      if (!v27)
      {
LABEL_41:
        uint64_t v29 = 0;
        if (a6)
        {
LABEL_116:
          sub_1001019E0(a1, (uint64_t)v12);
          return v29;
        }
        goto LABEL_83;
      }
    }
    else
    {
      if (v24 == -1.0) {
        int v30 = a5;
      }
      else {
        int v30 = 1;
      }
      if (v30 != 1) {
        goto LABEL_41;
      }
      [*(id *)(a1 + 136) setDouble:v25 forKey:v12 atKeyPath:a7];
      [*(id *)(a1 + 136) removeValueForKey:v22 atKeyPath:v12];
      sub_1007A6C10(a1);
    }
LABEL_67:
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    long long v37 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      long long v38 = off_1022C8D98[v59];
      *(_DWORD *)int buf = 138412802;
      *(void *)&uint8_t buf[4] = v12;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = v38;
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = a4;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "Service: key, %@, type, %s, active, %d", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      int v55 = off_1022C8D98[v59];
      int v69 = 138412802;
      id v70 = v12;
      __int16 v71 = 2080;
      long long v72 = v55;
      __int16 v73 = 1024;
      int v74 = a4;
      long long v56 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLClientManager::setClientServiceActiveAtTime(CLClientKeyPath *, CLClientServiceType, BOOL, BOOL, double, Device)", "%s\n", v56);
      if (v56 != buf) {
        free(v56);
      }
    }
    sub_100105FDC((unsigned char *)a1);
    if (a6)
    {
      uint64_t v29 = 1;
      goto LABEL_111;
    }
    if (!_os_feature_enabled_impl() || v59 <= 0xA && ((1 << v59) & 0x430) != 0)
    {
      long long v39 = (const char *)[v12 legacyClientKey];
      long long v40 = v39 ? (char *)v39 : "";
      sub_100134750(buf, v40);
      sub_100106098(a1, buf);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    id v41 = [objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v12) dictionary];
    id v67 = [v12 legacyClientKey];
    id v68 = v41;
    sub_100105634((uint64_t)+[NSDictionary dictionaryWithObjects:&v68 forKeys:&v67 count:1], (uint64_t)"clientStatus");
    uint64_t v29 = 1;
LABEL_83:
    if (((1 << v59) & 0xFFFFFFD1) == 0)
    {
      if (a4)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        long long v42 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&unsigned char buf[18] = 2114;
          *(void *)&buf[20] = v12;
          __int16 v79 = 2050;
          unint64_t v80 = v59;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pla mark service active and start zone-monitoring\", \"Client\":%{public, location:escape_only}@, \"SpecifiedService\":%{public, location:CLClientServiceType}lld}", buf, 0x26u);
        }
        long long v43 = (char *)[v12 legacyClientKey].UTF8String;
        if (v43) {
          CFDictionaryRef v44 = v43;
        }
        else {
          CFDictionaryRef v44 = "";
        }
        sub_100134750(buf, v44);
        sub_1001056A0(a1, (uint64_t *)buf, 1);
      }
      else
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        BOOL v45 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&unsigned char buf[18] = 2114;
          *(void *)&buf[20] = v12;
          __int16 v79 = 2050;
          unint64_t v80 = v59;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pla mark service inactive and try stop zone-monitoring\", \"Client\":%{public, location:escape_only}@, \"SpecifiedService\":%{public, location:CLClientServiceType}lld}", buf, 0x26u);
        }
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        uint64_t v46 = (void *)qword_10247E0A0;
        id v47 = [(id)qword_10247E0A0 countByEnumeratingWithState:&v60 objects:v66 count:16];
        if (v47)
        {
          uint64_t v48 = *(void *)v61;
LABEL_99:
          uint64_t v49 = 0;
          while (1)
          {
            if (*(void *)v61 != v48) {
              objc_enumerationMutation(v46);
            }
            uint64_t v50 = *(void *)(*((void *)&v60 + 1) + 8 * v49);
            LOBYTE(v50) = [*(id *)(a1 + 136) hasValueForKey:v50 atKeyPath:v12];
            if (v50) {
              goto LABEL_111;
            }
            if (v47 == (id)++v49)
            {
              id v47 = [v46 countByEnumeratingWithState:&v60 objects:v66 count:16];
              if (v47) {
                goto LABEL_99;
              }
              break;
            }
          }
        }
        uint64_t v52 = (char *)[[[v12 legacyClientKey] UTF8String];
        if (v52) {
          CFDictionaryRef v53 = v52;
        }
        else {
          CFDictionaryRef v53 = "";
        }
        sub_100134750(buf, v53);
        sub_1001056A0(a1, (uint64_t *)buf, 0);
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
LABEL_111:
    if (v59 == 3 && v29)
    {
      sub_100134750(buf, "");
      sub_1001341F0(a1, v12, (uint64_t)buf);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v29 = 1;
    }
    goto LABEL_116;
  }
  __n128 v14 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", [*(id *)(a1 + 136) dictionaryForKey:@"RemoteUsage" atKeyPath:v12 defaultValue:&__NSDictionary0__struct]);
  unsigned __int8 v15 = [v12 isAuthSharingSubIdentity];
  uint64_t v16 = v65;
  id v17 = [(NSMutableDictionary *)v14 objectForKeyedSubscript:v65];
  unint64_t v18 = v64;
  id v19 = [(NSMutableDictionary *)v14 objectForKeyedSubscript:v64];
  if (v15)
  {
    if (a4)
    {
      if (!v17 || v19)
      {
        v77[0] = &off_102392AB0;
        v77[1] = +[NSNumber numberWithDouble:a7];
        int v20 = 1;
        long long v21 = v77;
      }
      else
      {
        v76[0] = [NSNumber numberWithInt:objc_msgSend(objc_msgSend(v17, "objectAtIndexedSubscript:", 0), "intValue") + 1];
        int v20 = 0;
        v76[1] = [v17 objectAtIndexedSubscript:1];
        long long v21 = v76;
      }
      long long v33 = +[NSArray arrayWithObjects:v21 count:2];
LABEL_56:
      [(NSMutableDictionary *)v14 setObject:v33 forKeyedSubscript:v16];
      [(NSMutableDictionary *)v14 removeObjectForKey:v18];
      [*(id *)(a1 + 136) setDictionary:v14 forKey:@"RemoteUsage" atKeyPath:v12];
      if (!v20) {
        goto LABEL_57;
      }
      goto LABEL_67;
    }
    if (v17) {
      int v34 = 1;
    }
    else {
      int v34 = a5;
    }
    if (v34 == 1)
    {
      if ((int)objc_msgSend(objc_msgSend(v17, "objectAtIndexedSubscript:", 0), "intValue") >= 2)
      {
        v75[0] = [NSNumber numberWithInt:][objc_msgSend(objc_msgSend(v17, "objectAtIndexedSubscript:", 0), "intValue") - 1];
        v75[1] = [v17 objectAtIndexedSubscript:1];
        [(NSMutableDictionary *)v14 setObject:+[NSArray arrayWithObjects:v75 count:2] forKeyedSubscript:v16];
LABEL_66:
        sub_1007A6C10(a1);
        [*(id *)(a1 + 136) setDictionary:v14 forKey:@"RemoteUsage" atKeyPath:v12];
        goto LABEL_67;
      }
LABEL_65:
      [(NSMutableDictionary *)v14 setObject:+[NSNumber numberWithDouble:a7] forKeyedSubscript:v18];
      [(NSMutableDictionary *)v14 removeObjectForKey:v16];
      goto LABEL_66;
    }
LABEL_53:
    [*(id *)(a1 + 136) setDictionary:v14 forKey:@"RemoteUsage" atKeyPath:v12];
LABEL_57:
    uint64_t v29 = 0;
    goto LABEL_116;
  }
  if (!a4)
  {
    if (v17) {
      int v35 = 1;
    }
    else {
      int v35 = a5;
    }
    if (v35 == 1) {
      goto LABEL_65;
    }
    goto LABEL_53;
  }
  if (v17) {
    BOOL v31 = v19 == 0;
  }
  else {
    BOOL v31 = 0;
  }
  int v20 = !v31;
  if (!v31 || ([v17 doubleValue], v32 > a7))
  {
    long long v33 = +[NSNumber numberWithDouble:a7];
    goto LABEL_56;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022C97E8);
  }
  long long v36 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 138412290;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "#Warning, new start time for %@ is after it's stored time", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 == -1)
    {
LABEL_123:
      int v69 = 138412290;
      id v70 = v12;
      int v57 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLClientManager::setClientServiceActiveAtTime(CLClientKeyPath *, CLClientServiceType, BOOL, BOOL, double, Device)", "%s\n", v57);
      if (v57 != buf) {
        free(v57);
      }
      return 0;
    }
LABEL_125:
    dispatch_once(&qword_102419520, &stru_1022C97E8);
    goto LABEL_123;
  }
  return 0;
}

void sub_1001012F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1001013C0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  id v6 = sub_100103E24(a1, a3);
  if (!a4) {
    return 0;
  }
  uint64_t v7 = v6;
  sub_100103240();
  int v8 = sub_10010145C();
  if (a2 != 3 || !v8) {
    return 0;
  }
  id v9 = [v7 bundlePath];
  id v10 = +[NSString stringWithUTF8String:"/System/Library/LocationBundles/AppleWatchFaces.bundle"];

  return [v9 isEqualToString:v10];
}

uint64_t sub_10010145C()
{
  return 0;
}

void sub_100101464(uint64_t a1, void *a2, __CFString **a3)
{
  *a2 = 0;
  switch(a1)
  {
    case 0:
      *a2 = @"BeaconRegionTimeStarted";
      int8x8_t v4 = &off_102324E80;
      goto LABEL_17;
    case 1:
      *a2 = @"FenceTimeStarted";
      int8x8_t v4 = &off_102324E90;
      goto LABEL_17;
    case 2:
      *a2 = @"RangeTimeStarted";
      int8x8_t v4 = &off_102324EA0;
      goto LABEL_17;
    case 3:
      *a2 = @"SignificantTimeStarted";
      int8x8_t v4 = &off_102324EB0;
      goto LABEL_17;
    case 4:
      *a2 = @"LocationTimeStarted";
      int8x8_t v4 = &off_102324EC0;
      goto LABEL_17;
    case 5:
      *a2 = @"BackgroundLocationTimeStarted";
      int8x8_t v4 = &off_102324ED0;
      goto LABEL_17;
    case 6:
      *a2 = @"VisitTimeStarted";
      int8x8_t v4 = &off_102324EE0;
      goto LABEL_17;
    case 7:
      *a2 = @"RemoteLocationTimeStarted";
      int8x8_t v4 = &off_102324F78;
      goto LABEL_17;
    case 8:
      *a2 = @"MicroLocationTimeStarted";
      int8x8_t v4 = &off_102324F98;
      goto LABEL_17;
    case 9:
      *a2 = @"RemoteFenceTimeStarted";
      int8x8_t v4 = &off_102324F88;
      goto LABEL_17;
    case 10:
      *a2 = @"ReceivingLocationInformationTimeStarted";
      int8x8_t v4 = &off_102324EF0;
      goto LABEL_17;
    case 11:
      *a2 = @"NonPersistentSignificantTimeStarted";
      int8x8_t v4 = &off_102324F00;
      goto LABEL_17;
    case 15:
      *a2 = @"PushTimeStarted";
      int8x8_t v4 = &off_102324F10;
      goto LABEL_17;
    case 16:
      *a2 = @"TranscriptTimeStarted";
      int8x8_t v4 = &off_102324F20;
LABEL_17:
      unint64_t v5 = *v4;
      *a3 = v5;
      break;
    default:
      unint64_t v5 = *a3;
      break;
  }
  if (*a2) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      v8[0] = 68289282;
      v8[1] = 0;
      __int16 v9 = 2082;
      id v10 = "";
      __int16 v11 = 2050;
      uint64_t v12 = a1;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Unsupported CLClientServiceType\", \"serviceType\":%{public}lu}", (uint8_t *)v8, 0x1Cu);
    }
  }
}

void sub_100101958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001019E0(uint64_t a1, uint64_t a2)
{
  id v3 = sub_100103E24(a1, a2);
  id v4 = [[objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v3) dictionary];
  if (v3)
  {
    [v3 cppClientKey];
  }
  else
  {
    long long __p = 0;
    *(void *)id v17 = 0;
    *(void *)&v17[8] = 0;
  }
  unint64_t v5 = sub_100103284((void *)(a1 + 1328), (unsigned __int8 *)&__p);
  BOOL v6 = v5;
  if ((v17[15] & 0x80000000) == 0)
  {
    if (v5) {
      goto LABEL_6;
    }
LABEL_9:
    uint64_t v9 = sub_10010498C(v4);
    unint64_t v7 = 0;
    goto LABEL_15;
  }
  operator delete(__p);
  if (!v6) {
    goto LABEL_9;
  }
LABEL_6:
  unint64_t v7 = *((void *)v6 + 5);
  uint64_t v8 = *((unsigned int *)v6 + 12);
  uint64_t v9 = sub_10010498C(v4);
  if (v9 == v8)
  {
    uint64_t v9 = v8;
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v10 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      long long __p = (void *)68290050;
      *(_WORD *)id v17 = 2082;
      *(void *)&v17[2] = "";
      *(_WORD *)&v17[10] = 2114;
      *(void *)&v17[12] = v3;
      __int16 v18 = 2050;
      uint64_t v19 = v8;
      __int16 v20 = 2050;
      unint64_t v21 = v9;
      __int16 v22 = 2050;
      unint64_t v23 = v7;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sbim moving arrow retain count between entity classes\", \"Client\":%{public, location:escape_only}@, \"oldEntityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld, \"newEntityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld, \"arrowState\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld}", (uint8_t *)&__p, 0x3Au);
    }
    sub_100104B20(a1, v9, v7, 1, 0);
    sub_100104B20(a1, v8, v7, 0, 0);
  }
LABEL_15:
  unint64_t v11 = sub_1001043AC(v4, 0);
  if (v11 == v7)
  {
    unint64_t v11 = v7;
  }
  else
  {
    BOOL v12 = (sub_100101E40(v4) & 6) == 0 || sub_1001198CC() != 1;
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v13 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      long long __p = (void *)68290306;
      *(_WORD *)id v17 = 2082;
      *(void *)&v17[2] = "";
      *(_WORD *)&v17[10] = 2114;
      *(void *)&v17[12] = v3;
      __int16 v18 = 2050;
      uint64_t v19 = v9;
      __int16 v20 = 2050;
      unint64_t v21 = v7;
      __int16 v22 = 2050;
      unint64_t v23 = v11;
      __int16 v24 = 1026;
      BOOL v25 = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sbim client arrow state changed\", \"Client\":%{public, location:escape_only}@, \"entityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld, \"oldArrowState\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, \"newArrowState\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, \"dueToDeauthorization\":%{public}hhd}", (uint8_t *)&__p, 0x40u);
    }
    sub_100104B20(a1, v9, v11, 1, v12);
    sub_100104B20(a1, v9, v7, 0, v12);
  }
  if (v11)
  {
    if (v3)
    {
      [v3 cppClientKey];
    }
    else
    {
      long long __p = 0;
      *(void *)id v17 = 0;
      *(void *)&v17[8] = 0;
    }
    p_p = &__p;
    __n128 v14 = sub_100105304(a1 + 1328, (unsigned __int8 *)&__p, (uint64_t)&unk_101D0B290, (long long **)&p_p);
    v14[5] = v11;
    *((_DWORD *)v14 + 12) = v9;
  }
  else
  {
    if (v3)
    {
      [v3 cppClientKey];
    }
    else
    {
      long long __p = 0;
      *(void *)id v17 = 0;
      *(void *)&v17[8] = 0;
    }
    sub_1001052CC((void *)(a1 + 1328), (unsigned __int8 *)&__p);
  }
  if ((v17[15] & 0x80000000) != 0) {
    operator delete(__p);
  }
}

void sub_100101D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100101E40(void *a1)
{
  id v2 = [a1 objectForKey:@"Authorization"];
  if (v2)
  {
    unint64_t v3 = (unint64_t)[v2 integerValue];
    if (v3 < 5) {
      return qword_101D955B0[v3];
    }
    return 0;
  }
  id v5 = [a1 objectForKey:@"Authorized"];
  if (!v5)
  {
    uint64_t v6 = (int)sub_100101EE4(a1, 1) - 3;
    if (v6 < 6) {
      return qword_101D955D8[v6];
    }
    return 0;
  }
  if ([v5 BOOLValue]) {
    return 4;
  }
  else {
    return 1;
  }
}

uint64_t sub_100101EE4(void *a1, int a2)
{
  id v4 = [a1 objectForKey:@"BundleId"];
  CFStringRef v5 = (const __CFString *)[a1 objectForKey:@"BundlePath"];
  if (v4)
  {
    if (!a2) {
      return 1;
    }
    if ([a1 objectForKey:@"Registered"]) {
      return 1;
    }
    if ([a1 objectForKey:@"Authorized"]) {
      return 1;
    }
    uint64_t result = (uint64_t)[a1 objectForKey:@"Authorization"];
    if (result) {
      return 1;
    }
  }
  else
  {
    unint64_t v7 = (__CFString *)v5;
    if (v5)
    {
      if (sub_10010225C(v5))
      {
        return 4;
      }
      else
      {
        if (sub_100102370(v7))
        {
          unsigned int v8 = 5;
        }
        else if (sub_100102944(v7))
        {
          unsigned int v8 = 7;
        }
        else if (sub_1001024C0(v7))
        {
          unsigned int v8 = 8;
        }
        else if (sub_100102484(v7))
        {
          unsigned int v8 = 3;
        }
        else
        {
          unsigned int v8 = 2;
        }
        if (sub_100102004(v7)) {
          return v8;
        }
        else {
          return 6;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100102004(const __CFString *a1)
{
  uint64_t v7 = 0;
  unsigned int v8 = &v7;
  uint64_t v9 = 0x2020000000;
  char v10 = 1;
  uint64_t v2 = sub_1001020E0();
  CFArrayRef v3 = sub_100102124(v2, a1);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10009DE58;
  v6[3] = &unk_102300F58;
  v6[4] = &v7;
  [(__CFArray *)v3 enumerateObjectsUsingBlock:v6];

  uint64_t v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1001020C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001020E0()
{
  if (qword_1024855E8 != -1) {
    dispatch_once(&qword_1024855E8, &stru_102311D88);
  }
  return qword_10248B320;
}

CFArrayRef sub_100102124(uint64_t a1, const __CFString *a2)
{
  uint64_t v4 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16))(a1 + 48);
  if (!a2)
  {
    CFArrayRef v6 = 0;
    goto LABEL_8;
  }
  CFArrayRef v5 = (const __CFArray *)sub_1001028B8(*(__CFDictionary **)(a1 + 32), a2, @"CLRequiredCapabilities");
  CFArrayRef v6 = v5;
  if (v5)
  {
    CFTypeID v7 = CFGetTypeID(v5);
    if (v7 == CFArrayGetTypeID()) {
      goto LABEL_8;
    }
    CFRelease(v6);
  }
  CFArrayRef v6 = CFArrayCreate(kCFAllocatorDefault, 0, 0, &kCFTypeArrayCallBacks);
  if (v6) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, v6);
  }
LABEL_8:
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return v6;
}

void sub_100102248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10010225C(const __CFString *a1)
{
  uint64_t v2 = sub_1001020E0();
  return sub_100102288(v2, a1);
}

BOOL sub_100102288(uint64_t a1, const __CFString *a2)
{
  uint64_t v3 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16))(a1 + 48);
  CFBooleanRef v4 = sub_100102844(*(__CFDictionary **)(v3 - 32), a2, @"CLIsFindMyiPhone");
  CFBooleanRef v5 = v4;
  if (v4)
  {
    BOOL v6 = CFBooleanGetValue(v4) != 0;
    CFRelease(v5);
  }
  else
  {
    BOOL v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  return v6;
}

void sub_10010235C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100102370(const __CFString *a1)
{
  uint64_t v2 = sub_1001020E0();
  return sub_10010239C(v2, a1);
}

BOOL sub_10010239C(uint64_t a1, const __CFString *a2)
{
  uint64_t v3 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16))(a1 + 48);
  CFBooleanRef v4 = sub_100102844(*(__CFDictionary **)(v3 - 24), a2, @"CLIsCoreRoutine");
  CFBooleanRef v5 = v4;
  if (v4)
  {
    BOOL v6 = CFBooleanGetValue(v4) != 0;
    CFRelease(v5);
  }
  else
  {
    BOOL v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  return v6;
}

void sub_100102470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100102484(__CFString *a1)
{
  if (sub_1001024C0(a1)) {
    return 1;
  }
  uint64_t v3 = sub_1001020E0();
  return sub_100102758(v3, a1);
}

BOOL sub_1001024C0(void *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247ADD8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247ADD8))
  {
    sub_100134750(&v6, "/System/Library/LocationBundles/LocationPromptUI.bundle");
    sub_100134750(v7, "/System/Library/LocationBundles/LocationFenceSync.bundle");
    sub_100134750(v8, "/System/Library/LocationBundles/PLAMonitor.bundle");
    sub_1004BEA3C((uint64_t)&qword_10247ADC0, &v6, 3uLL);
    for (uint64_t i = 0; i != -9; i -= 3)
    {
      if (SHIBYTE(v8[i + 2]) < 0) {
        operator delete((void *)v8[i]);
      }
    }
    __cxa_atexit((void (*)(void *))sub_1004BEADC, &qword_10247ADC0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10247ADD8);
  }
  uint64_t v2 = (unsigned __int8 *)qword_10247ADC0;
  uint64_t v3 = (unsigned __int8 *)qword_10247ADC8;
  *(void *)&long long v6 = [a1 UTF8String];
  return sub_1001026A4(v2, v3, (const char **)&v6) != (unsigned __int8 *)qword_10247ADC8;
}

void sub_100102630(_Unwind_Exception *a1)
{
  uint64_t v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 71) < 0) {
      operator delete(*(void **)(v1 + v3 + 48));
    }
    v3 -= 24;
    if (v3 == -72)
    {
      __cxa_guard_abort(&qword_10247ADD8);
      _Unwind_Resume(a1);
    }
  }
}

unsigned __int8 *sub_1001026A4(unsigned __int8 *a1, unsigned __int8 *a2, const char **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    CFBooleanRef v5 = *a3;
    size_t v6 = strlen(*a3);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((void *)v3 + 1))
        {
          if (v6 == -1) {
LABEL_14:
          }
            sub_1002E93D4();
          CFTypeID v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, v5, v6)) {
            return v3;
          }
        }
      }
      else if (v6 == v3[23])
      {
        CFTypeID v7 = v3;
        if (v6 == -1) {
          goto LABEL_14;
        }
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

BOOL sub_100102758(uint64_t a1, const __CFString *a2)
{
  uint64_t v4 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16))(a1 + 48);
  CFBooleanRef v5 = sub_100102844(*(__CFDictionary **)a1, a2, @"CLSystemService");
  CFBooleanRef v6 = v5;
  if (v5)
  {
    BOOL v7 = CFBooleanGetValue(v5) != 0;
    CFRelease(v6);
  }
  else
  {
    BOOL v7 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return v7;
}

void sub_100102830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

CFBooleanRef sub_100102844(__CFDictionary *a1, const __CFString *a2, const __CFString *a3)
{
  CFBooleanRef v5 = (const __CFBoolean *)sub_1001028B8(a1, a2, a3);
  if (!v5) {
    goto LABEL_4;
  }
  CFBooleanRef v6 = v5;
  CFTypeID v7 = CFGetTypeID(v5);
  if (v7 != CFBooleanGetTypeID())
  {
    CFRelease(v6);
LABEL_4:
    CFBooleanRef v6 = kCFBooleanFalse;
    CFDictionarySetValue(a1, a2, kCFBooleanFalse);
  }
  return v6;
}

void *sub_1001028B8(__CFDictionary *a1, const __CFString *a2, const __CFString *a3)
{
  value = 0;
  if (!a2) {
    return 0;
  }
  if (CFDictionaryGetValueIfPresent(a1, a2, (const void **)&value))
  {
    if (value) {
      CFRetain(value);
    }
  }
  else
  {
    CFTypeID v7 = (void *)sub_1004BE970(a2, a3);
    value = v7;
    if (v7) {
      CFDictionarySetValue(a1, a2, v7);
    }
  }
  return value;
}

BOOL sub_100102944(const __CFString *a1)
{
  uint64_t v2 = sub_1001020E0();
  return sub_100102970(v2, a1);
}

BOOL sub_100102970(uint64_t a1, const __CFString *a2)
{
  uint64_t v3 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16))(a1 + 48);
  CFBooleanRef v4 = sub_100102844(*(__CFDictionary **)(v3 - 8), a2, @"CLEmergencyService");
  CFBooleanRef v5 = v4;
  if (v4)
  {
    BOOL v6 = CFBooleanGetValue(v4) != 0;
    CFRelease(v5);
  }
  else
  {
    BOOL v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  return v6;
}

void sub_100102A44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100102A58(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5)
{
  sub_100103240();
  if (!sub_1001037EC()) {
    return;
  }
  id v10 = sub_100103E24(a1, a2);
  id v11 = [v10 clientAnchor];
  if (!v11) {
    goto LABEL_5;
  }
  sub_100134750(buf, (char *)[v11 UTF8String]);
  BOOL v12 = sub_100103284(qword_10247E060, buf);
  uint64_t v13 = v12;
  if ((v43[3] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (v13) {
      goto LABEL_5;
    }
  }
  else if (v12)
  {
LABEL_5:
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __n128 v14 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v40 = 2082;
      id v41 = "";
      __int16 v42 = 2114;
      *(void *)long long v43 = v10;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#SystemStatusAttribution attempting attribution for attribution-unavailable client\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    unsigned __int8 v15 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      *(_DWORD *)int buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v40 = 2082;
      id v41 = "";
      __int16 v42 = 2114;
      *(void *)long long v43 = v10;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#SystemStatusAttribution attempting attribution for attribution-unavailable client", "{\"msg%{public}.0s\":\"#SystemStatusAttribution attempting attribution for attribution-unavailable client\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    return;
  }
  id v16 = [[objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v10) dictionary];
  uint64_t v17 = sub_100104034(v10, v16);
  if (!v17) {
    return;
  }
  if (v17 == 2)
  {
    __int16 v18 = (void *)qword_10247E100;
    if (*(void *)(a1 + 424) == 1)
    {
      int v19 = 0;
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      __int16 v20 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v40 = 2082;
        id v41 = "";
        __int16 v42 = 2114;
        *(void *)long long v43 = v18;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SystemStatusAttribution attribution to System Service; defaulting to Traffic for recor"
          "d keeping\", \"SystemService\":%{public, location:escape_only}@}",
          buf,
          0x1Cu);
      }
      int v19 = 1;
    }
  }
  else
  {
    int v19 = 1;
    __int16 v18 = v10;
  }
  unint64_t v21 = (CLAttributionRecord *)[*(id *)(a1 + 416) objectForKey:v18];
  if (v21) {
    goto LABEL_25;
  }
  id v23 = sub_10002F364(0, v18, v16);
  id v24 = [*(id *)(a1 + 40) newTimer];
  if (!v23) {
    return;
  }
  unint64_t v21 = [[CLAttributionRecord alloc] initWithAttributionId:v23 andTimer:v24];
  [*(id *)(a1 + 416) setObject:v21 forKey:v18];
  uint64_t v25 = *(void *)(a1 + 416);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_1007AD294;
  v37[3] = &unk_1022C8F38;
  v37[7] = v25;
  v37[8] = a1;
  char v38 = v19;
  v37[4] = v18;
  v37[5] = v21;
  v37[6] = v10;
  [(CLTimer *)[(CLAttributionRecord *)v21 attributionTimer] setHandler:v37];
  if (v19)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    double v26 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v40 = 2082;
      id v41 = "";
      __int16 v42 = 2114;
      *(void *)long long v43 = v18;
      *(_WORD *)&v43[8] = 2114;
      *(void *)&v43[10] = v21;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SystemStatusAttribution Created new AttributionRecord for client\", \"Client\":%{public, location:escape_only}@, \"Record\":%{public, location:escape_only}@}", buf, 0x26u);
    }
LABEL_25:
    if (a3 != -1 && (a4 & 1) != 0)
    {
      [(CLAttributionRecord *)v21 incrementAttributionCountForServiceType:a3];
      if (v19)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        __int16 v22 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 68289794;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v40 = 2082;
          id v41 = "";
          __int16 v42 = 1026;
          *(_DWORD *)long long v43 = a3;
          *(_WORD *)&v43[4] = 2114;
          *(void *)&v43[6] = v18;
          *(_WORD *)&v43[14] = 2114;
          *(void *)&v43[16] = v21;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SystemStatusAttribution #AttributionRecord servicetype count incremented\", \"ServiceType\":%{public}d, \"Client\":%{public, location:escape_only}@, \"Record\":%{public, location:escape_only}@}", buf, 0x2Cu);
        }
      }
    }
    goto LABEL_41;
  }
  if (a3 != -1 && a4) {
    [(CLAttributionRecord *)v21 incrementAttributionCountForServiceType:a3];
  }
LABEL_41:
  double v27 = 10.0;
  if (a5 > 0.0)
  {
    int v28 = a5 > 60.0 ? v19 : 0;
    double v27 = a5 <= 60.0 ? a5 : 60.0;
    if (v28 == 1)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v29 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v40 = 2082;
        id v41 = "";
        __int16 v42 = 2114;
        *(void *)long long v43 = v18;
        *(_WORD *)&v43[8] = 2050;
        *(double *)&v43[10] = a5;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SystemStatusAttribtuion attributionDuration longer than 1m. Shortening attribution duration to 1m\", \"client\":%{public, location:escape_only}@, \"attributionDuration\":\"%{public}f\"}", buf, 0x26u);
      }
      double v27 = 60.0;
    }
  }
  [(CLTimer *)[(CLAttributionRecord *)v21 attributionTimer] nextFireDelay];
  if (v30 == 1.79769313e308)
  {
    sub_1001390EC(a1, v10, (uint64_t)[(CLAttributionRecord *)v21 attributionIdentifier]);
    [(CLTimer *)[(CLAttributionRecord *)v21 attributionTimer] setNextFireDelay:v27];
    if (v19)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v36 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v40 = 2082;
        id v41 = "";
        __int16 v42 = 2114;
        *(void *)long long v43 = v18;
        *(_WORD *)&v43[8] = 2114;
        *(void *)&v43[10] = v21;
        long long v33 = "{\"msg%{public}.0s\":\"#SystemStatusAttribution Started attribution timer for client\", \"Client\":%{publi"
              "c, location:escape_only}@, \"Record\":%{public, location:escape_only}@}";
        int v34 = v36;
        uint32_t v35 = 38;
        goto LABEL_67;
      }
    }
  }
  else
  {
    [(CLTimer *)[(CLAttributionRecord *)v21 attributionTimer] nextFireDelay];
    if (v27 > v31) {
      [(CLTimer *)[(CLAttributionRecord *)v21 attributionTimer] setNextFireDelay:v27];
    }
    if (v19)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v32 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v40 = 2082;
        id v41 = "";
        __int16 v42 = 2114;
        *(void *)long long v43 = v18;
        *(_WORD *)&v43[8] = 2114;
        *(void *)&v43[10] = v21;
        *(_WORD *)&v43[18] = 2050;
        *(double *)&v43[20] = v27;
        long long v33 = "{\"msg%{public}.0s\":\"#SystemStatusAttribution Extended attribution timer for client\", \"Client\":%{publ"
              "ic, location:escape_only}@, \"Record\":%{public, location:escape_only}@, \"Duration\":\"%{public}f\"}";
        int v34 = v32;
        uint32_t v35 = 48;
LABEL_67:
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, v33, buf, v35);
      }
    }
  }
}

uint64_t sub_100103240()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  return qword_10248A328;
}

unsigned __int8 *sub_100103284(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_100103388((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  id v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  id v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (sub_100103744(v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      id v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t sub_100103388(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return sub_1001033C8((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t sub_1001033C8(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      __int16 v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return sub_100103684(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return sub_1001035D8(a2, a3);
  }
  else
  {
    return sub_100104A28(a2, a3);
  }
}

unint64_t sub_1001035D8(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_100103684(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t sub_100103744(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

BOOL sub_1001037EC()
{
  if (qword_10247D4D8 != -1) {
    dispatch_once(&qword_10247D4D8, &stru_1022C6770);
  }
  return (byte_10247D4D0 & 1) == 0;
}

BOOL sub_100103838(uint64_t a1, uint64_t a2, int a3, char a4)
{
  id v7 = sub_100103E24(a1, a2);
  if (([*(id *)(a1 + 136) BOOLForKey:@"isSystemService" atKeyPath:v7 defaultValue:0] & 1) == 0)
  {
    if (a3 && (int)sub_10012276C(*(void *)(a1 + 376), v7) <= 1) {
      sub_1007ADD2C(a1, *(void **)(a1 + 480), a1 + 440, v7);
    }
    else {
      sub_100138C88(a1, *(void **)(a1 + 480), (void *)(a1 + 440), v7);
    }
  }
  uint64_t v8 = [*(id *)(a1 + 392) objectForKeyedSubscript:v7];
  if (qword_10247E168 != -1) {
    dispatch_once(&qword_10247E168, &stru_1022C9808);
  }
  int v9 = qword_10247E160;
  if (os_log_type_enabled((os_log_t)qword_10247E160, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 138412290;
    *(void *)unint64_t v24 = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Delivered location information to '%@'", buf, 0xCu);
  }
  int v10 = v8;
  if (!v8)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    sub_1001005FC(a1, (uint64_t)v7, 10, 1, 0, 0, Current);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022C97E8);
    }
    int v12 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 68289282;
      *(_DWORD *)unint64_t v24 = 0;
      *(_WORD *)&v24[4] = 2082;
      *(void *)&v24[6] = "";
      __int16 v25 = 2114;
      id v26 = v7;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"started receiving location information\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    int v10 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)[*(id *)(a1 + 40) queue]);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    void v22[2] = sub_1007B4998;
    v22[3] = &unk_1022A56E0;
    v22[4] = v7;
    v22[5] = a1;
    dispatch_source_set_event_handler(v10, v22);
    [*(id *)(a1 + 392) setObject:v10 forKeyedSubscript:v7];
  }
  dispatch_time_t v13 = dispatch_time(0, 10000000000);
  dispatch_source_set_timer(v10, v13, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  if (!v8)
  {
    dispatch_resume(v10);
    if (a4) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if ((a4 & 1) == 0) {
LABEL_18:
  }
    sub_100102A58(a1, (uint64_t)v7, -1, 0, 0.0);
LABEL_19:
  if (([*(id *)(a1 + 136) isKeyPathRegisteredSystemService:v7] & 1) != 0
    || !-[PAAccessLogger loggingEnabled](+[PAAccessLogger sharedInstance](PAAccessLogger, "sharedInstance"), "loggingEnabled")|| [*(id *)(a1 + 432) objectForKeyedSubscript:v7])
  {
    return v8 == 0;
  }
  id v14 = [v7 bundleId];
  id v15 = [v7 bundlePath];
  if (v14)
  {
    unint64_t v16 = +[PAApplication applicationWithBundleID:v14];
    goto LABEL_24;
  }
  id v18 = v15;
  if (v15)
  {
    +[NSBundle bundleWithPath:v15];
    uint64_t v19 = PAImplicitClientIdentityForBundle();
    if (v19) {
      unint64_t v16 = (PAApplication *)[objc_alloc((Class)PAApplication) initWithTCCIdentity:v19];
    }
    else {
      unint64_t v16 = +[PAApplication applicationWithPath:v18];
    }
LABEL_24:
    if (v16) {
      [*(id *)(a1 + 432) setObject: -[PAAccessLogger beginIntervalForAccess:](+[PAAccessLogger sharedInstance](PAAccessLogger, "sharedInstance"), "beginIntervalForAccess:", objc_msgSend(objc_alloc((Class)PALocationAccess), "initWithAccessor:", v16)) forKeyedSubscript:v7];
    }
    return v8 == 0;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022C97E8);
  }
  uint64_t v20 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)int buf = 68289282;
    *(_DWORD *)unint64_t v24 = 0;
    *(_WORD *)&v24[4] = 2082;
    *(void *)&v24[6] = "";
    __int16 v25 = 2114;
    id v26 = v7;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Don't know how to convert name to PAApplication\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022C97E8);
    }
  }
  uint64_t v21 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    *(_DWORD *)int buf = 68289282;
    *(_DWORD *)unint64_t v24 = 0;
    *(_WORD *)&v24[4] = 2082;
    *(void *)&v24[6] = "";
    __int16 v25 = 2114;
    id v26 = v7;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Don't know how to convert name to PAApplication", "{\"msg%{public}.0s\":\"Don't know how to convert name to PAApplication\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  return v8 == 0;
}

id sub_100103D58(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  if (![v4 isValidCKP]
    || [*(id *)(a1 + 136) hasValueForKey:@"TimeMissing" atKeyPath:v4])
  {
    id v4 = [*(id *)(a1 + 136) registerClient:a2 fromAuthSync:0];
    sub_100134750(__p, "");
    sub_1001341F0(a1, v4, (uint64_t)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  return v4;
}

void sub_100103E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100103E24(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  if (([v3 isValidCKP] & 1) == 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      __int16 v11 = 2114;
      uint64_t v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"resolveCKPToRegisteredCKPOrLogError: the passed ckp must resolve to a registered ckp. Resolving to #nullCKP\", \"InputCKP\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    uint64_t v5 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      __int16 v11 = 2114;
      uint64_t v12 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "resolveCKPToRegisteredCKPOrLogError: the passed ckp must resolve to a registered ckp. Resolving to #nullCKP", "{\"msg%{public}.0s\":\"resolveCKPToRegisteredCKPOrLogError: the passed ckp must resolve to a registered ckp. Resolving to #nullCKP\", \"InputCKP\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x1Cu);
    }
    return +[CLClientKeyPath nullClientKeyPath];
  }
  return v3;
}

uint64_t sub_100104034(void *a1, void *a2)
{
  int v3 = sub_10010423C(a2);
  uint64_t result = 0;
  switch(v3)
  {
    case 0:
      if ([a1 isEqual:qword_10247E100]) {
        uint64_t result = 2;
      }
      else {
        uint64_t result = 1;
      }
      break;
    case 1:
    case 2:
    case 6:
      uint64_t result = 1;
      break;
    case 3:
    case 5:
      uint64_t result = 2;
      break;
    case 4:
      uint64_t result = 6;
      break;
    case 7:
      uint64_t result = 10;
      break;
    case 9:
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v5 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        int v7 = 68289282;
        int v8 = 0;
        __int16 v9 = 2082;
        int v10 = "";
        __int16 v11 = 2114;
        uint64_t v12 = a1;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#SystemStatus failed to determine eligibleModes\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x1Cu);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
      }
      uint64_t v6 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        int v7 = 68289282;
        int v8 = 0;
        __int16 v9 = 2082;
        int v10 = "";
        __int16 v11 = 2114;
        uint64_t v12 = a1;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#SystemStatus failed to determine eligibleModes", "{\"msg%{public}.0s\":\"#SystemStatus failed to determine eligibleModes\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x1Cu);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10010423C(void *a1)
{
  return sub_100101EE4(a1, 1);
}

uint64_t sub_100104244(void *a1, double a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = (uint64_t *)&off_102300F80;
  do
  {
    if (sub_1001042D4(a1, *(v6 - 1), *v6, a2 - dbl_101D95538[v4])) {
      uint64_t v5 = dword_101D95588[v4] | v5;
    }
    ++v4;
    v6 += 2;
  }
  while (v4 != 10);
  return v5;
}

BOOL sub_1001042D4(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  id v7 = [a1 objectForKey:a2];
  id v8 = [a1 objectForKey:a3];
  __int16 v9 = v8;
  if (!v7 || !v8)
  {
LABEL_5:
    BOOL v13 = v9 != 0;
    if (v7 && !v9) {
      return 1;
    }
    goto LABEL_9;
  }
  [v7 doubleValue];
  double v11 = v10;
  [v9 doubleValue];
  if (v11 > v12)
  {
    __int16 v9 = 0;
    goto LABEL_5;
  }
  BOOL v13 = 1;
LABEL_9:
  if (a4 <= 0.0) {
    return 0;
  }
  if (!v13) {
    return 0;
  }
  [+[NSDate date] timeIntervalSinceReferenceDate];
  double v15 = v14;
  [v9 doubleValue];
  return a4 - vabdd_f64(v16, v15) > 0.0;
}

uint64_t sub_1001043AC(void *a1, int a2)
{
  int v3 = sub_10010448C(a1, a2);
  if ((v3 & 0x240) != 0) {
    return 2;
  }
  if (!v3) {
    return 0;
  }
  id v5 = [a1 objectForKeyedSubscript:@"InUseLevel"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    unsigned int v6 = [v5 intValue];
  }
  else {
    unsigned int v6 = 0;
  }
  id v7 = [a1 objectForKeyedSubscript:@"ProvisionalMonitoring"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    unsigned int v8 = [v7 BOOLValue] ^ 1;
  }
  else {
    unsigned int v8 = 1;
  }
  if (v6) {
    return 1;
  }
  else {
    return v8;
  }
}

uint64_t sub_10010448C(void *a1, int a2)
{
  char v4 = sub_100101E40(a1);
  double v5 = 60.0;
  if (a2 != 2) {
    double v5 = 0.0;
  }
  if (a2 == 1) {
    double v5 = 10.0;
  }
  if ((v4 & 6) != 0) {
    double v6 = v5;
  }
  else {
    double v6 = -1.0;
  }
  int v7 = sub_100104244(a1, v6);
  id v8 = sub_100104520([a1 objectForKeyedSubscript:@"RemoteUsage"]);
  if (v8) {
    LODWORD(v8) = sub_100104244(v8, v6);
  }
  return v8 | v7;
}

id sub_100104520(void *a1)
{
  id v22 = objc_alloc_init((Class)NSMutableDictionary);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v2 = [a1 allKeys];
  id v3 = [v2 countByEnumeratingWithState:&v23 objects:v33 count:16];
  if (!v3) {
    goto LABEL_31;
  }
  id v5 = v3;
  char v6 = 0;
  uint64_t v7 = *(void *)v24;
  *(void *)&long long v4 = 68289282;
  long long v21 = v4;
  do
  {
    id v8 = 0;
    do
    {
      if (*(void *)v24 != v7) {
        objc_enumerationMutation(v2);
      }
      uint64_t v9 = *(void *)(*((void *)&v23 + 1) + 8 * (void)v8);
      [a1 objectForKeyedSubscript:v9, v21];
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();
      id v11 = [a1 objectForKeyedSubscript:v9];
      if (isKindOfClass)
      {
        id v12 = [v11 objectAtIndexedSubscript:1];
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          [v22 setObject:v12 forKeyedSubscript:v9];
        }
        else
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_102301058);
          }
          BOOL v13 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)int buf = v21;
            int v28 = 0;
            __int16 v29 = 2082;
            uint64_t v30 = "";
            __int16 v31 = 2114;
            id v32 = v12;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid RemoteUsageDictionary. Found NSArray value where index 1 is not a timestamp\", \"arr[1]\":%{public, location:escape_only}@}", buf, 0x1Cu);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_102301058);
            }
          }
          double v14 = qword_102419538;
          if (os_signpost_enabled((os_log_t)qword_102419538))
          {
            *(_DWORD *)int buf = v21;
            int v28 = 0;
            __int16 v29 = 2082;
            uint64_t v30 = "";
            __int16 v31 = 2114;
            id v32 = v12;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid RemoteUsageDictionary. Found NSArray value where index 1 is not a timestamp", "{\"msg%{public}.0s\":\"Invalid RemoteUsageDictionary. Found NSArray value where index 1 is not a timestamp\", \"arr[1]\":%{public, location:escape_only}@}", buf, 0x1Cu);
          }
        }
        char v6 = 1;
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          [v22 setObject:[a1 objectForKeyedSubscript:v9] forKeyedSubscript:v9];
        }
        else
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_102301058);
          }
          double v15 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
          {
            id v16 = [a1 objectForKeyedSubscript:v9];
            *(_DWORD *)int buf = v21;
            int v28 = 0;
            __int16 v29 = 2082;
            uint64_t v30 = "";
            __int16 v31 = 2114;
            id v32 = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid RemoteUsageDictionary. Found non-NSArray value which is not a timestamp\", \"value\":%{public, location:escape_only}@}", buf, 0x1Cu);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_102301058);
            }
          }
          uint64_t v17 = qword_102419538;
          if (os_signpost_enabled((os_log_t)qword_102419538))
          {
            id v18 = [a1 objectForKeyedSubscript:v9];
            *(_DWORD *)int buf = v21;
            int v28 = 0;
            __int16 v29 = 2082;
            uint64_t v30 = "";
            __int16 v31 = 2114;
            id v32 = v18;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid RemoteUsageDictionary. Found non-NSArray value which is not a timestamp", "{\"msg%{public}.0s\":\"Invalid RemoteUsageDictionary. Found non-NSArray value which is not a timestamp\", \"value\":%{public, location:escape_only}@}", buf, 0x1Cu);
          }
        }
      }
      id v8 = (char *)v8 + 1;
    }
    while (v5 != v8);
    id v19 = [v2 countByEnumeratingWithState:&v23 objects:v33 count:16];
    id v5 = v19;
  }
  while (v19);
  if (v6) {
    return v22;
  }
LABEL_31:

  return a1;
}

uint64_t sub_10010498C(void *a1)
{
  return sub_100101EE4(a1, 0);
}

unint64_t sub_100104A28(_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

void sub_100104B20(uint64_t a1, uint64_t a2, unint64_t a3, int a4, int a5)
{
  if (a2 >= 9)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      uint64_t v37 = 68289282;
      *(_WORD *)unint64_t v38 = 2082;
      *(void *)&v38[2] = "";
      *(_WORD *)&v38[10] = 2050;
      *(void *)&v38[12] = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#sbim Out of bounds access -- entity class too large\", \"entityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld}", (uint8_t *)&v37, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    uint64_t v7 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v37 = 68289282;
      *(_WORD *)unint64_t v38 = 2082;
      *(void *)&v38[2] = "";
      *(_WORD *)&v38[10] = 2050;
      *(void *)&v38[12] = a2;
      unint64_t v8 = "#sbim Out of bounds access -- entity class too large";
      uint64_t v9 = "{\"msg%{public}.0s\":\"#sbim Out of bounds access -- entity class too large\", \"entityClass\":%{public, loca"
           "tion:CLLocationDictionaryUtilitiesEntityClass}lld}";
      double v10 = v7;
LABEL_17:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v8, v9, (uint8_t *)&v37, 0x1Cu);
      return;
    }
    return;
  }
  if (a3 < 3)
  {
    if (!a3) {
      return;
    }
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    unsigned int v19 = a2;
    do
    {
      if (*(_DWORD *)(a1 + 12 * a2 + 1368 + 4 * v17)) {
        uint64_t v18 = v17;
      }
      ++v17;
    }
    while (v17 != 3);
    uint64_t v20 = (int *)(a1 + 12 * a2 + 4 * a3 + 1368);
    long long v21 = &qword_102419000;
    id v22 = &qword_102419000;
    if (a4)
    {
      if (a4 != 1) {
        goto LABEL_45;
      }
      if (*v20 != -1)
      {
        int v23 = *v20 + 1;
LABEL_29:
        int *v20 = v23;
        goto LABEL_45;
      }
      if (qword_102419530 != -1)
      {
        dispatch_once(&qword_102419530, &stru_1022C9768);
        id v22 = &qword_102419000;
      }
      long long v24 = v22[167];
      if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
      {
        uint64_t v37 = 68289538;
        *(_WORD *)unint64_t v38 = 2082;
        *(void *)&v38[2] = "";
        *(_WORD *)&v38[10] = 2050;
        *(void *)&v38[12] = a2;
        *(_WORD *)&unsigned char v38[20] = 2050;
        *(void *)&v38[22] = a3;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#sbim Count overflow!\", \"entityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld, \"arrowState\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld}", (uint8_t *)&v37, 0x26u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
      }
      long long v25 = qword_102419538;
      BOOL v26 = os_signpost_enabled((os_log_t)qword_102419538);
      id v22 = &qword_102419000;
      long long v21 = &qword_102419000;
      if (!v26) {
        goto LABEL_45;
      }
      uint64_t v37 = 68289538;
      *(_WORD *)unint64_t v38 = 2082;
      *(void *)&v38[2] = "";
      *(_WORD *)&v38[10] = 2050;
      *(void *)&v38[12] = a2;
      *(_WORD *)&unsigned char v38[20] = 2050;
      *(void *)&v38[22] = a3;
      uint64_t v27 = "#sbim Count overflow!";
      int v28 = "{\"msg%{public}.0s\":\"#sbim Count overflow!\", \"entityClass\":%{public, location:CLLocationDictionaryUtili"
            "tiesEntityClass}lld, \"arrowState\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld}";
    }
    else
    {
      if (*v20)
      {
        int v23 = *v20 - 1;
        goto LABEL_29;
      }
      if (qword_102419530 != -1)
      {
        dispatch_once(&qword_102419530, &stru_1022C9768);
        id v22 = &qword_102419000;
      }
      __int16 v29 = v22[167];
      if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
      {
        uint64_t v37 = 68289538;
        *(_WORD *)unint64_t v38 = 2082;
        *(void *)&v38[2] = "";
        *(_WORD *)&v38[10] = 2050;
        *(void *)&v38[12] = a2;
        *(_WORD *)&unsigned char v38[20] = 2050;
        *(void *)&v38[22] = a3;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#sbim Count underflow!\", \"entityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld, \"arrowState\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld}", (uint8_t *)&v37, 0x26u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
      }
      long long v25 = qword_102419538;
      BOOL v30 = os_signpost_enabled((os_log_t)qword_102419538);
      id v22 = &qword_102419000;
      long long v21 = &qword_102419000;
      if (!v30) {
        goto LABEL_45;
      }
      uint64_t v37 = 68289538;
      *(_WORD *)unint64_t v38 = 2082;
      *(void *)&v38[2] = "";
      *(_WORD *)&v38[10] = 2050;
      *(void *)&v38[12] = a2;
      *(_WORD *)&unsigned char v38[20] = 2050;
      *(void *)&v38[22] = a3;
      uint64_t v27 = "#sbim Count underflow!";
      int v28 = "{\"msg%{public}.0s\":\"#sbim Count underflow!\", \"entityClass\":%{public, location:CLLocationDictionaryUtil"
            "itiesEntityClass}lld, \"arrowState\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld}";
    }
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v27, v28, (uint8_t *)&v37, 0x26u);
    id v22 = &qword_102419000;
LABEL_45:
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    do
    {
      if (*(_DWORD *)(a1 + 12 * v19 + 1368 + 4 * v31)) {
        uint64_t v32 = v31;
      }
      ++v31;
    }
    while (v31 != 3);
    if (v21[166] != -1)
    {
      dispatch_once(&qword_102419530, &stru_1022C9768);
      id v22 = &qword_102419000;
    }
    uint64_t v33 = v22[167];
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      int v34 = *v20;
      if (a4 == 1) {
        int v35 = 1;
      }
      else {
        int v35 = -1;
      }
      uint64_t v37 = 68290562;
      *(_WORD *)unint64_t v38 = 2082;
      *(void *)&v38[2] = "";
      *(_WORD *)&v38[10] = 2050;
      *(void *)&v38[12] = a2;
      *(_WORD *)&unsigned char v38[20] = 1026;
      *(_DWORD *)&v38[22] = v35;
      *(_WORD *)&v38[26] = 2050;
      *(void *)&v38[28] = a3;
      *(_WORD *)&v38[36] = 1026;
      *(_DWORD *)&v38[38] = v34;
      *(_WORD *)unint64_t v39 = 2050;
      *(void *)&v39[2] = v18;
      __int16 v40 = 2050;
      uint64_t v41 = v32;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#sbim entity class count updated\", \"entityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld, \"change\":%{public}d, \"arrowStateBeingChanged\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, \"newCount\":%{public}u, \"oldArrowState\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, \"newArrowState\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld}", (uint8_t *)&v37, 0x46u);
    }
    if (v18 != v32)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v36 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v37 = 68290050;
        *(_WORD *)unint64_t v38 = 2082;
        *(void *)&v38[2] = "";
        *(_WORD *)&v38[10] = 2050;
        *(void *)&v38[12] = a2;
        *(_WORD *)&unsigned char v38[20] = 2050;
        *(void *)&v38[22] = v18;
        *(_WORD *)&v38[30] = 2050;
        *(void *)&v38[32] = v32;
        *(_WORD *)&v38[40] = 1026;
        *(_DWORD *)unint64_t v39 = a5 == 1;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sbim entity class arrow state changed\", \"entityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld, \"oldArrowState\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, \"newArrowState\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, \"dueToDeauthorization\":%{public}hhd}", (uint8_t *)&v37, 0x36u);
      }
      [*(id *)(a1 + 1480) entityClass:didChangeArrowState:dueToDeauthorization:a2 v32 a5 == 1 v37 v38 v38[16]];
    }
    return;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  id v12 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
  {
    uint64_t v37 = 68289282;
    *(_WORD *)unint64_t v38 = 2082;
    *(void *)&v38[2] = "";
    *(_WORD *)&v38[10] = 2050;
    *(void *)&v38[12] = a3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#sbim Out of bounds access -- arrow state too large\", \"arrowState\":%{public}lu}", (uint8_t *)&v37, 0x1Cu);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
  }
  uint64_t v13 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    uint64_t v37 = 68289282;
    *(_WORD *)unint64_t v38 = 2082;
    *(void *)&v38[2] = "";
    *(_WORD *)&v38[10] = 2050;
    *(void *)&v38[12] = a3;
    unint64_t v8 = "#sbim Out of bounds access -- arrow state too large";
    uint64_t v9 = "{\"msg%{public}.0s\":\"#sbim Out of bounds access -- arrow state too large\", \"arrowState\":%{public}lu}";
    double v10 = v13;
    goto LABEL_17;
  }
}

uint64_t *sub_1001052CC(void *a1, unsigned __int8 *a2)
{
  unint64_t result = (uint64_t *)sub_100103284(a1, a2);
  if (result)
  {
    sub_1007E48D8(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void *sub_100105304(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    double v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_100103744(a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  uint64_t i = operator new(0x38uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  uint64_t v18 = *a4;
  long long v19 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)uint64_t v18 = 0;
  *((void *)i + 5) = 0;
  *((void *)i + 6) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_100100330(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t i = *v27;
LABEL_38:
    *uint64_t v27 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v17;
  void *v17 = i;
  *(void *)(v26 + 8 * v4) = v17;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_100105574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_10022251C(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1001055EC(uint64_t **a1, const void **a2)
{
  uint64_t v3 = sub_10012FFE0((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  sub_100645C00(a1, v3);
  return 1;
}

uint64_t sub_100105634(uint64_t a1, uint64_t a2)
{
  if (byte_102477430)
  {
    +[NSString stringWithCString:a2 encoding:4];
    return PLLogRegisteredEvent();
  }
  return result;
}

id sub_1001056A0(uint64_t a1, uint64_t *a2, int a3)
{
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = (uint64_t *)*a2;
  }
  id v7 = [[*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:+[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6))];
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  unint64_t v8 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v9 = a2;
    }
    else {
      unint64_t v9 = (uint64_t *)*a2;
    }
    *(_DWORD *)int buf = 68289538;
    int v15 = 0;
    __int16 v16 = 2082;
    uint64_t v17 = "";
    __int16 v18 = 2082;
    long long v19 = v9;
    __int16 v20 = 1026;
    int v21 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pla enforce zone-monitoring\", \"Client\":%{public, location:escape_only}s, \"shouldStart\":%{public}hhd}", buf, 0x22u);
  }
  unint64_t v10 = *(void **)(a1 + 136);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  _OWORD v12[2] = sub_100105D1C;
  void v12[3] = &unk_1022C96F0;
  v12[4] = a1;
  v12[5] = a2;
  char v13 = a3;
  return [v10 iterateIdentitiesRelatedToKeyPath:v7 withBlock:v12];
}

void *sub_100105D0C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, ":");
}

void sub_100105D1C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if ([a2 subIdentityType] == 122)
  {
    id v5 = [a2 zoneId];
    id v6 = [[objc_msgSend(*(id *)(v4 + 136), "readonlyStoreAtKeyPath:", a2) dictionary];
    if (objc_msgSend(objc_msgSend(v6, "objectForKeyedSubscript:", @"Provenance"), "intValue") == 1)
    {
      if (objc_msgSend(objc_msgSend(v6, "objectForKeyedSubscript:", @"Type"), "intValue") == 1)
      {
        id v7 = *(void **)(v4 + 352);
        unint64_t v8 = *(uint64_t **)(a1 + 40);
        int v9 = *((char *)v8 + 23);
        if (*(unsigned char *)(a1 + 48))
        {
          if (v9 < 0) {
            unint64_t v8 = (uint64_t *)*v8;
          }
          unint64_t v10 = +[NSString stringWithUTF8String:v8];
          [objc_msgSend(v6, "objectForKeyedSubscript:", @"Latitude") doubleValue];
          double v12 = v11;
          [objc_msgSend(v6, "objectForKeyedSubscript:", @"Longitude") doubleValue];
          double v14 = v13;
          [objc_msgSend(v6, "objectForKeyedSubscript:", @"Radius") doubleValue];
          _[v7 startCircularZoneMonitoringForClient:v10 withZoneId:v5 latitude:v12 longitude:v14 radius:v15];
        }
        else
        {
          if (v9 < 0) {
            unint64_t v8 = (uint64_t *)*v8;
          }
          __int16 v18 = +[NSString stringWithUTF8String:v8];
          [v7 stopCircularZoneMonitoringForClient:v18 withZoneId:v5];
        }
      }
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      __int16 v16 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(uint64_t **)(a1 + 40);
        if (*((char *)v17 + 23) < 0) {
          uint64_t v17 = (uint64_t *)*v17;
        }
        v19[0] = 68289794;
        v19[1] = 0;
        __int16 v20 = 2082;
        int v21 = "";
        __int16 v22 = 2082;
        unint64_t v23 = v17;
        __int16 v24 = 2082;
        id v25 = [v5 UTF8String];
        __int16 v26 = 2114;
        id v27 = v6;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pla skip zone-monitoring, provenance not eligible for monitoring\", \"Client\":%{public, location:escape_only}s, \"ZoneId\":%{public, location:escape_only}s, \"ZoneInfo\":%{public, location:escape_only}@}", (uint8_t *)v19, 0x30u);
      }
    }
  }
}

unsigned char *sub_100105FDC(unsigned char *result)
{
  if (!result[1136])
  {
    result[1136] = 1;
    uint64_t v1 = (void *)*((void *)result + 5);
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_100088CD4;
    v2[3] = &unk_1022A3020;
    v2[4] = result;
    return [v1 afterInterval:v2 async:0.1];
  }
  return result;
}

id sub_100106098(uint64_t a1, unsigned __int8 *a2)
{
  char v4 = _os_feature_enabled_impl();
  sub_100103240();
  if (v4)
  {
    id result = (id)sub_100106424();
    if (!result) {
      return result;
    }
  }
  else if ((sub_10010145C() & 1) == 0)
  {
    sub_100103240();
    id result = (id)sub_100106424();
    if ((result & 1) == 0) {
      return result;
    }
  }
  id result = (id)sub_100106174(a1, a2);
  if (result)
  {
    id result = sub_1007C9344(a1, (uint64_t *)a2);
    if (result)
    {
      id v6 = result;
      id v7 = *(void **)(a1 + 1528);
      if ((a2[23] & 0x80u) == 0) {
        unint64_t v8 = (uint64_t *)a2;
      }
      else {
        unint64_t v8 = *(uint64_t **)a2;
      }
      int v9 = +[NSString stringWithUTF8String:v8];
      return [v7 client:v9 didChangeUsageData:v6];
    }
  }
  return result;
}

BOOL sub_100106174(uint64_t a1, unsigned __int8 *a2)
{
  if (!_os_feature_enabled_impl())
  {
    if ((a2[23] & 0x80u) == 0) {
      int v9 = (uint64_t *)a2;
    }
    else {
      int v9 = *(uint64_t **)a2;
    }
    id v10 = [[*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:+[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9))];
    return [v10 isValidCKP]
        && ([*(id *)(a1 + 136) isKeyPathRegisteredSystemService:v10] & 1) != 0
        || sub_100122860((void *)(a1 + 1488), a2) != 0;
  }
  if (a1 + 600 == sub_10012FFE0(a1 + 592, (const void **)a2))
  {
    BOOL v6 = sub_100103284((void *)(a1 + 616), a2) != 0;
  }
  else
  {
    *(void *)int buf = a2;
    uint64_t v4 = sub_1007E4D94((uint64_t **)(a1 + 592), (const void **)a2, (uint64_t)&unk_101D0B290, (long long **)buf)[7];
    int v5 = *(unsigned __int8 *)(v4 + 72);
    BOOL v6 = *(unsigned char *)(v4 + 72) != 0;
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v7 = qword_102419538;
    if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_20;
    }
    if ((a2[23] & 0x80u) == 0) {
      unint64_t v8 = (uint64_t *)a2;
    }
    else {
      unint64_t v8 = *(uint64_t **)a2;
    }
    *(_DWORD *)int buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v15 = 2082;
    __int16 v16 = "";
    __int16 v17 = 2082;
    __int16 v18 = v8;
    __int16 v19 = 1026;
    BOOL v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#usesync fTemporaryInUseAssertions\", \"client\":%{public, location:escape_only}s, \"shouldSync\":%{public}hhd}", buf, 0x22u);
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
LABEL_20:
  double v11 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    if ((a2[23] & 0x80u) == 0) {
      double v12 = (uint64_t *)a2;
    }
    else {
      double v12 = *(uint64_t **)a2;
    }
    *(_DWORD *)int buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v15 = 2082;
    __int16 v16 = "";
    __int16 v17 = 2082;
    __int16 v18 = v12;
    __int16 v19 = 1026;
    BOOL v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#usesync shouldSyncUsageForClient\", \"client\":%{public, location:escape_only}s, \"shouldSync\":%{public}hhd}", buf, 0x22u);
  }
  return v6;
}

BOOL sub_100106424()
{
  if (MGGetBoolAnswer()) {
    return 1;
  }
  if (qword_10247D5D8 != -1) {
    dispatch_once(&qword_10247D5D8, &stru_1022C6960);
  }
  return byte_10247D5E0 != 0;
}

void sub_100106488(uint64_t a1)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current == (CFRunLoopRef)sub_1001BEA14())
  {
    if (qword_102418FD0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_101A7A90C(qword_102418FD0 == -1);
    __break(1u);
  }
  dispatch_once(&qword_102418FD0, &stru_1022DAA18);
LABEL_3:
  uint64_t v3 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Apply all dirty device properties", buf, 2u);
  }
  p_cache = CLAvengerScannerClientController.cache;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    }
    LOWORD(v61) = 0;
    uint64_t v49 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::applyAllDirtyDeviceProperties()", "%s\n", v49);
    if (v49 != (char *)buf) {
      free(v49);
    }
    p_cache = (void **)(CLAvengerScannerClientController + 16);
  }
  int v5 = *(void **)(a1 + 8);
  BOOL v6 = *(void **)(a1 + 16);
  if (v5 == v6) {
    goto LABEL_56;
  }
  LOBYTE(v7) = 1;
  uint64_t v54 = a1;
  uint64_t v50 = *(void **)(a1 + 16);
  do
  {
    unint64_t v8 = (std::__shared_weak_count *)v5[1];
    if (v8)
    {
      uint64_t v9 = *v5;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      CFDictionaryRef v53 = v8;
      uint64_t v52 = std::__shared_weak_count::lock(v8);
      if (v52)
      {
        uint64_t v51 = v5;
        if (v9)
        {
          long long v59 = 0u;
          long long v60 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          id obj = *(id *)(v9 + 160);
          id v10 = [obj countByEnumeratingWithState:&v57 objects:v69 count:16];
          if (v10)
          {
            uint64_t v56 = *(void *)v58;
            do
            {
              double v11 = 0;
              do
              {
                if (*(void *)v58 != v56) {
                  objc_enumerationMutation(obj);
                }
                CFStringRef v12 = *(const __CFString **)(*((void *)&v57 + 1) + 8 * (void)v11);
                id v13 = [*(id *)(v9 + 160) objectForKeyedSubscript:v12];
                if ([v13 dirty])
                {
                  if (!*(void *)(v9 + 24)) {
                    sub_100A27948(a1, 0);
                  }
                  if (*(int *)(a1 + 52) >= 10 && *(unsigned char *)(v9 + 40))
                  {
                    LOBYTE(v7) = 1;
                  }
                  else
                  {
                    double v14 = *(__IOHIDServiceClient **)(v9 + 24);
                    if (v14)
                    {
                      id v15 = [v13 value];
                      [v13 setDirty:!sub_100A28618((uint64_t)v15, v14, v12, v15)];
                      if (v7) {
                        unsigned int v7 = [v13 dirty] ^ 1;
                      }
                      else {
                        LOBYTE(v7) = 0;
                      }
                      if (qword_102418FD0 != -1) {
                        dispatch_once(&qword_102418FD0, &stru_1022DAA18);
                      }
                      __int16 v19 = p_cache[507];
                      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
                      {
                        int v21 = *(_DWORD *)(v9 + 16);
                        int v20 = *(_DWORD *)(v9 + 20);
                        id v22 = [v13 value];
                        unsigned int v23 = [v13 dirty];
                        *(_DWORD *)int buf = 67241218;
                        __int16 v24 = "successfully";
                        if (v23) {
                          __int16 v24 = "unsuccessfully";
                        }
                        *(_DWORD *)__int16 v71 = v20;
                        *(_WORD *)&v71[4] = 1026;
                        *(_DWORD *)&v71[6] = v21;
                        __int16 v72 = 2114;
                        CFStringRef v73 = v12;
                        __int16 v74 = 2114;
                        id v75 = v22;
                        __int16 v76 = 2082;
                        long long v77 = v24;
                        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Property for usage pair {%{public}d, %{public}d}: {%{public}@ = %{public}@} was set %{public}s", buf, 0x2Cu);
                        a1 = v54;
                        p_cache = CLAvengerScannerClientController.cache;
                      }
                      if (sub_10013D1A0(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_102418FD0 != -1) {
                          dispatch_once(&qword_102418FD0, &stru_1022DAA18);
                        }
                        int v26 = *(_DWORD *)(v9 + 16);
                        int v25 = *(_DWORD *)(v9 + 20);
                        id v27 = [v13 value];
                        unsigned int v28 = [v13 dirty];
                        int v61 = 67241218;
                        __int16 v29 = "successfully";
                        if (v28) {
                          __int16 v29 = "unsuccessfully";
                        }
                        *(_DWORD *)long long v62 = v25;
                        *(_WORD *)&v62[4] = 1026;
                        *(_DWORD *)&v62[6] = v26;
                        __int16 v63 = 2114;
                        CFStringRef v64 = v12;
                        __int16 v65 = 2114;
                        id v66 = v27;
                        __int16 v67 = 2082;
                        id v68 = v29;
                        BOOL v30 = (char *)_os_log_send_and_compose_impl();
                        sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::applyAllDirtyDeviceProperties()", "%s\n", v30);
                        a1 = v54;
                        p_cache = (void **)(CLAvengerScannerClientController + 16);
                        if (v30 != (char *)buf) {
                          free(v30);
                        }
                      }
                    }
                    else
                    {
                      if (qword_102418FD0 != -1) {
                        dispatch_once(&qword_102418FD0, &stru_1022DAA18);
                      }
                      __int16 v16 = p_cache[507];
                      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
                      {
                        int v18 = *(_DWORD *)(v9 + 16);
                        int v17 = *(_DWORD *)(v9 + 20);
                        *(_DWORD *)int buf = 67240448;
                        *(_DWORD *)__int16 v71 = v17;
                        *(_WORD *)&v71[4] = 1026;
                        *(_DWORD *)&v71[6] = v18;
                        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Service for device with usage pair {%{public}d, %{public}d} is not ready", buf, 0xEu);
                      }
                      if (sub_10013D1A0(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_102418FD0 != -1) {
                          dispatch_once(&qword_102418FD0, &stru_1022DAA18);
                        }
                        int v32 = *(_DWORD *)(v9 + 16);
                        int v31 = *(_DWORD *)(v9 + 20);
                        int v61 = 67240448;
                        *(_DWORD *)long long v62 = v31;
                        *(_WORD *)&v62[4] = 1026;
                        *(_DWORD *)&v62[6] = v32;
                        uint64_t v33 = (char *)_os_log_send_and_compose_impl();
                        sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::applyAllDirtyDeviceProperties()", "%s\n", v33);
                        if (v33 != (char *)buf) {
                          free(v33);
                        }
                      }
                      LOBYTE(v7) = 0;
                    }
                  }
                }
                double v11 = (char *)v11 + 1;
              }
              while (v10 != v11);
              id v34 = [obj countByEnumeratingWithState:&v57 objects:v69 count:16];
              id v10 = v34;
            }
            while (v34);
          }
        }
        sub_1000DB0A0(v52);
        BOOL v6 = v50;
        int v5 = v51;
      }
      std::__shared_weak_count::__release_weak(v53);
    }
    v5 += 2;
  }
  while (v5 != v6);
  if (v7)
  {
LABEL_56:
    *(_DWORD *)(a1 + 52) = 0;
LABEL_57:
    double v35 = 1.79769313e308;
    goto LABEL_58;
  }
  int v36 = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(a1 + 52) = v36 + 1;
  if (v36 <= 4)
  {
    double v37 = CFAbsoluteTimeGetCurrent();
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    }
    unint64_t v38 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 134349056;
      *(void *)__int16 v71 = 0x3FD0000000000000;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Could not set all properties. Setting timer to fire %{public}f seconds from now", buf, 0xCu);
    }
    BOOL v39 = sub_10013D1A0(115, 2);
    double v35 = v37 + 0.25;
    if (v39)
    {
      double v40 = v37 + 0.25;
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022DAA18);
      }
      int v61 = 134349056;
      *(void *)long long v62 = 0x3FD0000000000000;
      uint64_t v41 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::applyAllDirtyDeviceProperties()", "%s\n", v41);
      a1 = v54;
      if (v41 != (char *)buf) {
        free(v41);
      }
      double v35 = v40;
    }
    goto LABEL_58;
  }
  if (v36 > 9)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    }
    id v47 = p_cache[507];
    if (os_log_type_enabled(v47, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_FAULT, "[CLIoHidInterface] Could not set all properties after too many retries. Giving up.", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_57;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    }
    LOWORD(v61) = 0;
    uint64_t v48 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLIoHidInterface::applyAllDirtyDeviceProperties()", "%s\n", v48);
    if (v48 != (char *)buf) {
      free(v48);
    }
    double v35 = 1.79769313e308;
LABEL_91:
    a1 = v54;
    goto LABEL_58;
  }
  double v42 = CFAbsoluteTimeGetCurrent();
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022DAA18);
  }
  long long v43 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 134349056;
    *(void *)__int16 v71 = 0x4004000000000000;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "[CLIoHidInterface] Could not set all properties. Setting timer to fire %{public}f seconds from now", buf, 0xCu);
  }
  BOOL v44 = sub_10013D1A0(115, 2);
  double v35 = v42 + 2.5;
  if (v44)
  {
    double v45 = v42 + 2.5;
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    }
    int v61 = 134349056;
    *(void *)long long v62 = 0x4004000000000000;
    uint64_t v46 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::applyAllDirtyDeviceProperties()", "%s\n", v46);
    if (v46 != (char *)buf) {
      free(v46);
    }
    double v35 = v45;
    goto LABEL_91;
  }
LABEL_58:
  CFRunLoopTimerSetNextFireDate(*(CFRunLoopTimerRef *)(a1 + 56), v35);
}

void sub_100106FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14)
{
}

uint64_t *sub_10010702C(uint64_t **a1, const void **a2, uint64_t a3)
{
  int v5 = (uint64_t **)sub_1001070AC((uint64_t)a1, &v8, a2);
  id result = *v5;
  if (!*v5)
  {
    sub_100124D18((uint64_t)a1, a3, (uint64_t)&v7);
    sub_1000EDF90(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void *sub_1001070AC(uint64_t a1, void *a2, const void **a3)
{
  int v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = (void *)v4;
        uint64_t v9 = (const void **)(v4 + 32);
        if (!sub_100130070(v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        int v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!sub_100130070(v7, v9, a3)) {
        break;
      }
      int v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t sub_10010714C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(double *)(a2 + 3368) = (*(double (**)(void))(**(void **)(a1 + 120) + 184))(*(void *)(a1 + 120));
  [*(id *)(a1 + 136) nextFireTime];
  *(void *)(a2 + 3376) = v6;
  int v12 = 0;
  int v7 = sub_1001072EC(a1, &v12, 1);
  int v12 = 3;
  int v8 = sub_1001072EC(a1, &v12, 1);
  int v12 = 4;
  int v9 = sub_1001072EC(a1, &v12, 1);
  int v12 = 22;
  int v10 = sub_1001072EC(a1, &v12, 1);
  sub_100107414(a1);
  *(_DWORD *)(a2 + 3384) = v7;
  *(_DWORD *)(a2 + 3388) = v8;
  *(_DWORD *)(a2 + 3392) = v9;
  *(_DWORD *)(a2 + 3396) = v10;
  *(_DWORD *)(a2 + 3400) = 1176256512;
  *(unsigned char *)(a2 + 3404) = (*(uint64_t (**)(void))(**(void **)(a1 + 120) + 216))(*(void *)(a1 + 120));
  *(unsigned char *)(a2 + 3405) = (*(uint64_t (**)(void))(**(void **)(a1 + 120) + 224))(*(void *)(a1 + 120));
  *(unsigned char *)(a2 + 3406) = (*(uint64_t (**)(void))(**(void **)(a1 + 120) + 232))(*(void *)(a1 + 120));
  return sub_1000E244C(a3, a2);
}

uint64_t sub_1001072EC(uint64_t a1, int *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 108) || !a3) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = &a2[a3];
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v5 = a1 + 64;
  uint64_t v6 = v7;
  do
  {
    if (v6)
    {
      int v8 = *a2;
      uint64_t v9 = v5;
      uint64_t v10 = v6;
      do
      {
        int v11 = *(_DWORD *)(v10 + 32);
        BOOL v12 = v11 < v8;
        if (v11 >= v8) {
          id v13 = (uint64_t *)v10;
        }
        else {
          id v13 = (uint64_t *)(v10 + 8);
        }
        if (!v12) {
          uint64_t v9 = v10;
        }
        uint64_t v10 = *v13;
      }
      while (*v13);
      if (v9 != v5 && v8 >= *(_DWORD *)(v9 + 32)) {
        uint64_t v3 = (v3 + *(_DWORD *)(v9 + 56));
      }
    }
    ++a2;
  }
  while (a2 != v4);
  return v3;
}

uint64_t sub_100107368()
{
  sub_100103240();

  return sub_10010145C();
}

unint64_t sub_100107394()
{
  return ((unint64_t)sub_1000A16E8() >> 22) & 1;
}

uint64_t sub_1001073B0()
{
  return (sub_1001073D0() >> 19) & 1;
}

uint64_t sub_1001073D0()
{
  if (qword_10247D478 != -1) {
    dispatch_once(&qword_10247D478, &stru_1022C66B0);
  }
  return dword_10247D470;
}

uint64_t sub_100107414(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v1 = *(void *)(a1 + 64);
  if (!v1) {
    goto LABEL_11;
  }
  uint64_t v3 = a1 + 64;
  do
  {
    int v4 = *(_DWORD *)(v1 + 32);
    BOOL v5 = v4 < 0;
    if (v4 >= 0) {
      uint64_t v6 = (uint64_t *)v1;
    }
    else {
      uint64_t v6 = (uint64_t *)(v1 + 8);
    }
    if (!v5) {
      uint64_t v3 = v1;
    }
    uint64_t v1 = *v6;
  }
  while (*v6);
  if (v3 == v2 || *(int *)(v3 + 32) >= 1) {
LABEL_11:
  }
    uint64_t v3 = a1 + 64;
  int v14 = 0;
  uint64_t result = sub_1001072EC(a1, &v14, 1);
  if (result)
  {
    if (v3 != v2)
    {
      int v8 = *(double **)(v3 + 40);
      if (v8 != (double *)(v3 + 48))
      {
        float v9 = 10000.0;
        do
        {
          float v10 = v8[5];
          if (v9 >= v10) {
            float v9 = v8[5];
          }
          int v11 = (double *)*((void *)v8 + 1);
          if (v11)
          {
            do
            {
              BOOL v12 = v11;
              int v11 = *(double **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              BOOL v12 = (double *)*((void *)v8 + 2);
              BOOL v13 = *(void *)v12 == (void)v8;
              int v8 = v12;
            }
            while (!v13);
          }
          int v8 = v12;
        }
        while (v12 != (double *)(v3 + 48));
      }
    }
  }
  return result;
}

uint64_t sub_1001074FC(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(void *)a1 + 896))(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return 1;
}

CLClientManagerAuthorizationContext *sub_10010758C(NSMutableDictionary *a1, unsigned int a2, unsigned int a3, int a4, uint64_t a5)
{
  id v10 = sub_1001225EC(a1);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102301058);
  }
  int v11 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 68290819;
    int v114 = 0;
    __int16 v115 = 2082;
    __int16 v116 = "";
    __int16 v117 = 2050;
    unint64_t v118 = a2;
    __int16 v119 = 2050;
    *(void *)uint64_t v120 = a3;
    *(_WORD *)&v120[8] = 1026;
    *(_DWORD *)&v120[10] = a4;
    *(_WORD *)&v120[14] = 1026;
    *(_DWORD *)&v120[16] = v10;
    uint64_t v121 = 0x8310000009C0410;
    *(void *)uint64_t v122 = a5;
    *(_WORD *)&v122[8] = 2114;
    *(void *)uint64_t v123 = a1;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"computing #clldu freshAuthContext\", \"EffectiveRegistration\":%{public, location:CLClientRegistrationResult}lld, \"TransientRegistration\":%{public, location:CLClientRegistrationResult}lld, \"bigSwitchState\":%{public}hhd, \"isClientZonal\":%{public}hhd, \"location\":%{private, location:CLClientLocation}.*P, \"dictionary\":%{public, location:escape_only}@}", buf, 0x4Cu);
  }
  unsigned int v92 = a2;
  int v83 = a4;
  int v12 = [[a1 objectForKey:@"InUseLevel"] unsignedIntValue];
  int v13 = sub_1001083CC(a1);
  int v14 = [[a1 objectForKey:@"IncidentalUseMode"] unsignedIntValue];
  BOOL v15 = sub_1001042D4(a1, @"SignificantTimeStarted", @"SignificantTimeStopped", -1.0);
  int v81 = v14;
  uint64_t v16 = sub_1001081BC(a3, v12, v13, v14, (uint64_t)v10, v15, (int)[a1 objectForKey:@"BackgroundLocationCapability"]);
  uint64_t v18 = v17;
  int v96 = (int)v10;
  char v19 = [[a1 objectForKeyedSubscript:@"PassiveServiceSession"] BOOLValue];
  char v20 = [[-[NSMutableDictionary objectForKeyedSubscript:](a1, "objectForKeyedSubscript:", @"WhenInUseServiceSession") boolValue];
  long long v94 = a1;
  unsigned int v21 = [[a1 objectForKeyedSubscript:@"AlwaysServiceSession"] BOOLValue];
  int v22 = [[-[NSMutableDictionary objectForKeyedSubscript:](v94, "objectForKeyedSubscript:", @"SessionWithOldLinking") boolValue];
  int v23 = [[-[NSMutableDictionary objectForKeyedSubscript:](v94, "objectForKeyedSubscript:", @"ExplicitServiceSession") boolValue];
  unsigned int v90 = a3;
  unsigned int v82 = v12;
  unsigned int v24 = v21;
  int v25 = v94;
  if (sub_100108178(a3, v12, v19, v20, v24, v22, v23))
  {
    v16 |= 0x80000uLL;
    v18 |= 0x80000uLL;
  }
  int v26 = sub_1001081B4([-[NSMutableDictionary objectForKeyedSubscript:](v94, "objectForKeyedSubscript:", @"ExplicitServiceSession") boolValue]);
  if (v26) {
    uint64_t v27 = v16 | 0x100000;
  }
  else {
    uint64_t v27 = v16;
  }
  if (v26) {
    uint64_t v28 = v18 | 0x100000;
  }
  else {
    uint64_t v28 = v18;
  }
  uint64_t v99 = v28;
  uint64_t v100 = v27;
  if (!v96)
  {
    __int16 v29 = &qword_102419000;
    goto LABEL_22;
  }
  __int16 v29 = &qword_102419000;
  if (*(double *)(a5 + 20) <= 0.0)
  {
LABEL_22:
    int v31 = &qword_102419000;
    int v32 = v83;
    unint64_t v38 = v92;
    unint64_t v39 = v90;
    goto LABEL_66;
  }
  id v30 = [(NSMutableDictionary *)v94 objectForKey:@"InterestZones"];
  int v31 = &qword_102419000;
  int v32 = v83;
  if ([v30 count])
  {
    if (*(double *)(a5 + 20) >= 0.0)
    {
      __int16 v79 = +[NSMutableDictionary dictionaryWithDictionary:v94];
      long long v97 = +[NSMutableDictionary dictionaryWithDictionary:v30];
      sub_101171D90((uint64_t)&v101);
      long long v142 = 0u;
      long long v143 = 0u;
      long long v140 = 0u;
      long long v141 = 0u;
      id v41 = [v30 countByEnumeratingWithState:&v140 objects:buf count:16];
      if (v41)
      {
        id v42 = v41;
        uint64_t v43 = *(void *)v141;
        do
        {
          for (uint64_t i = 0; i != v42; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v141 != v43) {
              objc_enumerationMutation(v30);
            }
            uint64_t v45 = *(void *)(*((void *)&v140 + 1) + 8 * i);
            id v46 = [v30 objectForKeyedSubscript:v45];
            [objc_msgSend(v46, "objectForKeyedSubscript:", @"Latitude") doubleValue];
            double v48 = v47;
            [objc_msgSend(v46, "objectForKeyedSubscript:", @"Longitude") doubleValue];
            double v50 = v49;
            [objc_msgSend(v46, "objectForKeyedSubscript:", @"Radius") doubleValue];
            if (sub_1000F1648((double *)&v101, v48, v50, *(double *)(a5 + 4), *(double *)(a5 + 12), 0.0) < v51)
            {
              uint64_t v52 = +[NSMutableDictionary dictionaryWithDictionary:v46];
              [(NSMutableDictionary *)v52 setObject:&__kCFBooleanTrue forKeyedSubscript:@"Relevant"];
              [(NSMutableDictionary *)v97 setObject:v52 forKeyedSubscript:v45];
            }
          }
          id v42 = [v30 countByEnumeratingWithState:&v140 objects:buf count:16];
        }
        while (v42);
      }
      int v25 = v79;
      [(NSMutableDictionary *)v79 setObject:v97 forKeyedSubscript:@"InterestZones"];
      __int16 v29 = &qword_102419000;
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301058);
      }
      int v31 = &qword_102419000;
      int v32 = v83;
      uint64_t v53 = qword_102419538;
      if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_41;
      }
      *(_DWORD *)int v105 = 68289538;
      int v106 = 0;
      __int16 v107 = 2082;
      __int16 v108 = "";
      __int16 v109 = 2114;
      __int16 v110 = v94;
      __int16 v111 = 2114;
      __int16 v112 = v79;
      id v34 = "{\"msg%{public}.0s\":\"#clldu conincidingZones marked as Relevant\", \"provided-dictionary\":%{public, locat"
            "ion:escape_only}@, \"updatedDictionary\":%{public, location:escape_only}@}";
      double v35 = v105;
      int v36 = v53;
      uint32_t v37 = 38;
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301058);
      }
      uint64_t v33 = qword_102419538;
      if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_41;
      }
      *(_DWORD *)int buf = 68289795;
      int v114 = 0;
      __int16 v115 = 2082;
      __int16 v116 = "";
      __int16 v117 = 2114;
      unint64_t v118 = (unint64_t)v94;
      __int16 v119 = 1040;
      *(_DWORD *)uint64_t v120 = 156;
      *(_WORD *)&v120[4] = 2097;
      *(void *)&v120[6] = a5;
      id v34 = "{\"msg%{public}.0s\":\"#pla Skip #clldu-MarkZonesAsRelevant. Invalid location\", \"dictionary\":%{public, lo"
            "cation:escape_only}@, \"location\":%{private, location:CLClientLocation}.*P}";
      double v35 = buf;
      int v36 = v33;
      uint32_t v37 = 44;
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301058);
    }
    uint64_t v40 = qword_102419538;
    if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_41;
    }
    *(_DWORD *)int buf = 68289282;
    int v114 = 0;
    __int16 v115 = 2082;
    __int16 v116 = "";
    __int16 v117 = 2114;
    unint64_t v118 = (unint64_t)v94;
    id v34 = "{\"msg%{public}.0s\":\"#pla Skip #clldu-MarkZonesAsRelevant. No InterestZones\", \"dictionary\":%{public, loca"
          "tion:escape_only}@}";
    double v35 = buf;
    int v36 = v40;
    uint32_t v37 = 28;
  }
  _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, v34, v35, v37);
LABEL_41:
  if (v32)
  {
    id v54 = sub_100123630(v25);
    unint64_t v80 = v25;
    if ([v54 count])
    {
      id v88 = [(NSMutableDictionary *)v25 objectForKey:@"BundleId"];
      id v87 = [(NSMutableDictionary *)v25 objectForKey:@"BundlePath"];
      unsigned int v55 = [[-[NSMutableDictionary objectForKey:](v25, "objectForKey:", @"InUseLevel") unsignedIntValue];
      long long v101 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      long long v104 = 0u;
      id v95 = [v54 countByEnumeratingWithState:&v101 objects:&v140 count:16];
      if (v95)
      {
        int v86 = v100;
        int v85 = v99;
        uint64_t v91 = *(void *)v102;
        uint64_t v84 = v55;
        id obj = v54;
        unsigned int v93 = v55;
        do
        {
          for (j = 0; j != v95; j = (char *)j + 1)
          {
            if (*(void *)v102 != v91) {
              objc_enumerationMutation(obj);
            }
            long long v57 = *(void **)(*((void *)&v101 + 1) + 8 * (void)j);
            unsigned int v58 = [[objc_msgSend(v57, "objectForKeyedSubscript:", @"ServiceMaskOperator") intValue];
            unsigned int v59 = [[-[NSArray objectAtIndexedSubscript:](sub_100122E44(v57, 0, 1, 0)) objectAtIndexedSubscript:2] intValue];
            unsigned int v60 = sub_1001083CC(v57);
            unsigned int v61 = [[objc_msgSend(v57, "objectForKey:", @"IncidentalUseMode") unsignedIntValue];
            uint64_t v62 = sub_1001081BC(v59, v55, v60, v61, 1, 0, 0);
            int v64 = v62;
            int v65 = v63;
            uint64_t v66 = v62 | v100;
            unsigned int v98 = v58;
            if (v58) {
              uint64_t v66 = v62 & v100;
            }
            uint64_t v100 = v66;
            if (v58) {
              uint64_t v67 = v63 & v99;
            }
            else {
              uint64_t v67 = v63 | v99;
            }
            uint64_t v99 = v67;
            if (v29[166] != -1) {
              dispatch_once(&qword_102419530, &stru_102301058);
            }
            id v68 = v31[167];
            if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
            {
              int v69 = (CLClientManagerAuthorizationContext *)[v88 UTF8String];
              id v70 = [v87 UTF8String];
              id v71 = [[objc_msgSend(v57, "objectForKeyedSubscript:", @"ZoneId") UTF8String];
              *(_DWORD *)int buf = 68292610;
              int v114 = 0;
              __int16 v115 = 2082;
              __int16 v116 = "";
              __int16 v117 = 2082;
              unint64_t v118 = (unint64_t)v69;
              int v31 = &qword_102419000;
              __int16 v119 = 2082;
              *(void *)uint64_t v120 = v70;
              __int16 v29 = &qword_102419000;
              *(_WORD *)&v120[8] = 2082;
              *(void *)&v120[10] = v71;
              *(_WORD *)&v120[18] = 2050;
              uint64_t v121 = v59;
              *(_WORD *)uint64_t v122 = 2050;
              *(void *)&v122[2] = v60;
              *(_WORD *)uint64_t v123 = 2050;
              *(void *)&v123[2] = v61;
              __int16 v124 = 2050;
              uint64_t v125 = v84;
              __int16 v126 = 1026;
              int v127 = v64;
              __int16 v128 = 1026;
              int v129 = v65;
              __int16 v130 = 1026;
              int v131 = v86;
              __int16 v132 = 1026;
              int v133 = v85;
              __int16 v134 = 2050;
              uint64_t v135 = v98;
              __int16 v136 = 1026;
              int v137 = v100;
              __int16 v138 = 1026;
              int v139 = v99;
              _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#pla #clldu-UpdateServiceMask using relevant zone\", \"bundleID\":%{public, location:escape_only}s, \"bundlePath\":%{public, location:escape_only}s, \"ZoneId\":%{public, location:escape_only}s, \"zoneTransientRegistration\":%{public, location:CLClientRegistrationResult}lld, \"zoneCC\":%{public, location:CLClientCorrectiveCompensation}lld, \"zoneIncidentalUse\":%{public, location:CLClientIncidentalUseMode}lld, \"zoneInUseLevel\":%{public, location:CLClientInUseLevel}lld, \"zoneEffectiveMask\":%{public}d, \"zoneProvisionalMask\":%{public}d, \"ClientOldEffectiveMask\":%{public}d, \"ClientOldProvisionalMask\":%{public}d, \"zoneServiceMaskOptr\":%{public, location:CLClientInterestZoneServiceMaskOperator}lld, \"ClientNewEffectiveMask\":%{public}d, \"ClientNewProvisionalMask\":%{public}d}", buf, 0x86u);
            }
            unsigned int v55 = v93;
          }
          id v95 = [obj countByEnumeratingWithState:&v101 objects:&v140 count:16];
        }
        while (v95);
      }
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301058);
      }
      __int16 v72 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 68289282;
        int v114 = 0;
        __int16 v115 = 2082;
        __int16 v116 = "";
        __int16 v117 = 2114;
        unint64_t v118 = (unint64_t)v25;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Skip #clldu-UpdateClientServiceTypeMasks #pla for zones. No Relevant Interest Zones\", \"dictionary\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
    }
    int v32 = v83;
    int v25 = v80;
  }
  CFStringRef v73 = sub_100122E44(v25, 0, v32, 0);
  unint64_t v38 = (unint64_t)[v73 objectAtIndexedSubscript:1].intValue;
  unint64_t v39 = [(unint64_t)[-[NSArray objectAtIndexedSubscript:](v73, "objectAtIndexedSubscript:", 2) intValue];
LABEL_66:
  if (v38 == 8 || v38 == 1) {
    BOOL v74 = v81 == 3;
  }
  else {
    BOOL v74 = v38 == 0;
  }
  LOBYTE(v78) = v74;
  id v75 = -[CLClientManagerAuthorizationContext initWithInUseLevel:registrationResult:transientAwareRegistrationResult:serviceMaskTuple:diagnosticMask:authorizedForWidgetUpdates:]([CLClientManagerAuthorizationContext alloc], "initWithInUseLevel:registrationResult:transientAwareRegistrationResult:serviceMaskTuple:diagnosticMask:authorizedForWidgetUpdates:", v82, v38, v39, v100, v99, sub_1001082B4(v25, v39, v32), v78);
  if (v29[166] != -1) {
    dispatch_once(&qword_102419530, &stru_102301058);
  }
  __int16 v76 = v31[167];
  if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 68289282;
    int v114 = 0;
    __int16 v115 = 2082;
    __int16 v116 = "";
    __int16 v117 = 2114;
    unint64_t v118 = (unint64_t)v75;
    _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#clldu freshAuthContext\", \"AuthContext\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  return v75;
}

uint64_t sub_100108178(int a1, int a2, char a3, char a4, unsigned int a5, int a6, int a7)
{
  if (a7)
  {
    if ((a3 & 1) != 0 || (a4 & 1) != 0 || a5)
    {
      if (a2 | a1) {
        return 1;
      }
      else {
        return a5;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (a2 | a1) {
      a6 = 1;
    }
    return a6 | a5;
  }
}

uint64_t sub_1001081B4(int a1)
{
  return a1 ^ 1u;
}

uint64_t sub_1001081BC(int a1, int a2, int a3, int a4, uint64_t a5, int a6, int a7)
{
  uint64_t v7 = 0;
  switch(a1)
  {
    case 0:
      uint64_t v7 = 64639;
      if (a6) {
        uint64_t v7 = 195711;
      }
      if (a7) {
        v7 |= 0x40000uLL;
      }
      break;
    case 1:
    case 8:
      BOOL v9 = (a4 != 3 || a2 != 1) && a2 <= 1;
      uint64_t v10 = 0x4000;
      if (!v9) {
        uint64_t v10 = 52351;
      }
      if (a7) {
        v10 |= 0x40000uLL;
      }
      uint64_t v7 = v10 | 0x1000;
      break;
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
      break;
    case 5:
      sub_101A61C88();
    default:
      uint64_t v7 = 0;
      break;
  }
  if (a3 == 2) {
    return v7 & 0x7AFF8;
  }
  else {
    return v7;
  }
}

uint64_t sub_1001082B4(void *a1, int a2, int a3)
{
  unsigned int v6 = [[a1 objectForKeyedSubscript:@"LocationRestricted"] BOOLValue];
  unsigned int v7 = [[a1 objectForKey:@"TemporaryAuthorization"] unsignedIntValue];
  unsigned int v8 = [[a1 objectForKey:@"CorrectiveCompensationEnabled"] unsignedIntValue];
  if ([a1 objectForKey:@"AuthorizationUpgradeAvailable"]) {
    unsigned int v9 = [[a1 objectForKey:@"AuthorizationUpgradeAvailable"] boolValue] ^ 1;
  }
  else {
    LOBYTE(v9) = 0;
  }
  uint64_t v10 = 3;
  if (a3) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = v10 | (a2 == 2);
  if (v6) {
    v11 |= 4uLL;
  }
  BOOL v12 = v8 == 2 && (v7 & 2) == 0;
  uint64_t v13 = v11 | 0x40;
  if (!v12) {
    uint64_t v13 = v11;
  }
  if (((a2 == 1) & v9) != 0) {
    uint64_t v14 = v13 | 0x400;
  }
  else {
    uint64_t v14 = v13;
  }
  return v14 | (v7 << 8) & 0x800;
}

uint64_t sub_1001083CC(void *a1)
{
  if ([[a1 objectForKey:@"TemporaryAuthorization"] unsignedIntValue] & 2) return 1; {
  id v2 = [a1 objectForKey:@"CorrectiveCompensationEnabled"];
  }

  return (uint64_t)[v2 unsignedIntValue];
}

uint64_t sub_1001084B4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = 0x66FD0EB66FD0EB67 * ((a2 - *a1) >> 3);
  unint64_t v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = v11;
  if (v6 >= v11)
  {
    unint64_t v49 = 0x66FD0EB66FD0EB67 * ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v49 > 0x5E293205E29320) {
      sub_1001D7FD4();
    }
    unint64_t v50 = 0x66FD0EB66FD0EB67 * ((uint64_t)(v10 - v7) >> 3);
    if (2 * v50 > v49) {
      unint64_t v49 = 2 * v50;
    }
    if (v50 >= 0x2F149902F14990) {
      unint64_t v51 = 0x5E293205E29320;
    }
    else {
      unint64_t v51 = v49;
    }
    *(void *)&long long v56 = v9;
    if (v51) {
      uint64_t v52 = (char *)sub_10010FAD4(v9, v51);
    }
    else {
      uint64_t v52 = 0;
    }
    *(void *)&long long v54 = v52;
    *((void *)&v54 + 1) = &v52[696 * v8];
    *(void *)&long long v55 = *((void *)&v54 + 1);
    *((void *)&v55 + 1) = &v52[696 * v51];
    sub_10068F5E4(&v54, a3);
    uint64_t v4 = sub_10068F738(a1, &v54, v4);
    sub_10010FD98((void **)&v54);
  }
  else if (a2 == v6)
  {
    sub_1000FC2C4(v9, a2, a3);
    a1[1] = v4 + 696;
  }
  else
  {
    uint64_t v98 = v9;
    sub_1000FC2C4(v9, (uint64_t)&v54, a3);
    sub_10068F464((uint64_t)a1, v4, a1[1], v4 + 696);
    *(_OWORD *)uint64_t v4 = v54;
    long long v12 = v55;
    long long v13 = v56;
    long long v14 = v57[0];
    *(_OWORD *)(v4 + 60) = *(_OWORD *)((char *)v57 + 12);
    *(_OWORD *)(v4 + 32) = v13;
    *(_OWORD *)(v4 + 48) = v14;
    *(_OWORD *)(v4 + 16) = v12;
    uint64_t v15 = v7 + 696 * v8;
    uint64_t v18 = *(void **)(v15 + 88);
    uint64_t v17 = (void *)(v15 + 88);
    uint64_t v16 = v18;
    *((_DWORD *)v17 - 2) = v58;
    if (v18)
    {
      *(void *)(v7 + 696 * v8 + 96) = v16;
      operator delete(v16);
      void *v17 = 0;
      v17[1] = 0;
      v17[2] = 0;
    }
    *(_OWORD *)uint64_t v17 = v59;
    uint64_t v19 = v7 + 696 * v8;
    *(void *)(v19 + 104) = v60;
    uint64_t v60 = 0;
    long long v59 = 0uLL;
    long long v20 = v65;
    long long v22 = v62;
    long long v21 = v63;
    *(_OWORD *)(v19 + 160) = v64;
    *(_OWORD *)(v19 + 176) = v20;
    *(_OWORD *)(v19 + 128) = v22;
    *(_OWORD *)(v19 + 144) = v21;
    long long v23 = v69;
    long long v25 = v66;
    long long v24 = v67;
    *(_OWORD *)(v19 + 224) = v68;
    *(_OWORD *)(v19 + 240) = v23;
    *(_OWORD *)(v19 + 192) = v25;
    *(_OWORD *)(v19 + 208) = v24;
    long long v27 = v71;
    long long v26 = v72[0];
    long long v28 = v70;
    *(_OWORD *)(v19 + 300) = *(_OWORD *)((char *)v72 + 12);
    *(_OWORD *)(v19 + 272) = v27;
    *(_OWORD *)(v19 + 288) = v26;
    *(_OWORD *)(v19 + 256) = v28;
    *(_OWORD *)(v19 + 112) = v61;
    uint64_t v29 = v19 + 320;
    if (*(char *)(v4 + 343) < 0) {
      operator delete(*(void **)v29);
    }
    long long v30 = v73;
    *(void *)(v29 + 16) = v74;
    *(_OWORD *)uint64_t v29 = v30;
    HIBYTE(v74) = 0;
    LOBYTE(v73) = 0;
    uint64_t v31 = v7 + 696 * v8;
    long long v32 = v82;
    long long v33 = v83;
    long long v34 = v84;
    *(_DWORD *)(v31 + 504) = v85;
    long long v36 = v80;
    long long v35 = v81;
    long long v37 = v79;
    *(_OWORD *)(v31 + 392) = v78;
    *(_OWORD *)(v31 + 408) = v37;
    *(_OWORD *)(v31 + 424) = v36;
    *(_OWORD *)(v31 + 440) = v35;
    long long v39 = v76;
    long long v38 = v77;
    *(_OWORD *)(v31 + 344) = v75;
    *(_OWORD *)(v31 + 360) = v39;
    *(_OWORD *)(v31 + 376) = v38;
    *(_OWORD *)(v31 + 472) = v33;
    *(_OWORD *)(v31 + 488) = v34;
    *(_OWORD *)(v31 + 456) = v32;
    long long v40 = v86;
    long long v41 = v87;
    long long v42 = v89;
    *(_OWORD *)(v31 + 544) = v88;
    *(_OWORD *)(v31 + 560) = v42;
    *(_OWORD *)(v31 + 512) = v40;
    *(_OWORD *)(v31 + 528) = v41;
    long long v43 = v90;
    long long v44 = v91;
    long long v45 = v93;
    *(_OWORD *)(v31 + 608) = v92;
    *(_OWORD *)(v31 + 624) = v45;
    *(_OWORD *)(v31 + 576) = v43;
    *(_OWORD *)(v31 + 592) = v44;
    long long v46 = v94;
    long long v47 = v95;
    long long v48 = v96;
    *(_DWORD *)(v31 + 688) = v97;
    *(_OWORD *)(v31 + 656) = v47;
    *(_OWORD *)(v31 + 672) = v48;
    *(_OWORD *)(v31 + 640) = v46;
    sub_1000FA860(v98, (uint64_t)&v54);
  }
  return v4;
}

void sub_1001087B0(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

uint64_t sub_1001087E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_10068F9C8((uint64_t)&v9, a3, *(void *)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 696;
        sub_1000FA860(a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t sub_100108874(uint64_t a1)
{
  sub_10010F274((uint64_t)v17);
  uint64_t v2 = sub_10011BA84(*(_DWORD *)(a1 + 8));
  size_t v3 = strlen(v2);
  uint64_t v4 = sub_100132EFC(v18, (uint64_t)v2, v3);
  uint64_t v5 = sub_100132EFC(v4, (uint64_t)", ", 2);
  uint64_t v6 = sub_10011BA60(*(_DWORD *)(a1 + 4));
  size_t v7 = strlen(v6);
  sub_100132EFC(v5, (uint64_t)v6, v7);
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  if (v8 < 3)
  {
LABEL_4:
    char v9 = sub_100132EFC(v18, (uint64_t)", ", 2);
    sub_10010F0A4();
    if ((v16 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v16 & 0x80u) == 0) {
      uint64_t v11 = v16;
    }
    else {
      uint64_t v11 = v15;
    }
    goto LABEL_37;
  }
  if (v8 == 9)
  {
    char v9 = sub_100132EFC(v18, (uint64_t)", ", 2);
    sub_10010F0A4();
    if ((v16 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v16 & 0x80u) == 0) {
      uint64_t v11 = v16;
    }
    else {
      uint64_t v11 = v15;
    }
  }
  else
  {
    if (v8 == 7) {
      goto LABEL_4;
    }
    if (v8 - 3 > 2)
    {
      if (v8 == 10)
      {
        char v9 = sub_100132EFC(v18, (uint64_t)", ", 2);
        sub_100631600();
        if ((v16 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        if ((v16 & 0x80u) == 0) {
          uint64_t v11 = v16;
        }
        else {
          uint64_t v11 = v15;
        }
      }
      else
      {
        if (v8 != 6)
        {
          sub_100132EFC(v18, (uint64_t)", UnknownCell", 13);
          goto LABEL_39;
        }
        char v9 = sub_100132EFC(v18, (uint64_t)", ", 2);
        sub_10010F0A4();
        if ((v16 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        if ((v16 & 0x80u) == 0) {
          uint64_t v11 = v16;
        }
        else {
          uint64_t v11 = v15;
        }
      }
    }
    else
    {
      char v9 = sub_100132EFC(v18, (uint64_t)", ", 2);
      sub_10063009C();
      if ((v16 & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if ((v16 & 0x80u) == 0) {
        uint64_t v11 = v16;
      }
      else {
        uint64_t v11 = v15;
      }
    }
  }
LABEL_37:
  sub_100132EFC(v9, (uint64_t)p_p, v11);
  if ((char)v16 < 0) {
    operator delete(__p);
  }
LABEL_39:
  std::stringbuf::str();
  *(void *)((char *)v17
  v18[0] = v12;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100108C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_100108C54(uint64_t a1, int a2, int a3, int a4, int a5)
{
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  if (v6 < 3) {
    goto LABEL_4;
  }
  if (v6 == 9)
  {
    *(_DWORD *)(a1 + 60) = a2;
    *(_DWORD *)(a1 + 64) = a3;
    *(_DWORD *)(a1 + 68) = a4;
    *(_DWORD *)(a1 + 72) = a5;
  }
  else
  {
    if (v6 == 7)
    {
LABEL_4:
      *(_DWORD *)(a1 + 28) = a2;
      *(_DWORD *)(a1 + 32) = a3;
      *(_DWORD *)(a1 + 36) = a4;
      *(_DWORD *)(a1 + 40) = a5;
      goto LABEL_5;
    }
    if (v6 - 3 > 2)
    {
      if (v6 == 10)
      {
        *(_DWORD *)(a1 + 624) = a2;
        *(_DWORD *)(a1 + 628) = a3;
        *(_DWORD *)(a1 + 656) = a4;
        *(_DWORD *)(a1 + 660) = a5;
        *(_DWORD *)(a1 + 632) = -1;
        *(void *)(a1 + 648) = 0;
        *(void *)(a1 + 640) = 0;
      }
      else if (v6 == 6)
      {
        *(_DWORD *)(a1 + 528) = a2;
        *(_DWORD *)(a1 + 532) = a3;
        *(_DWORD *)(a1 + 560) = a4;
        *(_DWORD *)(a1 + 564) = a5;
        *(_DWORD *)(a1 + 536) = -1;
        *(void *)(a1 + 552) = 0;
        *(void *)(a1 + 544) = 0;
      }
    }
    else
    {
      *(void *)(a1 + 128) = -1;
      *(_DWORD *)(a1 + 136) = -1;
      *(_DWORD *)(a1 + 140) = a4;
      *(_DWORD *)(a1 + 144) = a5;
    }
  }
LABEL_5:
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023258E0);
  }
  size_t v7 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_10142D00C(a1);
    unsigned int v8 = v16 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CELL_LOC: override to, %s", buf, 0xCu);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023258E0);
    }
    sub_10142D00C(a1);
    if (v12 >= 0) {
      char v9 = buf;
    }
    else {
      char v9 = *(unsigned char **)buf;
    }
    int v13 = 136315138;
    long long v14 = v9;
    unint64_t v10 = (char *)_os_log_send_and_compose_impl();
    if (v12 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCell::overrideUarfcnPsc(int, int, int, int)", "%s\n", v10);
    if (v10 != (char *)__p) {
      free(v10);
    }
  }
}

void sub_100108F10(uint64_t a1)
{
  double v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v371 = v4;
  v372 = v5;
  size_t v7 = v6;
  sub_100134750(&v455, "none");
  sub_100134750(&v454, "none");
  unsigned int v8 = &qword_102419000;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022C2220);
  }
  char v9 = &qword_102419000;
  unint64_t v10 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    char v12 = (_OWORD *)*v372;
    uint64_t v11 = v372[1];
    int v13 = (*(uint64_t (**)(uint64_t *))(*v7 + 40))(v7);
    int v14 = *(_DWORD *)(v3 + 96);
    double v15 = vabdd_f64(v1, *(double *)(v3 + 76));
    *(_DWORD *)int buf = 134349824;
    *(void *)&uint8_t buf[4] = 0x66FD0EB66FD0EB67 * ((v11 - (uint64_t)v12) >> 3);
    __int16 v531 = 1026;
    *(_DWORD *)v532 = v13;
    *(_WORD *)&v532[4] = 2050;
    *(double *)&v532[6] = v15;
    *(_WORD *)&v532[14] = 1026;
    *(_DWORD *)&v532[16] = v14;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CellFlow, compute, cells, %{public}zu, spectators, %{public}d, last, %{public}.1lf, type, %{public}d", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022C2220);
    }
    v311 = (_OWORD *)*v372;
    uint64_t v310 = v372[1];
    int v312 = (*(uint64_t (**)(uint64_t *))(*v7 + 40))(v7);
    int v313 = *(_DWORD *)(v3 + 96);
    double v314 = vabdd_f64(v1, *(double *)(v3 + 76));
    *(_DWORD *)v473 = 134349824;
    *(void *)&v473[4] = 0x66FD0EB66FD0EB67 * ((v310 - (uint64_t)v311) >> 3);
    *(_WORD *)&v473[12] = 1026;
    *(_DWORD *)&v473[14] = v312;
    *(_WORD *)&v473[18] = 2050;
    *(double *)&v473[20] = v314;
    *(_WORD *)&v473[28] = 1026;
    *(_DWORD *)&v473[30] = v313;
    v315 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v315);
    if (v315 != buf) {
      free(v315);
    }
  }
  uint64_t v17 = *v372;
  uint64_t v16 = v372[1];
  if (v16 == *v372)
  {
    (*(void (**)(uint64_t *, const char *))(*v7 + 56))(v7, "nocells");
    goto LABEL_485;
  }
  uint64_t v373 = 0;
  unsigned int v375 = 0;
  unint64_t v452 = 0;
  uint64_t v451 = 0;
  unint64_t v453 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v376 = _Q0;
  v374 = v7;
  do
  {
    unsigned int v22 = *(_DWORD *)(v17 + 8);
    if (v22 >= 8 && v22 - 9 >= 2)
    {
      if (v8[116] != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022C2220);
      }
      long long v54 = v9[117];
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        sub_10142D00C(v17);
        long long v55 = buf;
        if (v532[9] < 0) {
          long long v55 = *(unsigned char **)buf;
        }
        *(_DWORD *)v473 = 136446210;
        *(void *)&v473[4] = v55;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "CellMatch, invalid cell, %{public}s, #CloneMe", v473, 0xCu);
        if ((v532[9] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v8[116] != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022C2220);
        }
        sub_10142D00C(v17);
        long long v56 = v473;
        if (v473[23] < 0) {
          long long v56 = *(unsigned char **)v473;
        }
        *(_DWORD *)v488 = 136446210;
        *(void *)&v488[4] = v56;
        long long v41 = (char *)_os_log_send_and_compose_impl();
        if ((v473[23] & 0x80000000) != 0) {
          operator delete(*(void **)v473);
        }
        goto LABEL_54;
      }
    }
    else
    {
      if (sub_100114284(v22))
      {
        sub_100134750(v525, "none");
        sub_100134750(&v525[24], "weak");
        sub_100134750(&v525[48], "strong");
        sub_100134750(&v525[72], "exact");
        LODWORD(v385[0]) = 0;
        *(void *)&v473[4] = 0;
        *(void *)&v473[12] = 0;
        *(_OWORD *)&v473[20] = xmmword_101D1C320;
        *(_OWORD *)&v473[36] = v376;
        *(_OWORD *)&v473[52] = v376;
        *(_OWORD *)&v473[68] = v376;
        *(_DWORD *)v473 = 0xFFFF;
        *(_DWORD *)&v473[84] = 0;
        *(void *)&v473[88] = 0xBFF0000000000000;
        long long v474 = 0uLL;
        LODWORD(v475) = 0;
        *(void *)((char *)&v475 + 4) = 0xBFF0000000000000;
        HIDWORD(v475) = 0x7FFFFFFF;
        memset(v476, 0, 25);
        LODWORD(v385[0]) = (*(uint64_t (**)(uint64_t *, uint64_t, unsigned char *))(*v7 + 24))(v7, v17, v473);
        int v450 = 0;
        *(void *)&v488[4] = 0;
        *(void *)&v488[12] = 0;
        *(_OWORD *)&v488[20] = xmmword_101D1C320;
        *(_OWORD *)&v488[36] = v376;
        *(_OWORD *)&v488[52] = v376;
        *(_OWORD *)&v488[68] = v376;
        *(_DWORD *)v488 = 0xFFFF;
        *(_DWORD *)&v488[84] = 0;
        *(void *)&v488[88] = 0xBFF0000000000000;
        long long v489 = 0uLL;
        LODWORD(v490) = 0;
        *(void *)((char *)&v490 + 4) = 0xBFF0000000000000;
        HIDWORD(v490) = 0x7FFFFFFF;
        memset(v491, 0, 25);
        if (SLODWORD(v385[0]) <= 2) {
          int v450 = (*(uint64_t (**)(uint64_t *, uint64_t, unsigned char *))(*v7 + 32))(v7, v17, v488);
        }
        if (v8[116] != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022C2220);
        }
        long long v23 = v9[117];
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          long long v24 = &v525[24 * SLODWORD(v385[0])];
          if ((char)v24[23] < 0) {
            long long v24 = *(unsigned char **)v24;
          }
          sub_10010EE08(v17, v456);
          int v25 = v458[9];
          long long v26 = *(unsigned char **)v456;
          sub_1000AB340((uint64_t)v473);
          long long v27 = v456;
          if (v25 < 0) {
            long long v27 = v26;
          }
          long long v28 = __p;
          if (SHIBYTE(__p[2]) < 0) {
            long long v28 = (void **)__p[0];
          }
          *(_DWORD *)int buf = 136446723;
          *(void *)&uint8_t buf[4] = v24;
          __int16 v531 = 2081;
          *(void *)v532 = v27;
          *(_WORD *)&v532[8] = 2081;
          *(void *)&v532[10] = v28;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CellMatch, best network, %{public}s, %{private}s, location, %{private}s", buf, 0x20u);
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
          unsigned int v8 = &qword_102419000;
          if ((v458[9] & 0x80000000) != 0) {
            operator delete(*(void **)v456);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v8[116] != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022C2220);
          }
          long long v75 = &v525[24 * SLODWORD(v385[0])];
          if ((char)v75[23] < 0) {
            long long v75 = *(unsigned char **)v75;
          }
          sub_10010EE08(v17, __p);
          int v76 = SHIBYTE(__p[2]);
          long long v77 = (void **)__p[0];
          sub_1000AB340((uint64_t)v473);
          long long v78 = __p;
          if (v76 < 0) {
            long long v78 = v77;
          }
          long long v79 = &v448;
          if (v449 < 0) {
            long long v79 = (long long *)v448;
          }
          *(_DWORD *)v456 = 136446723;
          *(void *)&v456[4] = v75;
          __int16 v457 = 2081;
          *(void *)v458 = v78;
          *(_WORD *)&v458[8] = 2081;
          *(void *)&v458[10] = v79;
          long long v80 = (char *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v449) < 0) {
            operator delete((void *)v448);
          }
          unsigned int v8 = &qword_102419000;
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v80);
          if (v80 != buf) {
            free(v80);
          }
        }
        if (v8[116] != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022C2220);
        }
        uint64_t v29 = v9[117];
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        {
          long long v30 = &v525[24 * v450];
          if ((char)v30[23] < 0) {
            long long v30 = *(unsigned char **)v30;
          }
          sub_1000AB340((uint64_t)v488);
          uint64_t v31 = buf;
          if (v532[9] < 0) {
            uint64_t v31 = *(unsigned char **)buf;
          }
          *(_DWORD *)v456 = 136446467;
          *(void *)&v456[4] = v30;
          __int16 v457 = 2081;
          *(void *)v458 = v31;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "CellMatch, best tile, %{public}s, location, %{private}s", v456, 0x16u);
          if ((v532[9] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v8[116] != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022C2220);
          }
          long long v81 = &v525[24 * v450];
          if ((char)v81[23] < 0) {
            long long v81 = *(unsigned char **)v81;
          }
          sub_1000AB340((uint64_t)v488);
          long long v82 = v456;
          if (v458[9] < 0) {
            long long v82 = *(unsigned char **)v456;
          }
          LODWORD(__p[0]) = 136446467;
          *(void **)((char *)__p + 4) = v81;
          WORD2(__p[1]) = 2081;
          *(void **)((char *)&__p[1] + 6) = v82;
          long long v83 = (char *)_os_log_send_and_compose_impl();
          if ((v458[9] & 0x80000000) != 0) {
            operator delete(*(void **)v456);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v83);
          if (v83 != buf) {
            free(v83);
          }
        }
        unsigned __int8 v447 = 1;
        if (LODWORD(v385[0]) | v450)
        {
          if (SLODWORD(v385[0]) >= v450)
          {
            unsigned __int8 v447 = SLODWORD(v385[0]) < 3;
            unint64_t v48 = v452;
            if (v452 >= v453)
            {
              uint64_t v53 = sub_100112350(&v451, v17, v385, v473, &v447);
            }
            else
            {
              sub_100112BF8(v452, v17);
              *(_DWORD *)(v48 + 696) = v385[0];
              *(unsigned char *)(v48 + 856) = v447;
              long long v49 = v475;
              *(_OWORD *)(v48 + 796) = v474;
              *(_OWORD *)(v48 + 812) = v49;
              *(_OWORD *)(v48 + 828) = v476[0];
              *(_OWORD *)(v48 + 840) = *(_OWORD *)((char *)v476 + 12);
              long long v50 = *(_OWORD *)&v473[48];
              *(_OWORD *)(v48 + 732) = *(_OWORD *)&v473[32];
              *(_OWORD *)(v48 + 748) = v50;
              long long v51 = *(_OWORD *)&v473[80];
              *(_OWORD *)(v48 + 764) = *(_OWORD *)&v473[64];
              *(_OWORD *)(v48 + 780) = v51;
              long long v52 = *(_OWORD *)&v473[16];
              uint64_t v53 = v48 + 864;
              *(_OWORD *)(v48 + 700) = *(_OWORD *)v473;
              *(_OWORD *)(v48 + 716) = v52;
            }
            unint64_t v452 = v53;
            std::string::assign(&v454, "network");
            std::string::operator=(&v455, (const std::string *)&v525[24 * SLODWORD(v385[0])]);
            LODWORD(v373) = v373 + 1;
          }
          else
          {
            unsigned __int8 v447 = v450 < 2;
            unint64_t v42 = v452;
            if (v452 >= v453)
            {
              uint64_t v47 = sub_100112350(&v451, v17, &v450, v488, &v447);
            }
            else
            {
              sub_100112BF8(v452, v17);
              *(_DWORD *)(v42 + 696) = v450;
              *(unsigned char *)(v42 + 856) = v447;
              long long v43 = v490;
              *(_OWORD *)(v42 + 796) = v489;
              *(_OWORD *)(v42 + 812) = v43;
              *(_OWORD *)(v42 + 828) = v491[0];
              *(_OWORD *)(v42 + 840) = *(_OWORD *)((char *)v491 + 12);
              long long v44 = *(_OWORD *)&v488[48];
              *(_OWORD *)(v42 + 732) = *(_OWORD *)&v488[32];
              *(_OWORD *)(v42 + 748) = v44;
              long long v45 = *(_OWORD *)&v488[80];
              *(_OWORD *)(v42 + 764) = *(_OWORD *)&v488[64];
              *(_OWORD *)(v42 + 780) = v45;
              long long v46 = *(_OWORD *)&v488[16];
              uint64_t v47 = v42 + 864;
              *(_OWORD *)(v42 + 700) = *(_OWORD *)v488;
              *(_OWORD *)(v42 + 716) = v46;
            }
            unint64_t v452 = v47;
            std::string::assign(&v454, "tiles");
            std::string::operator=(&v455, (const std::string *)&v525[24 * v450]);
            ++HIDWORD(v373);
          }
          if (v8[116] != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022C2220);
          }
          long long v57 = v9[117];
          if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
          {
            sub_10010EE08(v17, v456);
            int v58 = v456;
            if (v458[9] < 0) {
              int v58 = *(unsigned char **)v456;
            }
            long long v59 = &v454;
            if ((v454.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              long long v59 = (std::string *)v454.__r_.__value_.__r.__words[0];
            }
            uint64_t v60 = &v525[24 * SLODWORD(v385[0])];
            if ((char)v60[23] < 0) {
              uint64_t v60 = *(unsigned char **)v60;
            }
            long long v61 = &v525[24 * v450];
            if ((char)v61[23] < 0) {
              long long v61 = *(unsigned char **)v61;
            }
            *(_DWORD *)int buf = 136381699;
            *(void *)&uint8_t buf[4] = v58;
            __int16 v531 = 2082;
            *(void *)v532 = v59;
            *(_WORD *)&v532[8] = 2082;
            *(void *)&v532[10] = v60;
            *(_WORD *)&v532[18] = 2082;
            *(void *)&v532[20] = v61;
            *(_WORD *)&v532[28] = 1026;
            *(_DWORD *)&v532[30] = v447;
            _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, "CellMatch, prefer, %{private}s, %{public}s, levels, %{public}s, %{public}s, als, %{public}d", buf, 0x30u);
            if ((v458[9] & 0x80000000) != 0) {
              operator delete(*(void **)v456);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (v8[116] != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022C2220);
            }
            sub_10010EE08(v17, __p);
            long long v95 = __p;
            if (SHIBYTE(__p[2]) < 0) {
              long long v95 = (void **)__p[0];
            }
            long long v96 = &v454;
            if ((v454.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              long long v96 = (std::string *)v454.__r_.__value_.__r.__words[0];
            }
            int v97 = &v525[24 * SLODWORD(v385[0])];
            if ((char)v97[23] < 0) {
              int v97 = *(unsigned char **)v97;
            }
            uint64_t v98 = &v525[24 * v450];
            if ((char)v98[23] < 0) {
              uint64_t v98 = *(unsigned char **)v98;
            }
            *(_DWORD *)v456 = 136381699;
            *(void *)&v456[4] = v95;
            __int16 v457 = 2082;
            *(void *)v458 = v96;
            *(_WORD *)&v458[8] = 2082;
            *(void *)&v458[10] = v97;
            *(_WORD *)&v458[18] = 2082;
            *(void *)&v458[20] = v98;
            *(_WORD *)&v458[28] = 1026;
            *(_DWORD *)&v458[30] = v447;
            uint64_t v99 = (char *)_os_log_send_and_compose_impl();
            if (SHIBYTE(__p[2]) < 0) {
              operator delete(__p[0]);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v99);
            if (v99 != buf) {
              free(v99);
            }
          }
        }
        else
        {
          buf[0] = 1;
          unint64_t v32 = v452;
          if (v452 >= v453)
          {
            uint64_t v37 = sub_100112350(&v451, v17, v385, v473, buf);
          }
          else
          {
            sub_100112BF8(v452, v17);
            *(_DWORD *)(v32 + 696) = v385[0];
            *(unsigned char *)(v32 + 856) = buf[0];
            long long v33 = v475;
            *(_OWORD *)(v32 + 796) = v474;
            *(_OWORD *)(v32 + 812) = v33;
            *(_OWORD *)(v32 + 828) = v476[0];
            *(_OWORD *)(v32 + 840) = *(_OWORD *)((char *)v476 + 12);
            long long v34 = *(_OWORD *)&v473[48];
            *(_OWORD *)(v32 + 732) = *(_OWORD *)&v473[32];
            *(_OWORD *)(v32 + 748) = v34;
            long long v35 = *(_OWORD *)&v473[80];
            *(_OWORD *)(v32 + 764) = *(_OWORD *)&v473[64];
            *(_OWORD *)(v32 + 780) = v35;
            long long v36 = *(_OWORD *)&v473[16];
            uint64_t v37 = v32 + 864;
            *(_OWORD *)(v32 + 700) = *(_OWORD *)v473;
            *(_OWORD *)(v32 + 716) = v36;
          }
          unint64_t v452 = v37;
          ++v375;
        }
        if (v8[116] != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022C2220);
        }
        long long v62 = v9[117];
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v63 = v16;
          sub_10010EE08(v17, v456);
          int v64 = v458[9];
          long long v65 = *(unsigned char **)v456;
          int v66 = SHIBYTE(v455.__r_.__value_.__r.__words[2]);
          std::string::size_type v67 = v455.__r_.__value_.__r.__words[0];
          int v68 = SHIBYTE(v454.__r_.__value_.__r.__words[2]);
          std::string::size_type v69 = v454.__r_.__value_.__r.__words[0];
          sub_10010EE74(v17);
          long long v70 = &v454;
          if (v68 < 0) {
            long long v70 = (std::string *)v69;
          }
          long long v71 = &v455;
          if (v66 < 0) {
            long long v71 = (std::string *)v67;
          }
          __int16 v72 = v456;
          if (v64 < 0) {
            __int16 v72 = v65;
          }
          *(_DWORD *)int buf = 136381699;
          long long v73 = __p;
          if (SHIBYTE(__p[2]) < 0) {
            long long v73 = (void **)__p[0];
          }
          *(void *)&uint8_t buf[4] = v72;
          __int16 v531 = 2082;
          *(void *)v532 = v71;
          *(_WORD *)&v532[8] = 2082;
          *(void *)&v532[10] = v70;
          *(_WORD *)&v532[18] = 2082;
          *(void *)&v532[20] = v73;
          *(_WORD *)&v532[28] = 1026;
          *(_DWORD *)&v532[30] = v447;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "@CellFlow, match, %{private}s, %{public}s, %{public}s, rat, %{public}s, needsAls, %{public}d", buf, 0x30u);
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
          size_t v7 = v374;
          char v9 = &qword_102419000;
          unsigned int v8 = &qword_102419000;
          uint64_t v16 = v63;
          if ((v458[9] & 0x80000000) != 0) {
            operator delete(*(void **)v456);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v8[116] != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022C2220);
          }
          uint64_t v370 = v16;
          sub_10010EE08(v17, __p);
          int v84 = SHIBYTE(__p[2]);
          int v85 = (void **)__p[0];
          int v86 = SHIBYTE(v455.__r_.__value_.__r.__words[2]);
          std::string::size_type v87 = v455.__r_.__value_.__r.__words[0];
          int v88 = SHIBYTE(v454.__r_.__value_.__r.__words[2]);
          std::string::size_type v89 = v454.__r_.__value_.__r.__words[0];
          sub_10010EE74(v17);
          long long v90 = &v454;
          if (v88 < 0) {
            long long v90 = (std::string *)v89;
          }
          long long v91 = &v455;
          if (v86 < 0) {
            long long v91 = (std::string *)v87;
          }
          long long v92 = __p;
          if (v84 < 0) {
            long long v92 = v85;
          }
          *(_DWORD *)v456 = 136381699;
          long long v93 = &v448;
          if (v449 < 0) {
            long long v93 = (long long *)v448;
          }
          *(void *)&v456[4] = v92;
          __int16 v457 = 2082;
          *(void *)v458 = v91;
          *(_WORD *)&v458[8] = 2082;
          *(void *)&v458[10] = v90;
          *(_WORD *)&v458[18] = 2082;
          *(void *)&v458[20] = v93;
          *(_WORD *)&v458[28] = 1026;
          *(_DWORD *)&v458[30] = v447;
          long long v94 = (char *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v449) < 0) {
            operator delete((void *)v448);
          }
          size_t v7 = v374;
          char v9 = &qword_102419000;
          unsigned int v8 = &qword_102419000;
          uint64_t v16 = v370;
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v94);
          if (v94 != buf) {
            free(v94);
          }
        }
        for (uint64_t i = 0; i != -96; i -= 24)
        {
          if ((char)v525[i + 95] < 0) {
            operator delete(*(void **)&v525[i + 72]);
          }
        }
        goto LABEL_116;
      }
      if (v8[116] != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022C2220);
      }
      long long v38 = v9[117];
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      {
        sub_10142D00C(v17);
        long long v39 = buf;
        if (v532[9] < 0) {
          long long v39 = *(unsigned char **)buf;
        }
        *(_DWORD *)v473 = 136380675;
        *(void *)&v473[4] = v39;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "CellMatch, ignoring cell, %{private}s", v473, 0xCu);
        if ((v532[9] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v8[116] != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022C2220);
        }
        sub_10142D00C(v17);
        long long v40 = v473;
        if (v473[23] < 0) {
          long long v40 = *(unsigned char **)v473;
        }
        *(_DWORD *)v488 = 136380675;
        *(void *)&v488[4] = v40;
        long long v41 = (char *)_os_log_send_and_compose_impl();
        if ((v473[23] & 0x80000000) != 0) {
          operator delete(*(void **)v473);
        }
LABEL_54:
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v41);
        if (v41 != buf) {
          free(v41);
        }
      }
    }
LABEL_116:
    v17 += 696;
  }
  while (v17 != v16);
  (*(void (**)(uint64_t *, void, void, void))(*v7 + 96))(v7, v373, HIDWORD(v373), v375);
  uint64_t v100 = v452;
  uint64_t v101 = v451;
  if (v452 == v451)
  {
    int v120 = 0;
    uint64_t v121 = v452;
  }
  else
  {
    unint64_t v102 = 0;
    memset(v473, 0, 24);
    do
    {
      if (!*(_DWORD *)(v101 + 4))
      {
        if (v102 >= *(void *)&v473[16])
        {
          unint64_t v102 = sub_1001121E8((uint64_t *)v473, v101);
        }
        else
        {
          sub_100112A30(v102, v101);
          *(_DWORD *)(v102 + 696) = *(_DWORD *)(v101 + 696);
          long long v103 = *(_OWORD *)(v101 + 716);
          *(_OWORD *)(v102 + 700) = *(_OWORD *)(v101 + 700);
          *(_OWORD *)(v102 + 716) = v103;
          long long v104 = *(_OWORD *)(v101 + 732);
          long long v105 = *(_OWORD *)(v101 + 748);
          long long v106 = *(_OWORD *)(v101 + 780);
          *(_OWORD *)(v102 + 764) = *(_OWORD *)(v101 + 764);
          *(_OWORD *)(v102 + 780) = v106;
          *(_OWORD *)(v102 + 732) = v104;
          *(_OWORD *)(v102 + 748) = v105;
          long long v107 = *(_OWORD *)(v101 + 796);
          long long v108 = *(_OWORD *)(v101 + 812);
          long long v109 = *(_OWORD *)(v101 + 828);
          *(_OWORD *)(v102 + 840) = *(_OWORD *)(v101 + 840);
          *(_OWORD *)(v102 + 812) = v108;
          *(_OWORD *)(v102 + 828) = v109;
          *(_OWORD *)(v102 + 796) = v107;
          *(unsigned char *)(v102 + 856) = *(unsigned char *)(v101 + 856);
          v102 += 864;
        }
        *(void *)&v473[8] = v102;
      }
      v101 += 864;
    }
    while (v101 != v100);
    uint64_t v110 = *(void *)v473;
    if (v102 == *(void *)v473)
    {
      uint64_t v122 = v451;
      unint64_t v123 = v452;
      if (v451 == v452)
      {
        uint64_t v132 = v451;
      }
      else
      {
        while (1)
        {
          sub_100112A30((uint64_t)buf, v122);
          int v539 = *(_DWORD *)(v122 + 696);
          long long v124 = *(_OWORD *)(v122 + 716);
          long long v540 = *(_OWORD *)(v122 + 700);
          long long v541 = v124;
          long long v125 = *(_OWORD *)(v122 + 780);
          long long v127 = *(_OWORD *)(v122 + 732);
          long long v126 = *(_OWORD *)(v122 + 748);
          long long v544 = *(_OWORD *)(v122 + 764);
          long long v545 = v125;
          long long v542 = v127;
          long long v543 = v126;
          long long v129 = *(_OWORD *)(v122 + 812);
          long long v128 = *(_OWORD *)(v122 + 828);
          long long v130 = *(_OWORD *)(v122 + 796);
          *(_OWORD *)&v548[12] = *(_OWORD *)(v122 + 840);
          long long v547 = v129;
          *(_OWORD *)v548 = v128;
          long long v546 = v130;
          int v131 = *(unsigned __int8 *)(v122 + 856);
          char v549 = *(unsigned char *)(v122 + 856);
          if (v538 < 0) {
            operator delete(v537);
          }
          if (*(void *)&v535[12])
          {
            uint64_t v536 = *(void *)&v535[12];
            operator delete(*(void **)&v535[12]);
          }
          if (v131) {
            break;
          }
          v122 += 864;
          if (v122 == v123)
          {
            uint64_t v122 = v123;
            break;
          }
        }
        uint64_t v132 = v122;
        uint64_t v122 = v452;
      }
      _ZF = v132 == v122;
    }
    else
    {
      while (1)
      {
        sub_100112A30((uint64_t)buf, v110);
        int v539 = *(_DWORD *)(v110 + 696);
        long long v111 = *(_OWORD *)(v110 + 716);
        long long v540 = *(_OWORD *)(v110 + 700);
        long long v541 = v111;
        long long v112 = *(_OWORD *)(v110 + 780);
        long long v114 = *(_OWORD *)(v110 + 732);
        long long v113 = *(_OWORD *)(v110 + 748);
        long long v544 = *(_OWORD *)(v110 + 764);
        long long v545 = v112;
        long long v542 = v114;
        long long v543 = v113;
        long long v116 = *(_OWORD *)(v110 + 812);
        long long v115 = *(_OWORD *)(v110 + 828);
        long long v117 = *(_OWORD *)(v110 + 796);
        *(_OWORD *)&v548[12] = *(_OWORD *)(v110 + 840);
        long long v547 = v116;
        *(_OWORD *)v548 = v115;
        long long v546 = v117;
        int v118 = *(unsigned __int8 *)(v110 + 856);
        char v549 = *(unsigned char *)(v110 + 856);
        if (v538 < 0) {
          operator delete(v537);
        }
        if (*(void *)&v535[12])
        {
          uint64_t v536 = *(void *)&v535[12];
          operator delete(*(void **)&v535[12]);
        }
        if (v118) {
          break;
        }
        v110 += 864;
        if (v110 == v102)
        {
          uint64_t v110 = v102;
          break;
        }
      }
      _ZF = v110 == *(void *)&v473[8];
    }
    int v120 = !_ZF;
    *(void *)int buf = v473;
    sub_10010FE18((void ***)buf);
    uint64_t v121 = v451;
    uint64_t v100 = v452;
  }
  memset(__p, 0, 24);
  sub_100112864(__p, v121, v100, 0x84BDA12F684BDA13 * ((v100 - v121) >> 5));
  unint64_t v133 = 126 - 2 * __clz(0x84BDA12F684BDA13 * (((char *)__p[1] - (char *)__p[0]) >> 5));
  if (__p[1] == __p[0]) {
    uint64_t v134 = 0;
  }
  else {
    uint64_t v134 = v133;
  }
  sub_100112D88((uint64_t)__p[0], (unint64_t)__p[1], v134, 1);
  if (v8[116] != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022C2220);
  }
  uint64_t v135 = v9[117];
  if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v136 = 0x66FD0EB66FD0EB67 * ((v372[1] - *v372) >> 3);
    *(_DWORD *)int buf = 134349824;
    *(void *)&uint8_t buf[4] = v136;
    __int16 v531 = 2050;
    *(void *)v532 = 0x84BDA12F684BDA13 * ((uint64_t)(v452 - v451) >> 5);
    *(_WORD *)&v532[8] = 2050;
    *(void *)&v532[10] = 0x84BDA12F684BDA13 * (((char *)__p[1] - (char *)__p[0]) >> 5);
    *(_WORD *)&v532[18] = 1026;
    *(_DWORD *)&v532[20] = v120;
    _os_log_impl((void *)&_mh_execute_header, v135, OS_LOG_TYPE_DEFAULT, "@CellFlow, counts, in, %{public}lu, sortIn, %{public}lu, sortOut, %{public}lu, shouldQuery, %{public}d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v8[116] != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022C2220);
    }
    uint64_t v316 = 0x66FD0EB66FD0EB67 * ((v372[1] - *v372) >> 3);
    *(_DWORD *)v473 = 134349824;
    *(void *)&v473[4] = v316;
    *(_WORD *)&v473[12] = 2050;
    *(void *)&v473[14] = 0x84BDA12F684BDA13 * ((uint64_t)(v452 - v451) >> 5);
    *(_WORD *)&v473[22] = 2050;
    *(void *)&v473[24] = 0x84BDA12F684BDA13 * (((char *)__p[1] - (char *)__p[0]) >> 5);
    *(_WORD *)&v473[32] = 1026;
    *(_DWORD *)&v473[34] = v120;
    v317 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v317);
    if (v317 != buf) {
      free(v317);
    }
  }
  int v137 = (char *)__p[0];
  for (j = (char *)__p[1]; v137 != j; unsigned int v8 = &qword_102419000)
  {
    if (v8[116] != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022C2220);
    }
    int v139 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      sub_10010EE08((uint64_t)v137, buf);
      int v140 = v532[9];
      long long v141 = *(unsigned char **)buf;
      sub_1000AB340((uint64_t)(v137 + 700));
      long long v142 = buf;
      if (v140 < 0) {
        long long v142 = v141;
      }
      if (v473[23] >= 0) {
        long long v143 = v473;
      }
      else {
        long long v143 = *(unsigned char **)v473;
      }
      *(_DWORD *)v488 = 136380931;
      *(void *)&v488[4] = v142;
      *(_WORD *)&v488[12] = 2081;
      *(void *)&v488[14] = v143;
      _os_log_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_DEBUG, "CellMatch, preferred cell matches, in ascending order, %{private}s, %{private}s", v488, 0x16u);
      if ((v473[23] & 0x80000000) != 0) {
        operator delete(*(void **)v473);
      }
      if ((v532[9] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022C2220);
      }
      sub_10010EE08((uint64_t)v137, v473);
      int v144 = v473[23];
      __int16 v145 = *(unsigned char **)v473;
      sub_1000AB340((uint64_t)(v137 + 700));
      if (v144 >= 0) {
        double v146 = v473;
      }
      else {
        double v146 = v145;
      }
      int v147 = v488;
      if (v488[23] < 0) {
        int v147 = *(unsigned char **)v488;
      }
      *(_DWORD *)v525 = 136380931;
      *(void *)&v525[4] = v146;
      *(_WORD *)&v525[12] = 2081;
      *(void *)&v525[14] = v147;
      int v148 = (char *)_os_log_send_and_compose_impl();
      if ((v488[23] & 0x80000000) != 0) {
        operator delete(*(void **)v488);
      }
      if ((v473[23] & 0x80000000) != 0) {
        operator delete(*(void **)v473);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v148);
      if (v148 != buf) {
        free(v148);
      }
    }
    v137 += 864;
  }
  *(void *)&v525[12] = 0;
  *(void *)&v525[4] = 0;
  *(_OWORD *)&v525[20] = xmmword_101D1C320;
  *(_OWORD *)&v525[36] = v376;
  *(_OWORD *)&v525[52] = v376;
  *(_OWORD *)&v525[68] = v376;
  *(_DWORD *)v525 = 0xFFFF;
  *(_DWORD *)&v525[84] = 0;
  *(void *)&v525[88] = 0xBFF0000000000000;
  long long v526 = 0uLL;
  *(void *)((char *)&v527 + 4) = 0xBFF0000000000000;
  LODWORD(v527) = 0;
  HIDWORD(v527) = 0x7FFFFFFF;
  memset(v528, 0, 25);
  uint64_t v149 = *v372;
  *(_OWORD *)v488 = *(_OWORD *)*v372;
  long long v150 = *(_OWORD *)(v149 + 16);
  long long v151 = *(_OWORD *)(v149 + 32);
  long long v152 = *(_OWORD *)(v149 + 48);
  *(_OWORD *)&v488[60] = *(_OWORD *)(v149 + 60);
  *(_OWORD *)&v488[32] = v151;
  *(_OWORD *)&v488[48] = v152;
  *(_DWORD *)&v488[80] = *(_DWORD *)(v149 + 80);
  *(void *)&v488[88] = 0;
  long long v489 = 0uLL;
  long long v153 = *(const void **)(v149 + 88);
  uint64_t v154 = *(void *)(v149 + 96);
  *(_OWORD *)&v488[16] = v150;
  sub_10010F834(&v488[88], v153, v154, (v154 - (uint64_t)v153) >> 2);
  long long v155 = *(_OWORD *)(v149 + 256);
  long long v156 = *(_OWORD *)(v149 + 272);
  long long v157 = *(_OWORD *)(v149 + 288);
  *(_OWORD *)((char *)v500 + 12) = *(_OWORD *)(v149 + 300);
  long long v490 = *(_OWORD *)(v149 + 112);
  long long v158 = *(_OWORD *)(v149 + 128);
  long long v159 = *(_OWORD *)(v149 + 144);
  long long v160 = *(_OWORD *)(v149 + 176);
  long long v492 = *(_OWORD *)(v149 + 160);
  long long v493 = v160;
  v491[0] = v158;
  v491[1] = v159;
  long long v161 = *(_OWORD *)(v149 + 192);
  long long v162 = *(_OWORD *)(v149 + 208);
  long long v163 = *(_OWORD *)(v149 + 240);
  long long v496 = *(_OWORD *)(v149 + 224);
  long long v497 = v163;
  long long v494 = v161;
  long long v495 = v162;
  long long v499 = v156;
  v500[0] = v157;
  long long v498 = v155;
  uint64_t v164 = v374;
  if (*(char *)(v149 + 343) < 0)
  {
    sub_1000DC48C(&__src, *(void **)(v149 + 320), *(void *)(v149 + 328));
  }
  else
  {
    long long v165 = *(_OWORD *)(v149 + 320);
    __src.__r_.__value_.__r.__words[2] = *(void *)(v149 + 336);
    *(_OWORD *)&__src.__r_.__value_.__l.__data_ = v165;
  }
  long long v166 = *(_OWORD *)(v149 + 344);
  long long v167 = *(_OWORD *)(v149 + 376);
  long long v503 = *(_OWORD *)(v149 + 360);
  long long v504 = v167;
  long long v502 = v166;
  long long v168 = *(_OWORD *)(v149 + 392);
  long long v169 = *(_OWORD *)(v149 + 408);
  long long v170 = *(_OWORD *)(v149 + 440);
  long long v507 = *(_OWORD *)(v149 + 424);
  long long v508 = v170;
  long long v505 = v168;
  long long v506 = v169;
  int v171 = *(_DWORD *)(v149 + 504);
  long long v172 = *(_OWORD *)(v149 + 456);
  long long v173 = *(_OWORD *)(v149 + 488);
  long long v510 = *(_OWORD *)(v149 + 472);
  long long v511 = v173;
  long long v509 = v172;
  int v512 = v171;
  long long v174 = *(_OWORD *)(v149 + 512);
  long long v175 = *(_OWORD *)(v149 + 528);
  long long v176 = *(_OWORD *)(v149 + 560);
  long long v515 = *(_OWORD *)(v149 + 544);
  long long v516 = v176;
  long long v513 = v174;
  long long v514 = v175;
  long long v177 = *(_OWORD *)(v149 + 576);
  long long v178 = *(_OWORD *)(v149 + 592);
  long long v179 = *(_OWORD *)(v149 + 624);
  long long v519 = *(_OWORD *)(v149 + 608);
  long long v520 = v179;
  long long v517 = v177;
  long long v518 = v178;
  long long v180 = *(_OWORD *)(v149 + 640);
  long long v181 = *(_OWORD *)(v149 + 656);
  long long v182 = *(_OWORD *)(v149 + 672);
  int v524 = *(_DWORD *)(v149 + 688);
  long long v522 = v181;
  long long v523 = v182;
  long long v521 = v180;
  if (__p[1] != __p[0])
  {
    long long v183 = (char *)__p[1] - 864;
    *(_OWORD *)v488 = *((_OWORD *)__p[1] - 54);
    long long v184 = *((_OWORD *)__p[1] - 53);
    long long v185 = *((_OWORD *)__p[1] - 52);
    long long v186 = *((_OWORD *)__p[1] - 51);
    *(_OWORD *)&v488[60] = *(_OWORD *)((char *)__p[1] - 804);
    *(_OWORD *)&v488[32] = v185;
    *(_OWORD *)&v488[48] = v186;
    *(_OWORD *)&v488[16] = v184;
    *(_DWORD *)&v488[80] = *((_DWORD *)__p[1] - 196);
    if (v488 != (char *)__p[1] - 864) {
      sub_1000FB43C(&v488[88], *((char **)__p[1] - 97), *((void *)__p[1] - 96), (uint64_t)(*((void *)__p[1] - 96) - *((void *)__p[1] - 97)) >> 2);
    }
    long long v490 = *((_OWORD *)v183 + 7);
    long long v187 = *((_OWORD *)v183 + 8);
    long long v188 = *((_OWORD *)v183 + 9);
    long long v189 = *((_OWORD *)v183 + 11);
    long long v492 = *((_OWORD *)v183 + 10);
    long long v493 = v189;
    v491[0] = v187;
    v491[1] = v188;
    long long v190 = *((_OWORD *)v183 + 12);
    long long v191 = *((_OWORD *)v183 + 13);
    long long v192 = *((_OWORD *)v183 + 15);
    long long v496 = *((_OWORD *)v183 + 14);
    long long v497 = v192;
    long long v494 = v190;
    long long v495 = v191;
    long long v193 = *((_OWORD *)v183 + 16);
    long long v194 = *((_OWORD *)v183 + 17);
    long long v195 = *((_OWORD *)v183 + 18);
    *(_OWORD *)((char *)v500 + 12) = *(_OWORD *)(v183 + 300);
    long long v499 = v194;
    v500[0] = v195;
    long long v498 = v193;
    std::string::operator=(&__src, (const std::string *)(v183 + 320));
    long long v196 = *(_OWORD *)(v183 + 344);
    long long v197 = *(_OWORD *)(v183 + 376);
    long long v503 = *(_OWORD *)(v183 + 360);
    long long v504 = v197;
    long long v502 = v196;
    long long v198 = *(_OWORD *)(v183 + 392);
    long long v199 = *(_OWORD *)(v183 + 408);
    long long v200 = *(_OWORD *)(v183 + 440);
    long long v507 = *(_OWORD *)(v183 + 424);
    long long v508 = v200;
    long long v505 = v198;
    long long v506 = v199;
    long long v201 = *(_OWORD *)(v183 + 456);
    long long v202 = *(_OWORD *)(v183 + 472);
    long long v203 = *(_OWORD *)(v183 + 488);
    int v512 = *((_DWORD *)v183 + 126);
    long long v510 = v202;
    long long v511 = v203;
    long long v509 = v201;
    long long v204 = *((_OWORD *)v183 + 32);
    long long v205 = *((_OWORD *)v183 + 33);
    long long v206 = *((_OWORD *)v183 + 35);
    long long v515 = *((_OWORD *)v183 + 34);
    long long v516 = v206;
    long long v513 = v204;
    long long v514 = v205;
    long long v207 = *((_OWORD *)v183 + 36);
    long long v208 = *((_OWORD *)v183 + 37);
    long long v209 = *((_OWORD *)v183 + 39);
    long long v519 = *((_OWORD *)v183 + 38);
    long long v520 = v209;
    long long v517 = v207;
    long long v518 = v208;
    long long v210 = *((_OWORD *)v183 + 40);
    long long v211 = *((_OWORD *)v183 + 41);
    long long v212 = *((_OWORD *)v183 + 42);
    int v524 = *((_DWORD *)v183 + 172);
    long long v522 = v211;
    long long v523 = v212;
    long long v521 = v210;
    long long v213 = *(_OWORD *)(v183 + 716);
    *(_OWORD *)v525 = *(_OWORD *)(v183 + 700);
    *(_OWORD *)&v525[16] = v213;
    long long v214 = *(_OWORD *)(v183 + 732);
    long long v215 = *(_OWORD *)(v183 + 748);
    long long v216 = *(_OWORD *)(v183 + 780);
    *(_OWORD *)&v525[64] = *(_OWORD *)(v183 + 764);
    *(_OWORD *)&v525[80] = v216;
    *(_OWORD *)&v525[32] = v214;
    *(_OWORD *)&v525[48] = v215;
    long long v217 = *(_OWORD *)(v183 + 796);
    long long v218 = *(_OWORD *)(v183 + 812);
    long long v219 = *(_OWORD *)(v183 + 828);
    *(_OWORD *)&v528[12] = *(_OWORD *)(v183 + 840);
    long long v527 = v218;
    *(_OWORD *)v528 = v219;
    long long v526 = v217;
  }
  unsigned __int8 v447 = 0;
  if (v120 && (*(unsigned int (**)(uint64_t *))(*v374 + 40))(v374)) {
    unsigned __int8 v447 = (*(uint64_t (**)(uint64_t *))(*v374 + 72))(v374);
  }
  int Current = (int)CFAbsoluteTimeGetCurrent();
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022C2220);
  }
  int v221 = Current % 10;
  long long v222 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    sub_10010EE74((uint64_t)v488);
    int v223 = v473[23];
    long long v224 = *(unsigned char **)v473;
    sub_100114068((uint64_t)v488);
    long long v225 = v473;
    if (v223 < 0) {
      long long v225 = v224;
    }
    if (v458[9] >= 0) {
      long long v226 = v456;
    }
    else {
      long long v226 = *(unsigned char **)v456;
    }
    long long v227 = &v454;
    if ((v454.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v227 = (std::string *)v454.__r_.__value_.__r.__words[0];
    }
    long long v228 = &v455;
    if ((v455.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v228 = (std::string *)v455.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int buf = 136447747;
    *(void *)&uint8_t buf[4] = v371;
    __int16 v531 = 2082;
    *(void *)v532 = v225;
    *(_WORD *)&v532[8] = 2082;
    *(void *)&v532[10] = v226;
    *(_WORD *)&v532[18] = 2049;
    *(void *)&v532[20] = *(void *)&v525[20];
    *(_WORD *)&v532[28] = 2082;
    *(void *)&v532[30] = v227;
    *(_WORD *)&v532[38] = 2082;
    *(void *)&v532[40] = v228;
    *(_WORD *)&v532[48] = 1026;
    *(_DWORD *)v533 = v221;
    _os_log_impl((void *)&_mh_execute_header, v222, OS_LOG_TYPE_DEBUG, "UclpMetric, fixattempt, %{public}s, %{public}s, %{public}s, acc, %{private}.0f, %{public}s, %{public}s, submit10, %{public}d", buf, 0x44u);
    if ((v458[9] & 0x80000000) != 0) {
      operator delete(*(void **)v456);
    }
    uint64_t v164 = v374;
    if ((v473[23] & 0x80000000) != 0) {
      operator delete(*(void **)v473);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022C2220);
    }
    sub_10010EE74((uint64_t)v488);
    int v318 = v458[9];
    v319 = *(unsigned char **)v456;
    sub_100114068((uint64_t)v488);
    v320 = v456;
    if (v318 < 0) {
      v320 = v319;
    }
    if (v449 >= 0) {
      v321 = &v448;
    }
    else {
      v321 = (long long *)v448;
    }
    v322 = &v454;
    if ((v454.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v322 = (std::string *)v454.__r_.__value_.__r.__words[0];
    }
    v323 = &v455;
    if ((v455.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v323 = (std::string *)v455.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)v473 = 136447747;
    *(void *)&v473[4] = v371;
    *(_WORD *)&v473[12] = 2082;
    *(void *)&v473[14] = v320;
    *(_WORD *)&v473[22] = 2082;
    *(void *)&v473[24] = v321;
    *(_WORD *)&v473[32] = 2049;
    *(void *)&v473[34] = *(void *)&v525[20];
    *(_WORD *)&v473[42] = 2082;
    *(void *)&v473[44] = v322;
    *(_WORD *)&v473[52] = 2082;
    *(void *)&v473[54] = v323;
    *(_WORD *)&v473[62] = 1026;
    *(_DWORD *)&v473[64] = v221;
    v324 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v449) < 0) {
      operator delete((void *)v448);
    }
    uint64_t v164 = v374;
    if ((v458[9] & 0x80000000) != 0) {
      operator delete(*(void **)v456);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v324);
    if (v324 != buf) {
      free(v324);
    }
  }
  if (!v221)
  {
    v387 = _NSConcreteStackBlock;
    uint64_t v388 = 3321888768;
    long long v393 = *(_OWORD *)&v488[16];
    long long v394 = *(_OWORD *)&v488[32];
    v395[0] = *(_OWORD *)&v488[48];
    *(_OWORD *)((char *)v395 + 12) = *(_OWORD *)&v488[60];
    v389 = sub_10068EDBC;
    v390 = &unk_1022C21C0;
    uint64_t v391 = v371;
    long long v392 = *(_OWORD *)v488;
    int v396 = *(_DWORD *)&v488[80];
    uint64_t v399 = 0;
    v397 = 0;
    v398 = 0;
    sub_10010F834(&v397, *(const void **)&v488[88], v489, (uint64_t)(v489 - *(void *)&v488[88]) >> 2);
    long long v409 = v498;
    long long v410 = v499;
    v411[0] = v500[0];
    *(_OWORD *)((char *)v411 + 12) = *(_OWORD *)((char *)v500 + 12);
    long long v407 = v496;
    long long v408 = v497;
    long long v405 = v494;
    long long v406 = v495;
    long long v401 = v491[0];
    long long v402 = v491[1];
    long long v403 = v492;
    long long v404 = v493;
    long long v400 = v490;
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000DC48C(&v412, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
    }
    else {
      std::string v412 = __src;
    }
    long long v421 = v510;
    long long v422 = v511;
    int v423 = v512;
    long long v417 = v506;
    long long v418 = v507;
    long long v419 = v508;
    long long v420 = v509;
    long long v413 = v502;
    long long v414 = v503;
    long long v415 = v504;
    long long v416 = v505;
    long long v432 = v521;
    long long v433 = v522;
    long long v434 = v523;
    long long v428 = v517;
    long long v429 = v518;
    long long v430 = v519;
    long long v431 = v520;
    long long v424 = v513;
    long long v425 = v514;
    long long v426 = v515;
    long long v427 = v516;
    int v435 = v524;
    *(_OWORD *)&v446[12] = *(_OWORD *)&v528[12];
    long long v444 = v526;
    long long v445 = v527;
    *(_OWORD *)v446 = *(_OWORD *)v528;
    long long v440 = *(_OWORD *)&v525[32];
    long long v441 = *(_OWORD *)&v525[48];
    long long v442 = *(_OWORD *)&v525[64];
    long long v443 = *(_OWORD *)&v525[80];
    long long v438 = *(_OWORD *)v525;
    long long v439 = *(_OWORD *)&v525[16];
    if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000DC48C(&v436, v454.__r_.__value_.__l.__data_, v454.__r_.__value_.__l.__size_);
    }
    else {
      std::string v436 = v454;
    }
    if (SHIBYTE(v455.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000DC48C(&v437, v455.__r_.__value_.__l.__data_, v455.__r_.__value_.__l.__size_);
    }
    else {
      std::string v437 = v455;
    }
    AnalyticsSendEventLazy();
    if (SHIBYTE(v437.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v437.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v436.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v436.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v412.__r_.__value_.__l.__data_);
    }
    if (v397)
    {
      v398 = v397;
      operator delete(v397);
    }
  }
  if (*(double *)&v525[20] < 0.0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022C2220);
    }
    int v229 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10010EE08((uint64_t)v488, buf);
      v230 = v532[9] >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)v473 = 136380931;
      *(void *)&v473[4] = v230;
      *(_WORD *)&v473[12] = 1026;
      *(_DWORD *)&v473[14] = v447;
      _os_log_impl((void *)&_mh_execute_header, v229, OS_LOG_TYPE_DEFAULT, "@ClxCell, Fix, 0, ll, N/A, Unknown, %{private}s, querying, %{public}d", v473, 0x12u);
      if ((v532[9] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022C2220);
      }
      sub_10010EE08((uint64_t)v488, v473);
      if (v473[23] >= 0) {
        v325 = v473;
      }
      else {
        v325 = *(unsigned char **)v473;
      }
      *(_DWORD *)v456 = 136380931;
      *(void *)&v456[4] = v325;
      __int16 v457 = 1026;
      *(_DWORD *)v458 = v447;
      v326 = (char *)_os_log_send_and_compose_impl();
      if ((v473[23] & 0x80000000) != 0) {
        operator delete(*(void **)v473);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v326);
      if (v326 != buf) {
        free(v326);
      }
    }
    uint64_t v231 = *v164;
    if (v447)
    {
      v232 = (void (**)(uint64_t *, const char *))(v231 + 104);
      v233 = "alsquery";
    }
    else
    {
      v232 = (void (**)(uint64_t *, const char *))(v231 + 56);
      v233 = "nofix";
    }
    (*v232)(v164, v233);
    if (*(_DWORD *)&v488[8] == 10)
    {
      if ((*(unsigned int (**)(uint64_t *))(*v164 + 48))(v164))
      {
        (*(void (**)(uint64_t *, const char *))(*v164 + 80))(v164, "nr cell nofix");
      }
      else
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022C2220);
        }
        v257 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          int v258 = (*(uint64_t (**)(uint64_t *))(*v164 + 48))(v164);
          *(_DWORD *)int buf = 67240192;
          *(_DWORD *)&uint8_t buf[4] = v258;
          _os_log_impl((void *)&_mh_execute_header, v257, OS_LOG_TYPE_DEFAULT, "CellFlow, skipreqwifi, locationclients, %{public}d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022C2220);
          }
          int v259 = (*(uint64_t (**)(uint64_t *))(*v374 + 48))(v374);
          *(_DWORD *)v473 = 67240192;
          *(_DWORD *)&v473[4] = v259;
          v260 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v260);
          if (v260 != buf) {
            free(v260);
          }
          uint64_t v164 = v374;
        }
      }
    }
    goto LABEL_480;
  }
  v234 = &qword_102419000;
  if (*(_DWORD *)&v488[8] == 6) {
    int v235 = *(_DWORD *)(sub_100117098((uint64_t)v488) + 56);
  }
  else {
    int v235 = -1;
  }
  int v236 = (*(uint64_t (**)(uint64_t *, unsigned char *, unsigned char *))(*v164 + 112))(v164, v488, v525);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022C2220);
  }
  v237 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10010EE08((uint64_t)v488, v473);
    if (v473[23] >= 0) {
      v238 = v473;
    }
    else {
      v238 = *(unsigned char **)v473;
    }
    uint64_t v239 = *(void *)&v525[20];
    if ((v454.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v240 = &v454;
    }
    else {
      v240 = (std::string *)v454.__r_.__value_.__r.__words[0];
    }
    if ((v455.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v241 = &v455;
    }
    else {
      v241 = (std::string *)v455.__r_.__value_.__r.__words[0];
    }
    sub_10010EE74((uint64_t)v488);
    int v242 = v458[9];
    v243 = *(unsigned char **)v456;
    sub_100114068((uint64_t)v488);
    v244 = v456;
    if (v242 < 0) {
      v244 = v243;
    }
    if (v449 >= 0) {
      v245 = &v448;
    }
    else {
      v245 = (long long *)v448;
    }
    *(_DWORD *)int buf = 136382723;
    *(void *)&uint8_t buf[4] = v238;
    __int16 v531 = 2049;
    *(void *)v532 = v239;
    *(_WORD *)&v532[8] = 2082;
    *(void *)&v532[10] = v240;
    *(_WORD *)&v532[18] = 2082;
    *(void *)&v532[20] = v241;
    *(_WORD *)&v532[28] = 2082;
    *(void *)&v532[30] = v244;
    *(_WORD *)&v532[38] = 2082;
    *(void *)&v532[40] = v245;
    *(_WORD *)&v532[48] = 1026;
    *(_DWORD *)v533 = v236;
    *(_WORD *)&v533[4] = 1026;
    *(_DWORD *)&v533[6] = v235;
    __int16 v534 = 2082;
    *(void *)v535 = v371;
    _os_log_impl((void *)&_mh_execute_header, v237, OS_LOG_TYPE_DEFAULT, "CellFlow, fix, %{private}s, acc, %{private}.0f, %{public}s, %{public}s, %{public}s, %{public}s, notify, %{public}d, deploymentType, %{public}d, %{public}s", buf, 0x54u);
    if (SHIBYTE(v449) < 0) {
      operator delete((void *)v448);
    }
    uint64_t v164 = v374;
    v234 = &qword_102419000;
    if ((v458[9] & 0x80000000) != 0) {
      operator delete(*(void **)v456);
    }
    if ((v473[23] & 0x80000000) != 0) {
      operator delete(*(void **)v473);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022C2220);
    }
    sub_10010EE08((uint64_t)v488, v456);
    if (v458[9] >= 0) {
      v327 = v456;
    }
    else {
      v327 = *(unsigned char **)v456;
    }
    uint64_t v328 = *(void *)&v525[20];
    if ((v454.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v329 = &v454;
    }
    else {
      v329 = (std::string *)v454.__r_.__value_.__r.__words[0];
    }
    if ((v455.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v330 = &v455;
    }
    else {
      v330 = (std::string *)v455.__r_.__value_.__r.__words[0];
    }
    sub_10010EE74((uint64_t)v488);
    int v331 = SHIBYTE(v449);
    v332 = (long long *)v448;
    sub_100114068((uint64_t)v488);
    v333 = &v448;
    if (v331 < 0) {
      v333 = v332;
    }
    if (v386 >= 0) {
      v334 = v385;
    }
    else {
      v334 = (void **)v385[0];
    }
    *(_DWORD *)v473 = 136382723;
    *(void *)&v473[4] = v327;
    *(_WORD *)&v473[12] = 2049;
    *(void *)&v473[14] = v328;
    *(_WORD *)&v473[22] = 2082;
    *(void *)&v473[24] = v329;
    *(_WORD *)&v473[32] = 2082;
    *(void *)&v473[34] = v330;
    *(_WORD *)&v473[42] = 2082;
    *(void *)&v473[44] = v333;
    *(_WORD *)&v473[52] = 2082;
    *(void *)&v473[54] = v334;
    *(_WORD *)&v473[62] = 1026;
    *(_DWORD *)&v473[64] = v236;
    *(_WORD *)&v473[68] = 1026;
    *(_DWORD *)&v473[70] = v235;
    *(_WORD *)&v473[74] = 2082;
    *(void *)&v473[76] = v371;
    v335 = (char *)_os_log_send_and_compose_impl();
    if (v386 < 0) {
      operator delete(v385[0]);
    }
    uint64_t v164 = v374;
    v234 = &qword_102419000;
    if (SHIBYTE(v449) < 0) {
      operator delete((void *)v448);
    }
    if ((v458[9] & 0x80000000) != 0) {
      operator delete(*(void **)v456);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v335);
    if (v335 != buf) {
      free(v335);
    }
  }
  if ((v454.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v454.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v454.__r_.__value_.__l.__size_;
  }
  sub_1001110E4((uint64_t)buf, size + 1);
  if (v532[9] >= 0) {
    v247 = buf;
  }
  else {
    v247 = *(unsigned char **)buf;
  }
  if (size)
  {
    if ((v454.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v248 = &v454;
    }
    else {
      v248 = (std::string *)v454.__r_.__value_.__r.__words[0];
    }
    memmove(v247, v248, size);
  }
  *(_WORD *)&v247[size] = 58;
  if ((v455.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v249 = &v455;
  }
  else {
    v249 = (std::string *)v455.__r_.__value_.__r.__words[0];
  }
  if ((v455.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v250 = HIBYTE(v455.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v250 = v455.__r_.__value_.__l.__size_;
  }
  v251 = std::string::append((std::string *)buf, (const std::string::value_type *)v249, v250);
  long long v252 = *(_OWORD *)&v251->__r_.__value_.__l.__data_;
  int64_t v449 = v251->__r_.__value_.__r.__words[2];
  long long v448 = v252;
  v251->__r_.__value_.__l.__size_ = 0;
  v251->__r_.__value_.__r.__words[2] = 0;
  v251->__r_.__value_.__r.__words[0] = 0;
  if ((v532[9] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (sub_1000EF668(*(double *)&v525[4], *(double *)&v525[12]))
  {
    if (v234[116] != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022C2220);
    }
    v255 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      v256 = &v448;
      if (v449 < 0) {
        v256 = (long long *)v448;
      }
      *(_DWORD *)int buf = 136380931;
      *(void *)&uint8_t buf[4] = "cell, null";
      __int16 v531 = 2081;
      *(void *)v532 = v256;
      _os_log_impl((void *)&_mh_execute_header, v255, OS_LOG_TYPE_DEBUG, "ClxMetric, islands, %{private}s, %{private}s", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v234[116] != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022C2220);
      }
      v336 = &v448;
      if (v449 < 0) {
        v336 = (long long *)v448;
      }
      *(_DWORD *)v473 = 136380931;
      *(void *)&v473[4] = "cell, null";
      *(_WORD *)&v473[12] = 2081;
      *(void *)&v473[14] = v336;
      v337 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v337);
      if (v337 != buf) {
        free(v337);
      }
      uint64_t v164 = v374;
    }
    v379 = _NSConcreteStackBlock;
    uint64_t v380 = 3321888768;
    v381 = sub_10068F264;
    v382 = &unk_1022C21F0;
    if (SHIBYTE(v449) < 0)
    {
      sub_1000DC48C(&v383, (void *)v448, *((unint64_t *)&v448 + 1));
    }
    else
    {
      long long v383 = v448;
      uint64_t v384 = v449;
    }
    AnalyticsSendEventLazy();
    if (SHIBYTE(v384) < 0) {
      operator delete((void *)v383);
    }
  }
  v254.n128_u64[0] = *(void *)&v525[4];
  v253.n128_u64[0] = -1.0;
  if (*(double *)&v525[4] != -1.0) {
    goto LABEL_386;
  }
  v254.n128_u64[0] = *(void *)&v525[12];
  if (*(double *)&v525[12] != -1.0) {
    goto LABEL_386;
  }
  if (v234[116] != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022C2220);
  }
  v261 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    v262 = &v448;
    if (v449 < 0) {
      v262 = (long long *)v448;
    }
    *(_DWORD *)int buf = 136380931;
    *(void *)&uint8_t buf[4] = "cell, sentinel";
    __int16 v531 = 2081;
    *(void *)v532 = v262;
    _os_log_impl((void *)&_mh_execute_header, v261, OS_LOG_TYPE_DEBUG, "ClxMetric, islands, %{private}s, %{private}s", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v234[116] != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022C2220);
    }
    v338 = &v448;
    if (v449 < 0) {
      v338 = (long long *)v448;
    }
    *(_DWORD *)v473 = 136380931;
    *(void *)&v473[4] = "cell, sentinel";
    *(_WORD *)&v473[12] = 2081;
    *(void *)&v473[14] = v338;
    v339 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v339);
    if (v339 != buf) {
      free(v339);
    }
    uint64_t v164 = v374;
  }
  if (SHIBYTE(v449) < 0)
  {
    sub_1000DC48C(&v377, (void *)v448, *((unint64_t *)&v448 + 1));
  }
  else
  {
    long long v377 = v448;
    uint64_t v378 = v449;
  }
  AnalyticsSendEventLazy();
  if (SHIBYTE(v378) < 0)
  {
    operator delete((void *)v377);
    if (v236)
    {
LABEL_387:
      if (*(_DWORD *)&v528[4] != 1)
      {
        if (v234[116] != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022C2220);
        }
        v263 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v263, OS_LOG_TYPE_FAULT, "reference frame is not properly set", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (v234[116] != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022C2220);
          }
          *(_WORD *)v473 = 0;
          v368 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v368);
          if (v368 != buf) {
            free(v368);
          }
          uint64_t v164 = v374;
        }
        *(_DWORD *)&v528[4] = 1;
      }
      if (!*(_DWORD *)&v525[84])
      {
        if (v234[116] != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022C2220);
        }
        v264 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v264, OS_LOG_TYPE_ERROR, "confidence is not properly set", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (v234[116] != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022C2220);
          }
          *(_WORD *)v473 = 0;
          v369 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v369);
          if (v369 != buf) {
            free(v369);
          }
          uint64_t v164 = v374;
        }
        *(_DWORD *)&v525[84] = 70;
      }
      if (v234[116] != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022C2220);
      }
      v265 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v266 = *(void *)&v525[4];
        uint64_t v267 = *(void *)&v525[12];
        uint64_t v268 = *(void *)&v525[20];
        sub_10010EE08((uint64_t)v488, v473);
        if (v473[23] >= 0) {
          v269 = v473;
        }
        else {
          v269 = *(unsigned char **)v473;
        }
        *(_DWORD *)int buf = 134284803;
        *(void *)&uint8_t buf[4] = v266;
        __int16 v531 = 2049;
        *(void *)v532 = v267;
        *(_WORD *)&v532[8] = 2050;
        *(void *)&v532[10] = v268;
        *(_WORD *)&v532[18] = 2081;
        *(void *)&v532[20] = v269;
        *(_WORD *)&v532[28] = 1026;
        *(_DWORD *)&v532[30] = v526;
        *(_WORD *)&v532[34] = 2050;
        *(void *)&v532[36] = *(void *)&v525[76];
        _os_log_impl((void *)&_mh_execute_header, v265, OS_LOG_TYPE_DEFAULT, "@ClxCell, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, course, -1.0, key, %{private}s, type, %{public}d, timestamp, %{public}.3f", buf, 0x3Au);
        if ((v473[23] & 0x80000000) != 0) {
          operator delete(*(void **)v473);
        }
        v234 = &qword_102419000;
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v234[116] != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022C2220);
        }
        uint64_t v340 = *(void *)&v525[4];
        uint64_t v341 = *(void *)&v525[12];
        uint64_t v342 = *(void *)&v525[20];
        sub_10010EE08((uint64_t)v488, v456);
        if (v458[9] >= 0) {
          v343 = v456;
        }
        else {
          v343 = *(unsigned char **)v456;
        }
        *(_DWORD *)v473 = 134284803;
        *(void *)&v473[4] = v340;
        *(_WORD *)&v473[12] = 2049;
        *(void *)&v473[14] = v341;
        *(_WORD *)&v473[22] = 2050;
        *(void *)&v473[24] = v342;
        *(_WORD *)&v473[32] = 2081;
        *(void *)&v473[34] = v343;
        *(_WORD *)&v473[42] = 1026;
        *(_DWORD *)&v473[44] = v526;
        *(_WORD *)&v473[48] = 2050;
        *(void *)&v473[50] = *(void *)&v525[76];
        v344 = (char *)_os_log_send_and_compose_impl();
        if ((v458[9] & 0x80000000) != 0) {
          operator delete(*(void **)v456);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v344);
        if (v344 != buf) {
          free(v344);
        }
        uint64_t v164 = v374;
        v234 = &qword_102419000;
      }
      *(double *)&v525[76] = v1;
      sub_1000DB3D4((uint64_t)v473);
      long long v474 = v526;
      long long v475 = v527;
      v476[0] = *(_OWORD *)v528;
      *(_OWORD *)((char *)v476 + 12) = *(_OWORD *)&v528[12];
      *(_OWORD *)&v473[32] = *(_OWORD *)&v525[32];
      *(_OWORD *)&v473[48] = *(_OWORD *)&v525[48];
      *(_OWORD *)&v473[64] = *(_OWORD *)&v525[64];
      *(_DWORD *)&v473[84] = *(_DWORD *)&v525[84];
      *(_OWORD *)v473 = *(_OWORD *)v525;
      *(_OWORD *)&v473[16] = *(_OWORD *)&v525[16];
      *(double *)&v473[76] = v1;
      *(void *)&v473[88] = 0xBFF0000000000000;
      uint64_t v477 = 0;
      double v478 = sub_1000D3E50();
      double v481 = sub_10016C458();
      int v450 = 0;
      if (sub_10014933C((float *)&v450, *(double *)&v525[4], *(double *)&v525[12]))
      {
        int v480 = v450;
        int v479 = 1;
      }
      if (qword_102419650 != -1) {
        dispatch_once(&qword_102419650, &stru_1022C2260);
      }
      v270 = qword_102419658;
      if (os_log_type_enabled((os_log_t)qword_102419658, OS_LOG_TYPE_DEBUG))
      {
        long long v271 = *(_OWORD *)&v473[4];
        uint64_t v272 = *(void *)&v473[20];
        int v273 = *(_DWORD *)&v473[84];
        uint64_t v274 = *(void *)&v473[88];
        v275 = sub_10003E9A4(v474);
        int v276 = v474;
        sub_10142D00C((uint64_t)v488);
        if (v458[9] >= 0) {
          v277 = v456;
        }
        else {
          v277 = *(unsigned char **)v456;
        }
        *(_DWORD *)int buf = 136317954;
        *(void *)&uint8_t buf[4] = "Cell";
        __int16 v531 = 1024;
        *(_DWORD *)v532 = 1;
        *(_WORD *)&v532[4] = 2048;
        *(void *)&v532[6] = v271;
        *(_WORD *)&v532[14] = 2048;
        *(void *)&v532[16] = *((void *)&v271 + 1);
        *(_WORD *)&v532[24] = 2048;
        *(void *)&v532[26] = v272;
        *(_WORD *)&v532[34] = 1024;
        *(_DWORD *)&v532[36] = v273;
        *(_WORD *)&v532[40] = 2048;
        *(void *)&v532[42] = v274;
        *(_WORD *)v533 = 2080;
        *(void *)&v533[2] = v275;
        __int16 v534 = 1024;
        *(_DWORD *)v535 = v276;
        *(_WORD *)&v535[4] = 2080;
        *(void *)&v535[6] = v277;
        *(_WORD *)&v535[14] = 1024;
        *(_DWORD *)&v535[16] = -1;
        LOWORD(v536) = 1024;
        *(_DWORD *)((char *)&v536 + 2) = v476[0];
        _os_log_impl((void *)&_mh_execute_header, v270, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Confidence,%d,Lifespan,%.3f,SubType,%s,MatchLevel,%d,cell,%s,Transmit,%d,integrity,%d", buf, 0x66u);
        if ((v458[9] & 0x80000000) != 0) {
          operator delete(*(void **)v456);
        }
        uint64_t v164 = v374;
        v234 = &qword_102419000;
      }
      if (sub_10013D1A0(117, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419650 != -1) {
          dispatch_once(&qword_102419650, &stru_1022C2260);
        }
        uint64_t v345 = *(void *)&v473[4];
        uint64_t v346 = *(void *)&v473[12];
        uint64_t v347 = *(void *)&v473[20];
        int v348 = *(_DWORD *)&v473[84];
        uint64_t v349 = *(void *)&v473[88];
        v350 = sub_10003E9A4(v474);
        int v351 = v474;
        sub_10142D00C((uint64_t)v488);
        if (v386 >= 0) {
          v352 = v385;
        }
        else {
          v352 = (void **)v385[0];
        }
        *(_DWORD *)v456 = 136317954;
        *(void *)&v456[4] = "Cell";
        __int16 v457 = 1024;
        *(_DWORD *)v458 = 1;
        *(_WORD *)&v458[4] = 2048;
        *(void *)&v458[6] = v345;
        *(_WORD *)&v458[14] = 2048;
        *(void *)&v458[16] = v346;
        *(_WORD *)&v458[24] = 2048;
        *(void *)&v458[26] = v347;
        __int16 v459 = 1024;
        int v460 = v348;
        __int16 v461 = 2048;
        uint64_t v462 = v349;
        __int16 v463 = 2080;
        v464 = v350;
        __int16 v465 = 1024;
        int v466 = v351;
        __int16 v467 = 2080;
        v468 = v352;
        __int16 v469 = 1024;
        int v470 = -1;
        __int16 v471 = 1024;
        int v472 = v476[0];
        v353 = (char *)_os_log_send_and_compose_impl();
        if (v386 < 0) {
          operator delete(v385[0]);
        }
        sub_1004BA5E4("LOCATION", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v353);
        if (v353 != buf) {
          free(v353);
        }
        uint64_t v164 = v374;
        v234 = &qword_102419000;
      }
      if (sub_1000FC450())
      {
        sub_1000E9354(buf);
        *(_DWORD *)v456 = v474;
        sub_1000EA838((uint64_t)buf, "cellMatch", v456);
        sub_1000EA238((uint64_t)buf, "query", &v447);
        sub_10016332C((uint64_t)buf, "hAcc", &v525[20]);
        sub_1000FC45C((uint64_t)buf, (uint64_t)"locationd");
        sub_10013F3C4(buf);
      }
      (*(void (**)(uint64_t *, unsigned char *))(*v164 + 64))(v164, v473);

      if (v486) {
        sub_1000DB0A0(v486);
      }
      if (v485 < 0) {
        operator delete(v484);
      }
      if (v483) {
        sub_1000DB0A0(v483);
      }
      if (v482) {
        sub_1000DB0A0(v482);
      }
    }
  }
  else
  {
LABEL_386:
    if (v236) {
      goto LABEL_387;
    }
  }
  (*(void (**)(uint64_t *, const char *, __n128, __n128))(*v164 + 104))(v164, "fix", v253, v254);
  if ((v526 & 0xFFFFFFFE) == 6)
  {
    v279 = (_OWORD *)*v372;
    v278 = (_OWORD *)v372[1];
    if ((_OWORD *)*v372 == v278)
    {
      v285 = (_OWORD *)*v372;
      v280 = (_OWORD *)*v372;
    }
    else
    {
      v280 = (_OWORD *)*v372;
      while (1)
      {
        unsigned int v281 = *((_DWORD *)v280 + 2);
        BOOL v282 = v281 > 7;
        int v283 = (1 << v281) & 0x87;
        if (!v282 && v283 != 0) {
          break;
        }
        v280 = (_OWORD *)((char *)v280 + 696);
        if (v280 == v278)
        {
          v280 = (_OWORD *)v372[1];
          break;
        }
      }
      v285 = (_OWORD *)*v372;
      do
      {
        if (*((_DWORD *)v285 + 2) == 3) {
          goto LABEL_448;
        }
        v285 = (_OWORD *)((char *)v285 + 696);
      }
      while (v285 != v278);
      v285 = (_OWORD *)v372[1];
LABEL_448:
      while (*((_DWORD *)v279 + 2) != 6)
      {
        v279 = (_OWORD *)((char *)v279 + 696);
        if (v279 == v278)
        {
          v279 = (_OWORD *)v372[1];
          break;
        }
      }
    }
    if (v234[116] != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022C2220);
    }
    v286 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v287 = (v372[1] - *v372) >> 3;
      *(_DWORD *)int buf = 134349824;
      *(void *)&uint8_t buf[4] = 0x66FD0EB66FD0EB67 * v287;
      __int16 v531 = 1026;
      *(_DWORD *)v532 = v280 != v278;
      *(_WORD *)&v532[4] = 1026;
      *(_DWORD *)&v532[6] = v285 != v278;
      *(_WORD *)&v532[10] = 1026;
      *(_DWORD *)&v532[12] = v279 != v278;
      _os_log_impl((void *)&_mh_execute_header, v286, OS_LOG_TYPE_DEFAULT, "@CellLoc, tiledl, cells, %{public}lu, gsm, %{public}d, cdma, %{public}d, lte, %{public}d", buf, 0x1Eu);
    }
    v288 = &qword_102419000;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022C2220);
      }
      uint64_t v354 = (v372[1] - *v372) >> 3;
      *(_DWORD *)v473 = 134349824;
      *(void *)&v473[4] = 0x66FD0EB66FD0EB67 * v354;
      *(_WORD *)&v473[12] = 1026;
      *(_DWORD *)&v473[14] = v280 != v278;
      *(_WORD *)&v473[18] = 1026;
      *(_DWORD *)&v473[20] = v285 != v278;
      *(_WORD *)&v473[24] = 1026;
      *(_DWORD *)&v473[26] = v279 != v278;
      v355 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v355);
      if (v355 != buf) {
        free(v355);
      }
      uint64_t v164 = v374;
      v288 = &qword_102419000;
    }
    if (v280 != v278)
    {
      if (v288[116] != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022C2220);
      }
      v289 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v290 = *(void *)&v525[4];
        uint64_t v291 = *(void *)&v525[12];
        uint64_t v292 = sub_100113C7C((uint64_t)v280);
        *(_DWORD *)int buf = 134218496;
        *(void *)&uint8_t buf[4] = v290;
        __int16 v531 = 2048;
        *(void *)v532 = v291;
        *(_WORD *)&v532[8] = 2048;
        *(void *)&v532[10] = v292;
        _os_log_impl((void *)&_mh_execute_header, v289, OS_LOG_TYPE_DEBUG, "CellLoc, requestDownload, GSM, %.8f, %.8f, seckey, %llu", buf, 0x20u);
      }
      v288 = &qword_102419000;
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022C2220);
        }
        uint64_t v356 = *(void *)&v525[4];
        uint64_t v357 = *(void *)&v525[12];
        uint64_t v358 = sub_100113C7C((uint64_t)v280);
        *(_DWORD *)v473 = 134218496;
        *(void *)&v473[4] = v356;
        *(_WORD *)&v473[12] = 2048;
        *(void *)&v473[14] = v357;
        *(_WORD *)&v473[22] = 2048;
        *(void *)&v473[24] = v358;
        v359 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v359);
        if (v359 != buf) {
          free(v359);
        }
        uint64_t v164 = v374;
        v288 = &qword_102419000;
      }
      double v293 = *(double *)&v525[4];
      double v294 = *(double *)&v525[12];
      uint64_t v295 = sub_100113C7C((uint64_t)v280);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, double, double))(*v164 + 88))(v164, 3, v295, v293, v294);
    }
    if (v285 != v278)
    {
      if (v288[116] != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022C2220);
      }
      v296 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v297 = *(void *)&v525[4];
        uint64_t v298 = *(void *)&v525[12];
        uint64_t v299 = sub_100113C7C((uint64_t)v285);
        *(_DWORD *)int buf = 134218496;
        *(void *)&uint8_t buf[4] = v297;
        __int16 v531 = 2048;
        *(void *)v532 = v298;
        *(_WORD *)&v532[8] = 2048;
        *(void *)&v532[10] = v299;
        _os_log_impl((void *)&_mh_execute_header, v296, OS_LOG_TYPE_DEBUG, "CellLoc, requestDownload, CDMA, %.8f, %.8f, seckey, %llu", buf, 0x20u);
        v288 = &qword_102419000;
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v288[116] != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022C2220);
        }
        uint64_t v360 = *(void *)&v525[4];
        uint64_t v361 = *(void *)&v525[12];
        uint64_t v362 = sub_100113C7C((uint64_t)v285);
        *(_DWORD *)v473 = 134218496;
        *(void *)&v473[4] = v360;
        *(_WORD *)&v473[12] = 2048;
        *(void *)&v473[14] = v361;
        *(_WORD *)&v473[22] = 2048;
        *(void *)&v473[24] = v362;
        v363 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v363);
        if (v363 != buf) {
          free(v363);
        }
        uint64_t v164 = v374;
        v288 = &qword_102419000;
      }
      double v300 = *(double *)&v525[4];
      double v301 = *(double *)&v525[12];
      uint64_t v302 = sub_100113C7C((uint64_t)v285);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, double, double))(*v164 + 88))(v164, 5, v302, v300, v301);
    }
    if (v279 != v278)
    {
      if (v288[116] != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022C2220);
      }
      v303 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v304 = *(void *)&v525[4];
        uint64_t v305 = *(void *)&v525[12];
        uint64_t v306 = sub_100113C7C((uint64_t)v279);
        *(_DWORD *)int buf = 134218496;
        *(void *)&uint8_t buf[4] = v304;
        __int16 v531 = 2048;
        *(void *)v532 = v305;
        *(_WORD *)&v532[8] = 2048;
        *(void *)&v532[10] = v306;
        _os_log_impl((void *)&_mh_execute_header, v303, OS_LOG_TYPE_DEBUG, "CellLoc, requestDownload, LTE, %.8f, %.8f, seckey, %llu", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v288[116] != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022C2220);
        }
        uint64_t v364 = *(void *)&v525[4];
        uint64_t v365 = *(void *)&v525[12];
        uint64_t v366 = sub_100113C7C((uint64_t)v279);
        *(_DWORD *)v473 = 134218496;
        *(void *)&v473[4] = v364;
        *(_WORD *)&v473[12] = 2048;
        *(void *)&v473[14] = v365;
        *(_WORD *)&v473[22] = 2048;
        *(void *)&v473[24] = v366;
        v367 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v367);
        if (v367 != buf) {
          free(v367);
        }
        uint64_t v164 = v374;
      }
      double v307 = *(double *)&v525[4];
      double v308 = *(double *)&v525[12];
      uint64_t v309 = sub_100113C7C((uint64_t)v279);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, double, double))(*v164 + 88))(v164, 4, v309, v307, v308);
    }
  }
  if (SHIBYTE(v449) < 0) {
    operator delete((void *)v448);
  }
LABEL_480:
  (*(void (**)(uint64_t *, const char *, double, double))(*v164 + 16))(v164, "recalc", v1, 300.0);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__src.__r_.__value_.__l.__data_);
  }
  if (*(void *)&v488[88])
  {
    *(void *)&long long v489 = *(void *)&v488[88];
    operator delete(*(void **)&v488[88]);
  }
  *(void *)int buf = __p;
  sub_10010FE18((void ***)buf);
  *(void *)int buf = &v451;
  sub_10010FE18((void ***)buf);
LABEL_485:
  if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v454.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v455.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v455.__r_.__value_.__l.__data_);
  }
}

void sub_10010D514(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x567]) < 0) {
    operator delete((void *)STACK[0x550]);
  }
  sub_10055C7F8((uint64_t)&STACK[0xC30]);
  STACK[0xFB0] = (unint64_t)&STACK[0xF90];
  sub_10010FE18((void ***)&STACK[0xFB0]);
  STACK[0x630] = (unint64_t)&STACK[0x578];
  sub_10010FE18((void ***)&STACK[0x630]);
  if (SLOBYTE(STACK[0x5A7]) < 0) {
    operator delete((void *)STACK[0x590]);
  }
  if (SLOBYTE(STACK[0x5BF]) < 0) {
    operator delete((void *)STACK[0x5A8]);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10010D904(int a1, uint64_t a2, uint64_t *a3)
{
  int v6 = a1;
  size_t v7 = &v6;
  uint64_t v4 = sub_10010D968(a2, &v6, (uint64_t)&unk_101D0B290, &v7);
  return sub_10010DBC8(a3, *((CFArrayRef *)v4 + 3), 1);
}

char *sub_10010D968(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(char ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = *(char **)i)
      {
        unint64_t v12 = *((void *)i + 1);
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = a1 + 16;
  int v14 = (char *)operator new(0x20uLL);
  v24[0] = v14;
  v24[1] = (char *)(a1 + 16);
  *(void *)int v14 = 0;
  *((void *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *((void *)v14 + 3) = 0;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100100330(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  long long v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(char **)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(char **)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  uint64_t i = v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  sub_1001000D4(v24, 0);
  return i;
}

void sub_10010DBB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001000D4((char **)va, 0);
  _Unwind_Resume(a1);
}

BOOL sub_10010DBC8(uint64_t *a1, CFArrayRef theArray, int a3)
{
  long long v95 = 0;
  long long v96 = 0;
  uint64_t v97 = 0;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6 != *a1)
  {
    do
    {
      v6 -= 696;
      sub_1000FA860((uint64_t)(a1 + 2), v6);
    }
    while (v6 != v5);
  }
  a1[1] = v5;
  CFArrayRef v90 = theArray;
  if (!theArray)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BB3A8);
    }
    int v86 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "CellService, convert, empty CellList", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BB3A8);
      }
      LOWORD(v113[0]) = 0;
      std::string::size_type v89 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLTelephonyService::convertCTCellsToClCells(std::vector<CLCell> &, CFArrayRef, BOOL)", "%s\n", v89);
      if (v89 != buf) {
        free(v89);
      }
    }
    goto LABEL_135;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BB3A8);
  }
  unint64_t v7 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = Count;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CellService, convertCells, %{public}d, neighbors, %{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BB3A8);
    }
    LODWORD(v113[0]) = 67240448;
    HIDWORD(v113[0]) = Count;
    LOWORD(v113[1]) = 1026;
    *(_DWORD *)((char *)&v113[1] + 2) = a3;
    int v88 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLTelephonyService::convertCTCellsToClCells(std::vector<CLCell> &, CFArrayRef, BOOL)", "%s\n", v88);
    if (v88 != buf) {
      free(v88);
    }
  }
  if (Count >= 1)
  {
    CFIndex v8 = 0;
    key = (void *)kCTCellMonitorDerivedMCC;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
      CFTypeID v10 = CFGetTypeID(ValueAtIndex);
      if (v10 == CFDictionaryGetTypeID())
      {
        CFDictionaryRef v94 = (CFDictionaryRef)ValueAtIndex;
        if (CFDictionaryContainsKey((CFDictionaryRef)ValueAtIndex, key))
        {
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022BB328);
          }
          uint64_t v11 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CELL_LOC: derivedMCC dictionary", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_1022BB328);
            }
            LOWORD(v113[0]) = 0;
            int v66 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLTelephonyService::convertCTCellsToClCells(std::vector<CLCell> &, CFArrayRef, BOOL)", "%s\n", v66);
            if (v66 != buf) {
              free(v66);
            }
          }
          sub_10055C374(&v94, (uint64_t)&v95);
        }
        else
        {
          sub_10010FE14(v113, &v94);
          if (HIDWORD(v113[0]) == 1) {
            int v14 = a3;
          }
          else {
            int v14 = 0;
          }
          if (!HIDWORD(v113[0]) || v14)
          {
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022BB3A8);
            }
            char v25 = qword_1024193A8;
            if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
            {
              sub_10010EE74((uint64_t)v113);
              int v26 = buf[23];
              long long v27 = *(unsigned char **)buf;
              sub_10010EE08((uint64_t)v113, v102);
              long long v28 = buf;
              if (v26 < 0) {
                long long v28 = v27;
              }
              uint64_t v29 = v102;
              if (v105 < 0) {
                uint64_t v29 = *(unsigned char **)v102;
              }
              *(_DWORD *)long long __p = 136446467;
              *(void *)&__p[4] = v28;
              __int16 v110 = 2081;
              long long v111 = v29;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "CellService, convert, add, %{public}s, %{private}s", __p, 0x16u);
              if (SHIBYTE(v105) < 0) {
                operator delete(*(void **)v102);
              }
              theArray = v90;
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193A0 != -1) {
                dispatch_once(&qword_1024193A0, &stru_1022BB3A8);
              }
              sub_10010EE74((uint64_t)v113);
              int v67 = SHIBYTE(v105);
              int v68 = *(unsigned char **)v102;
              sub_10010EE08((uint64_t)v113, __p);
              std::string::size_type v69 = v102;
              if (v67 < 0) {
                std::string::size_type v69 = v68;
              }
              long long v70 = __p;
              if (v112 < 0) {
                long long v70 = *(unsigned char **)__p;
              }
              *(_DWORD *)uint64_t v98 = 136446467;
              *(void *)&v98[4] = v69;
              __int16 v99 = 2081;
              uint64_t v100 = v70;
              long long v71 = (char *)_os_log_send_and_compose_impl();
              if (v112 < 0) {
                operator delete(*(void **)__p);
              }
              theArray = v90;
              if (SHIBYTE(v105) < 0) {
                operator delete(*(void **)v102);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLTelephonyService::convertCTCellsToClCells(std::vector<CLCell> &, CFArrayRef, BOOL)", "%s\n", v71);
              if (v71 != buf) {
                free(v71);
              }
            }
            v158[0] = v116[0];
            *(_OWORD *)((char *)v158 + 12) = *(_OWORD *)((char *)v116 + 12);
            *(_OWORD *)&uint8_t buf[16] = v114;
            *(_OWORD *)&uint8_t buf[32] = v115;
            *(_OWORD *)int buf = *(_OWORD *)v113;
            int v159 = v117;
            uint64_t v161 = 0;
            long long v160 = 0uLL;
            sub_10010F834(&v160, v118, (uint64_t)v119, (v119 - (unsigned char *)v118) >> 2);
            long long v172 = v130;
            v173[0] = v131[0];
            *(_OWORD *)((char *)v173 + 12) = *(_OWORD *)((char *)v131 + 12);
            long long v168 = v126;
            long long v169 = v127;
            long long v170 = v128;
            long long v171 = v129;
            long long v164 = v122;
            long long v165 = v123;
            long long v166 = v124;
            long long v167 = v125;
            long long v162 = v120;
            long long v163 = v121;
            if (SHIBYTE(v133) < 0)
            {
              sub_1000DC48C(&v174, (void *)__src, *((unint64_t *)&__src + 1));
            }
            else
            {
              long long v174 = __src;
              uint64_t v175 = v133;
            }
            long long v184 = v142;
            long long v185 = v143;
            int v186 = v144;
            long long v180 = v138;
            long long v181 = v139;
            long long v182 = v140;
            long long v183 = v141;
            long long v176 = v134;
            long long v177 = v135;
            long long v178 = v136;
            long long v179 = v137;
            long long v195 = v153;
            long long v196 = v154;
            long long v197 = v155;
            int v198 = v156;
            long long v191 = v149;
            long long v192 = v150;
            long long v193 = v151;
            long long v194 = v152;
            long long v187 = v145;
            long long v188 = v146;
            long long v189 = v147;
            long long v190 = v148;
            unint64_t v30 = a1[1];
            if (v30 >= a1[2])
            {
              uint64_t v62 = sub_10010F8B0(a1, (uint64_t)buf);
              int v63 = SHIBYTE(v175);
              a1[1] = v62;
              if (v63 < 0) {
                operator delete((void *)v174);
              }
            }
            else
            {
              *(_OWORD *)unint64_t v30 = *(_OWORD *)buf;
              long long v31 = *(_OWORD *)&buf[16];
              long long v32 = *(_OWORD *)&buf[32];
              long long v33 = v158[0];
              *(_OWORD *)(v30 + 60) = *(_OWORD *)((char *)v158 + 12);
              *(_OWORD *)(v30 + 32) = v32;
              *(_OWORD *)(v30 + 48) = v33;
              *(_OWORD *)(v30 + 16) = v31;
              *(_DWORD *)(v30 + 80) = v159;
              unint64_t v34 = v30 + 80;
              *(void *)(v34 + 16) = 0;
              *(void *)(v34 + 24) = 0;
              *(void *)(v34 + 8) = 0;
              *(_OWORD *)(v34 + 8) = v160;
              *(void *)(v34 + 24) = v161;
              long long v160 = 0uLL;
              uint64_t v161 = 0;
              *(_OWORD *)(v34 + 32) = v162;
              long long v35 = v163;
              long long v36 = v164;
              long long v37 = v166;
              *(_OWORD *)(v34 + 80) = v165;
              *(_OWORD *)(v34 + 96) = v37;
              *(_OWORD *)(v34 + 48) = v35;
              *(_OWORD *)(v34 + 64) = v36;
              long long v38 = v167;
              long long v39 = v168;
              long long v40 = v170;
              *(_OWORD *)(v34 + 144) = v169;
              *(_OWORD *)(v34 + 160) = v40;
              *(_OWORD *)(v34 + 112) = v38;
              *(_OWORD *)(v34 + 128) = v39;
              long long v41 = v171;
              long long v42 = v172;
              long long v43 = v173[0];
              *(_OWORD *)(v34 + 220) = *(_OWORD *)((char *)v173 + 12);
              *(_OWORD *)(v34 + 192) = v42;
              *(_OWORD *)(v34 + 208) = v43;
              *(_OWORD *)(v34 + 176) = v41;
              long long v44 = v174;
              *(void *)(v34 + 256) = v175;
              *(_OWORD *)(v34 + 240) = v44;
              uint64_t v175 = 0;
              long long v174 = 0uLL;
              long long v46 = v177;
              long long v45 = v178;
              *(_OWORD *)(v34 + 264) = v176;
              *(_OWORD *)(v34 + 280) = v46;
              *(_OWORD *)(v34 + 296) = v45;
              long long v47 = v182;
              long long v49 = v179;
              long long v48 = v180;
              *(_OWORD *)(v34 + 344) = v181;
              *(_OWORD *)(v34 + 360) = v47;
              *(_OWORD *)(v34 + 312) = v49;
              *(_OWORD *)(v34 + 328) = v48;
              long long v51 = v184;
              long long v50 = v185;
              long long v52 = v183;
              *(_DWORD *)(v34 + 424) = v186;
              *(_OWORD *)(v34 + 392) = v51;
              *(_OWORD *)(v34 + 408) = v50;
              *(_OWORD *)(v34 + 376) = v52;
              long long v53 = v187;
              long long v54 = v188;
              long long v55 = v190;
              *(_OWORD *)(v34 + 464) = v189;
              *(_OWORD *)(v34 + 480) = v55;
              *(_OWORD *)(v34 + 432) = v53;
              *(_OWORD *)(v34 + 448) = v54;
              long long v56 = v191;
              long long v57 = v192;
              long long v58 = v194;
              *(_OWORD *)(v34 + 528) = v193;
              *(_OWORD *)(v34 + 544) = v58;
              *(_OWORD *)(v34 + 496) = v56;
              *(_OWORD *)(v34 + 512) = v57;
              long long v59 = v195;
              long long v60 = v196;
              long long v61 = v197;
              *(_DWORD *)(v34 + 608) = v198;
              *(_OWORD *)(v34 + 576) = v60;
              *(_OWORD *)(v34 + 592) = v61;
              *(_OWORD *)(v34 + 560) = v59;
              a1[1] = v34 + 616;
            }
            if ((void)v160)
            {
              *((void *)&v160 + 1) = v160;
              operator delete((void *)v160);
            }
          }
          else
          {
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022BB3A8);
            }
            float v15 = qword_1024193A8;
            if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
            {
              sub_10010EE74((uint64_t)v113);
              int v16 = SHIBYTE(v105);
              BOOL v17 = *(unsigned char **)v102;
              sub_10010EE08((uint64_t)v113, __p);
              unint64_t v18 = v102;
              if (v16 < 0) {
                unint64_t v18 = v17;
              }
              unint64_t v19 = __p;
              if (v112 < 0) {
                unint64_t v19 = *(unsigned char **)__p;
              }
              *(_DWORD *)int buf = 136446979;
              *(void *)&uint8_t buf[4] = v18;
              *(_WORD *)&unsigned char buf[12] = 2081;
              *(void *)&unsigned char buf[14] = v19;
              *(_WORD *)&unsigned char buf[22] = 1026;
              *(_DWORD *)&unsigned char buf[24] = HIDWORD(v113[0]) == 0;
              *(_WORD *)&unsigned char buf[28] = 1026;
              *(_DWORD *)&buf[30] = HIDWORD(v113[0]) == 1;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "CellService, convert, ignore, %{public}s, %{private}s, serving, %{public}d, neighbor, %{public}d", buf, 0x22u);
              if (v112 < 0) {
                operator delete(*(void **)__p);
              }
              theArray = v90;
              if (SHIBYTE(v105) < 0) {
                operator delete(*(void **)v102);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193A0 != -1) {
                dispatch_once(&qword_1024193A0, &stru_1022BB3A8);
              }
              sub_10010EE74((uint64_t)v113);
              int v20 = v112;
              long long v21 = *(unsigned char **)__p;
              sub_10010EE08((uint64_t)v113, v98);
              unint64_t v22 = __p;
              if (v20 < 0) {
                unint64_t v22 = v21;
              }
              long long v23 = (void **)v98;
              if (v101 < 0) {
                long long v23 = *(void ***)v98;
              }
              *(_DWORD *)unint64_t v102 = 136446979;
              *(void *)&v102[4] = v22;
              __int16 v103 = 2081;
              long long v104 = v23;
              __int16 v105 = 1026;
              BOOL v106 = HIDWORD(v113[0]) == 0;
              __int16 v107 = 1026;
              BOOL v108 = HIDWORD(v113[0]) == 1;
              long long v24 = (char *)_os_log_send_and_compose_impl();
              if (v101 < 0) {
                operator delete(*(void **)v98);
              }
              theArray = v90;
              if (v112 < 0) {
                operator delete(*(void **)__p);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLTelephonyService::convertCTCellsToClCells(std::vector<CLCell> &, CFArrayRef, BOOL)", "%s\n", v24);
              if (v24 != buf) {
                free(v24);
              }
            }
          }
          if (SHIBYTE(v133) < 0) {
            operator delete((void *)__src);
          }
          if (v118)
          {
            __int16 v119 = v118;
            operator delete(v118);
          }
        }
      }
      else
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BB3A8);
        }
        unint64_t v12 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
        {
          CFTypeID TypeID = CFDictionaryGetTypeID();
          *(_DWORD *)int buf = 134349056;
          *(void *)&uint8_t buf[4] = TypeID;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CellService, convert, invalid, %{public}ld", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BB3A8);
          }
          int v64 = (void *)CFDictionaryGetTypeID();
          LODWORD(v113[0]) = 134349056;
          *(void **)((char *)v113 + 4) = v64;
          long long v65 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLTelephonyService::convertCTCellsToClCells(std::vector<CLCell> &, CFArrayRef, BOOL)", "%s\n", v65);
          if (v65 != buf) {
            free(v65);
          }
        }
      }
      ++v8;
    }
    while (Count != v8);
  }
  __int16 v72 = v95;
  if (v96 != v95)
  {
    uint64_t v73 = *a1;
    if (a1[1] != *a1)
    {
      uint64_t v74 = 0;
      unint64_t v75 = 0;
      do
      {
        if ((*(_DWORD *)(v73 + v74 + 8) - 3) <= 2)
        {
          sub_10142E204(v73 + v74, (uint64_t)&v95);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BB3A8);
          }
          int v76 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
          {
            sub_10010EE74(*a1 + v74);
            int v77 = buf[23];
            long long v78 = *(unsigned char **)buf;
            sub_10010EE08(*a1 + v74, v113);
            long long v79 = buf;
            if (v77 < 0) {
              long long v79 = v78;
            }
            long long v80 = v113;
            if (SBYTE7(v114) < 0) {
              long long v80 = (void **)v113[0];
            }
            *(_DWORD *)unint64_t v102 = 136446467;
            *(void *)&v102[4] = v79;
            __int16 v103 = 2081;
            long long v104 = v80;
            _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "CellService, convert, derive, %{public}s, %{private}s", v102, 0x16u);
            if (SBYTE7(v114) < 0) {
              operator delete(v113[0]);
            }
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022BB3A8);
            }
            sub_10010EE74(*a1 + v74);
            int v81 = SBYTE7(v114);
            long long v82 = (void **)v113[0];
            sub_10010EE08(*a1 + v74, v102);
            long long v83 = v113;
            if (v81 < 0) {
              long long v83 = v82;
            }
            int v84 = v102;
            if (v105 < 0) {
              int v84 = *(unsigned char **)v102;
            }
            *(_DWORD *)long long __p = 136446467;
            *(void *)&__p[4] = v83;
            __int16 v110 = 2081;
            long long v111 = v84;
            int v85 = (char *)_os_log_send_and_compose_impl();
            if (SHIBYTE(v105) < 0) {
              operator delete(*(void **)v102);
            }
            if (SBYTE7(v114) < 0) {
              operator delete(v113[0]);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLTelephonyService::convertCTCellsToClCells(std::vector<CLCell> &, CFArrayRef, BOOL)", "%s\n", v85);
            if (v85 != buf) {
              free(v85);
            }
          }
        }
        ++v75;
        uint64_t v73 = *a1;
        v74 += 696;
      }
      while (v75 < 0x66FD0EB66FD0EB67 * ((a1[1] - *a1) >> 3));
    }
LABEL_135:
    __int16 v72 = v95;
    theArray = v90;
  }
  if (v72)
  {
    long long v96 = v72;
    operator delete(v72);
  }
  return theArray != 0;
}

void sub_10010ECF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_10010EE08@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 3 || v2 == 9 || v2 == 7) {
    return (void *)sub_10010F0A4();
  }
  if (v2 - 3 <= 2) {
    return (void *)sub_10063009C();
  }
  if (v2 == 10) {
    return (void *)sub_100631600();
  }
  if (v2 == 6) {
    return (void *)sub_10010F0A4();
  }
  return sub_100134750(a2, "bad-key");
}

uint64_t sub_10010EE74(uint64_t a1)
{
  sub_10010F274((uint64_t)v10);
  uint64_t v2 = *(int *)(a1 + 8);
  if v2 < 0xA && ((0x287u >> v2))
  {
    uint64_t v3 = off_102325920[v2];
    uint64_t v4 = qword_101E09D98[v2];
  }
  else if ((v2 - 3) >= 3)
  {
    if (v2 == 10)
    {
      uint64_t v3 = "NR";
      uint64_t v4 = 2;
    }
    else
    {
      if (v2 == 6)
      {
        int v5 = *(_DWORD *)(a1 + 568);
        if ((v5 & 4) == 0 || v5 < 1) {
          unint64_t v7 = "LTE";
        }
        else {
          unint64_t v7 = "NSA";
        }
        sub_100132EFC(v11, (uint64_t)v7, 3);
        goto LABEL_18;
      }
      uint64_t v3 = "Unknown";
      uint64_t v4 = 7;
    }
  }
  else
  {
    uint64_t v3 = "CDMA";
    uint64_t v4 = 4;
  }
  sub_100132EFC(v11, (uint64_t)v3, v4);
LABEL_18:
  std::stringbuf::str();
  *(void *)((char *)v10
  v11[0] = v8;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10010F08C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10010F0A4()
{
  sub_10010F274((uint64_t)v5);
  int v0 = (void *)std::ostream::operator<<();
  sub_100132EFC(v0, (uint64_t)".", 1);
  double v1 = (void *)std::ostream::operator<<();
  sub_100132EFC(v1, (uint64_t)".", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  sub_100132EFC(v2, (uint64_t)".", 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v5
  _DWORD v5[2] = v3;
  if (v6 < 0) {
    operator delete((void *)v5[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10010F260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10010F274(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  *(void *)(a1 + 8) = 0;
  int v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 24));
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)(a1 + 16) = v7;
  *(void *)(v2 + *(void *)(v7 - 24)) = v6;
  *(void *)a1 = v8;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_10010F524(_Unwind_Exception *a1)
{
}

uint64_t sub_10010F54C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 696))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    long long v4 = *(_OWORD *)(a2 + 16);
    long long v5 = *(_OWORD *)(a2 + 32);
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
    *(_OWORD *)(a1 + 32) = v5;
    *(_OWORD *)(a1 + 48) = v6;
    *(_OWORD *)(a1 + 16) = v4;
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    if (a1 != a2) {
      sub_1000FB43C((char *)(a1 + 88), *(char **)(a2 + 88), *(void *)(a2 + 96), (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 2);
    }
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    long long v7 = *(_OWORD *)(a2 + 128);
    long long v8 = *(_OWORD *)(a2 + 144);
    long long v9 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v9;
    *(_OWORD *)(a1 + 128) = v7;
    *(_OWORD *)(a1 + 144) = v8;
    long long v10 = *(_OWORD *)(a2 + 192);
    long long v11 = *(_OWORD *)(a2 + 208);
    long long v12 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v12;
    *(_OWORD *)(a1 + 192) = v10;
    *(_OWORD *)(a1 + 208) = v11;
    long long v13 = *(_OWORD *)(a2 + 256);
    long long v14 = *(_OWORD *)(a2 + 272);
    long long v15 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 300) = *(_OWORD *)(a2 + 300);
    *(_OWORD *)(a1 + 272) = v14;
    *(_OWORD *)(a1 + 288) = v15;
    *(_OWORD *)(a1 + 256) = v13;
    std::string::operator=((std::string *)(a1 + 320), (const std::string *)(a2 + 320));
    long long v17 = *(_OWORD *)(a2 + 360);
    long long v16 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 360) = v17;
    *(_OWORD *)(a1 + 376) = v16;
    long long v18 = *(_OWORD *)(a2 + 440);
    long long v20 = *(_OWORD *)(a2 + 392);
    long long v19 = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(a1 + 440) = v18;
    *(_OWORD *)(a1 + 392) = v20;
    *(_OWORD *)(a1 + 408) = v19;
    long long v22 = *(_OWORD *)(a2 + 472);
    long long v21 = *(_OWORD *)(a2 + 488);
    long long v23 = *(_OWORD *)(a2 + 456);
    *(_DWORD *)(a1 + 504) = *(_DWORD *)(a2 + 504);
    *(_OWORD *)(a1 + 472) = v22;
    *(_OWORD *)(a1 + 488) = v21;
    *(_OWORD *)(a1 + 456) = v23;
    long long v24 = *(_OWORD *)(a2 + 640);
    long long v25 = *(_OWORD *)(a2 + 656);
    long long v26 = *(_OWORD *)(a2 + 672);
    *(_DWORD *)(a1 + 688) = *(_DWORD *)(a2 + 688);
    *(_OWORD *)(a1 + 656) = v25;
    *(_OWORD *)(a1 + 672) = v26;
    *(_OWORD *)(a1 + 640) = v24;
    long long v27 = *(_OWORD *)(a2 + 576);
    long long v28 = *(_OWORD *)(a2 + 592);
    long long v29 = *(_OWORD *)(a2 + 624);
    *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
    *(_OWORD *)(a1 + 624) = v29;
    *(_OWORD *)(a1 + 576) = v27;
    *(_OWORD *)(a1 + 592) = v28;
    long long v30 = *(_OWORD *)(a2 + 512);
    long long v31 = *(_OWORD *)(a2 + 528);
    long long v32 = *(_OWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 560) = v32;
    *(_OWORD *)(a1 + 512) = v30;
    *(_OWORD *)(a1 + 528) = v31;
  }
  else
  {
    sub_10010F6A4(a1, a2);
    *(unsigned char *)(a1 + 696) = 1;
  }
  return a1;
}

uint64_t sub_10010F6A4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v7 = a2 + 80;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  uint64_t v8 = a1 + 88;
  *(void *)(a1 + 104) = 0;
  sub_10010F834((void *)(a1 + 88), *(const void **)(a2 + 88), *(void *)(a2 + 96), (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 2);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(v7 + 32);
  long long v9 = *(_OWORD *)(v7 + 48);
  long long v10 = *(_OWORD *)(v7 + 64);
  long long v11 = *(_OWORD *)(v7 + 80);
  *(_OWORD *)(v8 + 88) = *(_OWORD *)(v7 + 96);
  *(_OWORD *)(v8 + 72) = v11;
  *(_OWORD *)(v8 + 56) = v10;
  *(_OWORD *)(v8 + 40) = v9;
  long long v12 = *(_OWORD *)(v7 + 112);
  long long v13 = *(_OWORD *)(v7 + 128);
  long long v14 = *(_OWORD *)(v7 + 144);
  *(_OWORD *)(v8 + 152) = *(_OWORD *)(v7 + 160);
  *(_OWORD *)(v8 + 136) = v14;
  *(_OWORD *)(v8 + 120) = v13;
  *(_OWORD *)(v8 + 104) = v12;
  long long v15 = *(_OWORD *)(v7 + 176);
  long long v16 = *(_OWORD *)(v7 + 192);
  long long v17 = *(_OWORD *)(v7 + 208);
  *(_OWORD *)(v8 + 212) = *(_OWORD *)(v7 + 220);
  *(_OWORD *)(v8 + 200) = v17;
  *(_OWORD *)(v8 + 184) = v16;
  *(_OWORD *)(v8 + 168) = v15;
  long long v18 = (unsigned char *)(v8 + 232);
  if (*(char *)(v7 + 263) < 0)
  {
    sub_1000DC48C(v18, *(void **)(a2 + 320), *(void *)(a2 + 328));
  }
  else
  {
    long long v19 = *(_OWORD *)(v7 + 240);
    *(void *)(v8 + 248) = *(void *)(v7 + 256);
    *(_OWORD *)long long v18 = v19;
  }
  long long v20 = *(_OWORD *)(a2 + 344);
  long long v21 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v21;
  *(_OWORD *)(a1 + 344) = v20;
  long long v22 = *(_OWORD *)(a2 + 392);
  long long v23 = *(_OWORD *)(a2 + 408);
  long long v24 = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 440) = v24;
  *(_OWORD *)(a1 + 392) = v22;
  *(_OWORD *)(a1 + 408) = v23;
  long long v25 = *(_OWORD *)(a2 + 456);
  long long v26 = *(_OWORD *)(a2 + 472);
  long long v27 = *(_OWORD *)(a2 + 488);
  *(_DWORD *)(a1 + 504) = *(_DWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 472) = v26;
  *(_OWORD *)(a1 + 488) = v27;
  *(_OWORD *)(a1 + 456) = v25;
  long long v28 = *(_OWORD *)(a2 + 512);
  long long v29 = *(_OWORD *)(a2 + 528);
  long long v30 = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 560) = v30;
  *(_OWORD *)(a1 + 512) = v28;
  *(_OWORD *)(a1 + 528) = v29;
  long long v31 = *(_OWORD *)(a2 + 576);
  long long v32 = *(_OWORD *)(a2 + 592);
  long long v33 = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 624) = v33;
  *(_OWORD *)(a1 + 576) = v31;
  *(_OWORD *)(a1 + 592) = v32;
  long long v34 = *(_OWORD *)(a2 + 640);
  long long v35 = *(_OWORD *)(a2 + 656);
  long long v36 = *(_OWORD *)(a2 + 672);
  *(_DWORD *)(a1 + 688) = *(_DWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 656) = v35;
  *(_OWORD *)(a1 + 672) = v36;
  *(_OWORD *)(a1 + 640) = v34;
  return a1;
}

void sub_10010F818(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 96) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10010F834(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = sub_10017C6FC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10010F894(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10010F8B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x66FD0EB66FD0EB67 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x5E293205E29320) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x66FD0EB66FD0EB67 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2F149902F14990) {
    unint64_t v9 = 0x5E293205E29320;
  }
  else {
    unint64_t v9 = v5;
  }
  v46[4] = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_10010FAD4(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  long long v11 = &v10[696 * v4];
  v46[0] = v10;
  v46[1] = v11;
  v46[3] = &v10[696 * v9];
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v13 = *(_OWORD *)(a2 + 32);
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v11 + 60) = *(_OWORD *)(a2 + 60);
  *((_OWORD *)v11 + 2) = v13;
  *((_OWORD *)v11 + 3) = v14;
  *(_OWORD *)long long v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  int v16 = *(_DWORD *)(a2 + 80);
  uint64_t v15 = a2 + 80;
  *((_DWORD *)v11 + 20) = v16;
  v11 += 80;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 1) = 0;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(v15 + 8);
  *((void *)v11 + 3) = *(void *)(v15 + 24);
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 24) = 0;
  *(void *)(v15 + 8) = 0;
  long long v17 = *(_OWORD *)(v15 + 96);
  long long v19 = *(_OWORD *)(v15 + 48);
  long long v18 = *(_OWORD *)(v15 + 64);
  *((_OWORD *)v11 + 5) = *(_OWORD *)(v15 + 80);
  *((_OWORD *)v11 + 6) = v17;
  *((_OWORD *)v11 + 3) = v19;
  *((_OWORD *)v11 + 4) = v18;
  long long v20 = *(_OWORD *)(v15 + 160);
  long long v22 = *(_OWORD *)(v15 + 112);
  long long v21 = *(_OWORD *)(v15 + 128);
  *((_OWORD *)v11 + 9) = *(_OWORD *)(v15 + 144);
  *((_OWORD *)v11 + 10) = v20;
  *((_OWORD *)v11 + 7) = v22;
  *((_OWORD *)v11 + 8) = v21;
  long long v24 = *(_OWORD *)(v15 + 192);
  long long v23 = *(_OWORD *)(v15 + 208);
  long long v25 = *(_OWORD *)(v15 + 176);
  *(_OWORD *)(v11 + 220) = *(_OWORD *)(v15 + 220);
  *((_OWORD *)v11 + 12) = v24;
  *((_OWORD *)v11 + 13) = v23;
  *((_OWORD *)v11 + 11) = v25;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(v15 + 32);
  long long v26 = *(_OWORD *)(v15 + 240);
  *((void *)v11 + 32) = *(void *)(v15 + 256);
  *((_OWORD *)v11 + 15) = v26;
  *(void *)(v15 + 248) = 0;
  *(void *)(v15 + 256) = 0;
  *(void *)(v15 + 240) = 0;
  long long v27 = *(_OWORD *)(v15 + 360);
  long long v29 = *(_OWORD *)(v15 + 312);
  long long v28 = *(_OWORD *)(v15 + 328);
  *(_OWORD *)(v11 + 344) = *(_OWORD *)(v15 + 344);
  *(_OWORD *)(v11 + 360) = v27;
  *(_OWORD *)(v11 + 312) = v29;
  *(_OWORD *)(v11 + 328) = v28;
  long long v30 = *(_OWORD *)(v15 + 264);
  long long v31 = *(_OWORD *)(v15 + 296);
  *(_OWORD *)(v11 + 280) = *(_OWORD *)(v15 + 280);
  *(_OWORD *)(v11 + 296) = v31;
  *(_OWORD *)(v11 + 264) = v30;
  long long v33 = *(_OWORD *)(v15 + 392);
  long long v32 = *(_OWORD *)(v15 + 408);
  long long v34 = *(_OWORD *)(v15 + 376);
  *((_DWORD *)v11 + 106) = *(_DWORD *)(v15 + 424);
  *(_OWORD *)(v11 + 392) = v33;
  *(_OWORD *)(v11 + 408) = v32;
  *(_OWORD *)(v11 + 376) = v34;
  long long v35 = *(_OWORD *)(v15 + 432);
  long long v36 = *(_OWORD *)(v15 + 448);
  long long v37 = *(_OWORD *)(v15 + 480);
  *((_OWORD *)v11 + 29) = *(_OWORD *)(v15 + 464);
  *((_OWORD *)v11 + 30) = v37;
  *((_OWORD *)v11 + 27) = v35;
  *((_OWORD *)v11 + 28) = v36;
  long long v38 = *(_OWORD *)(v15 + 496);
  long long v39 = *(_OWORD *)(v15 + 512);
  long long v40 = *(_OWORD *)(v15 + 544);
  *((_OWORD *)v11 + 33) = *(_OWORD *)(v15 + 528);
  *((_OWORD *)v11 + 34) = v40;
  *((_OWORD *)v11 + 31) = v38;
  *((_OWORD *)v11 + 32) = v39;
  long long v41 = *(_OWORD *)(v15 + 560);
  long long v42 = *(_OWORD *)(v15 + 576);
  long long v43 = *(_OWORD *)(v15 + 592);
  *((_DWORD *)v11 + 152) = *(_DWORD *)(v15 + 608);
  *((_OWORD *)v11 + 36) = v42;
  *((_OWORD *)v11 + 37) = v43;
  *((_OWORD *)v11 + 35) = v41;
  _OWORD v46[2] = v11 + 616;
  sub_10010FB20(a1, v46);
  uint64_t v44 = a1[1];
  sub_10010FD98(v46);
  return v44;
}

void sub_10010FAC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10010FD98((void **)va);
  _Unwind_Resume(a1);
}

void *sub_10010FAD4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x5E293205E29321) {
    sub_1001D7FA0();
  }
  return operator new(696 * a2);
}

uint64_t sub_10010FB20(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10010FB98((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10010FB98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v48 = a6;
  *((void *)&v48 + 1) = a7;
  long long v47 = v48;
  v45[0] = a1;
  v45[1] = &v47;
  v45[2] = &v48;
  if (a3 == a5)
  {
    uint64_t v43 = a6;
  }
  else
  {
    uint64_t v8 = a3 - 696;
    do
    {
      uint64_t v9 = v7 - 696;
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v8;
      long long v10 = *(_OWORD *)(v8 + 16);
      long long v11 = *(_OWORD *)(v8 + 32);
      long long v12 = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v9 + 60) = *(_OWORD *)(v8 + 60);
      *(_OWORD *)(v9 + 32) = v11;
      *(_OWORD *)(v9 + 48) = v12;
      *(_OWORD *)(v9 + 16) = v10;
      *(_DWORD *)(v9 + 80) = *(_DWORD *)(v8 + 80);
      uint64_t v13 = v7 - 616;
      *(void *)(v13 + 16) = 0;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 8) = 0;
      *(_OWORD *)(v13 + 8) = *(_OWORD *)(v8 + 88);
      *(void *)(v13 + 24) = *(void *)(v8 + 104);
      *(void *)(v8 + 96) = 0;
      *(void *)(v8 + 104) = 0;
      *(void *)(v8 + 88) = 0;
      long long v14 = *(_OWORD *)(v8 + 176);
      long long v16 = *(_OWORD *)(v8 + 128);
      long long v15 = *(_OWORD *)(v8 + 144);
      *(_OWORD *)(v13 + 80) = *(_OWORD *)(v8 + 160);
      *(_OWORD *)(v13 + 96) = v14;
      *(_OWORD *)(v13 + 48) = v16;
      *(_OWORD *)(v13 + 64) = v15;
      long long v17 = *(_OWORD *)(v8 + 240);
      long long v19 = *(_OWORD *)(v8 + 192);
      long long v18 = *(_OWORD *)(v8 + 208);
      *(_OWORD *)(v13 + 144) = *(_OWORD *)(v8 + 224);
      *(_OWORD *)(v13 + 160) = v17;
      *(_OWORD *)(v13 + 112) = v19;
      *(_OWORD *)(v13 + 128) = v18;
      long long v21 = *(_OWORD *)(v8 + 272);
      long long v20 = *(_OWORD *)(v8 + 288);
      long long v22 = *(_OWORD *)(v8 + 256);
      *(_OWORD *)(v13 + 220) = *(_OWORD *)(v8 + 300);
      *(_OWORD *)(v13 + 192) = v21;
      *(_OWORD *)(v13 + 208) = v20;
      *(_OWORD *)(v13 + 176) = v22;
      *(_OWORD *)(v13 + 32) = *(_OWORD *)(v8 + 112);
      long long v23 = *(_OWORD *)(v8 + 320);
      *(void *)(v13 + 256) = *(void *)(v8 + 336);
      *(_OWORD *)(v13 + 240) = v23;
      *(void *)(v8 + 328) = 0;
      *(void *)(v8 + 336) = 0;
      *(void *)(v8 + 320) = 0;
      long long v24 = (_OWORD *)(v7 - 352);
      long long v25 = *(_OWORD *)(v8 + 424);
      long long v27 = *(_OWORD *)(v8 + 392);
      long long v26 = *(_OWORD *)(v8 + 408);
      *(_OWORD *)(v7 - 256) = *(_OWORD *)(v8 + 440);
      v24[4] = v26;
      void v24[5] = v25;
      v24[3] = v27;
      long long v28 = *(_OWORD *)(v8 + 344);
      long long v29 = *(_OWORD *)(v8 + 376);
      v24[1] = *(_OWORD *)(v8 + 360);
      void v24[2] = v29;
      *long long v24 = v28;
      long long v31 = *(_OWORD *)(v8 + 472);
      long long v30 = *(_OWORD *)(v8 + 488);
      long long v32 = *(_OWORD *)(v8 + 456);
      *(_DWORD *)(v7 - 192) = *(_DWORD *)(v8 + 504);
      *(_OWORD *)(v7 - 224) = v31;
      *(_OWORD *)(v7 - 208) = v30;
      *(_OWORD *)(v7 - 240) = v32;
      long long v33 = *(_OWORD *)(v8 + 512);
      long long v34 = *(_OWORD *)(v8 + 528);
      long long v35 = *(_OWORD *)(v8 + 544);
      *(_OWORD *)(v7 - 136) = *(_OWORD *)(v8 + 560);
      *(_OWORD *)(v7 - 152) = v35;
      *(_OWORD *)(v7 - 168) = v34;
      *(_OWORD *)(v7 - 184) = v33;
      long long v36 = *(_OWORD *)(v8 + 576);
      long long v37 = *(_OWORD *)(v8 + 592);
      long long v38 = *(_OWORD *)(v8 + 608);
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(v8 + 624);
      *(_OWORD *)(v7 - 88) = v38;
      *(_OWORD *)(v7 - 104) = v37;
      *(_OWORD *)(v7 - 120) = v36;
      long long v39 = *(_OWORD *)(v8 + 640);
      long long v40 = *(_OWORD *)(v8 + 656);
      long long v41 = *(_OWORD *)(v8 + 672);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(v8 + 688);
      *(_OWORD *)(v7 - 24) = v41;
      *(_OWORD *)(v7 - 40) = v40;
      *(_OWORD *)(v7 - 56) = v39;
      uint64_t v7 = *((void *)&v48 + 1) - 696;
      *((void *)&v48 + 1) -= 696;
      BOOL v42 = v8 == a5;
      v8 -= 696;
    }
    while (!v42);
    uint64_t v43 = v48;
  }
  char v46 = 1;
  sub_10010FD60((uint64_t)v45);
  return v43;
}

uint64_t sub_10010FD60(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10056307C((uint64_t *)a1);
  }
  return a1;
}

void **sub_10010FD98(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10010FDCC(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 696;
    sub_1000FA860(v4, i - 696);
  }
}

void sub_10010FE18(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 864;
        sub_1000FA860((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10010FEB0(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_100110018(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_10010FF64(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_100110018(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

id sub_100110018(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_100110078(a1);
}

id sub_100110078(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022C8030);
      }
      uint64_t v3 = qword_102418F98;
      if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      int v8 = 134218498;
      id v9 = v2;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      __int16 v12 = 2080;
      unint64_t v13 = 0x8000000101D73B78 & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v4 = v3;
      os_log_type_t v5 = OS_LOG_TYPE_ERROR;
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022C8030);
      }
      uint64_t v7 = qword_102418F98;
      if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT)) {
        return 0;
      }
      int v8 = 134218498;
      id v9 = v2;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      __int16 v12 = 2080;
      unint64_t v13 = 0x8000000101D73B78 & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v4 = v7;
      os_log_type_t v5 = OS_LOG_TYPE_FAULT;
    }
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", (uint8_t *)&v8, 0x20u);
    return 0;
  }

  return [a1 cppObjectPtr];
}

BOOL sub_100110260(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  BOOL v8 = sub_1001102E8(a1, a2, a3, (const std::string *)a4);
  if (v8)
  {
    uint64_t v9 = *(unsigned __int8 *)(a4 + 23);
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a4 + 8);
    }
    if (v9)
    {
      unsigned int v10 = *a3;
      if (v10 <= 1)
      {
        double Current = CFAbsoluteTimeGetCurrent();
        sub_10011A474(a1, v10, a2, (unsigned __int8 *)a4, Current);
      }
    }
  }
  return v8;
}

BOOL sub_1001102E8(uint64_t a1, int a2, int *a3, const std::string *a4)
{
  int v45 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        unint64_t v13 = (uint64_t *)v7;
      }
      else {
        unint64_t v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v44 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          long long v23 = (uint64_t *)v17;
        }
        else {
          long long v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          long long v28 = (uint64_t *)v24;
        }
        else {
          long long v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(void *)char v46 = v25;
        uint64_t v34 = *(void *)(v25 + 56);
        *(void *)int buf = &v45;
        long long v35 = sub_1000EAEE4((uint64_t **)(v25 + 40), &v45, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        std::string::operator=((std::string *)(v35 + 5), a4);
        sub_100110970(buf);
        sub_100110970(v52);
        int v53 = 0xFFFF;
        long long v54 = 0u;
        __asm { FMOV            V1.2D, #-1.0 }
        long long v55 = xmmword_101D1C320;
        long long v56 = _Q1;
        long long v57 = _Q1;
        long long v58 = _Q1;
        int v59 = 0;
        unint64_t v60 = 0xBFF0000000000000;
        long long v61 = 0u;
        int v62 = 0;
        unint64_t v63 = 0xBFF0000000000000;
        int v64 = 0x7FFFFFFF;
        long long v66 = 0u;
        uint64_t v65 = 0;
        char v67 = 0;
        uint64_t v69 = 1;
        long long v68 = 0u;
        unint64_t v70 = 0xBFF0000000000000;
        long long v71 = _Q1;
        long long v72 = _Q1;
        long long v73 = _Q1;
        long long v74 = _Q1;
        long long v75 = _Q1;
        long long v76 = _Q1;
        long long v77 = xmmword_101D1C320;
        int v78 = 0xFFFF;
        uint64_t v80 = 0;
        uint64_t v79 = 0;
        long long v81 = xmmword_101D1C320;
        long long v82 = _Q1;
        long long v83 = _Q1;
        long long v84 = _Q1;
        int v85 = 0;
        unint64_t v86 = 0xBFF0000000000000;
        uint64_t v88 = 0;
        uint64_t v87 = 0;
        int v89 = 0;
        unint64_t v90 = 0xBFF0000000000000;
        int v91 = 0x7FFFFFFF;
        char v95 = 0;
        uint64_t v93 = 0;
        uint64_t v92 = 0;
        uint64_t v94 = 0;
        int v96 = 0xFFFF;
        uint64_t v98 = 0;
        uint64_t v97 = 0;
        long long v99 = xmmword_101D1C320;
        long long v100 = _Q1;
        long long v101 = _Q1;
        long long v102 = _Q1;
        int v103 = 0;
        unint64_t v104 = 0xBFF0000000000000;
        uint64_t v105 = 0;
        uint64_t v106 = 0;
        int v107 = 0;
        unint64_t v108 = 0xBFF0000000000000;
        int v109 = 0x7FFFFFFF;
        uint64_t v110 = 0;
        uint64_t v111 = 0;
        uint64_t v112 = 0;
        char v113 = 0;
        int v114 = 0xFFFF;
        uint64_t v116 = 0;
        uint64_t v115 = 0;
        long long v117 = xmmword_101D1C320;
        long long v118 = _Q1;
        long long v119 = _Q1;
        long long v120 = _Q1;
        int v121 = 0;
        unint64_t v122 = 0xBFF0000000000000;
        uint64_t v124 = 0;
        uint64_t v123 = 0;
        int v125 = 0;
        unint64_t v126 = 0xBFF0000000000000;
        int v127 = 0x7FFFFFFF;
        uint64_t v129 = 0;
        uint64_t v128 = 0;
        char v131 = 0;
        uint64_t v130 = 0;
        long long v151 = 0u;
        long long v152 = 0u;
        long long v149 = 0u;
        long long v150 = 0u;
        long long v147 = 0u;
        long long v148 = 0u;
        long long v145 = 0u;
        long long v146 = 0u;
        long long v143 = 0u;
        long long v144 = 0u;
        long long v141 = 0u;
        long long v142 = 0u;
        long long v139 = 0u;
        long long v140 = 0u;
        long long v137 = 0u;
        long long v138 = 0u;
        long long v135 = 0u;
        long long v136 = 0u;
        long long v133 = 0u;
        long long v134 = 0u;
        long long v132 = 0u;
        int v153 = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_100920D30();
        }
        sub_1001111C8((uint64_t)buf);
        if (v34) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        *(void *)char v46 = a1 + 64;
        char v29 = byte_10241ECC8;
        int v43 = v16;
        *(void *)int buf = &v43;
        *((unsigned char *)sub_10078BC58((uint64_t **)(a1 + 56), &v43, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v29;
        int v43 = *a3;
        *(void *)int buf = &v43;
        long long v30 = sub_10078BC58((uint64_t **)(a1 + 56), &v43, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        long long v31 = (std::__shared_weak_count *)v30[9];
        _OWORD v30[8] = 0;
        v30[9] = 0;
        if (v31) {
          sub_1000DB0A0(v31);
        }
        int v43 = *a3;
        *(void *)int buf = &v43;
        long long v32 = sub_10078BC58((uint64_t **)(a1 + 56), &v43, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)int buf = &v45;
        long long v33 = sub_1000EAEE4(v32 + 5, &v45, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        std::string::operator=((std::string *)(v33 + 5), a4);
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v20 == v18)
      {
        *(_DWORD *)int buf = *a3;
        sub_1000EDED4((uint64_t **)(v44 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022D3B98);
  }
  long long v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    long long v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v15 = (void *)*v15;
    }
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v50 = 1026;
    int v51 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022D3B98);
    }
    long long v41 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v41 = (void *)*v41;
    }
    *(_DWORD *)char v46 = 136446466;
    *(void *)&v46[4] = v41;
    __int16 v47 = 1026;
    int v48 = a2;
    BOOL v42 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::string>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v42);
    if (v42 != buf) {
      free(v42);
    }
    return 0;
  }
  return result;
}

void sub_100110940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1001111C8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_100110970(char *a1)
{
  sub_100134750(v7, "");
  sub_100134750(v5, "");
  sub_100134750(__p, "");
  sub_100110A5C(a1, (uint64_t)v7, (uint64_t)v5, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  return a1;
}

void sub_100110A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

char *sub_100110A5C(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000DC48C(&__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    long long __dst = *(_OWORD *)a2;
    uint64_t v15 = *(void *)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1000DC48C(v12, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)BOOL v12 = *(_OWORD *)a3;
    uint64_t v13 = *(void *)(a3 + 16);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_1000DC48C(v10, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v10 = *(_OWORD *)a4;
    uint64_t v11 = *(void *)(a4 + 16);
  }
  sub_100134750(__p, "");
  sub_100110C00(a1, &__dst, (long long *)v12, (long long *)v10, -1, (long long *)__p, 0, 0, 1.79769313e308, 1.79769313e308, -1.0, -1.0);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[0]);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__dst);
  }
  return a1;
}

void sub_100110B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  _Unwind_Resume(exception_object);
}

char *sub_100110C00(char *__dst, long long *a2, long long *a3, long long *a4, int a5, long long *a6, void *a7, char a8, double a9, double a10, double a11, double a12)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v23 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v23;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C(__dst + 24, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v24 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v24;
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_1000DC48C(__dst + 48, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v25 = *a4;
    *((void *)__dst + 8) = *((void *)a4 + 2);
    *((_OWORD *)__dst + 3) = v25;
  }
  *((double *)__dst + 9) = a9;
  *((double *)__dst + 10) = a10;
  *((double *)__dst + 11) = a11;
  *((double *)__dst + 12) = a11;
  *((double *)__dst + 13) = a12;
  *((void *)__dst + 14) = 0xBFF0000000000000;
  *((CFAbsoluteTime *)__dst + 15) = CFAbsoluteTimeGetCurrent();
  *((void *)__dst + 16) = 0xBFF0000000000000;
  *((void *)__dst + 17) = 0;
  *((_DWORD *)__dst + 36) = 0;
  *((void *)__dst + 20) = 0;
  *((void *)__dst + 21) = 0;
  *((void *)__dst + 19) = 0xBFF0000000000000;
  __dst[176] = a8;
  *((_DWORD *)__dst + 45) = 0;
  *((_DWORD *)__dst + 46) = a5;
  __dst[188] = 0;
  if (*((char *)a6 + 23) < 0)
  {
    sub_1000DC48C(__dst + 192, *(void **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v26 = *a6;
    *((void *)__dst + 26) = *((void *)a6 + 2);
    *((_OWORD *)__dst + 12) = v26;
  }
  *((void *)__dst + 27) = 0;
  id v27 = a7;
  *((void *)__dst + 28) = 0;
  *((void *)__dst + 27) = v27;
  *((void *)__dst + 29) = 0;
  *((void *)__dst + 30) = 0;
  double v28 = *((double *)__dst + 12);
  if (v28 >= 0.0 && v28 < sub_100044AD4((uint64_t)__dst))
  {
    int v29 = __dst[23];
    if (v29 < 0)
    {
      if (*((void *)__dst + 1) != 21)
      {
LABEL_27:
        *((double *)__dst + 12) = sub_100044AD4((uint64_t)__dst);
        goto LABEL_28;
      }
      long long v30 = *(uint64_t **)__dst;
    }
    else
    {
      long long v30 = (uint64_t *)__dst;
      if (v29 != 21) {
        goto LABEL_27;
      }
    }
    uint64_t v31 = *v30;
    uint64_t v32 = v30[1];
    uint64_t v33 = *(uint64_t *)((char *)v30 + 13);
    if (v31 != 0x6C7070612E6D6F63 || v32 != 0x2E65726F74732E65 || v33 != 0x796C6C6F4A2E6572) {
      goto LABEL_27;
    }
  }
LABEL_28:
  *((_DWORD *)__dst + 46) = sub_100110EA0((uint64_t)__dst);
  return __dst;
}

void sub_100110E1C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100110EA0(uint64_t a1)
{
  sub_100111050((const void **)(a1 + 48), 47, (uint64_t)&v17);
  int v2 = *(char *)(a1 + 23);
  if (v2 >= 0) {
    uint64_t v3 = (const std::string::value_type *)a1;
  }
  else {
    uint64_t v3 = *(const std::string::value_type **)a1;
  }
  if (v2 >= 0) {
    std::string::size_type v4 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v4 = *(void *)(a1 + 8);
  }
  os_log_type_t v5 = std::string::append(&v17, v3, v4);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v18, 47);
  std::string v19 = v18;
  memset(&v18, 0, sizeof(v18));
  char v9 = *(const std::string::value_type **)(a1 + 24);
  uint64_t v8 = a1 + 24;
  uint64_t v7 = v9;
  int v10 = *(char *)(v8 + 23);
  if (v10 >= 0) {
    uint64_t v11 = (const std::string::value_type *)v8;
  }
  else {
    uint64_t v11 = v7;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(v8 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(v8 + 8);
  }
  uint64_t v13 = std::string::append(&v19, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  std::string::size_type v21 = v13->__r_.__value_.__r.__words[2];
  long long v20 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  unint64_t v15 = sub_10011116C((uint64_t)&v19, (char *)&v20);
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)v20);
  }
  return 678072505 * ((((0xC6A4A7935BD1E995 * v15) >> 32) >> 15) ^ (1540483477 * v15))
       - 430675100;
}

void sub_100110FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 25) < 0) {
    operator delete(*(void **)(v28 - 48));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100111050@<X0>(const void **a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  uint64_t result = sub_1001110E4(a3, v5 + 1);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v7 = (char *)result;
  }
  else {
    uint64_t v7 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v7, v8, v5);
  }
  char v9 = &v7[v5];
  *char v9 = a2;
  v9[1] = 0;
  return result;
}

uint64_t sub_1001110E4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000E6574();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    long long v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

unint64_t sub_10011116C(uint64_t a1, char *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = *(char **)a2;
  }
  unint64_t result = 0;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *((void *)a2 + 1);
  }
  for (; v2; --v2)
  {
    uint64_t v5 = *v3++;
    unint64_t result = 3864292196u
           - 0x395B586CA42E166BLL
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))) ^ result);
  }
  return result;
}

uint64_t sub_1001111C8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 472);
  if (v2)
  {
    *(void *)(a1 + 480) = v2;
    operator delete(v2);
  }

  if (*(char *)(a1 + 463) < 0) {
    operator delete(*(void **)(a1 + 440));
  }
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*(void **)(a1 + 296));
  }
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*(void **)(a1 + 272));
  }
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  uint64_t v3 = *(void **)(a1 + 224);
  if (v3)
  {
    *(void *)(a1 + 232) = v3;
    operator delete(v3);
  }

  if (*(char *)(a1 + 215) < 0) {
    operator delete(*(void **)(a1 + 192));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1001112A4(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      int v10 = (uint64_t *)v4;
    }
    else {
      int v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  uint64_t v11 = *(void *)(v7 + 64);
  if (!v11) {
    return 0;
  }
  sub_100921348(a3, v11);
  return 1;
}

BOOL sub_100111314(uint64_t **a1, unsigned int a2, int *a3, const std::string *a4)
{
  BOOL v35 = sub_1001119E0((uint64_t)a1, a2, a3, a4);
  if (v35)
  {
    std::string::size_type size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) != 0) {
      std::string::size_type size = a4->__r_.__value_.__l.__size_;
    }
    BOOL v8 = size && *a3 == 2;
    if (v8)
    {
      double Current = CFAbsoluteTimeGetCurrent();
      int v10 = a1[38];
      if (v10 != (uint64_t *)(a1 + 39))
      {
        double v11 = Current;
        while (1)
        {
          std::string::size_type v12 = (double *)v10[20];
          if (v12 != (double *)(v10 + 19)) {
            break;
          }
LABEL_63:
          if (v10[21])
          {
            uint64_t v32 = (uint64_t *)v10[1];
            if (v32)
            {
              do
              {
                uint64_t v33 = v32;
                uint64_t v32 = (uint64_t *)*v32;
              }
              while (v32);
            }
            else
            {
              do
              {
                uint64_t v33 = (uint64_t *)v10[2];
                BOOL v8 = *v33 == (void)v10;
                int v10 = v33;
              }
              while (!v8);
            }
          }
          else
          {
            uint64_t v33 = sub_10078BDE0(a1 + 38, v10);
          }
          int v10 = v33;
          if (v33 == (uint64_t *)(a1 + 39)) {
            return v35;
          }
        }
        uint64_t v37 = (uint64_t)(v10 + 4);
        while (1)
        {
          if (v12[9] + 20.0 >= v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v10 + 95);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v10 + 95);
            }
            else {
              uint64_t v20 = v10[10];
            }
            std::string::size_type v21 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
            int v22 = (char)v21;
            if ((v21 & 0x80u) != 0) {
              std::string::size_type v21 = a4->__r_.__value_.__l.__size_;
            }
            if (v20 == v21)
            {
              if (v22 >= 0) {
                long long v23 = a4;
              }
              else {
                long long v23 = (const std::string *)a4->__r_.__value_.__r.__words[0];
              }
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v10[9], v23, v10[10]))
                {
LABEL_40:
                  if (qword_102419390 != -1) {
                    dispatch_once(&qword_102419390, &stru_1022C7FC0);
                  }
                  long long v25 = qword_102419398;
                  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
                  {
                    sub_10048B264(v37);
                    long long v26 = buf;
                    if (v41 < 0) {
                      long long v26 = *(unsigned char **)buf;
                    }
                    int v27 = *((_DWORD *)v12 + 4);
                    int v28 = *((_DWORD *)v12 + 20);
                    long long __p = (void *)68289795;
                    *(_WORD *)__int16 v47 = 2082;
                    *(void *)&v47[2] = "";
                    *(_WORD *)&v47[10] = 2081;
                    *(void *)&v47[12] = v26;
                    *(_WORD *)&v47[20] = 1025;
                    *(_DWORD *)&v47[22] = v27;
                    *(_WORD *)&v47[26] = 1025;
                    *(_DWORD *)&v47[28] = v28;
                    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Sending cached notification for fence\", \"region\":%{private, location:escape_only}s, \"state\":%{private}d, \"type\":%{private}d}", (uint8_t *)&__p, 0x28u);
                    if (v41 < 0) {
                      operator delete(*(void **)buf);
                    }
                  }
                  memset(v47, 0, sizeof(v47));
                  long long __p = off_1022B3D98;
                  memset(v48, 0, sizeof(v48));
                  memset(&v49, 0, sizeof(v49));
                  int v51 = 0;
                  long long v52 = off_1022B3DE8;
                  long long v53 = 0u;
                  long long v54 = 0u;
                  int v55 = 1;
                  std::string::operator=((std::string *)v47, (const std::string *)(v10 + 5));
                  *(void *)&v47[24] = v10[8];
                  std::string::operator=(v48, (const std::string *)v10 + 3);
                  std::string::operator=(&v48[1], (const std::string *)v10 + 4);
                  std::string::operator=(&v49, (const std::string *)v10 + 5);
                  int v50 = *((_DWORD *)v10 + 36);
                  int v55 = *((_DWORD *)v12 + 4);
                  uint64_t v56 = *((void *)v12 + 8);
                  if (*((_DWORD *)v12 + 20))
                  {
                    *(_DWORD *)int buf = 3;
                  }
                  else
                  {
                    std::string::operator=((std::string *)&v53, (const std::string *)(v12 + 4));
                    *((double *)&v54 + 1) = v12[7];
                    *(_DWORD *)int buf = 2;
                  }
                  ((void (*)(uint64_t **, unsigned char *, void **, void, void, void))(*a1)[19])(a1, buf, &__p, 0, a2, 0);
                  std::string::size_type v12 = (double *)*((void *)v12 + 1);
                  long long v52 = off_1022B3DE8;
                  if (SBYTE7(v54) < 0) {
                    operator delete((void *)v53);
                  }
                  sub_100111F40((uint64_t)&__p);
                  goto LABEL_53;
                }
              }
              else
              {
                if (!*((unsigned char *)v10 + 95)) {
                  goto LABEL_40;
                }
                long long v24 = (unsigned __int8 *)(v10 + 9);
                while (*v24 == v23->__r_.__value_.__s.__data_[0])
                {
                  ++v24;
                  long long v23 = (const std::string *)((char *)v23 + 1);
                  if (!--v19) {
                    goto LABEL_40;
                  }
                }
              }
            }
            std::string::size_type v12 = (double *)*((void *)v12 + 1);
          }
          else
          {
            if (qword_102419390 != -1) {
              dispatch_once(&qword_102419390, &stru_1022C7FC0);
            }
            uint64_t v13 = (int *)(v12 + 2);
            long long v14 = qword_102419398;
            if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
            {
              sub_10048B264(v37);
              p_p = &__p;
              if (v47[15] < 0) {
                p_p = __p;
              }
              int v16 = *v13;
              *(_DWORD *)int buf = 136380931;
              *(void *)&uint8_t buf[4] = p_p;
              __int16 v39 = 1025;
              int v40 = v16;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "iB: Pending notification for fence,%{private}s, state,%{private}d, has expired", buf, 0x12u);
              if ((v47[15] & 0x80000000) != 0) {
                operator delete(__p);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(&__p, 0x65CuLL);
              if (qword_102419390 != -1) {
                dispatch_once(&qword_102419390, &stru_1022C7FC0);
              }
              sub_10048B264(v37);
              int v29 = buf;
              if (v41 < 0) {
                int v29 = *(unsigned char **)buf;
              }
              int v30 = *v13;
              int v42 = 136380931;
              int v43 = v29;
              __int16 v44 = 1025;
              int v45 = v30;
              uint64_t v31 = (char *)_os_log_send_and_compose_impl();
              if (v41 < 0) {
                operator delete(*(void **)buf);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLBTLEFenceManagerConcrete::registerForNotification(int, const CLBTLEFenceManager_Type::Notification &, const std::string &)", "%s\n", v31);
              if (v31 != (char *)&__p) {
                free(v31);
              }
            }
            uint64_t v17 = *(void *)v12;
            std::string v18 = (double *)*((void *)v12 + 1);
            *(void *)(v17 + 8) = v18;
            **((void **)v12 + 1) = v17;
            --v10[21];
            sub_100789C0C((uint64_t)(v12 + 2));
            operator delete(v12);
            std::string::size_type v12 = v18;
          }
LABEL_53:
          if (v12 == (double *)(v10 + 19)) {
            goto LABEL_63;
          }
        }
      }
    }
  }
  return v35;
}

void sub_1001119BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

BOOL sub_1001119E0(uint64_t a1, int a2, int *a3, const std::string *a4)
{
  int v40 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        uint64_t v13 = (uint64_t *)v7;
      }
      else {
        uint64_t v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v39 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          long long v23 = (uint64_t *)v17;
        }
        else {
          long long v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          int v28 = (uint64_t *)v24;
        }
        else {
          int v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(void *)char v41 = v25;
        uint64_t v34 = *(void *)(v25 + 56);
        *(void *)int buf = &v40;
        BOOL v35 = sub_1000EAEE4((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        std::string::operator=((std::string *)(v35 + 5), a4);
        long long v45 = 0u;
        *(_OWORD *)&uint8_t buf[8] = 0u;
        *(void *)int buf = off_1022B3D98;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        uint64_t v50 = 0;
        int v51 = 0;
        long long v52 = off_1022B3DE8;
        long long v53 = 0u;
        long long v54 = 0u;
        int v55 = 1;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_10078BB10();
        }
        long long v52 = off_1022B3DE8;
        if (SBYTE7(v54) < 0) {
          operator delete((void *)v53);
        }
        sub_100111F40((uint64_t)buf);
        if (v34) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        *(void *)char v41 = a1 + 64;
        char v29 = byte_10241D908;
        int v38 = v16;
        *(void *)int buf = &v38;
        *((unsigned char *)sub_10078BC58((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v29;
        int v38 = *a3;
        *(void *)int buf = &v38;
        int v30 = sub_10078BC58((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        uint64_t v31 = (std::__shared_weak_count *)v30[9];
        _OWORD v30[8] = 0;
        v30[9] = 0;
        if (v31) {
          sub_1000DB0A0(v31);
        }
        int v38 = *a3;
        *(void *)int buf = &v38;
        uint64_t v32 = sub_10078BC58((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)int buf = &v40;
        uint64_t v33 = sub_1000EAEE4(v32 + 5, &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        std::string::operator=((std::string *)(v33 + 5), a4);
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v20 == v18)
      {
        *(_DWORD *)int buf = *a3;
        sub_1000EDED4((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C7FA0);
  }
  long long v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    unint64_t v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      unint64_t v15 = (void *)*v15;
    }
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C7FA0);
    }
    long long v36 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v36 = (void *)*v36;
    }
    *(_DWORD *)char v41 = 136446466;
    *(void *)&v41[4] = v36;
    __int16 v42 = 1026;
    int v43 = a2;
    uint64_t v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::string>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v37);
    if (v37 != buf) {
      free(v37);
    }
    return 0;
  }
  return result;
}

void sub_100111F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10078431C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100111F40(uint64_t a1)
{
  *(void *)a1 = off_1022B3D98;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  *(void *)a1 = off_1022B3DE8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_100111FDC(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v7 = *a2;
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 32);
    BOOL v10 = v9 < v7;
    if (v9 >= v7) {
      int v11 = (uint64_t *)v4;
    }
    else {
      int v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3) {
    return 0;
  }
  if (v7 < *(_DWORD *)(v8 + 32)) {
    return 0;
  }
  uint64_t v12 = *(void *)(v8 + 64);
  if (!v12) {
    return 0;
  }
  std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v12 + 8));
  *(void *)(a3 + 32) = *(void *)(v12 + 32);
  std::string::operator=((std::string *)(a3 + 40), (const std::string *)(v12 + 40));
  std::string::operator=((std::string *)(a3 + 64), (const std::string *)(v12 + 64));
  std::string::operator=((std::string *)(a3 + 88), (const std::string *)(v12 + 88));
  *(_DWORD *)(a3 + 112) = *(_DWORD *)(v12 + 112);
  *(_DWORD *)(a3 + 120) = *(_DWORD *)(v12 + 120);
  std::string::operator=((std::string *)(a3 + 136), (const std::string *)(v12 + 136));
  *(void *)(a3 + 160) = *(void *)(v12 + 160);
  uint64_t v13 = *(void *)(v12 + 168);
  *(_DWORD *)(a3 + 176) = *(_DWORD *)(v12 + 176);
  *(void *)(a3 + 168) = v13;
  return 1;
}

BOOL sub_1001120BC(uint64_t a1)
{
  return sub_100114220(a1 - 120);
}

void *sub_1001120C4(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return sub_100114D18((void *)(a1 - 120), a2, a3, a4);
}

void sub_1001120CC(uint64_t a1, int a2, int a3, int a4)
{
  int v7 = (int *)(a1 + 2456);
  CFAbsoluteTimeGetCurrent();

  sub_1001154D8(v7, a2, a3, a4);
}

uint64_t sub_100112124(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  return sub_1005456A4(a1 + 64, a2, a3);
}

id sub_100112130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = [[[*(id *)(a1 - 88) vendor] proxyForService:@"CLNetworkLocationProvider"];

  return [v5 syncgetBestMatchLocation:a3 forCell:a2];
}

id sub_100112180(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  id v9 = [[objc_msgSend(*(id *)(a1 - 88), "vendor") proxyForService:@"CLCellTilesManager"];

  return _[v9 requestCellTileDownloadByType:a2 lat:a3 lon:a4 seckey:a5];
}

uint64_t sub_1001121E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x4BDA12F684BDA1) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x84BDA12F684BDA13 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x25ED097B425ED0) {
    unint64_t v9 = 0x4BDA12F684BDA1;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v25 = a1 + 2;
  if (v9) {
    BOOL v10 = (char *)sub_1001124C8(v7, v9);
  }
  else {
    BOOL v10 = 0;
  }
  int v21 = v10;
  BOOL v22 = &v10[864 * v4];
  uint64_t v23 = (uint64_t)v22;
  uint64_t v24 = &v10[864 * v9];
  uint64_t v11 = sub_100112A30((uint64_t)v22, a2);
  *(_DWORD *)(v11 + 696) = *(_DWORD *)(a2 + 696);
  long long v12 = *(_OWORD *)(a2 + 716);
  *(_OWORD *)(v11 + 700) = *(_OWORD *)(a2 + 700);
  *(_OWORD *)(v11 + 716) = v12;
  long long v13 = *(_OWORD *)(a2 + 732);
  long long v14 = *(_OWORD *)(a2 + 748);
  long long v15 = *(_OWORD *)(a2 + 780);
  *(_OWORD *)(v11 + 764) = *(_OWORD *)(a2 + 764);
  *(_OWORD *)(v11 + 780) = v15;
  *(_OWORD *)(v11 + 732) = v13;
  *(_OWORD *)(v11 + 748) = v14;
  long long v16 = *(_OWORD *)(a2 + 796);
  long long v17 = *(_OWORD *)(a2 + 812);
  long long v18 = *(_OWORD *)(a2 + 828);
  *(_OWORD *)(v11 + 840) = *(_OWORD *)(a2 + 840);
  *(_OWORD *)(v11 + 812) = v17;
  *(_OWORD *)(v11 + 828) = v18;
  *(_OWORD *)(v11 + 796) = v16;
  *(unsigned char *)(v11 + 856) = *(unsigned char *)(a2 + 856);
  v23 += 864;
  sub_100112514(a1, &v21);
  uint64_t v19 = a1[1];
  sub_1001127E8(&v21);
  return v19;
}

void sub_10011233C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001127E8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100112350(uint64_t *a1, uint64_t a2, _DWORD *a3, _OWORD *a4, unsigned char *a5)
{
  uint64_t v6 = *a1;
  unint64_t v7 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 5);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x4BDA12F684BDA1) {
    sub_1001D7FD4();
  }
  uint64_t v13 = (uint64_t)(a1 + 2);
  unint64_t v14 = 0x84BDA12F684BDA13 * ((a1[2] - v6) >> 5);
  if (2 * v14 > v8) {
    unint64_t v8 = 2 * v14;
  }
  if (v14 >= 0x25ED097B425ED0) {
    unint64_t v15 = 0x4BDA12F684BDA1;
  }
  else {
    unint64_t v15 = v8;
  }
  uint64_t v31 = a1 + 2;
  if (v15) {
    long long v16 = (char *)sub_1001124C8(v13, v15);
  }
  else {
    long long v16 = 0;
  }
  BOOL v27 = v16;
  int v28 = &v16[864 * v7];
  uint64_t v29 = (uint64_t)v28;
  int v30 = &v16[864 * v15];
  uint64_t v17 = sub_100112BF8((uint64_t)v28, a2);
  *(_DWORD *)(v17 + 696) = *a3;
  long long v18 = a4[1];
  *(_OWORD *)(v17 + 700) = *a4;
  *(_OWORD *)(v17 + 716) = v18;
  long long v19 = a4[2];
  long long v20 = a4[3];
  long long v21 = a4[5];
  *(_OWORD *)(v17 + 764) = a4[4];
  *(_OWORD *)(v17 + 780) = v21;
  *(_OWORD *)(v17 + 732) = v19;
  *(_OWORD *)(v17 + 748) = v20;
  long long v22 = a4[6];
  long long v23 = a4[7];
  long long v24 = a4[8];
  *(_OWORD *)(v17 + 840) = *(_OWORD *)((char *)a4 + 140);
  *(_OWORD *)(v17 + 812) = v23;
  *(_OWORD *)(v17 + 828) = v24;
  *(_OWORD *)(v17 + 796) = v22;
  *(unsigned char *)(v17 + 856) = *a5;
  v29 += 864;
  sub_100112514(a1, &v27);
  uint64_t v25 = a1[1];
  sub_1001127E8(&v27);
  return v25;
}

void sub_1001124B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001127E8((void **)va);
  _Unwind_Resume(a1);
}

void *sub_1001124C8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x4BDA12F684BDA2) {
    sub_1001D7FA0();
  }
  return operator new(864 * a2);
}

uint64_t sub_100112514(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10011258C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10011258C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v55 = a6;
  *((void *)&v55 + 1) = a7;
  long long v54 = v55;
  v52[0] = a1;
  v52[1] = &v54;
  _DWORD v52[2] = &v55;
  if (a3 == a5)
  {
    uint64_t v50 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = v7 - 864;
      *(_OWORD *)uint64_t v8 = *(_OWORD *)(a3 - 864);
      long long v9 = *(_OWORD *)(a3 - 848);
      long long v10 = *(_OWORD *)(a3 - 832);
      long long v11 = *(_OWORD *)(a3 - 816);
      *(_OWORD *)(v8 + 60) = *(_OWORD *)(a3 - 804);
      *(_OWORD *)(v8 + 32) = v10;
      *(_OWORD *)(v8 + 48) = v11;
      *(_OWORD *)(v8 + 16) = v9;
      *(_DWORD *)(v8 + 80) = *(_DWORD *)(a3 - 784);
      uint64_t v12 = v7 - 784;
      uint64_t v13 = a3 - 776;
      *(_OWORD *)(v12 + 16) = 0uLL;
      *(void *)(v12 + 8) = 0;
      *(_OWORD *)(v12 + 8) = *(_OWORD *)(a3 - 776);
      *(void *)(v12 + 24) = *(void *)(a3 - 760);
      *(void *)(v13 + 16) = 0;
      *(_OWORD *)uint64_t v13 = 0uLL;
      long long v14 = *(_OWORD *)(a3 - 688);
      long long v16 = *(_OWORD *)(a3 - 736);
      long long v15 = *(_OWORD *)(a3 - 720);
      *(_OWORD *)(v12 + 80) = *(_OWORD *)(a3 - 704);
      *(_OWORD *)(v12 + 96) = v14;
      *(_OWORD *)(v12 + 48) = v16;
      *(_OWORD *)(v12 + 64) = v15;
      long long v17 = *(_OWORD *)(a3 - 624);
      long long v19 = *(_OWORD *)(a3 - 672);
      long long v18 = *(_OWORD *)(a3 - 656);
      *(_OWORD *)(v12 + 144) = *(_OWORD *)(a3 - 640);
      *(_OWORD *)(v12 + 160) = v17;
      *(_OWORD *)(v12 + 112) = v19;
      *(_OWORD *)(v12 + 128) = v18;
      long long v21 = *(_OWORD *)(a3 - 592);
      long long v20 = *(_OWORD *)(a3 - 576);
      long long v22 = *(_OWORD *)(a3 - 608);
      *(_OWORD *)(v12 + 220) = *(_OWORD *)(a3 - 564);
      *(_OWORD *)(v12 + 192) = v21;
      *(_OWORD *)(v12 + 208) = v20;
      *(_OWORD *)(v12 + 176) = v22;
      *(_OWORD *)(v12 + 32) = *(_OWORD *)(a3 - 752);
      long long v23 = (void *)(a3 - 544);
      long long v24 = *(_OWORD *)(a3 - 544);
      *(void *)(v12 + 256) = *(void *)(a3 - 528);
      *(_OWORD *)(v12 + 240) = v24;
      v23[1] = 0;
      v23[2] = 0;
      *long long v23 = 0;
      uint64_t v25 = (_OWORD *)(v7 - 520);
      long long v26 = *(_OWORD *)(a3 - 424);
      long long v28 = *(_OWORD *)(a3 - 472);
      long long v27 = *(_OWORD *)(a3 - 456);
      void v25[5] = *(_OWORD *)(a3 - 440);
      v25[6] = v26;
      v25[3] = v28;
      v25[4] = v27;
      long long v29 = *(_OWORD *)(a3 - 520);
      long long v30 = *(_OWORD *)(a3 - 488);
      v25[1] = *(_OWORD *)(a3 - 504);
      v25[2] = v30;
      _OWORD *v25 = v29;
      long long v32 = *(_OWORD *)(a3 - 392);
      long long v31 = *(_OWORD *)(a3 - 376);
      long long v33 = *(_OWORD *)(a3 - 408);
      *(_DWORD *)(v12 + 424) = *(_DWORD *)(a3 - 360);
      v25[8] = v32;
      v25[9] = v31;
      v25[7] = v33;
      long long v34 = *(_OWORD *)(a3 - 352);
      long long v35 = *(_OWORD *)(a3 - 336);
      long long v36 = *(_OWORD *)(a3 - 304);
      *(_OWORD *)(v12 + 464) = *(_OWORD *)(a3 - 320);
      *(_OWORD *)(v12 + 480) = v36;
      *(_OWORD *)(v12 + 432) = v34;
      *(_OWORD *)(v12 + 448) = v35;
      long long v37 = *(_OWORD *)(a3 - 288);
      long long v38 = *(_OWORD *)(a3 - 272);
      long long v39 = *(_OWORD *)(a3 - 240);
      *(_OWORD *)(v7 - 256) = *(_OWORD *)(a3 - 256);
      *(_OWORD *)(v7 - 240) = v39;
      *(_OWORD *)(v12 + 496) = v37;
      *(_OWORD *)(v12 + 512) = v38;
      long long v40 = *(_OWORD *)(a3 - 224);
      long long v41 = *(_OWORD *)(a3 - 208);
      long long v42 = *(_OWORD *)(a3 - 192);
      *(_DWORD *)(v7 - 176) = *(_DWORD *)(a3 - 176);
      *(_OWORD *)(v7 - 208) = v41;
      *(_OWORD *)(v7 - 192) = v42;
      *(_OWORD *)(v7 - 224) = v40;
      *(_DWORD *)(v7 - 168) = *(_DWORD *)(a3 - 168);
      long long v43 = *(_OWORD *)(a3 - 164);
      *(_OWORD *)(v7 - 148) = *(_OWORD *)(a3 - 148);
      *(_OWORD *)(v7 - 164) = v43;
      long long v44 = *(_OWORD *)(a3 - 132);
      long long v45 = *(_OWORD *)(a3 - 116);
      long long v46 = *(_OWORD *)(a3 - 100);
      *(_OWORD *)(v7 - 84) = *(_OWORD *)(a3 - 84);
      *(_OWORD *)(v7 - 100) = v46;
      *(_OWORD *)(v7 - 116) = v45;
      *(_OWORD *)(v7 - 132) = v44;
      long long v47 = *(_OWORD *)(a3 - 68);
      long long v48 = *(_OWORD *)(a3 - 52);
      long long v49 = *(_OWORD *)(a3 - 36);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_OWORD *)(v7 - 36) = v49;
      *(_OWORD *)(v7 - 52) = v48;
      *(_OWORD *)(v7 - 68) = v47;
      *(unsigned char *)(v7 - 8) = *(unsigned char *)(a3 - 8);
      uint64_t v7 = *((void *)&v55 + 1) - 864;
      *((void *)&v55 + 1) -= 864;
      a3 -= 864;
    }
    while (a3 != a5);
    uint64_t v50 = v55;
  }
  char v53 = 1;
  sub_1001127B0((uint64_t)v52);
  return v50;
}

uint64_t sub_1001127B0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10068FE6C((uint64_t *)a1);
  }
  return a1;
}

void **sub_1001127E8(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10011281C(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 864;
    sub_1000FA860(v4, i - 864);
  }
}

void *sub_100112864(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_1001128EC(result, a4);
    uint64_t result = (void *)sub_100112944((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1001128CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10010FE18(&a9);
  _Unwind_Resume(a1);
}

char *sub_1001128EC(void *a1, unint64_t a2)
{
  if (a2 >= 0x4BDA12F684BDA2) {
    sub_1001D7FD4();
  }
  uint64_t result = (char *)sub_1001124C8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[864 * v4];
  return result;
}

uint64_t sub_100112944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v17 = a4;
  uint64_t v18 = a4;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  char v16 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_100112A30(v4, v6);
      *(_DWORD *)(v4 + 696) = *(_DWORD *)(v6 + 696);
      long long v7 = *(_OWORD *)(v6 + 716);
      *(_OWORD *)(v4 + 700) = *(_OWORD *)(v6 + 700);
      *(_OWORD *)(v4 + 716) = v7;
      long long v8 = *(_OWORD *)(v6 + 732);
      long long v9 = *(_OWORD *)(v6 + 748);
      long long v10 = *(_OWORD *)(v6 + 780);
      *(_OWORD *)(v4 + 764) = *(_OWORD *)(v6 + 764);
      *(_OWORD *)(v4 + 780) = v10;
      *(_OWORD *)(v4 + 732) = v8;
      *(_OWORD *)(v4 + 748) = v9;
      long long v11 = *(_OWORD *)(v6 + 796);
      long long v12 = *(_OWORD *)(v6 + 812);
      long long v13 = *(_OWORD *)(v6 + 828);
      *(_OWORD *)(v4 + 840) = *(_OWORD *)(v6 + 840);
      *(_OWORD *)(v4 + 812) = v12;
      *(_OWORD *)(v4 + 828) = v13;
      *(_OWORD *)(v4 + 796) = v11;
      *(unsigned char *)(v4 + 856) = *(unsigned char *)(v6 + 856);
      uint64_t v4 = v18 + 864;
      v18 += 864;
      v6 += 864;
    }
    while (v6 != a3);
  }
  char v16 = 1;
  sub_100112BC0((uint64_t)v15);
  return v4;
}

void sub_100112A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100112A30(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v7 = a2 + 80;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  uint64_t v8 = a1 + 88;
  *(void *)(a1 + 104) = 0;
  sub_10010F834((void *)(a1 + 88), *(const void **)(a2 + 88), *(void *)(a2 + 96), (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 2);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(v7 + 32);
  long long v9 = *(_OWORD *)(v7 + 48);
  long long v10 = *(_OWORD *)(v7 + 64);
  long long v11 = *(_OWORD *)(v7 + 80);
  *(_OWORD *)(v8 + 88) = *(_OWORD *)(v7 + 96);
  *(_OWORD *)(v8 + 72) = v11;
  *(_OWORD *)(v8 + 56) = v10;
  *(_OWORD *)(v8 + 40) = v9;
  long long v12 = *(_OWORD *)(v7 + 112);
  long long v13 = *(_OWORD *)(v7 + 128);
  long long v14 = *(_OWORD *)(v7 + 144);
  *(_OWORD *)(v8 + 152) = *(_OWORD *)(v7 + 160);
  *(_OWORD *)(v8 + 136) = v14;
  *(_OWORD *)(v8 + 120) = v13;
  *(_OWORD *)(v8 + 104) = v12;
  long long v15 = *(_OWORD *)(v7 + 176);
  long long v16 = *(_OWORD *)(v7 + 192);
  long long v17 = *(_OWORD *)(v7 + 208);
  *(_OWORD *)(v8 + 212) = *(_OWORD *)(v7 + 220);
  *(_OWORD *)(v8 + 200) = v17;
  *(_OWORD *)(v8 + 184) = v16;
  *(_OWORD *)(v8 + 168) = v15;
  uint64_t v18 = (unsigned char *)(v8 + 232);
  if (*(char *)(v7 + 263) < 0)
  {
    sub_1000DC48C(v18, *(void **)(a2 + 320), *(void *)(a2 + 328));
  }
  else
  {
    long long v19 = *(_OWORD *)(v7 + 240);
    *(void *)(v8 + 248) = *(void *)(v7 + 256);
    *(_OWORD *)uint64_t v18 = v19;
  }
  long long v20 = *(_OWORD *)(a2 + 344);
  long long v21 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v21;
  *(_OWORD *)(a1 + 344) = v20;
  long long v22 = *(_OWORD *)(a2 + 392);
  long long v23 = *(_OWORD *)(a2 + 408);
  long long v24 = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 440) = v24;
  *(_OWORD *)(a1 + 392) = v22;
  *(_OWORD *)(a1 + 408) = v23;
  long long v25 = *(_OWORD *)(a2 + 456);
  long long v26 = *(_OWORD *)(a2 + 472);
  long long v27 = *(_OWORD *)(a2 + 488);
  *(_DWORD *)(a1 + 504) = *(_DWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 472) = v26;
  *(_OWORD *)(a1 + 488) = v27;
  *(_OWORD *)(a1 + 456) = v25;
  long long v28 = *(_OWORD *)(a2 + 512);
  long long v29 = *(_OWORD *)(a2 + 528);
  long long v30 = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 560) = v30;
  *(_OWORD *)(a1 + 512) = v28;
  *(_OWORD *)(a1 + 528) = v29;
  long long v31 = *(_OWORD *)(a2 + 576);
  long long v32 = *(_OWORD *)(a2 + 592);
  long long v33 = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 624) = v33;
  *(_OWORD *)(a1 + 576) = v31;
  *(_OWORD *)(a1 + 592) = v32;
  long long v34 = *(_OWORD *)(a2 + 640);
  long long v35 = *(_OWORD *)(a2 + 656);
  long long v36 = *(_OWORD *)(a2 + 672);
  *(_DWORD *)(a1 + 688) = *(_DWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 656) = v35;
  *(_OWORD *)(a1 + 672) = v36;
  *(_OWORD *)(a1 + 640) = v34;
  return a1;
}

void sub_100112BA4(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 96) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100112BC0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10068FEC0((uint64_t *)a1);
  }
  return a1;
}

uint64_t sub_100112BF8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v7 = a2 + 80;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  uint64_t v8 = a1 + 88;
  *(void *)(a1 + 104) = 0;
  sub_10010F834((void *)(a1 + 88), *(const void **)(a2 + 88), *(void *)(a2 + 96), (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 2);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(v7 + 32);
  long long v9 = *(_OWORD *)(v7 + 48);
  long long v10 = *(_OWORD *)(v7 + 64);
  long long v11 = *(_OWORD *)(v7 + 80);
  *(_OWORD *)(v8 + 88) = *(_OWORD *)(v7 + 96);
  *(_OWORD *)(v8 + 72) = v11;
  *(_OWORD *)(v8 + 56) = v10;
  *(_OWORD *)(v8 + 40) = v9;
  long long v12 = *(_OWORD *)(v7 + 112);
  long long v13 = *(_OWORD *)(v7 + 128);
  long long v14 = *(_OWORD *)(v7 + 144);
  *(_OWORD *)(v8 + 152) = *(_OWORD *)(v7 + 160);
  *(_OWORD *)(v8 + 136) = v14;
  *(_OWORD *)(v8 + 120) = v13;
  *(_OWORD *)(v8 + 104) = v12;
  long long v15 = *(_OWORD *)(v7 + 176);
  long long v16 = *(_OWORD *)(v7 + 192);
  long long v17 = *(_OWORD *)(v7 + 208);
  *(_OWORD *)(v8 + 212) = *(_OWORD *)(v7 + 220);
  *(_OWORD *)(v8 + 200) = v17;
  *(_OWORD *)(v8 + 184) = v16;
  *(_OWORD *)(v8 + 168) = v15;
  uint64_t v18 = (unsigned char *)(v8 + 232);
  if (*(char *)(v7 + 263) < 0)
  {
    sub_1000DC48C(v18, *(void **)(a2 + 320), *(void *)(a2 + 328));
  }
  else
  {
    long long v19 = *(_OWORD *)(v7 + 240);
    *(void *)(v8 + 248) = *(void *)(v7 + 256);
    *(_OWORD *)uint64_t v18 = v19;
  }
  long long v20 = *(_OWORD *)(a2 + 344);
  long long v21 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v21;
  *(_OWORD *)(a1 + 344) = v20;
  long long v22 = *(_OWORD *)(a2 + 392);
  long long v23 = *(_OWORD *)(a2 + 408);
  long long v24 = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 440) = v24;
  *(_OWORD *)(a1 + 392) = v22;
  *(_OWORD *)(a1 + 408) = v23;
  long long v25 = *(_OWORD *)(a2 + 456);
  long long v26 = *(_OWORD *)(a2 + 472);
  long long v27 = *(_OWORD *)(a2 + 488);
  *(_DWORD *)(a1 + 504) = *(_DWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 472) = v26;
  *(_OWORD *)(a1 + 488) = v27;
  *(_OWORD *)(a1 + 456) = v25;
  long long v28 = *(_OWORD *)(a2 + 512);
  long long v29 = *(_OWORD *)(a2 + 528);
  long long v30 = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 560) = v30;
  *(_OWORD *)(a1 + 512) = v28;
  *(_OWORD *)(a1 + 528) = v29;
  long long v31 = *(_OWORD *)(a2 + 576);
  long long v32 = *(_OWORD *)(a2 + 592);
  long long v33 = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 624) = v33;
  *(_OWORD *)(a1 + 576) = v31;
  *(_OWORD *)(a1 + 592) = v32;
  long long v34 = *(_OWORD *)(a2 + 640);
  long long v35 = *(_OWORD *)(a2 + 656);
  long long v36 = *(_OWORD *)(a2 + 672);
  *(_DWORD *)(a1 + 688) = *(_DWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 656) = v35;
  *(_OWORD *)(a1 + 672) = v36;
  *(_OWORD *)(a1 + 640) = v34;
  return a1;
}

void sub_100112D6C(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 96) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_100112D88(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    int v236 = (long long *)(a2 - 864);
    unint64_t v7 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v7;
          uint64_t v8 = a2 - v7;
          unint64_t v9 = 0x84BDA12F684BDA13 * ((uint64_t)(a2 - v7) >> 5);
          if (!(!v5 & v4))
          {
            switch(v9)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (sub_10068FF2C((uint64_t)v236, v7))
                {
                  sub_100691428((long long *)v7, v236);
                  int v152 = *(_DWORD *)(v7 + 696);
                  *(_DWORD *)(v7 + 696) = *(_DWORD *)(a2 - 168);
                  *(_DWORD *)(a2 - 168) = v152;
                  long long v153 = *(_OWORD *)(v7 + 780);
                  *(_OWORD *)&v242[16] = *(_OWORD *)(v7 + 764);
                  *(_OWORD *)v243 = v153;
                  long long v154 = *(_OWORD *)(v7 + 748);
                  long long v241 = *(_OWORD *)(v7 + 732);
                  *(_OWORD *)int v242 = v154;
                  *(_OWORD *)((char *)v245 + 12) = *(_OWORD *)(v7 + 840);
                  long long v155 = *(_OWORD *)(v7 + 828);
                  long long v156 = *(_OWORD *)(v7 + 796);
                  long long v244 = *(_OWORD *)(v7 + 812);
                  v245[0] = v155;
                  *(_OWORD *)&v243[16] = v156;
                  long long v157 = *(_OWORD *)(v7 + 716);
                  long long v239 = *(_OWORD *)(v7 + 700);
                  long long v240 = v157;
                  long long v158 = *(_OWORD *)(a2 - 148);
                  *(_OWORD *)(v7 + 700) = *(_OWORD *)(a2 - 164);
                  *(_OWORD *)(v7 + 716) = v158;
                  long long v159 = *(_OWORD *)(a2 - 132);
                  long long v160 = *(_OWORD *)(a2 - 116);
                  long long v161 = *(_OWORD *)(a2 - 84);
                  *(_OWORD *)(v7 + 764) = *(_OWORD *)(a2 - 100);
                  *(_OWORD *)(v7 + 780) = v161;
                  *(_OWORD *)(v7 + 732) = v159;
                  *(_OWORD *)(v7 + 748) = v160;
                  long long v162 = *(_OWORD *)(a2 - 68);
                  long long v163 = *(_OWORD *)(a2 - 52);
                  long long v164 = *(_OWORD *)(a2 - 36);
                  *(_OWORD *)(v7 + 840) = *(_OWORD *)(a2 - 24);
                  *(_OWORD *)(v7 + 812) = v163;
                  *(_OWORD *)(v7 + 828) = v164;
                  *(_OWORD *)(v7 + 796) = v162;
                  long long v165 = v239;
                  *(_OWORD *)(a2 - 148) = v240;
                  *(_OWORD *)(a2 - 164) = v165;
                  long long v166 = v241;
                  long long v167 = *(_OWORD *)v242;
                  long long v168 = *(_OWORD *)&v242[16];
                  *(_OWORD *)(a2 - 84) = *(_OWORD *)v243;
                  *(_OWORD *)(a2 - 100) = v168;
                  *(_OWORD *)(a2 - 116) = v167;
                  *(_OWORD *)(a2 - 132) = v166;
                  long long v169 = *(_OWORD *)&v243[16];
                  long long v170 = v244;
                  long long v171 = v245[0];
                  *(_OWORD *)(a2 - 24) = *(_OWORD *)((char *)v245 + 12);
                  *(_OWORD *)(a2 - 36) = v171;
                  *(_OWORD *)(a2 - 52) = v170;
                  *(_OWORD *)(a2 - 68) = v169;
                  LOBYTE(v152) = *(unsigned char *)(v7 + 856);
                  *(unsigned char *)(v7 + 856) = *(unsigned char *)(a2 - 8);
                  *(unsigned char *)(a2 - 8) = v152;
                }
                break;
              case 3uLL:
                sub_100690B8C(v7, v7 + 864, (uint64_t)v236);
                break;
              case 4uLL:
                sub_100691804(v7, v7 + 864, v7 + 1728, (uint64_t)v236);
                break;
              case 5uLL:
                sub_10069011C(v7, v7 + 864, v7 + 1728, v7 + 2592, (uint64_t)v236);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v8 <= 20735)
          {
            if (a4)
            {
              if (v7 != a2)
              {
                uint64_t v172 = v7 + 864;
                if (v7 + 864 != a2)
                {
                  uint64_t v173 = 0;
                  uint64_t v174 = v7;
                  do
                  {
                    uint64_t v175 = (long long *)v172;
                    if (sub_10068FF2C(v172, v174))
                    {
                      long long v239 = *v175;
                      long long v176 = v175[1];
                      long long v177 = v175[2];
                      long long v178 = v175[3];
                      *(_OWORD *)&v242[12] = *(long long *)((char *)v175 + 60);
                      long long v241 = v177;
                      *(_OWORD *)int v242 = v178;
                      long long v240 = v176;
                      *(_DWORD *)v243 = *(_DWORD *)(v174 + 944);
                      *(_OWORD *)&v243[8] = *(_OWORD *)(v174 + 952);
                      *(void *)&v243[24] = *(void *)(v174 + 968);
                      *(void *)(v174 + 968) = 0;
                      *(void *)(v174 + 952) = 0;
                      *(void *)(v174 + 960) = 0;
                      long long v179 = *(_OWORD *)(v174 + 976);
                      long long v180 = *(_OWORD *)(v174 + 992);
                      long long v181 = *(_OWORD *)(v174 + 1024);
                      long long v182 = *(_OWORD *)(v174 + 1040);
                      v245[1] = *(_OWORD *)(v174 + 1008);
                      long long v246 = v181;
                      long long v244 = v179;
                      v245[0] = v180;
                      long long v183 = *(_OWORD *)(v174 + 1056);
                      long long v184 = *(_OWORD *)(v174 + 1088);
                      long long v185 = *(_OWORD *)(v174 + 1104);
                      long long v249 = *(_OWORD *)(v174 + 1072);
                      long long v250 = v184;
                      long long v247 = v182;
                      long long v248 = v183;
                      long long v186 = *(_OWORD *)(v174 + 1120);
                      long long v187 = *(_OWORD *)(v174 + 1136);
                      *(_OWORD *)((char *)v254 + 12) = *(_OWORD *)(v174 + 1164);
                      long long v188 = *(_OWORD *)(v174 + 1152);
                      long long v253 = v187;
                      v254[0] = v188;
                      long long v251 = v185;
                      long long v252 = v186;
                      long long __p = *(_OWORD *)(v174 + 1184);
                      uint64_t v256 = *(void *)(v174 + 1200);
                      *(void *)(v174 + 1184) = 0;
                      *(void *)(v174 + 1200) = 0;
                      *(void *)(v174 + 1192) = 0;
                      long long v189 = *(_OWORD *)(v174 + 1352);
                      long long v265 = *(_OWORD *)(v174 + 1336);
                      long long v266 = v189;
                      int v267 = *(_DWORD *)(v174 + 1368);
                      long long v190 = *(_OWORD *)(v174 + 1288);
                      long long v261 = *(_OWORD *)(v174 + 1272);
                      long long v262 = v190;
                      long long v191 = *(_OWORD *)(v174 + 1320);
                      long long v263 = *(_OWORD *)(v174 + 1304);
                      long long v264 = v191;
                      long long v192 = *(_OWORD *)(v174 + 1224);
                      long long v257 = *(_OWORD *)(v174 + 1208);
                      long long v258 = v192;
                      long long v193 = *(_OWORD *)(v174 + 1256);
                      long long v259 = *(_OWORD *)(v174 + 1240);
                      long long v260 = v193;
                      long long v194 = *(_OWORD *)(v174 + 1520);
                      long long v276 = *(_OWORD *)(v174 + 1504);
                      long long v277 = v194;
                      long long v278 = *(_OWORD *)(v174 + 1536);
                      int v279 = *(_DWORD *)(v174 + 1552);
                      long long v195 = *(_OWORD *)(v174 + 1456);
                      long long v272 = *(_OWORD *)(v174 + 1440);
                      long long v273 = v195;
                      long long v196 = *(_OWORD *)(v174 + 1488);
                      long long v274 = *(_OWORD *)(v174 + 1472);
                      long long v275 = v196;
                      long long v197 = *(_OWORD *)(v174 + 1392);
                      long long v268 = *(_OWORD *)(v174 + 1376);
                      long long v269 = v197;
                      long long v198 = *(_OWORD *)(v174 + 1424);
                      long long v270 = *(_OWORD *)(v174 + 1408);
                      long long v271 = v198;
                      int v280 = *(_DWORD *)(v174 + 1560);
                      long long v199 = *(_OWORD *)(v174 + 1676);
                      long long v287 = *(_OWORD *)(v174 + 1660);
                      long long v288 = v199;
                      *(_OWORD *)v289 = *(_OWORD *)(v174 + 1692);
                      *(_OWORD *)&v289[12] = *(_OWORD *)(v174 + 1704);
                      long long v200 = *(_OWORD *)(v174 + 1612);
                      long long v283 = *(_OWORD *)(v174 + 1596);
                      long long v284 = v200;
                      long long v201 = *(_OWORD *)(v174 + 1644);
                      long long v285 = *(_OWORD *)(v174 + 1628);
                      long long v286 = v201;
                      long long v202 = *(_OWORD *)(v174 + 1580);
                      long long v281 = *(_OWORD *)(v174 + 1564);
                      long long v282 = v202;
                      uint64_t v203 = v173;
                      char v290 = *(unsigned char *)(v174 + 1720);
                      while (1)
                      {
                        sub_100691AC4(v7 + v203 + 864, v7 + v203);
                        if (!v203) {
                          break;
                        }
                        char v204 = sub_10068FF2C((uint64_t)&v239, v7 + v203 - 864);
                        v203 -= 864;
                        if ((v204 & 1) == 0)
                        {
                          uint64_t v205 = v7 + v203 + 864;
                          goto LABEL_77;
                        }
                      }
                      uint64_t v205 = v7;
LABEL_77:
                      sub_100691AC4(v205, (uint64_t)&v239);
                      if (SHIBYTE(v256) < 0) {
                        operator delete((void *)__p);
                      }
                      if (*(void *)&v243[8])
                      {
                        *(void *)&v243[16] = *(void *)&v243[8];
                        operator delete(*(void **)&v243[8]);
                      }
                    }
                    uint64_t v172 = (uint64_t)(v175 + 54);
                    v173 += 864;
                    uint64_t v174 = (uint64_t)v175;
                  }
                  while (v175 + 54 != (long long *)a2);
                }
              }
            }
            else if (v7 != a2)
            {
              uint64_t v206 = v7 + 864;
              if (v7 + 864 != a2)
              {
                do
                {
                  long long v207 = (long long *)v206;
                  if (sub_10068FF2C(v206, a1))
                  {
                    long long v239 = *v207;
                    long long v208 = v207[1];
                    long long v209 = v207[2];
                    long long v210 = v207[3];
                    *(_OWORD *)&v242[12] = *(long long *)((char *)v207 + 60);
                    long long v241 = v209;
                    *(_OWORD *)int v242 = v210;
                    long long v240 = v208;
                    *(_DWORD *)v243 = *(_DWORD *)(a1 + 944);
                    *(_OWORD *)&v243[8] = *(_OWORD *)(a1 + 952);
                    *(void *)&v243[24] = *(void *)(a1 + 968);
                    *(void *)(a1 + 968) = 0;
                    *(void *)(a1 + 952) = 0;
                    *(void *)(a1 + 960) = 0;
                    long long v211 = *(_OWORD *)(a1 + 976);
                    long long v212 = *(_OWORD *)(a1 + 992);
                    long long v213 = *(_OWORD *)(a1 + 1024);
                    long long v214 = *(_OWORD *)(a1 + 1040);
                    v245[1] = *(_OWORD *)(a1 + 1008);
                    long long v246 = v213;
                    long long v244 = v211;
                    v245[0] = v212;
                    long long v215 = *(_OWORD *)(a1 + 1056);
                    long long v216 = *(_OWORD *)(a1 + 1088);
                    long long v217 = *(_OWORD *)(a1 + 1104);
                    long long v249 = *(_OWORD *)(a1 + 1072);
                    long long v250 = v216;
                    long long v247 = v214;
                    long long v248 = v215;
                    long long v218 = *(_OWORD *)(a1 + 1120);
                    long long v219 = *(_OWORD *)(a1 + 1136);
                    *(_OWORD *)((char *)v254 + 12) = *(_OWORD *)(a1 + 1164);
                    long long v220 = *(_OWORD *)(a1 + 1152);
                    long long v253 = v219;
                    v254[0] = v220;
                    long long v251 = v217;
                    long long v252 = v218;
                    long long __p = *(_OWORD *)(a1 + 1184);
                    uint64_t v256 = *(void *)(a1 + 1200);
                    *(void *)(a1 + 1184) = 0;
                    *(void *)(a1 + 1200) = 0;
                    *(void *)(a1 + 1192) = 0;
                    long long v221 = *(_OWORD *)(a1 + 1352);
                    long long v265 = *(_OWORD *)(a1 + 1336);
                    long long v266 = v221;
                    int v267 = *(_DWORD *)(a1 + 1368);
                    long long v222 = *(_OWORD *)(a1 + 1288);
                    long long v261 = *(_OWORD *)(a1 + 1272);
                    long long v262 = v222;
                    long long v223 = *(_OWORD *)(a1 + 1320);
                    long long v263 = *(_OWORD *)(a1 + 1304);
                    long long v264 = v223;
                    long long v224 = *(_OWORD *)(a1 + 1224);
                    long long v257 = *(_OWORD *)(a1 + 1208);
                    long long v258 = v224;
                    long long v225 = *(_OWORD *)(a1 + 1256);
                    long long v259 = *(_OWORD *)(a1 + 1240);
                    long long v260 = v225;
                    long long v226 = *(_OWORD *)(a1 + 1520);
                    long long v276 = *(_OWORD *)(a1 + 1504);
                    long long v277 = v226;
                    long long v278 = *(_OWORD *)(a1 + 1536);
                    int v279 = *(_DWORD *)(a1 + 1552);
                    long long v227 = *(_OWORD *)(a1 + 1456);
                    long long v272 = *(_OWORD *)(a1 + 1440);
                    long long v273 = v227;
                    long long v228 = *(_OWORD *)(a1 + 1488);
                    long long v274 = *(_OWORD *)(a1 + 1472);
                    long long v275 = v228;
                    long long v229 = *(_OWORD *)(a1 + 1392);
                    long long v268 = *(_OWORD *)(a1 + 1376);
                    long long v269 = v229;
                    long long v230 = *(_OWORD *)(a1 + 1424);
                    long long v270 = *(_OWORD *)(a1 + 1408);
                    long long v271 = v230;
                    int v280 = *(_DWORD *)(a1 + 1560);
                    long long v231 = *(_OWORD *)(a1 + 1676);
                    long long v287 = *(_OWORD *)(a1 + 1660);
                    long long v288 = v231;
                    *(_OWORD *)v289 = *(_OWORD *)(a1 + 1692);
                    *(_OWORD *)&v289[12] = *(_OWORD *)(a1 + 1704);
                    long long v232 = *(_OWORD *)(a1 + 1612);
                    long long v283 = *(_OWORD *)(a1 + 1596);
                    long long v284 = v232;
                    long long v233 = *(_OWORD *)(a1 + 1644);
                    long long v285 = *(_OWORD *)(a1 + 1628);
                    long long v286 = v233;
                    long long v234 = *(_OWORD *)(a1 + 1580);
                    long long v281 = *(_OWORD *)(a1 + 1564);
                    long long v282 = v234;
                    char v290 = *(unsigned char *)(a1 + 1720);
                    do
                    {
                      sub_100691AC4(a1 + 864, a1);
                      a1 -= 864;
                    }
                    while ((sub_10068FF2C((uint64_t)&v239, a1) & 1) != 0);
                    sub_100691AC4(a1 + 864, (uint64_t)&v239);
                    if (SHIBYTE(v256) < 0) {
                      operator delete((void *)__p);
                    }
                    if (*(void *)&v243[8])
                    {
                      *(void *)&v243[16] = *(void *)&v243[8];
                      operator delete(*(void **)&v243[8]);
                    }
                  }
                  uint64_t v206 = (uint64_t)(v207 + 54);
                  a1 = (uint64_t)v207;
                }
                while (v207 + 54 != (long long *)a2);
              }
            }
            return;
          }
          if (!a3)
          {
            sub_1006904B8(v7, a2, a2);
            return;
          }
          unint64_t v10 = v9 >> 1;
          uint64_t v11 = v7 + 864 * (v9 >> 1);
          if ((unint64_t)v8 > 0x1B000)
          {
            sub_100690B8C(a1, a1 + 864 * (v9 >> 1), (uint64_t)v236);
            uint64_t v12 = 864 * v10;
            sub_100690B8C(a1 + 864, v12 + a1 - 864, a2 - 1728);
            sub_100690B8C(a1 + 1728, a1 + 864 + v12, a2 - 2592);
            sub_100690B8C(v12 + a1 - 864, v11, a1 + 864 + v12);
            sub_100691428((long long *)a1, (long long *)v11);
            int v13 = *(_DWORD *)(a1 + 696);
            *(_DWORD *)(a1 + 696) = *(_DWORD *)(v11 + 696);
            *(_DWORD *)(v11 + 696) = v13;
            long long v14 = *(_OWORD *)(a1 + 780);
            *(_OWORD *)&v242[16] = *(_OWORD *)(a1 + 764);
            *(_OWORD *)v243 = v14;
            long long v15 = *(_OWORD *)(a1 + 748);
            long long v241 = *(_OWORD *)(a1 + 732);
            *(_OWORD *)int v242 = v15;
            *(_OWORD *)((char *)v245 + 12) = *(_OWORD *)(a1 + 840);
            long long v16 = *(_OWORD *)(a1 + 828);
            long long v17 = *(_OWORD *)(a1 + 796);
            long long v244 = *(_OWORD *)(a1 + 812);
            v245[0] = v16;
            *(_OWORD *)&v243[16] = v17;
            long long v18 = *(_OWORD *)(a1 + 716);
            long long v239 = *(_OWORD *)(a1 + 700);
            long long v240 = v18;
            long long v19 = *(_OWORD *)(v11 + 716);
            *(_OWORD *)(a1 + 700) = *(_OWORD *)(v11 + 700);
            *(_OWORD *)(a1 + 716) = v19;
            long long v20 = *(_OWORD *)(v11 + 732);
            long long v21 = *(_OWORD *)(v11 + 748);
            long long v22 = *(_OWORD *)(v11 + 780);
            *(_OWORD *)(a1 + 764) = *(_OWORD *)(v11 + 764);
            *(_OWORD *)(a1 + 780) = v22;
            *(_OWORD *)(a1 + 732) = v20;
            *(_OWORD *)(a1 + 748) = v21;
            long long v23 = *(_OWORD *)(v11 + 796);
            long long v24 = *(_OWORD *)(v11 + 812);
            long long v25 = *(_OWORD *)(v11 + 828);
            *(_OWORD *)(a1 + 840) = *(_OWORD *)(v11 + 840);
            *(_OWORD *)(a1 + 812) = v24;
            *(_OWORD *)(a1 + 828) = v25;
            *(_OWORD *)(a1 + 796) = v23;
            long long v26 = v240;
            *(_OWORD *)(v11 + 700) = v239;
            *(_OWORD *)(v11 + 716) = v26;
            long long v27 = v241;
            long long v28 = *(_OWORD *)v242;
            long long v29 = *(_OWORD *)v243;
            *(_OWORD *)(v11 + 764) = *(_OWORD *)&v242[16];
            *(_OWORD *)(v11 + 780) = v29;
            *(_OWORD *)(v11 + 732) = v27;
            *(_OWORD *)(v11 + 748) = v28;
            long long v30 = *(_OWORD *)&v243[16];
            long long v31 = v244;
            long long v32 = v245[0];
            *(_OWORD *)(v11 + 840) = *(_OWORD *)((char *)v245 + 12);
            *(_OWORD *)(v11 + 812) = v31;
            *(_OWORD *)(v11 + 828) = v32;
            *(_OWORD *)(v11 + 796) = v30;
            LOBYTE(v13) = *(unsigned char *)(a1 + 856);
            *(unsigned char *)(a1 + 856) = *(unsigned char *)(v11 + 856);
            *(unsigned char *)(v11 + 856) = v13;
          }
          else
          {
            sub_100690B8C(a1 + 864 * (v9 >> 1), a1, (uint64_t)v236);
          }
          --a3;
          if (a4 & 1) != 0 || (sub_10068FF2C(a1 - 864, a1)) {
            break;
          }
          long long v239 = *(_OWORD *)a1;
          long long v95 = *(_OWORD *)(a1 + 16);
          long long v96 = *(_OWORD *)(a1 + 32);
          long long v97 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&v242[12] = *(_OWORD *)(a1 + 60);
          long long v241 = v96;
          *(_OWORD *)int v242 = v97;
          int v98 = *(_DWORD *)(a1 + 80);
          long long v240 = v95;
          *(_DWORD *)v243 = v98;
          *(_OWORD *)&v243[8] = *(_OWORD *)(a1 + 88);
          *(void *)&v243[24] = *(void *)(a1 + 104);
          *(void *)(a1 + 96) = 0;
          *(void *)(a1 + 104) = 0;
          *(void *)(a1 + 88) = 0;
          long long v244 = *(_OWORD *)(a1 + 112);
          long long v99 = *(_OWORD *)(a1 + 128);
          long long v100 = *(_OWORD *)(a1 + 144);
          long long v101 = *(_OWORD *)(a1 + 176);
          long long v246 = *(_OWORD *)(a1 + 160);
          long long v247 = v101;
          v245[0] = v99;
          v245[1] = v100;
          long long v102 = *(_OWORD *)(a1 + 192);
          long long v103 = *(_OWORD *)(a1 + 208);
          long long v104 = *(_OWORD *)(a1 + 240);
          long long v250 = *(_OWORD *)(a1 + 224);
          long long v251 = v104;
          long long v248 = v102;
          long long v249 = v103;
          long long v105 = *(_OWORD *)(a1 + 256);
          long long v106 = *(_OWORD *)(a1 + 272);
          long long v107 = *(_OWORD *)(a1 + 288);
          *(_OWORD *)((char *)v254 + 12) = *(_OWORD *)(a1 + 300);
          long long v253 = v106;
          v254[0] = v107;
          long long v252 = v105;
          long long v108 = *(_OWORD *)(a1 + 320);
          uint64_t v256 = *(void *)(a1 + 336);
          long long __p = v108;
          *(void *)(a1 + 328) = 0;
          *(void *)(a1 + 336) = 0;
          *(void *)(a1 + 320) = 0;
          long long v109 = *(_OWORD *)(a1 + 440);
          long long v111 = *(_OWORD *)(a1 + 392);
          long long v110 = *(_OWORD *)(a1 + 408);
          long long v262 = *(_OWORD *)(a1 + 424);
          long long v263 = v109;
          long long v260 = v111;
          long long v261 = v110;
          long long v112 = *(_OWORD *)(a1 + 344);
          long long v113 = *(_OWORD *)(a1 + 376);
          long long v258 = *(_OWORD *)(a1 + 360);
          long long v259 = v113;
          long long v257 = v112;
          long long v115 = *(_OWORD *)(a1 + 472);
          long long v114 = *(_OWORD *)(a1 + 488);
          long long v116 = *(_OWORD *)(a1 + 456);
          int v267 = *(_DWORD *)(a1 + 504);
          long long v265 = v115;
          long long v266 = v114;
          long long v264 = v116;
          long long v117 = *(_OWORD *)(a1 + 512);
          long long v118 = *(_OWORD *)(a1 + 528);
          long long v119 = *(_OWORD *)(a1 + 560);
          long long v270 = *(_OWORD *)(a1 + 544);
          long long v271 = v119;
          long long v268 = v117;
          long long v269 = v118;
          long long v120 = *(_OWORD *)(a1 + 576);
          long long v121 = *(_OWORD *)(a1 + 592);
          long long v122 = *(_OWORD *)(a1 + 624);
          long long v274 = *(_OWORD *)(a1 + 608);
          long long v275 = v122;
          long long v272 = v120;
          long long v273 = v121;
          long long v123 = *(_OWORD *)(a1 + 640);
          long long v124 = *(_OWORD *)(a1 + 656);
          long long v125 = *(_OWORD *)(a1 + 672);
          int v279 = *(_DWORD *)(a1 + 688);
          long long v277 = v124;
          long long v278 = v125;
          long long v276 = v123;
          int v280 = *(_DWORD *)(a1 + 696);
          long long v126 = *(_OWORD *)(a1 + 716);
          long long v281 = *(_OWORD *)(a1 + 700);
          long long v282 = v126;
          long long v127 = *(_OWORD *)(a1 + 780);
          long long v129 = *(_OWORD *)(a1 + 732);
          long long v128 = *(_OWORD *)(a1 + 748);
          long long v285 = *(_OWORD *)(a1 + 764);
          long long v286 = v127;
          long long v283 = v129;
          long long v284 = v128;
          long long v131 = *(_OWORD *)(a1 + 812);
          long long v130 = *(_OWORD *)(a1 + 828);
          long long v132 = *(_OWORD *)(a1 + 796);
          *(_OWORD *)&v289[12] = *(_OWORD *)(a1 + 840);
          long long v288 = v131;
          *(_OWORD *)v289 = v130;
          long long v287 = v132;
          char v290 = *(unsigned char *)(a1 + 856);
          if (sub_10068FF2C((uint64_t)&v239, (uint64_t)v236))
          {
            unint64_t v7 = a1;
            do
              v7 += 864;
            while ((sub_10068FF2C((uint64_t)&v239, v7) & 1) == 0);
          }
          else
          {
            unint64_t v133 = a1 + 864;
            do
            {
              unint64_t v7 = v133;
              if (v133 >= a2) {
                break;
              }
              int v134 = sub_10068FF2C((uint64_t)&v239, v133);
              unint64_t v133 = v7 + 864;
            }
            while (!v134);
          }
          unint64_t v135 = a2;
          if (v7 < a2)
          {
            unint64_t v135 = a2;
            do
              v135 -= 864;
            while ((sub_10068FF2C((uint64_t)&v239, v135) & 1) != 0);
          }
          while (v7 < v135)
          {
            sub_100691428((long long *)v7, (long long *)v135);
            int v136 = *(_DWORD *)(v7 + 696);
            *(_DWORD *)(v7 + 696) = *(_DWORD *)(v135 + 696);
            *(_DWORD *)(v135 + 696) = v136;
            long long v137 = *(_OWORD *)(v7 + 812);
            long long v297 = *(_OWORD *)(v7 + 796);
            long long v298 = v137;
            v299[0] = *(_OWORD *)(v7 + 828);
            *(_OWORD *)((char *)v299 + 12) = *(_OWORD *)(v7 + 840);
            long long v138 = *(_OWORD *)(v7 + 748);
            long long v293 = *(_OWORD *)(v7 + 732);
            long long v294 = v138;
            long long v139 = *(_OWORD *)(v7 + 780);
            long long v295 = *(_OWORD *)(v7 + 764);
            long long v296 = v139;
            long long v140 = *(_OWORD *)(v7 + 716);
            long long v291 = *(_OWORD *)(v7 + 700);
            long long v292 = v140;
            long long v141 = *(_OWORD *)(v135 + 716);
            *(_OWORD *)(v7 + 700) = *(_OWORD *)(v135 + 700);
            *(_OWORD *)(v7 + 716) = v141;
            long long v142 = *(_OWORD *)(v135 + 732);
            long long v143 = *(_OWORD *)(v135 + 748);
            long long v144 = *(_OWORD *)(v135 + 780);
            *(_OWORD *)(v7 + 764) = *(_OWORD *)(v135 + 764);
            *(_OWORD *)(v7 + 780) = v144;
            *(_OWORD *)(v7 + 732) = v142;
            *(_OWORD *)(v7 + 748) = v143;
            long long v145 = *(_OWORD *)(v135 + 796);
            long long v146 = *(_OWORD *)(v135 + 812);
            long long v147 = *(_OWORD *)(v135 + 828);
            *(_OWORD *)(v7 + 840) = *(_OWORD *)(v135 + 840);
            *(_OWORD *)(v7 + 812) = v146;
            *(_OWORD *)(v7 + 828) = v147;
            *(_OWORD *)(v7 + 796) = v145;
            long long v148 = v298;
            *(_OWORD *)(v135 + 796) = v297;
            *(_OWORD *)(v135 + 812) = v148;
            *(_OWORD *)(v135 + 828) = v299[0];
            *(_OWORD *)(v135 + 840) = *(_OWORD *)((char *)v299 + 12);
            long long v149 = v294;
            *(_OWORD *)(v135 + 732) = v293;
            *(_OWORD *)(v135 + 748) = v149;
            long long v150 = v296;
            *(_OWORD *)(v135 + 764) = v295;
            *(_OWORD *)(v135 + 780) = v150;
            long long v151 = v292;
            *(_OWORD *)(v135 + 700) = v291;
            *(_OWORD *)(v135 + 716) = v151;
            LOBYTE(v136) = *(unsigned char *)(v7 + 856);
            *(unsigned char *)(v7 + 856) = *(unsigned char *)(v135 + 856);
            *(unsigned char *)(v135 + 856) = v136;
            do
              v7 += 864;
            while (!sub_10068FF2C((uint64_t)&v239, v7));
            do
              v135 -= 864;
            while ((sub_10068FF2C((uint64_t)&v239, v135) & 1) != 0);
          }
          if (v7 - 864 != a1) {
            sub_100691AC4(a1, v7 - 864);
          }
          sub_100691AC4(v7 - 864, (uint64_t)&v239);
          if (SHIBYTE(v256) < 0) {
            operator delete((void *)__p);
          }
          if (*(void *)&v243[8])
          {
            *(void *)&v243[16] = *(void *)&v243[8];
            operator delete(*(void **)&v243[8]);
          }
          a4 = 0;
        }
        uint64_t v33 = 0;
        long long v239 = *(_OWORD *)a1;
        long long v34 = *(_OWORD *)(a1 + 16);
        long long v35 = *(_OWORD *)(a1 + 32);
        long long v36 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)&v242[12] = *(_OWORD *)(a1 + 60);
        *(_DWORD *)v243 = *(_DWORD *)(a1 + 80);
        long long v37 = *(_OWORD *)(a1 + 88);
        *(void *)&v243[24] = *(void *)(a1 + 104);
        long long v241 = v35;
        *(_OWORD *)int v242 = v36;
        long long v240 = v34;
        *(_OWORD *)&v243[8] = v37;
        *(void *)(a1 + 96) = 0;
        *(void *)(a1 + 104) = 0;
        *(void *)(a1 + 88) = 0;
        long long v244 = *(_OWORD *)(a1 + 112);
        long long v38 = *(_OWORD *)(a1 + 128);
        long long v39 = *(_OWORD *)(a1 + 144);
        long long v40 = *(_OWORD *)(a1 + 176);
        long long v246 = *(_OWORD *)(a1 + 160);
        long long v247 = v40;
        v245[0] = v38;
        v245[1] = v39;
        long long v41 = *(_OWORD *)(a1 + 192);
        long long v42 = *(_OWORD *)(a1 + 208);
        long long v43 = *(_OWORD *)(a1 + 240);
        long long v250 = *(_OWORD *)(a1 + 224);
        long long v251 = v43;
        long long v248 = v41;
        long long v249 = v42;
        long long v44 = *(_OWORD *)(a1 + 256);
        long long v45 = *(_OWORD *)(a1 + 272);
        long long v46 = *(_OWORD *)(a1 + 288);
        *(_OWORD *)((char *)v254 + 12) = *(_OWORD *)(a1 + 300);
        long long v253 = v45;
        v254[0] = v46;
        long long v252 = v44;
        long long v47 = *(_OWORD *)(a1 + 320);
        uint64_t v256 = *(void *)(a1 + 336);
        long long __p = v47;
        *(void *)(a1 + 328) = 0;
        *(void *)(a1 + 336) = 0;
        *(void *)(a1 + 320) = 0;
        long long v48 = *(_OWORD *)(a1 + 440);
        long long v50 = *(_OWORD *)(a1 + 392);
        long long v49 = *(_OWORD *)(a1 + 408);
        long long v262 = *(_OWORD *)(a1 + 424);
        long long v263 = v48;
        long long v260 = v50;
        long long v261 = v49;
        long long v51 = *(_OWORD *)(a1 + 344);
        long long v52 = *(_OWORD *)(a1 + 376);
        long long v258 = *(_OWORD *)(a1 + 360);
        long long v259 = v52;
        long long v257 = v51;
        long long v54 = *(_OWORD *)(a1 + 472);
        long long v53 = *(_OWORD *)(a1 + 488);
        long long v55 = *(_OWORD *)(a1 + 456);
        int v267 = *(_DWORD *)(a1 + 504);
        long long v265 = v54;
        long long v266 = v53;
        long long v264 = v55;
        long long v56 = *(_OWORD *)(a1 + 512);
        long long v57 = *(_OWORD *)(a1 + 528);
        long long v58 = *(_OWORD *)(a1 + 560);
        long long v270 = *(_OWORD *)(a1 + 544);
        long long v271 = v58;
        long long v268 = v56;
        long long v269 = v57;
        long long v59 = *(_OWORD *)(a1 + 576);
        long long v60 = *(_OWORD *)(a1 + 592);
        long long v61 = *(_OWORD *)(a1 + 624);
        long long v274 = *(_OWORD *)(a1 + 608);
        long long v275 = v61;
        long long v272 = v59;
        long long v273 = v60;
        long long v62 = *(_OWORD *)(a1 + 640);
        long long v63 = *(_OWORD *)(a1 + 656);
        long long v64 = *(_OWORD *)(a1 + 672);
        int v279 = *(_DWORD *)(a1 + 688);
        long long v277 = v63;
        long long v278 = v64;
        long long v276 = v62;
        int v280 = *(_DWORD *)(a1 + 696);
        long long v65 = *(_OWORD *)(a1 + 716);
        long long v281 = *(_OWORD *)(a1 + 700);
        long long v282 = v65;
        long long v66 = *(_OWORD *)(a1 + 780);
        long long v68 = *(_OWORD *)(a1 + 732);
        long long v67 = *(_OWORD *)(a1 + 748);
        long long v285 = *(_OWORD *)(a1 + 764);
        long long v286 = v66;
        long long v283 = v68;
        long long v284 = v67;
        long long v70 = *(_OWORD *)(a1 + 812);
        long long v69 = *(_OWORD *)(a1 + 828);
        long long v71 = *(_OWORD *)(a1 + 796);
        *(_OWORD *)&v289[12] = *(_OWORD *)(a1 + 840);
        long long v288 = v70;
        *(_OWORD *)v289 = v69;
        long long v287 = v71;
        char v290 = *(unsigned char *)(a1 + 856);
        do
        {
          char v72 = sub_10068FF2C(a1 + v33 + 864, (uint64_t)&v239);
          v33 += 864;
        }
        while ((v72 & 1) != 0);
        unint64_t v73 = a1 + v33;
        unint64_t v74 = a2;
        if (v33 == 864)
        {
          unint64_t v74 = a2;
          do
          {
            if (v73 >= v74) {
              break;
            }
            v74 -= 864;
          }
          while ((sub_10068FF2C(v74, (uint64_t)&v239) & 1) == 0);
        }
        else
        {
          do
            v74 -= 864;
          while (!sub_10068FF2C(v74, (uint64_t)&v239));
        }
        if (v73 >= v74)
        {
          uint64_t v93 = v73 - 864;
        }
        else
        {
          unint64_t v75 = a1 + v33;
          unint64_t v76 = v74;
          do
          {
            sub_100691428((long long *)v75, (long long *)v76);
            int v77 = *(_DWORD *)(v75 + 696);
            *(_DWORD *)(v75 + 696) = *(_DWORD *)(v76 + 696);
            *(_DWORD *)(v76 + 696) = v77;
            long long v78 = *(_OWORD *)(v75 + 812);
            long long v297 = *(_OWORD *)(v75 + 796);
            long long v298 = v78;
            v299[0] = *(_OWORD *)(v75 + 828);
            *(_OWORD *)((char *)v299 + 12) = *(_OWORD *)(v75 + 840);
            long long v79 = *(_OWORD *)(v75 + 748);
            long long v293 = *(_OWORD *)(v75 + 732);
            long long v294 = v79;
            long long v80 = *(_OWORD *)(v75 + 780);
            long long v295 = *(_OWORD *)(v75 + 764);
            long long v296 = v80;
            long long v81 = *(_OWORD *)(v75 + 716);
            long long v291 = *(_OWORD *)(v75 + 700);
            long long v292 = v81;
            long long v82 = *(_OWORD *)(v76 + 716);
            *(_OWORD *)(v75 + 700) = *(_OWORD *)(v76 + 700);
            *(_OWORD *)(v75 + 716) = v82;
            long long v83 = *(_OWORD *)(v76 + 732);
            long long v84 = *(_OWORD *)(v76 + 748);
            long long v85 = *(_OWORD *)(v76 + 780);
            *(_OWORD *)(v75 + 764) = *(_OWORD *)(v76 + 764);
            *(_OWORD *)(v75 + 780) = v85;
            *(_OWORD *)(v75 + 732) = v83;
            *(_OWORD *)(v75 + 748) = v84;
            long long v86 = *(_OWORD *)(v76 + 796);
            long long v87 = *(_OWORD *)(v76 + 812);
            long long v88 = *(_OWORD *)(v76 + 828);
            *(_OWORD *)(v75 + 840) = *(_OWORD *)(v76 + 840);
            *(_OWORD *)(v75 + 812) = v87;
            *(_OWORD *)(v75 + 828) = v88;
            *(_OWORD *)(v75 + 796) = v86;
            long long v89 = v298;
            *(_OWORD *)(v76 + 796) = v297;
            *(_OWORD *)(v76 + 812) = v89;
            *(_OWORD *)(v76 + 828) = v299[0];
            *(_OWORD *)(v76 + 840) = *(_OWORD *)((char *)v299 + 12);
            long long v90 = v294;
            *(_OWORD *)(v76 + 732) = v293;
            *(_OWORD *)(v76 + 748) = v90;
            long long v91 = v296;
            *(_OWORD *)(v76 + 764) = v295;
            *(_OWORD *)(v76 + 780) = v91;
            long long v92 = v292;
            *(_OWORD *)(v76 + 700) = v291;
            *(_OWORD *)(v76 + 716) = v92;
            LOBYTE(v77) = *(unsigned char *)(v75 + 856);
            *(unsigned char *)(v75 + 856) = *(unsigned char *)(v76 + 856);
            *(unsigned char *)(v76 + 856) = v77;
            do
              v75 += 864;
            while ((sub_10068FF2C(v75, (uint64_t)&v239) & 1) != 0);
            do
              v76 -= 864;
            while (!sub_10068FF2C(v76, (uint64_t)&v239));
          }
          while (v75 < v76);
          uint64_t v93 = v75 - 864;
        }
        if (v93 != a1) {
          sub_100691AC4(a1, v93);
        }
        sub_100691AC4(v93, (uint64_t)&v239);
        if (SHIBYTE(v256) < 0) {
          operator delete((void *)__p);
        }
        if (*(void *)&v243[8])
        {
          *(void *)&v243[16] = *(void *)&v243[8];
          operator delete(*(void **)&v243[8]);
        }
        if (v73 >= v74) {
          break;
        }
LABEL_36:
        sub_100112D88(a1, v93, a3, a4 & 1);
        a4 = 0;
        unint64_t v7 = v93 + 864;
      }
      BOOL v94 = sub_100690FB4(a1, v93);
      unint64_t v7 = v93 + 864;
      if (sub_100690FB4(v93 + 864, a2)) {
        break;
      }
      if (!v94) {
        goto LABEL_36;
      }
    }
    a2 = v93;
    if (!v94) {
      continue;
    }
    break;
  }
}

void sub_100113C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a62 < 0) {
    operator delete(__p);
  }
  if (a28) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100113C7C(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 3) {
    goto LABEL_4;
  }
  if (v2 == 9)
  {
    int v3 = *(_DWORD *)(a1 + 44);
    int v4 = *(unsigned __int16 *)(a1 + 48);
  }
  else
  {
    if (v2 == 7)
    {
LABEL_4:
      int v3 = *(_DWORD *)(a1 + 12);
      int v4 = *(unsigned __int16 *)(a1 + 16);
      goto LABEL_25;
    }
    if (v2 - 3 > 2)
    {
      if (v2 == 10)
      {
        int v3 = *(_DWORD *)(a1 + 600);
        int v4 = *(unsigned __int16 *)(a1 + 604);
      }
      else if (v2 == 6)
      {
        int v3 = *(_DWORD *)(a1 + 512);
        int v4 = *(unsigned __int16 *)(a1 + 516);
      }
      else
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1023258E0);
        }
        long long v6 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          sub_10142D00C(a1);
          unint64_t v7 = v19 >= 0 ? __p : *(unsigned char **)__p;
          *(_DWORD *)int buf = 136315138;
          *(void *)&uint8_t buf[4] = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CELL_LOC: which cell is that, %s", buf, 0xCu);
          if (v19 < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1023258E0);
          }
          sub_10142D00C(a1);
          if (v15 >= 0) {
            uint64_t v12 = buf;
          }
          else {
            uint64_t v12 = *(unsigned char **)buf;
          }
          int v16 = 136315138;
          long long v17 = v12;
          int v13 = (char *)_os_log_send_and_compose_impl();
          if (v15 < 0) {
            operator delete(*(void **)buf);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "unsigned long long CLCell::getSecKey() const", "%s\n", v13);
          if (v13 != __p) {
            free(v13);
          }
        }
        int v4 = 0;
        int v3 = 0;
      }
    }
    else
    {
      char v5 = *(int **)(a1 + 88);
      if (*(int **)(a1 + 96) == v5) {
        int v3 = -1;
      }
      else {
        int v3 = *v5;
      }
      int v4 = *(unsigned __int16 *)(a1 + 116);
    }
  }
LABEL_25:
  int v8 = v4 | (v3 << 16);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023258E0);
  }
  unint64_t v9 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long __p = 134217984;
    *(void *)&__p[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CELL_LOC: sec_key, 0x%016llX", __p, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023258E0);
    }
    *(_DWORD *)int buf = 134217984;
    *(void *)&uint8_t buf[4] = v8;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "unsigned long long CLCell::getSecKey() const", "%s\n", v11);
    if (v11 != __p) {
      free(v11);
    }
  }
  return v8;
}

uint64_t sub_100114068(uint64_t a1)
{
  sub_10010F274((uint64_t)v7);
  uint64_t v2 = *(int *)(a1 + 4);
  if (v2 >= 3)
  {
    int v3 = "Unknown";
    uint64_t v4 = 7;
  }
  else
  {
    int v3 = off_102325970[v2];
    uint64_t v4 = qword_101E09DE8[v2];
  }
  sub_100132EFC(v8, (uint64_t)v3, v4);
  std::stringbuf::str();
  *(void *)((char *)v7
  v8[0] = v5;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10011420C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100114220(uint64_t a1)
{
  int v4 = 0;
  uint64_t v2 = 1;
  if (!sub_1001072EC(a1, &v4, 1))
  {
    int v5 = 3;
    return sub_1001072EC(a1, &v5, 1) != 0;
  }
  return v2;
}

BOOL sub_100114284(unsigned int a1)
{
  if (a1 < 0xC && ((0xEFFu >> a1) & 1) != 0) {
    return (0x7EFu >> a1) & 1;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022C2220);
  }
  uint64_t v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67240450;
    unsigned int v6 = a1;
    __int16 v7 = 2082;
    int v8 = sub_10011BA84(a1);
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CellLoc, Invalid rat, %{public}d, %{public}s, #CloneMe", buf, 0x12u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022C2220);
    }
    sub_10011BA84(a1);
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLUnifiedCellLocationProviderLogic::isAlsQueriable(CLTelephonyService_Type::RadioAccessTechnology)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
    return 0;
  }
  return result;
}

uint64_t sub_100114480(id *a1, int a2, int a3, int a4, char a5)
{
  v18[0] = a2;
  *(void *)int buf = v18;
  char v9 = sub_1000F3008((uint64_t)(a1 + 30), v18, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  *((_DWORD *)v9 + 12) = a3;
  *((_DWORD *)v9 + 13) = a4;
  *(void *)int buf = v18;
  uint64_t result = (uint64_t)sub_1001163CC((uint64_t)(a1 + 35), v18, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  int v11 = *(_DWORD *)(result + 20);
  int v12 = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 20) = a3;
  *(_DWORD *)(result + 24) = a4;
  *(unsigned char *)(result + 28) = a5;
  if (v11 != a3 || v12 != a4)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10232D700);
    }
    long long v14 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = [a1[2] UTF8String];
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,handleMccMncChange,MCC/MNC changed", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10232D700);
      }
      id v16 = [a1[2] UTF8String];
      v18[1] = 136446210;
      id v19 = v16;
      long long v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEmergencyLocationConfigAsset::handleMccMncChange(BundleDescriptor, int32_t, int32_t, BOOL)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    uint64_t result = sub_100DD5C90(a1);
    if (result)
    {
      sub_1015642E4((uint64_t)a1);
      sub_101563C9C((uint64_t)a1);
      return sub_101561F5C((std::string::size_type)a1);
    }
  }
  return result;
}

void sub_1001146DC(_DWORD *a1, uint64_t a2)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v24 = 0;
  if (*(unsigned char *)(a2 + 696))
  {
    sub_10010EE74(a2);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)long long __p = *(_OWORD *)buf;
    uint64_t v24 = v28;
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102306FD0);
    }
    int v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#EmergencyBiome, no serving cell", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102306FD0);
      }
      LOWORD(v25) = 0;
      long long v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellularBiomePublisherHelper::onRatNotification(const std::optional<CLCell> &)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
  }
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    switch(HIBYTE(v24))
    {
      case 3:
        if (LOWORD(__p[0]) == 21319 && BYTE2(__p[0]) == 77) {
          goto LABEL_82;
        }
        goto LABEL_54;
      case 4:
        goto LABEL_52;
      case 5:
        if (LODWORD(__p[0]) == 1296319315 && BYTE4(__p[0]) == 65) {
          goto LABEL_53;
        }
        if (HIBYTE(v24) == 3) {
          goto LABEL_55;
        }
        if (HIBYTE(v24) != 4) {
          goto LABEL_70;
        }
LABEL_52:
        if (LODWORD(__p[0]) == 1095582787) {
          goto LABEL_53;
        }
LABEL_54:
        if (HIBYTE(v24) != 3) {
          goto LABEL_70;
        }
LABEL_55:
        if (LOWORD(__p[0]) == 21580 && BYTE2(__p[0]) == 69) {
          goto LABEL_84;
        }
        unint64_t v10 = __p;
        break;
      case 7:
        if (LODWORD(__p[0]) != 1852534357 || *(_DWORD *)((char *)__p + 3) != 1853321070) {
          goto LABEL_70;
        }
        goto LABEL_83;
      default:
        goto LABEL_70;
    }
LABEL_60:
    int v14 = *(unsigned __int16 *)v10;
    int v15 = *((unsigned __int8 *)v10 + 2);
    if (v14 == 21326 && v15 == 65)
    {
      int v12 = 4;
      goto LABEL_73;
    }
    goto LABEL_70;
  }
  int v5 = __p[1];
  if (__p[1] == (void *)3)
  {
    if (*(_WORD *)__p[0] == 21319 && *((unsigned char *)__p[0] + 2) == 77)
    {
LABEL_82:
      int v12 = 1;
      goto LABEL_73;
    }
    int v5 = __p[1];
  }
  else if (__p[1] == (void *)7 && *(_DWORD *)__p[0] == 1852534357 && *(_DWORD *)((char *)__p[0] + 3) == 1853321070)
  {
LABEL_83:
    int v12 = 0;
    goto LABEL_73;
  }
  if (v5 == (void *)5)
  {
    if (*(_DWORD *)__p[0] == 1296319315 && *((unsigned char *)__p[0] + 4) == 65) {
      goto LABEL_53;
    }
    int v5 = __p[1];
  }
  if (v5 == (void *)4)
  {
    if (*(_DWORD *)__p[0] != 1095582787)
    {
      int v5 = __p[1];
      goto LABEL_39;
    }
LABEL_53:
    int v12 = 2;
    goto LABEL_73;
  }
LABEL_39:
  if (v5 == (void *)3)
  {
    if (*(_WORD *)__p[0] == 21580 && *((unsigned char *)__p[0] + 2) == 69)
    {
LABEL_84:
      int v12 = 3;
      goto LABEL_73;
    }
    if (__p[1] == (void *)3)
    {
      unint64_t v10 = (void **)__p[0];
      goto LABEL_60;
    }
  }
LABEL_70:
  if (sub_1000F03F8(__p, "NR")) {
    int v12 = 5;
  }
  else {
    int v12 = 6;
  }
LABEL_73:
  if (v12 != a1[30])
  {
    a1[30] = v12;
    [objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend((id)BiomeLibrary(), "Device"), "Wireless"), "CellularQualityStatus"), "source"), "sendEvent:", [objc_alloc((Class)BMDeviceCellularQualityStatus) initWithStarting:rat:deviceRegistrationState:quality:rrcStatus:, +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1), a1[30], a1[31], +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[32]), a1[33]]);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102306FD0);
    }
    long long v18 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      int v19 = a1[30];
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#EmergencyBiome, Biome donation, rat, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102306FD0);
      }
      int v20 = a1[30];
      int v25 = 67109120;
      int v26 = v20;
      long long v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellularBiomePublisherHelper::onRatNotification(const std::optional<CLCell> &)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100114CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100114D18(void *result, uint64_t a2, double a3, double a4)
{
  if (result[319])
  {
    __int16 v7 = result;
    result[320] = a2;
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F9C68);
    }
    int v8 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v11 = a2;
      __int16 v12 = 2050;
      double v13 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CellFlow, timer, %{public}s, %{public}.0f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F9C68);
      }
      char v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLUnifiedCellLocationProvider::setCellLocationPropagationTimer(const char *, CFAbsoluteTime, CFTimeInterval)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    v7[320] = a2;
    return sub_1001165F8(v7[319], a3 + a4);
  }
  return result;
}

uint64_t sub_100114F0C(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  return sub_1005456A4(a1 + 184, a2, a3);
}

uint64_t sub_100114F14(uint64_t a1, uint64_t a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F9C68);
  }
  int v3 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136446210;
    uint64_t v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "@CellFlow, outcome, %{public}s, UclpMetric", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F9C68);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLUnifiedCellLocationProvider::logCellRefreshOutcome(const char *)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return AnalyticsSendEventLazy();
}

void sub_100115118(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a1 + 872;
  if ((uint64_t *)v3 != a3) {
    sub_1000FAFC4(v3, *a3, a3[1], 0x66FD0EB66FD0EB67 * ((a3[1] - *a3) >> 3));
  }
}

void sub_10011514C(uint64_t a1, _DWORD *a2, long long *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C7D20);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiLocationProvider::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C7D20);
    }
    char v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiLocationProvider::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100115338(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100115318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100115338(uint64_t a1, uint64_t a2, _DWORD *a3, long long *a4)
{
  if (*a3 == 5)
  {
    long long v17 = a4[6];
    long long v18 = a4[7];
    *(_OWORD *)uint64_t v19 = a4[8];
    *(_OWORD *)&v19[12] = *(long long *)((char *)a4 + 140);
    long long v13 = a4[2];
    long long v14 = a4[3];
    long long v15 = a4[4];
    long long v16 = a4[5];
    long long v11 = *a4;
    long long v12 = a4[1];
    memcpy(v20, a4 + 10, sizeof(v20));
    uint64_t v6 = *((void *)a4 + 85);
    uint64_t v7 = *((void *)a4 + 86);
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)&v39[13] = *(void *)((char *)a4 + 789);
    long long v8 = *(long long *)((char *)a4 + 776);
    long long v38 = *(long long *)((char *)a4 + 760);
    *(_OWORD *)long long v39 = v8;
    long long v9 = *(long long *)((char *)a4 + 712);
    long long v34 = *(long long *)((char *)a4 + 696);
    long long v35 = v9;
    long long v10 = *(long long *)((char *)a4 + 728);
    long long v37 = *(long long *)((char *)a4 + 744);
    long long v36 = v10;
    long long v23 = v12;
    long long v22 = v11;
    long long v27 = v16;
    long long v26 = v15;
    long long v25 = v14;
    long long v24 = v13;
    *(_OWORD *)((char *)v30 + 12) = *(_OWORD *)&v19[12];
    v30[0] = *(_OWORD *)v19;
    long long v29 = v18;
    long long v28 = v17;
    memcpy(v31, v20, sizeof(v31));
    uint64_t v32 = v6;
    uint64_t v33 = v7;
    int v21 = 16;
    sub_1000E0AA0(a1);
    sub_1000D7B80((uint64_t)&v21);
  }
}

void sub_1001154C4(_Unwind_Exception *a1)
{
}

void sub_1001154D8(int *a1, int a2, int a3, int a4)
{
  int v5 = a1[1] + a2;
  ++*a1;
  a1[1] = v5;
  int v6 = a1[3] + a4;
  a1[2] += a3;
  a1[3] = v6;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BEA10);
  }
  uint64_t v7 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *a1;
    int v9 = a1[1];
    int v10 = a1[2];
    int v11 = a1[3];
    *(_DWORD *)int buf = 67240960;
    int v14 = v8;
    __int16 v15 = 1026;
    int v16 = v9;
    __int16 v17 = 1026;
    int v18 = v10;
    __int16 v19 = 1026;
    int v20 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "@Celltileusage, attempt, %{public}d, als, %{public}d, tiles, %{public}d, unknown, %{public}d", buf, 0x1Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BEA10);
    }
    long long v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellLocationMetrics::locationAttempt(int, int, int, CFAbsoluteTime)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

void sub_1001156EC(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102328218);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiTilesManager::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102328218);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiTilesManager::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1001158D8(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1001158B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001158D8(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  if (!*(unsigned char *)(a1 + 413))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    uint64_t v32 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "WIFITILE: onLocationNotification, ignore leech when LS off", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    *(_WORD *)long long __p = 0;
    uint64_t v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v33);
LABEL_66:
    if (v33 != (char *)buf) {
      free(v33);
    }
    return;
  }
  if (!*(unsigned char *)(a1 + 217))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    long long v34 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      int v35 = *(unsigned __int8 *)(a1 + 216);
      *(_DWORD *)int buf = 67240192;
      *(_DWORD *)long long v62 = v35;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "WIFITILE: onLocationNotification, index is not available until first unlock, fDataProtectionEnabled, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231ADF0);
      }
      int v46 = *(unsigned __int8 *)(a1 + 216);
      *(_DWORD *)long long __p = 67240192;
      *(_DWORD *)&__p[4] = v46;
      long long v47 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v47);
      if (v47 != (char *)buf) {
        free(v47);
      }
    }
    if (*a3 == 5)
    {
      long long v36 = *(_OWORD *)a4;
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a4 + 16);
      *(_OWORD *)(a1 + 232) = v36;
      long long v37 = *(_OWORD *)(a4 + 32);
      long long v38 = *(_OWORD *)(a4 + 48);
      long long v39 = *(_OWORD *)(a4 + 80);
      *(_OWORD *)(a1 + 296) = *(_OWORD *)(a4 + 64);
      *(_OWORD *)(a1 + 312) = v39;
      *(_OWORD *)(a1 + 264) = v37;
      *(_OWORD *)(a1 + 280) = v38;
      long long v40 = *(_OWORD *)(a4 + 96);
      long long v41 = *(_OWORD *)(a4 + 112);
      long long v42 = *(_OWORD *)(a4 + 128);
      *(_OWORD *)(a1 + 372) = *(_OWORD *)(a4 + 140);
      *(_OWORD *)(a1 + 344) = v41;
      *(_OWORD *)(a1 + 360) = v42;
      *(_OWORD *)(a1 + 328) = v40;
    }
    return;
  }
  if (*a3 == 5)
  {
    double v7 = (*(double (**)(void))(**(void **)(a1 + 448) + 56))(*(void *)(a1 + 448));
    double v8 = *(double *)(a1 + 392);
    double v9 = *(double *)(a1 + 252);
    BOOL v10 = v9 > *(double *)(a4 + 20) && v9 > 100.0;
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    char v11 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = *(void *)(a1 + 392);
      uint64_t v12 = *(void *)(a1 + 400);
      sub_1000AB340(a4);
      __int16 v14 = (v58 & 0x80000000) == 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)int buf = 134349827;
      *(void *)long long v62 = v13;
      *(_WORD *)&v62[8] = 1026;
      *(_DWORD *)&unsigned char v62[10] = v10;
      __int16 v63 = 2050;
      uint64_t v64 = v12;
      __int16 v65 = 2081;
      long long v66 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "WIFITILE: onLocationNotification, fLastLocationDownloadCheckTimestamp, %{public}.1lf, isForceLocationCheck, %{public}d, fLastLocationProtectionCheckTimestamp, %{public}.1f, leech location, %{private}s", buf, 0x26u);
      if (SBYTE3(v58) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231ADF0);
      }
      uint64_t v49 = *(void *)(a1 + 392);
      uint64_t v48 = *(void *)(a1 + 400);
      sub_1000AB340(a4);
      if (v55 >= 0) {
        long long v50 = &v54;
      }
      else {
        long long v50 = v54;
      }
      *(_DWORD *)long long __p = 134349827;
      *(void *)&__p[4] = v49;
      *(_WORD *)&unsigned char __p[12] = 1026;
      *(_DWORD *)&__p[14] = v10;
      __int16 v57 = 2050;
      uint64_t v58 = v48;
      __int16 v59 = 2081;
      long long v60 = v50;
      long long v51 = (char *)_os_log_send_and_compose_impl();
      if (v55 < 0) {
        operator delete(v54);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v51);
      if (v51 != (char *)buf) {
        free(v51);
      }
    }
    long long v15 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)a4;
    *(_OWORD *)(a1 + 248) = v15;
    long long v16 = *(_OWORD *)(a4 + 32);
    long long v17 = *(_OWORD *)(a4 + 48);
    long long v18 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a1 + 312) = v18;
    *(_OWORD *)(a1 + 264) = v16;
    *(_OWORD *)(a1 + 280) = v17;
    long long v19 = *(_OWORD *)(a4 + 96);
    long long v20 = *(_OWORD *)(a4 + 112);
    long long v21 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a1 + 372) = *(_OWORD *)(a4 + 140);
    *(_OWORD *)(a1 + 344) = v20;
    *(_OWORD *)(a1 + 360) = v21;
    *(_OWORD *)(a1 + 328) = v19;
    int v22 = v7 - v8 >= 600.0 || v10;
    if (v22 == 1)
    {
      double v23 = *(double *)(a1 + 252);
      if (v23 >= 0.0 && v23 <= 5000.0)
      {
        sub_1001AD7FC(a1, a1 + 232, v7);
        sub_1000209E0(a1, 0, v7);
        sub_1001AD254(a1, a1 + 232);
        *(double *)(a1 + 392) = v7;
      }
    }
    if (*(unsigned char *)(a1 + 216))
    {
      int v24 = v7 - *(double *)(a1 + 400) >= 330.0 || v10;
      if (v24 == 1)
      {
        long long v25 = *(_OWORD *)(a4 + 16);
        *(_OWORD *)(a1 + 232) = *(_OWORD *)a4;
        *(_OWORD *)(a1 + 248) = v25;
        long long v26 = *(_OWORD *)(a4 + 32);
        long long v27 = *(_OWORD *)(a4 + 48);
        long long v28 = *(_OWORD *)(a4 + 80);
        *(_OWORD *)(a1 + 296) = *(_OWORD *)(a4 + 64);
        *(_OWORD *)(a1 + 312) = v28;
        *(_OWORD *)(a1 + 264) = v26;
        *(_OWORD *)(a1 + 280) = v27;
        long long v29 = *(_OWORD *)(a4 + 96);
        long long v30 = *(_OWORD *)(a4 + 112);
        long long v31 = *(_OWORD *)(a4 + 128);
        *(_OWORD *)(a1 + 372) = *(_OWORD *)(a4 + 140);
        *(_OWORD *)(a1 + 344) = v30;
        *(_OWORD *)(a1 + 360) = v31;
        *(_OWORD *)(a1 + 328) = v29;
        *(double *)(a1 + 400) = v7;
      }
    }
    return;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  long long v43 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v44 = *a3;
    long long v45 = sub_10008A168(*a3);
    *(_DWORD *)int buf = 67109378;
    *(_DWORD *)long long v62 = v44;
    *(_WORD *)&v62[4] = 2080;
    *(void *)&v62[6] = v45;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "WIFITILE: onLocationNotification, unknown notificaiton, %d, %s", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    unsigned int v52 = *a3;
    long long v53 = sub_10008A168(*a3);
    *(_DWORD *)long long __p = 67109378;
    *(_DWORD *)&__p[4] = v52;
    *(_WORD *)&__p[8] = 2080;
    *(void *)&__p[10] = v53;
    uint64_t v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v33);
    goto LABEL_66;
  }
}

void sub_1001160FC(uint64_t a1, int *a2)
{
  if (*a2 == 9 && *(unsigned char *)(a1 + 112)) {
    *(unsigned char *)(a1 + 112) = 0;
  }
  sub_10011BAA8(a1, a2);
}

uint64_t sub_100116118(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  v16[0] = a2;
  *(void *)int buf = v16;
  uint64_t result = (uint64_t)sub_1001163CC(a1 + 176, v16, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  BOOL v11 = *(_DWORD *)(result + 20) == a3 && *(_DWORD *)(result + 24) == a4;
  *(_DWORD *)(result + 20) = a3;
  *(_DWORD *)(result + 24) = a4;
  *(unsigned char *)(result + 28) = a5;
  if ((v16[0] & 0xFFFFFFFD) == 1 && !v11)
  {
    *(_DWORD *)(a1 + 136) = a3;
    *(_DWORD *)(a1 + 140) = a4;
    *(unsigned char *)(a1 + 144) = a5;
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102328FD8);
    }
    uint64_t v12 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = [*(id *)(a1 + 16) UTF8String];
      *(_DWORD *)int buf = 136446978;
      *(void *)&uint8_t buf[4] = v13;
      __int16 v25 = 1026;
      int v26 = a3;
      __int16 v27 = 1026;
      int v28 = a4;
      __int16 v29 = 1026;
      int v30 = a5;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,MCC/MNC changed,%{public}d,%{public}d,%{public}d", buf, 0x1Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102328FD8);
      }
      id v14 = [*(id *)(a1 + 16) UTF8String];
      v16[1] = 136446978;
      id v17 = v14;
      __int16 v18 = 1026;
      int v19 = a3;
      __int16 v20 = 1026;
      int v21 = a4;
      __int16 v22 = 1026;
      int v23 = a5;
      long long v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLKappaConfigAsset::handleMccMncChange(BundleDescriptor, int32_t, int32_t, BOOL)", "%s\n", v15);
      if (v15 != buf) {
        free(v15);
      }
    }
    uint64_t result = sub_100DD5C90((id *)a1);
    if (result)
    {
      uint64_t result = sub_1014BD8A4(a1, a3, a4, a5);
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
      }
    }
  }
  return result;
}

void *sub_1001163CC(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    BOOL v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      BOOL v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          BOOL v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  BOOL v11 = operator new(0x20uLL);
  *BOOL v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 7) = 0;
  *(void *)((char *)v11 + 20) = -1;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100100330(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  __int16 v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *BOOL v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *BOOL v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    __int16 v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1001165E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

id sub_1001165F8(uint64_t a1, double a2)
{
  [*(id *)(a1 + 24) assertInside];
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022D6570);
  }
  unint64_t v4 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
  {
    int v5 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      int v5 = (void *)*v5;
    }
    double v6 = -1.0;
    if (a2 != 1.79769313e308) {
      double v6 = a2;
    }
    *(_DWORD *)int buf = 136315394;
    BOOL v10 = v5;
    __int16 v11 = 2048;
    double v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "setNextFireDate, %s, %.1lf", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022D6570);
    }
    unint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPersistentTimer::setNextFireDate(CFAbsoluteTime)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return [*(id *)a1 setNextFireTime:a2];
}

void sub_100116824(uint64_t a1, int a2, uint64_t a3)
{
  int v22 = a2;
  if (!*(unsigned char *)(a3 + 696)) {
    return;
  }
  uint64_t v5 = a1 + 1728;
  if (!sub_10011853C((void *)(a1 + 1728), &v22))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102327D18);
    }
    double v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#Actor handleCellInfo called with unexpected inst instance %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v22;
      unint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::handleCellInfo(SimInstance, const std::optional<CLCell> &)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
  *(void *)int buf = &v22;
  unint64_t v7 = sub_100117344(v5, &v22, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  unint64_t v8 = v7;
  unsigned int v9 = *(_DWORD *)(a3 + 8);
  *((_DWORD *)v7 + 6) = v9;
  if (v9 < 3) {
    goto LABEL_11;
  }
  if (v9 == 9)
  {
    *((_DWORD *)v7 + 8) = *(_DWORD *)sub_1006E744C(a3);
    *((_DWORD *)v8 + 9) = *(_DWORD *)(sub_1006E744C(a3) + 4);
    void v8[5] = -1;
    uint64_t v10 = sub_1006E744C(a3);
    goto LABEL_12;
  }
  if (v9 == 7)
  {
LABEL_11:
    *((_DWORD *)v7 + 8) = *(_DWORD *)sub_1006E6690(a3);
    *((_DWORD *)v8 + 9) = *(_DWORD *)(sub_1006E6690(a3) + 4);
    void v8[5] = -1;
    uint64_t v10 = sub_1006E6690(a3);
LABEL_12:
    uint64_t v11 = *(int *)(v10 + 12);
LABEL_13:
    v8[6] = v11;
    int v12 = -1;
    goto LABEL_14;
  }
  if (v9 - 3 <= 2)
  {
    v7[4] = -1;
    *((_DWORD *)v7 + 10) = *(_DWORD *)(sub_1006E58D4(a3) + 32);
    *((_DWORD *)v8 + 11) = *(_DWORD *)(sub_1006E58D4(a3) + 36);
    uint64_t v11 = *(int *)(sub_1006E58D4(a3) + 44);
    goto LABEL_13;
  }
  if (v9 == 10)
  {
    *((_DWORD *)v7 + 8) = *(_DWORD *)sub_1006E8278(a3);
    *((_DWORD *)v8 + 9) = *(_DWORD *)(sub_1006E8278(a3) + 4);
    void v8[5] = -1;
    v8[6] = *(void *)(sub_1006E8278(a3) + 16);
    int v12 = *(_DWORD *)(sub_1006E8278(a3) + 32);
  }
  else
  {
    if (v9 != 6) {
      goto LABEL_15;
    }
    *((_DWORD *)v7 + 8) = *(_DWORD *)sub_100117098(a3);
    *((_DWORD *)v8 + 9) = *(_DWORD *)(sub_100117098(a3) + 4);
    void v8[5] = -1;
    v8[6] = *(int *)(sub_100117098(a3) + 12);
    int v12 = *(_DWORD *)(sub_100117098(a3) + 24);
  }
LABEL_14:
  *((_DWORD *)v8 + 46) = v12;
LABEL_15:
  sub_100118E88(a1);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102327D18);
  }
  float v13 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = v22;
    sub_1001170C0(*((_DWORD *)v8 + 6), __p);
    if (v24 >= 0) {
      BOOL v15 = __p;
    }
    else {
      BOOL v15 = (void **)__p[0];
    }
    int v16 = *((_DWORD *)v8 + 8);
    int v17 = *((_DWORD *)v8 + 9);
    int v18 = *((_DWORD *)v8 + 10);
    int v19 = *((_DWORD *)v8 + 11);
    uint64_t v20 = v8[6];
    *(_DWORD *)int buf = 68290819;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v26 = 2082;
    __int16 v27 = "";
    __int16 v28 = 1026;
    int v29 = v14;
    __int16 v30 = 2082;
    long long v31 = v15;
    __int16 v32 = 1025;
    int v33 = v16;
    __int16 v34 = 1025;
    int v35 = v17;
    __int16 v36 = 1025;
    int v37 = v18;
    __int16 v38 = 1025;
    int v39 = v19;
    __int16 v40 = 2049;
    uint64_t v41 = v20;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Actor cell info updated\", \"inst\":%{public}d, \"RAT\":%{public, location:escape_only}s, \"MCC\":%{private}d, \"MNC\":%{private}d, \"SID\":%{private}d, \"NID\":%{private}d, \"cell ID\":%{private}lld}", buf, 0x44u);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100116CB0(uint64_t a1, int a2, uint64_t a3)
{
  int v24 = a2;
  if (!*(unsigned char *)(a3 + 696)) {
    return;
  }
  uint64_t v4 = a1 + 664;
  uint64_t v5 = sub_10011853C((void *)(a1 + 664), &v24);
  if (v5)
  {
    long long v22 = *(_OWORD *)(v5 + 3);
    uint64_t v23 = v5[5];
    uint64_t v6 = *(uint64_t *)((char *)v5 + 68);
    unsigned int v7 = *(_DWORD *)(a3 + 8);
    if (v7 < 3) {
      goto LABEL_6;
    }
    if (v7 == 9)
    {
      int v8 = *(_DWORD *)sub_1006E744C(a3);
      uint64_t v9 = sub_1006E744C(a3);
      goto LABEL_7;
    }
    if (v7 == 7)
    {
LABEL_6:
      int v8 = *(_DWORD *)sub_1006E6690(a3);
      uint64_t v9 = sub_1006E6690(a3);
    }
    else
    {
      if (v7 - 3 <= 2)
      {
        int v12 = *(_DWORD *)(sub_1006E58D4(a3) + 32);
        int v11 = *(_DWORD *)(sub_1006E58D4(a3) + 36);
        int v10 = -1;
        int v8 = -1;
        goto LABEL_8;
      }
      if (v7 == 10)
      {
        int v8 = *(_DWORD *)sub_1006E8278(a3);
        uint64_t v9 = sub_1006E8278(a3);
      }
      else
      {
        if (v7 != 6)
        {
          int v8 = *((_DWORD *)v5 + 12);
          int v10 = *((_DWORD *)v5 + 13);
          int v12 = *((_DWORD *)v5 + 14);
          int v11 = *((_DWORD *)v5 + 15);
          goto LABEL_8;
        }
        int v8 = *(_DWORD *)sub_100117098(a3);
        uint64_t v9 = sub_100117098(a3);
      }
    }
LABEL_7:
    int v10 = *(_DWORD *)(v9 + 4);
    int v11 = -1;
    int v12 = -1;
LABEL_8:
    unsigned int v13 = *(_DWORD *)(a3 + 8);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102343DC0);
    }
    int v14 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = v24;
      sub_1001170C0(v13, __p);
      if (v21 >= 0) {
        int v16 = __p;
      }
      else {
        int v16 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 68290563;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v26 = 2082;
      __int16 v27 = "";
      __int16 v28 = 1026;
      int v29 = v15;
      __int16 v30 = 2082;
      long long v31 = v16;
      __int16 v32 = 1025;
      int v33 = v8;
      __int16 v34 = 1025;
      int v35 = v10;
      __int16 v36 = 1025;
      int v37 = v12;
      __int16 v38 = 1025;
      int v39 = v11;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#awd,handleCellInfoNotification\", \"inst\":%{public}d, \"RAT\":%{public, location:escape_only}s, \"MCC\":%{private}d, \"MNC\":%{private}d, \"SID\":%{private}d, \"NID\":%{private}d}", buf, 0x3Au);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
    *(void *)int buf = &v24;
    int v17 = sub_1001170EC(v4, &v24, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    *(_OWORD *)(v17 + 24) = v22;
    *((void *)v17 + 5) = v23;
    *((_DWORD *)v17 + 12) = v8;
    *((_DWORD *)v17 + 13) = v10;
    *((_DWORD *)v17 + 14) = v12;
    *((_DWORD *)v17 + 15) = v11;
    *((_DWORD *)v17 + 16) = v13;
    *(void *)(v17 + 68) = v6;
    return;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102343DC0);
  }
  int v18 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#awd,#Warning,handleCellInfoNotification,fTelephonyInfoMap,null", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102343DC0);
    }
    LOWORD(v22) = 0;
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAWD::handleCellInfoNotification(SimInstance, const std::optional<CLCell> &)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
}

uint64_t sub_100117098(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) == 6) {
    return a1 + 512;
  }
  uint64_t v2 = sub_101A69D98();
  return sub_1001170C0(v2);
}

void *sub_1001170C0@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0xC) {
    uint64_t v2 = "UnhandledRAT";
  }
  else {
    uint64_t v2 = (&off_102345AA0)[a1];
  }
  return sub_100134750(a2, v2);
}

char *sub_1001170EC(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      int v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          int v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  int v11 = (char *)operator new(0x50uLL);
  *(void *)int v11 = 0;
  *((void *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *((void *)v11 + 9) = 0;
  *((_DWORD *)v11 + 6) = 255;
  *((void *)v11 + 6) = -1;
  *((void *)v11 + 7) = -1;
  *((void *)v11 + 8) = -4294967285;
  *((_DWORD *)v11 + 18) = -1;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100100330(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *(void *)int v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *(void *)int v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*(void *)v11)
  {
    unint64_t v21 = *(void *)(*(void *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_100117330(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100117344(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = a1 + 16;
  float v14 = (char *)operator new(0xC0uLL);
  v25[0] = v14;
  v25[1] = a1 + 16;
  *(void *)float v14 = 0;
  *((void *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *((_DWORD *)v14 + 6) = 11;
  *(void *)&long long v15 = -1;
  *((void *)&v15 + 1) = -1;
  *((_OWORD *)v14 + 2) = v15;
  *((_OWORD *)v14 + 3) = v15;
  *((void *)v14 + 22) = 0;
  *((void *)v14 + 23) = 0;
  *((_OWORD *)v14 + 9) = 0u;
  *((_OWORD *)v14 + 10) = 0u;
  *((_OWORD *)v14 + 7) = 0u;
  *((_OWORD *)v14 + 8) = 0u;
  *((_OWORD *)v14 + 5) = 0u;
  *((_OWORD *)v14 + 6) = 0u;
  *((_OWORD *)v14 + 4) = 0u;
  *((_DWORD *)v14 + 46) = -1;
  char v26 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  long long v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *long long v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8) {
          v23 %= v8;
        }
      }
      else
      {
        v23 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (uint64_t *)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  sub_101483884((uint64_t)v25, 0);
  return i;
}

void sub_1001175E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101483884((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_1001175F8(uint64_t a1, int a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 696)) {
    return;
  }
  unsigned int v5 = *(_DWORD *)(a3 + 8);
  if (v5 < 3) {
    goto LABEL_5;
  }
  if (v5 == 9)
  {
    uint64_t v6 = *(unsigned int *)sub_1006E744C(a3);
    uint64_t v7 = sub_1006E744C(a3);
    goto LABEL_7;
  }
  if (v5 == 7)
  {
LABEL_5:
    uint64_t v6 = *(unsigned int *)sub_1006E6690(a3);
    uint64_t v7 = sub_1006E6690(a3);
  }
  else
  {
    if (v5 - 3 <= 2)
    {
      int v9 = *(_DWORD *)(sub_1006E58D4(a3) + 32);
      int v10 = *(_DWORD *)(sub_1006E58D4(a3) + 36);
      int v8 = -1;
      uint64_t v6 = 0xFFFFFFFFLL;
      goto LABEL_9;
    }
    if (v5 == 10)
    {
      uint64_t v6 = *(unsigned int *)sub_1006E8278(a3);
      uint64_t v7 = sub_1006E8278(a3);
    }
    else
    {
      if (v5 != 6)
      {
        int v8 = 0;
        uint64_t v6 = 0;
        int v9 = 0;
        goto LABEL_8;
      }
      uint64_t v6 = *(unsigned int *)sub_100117098(a3);
      uint64_t v7 = sub_100117098(a3);
    }
  }
LABEL_7:
  int v8 = *(_DWORD *)(v7 + 4);
  int v9 = -1;
LABEL_8:
  int v10 = -1;
LABEL_9:
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022DE9A8);
  }
  int v11 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)int buf = 68290307;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 1026;
    *(_DWORD *)&buf[20] = a2;
    __int16 v29 = 1025;
    int v30 = v6;
    __int16 v31 = 1025;
    int v32 = v8;
    __int16 v33 = 1025;
    int v34 = v9;
    __int16 v35 = 1025;
    int v36 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ca,handleCellInfoNotification\", \"inst\":%{public}d, \"OperatorMCC\":%{private}d, \"OperatorMNC\":%{private}d, \"OperatorSID\":%{private}d, \"OperatorNID\":%{private}d}", buf, 0x30u);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
  }
  unint64_t v12 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
  {
    *(void *)int buf = 68289794;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 1026;
    *(_DWORD *)&buf[20] = 0;
    __int16 v29 = 1026;
    int v30 = v6;
    __int16 v31 = 1026;
    int v32 = v8;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ca,kSubscriberMccAndMncNotification\", \"CarrierSim\":%{public}d, \"Carriermcc\":%{public}d, \"CarrierMnc\":%{public}d}", buf, 0x24u);
  }
  if (a2 == 1)
  {
    *(_DWORD *)int buf = 14;
    v20[0] = v6;
    v20[6] = 0;
    sub_100117AF0(a1, (int *)buf, (uint64_t)v20);
    sub_100118010((uint64_t)v20);
    *(_DWORD *)int buf = 15;
    v19[0] = v8;
    v19[6] = 0;
    sub_100117AF0(a1, (int *)buf, (uint64_t)v19);
    sub_100118010((uint64_t)v19);
    *(_DWORD *)int buf = 21;
    v18[0] = *(_DWORD *)(a3 + 8);
    v18[6] = 0;
    sub_100117AF0(a1, (int *)buf, (uint64_t)v18);
    sub_100118010((uint64_t)v18);
    if ((v6 - 1) > 0x3E6) {
      return;
    }
    int v24 = 18;
    sub_10011899C(v6, buf);
    long long v15 = *(_OWORD *)buf;
    uint64_t v16 = *(void *)&buf[16];
    memset(buf, 0, sizeof(buf));
    int v17 = 6;
    sub_100117AF0(a1, &v24, (uint64_t)&v15);
    uint64_t v13 = &v15;
    goto LABEL_22;
  }
  if (!a2)
  {
    *(_DWORD *)int buf = 8;
    v27[0] = v6;
    v27[6] = 0;
    sub_100117AF0(a1, (int *)buf, (uint64_t)v27);
    sub_100118010((uint64_t)v27);
    *(_DWORD *)int buf = 9;
    v26[0] = v8;
    v26[6] = 0;
    sub_100117AF0(a1, (int *)buf, (uint64_t)v26);
    sub_100118010((uint64_t)v26);
    *(_DWORD *)int buf = 20;
    v25[0] = *(_DWORD *)(a3 + 8);
    v25[6] = 0;
    sub_100117AF0(a1, (int *)buf, (uint64_t)v25);
    sub_100118010((uint64_t)v25);
    if ((v6 - 1) <= 0x3E6)
    {
      int v24 = 10;
      sub_10011899C(v6, buf);
      long long v21 = *(_OWORD *)buf;
      uint64_t v22 = *(void *)&buf[16];
      memset(buf, 0, sizeof(buf));
      int v23 = 6;
      sub_100117AF0(a1, &v24, (uint64_t)&v21);
      uint64_t v13 = &v21;
LABEL_22:
      sub_100118010((uint64_t)v13);
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
}

void sub_100117A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100118010((uint64_t)va);
  if (*(char *)(v3 - 137) < 0) {
    operator delete(*(void **)(v3 - 160));
  }
  _Unwind_Resume(a1);
}

BOOL sub_100117AF0(uint64_t a1, int *a2, uint64_t a3)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022DE9A8);
  }
  uint64_t v6 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
  {
    sub_100B10854(a1, *a2, (uint64_t)__p);
    uint64_t v7 = v33 >= 0 ? __p : (void **)__p[0];
    int v8 = *a2;
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v25 = 1026;
    int v26 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ca,setMeasurements,measurement,%{public}s, %{public}d", buf, 0x12u);
    if (v33 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    sub_100B10854(a1, *a2, (uint64_t)buf);
    if (v27 >= 0) {
      BOOL v18 = buf;
    }
    else {
      BOOL v18 = *(unsigned char **)buf;
    }
    int v19 = *a2;
    int v28 = 136446466;
    __int16 v29 = v18;
    __int16 v30 = 1026;
    int v31 = v19;
    unint64_t v20 = (char *)_os_log_send_and_compose_impl();
    if (v27 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL AnalyticsLogger<CLAnalyticsMeasurements, CLAnalyticsTriggers>::setMeasurementValue(const Measurement &, MeasurementValueType) [Measurement = CLAnalyticsMeasurements, Trigger = CLAnalyticsTriggers, MeasurementValueint Type = std::variant<int, long long, unsigned long long, unsigned int, float, double, std::string, BOOL>]", "%s\n", v20);
    if (v20 != (char *)__p) {
      free(v20);
    }
  }
  LODWORD(__p[0]) = *a2;
  int v9 = sub_10011853C((void *)(a1 + 8), (int *)__p);
  if (v9)
  {
    uint64_t v10 = *(unsigned int *)(a3 + 24);
    if (v10 == -1) {
      sub_1003217E4();
    }
    uint64_t v11 = v9[6];
    __p[0] = buf;
    uint64_t v12 = ((uint64_t (*)(void **, uint64_t))off_1022DEA88[v10])(__p, a3);
    if (!sub_1000E9B14(v12, v11)) {
      goto LABEL_16;
    }
  }
  sub_1001184C0(a1, *a2, __p);
  sub_100118070((uint64_t)v23, a3);
  if (!v34) {
    sub_10015E48C();
  }
  char v13 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v34 + 48))(v34, v23);
  sub_100118010((uint64_t)v23);
  sub_10011843C(__p);
  if (v13)
  {
    __p[0] = a2;
    float v14 = sub_1001181D8(a1 + 48, a2, (uint64_t)&unk_101D0B290, (_DWORD **)__p);
    sub_100118148((uint64_t)(v14 + 3), a3);
    return 1;
  }
  else
  {
LABEL_16:
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    uint64_t v16 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      sub_100B10854(a1, *a2, (uint64_t)__p);
      int v17 = v33 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#ca,ERROR,invalid,measurement,%{public}s", buf, 0xCu);
      if (v33 < 0) {
        operator delete(__p[0]);
      }
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      sub_100B10854(a1, *a2, (uint64_t)buf);
      if (v27 >= 0) {
        long long v21 = buf;
      }
      else {
        long long v21 = *(unsigned char **)buf;
      }
      int v28 = 136446210;
      __int16 v29 = v21;
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL AnalyticsLogger<CLAnalyticsMeasurements, CLAnalyticsTriggers>::setMeasurementValue(const Measurement &, MeasurementValueType) [Measurement = CLAnalyticsMeasurements, Trigger = CLAnalyticsTriggers, MeasurementValueint Type = std::variant<int, long long, unsigned long long, unsigned int, float, double, std::string, BOOL>]", "%s\n", v22);
      if (v22 != (char *)__p) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

void sub_100117FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_10011843C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100118010(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))*(&off_1022C1860 + v2))(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

uint64_t sub_100118070(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  sub_1001180B8(a1, a2);
  return a1;
}

void sub_1001180A4(_Unwind_Exception *a1)
{
  sub_100118010(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001180B8(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    BOOL result = ((uint64_t (*)(char *, uint64_t))*(&off_1022C1860 + v4))(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    BOOL result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1022C1CC0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

uint64_t sub_100118148(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 24);
  uint64_t v4 = *(unsigned int *)(a2 + 24);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    BOOL result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1022DE9C8[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 24) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))*(&off_1022DEB78 + v4))(&v5, result, a2);
}

uint64_t *sub_1001181D8(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = a1 + 16;
  float v14 = operator new(0x38uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  void *v14 = 0;
  v14[1] = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *((_DWORD *)v14 + 6) = 0;
  *((_DWORD *)v14 + 12) = 0;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100100330(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  long long v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  uint64_t i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  sub_100B1BEC8((uint64_t)v24, 0);
  return i;
}

void sub_100118424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100B1BEC8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_10011843C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_1001184C0@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  int v5 = a2;
  BOOL result = sub_10011853C((void *)(a1 + 8), &v5);
  if (result) {
    return (uint64_t *)sub_1001185F0((uint64_t)a3, (uint64_t)(result + 8));
  }
  *a3 = off_1022DEAD8;
  a3[1] = sub_100B1BD9C;
  a3[3] = a3;
  return result;
}

uint64_t *sub_10011853C(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  char v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (BOOL result = *v6; result; BOOL result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1001185F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_100118688(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void sub_10011869C(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

_DWORD *sub_1001186A8(_DWORD **a1, _DWORD *a2, _DWORD *a3)
{
  BOOL result = *a1;
  if (result[6]) {
    return sub_100B1BFF8(result, a3);
  }
  *a2 = *a3;
  return result;
}

void *sub_1001186C8()
{
}

void *sub_1001186D4(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0) {
    return sub_1000DC48C(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  long long v3 = *a3;
  __dst[2] = *((void *)a3 + 2);
  *(_OWORD *)long long __dst = v3;
  return result;
}

void sub_100118700(uint64_t *a1, std::string *a2, std::string *a3)
{
}

_UNKNOWN **sub_100118708()
{
}

void sub_100118714(uint64_t a1, std::string *this, std::string *__str)
{
  if (*(_DWORD *)(a1 + 24) == 6)
  {
    std::string::operator=(this, __str);
  }
  else
  {
    v3[0] = a1;
    v3[1] = (uint64_t)__str;
    sub_100B1C274(v3);
  }
}

BOOL sub_100118770(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)&v4, a2);
  int v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_1000DC48C(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)long long __p = v4;
      uint64_t v8 = v5;
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100118010((uint64_t)&v4);
  return v2 == 6;
}

void sub_1001187F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10011880C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_10011885C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  sub_100118894(a1, a2);
  return a1;
}

uint64_t sub_100118894(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    BOOL result = ((uint64_t (*)(char *, uint64_t))*(&off_1022C1860 + v4))(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    BOOL result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1022C1D30[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void sub_100118924(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

__n128 sub_100118930(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

uint64_t sub_100118954(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DF2F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100118978(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DEDF8;
  a2[1] = v2;
  return result;
}

void sub_10011899C(uint64_t a1@<X1>, void *a2@<X8>)
{
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  if ((a1 - 1000) > 0xFFFFFC18)
  {
    [+[NSNumber numberWithInt:a1] stringValue];
    uint64_t v4 = (void *)TUISOCountryCodeForMCC();
    if (v4)
    {
      sub_100134750(buf, (char *)[v4 UTF8String]);
      long long v12 = *(_OWORD *)buf;
      uint64_t v13 = v17;
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      uint64_t v5 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
      {
        char v6 = &v12;
        if (v13 < 0) {
          char v6 = (long long *)v12;
        }
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#ca,getCountryCode,%{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022DE9A8);
        }
        uint8x8_t v9 = &v12;
        if (v13 < 0) {
          uint8x8_t v9 = (long long *)v12;
        }
        int v14 = 136446210;
        float v15 = v9;
        uint64_t v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "std::string CLAnalyticsLogger::getCountryCode(int)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
      *(_OWORD *)a2 = v12;
      a2[2] = v13;
    }
    else
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      char v7 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#ca,getCountryCode,InvalidCountryCode", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022DE9A8);
        }
        LOWORD(v14) = 0;
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "std::string CLAnalyticsLogger::getCountryCode(int)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      sub_100134750(a2, "InvalidCountryCode");
    }
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022DE9A8);
    }
    uint64_t v3 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#ca,getCountryCode,InvalidMCC", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022DE9A8);
      }
      LOWORD(v14) = 0;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::string CLAnalyticsLogger::getCountryCode(int)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    sub_100134750(a2, "InvalidMCC");
  }
}

void sub_100118E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100118E88(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = "UnknownAction";
  uint64_t v3 = a1 + 1816;
  char v4 = 1;
  do
  {
    char v5 = v4;
    uint64_t v6 = *(void *)(v3 + 8 * v1);
    if (v6)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 112))(v6);
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102327D18);
      }
      char v7 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = (v5 & 1) != 0 ? "AML" : (char *)v2;
        sub_100134750(__p, v8);
        uint8x8_t v9 = v18 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#Actor,handleRatChange,pointer was null for %{public}s", buf, 0xCu);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102327D18);
        }
        if (v5) {
          uint64_t v10 = "AML";
        }
        else {
          uint64_t v10 = "EED2";
        }
        sub_100134750(buf, v10);
        uint64_t v11 = buf;
        if (v14 < 0) {
          uint64_t v11 = *(unsigned char **)buf;
        }
        int v15 = 136446210;
        float v16 = v11;
        long long v12 = (char *)_os_log_send_and_compose_impl();
        if (v14 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyActor::handleRatChange()", "%s\n", v12);
        if (v12 != (char *)__p) {
          free(v12);
        }
      }
    }
    char v4 = 0;
    uint64_t v2 = "EED2";
    uint64_t v1 = 1;
  }
  while ((v5 & 1) != 0);
}

void *sub_100119128(void *result)
{
  uint64_t v1 = (void *)result[248];
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = *((unsigned int *)result + 362);
    uint64_t v4 = (uint64_t)(result + 4);
    uint64_t v5 = *(unsigned int *)sub_100A96A4C((uint64_t)(result + 4), v3);
    BOOL v6 = sub_100D33C94((uint64_t)(v2 + 14));
    uint64_t v7 = *(unsigned int *)(sub_100A96A4C(v4, *((_DWORD *)v2 + 362)) + 160);
    return [v1 handleUpdatesToSim:v3 Rat:v5 WifiEmergency:v6 bandInfo:v7];
  }
  return result;
}

uint64_t sub_1001191C8(uint64_t a1, int *a2)
{
  uint64_t v4 = *a2;
  if v4 < 9 && ((0x1DFu >> v4))
  {
    uint64_t v7 = dword_101D2E090[v4];
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      int v6 = *a2;
      *(_DWORD *)int buf = 67240192;
      int v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "unknown registsration result %{public}d", buf, 8u);
    }
    uint64_t v7 = 0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLTypeAuthorizationStatus CLClientManager::registrationResultToAuthorizationStatus(const CLTypeRegistrationResult &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
      uint64_t v7 = 0;
    }
  }
  if ([*(id *)(a1 + 120) locationServicesEnabledStatus] == 1) {
    unsigned int v9 = v7;
  }
  else {
    unsigned int v9 = 2;
  }
  if (v9 <= 2)
  {
    if ([*(id *)(a1 + 120) locationRestricted]) {
      return 1;
    }
    else {
      return v9;
    }
  }
  return v7;
}

BOOL sub_1001193DC(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  int v4 = sub_1001198FC();
  if ([*(id *)(a1 + 120) locationServicesEnabledStatus] != 1)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "location disabled system-wide, denying executable %{public}@", (uint8_t *)&buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_102419530 == -1)
    {
LABEL_30:
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLClientManager::bigSwitchEnabledForClient(CLClientKeyPath *)", "%s\n", v11);
      if (v11 != (char *)&buf) {
        free(v11);
      }
      return 0;
    }
LABEL_37:
    dispatch_once(&qword_102419530, &stru_1022C9768);
    goto LABEL_30;
  }
  if (v4 == 1) {
    return 1;
  }
  if ([v3 isValidCKP])
  {
    if (v3)
    {
      [v3 cppClientKey];
    }
    else
    {
      long long buf = 0uLL;
      uint64_t v14 = 0;
    }
    uint64_t v7 = sub_10012FFE0(a1 + 680, (const void **)&buf);
    uint64_t v8 = a1 + 688;
    if (SHIBYTE(v14) < 0) {
      operator delete((void *)buf);
    }
    if (v8 != v7)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      unsigned int v9 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v3;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "location emergency-enablement explicitly benefits %{public}@, not denying", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        int v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLClientManager::bigSwitchEnabledForClient(CLClientKeyPath *)", "%s\n", v12);
        if (v12 != (char *)&buf) {
          free(v12);
        }
      }
      return 1;
    }
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v10 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "location emergency-enabled with explicit beneficiaries, denying executable %{public}@", (uint8_t *)&buf, 0xCu);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419530 == -1) {
      goto LABEL_30;
    }
    goto LABEL_37;
  }
  return result;
}

void sub_100119898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001198CC()
{
  unsigned int v0 = sub_1001198FC();
  if (byte_102489F78) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = v0;
  }
  if (v0 == 2) {
    return 2;
  }
  else {
    return v1;
  }
}

uint64_t sub_1001198FC()
{
  if (qword_10247AD90 != -1) {
    dispatch_once(&qword_10247AD90, &stru_1022B5E78);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&unk_10247AD88);
  uint64_t v0 = dword_10241BCA4;
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_10247AD88);
  return v0;
}

BOOL sub_100119964()
{
  BOOL result = sub_100119A30();
  if (result) {
    return !sub_100119AE8() && !sub_100119A70();
  }
  return result;
}

BOOL sub_100119998()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  BOOL result = 1;
  if ((dword_10247D340 - 107) >= 0x1B && (dword_10247D340 - 178) >= 6) {
    return dword_10247D340 == 260;
  }
  return result;
}

BOOL sub_100119A30()
{
  if (sub_100119AE8() || sub_100119A70()) {
    return 1;
  }

  return sub_100119998();
}

BOOL sub_100119A70()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  return (dword_10247D340 - 103) < 4;
}

BOOL sub_100119AE8()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  BOOL result = 1;
  if ((dword_10247D340 - 82) > 0x14 || ((1 << (dword_10247D340 - 82)) & 0x1FFFD5) == 0) {
    return (dword_10247D340 - 150) < 4;
  }
  return result;
}

void sub_100119B84(uint64_t a1, int *a2, uint64_t a3, unint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023257A8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionState7::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023257A8);
    }
    unsigned int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      unint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionState7::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100119D60(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100119D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_100119D60(unint64_t result, uint64_t a2, int *a3, uint64_t a4)
{
  int v6 = (unsigned char *)result;
  int v7 = *a3;
  if (*a3 > 13)
  {
    if (v7 == 14)
    {
      int v18 = sub_10142A958(result);
      char v19 = v6[532];
      return sub_1001BA134((uint64_t)v6, v18, v19);
    }
    else if (v7 == 22)
    {
      long long v13 = *(_OWORD *)(a4 + 112);
      v21[6] = *(_OWORD *)(a4 + 96);
      v21[7] = v13;
      v22[0] = *(_OWORD *)(a4 + 128);
      *(_OWORD *)((char *)v22 + 12) = *(_OWORD *)(a4 + 140);
      long long v14 = *(_OWORD *)(a4 + 48);
      v21[2] = *(_OWORD *)(a4 + 32);
      v21[3] = v14;
      long long v15 = *(_OWORD *)(a4 + 80);
      v21[4] = *(_OWORD *)(a4 + 64);
      v21[5] = v15;
      long long v16 = *(_OWORD *)(a4 + 16);
      v21[0] = *(_OWORD *)a4;
      v21[1] = v16;
      v20[0] = 9;
      (*(void (**)(unint64_t, _DWORD *, _OWORD *, uint64_t, uint64_t, void))(*(void *)result + 152))(result, v20, v21, 1, 0xFFFFFFFFLL, 0);
      BOOL result = sub_1010FB9FC(*(int **)(a4 + 800));
      if (result)
      {
        for (unint64_t i = 0; i < result; ++i)
        {
          sub_1010FB258(*(void *)(a4 + 800), i, (uint64_t)v20);
          sub_100119F90((uint64_t)v6, a3, (uint64_t)v20);
          BOOL result = sub_1010FB9FC(*(int **)(a4 + 800));
        }
      }
    }
  }
  else
  {
    if (v7) {
      BOOL v8 = v7 == 5;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      sub_100119F90(result, a3, a4);
      long long v9 = *(_OWORD *)(a4 + 112);
      v23[6] = *(_OWORD *)(a4 + 96);
      v23[7] = v9;
      v24[0] = *(_OWORD *)(a4 + 128);
      *(_OWORD *)((char *)v24 + 12) = *(_OWORD *)(a4 + 140);
      long long v10 = *(_OWORD *)(a4 + 48);
      v23[2] = *(_OWORD *)(a4 + 32);
      v23[3] = v10;
      long long v11 = *(_OWORD *)(a4 + 80);
      v23[4] = *(_OWORD *)(a4 + 64);
      v23[5] = v11;
      long long v12 = *(_OWORD *)(a4 + 16);
      v23[0] = *(_OWORD *)a4;
      v23[1] = v12;
      v20[0] = 9;
      return (*(uint64_t (**)(unsigned char *, _DWORD *, _OWORD *, uint64_t, uint64_t, void))(*(void *)v6 + 152))(v6, v20, v23, 1, 0xFFFFFFFFLL, 0);
    }
  }
  return result;
}

void sub_100119F90(uint64_t a1, int *a2, uint64_t a3)
{
  if (qword_102419010 != -1) {
    dispatch_once(&qword_102419010, &stru_102325788);
  }
  int v6 = qword_102419018;
  if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *a2;
    int v8 = *(_DWORD *)(a3 + 96);
    uint64_t v9 = *(void *)(a3 + 44);
    uint64_t v10 = *(void *)(a3 + 52);
    uint64_t v11 = *(void *)(a3 + 76);
    uint64_t v12 = *(void *)(a3 + 20);
    uint64_t v13 = *(void *)(a3 + 4);
    uint64_t v14 = *(void *)(a3 + 12);
    LODWORD(buf) = 67110912;
    HIDWORD(buf) = v7;
    __int16 v53 = 1024;
    int v54 = v8;
    __int16 v55 = 2048;
    uint64_t v56 = v9;
    __int16 v57 = 2048;
    uint64_t v58 = v10;
    __int16 v59 = 2048;
    uint64_t v60 = v11;
    __int16 v61 = 2048;
    uint64_t v62 = v12;
    __int16 v63 = 2048;
    uint64_t v64 = v13;
    __int16 v65 = 2048;
    uint64_t v66 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Notification, Type, Speed, SpeedUncertainty, LocationTimestamp, hAcc, Lat, Long, %d, %d, %f, %f, %f, %f, %f, %f", (uint8_t *)&buf, 0x4Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_102325788);
    }
    int v43 = *a2;
    int v44 = *(_DWORD *)(a3 + 96);
    uint64_t v45 = *(void *)(a3 + 44);
    uint64_t v46 = *(void *)(a3 + 52);
    uint64_t v47 = *(void *)(a3 + 76);
    uint64_t v48 = *(void *)(a3 + 20);
    uint64_t v49 = *(void *)(a3 + 4);
    uint64_t v50 = *(void *)(a3 + 12);
    LODWORD(v70) = 67110912;
    HIDWORD(v70) = v43;
    LOWORD(Current) = 1024;
    *(_DWORD *)((char *)&Current + 2) = v44;
    HIWORD(Current) = 2048;
    uint64_t v72 = v45;
    *(_WORD *)unint64_t v73 = 2048;
    *(void *)&v73[2] = v46;
    __int16 v74 = 2048;
    *(void *)unint64_t v75 = v47;
    *(_WORD *)&_DWORD v75[8] = 2048;
    *(void *)&v75[10] = v48;
    *(_WORD *)&v75[18] = 2048;
    *(void *)unint64_t v76 = v49;
    *(_WORD *)&_DWORD v76[8] = 2048;
    *(void *)&v76[10] = v50;
    long long v51 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionState7::logLocation(const CLLocationProvider_Type::Notification &, const CLDaemonLocation &) const", "%s\n", v51);
    if (v51 != (char *)&buf) {
      free(v51);
    }
  }
  if (*(unsigned char *)(a1 + 528))
  {
    long long v70 = off_1022E6D48;
    v73[8] = *(_DWORD *)(a3 + 96);
    *(_OWORD *)&v75[4] = *(_OWORD *)(a3 + 44);
    char v15 = *(unsigned char *)(a1 + 530);
    int32x2_t v16 = vdup_n_s32(v15 == 0);
    v17.i64[0] = v16.u32[0];
    v17.i64[1] = v16.u32[1];
    *(int8x16_t *)unint64_t v76 = vandq_s8(*(int8x16_t *)(a3 + 4), (int8x16_t)vcgezq_s64(vshlq_n_s64(v17, 0x3FuLL)));
    *(_OWORD *)&v76[16] = *(_OWORD *)(a3 + 20);
    uint64_t v77 = *(void *)(a3 + 36);
    long long v78 = *(_OWORD *)(a3 + 60);
    char v79 = v15;
    *(void *)unint64_t v73 = *(void *)(a3 + 76);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v18 = sub_101282D9C();
    sub_10128431C(v18, (uint64_t)&v70);
    sub_10170140C(&buf);
    sub_101727368((uint64_t)&buf);
    v69 |= 1u;
    CFAbsoluteTime v67 = Current;
    uint64_t v19 = v68;
    uint64_t v20 = *(void *)(a3 + 76);
    *(_WORD *)(v68 + 100) |= 0x100u;
    *(void *)(v19 + 72) = v20;
    uint64_t v21 = v68;
    int v22 = *(_DWORD *)(a3 + 96);
    *(_WORD *)(v68 + 100) |= 0x1000u;
    *(_DWORD *)(v21 + 96) = v22;
    uint64_t v23 = v68;
    uint64_t v24 = *(void *)(a3 + 44);
    *(_WORD *)(v68 + 100) |= 0x40u;
    *(void *)(v23 + 56) = v24;
    uint64_t v25 = v68;
    uint64_t v26 = *(void *)(a3 + 52);
    *(_WORD *)(v68 + 100) |= 0x80u;
    *(void *)(v25 + 64) = v26;
    uint64_t v27 = v68;
    double v28 = *(double *)(a3 + 4);
    if (!*(unsigned char *)(a1 + 530)) {
      double v28 = 0.0;
    }
    *(_WORD *)(v68 + 100) |= 0x10u;
    *(double *)(v27 + 40) = v28;
    uint64_t v29 = v68;
    double v30 = *(double *)(a3 + 12);
    if (!*(unsigned char *)(a1 + 530)) {
      double v30 = 0.0;
    }
    *(_WORD *)(v68 + 100) |= 0x20u;
    *(double *)(v29 + 48) = v30;
    uint64_t v31 = v68;
    uint64_t v32 = *(void *)(a3 + 20);
    *(_WORD *)(v68 + 100) |= 8u;
    *(void *)(v31 + 32) = v32;
    uint64_t v33 = v68;
    uint64_t v34 = *(void *)(a3 + 28);
    *(_WORD *)(v68 + 100) |= 1u;
    *(void *)(v33 + 8) = v34;
    uint64_t v35 = v68;
    uint64_t v36 = *(void *)(a3 + 36);
    *(_WORD *)(v68 + 100) |= 0x200u;
    *(void *)(v35 + 80) = v36;
    uint64_t v37 = v68;
    uint64_t v38 = *(void *)(a3 + 60);
    *(_WORD *)(v68 + 100) |= 2u;
    *(void *)(v37 + 16) = v38;
    uint64_t v39 = v68;
    uint64_t v40 = *(void *)(a3 + 68);
    *(_WORD *)(v68 + 100) |= 4u;
    *(void *)(v39 + 24) = v40;
    uint64_t v41 = v68;
    int v42 = *(unsigned __int8 *)(a1 + 530);
    *(_WORD *)(v68 + 100) |= 0x800u;
    *(_DWORD *)(v41 + 92) = v42;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1023257E8);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)&buf);
    }
    sub_101706914((PB::Base *)&buf);
  }
}

void sub_10011A454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_10011A474(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, double a5)
{
  int v141 = a2;
  int v8 = *(uint64_t **)(a1 + 3880);
  uint64_t v9 = (uint64_t *)(a1 + 3888);
  if (v8 != (uint64_t *)(a1 + 3888))
  {
    uint64_t v10 = (uint64_t **)(a1 + 3880);
    do
    {
      if (*((double *)v8 + 36) + 20.0 < a5)
      {
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022D3BB8);
        }
        uint64_t v11 = qword_1024193C8;
        if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
        {
          if (*((char *)v8 + 55) >= 0) {
            size_t v12 = *((unsigned __int8 *)v8 + 55);
          }
          else {
            size_t v12 = v8[5];
          }
          sub_1001110E4((uint64_t)v148, v12 + 1);
          if (v150[9] >= 0) {
            uint64_t v13 = v148;
          }
          else {
            uint64_t v13 = *(unsigned char **)v148;
          }
          if (v12)
          {
            if (*((char *)v8 + 55) >= 0) {
              uint64_t v14 = v8 + 4;
            }
            else {
              uint64_t v14 = (const void *)v8[4];
            }
            memmove(v13, v14, v12);
          }
          *(_WORD *)&v13[v12] = 47;
          int v15 = *((char *)v8 + 79);
          if (v15 >= 0) {
            int32x2_t v16 = (const std::string::value_type *)(v8 + 7);
          }
          else {
            int32x2_t v16 = (const std::string::value_type *)v8[7];
          }
          if (v15 >= 0) {
            std::string::size_type v17 = *((unsigned __int8 *)v8 + 79);
          }
          else {
            std::string::size_type v17 = v8[8];
          }
          uint64_t v18 = std::string::append((std::string *)v148, v16, v17);
          long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          *(void *)&__p[16] = *((void *)&v18->__r_.__value_.__l + 2);
          *(_OWORD *)long long __p = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          if ((v150[9] & 0x80000000) != 0) {
            operator delete(*(void **)v148);
          }
          uint64_t v20 = __p;
          if (__p[23] < 0) {
            uint64_t v20 = *(unsigned char **)__p;
          }
          unsigned int v21 = *((_DWORD *)v8 + 70) + 1;
          int v22 = "---";
          if (v21 <= 4) {
            int v22 = off_1022D3DC8[v21];
          }
          uint64_t v23 = "---";
          if ((v141 + 1) <= 4) {
            uint64_t v23 = off_1022D3DC8[v141 + 1];
          }
          uint64_t v24 = v8[36];
          *(_DWORD *)long long v148 = 136316162;
          *(void *)&v148[4] = v20;
          __int16 v149 = 2080;
          *(void *)long long v150 = v22;
          *(_WORD *)&v150[8] = 2080;
          *(void *)&v150[10] = v23;
          __int16 v151 = 1024;
          int v152 = a3;
          __int16 v153 = 2048;
          uint64_t v154 = v24;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#Warning Fence: avoid notifyFenceEntryExitForAuthorizedFence, fence, %s, status, %s, searchStatus, %s, client, %d, timestamp,%.1lf", v148, 0x30u);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(v148, 0x65CuLL);
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022D3BB8);
          }
          sub_100918454((const void **)v8 + 4, &v142);
          uint64_t v47 = &v142;
          if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v47 = (std::string *)v142.__r_.__value_.__r.__words[0];
          }
          unsigned int v48 = *((_DWORD *)v8 + 70) + 1;
          uint64_t v49 = "---";
          if (v48 <= 4) {
            uint64_t v49 = off_1022D3DC8[v48];
          }
          uint64_t v50 = "---";
          if ((v141 + 1) <= 4) {
            uint64_t v50 = off_1022D3DC8[v141 + 1];
          }
          uint64_t v51 = v8[36];
          *(_DWORD *)long long __p = 136316162;
          *(void *)&__p[4] = v47;
          *(_WORD *)&unsigned char __p[12] = 2080;
          *(void *)&__p[14] = v49;
          *(_WORD *)&__p[22] = 2080;
          *(void *)&__p[24] = v50;
          __int16 v144 = 1024;
          int v145 = a3;
          __int16 v146 = 2048;
          uint64_t v147 = v51;
          unsigned int v52 = (char *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v142.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceManager::pendingFenceMaintenanceOnClientRegistration(CFAbsoluteTime, CLFenceManager_Type::FenceStatus, int, const std::string &)", "%s\n", v52);
          if (v52 != v148) {
            free(v52);
          }
        }
        uint64_t v25 = sub_1000F0A30(v10, v8);
        sub_10091F660((uint64_t)(v8 + 4));
        operator delete(v8);
        goto LABEL_90;
      }
      uint64_t v26 = *((unsigned __int8 *)v8 + 55);
      if ((v26 & 0x80u) == 0) {
        uint64_t v27 = *((unsigned __int8 *)v8 + 55);
      }
      else {
        uint64_t v27 = v8[5];
      }
      uint64_t v28 = a4[23];
      int v29 = (char)v28;
      if ((v28 & 0x80u) != 0) {
        uint64_t v28 = *((void *)a4 + 1);
      }
      if (v27 == v28)
      {
        if (v29 >= 0) {
          double v30 = a4;
        }
        else {
          double v30 = *(unsigned __int8 **)a4;
        }
        if ((v26 & 0x80) == 0)
        {
          if (*((unsigned char *)v8 + 55))
          {
            uint64_t v31 = (unsigned __int8 *)(v8 + 4);
            while (*v31 == *v30)
            {
              ++v31;
              ++v30;
              if (!--v26) {
                goto LABEL_52;
              }
            }
            goto LABEL_85;
          }
LABEL_52:
          if (*((_DWORD *)v8 + 70) == v141)
          {
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022D3BB8);
            }
            uint64_t v32 = qword_1024193C8;
            if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
            {
              if (*((char *)v8 + 55) >= 0) {
                size_t v33 = *((unsigned __int8 *)v8 + 55);
              }
              else {
                size_t v33 = v8[5];
              }
              sub_1001110E4((uint64_t)v148, v33 + 1);
              if (v150[9] >= 0) {
                uint64_t v34 = v148;
              }
              else {
                uint64_t v34 = *(unsigned char **)v148;
              }
              if (v33)
              {
                if (*((char *)v8 + 55) >= 0) {
                  uint64_t v35 = v8 + 4;
                }
                else {
                  uint64_t v35 = (const void *)v8[4];
                }
                memmove(v34, v35, v33);
              }
              *(_WORD *)&v34[v33] = 47;
              int v36 = *((char *)v8 + 79);
              if (v36 >= 0) {
                uint64_t v37 = (const std::string::value_type *)(v8 + 7);
              }
              else {
                uint64_t v37 = (const std::string::value_type *)v8[7];
              }
              if (v36 >= 0) {
                std::string::size_type v38 = *((unsigned __int8 *)v8 + 79);
              }
              else {
                std::string::size_type v38 = v8[8];
              }
              uint64_t v39 = std::string::append((std::string *)v148, v37, v38);
              long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
              *(void *)&__p[16] = *((void *)&v39->__r_.__value_.__l + 2);
              *(_OWORD *)long long __p = v40;
              v39->__r_.__value_.__l.__size_ = 0;
              v39->__r_.__value_.__r.__words[2] = 0;
              v39->__r_.__value_.__r.__words[0] = 0;
              if ((v150[9] & 0x80000000) != 0) {
                operator delete(*(void **)v148);
              }
              uint64_t v41 = __p;
              if (__p[23] < 0) {
                uint64_t v41 = *(unsigned char **)__p;
              }
              unsigned int v42 = *((_DWORD *)v8 + 70) + 1;
              int v43 = "---";
              if (v42 <= 4) {
                int v43 = off_1022D3DC8[v42];
              }
              int v44 = "---";
              if ((v141 + 1) <= 4) {
                int v44 = off_1022D3DC8[v141 + 1];
              }
              *(_DWORD *)long long v148 = 136381443;
              *(void *)&v148[4] = v41;
              __int16 v149 = 2081;
              *(void *)long long v150 = v43;
              *(_WORD *)&v150[8] = 2081;
              *(void *)&v150[10] = v44;
              __int16 v151 = 1026;
              int v152 = a3;
              _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "notifyFenceEntryExitForAuthorizedFence,fence,%{private}s,fenceStatus,%{private}s,searchStatus %{private}s,client,%{public}d", v148, 0x26u);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(v148, 0x65CuLL);
              if (qword_1024193C0 != -1) {
                dispatch_once(&qword_1024193C0, &stru_1022D3BB8);
              }
              sub_100918454((const void **)v8 + 4, &v142);
              __int16 v53 = &v142;
              if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                __int16 v53 = (std::string *)v142.__r_.__value_.__r.__words[0];
              }
              unsigned int v54 = *((_DWORD *)v8 + 70) + 1;
              __int16 v55 = "---";
              if (v54 <= 4) {
                __int16 v55 = off_1022D3DC8[v54];
              }
              uint64_t v56 = "---";
              if ((v141 + 1) <= 4) {
                uint64_t v56 = off_1022D3DC8[v141 + 1];
              }
              *(_DWORD *)long long __p = 136381443;
              *(void *)&__p[4] = v53;
              *(_WORD *)&unsigned char __p[12] = 2081;
              *(void *)&__p[14] = v55;
              *(_WORD *)&__p[22] = 2081;
              *(void *)&__p[24] = v56;
              __int16 v144 = 1026;
              int v145 = a3;
              __int16 v57 = (char *)_os_log_send_and_compose_impl();
              if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v142.__r_.__value_.__l.__data_);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceManager::pendingFenceMaintenanceOnClientRegistration(CFAbsoluteTime, CLFenceManager_Type::FenceStatus, int, const std::string &)", "%s\n", v57);
              if (v57 != v148) {
                free(v57);
              }
            }
            sub_10091AC1C(a1, (uint64_t)(v8 + 4), &v141, (long long *)(v8 + 39), a3);
          }
          goto LABEL_85;
        }
        if (!memcmp((const void *)v8[4], v30, v8[5])) {
          goto LABEL_52;
        }
      }
LABEL_85:
      uint64_t v45 = (uint64_t *)v8[1];
      if (v45)
      {
        do
        {
          uint64_t v25 = v45;
          uint64_t v45 = (uint64_t *)*v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          uint64_t v25 = (uint64_t *)v8[2];
          BOOL v46 = *v25 == (void)v8;
          int v8 = v25;
        }
        while (!v46);
      }
LABEL_90:
      int v8 = v25;
    }
    while (v25 != v9);
  }
  uint64_t v58 = *(uint64_t **)(a1 + 3904);
  if (v58 != (uint64_t *)(a1 + 3912))
  {
    do
    {
      if (*((double *)v58 + 36) + 20.0 < a5)
      {
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022D3BB8);
        }
        __int16 v59 = qword_1024193C8;
        if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
        {
          if (*((char *)v58 + 55) >= 0) {
            size_t v60 = *((unsigned __int8 *)v58 + 55);
          }
          else {
            size_t v60 = v58[5];
          }
          sub_1001110E4((uint64_t)v148, v60 + 1);
          if (v150[9] >= 0) {
            __int16 v61 = v148;
          }
          else {
            __int16 v61 = *(unsigned char **)v148;
          }
          if (v60)
          {
            if (*((char *)v58 + 55) >= 0) {
              uint64_t v62 = v58 + 4;
            }
            else {
              uint64_t v62 = (const void *)v58[4];
            }
            memmove(v61, v62, v60);
          }
          *(_WORD *)&v61[v60] = 47;
          int v63 = *((char *)v58 + 79);
          if (v63 >= 0) {
            uint64_t v64 = (const std::string::value_type *)(v58 + 7);
          }
          else {
            uint64_t v64 = (const std::string::value_type *)v58[7];
          }
          if (v63 >= 0) {
            std::string::size_type v65 = *((unsigned __int8 *)v58 + 79);
          }
          else {
            std::string::size_type v65 = v58[8];
          }
          uint64_t v66 = std::string::append((std::string *)v148, v64, v65);
          long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
          *(void *)&__p[16] = *((void *)&v66->__r_.__value_.__l + 2);
          *(_OWORD *)long long __p = v67;
          v66->__r_.__value_.__l.__size_ = 0;
          v66->__r_.__value_.__r.__words[2] = 0;
          v66->__r_.__value_.__r.__words[0] = 0;
          if ((v150[9] & 0x80000000) != 0) {
            operator delete(*(void **)v148);
          }
          uint64_t v68 = __p;
          if (__p[23] < 0) {
            uint64_t v68 = *(unsigned char **)__p;
          }
          unsigned int v69 = *((_DWORD *)v58 + 70) + 1;
          long long v70 = "---";
          if (v69 <= 4) {
            long long v70 = off_1022D3DC8[v69];
          }
          long long v71 = "---";
          if ((v141 + 1) <= 4) {
            long long v71 = off_1022D3DC8[v141 + 1];
          }
          uint64_t v72 = v58[36];
          *(_DWORD *)long long v148 = 136381699;
          *(void *)&v148[4] = v68;
          __int16 v149 = 2081;
          *(void *)long long v150 = v70;
          *(_WORD *)&v150[8] = 2081;
          *(void *)&v150[10] = v71;
          __int16 v151 = 1026;
          int v152 = a3;
          __int16 v153 = 2050;
          uint64_t v154 = v72;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "#Warning Fence: avoid sendFenceStatusNotification, fence, %{private}s, status, %{private}s, searchStatus, %{private}s, client, %{public}d, timestamp,%{public}.1lf", v148, 0x30u);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(v148, 0x65CuLL);
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022D3BB8);
          }
          sub_100918454((const void **)v58 + 4, &v142);
          BOOL v94 = &v142;
          if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            BOOL v94 = (std::string *)v142.__r_.__value_.__r.__words[0];
          }
          unsigned int v95 = *((_DWORD *)v58 + 70) + 1;
          long long v96 = "---";
          if (v95 <= 4) {
            long long v96 = off_1022D3DC8[v95];
          }
          long long v97 = "---";
          if ((v141 + 1) <= 4) {
            long long v97 = off_1022D3DC8[v141 + 1];
          }
          uint64_t v98 = v58[36];
          *(_DWORD *)long long __p = 136381699;
          *(void *)&__p[4] = v94;
          *(_WORD *)&unsigned char __p[12] = 2081;
          *(void *)&__p[14] = v96;
          *(_WORD *)&__p[22] = 2081;
          *(void *)&__p[24] = v97;
          __int16 v144 = 1026;
          int v145 = a3;
          __int16 v146 = 2050;
          uint64_t v147 = v98;
          long long v99 = (char *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v142.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceManager::pendingFenceMaintenanceOnClientRegistration(CFAbsoluteTime, CLFenceManager_Type::FenceStatus, int, const std::string &)", "%s\n", v99);
          if (v99 != v148) {
            free(v99);
          }
        }
        unint64_t v73 = sub_1000F0A30((uint64_t **)(a1 + 3904), v58);
        sub_10091F660((uint64_t)(v58 + 4));
        operator delete(v58);
        goto LABEL_203;
      }
      uint64_t v74 = *((unsigned __int8 *)v58 + 55);
      if ((v74 & 0x80u) == 0) {
        uint64_t v75 = *((unsigned __int8 *)v58 + 55);
      }
      else {
        uint64_t v75 = v58[5];
      }
      uint64_t v76 = a4[23];
      int v77 = (char)v76;
      if ((v76 & 0x80u) != 0) {
        uint64_t v76 = *((void *)a4 + 1);
      }
      if (v75 == v76)
      {
        if (v77 >= 0) {
          long long v78 = a4;
        }
        else {
          long long v78 = *(unsigned __int8 **)a4;
        }
        if ((v74 & 0x80) == 0)
        {
          if (*((unsigned char *)v58 + 55))
          {
            char v79 = (unsigned __int8 *)(v58 + 4);
            while (*v79 == *v78)
            {
              ++v79;
              ++v78;
              if (!--v74) {
                goto LABEL_166;
              }
            }
            goto LABEL_198;
          }
LABEL_166:
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022D3BB8);
          }
          long long v80 = qword_1024193C8;
          if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
          {
            if (*((char *)v58 + 55) >= 0) {
              size_t v81 = *((unsigned __int8 *)v58 + 55);
            }
            else {
              size_t v81 = v58[5];
            }
            sub_1001110E4((uint64_t)v148, v81 + 1);
            if (v150[9] >= 0) {
              long long v82 = v148;
            }
            else {
              long long v82 = *(unsigned char **)v148;
            }
            if (v81)
            {
              if (*((char *)v58 + 55) >= 0) {
                long long v83 = v58 + 4;
              }
              else {
                long long v83 = (const void *)v58[4];
              }
              memmove(v82, v83, v81);
            }
            *(_WORD *)&v82[v81] = 47;
            int v84 = *((char *)v58 + 79);
            if (v84 >= 0) {
              long long v85 = (const std::string::value_type *)(v58 + 7);
            }
            else {
              long long v85 = (const std::string::value_type *)v58[7];
            }
            if (v84 >= 0) {
              std::string::size_type v86 = *((unsigned __int8 *)v58 + 79);
            }
            else {
              std::string::size_type v86 = v58[8];
            }
            long long v87 = std::string::append((std::string *)v148, v85, v86);
            long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
            *(void *)&__p[16] = *((void *)&v87->__r_.__value_.__l + 2);
            *(_OWORD *)long long __p = v88;
            v87->__r_.__value_.__l.__size_ = 0;
            v87->__r_.__value_.__r.__words[2] = 0;
            v87->__r_.__value_.__r.__words[0] = 0;
            if ((v150[9] & 0x80000000) != 0) {
              operator delete(*(void **)v148);
            }
            long long v89 = __p;
            if (__p[23] < 0) {
              long long v89 = *(unsigned char **)__p;
            }
            unsigned int v90 = *((_DWORD *)v58 + 70) + 1;
            long long v91 = "---";
            if (v90 <= 4) {
              long long v91 = off_1022D3DC8[v90];
            }
            long long v92 = "---";
            if ((v141 + 1) <= 4) {
              long long v92 = off_1022D3DC8[v141 + 1];
            }
            *(_DWORD *)long long v148 = 136381443;
            *(void *)&v148[4] = v89;
            __int16 v149 = 2081;
            *(void *)long long v150 = v91;
            *(_WORD *)&v150[8] = 2081;
            *(void *)&v150[10] = v92;
            __int16 v151 = 1026;
            int v152 = a3;
            _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "sendFenceStatusNotification,fence,%{private}s,fenceStatus,%{private}s,searchStatus %{private}s,client,%{public}d", v148, 0x26u);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(v148, 0x65CuLL);
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022D3BB8);
            }
            sub_100918454((const void **)v58 + 4, &v142);
            long long v100 = &v142;
            if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              long long v100 = (std::string *)v142.__r_.__value_.__r.__words[0];
            }
            unsigned int v101 = *((_DWORD *)v58 + 70) + 1;
            long long v102 = "---";
            if (v101 <= 4) {
              long long v102 = off_1022D3DC8[v101];
            }
            long long v103 = "---";
            if ((v141 + 1) <= 4) {
              long long v103 = off_1022D3DC8[v141 + 1];
            }
            *(_DWORD *)long long __p = 136381443;
            *(void *)&__p[4] = v100;
            *(_WORD *)&unsigned char __p[12] = 2081;
            *(void *)&__p[14] = v102;
            *(_WORD *)&__p[22] = 2081;
            *(void *)&__p[24] = v103;
            __int16 v144 = 1026;
            int v145 = a3;
            long long v104 = (char *)_os_log_send_and_compose_impl();
            if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v142.__r_.__value_.__l.__data_);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceManager::pendingFenceMaintenanceOnClientRegistration(CFAbsoluteTime, CLFenceManager_Type::FenceStatus, int, const std::string &)", "%s\n", v104);
            if (v104 != v148) {
              free(v104);
            }
          }
          sub_100917F98(a1, (uint64_t)(v58 + 4), (int *)v58 + 70, (int *)v58 + 74, a3);
          goto LABEL_198;
        }
        if (!memcmp((const void *)v58[4], v78, v58[5])) {
          goto LABEL_166;
        }
      }
LABEL_198:
      uint64_t v93 = (uint64_t *)v58[1];
      if (v93)
      {
        do
        {
          unint64_t v73 = v93;
          uint64_t v93 = (uint64_t *)*v93;
        }
        while (v93);
      }
      else
      {
        do
        {
          unint64_t v73 = (uint64_t *)v58[2];
          BOOL v46 = *v73 == (void)v58;
          uint64_t v58 = v73;
        }
        while (!v46);
      }
LABEL_203:
      uint64_t v58 = v73;
    }
    while (v73 != (uint64_t *)(a1 + 3912));
  }
  long long v105 = *(uint64_t **)(a1 + 3928);
  if (v105 != (uint64_t *)(a1 + 3936))
  {
    do
    {
      if (*((double *)v105 + 35) + 20.0 < a5)
      {
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022D3BB8);
        }
        long long v106 = qword_1024193C8;
        if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
        {
          if (*((char *)v105 + 55) >= 0) {
            size_t v107 = *((unsigned __int8 *)v105 + 55);
          }
          else {
            size_t v107 = v105[5];
          }
          sub_1001110E4((uint64_t)v148, v107 + 1);
          if (v150[9] >= 0) {
            long long v108 = v148;
          }
          else {
            long long v108 = *(unsigned char **)v148;
          }
          if (v107)
          {
            if (*((char *)v105 + 55) >= 0) {
              long long v109 = v105 + 4;
            }
            else {
              long long v109 = (const void *)v105[4];
            }
            memmove(v108, v109, v107);
          }
          *(_WORD *)&v108[v107] = 47;
          int v110 = *((char *)v105 + 79);
          if (v110 >= 0) {
            long long v111 = (const std::string::value_type *)(v105 + 7);
          }
          else {
            long long v111 = (const std::string::value_type *)v105[7];
          }
          if (v110 >= 0) {
            std::string::size_type v112 = *((unsigned __int8 *)v105 + 79);
          }
          else {
            std::string::size_type v112 = v105[8];
          }
          long long v113 = std::string::append((std::string *)v148, v111, v112);
          long long v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
          *(void *)&__p[16] = *((void *)&v113->__r_.__value_.__l + 2);
          *(_OWORD *)long long __p = v114;
          v113->__r_.__value_.__l.__size_ = 0;
          v113->__r_.__value_.__r.__words[2] = 0;
          v113->__r_.__value_.__r.__words[0] = 0;
          if ((v150[9] & 0x80000000) != 0) {
            operator delete(*(void **)v148);
          }
          long long v115 = __p;
          if (__p[23] < 0) {
            long long v115 = *(unsigned char **)__p;
          }
          uint64_t v116 = v105[35];
          *(_DWORD *)long long v148 = 136381187;
          *(void *)&v148[4] = v115;
          __int16 v149 = 1026;
          *(_DWORD *)long long v150 = a3;
          *(_WORD *)&v150[4] = 2050;
          *(void *)&void v150[6] = v116;
          _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEBUG, "#Warning Fence: avoid sendFenceFailureNotification, fence, %{private}s, client, %{public}d, timestamp,%{public}.1lf", v148, 0x1Cu);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(v148, 0x65CuLL);
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022D3BB8);
          }
          sub_100918454((const void **)v105 + 4, &v142);
          unint64_t v135 = &v142;
          if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unint64_t v135 = (std::string *)v142.__r_.__value_.__r.__words[0];
          }
          uint64_t v136 = v105[35];
          *(_DWORD *)long long __p = 136381187;
          *(void *)&__p[4] = v135;
          *(_WORD *)&unsigned char __p[12] = 1026;
          *(_DWORD *)&__p[14] = a3;
          *(_WORD *)&unsigned char __p[18] = 2050;
          *(void *)&__p[20] = v136;
          long long v137 = (char *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v142.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceManager::pendingFenceMaintenanceOnClientRegistration(CFAbsoluteTime, CLFenceManager_Type::FenceStatus, int, const std::string &)", "%s\n", v137);
          if (v137 != v148) {
            free(v137);
          }
        }
        long long v117 = sub_1000F0A30((uint64_t **)(a1 + 3928), v105);
        sub_10091F744((uint64_t)(v105 + 4));
        operator delete(v105);
        goto LABEL_308;
      }
      uint64_t v118 = *((unsigned __int8 *)v105 + 55);
      if ((v118 & 0x80u) == 0) {
        uint64_t v119 = *((unsigned __int8 *)v105 + 55);
      }
      else {
        uint64_t v119 = v105[5];
      }
      uint64_t v120 = a4[23];
      int v121 = (char)v120;
      if ((v120 & 0x80u) != 0) {
        uint64_t v120 = *((void *)a4 + 1);
      }
      if (v119 == v120)
      {
        if (v121 >= 0) {
          long long v122 = a4;
        }
        else {
          long long v122 = *(unsigned __int8 **)a4;
        }
        if ((v118 & 0x80) == 0)
        {
          if (*((unsigned char *)v105 + 55))
          {
            long long v123 = (unsigned __int8 *)(v105 + 4);
            while (*v123 == *v122)
            {
              ++v123;
              ++v122;
              if (!--v118) {
                goto LABEL_275;
              }
            }
            goto LABEL_303;
          }
LABEL_275:
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022D3BB8);
          }
          long long v124 = qword_1024193C8;
          if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
          {
            if (*((char *)v105 + 55) >= 0) {
              size_t v125 = *((unsigned __int8 *)v105 + 55);
            }
            else {
              size_t v125 = v105[5];
            }
            sub_1001110E4((uint64_t)v148, v125 + 1);
            if (v150[9] >= 0) {
              long long v126 = v148;
            }
            else {
              long long v126 = *(unsigned char **)v148;
            }
            if (v125)
            {
              if (*((char *)v105 + 55) >= 0) {
                long long v127 = v105 + 4;
              }
              else {
                long long v127 = (const void *)v105[4];
              }
              memmove(v126, v127, v125);
            }
            *(_WORD *)&v126[v125] = 47;
            int v128 = *((char *)v105 + 79);
            if (v128 >= 0) {
              long long v129 = (const std::string::value_type *)(v105 + 7);
            }
            else {
              long long v129 = (const std::string::value_type *)v105[7];
            }
            if (v128 >= 0) {
              std::string::size_type v130 = *((unsigned __int8 *)v105 + 79);
            }
            else {
              std::string::size_type v130 = v105[8];
            }
            long long v131 = std::string::append((std::string *)v148, v129, v130);
            long long v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
            *(void *)&__p[16] = *((void *)&v131->__r_.__value_.__l + 2);
            *(_OWORD *)long long __p = v132;
            v131->__r_.__value_.__l.__size_ = 0;
            v131->__r_.__value_.__r.__words[2] = 0;
            v131->__r_.__value_.__r.__words[0] = 0;
            if ((v150[9] & 0x80000000) != 0) {
              operator delete(*(void **)v148);
            }
            unint64_t v133 = __p;
            if (__p[23] < 0) {
              unint64_t v133 = *(unsigned char **)__p;
            }
            *(_DWORD *)long long v148 = 136380931;
            *(void *)&v148[4] = v133;
            __int16 v149 = 1026;
            *(_DWORD *)long long v150 = a3;
            _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_DEBUG, "sendFenceFailureNotification,fence,%{private}s,client,%{public}d", v148, 0x12u);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(v148, 0x65CuLL);
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022D3BB8);
            }
            sub_100918454((const void **)v105 + 4, (std::string *)__p);
            long long v138 = __p;
            if (__p[23] < 0) {
              long long v138 = *(unsigned char **)__p;
            }
            LODWORD(v142.__r_.__value_.__l.__data_) = 136380931;
            *(std::string::size_type *)((char *)v142.__r_.__value_.__r.__words + 4) = (std::string::size_type)v138;
            WORD2(v142.__r_.__value_.__r.__words[1]) = 1026;
            *(_DWORD *)((char *)&v142.__r_.__value_.__r.__words[1] + 6) = a3;
            long long v139 = (char *)_os_log_send_and_compose_impl();
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceManager::pendingFenceMaintenanceOnClientRegistration(CFAbsoluteTime, CLFenceManager_Type::FenceStatus, int, const std::string &)", "%s\n", v139);
            if (v139 != v148) {
              free(v139);
            }
          }
          sub_100917E48(a1, (uint64_t)(v105 + 4));
          goto LABEL_303;
        }
        if (!memcmp((const void *)v105[4], v122, v105[5])) {
          goto LABEL_275;
        }
      }
LABEL_303:
      int v134 = (uint64_t *)v105[1];
      if (v134)
      {
        do
        {
          long long v117 = v134;
          int v134 = (uint64_t *)*v134;
        }
        while (v134);
      }
      else
      {
        do
        {
          long long v117 = (uint64_t *)v105[2];
          BOOL v46 = *v117 == (void)v105;
          long long v105 = v117;
        }
        while (!v46);
      }
LABEL_308:
      long long v105 = v117;
    }
    while (v117 != (uint64_t *)(a1 + 3936));
  }
}

void sub_10011BA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *sub_10011BA60(unsigned int a1)
{
  if (a1 > 3) {
    return "Invalid";
  }
  else {
    return (&off_1022BE990)[a1];
  }
}

const char *sub_10011BA84(unsigned int a1)
{
  if (a1 > 0xB) {
    return "Invalid";
  }
  else {
    return (&off_1022BE9B0)[a1];
  }
}

void sub_10011BAA8(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v2 = a1 + 64;
  uint64_t v3 = v4;
  if (v4)
  {
    int v5 = *a2;
    uint64_t v6 = v2;
    do
    {
      int v7 = *(_DWORD *)(v3 + 32);
      BOOL v8 = v7 < v5;
      if (v7 >= v5) {
        uint64_t v9 = (uint64_t *)v3;
      }
      else {
        uint64_t v9 = (uint64_t *)(v3 + 8);
      }
      if (!v8) {
        uint64_t v6 = v3;
      }
      uint64_t v3 = *v9;
    }
    while (*v9);
    if (v6 != v2 && v5 >= *(_DWORD *)(v6 + 32))
    {
      uint64_t v10 = *(std::__shared_weak_count **)(v6 + 72);
      *(void *)(v6 + 64) = 0;
      *(void *)(v6 + 72) = 0;
      if (v10) {
        sub_1000DB0A0(v10);
      }
    }
  }
}

uint64_t sub_10011BAFC(uint64_t a1, void *a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10233D380);
  }
  uint64_t v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 2564);
    *(_DWORD *)uint64_t buf = 67109120;
    int v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,updateCellData", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::updateCellData(std::vector<CLCell> &&)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  uint64_t v6 = *(void *)(a1 + 2480);
  *(void *)(a1 + 2480) = *a2;
  *a2 = v6;
  uint64_t v7 = *(void *)(a1 + 2488);
  *(void *)(a1 + 2488) = a2[1];
  a2[1] = v7;
  uint64_t v8 = *(void *)(a1 + 2496);
  *(void *)(a1 + 2496) = a2[2];
  a2[2] = v8;
  return sub_10011BCEC(a1);
}

uint64_t sub_10011BCEC(uint64_t a1)
{
  sub_1000FA8B8((uint64_t *)(a1 + 2480), v12);
  if (v14 && v13 == 6)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    uint64_t v2 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = *(_DWORD *)(a1 + 2564);
      *(_DWORD *)uint64_t buf = 67109376;
      int v20 = v3;
      __int16 v21 = 1024;
      BOOL v22 = v13 == 6;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,ServingCellInfoChange,isOnLte,%d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      int v10 = *(_DWORD *)(a1 + 2564);
      int v15 = 67109376;
      int v16 = v10;
      __int16 v17 = 1024;
      BOOL v18 = v13 == 6;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::process_ServingCellInfoChange()", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    char v4 = 1;
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    int v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(_DWORD *)(a1 + 2564);
      *(_DWORD *)uint64_t buf = 67109120;
      int v20 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,ServingCellInfoChange, not on LTE", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      int v8 = *(_DWORD *)(a1 + 2564);
      int v15 = 67109120;
      int v16 = v8;
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::process_ServingCellInfoChange()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    char v4 = 0;
  }
  *(unsigned char *)(a1 + 371) = v4;
  sub_10011C08C(a1 + 104, 22);
  return sub_1000F3950((uint64_t)v12);
}

void sub_10011C068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000F3950((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10011C08C(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 88);
  int v93 = *(_DWORD *)(a1 + 4);
  if (!*(void *)(a1 + 32))
  {
    sub_1017DE550();
    goto LABEL_181;
  }
  int v3 = &qword_102419000;
  if (!*(unsigned char *)(a1 + 48))
  {
    sub_1017DE6C8(qword_1024193D0 == -1);
    goto LABEL_181;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233D3A0);
  }
  int v5 = qword_1024193D8;
  os_log_type_t v6 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v6))
  {
    uint64_t v7 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      uint64_t v7 = (void *)*v7;
    }
    if (*(_DWORD *)(a1 + 4)) {
      int v8 = "Session";
    }
    else {
      int v8 = "Idle";
    }
    sub_100134750(__p, v8);
    int v9 = SHIBYTE(v97);
    int v10 = *(unsigned char **)__p;
    sub_10011CEAC(a2, v104);
    uint64_t v11 = __p;
    if (v9 < 0) {
      uint64_t v11 = v10;
    }
    if (v107 >= 0) {
      int v12 = v104;
    }
    else {
      int v12 = *(unsigned char **)v104;
    }
    *(_DWORD *)uint64_t buf = 136315650;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v100 = 2080;
    unsigned int v101 = v11;
    __int16 v102 = 2080;
    long long v103 = v12;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v107 < 0) {
      operator delete(*(void **)v104);
    }
    int v3 = &qword_102419000;
    if (SHIBYTE(v97) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D3A0);
    }
    uint64_t v62 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      uint64_t v62 = (void *)*v62;
    }
    if (*(_DWORD *)(a1 + 4)) {
      int v63 = "Session";
    }
    else {
      int v63 = "Idle";
    }
    sub_100134750(v104, v63);
    int v64 = v107;
    std::string::size_type v65 = *(unsigned char **)v104;
    sub_10011CEAC(a2, v91);
    uint64_t v66 = v104;
    if (v64 < 0) {
      uint64_t v66 = v65;
    }
    if (v92 >= 0) {
      long long v67 = v91;
    }
    else {
      long long v67 = (void **)v91[0];
    }
    *(_DWORD *)long long __p = 136315650;
    *(void *)&__p[4] = v62;
    __int16 v95 = 2080;
    long long v96 = v66;
    __int16 v97 = 2080;
    uint64_t v98 = v67;
    uint64_t v68 = (char *)_os_log_send_and_compose_impl();
    if (v92 < 0) {
      operator delete(v91[0]);
    }
    int v3 = &qword_102419000;
    if (v107 < 0) {
      operator delete(*(void **)v104);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLNilrSupl>::handleEvent(Event) [T = CLNilrSupl]", "%s\n", v68);
    if (v68 != buf) {
      free(v68);
    }
  }
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13) {
    goto LABEL_31;
  }
  char v14 = (uint64_t **)(a1 + 8);
  int v15 = *(_DWORD *)(a1 + 4);
  uint64_t v16 = a1 + 16;
  do
  {
    int v17 = *(_DWORD *)(v13 + 32);
    BOOL v18 = v17 < v15;
    if (v17 >= v15) {
      long long v19 = (uint64_t *)v13;
    }
    else {
      long long v19 = (uint64_t *)(v13 + 8);
    }
    if (!v18) {
      uint64_t v16 = v13;
    }
    uint64_t v13 = *v19;
  }
  while (*v19);
  if (v16 == a1 + 16 || v15 < *(_DWORD *)(v16 + 32))
  {
LABEL_31:
    sub_1017DE848();
    goto LABEL_181;
  }
  int v20 = *(uint64_t (**)(void *, uint64_t))(v16 + 40);
  uint64_t v21 = *(void *)(v16 + 48);
  BOOL v22 = (void *)(*(void *)(a1 + 32) + (v21 >> 1));
  if (v21) {
    int v20 = *(uint64_t (**)(void *, uint64_t))(*v22 + v20);
  }
  uint64_t v23 = v20(v22, a2);
  uint64_t v24 = v23;
  int v90 = v23;
  if (a2 <= 1 && v23 != v93)
  {
    sub_1017DECB0();
    goto LABEL_181;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D3A0);
    }
    uint64_t v25 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v26 = (void *)*v26;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233D3A0);
      }
      unint64_t v73 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        unint64_t v73 = (void *)*v73;
      }
      *(_DWORD *)long long __p = 136315138;
      *(void *)&__p[4] = v73;
      uint64_t v74 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "State CLStateMachine<CLNilrSupl>::handleEvent(Event) [T = CLNilrSupl]", "%s\n", v74);
      if (v74 != buf) {
        free(v74);
      }
    }
  }
  if (v3[122] != -1) {
    dispatch_once(&qword_1024193D0, &stru_10233D3A0);
  }
  uint64_t v27 = qword_1024193D8;
  os_log_type_t v28 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v28))
  {
    int v29 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v29 = (void *)*v29;
    }
    if (v24) {
      double v30 = "Session";
    }
    else {
      double v30 = "Idle";
    }
    sub_100134750(buf, v30);
    if (v102 >= 0) {
      uint64_t v31 = buf;
    }
    else {
      uint64_t v31 = *(unsigned char **)buf;
    }
    *(_DWORD *)long long __p = 136315394;
    *(void *)&__p[4] = v29;
    __int16 v95 = 2080;
    long long v96 = v31;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v102) < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D3A0);
    }
    unsigned int v69 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      unsigned int v69 = (void *)*v69;
    }
    if (v24) {
      long long v70 = "Session";
    }
    else {
      long long v70 = "Idle";
    }
    sub_100134750(__p, v70);
    if (v97 >= 0) {
      long long v71 = __p;
    }
    else {
      long long v71 = *(unsigned char **)__p;
    }
    *(_DWORD *)long long v104 = 136315394;
    *(void *)&v104[4] = v69;
    __int16 v105 = 2080;
    long long v106 = v71;
    uint64_t v72 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v97) < 0) {
      operator delete(*(void **)__p);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLNilrSupl>::handleEvent(Event) [T = CLNilrSupl]", "%s\n", v72);
    if (v72 != buf) {
      free(v72);
    }
  }
  if (v24 != v93)
  {
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_10233D3A0);
    }
    uint64_t v32 = qword_1024193D8;
    os_log_type_t v33 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v33))
    {
      uint64_t v34 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v34 = (void *)*v34;
      }
      if (v93) {
        uint64_t v35 = "Session";
      }
      else {
        uint64_t v35 = "Idle";
      }
      sub_100134750(__p, v35);
      int v36 = v3;
      int v37 = SHIBYTE(v97);
      std::string::size_type v38 = *(unsigned char **)__p;
      sub_100134750(v104, "Exit");
      uint64_t v39 = __p;
      if (v37 < 0) {
        uint64_t v39 = v38;
      }
      if (v107 >= 0) {
        long long v40 = v104;
      }
      else {
        long long v40 = *(unsigned char **)v104;
      }
      *(_DWORD *)uint64_t buf = 136315650;
      *(void *)&uint8_t buf[4] = v34;
      __int16 v100 = 2080;
      unsigned int v101 = v39;
      __int16 v102 = 2080;
      long long v103 = v40;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "%soldState,%s,event,%s", buf, 0x20u);
      if (v107 < 0) {
        operator delete(*(void **)v104);
      }
      int v3 = v36;
      if (SHIBYTE(v97) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233D3A0);
      }
      uint64_t v75 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v75 = (void *)*v75;
      }
      if (v93) {
        uint64_t v76 = "Session";
      }
      else {
        uint64_t v76 = "Idle";
      }
      sub_100134750(v104, v76);
      int v77 = v3;
      int v78 = v107;
      char v79 = *(unsigned char **)v104;
      sub_100134750(v91, "Exit");
      long long v80 = v104;
      if (v78 < 0) {
        long long v80 = v79;
      }
      if (v92 >= 0) {
        size_t v81 = v91;
      }
      else {
        size_t v81 = (void **)v91[0];
      }
      *(_DWORD *)long long __p = 136315650;
      *(void *)&__p[4] = v75;
      __int16 v95 = 2080;
      long long v96 = v80;
      __int16 v97 = 2080;
      uint64_t v98 = v81;
      long long v82 = (char *)_os_log_send_and_compose_impl();
      if (v92 < 0) {
        operator delete(v91[0]);
      }
      int v3 = v77;
      char v14 = (uint64_t **)(a1 + 8);
      if (v107 < 0) {
        operator delete(*(void **)v104);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLNilrSupl>::handleEvent(Event) [T = CLNilrSupl]", "%s\n", v82);
      if (v82 != buf) {
        free(v82);
      }
    }
    uint64_t v41 = *(void *)(a1 + 32);
    *(void *)uint64_t buf = &v93;
    unsigned int v42 = sub_1000C5658(v14, &v93, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    int v43 = v42[5];
    uint64_t v44 = (uint64_t)v42[6];
    uint64_t v45 = (void *)(v41 + (v44 >> 1));
    if (v44) {
      int v43 = *(uint64_t **)(*v45 + v43);
    }
    int v46 = ((uint64_t (*)(void *, uint64_t))v43)(v45, 1);
    if (v46 == v93)
    {
      *(_DWORD *)(a1 + 4) = v24;
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_10233D3A0);
      }
      uint64_t v47 = qword_1024193D8;
      os_log_type_t v48 = *(unsigned char *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1024193D8, v48))
      {
        uint64_t v49 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          uint64_t v49 = (void *)*v49;
        }
        if (v24) {
          uint64_t v50 = "Session";
        }
        else {
          uint64_t v50 = "Idle";
        }
        sub_100134750(__p, v50);
        uint64_t v51 = v3;
        int v52 = SHIBYTE(v97);
        __int16 v53 = *(unsigned char **)__p;
        sub_100134750(v104, "Enter");
        unsigned int v54 = __p;
        if (v52 < 0) {
          unsigned int v54 = v53;
        }
        if (v107 >= 0) {
          __int16 v55 = v104;
        }
        else {
          __int16 v55 = *(unsigned char **)v104;
        }
        *(_DWORD *)uint64_t buf = 136315650;
        *(void *)&uint8_t buf[4] = v49;
        __int16 v100 = 2080;
        unsigned int v101 = v54;
        __int16 v102 = 2080;
        long long v103 = v55;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "%snewState,%s,event,%s", buf, 0x20u);
        if (v107 < 0) {
          operator delete(*(void **)v104);
        }
        int v3 = v51;
        if (SHIBYTE(v97) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v3[122] != -1) {
          dispatch_once(&qword_1024193D0, &stru_10233D3A0);
        }
        long long v83 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          long long v83 = (void *)*v83;
        }
        if (v24) {
          int v84 = "Session";
        }
        else {
          int v84 = "Idle";
        }
        sub_100134750(v104, v84);
        int v85 = v107;
        std::string::size_type v86 = *(unsigned char **)v104;
        sub_100134750(v91, "Enter");
        long long v87 = v104;
        if (v85 < 0) {
          long long v87 = v86;
        }
        if (v92 >= 0) {
          long long v88 = v91;
        }
        else {
          long long v88 = (void **)v91[0];
        }
        *(_DWORD *)long long __p = 136315650;
        *(void *)&__p[4] = v83;
        __int16 v95 = 2080;
        long long v96 = v87;
        __int16 v97 = 2080;
        uint64_t v98 = v88;
        long long v89 = (char *)_os_log_send_and_compose_impl();
        if (v92 < 0) {
          operator delete(v91[0]);
        }
        if (v107 < 0) {
          operator delete(*(void **)v104);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLNilrSupl>::handleEvent(Event) [T = CLNilrSupl]", "%s\n", v89);
        if (v89 != buf) {
          free(v89);
        }
      }
      uint64_t v56 = *(void *)(a1 + 32);
      *(void *)uint64_t buf = &v90;
      __int16 v57 = sub_1000C5658(v14, &v90, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      uint64_t v58 = v57[5];
      uint64_t v59 = (uint64_t)v57[6];
      size_t v60 = (void *)(v56 + (v59 >> 1));
      if (v59) {
        uint64_t v58 = *(uint64_t **)(*v60 + v58);
      }
      uint64_t v24 = ((uint64_t (*)(void *, void))v58)(v60, 0);
      if (v24 == v90) {
        goto LABEL_101;
      }
      sub_1017DE9C0();
    }
    else
    {
      sub_1017DEB38();
    }
LABEL_181:
    __break(1u);
  }
LABEL_101:
  --*(_DWORD *)(a1 + 88);
  return v24;
}

void sub_10011CE4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 105) < 0) {
    operator delete(*(void **)(v22 - 128));
  }
  _Unwind_Resume(exception_object);
}

void *sub_10011CEAC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100134750(a2, (&off_10233DA10)[a1]);
}

BOOL sub_10011CEC0(uint64_t a1, int a2)
{
  BOOL result = 0;
  switch(a2)
  {
    case 0:
      sub_1017D5828(a1);
      sub_1017D5B84(a1);
      goto LABEL_98;
    case 2:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      uint64_t v11 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        int v12 = *(_DWORD *)(a1 + 2564);
        *(_DWORD *)uint64_t buf = 67109120;
        int v47 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#supl,EmergencyModeStart", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        int v36 = *(_DWORD *)(a1 + 2564);
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = v36;
        int v37 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrSupl::State CLNilrSupl::handler_Idle(CLNilrSupl::Event)", "%s\n", v37);
        if (v37 != (char *)buf) {
          free(v37);
        }
      }
      sub_1017D5A6C(a1 + 2136);
      sub_10011DF54(a1);
      goto LABEL_98;
    case 3:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      uint64_t v13 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        int v14 = *(_DWORD *)(a1 + 2564);
        *(_DWORD *)uint64_t buf = 67109120;
        int v47 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#supl,EmergencyModeEnd", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        int v38 = *(_DWORD *)(a1 + 2564);
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = v38;
        uint64_t v39 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrSupl::State CLNilrSupl::handler_Idle(CLNilrSupl::Event)", "%s\n", v39);
        if (v39 != (char *)buf) {
          free(v39);
        }
      }
      sub_1017D5A6C(a1 + 2136);
      goto LABEL_98;
    case 4:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      int v15 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = *(_DWORD *)(a1 + 2564);
        *(_DWORD *)uint64_t buf = 67109120;
        int v47 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,isSUPLInitValid?", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        int v40 = *(_DWORD *)(a1 + 2564);
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = v40;
        uint64_t v41 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrSupl::State CLNilrSupl::handler_Idle(CLNilrSupl::Event)", "%s\n", v41);
        if (v41 != (char *)buf) {
          free(v41);
        }
      }
      BOOL result = sub_1017D5FC0(a1, *(int **)(a1 + 2528), a1 + 2568);
      if (result)
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        int v17 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          int v18 = *(_DWORD *)(a1 + 2564);
          *(_DWORD *)uint64_t buf = 67109120;
          int v47 = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,SUPLInit is valid", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10233D380);
          }
          int v42 = *(_DWORD *)(a1 + 2564);
          LODWORD(__p[0]) = 67109120;
          HIDWORD(__p[0]) = v42;
          int v43 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrSupl::State CLNilrSupl::handler_Idle(CLNilrSupl::Event)", "%s\n", v43);
          if (v43 != (char *)buf) {
            free(v43);
          }
        }
        *(void *)(a1 + 360) = 0x4060000000000000;
        return 1;
      }
      return result;
    case 6:
    case 7:
      sub_1017D5B84(a1);
      goto LABEL_97;
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      int v5 = qword_1024193E8;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT);
      BOOL result = 0;
      if (!v6) {
        return result;
      }
      sub_10011CEAC(a2, __p);
      if (v45 >= 0) {
        uint64_t v7 = __p;
      }
      else {
        uint64_t v7 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 68289282;
      int v47 = 0;
      __int16 v48 = 2082;
      uint64_t v49 = "";
      __int16 v50 = 2082;
      uint64_t v51 = v7;
      int v8 = "{\"msg%{public}.0s\":\"#Warning,#nilr,#supl,connEvent without session\", \"connEvent\":%{public, location:escape_only}s}";
      goto LABEL_9;
    case 9:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      int v5 = qword_1024193E8;
      BOOL v19 = os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT);
      BOOL result = 0;
      if (!v19) {
        return result;
      }
      sub_100134750(__p, "ConnClose");
      if (v45 >= 0) {
        int v20 = __p;
      }
      else {
        int v20 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 68289282;
      int v47 = 0;
      __int16 v48 = 2082;
      uint64_t v49 = "";
      __int16 v50 = 2082;
      uint64_t v51 = v20;
      int v8 = "{\"msg%{public}.0s\":\"#Warning,#nilr,#supl,event without session, possibly due to session abort\", \"event\""
           ":%{public, location:escape_only}s}";
LABEL_9:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v8, buf, 0x1Cu);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_98;
    case 15:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      uint64_t v21 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        int v22 = *(_DWORD *)(a1 + 2564);
        *(_DWORD *)uint64_t buf = 67109120;
        int v47 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,timeout without session", buf, 8u);
      }
      BOOL result = sub_10013D1A0(115, 0);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_93;
      }
      goto LABEL_116;
    case 16:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      uint64_t v23 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        int v24 = *(_DWORD *)(a1 + 2564);
        *(_DWORD *)uint64_t buf = 67109120;
        int v47 = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,ecid request without session, dropping..", buf, 8u);
      }
      BOOL result = sub_10013D1A0(115, 0);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_93;
      }
      goto LABEL_116;
    case 17:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      uint64_t v25 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = *(_DWORD *)(a1 + 2564);
        *(_DWORD *)uint64_t buf = 67109120;
        int v47 = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,ecid response without session, dropping..", buf, 8u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      int v27 = *(_DWORD *)(a1 + 2564);
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v27;
      os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrSupl::State CLNilrSupl::handler_Idle(CLNilrSupl::Event)", "%s\n", v28);
      goto LABEL_94;
    case 18:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      int v29 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        int v30 = *(_DWORD *)(a1 + 2564);
        *(_DWORD *)uint64_t buf = 67109120;
        int v47 = v30;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,ecid request timeout without session", buf, 8u);
      }
      BOOL result = sub_10013D1A0(115, 0);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_93;
      }
      goto LABEL_116;
    case 19:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      uint64_t v31 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        int v32 = *(_DWORD *)(a1 + 2564);
        *(_DWORD *)uint64_t buf = 67109120;
        int v47 = v32;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,wlan request without session, dropping..", buf, 8u);
      }
      BOOL result = sub_10013D1A0(115, 0);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_93;
      }
      goto LABEL_116;
    case 20:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      os_log_type_t v33 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        int v34 = *(_DWORD *)(a1 + 2564);
        *(_DWORD *)uint64_t buf = 67109120;
        int v47 = v34;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,wlan response without session, dropping..", buf, 8u);
      }
      BOOL result = sub_10013D1A0(115, 0);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_93;
      }
      goto LABEL_116;
    case 21:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      int v9 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        int v10 = *(_DWORD *)(a1 + 2564);
        *(_DWORD *)uint64_t buf = 67109120;
        int v47 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,wlan request timeout without session, dropping..", buf, 8u);
      }
      BOOL result = sub_10013D1A0(115, 0);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_93;
      }
LABEL_116:
      dispatch_once(&qword_1024193E0, &stru_10233D380);
LABEL_93:
      int v35 = *(_DWORD *)(a1 + 2564);
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v35;
      os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLNilrSupl::State CLNilrSupl::handler_Idle(CLNilrSupl::Event)", "%s\n", v28);
LABEL_94:
      if (v28 != (char *)buf) {
        free(v28);
      }
      goto LABEL_98;
    case 22:
      if (*(unsigned char *)(a1 + 371)) {
LABEL_97:
      }
        sub_10011DF54(a1);
LABEL_98:
      BOOL result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void sub_10011DF54(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 272) && *(unsigned char *)(a1 + 313))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10233D380);
    }
    uint64_t v2 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*(unsigned char *)(a1 + 272)) {
        BOOL v3 = *(unsigned char *)(a1 + 313) != 0;
      }
      else {
        BOOL v3 = 0;
      }
      uint64_t v4 = *(void *)(a1 + 2440);
      if (!v4) {
        sub_10015E48C();
      }
      int v5 = *(_DWORD *)(a1 + 2564);
      int v6 = *(unsigned __int8 *)(a1 + 318);
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
      int v8 = *(unsigned __int8 *)(a1 + 312);
      *(_DWORD *)uint64_t buf = 67110144;
      int v35 = v5;
      __int16 v36 = 1024;
      BOOL v37 = v3;
      __int16 v38 = 1024;
      int v39 = v6;
      __int16 v40 = 1024;
      int v41 = v7;
      __int16 v42 = 1024;
      int v43 = v8;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#supl,startUdpListenerOnce,isSuplAllowed,%d,fInCellularEmergency,%d,fIsServingCellOnLte,%d,fUdpListenerIsRunning,%d", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10233D380);
      }
      if (*(unsigned char *)(a1 + 272)) {
        BOOL v14 = *(unsigned char *)(a1 + 313) != 0;
      }
      else {
        BOOL v14 = 0;
      }
      int v15 = *(_DWORD *)(a1 + 2564);
      int v16 = *(unsigned __int8 *)(a1 + 318);
      int v17 = sub_1017D8A20(a1 + 2416);
      int v18 = *(unsigned __int8 *)(a1 + 312);
      int v24 = 67110144;
      int v25 = v15;
      __int16 v26 = 1024;
      BOOL v27 = v14;
      __int16 v28 = 1024;
      int v29 = v16;
      __int16 v30 = 1024;
      int v31 = v17;
      __int16 v32 = 1024;
      int v33 = v18;
      BOOL v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::startUdpListenerOnce()", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    if (*(unsigned char *)(a1 + 272) && *(unsigned char *)(a1 + 313))
    {
      uint64_t v9 = *(void *)(a1 + 2440);
      if (!v9) {
        sub_10015E48C();
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 48))(v9) && !*(unsigned char *)(a1 + 312))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10233D380);
        }
        int v10 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = *(_DWORD *)(a1 + 2564);
          *(_DWORD *)uint64_t buf = 67109120;
          int v35 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,startUdpListenerOnce,success", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10233D380);
          }
          int v20 = *(_DWORD *)(a1 + 2564);
          int v24 = 67109120;
          int v25 = v20;
          uint64_t v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrSupl::startUdpListenerOnce()", "%s\n", v21);
          if (v21 != (char *)buf) {
            free(v21);
          }
        }
        uint64_t v12 = *(void *)(a1 + 304);
        int v13 = *(unsigned __int8 *)(a1 + 424);
        if (*(char *)(a1 + 423) < 0)
        {
          sub_1000DC48C(__p, *(void **)(a1 + 400), *(void *)(a1 + 408));
        }
        else
        {
          *(_OWORD *)long long __p = *(_OWORD *)(a1 + 400);
          uint64_t v23 = *(void *)(a1 + 416);
        }
        sub_100C5FB90(v12, v13 != 0, (uint64_t)__p);
        if (SHIBYTE(v23) < 0) {
          operator delete(__p[0]);
        }
        *(unsigned char *)(a1 + 312) = 1;
      }
    }
  }
}

void sub_10011E3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_10011E408(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onGnssAvailabilityPredictorNotification:a2 data:a3];
}

id sub_10011EB18(uint64_t a1)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022D6570);
  }
  uint64_t v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
  {
    BOOL v3 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      BOOL v3 = (void *)*v3;
    }
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)uint64_t buf = 136315394;
    int v8 = v3;
    __int16 v9 = 2048;
    uint64_t v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "invalidate, %s, %p", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022D6570);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLPersistentTimerInternal invalidate]_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return [*(id *)(a1 + 32) invalidate];
}

void sub_10011F040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10011F284(uint64_t a1, __n128 *a2)
{
}

void sub_10011F28C(__n128 *a1, __n128 *a2)
{
  __n128 v14 = *a2;
  unint64_t v3 = a1[8].n128_u64[1];
  if (v3) {
    (*(void (**)(unint64_t, __n128 *))(*(void *)v3 + 48))(v3, &v14);
  }
  unint64_t v4 = a1[3].n128_u64[1];
  if (v4)
  {
    unint64_t v5 = v4 + a1[3].n128_u64[0] - 1;
    int v6 = (void **)a1[1].n128_u64[1];
    double v7 = (*(double **)((char *)v6 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8)))[2 * v5];
    if (v7 > v14.n128_f64[0])
    {
      unint64_t v8 = a1[2].n128_u64[0];
      a1[3].n128_u64[1] = 0;
      unint64_t v9 = v8 - (void)v6;
      if (v9 >= 0x11)
      {
        do
        {
          operator delete(*v6);
          unint64_t v10 = a1[2].n128_u64[0];
          int v6 = (void **)(a1[1].n128_u64[1] + 8);
          a1[1].n128_u64[1] = (unint64_t)v6;
          unint64_t v9 = v10 - (void)v6;
        }
        while (v9 > 0x10);
      }
      if (v9 >> 3 == 1)
      {
        uint64_t v11 = 128;
      }
      else
      {
        if (v9 >> 3 != 2)
        {
LABEL_12:
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102301FE0);
          }
          uint64_t v12 = qword_102418FD8;
          if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint64_t buf = 134218240;
            unint64_t v20 = v14.n128_u64[0];
            __int16 v21 = 2048;
            double v22 = v7;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FD0 != -1) {
              dispatch_once(&qword_102418FD0, &stru_102301FE0);
            }
            int v15 = 134218240;
            unint64_t v16 = v14.n128_u64[0];
            __int16 v17 = 2048;
            double v18 = v7;
            int v13 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLSourceBuffer<CLOutdoorLocationCoordinate>::add(const T &) [T = CLOutdoorLocationCoordinate]", "%s\n", v13);
            if (v13 != (char *)buf) {
              free(v13);
            }
          }
          goto LABEL_17;
        }
        uint64_t v11 = 256;
      }
      a1[3].n128_u64[0] = v11;
      goto LABEL_12;
    }
  }
LABEL_17:
  sub_10011F544((__n128 *)a1[1].n128_u64, &v14);
  a1[6] = v14;
}

__n128 sub_10011F544(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100EE1280(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

uint64_t sub_10011F5D0(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  unint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void sub_10011F5F8(uint64_t *a1, float *a2)
{
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_1022DCC88);
  }
  uint64_t v4 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = a1;
    if (*((char *)a1 + 23) < 0) {
      uint64_t v5 = (uint64_t *)*a1;
    }
    uint64_t v6 = *(void *)a2;
    double v7 = a2[2];
    double v8 = a2[3];
    *(_DWORD *)uint64_t buf = 136315906;
    uint64_t v11 = v5;
    __int16 v12 = 2048;
    uint64_t v13 = v6;
    __int16 v14 = 2048;
    double v15 = v7;
    __int16 v16 = 2048;
    double v17 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "LocationCoordinate,context,%s,startTime,%f,latitude,%f,longitude,%f", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_1022DCC88);
    }
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorInputs::logLocationCoordinate(const CLOutdoorLocationCoordinate &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
}

void sub_10011F8AC(uint64_t a1, long long *a2)
{
}

void sub_10011F8B4(uint64_t a1, long long *a2)
{
  long long v3 = a2[1];
  long long v16 = *a2;
  long long v17 = v3;
  uint64_t v4 = *(void *)(a1 + 152);
  if (v4) {
    (*(void (**)(uint64_t, long long *))(*(void *)v4 + 48))(v4, &v16);
  }
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5)
  {
    unint64_t v6 = v5 + *(void *)(a1 + 48) - 1;
    double v7 = *(void ***)(a1 + 24);
    double v8 = (*(double **)((char *)v7 + ((v6 >> 4) & 0xFFFFFFFFFFFFFF8)))[4 * (v6 & 0x7F)];
    if (v8 > *(double *)&v16)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(void *)(a1 + 56) = 0;
      unint64_t v10 = v9 - (void)v7;
      if (v10 >= 0x11)
      {
        do
        {
          operator delete(*v7);
          uint64_t v11 = *(void *)(a1 + 32);
          double v7 = (void **)(*(void *)(a1 + 24) + 8);
          *(void *)(a1 + 24) = v7;
          unint64_t v10 = v11 - (void)v7;
        }
        while (v10 > 0x10);
      }
      if (v10 >> 3 == 1)
      {
        uint64_t v12 = 64;
      }
      else
      {
        if (v10 >> 3 != 2)
        {
LABEL_12:
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102301FE0);
          }
          uint64_t v13 = qword_102418FD8;
          if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint64_t buf = 134218240;
            uint64_t v23 = v16;
            __int16 v24 = 2048;
            double v25 = v8;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FD0 != -1) {
              dispatch_once(&qword_102418FD0, &stru_102301FE0);
            }
            int v18 = 134218240;
            uint64_t v19 = v16;
            __int16 v20 = 2048;
            double v21 = v8;
            double v15 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLSourceBuffer<CLOutdoorGnssAvailabilityPredictor>::add(const T &) [T = CLOutdoorGnssAvailabilityPredictor]", "%s\n", v15);
            if (v15 != (char *)buf) {
              free(v15);
            }
          }
          goto LABEL_17;
        }
        uint64_t v12 = 128;
      }
      *(void *)(a1 + 48) = v12;
      goto LABEL_12;
    }
  }
LABEL_17:
  sub_10011FB6C((void *)(a1 + 16), (uint64_t)&v16);
  long long v14 = v17;
  *(_OWORD *)(a1 + 96) = v16;
  *(_OWORD *)(a1 + 112) = v14;
}

__n128 sub_10011FB6C(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100EE198C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  double v8 = (_OWORD *)(*(void *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  *double v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

uint64_t sub_10011FBFC(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  long long v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void sub_10011FC24(uint64_t a1, uint64_t *a2)
{
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_1022DCC88);
  }
  long long v3 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *a2;
    int v5 = *((_DWORD *)a2 + 2);
    int v6 = *((_DWORD *)a2 + 3);
    uint64_t v8 = a2[2];
    uint64_t v7 = a2[3];
    *(_DWORD *)uint64_t buf = 134219009;
    uint64_t v11 = v4;
    __int16 v12 = 2048;
    uint64_t v13 = v7;
    __int16 v14 = 1025;
    int v15 = v5;
    __int16 v16 = 1025;
    int v17 = v6;
    __int16 v18 = 2049;
    uint64_t v19 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "GnssAvailabilityPredictor,startTime,%f,mctTime,%f,measSource,%{private}d,state,%{private}d,stateProbability,%{private}f", buf, 0x2Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_1022DCC88);
    }
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorInputs::logGnssAvailabilityPredictor(const CLOutdoorGnssAvailabilityPredictor &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
}

uint64_t sub_10011FE9C(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0x3E8u;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

uint64_t sub_10011FEEC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DF778;
  a2[1] = v2;
  return result;
}

uint64_t sub_10011FF10(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DEE78;
  a2[1] = v2;
  return result;
}

BOOL sub_10011FF34(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 3) {
    goto LABEL_6;
  }
  if (v2 == 9)
  {
    if (*(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44)
      && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
      && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52))
    {
      int v3 = *(_DWORD *)(a1 + 56);
      int v4 = *(_DWORD *)(a2 + 56);
      return v3 == v4;
    }
    return 0;
  }
  if (v2 == 7)
  {
LABEL_6:
    if (*(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20))
    {
      int v3 = *(_DWORD *)(a1 + 24);
      int v4 = *(_DWORD *)(a2 + 24);
      return v3 == v4;
    }
    return 0;
  }
  if (v2 - 3 <= 2) {
    return sub_1006FE620(a1 + 80, a2 + 80);
  }
  if (v2 != 10)
  {
    if (v2 == 6
      && *(_DWORD *)(a1 + 512) == *(_DWORD *)(a2 + 512)
      && *(_DWORD *)(a1 + 516) == *(_DWORD *)(a2 + 516)
      && *(_DWORD *)(a1 + 520) == *(_DWORD *)(a2 + 520))
    {
      int v3 = *(_DWORD *)(a1 + 524);
      int v4 = *(_DWORD *)(a2 + 524);
      return v3 == v4;
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 600) != *(_DWORD *)(a2 + 600)
    || *(_DWORD *)(a1 + 604) != *(_DWORD *)(a2 + 604)
    || *(_DWORD *)(a1 + 608) != *(_DWORD *)(a2 + 608))
  {
    return 0;
  }
  return *(void *)(a1 + 616) == *(void *)(a2 + 616);
}

void sub_100120078(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102305DB0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistancePosition::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102305DB0);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistancePosition::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100120254((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100120234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100120254(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v7 = (unsigned char *)(a1 + 11672);
  if (*(unsigned char *)(a1 + 11672))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *a3;
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 1026;
      *(_DWORD *)&buf[20] = v9;
      long long v10 = v8;
      os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Received location notification\", \"notification\":%{public}d}", buf, 0x18u);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v13 = *a3;
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 1026;
      *(_DWORD *)&buf[20] = v13;
      long long v10 = v12;
      os_log_type_t v11 = OS_LOG_TYPE_DEBUG;
      goto LABEL_10;
    }
  }
  if (*a3 == 33)
  {
    *(_DWORD *)uint64_t buf = 0xFFFF;
    *(void *)&unsigned char buf[12] = 0;
    *(void *)&uint8_t buf[4] = 0;
    *(_OWORD *)&buf[20] = xmmword_101D1C320;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&buf[36] = _Q0;
    *(_OWORD *)&buf[52] = _Q0;
    *(_OWORD *)&buf[68] = _Q0;
    *(_DWORD *)&buf[84] = 0;
    long long v55 = 0uLL;
    *(void *)&buf[88] = 0xBFF0000000000000;
    *(void *)((char *)&v56 + 4) = 0xBFF0000000000000;
    LODWORD(v56) = 0;
    HIDWORD(v56) = 0x7FFFFFFF;
    memset(v57, 0, 25);
    sub_1000DBC34(v58);
    long long v33 = *(_OWORD *)(a4 + 112);
    long long v55 = *(_OWORD *)(a4 + 96);
    long long v56 = v33;
    *(_OWORD *)__int16 v57 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)&v57[12] = *(_OWORD *)(a4 + 140);
    long long v34 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)&uint8_t buf[32] = *(_OWORD *)(a4 + 32);
    *(_OWORD *)&unsigned char buf[48] = v34;
    long long v35 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)&buf[64] = *(_OWORD *)(a4 + 64);
    *(_OWORD *)&buf[80] = v35;
    long long v36 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)uint64_t buf = *(_OWORD *)a4;
    *(_OWORD *)&uint8_t buf[16] = v36;
    memcpy(v37, (const void *)(a4 + 160), 0x201uLL);
    uint64_t v38 = *(void *)(a4 + 680);
    int v39 = *(std::__shared_weak_count **)(a4 + 688);
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v59 = v38;
    __int16 v40 = v60;
    size_t v60 = v39;
    if (v40) {
      sub_1000DB0A0(v40);
    }
    long long v41 = *(_OWORD *)(a4 + 776);
    long long v65 = *(_OWORD *)(a4 + 760);
    v66[0] = v41;
    *(void *)((char *)v66 + 13) = *(void *)(a4 + 789);
    long long v42 = *(_OWORD *)(a4 + 712);
    long long v61 = *(_OWORD *)(a4 + 696);
    long long v62 = v42;
    long long v43 = *(_OWORD *)(a4 + 744);
    long long v63 = *(_OWORD *)(a4 + 728);
    long long v64 = v43;
    if ((v55 == 11 || v55 == 4) && sub_10019DB1C(a1, (uint64_t)buf, a1 + 4812)) {
      sub_10192D010(a1 + 72, (uint64_t)buf, (uint64_t)v58);
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v44 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v45 = *v7;
      int v46 = *(unsigned __int8 *)(a1 + 1536);
      v47[0] = 68289538;
      v47[1] = 0;
      __int16 v48 = 2082;
      uint64_t v49 = "";
      __int16 v50 = 1026;
      int v51 = v45;
      __int16 v52 = 1026;
      int v53 = v46;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition,\", \"fInEmergency\":%{public}hhd, \"fPositionAssistanceRunning\":%{public}hhd}", (uint8_t *)v47, 0x1Eu);
    }
    if (*v7 || *(unsigned char *)(a1 + 1536)) {
      sub_10001C190(a1, (uint64_t)buf, 1, 1);
    }
  }
  else
  {
    if (*a3 != 5) {
      return;
    }
    *(_DWORD *)uint64_t buf = 0xFFFF;
    *(void *)&unsigned char buf[12] = 0;
    *(void *)&uint8_t buf[4] = 0;
    *(_OWORD *)&buf[20] = xmmword_101D1C320;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&buf[36] = _Q0;
    *(_OWORD *)&buf[52] = _Q0;
    *(_OWORD *)&buf[68] = _Q0;
    *(_DWORD *)&buf[84] = 0;
    long long v55 = 0uLL;
    *(void *)&buf[88] = 0xBFF0000000000000;
    *(void *)((char *)&v56 + 4) = 0xBFF0000000000000;
    LODWORD(v56) = 0;
    HIDWORD(v56) = 0x7FFFFFFF;
    memset(v57, 0, 25);
    sub_1000DBC34(v58);
    long long v19 = *(_OWORD *)(a4 + 112);
    long long v55 = *(_OWORD *)(a4 + 96);
    long long v56 = v19;
    *(_OWORD *)__int16 v57 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)&v57[12] = *(_OWORD *)(a4 + 140);
    long long v20 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)&uint8_t buf[32] = *(_OWORD *)(a4 + 32);
    *(_OWORD *)&unsigned char buf[48] = v20;
    long long v21 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)&buf[64] = *(_OWORD *)(a4 + 64);
    *(_OWORD *)&buf[80] = v21;
    long long v22 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)uint64_t buf = *(_OWORD *)a4;
    *(_OWORD *)&uint8_t buf[16] = v22;
    memcpy(v23, (const void *)(a4 + 160), 0x201uLL);
    uint64_t v24 = *(void *)(a4 + 680);
    double v25 = *(std::__shared_weak_count **)(a4 + 688);
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v59 = v24;
    __int16 v26 = v60;
    size_t v60 = v25;
    if (v26) {
      sub_1000DB0A0(v26);
    }
    long long v27 = *(_OWORD *)(a4 + 776);
    long long v65 = *(_OWORD *)(a4 + 760);
    v66[0] = v27;
    *(void *)((char *)v66 + 13) = *(void *)(a4 + 789);
    long long v28 = *(_OWORD *)(a4 + 712);
    long long v61 = *(_OWORD *)(a4 + 696);
    long long v62 = v28;
    long long v29 = *(_OWORD *)(a4 + 744);
    long long v63 = *(_OWORD *)(a4 + 728);
    long long v64 = v29;
    sub_10001C190(a1, (uint64_t)buf, 0, 1);
    __int16 v30 = *(unsigned char **)(a1 + 11680);
    if (v30 && sub_10019EFAC(v30, a4) && *(void *)(a1 + 64))
    {
      char v31 = sub_1002F71BC(*(unsigned __int8 **)(a1 + 11680));
      sub_100180260(a1 + 40, v31);
    }
  }
  if (v60) {
    sub_1000DB0A0(v60);
  }
}

void sub_100120758(_Unwind_Exception *a1)
{
  if (STACK[0x2D0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2D0]);
  }
  _Unwind_Resume(a1);
}

void sub_100120778(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102307AF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssRefLocationCache::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102307AF8);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      long long v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssRefLocationCache::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100120954((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100120934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100120954(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102307AD8);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *(_DWORD *)(a4 + 96);
    int v9 = *a3;
    *(void *)__int16 v26 = 68289538;
    *(_WORD *)&_DWORD v26[8] = 2082;
    *(void *)&v26[10] = "";
    *(_WORD *)&v26[18] = 1026;
    *(_DWORD *)&v26[20] = v8;
    *(_WORD *)&v26[24] = 1026;
    *(_DWORD *)&v26[26] = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefLocationCache,Location notification received\", \"type\":%{public}d, \"notification\":%{public}d}", v26, 0x1Eu);
  }
  if (*a3 == 33 || *a3 == 5)
  {
    *(_DWORD *)__int16 v26 = 0xFFFF;
    *(_OWORD *)&v26[4] = 0uLL;
    *(_OWORD *)&v26[20] = xmmword_101D1C320;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v26[36] = _Q0;
    *(_OWORD *)&v26[52] = _Q0;
    *(_OWORD *)&v26[68] = _Q0;
    *(_DWORD *)&v26[84] = 0;
    long long v27 = 0uLL;
    *(void *)&v26[88] = 0xBFF0000000000000;
    LODWORD(v28) = 0;
    *(void *)((char *)&v28 + 4) = 0xBFF0000000000000;
    HIDWORD(v28) = 0x7FFFFFFF;
    memset(v29, 0, 25);
    sub_1000DBC34(v30);
    long long v15 = *(_OWORD *)(a4 + 112);
    long long v27 = *(_OWORD *)(a4 + 96);
    long long v28 = v15;
    *(_OWORD *)long long v29 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)&v29[12] = *(_OWORD *)(a4 + 140);
    long long v16 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)&unsigned char v26[32] = *(_OWORD *)(a4 + 32);
    *(_OWORD *)&v26[48] = v16;
    long long v17 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)&v26[64] = *(_OWORD *)(a4 + 64);
    *(_OWORD *)&v26[80] = v17;
    long long v18 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)__int16 v26 = *(_OWORD *)a4;
    *(_OWORD *)&v26[16] = v18;
    memcpy(v19, (const void *)(a4 + 160), 0x201uLL);
    uint64_t v20 = *(void *)(a4 + 680);
    long long v21 = *(std::__shared_weak_count **)(a4 + 688);
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v30[65] = v20;
    long long v22 = v31;
    char v31 = v21;
    if (v22) {
      sub_1000DB0A0(v22);
    }
    long long v23 = *(_OWORD *)(a4 + 776);
    long long v36 = *(_OWORD *)(a4 + 760);
    v37[0] = v23;
    *(void *)((char *)v37 + 13) = *(void *)(a4 + 789);
    long long v24 = *(_OWORD *)(a4 + 712);
    long long v32 = *(_OWORD *)(a4 + 696);
    long long v33 = v24;
    long long v25 = *(_OWORD *)(a4 + 744);
    long long v34 = *(_OWORD *)(a4 + 728);
    long long v35 = v25;
    sub_100120BA0(a1, (uint64_t)v26);
    if (v31) {
      sub_1000DB0A0(v31);
    }
  }
}

void sub_100120B88(_Unwind_Exception *a1)
{
  if (STACK[0x2B0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2B0]);
  }
  _Unwind_Resume(a1);
}

void sub_100120BA0(uint64_t a1, uint64_t a2)
{
  int v4 = (const void *)(a2 + 160);
  double v5 = sub_100121610(a2, a2 + 160);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102307AD8);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    sub_1000AB340(a2);
    uint64_t v7 = v77 >= 0 ? v74 : *(unsigned char **)v74;
    double v8 = *(float *)(a2 + 476);
    int v9 = *(_DWORD *)(a2 + 472);
    int v10 = *(_DWORD *)(a2 + 128);
    int v11 = *(_DWORD *)(a2 + 132);
    uint64_t v12 = *(void *)(a1 + 108);
    *(_DWORD *)uint64_t buf = 68290563;
    *(_DWORD *)long long v61 = 0;
    *(_WORD *)&v61[4] = 2082;
    *(void *)&v61[6] = "";
    __int16 v62 = 2081;
    long long v63 = v7;
    __int16 v64 = 1026;
    int v65 = v10;
    __int16 v66 = 2050;
    double v67 = v8;
    __int16 v68 = 1026;
    int v69 = v9;
    __int16 v70 = 1026;
    int v71 = v11;
    __int16 v72 = 2050;
    uint64_t v73 = v12;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefLocationCache,updateReferenceLocationCache\", \"location,\":%{private, location:escape_only}s, \"integrity\":%{public}d, \"undulation\":\"%{public}f\", \"undulationModel\":%{public}d, \"referenceFrame\":%{public}d, \"cacheTimestamp\":\"%{public}.1f\"}", buf, 0x42u);
    if (v77 < 0) {
      operator delete(*(void **)v74);
    }
  }
  if (*(double *)(a2 + 20) <= 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102307AD8);
    }
    uint64_t v17 = qword_1024193D8;
    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)long long v61 = 0;
    *(_WORD *)&v61[4] = 2082;
    *(void *)&v61[6] = "";
    long long v15 = "{\"msg%{public}.0s\":\"#GnssRefLocationCache,updateReferenceLocationCache,drop,hunc invalid\"}";
LABEL_33:
    long long v16 = v17;
    uint32_t v21 = 18;
LABEL_34:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, v15, buf, v21);
    return;
  }
  if ((*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) != 1 && *(unsigned char *)(a1 + 24))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102307AD8);
    }
    uint64_t v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v14 = *(unsigned __int8 *)(a1 + 24);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)long long v61 = 0;
      *(_WORD *)&v61[4] = 2082;
      *(void *)&v61[6] = "";
      __int16 v62 = 1026;
      LODWORD(v63) = v14;
      long long v15 = "{\"msg%{public}.0s\":\"#GnssRefLocationCache,updateReferenceLocationCache,drop,ignoring non-gps location ass"
            "istance when airborne\", \"IsAirborne\":%{public}d}";
      long long v16 = v13;
LABEL_28:
      uint32_t v21 = 24;
      goto LABEL_34;
    }
    return;
  }
  uint64_t v18 = sub_100121658(a1, a2);
  if (v18)
  {
    if (v5 > 60.0 || v5 < 0.0)
    {
      if (*(double *)(a2 + 20) < 500.0)
      {
        *(void *)(a2 + 20) = 0x407F400000000000;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102307AD8);
        }
        long long v22 = qword_1024193D8;
        uint64_t v18 = os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG);
        if (v18)
        {
          sub_1000AB340(a2);
          long long v23 = v77 >= 0 ? v74 : *(unsigned char **)v74;
          *(_DWORD *)uint64_t buf = 68289283;
          *(_DWORD *)long long v61 = 0;
          *(_WORD *)&v61[4] = 2082;
          *(void *)&v61[6] = "";
          __int16 v62 = 2081;
          long long v63 = v23;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefLocationCache,updateReferenceLocationCache,adjust,hunc,age lapsed\", \"location,\":%{private, location:escape_only}s}", buf, 0x1Cu);
          if (v77 < 0) {
            operator delete(*(void **)v74);
          }
        }
      }
      double v24 = *(double *)(a2 + 36);
      if (v24 > 0.0 && v24 < 200.0)
      {
        *(void *)(a2 + 36) = 0x4069000000000000;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102307AD8);
        }
        long long v25 = qword_1024193D8;
        uint64_t v18 = os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG);
        if (v18)
        {
          sub_1000AB340(a2);
          __int16 v26 = v77 >= 0 ? v74 : *(unsigned char **)v74;
          *(_DWORD *)uint64_t buf = 68289283;
          *(_DWORD *)long long v61 = 0;
          *(_WORD *)&v61[4] = 2082;
          *(void *)&v61[6] = "";
          __int16 v62 = 2081;
          long long v63 = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefLocationCache,updateReferenceLocationCache,adjust,vunc,age lapsed\", \"location,\":%{private, location:escape_only}s}", buf, 0x1Cu);
          if (v77 < 0) {
            operator delete(*(void **)v74);
          }
        }
      }
    }
    switch(*(_DWORD *)(a2 + 96))
    {
      case 1:
      case 9:
        double v27 = *(double *)(a2 + 76);
        if (v27 - *(double *)(a1 + 992) >= 30.0 || *(double *)(a2 + 20) < *(double *)(a1 + 52))
        {
          *(double *)(a1 + 992) = v27;
          goto LABEL_66;
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102307AD8);
        }
        int v53 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v54 = *(void *)(a1 + 992);
          int v55 = *(_DWORD *)(a2 + 96);
          *(_DWORD *)uint64_t buf = 134349312;
          *(void *)long long v61 = v54;
          *(_WORD *)&v61[8] = 1026;
          *(_DWORD *)&v61[10] = v55;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "#GnssRefLocationCache,updateReferenceLocationCache,ignoring GPS location,lastGpsTime,%{public}.1lf,type,%{public}d", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102307AD8);
          }
          uint64_t v56 = *(void *)(a1 + 992);
          int v57 = *(_DWORD *)(a2 + 96);
          *(_DWORD *)uint64_t v74 = 134349312;
          *(void *)&v74[4] = v56;
          __int16 v75 = 1026;
          int v76 = v57;
          uint64_t v58 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefLocationCache::updateReferenceLocationCache(GNSS::DaemonLocation &)", "%s\n", v58);
          if (v58 != (char *)buf) {
            free(v58);
          }
        }
        return;
      case 2:
      case 5:
      case 0xC:
      case 0xE:
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102307AD8);
        }
        uint64_t v19 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v20 = *(_DWORD *)(a2 + 96);
          *(_DWORD *)uint64_t buf = 68289282;
          *(_DWORD *)long long v61 = 0;
          *(_WORD *)&v61[4] = 2082;
          *(void *)&v61[6] = "";
          __int16 v62 = 1026;
          LODWORD(v63) = v20;
          long long v15 = "{\"msg%{public}.0s\":\"#GnssRefLocationCache,updateReferenceLocationCache,unsupported\", \"locationType\":%{public}d}";
          long long v16 = v19;
          goto LABEL_28;
        }
        return;
      case 3:
        if (sub_100121610(a1 + 32, a1 + 192) >= 900.0) {
          goto LABEL_66;
        }
        return;
      case 4:
      case 0xB:
        sub_100F9F8B8(a1, a2);
        goto LABEL_66;
      case 6:
        long long v28 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 832) = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 848) = v28;
        long long v29 = *(_OWORD *)(a2 + 32);
        long long v30 = *(_OWORD *)(a2 + 48);
        long long v31 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 896) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 912) = v31;
        *(_OWORD *)(a1 + 864) = v29;
        *(_OWORD *)(a1 + 880) = v30;
        long long v32 = *(_OWORD *)(a2 + 96);
        long long v33 = *(_OWORD *)(a2 + 112);
        long long v34 = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 972) = *(_OWORD *)(a2 + 140);
        *(_OWORD *)(a1 + 944) = v33;
        *(_OWORD *)(a1 + 960) = v34;
        *(_OWORD *)(a1 + 928) = v32;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102307AD8);
        }
        long long v35 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "#GnssRefLocationCache,updateReferenceLocationCache,cache,Cell location", buf, 2u);
        }
        uint64_t v18 = sub_10013D1A0(115, 2);
        if (v18)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102307AD8);
          }
          *(_WORD *)uint64_t v74 = 0;
          uint64_t v59 = (char *)_os_log_send_and_compose_impl();
          uint64_t v18 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefLocationCache::updateReferenceLocationCache(GNSS::DaemonLocation &)", "%s\n", v59);
          if (v59 != (char *)buf) {
            free(v59);
          }
        }
        goto LABEL_66;
      default:
LABEL_66:
        if (v5 >= 0.0 && sub_100121D14(v18, a2))
        {
          long long v36 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 48) = v36;
          long long v37 = *(_OWORD *)(a2 + 32);
          long long v38 = *(_OWORD *)(a2 + 48);
          long long v39 = *(_OWORD *)(a2 + 80);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(a1 + 112) = v39;
          *(_OWORD *)(a1 + 64) = v37;
          *(_OWORD *)(a1 + 80) = v38;
          long long v40 = *(_OWORD *)(a2 + 96);
          long long v41 = *(_OWORD *)(a2 + 112);
          long long v42 = *(_OWORD *)(a2 + 128);
          *(_OWORD *)(a1 + 172) = *(_OWORD *)(a2 + 140);
          *(_OWORD *)(a1 + 144) = v41;
          *(_OWORD *)(a1 + 160) = v42;
          *(_OWORD *)(a1 + 128) = v40;
          memcpy((void *)(a1 + 192), v4, 0x201uLL);
          uint64_t v43 = *(void *)(a2 + 680);
          uint64_t v44 = *(void *)(a2 + 688);
          if (v44) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)(a1 + 712) = v43;
          int v45 = *(std::__shared_weak_count **)(a1 + 720);
          *(void *)(a1 + 720) = v44;
          if (v45) {
            sub_1000DB0A0(v45);
          }
          long long v46 = *(_OWORD *)(a2 + 696);
          long long v47 = *(_OWORD *)(a2 + 728);
          *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 712);
          *(_OWORD *)(a1 + 760) = v47;
          *(_OWORD *)(a1 + 728) = v46;
          long long v48 = *(_OWORD *)(a2 + 744);
          long long v49 = *(_OWORD *)(a2 + 760);
          long long v50 = *(_OWORD *)(a2 + 776);
          *(void *)(a1 + 821) = *(void *)(a2 + 789);
          *(_OWORD *)(a1 + 792) = v49;
          *(_OWORD *)(a1 + 808) = v50;
          *(_OWORD *)(a1 + 776) = v48;
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102307AD8);
          }
          int v51 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            sub_1000AB340(a2);
            __int16 v52 = v77 >= 0 ? v74 : *(unsigned char **)v74;
            *(_DWORD *)uint64_t buf = 68289283;
            *(_DWORD *)long long v61 = 0;
            *(_WORD *)&v61[4] = 2082;
            *(void *)&v61[6] = "";
            __int16 v62 = 2081;
            long long v63 = v52;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssRefLocationCache,updateReferenceLocationCache,cached\", \"location,\":%{private, location:escape_only}s}", buf, 0x1Cu);
            if (v77 < 0) {
              operator delete(*(void **)v74);
            }
          }
        }
        break;
    }
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102307AD8);
  }
  uint64_t v17 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)long long v61 = 0;
    *(_WORD *)&v61[4] = 2082;
    *(void *)&v61[6] = "";
    long long v15 = "{\"msg%{public}.0s\":\"#GnssRefLocationCache,updateReferenceLocationCache,drop,not valid for caching\"}";
    goto LABEL_33;
  }
}

double sub_100121610(uint64_t a1, uint64_t a2)
{
  if (*(double *)(a2 + 344) <= 0.0)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    double v4 = *(double *)(a1 + 76);
  }
  else
  {
    double Current = sub_10016C458();
    double v4 = *(double *)(a2 + 344);
  }
  return Current - v4;
}

uint64_t sub_100121658(uint64_t a1, uint64_t a2)
{
  if (*(double *)(a1 + 52) <= 0.0) {
    return 1;
  }
  uint64_t result = sub_100121D14(a1, a2);
  if (!result) {
    return result;
  }
  double v5 = sub_100121610(a1 + 32, a1 + 192);
  double v6 = *(double *)(a2 + 20);
  double v7 = *(double *)(a2 + 36);
  if (v7 <= 0.0)
  {
    BOOL v9 = 0;
  }
  else
  {
    double v8 = *(double *)(a1 + 68);
    BOOL v9 = v8 <= 0.0 || v7 <= v8;
  }
  if (v6 >= *(double *)(a1 + 52)) {
    BOOL v9 = 0;
  }
  if (v5 >= 6.0 || v9)
  {
    if (v6 > 75000.0 && v5 < 1800.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102307AD8);
      }
      int v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        double v12 = *(double *)(a2 + 20);
        *(_DWORD *)uint64_t buf = 134349312;
        double v24 = v12;
        __int16 v25 = 2050;
        double v26 = v5;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#GnssRefLocationCache,isLocationValidForCaching,reject location,large hunc,%{public}.1lf,cacheAge,%{public}.1lf", buf, 0x16u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_57;
      }
      goto LABEL_60;
    }
    if (v7 <= 0.0 && *(double *)(a1 + 68) > 0.0 && v5 < 900.0)
    {
      sub_1000F1268((double *)(a1 + 1000), a2, a1 + 32);
      double v14 = v13;
      if (v13 < 5000.0 || *(double *)(a2 + 20) > v13)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102307AD8);
        }
        uint64_t v19 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          double v20 = *(double *)(a2 + 20);
          double v21 = *(double *)(a1 + 68);
          *(_DWORD *)uint64_t buf = 134349824;
          double v24 = v20;
          __int16 v25 = 2050;
          double v26 = v21;
          __int16 v27 = 2050;
          double v28 = v5;
          __int16 v29 = 2050;
          double v30 = v14;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#GnssRefLocationCache,isLocationValidForCaching,reject location,no altitude,Hunc,%{public}.1lf,cacheVunc,%{public}.1lf,cacheAge,%{public}.1lf,distance,%{public}.1lf", buf, 0x2Au);
        }
        uint64_t result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1)
        {
LABEL_57:
          long long v22 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssRefLocationCache::isLocationValidForCaching(CLDaemonLocation &)", "%s\n", v22);
          if (v22 != (char *)buf) {
            free(v22);
          }
          return 0;
        }
LABEL_60:
        dispatch_once(&qword_1024193D0, &stru_102307AD8);
        goto LABEL_57;
      }
      sub_100F9FF24(a1, a2);
    }
    unsigned int v15 = *(_DWORD *)(a1 + 128);
    if ((v15 & 0xFFFFFFF7) != 1 && (v15 > 0xD || ((1 << v15) & 0x2C10) == 0)
      || *(double *)(a2 + 20) <= 1000.0
      || v5 >= 220.0)
    {
      return sub_1001A061C(a1, a2);
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102307AD8);
    }
    long long v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      double v17 = *(double *)(a1 + 52);
      int v18 = *(_DWORD *)(a1 + 128);
      *(_DWORD *)uint64_t buf = 134349568;
      double v24 = v17;
      __int16 v25 = 2050;
      double v26 = v5;
      __int16 v27 = 1026;
      LODWORD(v28) = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#GnssRefLocationCache,isLocationValidForCaching,reject location,cache accurate,cacheHunc,%{public}.1lf,cacheAge,%{public}.1lf,type,%{public}d", buf, 0x1Cu);
    }
    uint64_t result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_57;
    }
    goto LABEL_60;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102307AD8);
  }
  int v10 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134349056;
    double v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#GnssRefLocationCache,isLocationValidForCaching,ignoring location as cache is fresh,age,%{public}.1lf", buf, 0xCu);
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_57;
    }
    goto LABEL_60;
  }
  return result;
}

BOOL sub_100121D14(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)(a2 + 20);
  if (v3 <= 0.0 || v3 > 200000.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102307AD8);
    }
    uint64_t v4 = qword_1024193D8;
    BOOL result = os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    uint64_t v9 = *(void *)(a2 + 20);
    int v17 = 68289538;
    int v18 = 0;
    __int16 v19 = 2082;
    double v20 = "";
    __int16 v21 = 2050;
    uint64_t v22 = v9;
    __int16 v23 = 2050;
    uint64_t v24 = 0x41086A0000000000;
    double v8 = "{\"msg%{public}.0s\":\"#GnssRefLocationCache,Warning invalid assistance location\", \"horizontalAccuracy\":\"%{"
         "public}f\", \"maximumAccuracy\":\"%{public}f\"}";
LABEL_12:
    int v10 = v4;
    uint32_t v11 = 38;
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, v8, (uint8_t *)&v17, v11);
    return 0;
  }
  if (sub_1000EF668(*(double *)(a2 + 4), *(double *)(a2 + 12))
    || (double v12 = *(double *)(a2 + 4), v12 < -90.0)
    || v12 > 90.0
    || (double v13 = *(double *)(a2 + 12), v13 < -180.0)
    || v13 > 180.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102307AD8);
    }
    uint64_t v4 = qword_1024193D8;
    BOOL result = os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    uint64_t v6 = *(void *)(a2 + 4);
    uint64_t v7 = *(void *)(a2 + 12);
    int v17 = 68289539;
    int v18 = 0;
    __int16 v19 = 2082;
    double v20 = "";
    __int16 v21 = 2049;
    uint64_t v22 = v6;
    __int16 v23 = 2049;
    uint64_t v24 = v7;
    double v8 = "{\"msg%{public}.0s\":\"#GnssRefLocationCache,Warning invalid assistance location,invalid coordinates\", \"latit"
         "ude\":\"%{private}.7f\", \"longitude\":\"%{private}.7f\"}";
    goto LABEL_12;
  }
  if (*(double *)(a2 + 36) <= 0.0) {
    return 1;
  }
  double v14 = *(double *)(a2 + 28);
  if (v14 >= -450.0 && v14 <= 8850.0) {
    return 1;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102307AD8);
  }
  uint64_t v15 = qword_1024193D8;
  BOOL result = os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    uint64_t v16 = *(void *)(a2 + 28);
    int v17 = 68289283;
    int v18 = 0;
    __int16 v19 = 2082;
    double v20 = "";
    __int16 v21 = 2049;
    uint64_t v22 = v16;
    double v8 = "{\"msg%{public}.0s\":\"#GnssRefLocationCache,Warning invalid assistance location\", \"altitude\":\"%{private}.2f\"}";
    int v10 = v15;
    uint32_t v11 = 28;
    goto LABEL_13;
  }
  return result;
}

__CFArray *sub_100121FEC(double a1)
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (a1 < 100.0)
  {
    int valuePtr = 1;
    CFNumberRef v3 = sub_100122110(&valuePtr);
    CFArrayAppendValue(Mutable, v3);
    CFRelease(v3);
    int valuePtr = 10;
    CFNumberRef v4 = sub_100122110(&valuePtr);
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v4);
  }
  if (a1 < 1000.0)
  {
    int valuePtr = 4;
    CFNumberRef v5 = sub_100122110(&valuePtr);
    CFArrayAppendValue(Mutable, v5);
    CFRelease(v5);
  }
  if (a1 < 6378135.0)
  {
    int valuePtr = 6;
    CFNumberRef v6 = sub_100122110(&valuePtr);
    CFArrayAppendValue(Mutable, v6);
    CFRelease(v6);
  }
  return Mutable;
}

CFNumberRef sub_100122110(void *valuePtr)
{
  return CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, valuePtr);
}

CLClientManagerAuthorizationContext *sub_100122128(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  id v5 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  if ([v5 isValidCKP])
  {
    BOOL v6 = sub_1001193DC(a1, (uint64_t)v5);
    uint64_t v7 = sub_10012276C(*(void *)(a1 + 376), v5);
    double v8 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", [objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v5) dictionary]);
    [(NSMutableDictionary *)v8 setObject:+[NSNumber numberWithUnsignedInt:v7] forKeyedSubscript:@"InUseLevel"];
    if ([*(id *)(a1 + 120) locationRestricted]) {
      [(NSMutableDictionary *)v8 setObject:&__kCFBooleanTrue forKeyedSubscript:@"LocationRestricted"];
    }
    sub_100148ED8(a1, v5, v8);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v9 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68290050;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2114;
      *(void *)&buf[20] = v5;
      *(_WORD *)&unsigned char buf[28] = 2114;
      *(void *)&buf[30] = v8;
      *(_WORD *)&unsigned char buf[38] = 1026;
      *(_DWORD *)&buf[40] = v6;
      *(_WORD *)&unsigned char buf[44] = 2050;
      *(void *)&buf[46] = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"computing freshAuthorizationContext\", \"Client\":%{public, location:escape_only}@, \"ClientDictionary\":%{public, location:escape_only}@, \"BigSwitch\":%{public}hhd, \"InUseLevel\":%{public, location:CLClientInUseLevel}lld}", buf, 0x36u);
    }
    int v10 = sub_100122964(a1, (uint64_t)v5);
    unsigned int v11 = [[-[NSArray objectAtIndexedSubscript:](v10, "objectAtIndexedSubscript:", 1) intValue];
    unsigned int v12 = [[-[NSArray objectAtIndexedSubscript:](v10, "objectAtIndexedSubscript:", 2) intValue];
    long long v13 = a3[7];
    long long v31 = a3[6];
    long long v32 = v13;
    v33[0] = a3[8];
    *(_OWORD *)((char *)v33 + 12) = *(_OWORD *)((char *)a3 + 140);
    long long v14 = a3[3];
    *(_OWORD *)&uint8_t buf[32] = a3[2];
    *(_OWORD *)&unsigned char buf[48] = v14;
    long long v15 = a3[5];
    long long v29 = a3[4];
    long long v30 = v15;
    long long v16 = a3[1];
    *(_OWORD *)uint64_t buf = *a3;
    *(_OWORD *)&uint8_t buf[16] = v16;
    if (sub_100122554(a1, (uint64_t)v5) && *(double *)&buf[20] < 0.0)
    {
      int v17 = *(void **)(a1 + 352);
      if (v17)
      {
        [v17 currentLocation:*(double *)&buf[20]];
      }
      else
      {
        long long v26 = 0u;
        memset(v27, 0, 28);
        long long v24 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        memset(v22, 0, sizeof(v22));
      }
      long long v31 = v25;
      long long v32 = v26;
      v33[0] = v27[0];
      *(_OWORD *)((char *)v33 + 12) = *(_OWORD *)((char *)v27 + 12);
      *(_OWORD *)&uint8_t buf[32] = *(_OWORD *)&v22[32];
      *(_OWORD *)&unsigned char buf[48] = *(_OWORD *)&v22[48];
      long long v29 = v23;
      long long v30 = v24;
      *(_OWORD *)uint64_t buf = *(_OWORD *)v22;
      *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)&v22[16];
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      __int16 v19 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v22 = 68290307;
        *(_DWORD *)&v22[4] = 0;
        *(_WORD *)&v22[8] = 2082;
        *(void *)&v22[10] = "";
        *(_WORD *)&v22[18] = 2114;
        *(void *)&v22[20] = v5;
        *(_WORD *)&v22[28] = 1040;
        *(_DWORD *)&v22[30] = 156;
        *(_WORD *)&v22[34] = 2097;
        *(void *)&v22[36] = a3;
        *(_WORD *)&v22[44] = 1040;
        *(_DWORD *)&v22[46] = 156;
        *(_WORD *)&v22[50] = 2097;
        *(void *)&v22[52] = buf;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pla freshAuthorizationContext location updated\", \"Client\":%{public, location:escape_only}@, \"provided-location\":%{private, location:CLClientLocation}.*P, \"fetched-location-ZRT\":%{private, location:CLClientLocation}.*P}", v22, 0x3Cu);
      }
    }
    v20[6] = v31;
    v20[7] = v32;
    v21[0] = v33[0];
    *(_OWORD *)((char *)v21 + 12) = *(_OWORD *)((char *)v33 + 12);
    v20[2] = *(_OWORD *)&buf[32];
    v20[3] = *(_OWORD *)&buf[48];
    v20[4] = v29;
    v20[5] = v30;
    v20[0] = *(_OWORD *)buf;
    v20[1] = *(_OWORD *)&buf[16];
    return sub_10010758C(v8, v11, v12, v6, (uint64_t)v20);
  }
  else
  {
    return (CLClientManagerAuthorizationContext *)sub_1000B66B8(4);
  }
}

id sub_100122554(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  id v5 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  if ([v5 isValidCKP]) {
    id v6 = sub_1001225EC([*(id *)(a1 + 136) readonlyStoreAtKeyPath:v5 dictionary]);
  }
  else {
    id v6 = 0;
  }

  return v6;
}

void sub_1001225D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001225EC(void *a1)
{
  id v1 = [a1 objectForKey:@"InterestZones"];
  id result = [v1 count];
  if (result)
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    id v3 = [v1 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)v11;
      do
      {
        for (unint64_t i = 0; i != v4; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v11 != v6) {
            objc_enumerationMutation(v1);
          }
          id v8 = [v1 objectForKeyedSubscript:*(void *)(*((void *)&v10 + 1) + 8 * i)];
          if (objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", @"Provenance"), "intValue") != 2)
          {
            uint64_t v9 = sub_100101E40(v8);
            if (!v9) {
              uint64_t v9 = 2
            }
                 * ([v8 objectForKeyedSubscript:@"TemporaryAuthorization"] intValue & 1u);
            v5 |= v9;
          }
        }
        id v4 = [v1 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v4);
    }
    else
    {
      uint64_t v5 = 0;
    }
    return (id)(v5 != 0);
  }
  return result;
}

uint64_t sub_10012276C(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([a2 isAuthSharingSubIdentity]) {
    id v2 = [v2 anchorKeyPath];
  }
  id v4 = (void *)(a1 + 16);
  if (v2)
  {
    [v2 cppClientKey];
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v10 = 0;
  }
  uint64_t v5 = sub_100122860(v4, (unsigned __int8 *)__p);
  uint64_t v6 = v5;
  if ((SHIBYTE(v10) & 0x80000000) == 0)
  {
    if (v5) {
      goto LABEL_8;
    }
    return 0;
  }
  operator delete(__p[0]);
  if (!v6) {
    return 0;
  }
LABEL_8:
  uint64_t v7 = &dword_100000014;
  do
  {
    if (v7 == -4) {
      goto LABEL_13;
    }
    uint64_t result = *(unsigned int *)((char *)&unk_101D8A3E8 + v7);
    if (result >= 6) {
      sub_10000EDDC("array::at");
    }
    v7 -= 4;
  }
  while (!*(_DWORD *)&v6[4 * result + 40]);
  if (!result) {
LABEL_13:
  }
    sub_101A88AAC();
  return result;
}

void sub_100122844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_100122860(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_100103388((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  long long v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (sub_100103744(v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      long long v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

NSArray *sub_100122964(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  BOOL v4 = sub_1001193DC(a1, (uint64_t)v3);
  if ([v3 isValidCKP])
  {
    BOOL v5 = sub_100122CD8(a1, (uint64_t)v3);
    unint64_t v6 = sub_100122E44([objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v3) dictionary], [objc_msgSend(*(id *)(a1 + 136), "isKeyPathRegisteredSystemService:", v3) intValue], v4, v5);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint8x8_t v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289794;
      int v15 = 0;
      __int16 v16 = 2082;
      int v17 = "";
      __int16 v18 = 2114;
      id v19 = v3;
      __int16 v20 = 1026;
      BOOL v21 = v4;
      __int16 v22 = 2114;
      long long v23 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"client RegistrationResults\", \"Client\":%{public, location:escape_only}@, \"bigSwitchEnabled\":%{public}hhd, \"RegistrationResults\":%{public, location:escape_only}@}", buf, 0x2Cu);
    }
    return v6;
  }
  if (!sub_1000F08D4()
    || ![v3 bundlePath]
    || !sub_100102484((__CFString *)[v3 bundlePath]))
  {
    uint64_t v9 = 4;
LABEL_14:
    if (v4) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 2;
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    goto LABEL_19;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  unint64_t v8 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v15 = 0;
    __int16 v16 = 2082;
    int v17 = "";
    __int16 v18 = 2114;
    id v19 = v3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#OSXThinksDifferent system service not found in persistent store is allowed by default\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    uint64_t v9 = 0;
    goto LABEL_14;
  }
  uint64_t v9 = 0;
  if (v4) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = 2;
  }
LABEL_19:
  long long v11 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68290306;
    int v15 = 0;
    __int16 v16 = 2082;
    int v17 = "";
    __int16 v18 = 2114;
    id v19 = v3;
    __int16 v20 = 1026;
    BOOL v21 = v4;
    __int16 v22 = 2050;
    long long v23 = (NSArray *)v9;
    __int16 v24 = 2050;
    uint64_t v25 = v10;
    __int16 v26 = 2050;
    uint64_t v27 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"client(does not exists) RegistrationResults\", \"Client\":%{public, location:escape_only}@, \"bigSwitchEnabled\":%{public}hhd, \"static\":%{public, location:CLClientRegistrationResult}lld, \"effective\":%{public, location:CLClientRegistrationResult}lld, \"transient\":%{public, location:CLClientRegistrationResult}lld}", buf, 0x40u);
  }
  v13[0] = +[NSNumber numberWithUnsignedInt:v9];
  v13[1] = +[NSNumber numberWithUnsignedInt:v10];
  void v13[2] = +[NSNumber numberWithUnsignedInt:v10];
  return +[NSArray arrayWithObjects:v13 count:3];
}

BOOL sub_100122CD8(uint64_t a1, uint64_t a2)
{
  id v3 = sub_100103E24(a1, a2);
  id v4 = v3;
  if (v3)
  {
    [v3 cppClientKey];
  }
  else
  {
    long long __p = 0;
    *(void *)uint64_t v10 = 0;
    *(void *)&v10[8] = 0;
  }
  uint64_t v5 = sub_10012FFE0(a1 + 704, (const void **)&__p);
  uint64_t v6 = a1 + 712;
  if ((v10[15] & 0x80000000) != 0) {
    operator delete(__p);
  }
  if (v6 != v5)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint8x8_t v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      long long __p = (void *)68289282;
      *(_WORD *)uint64_t v10 = 2082;
      *(void *)&void v10[2] = "";
      *(_WORD *)&v10[10] = 2114;
      *(void *)&v10[12] = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLEPTO deauthorization overriding allowed\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
    }
  }
  return v6 != v5;
}

void sub_100122E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

NSArray *sub_100122E44(void *a1, int a2, int a3, int a4)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102301058);
  }
  uint64_t v5 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68290050;
    int v50 = 0;
    __int16 v51 = 2082;
    __int16 v52 = "";
    __int16 v53 = 2114;
    unint64_t v54 = (unint64_t)a1;
    __int16 v55 = 1026;
    *(_DWORD *)uint64_t v56 = a2;
    *(_WORD *)&v56[4] = 1026;
    *(_DWORD *)&v56[6] = a3;
    LOWORD(v57) = 1026;
    *(_DWORD *)((char *)&v57 + 2) = a4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"computing #clldu registrationResults\", \"dictionary\":%{public, location:escape_only}@, \"isSystemService\":%{public}hhd, \"bigSwitchEnabled\":%{public}hhd, \"overrideDeauthorization\":%{public}hhd}", buf, 0x2Eu);
  }
  id v6 = +[NSMutableArray array];
  [v6 addObject:a1];
  id v7 = sub_100123630(a1);
  if ([v7 count]) {
    [v6 addObjectsFromArray:v7];
  }
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id v8 = [v6 countByEnumeratingWithState:&v43 objects:v58 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = 4;
    uint64_t v41 = *(void *)v44;
    uint64_t v11 = 4;
    uint64_t v12 = 4;
    id obj = v6;
LABEL_9:
    uint64_t v13 = 0;
    while (1)
    {
      if (*(void *)v44 != v41) {
        objc_enumerationMutation(obj);
      }
      long long v14 = *(void **)(*((void *)&v43 + 1) + 8 * v13);
      id v15 = [v14 objectForKeyedSubscript:@"ZoneId"];
      id v16 = [v14 objectForKey:@"TimeMissing"];
      if (v16)
      {
        [v16 doubleValue];
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102301058);
        }
        int v17 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 68289282;
          int v50 = 0;
          __int16 v51 = 2082;
          __int16 v52 = "";
          __int16 v53 = 2114;
          unint64_t v54 = (unint64_t)v14;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#clldu _staticRegistrationResult , missing client\", \"dictionary\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        uint64_t v18 = 7;
      }
      else
      {
        if (v15) {
          BOOL v26 = 1;
        }
        else {
          BOOL v26 = a2 == 0;
        }
        if (v26) {
          goto LABEL_57;
        }
        int v27 = sub_100101EE4(v14, 1);
        if (v27 != 6 && v27 != 0) {
          goto LABEL_57;
        }
        int v29 = v27;
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102301058);
        }
        long long v30 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 68289282;
          int v50 = 0;
          __int16 v51 = 2082;
          __int16 v52 = "";
          __int16 v53 = 2114;
          unint64_t v54 = (unint64_t)v14;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#clldu staticRegistrationResult , unsupported system service\", \"dictionary\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        uint64_t v18 = 3;
        if (v29)
        {
          if (v29 != 6)
          {
LABEL_57:
            uint64_t v18 = sub_100123810(v14);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_102301058);
            }
            long long v31 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)uint64_t buf = 68289282;
              int v50 = 0;
              __int16 v51 = 2082;
              __int16 v52 = "";
              __int16 v53 = 2050;
              unint64_t v54 = v18;
              _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#clldu _staticRegistrationResult\", \"registration\":%{public, location:CLClientRegistrationResult}lld}", buf, 0x1Cu);
            }
          }
        }
      }
      if (objc_msgSend(&off_102397D70, "containsObject:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v18)))
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102301058);
        }
        long long v33 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "computing #clldu registrationResults, encountered doNotProceed static registration result. Early return", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_102301058);
          }
          long long v37 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "NSArray *CLLocationDictionaryUtilitiesGetClientRegistrationResults(NSDictionary *, BOOL, BOOL, BOOL)", "%s\n", v37);
          if (v37 != (char *)buf) {
            free(v37);
          }
        }
        long long v48 = +[NSNumber numberWithUnsignedInt:v18];
        uint64_t v10 = 4;
        long long v34 = &v48;
        uint64_t v11 = 4;
        goto LABEL_75;
      }
      if (a3)
      {
        unsigned int v19 = v18;
        if (v18 == 1)
        {
          if ([[v14 objectForKey:@"ProvisionalMonitoring"] boolValue]) unsigned int v19 = 8; {
          else
          }
            unsigned int v19 = 1;
        }
        int v20 = a2;
        if (v18 != 2) {
          int v20 = 0;
        }
        if ((v20 & a4) != 0) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = v19;
        }
        uint64_t v22 = v21;
        if (v21 == 4)
        {
          unsigned __int8 v23 = [[v14 objectForKey:@"TemporaryAuthorization"] intValue];
          if (v23) {
            unsigned int v24 = 1;
          }
          else {
            unsigned int v24 = 4;
          }
          if ((v23 & 4) != 0) {
            uint64_t v22 = 2;
          }
          else {
            uint64_t v22 = v24;
          }
        }
        if (!v15)
        {
LABEL_39:
          uint64_t v10 = v21;
          uint64_t v11 = v22;
          uint64_t v12 = v18;
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v21 = 2;
        uint64_t v22 = 2;
        if (!v15) {
          goto LABEL_39;
        }
      }
      int v25 = [[v14 objectForKeyedSubscript:@"ServiceMaskOperator"] intValue];
      uint64_t v12 = sub_100EC71E8(v12, v18, v25);
      uint64_t v10 = sub_100EC71E8(v10, v21, v25);
      uint64_t v11 = sub_100EC71E8(v11, v22, v25);
LABEL_40:
      if (v9 == (id)++v13)
      {
        id v32 = [obj countByEnumeratingWithState:&v43 objects:v58 count:16];
        id v9 = v32;
        if (v32) {
          goto LABEL_9;
        }
        goto LABEL_70;
      }
    }
  }
  uint64_t v10 = 4;
  uint64_t v11 = 4;
  uint64_t v12 = 4;
LABEL_70:
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102301058);
  }
  long long v35 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289794;
    int v50 = 0;
    __int16 v51 = 2082;
    __int16 v52 = "";
    __int16 v53 = 2050;
    unint64_t v54 = v12;
    __int16 v55 = 2050;
    *(void *)uint64_t v56 = v10;
    *(_WORD *)&v56[8] = 2050;
    uint64_t v57 = v11;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#clldu registrationResults\", \"static\":%{public, location:CLClientRegistrationResult}lld, \"effective\":%{public, location:CLClientRegistrationResult}lld, \"transient\":%{public, location:CLClientRegistrationResult}lld}", buf, 0x30u);
  }
  long long v47 = +[NSNumber numberWithUnsignedInt:v12];
  long long v34 = &v47;
LABEL_75:
  v34[1] = +[NSNumber numberWithUnsignedInt:v10];
  v34[2] = +[NSNumber numberWithUnsignedInt:v11];
  return +[NSArray arrayWithObjects:v34 count:3];
}

id sub_100123630(void *a1)
{
  id v2 = +[NSMutableArray array];
  id v3 = [a1 objectForKey:@"InterestZones"];
  if ([v3 count])
  {
    id v4 = +[NSMutableArray array];
    id v16 = +[NSMutableArray array];
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v5 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (!v5) {
      goto LABEL_15;
    }
    id v6 = v5;
    uint64_t v7 = *(void *)v18;
    while (1)
    {
      for (unint64_t i = 0; i != v6; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v7) {
          objc_enumerationMutation(v3);
        }
        uint64_t v9 = *(void *)(*((void *)&v17 + 1) + 8 * i);
        id v10 = [v3 objectForKeyedSubscript:v9];
        id v11 = [v10 objectForKey:@"Relevant"];
        if (v11 && [v11 BOOLValue])
        {
          uint64_t v12 = +[NSMutableDictionary dictionaryWithDictionary:v10];
          [(NSMutableDictionary *)v12 setObject:v9 forKeyedSubscript:@"ZoneId"];
          unsigned int v13 = [[v10 objectForKeyedSubscript:@"ServiceMaskOperator"] intValue];
          long long v14 = v4;
          if (v13)
          {
            if (v13 != 1) {
              continue;
            }
            long long v14 = v16;
          }
          [v14 addObject:v12];
        }
      }
      id v6 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
      if (!v6)
      {
LABEL_15:
        [v2 addObjectsFromArray:v4];
        [v2 addObjectsFromArray:v16];
        return v2;
      }
    }
  }
  return v2;
}

uint64_t sub_100123810(void *a1)
{
  unint64_t v2 = sub_100101E40(a1);
  int v3 = v2;
  if (v2 < 5 && ((0x17u >> v2) & 1) != 0) {
    return dword_101D95608[v2];
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102301058);
  }
  id v4 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
  {
    int v7 = 68289538;
    int v8 = 0;
    __int16 v9 = 2082;
    id v10 = "";
    __int16 v11 = 1026;
    int v12 = v3;
    __int16 v13 = 2114;
    long long v14 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unexpected AuthMask #clldu RegistrationResult\", \"LocationDictionaryUtility AuthMask\":%{public}d, \"dictionary\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x22u);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301058);
    }
  }
  id v5 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    int v7 = 68289538;
    int v8 = 0;
    __int16 v9 = 2082;
    id v10 = "";
    __int16 v11 = 1026;
    int v12 = v3;
    __int16 v13 = 2114;
    long long v14 = a1;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unexpected AuthMask #clldu RegistrationResult", "{\"msg%{public}.0s\":\"Unexpected AuthMask #clldu RegistrationResult\", \"LocationDictionaryUtility AuthMask\":%{public}d, \"dictionary\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x22u);
  }
  return 4;
}

uint64_t sub_1001239E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = (void *)sub_100103D58();
  if (![*(id *)(a1 + 136) isKeyPathRegisteredSystemService:v5]) {
    return 1;
  }
  uint64_t result = (uint64_t)sub_1007BEA4C(a1, v5);
  if (result) {
    return *(double *)(a3 + 8) <= 3000.0;
  }
  return result;
}

void sub_100123A58(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *a2;
  sub_1000EF97C((uint64_t)v6, a3);
  [a4 onLocationNotification:v5 data:v6];

  if (v11) {
    sub_1000DB0A0(v11);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
}

void sub_100123AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100124510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100124600(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  if (sub_100134804(v4, *(void **)(a1 + 32), a2))
  {
    uint64_t v5 = (void *)(v4 + 976);
    if (a2)
    {
      [a2 cppClientKey];
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v14 = 0;
    }
    id v6 = sub_100103284(v5, (unsigned __int8 *)__p);
    int v7 = v6;
    if (SHIBYTE(v14) < 0)
    {
      operator delete(__p[0]);
      if (!v7) {
        return;
      }
    }
    else if (!v6)
    {
      return;
    }
    for (unint64_t i = (void *)*((void *)v7 + 7); i; unint64_t i = (void *)*i)
    {
      __int16 v9 = (std::__shared_weak_count *)i[4];
      if (v9)
      {
        char v10 = std::__shared_weak_count::lock(v9);
        if (v10)
        {
          __int16 v11 = v10;
          id v12 = (id *)i[3];
          if (v12) {
            sub_10012793C(v12, *(void **)(a1 + 40));
          }
          sub_1000DB0A0(v11);
        }
      }
    }
  }
}

void sub_1001246D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100124700(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (sub_100134804(v3, *(void **)(a1 + 32), a2))
  {
    memset(v14, 0, 35);
    *(_OWORD *)__int16 v13 = 0u;
    *(_OWORD *)long long __p = 0u;
    memset(v12, 0, sizeof(v12));
    long long v15 = 0u;
    memset(v16, 0, 59);
    if (a2)
    {
      [a2 clientName];
      if (SHIBYTE(v12[0]) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      uint64_t v10 = 0;
      memset(v9, 0, sizeof(v9));
      *(_OWORD *)int v8 = 0uLL;
      *(_OWORD *)id v6 = 0uLL;
      memset(v7, 0, sizeof(v7));
      memset(v5, 0, sizeof(v5));
      *(_OWORD *)uint64_t v4 = 0uLL;
    }
    *(_OWORD *)long long __p = *(_OWORD *)v4;
    v12[0] = v5[0];
    HIBYTE(v5[0]) = 0;
    LOBYTE(v4[0]) = 0;
    if (SHIBYTE(v12[3]) < 0) {
      operator delete(v12[1]);
    }
    *(_OWORD *)&v12[1] = *(_OWORD *)&v5[1];
    void v12[3] = v5[3];
    HIBYTE(v5[3]) = 0;
    LOBYTE(v5[1]) = 0;
    if (SHIBYTE(v14[0]) < 0) {
      operator delete(v13[0]);
    }
    *(_OWORD *)__int16 v13 = *(_OWORD *)v6;
    v14[0] = v7[0];
    HIBYTE(v7[0]) = 0;
    LOBYTE(v6[0]) = 0;
    if (SHIBYTE(v14[3]) < 0) {
      operator delete(v14[1]);
    }
    *(_OWORD *)&v14[1] = *(_OWORD *)&v7[1];
    v14[3] = v7[3];
    HIBYTE(v7[3]) = 0;
    LOBYTE(v7[1]) = 0;
    LOWORD(v14[4]) = v7[4];
    BYTE2(v14[4]) = BYTE2(v7[4]);
    if (SBYTE7(v16[0]) < 0) {
      operator delete((void *)v15);
    }
    long long v15 = *(_OWORD *)&v7[5];
    *(void **)&v16[0] = v7[7];
    HIBYTE(v7[7]) = 0;
    LOBYTE(v7[5]) = 0;
    if (SHIBYTE(v16[1]) < 0) {
      operator delete(*((void **)&v16[0] + 1));
    }
    *(_OWORD *)((char *)v16 + 8) = *(_OWORD *)v8;
    *((void *)&v16[1] + 1) = *(void *)&v9[0];
    BYTE7(v9[0]) = 0;
    LOBYTE(v8[0]) = 0;
    if (SBYTE7(v16[3]) < 0)
    {
      operator delete(*(void **)&v16[2]);
      int v16[2] = *(_OWORD *)((char *)v9 + 8);
      *(void *)&v16[3] = *((void *)&v9[1] + 1);
      HIBYTE(v9[1]) = 0;
      BYTE8(v9[0]) = 0;
      WORD4(v16[3]) = v10;
      BYTE10(v16[3]) = BYTE2(v10);
      if (SBYTE7(v9[0]) < 0) {
        operator delete(v8[0]);
      }
    }
    else
    {
      int v16[2] = *(_OWORD *)((char *)v9 + 8);
      *(void *)&v16[3] = *((void *)&v9[1] + 1);
      HIBYTE(v9[1]) = 0;
      BYTE8(v9[0]) = 0;
      WORD4(v16[3]) = v10;
      BYTE10(v16[3]) = BYTE2(v10);
    }
    if (SHIBYTE(v7[7]) < 0) {
      operator delete(v7[5]);
    }
    if (SHIBYTE(v7[3]) < 0) {
      operator delete(v7[1]);
    }
    if (SHIBYTE(v7[0]) < 0) {
      operator delete(v6[0]);
    }
    if (SHIBYTE(v5[3]) < 0) {
      operator delete(v5[1]);
    }
    if (SHIBYTE(v5[0]) < 0) {
      operator delete(v4[0]);
    }
    LODWORD(v4[0]) = 2;
    (*(void (**)(uint64_t, void **, void **, void, uint64_t, void))(*(void *)v3 + 152))(v3, v4, __p, 0, 0xFFFFFFFFLL, 0);
    if (SBYTE7(v16[3]) < 0) {
      operator delete(*(void **)&v16[2]);
    }
    if (SHIBYTE(v16[1]) < 0) {
      operator delete(*((void **)&v16[0] + 1));
    }
    if (SBYTE7(v16[0]) < 0) {
      operator delete((void *)v15);
    }
    if (SHIBYTE(v14[3]) < 0) {
      operator delete(v14[1]);
    }
    if (SHIBYTE(v14[0]) < 0) {
      operator delete(v13[0]);
    }
    if (SHIBYTE(v12[3]) < 0) {
      operator delete(v12[1]);
    }
    if (SHIBYTE(v12[0]) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100124A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_100124A88(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (sub_100134804(v4, *(void **)(a1 + 32), a2))
  {
    id v5 = [a2 legacyClientKey];
    if (v5 && *(void *)(a1 + 40))
    {
      id v6 = *(void **)(v4 + 1080);
      [v6 setObject:forKeyedSubscript:];
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      int v7 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        uint64_t v9 = *(void *)(a1 + 40);
        uint64_t v8 = *(void *)(a1 + 48);
        int v13 = 68289794;
        int v14 = 0;
        __int16 v15 = 2082;
        id v16 = "";
        __int16 v17 = 2114;
        uint64_t v18 = v8;
        __int16 v19 = 2114;
        id v20 = v5;
        __int16 v21 = 2114;
        uint64_t v22 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"cacheAuthorizationContextForClient attempting to set auth context for client, but one is nil\", \"legacyClientKey\":%{public, location:escape_only}@, \"authSharedlegacyClientKey\":%{public, location:escape_only}@, \"authContext\":%{public, location:escape_only}@}", (uint8_t *)&v13, 0x30u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
      }
      uint64_t v10 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        uint64_t v12 = *(void *)(a1 + 40);
        uint64_t v11 = *(void *)(a1 + 48);
        int v13 = 68289794;
        int v14 = 0;
        __int16 v15 = 2082;
        id v16 = "";
        __int16 v17 = 2114;
        uint64_t v18 = v11;
        __int16 v19 = 2114;
        id v20 = v5;
        __int16 v21 = 2114;
        uint64_t v22 = v12;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "cacheAuthorizationContextForClient attempting to set auth context for client, but one is nil", "{\"msg%{public}.0s\":\"cacheAuthorizationContextForClient attempting to set auth context for client, but one is nil\", \"legacyClientKey\":%{public, location:escape_only}@, \"authSharedlegacyClientKey\":%{public, location:escape_only}@, \"authContext\":%{public, location:escape_only}@}", (uint8_t *)&v13, 0x30u);
      }
    }
  }
}

uint64_t sub_100124CC0(uint64_t a1)
{
  int v2 = 0;
  return (*(uint64_t (**)(void))(*(void *)(a1 - 120) + 152))();
}

void *sub_100124D18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  id v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t result = sub_1000DC48C(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    result[2] = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100124D9C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1001F7F34(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100124DB8(uint64_t a1, uint64_t a2)
{
  sub_10011885C((uint64_t)v5, a2);
  if (v5[6]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5[0] >= 0xDu;
  }
  uint64_t v3 = !v2;
  sub_100118010((uint64_t)v5);
  return v3;
}

BOOL sub_100124E04(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(double *)(a1 + 4) == *(double *)(a2 + 4)
      && *(double *)(a1 + 12) == *(double *)(a2 + 12)
      && *(double *)(a1 + 20) == *(double *)(a2 + 20)
      && *(double *)(a1 + 28) == *(double *)(a2 + 28)
      && *(double *)(a1 + 36) == *(double *)(a2 + 36)
      && *(double *)(a1 + 44) == *(double *)(a2 + 44)
      && *(double *)(a1 + 52) == *(double *)(a2 + 52)
      && *(double *)(a1 + 60) == *(double *)(a2 + 60)
      && *(double *)(a1 + 68) == *(double *)(a2 + 68)
      && *(double *)(a1 + 76) == *(double *)(a2 + 76)
      && *(_DWORD *)(a1 + 84) == *(_DWORD *)(a2 + 84)
      && *(double *)(a1 + 88) == *(double *)(a2 + 88)
      && *(_DWORD *)(a1 + 96) == *(_DWORD *)(a2 + 96)
      && *(double *)(a1 + 100) == *(double *)(a2 + 100)
      && *(double *)(a1 + 108) == *(double *)(a2 + 108)
      && *(double *)(a1 + 116) == *(double *)(a2 + 116)
      && *(_DWORD *)(a1 + 124) == *(_DWORD *)(a2 + 124)
      && *(_DWORD *)(a1 + 128) == *(_DWORD *)(a2 + 128)
      && *(_DWORD *)(a1 + 132) == *(_DWORD *)(a2 + 132)
      && *(_DWORD *)(a1 + 136) == *(_DWORD *)(a2 + 136)
      && *(_DWORD *)(a1 + 140) == *(_DWORD *)(a2 + 140)
      && *(double *)(a1 + 144) == *(double *)(a2 + 144)
      && *(unsigned __int8 *)(a1 + 152) == *(unsigned __int8 *)(a2 + 152);
}

void sub_100124F90(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102343F88);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAWD::HandleLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102343F88);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      __int16 v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAWD::HandleLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10012516C((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10012514C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012516C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (!sub_100125368(a1, a3, a4))
  {
    *(unsigned char *)(a1 + 1320) = *(unsigned char *)(a4 + 736);
    if (*a3 == 10)
    {
      if (*(_DWORD *)(a4 + 96) == 3) {
        *(unsigned char *)(a1 + 2401) = 1;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 2401) = 0;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      uint64_t v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        int v8 = *a3;
        *(_DWORD *)uint64_t buf = 67240192;
        int v11 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "received unhandled notification %{public, location:CLLocationProvider_Type::Notification}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssAWD::HandleLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
    }
  }
}

BOOL sub_100125368(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  if (*a2 == 46 && *(_DWORD *)(a3 + 1512) == 1)
  {
    double v7 = *(double *)(a3 + 1520);
    if (v7 > 0.0)
    {
      *(double *)(a1 + 2664) = v7 + *(double *)(a1 + 2664);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      int v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a3 + 1520);
        uint64_t v10 = *(void *)(a1 + 2664);
        *(_DWORD *)uint64_t buf = 134349312;
        uint64_t v14 = v9;
        __int16 v15 = 2050;
        uint64_t v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#gnssca,proactiveLoc,gnss,seconds,new,%{public}0.2f,total,%{public}0.2f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        uint64_t v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssAWD::handleProactiveLocationAnalytics(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
    }
    *(double *)(a1 + 2672) = sub_10016C458();
    sub_101896218(a1);
  }
  return v3 == 46;
}

void sub_10012558C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102301540);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStreamingAwareLocationProvider::onLocalLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102301540);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStreamingAwareLocationProvider::onLocalLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100125768(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100125748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100125768(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_102301560);
  }
  uint64_t v7 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = (int)*a3;
    v12[0] = 68289282;
    v12[1] = 0;
    __int16 v13 = 2082;
    __int16 v14 = "";
    __int16 v15 = 2050;
    uint64_t v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received local notification\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld}", (uint8_t *)v12, 0x1Cu);
  }
  uint64_t v9 = *(void *)(a1 + 128);
  double Current = CFAbsoluteTimeGetCurrent();
  return sub_100125880(v9, 0, a3, a4, Current);
}

uint64_t sub_100125880(uint64_t a1, int a2, _DWORD *a3, uint64_t a4, double a5)
{
  unsigned int v8 = a2;
  v65[0] = a2;
  if (*a3 >= 3u)
  {
    if (*a3 != 9) {
      goto LABEL_16;
    }
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_102300550);
    }
    __int16 v14 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2050;
      *(void *)&buf[20] = v8;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Source no longer available\", \"source\":%{public, location:CLStreamingAwareLocationProviderStateMachine::LocationSource}lld}", buf, 0x1Cu);
    }
    *(void *)uint64_t buf = v65;
    uint64_t v12 = sub_100125FD0((uint64_t **)(a1 + 40), v65, (uint64_t)&unk_101D0B290, (unsigned int **)buf);
    int v13 = 1;
  }
  else
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_102300550);
    }
    uint64_t v10 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2050;
      *(void *)&buf[20] = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Source now available\", \"source\":%{public, location:CLStreamingAwareLocationProviderStateMachine::LocationSource}lld}", buf, 0x1Cu);
    }
    char v11 = (uint64_t **)(a1 + 40);
    if (*(_DWORD *)(a4 + 96) == 1)
    {
      *(void *)uint64_t buf = v65;
      uint64_t v12 = sub_100125FD0(v11, v65, (uint64_t)&unk_101D0B290, (unsigned int **)buf);
      int v13 = 3;
    }
    else
    {
      *(void *)uint64_t buf = v65;
      uint64_t v12 = sub_100125FD0(v11, v65, (uint64_t)&unk_101D0B290, (unsigned int **)buf);
      int v13 = 2;
    }
  }
  *((_DWORD *)v12 + 8) = v13;
  unsigned int v8 = v65[0];
LABEL_16:
  if (v8 == 1)
  {
    __int16 v15 = (void **)(a1 + 64);
    uint64_t v16 = (uint64_t **)(a1 + 40);
    if (*(void *)(a1 + 72) - *(void *)(a1 + 64) < 0x2CDuLL)
    {
      *(void *)uint64_t buf = v65;
      id v20 = sub_100125FD0(v16, v65, (uint64_t)&unk_101D0B290, (unsigned int **)buf);
      __int16 v21 = v20;
      unint64_t v22 = *(void *)(a1 + 80);
      unsigned __int8 v23 = *(char **)(a1 + 72);
      if ((unint64_t)v23 >= v22)
      {
        int v25 = (char *)*v15;
        uint64_t v26 = (v23 - (unsigned char *)*v15) >> 2;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62) {
          sub_1001D7FD4();
        }
        uint64_t v28 = v22 - (void)v25;
        if (v28 >> 1 > v27) {
          unint64_t v27 = v28 >> 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          long long v30 = (char *)sub_10017EA34(a1 + 80, v29);
          int v25 = *(char **)(a1 + 64);
          unsigned __int8 v23 = *(char **)(a1 + 72);
        }
        else
        {
          long long v30 = 0;
        }
        long long v31 = &v30[4 * v26];
        id v32 = &v30[4 * v29];
        *(_DWORD *)long long v31 = *((_DWORD *)v21 + 8);
        unsigned int v24 = v31 + 4;
        while (v23 != v25)
        {
          int v33 = *((_DWORD *)v23 - 1);
          v23 -= 4;
          *((_DWORD *)v31 - 1) = v33;
          v31 -= 4;
        }
        *(void *)(a1 + 64) = v31;
        *(void *)(a1 + 72) = v24;
        *(void *)(a1 + 80) = v32;
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *(_DWORD *)unsigned __int8 v23 = *((_DWORD *)v20 + 8);
        unsigned int v24 = v23 + 4;
      }
      *(void *)(a1 + 72) = v24;
      int v19 = 180;
    }
    else
    {
      *(void *)uint64_t buf = v65;
      __int16 v17 = sub_100125FD0(v16, v65, (uint64_t)&unk_101D0B290, (unsigned int **)buf);
      int v18 = *(_DWORD *)(a1 + 88);
      *(_DWORD *)(*(void *)(a1 + 64) + 4 * (v18 % 180)) = *((_DWORD *)v17 + 8);
      int v19 = v18 + 1;
    }
    *(_DWORD *)(a1 + 88) = v19;
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_102300550);
    }
    long long v34 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEBUG))
    {
      long long v35 = *(int **)(a1 + 64);
      long long v36 = *(int **)(a1 + 72);
      if (v35 == v36)
      {
        uint64_t v43 = 0;
        uint64_t v37 = 0;
        uint64_t v40 = 0;
        uint64_t v46 = 0;
      }
      else
      {
        uint64_t v37 = 0;
        long long v38 = *(int **)(a1 + 64);
        do
        {
          int v39 = *v38++;
          if (v39 == 3) {
            ++v37;
          }
        }
        while (v38 != v36);
        uint64_t v40 = 0;
        uint64_t v41 = *(int **)(a1 + 64);
        do
        {
          int v42 = *v41++;
          if (v42 == 2) {
            ++v40;
          }
        }
        while (v41 != v36);
        uint64_t v43 = 0;
        long long v44 = *(int **)(a1 + 64);
        do
        {
          int v45 = *v44++;
          if (v45 == 1) {
            ++v43;
          }
        }
        while (v44 != v36);
        uint64_t v46 = 0;
        long long v47 = *(int **)(a1 + 64);
        do
        {
          if (!*v47++) {
            ++v46;
          }
        }
        while (v47 != v36);
      }
      *(_DWORD *)uint64_t buf = 134350080;
      *(void *)&uint8_t buf[4] = v37;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = v40;
      *(_WORD *)&unsigned char buf[22] = 2050;
      *(void *)&uint8_t buf[24] = v43;
      __int16 v76 = 2050;
      uint64_t v77 = v46;
      __int16 v78 = 2050;
      uint64_t v79 = v36 - v35;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "Companion Availability Statistics,ahq,%{public}ld,a,%{public}ld,ua,%{public}ld,uk,%{public}ld,s,%{public}zu", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_102300550);
      }
      int v50 = *(int **)(a1 + 64);
      __int16 v51 = *(int **)(a1 + 72);
      if (v50 == v51)
      {
        uint64_t v58 = 0;
        uint64_t v52 = 0;
        uint64_t v55 = 0;
        uint64_t v61 = 0;
      }
      else
      {
        uint64_t v52 = 0;
        __int16 v53 = *(int **)(a1 + 64);
        do
        {
          int v54 = *v53++;
          if (v54 == 3) {
            ++v52;
          }
        }
        while (v53 != v51);
        uint64_t v55 = 0;
        uint64_t v56 = *(int **)(a1 + 64);
        do
        {
          int v57 = *v56++;
          if (v57 == 2) {
            ++v55;
          }
        }
        while (v56 != v51);
        uint64_t v58 = 0;
        uint64_t v59 = *(int **)(a1 + 64);
        do
        {
          int v60 = *v59++;
          if (v60 == 1) {
            ++v58;
          }
        }
        while (v59 != v51);
        uint64_t v61 = 0;
        __int16 v62 = *(int **)(a1 + 64);
        do
        {
          if (!*v62++) {
            ++v61;
          }
        }
        while (v62 != v51);
      }
      v65[1] = 134350080;
      uint64_t v66 = v52;
      __int16 v67 = 2050;
      uint64_t v68 = v55;
      __int16 v69 = 2050;
      uint64_t v70 = v58;
      __int16 v71 = 2050;
      uint64_t v72 = v61;
      __int16 v73 = 2050;
      uint64_t v74 = v51 - v50;
      __int16 v64 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLStreamingAwareLocationProviderStateMachine::receivedLocationNotification(LocationSource, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, CFAbsoluteTime)", "%s\n", v64);
      if (v64 != buf) {
        free(v64);
      }
    }
  }
  (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, a5);
  return (*(uint64_t (**)(uint64_t, void, _DWORD *, uint64_t, double))(*(void *)a1 + 104))(a1, v65[0], a3, a4, a5);
}

uint64_t sub_100125F6C(uint64_t a1, unsigned int a2)
{
  if (a2 == 39) {
    unsigned int v2 = 0;
  }
  else {
    unsigned int v2 = a2;
  }
  if (a2 < 6) {
    unsigned int v2 = 0;
  }
  unsigned int v4 = v2;
  return (*(uint64_t (**)(void))(*(void *)(a1 - 120) + 152))();
}

uint64_t *sub_100125FD0(uint64_t **a1, int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t v7 = a1 + 1;
  id v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        id v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      id v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    char v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    sub_1000EDF90(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t sub_100126090(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 32) + 8))(*(void *)(a1 + 32), *a3, a4);
}

uint64_t *sub_1001260C0(uint64_t a1)
{
  id v1 = (char *)&dword_101D94908;
  do
  {
    if (*(void *)(a1 + 16))
    {
      int v2 = *(_DWORD *)v1;
      int v3 = *(uint64_t **)(a1 + 16);
      do
      {
        int v4 = *((_DWORD *)v3 + 7);
        if (v2 >= v4)
        {
          if (v4 >= v2)
          {
            uint64_t v12 = 0;
            uint64_t v13 = 0;
            __asm { FMOV            V0.2D, #-1.0 }
            long long v11 = _Q0;
            return sub_100126168(a1, 0, (uint64_t)&v11);
          }
          ++v3;
        }
        int v3 = (uint64_t *)*v3;
      }
      while (v3);
    }
    v1 += 4;
  }
  while (v1 != "44CLStreamingAwareLocationProviderStateMachine");

  return sub_100EB0C8C(a1, 0);
}

uint64_t *sub_100126168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)&dword_101D94908;
  while (!*(void *)(a1 + 16))
  {
LABEL_8:
    v6 += 4;
    if (v6 == "44CLStreamingAwareLocationProviderStateMachine")
    {
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_102300550);
      }
      int v10 = qword_102419548;
      if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_FAULT))
      {
        int v17 = 68289026;
        int v18 = 0;
        __int16 v19 = 2082;
        id v20 = "";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"State is out of sync with registrations\"}", (uint8_t *)&v17, 0x12u);
        if (qword_102419540 != -1) {
          dispatch_once(&qword_102419540, &stru_102300550);
        }
      }
      long long v11 = qword_102419548;
      if (os_signpost_enabled((os_log_t)qword_102419548))
      {
        int v17 = 68289026;
        int v18 = 0;
        __int16 v19 = 2082;
        id v20 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "State is out of sync with registrations", "{\"msg%{public}.0s\":\"State is out of sync with registrations\"}", (uint8_t *)&v17, 0x12u);
      }
      return sub_100EB0C8C(a1, a2);
    }
  }
  int v7 = *(_DWORD *)v6;
  int v8 = *(uint64_t **)(a1 + 16);
  while (1)
  {
    int v9 = *((_DWORD *)v8 + 7);
    if (v7 >= v9) {
      break;
    }
LABEL_7:
    int v8 = (uint64_t *)*v8;
    if (!v8) {
      goto LABEL_8;
    }
  }
  if (v9 < v7)
  {
    ++v8;
    goto LABEL_7;
  }
  if (v7 | a2)
  {
LABEL_25:
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_102300550);
    }
  }
  else
  {
    if (!*(unsigned char *)(a1 + 93) || !*(unsigned char *)(a1 + 92))
    {
      int v7 = 0;
      goto LABEL_25;
    }
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_102300550);
    }
    uint64_t v13 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 68289026;
      int v18 = 0;
      __int16 v19 = 2082;
      id v20 = "";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Local GPS is forbidden right now.  Downgrading to wifi accuracy\"}", (uint8_t *)&v17, 0x12u);
      int v7 = 1;
      goto LABEL_25;
    }
    int v7 = 1;
  }
  __int16 v14 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
  {
    int v15 = *(unsigned __int8 *)(a3 + 17);
    int v17 = 68289794;
    int v18 = 0;
    __int16 v19 = 2082;
    id v20 = "";
    __int16 v21 = 2050;
    uint64_t v22 = a2;
    __int16 v23 = 2050;
    uint64_t v24 = v7;
    __int16 v25 = 1026;
    int v26 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Starting location for source\", \"source\":%{public, location:CLStreamingAwareLocationProviderStateMachine::LocationSource}lld, \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld, \"include motion\":%{public}d}", (uint8_t *)&v17, 0x2Cu);
  }
  for (uint64_t i = 0; i != 12; i += 4)
    uint64_t result = (uint64_t *)(***(uint64_t (****)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 32), a2);
  return result;
}

uint64_t **sub_100126500(uint64_t a1, int a2, unsigned int a3, int a4, long long *a5)
{
  return sub_100126508(a1 - 120, a2, a3, a4, a5);
}

uint64_t **sub_100126508(uint64_t a1, int a2, unsigned int a3, int a4, long long *a5)
{
  if (a2 == 1)
  {
    long long v7 = a5[1];
    v8[0] = *a5;
    v8[1] = v7;
    return sub_100126580(a1, a3, a4, v8, a1 + 208, (uint64_t **)(a1 + 168));
  }
  else
  {
    if (a2) {
      sub_101A94DF0();
    }
    long long v5 = a5[1];
    v9[0] = *a5;
    v9[1] = v5;
    return sub_100126580(a1, a3, a4, v9, a1 + 200, (uint64_t **)(a1 + 144));
  }
}

uint64_t **sub_100126580(uint64_t a1, unsigned int a2, int a3, long long *a4, uint64_t a5, uint64_t **a6)
{
  unsigned int v18 = a2;
  *(void *)&long long v16 = &v18;
  int v11 = *((unsigned __int8 *)sub_1000EB1B8(a6, (int *)&v18, (uint64_t)&unk_101D0B290, (_DWORD **)&v16) + 32);
  *(void *)&long long v16 = &v18;
  *((unsigned char *)sub_1000EB1B8(a6, (int *)&v18, (uint64_t)&unk_101D0B290, (_DWORD **)&v16) + 32) = a3;
  if (a3)
  {
    long long v12 = a4[1];
    long long v16 = *a4;
    long long v17 = v12;
    DWORD1(v17) = sub_1001266F8(a1, v18);
    if (v11) {
      sub_10012F728();
    }
    sub_10012F770();
  }
  [*(id *)(*(void *)a5 + 16) unregister:*(void *)(*(void *)a5 + 8) forNotification:v18];
  uint64_t v13 = 0;
  while (1)
  {
    int v15 = dword_101D95854[v13];
    *(void *)&long long v16 = &v15;
    uint64_t result = sub_1000EB1B8(a6, &v15, (uint64_t)&unk_101D0B290, (_DWORD **)&v16);
    if (*((unsigned char *)result + 32)) {
      break;
    }
    if (++v13 == 3) {
      return (uint64_t **)[*(id *)(*(void *)a5 + 16) unregister:*(void *)(*(void *)a5 + 8) forNotification:9];
    }
  }
  return result;
}

uint64_t sub_1001266F8(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v2 = a1 + 64;
  uint64_t v3 = v4;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v2;
  do
  {
    int v6 = *(_DWORD *)(v3 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      int v8 = (uint64_t *)v3;
    }
    else {
      int v8 = (uint64_t *)(v3 + 8);
    }
    if (!v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 == v2 || *(_DWORD *)(v5 + 32) > a2) {
    return 0;
  }
  int v10 = *(void **)(v5 + 40);
  int v11 = (void *)(v5 + 48);
  uint64_t result = 11;
  if (v10 != v11)
  {
    do
    {
      int v12 = *((_DWORD *)v10 + 15);
      if (v12 < (int)result)
      {
        uint64_t result = *((unsigned int *)v10 + 15);
        if (!v12) {
          break;
        }
      }
      uint64_t v13 = (void *)v10[1];
      if (v13)
      {
        do
        {
          __int16 v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          __int16 v14 = (void *)v10[2];
          BOOL v15 = *v14 == (void)v10;
          int v10 = v14;
        }
        while (!v15);
      }
      int v10 = v14;
    }
    while (v14 != v11);
  }
  return result;
}

void sub_1001267A0(uint64_t a1, _DWORD *a2, double *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10234DD10);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v90 = 1;
    BOOL v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGeomagneticModelProviderDaemon::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10234DD10);
    }
    int v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = "activity";
      *(_WORD *)&unsigned char buf[28] = 2050;
      *(void *)&buf[30] = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGeomagneticModelProviderDaemon::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v90 = 0;
  }
  HIDWORD(v10) = *a2;
  LODWORD(v10) = *a2;
  unsigned int v9 = v10 >> 1;
  if (v9 >= 3)
  {
    if (v9 == 7)
    {
      int v25 = sub_100170B44(a4 + 176);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_10234DD30);
      }
      int v26 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v25;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "new location authorization status for geomagnetic model: %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_10234DD30);
        }
        *(_DWORD *)long long v91 = 67240192;
        *(_DWORD *)&v91[4] = v25;
        uint64_t v66 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v66);
        if (v66 != buf) {
          free(v66);
        }
      }
      if ((v25 - 3) < 2)
      {
        sub_101A386AC(a4);
        sub_101A37F6C(a4);
      }
      else if ((v25 - 1) <= 1)
      {
        sub_101A39238(a4);
      }
    }
  }
  else
  {
    double Current = CFAbsoluteTimeGetCurrent();
    if (*(double *)((char *)a3 + 20) >= 0.0
      && ((double v12 = a3[11], v12 < 0.0) || Current <= v12 + *(double *)((char *)a3 + 76) + *(double *)(a4 + 416))
      && sub_1001198CC() == 1)
    {
      sub_10012777C(a4);
      double v13 = *(double *)(a4 + 168);
      if (v13 < 0.0 || *(double *)((char *)a3 + 76) - v13 >= *(double *)(a4 + 416) * 0.5)
      {
        float v27 = sub_1019F007C();
        float v28 = *(double *)((char *)a3 + 4);
        float v29 = *(double *)((char *)a3 + 12);
        float v30 = *(double *)((char *)a3 + 28);
        if (sub_1005AB474((uint64_t)v91, v28, v29, v30, v27))
        {
          if (qword_1024190A0 != -1) {
            dispatch_once(&qword_1024190A0, &stru_10234DD30);
          }
          long long v31 = qword_1024190A8;
          if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_FAULT))
          {
            uint64_t v32 = *(void *)((char *)a3 + 76);
            *(_DWORD *)uint64_t buf = 134349312;
            *(void *)&uint8_t buf[4] = v32;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(double *)&unsigned char buf[14] = v27;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "declination calculation failed @ %{public}lf (%{public}f)", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190A0 != -1) {
              dispatch_once(&qword_1024190A0, &stru_10234DD30);
            }
            uint64_t v67 = *(void *)((char *)a3 + 76);
            int v109 = 134349312;
            uint64_t v110 = v67;
            __int16 v111 = 2050;
            double v112 = v27;
            uint64_t v68 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeomagneticModelProviderDaemon::getGeomagneticField(const CLDaemonLocation &)", "%s\n", v68);
            if (v68 != buf) {
              free(v68);
            }
          }
          if (qword_1024190A0 != -1) {
            dispatch_once(&qword_1024190A0, &stru_10234DD30);
          }
          int v33 = qword_1024190A8;
          if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v34 = *(void *)((char *)a3 + 4);
            uint64_t v35 = *(void *)((char *)a3 + 12);
            uint64_t v36 = *(void *)((char *)a3 + 28);
            *(_DWORD *)uint64_t buf = 134218496;
            *(void *)&uint8_t buf[4] = v34;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&unsigned char buf[14] = v35;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(void *)&uint8_t buf[24] = v36;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#Warning no geomagnetic information available for <%+.8f,%+.8f,%+.3f>", buf, 0x20u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190A0 != -1) {
              dispatch_once(&qword_1024190A0, &stru_10234DD30);
            }
            uint64_t v37 = *(void *)((char *)a3 + 4);
            uint64_t v38 = *(void *)((char *)a3 + 12);
            uint64_t v39 = *(void *)((char *)a3 + 28);
            *(_DWORD *)long long v91 = 134218496;
            *(void *)&v91[4] = v37;
            *(_WORD *)&v91[12] = 2048;
            *(void *)&v91[14] = v38;
            *(_WORD *)&v91[22] = 2048;
            uint64_t v92 = v39;
            BOOL v15 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::setLocation(const CLDaemonLocation &)", "%s\n", v15);
            goto LABEL_32;
          }
        }
        else
        {
          float64x2_t v40 = vcvtq_f64_f32(*(float32x2_t *)&v91[8]);
          *(float64x2_t *)(a4 + 112) = vcvtq_f64_f32(*(float32x2_t *)v91);
          *(float64x2_t *)(a4 + 128) = v40;
          *(float64x2_t *)(a4 + 144) = vcvtq_f64_f32(*(float32x2_t *)&v91[16]);
          *(double *)(a4 + 160) = *(float *)&v92;
          *(double *)(a4 + 168) = *(double *)((char *)a3 + 76);
          if (qword_1024190A0 != -1) {
            dispatch_once(&qword_1024190A0, &stru_10234DD30);
          }
          uint64_t v41 = qword_1024190A8;
          if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v42 = *(void *)((char *)a3 + 4);
            uint64_t v43 = *(void *)((char *)a3 + 12);
            uint64_t v44 = *(void *)((char *)a3 + 28);
            double v45 = *(double *)((char *)a3 + 76);
            uint64_t v46 = *(void *)(a4 + 152);
            uint64_t v47 = *(void *)(a4 + 160);
            double v48 = v45 + *(double *)(a4 + 416);
            *(_DWORD *)uint64_t buf = 134219520;
            *(void *)&uint8_t buf[4] = v42;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&unsigned char buf[14] = v43;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(void *)&uint8_t buf[24] = v44;
            *(_WORD *)&unsigned char buf[32] = 2048;
            *(double *)&buf[34] = v45;
            __int16 v114 = 2048;
            uint64_t v115 = v46;
            __int16 v116 = 2048;
            uint64_t v117 = v47;
            __int16 v118 = 2048;
            double v119 = v48;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "geomagnetic information calculated for <%+.8f,%+.8f,%+.3f> @ %.3f, declination %f inclination %f will expire @ %.3f", buf, 0x48u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190A0 != -1) {
              dispatch_once(&qword_1024190A0, &stru_10234DD30);
            }
            uint64_t v69 = *(void *)((char *)a3 + 4);
            uint64_t v70 = *(void *)((char *)a3 + 12);
            uint64_t v71 = *(void *)((char *)a3 + 28);
            double v72 = *(double *)((char *)a3 + 76);
            uint64_t v73 = *(void *)(a4 + 152);
            uint64_t v74 = *(void *)(a4 + 160);
            double v75 = v72 + *(double *)(a4 + 416);
            *(_DWORD *)long long v91 = 134219520;
            *(void *)&v91[4] = v69;
            *(_WORD *)&v91[12] = 2048;
            *(void *)&v91[14] = v70;
            *(_WORD *)&v91[22] = 2048;
            uint64_t v92 = v71;
            __int16 v93 = 2048;
            double v94 = v72;
            __int16 v95 = 2048;
            uint64_t v96 = v73;
            __int16 v97 = 2048;
            uint64_t v98 = v74;
            __int16 v99 = 2048;
            double v100 = v75;
            __int16 v76 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::setLocation(const CLDaemonLocation &)", "%s\n", v76);
            if (v76 != buf) {
              free(v76);
            }
          }
          if (qword_1024190A0 != -1) {
            dispatch_once(&qword_1024190A0, &stru_10234DD30);
          }
          long long v49 = qword_1024190A8;
          if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v50 = *(void *)((char *)a3 + 4);
            uint64_t v51 = *(void *)((char *)a3 + 12);
            uint64_t v52 = *(void *)((char *)a3 + 28);
            uint64_t v53 = *(void *)(a4 + 112);
            uint64_t v54 = *(void *)(a4 + 120);
            double v55 = *(double *)(a4 + 128);
            uint64_t v56 = *(void *)(a4 + 136);
            uint64_t v57 = *(void *)(a4 + 144);
            uint64_t v58 = *(void *)(a4 + 152);
            uint64_t v59 = *(void *)(a4 + 160);
            *(_DWORD *)uint64_t buf = 136317698;
            *(void *)&uint8_t buf[4] = "Compass-Geomagnetic";
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&unsigned char buf[14] = v50;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(void *)&uint8_t buf[24] = v51;
            *(_WORD *)&unsigned char buf[32] = 2048;
            *(void *)&buf[34] = v52;
            __int16 v114 = 2048;
            uint64_t v115 = v53;
            __int16 v116 = 2048;
            uint64_t v117 = v54;
            __int16 v118 = 2048;
            double v119 = v55;
            __int16 v120 = 2048;
            uint64_t v121 = v56;
            __int16 v122 = 2048;
            uint64_t v123 = v57;
            __int16 v124 = 2048;
            uint64_t v125 = v58;
            __int16 v126 = 2048;
            uint64_t v127 = v59;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "Type,%s,lat,%+.8f,long,%+.8f,alt,%+.3f,x,%.3f,y,%.3f,z,%.3f,m,%.3f,h,%.3f,dec,%+.3f,inc,%+.3f,", buf, 0x70u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190A0 != -1) {
              dispatch_once(&qword_1024190A0, &stru_10234DD30);
            }
            uint64_t v77 = *(void *)((char *)a3 + 4);
            uint64_t v78 = *(void *)((char *)a3 + 12);
            double v79 = *(double *)((char *)a3 + 28);
            uint64_t v80 = *(void *)(a4 + 112);
            uint64_t v81 = *(void *)(a4 + 120);
            double v82 = *(double *)(a4 + 128);
            uint64_t v83 = *(void *)(a4 + 136);
            uint64_t v84 = *(void *)(a4 + 144);
            uint64_t v85 = *(void *)(a4 + 152);
            uint64_t v86 = *(void *)(a4 + 160);
            *(_DWORD *)long long v91 = 136317698;
            *(void *)&v91[4] = "Compass-Geomagnetic";
            *(_WORD *)&v91[12] = 2048;
            *(void *)&v91[14] = v77;
            *(_WORD *)&v91[22] = 2048;
            uint64_t v92 = v78;
            __int16 v93 = 2048;
            double v94 = v79;
            __int16 v95 = 2048;
            uint64_t v96 = v80;
            __int16 v97 = 2048;
            uint64_t v98 = v81;
            __int16 v99 = 2048;
            double v100 = v82;
            __int16 v101 = 2048;
            uint64_t v102 = v83;
            __int16 v103 = 2048;
            uint64_t v104 = v84;
            __int16 v105 = 2048;
            uint64_t v106 = v85;
            __int16 v107 = 2048;
            uint64_t v108 = v86;
            long long v87 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::setLocation(const CLDaemonLocation &)", "%s\n", v87);
            if (v87 != buf) {
              free(v87);
            }
          }
          sub_101A3862C(a4);
          double v61 = *(double *)(a4 + 160);
          double v60 = *(double *)(a4 + 168);
          double v62 = *(double *)(a4 + 136);
          double v63 = *(double *)(a4 + 152);
          if (qword_1024190A0 != -1) {
            dispatch_once(&qword_1024190A0, &stru_10234DD30);
          }
          __int16 v64 = qword_1024190A8;
          if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t buf = 134349056;
            *(double *)&uint8_t buf[4] = v60;
            _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "caching geomagnetic information @ %{public}.3f", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190A0 != -1) {
              dispatch_once(&qword_1024190A0, &stru_10234DD30);
            }
            *(_DWORD *)long long v91 = 134349056;
            *(double *)&v91[4] = v60;
            long long v88 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::storeGeomagneticDataToCache()", "%s\n", v88);
            if (v88 != buf) {
              free(v88);
            }
          }
          uint64_t v65 = sub_1000A6958();
          *(void *)uint64_t buf = +[NSNumber numberWithDouble:v60];
          *(void *)&uint8_t buf[8] = +[NSNumber numberWithDouble:round(v62)];
          *(void *)&uint8_t buf[16] = +[NSNumber numberWithDouble:round(v63)];
          *(void *)&uint8_t buf[24] = +[NSNumber numberWithDouble:round(v61)];
          +[NSArray arrayWithObjects:buf count:4];
          sub_1004D258C(v65);
        }
      }
      else
      {
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_10234DD30);
        }
        __int16 v14 = qword_1024190A8;
        if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "current location is still fresh, geomagnetic data is not re-calculated", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190A0 != -1) {
            dispatch_once(&qword_1024190A0, &stru_10234DD30);
          }
          *(_WORD *)long long v91 = 0;
          BOOL v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::setLocation(const CLDaemonLocation &)", "%s\n", v15);
LABEL_32:
          if (v15 != buf) {
            free(v15);
          }
        }
      }
    }
    else
    {
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_10234DD30);
      }
      long long v16 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(void *)((char *)a3 + 4);
        uint64_t v18 = *(void *)((char *)a3 + 12);
        uint64_t v19 = *(void *)((char *)a3 + 28);
        uint64_t v20 = *(void *)((char *)a3 + 76);
        *(_DWORD *)uint64_t buf = 134218752;
        *(void *)&uint8_t buf[4] = v17;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = v18;
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(void *)&uint8_t buf[24] = v19;
        *(_WORD *)&unsigned char buf[32] = 2048;
        *(void *)&buf[34] = v20;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning geomagnetic provider received a stale location <%+.8f,%+.8f,%+.3f> @ %.3f", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_10234DD30);
        }
        uint64_t v21 = *(void *)((char *)a3 + 4);
        uint64_t v22 = *(void *)((char *)a3 + 12);
        uint64_t v23 = *(void *)((char *)a3 + 28);
        double v24 = *(double *)((char *)a3 + 76);
        *(_DWORD *)long long v91 = 134218752;
        *(void *)&v91[4] = v21;
        *(_WORD *)&v91[12] = 2048;
        *(void *)&v91[14] = v22;
        *(_WORD *)&v91[22] = 2048;
        uint64_t v92 = v23;
        __int16 v93 = 2048;
        double v94 = v24;
        BOOL v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::setLocation(const CLDaemonLocation &)", "%s\n", v15);
        goto LABEL_32;
      }
    }
  }
  if (v90) {
    os_activity_scope_leave(&state);
  }
}

void sub_10012775C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
  if (a13) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_10012777C(uint64_t a1)
{
  id result = [*(id *)(a1 + 376) setNextFireDelay:1.79769313e308];
  if (*(unsigned char *)(a1 + 408))
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_10234DD30);
    }
    uint64_t v3 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "stopping coarse location for computing geomagnetic data", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_10234DD30);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::stopCoarseLocationUpdates()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    id result = [*(id *)(*(void *)(a1 + 400) + 16) unregister:*(void *)(*(void *)(a1 + 400) + 8) forNotification:2];
    *(unsigned char *)(a1 + 408) = 0;
  }
  return result;
}

uint64_t sub_10012793C(id *a1, void *a2)
{
  id v4 = a2;

  a1[17] = a2;
  uint64_t v5 = (uint64_t (*)(id *))*((void *)*a1 + 5);

  return v5(a1);
}

void sub_1001279A4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102315130);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationAwarenessProvider::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102315130);
    }
    unsigned int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      BOOL v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationAwarenessProvider::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100127B80(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100127B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100127B80(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 == *(_DWORD *)(a1 + 312))
  {
    *(_DWORD *)uint64_t buf = 0;
    if (sub_1001072EC(a1, (int *)buf, 1))
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102315150);
      }
      int v6 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Awareness Received location\"}", buf, 0x12u);
      }
      *(void *)(a1 + 160) = *(void *)(a4 + 76);
      sub_100127E50(a1);
      long long v7 = *(_OWORD *)(a4 + 112);
      long long v21 = *(_OWORD *)(a4 + 96);
      long long v22 = v7;
      v23[0] = *(_OWORD *)(a4 + 128);
      *(_OWORD *)((char *)v23 + 12) = *(_OWORD *)(a4 + 140);
      long long v8 = *(_OWORD *)(a4 + 48);
      long long v17 = *(_OWORD *)(a4 + 32);
      long long v18 = v8;
      long long v9 = *(_OWORD *)(a4 + 80);
      long long v19 = *(_OWORD *)(a4 + 64);
      long long v20 = v9;
      long long v10 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)uint64_t buf = *(_OWORD *)a4;
      *(_OWORD *)&uint8_t buf[16] = v10;
      int v15 = 0;
      (*(void (**)(uint64_t, int *, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v15, buf, 1, 0xFFFFFFFFLL, 0);
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102315150);
      }
      __int16 v14 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Awareness #warning Received location without clients\"}", buf, 0x12u);
      }
      if (*(_DWORD *)(a1 + 312) != 48)
      {
        [*(id *)(*(void *)(a1 + 264) + 16) unregister:*(void *)(*(void *)(a1 + 264) + 8) forNotification:];
        *(_DWORD *)(a1 + 312) = 48;
      }
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102315150);
    }
    double v12 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *a3;
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2050;
      *(void *)&buf[20] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Awareness #warning Unexpected notification\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld}", buf, 0x1Cu);
    }
  }
}

void sub_100127E50(uint64_t a1)
{
  sub_100128090(a1, (uint64_t)v12);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)v12;
  *(unsigned char *)(a1 + 144) = v12[16];
  *(CFAbsoluteTime *)(a1 + 184) = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)double v12 = 0;
  if (sub_1001072EC(a1, (int *)v12, 1) && *(unsigned char *)(a1 + 248))
  {
    uint64_t v2 = (double *)(a1 + 128);
    *(unsigned char *)(a1 + 288) = 1;
    if (*(unsigned char *)(a1 + 144)) {
      uint64_t v3 = 3;
    }
    else {
      uint64_t v3 = 4;
    }
    sub_10012819C((_DWORD *)a1, v3);
    sub_100128200(a1, 1);
    if (*(unsigned char *)(a1 + 249))
    {
      double v4 = *v2;
    }
    else
    {
      *uint64_t v2 = INFINITY;
      double v4 = INFINITY;
    }
    double v8 = *(double *)(a1 + 184) + *(double *)(a1 + 120);
    if (vabdd_f64(v8, *(double *)(a1 + 160)) < v4)
    {
      sub_1001282A8(a1);
      double v9 = *(double *)(a1 + 128);
      double v10 = INFINITY;
      if (v9 != INFINITY)
      {
        double v11 = *(double *)(a1 + 160);
LABEL_22:
        double v10 = v9 + v11;
        goto LABEL_23;
      }
      goto LABEL_23;
    }
    if (vabdd_f64(v8, *(double *)(a1 + 168)) < *(double *)(a1 + 136))
    {
      sub_1001282A8(a1);
      double v9 = *(double *)(a1 + 168);
      double v10 = -INFINITY;
      if (v9 != -INFINITY)
      {
        double v11 = *(double *)(a1 + 136);
        goto LABEL_22;
      }
LABEL_23:
      sub_1001283F8((double *)a1, v10);
      return;
    }
    sub_10117740C(a1);
  }
  else
  {
    if (*(unsigned char *)(a1 + 288))
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102315150);
      }
      uint64_t v5 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)double v12 = 0;
        int v6 = sub_1001072EC(a1, (int *)v12, 1);
        int v7 = *(unsigned __int8 *)(a1 + 248);
        *(void *)double v12 = 68289538;
        *(_WORD *)&unsigned char v12[8] = 2082;
        *(void *)&v12[10] = "";
        __int16 v13 = 1026;
        BOOL v14 = v6 != 0;
        __int16 v15 = 1026;
        int v16 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Awareness Shutting down\", \"hasClients\":%{public}hhd, \"bigSwitch\":%{public}hhd}", v12, 0x1Eu);
      }
      sub_101176474(a1);
    }
    *(unsigned char *)(a1 + 288) = 0;
  }
}

uint64_t sub_100128090@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(int64x2_t *)a2 = vdupq_n_s64(0x7FF0000000000000uLL);
  *(unsigned char *)(a2 + 16) = 0;
  uint64_t v2 = *(void *)(result + 64);
  if (v2)
  {
    uint64_t v3 = result + 64;
    do
    {
      int v4 = *(_DWORD *)(v2 + 32);
      BOOL v5 = v4 < 0;
      if (v4 >= 0) {
        int v6 = (uint64_t *)v2;
      }
      else {
        int v6 = (uint64_t *)(v2 + 8);
      }
      if (!v5) {
        uint64_t v3 = v2;
      }
      uint64_t v2 = *v6;
    }
    while (*v6);
    if (v3 != result + 64 && *(int *)(v3 + 32) <= 0)
    {
      int v7 = *(void **)(v3 + 40);
      double v8 = (void *)(v3 + 48);
      if (v7 != v8)
      {
        BOOL v9 = 0;
        int v10 = *(unsigned __int8 *)(result + 152);
        double v11 = INFINITY;
        double v12 = INFINITY;
        do
        {
          __int16 v13 = (double *)(v7 + 5);
          if (v10) {
            uint64_t v14 = 5;
          }
          else {
            uint64_t v14 = 8;
          }
          if (!v10) {
            __int16 v13 = (double *)(v7 + 8);
          }
          if (*(double *)&v7[v14] < v11) {
            double v11 = *(double *)&v7[v14];
          }
          *(double *)a2 = v11;
          if (v13[1] < v12) {
            double v12 = v13[1];
          }
          *(double *)(a2 + 8) = v12;
          BOOL v9 = v9 || *((unsigned char *)v13 + 16) != 0;
          *(unsigned char *)(a2 + 16) = v9;
          __int16 v15 = (void *)v7[1];
          if (v15)
          {
            do
            {
              int v16 = v15;
              __int16 v15 = (void *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              int v16 = (void *)v7[2];
              BOOL v17 = *v16 == (void)v7;
              int v7 = v16;
            }
            while (!v17);
          }
          int v7 = v16;
        }
        while (v16 != v8);
      }
    }
  }
  return result;
}

_DWORD *sub_10012819C(_DWORD *result, uint64_t a2)
{
  int v2 = result[78];
  if (v2 != a2)
  {
    int v4 = result;
    if (v2 != 48) {
      id result = [*(id *)(*((void *)result + 33) + 16) unregister:forNotification:*(void *)(*((void *)result + 33) + 8)];
    }
    if (a2 != 48) {
      id result = [*(id *)(*((void *)v4 + 33) + 16) register:*(void *)(*((void *)v4 + 33) + 8) forNotification:a2 registrationInfo:0];
    }
    v4[78] = a2;
  }
  return result;
}

uint64_t sub_100128200(uint64_t a1, int a2)
{
  sub_100103240();
  uint64_t result = sub_1000F08D4();
  if ((result & 1) == 0 && *(unsigned __int8 *)(a1 + 153) != a2)
  {
    *(unsigned char *)(a1 + 153) = a2;
    BOOL v5 = *(void **)(a1 + 328);
    if (a2)
    {
      [v5 startMonitoringScenarioTriggerOfType:1 forClient:CLISP_ME_TOKEN];
      int v6 = *(void **)(a1 + 328);
      uint64_t v7 = CLISP_ME_TOKEN;
      return (uint64_t)[v6 startMonitoringScenarioTriggerOfType:2 forClient:v7];
    }
    else
    {
      [v5 stopMonitoringScenarioTriggerOfType:1 forClient:CLISP_ME_TOKEN];
      uint64_t result = (uint64_t)[*(id *)(a1 + 328) stopMonitoringScenarioTriggerOfType:2 forClient:CLISP_ME_TOKEN];
      *(unsigned char *)(a1 + 152) = 0;
    }
  }
  return result;
}

double sub_1001282A8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 289))
  {
    *(unsigned char *)(a1 + 289) = 0;
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102315150);
    }
    int v2 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 296);
      v6[0] = 68289282;
      v6[1] = 0;
      __int16 v7 = 2082;
      double v8 = "";
      __int16 v9 = 2050;
      uint64_t v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Awareness stopping active location request and releasing power assertion\", \"powerAssertion\":\"%{public}p\"}", (uint8_t *)v6, 0x1Cu);
    }
    [*(id *)(*(void *)(a1 + 272) + 16) unregister:*(void *)(*(void *)(a1 + 272) + 8) forNotification:1];
    [*(id *)(a1 + 304) setNextFireDelay:1.79769313e308];
    uint64_t v4 = *(void *)(a1 + 296);
    *(void *)(a1 + 296) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    double result = *(double *)(a1 + 184);
    *(double *)(a1 + 168) = result;
  }
  return result;
}

void sub_1001283F8(double *a1, double a2)
{
  if (a2 == INFINITY)
  {
    if (a1[22] != INFINITY)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102315150);
      }
      uint64_t v4 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 68289026;
        int v8 = 0;
        __int16 v9 = 2082;
        uint64_t v10 = "";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Awareness Disabling wakes\"}", (uint8_t *)&v7, 0x12u);
      }
      a1[22] = INFINITY;
      sub_1001B0AE4((uint64_t)(a1 + 24));
    }
  }
  else if (a1[23] >= a2)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102315150);
    }
    BOOL v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 2050;
      double v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Awareness Wake time is in the past\", \"wakeTime_s\":\"%{public}.09f\"}", (uint8_t *)&v7, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102315150);
      }
    }
    int v6 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 2050;
      double v12 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Awareness Wake time is in the past", "{\"msg%{public}.0s\":\"#Awareness Wake time is in the past\", \"wakeTime_s\":\"%{public}.09f\"}", (uint8_t *)&v7, 0x1Cu);
    }
  }
  else if (vabdd_f64(a1[22], a2) >= a1[14])
  {
    sub_1001165F8((uint64_t)(a1 + 24), a2);
    a1[22] = a2;
  }
}

void sub_10012867C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 40), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CE870);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCachedLocationController::onLocationUpdateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CE870);
    }
    __int16 v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      BOOL v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCachedLocationController::onLocationUpdateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100128858(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100128838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100128858(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v5 = *a3;
  if (*a3 > 13)
  {
    if (v5 == 14 || v5 == 22) {
      return;
    }
  }
  else
  {
    if (v5) {
      BOOL v6 = v5 == 4;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      int v8 = (void *)(a1 + 568);
      *(void *)uint64_t buf = CFAbsoluteTimeGetCurrent();
      sub_1001298A4(v8, a4, (double *)buf);
      return;
    }
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022CE8C8);
  }
  uint64_t v10 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v11 = *a3;
    *(_DWORD *)uint64_t buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLC: Received unknown notification, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022CE8C8);
    }
    double v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCachedLocationController::onLocationUpdateNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

void sub_100128A54(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C1FB0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiLocationProvider::onCellLocationProviderNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C1FB0);
    }
    __int16 v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      BOOL v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiLocationProvider::onCellLocationProviderNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100128C28(a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100128C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100128C28(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
  }
  uint64_t v6 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    sub_10005BA4C();
    uint64_t v7 = (SBYTE7(v43) & 0x80u) == 0 ? &__p : (long long *)__p;
    *(_DWORD *)uint64_t buf = 136380675;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "@WifiLogic, Cell location notification received, %{private}s", buf, 0xCu);
    if (SBYTE7(v43) < 0) {
      operator delete((void *)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C1FD0);
    }
    sub_10005BA4C();
    if (v39 >= 0) {
      BOOL v17 = buf;
    }
    else {
      BOOL v17 = *(unsigned char **)buf;
    }
    int v40 = 136380675;
    uint64_t v41 = v17;
    __int16 v18 = (char *)_os_log_send_and_compose_impl();
    if (v39 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiLocationProvider::onCellLocationProviderNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v18);
    if (v18 != (char *)&__p) {
      free(v18);
    }
  }
  long long v8 = a4[7];
  long long v48 = a4[6];
  long long v49 = v8;
  v50[0] = a4[8];
  *(_OWORD *)((char *)v50 + 12) = *(long long *)((char *)a4 + 140);
  long long v9 = a4[3];
  long long v44 = a4[2];
  long long v45 = v9;
  long long v10 = a4[5];
  long long v46 = a4[4];
  long long v47 = v10;
  long long v11 = a4[1];
  long long __p = *a4;
  long long v43 = v11;
  memcpy(v51, a4 + 10, sizeof(v51));
  uint64_t v12 = *((void *)a4 + 85);
  uint64_t v13 = *((void *)a4 + 86);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)&v37[13] = *(void *)((char *)a4 + 789);
  long long v14 = *(long long *)((char *)a4 + 776);
  long long v36 = *(long long *)((char *)a4 + 760);
  *(_OWORD *)uint64_t v37 = v14;
  long long v15 = *(long long *)((char *)a4 + 712);
  long long v32 = *(long long *)((char *)a4 + 696);
  long long v33 = v15;
  long long v16 = *(long long *)((char *)a4 + 728);
  long long v35 = *(long long *)((char *)a4 + 744);
  long long v34 = v16;
  long long v20 = __p;
  long long v21 = v43;
  long long v24 = v46;
  long long v25 = v47;
  long long v22 = v44;
  long long v23 = v45;
  *(_OWORD *)((char *)v28 + 12) = *(_OWORD *)((char *)v50 + 12);
  v28[0] = v50[0];
  long long v26 = v48;
  long long v27 = v49;
  memcpy(v29, v51, sizeof(v29));
  uint64_t v30 = v12;
  uint64_t v31 = v13;
  int v19 = 16;
  sub_1000E0AA0(a1);
  sub_1000D7B80((uint64_t)&v19);
}

void sub_100128F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000D7B80((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100128F7C(void *a1, int a2, uint64_t a3, double *a4)
{
  double v7 = *a4;
  double v8 = *((double *)a1 + 6);
  double v9 = vabdd_f64(*a4, *((double *)a1 + 7));
  if ((a2 & 1) != 0 || v9 >= 2400.0)
  {
    memset(v24, 0, sizeof(v24));
    int v10 = (*(uint64_t (**)(void))(*(void *)*a1 + 16))();
    if (v10)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10230C470);
      }
      long long v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v12 = a1[7];
        uint64_t v13 = *(void *)((char *)a1 + 68);
        uint64_t v14 = *(void *)((char *)a1 + 76);
        *(_DWORD *)uint64_t buf = 67110144;
        *(_DWORD *)&uint8_t buf[4] = a2;
        __int16 v35 = 1024;
        *(_DWORD *)long long v36 = 1;
        *(_WORD *)&v36[4] = 2048;
        *(void *)&v36[6] = v12;
        __int16 v37 = 2048;
        uint64_t v38 = v13;
        __int16 v39 = 2048;
        *(void *)&long long v40 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "isStart,%d,manifest,%d,LastTime,%lf,LastLat,%.05lf,LastLon,%.05lf", buf, 0x2Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10230C470);
        }
        uint64_t v18 = a1[7];
        uint64_t v19 = *(void *)((char *)a1 + 68);
        uint64_t v20 = *(void *)((char *)a1 + 76);
        *(_DWORD *)long long v25 = 67110144;
        *(_DWORD *)&v25[4] = a2;
        __int16 v26 = 1024;
        int v27 = 1;
        __int16 v28 = 2048;
        uint64_t v29 = v18;
        __int16 v30 = 2048;
        uint64_t v31 = v19;
        __int16 v32 = 2048;
        uint64_t v33 = v20;
        long long v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTransitTilePreloader::makeRequestIfNeeded(BOOL, const CLDaemonLocation &, const CFAbsoluteTime &)", "%s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
      }
      if (!a2)
      {
        if (*(double *)(a3 + 20) > 0.0)
        {
          sub_1000F1268((double *)a1 + 1, a3, (uint64_t)(a1 + 8));
          if ((v9 >= 259200.0 || v17 > 150000.0) && *((double *)a1 + 7) == 0.0) {
            a1[7] = *(void *)a4;
          }
        }
        goto LABEL_30;
      }
      if (vabdd_f64(v7, v8) >= 259200.0)
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10230C470);
        }
        long long v15 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Request region preload manifest, update", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_24;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419630 == -1)
        {
LABEL_37:
          *(_WORD *)long long v25 = 0;
          long long v22 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTransitTilePreloader::makeRequestIfNeeded(BOOL, const CLDaemonLocation &, const CFAbsoluteTime &)", "%s\n", v22);
          if (v22 != (char *)buf) {
            free(v22);
          }
LABEL_24:
          sub_10103E950(a1, v10 ^ 1, a4);
          goto LABEL_30;
        }
LABEL_39:
        dispatch_once(&qword_102419630, &stru_10230C470);
        goto LABEL_37;
      }
    }
    else if (a2)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10230C470);
      }
      long long v16 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Request region preload manifest, no manifest", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_24;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1) {
        goto LABEL_37;
      }
      goto LABEL_39;
    }
LABEL_30:
    *(void *)uint64_t buf = v24;
    sub_100129808((void ***)buf);
  }
}

void sub_1001297C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31)
{
  a31 = (void **)&a20;
  sub_100129808(&a31);
  _Unwind_Resume(a1);
}

void sub_100129808(void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    sub_10003203C((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

id sub_10012985C(uint64_t a1, uint64_t a2)
{
  id v3 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLTilesManager"];

  return _[v3 syncgetRegionPreloadManifest:a2];
}

void sub_1001298A4(void *a1, uint64_t a2, double *a3)
{
}

void sub_1001298B4(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 436);
  uint64_t v3 = *(unsigned int *)(a2 + 96);
  if (v3 > 0xD)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    int v5 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_ERROR))
    {
      int v6 = *(_DWORD *)(a2 + 96);
      *(_DWORD *)uint64_t buf = 67109120;
      int v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "The location type is undefined (%d).", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      double v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLLocationSubscription::updateLocationUpdateSessionWithLocation(const CLClientLocation &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    ++*(_DWORD *)(a1 + 496);
  }
  else
  {
    ++*(_DWORD *)(a1 + 4 * v3 + 440);
  }
  if (*(unsigned char *)(a1 + 58)) {
    ++*(_DWORD *)(a1 + 500);
  }
}

void sub_100129AB8(uint64_t a1)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023192B0);
  }
  int v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 24);
    int v14 = 68289538;
    int v15 = 0;
    __int16 v16 = 2082;
    double v17 = "";
    __int16 v18 = 2114;
    uint64_t v19 = v3;
    __int16 v20 = 2050;
    uint64_t v21 = sub_1000E9360(a1);
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"stopLocation_nl\", \"Client\":%{public, location:escape_only}@, \"DC\":\"%{public}p\"}", (uint8_t *)&v14, 0x26u);
  }
  if (*(unsigned char *)(a1 + 241))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    uint64_t v4 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = *(void *)(a1 + 24);
      int v14 = 68289282;
      int v15 = 0;
      __int16 v16 = 2082;
      double v17 = "";
      __int16 v18 = 2114;
      uint64_t v19 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BATCH: stop because stopping location for\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);
    }
    sub_10122C1BC(a1, 12);
  }
  sub_10012A200(a1);
  sub_10012B784(a1, 0xFFFFFFFFLL);
  *(void *)(a1 + 208) = 0x7FEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 196) = -1;
  sub_100129DE0(a1, 2);
  sub_100129DE0(a1, 1);
  sub_100129DE0(a1, 4);
  sub_100129DE0(a1, 39);
  sub_100129DE0(a1, 5);
  sub_100129DE0(a1, 0);
  sub_100129DE0(a1, 9);
  uint64_t v6 = sub_100129E3C(a1);
  [*(id *)(*(void *)v6 + 16) unregister:*(void *)(*(void *)v6 + 8) forNotification:8];
  uint64_t v7 = sub_100129E3C(a1);
  [*(id *)(*(void *)v7 + 16) unregister:*(void *)(*(void *)v7 + 8) forNotification:17];
  uint64_t v8 = sub_100129E3C(a1);
  [*(id *)(*(void *)v8 + 16) unregister:*(void *)(*(void *)v8 + 8) forNotification:22];
  uint64_t v9 = sub_100129E3C(a1);
  [*(id *)(*(void *)v9 + 16) unregister:*(void *)(*(void *)v9 + 8) forNotification:34];
  uint64_t v10 = sub_100129E3C(a1);
  [*(id *)(*(void *)v10 + 16) unregister:*(void *)(*(void *)v10 + 8) forNotification:35];
  uint64_t v11 = sub_10012B6C4(a1);
  [*(id *)(*(void *)v11 + 16) unregister:*(void *)(*(void *)v11 + 8) forNotification:12];
  sub_10012A2F0(a1);
  sub_10012A228(a1);
  int v13 = *(_DWORD *)(a1 + 184);
  int v12 = *(_DWORD *)(a1 + 188);
  if (v13 >= 5)
  {
    if (v12 == 1) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v12 == 2 || v13 == 2 && v12 == 3) {
LABEL_17:
  }
    sub_10012B52C(a1);
LABEL_18:

  *(void *)(a1 + 216) = 0;
  sub_10012E3E4(a1 + 520);
  sub_10012AC24(a1, 1);
}

id sub_100129DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100129EFC(a1);
  [*(id *)(*(void *)v4 + 16) unregister:*(void *)(*(void *)v4 + 8) forNotification:a2];
  uint64_t v5 = sub_100129E3C(a1);
  uint64_t v7 = *(void *)(*(void *)v5 + 8);
  uint64_t v6 = *(void **)(*(void *)v5 + 16);

  return [v6 unregister:v7 forNotification:a2];
}

uint64_t sub_100129E3C(uint64_t a1)
{
  if (!*(void *)(a1 + 136)) {
    sub_1000067EC();
  }
  return a1 + 136;
}

uint64_t sub_100129EFC(uint64_t a1)
{
  if (!*(void *)(a1 + 144)) {
    sub_10000973C();
  }
  return a1 + 144;
}

void sub_100129FBC(uint64_t a1)
{
  if ((sub_100138A70(a1, 4) & 1) == 0) {
    sub_10012A200(a1);
  }
  unsigned __int8 v2 = [*(id *)(a1 + 16) inUseLevelIsAtLeast:5];
  double v3 = -1.0;
  if ((v2 & 1) == 0)
  {
    if (*(double *)(a1 + 224) != -1.0) {
      goto LABEL_7;
    }
    double v3 = sub_1004BE230();
  }
  *(double *)(a1 + 224) = v3;
LABEL_7:
  sub_10012A228(a1);
  sub_10012A2F0(a1);
  if ([*(id *)(a1 + 16) transientAwareRegistrationResult] - 2 <= 2)
  {
    *(unsigned char *)(a1 + 236) = 0;
    sub_100129AB8(a1);
  }
  uint64_t v4 = *(void *)(a1 + 512);
  if (v4)
  {
    unsigned int v5 = [*(id *)(a1 + 16) inUseLevelIsAtLeast:3];
    if (*(unsigned __int8 *)(v4 + 48) != v5)
    {
      char v6 = v5;
      sub_101228B4C(v4);
      *(unsigned char *)(v4 + 48) = v6;
    }
  }
  if (*(unsigned char *)(a1 + 58) && [*(id *)(a1 + 16) inUseLevelIsAtLeast:5])
  {
    *(unsigned char *)(a1 + 58) = 0;
    double Current = CFAbsoluteTimeGetCurrent();
    *(double *)(a1 + 504) = *(double *)(a1 + 504) + Current - *(double *)(a1 + 64);
    *(void *)(a1 + 64) = 0xBFF0000000000000;
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    uint64_t v8 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 500);
      uint64_t v11 = *(void *)(a1 + 504);
      v13[0] = 68290050;
      v13[1] = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2114;
      uint64_t v17 = v9;
      __int16 v18 = 2050;
      double v19 = Current;
      __int16 v20 = 1026;
      int v21 = v10;
      __int16 v22 = 2050;
      uint64_t v23 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#cblsPowerSaver LossTracking disabled due to App Foregrounding\", \"Client\":%{public, location:escape_only}@, \"endTime\":\"%{public}f\", \"LocationLoss\":%{public}d, \"RuntimeLoss\":\"%{public}f\"}", (uint8_t *)v13, 0x36u);
    }
  }
  sub_10012BA08(a1);
  unsigned int v12 = [*(id *)(a1 + 16) inUseLevelIsAtLeast:5];
  if (v12) {
    sub_10012AFC4(a1, 0);
  }
  [*(id *)(a1 + 96) setBackgrounded:v12 ^ 1];
  sub_10012D358(a1);
}

uint64_t sub_10012A200(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 176))();
}

id sub_10012A228(uint64_t a1)
{
  id result = [*(id *)(a1 + 16) inUseLevelIsAtLeast:3];
  if (*(double *)(a1 + 208) != 1.79769313e308
    && (int v3 = (int)result,
        (id result = [*(id *)(a1 + 176) objectForKeyedSubscript:@"kCLConnectionMessageDesiredAccuracyKey"]) != 0)&& (id result = objc_msgSend(result, "doubleValue"), v3))
  {
    double v5 = v4;
    if (!*(unsigned char *)(a1 + 88) || *(double *)(a1 + 80) != v4)
    {
      id result = [(id)sub_1001A0414(a1) takeAccuracyEnablementAssertionForClient:*(void *)(a1 + 48) withDesiredAccuracy:v4];
      *(double *)(a1 + 80) = v5;
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  else if (*(unsigned char *)(a1 + 88))
  {
    id result = [(id)sub_1001A0414(a1) releaseAccuracyEnablementAssertionForClient:*(void *)(a1 + 48)];
    *(void *)(a1 + 80) = 0x7FF0000000000000;
    *(unsigned char *)(a1 + 88) = 0;
  }
  return result;
}

void sub_10012A2F0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 24) description];
  double v3 = *(double *)(a1 + 208);
  BOOL v4 = v3 != 1.79769313e308 && *(unsigned char *)(a1 + 89) && *(unsigned char *)(a1 + 90) != 0;
  uint64_t v5 = *(unsigned int *)(a1 + 44);
  int v6 = sub_10012A778(a1);
  int v7 = v6;
  if (v4 == (*(void *)(a1 + 96) != 0)) {
    goto LABEL_14;
  }
  if ((v4 & v6) != 1)
  {
    if (!v4)
    {
      uint64_t v18 = sub_1001A02B0(a1, 0);
      id v19 = [*(id *)(a1 + 8) silo];
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      uint64_t v26[2] = sub_10122D168;
      v26[3] = &unk_1022F2100;
      int v27 = v5;
      v26[4] = v2;
      v26[5] = v18;
      [v19 afterInterval:v26 async:1.0];
      uint64_t v11 = "Releasing";
      goto LABEL_15;
    }
LABEL_14:
    uint64_t v11 = "None";
    goto LABEL_15;
  }
  uint64_t v8 = [[CLStatusBarAssertion alloc] initWithPid:v5 name:[*(id *)(a1 + 24) description] queue:[objc_msgSend(*(id *)(a1 + 8), "silo") queue] backgrounded:*[*(double *)(a1 + 224) != -1.0] registration:objc_msgSend(*(id *)(a1 + 16), "registrationResult")];
  uint64_t v9 = sub_1001A02B0(a1, (uint64_t)v8);
  if (v8) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10) {
    sub_101AA88AC();
  }
  uint64_t v11 = "Acquiring";
LABEL_15:
  sub_10012A7A0(a1);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023192B0);
  }
  unsigned int v12 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
  {
    id v13 = [v2 UTF8String];
    __int16 v14 = "N";
    if (*(unsigned char *)(a1 + 89))
    {
      if (*(unsigned char *)(a1 + 90)) {
        int v15 = "Y";
      }
      else {
        int v15 = "N";
      }
    }
    else
    {
      int v15 = "N";
    }
    *(_DWORD *)uint64_t buf = 136316674;
    id v43 = v13;
    __int16 v44 = 1024;
    if (v3 == 1.79769313e308) {
      __int16 v16 = "N";
    }
    else {
      __int16 v16 = "Y";
    }
    int v45 = v5;
    if (v4) {
      uint64_t v17 = "Y";
    }
    else {
      uint64_t v17 = "N";
    }
    __int16 v46 = 2080;
    if (v7) {
      __int16 v14 = "Y";
    }
    long long v47 = v15;
    __int16 v48 = 2080;
    long long v49 = v16;
    __int16 v50 = 2080;
    uint64_t v51 = v17;
    __int16 v52 = 2080;
    uint64_t v53 = v14;
    __int16 v54 = 2080;
    double v55 = v11;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#visibility For %s (PID:%d)  Background:%s  Started:%s  > Needed:%s  Eligible:%s  Action:%s", buf, 0x44u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    id v20 = [v2 UTF8String];
    int v21 = "N";
    if (*(unsigned char *)(a1 + 89))
    {
      if (*(unsigned char *)(a1 + 90)) {
        __int16 v22 = "Y";
      }
      else {
        __int16 v22 = "N";
      }
    }
    else
    {
      __int16 v22 = "N";
    }
    int v28 = 136316674;
    if (v3 == 1.79769313e308) {
      uint64_t v23 = "N";
    }
    else {
      uint64_t v23 = "Y";
    }
    id v29 = v20;
    __int16 v30 = 1024;
    if (v4) {
      long long v24 = "Y";
    }
    else {
      long long v24 = "N";
    }
    int v31 = v5;
    if (v7) {
      int v21 = "Y";
    }
    __int16 v32 = 2080;
    uint64_t v33 = v22;
    __int16 v34 = 2080;
    __int16 v35 = v23;
    __int16 v36 = 2080;
    __int16 v37 = v24;
    __int16 v38 = 2080;
    __int16 v39 = v21;
    __int16 v40 = 2080;
    uint64_t v41 = v11;
    long long v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::updateVisibilityAssertion()", "%s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
  }
}

uint64_t sub_10012A778(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 104))();
}

id sub_10012A7A0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 96);
  if (v2)
  {
    if (*(unsigned char *)(a1 + 56))
    {
      if (*(unsigned char *)(a1 + 91))
      {
LABEL_4:
        uint64_t v3 = 1;
LABEL_10:
        [v2 setDesiredEnablementState:v3];
        goto LABEL_11;
      }
      if (([*(id *)(a1 + 16) isAuthorizedForServiceType:13] & 1) == 0
        && [*(id *)(a1 + 16) inUseLevelIsAtLeast:4])
      {
        id v2 = *(void **)(a1 + 96);
        goto LABEL_4;
      }
      id v2 = *(void **)(a1 + 96);
    }
    uint64_t v3 = 0;
    goto LABEL_10;
  }
LABEL_11:
  int v4 = *(void *)(a1 + 104) != 0;
  id result = [*(id *)(a1 + 96) isEnabled];
  if (v4 != result)
  {
    __p[13] = 0;
    if (result)
    {
      sub_100134750(__p, "Ongoing visibility assertion");
      sub_1010A4C24(a1, (uint64_t)__p, 4);
      operator new();
    }
    id result = *(id *)(a1 + 104);
    *(void *)(a1 + 104) = 0;
    if (result)
    {
      sub_1001AB2CC((uint64_t)result);
      operator delete();
    }
  }
  return result;
}

void sub_10012A8C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_10012A924(uint64_t a1)
{
  if ([*(id *)(a1 + 112) inUseLevelIsAtLeast:5])
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    id v2 = qword_102419528;
    if (!os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG)) {
      return 1;
    }
    uint64_t v3 = *(void *)(a1 + 48);
    int v10 = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    id v13 = "";
    __int16 v14 = 2114;
    uint64_t v15 = v3;
    int v4 = "{\"msg%{public}.0s\":\"Allowing process assertion due to foreground-ish status\", \"ClientKeyPath\":%{public, l"
         "ocation:escape_only}@}";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, v4, (uint8_t *)&v10, 0x1Cu);
    return 1;
  }
  if (sub_1007A6DF8(*(void *)(a1 + 16), a1))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022EA308);
    }
    id v2 = qword_102419528;
    if (!os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG)) {
      return 1;
    }
    uint64_t v5 = *(void *)(a1 + 48);
    int v10 = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    id v13 = "";
    __int16 v14 = 2114;
    uint64_t v15 = v5;
    int v4 = "{\"msg%{public}.0s\":\"Allowing process assertion due to client manager.\", \"ClientKeyPath\":%{public, locatio"
         "n:escape_only}@}";
    goto LABEL_11;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  int v7 = qword_102419528;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 48);
    int v10 = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    id v13 = "";
    __int16 v14 = 2114;
    uint64_t v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Denying process assertion\", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x1Cu);
    return 0;
  }
  return result;
}

void sub_10012AB58(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a1[8];
  if ((v2 & a2) != 0)
  {
    char v3 = a2;
    a1[8] = v2 & ~a2;
    if ((a2 & 0x10) != 0)
    {
      uint64_t v5 = a1[2];
      if ([(id)a1[6] isAuthLimited]) {
        id v6 = sub_1007BEA40(a1[2], a1[6]);
      }
      else {
        id v6 = (id)a1[6];
      }
      sub_1007AD690(v5, (uint64_t)v6, 4);
    }
    if ((v3 & 4) != 0)
    {
      uint64_t v7 = a1[2];
      if ([(id)a1[6] isAuthLimited]) {
        id v8 = sub_1007BEA40(a1[2], a1[6]);
      }
      else {
        id v8 = (id)a1[6];
      }
      sub_1007AD690(v7, (uint64_t)v8, 2);
    }
  }
}

void sub_10012AC24(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 120) &= ~a2;
  if (!objc_opt_class()) {
    return;
  }
  if (!*(void *)(a1 + 112)) {
    goto LABEL_18;
  }
  if (*(_DWORD *)(a1 + 120) == 3)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1023192F0);
    }
    char v3 = qword_102419538;
    if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_20;
    }
    uint64_t v4 = *(void *)(a1 + 24);
    int v5 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)uint64_t buf = 68289538;
    int v22 = 0;
    __int16 v23 = 2082;
    long long v24 = "";
    __int16 v25 = 2114;
    uint64_t v26 = v4;
    __int16 v27 = 1026;
    int v28 = v5;
    id v6 = "{\"msg%{public}.0s\":\"Client is performing batch location, allowing idle sleep.\", \"Client\":%{public, locati"
         "on:escape_only}@, \"pid\":%{public}u}";
    goto LABEL_17;
  }
  if ((*(_DWORD *)(a1 + 120) & 3) != 2) {
    goto LABEL_13;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1023192F0);
  }
  uint64_t v7 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 24);
    int v9 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)uint64_t buf = 68289538;
    int v22 = 0;
    __int16 v23 = 2082;
    long long v24 = "";
    __int16 v25 = 2114;
    uint64_t v26 = v8;
    __int16 v27 = 1026;
    int v28 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Client is performing batch without location.\", \"Client\":%{public, location:escape_only}@, \"pid\":%{public}u}", buf, 0x22u);
LABEL_13:
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1023192F0);
    }
  }
  char v3 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(void *)(a1 + 24);
    int v11 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)uint64_t buf = 68289538;
    int v22 = 0;
    __int16 v23 = 2082;
    long long v24 = "";
    __int16 v25 = 2114;
    uint64_t v26 = v10;
    __int16 v27 = 1026;
    int v28 = v11;
    id v6 = "{\"msg%{public}.0s\":\"Client is not performing batch location, preventing task suspend.\", \"Client\":%{public"
         ", location:escape_only}@, \"pid\":%{public}u}";
LABEL_17:
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, v6, buf, 0x22u);
LABEL_18:
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1023192F0);
    }
  }
LABEL_20:
  __int16 v12 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = *(unsigned int *)(a1 + 120);
    int v14 = *(unsigned __int8 *)(a1 + 89);
    if (*(unsigned char *)(a1 + 89)) {
      int v14 = *(unsigned __int8 *)(a1 + 90);
    }
    *(_DWORD *)uint64_t buf = 68289538;
    int v22 = 0;
    __int16 v23 = 2082;
    long long v24 = "";
    __int16 v25 = 2050;
    uint64_t v26 = v13;
    __int16 v27 = 1026;
    int v28 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"release process assertion\", \"fProcessAssertionReason\":%{public, location:CLClientProcessAssertionReasons}lld, \"backgroundLocationDesired\":%{public}hhd}", buf, 0x22u);
  }
  if (!*(_DWORD *)(a1 + 120) || !*(unsigned char *)(a1 + 89) || !*(unsigned char *)(a1 + 90))
  {
    uint64_t v15 = *(void *)(a1 + 112);
    uint64_t v16 = *(void *)(a1 + 24);
    *(void *)(a1 + 112) = 0;
    int v17 = *(_DWORD *)(a1 + 44);
    id v18 = [*(id *)(a1 + 8) silo];
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    _DWORD v19[2] = sub_1001788F0;
    v19[3] = &unk_1022F2100;
    int v20 = v17;
    v19[4] = v15;
    v19[5] = v16;
    [v18 afterInterval:v19 async:1.0];
  }
}

void sub_10012AFC4(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 120) |= a2;
  if (objc_opt_class())
  {
    uint64_t v3 = *(void *)(a1 + 112);
    if (*(_DWORD *)(a1 + 120) && *(unsigned char *)(a1 + 89))
    {
      uint64_t v4 = *(void *)(a1 + 112);
      if (*(unsigned char *)(a1 + 90))
      {
        int v5 = sub_10012A778(a1);
        uint64_t v4 = *(void *)(a1 + 112);
        if (v5)
        {
          if (v4) {
            goto LABEL_22;
          }
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1023192F0);
          }
          id v6 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
          {
            int v7 = *(_DWORD *)(a1 + 44);
            uint64_t v8 = *(void *)(a1 + 24);
            *(_DWORD *)uint64_t buf = 68289538;
            int v28 = 0;
            __int16 v29 = 2082;
            __int16 v30 = "";
            __int16 v31 = 1026;
            *(_DWORD *)__int16 v32 = v7;
            *(_WORD *)&v32[4] = 2114;
            *(void *)&v32[6] = v8;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"initializing process assertion to support background location for client\", \"pid\":%{public}u, \"Client\":%{public, location:escape_only}@}", buf, 0x22u);
          }
          __int16 v35 = +[RBSDomainAttribute attributeWithDomain:@"com.apple.locationd" name:@"Location"];
          id v9 = [objc_alloc((Class)RBSAssertion) initWithExplanation:@"Location subscription" target:[RBSTarget targetWithPid:](RBSTarget, "targetWithPid:", *(unsigned int *)(a1 + 44)) attributes:[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v35, 1)];
          *(void *)(a1 + 112) = v9;
          uint64_t v26 = 0;
          if (([v9 acquireWithError:&v26] & 1) == 0)
          {
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1023192F0);
            }
            uint64_t v10 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
            {
              int v11 = *(_DWORD *)(a1 + 44);
              uint64_t v12 = *(void *)(a1 + 24);
              *(_DWORD *)uint64_t buf = 68289794;
              int v28 = 0;
              __int16 v29 = 2082;
              __int16 v30 = "";
              __int16 v31 = 1026;
              *(_DWORD *)__int16 v32 = v11;
              *(_WORD *)&v32[4] = 2114;
              *(void *)&v32[6] = v12;
              __int16 v33 = 2114;
              uint64_t v34 = v26;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't initialize process assertion for client\", \"pid\":%{public}u, \"Client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x2Cu);
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1023192F0);
              }
            }
            uint64_t v13 = qword_102419538;
            if (os_signpost_enabled((os_log_t)qword_102419538))
            {
              int v14 = *(_DWORD *)(a1 + 44);
              uint64_t v15 = *(void *)(a1 + 24);
              *(_DWORD *)uint64_t buf = 68289794;
              int v28 = 0;
              __int16 v29 = 2082;
              __int16 v30 = "";
              __int16 v31 = 1026;
              *(_DWORD *)__int16 v32 = v14;
              *(_WORD *)&v32[4] = 2114;
              *(void *)&v32[6] = v15;
              __int16 v33 = 2114;
              uint64_t v34 = v26;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't initialize process assertion for client", "{\"msg%{public}.0s\":\"Couldn't initialize process assertion for client\", \"pid\":%{public}u, \"Client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x2Cu);
            }
          }
          uint64_t v4 = *(void *)(a1 + 112);
        }
      }
    }
    else
    {
      uint64_t v4 = *(void *)(a1 + 112);
    }
    if (!v4) {
      goto LABEL_37;
    }
LABEL_22:
    if (*(_DWORD *)(a1 + 120) == 3)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1023192F0);
      }
      uint64_t v16 = qword_102419538;
      if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_37;
      }
      int v17 = *(_DWORD *)(a1 + 44);
      uint64_t v18 = *(void *)(a1 + 24);
      *(_DWORD *)uint64_t buf = 68289538;
      int v28 = 0;
      __int16 v29 = 2082;
      __int16 v30 = "";
      __int16 v31 = 1026;
      *(_DWORD *)__int16 v32 = v17;
      *(_WORD *)&v32[4] = 2114;
      *(void *)&v32[6] = v18;
      id v19 = "{\"msg%{public}.0s\":\"Client is performing batch location, allowing idle sleep.\", \"pid\":%{public}u, \"Cl"
            "ient\":%{public, location:escape_only}@}";
      goto LABEL_36;
    }
    uint64_t v20 = qword_102419530;
    if ((*(_DWORD *)(a1 + 120) & 3) == 2)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1023192F0);
      }
      int v21 = qword_102419538;
      if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      uint64_t v22 = *(void *)(a1 + 24);
      int v23 = *(_DWORD *)(a1 + 44);
      *(_DWORD *)uint64_t buf = 68289538;
      int v28 = 0;
      __int16 v29 = 2082;
      __int16 v30 = "";
      __int16 v31 = 2114;
      *(void *)__int16 v32 = v22;
      *(_WORD *)&v32[8] = 1026;
      *(_DWORD *)&v32[10] = v23;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Client is performing batch without location.\", \"Client\":%{public, location:escape_only}@, \"pid\":%{public}u}", buf, 0x22u);
      uint64_t v20 = qword_102419530;
    }
    if (v20 != -1) {
      dispatch_once(&qword_102419530, &stru_1023192F0);
    }
LABEL_34:
    uint64_t v16 = qword_102419538;
    if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_37;
    }
    int v24 = *(_DWORD *)(a1 + 44);
    uint64_t v25 = *(void *)(a1 + 24);
    *(_DWORD *)uint64_t buf = 68289538;
    int v28 = 0;
    __int16 v29 = 2082;
    __int16 v30 = "";
    __int16 v31 = 1026;
    *(_DWORD *)__int16 v32 = v24;
    *(_WORD *)&v32[4] = 2114;
    *(void *)&v32[6] = v25;
    id v19 = "{\"msg%{public}.0s\":\"Client is not performing batch location, preventing task suspend.\", \"pid\":%{public}u"
          ", \"Client\":%{public, location:escape_only}@}";
LABEL_36:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, v19, buf, 0x22u);
LABEL_37:
    if ((v3 != 0) != (*(void *)(a1 + 112) != 0)) {
      sub_1010A4BFC(a1);
    }
  }
}

void sub_10012B52C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2)
  {
    [*(id *)(v2 + 16) unregister:*(void *)(v2 + 8) forNotification:0];
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    uint64_t v3 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *(void *)(a1 + 24);
      int v10 = 68289282;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2114;
      uint64_t v15 = v4;
      int v5 = "{\"msg%{public}.0s\":\"PAUSE: Client unregistered for autopause notifications\", \"Client\":%{public, locatio"
           "n:escape_only}@}";
      id v6 = v3;
      os_log_type_t v7 = OS_LOG_TYPE_DEBUG;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v6, v7, v5, (uint8_t *)&v10, 0x1Cu);
    }
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    uint64_t v8 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 24);
      int v10 = 68289282;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2114;
      uint64_t v15 = v9;
      int v5 = "{\"msg%{public}.0s\":\"#Warning PAUSE: Unregistering for autopause notification when client does not exist\","
           " \"Client\":%{public, location:escape_only}@}";
      id v6 = v8;
      os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_10;
    }
  }
  *(unsigned char *)(a1 + 240) = 0;
}

uint64_t sub_10012B6C4(uint64_t a1)
{
  if (!*(void *)(a1 + 152)) {
    sub_1001AE6FC();
  }
  return a1 + 152;
}

void sub_10012B784(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 200) != a2)
  {
    if (a2 != -1)
    {
      sub_100134750(__p, "com.apple.locationd.spectator");
      char v4 = sub_1010A4BAC(a1);
      char v5 = v4;
      if (v12 < 0)
      {
        operator delete(*(void **)__p);
        if ((v5 & 1) == 0) {
          return;
        }
      }
      else if ((v4 & 1) == 0)
      {
        return;
      }
    }
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    id v6 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(a1 + 24);
      *(_DWORD *)long long __p = 138543618;
      *(void *)&__p[4] = v7;
      __int16 v10 = 1026;
      int v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "client '%{public}@' updating RhythmicGnss with CLRhythmicGnssWakeMode, %{public}.1d", __p, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::updateRhythmicGNSS(CLRhythmicGnssWakeMode)", "%s\n", v8);
      if (v8 != __p) {
        free(v8);
      }
    }
    [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLGnssProvider"), "addRhythmicGnssClient:", a2];
    [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLGnssProvider"), "removeRhythmicGnssClient:", *(unsigned int *)(a1 + 200)];
    *(_DWORD *)(a1 + 200) = a2;
  }
}

void sub_10012B9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012BA08(uint64_t a1)
{
  sub_100134750(__p, "kCLConnectionMessageLocation");
  char v2 = sub_10012E364(a1);
  char v3 = v2;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((v3 & 1) == 0) {
      return;
    }
  }
  else if ((v2 & 1) == 0)
  {
    return;
  }
  v115[0] = _NSConcreteStackBlock;
  v115[1] = 3221225472;
  __int16 v116 = sub_10122D3F4;
  uint64_t v117 = &unk_1022A3020;
  uint64_t v118 = a1;
  if (sub_100138A70(a1, 4))
  {
    [*(id *)(a1 + 576) invalidate];

    *(void *)(a1 + 576) = 0;
    if (*(unsigned char *)(a1 + 236))
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      char v4 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(a1 + 24);
        *(_DWORD *)long long __p = 138543362;
        *(void *)&__p[4] = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Client '%{public}@' paused, not starting location", __p, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1023192B0);
        }
        uint64_t v6 = *(void *)(a1 + 24);
        *(_DWORD *)double v119 = 138543362;
        *(void *)&v119[4] = v6;
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::startLocation_nl()", "%s\n", v7);
        if (v7 != __p) {
          free(v7);
        }
      }
      return;
    }
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    uint64_t v8 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 24);
      uint64_t v10 = sub_1000E9360(a1);
      *(void *)long long __p = 68289538;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = "";
      *(_WORD *)&unsigned char __p[18] = 2114;
      *(void *)&__p[20] = v9;
      __int16 v127 = 2050;
      *(void *)int v128 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"client authorized for location; starting shortly\", \"Client\":%{public, location:escape_"
        "only}@, \"DC\":\"%{public}p\"}",
        __p,
        0x26u);
    }
    sub_1001978F0(a1, 16);
    double v113 = 0.0;
    if ([*(id *)(a1 + 176) objectForKeyedSubscript:@"kCLConnectionMessageDesiredAccuracyKey"]) {
      [objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", @"kCLConnectionMessageDesiredAccuracyKey") doubleValue];
    }
    else {
      double v11 = -1.0;
    }
    double v113 = v11;
    if ([*(id *)(a1 + 176) objectForKeyedSubscript:@"kCLConnectionMessageDistanceFilterKey"])
    {
      [objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", @"kCLConnectionMessageDistanceFilterKey") doubleValue];
      double v17 = v16;
    }
    else
    {
      double v17 = -1.0;
    }
    unsigned int v18 = [[*(id *)(a1 + 176) objectForKeyedSubscript:@"kCLConnectionMessageDynamicAccuracyReductionKey"] BOOLValue];
    unsigned int v19 = [[*(id *)(a1 + 176) objectForKeyedSubscript:@"kCLConnectionMessageAlteredAccessoryLocationsKey"] BOOLValue];
    if ([*(id *)(a1 + 176) objectForKeyedSubscript:@"kCLConnectionMessageActivityTypeKey"]) {
      unsigned int v20 = [[objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", @"kCLConnectionMessageActivityTypeKey") intValue];
    }
    else {
      unsigned int v20 = 0;
    }
    if (v17 >= 0.0) {
      double v21 = v17;
    }
    else {
      double v21 = -1.0;
    }
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    uint64_t v22 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = sub_1000E9360(a1);
      uint64_t v24 = *(void *)(a1 + 24);
      *(void *)long long __p = 68291330;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = "";
      *(_WORD *)&unsigned char __p[18] = 2050;
      *(void *)&__p[20] = a1;
      __int16 v127 = 2050;
      *(void *)int v128 = v23;
      *(_WORD *)&v128[8] = 2114;
      *(void *)&v128[10] = v24;
      *(_WORD *)&v128[18] = 2050;
      double v129 = v113;
      __int16 v130 = 2050;
      double v131 = v21;
      __int16 v132 = 1026;
      int v133 = 0;
      __int16 v134 = 1026;
      unsigned int v135 = v18;
      __int16 v136 = 1026;
      unsigned int v137 = v19;
      __int16 v138 = 1026;
      unsigned int v139 = v20;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocationSubcription #pwrlog authorized client subscribing\", \"this\":\"%{public}p\", \"DC\":\"%{public}p\", \"ClientKeyPath\":%{public, location:escape_only}@, \"DesiredAccuracy\":\"%{public}f\", \"DistanceFilter\":\"%{public}f\", \"OperatingMode\":%{public}d, \"DynamicAccuracyReductionEnabled\":%{public}d, \"AllowsAlteredAccessoryLocations\":%{public}d, \"ActivityType\":%{public}d}", __p, 0x5Cu);
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023192D0);
    }
    uint64_t v25 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = *(void *)(a1 + 24);
      *(_DWORD *)long long __p = 138543618;
      *(void *)&__p[4] = v26;
      *(_WORD *)&unsigned char __p[12] = 2050;
      *(double *)&__p[14] = v113;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "@ClxClient, register, %{public}@, accuracy, %{public}.1lf", __p, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023192D0);
      }
      uint64_t v92 = *(void *)(a1 + 24);
      *(_DWORD *)double v119 = 138543618;
      *(void *)&v119[4] = v92;
      *(_WORD *)&v119[12] = 2050;
      *(double *)&v119[14] = v113;
      __int16 v93 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::startLocation_nl()", "%s\n", v93);
      if (v93 != __p) {
        free(v93);
      }
    }
    if (v113 == 2147483640.0)
    {
      sub_10012B784(a1, 1);
    }
    else
    {
      if (v113 != 2147483640.0)
      {
        sub_10012B784(a1, 0xFFFFFFFFLL);
        double v29 = v113;
        if (v113 >= 100.0)
        {
          if (v113 >= 1000.0)
          {
            if (v113 < 6378135.0)
            {
              char v30 = 0;
              int v31 = 1;
              uint64_t v32 = 2;
              goto LABEL_71;
            }
            if (v113 < 6383135.0)
            {
              uint64_t v32 = v113 == 6380001.0;
              int v31 = 1;
              char v30 = 1;
              goto LABEL_71;
            }
LABEL_57:
            sub_100134750(__p, "com.apple.locationd.spectator");
            int v27 = sub_1010A4BAC(a1);
            int v28 = v27;
            if ((__p[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)__p);
              if (v28) {
                goto LABEL_59;
              }
            }
            else if (v27)
            {
LABEL_59:
              double v29 = v113;
              if (v113 == 2147483650.0)
              {
                char v30 = 0;
                int v31 = 1;
                uint64_t v32 = 4;
                goto LABEL_71;
              }
              if (v113 == 2147483650.0)
              {
                char v30 = 0;
                int v31 = 1;
                uint64_t v32 = 5;
                goto LABEL_71;
              }
              if (v113 == 2147483640.0)
              {
                char v30 = 0;
                int v31 = 1;
                uint64_t v32 = 22;
                goto LABEL_71;
              }
              if (v113 == 2147483640.0)
              {
                *(_DWORD *)long long __p = 3600;
                *(_WORD *)&__p[4] = 257;
                *(void *)&__p[8] = "bundle";
                sub_10012B6C4(a1);
                sub_1005E05AC();
              }
              if (v113 == 2147483640.0)
              {
                char v30 = 0;
                int v31 = 1;
                uint64_t v32 = 39;
LABEL_71:
                *(unsigned char *)(a1 + 57) = v30 | [*(id *)(a1 + 16) isAuthorizedForServiceType:12 v29] ^ 1;
                if (v32)
                {
                  sub_100129DE0(a1, 0);
                  if (*(unsigned char *)(a1 + 241))
                  {
                    if (qword_102419520 != -1) {
                      dispatch_once(&qword_102419520, &stru_1023192B0);
                    }
                    __int16 v39 = qword_102419528;
                    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v40 = *(void *)(a1 + 24);
                      *(void *)long long __p = 68289282;
                      *(_WORD *)&__p[8] = 2082;
                      *(void *)&__p[10] = "";
                      *(_WORD *)&unsigned char __p[18] = 2114;
                      *(void *)&__p[20] = v40;
                      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BATCH: stop because accuracy changed\", \"Client\":%{public, location:escape_only}@}", __p, 0x1Cu);
                    }
                    sub_10122C1BC(a1, 13);
                  }
                  if (v32 != 1)
                  {
                    sub_100129DE0(a1, 1);
                    if (v32 != 2)
                    {
                      sub_100129DE0(a1, 2);
                      if (v32 != 4)
                      {
                        sub_100129DE0(a1, 4);
                        if (v32 != 5)
                        {
                          sub_100129DE0(a1, 5);
                          if (v32 == 22)
                          {
LABEL_89:
                            sub_100129DE0(a1, 39);
LABEL_90:
                            if (!v31)
                            {
                              sub_10012D234((id **)(a1 + 512), 0);
                              return;
                            }
                            uint64_t v42 = (uint64_t *)(a1 + 512);
                            if (sub_10012D284(a1))
                            {
                              sub_10012D234((id **)(a1 + 512), 0);
                            }
                            else
                            {
                              uint64_t v43 = *v42;
                              if (!*v42)
                              {
                                *(void *)double v119 = [*(id *)(a1 + 24) legacyClientKey];
                                sub_100016E74();
                              }
                              if (*(double *)(v43 + 40) != v113)
                              {
                                sub_1012289C0(*v42);
                                *(double *)(v43 + 40) = v113;
                              }
                            }
                            if (qword_102419520 != -1) {
                              dispatch_once(&qword_102419520, &stru_1023192B0);
                            }
                            __int16 v44 = qword_102419528;
                            if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
                            {
                              int v45 = sub_10008A168(v32);
                              *(_DWORD *)long long __p = 67109634;
                              *(_DWORD *)&__p[4] = v32;
                              *(_WORD *)&__p[8] = 2080;
                              *(void *)&__p[10] = v45;
                              *(_WORD *)&unsigned char __p[18] = 2048;
                              *(double *)&__p[20] = v113;
                              _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "register for notification, %d, %s, desiredAccuracy, %.1f", __p, 0x1Cu);
                            }
                            if (sub_10013D1A0(115, 2))
                            {
                              bzero(__p, 0x65CuLL);
                              if (qword_102419520 != -1) {
                                dispatch_once(&qword_102419520, &stru_1023192B0);
                              }
                              *(_DWORD *)double v119 = 67109634;
                              *(_DWORD *)&v119[4] = v32;
                              *(_WORD *)&v119[8] = 2080;
                              *(void *)&v119[10] = sub_10008A168(v32);
                              *(_WORD *)&v119[18] = 2048;
                              *(double *)&v119[20] = v113;
                              double v94 = (char *)_os_log_send_and_compose_impl();
                              sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::startLocation_nl()", "%s\n", v94);
                              if (v94 != __p) {
                                free(v94);
                              }
                            }
                            *(double *)(a1 + 304) = v113;
                            *(CFAbsoluteTime *)(a1 + 208) = CFAbsoluteTimeGetCurrent();
                            *(_DWORD *)(a1 + 196) = v32;
                            unint64_t v108 = 0xBFF0000000000000;
                            double v109 = v21;
                            __int16 v110 = 0;
                            int v111 = 0;
                            int v112 = 0;
                            sub_10012D2AC(a1, v32);
                            sub_10012A2F0(a1);
                            sub_10012A228(a1);
                            if (*(unsigned char *)(a1 + 241) && v21 > 0.0)
                            {
                              if (qword_102419520 != -1) {
                                dispatch_once(&qword_102419520, &stru_1023192B0);
                              }
                              __int16 v46 = qword_102419528;
                              if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
                              {
                                uint64_t v47 = *(void *)(a1 + 24);
                                *(void *)long long __p = 68289282;
                                *(_WORD *)&__p[8] = 2082;
                                *(void *)&__p[10] = "";
                                *(_WORD *)&unsigned char __p[18] = 2114;
                                *(void *)&__p[20] = v47;
                                _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BATCH: stop because distance filtered\", \"Client\":%{public, location:escape_only}@}", __p, 0x1Cu);
                              }
                              sub_10122C1BC(a1, 14);
                            }
                            if (*(unsigned char *)(a1 + 57))
                            {
                              uint64_t v48 = sub_100129E3C(a1);
                              [*(id *)(*(void *)v48 + 16) unregister:*(void *)(*(void *)v48 + 8) forNotification:8];
                              uint64_t v49 = sub_100129E3C(a1);
                              [*(id *)(*(void *)v49 + 16) unregister:*(void *)(*(void *)v49 + 8) forNotification:17];
                              uint64_t v50 = sub_100129E3C(a1);
                              [*(id *)(*(void *)v50 + 16) unregister:*(void *)(*(void *)v50 + 8) forNotification:34];
                              uint64_t v51 = sub_100129E3C(a1);
                              [*(id *)(*(void *)v51 + 16) unregister:*(void *)(*(void *)v51 + 8) forNotification:35];
                              BOOL v52 = 0;
                            }
                            else
                            {
                              uint64_t v53 = sub_100129E3C(a1);
                              uint64_t v55 = *(void *)(*(void *)v53 + 8);
                              __int16 v54 = *(void **)(*(void *)v53 + 16);
                              if (v113 >= -1.0) {
                                [v54 unregister:v55 forNotification:8];
                              }
                              else {
                                [v54 register:v55 forNotification:8 registrationInfo:0];
                              }
                              BOOL v52 = v113 < 100.0
                                 && (*(unsigned __int8 *)(a1 + 194) | *(unsigned __int8 *)(a1 + 193)) != 0;
                              uint64_t v57 = sub_100129E3C(a1);
                              uint64_t v59 = *(void *)(*(void *)v57 + 8);
                              uint64_t v58 = *(void **)(*(void *)v57 + 16);
                              if (v52) {
                                [v58 register:v59 forNotification:17 registrationInfo:0];
                              }
                              else {
                                [v58 unregister:v59 forNotification:17];
                              }
                              sub_1001A01E8(a1, v113 <= -1.0);
                              int v60 = *(_DWORD *)(a1 + 232);
                              BOOL v61 = (v60 == 4 || v60 == 2)
                                 && ([*(id *)(a1 + 16) inUseLevelIsAtLeast:5] & 1) != 0;
                              sub_1001A024C(a1, v61);
                            }
                            __asm { FMOV            V0.2D, #-1.0 }
                            long long v104 = _Q0;
                            __int16 v105 = 0;
                            int v106 = 0;
                            int v107 = 0;
                            sub_10012D2AC(a1, 9);
                            if (qword_102419520 != -1) {
                              dispatch_once(&qword_102419520, &stru_1023192B0);
                            }
                            uint64_t v66 = qword_102419528;
                            if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
                            {
                              uint64_t v67 = *(void *)(a1 + 24);
                              int v68 = *(_DWORD *)(a1 + 44);
                              uint64_t v69 = sub_1000E9360(a1);
                              int v70 = *(unsigned __int8 *)(a1 + 193);
                              *(_DWORD *)long long __p = 138413570;
                              *(void *)&__p[4] = v67;
                              *(_WORD *)&unsigned char __p[12] = 1024;
                              *(_DWORD *)&__p[14] = v68;
                              *(_WORD *)&unsigned char __p[18] = 2048;
                              *(void *)&__p[20] = v69;
                              __int16 v127 = 1024;
                              *(_DWORD *)int v128 = v70;
                              *(_WORD *)&v128[4] = 2048;
                              *(double *)&v128[6] = v113;
                              *(_WORD *)&v128[14] = 1024;
                              *(_DWORD *)&v128[16] = v52;
                              _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "CLMM,Client,'%@',pid,%u,DC,%p,allowsMapCorrection,%d,desiredAccuracy,%lf,kNotificationMapMatching,%d", __p, 0x32u);
                            }
                            if (sub_10013D1A0(115, 2))
                            {
                              bzero(__p, 0x65CuLL);
                              if (qword_102419520 != -1) {
                                dispatch_once(&qword_102419520, &stru_1023192B0);
                              }
                              uint64_t v95 = *(void *)(a1 + 24);
                              int v96 = *(_DWORD *)(a1 + 44);
                              uint64_t v97 = sub_1000E9360(a1);
                              int v98 = *(unsigned __int8 *)(a1 + 193);
                              *(_DWORD *)double v119 = 138413570;
                              *(void *)&v119[4] = v95;
                              *(_WORD *)&v119[12] = 1024;
                              *(_DWORD *)&v119[14] = v96;
                              *(_WORD *)&v119[18] = 2048;
                              *(void *)&v119[20] = v97;
                              __int16 v120 = 1024;
                              int v121 = v98;
                              __int16 v122 = 2048;
                              double v123 = v113;
                              __int16 v124 = 1024;
                              BOOL v125 = v52;
                              __int16 v99 = (char *)_os_log_send_and_compose_impl();
                              sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::startLocation_nl()", "%s\n", v99);
                              if (v99 != __p) {
                                free(v99);
                              }
                            }

                            *(void *)(a1 + 216) = 0;
                            if (v17 > 0.0 || v113 >= 1000.0 && v113 <= 6383135.0)
                            {
                              if (qword_102419520 != -1) {
                                dispatch_once(&qword_102419520, &stru_1023192B0);
                              }
                              uint64_t v71 = qword_102419528;
                              if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
                              {
                                uint64_t v72 = *(void *)(a1 + 24);
                                *(void *)long long __p = 68289282;
                                *(_WORD *)&__p[8] = 2082;
                                *(void *)&__p[10] = "";
                                *(_WORD *)&unsigned char __p[18] = 2114;
                                *(void *)&__p[20] = v72;
                                _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#provisional force intermediation - high dF or acc(#cblsPowerSaver)\", \"Client\":%{public, location:escape_only}@}", __p, 0x1Cu);
                              }
                              uint64_t v73 = (void *)sub_1001A0484(a1);
                              id v74 = [*(id *)(a1 + 24) legacyClientKey];
                              v103[0] = _NSConcreteStackBlock;
                              v103[1] = 3221225472;
                              v103[2] = sub_10017A32C;
                              v103[3] = &unk_1022BDE58;
                              int v103[4] = a1;
                              [v73 handleProvisionalIntermediationForService:5 forClientKey:v74 at:0 withReply:v103];
                            }
                            if (v32 <= 0x27 && ((1 << v32) & 0x8000400030) != 0
                              || sub_10002D528(a1))
                            {
                              sub_10012AC24(a1, 1);
                              int v76 = *(_DWORD *)(a1 + 184);
                              int v75 = *(_DWORD *)(a1 + 188);
                              if (v76 < 5)
                              {
                                if (v75 != 2 && (v76 != 2 || v75 != 3)) {
                                  goto LABEL_156;
                                }
                              }
                              else if (v75 == 1)
                              {
                                goto LABEL_156;
                              }
                              sub_10012B52C(a1);
                              goto LABEL_156;
                            }
                            if (v113 < 110.0)
                            {
                              uint64_t v86 = sub_10008A168(v32);
                              *(void *)(a1 + 216) = sub_10122D380((const void *)a1, v86);
                            }
                            sub_10012AFC4(a1, 1);
                            int v88 = *(_DWORD *)(a1 + 184);
                            int v87 = *(_DWORD *)(a1 + 188);
                            if (v88 < 5)
                            {
                              if (v87 != 2 && (v88 != 2 || v87 != 3)) {
                                goto LABEL_191;
                              }
                            }
                            else if (v87 == 1)
                            {
                              goto LABEL_191;
                            }
                            if (sub_1001A04F4(a1)) {
                              sub_10122B5B4(a1);
                            }
LABEL_191:
                            if (!sub_10012D284(a1))
                            {
LABEL_157:
                              if (qword_102419520 != -1) {
                                dispatch_once(&qword_102419520, &stru_1023192B0);
                              }
                              uint64_t v77 = qword_102419528;
                              if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
                              {
                                uint64_t v78 = *(void *)(a1 + 24);
                                uint64_t v79 = sub_1000E9360(a1);
                                int v80 = *(unsigned __int8 *)(a1 + 58);
                                *(void *)long long __p = 68289794;
                                *(_WORD *)&__p[8] = 2082;
                                *(void *)&__p[10] = "";
                                *(_WORD *)&unsigned char __p[18] = 2114;
                                *(void *)&__p[20] = v78;
                                __int16 v127 = 2050;
                                *(void *)int v128 = v79;
                                *(_WORD *)&v128[8] = 1026;
                                *(_DWORD *)&v128[10] = v80;
                                _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#cblsPowerSaver starting metric session (LocationUpdateSession)\", \"Client\":%{public, location:escape_only}@, \"DC\":\"%{public}p\", \"LossTrackingEnabled\":%{public}hhd}", __p, 0x2Cu);
                              }
                              CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
                              *(unsigned char *)(a1 + 312) = 1;
                              *(double *)(a1 + 384) = v113;
                              *(double *)(a1 + 392) = v21;
                              *(CFAbsoluteTime *)(a1 + 320) = Current;
                              sub_100182A04(a1, __p);
                              double v82 = (void **)(a1 + 328);
                              if (*(char *)(a1 + 351) < 0) {
                                operator delete(*v82);
                              }
                              *(_OWORD *)double v82 = *(_OWORD *)__p;
                              *(void *)(a1 + 344) = *(void *)&__p[16];
                              uint64_t v83 = *(void *)(a1 + 560);
                              uint64_t v84 = *(std::__shared_weak_count **)(a1 + 568);
                              if (v84)
                              {
                                atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
                                atomic_fetch_add_explicit(&v84->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                                sub_1000DB0A0(v84);
                              }
                              uint64_t v85 = *(void **)(a1 + 8);
                              v100[0] = _NSConcreteStackBlock;
                              v100[1] = 3321888768;
                              v100[2] = sub_10017A29C;
                              v100[3] = &unk_102319130;
                              v100[4] = a1;
                              v100[5] = v83;
                              __int16 v101 = v84;
                              if (v84) {
                                atomic_fetch_add_explicit(&v84->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                              }
                              CFAbsoluteTime v102 = Current;
                              sub_100163648(v85, (uint64_t)v100);
                              if (v101) {
                                std::__shared_weak_count::__release_weak(v101);
                              }
                              if (v84) {
                                std::__shared_weak_count::__release_weak(v84);
                              }
                              return;
                            }
LABEL_156:
                            if (!*(unsigned char *)(a1 + 58)) {
                              return;
                            }
                            goto LABEL_157;
                          }
                        }
LABEL_88:
                        sub_100129DE0(a1, 22);
                        uint64_t v41 = sub_10012B6C4(a1);
                        [*(id *)(*(void *)v41 + 16) unregister:*(void *)(*(void *)v41 + 8) forNotification:12];
                        if (v32 == 39) {
                          goto LABEL_90;
                        }
                        goto LABEL_89;
                      }
LABEL_87:
                      sub_100129DE0(a1, 5);
                      goto LABEL_88;
                    }
LABEL_86:
                    sub_100129DE0(a1, 4);
                    goto LABEL_87;
                  }
                }
                else
                {
                  sub_100129DE0(a1, 1);
                }
                sub_100129DE0(a1, 2);
                goto LABEL_86;
              }
              if (qword_102419520 != -1) {
                dispatch_once(&qword_102419520, &stru_1023192B0);
              }
              long long v89 = qword_102419528;
              if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
              {
                uint64_t v90 = *(void *)(a1 + 24);
                *(void *)long long __p = 68289282;
                *(_WORD *)&__p[8] = 2082;
                *(void *)&__p[10] = "";
                *(_WORD *)&unsigned char __p[18] = 2114;
                *(void *)&__p[20] = v90;
                _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Not registering for location updates; the planets don't align\", \"Client\":%{p"
                  "ublic, location:escape_only}@}",
                  __p,
                  0x1Cu);
                if (qword_102419520 != -1) {
                  dispatch_once(&qword_102419520, &stru_1023192B0);
                }
              }
              __int16 v35 = qword_102419528;
              if (!os_signpost_enabled((os_log_t)qword_102419528))
              {
LABEL_70:
                int v31 = 0;
                char v30 = 0;
                uint64_t v32 = 48;
                goto LABEL_71;
              }
              uint64_t v91 = *(void *)(a1 + 24);
              *(void *)long long __p = 68289282;
              *(_WORD *)&__p[8] = 2082;
              *(void *)&__p[10] = "";
              *(_WORD *)&unsigned char __p[18] = 2114;
              *(void *)&__p[20] = v91;
              __int16 v37 = "Not registering for location updates; the planets don't align";
              __int16 v38 = "{\"msg%{public}.0s\":\"Not registering for location updates; the planets don't align\", \"Client\":%"
                    "{public, location:escape_only}@}";
LABEL_69:
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v37, v38, __p, 0x1Cu);
              goto LABEL_70;
            }
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1023192B0);
            }
            __int16 v33 = qword_102419528;
            if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
            {
              uint64_t v34 = *(void *)(a1 + 24);
              *(void *)long long __p = 68289282;
              *(_WORD *)&__p[8] = 2082;
              *(void *)&__p[10] = "";
              *(_WORD *)&unsigned char __p[18] = 2114;
              *(void *)&__p[20] = v34;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Not registering for location updates; desiredAccuracy is too high\", \"Client\":%"
                "{public, location:escape_only}@}",
                __p,
                0x1Cu);
              if (qword_102419520 != -1) {
                dispatch_once(&qword_102419520, &stru_1023192B0);
              }
            }
            __int16 v35 = qword_102419528;
            if (!os_signpost_enabled((os_log_t)qword_102419528)) {
              goto LABEL_70;
            }
            uint64_t v36 = *(void *)(a1 + 24);
            *(void *)long long __p = 68289282;
            *(_WORD *)&__p[8] = 2082;
            *(void *)&__p[10] = "";
            *(_WORD *)&unsigned char __p[18] = 2114;
            *(void *)&__p[20] = v36;
            __int16 v37 = "Not registering for location updates; desiredAccuracy is too high";
            __int16 v38 = "{\"msg%{public}.0s\":\"Not registering for location updates; desiredAccuracy is too high\", \"Client\""
                  ":%{public, location:escape_only}@}";
            goto LABEL_69;
          }
          char v30 = 0;
          uint64_t v32 = 1;
        }
        else
        {
          uint64_t v32 = 0;
          char v30 = 0;
        }
        int v31 = 1;
        goto LABEL_71;
      }
      sub_10012B784(a1, 0);
    }
    double v113 = 2147483650.0;
    goto LABEL_57;
  }
  if ([*(id *)(a1 + 16) transientAwareRegistrationResult] == 2
    || [*(id *)(a1 + 16) transientAwareRegistrationResult] == 3)
  {
    v116((uint64_t)v115);
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    char v12 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 24);
      uint64_t v14 = sub_1000E9360(a1);
      *(void *)long long __p = 68289538;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = "";
      *(_WORD *)&unsigned char __p[18] = 2114;
      *(void *)&__p[20] = v13;
      __int16 v127 = 2050;
      *(void *)int v128 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"client not authorized for location; not starting yet\", \"Client\":%{public, location:esc"
        "ape_only}@, \"DC\":\"%{public}p\"}",
        __p,
        0x26u);
    }
    if (!*(void *)(a1 + 576))
    {
      id v15 = [[objc_msgSend(*(id *)(a1 + 8), "silo") newTimer];
      *(void *)(a1 + 576) = v15;
      v114[0] = _NSConcreteStackBlock;
      v114[1] = 3221225472;
      v114[2] = sub_10122D5C0;
      v114[3] = &unk_1022ACE00;
      v114[4] = v115;
      v114[5] = a1;
      [v15 setHandler:v114];
      [*(id *)(a1 + 576) setNextFireDelay:2.0 interval:1.79769313e308];
    }
  }
  sub_100129AB8(a1);
}

void sub_10012D1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a18) {
    std::__shared_weak_count::__release_weak(a18);
  }
  if (v58) {
    std::__shared_weak_count::__release_weak(v58);
  }
  _Unwind_Resume(exception_object);
}

id *sub_10012D234(id **a1, id *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10122898C(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10012D284(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 80))();
}

id sub_10012D2AC(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 57))
  {
    uint64_t v6 = sub_100129EFC(a1);
    [*(id *)(*(void *)v6 + 16) unregister:*(void *)(*(void *)v6 + 8) forNotification:a2];
    sub_100129E3C(a1);
    sub_10012F770();
  }
  uint64_t v4 = sub_100129E3C(a1);
  [*(id *)(*(void *)v4 + 16) unregister:*(void *)(*(void *)v4 + 8) forNotification:a2];
  uint64_t v5 = *(void *)sub_100129EFC(a1);
  uint64_t v8 = *(void *)(v5 + 8);
  uint64_t v7 = *(void **)(v5 + 16);

  return [v7 register:v8 forNotification:a2 registrationInfo:0];
}

void sub_10012D358(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 236);
  sub_100134750(__p, "kCLConnectionMessageLocation");
  int v3 = sub_10012E364(a1);
  if ((v50[9] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  unsigned int v4 = sub_100138A70(a1, 4);
  if ((v3 & v4 & 1) == 0)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    uint64_t v8 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 24);
      *(_DWORD *)long long __p = 138412802;
      *(void *)&__p[4] = v9;
      __int16 v49 = 1024;
      *(_DWORD *)uint64_t v50 = v3;
      *(_WORD *)&v50[4] = 1024;
      *(_DWORD *)&v50[6] = v4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "PAUSE: '%@' not a location client (%d), or not authorized (%d).", __p, 0x18u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_17;
    }
    bzero(__p, 0x65CuLL);
    if (qword_102419520 == -1) {
      goto LABEL_92;
    }
    goto LABEL_110;
  }
  int v5 = *(_DWORD *)(a1 + 188);
  if (v5 == 1)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    uint64_t v6 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(a1 + 24);
      *(_DWORD *)long long __p = 138412290;
      *(void *)&__p[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "PAUSE: '%@' overridden to off.", __p, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_17;
    }
    bzero(__p, 0x65CuLL);
    if (qword_102419520 == -1)
    {
LABEL_92:
      uint64_t v43 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::checkPauseState()", "%s\n", v43);
      if (v43 != __p) {
        free(v43);
      }
LABEL_17:
      *(unsigned char *)(a1 + 236) = 0;
      goto LABEL_18;
    }
LABEL_110:
    dispatch_once(&qword_102419520, &stru_1023192B0);
    goto LABEL_92;
  }
  if (v5 != 2)
  {
    int v15 = *(_DWORD *)(a1 + 184);
    if (v15 <= 4 && (v5 != 3 || v15 != 2))
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      int v28 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v29 = *(void *)(a1 + 24);
        *(_DWORD *)long long __p = 138412290;
        *(void *)&__p[4] = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "PAUSE: '%@' not allowed to pause.", __p, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_17;
      }
      bzero(__p, 0x65CuLL);
      if (qword_102419520 == -1) {
        goto LABEL_92;
      }
      goto LABEL_110;
    }
  }
  if (*(double *)(a1 + 224) == -1.0)
  {
    *(unsigned char *)(a1 + 236) = 0;
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    double v16 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = *(void *)(a1 + 24);
      uint64_t v18 = *(void *)(a1 + 224);
      *(_DWORD *)long long __p = 138412546;
      *(void *)&__p[4] = v17;
      __int16 v49 = 2048;
      *(void *)uint64_t v50 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "PAUSE: '%@' not backgrounded right now (%.1f).", __p, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      unsigned int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::checkPauseState()", "%s\n", v19);
LABEL_60:
      if (v19 != __p) {
        free(v19);
      }
    }
  }
  else if (v2 || !*(unsigned char *)(a1 + 240) || sub_1004BE230() <= *(double *)(a1 + 224) + *(double *)(a1 + 544))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    uint64_t v22 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v23 = *(void *)(a1 + 24);
      int v24 = *(unsigned __int8 *)(a1 + 240);
      double v25 = sub_1004BE230();
      uint64_t v26 = *(void *)(a1 + 224);
      uint64_t v27 = *(void *)(a1 + 544);
      *(_DWORD *)long long __p = 138413570;
      *(void *)&__p[4] = v23;
      __int16 v49 = 1024;
      *(_DWORD *)uint64_t v50 = v2;
      *(_WORD *)&v50[4] = 1024;
      *(_DWORD *)&v50[6] = v24;
      *(_WORD *)uint64_t v51 = 2048;
      *(double *)&v51[2] = v25;
      *(_WORD *)&v51[10] = 2048;
      uint64_t v52 = v26;
      __int16 v53 = 2048;
      uint64_t v54 = v27;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "PAUSE: '%@' not changing state wasPaused: %d lastState: %d now clock: %f timestamp: %f thresh: %f.", __p, 0x36u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      sub_1004BE230();
      unsigned int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::checkPauseState()", "%s\n", v19);
      goto LABEL_60;
    }
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    char v30 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      double v31 = sub_1004BE230();
      uint64_t v32 = *(void *)(a1 + 224);
      uint64_t v33 = *(void *)(a1 + 544);
      *(_DWORD *)long long __p = 134218496;
      *(double *)&__p[4] = v31;
      __int16 v49 = 2048;
      *(void *)uint64_t v50 = v32;
      *(_WORD *)&v50[8] = 2048;
      *(void *)uint64_t v51 = v33;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "PAUSE: now clock %f timestamp %f thresh %f.", __p, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      sub_1004BE230();
      __int16 v46 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::checkPauseState()", "%s\n", v46);
      if (v46 != __p) {
        free(v46);
      }
    }
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    uint64_t v34 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v35 = *(void *)(a1 + 24);
      int v36 = *(_DWORD *)(a1 + 232);
      int v37 = *(unsigned __int8 *)(a1 + 238);
      int v38 = *(unsigned __int8 *)(a1 + 239);
      int v39 = *(unsigned __int8 *)(a1 + 237);
      *(_DWORD *)long long __p = 138413314;
      *(void *)&__p[4] = v35;
      __int16 v49 = 1024;
      *(_DWORD *)uint64_t v50 = v36;
      *(_WORD *)&v50[4] = 1024;
      *(_DWORD *)&v50[6] = v37;
      *(_WORD *)uint64_t v51 = 1024;
      *(_DWORD *)&v51[2] = v38;
      *(_WORD *)&v51[6] = 1024;
      *(_DWORD *)&v51[8] = v39;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "PAUSE: client: '%@' type: %d states: veh %d fit %d oth %d", __p, 0x24u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      uint64_t v47 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::checkPauseState()", "%s\n", v47);
      if (v47 != __p) {
        free(v47);
      }
    }
    int v40 = *(_DWORD *)(a1 + 232);
    if (v40 == 3)
    {
      char v41 = *(unsigned char *)(a1 + 239);
    }
    else if (v40 == 2)
    {
      char v41 = *(unsigned char *)(a1 + 238);
    }
    else
    {
      char v41 = *(unsigned char *)(a1 + 237);
    }
    *(unsigned char *)(a1 + 236) = v41;
  }
LABEL_18:
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023192B0);
  }
  uint64_t v10 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v11 = *(void *)(a1 + 24);
    int v12 = *(unsigned __int8 *)(a1 + 236);
    *(_DWORD *)long long __p = 138413058;
    *(void *)&__p[4] = v11;
    __int16 v49 = 2048;
    *(void *)uint64_t v50 = a1;
    *(_WORD *)&v50[8] = 1024;
    *(_DWORD *)uint64_t v51 = v2;
    *(_WORD *)&v51[4] = 1024;
    *(_DWORD *)&v51[6] = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "PAUSE: %@ (%p) changed from %d to %d", __p, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    uint64_t v42 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::checkPauseState()", "%s\n", v42);
    if (v42 != __p) {
      free(v42);
    }
  }
  if (v2 != *(unsigned __int8 *)(a1 + 236))
  {
    if (*(unsigned char *)(a1 + 236))
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      uint64_t v13 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v14 = *(void *)(a1 + 24);
        *(_DWORD *)long long __p = 138412290;
        *(void *)&__p[4] = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "PAUSE: Pausing client '%@'", __p, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1023192B0);
        }
        __int16 v44 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::checkPauseState()", "%s\n", v44);
        if (v44 != __p) {
          free(v44);
        }
      }
      sub_100129AB8(a1);
      sub_10122CB60(a1, 1);
    }
    else
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      unsigned int v20 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
      {
        uint64_t v21 = *(void *)(a1 + 24);
        *(_DWORD *)long long __p = 138543362;
        *(void *)&__p[4] = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "PAUSE: Resuming client '%{public}@' (This should be handled on framework side)", __p, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1023192B0);
        }
        int v45 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLLocationSubscription::checkPauseState()", "%s\n", v45);
        if (v45 != __p) {
          free(v45);
        }
      }
      sub_10122CB60(a1, 0);
      sub_10012BA08(a1);
    }
  }
}

void sub_10012E340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10012E364(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 48))();
}

void *sub_10012E38C(void *a1)
{
  *a1 = off_1022B6DB8;
  sub_10012E3E4((uint64_t)a1);
  int v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

void sub_10012E3E4(uint64_t a1)
{
  int v2 = operator new(0x20uLL);
  v2[1] = 0;
  v2[2] = 0;
  *int v2 = off_1022B6DF0;
  int v3 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 16) = v2;
  *((_DWORD *)v2 + 6) = 31337;
  *(void *)(a1 + 8) = v2 + 3;
  if (v3)
  {
    sub_1000DB0A0(v3);
  }
}

uint64_t sub_10012E464(uint64_t a1, unsigned int *a2)
{
  sub_1000B015C();
  if (*a2 >= 3) {
    char v4 = -1;
  }
  else {
    char v4 = 2 - *(unsigned char *)a2;
  }
  int v5 = v4;
  char v100 = v4;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022C17A0);
  }
  uint64_t v6 = &qword_102419000;
  uint64_t v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v8 = *a2;
    uint64_t v9 = sub_10008A168(*a2);
    *(_DWORD *)uint64_t buf = 67240706;
    *(_DWORD *)&uint8_t buf[4] = v8;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = v9;
    *(_WORD *)&unsigned char buf[18] = 1026;
    *(_DWORD *)&buf[20] = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLIENT:registerForNotificationInternal,notification,%{public}d,%{public}s,granularity,%{public}d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    unsigned int v92 = *a2;
    __int16 v93 = sub_10008A168(*a2);
    *(_DWORD *)__int16 v101 = 67240706;
    *(_DWORD *)&v101[4] = v92;
    *(_WORD *)&v101[8] = 2082;
    *(void *)&v101[10] = v93;
    *(_WORD *)&v101[18] = 1026;
    *(_DWORD *)&v101[20] = v5;
    double v94 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationController::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v94);
    if (v94 != buf) {
      free(v94);
    }
  }
  switch(*a2)
  {
    case 0u:
    case 1u:
    case 2u:
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      int v28 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        int v29 = *(char *)(a1 + 160);
        int v30 = *(char *)(a1 + 161);
        *(_DWORD *)uint64_t buf = 67240448;
        *(_DWORD *)&uint8_t buf[4] = v29;
        *(_WORD *)&uint8_t buf[8] = 1026;
        *(_DWORD *)&buf[10] = v30;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Before register,required granularity,%{public}d,active granularity,%{public}d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022C17A0);
        }
        int v95 = *(char *)(a1 + 160);
        int v96 = *(char *)(a1 + 161);
        *(_DWORD *)__int16 v101 = 67240448;
        *(_DWORD *)&v101[4] = v95;
        *(_WORD *)&v101[8] = 1026;
        *(_DWORD *)&v101[10] = v96;
        uint64_t v97 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationController::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v97);
        if (v97 != buf) {
          free(v97);
        }
      }
      *(_DWORD *)uint64_t buf = 0xFFFF;
      *(void *)&unsigned char buf[12] = 0;
      *(void *)&uint8_t buf[4] = 0;
      *(_OWORD *)&buf[20] = xmmword_101D1C320;
      __asm { FMOV            V0.2D, #-1.0 }
      long long v110 = _Q0;
      long long v111 = _Q0;
      long long v112 = _Q0;
      int v113 = 0;
      uint64_t v115 = 0;
      uint64_t v116 = 0;
      unint64_t v114 = 0xBFF0000000000000;
      unint64_t v118 = 0xBFF0000000000000;
      int v117 = 0;
      int v119 = 0x7FFFFFFF;
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      uint64_t v120 = 0;
      char v123 = 0;
      uint64_t v35 = *(void *)(a1 + 288);
      if (v35
        && (*(unsigned int (**)(uint64_t, unsigned char *))(*(void *)v35 + 152))(v35, buf)
        && *(double *)&buf[20] > 0.0)
      {
        *(_DWORD *)__int16 v101 = 0;
        int v36 = sub_1001072EC(a1, (int *)v101, 1);
        LODWORD(v105[0]) = 1;
        int v37 = sub_1001072EC(a1, (int *)v105, 1);
        int v99 = 2;
        int v38 = sub_1001072EC(a1, &v99, 1);
        sub_100023760(a1 + 5200, (int *)a2, v36, v37, v38, *(double *)&buf[20]);
      }
      if (v5 > *(char *)(a1 + 160)) {
        *(unsigned char *)(a1 + 160) = v5;
      }
      if (v5 > *(char *)(a1 + 161)) {
        sub_10014FF84(a1, &v100);
      }
      goto LABEL_48;
    case 3u:
    case 4u:
    case 6u:
    case 0xAu:
    case 0x27u:
      uint64_t v10 = *(int **)(a1 + 264);
      uint64_t v11 = (int *)(a1 + 272);
      if (v10 != (int *)(a1 + 272))
      {
        uint64_t v12 = a1 + 240;
        do
        {
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022C17A0);
          }
          uint64_t v13 = v6[113];
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            unsigned int v14 = *a2;
            int v15 = sub_1000A43BC(v12, v10 + 8);
            uint64_t v18 = v15[1];
            double v16 = v15 + 1;
            uint64_t v17 = v18;
            if (*((char *)v16 + 23) >= 0) {
              uint64_t v17 = (uint64_t)v16;
            }
            *(_DWORD *)uint64_t buf = 67240450;
            *(_DWORD *)&uint8_t buf[4] = v14;
            uint64_t v6 = &qword_102419000;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = v17;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "registering notification,%{public}d,location provider,%{public}s", buf, 0x12u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_1022C17A0);
            }
            unsigned int v22 = *a2;
            uint64_t v23 = sub_1000A43BC(v12, v10 + 8);
            uint64_t v26 = v23[1];
            int v24 = v23 + 1;
            uint64_t v25 = v26;
            if (*((char *)v24 + 23) >= 0) {
              uint64_t v25 = (uint64_t)v24;
            }
            *(_DWORD *)__int16 v101 = 67240450;
            *(_DWORD *)&v101[4] = v22;
            *(_WORD *)&v101[8] = 2082;
            *(void *)&v101[10] = v25;
            uint64_t v27 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationController::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v27);
            if (v27 != buf) {
              free(v27);
            }
            uint64_t v6 = &qword_102419000;
          }
          [*(id *)(*((void *)v10 + 5) + 16) register:*(void *)(*((void *)v10 + 5) + 8) forNotification:*a2 registrationInfo:0];
          unsigned int v19 = (int *)*((void *)v10 + 1);
          if (v19)
          {
            do
            {
              unsigned int v20 = v19;
              unsigned int v19 = *(int **)v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              unsigned int v20 = (int *)*((void *)v10 + 2);
              _ZF = *(void *)v20 == (void)v10;
              uint64_t v10 = v20;
            }
            while (!_ZF);
          }
          uint64_t v10 = v20;
        }
        while (v20 != v11);
      }
      return 1;
    case 8u:
      if (*(_DWORD *)(a1 + 328))
      {
        *(void *)uint64_t buf = a1 + 328;
        int v39 = sub_1000FEE0C((uint64_t **)(a1 + 264), (int *)(a1 + 328), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        [(id)v39[5][2] register:v39[5][1] forNotification:8 registrationInfo:0];
      }
LABEL_48:
      v105[1] = -1.0;
      __int16 v106 = 0;
      int v108 = 0;
      v105[0] = sub_100151E24(a1);
      int v107 = sub_1001266F8(a1, 0);
      uint64_t v40 = *(void *)(a1 + 264);
      if (v40 != a1 + 272)
      {
        uint64_t v41 = a1 + 240;
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022C17A0);
        }
        uint64_t v42 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          double v43 = v105[0];
          __int16 v44 = sub_1000A43BC(v41, (int *)(v40 + 32));
          uint64_t v47 = v44[1];
          int v45 = v44 + 1;
          uint64_t v46 = v47;
          if (*((char *)v45 + 23) >= 0) {
            uint64_t v48 = v45;
          }
          else {
            uint64_t v48 = (uint64_t *)v46;
          }
          int v49 = *((unsigned __int8 *)sub_1000A43BC(v41, (int *)(v40 + 32)) + 863);
          *(_DWORD *)uint64_t buf = 134349826;
          *(double *)&uint8_t buf[4] = v43;
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&unsigned char buf[14] = v48;
          *(_WORD *)&unsigned char buf[22] = 1026;
          *(_DWORD *)&uint8_t buf[24] = v49;
          *(_WORD *)&unsigned char buf[28] = 1026;
          *(_DWORD *)&buf[30] = v107;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "CLIENT:registerForNotificationInternal,propagate,desiredAccuracy,%{public}.1lf,name,%{public}s,active,%{public}d,operating mode,%{public}d", buf, 0x22u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022C17A0);
          }
          double v50 = v105[0];
          uint64_t v51 = sub_1000A43BC(v41, (int *)(v40 + 32));
          uint64_t v54 = v51[1];
          uint64_t v52 = v51 + 1;
          uint64_t v53 = v54;
          if (*((char *)v52 + 23) >= 0) {
            uint64_t v55 = v52;
          }
          else {
            uint64_t v55 = (uint64_t *)v53;
          }
          int v56 = *((unsigned __int8 *)sub_1000A43BC(v41, (int *)(v40 + 32)) + 863);
          *(_DWORD *)__int16 v101 = 134349826;
          *(double *)&v101[4] = v50;
          *(_WORD *)&v101[12] = 2082;
          *(void *)&v101[14] = v55;
          *(_WORD *)&v101[22] = 1026;
          int v102 = v56;
          __int16 v103 = 1026;
          int v104 = v107;
          uint64_t v57 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationController::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v57);
          if (v57 != buf) {
            free(v57);
          }
        }
        *(_DWORD *)uint64_t buf = 0;
        sub_10012F728();
      }
      return 1;
    case 0xFu:
      if (*(_DWORD *)(a1 + 328))
      {
        __asm { FMOV            V0.2D, #-1.0 }
        *(_OWORD *)uint64_t buf = _Q0;
        *(_WORD *)&uint8_t buf[16] = 0;
        *(_DWORD *)&uint8_t buf[24] = 0;
        *(_DWORD *)&buf[20] = sub_1001266F8(a1, 15);
        *(void *)__int16 v101 = a1 + 328;
        sub_1000FEE0C((uint64_t **)(a1 + 264), (int *)(a1 + 328), (uint64_t)&unk_101D0B290, (_DWORD **)v101);
        sub_10012F770();
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      int v88 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_FAULT, "BATCH:unsupported platform", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      *(_WORD *)__int16 v101 = 0;
      long long v89 = (unsigned char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLLocationController::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n");
      goto LABEL_148;
    case 0x11u:
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      uint64_t v59 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "CLMM,RunMapMatching is turned on", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022C17A0);
        }
        *(_WORD *)__int16 v101 = 0;
        int v98 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationController::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v98);
        if (v98 != buf) {
          free(v98);
        }
      }
      *(unsigned char *)(a1 + 668) = 1;
      (*(void (**)(void))(**(void **)(a1 + 288) + 184))(*(void *)(a1 + 288));
      return 1;
    case 0x16u:
      if (*(_DWORD *)(a1 + 320))
      {
        *(void *)uint64_t buf = a1 + 320;
        int v60 = sub_1000FEE0C((uint64_t **)(a1 + 264), (int *)(a1 + 320), (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5];
        uint64_t v62 = v60[1];
        BOOL v61 = (void *)v60[2];
        uint64_t v63 = 22;
LABEL_109:
        [v61 register:v62 forNotification:v63 registrationInfo:0];
      }
      else
      {
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022C1800);
        }
        uint64_t v90 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "@WsbReg, kNotificationWifiLocationBatched unsupported", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022C1800);
          }
          *(_WORD *)__int16 v101 = 0;
          long long v89 = (unsigned char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationController::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n");
LABEL_148:
          if (v89 != buf) {
            free(v89);
          }
        }
      }
      return 1;
    case 0x1Cu:
      uint64_t v64 = 0;
      int v65 = *(_DWORD *)(a1 + 344);
      LODWORD(v105[0]) = *(_DWORD *)(a1 + 332);
      HIDWORD(v105[0]) = v65;
      do
      {
        if (*(_DWORD *)((char *)v105 + v64))
        {
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022C17A0);
          }
          uint64_t v66 = v6[113];
          if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
          {
            unsigned int v67 = *a2;
            int v68 = sub_1000A43BC(a1 + 240, (int *)((char *)v105 + v64));
            uint64_t v71 = v68[1];
            uint64_t v69 = v68 + 1;
            uint64_t v70 = v71;
            if (*((char *)v69 + 23) >= 0) {
              uint64_t v70 = (uint64_t)v69;
            }
            *(_DWORD *)uint64_t buf = 67240450;
            *(_DWORD *)&uint8_t buf[4] = v67;
            uint64_t v6 = &qword_102419000;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = v70;
            _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "registering notification,%{public}d,location provider,%{public}s", buf, 0x12u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_1022C17A0);
            }
            unsigned int v73 = *a2;
            id v74 = sub_1000A43BC(a1 + 240, (int *)((char *)v105 + v64));
            uint64_t v77 = v74[1];
            int v75 = v74 + 1;
            uint64_t v76 = v77;
            if (*((char *)v75 + 23) >= 0) {
              uint64_t v76 = (uint64_t)v75;
            }
            *(_DWORD *)__int16 v101 = 67240450;
            *(_DWORD *)&v101[4] = v73;
            *(_WORD *)&v101[8] = 2082;
            *(void *)&v101[10] = v76;
            uint64_t v78 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationController::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v78);
            if (v78 != buf) {
              free(v78);
            }
            uint64_t v6 = &qword_102419000;
          }
          uint64_t v72 = sub_1000A43BC(a1 + 264, (int *)((char *)v105 + v64));
          [*(id *)(*v72 + 16) register:*(void *)(*v72 + 8) forNotification:28 registrationInfo:0];
        }
        v64 += 4;
      }
      while (v64 != 8);
      if (*(_DWORD *)(a1 + 328))
      {
        uint64_t v84 = sub_1000A43BC(a1 + 264, (int *)(a1 + 328));
        [*(id *)(*v84 + 16) register:*(void *)(*v84 + 8) forNotification:28 registrationInfo:0];
      }
      uint64_t v85 = *(void *)(a1 + 288);
      if (v85) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v85 + 320))(v85, 1);
      }
      return 1;
    case 0x1Du:
      if (*(_DWORD *)(a1 + 328))
      {
        uint64_t v86 = sub_1000A43BC(a1 + 264, (int *)(a1 + 328));
        [*(id *)(*v86 + 16) register:*(void *)(*v86 + 8) forNotification:29 registrationInfo:0];
      }
      if (*(_DWORD *)(a1 + 336))
      {
        int v87 = sub_1000A43BC(a1 + 264, (int *)(a1 + 336));
        [*(id *)(*v87 + 16) register:*(void *)(*v87 + 8) forNotification:29 registrationInfo:0];
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 288) + 312))(*(void *)(a1 + 288), 1);
      return 1;
    case 0x22u:
      if (!*(_DWORD *)(a1 + 328)) {
        return 1;
      }
      uint64_t v79 = sub_1000A43BC(a1 + 264, (int *)(a1 + 328));
      uint64_t v62 = *(void *)(*v79 + 8);
      BOOL v61 = *(void **)(*v79 + 16);
      uint64_t v63 = 34;
      goto LABEL_109;
    case 0x23u:
      if (!*(_DWORD *)(a1 + 328)) {
        return 1;
      }
      int v80 = sub_1000A43BC(a1 + 264, (int *)(a1 + 328));
      uint64_t v62 = *(void *)(*v80 + 8);
      BOOL v61 = *(void **)(*v80 + 16);
      uint64_t v63 = 35;
      goto LABEL_109;
    case 0x28u:
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      uint64_t v81 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"register kNotificationExternalLocationDisablementAssert\"}", buf, 0x12u);
      }
      if (!*(_DWORD *)(a1 + 336)) {
        return 1;
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      double v82 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"registering kNotificationExternalLocationDisablementAssert w/ accessory provider\"}", buf, 0x12u);
      }
      uint64_t v83 = sub_1000A43BC(a1 + 264, (int *)(a1 + 336));
      uint64_t v62 = *(void *)(*v83 + 8);
      BOOL v61 = *(void **)(*v83 + 16);
      uint64_t v63 = 40;
      goto LABEL_109;
    default:
      return 1;
  }
}

void sub_10012F728()
{
}

void sub_10012F770()
{
}

void sub_10012F81C(int a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C1760);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unsigned int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onCellNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C1760);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onCellNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10015035C(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10012F9E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10012FA08(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  sub_100130548(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), v3);
  sub_1000C52B4(a1);
  char v4 = *(void **)(a1 + 64);
  if (v4 != (void *)(a1 + 72))
  {
    do
    {
      if (v3 && (unsigned int v5 = sub_10012FD50(v4[5]), sub_10012FD58(a1, v5))) {
        sub_1001300DC(v4[5]);
      }
      else {
        sub_1001303EC(v4[5]);
      }
      uint64_t v6 = (void *)v4[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v4[2];
          BOOL v8 = *v7 == (void)v4;
          char v4 = v7;
        }
        while (!v8);
      }
      char v4 = v7;
    }
    while (v7 != (void *)(a1 + 72));
  }
  sub_1000C509C(a1);
  if (v2 != v3)
  {
    sub_1000C52B4(a1);
    if (v3)
    {
      sub_10054AC9C(a1, 1);
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 168) + 24))(*(void *)(a1 + 168), 1);
      sub_10054A650(a1, 1);
      int v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 176))(*(void *)(a1 + 48));
      sub_10054AE70(a1, &v10);
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 184))(*(void *)(a1 + 48), 6);
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 184))(*(void *)(a1 + 48), 8);
    }
    else
    {
      sub_10054AC9C(a1, 0);
      (*(void (**)(void, void))(**(void **)(a1 + 136) + 32))(*(void *)(a1 + 136), 0);
      (*(void (**)(void, void))(**(void **)(a1 + 168) + 24))(*(void *)(a1 + 168), 0);
      sub_10054A650(a1, 0);
      int v9 = 0;
      sub_10054AE70(a1, &v9);
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 192))(*(void *)(a1 + 48), 6);
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 192))(*(void *)(a1 + 48), 8);
      sub_1004CDEA8(a1 + 1080);
      sub_1004CDB34(a1 + 1080);
    }
    sub_1000C509C(a1);
  }
}

uint64_t sub_10012FD50(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

BOOL sub_10012FD58(uint64_t a1, unsigned int a2)
{
  sub_10012FFCC(a2, __p);
  unint64_t v4 = v15;
  if ((v15 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  if (v4)
  {
    uint64_t v5 = sub_10012FFE0(a1 + 1016, (const void **)__p);
    if (a1 + 1024 == v5)
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      uint64_t v7 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_ERROR))
      {
        BOOL v8 = (v15 & 0x80u) == 0 ? __p : (void **)__p[0];
        id v9 = [(__CFString *)(id)sub_100BA5C48(a2) UTF8String];
        *(_DWORD *)uint64_t buf = 68289538;
        int v17 = 0;
        __int16 v18 = 2082;
        uint64_t v19 = "";
        __int16 v20 = 2082;
        uint64_t v21 = v8;
        __int16 v22 = 2082;
        id v23 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SystemService gating harvester does not exists in isClientAuthorizedMap. Treating as not authorized\", \"SystemService\":%{public, location:escape_only}s, \"Harvester\":%{public, location:escape_only}s}", buf, 0x26u);
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022BABA0);
        }
      }
      int v10 = qword_102419568;
      if (os_signpost_enabled((os_log_t)qword_102419568))
      {
        if ((v15 & 0x80u) == 0) {
          char v11 = __p;
        }
        else {
          char v11 = (void **)__p[0];
        }
        id v12 = [(__CFString *)(id)sub_100BA5C48(a2) UTF8String];
        *(_DWORD *)uint64_t buf = 68289538;
        int v17 = 0;
        __int16 v18 = 2082;
        uint64_t v19 = "";
        __int16 v20 = 2082;
        uint64_t v21 = v11;
        __int16 v22 = 2082;
        id v23 = v12;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SystemService gating harvester does not exists in isClientAuthorizedMap. Treating as not authorized", "{\"msg%{public}.0s\":\"SystemService gating harvester does not exists in isClientAuthorizedMap. Treating as not authorized\", \"SystemService\":%{public, location:escape_only}s, \"Harvester\":%{public, location:escape_only}s}", buf, 0x26u);
      }
      BOOL v6 = 0;
    }
    else
    {
      BOOL v6 = *(unsigned char *)(v5 + 56) != 0;
    }
  }
  else
  {
    BOOL v6 = 1;
  }
  if ((char)v15 < 0) {
    operator delete(__p[0]);
  }
  return v6;
}

void sub_10012FFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10012FFCC@<X0>(int a1@<W1>, void *a2@<X8>)
{
  return sub_100134750(a2, *((char **)&off_1022BAC00 + a1));
}

uint64_t sub_10012FFE0(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = sub_100130070(v5, (const void **)(v3 + 32), a2);
    BOOL v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      BOOL v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || sub_100130070(v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

BOOL sub_100130070(uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    BOOL v8 = a3;
  }
  else {
    BOOL v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

void sub_1001300DC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88)) {
    return;
  }
  if (*(unsigned char *)(a1 + 280))
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1))
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 144))(a1))
      {
        (*(void (**)(void, void, void))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56), *(unsigned int *)(a1 + 16), 0);
        *(unsigned char *)(a1 + 88) = 1;
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022F59C0);
        }
        uint64_t v2 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v3 = *(unsigned int *)(a1 + 16);
          int v9 = 68289283;
          int v10 = 0;
          __int16 v11 = 2082;
          id v12 = "";
          __int16 v13 = 2049;
          uint64_t v14 = v3;
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"harvesting enabled\", \"subHarvester\":%{private, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v9, 0x1Cu);
        }
        uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40));
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, v4);
        sub_100D6B950(a1);
      }
      return;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F59C0);
    }
    size_t v5 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(unsigned int *)(a1 + 16);
      int v9 = 68289283;
      int v10 = 0;
      __int16 v11 = 2082;
      id v12 = "";
      __int16 v13 = 2049;
      uint64_t v14 = v8;
      size_t v7 = "{\"msg%{public}.0s\":\"cannot be enabled: not supported\", \"subHarvester\":%{private, location:CLSubHarveste"
           "rIdentifier}lld}";
      goto LABEL_19;
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F59C0);
    }
    size_t v5 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(unsigned int *)(a1 + 16);
      int v9 = 68289283;
      int v10 = 0;
      __int16 v11 = 2082;
      id v12 = "";
      __int16 v13 = 2049;
      uint64_t v14 = v6;
      size_t v7 = "{\"msg%{public}.0s\":\"cannot be enabled: disabled by harvest rule\", \"subHarvester\":%{private, location:CL"
           "SubHarvesterIdentifier}lld}";
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, v7, (uint8_t *)&v9, 0x1Cu);
    }
  }
}

void sub_1001303EC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 152))(a1);
    *(unsigned char *)(a1 + 88) = 0;
    (*(void (**)(void, void, void))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56), *(unsigned int *)(a1 + 16), 0);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F59C0);
    }
    uint64_t v2 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(unsigned int *)(a1 + 16);
      v4[0] = 68289283;
      v4[1] = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2049;
      uint64_t v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"harvesting disabled\", \"subHarvester\":%{private, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v4, 0x1Cu);
    }
    sub_100D6B950(a1);
  }
}

uint64_t sub_100130540(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 186);
}

void sub_100130548(uint64_t a1)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022BABA0);
  }
  uint64_t v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    int v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 248))(a1);
    int v20 = *(unsigned __int8 *)(a1 + 186);
    int v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 104))(*(void *)(a1 + 48));
    int v4 = *(unsigned __int8 *)(a1 + 188);
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
    int v6 = *(unsigned __int8 *)(a1 + 256);
    int v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 72))(*(void *)(a1 + 48));
    int v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 216))(*(void *)(a1 + 48));
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 168))(a1);
    int v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 80))(*(void *)(a1 + 168));
    int v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 224))(*(void *)(a1 + 48));
    *(_DWORD *)uint64_t buf = 68291842;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)id v23 = 2082;
    *(void *)&_OWORD v23[2] = "";
    __int16 v24 = 1026;
    int v25 = v19;
    __int16 v26 = 1026;
    int v27 = v20;
    __int16 v28 = 1026;
    int v29 = v3;
    __int16 v30 = 1026;
    int v31 = v4;
    __int16 v32 = 1026;
    int v33 = v5;
    __int16 v34 = 1026;
    int v35 = v6;
    __int16 v36 = 1026;
    int v37 = v7;
    __int16 v38 = 1026;
    int v39 = v8;
    __int16 v40 = 1026;
    int v41 = v9;
    __int16 v42 = 1026;
    int v43 = v10;
    __int16 v44 = 1026;
    int v45 = v11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"updateHarvestingAllowed\", \"isHarvestingEnabled\":%{public}hhd, \"fHarvestingAllowed\":%{public}hhd, \"isLocationServicesEnabled\":%{public}hhd, \"fThermalLevelAcceptableLowCpu\":%{public}hhd, \"isInPrivateMode\":%{public}hhd, \"fBatterySaverModeEnabled\":%{public}hhd, \"hasAuthorizedClients\":%{public}hhd, \"isGpsControllerSimulationEnabled\":%{public}hhd, \"isHarvestingAllowedForLocationSimulation\":%{public}hhd, \"isGpsControllerSimulationEnabled\":%{public}hhd, \"isLocationControllerSimulationEnabled\":%{public}hhd}", buf, 0x54u);
  }
  sub_1000C7F88(buf);
  LOBYTE(v21[0]) = 0;
  int v12 = sub_1000D2988(*(uint64_t *)buf, "IsHarvestingForced", (BOOL *)v21);
  if (LOBYTE(v21[0])) {
    int v13 = v12;
  }
  else {
    int v13 = 0;
  }
  if (*(void *)v23) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v23);
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022BABA0);
  }
  uint64_t v14 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Harvesting is forced to be allowed,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    v21[0] = 67240192;
    v21[1] = v13;
    __int16 v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLHarvestController::updateHarvestingAllowed()", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  if (v13)
  {
    *(unsigned char *)(a1 + 186) = 1;
    return;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 248))(a1) & 1) == 0)
  {
    if (!*(unsigned char *)(a1 + 186)) {
      return;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    unsigned __int8 v15 = qword_102419568;
    if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO)) {
      goto LABEL_66;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)id v23 = 2082;
    *(void *)&_OWORD v23[2] = "";
    __int16 v16 = "{\"msg%{public}.0s\":\"Harvesting not allowed: disabled\"}";
    goto LABEL_65;
  }
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 48) + 104))(*(void *)(a1 + 48)) & 1) == 0)
  {
    if (!*(unsigned char *)(a1 + 186)) {
      return;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    unsigned __int8 v15 = qword_102419568;
    if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO)) {
      goto LABEL_66;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)id v23 = 2082;
    *(void *)&_OWORD v23[2] = "";
    __int16 v16 = "{\"msg%{public}.0s\":\"Harvesting not allowed: location services disabled\"}";
    goto LABEL_65;
  }
  if (!*(unsigned char *)(a1 + 188))
  {
    if (!*(unsigned char *)(a1 + 186)) {
      return;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    unsigned __int8 v15 = qword_102419568;
    if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO)) {
      goto LABEL_66;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)id v23 = 2082;
    *(void *)&_OWORD v23[2] = "";
    __int16 v16 = "{\"msg%{public}.0s\":\"Harvesting not allowed: thermal level unacceptable\"}";
    goto LABEL_65;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 272))(a1))
  {
    if (!*(unsigned char *)(a1 + 186)) {
      return;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    unsigned __int8 v15 = qword_102419568;
    if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO)) {
      goto LABEL_66;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)id v23 = 2082;
    *(void *)&_OWORD v23[2] = "";
    __int16 v16 = "{\"msg%{public}.0s\":\"Harvesting not allowed: in private mode\"}";
    goto LABEL_65;
  }
  if (*(unsigned char *)(a1 + 256))
  {
    if (!*(unsigned char *)(a1 + 186)) {
      return;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    unsigned __int8 v15 = qword_102419568;
    if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO)) {
      goto LABEL_66;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)id v23 = 2082;
    *(void *)&_OWORD v23[2] = "";
    __int16 v16 = "{\"msg%{public}.0s\":\"Harvesting not allowed: battery saver mode enabled\"}";
    goto LABEL_65;
  }
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 48) + 72))(*(void *)(a1 + 48)) & 1) == 0)
  {
    if (!*(unsigned char *)(a1 + 186)) {
      return;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    unsigned __int8 v15 = qword_102419568;
    if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO)) {
      goto LABEL_66;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)id v23 = 2082;
    *(void *)&_OWORD v23[2] = "";
    __int16 v16 = "{\"msg%{public}.0s\":\"Harvesting not allowed: no authorized clients\"}";
    goto LABEL_65;
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 48) + 216))(*(void *)(a1 + 48))
    && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 168))(a1) & 1) == 0)
  {
    if (*(unsigned char *)(a1 + 186))
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      unsigned __int8 v15 = qword_102419568;
      if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO)) {
        goto LABEL_66;
      }
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)id v23 = 2082;
      *(void *)&_OWORD v23[2] = "";
      __int16 v16 = "{\"msg%{public}.0s\":\"Harvesting not allowed: gps simulation enabled\"}";
      goto LABEL_65;
    }
  }
  else
  {
    if (!(*(unsigned int (**)(void))(**(void **)(a1 + 168) + 80))(*(void *)(a1 + 168))
      || ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 168))(a1) & 1) != 0)
    {
      if (!(*(unsigned int (**)(void))(**(void **)(a1 + 48) + 224))(*(void *)(a1 + 48))
        || ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 168))(a1) & 1) != 0)
      {
        if (!*(unsigned char *)(a1 + 186))
        {
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_1022BABA0);
          }
          int v17 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint64_t buf = 68289026;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)id v23 = 2082;
            *(void *)&_OWORD v23[2] = "";
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Harvesting now allowed\"}", buf, 0x12u);
          }
          *(unsigned char *)(a1 + 186) = 1;
        }
        return;
      }
      if (!*(unsigned char *)(a1 + 186)) {
        return;
      }
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      unsigned __int8 v15 = qword_102419568;
      if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO)) {
        goto LABEL_66;
      }
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)id v23 = 2082;
      *(void *)&_OWORD v23[2] = "";
      __int16 v16 = "{\"msg%{public}.0s\":\"Harvesting not allowed: location simulation enabled\"}";
LABEL_65:
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, v16, buf, 0x12u);
LABEL_66:
      *(unsigned char *)(a1 + 186) = 0;
      return;
    }
    if (*(unsigned char *)(a1 + 186))
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      unsigned __int8 v15 = qword_102419568;
      if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO)) {
        goto LABEL_66;
      }
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)id v23 = 2082;
      *(void *)&_OWORD v23[2] = "";
      __int16 v16 = "{\"msg%{public}.0s\":\"Harvesting not allowed: gps simulation enabled (gps monitor)\"}";
      goto LABEL_65;
    }
  }
}

void sub_100131068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100131088(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 187);
}

BOOL sub_100131090()
{
  return sub_1001198CC() == 1;
}

void sub_1001310B0(uint64_t a1, int a2)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102313648);
  }
  int v4 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    v6[0] = 68289283;
    v6[1] = 0;
    __int16 v7 = 2082;
    int v8 = "";
    __int16 v9 = 1025;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#proactive setHarvesting \", \"enabled\":%{private}hhd}", (uint8_t *)v6, 0x18u);
  }
  if (a2) {
    int v5 = sub_1001B0568(a1);
  }
  else {
    int v5 = 0;
  }
  sub_1001311C4(a1, v5);
}

void sub_1001311C4(uint64_t a1, int a2)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 80) + 40))(*(void *)(a1 + 80)))
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 40))(a1) != a2)
    {
      double v4 = (*(double (**)(void))(**(void **)(a1 + 48) + 64))(*(void *)(a1 + 48));
      double v5 = v4;
      if (a2)
      {
        if (*(unsigned char *)(a1 + 96)
          || v4 - *(double *)(a1 + 160) >= 3600.0
          || ((*(uint64_t (**)(void))(**(void **)(a1 + 48) + 128))(*(void *)(a1 + 48)) & 1) != 0)
        {
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_102313648);
          }
          int v6 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
          {
            double v7 = v5 - *(double *)(a1 + 160);
            int v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 128))(*(void *)(a1 + 48));
            *(_DWORD *)uint64_t buf = 68289539;
            *(_DWORD *)__int16 v38 = 0;
            *(_WORD *)&v38[4] = 2082;
            *(void *)&v38[6] = "";
            *(_WORD *)&v38[14] = 2049;
            *(double *)&v38[16] = v7;
            *(_WORD *)&v38[24] = 1025;
            *(_DWORD *)&v38[26] = v8;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#proactive starting proactive\", \"sinceLastProactiveSession_s\":\"%{private}.09f\", \"isDominantDriving\":%{private}hhd}", buf, 0x22u);
          }
          sub_100134750(__p, "proactiveHarvesting");
          sub_100EBBFD8(a1 + 344, (uint64_t *)__p);
          if (v30 < 0) {
            operator delete(__p[0]);
          }
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102313668);
          }
          __int16 v9 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#wigo,on,proactiveHarvest", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102313668);
            }
            LOWORD(v31) = 0;
            __int16 v26 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLPolicyProactive::proactiveHarvesting(BOOL)", "%s\n", v26);
            if (v26 != (char *)buf) {
              free(v26);
            }
          }
          AnalyticsSendEventLazy();
          (*(void (**)(void, void))(**(void **)(a1 + 64) + 16))(*(void *)(a1 + 64), 0);
          *(double *)(a1 + 152) = v5;
          (*(void (**)(void, double))(**(void **)(a1 + 328) + 24))(*(void *)(a1 + 328), v5 + 180.0);
        }
        else
        {
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_102313648);
          }
          id v23 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
          {
            double v24 = *(double *)(a1 + 160);
            *(_DWORD *)uint64_t buf = 134218496;
            *(double *)__int16 v38 = v5 - v24;
            *(_WORD *)&v38[8] = 2048;
            *(double *)&v38[10] = v24 + 3600.0;
            *(_WORD *)&v38[18] = 2048;
            *(double *)&unsigned char v38[20] = v24 + 3600.0 - v5;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "#proactive Last attempted proactive harvesting %.3fs ago - waiting until %.3fs (%.3fs away) before trying again", buf, 0x20u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419560 != -1) {
              dispatch_once(&qword_102419560, &stru_102313648);
            }
            double v27 = *(double *)(a1 + 160);
            int v31 = 134218496;
            double v32 = v5 - v27;
            __int16 v33 = 2048;
            double v34 = v27 + 3600.0;
            __int16 v35 = 2048;
            double v36 = v27 + 3600.0 - v5;
            __int16 v28 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLPolicyProactive::proactiveHarvesting(BOOL)", "%s\n", v28);
            if (v28 != (char *)buf) {
              free(v28);
            }
          }
          (*(void (**)(void, double))(**(void **)(a1 + 328) + 24))(*(void *)(a1 + 328), *(double *)(a1 + 160) + 3600.0);
        }
      }
      else
      {
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_102313648);
        }
        unsigned __int8 v15 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
        {
          double v16 = v5 - *(double *)(a1 + 152);
          *(_DWORD *)uint64_t buf = 68289283;
          *(_DWORD *)__int16 v38 = 0;
          *(_WORD *)&v38[4] = 2082;
          *(void *)&v38[6] = "";
          *(_WORD *)&v38[14] = 2049;
          *(double *)&v38[16] = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#proactive stopping proactive harvest\", \"proactiveHarvestDuration_s\":\"%{private}.09f\"}", buf, 0x1Cu);
        }
        sub_100EBC6AC(a1 + 344);
        if (*(int *)(a1 + 352) >= 1) {
          sub_101AA3824();
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102313668);
        }
        int v17 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#wigo,off,proactiveHarvest", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102313668);
          }
          LOWORD(v31) = 0;
          int v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLPolicyProactive::proactiveHarvesting(BOOL)", "%s\n", v25);
          if (v25 != (char *)buf) {
            free(v25);
          }
        }
        AnalyticsSendEventLazy();
        (*(void (**)(void, void))(**(void **)(a1 + 64) + 24))(*(void *)(a1 + 64), 0);
        *(_DWORD *)(a1 + 172) = 0xFFFF;
        *(void *)(a1 + 152) = 0x7FEFFFFFFFFFFFFFLL;
        *(void *)(a1 + 184) = 0;
        *(void *)(a1 + 176) = 0;
        *(_OWORD *)(a1 + 192) = xmmword_101D1C320;
        __asm { FMOV            V0.2D, #-1.0 }
        *(_OWORD *)(a1 + 208) = _Q0;
        *(_OWORD *)(a1 + 224) = _Q0;
        *(_OWORD *)(a1 + 240) = _Q0;
        *(_DWORD *)(a1 + 256) = 0;
        *(void *)(a1 + 268) = 0;
        *(void *)(a1 + 276) = 0;
        *(void *)(a1 + 260) = 0xBFF0000000000000;
        *(_DWORD *)(a1 + 284) = 0;
        *(void *)(a1 + 288) = 0xBFF0000000000000;
        *(_DWORD *)(a1 + 296) = 0x7FFFFFFF;
        *(void *)(a1 + 308) = 0;
        *(void *)(a1 + 316) = 0;
        *(void *)(a1 + 300) = 0;
        *(unsigned char *)(a1 + 324) = 0;
        *(double *)(a1 + 160) = v5;
        (*(void (**)(void, double))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16), v5);
        (*(void (**)(void, double))(**(void **)(a1 + 328) + 24))(*(void *)(a1 + 328), 1.79769313e308);
      }
      return;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102313648);
    }
    uint64_t v14 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289283;
      *(_DWORD *)__int16 v38 = 0;
      *(_WORD *)&v38[4] = 2082;
      *(void *)&v38[6] = "";
      *(_WORD *)&v38[14] = 1025;
      *(_DWORD *)&v38[16] = a2;
      int v11 = "{\"msg%{public}.0s\":\"#proactive taking no action, already in desired state: \", \"start\":%{private}hhd}";
      int v12 = v14;
      uint32_t v13 = 24;
      goto LABEL_27;
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102313648);
    }
    uint64_t v10 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)__int16 v38 = 0;
      *(_WORD *)&v38[4] = 2082;
      *(void *)&v38[6] = "";
      int v11 = "{\"msg%{public}.0s\":\"#proactive taking no action, gps harvest not supported\"}";
      int v12 = v10;
      uint32_t v13 = 18;
LABEL_27:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, v11, buf, v13);
    }
  }
}

void sub_100131B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100131BA8(uint64_t a1)
{
  return *(double *)(a1 + 152) != 1.79769313e308;
}

uint64_t sub_100131BC0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247F1C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247F1C8))
  {
    sub_100103240();
    byte_10247F1C0 = (sub_1001073D0() & 8) != 0;
    __cxa_guard_release(&qword_10247F1C8);
  }
  return byte_10247F1C0;
}

void sub_100131C24(_Unwind_Exception *a1)
{
}

void sub_100131C3C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5 != *a3)
  {
    do
    {
      v5 -= 248;
      sub_10091F570((uint64_t)(a3 + 2), v5);
    }
    while (v5 != v6);
  }
  a3[1] = v6;
  sub_1000E1294(&v52, (uint64_t)"CLFenceDatabase::getFencesForBundleIncludingOnBehalf", 0);
  sub_10010F274((uint64_t)&v50);
  double v7 = sub_100132EFC(&v51, (uint64_t)"SELECT ", 7);
  int v8 = sub_100132EFC(v7, (uint64_t)"BundleId", 8);
  __int16 v9 = sub_100132EFC(v8, (uint64_t)", ", 2);
  uint64_t v10 = sub_100132EFC(v9, (uint64_t)"Name", 4);
  int v11 = sub_100132EFC(v10, (uint64_t)", ", 2);
  int v12 = sub_100132EFC(v11, (uint64_t)"Distance", 8);
  uint32_t v13 = sub_100132EFC(v12, (uint64_t)", ", 2);
  uint64_t v14 = sub_100132EFC(v13, (uint64_t)"DesiredAccuracy", 15);
  unsigned __int8 v15 = sub_100132EFC(v14, (uint64_t)", ", 2);
  double v16 = sub_100132EFC(v15, (uint64_t)"SetupComplete", 13);
  int v17 = sub_100132EFC(v16, (uint64_t)", ", 2);
  __int16 v18 = sub_100132EFC(v17, (uint64_t)"Timestamp", 9);
  int v19 = sub_100132EFC(v18, (uint64_t)", ", 2);
  int v20 = sub_100132EFC(v19, (uint64_t)"MonitorFlags", 12);
  uint64_t v21 = sub_100132EFC(v20, (uint64_t)", ", 2);
  __int16 v22 = sub_100132EFC(v21, (uint64_t)"OnBehalfBundleId", 16);
  id v23 = sub_100132EFC(v22, (uint64_t)", ", 2);
  double v24 = sub_100132EFC(v23, (uint64_t)"ReferenceFrame", 14);
  int v25 = sub_100132EFC(v24, (uint64_t)", ", 2);
  __int16 v26 = sub_100132EFC(v25, (uint64_t)"FenceForeignKey", 15);
  double v27 = sub_100132EFC(v26, (uint64_t)", ", 2);
  __int16 v28 = sub_100132EFC(v27, (uint64_t)"HandoffTag", 10);
  int v29 = sub_100132EFC(v28, (uint64_t)", ", 2);
  char v30 = sub_100132EFC(v29, (uint64_t)"FenceHandOffDeviceId", 20);
  int v31 = sub_100132EFC(v30, (uint64_t)".", 1);
  double v32 = sub_100132EFC(v31, (uint64_t)"DeviceId", 8);
  __int16 v33 = sub_100132EFC(v32, (uint64_t)" FROM ", 6);
  double v34 = sub_100132EFC(v33, (uint64_t)"GeoFence", 8);
  __int16 v35 = sub_100132EFC(v34, (uint64_t)" INNER JOIN ", 12);
  double v36 = sub_100132EFC(v35, (uint64_t)"FenceHandOffDeviceId", 20);
  int v37 = sub_100132EFC(v36, (uint64_t)" ON ", 4);
  __int16 v38 = sub_100132EFC(v37, (uint64_t)"GeoFence", 8);
  int v39 = sub_100132EFC(v38, (uint64_t)".", 1);
  __int16 v40 = sub_100132EFC(v39, (uint64_t)"DeviceIdIndex", 13);
  int v41 = sub_100132EFC(v40, (uint64_t)" = ", 3);
  __int16 v42 = sub_100132EFC(v41, (uint64_t)"FenceHandOffDeviceId", 20);
  int v43 = sub_100132EFC(v42, (uint64_t)".", 1);
  __int16 v44 = sub_100132EFC(v43, (uint64_t)"DeviceIdIndex", 13);
  int v45 = sub_100132EFC(v44, (uint64_t)" WHERE ", 7);
  uint64_t v46 = sub_100132EFC(v45, (uint64_t)"BundleId", 8);
  uint64_t v47 = sub_100132EFC(v46, (uint64_t)"=? OR ", 6);
  uint64_t v48 = sub_100132EFC(v47, (uint64_t)"OnBehalfBundleId", 16);
  sub_100132EFC(v48, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if (v54 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_100132DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  sub_101A129A8((uint64_t)&a56);
  sub_1000E1098((id *)&STACK[0x290]);
  _Unwind_Resume(a1);
}

void *sub_100132EFC(void *a1, uint64_t a2, uint64_t a3)
{
  std::ostream::sentry::sentry();
  if (v13)
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_1001330A0(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  std::ostream::sentry::~sentry();
  return a1;
}

void sub_100133038(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  std::ostream::sentry::~sentry();
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x100133018);
}

void sub_10013308C(_Unwind_Exception *a1)
{
}

uint64_t sub_1001330A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      sub_1001E23E0(__p, v12, __c);
      char v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_10013320C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **sub_100133228(void **result)
{
  unint64_t v1 = (unint64_t)*result;
  int64x2_t v2 = *(int64x2_t *)(result + 1);
  int64x2_t v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64((unint64_t)*result)), 3uLL);
  unint64_t v4 = 0xEF7BDEF7BDEF7BDFLL * v3.i64[0];
  unint64_t v5 = v4;
  if (0xEF7BDEF7BDEF7BDFLL * v3.i64[1] > v4)
  {
    uint64_t v6 = (uint64_t *)result;
    uint64_t v7 = (uint64_t)(result + 2);
    uint64_t v14 = v7;
    if (v2.i64[0] == v1)
    {
      int v8 = 0;
      uint64_t v9 = 0;
    }
    else
    {
      int v8 = (char *)sub_1009204C4(v7, v4);
    }
    uint64_t v10 = v8;
    uint64_t v11 = &v8[248 * v5];
    int64_t v12 = v11;
    char v13 = &v8[248 * v9];
    sub_10092110C(v6, &v10);
    return sub_1009212CC(&v10);
  }
  return result;
}

void sub_1001332E8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_100133310(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  sub_10010F274((uint64_t)&v33);
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1023231D8);
  }
  uint64_t v6 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 136380675;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "iB: Retrieving fences for bundle,%{private}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023231D8);
    }
    if (*((char *)a2 + 23) >= 0) {
      int v31 = a2;
    }
    else {
      int v31 = (uint64_t *)*a2;
    }
    int v35 = 136380675;
    double v36 = v31;
    double v32 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBeaconFenceDatabase::getFencesForBundleIncludingOnBehalf(const std::string &, CLBTLEBeaconRegion_Type::MonitoredRegions &)", "%s\n", v32);
    if (v32 != (char *)buf) {
      free(v32);
    }
  }
  sub_1000E1294((uint64_t *)&v35, (uint64_t)"CLBeaconFenceDatabase::getFencesForBundleIncludingOnBehalf", 0);
  int v8 = sub_100132EFC(&v34, (uint64_t)"SELECT ", 7);
  uint64_t v9 = sub_100132EFC(v8, (uint64_t)"BundleIdentifier", 16);
  uint64_t v10 = sub_100132EFC(v9, (uint64_t)", ", 2);
  uint64_t v11 = sub_100132EFC(v10, (uint64_t)"Identifier", 10);
  int64_t v12 = sub_100132EFC(v11, (uint64_t)", ", 2);
  char v13 = sub_100132EFC(v12, (uint64_t)"ProximityUUID", 13);
  uint64_t v14 = sub_100132EFC(v13, (uint64_t)", ", 2);
  uint64_t v15 = sub_100132EFC(v14, (uint64_t)"Major", 5);
  double v16 = sub_100132EFC(v15, (uint64_t)", ", 2);
  int v17 = sub_100132EFC(v16, (uint64_t)"Minor", 5);
  char v18 = sub_100132EFC(v17, (uint64_t)", ", 2);
  int v19 = sub_100132EFC(v18, (uint64_t)"DefinitionMask", 14);
  int v20 = sub_100132EFC(v19, (uint64_t)", ", 2);
  uint64_t v21 = sub_100132EFC(v20, (uint64_t)"Options", 7);
  __int16 v22 = sub_100132EFC(v21, (uint64_t)", ", 2);
  id v23 = sub_100132EFC(v22, (uint64_t)"OnBehalfBundleIdentifier", 24);
  double v24 = sub_100132EFC(v23, (uint64_t)" FROM ", 6);
  int v25 = sub_100132EFC(v24, (uint64_t)"BeaconFences", 12);
  __int16 v26 = sub_100132EFC(v25, (uint64_t)" WHERE ", 7);
  double v27 = sub_100132EFC(v26, (uint64_t)"BundleIdentifier", 16);
  __int16 v28 = sub_100132EFC(v27, (uint64_t)"=? OR ", 6);
  int v29 = sub_100132EFC(v28, (uint64_t)"OnBehalfBundleIdentifier", 24);
  sub_100132EFC(v29, (uint64_t)"=?", 2);
  sub_10013415C(a3);
  std::stringbuf::str();
  if (v38 >= 0) {
    char v30 = buf;
  }
  else {
    char v30 = *(uint8_t **)buf;
  }
  sub_10014D518(a1, (uint64_t)v30);
}

void sub_100133E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,id a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  sub_1000E1098(&a49);
  sub_101A129A8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

BOOL sub_100133F10(sqlite3_stmt *a1, int a2, char *__s)
{
  int v6 = strlen(__s);
  int v7 = sqlite3_bind_text(a1, a2, __s, v6, 0);
  int v12 = v7;
  if (v7)
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    int v8 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68290307;
      int v14 = 0;
      __int16 v15 = 2082;
      double v16 = "";
      __int16 v17 = 2081;
      char v18 = __s;
      __int16 v19 = 1026;
      int v20 = a2;
      __int16 v21 = 1040;
      int v22 = 4;
      __int16 v23 = 2098;
      double v24 = &v12;
      __int16 v25 = 2081;
      __int16 v26 = sqlite3_sql(a1);
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not bind\", \"value\":%{private, location:escape_only}s, \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x3Cu);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v9 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      uint64_t v10 = sqlite3_sql(a1);
      *(_DWORD *)uint64_t buf = 68290307;
      int v14 = 0;
      __int16 v15 = 2082;
      double v16 = "";
      __int16 v17 = 2081;
      char v18 = __s;
      __int16 v19 = 1026;
      int v20 = a2;
      __int16 v21 = 1040;
      int v22 = 4;
      __int16 v23 = 2098;
      double v24 = &v12;
      __int16 v25 = 2081;
      __int16 v26 = v10;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not bind", "{\"msg%{public}.0s\":\"Could not bind\", \"value\":%{private, location:escape_only}s, \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x3Cu);
    }
  }
  return v7 == 0;
}

void sub_10013415C(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    int64x2_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        unint64_t v5 = (uint64_t *)v3[1];
        (*(void (**)(void))v3[2])();
        operator delete(v3);
        int64x2_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t sub_1001341F0(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  unsigned int v7 = [v6 isAuthLimited];
  if (v7) {
    id v6 = [*(id *)(a1 + 136) primaryKeyPathForAuthLimitedKeyPath:v6];
  }
  int v8 = sub_100122128(a1, (uint64_t)v6, &xmmword_101D82EB8);
  unsigned int v40 = [v6 isValidCKP];
  if (v40)
  {
    if (((v7 | sub_1001490E0((id *)a1, (uint64_t)v6, (uint64_t)v8)) & 1) == 0)
    {
      uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
      if ((v9 & 0x80u) != 0) {
        uint64_t v9 = *(void *)(a3 + 8);
      }
      if (!v9) {
        return 0;
      }
    }
    sub_100138BE0(a1, (uint64_t)v6, (uint64_t)v8);
  }
  else
  {
    [*(id *)(a1 + 1080) removeObjectForKey:[a2 legacyClientKey]];
    [*(id *)(a1 + 1072) setClientsAuthorizationMap:[*(id *)(a1 + 1080) copy]];
    [a2 isValidCKP];
    [*(id *)(a1 + 1072) setPersistentStoreDictionary:0 forClient:[a2 legacyClientKey]];
    id v6 = a2;
  }
  uint64_t v10 = *(void **)(a1 + 816);
  if (v10 != (void *)(a1 + 824))
  {
    do
    {
      id v11 = sub_100138248(v10[5], 0);
      sub_100134A10(v10[5], __p);
      if ([v11 isAuthLimited])
      {
        id v12 = [*(id *)(a1 + 136) primaryKeyPathForAuthLimitedKeyPath:v11];
        id v13 = [v11 limitingCKP];
        if (sub_100134804(a1, v6, v12))
        {
          int v14 = sub_100068950(a1, (uint64_t)v13, &xmmword_101D82EB8);
          __int16 v15 = v8;
          if (!v8) {
            goto LABEL_35;
          }
        }
        else
        {
          if (!sub_100134804(a1, v6, v13)) {
            goto LABEL_35;
          }
          __int16 v15 = sub_100068950(a1, (uint64_t)v12, &xmmword_101D82EB8);
          int v14 = v8;
          if (!v15) {
            goto LABEL_35;
          }
        }
        if (v14)
        {
          unsigned int v18 = [(CLClientManagerAuthorizationContext *)v14 isAuthorizedForServiceType:12];
          int v19 = [(CLClientManagerAuthorizationContext *)v14 transientAwareRegistrationResult];
          int v20 = v18 ? 1 : 2;
          uint64_t v21 = sub_1001081BC(v19, 5, v20, 0, 0, 0, 0);
          __int16 v23 = -[CLClientManagerAuthorizationContext authorizationContextByANDingServiceMaskTuple:](v15, "authorizationContextByANDingServiceMaskTuple:", v21, v22);
          if (v23 != v15)
          {
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022C97E8);
            }
            double v24 = qword_102419528;
            if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
            {
              __int16 v25 = __p;
              if (v42 < 0) {
                __int16 v25 = (void **)__p[0];
              }
              *(_DWORD *)uint64_t buf = 68289538;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)__int16 v44 = 2082;
              *(void *)&v44[2] = "";
              *(_WORD *)&v44[10] = 2114;
              *(void *)&v44[12] = v11;
              *(_WORD *)&v44[20] = 2082;
              *(void *)&v44[22] = v25;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Limiting identity's service-mask imposed on specified identity\", \"AffectedIdentity\":%{public, location:escape_only}@, \"AffectedSubIdentity\":%{public, location:escape_only}s}", buf, 0x26u);
            }
            __int16 v15 = v23;
          }
        }
      }
      else
      {
        BOOL v16 = sub_100134804(a1, v6, v11);
        if (v8) {
          BOOL v17 = v16;
        }
        else {
          BOOL v17 = 0;
        }
        __int16 v15 = v8;
        if (!v17) {
          goto LABEL_35;
        }
      }
      sub_100148448(v10[5], v15);
LABEL_35:
      if (v42 < 0) {
        operator delete(__p[0]);
      }
      __int16 v26 = (void *)v10[1];
      if (v26)
      {
        do
        {
          double v27 = v26;
          __int16 v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          double v27 = (void *)v10[2];
          BOOL v28 = *v27 == (void)v10;
          uint64_t v10 = v27;
        }
        while (!v28);
      }
      uint64_t v10 = v27;
    }
    while (v27 != (void *)(a1 + 824));
  }
  int v29 = *(void **)(a1 + 888);
  if (v29 != (void *)(a1 + 896))
  {
    do
    {
      char v30 = (void *)sub_10014D19C(v29[5]);
      if (sub_100134804(a1, v6, v30)) {
        sub_1011C12C8((id *)v29[5], v8);
      }
      int v31 = (void *)v29[1];
      if (v31)
      {
        do
        {
          double v32 = v31;
          int v31 = (void *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          double v32 = (void *)v29[2];
          BOOL v28 = *v32 == (void)v29;
          int v29 = v32;
        }
        while (!v28);
      }
      int v29 = v32;
    }
    while (v32 != (void *)(a1 + 896));
  }
  uint64_t v33 = *(void **)(a1 + 912);
  if (v33 != (void *)(a1 + 920))
  {
    do
    {
      uint64_t v34 = (id *)v33[4];
      int v35 = (void *)sub_10014D19C((uint64_t)v34);
      if (sub_100134804(a1, v6, v35)) {
        sub_1011C12C8(v34, v8);
      }
      double v36 = (void *)v33[1];
      if (v36)
      {
        do
        {
          int v37 = v36;
          double v36 = (void *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          int v37 = (void *)v33[2];
          BOOL v28 = *v37 == (void)v33;
          uint64_t v33 = v37;
        }
        while (!v28);
      }
      uint64_t v33 = v37;
    }
    while (v37 != (void *)(a1 + 920));
  }
  if (v40)
  {
    char v38 = *(void **)(a1 + 136);
    *(void *)uint64_t buf = _NSConcreteStackBlock;
    *(void *)__int16 v44 = 3221225472;
    *(void *)&v44[8] = sub_100124700;
    *(void *)&v44[16] = &unk_1022C8FD8;
    *(void *)&v44[24] = v6;
    uint64_t v45 = a1;
    [v38 iterateIdentitiesRelatedToKeyPath:v6 withBlock:buf];
    sub_1001019E0(a1, (uint64_t)v6);
  }
  return 1;
}

void sub_100134718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100134750(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000E6574();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    id v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    id v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

BOOL sub_100134804(uint64_t a1, void *a2, void *a3)
{
  BOOL result = 0;
  if (a2)
  {
    if (a3)
    {
      BOOL result = +[CLAuthorizationDatabase keyPath:a2 sharesAuthWithKeyPath:a3];
      if (result)
      {
        if ([a2 isEqual:a3]) {
          return 1;
        }
        [a2 cppClientKey];
        uint64_t v7 = sub_10012FFE0(a1 + 680, (const void **)&__p);
        if (SBYTE3(v16) < 0) {
          operator delete(__p);
        }
        [a3 cppClientKey];
        uint64_t v8 = sub_10012FFE0(a1 + 680, (const void **)&__p);
        uint64_t v9 = a1 + 688;
        if (SBYTE3(v16) < 0) {
          operator delete(__p);
        }
        if (v9 == v7 && v9 == v8)
        {
          return 1;
        }
        else
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          uint64_t v10 = qword_102419538;
          BOOL v11 = os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT);
          BOOL result = 0;
          if (v11)
          {
            long long __p = (void *)68290050;
            __int16 v13 = 2082;
            int v14 = "";
            __int16 v15 = 2114;
            BOOL v16 = a2;
            __int16 v17 = 1026;
            BOOL v18 = v9 != v7;
            __int16 v19 = 2114;
            int v20 = a3;
            __int16 v21 = 1026;
            BOOL v22 = v9 != v8;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Auth sharing overridden\", \"ckpA\":%{public, location:escape_only}@, \"ckpAIsBeneficiary\":%{public}hhd, \"ckpB\":%{public, location:escape_only}@, \"ckpBIsBeneficiary\":%{public}hhd}", (uint8_t *)&__p, 0x32u);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

void sub_1001349E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100134A10@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int64x2_t v3 = *(void **)(a1 + 56);
  if (v3) {
    size_t v4 = (char *)[v3 UTF8String];
  }
  else {
    size_t v4 = "";
  }

  return sub_100134750(a2, v4);
}

void sub_100134B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100134BAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100135B28(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

void sub_100137D84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100137F00(uint64_t a1, uint64_t a2, int a3, unsigned char *a4)
{
  *a4 = 0;
  id v8 = sub_100138248(a2, 0);
  uint64_t v9 = *(void **)(a1 + 816);
  if (v9 != (void *)(a1 + 824))
  {
    id v10 = v8;
    int v11 = 0;
    while (1)
    {
      uint64_t v12 = v9[5];
      unsigned int v13 = [sub_100138248(v12, 0) isEqual:v10];
      if (v12 == a2) {
        int v14 = a3;
      }
      else {
        int v14 = 1;
      }
      if ((v13 & v14) != 1) {
        goto LABEL_11;
      }
      ++v11;
      if (!sub_1001382A0(v12, 2)) {
        goto LABEL_11;
      }
      sub_100134750(__p, "kCLConnectionMessageRanging");
      char v15 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v12 + 48))(v12, __p);
      char v16 = v15;
      if (SHIBYTE(v28) < 0) {
        break;
      }
      if (v15) {
        goto LABEL_10;
      }
LABEL_11:
      __int16 v17 = (void *)v9[1];
      if (v17)
      {
        do
        {
          BOOL v18 = v17;
          __int16 v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          BOOL v18 = (void *)v9[2];
          BOOL v19 = *v18 == (void)v9;
          uint64_t v9 = v18;
        }
        while (!v19);
      }
      uint64_t v9 = v18;
      if (v18 == (void *)(a1 + 824)) {
        goto LABEL_21;
      }
    }
    operator delete(*(void **)__p);
    if ((v16 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_10:
    *a4 = 1;
    goto LABEL_11;
  }
  int v11 = 0;
LABEL_21:
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  int v20 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    id v21 = sub_100138248(a2, 0);
    int v22 = *a4;
    *(_DWORD *)long long __p = 138412802;
    *(void *)&__p[4] = v21;
    __int16 v25 = 1024;
    int v26 = v11;
    __int16 v27 = 1024;
    int v28 = v22;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "client, '%@', app's client cnt, %d, active, %d", __p, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    sub_100138248(a2, 0);
    __int16 v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::getAggregateRangeAppInfo(CLDaemonClient *, BOOL, BOOL &)", "%s\n", v23);
    if (v23 != __p) {
      free(v23);
    }
  }
}

void sub_100138224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100138248(uint64_t a1, int a2)
{
  if (!a2 || ([*(id *)(a1 + 48) isAuthLimited] & 1) == 0) {
    return *(id *)(a1 + 48);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 48);

  return sub_1007BEA40(v3, v4);
}

id sub_1001382A0(uint64_t a1, char a2)
{
  return [*(id *)(a1 + 112) isAuthorizedForServiceTypeMask:1 << a2];
}

void sub_1001382B4(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X8>)
{
  *a4 = 0;
  *(int64x2_t *)(a4 + 8) = vdupq_n_s64(0x7FF0000000000000uLL);
  *((_DWORD *)a4 + 6) = 0;
  *(_DWORD *)(a4 + 27) = 0;
  uint64_t v7 = (void *)a1[102];
  id v8 = a1 + 103;
  if (v7 == a1 + 103)
  {
    int v10 = 0;
  }
  else
  {
    int v10 = 0;
    do
    {
      uint64_t v11 = v7[5];
      unsigned int v12 = [sub_100138248(v11, 0) isEqual:a2];
      BOOL v13 = v11 != a3 || a3 == 0;
      if (v13 && v12 != 0)
      {
        sub_100138844(v11, (uint64_t)buf);
        if ((_BYTE)v49) {
          sub_100138B10((double *)a4, (double *)buf);
        }
        ++v10;
      }
      char v15 = (void *)v7[1];
      if (v15)
      {
        do
        {
          char v16 = v15;
          char v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          char v16 = (void *)v7[2];
          BOOL v13 = *v16 == (void)v7;
          uint64_t v7 = v16;
        }
        while (!v13);
      }
      uint64_t v7 = v16;
    }
    while (v16 != v8);
  }
  __int16 v17 = (void *)a1[111];
  if (v17 == a1 + 112)
  {
    BOOL v20 = 0;
    int v19 = 0;
    int v18 = 0;
  }
  else
  {
    int v18 = 0;
    int v19 = 0;
    BOOL v20 = 0;
    do
    {
      uint64_t v21 = v17[5];
      if ([(id)sub_10014D19C(v21) isEqual:a2])
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v21 + 24))(v21) == 1)
        {
          ++v18;
          sub_10064BF14(v21, (uint64_t)buf);
          BOOL v20 = (buf[0] | v20) != 0;
          sub_100138B10((double *)a4, (double *)buf);
        }
        else if ((*(unsigned int (**)(uint64_t))(*(void *)v21 + 24))(v21) == 3)
        {
          ++v19;
        }
      }
      int v22 = (void *)v17[1];
      if (v22)
      {
        do
        {
          __int16 v23 = v22;
          int v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          __int16 v23 = (void *)v17[2];
          BOOL v13 = *v23 == (void)v17;
          __int16 v17 = v23;
        }
        while (!v13);
      }
      __int16 v17 = v23;
    }
    while (v23 != a1 + 112);
  }
  int v39 = v18;
  double v24 = (void *)a1[114];
  __int16 v25 = a1 + 115;
  if (v24 == a1 + 115)
  {
    int v27 = 0;
    int v26 = 0;
  }
  else
  {
    int v26 = 0;
    int v27 = 0;
    do
    {
      uint64_t v28 = v24[4];
      if ([(id)sub_10014D19C(v28) isEqual:a2])
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v28 + 24))(v28) == 1)
        {
          ++v27;
          sub_10064BF14(v28, (uint64_t)buf);
          BOOL v20 = (buf[0] | v20) != 0;
          sub_100138B10((double *)a4, (double *)buf);
        }
        else if ((*(unsigned int (**)(uint64_t))(*(void *)v28 + 24))(v28) == 3)
        {
          ++v26;
        }
      }
      int v29 = (void *)v24[1];
      if (v29)
      {
        do
        {
          char v30 = v29;
          int v29 = (void *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          char v30 = (void *)v24[2];
          BOOL v13 = *v30 == (void)v24;
          double v24 = v30;
        }
        while (!v13);
      }
      double v24 = v30;
    }
    while (v30 != v25);
  }
  if ((v26 + v19 < 0) ^ __OFADD__(v26, v19) | (v26 + v19 == 0)) {
    char v31 = 0;
  }
  else {
    char v31 = 1;
  }
  a4[30] |= v20 & v31;
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  double v32 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    int v33 = *a4;
    int v34 = a4[29];
    int v35 = a4[28];
    uint64_t v36 = *((void *)a4 + 1);
    uint64_t v37 = *((void *)a4 + 2);
    *(_DWORD *)uint64_t buf = 138414850;
    uint64_t v41 = a2;
    __int16 v42 = 1024;
    int v43 = v10;
    __int16 v44 = 1024;
    int v45 = v39;
    __int16 v46 = 1024;
    int v47 = v19;
    __int16 v48 = 1024;
    int v49 = v27;
    __int16 v50 = 1024;
    int v51 = v26;
    __int16 v52 = 1024;
    int v53 = v33;
    __int16 v54 = 1024;
    int v55 = v34;
    __int16 v56 = 1024;
    int v57 = v35;
    __int16 v58 = 2048;
    uint64_t v59 = v36;
    __int16 v60 = 2048;
    uint64_t v61 = v37;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "client, '%@', app's CLDC cnt, %d, DICLU cnt[connected: %d, disconnected: %d], DICBAS cnt[connected: %d, disconnected: %d], active, %d, spectator, %d, batchEnabled, %d, desiredAccuracy, %.2f, distanceFilter, %.2f", buf, 0x50u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    char v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLClientManager_Type::ClientState CLClientManager::getAggregateLocationAppInfo(CLClientKeyPath *, CLDaemonClient *)", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
  }
}

double sub_100138844@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 32) = 0;
  uint64_t v4 = sub_1000E9974(a1);
  if (v4)
  {
    sub_1001388E4((uint64_t)v4, (uint64_t)&v9);
    long long v5 = v10;
    *(_OWORD *)a2 = v9;
    *(_OWORD *)(a2 + 16) = v5;
    *(unsigned char *)(a2 + 32) = v11;
  }
  id v6 = sub_100138A84(a1);
  if (v6)
  {
    sub_100C98360((uint64_t)v6, (uint64_t)&v9);
    if (*(unsigned char *)(a2 + 32))
    {
      if (v11) {
        sub_100138B10((double *)a2, (double *)&v9);
      }
    }
    else
    {
      double result = *(double *)&v9;
      long long v8 = v10;
      *(_OWORD *)a2 = v9;
      *(_OWORD *)(a2 + 16) = v8;
      *(unsigned char *)(a2 + 32) = v11;
    }
  }
  return result;
}

void sub_1001388E4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = *(unsigned char *)(a1 + 241);
  uint64_t v5 = *(void *)(a1 + 112);
  if (!sub_100138A70(a1, 4)) {
    goto LABEL_9;
  }
  sub_100134750(&__p, "kCLConnectionMessageLocation");
  char v6 = sub_10012E364(a1);
  char v7 = v6;
  if ((v14 & 0x80000000) == 0)
  {
    if (v6) {
      goto LABEL_4;
    }
LABEL_9:
    char v11 = 0;
    char v12 = 0;
    goto LABEL_10;
  }
  operator delete(__p);
  if ((v7 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_4:
  [objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", @"kCLConnectionMessageDesiredAccuracyKey") doubleValue];
  double v9 = v8;
  [objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", @"kCLConnectionMessageDistanceFilterKey") doubleValue];
  if (fabs(v9 + -2147483650.0) >= 2.22044605e-16
    && fabs(v9 + -2147483650.0) >= 2.22044605e-16
    && fabs(v9 + -2147483640.0) >= 2.22044605e-16)
  {
    char v12 = 0;
    char v11 = 1;
    goto LABEL_11;
  }
  char v11 = 0;
  char v12 = 1;
LABEL_10:
  double v9 = INFINITY;
  uint64_t v10 = 0x7FF0000000000000;
LABEL_11:
  *(unsigned char *)a2 = v11;
  *(double *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = v10;
  *(_DWORD *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 28) = v4;
  *(unsigned char *)(a2 + 29) = v12;
  *(unsigned char *)(a2 + 30) = v5 != 0;
  *(unsigned char *)(a2 + 32) = 1;
}

void sub_100138A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100138A70(uint64_t a1, char a2)
{
  return [*(id *)(a1 + 16) isAuthorizedForServiceTypeMask:1 << a2];
}

double *sub_100138A84(uint64_t a1)
{
  double result = (double *)sub_1000E9A00((void *)(a1 + 288), (uint64_t *)&v5);
  if (result)
  {
    uint64_t v2 = (const void *)*((void *)result + 3);
    if (v2)
    {
      if (result) {
        return result;
      }
    }
    else
    {
      double result = (double *)sub_101A86F60();
    }
    uint64_t v3 = (double *)sub_101A870C4(result);
    return sub_100138B10(v3, v4);
  }
  return result;
}

double *sub_100138B10(double *result, double *a2)
{
  *(unsigned char *)double result = (*(unsigned __int8 *)result | *(unsigned __int8 *)a2) != 0;
  *((unsigned char *)result + 28) = (*((unsigned __int8 *)result + 28) | *((unsigned __int8 *)a2 + 28)) != 0;
  *((unsigned char *)result + 29) = (*((unsigned __int8 *)result + 29) | *((unsigned __int8 *)a2 + 29)) != 0;
  *((unsigned char *)result + 30) = (*((unsigned __int8 *)result + 30) | *((unsigned __int8 *)a2 + 30)) != 0;
  double v2 = result[1];
  uint64_t v3 = 0x41DFFFFFFE400000;
  if (v2 != 2147483640.0)
  {
    double v4 = a2[1];
    if (v4 != 2147483640.0)
    {
      uint64_t v3 = 0x41DFFFFFFE800000;
      if (v2 != 2147483640.0 && v4 != 2147483640.0)
      {
        if (v4 >= v2) {
          uint64_t v3 = *((void *)result + 1);
        }
        else {
          uint64_t v3 = *((void *)a2 + 1);
        }
      }
    }
  }
  *((void *)result + 1) = v3;
  double v6 = a2[2];
  if (v6 >= result[2]) {
    double v6 = result[2];
  }
  result[2] = v6;
  return result;
}

id sub_100138BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  id result = [v5 isValidCKP];
  if (result)
  {
    char v7 = *(void **)(a1 + 136);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    long long v8[2] = sub_100124600;
    void v8[3] = &unk_1022C8FB0;
    void v8[5] = a3;
    v8[6] = a1;
    v8[4] = v5;
    return [v7 iterateIdentitiesRelatedToKeyPath:v5 withBlock:v8];
  }
  return result;
}

void sub_100138C88(uint64_t a1, void *a2, void *a3, void *a4)
{
  if (objc_opt_class())
  {
    memset(&__p, 0, sizeof(__p));
    if ([a4 isValidCKP])
    {
      id v8 = sub_100103E24(a1, (uint64_t)a4);
      if (v8) {
        [v8 cppClientKey];
      }
      else {
        memset(buf, 0, 24);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = *(std::string *)buf;
    }
    else
    {
      std::string::assign(&__p, (const std::string::value_type *)[@"com.apple.locationd.all-location-clients-stop" UTF8String]);
    }
    uint64_t v10 = sub_100103284(a3, (unsigned __int8 *)&__p);
    char v11 = v10;
    if (v10 && *((double *)v10 + 5) > 0.0)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      char v12 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t buf = 68289283;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2081;
        *(void *)&buf[20] = p_p;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Updating location consumption info on stop\", \"Client\":%{private, location:escape_only}s}", buf, 0x1Cu);
      }
      double Current = CFAbsoluteTimeGetCurrent();
      double v15 = *((double *)v11 + 5);
      if (Current <= v15)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        __int16 v17 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
        {
          uint64_t v18 = *((void *)v11 + 5);
          *(_DWORD *)uint64_t buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&unsigned char buf[18] = 2050;
          *(void *)&buf[20] = v18;
          __int16 v25 = 2050;
          double v26 = Current;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Detected CFAbsoluteTime rollback when writing usage score\", \"PreviousTimestamp\":\"%{public}f\", \"Timestamp\":\"%{public}f\"}", buf, 0x26u);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
        }
        int v19 = qword_102419538;
        if (os_signpost_enabled((os_log_t)qword_102419538))
        {
          uint64_t v20 = *((void *)v11 + 5);
          *(_DWORD *)uint64_t buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&unsigned char buf[18] = 2050;
          *(void *)&buf[20] = v20;
          __int16 v25 = 2050;
          double v26 = Current;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Detected CFAbsoluteTime rollback when writing usage score", "{\"msg%{public}.0s\":\"Detected CFAbsoluteTime rollback when writing usage score\", \"PreviousTimestamp\":\"%{public}f\", \"Timestamp\":\"%{public}f\"}", buf, 0x26u);
        }
        uint64_t v16 = 0;
      }
      else
      {
        uint64_t v16 = (int)(Current - v15);
      }
      *((_DWORD *)v11 + 12) += v16;
      *((void *)v11 + 5) = 0;
      id v21 = objc_alloc_init((Class)CLPLocationConsumptionScoreInfo);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v22 = &__p;
      }
      else {
        int v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      [v21 setClientKey:[NSString stringWithUTF8String:v22]];
      [v21 setStopTime:Current];
      [v21 setScore:v16];
      [a2 writeSecondaryObject:v21 toField:1];
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    double v9 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPLocationConsumptionScoreInfo doesn't exist in this platform.\"}", buf, 0x12u);
    }
  }
}

void sub_1001390C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001390EC(uint64_t a1, void *a2, uint64_t a3)
{
  sub_100103240();
  if (sub_1001037EC())
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    double v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      char v7 = [+[NSUUID UUID] UUIDString];
      *(_DWORD *)uint64_t buf = 68289794;
      int v12 = 0;
      __int16 v13 = 2082;
      char v14 = "";
      __int16 v15 = 2114;
      uint64_t v16 = a2;
      __int16 v17 = 2114;
      uint64_t v18 = a3;
      __int16 v19 = 2082;
      uint64_t v20 = [(NSString *)v7 UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#SystemStatus Publishing receiving location interval begin\", \"Client\":%{public, location:escape_only}@, \"AttributionIdentifier\":%{public, location:escape_only}@, \"MessageUUID\":%{public, location:escape_only}s}", buf, 0x30u);
    }
    else
    {
      char v7 = 0;
    }
    id v8 = *(void **)(a1 + 400);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_10001837C;
    v10[3] = &unk_1022C8F60;
    v10[4] = a3;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    long long v9[2] = sub_1007ADC40;
    void v9[3] = &unk_10229FED8;
    v9[4] = v7;
    [v8 updateVolatileData:v10 completion:v9];
    if (_os_feature_enabled_impl()) {
      sub_1007ADD2C(a1, *(void **)(a1 + 544), a1 + 504, a2);
    }
  }
}

uint64_t sub_1001392EC(uint64_t a1, unsigned int a2, uint64_t a3, const std::string *a4, uint64_t a5, double a6, double a7, double a8)
{
  unsigned int v215 = a2;
  double v213 = a7;
  double v214 = a6;
  if ((a2 & 0xFFFFFFF7) - 1 >= 2)
  {
    sub_101A9D8EC();
    __break(1u);
    goto LABEL_312;
  }
  sub_10014F674((uint64_t)&v210, &v215);
  std::string::operator=(&v212, a4);
  long long v14 = *(_OWORD *)(a5 + 16);
  long long v207 = *(_OWORD *)a5;
  long long v208 = v14;
  uint64_t v209 = *(void *)(a5 + 32);
  uint64_t v15 = sub_10015EB2C(a1, v210);
  uint64_t v16 = v15;
  id v8 = __p;
  if (!*(unsigned char *)v15)
  {
    double v9 = &qword_102419000;
    if (qword_102419380 == -1)
    {
LABEL_33:
      int v33 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v34 = v215;
        int v35 = sub_100147F50(v215);
        *(_DWORD *)uint64_t buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v34;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)(v8 + 154) = v35;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, type, %d, %s, not active", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v9[112] != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        unsigned int v149 = v215;
        long long v150 = sub_100147F50(v215);
        *(_DWORD *)long long v223 = 67109378;
        *(_DWORD *)&v223[4] = v149;
        *(_WORD *)&v223[8] = 2080;
        *(void *)(v8 + 90) = v150;
        __int16 v151 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v151);
        if (v151 != buf) {
          free(v151);
        }
      }
      goto LABEL_36;
    }
LABEL_312:
    dispatch_once(&qword_102419380, &stru_10230D000);
    goto LABEL_33;
  }
  sub_100146674((uint64_t)&v210, a3, v214, v213, *(double *)(v15 + 152), *(double *)(v15 + 160));
  if (!sub_1001447B8((unsigned int *)&v210))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    uint64_t v37 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134284545;
      *(double *)&uint8_t buf[4] = v214;
      *(_WORD *)&unsigned char buf[12] = 2049;
      *(double *)&unsigned char buf[14] = v213;
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&uint8_t buf[24] = v210;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = DWORD1(v210);
      *(_WORD *)&buf[34] = 1024;
      *(_DWORD *)&unsigned char buf[36] = DWORD2(v210);
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "@TileError, RequestID, ll, %{private}.3lf, %{private}.3lf, tid, %d, %d, %d", buf, 0x28u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_50;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    *(_DWORD *)long long v223 = 134284545;
    *(double *)&v223[4] = v214;
    *(_WORD *)&v223[12] = 2049;
    *(double *)&v223[14] = v213;
    *(_WORD *)&v223[22] = 1024;
    *(_DWORD *)&v223[24] = v210;
    *(_WORD *)&v223[28] = 1024;
    *(_DWORD *)&v223[30] = DWORD1(v210);
    *(_WORD *)&v223[34] = 1024;
    *(_DWORD *)&v223[36] = DWORD2(v210);
    double v32 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v32);
    goto LABEL_337;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  __int16 v17 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v18 = v215;
    __int16 v19 = sub_100147F50(v215);
    uint64_t v201 = a3;
    double v20 = v213;
    double v21 = v214;
    sub_100C094CC((uint64_t)&v210);
    int v22 = v223[23];
    __int16 v23 = *(unsigned char **)v223;
    int v24 = *(_DWORD *)(a1 + 424);
    sub_1010496AC();
    __int16 v25 = v223;
    if (v22 < 0) {
      __int16 v25 = v23;
    }
    double v26 = __p;
    if (v218[1] < 0) {
      double v26 = *(unsigned char **)__p;
    }
    *(_DWORD *)uint64_t buf = 67110658;
    *(_DWORD *)&uint8_t buf[4] = v18;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = v19;
    *(_WORD *)&unsigned char buf[18] = 2048;
    *(double *)&buf[20] = v21;
    *(_WORD *)&unsigned char buf[28] = 2048;
    *(double *)&buf[30] = v20;
    *(_WORD *)&unsigned char buf[38] = 2080;
    *(void *)&buf[40] = v25;
    __int16 v229 = 1024;
    int v230 = v24;
    __int16 v231 = 2080;
    long long v232 = v26;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, type, %d, %s, location, %14.8lf, %14.8lf, id, %s, reachbility, %d, details, %s", buf, 0x40u);
    if ((v218[1] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    a3 = v201;
    if ((v223[23] & 0x80000000) != 0) {
      operator delete(*(void **)v223);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    unsigned int v152 = v215;
    __int16 v153 = sub_100147F50(v215);
    uint64_t v200 = a1;
    uint64_t v203 = a3;
    double v154 = v213;
    double v155 = v214;
    sub_100C094CC((uint64_t)&v210);
    int v156 = v218[1];
    long long v157 = *(unsigned char **)__p;
    int v158 = *(_DWORD *)(v200 + 424);
    sub_1010496AC();
    long long v159 = __p;
    if (v156 < 0) {
      long long v159 = v157;
    }
    if (v222 >= 0) {
      long long v160 = v219;
    }
    else {
      long long v160 = *(unsigned char **)v219;
    }
    *(_DWORD *)long long v223 = 67110658;
    *(_DWORD *)&v223[4] = v152;
    *(_WORD *)&v223[8] = 2080;
    *(void *)&v223[10] = v153;
    *(_WORD *)&v223[18] = 2048;
    *(double *)&v223[20] = v155;
    *(_WORD *)&v223[28] = 2048;
    *(double *)&v223[30] = v154;
    *(_WORD *)&v223[38] = 2080;
    *(void *)&v223[40] = v159;
    __int16 v224 = 1024;
    int v225 = v158;
    __int16 v226 = 2080;
    long long v227 = v160;
    long long v161 = (char *)_os_log_send_and_compose_impl();
    if (v222 < 0) {
      operator delete(*(void **)v219);
    }
    a1 = v200;
    a3 = v203;
    if ((v218[1] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v161);
    if (v161 != buf) {
      free(v161);
    }
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CFE0);
  }
  int v27 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    uint64_t v28 = sub_100147F50(v210);
    double v29 = sub_10013DAC0((uint64_t)&v210);
    double v30 = sub_10013DA9C((uint64_t)&v210);
    *(_DWORD *)uint64_t buf = 136446723;
    *(void *)&uint8_t buf[4] = v28;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(double *)&unsigned char buf[14] = v29;
    *(_WORD *)&unsigned char buf[22] = 2049;
    *(double *)&uint8_t buf[24] = v30;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "@TileDl, %{public}s, request, llsw, %{private}.2lf, %{private}.2lf", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    long long v162 = sub_100147F50(v210);
    double v163 = sub_10013DAC0((uint64_t)&v210);
    double v164 = sub_10013DA9C((uint64_t)&v210);
    *(_DWORD *)long long v223 = 136446723;
    *(void *)&v223[4] = v162;
    *(_WORD *)&v223[12] = 2049;
    *(double *)&v223[14] = v163;
    *(_WORD *)&v223[22] = 2049;
    *(double *)&v223[24] = v164;
    long long v165 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v165);
    if (v165 != buf) {
      free(v165);
    }
  }
  if (!*(unsigned char *)(a1 + 201))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    char v38 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v39 = *(unsigned __int8 *)(a1 + 200);
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v39;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, index is not available until first unlock, fDataProtectionEnabled, %d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_50;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    int v166 = *(unsigned __int8 *)(a1 + 200);
    *(_DWORD *)long long v223 = 67109120;
    *(_DWORD *)&v223[4] = v166;
    double v32 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v32);
    goto LABEL_337;
  }
  if (a3 != -1 || !*(unsigned char *)(v16 + 176))
  {
    int v41 = *(int *)(a1 + 424) > 1 || *(unsigned char *)(a1 + 496) != 0;
    long long v202 = (uint64_t **)(a1 + 112);
    __int16 v42 = sub_100144248(a1 + 112, (uint64_t)&v210);
    uint64_t v199 = v16 + 184;
    BOOL v43 = sub_10013D858(v16 + 184, (unsigned int *)&v210);
    if (v43)
    {
      uint64_t v44 = sub_100144000(v199, (unsigned int *)&v210);
      int v45 = sub_1001453B8(v44, *(unsigned char *)(a1 + 200)) ^ 1;
    }
    else
    {
      int v45 = 0;
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    long long v198 = (void *)(a1 + 120);
    __int16 v46 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      sub_100C094CC((uint64_t)&v210);
      int v47 = v223[23] >= 0 ? v223 : *(unsigned char **)v223;
      *(_DWORD *)uint64_t buf = 136315906;
      *(void *)&uint8_t buf[4] = v47;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v43;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v198 != v42;
      *(_WORD *)&uint8_t buf[24] = 1024;
      *(_DWORD *)&buf[26] = v45;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, tileId=%s isAlreadyDownloaded, %d, isBeingDownloaded, %d, shouldDownloadedBasedOnPermissions, %d", buf, 0x1Eu);
      if ((v223[23] & 0x80000000) != 0) {
        operator delete(*(void **)v223);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      sub_100C094CC((uint64_t)&v210);
      if (v218[1] >= 0) {
        long long v167 = __p;
      }
      else {
        long long v167 = *(unsigned char **)__p;
      }
      *(_DWORD *)long long v223 = 136315906;
      *(void *)&v223[4] = v167;
      *(_WORD *)&v223[12] = 1024;
      *(_DWORD *)&v223[14] = v43;
      *(_WORD *)&v223[18] = 1024;
      *(_DWORD *)&v223[20] = v198 != v42;
      *(_WORD *)&v223[24] = 1024;
      *(_DWORD *)&v223[26] = v45;
      long long v168 = (char *)_os_log_send_and_compose_impl();
      if ((v218[1] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v168);
      if (v168 != buf) {
        free(v168);
      }
    }
    char v48 = !v43;
    if ((!v43 | v45))
    {
      if (v198 != v42)
      {
        uint64_t v49 = v42[10];
        __int16 v50 = (unsigned char *)(v49 + 112);
        if (*(unsigned char *)(v49 + 114)) {
          BYTE2(v207) = 1;
        }
        if (*v50) {
          LOBYTE(v207) = 1;
        }
        if (*(unsigned char *)(v49 + 113)) {
          BYTE1(v207) = 1;
        }
        long long v51 = v208;
        *(_OWORD *)__int16 v50 = v207;
        *(_OWORD *)(v49 + 128) = v51;
        *(_WORD *)(v49 + 144) = v209;
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        __int16 v52 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v49 + 16))(buf, v49);
          int v53 = buf[23];
          __int16 v54 = *(unsigned char **)buf;
          sub_1010496AC();
          int v55 = buf;
          if (v53 < 0) {
            int v55 = v54;
          }
          if (v223[23] >= 0) {
            __int16 v56 = v223;
          }
          else {
            __int16 v56 = *(unsigned char **)v223;
          }
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = v55;
          *(_WORD *)&unsigned char __p[12] = 2080;
          double v217 = *(double *)&v56;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, tileid, %s, will be downloaded, details, %s", __p, 0x16u);
          if ((v223[23] & 0x80000000) != 0) {
            operator delete(*(void **)v223);
          }
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10230D000);
          }
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v49 + 16))(v223, v49);
          int v176 = v223[23];
          long long v177 = *(unsigned char **)v223;
          sub_1010496AC();
          long long v178 = v223;
          if (v176 < 0) {
            long long v178 = v177;
          }
          if (v218[1] >= 0) {
            long long v179 = __p;
          }
          else {
            long long v179 = *(unsigned char **)__p;
          }
          *(_DWORD *)long long v219 = 136315394;
          *(void *)&v219[4] = v178;
          __int16 v220 = 2080;
          long long v221 = v179;
          long long v180 = (char *)_os_log_send_and_compose_impl();
          if ((v218[1] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          if ((v223[23] & 0x80000000) != 0) {
            operator delete(*(void **)v223);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v180);
          if (v180 != buf) {
            free(v180);
          }
        }
        int v57 = 0;
        char v58 = 1;
        goto LABEL_159;
      }
      if (!*(unsigned char *)(a1 + 200)) {
        char v48 = 1;
      }
      if ((v48 & 1) == 0 && ((v45 ^ 1) & 1) == 0)
      {
        int v65 = *(_DWORD *)(a1 + 424);
        if (v65 == 2)
        {
          int v57 = 1;
        }
        else
        {
          BOOL v74 = v65 != 1 || BYTE2(v207) == 0;
          int v57 = !v74;
        }
        uint64_t v75 = sub_100144000(v199, (unsigned int *)&v210);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        uint64_t v76 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v75 + 16))(v223, v75);
          int v77 = v223[23];
          uint64_t v78 = *(unsigned char **)v223;
          sub_1010496AC();
          uint64_t v79 = v223;
          if (v77 < 0) {
            uint64_t v79 = v78;
          }
          if (v218[1] >= 0) {
            int v80 = __p;
          }
          else {
            int v80 = *(unsigned char **)__p;
          }
          *(_DWORD *)uint64_t buf = 136315906;
          *(void *)&uint8_t buf[4] = v79;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&unsigned char buf[14] = v80;
          *(_WORD *)&unsigned char buf[22] = 1024;
          *(_DWORD *)&uint8_t buf[24] = BYTE2(v207);
          *(_WORD *)&unsigned char buf[28] = 1024;
          *(_DWORD *)&buf[30] = v57;
          _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, tileid, %s, is locked will be redownloaded, details, %s, allowRedownload, %d, isAddToDownloadList, %d", buf, 0x22u);
          if ((v218[1] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          if ((v223[23] & 0x80000000) != 0) {
            operator delete(*(void **)v223);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10230D000);
          }
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v75 + 16))(__p, v75);
          int v185 = v218[1];
          long long v186 = *(unsigned char **)__p;
          sub_1010496AC();
          long long v187 = __p;
          if (v185 < 0) {
            long long v187 = v186;
          }
          if (v222 >= 0) {
            long long v188 = v219;
          }
          else {
            long long v188 = *(unsigned char **)v219;
          }
          *(_DWORD *)long long v223 = 136315906;
          *(void *)&v223[4] = v187;
          *(_WORD *)&v223[12] = 2080;
          *(void *)&v223[14] = v188;
          *(_WORD *)&v223[22] = 1024;
          *(_DWORD *)&v223[24] = BYTE2(v207);
          *(_WORD *)&v223[28] = 1024;
          *(_DWORD *)&v223[30] = v57;
          long long v189 = (char *)_os_log_send_and_compose_impl();
          if (v222 < 0) {
            operator delete(*(void **)v219);
          }
          if ((v218[1] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v189);
          if (v189 != buf) {
            free(v189);
          }
        }
        goto LABEL_158;
      }
      if (v43)
      {
        int v57 = 0;
LABEL_158:
        char v58 = 0;
        goto LABEL_159;
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      uint64_t v66 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        double v67 = v213;
        double v68 = v214;
        sub_1010496AC();
        uint64_t v69 = v223[23] >= 0 ? v223 : *(unsigned char **)v223;
        *(_DWORD *)uint64_t buf = 134218498;
        *(double *)&uint8_t buf[4] = v68;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(double *)&unsigned char buf[14] = v67;
        *(_WORD *)&unsigned char buf[22] = 2080;
        *(void *)&uint8_t buf[24] = v69;
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, tileid, %.8lf, %8lf, will be downloaded, details, %s", buf, 0x20u);
        if ((v223[23] & 0x80000000) != 0) {
          operator delete(*(void **)v223);
        }
      }
      if (!sub_10013D1A0(115, 2))
      {
LABEL_113:
        char v58 = 0;
        int v57 = 1;
LABEL_159:
        unsigned int v81 = v215;
        if (v215 == 1)
        {
          sub_1000C7F88(buf);
          double v82 = (unsigned char *)(a1 + 448);
          int v83 = sub_1000D2988(*(uint64_t *)buf, "ForceDownloadDEMTiles", (BOOL *)(a1 + 448));
          if (*(void *)&buf[8]) {
            sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
          }
          if (v83)
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10230D020);
            }
            uint64_t v84 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
            {
              int v85 = *v82;
              *(_DWORD *)uint64_t buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v85;
              _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "TILE: DEM,fForceDownloadDEMTiles, %d", buf, 8u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_10230D020);
              }
              int v182 = *v82;
              *(_DWORD *)long long v223 = 67109120;
              *(_DWORD *)&v223[4] = v182;
              long long v183 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v183);
              if (v183 != buf) {
                free(v183);
              }
            }
          }
          if (!*v82 && !sub_10013DAE4(a1 + 528, &v214, &v213))
          {
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_10230D000);
            }
            uint64_t v86 = qword_102419388;
            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_INFO, "TILE: DEM, skip, tile is not available based on availability file", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419380 != -1) {
                dispatch_once(&qword_102419380, &stru_10230D000);
              }
              *(_WORD *)long long v223 = 0;
              long long v190 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v190);
              if (v190 != buf) {
                free(v190);
              }
            }
            int v57 = 0;
          }
          unsigned int v81 = v215;
        }
        if (v81 == 2 && !sub_10013DBF8(a1 + 624, &v214, &v213))
        {
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10230D000);
          }
          int v95 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_INFO, "TILE: HRSE, skip, tile is not available based on availability file", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_10230D000);
            }
            *(_WORD *)long long v223 = 0;
            long long v184 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v184);
            if (v184 != buf) {
              free(v184);
            }
          }
        }
        else if (v57)
        {
          sub_10125C090(*(_DWORD *)(v16 + 4), __p);
          uint64_t v87 = *(void *)__p;
          *(void *)std::string __p = 0;
          uint64_t v206 = v87;
          sub_10105FCCC(a1, &v206, (uint64_t)&v210, &v207);
          uint64_t v88 = v206;
          uint64_t v206 = 0;
          if (v88) {
            (*(void (**)(uint64_t))(*(void *)v88 + 8))(v88);
          }
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10230CFE0);
          }
          long long v89 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v90 = sub_100147F50(v210);
            double v91 = sub_10013DAC0((uint64_t)&v210);
            double v92 = sub_10013DA9C((uint64_t)&v210);
            uint64_t v93 = *(void *)(a1 + 128);
            *(_DWORD *)uint64_t buf = 136446979;
            *(void *)&uint8_t buf[4] = v90;
            *(_WORD *)&unsigned char buf[12] = 2049;
            *(double *)&unsigned char buf[14] = v91;
            *(_WORD *)&unsigned char buf[22] = 2049;
            *(double *)&uint8_t buf[24] = v92;
            *(_WORD *)&unsigned char buf[32] = 2050;
            *(void *)&buf[34] = v93;
            _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "@TileReq, %{public}s, onlist, llsw, %{private}.2lf, %{private}.2lf, center, size, %{public}ld", buf, 0x2Au);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_10230CFE0);
            }
            long long v171 = sub_100147F50(v210);
            double v172 = sub_10013DAC0((uint64_t)&v210);
            double v173 = sub_10013DA9C((uint64_t)&v210);
            uint64_t v174 = *(void *)(a1 + 128);
            *(_DWORD *)long long v223 = 136446979;
            *(void *)&v223[4] = v171;
            *(_WORD *)&v223[12] = 2049;
            *(double *)&v223[14] = v172;
            *(_WORD *)&v223[22] = 2049;
            *(double *)&v223[24] = v173;
            *(_WORD *)&v223[32] = 2050;
            *(void *)&v223[34] = v174;
            uint64_t v175 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v175);
            if (v175 != buf) {
              free(v175);
            }
          }
          uint64_t v94 = *(void *)__p;
          *(void *)std::string __p = 0;
          if (v94) {
            (*(void (**)(uint64_t))(*(void *)v94 + 8))(v94);
          }
          char v58 = 1;
        }
        *(_OWORD *)long long v223 = v210;
        *(void *)&v223[16] = v211;
        if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
          sub_1000DC48C(&v223[24], v212.__r_.__value_.__l.__data_, v212.__r_.__value_.__l.__size_);
        }
        else {
          *(std::string *)&v223[24] = v212;
        }
        char v194 = v58;
        if ((v208 & 0x80000000) == 0)
        {
          unsigned int v96 = -(int)v208;
          uint64_t v195 = a1 + 624;
          uint64_t v196 = a1 + 528;
          uint64_t v97 = a1;
          int v192 = (2 * v208) | 1;
          int v193 = -(int)v208;
          int v191 = v208;
          while (1)
          {
            int v99 = v192;
            unsigned int v98 = v193;
            do
            {
              if (!(v98 | v96)) {
                goto LABEL_272;
              }
              *(_OWORD *)long long v223 = v210;
              *(void *)&v223[16] = v211;
              std::string::operator=((std::string *)&v223[24], &v212);
              double v100 = *(double *)(v16 + 160);
              float32_t v101 = *(double *)(v16 + 152);
              *(float *)&double v100 = v100;
              sub_100143FCC((uint64_t)v223, v96, v98, v101, *(float32x2_t *)&v100);
              if (sub_1001447B8((unsigned int *)v223))
              {
                if (qword_102419380 != -1) {
                  dispatch_once(&qword_102419380, &stru_10230D000);
                }
                int v102 = qword_102419388;
                if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                {
                  int v103 = *(_DWORD *)&v223[8];
                  int v104 = *(_DWORD *)&v223[4];
                  sub_100C094CC((uint64_t)v223);
                  __int16 v105 = __p;
                  if (v218[1] < 0) {
                    __int16 v105 = *(unsigned char **)__p;
                  }
                  *(_DWORD *)uint64_t buf = 67110146;
                  *(_DWORD *)&uint8_t buf[4] = v96;
                  *(_WORD *)&uint8_t buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v98;
                  *(_WORD *)&unsigned char buf[14] = 1024;
                  *(_DWORD *)&uint8_t buf[16] = v103;
                  *(_WORD *)&buf[20] = 1024;
                  *(_DWORD *)&unsigned char buf[22] = v104;
                  *(_WORD *)&buf[26] = 2080;
                  *(void *)&unsigned char buf[28] = v105;
                  _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, y, %d, x, %d, tile_y, %d, tile_x, %d, neighbourTileID, %s", buf, 0x24u);
                  if ((v218[1] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419380 != -1) {
                    dispatch_once(&qword_102419380, &stru_10230D000);
                  }
                  int v136 = *(_DWORD *)&v223[8];
                  int v137 = *(_DWORD *)&v223[4];
                  sub_100C094CC((uint64_t)v223);
                  __int16 v138 = v219;
                  if (v222 < 0) {
                    __int16 v138 = *(unsigned char **)v219;
                  }
                  *(_DWORD *)std::string __p = 67110146;
                  *(_DWORD *)&__p[4] = v96;
                  *(_WORD *)&__p[8] = 1024;
                  *(_DWORD *)&__p[10] = v98;
                  LOWORD(v217) = 1024;
                  *(_DWORD *)((char *)&v217 + 2) = v136;
                  HIWORD(v217) = 1024;
                  *(_DWORD *)long long v218 = v137;
                  *(_WORD *)&v218[4] = 2080;
                  *(void *)&v218[6] = v138;
                  unsigned int v139 = (char *)_os_log_send_and_compose_impl();
                  if (v222 < 0) {
                    operator delete(*(void **)v219);
                  }
                  sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v139);
                  if (v139 != buf) {
                    free(v139);
                  }
                }
                __int16 v106 = sub_100144248((uint64_t)v202, (uint64_t)v223);
                BOOL v107 = sub_10013D858(v199, (unsigned int *)v223);
                unsigned int v108 = v215;
                if (v215 == 1)
                {
                  *(double *)uint64_t buf = sub_10013DAC0((uint64_t)v223) + *(double *)(v16 + 152) * 0.5;
                  *(double *)std::string __p = sub_10013DA9C((uint64_t)v223) + *(double *)(v16 + 160) * 0.5;
                  if (!sub_10013DAE4(v196, (double *)buf, (double *)__p)) {
                    goto LABEL_272;
                  }
                  unsigned int v108 = v215;
                }
                if (v108 != 2
                  || (*(double *)uint64_t buf = sub_10013DAC0((uint64_t)v223) + *(double *)(v16 + 152) * 0.5,
                      *(double *)std::string __p = sub_10013DA9C((uint64_t)v223) + *(double *)(v16 + 160) * 0.5,
                      sub_10013DBF8(v195, (double *)buf, (double *)__p)))
                {
                  BOOL v109 = v198 == v106;
                  if (*(unsigned char *)(v97 + 200)) {
                    int v110 = 1;
                  }
                  else {
                    int v110 = v107;
                  }
                  if (*(unsigned char *)a5) {
                    BOOL v111 = *(unsigned char *)(a5 + 1) == 0;
                  }
                  else {
                    BOOL v111 = 1;
                  }
                  char v112 = !v111;
                  if (!v111) {
                    BOOL v109 = 1;
                  }
                  if (v110 != 1 && v109)
                  {
                    if (qword_102419380 != -1) {
                      dispatch_once(&qword_102419380, &stru_10230D000);
                    }
                    int v113 = qword_102419388;
                    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                    {
                      sub_100C094CC((uint64_t)v223);
                      unint64_t v114 = buf;
                      if (buf[23] < 0) {
                        unint64_t v114 = *(unsigned char **)buf;
                      }
                      *(_DWORD *)std::string __p = 136315138;
                      *(void *)&__p[4] = v114;
                      _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, adding neighbour, %s", __p, 0xCu);
                      if ((buf[23] & 0x80000000) != 0) {
                        operator delete(*(void **)buf);
                      }
                    }
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_102419380 != -1) {
                        dispatch_once(&qword_102419380, &stru_10230D000);
                      }
                      sub_100C094CC((uint64_t)v223);
                      long long v140 = __p;
                      if (v218[1] < 0) {
                        long long v140 = *(unsigned char **)__p;
                      }
                      *(_DWORD *)long long v219 = 136315138;
                      *(void *)&v219[4] = v140;
                      int v141 = (char *)_os_log_send_and_compose_impl();
                      if ((v218[1] & 0x80000000) != 0) {
                        operator delete(*(void **)__p);
                      }
                      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v141);
                      if (v141 != buf) {
                        free(v141);
                      }
                    }
                    uint64_t v115 = sub_100144248((uint64_t)v202, (uint64_t)v223);
                    char v116 = v112 ^ 1;
                    if (v198 == v115) {
                      char v116 = 1;
                    }
                    if (v116)
                    {
                      sub_10125C090(*(_DWORD *)(v16 + 4), &v205);
                      sub_10105FCCC(v97, &v205, (uint64_t)v223, &v207);
                      uint64_t v130 = v205;
                      uint64_t v205 = 0;
                      if (v130) {
                        (*(void (**)(uint64_t))(*(void *)v130 + 8))(v130);
                      }
                      char v194 = 1;
                    }
                    else
                    {
                      if (qword_102419380 != -1) {
                        dispatch_once(&qword_102419380, &stru_10230D000);
                      }
                      int v117 = qword_102419388;
                      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                      {
                        sub_100C094CC((uint64_t)v223);
                        unint64_t v118 = buf;
                        if (buf[23] < 0) {
                          unint64_t v118 = *(unsigned char **)buf;
                        }
                        *(_DWORD *)std::string __p = 136315138;
                        *(void *)&__p[4] = v118;
                        _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, neighbour already in download queue updating to cellular download, %s", __p, 0xCu);
                        if ((buf[23] & 0x80000000) != 0) {
                          operator delete(*(void **)buf);
                        }
                      }
                      if (sub_10013D1A0(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_10230D000);
                        }
                        sub_100C094CC((uint64_t)v223);
                        __int16 v146 = __p;
                        if (v218[1] < 0) {
                          __int16 v146 = *(unsigned char **)__p;
                        }
                        *(_DWORD *)long long v219 = 136315138;
                        *(void *)&v219[4] = v146;
                        uint64_t v147 = (char *)_os_log_send_and_compose_impl();
                        if ((v218[1] & 0x80000000) != 0) {
                          operator delete(*(void **)__p);
                        }
                        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v147);
                        if (v147 != buf) {
                          free(v147);
                        }
                      }
                      *(void *)uint64_t buf = v223;
                      uint64_t v119 = sub_1008B48F0(v202, (uint64_t)v223, (uint64_t)&unk_101D0B290, (_OWORD **)buf)[10];
                      long long v120 = *(_OWORD *)a5;
                      long long v121 = *(_OWORD *)(a5 + 16);
                      *(_WORD *)(v119 + 144) = *(_WORD *)(a5 + 32);
                      *(_OWORD *)(v119 + 112) = v120;
                      *(_OWORD *)(v119 + 128) = v121;
                    }
                    if (qword_1024193A0 != -1) {
                      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
                    }
                    double v131 = qword_1024193A8;
                    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
                    {
                      __int16 v132 = sub_100147F50(*(unsigned int *)v223);
                      double v133 = sub_10013DAC0((uint64_t)v223);
                      double v134 = sub_10013DA9C((uint64_t)v223);
                      uint64_t v135 = *(void *)(v97 + 128);
                      *(_DWORD *)uint64_t buf = 136446979;
                      *(void *)&uint8_t buf[4] = v132;
                      *(_WORD *)&unsigned char buf[12] = 2049;
                      *(double *)&unsigned char buf[14] = v133;
                      *(_WORD *)&unsigned char buf[22] = 2049;
                      *(double *)&uint8_t buf[24] = v134;
                      *(_WORD *)&unsigned char buf[32] = 2050;
                      *(void *)&buf[34] = v135;
                      _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_DEFAULT, "@TileReq, %{public}s, onlist, llsw, %{private}.2lf, %{private}.2lf, neighbor, size, %{public}ld", buf, 0x2Au);
                    }
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1024193A0 != -1) {
                        dispatch_once(&qword_1024193A0, &stru_10230CFE0);
                      }
                      std::string v142 = sub_100147F50(*(unsigned int *)v223);
                      double v143 = sub_10013DAC0((uint64_t)v223);
                      double v144 = sub_10013DA9C((uint64_t)v223);
                      uint64_t v145 = *(void *)(v97 + 128);
                      *(_DWORD *)std::string __p = 136446979;
                      *(void *)&__p[4] = v142;
                      *(_WORD *)&unsigned char __p[12] = 2049;
                      double v217 = v143;
                      *(_WORD *)long long v218 = 2049;
                      *(double *)&v218[2] = v144;
                      *(_WORD *)&v218[10] = 2050;
                      *(void *)&v218[12] = v145;
                      double v129 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v129);
LABEL_293:
                      if (v129 != buf) {
                        free(v129);
                      }
                    }
                  }
                }
              }
              else
              {
                if (qword_102419380 != -1) {
                  dispatch_once(&qword_102419380, &stru_10230D000);
                }
                uint64_t v122 = qword_102419388;
                if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                {
                  int v123 = *(_DWORD *)&v223[8];
                  int v124 = *(_DWORD *)&v223[4];
                  sub_100C094CC((uint64_t)v223);
                  BOOL v125 = __p;
                  if (v218[1] < 0) {
                    BOOL v125 = *(unsigned char **)__p;
                  }
                  *(_DWORD *)uint64_t buf = 67110146;
                  *(_DWORD *)&uint8_t buf[4] = v96;
                  *(_WORD *)&uint8_t buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v98;
                  *(_WORD *)&unsigned char buf[14] = 1024;
                  *(_DWORD *)&uint8_t buf[16] = v123;
                  *(_WORD *)&buf[20] = 1024;
                  *(_DWORD *)&unsigned char buf[22] = v124;
                  *(_WORD *)&buf[26] = 2080;
                  *(void *)&unsigned char buf[28] = v125;
                  _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, out of boundaries, y, %d, x, %d, tile_y, %d, tile_x, %d, neighbourTileID, %s", buf, 0x24u);
                  if ((v218[1] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419380 != -1) {
                    dispatch_once(&qword_102419380, &stru_10230D000);
                  }
                  int v126 = *(_DWORD *)&v223[8];
                  int v127 = *(_DWORD *)&v223[4];
                  sub_100C094CC((uint64_t)v223);
                  int v128 = v219;
                  if (v222 < 0) {
                    int v128 = *(unsigned char **)v219;
                  }
                  *(_DWORD *)std::string __p = 67110146;
                  *(_DWORD *)&__p[4] = v96;
                  *(_WORD *)&__p[8] = 1024;
                  *(_DWORD *)&__p[10] = v98;
                  LOWORD(v217) = 1024;
                  *(_DWORD *)((char *)&v217 + 2) = v126;
                  HIWORD(v217) = 1024;
                  *(_DWORD *)long long v218 = v127;
                  *(_WORD *)&v218[4] = 2080;
                  *(void *)&v218[6] = v128;
                  double v129 = (char *)_os_log_send_and_compose_impl();
                  if (v222 < 0) {
                    operator delete(*(void **)v219);
                  }
                  sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v129);
                  goto LABEL_293;
                }
              }
LABEL_272:
              ++v98;
              --v99;
            }
            while (v99);
            BOOL v74 = v96++ == v191;
            if (v74) {
              goto LABEL_307;
            }
          }
        }
        uint64_t v97 = a1;
LABEL_307:
        if (v194)
        {
          long long v148 = *(void **)(v97 + 40);
          v204[0] = _NSConcreteStackBlock;
          v204[1] = 3221225472;
          _OWORD v204[2] = sub_101062ABC;
          v204[3] = &unk_1022B8660;
          v204[4] = v97;
          *(double *)&v204[5] = a8;
          [v148 async:v204];
        }
        if ((v223[47] & 0x80000000) != 0) {
          operator delete(*(void **)&v223[24]);
        }
LABEL_36:
        uint64_t v36 = 1;
        goto LABEL_51;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      double v70 = v213;
      double v71 = v214;
      sub_1010496AC();
      if (v218[1] >= 0) {
        uint64_t v72 = __p;
      }
      else {
        uint64_t v72 = *(unsigned char **)__p;
      }
      *(_DWORD *)long long v223 = 134218498;
      *(double *)&v223[4] = v71;
      *(_WORD *)&v223[12] = 2048;
      *(double *)&v223[14] = v70;
      *(_WORD *)&v223[22] = 2080;
      *(void *)&v223[24] = v72;
      unsigned int v73 = (char *)_os_log_send_and_compose_impl();
      if ((v218[1] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    else
    {
      uint64_t v59 = sub_100144000(v199, (unsigned int *)&v210);
      BOOL v60 = sub_100065380(v59, v41, *(float *)(v16 + 128), a8);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      uint64_t v61 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v59 + 16))(v223, v59);
        uint64_t v62 = v223[23] >= 0 ? v223 : *(unsigned char **)v223;
        *(_DWORD *)uint64_t buf = 136315906;
        *(void *)&uint8_t buf[4] = v62;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = BYTE1(v209);
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v60;
        *(_WORD *)&uint8_t buf[24] = 1024;
        *(_DWORD *)&buf[26] = v198 != v42;
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, tileid, %s, already available, isUpdateMTimestamp, %d, isShouldBeRefreshed, %d, isBeingDownloaded, %d", buf, 0x1Eu);
        if ((v223[23] & 0x80000000) != 0) {
          operator delete(*(void **)v223);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v59 + 16))(__p, v59);
        if (v218[1] >= 0) {
          long long v169 = __p;
        }
        else {
          long long v169 = *(unsigned char **)__p;
        }
        *(_DWORD *)long long v223 = 136315906;
        *(void *)&v223[4] = v169;
        *(_WORD *)&v223[12] = 1024;
        *(_DWORD *)&v223[14] = BYTE1(v209);
        *(_WORD *)&v223[18] = 1024;
        *(_DWORD *)&v223[20] = v60;
        *(_WORD *)&v223[24] = 1024;
        *(_DWORD *)&v223[26] = v198 != v42;
        long long v170 = (char *)_os_log_send_and_compose_impl();
        if ((v218[1] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v170);
        if (v170 != buf) {
          free(v170);
        }
      }
      if (BYTE1(v209)) {
        sub_100144E3C(v59, a8);
      }
      int v57 = 0;
      char v58 = 0;
      if (!v60 || v198 != v42) {
        goto LABEL_159;
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      uint64_t v63 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v59 + 16))(buf, v59);
        uint64_t v64 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)long long v223 = 136315138;
        *(void *)&v223[4] = v64;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, refresh download, %s", v223, 0xCu);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_113;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v59 + 16))(v223, v59);
      if (v223[23] >= 0) {
        long long v181 = v223;
      }
      else {
        long long v181 = *(unsigned char **)v223;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v181;
      unsigned int v73 = (char *)_os_log_send_and_compose_impl();
      if ((v223[23] & 0x80000000) != 0) {
        operator delete(*(void **)v223);
      }
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v73);
    if (v73 != buf) {
      free(v73);
    }
    goto LABEL_113;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  char v31 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, ignoring request, no sec_key", buf, 2u);
  }
  if (!sub_10013D1A0(115, 2)) {
    goto LABEL_50;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  *(_WORD *)long long v223 = 0;
  double v32 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v32);
LABEL_337:
  if (v32 != buf) {
    free(v32);
  }
LABEL_50:
  uint64_t v36 = 0;
LABEL_51:
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v212.__r_.__value_.__l.__data_);
  }
  return v36;
}

void sub_10013C108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10013C32C(const __CFString *a1, const __CFString *a2, char *a3)
{
  memset(&v75, 0, sizeof(v75));
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID()) {
    goto LABEL_28;
  }
  sub_10013D274(a1, &v75);
  CFTypeID v7 = CFGetTypeID(a2);
  if (v7 == CFDictionaryGetTypeID())
  {
    sub_100134750(&v74, a3);
    sub_100134750(&__p, "->");
    if ((v73 & 0x80u) == 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if ((v73 & 0x80u) == 0) {
      std::string::size_type v9 = v73;
    }
    else {
      std::string::size_type v9 = v72;
    }
    uint64_t v10 = std::string::append(&v74, p_p, v9);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v12 = &v75;
    }
    else {
      int v12 = (std::string *)v75.__r_.__value_.__r.__words[0];
    }
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v75.__r_.__value_.__l.__size_;
    }
    long long v14 = std::string::append(&v76, (const std::string::value_type *)v12, size);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    *(void *)&uint8_t buf[16] = *((void *)&v14->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t buf = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    if ((char)v73 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v74.__r_.__value_.__l.__data_);
    }
    if (buf[23] >= 0) {
      uint64_t v16 = buf;
    }
    else {
      uint64_t v16 = *(unsigned char **)buf;
    }
    CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)sub_10013C32C, v16);
    int v17 = buf[23];
LABEL_25:
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_28;
    }
    unsigned int v18 = *(void **)buf;
    goto LABEL_27;
  }
  CFTypeID v19 = CFGetTypeID(a2);
  if (v19 == CFArrayGetTypeID())
  {
    sub_100134750(&v74, a3);
    sub_100134750(&__p, "->");
    if ((v73 & 0x80u) == 0) {
      double v20 = (const std::string::value_type *)&__p;
    }
    else {
      double v20 = (const std::string::value_type *)__p;
    }
    if ((v73 & 0x80u) == 0) {
      std::string::size_type v21 = v73;
    }
    else {
      std::string::size_type v21 = v72;
    }
    int v22 = std::string::append(&v74, v20, v21);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v24 = &v75;
    }
    else {
      int v24 = (std::string *)v75.__r_.__value_.__r.__words[0];
    }
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v25 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v25 = v75.__r_.__value_.__l.__size_;
    }
    double v26 = std::string::append(&v76, (const std::string::value_type *)v24, v25);
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    *(void *)&uint8_t buf[16] = *((void *)&v26->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t buf = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    if ((char)v73 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v74.__r_.__value_.__l.__data_);
    }
    for (CFIndex i = 0; ; ++i)
    {
      CFIndex Count = CFArrayGetCount((CFArrayRef)a2);
      int v17 = buf[23];
      if (i >= Count) {
        break;
      }
      if (buf[23] >= 0) {
        double v30 = buf;
      }
      else {
        double v30 = *(unsigned char **)buf;
      }
      CFStringRef v31 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%s.%ld", v30, i);
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, i);
      sub_10013C32C(v31, ValueAtIndex, a3);
      if (v31) {
        CFRelease(v31);
      }
    }
    goto LABEL_25;
  }
  CFTypeID v33 = CFGetTypeID(a2);
  if (v33 != CFStringGetTypeID())
  {
    CFTypeID v37 = CFGetTypeID(a2);
    if (v37 == CFNumberGetTypeID())
    {
      if (CFNumberIsFloatType((CFNumberRef)a2))
      {
        v74.__r_.__value_.__r.__words[0] = 0;
        sub_1000A6DD8(a2, &v74);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B6AC8);
        }
        char v38 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          int v39 = &v75;
          if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v39 = (std::string *)v75.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)uint64_t buf = 136315650;
          *(void *)&uint8_t buf[4] = a3;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&unsigned char buf[14] = v39;
          *(_WORD *)&unsigned char buf[22] = 2048;
          v79[0] = v74.__r_.__value_.__r.__words[0];
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "dictionary, %s, key, %s, value, %.8lf", buf, 0x20u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_28;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B6AC8);
        }
        unsigned int v40 = &v75;
        if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unsigned int v40 = (std::string *)v75.__r_.__value_.__r.__words[0];
        }
        LODWORD(v76.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words + 4) = (std::string::size_type)a3;
        WORD2(v76.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v76.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v40;
        HIWORD(v76.__r_.__value_.__r.__words[2]) = 2048;
        v77[0] = v74.__r_.__value_.__r.__words[0];
        int v41 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void _printCSV_logKeyValue(const void *, const void *, void *)", "%s\n", v41);
      }
      else
      {
        LODWORD(v74.__r_.__value_.__l.__data_) = 0;
        sub_10013E6B4(a2, &v74);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B6AC8);
        }
        uint64_t v62 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v63 = &v75;
          if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v63 = (std::string *)v75.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)uint64_t buf = 136315906;
          *(void *)&uint8_t buf[4] = a3;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&unsigned char buf[14] = v63;
          *(_WORD *)&unsigned char buf[22] = 1024;
          LODWORD(v79[0]) = v74.__r_.__value_.__l.__data_;
          WORD2(v79[0]) = 1024;
          *(_DWORD *)((char *)v79 + 6) = v74.__r_.__value_.__l.__data_;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "dictionary, %s, key, %s, value, %d, 0x%08x", buf, 0x22u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_28;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B6AC8);
        }
        uint64_t v64 = &v75;
        if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v64 = (std::string *)v75.__r_.__value_.__r.__words[0];
        }
        LODWORD(v76.__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words + 4) = (std::string::size_type)a3;
        WORD2(v76.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v76.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v64;
        HIWORD(v76.__r_.__value_.__r.__words[2]) = 1024;
        LODWORD(v77[0]) = v74.__r_.__value_.__l.__data_;
        WORD2(v77[0]) = 1024;
        *(_DWORD *)((char *)v77 + 6) = v74.__r_.__value_.__l.__data_;
        int v41 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void _printCSV_logKeyValue(const void *, const void *, void *)", "%s\n", v41);
      }
    }
    else
    {
      CFTypeID v42 = CFGetTypeID(a2);
      if (v42 == CFBooleanGetTypeID())
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B6AC8);
        }
        BOOL v43 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          int v44 = SHIBYTE(v75.__r_.__value_.__r.__words[2]);
          std::string::size_type v45 = v75.__r_.__value_.__r.__words[0];
          int Value = CFBooleanGetValue((CFBooleanRef)a2);
          int v47 = &v75;
          *(_DWORD *)uint64_t buf = 136315650;
          if (v44 < 0) {
            int v47 = (std::string *)v45;
          }
          *(void *)&uint8_t buf[4] = a3;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&unsigned char buf[14] = v47;
          *(_WORD *)&unsigned char buf[22] = 1024;
          LODWORD(v79[0]) = Value;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "dictionary, %s, key, %s, value, %d, [CFBoolean]", buf, 0x1Cu);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_28;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B6AC8);
        }
        int v48 = SHIBYTE(v75.__r_.__value_.__r.__words[2]);
        std::string::size_type v49 = v75.__r_.__value_.__r.__words[0];
        int v50 = CFBooleanGetValue((CFBooleanRef)a2);
        long long v51 = &v75;
        LODWORD(v76.__r_.__value_.__l.__data_) = 136315650;
        if (v48 < 0) {
          long long v51 = (std::string *)v49;
        }
        *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words + 4) = (std::string::size_type)a3;
        WORD2(v76.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v76.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v51;
        HIWORD(v76.__r_.__value_.__r.__words[2]) = 1024;
        LODWORD(v77[0]) = v50;
        int v41 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void _printCSV_logKeyValue(const void *, const void *, void *)", "%s\n", v41);
      }
      else
      {
        CFTypeID v52 = CFGetTypeID(a2);
        if (v52 == CFDateGetTypeID())
        {
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022B6AC8);
          }
          int v53 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
          {
            int v54 = SHIBYTE(v75.__r_.__value_.__r.__words[2]);
            std::string::size_type v55 = v75.__r_.__value_.__r.__words[0];
            double AbsoluteTime = CFDateGetAbsoluteTime((CFDateRef)a2);
            int v57 = &v75;
            *(_DWORD *)uint64_t buf = 136315650;
            if (v54 < 0) {
              int v57 = (std::string *)v55;
            }
            *(void *)&uint8_t buf[4] = a3;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&unsigned char buf[14] = v57;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(double *)uint64_t v79 = AbsoluteTime;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "dictionary, %s, key, %s, value, %.2lf, [CFDate]", buf, 0x20u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_28;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022B6AC8);
          }
          int v58 = SHIBYTE(v75.__r_.__value_.__r.__words[2]);
          std::string::size_type v59 = v75.__r_.__value_.__r.__words[0];
          double v60 = CFDateGetAbsoluteTime((CFDateRef)a2);
          uint64_t v61 = &v75;
          LODWORD(v76.__r_.__value_.__l.__data_) = 136315650;
          if (v58 < 0) {
            uint64_t v61 = (std::string *)v59;
          }
          *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words + 4) = (std::string::size_type)a3;
          WORD2(v76.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v76.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v61;
          HIWORD(v76.__r_.__value_.__r.__words[2]) = 2048;
          *(double *)int v77 = v60;
          int v41 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void _printCSV_logKeyValue(const void *, const void *, void *)", "%s\n", v41);
        }
        else
        {
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022B6AC8);
          }
          int v65 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v66 = &v75;
            if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v66 = (std::string *)v75.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)uint64_t buf = 136315394;
            *(void *)&uint8_t buf[4] = a3;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&unsigned char buf[14] = v66;
            _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "dictionary, %s, key, %s, un-printable value", buf, 0x16u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_28;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022B6AC8);
          }
          double v67 = &v75;
          if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            double v67 = (std::string *)v75.__r_.__value_.__r.__words[0];
          }
          LODWORD(v76.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words + 4) = (std::string::size_type)a3;
          WORD2(v76.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v76.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v67;
          int v41 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void _printCSV_logKeyValue(const void *, const void *, void *)", "%s\n", v41);
        }
      }
    }
    if (v41 != buf) {
      free(v41);
    }
    goto LABEL_28;
  }
  memset(&v74, 0, sizeof(v74));
  sub_10013D274(a2, &v74);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B6AC8);
  }
  unsigned int v34 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v35 = &v75;
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v35 = (std::string *)v75.__r_.__value_.__r.__words[0];
    }
    uint64_t v36 = &v74;
    if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v36 = (std::string *)v74.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)uint64_t buf = 136315650;
    *(void *)&uint8_t buf[4] = a3;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = v35;
    *(_WORD *)&unsigned char buf[22] = 2080;
    v79[0] = v36;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "dictionary, %s, key, %s, value, %s", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    double v68 = &v75;
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      double v68 = (std::string *)v75.__r_.__value_.__r.__words[0];
    }
    uint64_t v69 = &v74;
    if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v69 = (std::string *)v74.__r_.__value_.__r.__words[0];
    }
    LODWORD(v76.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words + 4) = (std::string::size_type)a3;
    WORD2(v76.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v76.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v68;
    HIWORD(v76.__r_.__value_.__r.__words[2]) = 2080;
    v77[0] = v69;
    double v70 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void _printCSV_logKeyValue(const void *, const void *, void *)", "%s\n", v70);
    if (v70 != buf) {
      free(v70);
    }
  }
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
  {
    unsigned int v18 = (void *)v74.__r_.__value_.__r.__words[0];
LABEL_27:
    operator delete(v18);
  }
LABEL_28:
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
}

void sub_10013D0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10013D1A0(int a1, int a2)
{
  uint64_t v4 = sub_10013D1F4();
  if ((a1 - 116) > 3) {
    id v5 = "Generic";
  }
  else {
    id v5 = off_1022B5D58[a1 - 116];
  }
  return sub_10013D238(v4, (uint64_t)v5, a2);
}

uint64_t sub_10013D1F4()
{
  if (qword_102480118 != -1) {
    dispatch_once(&qword_102480118, &stru_1022DDB80);
  }
  return qword_10248A8A0;
}

BOOL sub_10013D238(uint64_t a1, uint64_t a2, int a3)
{
  return *(_DWORD *)(a1 + 168) >= a3
      || *(_DWORD *)(a1 + 172) >= a3
      || *(_DWORD *)(a1 + 176) >= a3
      || *(unsigned char *)(a1 + 160) != 0;
}

BOOL sub_10013D274(const __CFString *cf, std::string *a2)
{
  if (!cf) {
    goto LABEL_10;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 == CFStringGetTypeID())
  {
    CStringPtr = CFStringGetCStringPtr(cf, 0x8000100u);
    if (!CStringPtr)
    {
      bufferSize[0] = 0;
      v22.length = CFStringGetLength(cf);
      v22.location = 0;
      CFStringGetBytes(cf, v22, 0x8000100u, 0, 0, 0, 0, bufferSize);
      ++bufferSize[0];
      operator new[]();
    }
    std::string::assign(a2, CStringPtr);
    return 1;
  }
  CFTypeID v7 = CFGetTypeID(cf);
  if (v7 != CFDataGetTypeID())
  {
LABEL_10:
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    int v12 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      if (cf) {
        CFTypeID v13 = CFGetTypeID(cf);
      }
      else {
        CFTypeID v13 = -1;
      }
      *(_DWORD *)uint64_t buf = 134349056;
      CFTypeID v20 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning type IDs do not match - %{public}lu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      if (cf) {
        CFTypeID v16 = CFGetTypeID(cf);
      }
      else {
        CFTypeID v16 = -1;
      }
      LODWORD(bufferSize[0]) = 134349056;
      *(CFIndex *)((char *)bufferSize + 4) = v16;
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, std::string &)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    std::string::assign(a2, "");
    return 0;
  }
  BytePtr = (const char *)CFDataGetBytePtr((CFDataRef)cf);
  int Length = CFDataGetLength((CFDataRef)cf);
  int v10 = Length;
  if (!BytePtr)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    long long v14 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      LODWORD(v20) = v10;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "can't convert %{public}u data bytes", buf, 8u);
    }
    uint64_t v6 = 0;
    if (!sub_10013D1A0(115, 0)) {
      return v6;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    LODWORD(bufferSize[0]) = 67240192;
    HIDWORD(bufferSize[0]) = v10;
    long long v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, std::string &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
    return 0;
  }

  return sub_1004CE29C(BytePtr, Length, (uint64_t)a2);
}

BOOL sub_10013D858(uint64_t a1, unsigned int *a2)
{
  if (sub_1001447B8(a2)) {
    return a1 + 8 != (void)sub_100144248(a1, (uint64_t)a2);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022CF858);
  }
  id v5 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
  {
    sub_100C094CC((uint64_t)a2);
    uint64_t v6 = v14 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uint64_t buf = 136380675;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Invalid tile ID: %{private}s, #CloneMe", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022CF858);
    }
    sub_100C094CC((uint64_t)a2);
    if (v10 >= 0) {
      CFTypeID v7 = buf;
    }
    else {
      CFTypeID v7 = *(unsigned char **)buf;
    }
    int v11 = 136380675;
    int v12 = v7;
    id v8 = (char *)_os_log_send_and_compose_impl();
    if (v10 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTilesMap::contains(const TileId &) const", "%s\n", v8);
    if (v8 != (char *)__p) {
      free(v8);
    }
    return 0;
  }
  return result;
}

double sub_10013DA9C(uint64_t a1)
{
  return (double)*(int *)(a1 + 4) / 10000.0 + -180.0;
}

double sub_10013DAC0(uint64_t a1)
{
  return (double)*(int *)(a1 + 8) / 10000.0 + -90.0;
}

BOOL sub_10013DAE4(uint64_t a1, double *a2, double *a3)
{
  *(unsigned char *)(a1 + 64) = 0;
  long double v4 = *a3;
  double v5 = *a2;
  unsigned int v6 = vcvtmd_s64_f64((*a2 + 90.0) * 10.0) + (int)(floor(*a3 * 10.0) * 100000.0);
  uint64_t v7 = a1;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v7 = a1;
    if (v6 == *(_DWORD *)(a1 + 28)) {
      return *(unsigned char *)(a1 + 32) != 0;
    }
  }
  while (1)
  {
    uint64_t v7 = *(void *)(v7 + 8);
    if (v7 == a1) {
      break;
    }
    if (v6 == *(_DWORD *)(v7 + 16)) {
      return 1;
    }
  }
  *(unsigned char *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  uint64_t v8 = sub_10014013C(a1, v5, v4);
  if (v8)
  {
    std::string::size_type v9 = operator new(0x18uLL);
    v9[4] = v6;
    uint64_t v10 = *(void *)a1;
    *(void *)std::string::size_type v9 = *(void *)a1;
    *((void *)v9 + 1) = a1;
    *(void *)(v10 + 8) = v9;
    *(void *)a1 = v9;
    ++*(void *)(a1 + 16);
  }
  if (!*(unsigned char *)(a1 + 64))
  {
    *(unsigned char *)(a1 + 24) = 1;
    *(_DWORD *)(a1 + 28) = v6;
    *(unsigned char *)(a1 + 32) = v8;
  }
  return v8;
}

BOOL sub_10013DBF8(uint64_t a1, double *a2, double *a3)
{
  *(unsigned char *)(a1 + 80) = 0;
  long double v4 = *a3;
  double v5 = *a2;
  uint64_t v6 = vcvtmd_s64_f64((*a2 + 90.0) * 20.0) + (int)(floor(*a3 * 20.0) * 100000.0);
  uint64_t v7 = a1;
  if (*(unsigned char *)(a1 + 28) && (uint64_t v7 = a1, v6 == *(_DWORD *)(a1 + 24)))
  {
    int v8 = *(unsigned __int8 *)(a1 + 29);
    return v8 != 0;
  }
  else
  {
    while (1)
    {
      uint64_t v7 = *(void *)(v7 + 8);
      if (v7 == a1) {
        break;
      }
      if (v6 == *(_DWORD *)(v7 + 16))
      {
        int v8 = *(unsigned __int8 *)(v7 + 20);
        return v8 != 0;
      }
    }
    *(_DWORD *)(a1 + 24) = 0;
    *(_WORD *)(a1 + 28) = 0;
    uint64_t v9 = sub_10046CDE0(a1, v5, v4);
    uint64_t v10 = operator new(0x18uLL);
    if (v9) {
      void v10[2] = v6 | (unint64_t)&_mh_execute_header;
    }
    else {
      void v10[2] = v6;
    }
    uint64_t v11 = *(void *)a1;
    void *v10 = *(void *)a1;
    v10[1] = a1;
    *(void *)(v11 + 8) = v10;
    *(void *)a1 = v10;
    ++*(void *)(a1 + 16);
    if (!*(unsigned char *)(a1 + 80))
    {
      *(unsigned char *)(a1 + 28) = 1;
      *(_DWORD *)(a1 + 24) = v6;
      *(unsigned char *)(a1 + 29) = v9;
    }
  }
  return v9;
}

BOOL sub_10013DD1C(CFDictionaryRef *a1, uint64_t a2)
{
  sub_10013FA80((int)v16, *a1);
  if (qword_10247C788 != -1) {
    dispatch_once(&qword_10247C788, &stru_1022BE930);
  }
  if (byte_10247C790) {
    sub_10013FBD4((uint64_t)v16, "lteCellFromCellMonitorDict");
  }
  *(_OWORD *)&__p[4] = 0uLL;
  *(void *)(a2 + 8) = -1;
  *(void *)(a2 + 16) = -1;
  *(_DWORD *)(a2 + 24) = -1;
  *(void *)a2 = -1;
  *(_OWORD *)(a2 + 28) = *(_OWORD *)__p;
  int v3 = *(_DWORD *)&__p[16];
  *(void *)(a2 + 48) = -1;
  *(void *)(a2 + 56) = -1;
  *(_DWORD *)(a2 + 44) = v3;
  *(_DWORD *)(a2 + 64) = -1;
  *(_OWORD *)(a2 + 68) = xmmword_101D23030;
  sub_10013E418((uint64_t)v16, kCTCellMonitorMCC, (_DWORD *)a2);
  sub_10013E418((uint64_t)v16, kCTCellMonitorMNC, (_DWORD *)(a2 + 4));
  sub_10013E418((uint64_t)v16, kCTCellMonitorTAC, (_DWORD *)(a2 + 8));
  sub_10013E418((uint64_t)v16, kCTCellMonitorCellId, (_DWORD *)(a2 + 12));
  sub_10013E418((uint64_t)v16, kCTCellMonitorUARFCN, (_DWORD *)(a2 + 16));
  CFTypeRef cf1 = 0;
  sub_10013F3C8((uint64_t)v16, kCTCellMonitorCellType, &cf1);
  if (CFEqual(cf1, kCTCellMonitorCellTypeServing)) {
    sub_10013E418((uint64_t)v16, kCTCellMonitorPID, (_DWORD *)(a2 + 20));
  }
  if (CFEqual(cf1, kCTCellMonitorCellTypeNeighbor)) {
    sub_10013E418((uint64_t)v16, kCTCellMonitorPCI, (_DWORD *)(a2 + 20));
  }
  sub_10013E418((uint64_t)v16, kCTCellMonitorRSRP, (_DWORD *)(a2 + 48));
  sub_10013E418((uint64_t)v16, kCTCellMonitorRSRQ, (_DWORD *)(a2 + 52));
  sub_10013E418((uint64_t)v16, kCTCellMonitorBandInfo, (_DWORD *)(a2 + 24));
  sub_10013E418((uint64_t)v16, kCTCellMonitorDeploymentType, (_DWORD *)(a2 + 56));
  sub_10013E418((uint64_t)v16, kCTCellMonitorBandwidth, (_DWORD *)(a2 + 60));
  sub_10013E418((uint64_t)v16, kCTCellMonitorNeighborType, (_DWORD *)(a2 + 80));
  sub_10013E418((uint64_t)v16, kCTCellMonitorPMax, (_DWORD *)(a2 + 64));
  sub_10013E418((uint64_t)v16, kCTCellMonitorThroughput, (_DWORD *)(a2 + 68));
  sub_10013E418((uint64_t)v16, kCTCellMonitorCsgId, (_DWORD *)(a2 + 76));
  sub_10013E418((uint64_t)v16, kCTCellMonitorCSGIndication, (_DWORD *)(a2 + 72));
  uint64_t v14 = 0;
  if (sub_10013E418((uint64_t)v16, kCTCellMonitorSectorLat, (_DWORD *)&v14 + 1))
  {
    if (sub_10013E418((uint64_t)v16, kCTCellMonitorSectorLong, &v14))
    {
      int v4 = v14;
      if (v14)
      {
        *(double *)(a2 + 32) = (double)SHIDWORD(v14) * 0.0000694444444;
        *(double *)(a2 + 40) = (double)v4 * 0.0000694444444;
      }
    }
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BE970);
  }
  double v5 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    sub_1000AAEBC(__p);
    uint64_t v6 = v22 >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)uint64_t buf = 136315138;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "lteCell populated from CT: %s", buf, 0xCu);
    if (v22 < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BE970);
    }
    sub_1000AAEBC(buf);
    if (v18 >= 0) {
      uint64_t v11 = buf;
    }
    else {
      uint64_t v11 = *(unsigned char **)buf;
    }
    int v19 = 136315138;
    CFTypeID v20 = v11;
    int v12 = (char *)_os_log_send_and_compose_impl();
    if (v18 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellMonitor::lteCellFromCellMonitorDict(const CFDictionaryRef &, CLTelephonyService_Type::LteCell &)", "%s\n", v12);
    if (v12 != __p) {
      free(v12);
    }
  }
  BOOL v8 = *(int *)a2 > 0 && *(int *)(a2 + 4) >= 0;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BE970);
  }
  uint64_t v9 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string __p = 67109120;
    *(_DWORD *)&__p[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "lteCell is valid from CT: %d", __p, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BE970);
    }
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v8;
    CFTypeID v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellMonitor::lteCellFromCellMonitorDict(const CFDictionaryRef &, CLTelephonyService_Type::LteCell &)", "%s\n", v13);
    if (v13 != __p) {
      free(v13);
    }
  }
  sub_10013F3C4(v16);
  return v8;
}

void sub_10013E3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10013E418(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf)) {
    return 0;
  }
  uint64_t v6 = sub_10013E6B4(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    uint64_t v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      *(_DWORD *)uint64_t buf = 138412546;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      uint64_t v20 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      int v13 = 138412546;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      uint64_t v16 = a2;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, int &, int) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t sub_10013E6B4(const void *a1, _DWORD *a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID())
  {
    buf[0] = 0;
    CFTypeID v9 = CFGetTypeID(a1);
    CFTypeID TypeID = CFBooleanGetTypeID();
    uint64_t result = 0;
    if (v9 != TypeID) {
      return result;
    }
    uint64_t result = sub_1000D2C98(a1, (BOOL *)buf);
    if (!result) {
      return result;
    }
    *a2 = buf[0];
    return 1;
  }
  if (CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt32Type, a2)) {
    return 1;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B6AC8);
  }
  double v5 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
  }
  BOOL v6 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, int &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
    return 0;
  }
  return result;
}

uint64_t sub_10013E8B8(uint64_t a1, const __CFString *a2, uint64_t *a3, int a4)
{
  CFTypeRef cf = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, const __CFString *, CFTypeRef *))(*(void *)a1 + 912))(a1, a2, &cf);
  if (result)
  {
    *a3 = 0;
    CFTypeID v8 = CFGetTypeID(cf);
    if (v8 == CFArrayGetTypeID())
    {
      CFIndex v9 = a4 & ~(a4 >> 31);
      if (CFArrayGetCount((CFArrayRef)cf) > v9)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v9);
LABEL_34:
        *a3 = (uint64_t)ValueAtIndex;
        CFRetain(ValueAtIndex);
        CFRelease(cf);
        return 1;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      int v17 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        sub_1000FECE0(a2, (uint64_t)__p);
        int v18 = SBYTE3(v31);
        __int16 v19 = *(unsigned char **)__p;
        CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
        std::string::size_type v21 = __p;
        *(_DWORD *)uint64_t buf = 136446722;
        if (v18 < 0) {
          std::string::size_type v21 = v19;
        }
        *(void *)CFTypeID v33 = v21;
        *(_WORD *)&v33[8] = 1026;
        *(_DWORD *)&v33[10] = v9;
        __int16 v34 = 2050;
        int v35 = (unsigned char *)Count;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "specified index is out of range for key %{public}s (%{public}d of %{public}ld)", buf, 0x1Cu);
        if (SBYTE3(v31) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_31;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      sub_1000FECE0(a2, (uint64_t)v26);
      int v22 = v27;
      long long v23 = (void **)v26[0];
      CFIndex v24 = CFArrayGetCount((CFArrayRef)cf);
      std::string::size_type v25 = v26;
      *(_DWORD *)std::string __p = 136446722;
      if (v22 < 0) {
        std::string::size_type v25 = v23;
      }
      *(void *)&__p[4] = v25;
      *(_WORD *)&unsigned char __p[12] = 1026;
      *(_DWORD *)&unsigned char __p[14] = v9;
      __int16 v30 = 2050;
      CFIndex v31 = v24;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }
    else
    {
      if (a4 < 1)
      {
        ValueAtIndex = cf;
        goto LABEL_34;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      uint64_t v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        CFTypeID v12 = CFGetTypeID(cf);
        sub_1000FECE0(a2, (uint64_t)__p);
        int v13 = (v31 & 0x80000000) == 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)uint64_t buf = 67240706;
        *(_DWORD *)CFTypeID v33 = a4;
        *(_WORD *)&v33[4] = 2050;
        *(void *)&v33[6] = v12;
        __int16 v34 = 2082;
        int v35 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "specified index %{public}d not applicable to type %{public}lu for key %{public}s", buf, 0x1Cu);
        if (SBYTE3(v31) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_31;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      CFTypeID v14 = CFGetTypeID(cf);
      sub_1000FECE0(a2, (uint64_t)v26);
      if (v27 >= 0) {
        __int16 v15 = v26;
      }
      else {
        __int16 v15 = (void **)v26[0];
      }
      *(_DWORD *)std::string __p = 67240706;
      *(_DWORD *)&__p[4] = a4;
      *(_WORD *)&__p[8] = 2050;
      *(void *)&__p[10] = v14;
      __int16 v30 = 2082;
      CFIndex v31 = (CFIndex)v15;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::copyInternal(CFStringRef, CFTypeRef &, int) const", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
LABEL_31:
    CFRelease(cf);
    uint64_t result = *a3;
    if (*a3)
    {
      CFRelease((CFTypeRef)result);
      return 0;
    }
  }
  return result;
}

void sub_10013EDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10013EDE8(uint64_t a1, const void *a2, void *a3)
{
  int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), a2);
  double v5 = Value;
  *a3 = Value;
  if (Value) {
    CFRetain(Value);
  }
  return v5 != 0;
}

uint64_t sub_10013EE2C(uint64_t a1, CFDictionaryRef *a2)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 4) = 0xB00000003;
  *(void *)&long long v4 = -1;
  *((void *)&v4 + 1) = -1;
  *(_OWORD *)(a1 + 12) = v4;
  double v5 = (_DWORD *)(a1 + 12);
  *(_OWORD *)(a1 + 44) = v4;
  BOOL v6 = (_DWORD *)(a1 + 44);
  uint64_t v7 = a1 + 80;
  *(_OWORD *)(a1 + 28) = v4;
  *(_OWORD *)(a1 + 60) = v4;
  sub_10013FA84(a1 + 80);
  *(_DWORD *)(a1 + 536) = -1;
  *(void *)(a1 + 528) = -1;
  *(void *)(a1 + 520) = -1;
  *(void *)(a1 + 512) = -1;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 560) = -1;
  *(void *)(a1 + 568) = -1;
  *(_DWORD *)(a1 + 576) = -1;
  *(_OWORD *)(a1 + 580) = xmmword_101D23030;
  *(void *)(a1 + 600) = -1;
  *(_DWORD *)(a1 + 608) = -1;
  *(void *)(a1 + 616) = -1;
  *(void *)(a1 + 624) = -1;
  *(_DWORD *)(a1 + 632) = -1;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 672) = -1;
  *(void *)(a1 + 664) = -1;
  *(void *)(a1 + 656) = -1;
  *(void *)(a1 + 680) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 688) = -1;
  sub_10013FA80((int)v20, *a2);
  CFTypeRef v19 = 0;
  int v8 = sub_10013F3C8((uint64_t)v20, kCTCellMonitorCellRadioAccessTechnology, &v19);
  if (!v19) {
    int v8 = 0;
  }
  if (v8 == 1) {
    *(_DWORD *)(a1 + 8) = sub_10013FDDC(v19);
  }
  CFTypeRef v18 = 0;
  int v9 = sub_10013F3C8((uint64_t)v20, kCTCellMonitorCellType, &v18);
  if (!v18) {
    int v9 = 0;
  }
  if (v9 == 1) {
    *(_DWORD *)(a1 + 4) = sub_10013FF18(v18);
  }
  int v10 = *(_DWORD *)(a1 + 8);
  if ((v10 - 3) > 2)
  {
    switch(v10)
    {
      case 0:
      case 1:
      case 2:
      case 7:
        BOOL v11 = sub_1006140F8(a2, v5);
        goto LABEL_42;
      case 6:
        BOOL v11 = sub_10013DD1C(a2, a1 + 512);
        goto LABEL_42;
      case 9:
        BOOL v11 = sub_1006151C0(a2, v6);
        goto LABEL_42;
      case 10:
        *(unsigned char *)a1 = sub_1006147AC(a2, a1 + 600);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_102325900);
        }
        uint64_t v16 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "nrCell dictionary received from CT", (uint8_t *)__p, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_102325900);
          }
          *(_WORD *)uint64_t buf = 0;
          __int16 v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLCell::CLCell(const CFDictionaryRef &)", "%s\n", v15);
          if (v15 != (char *)__p) {
            goto LABEL_40;
          }
        }
        break;
      default:
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1023258E0);
        }
        CFTypeID v12 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
        {
          sub_10142D00C(a1);
          int v13 = v26 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)uint64_t buf = 136446210;
          *(void *)&uint8_t buf[4] = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "CELL_LOC: Invalid cell rat: %{public}s", buf, 0xCu);
          if (v26 < 0) {
            operator delete(__p[0]);
          }
        }
        if (!sub_10013D1A0(115, 0)) {
          break;
        }
        bzero(__p, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1023258E0);
        }
        sub_10142D00C(a1);
        if (v22 >= 0) {
          CFTypeID v14 = buf;
        }
        else {
          CFTypeID v14 = *(unsigned char **)buf;
        }
        int v23 = 136446210;
        CFIndex v24 = v14;
        __int16 v15 = (char *)_os_log_send_and_compose_impl();
        if (v22 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "CLCell::CLCell(const CFDictionaryRef &)", "%s\n", v15);
        if (v15 == (char *)__p) {
          break;
        }
LABEL_40:
        free(v15);
        break;
    }
  }
  else
  {
    BOOL v11 = sub_100612FC0(a2, v7);
LABEL_42:
    *(unsigned char *)a1 = v11;
  }
  sub_10013F3C4(v20);
  return a1;
}

void sub_10013F33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  sub_1006302A8(v5);
  _Unwind_Resume(a1);
}

void *sub_10013F374(void *a1)
{
  *a1 = off_1022B6710;
  double v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_10013F3C8(uint64_t a1, const __CFString *a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, const __CFString *, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf);
  if (result)
  {
    CFTypeID v7 = CFGetTypeID(cf);
    if (v7 == CFStringGetTypeID())
    {
      CFTypeRef v8 = cf;
      *a3 = cf;
      CFAutorelease(v8);
      return 1;
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      int v9 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        sub_1000FECE0(a2, (uint64_t)__p);
        int v10 = v27 >= 0 ? __p : *(unsigned char **)__p;
        CFTypeID v11 = CFGetTypeID(cf);
        CFTypeID TypeID = CFStringGetTypeID();
        *(_DWORD *)uint64_t buf = 136446722;
        __int16 v30 = v10;
        __int16 v31 = 2050;
        CFTypeID v32 = v11;
        __int16 v33 = 2050;
        CFTypeID v34 = TypeID;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "type IDs do not match for key %{public}s - %{public}lu vs %{public}lu", buf, 0x20u);
        if (SHIBYTE(v27) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B6AC8);
        }
        sub_1000FECE0(a2, (uint64_t)v21);
        if (v22 >= 0) {
          __int16 v15 = v21;
        }
        else {
          __int16 v15 = (void **)v21[0];
        }
        CFTypeID v16 = CFGetTypeID(cf);
        CFTypeID v17 = CFStringGetTypeID();
        *(_DWORD *)std::string __p = 136446722;
        *(void *)&__p[4] = v15;
        __int16 v25 = 2050;
        CFTypeID v26 = v16;
        __int16 v27 = 2050;
        CFTypeID v28 = v17;
        CFTypeRef v18 = (char *)_os_log_send_and_compose_impl();
        if (v22 < 0) {
          operator delete(v21[0]);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, CFStringRef &, int) const", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      int v13 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
        *(_DWORD *)uint64_t buf = 138412546;
        __int16 v30 = (unsigned char *)v14;
        __int16 v31 = 2112;
        CFTypeID v32 = (CFTypeID)a2;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B6AC8);
        }
        uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
        *(_DWORD *)std::string __p = 138412546;
        *(void *)&__p[4] = v19;
        __int16 v25 = 2112;
        CFTypeID v26 = (CFTypeID)a2;
        uint64_t v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, CFStringRef &, int) const", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      CFRelease(cf);
      return 0;
    }
  }
  return result;
}

void sub_10013F858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10013F890(void *a1, CFDictionaryRef theDict)
{
  *a1 = off_1022B6710;
  a1[1] = 0;
  if (theDict) {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, theDict);
  }
  else {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  a1[1] = MutableCopy;
  if (!MutableCopy)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    long long v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "could not create new mutable dictionary", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      BOOL v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLNameValuePair::CLNameValuePair(CFDictionaryRef)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return a1;
}

uint64_t sub_10013FA84(uint64_t a1)
{
  *(_DWORD *)a1 = -1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = -1;
  *(void *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = -1;
  *(void *)(a1 + 56) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = 0xFFFF;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 104) = _Q0;
  *(_OWORD *)(a1 + 120) = _Q0;
  long long v8 = _Q0;
  *(_OWORD *)(a1 + 136) = _Q0;
  *(_DWORD *)(a1 + 152) = 0;
  *(void *)(a1 + 156) = 0xBFF0000000000000;
  *(void *)(a1 + 172) = 0;
  *(void *)(a1 + 164) = 0;
  *(_DWORD *)(a1 + 180) = 0;
  *(void *)(a1 + 184) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 192) = 0x7FFFFFFF;
  *(void *)(a1 + 212) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 204) = 0;
  *(unsigned char *)(a1 + 220) = 0;
  *(void *)(a1 + 224) = 0x30000000BLL;
  *(_DWORD *)(a1 + 232) = -1;
  sub_100134750((void *)(a1 + 240), "");
  *(_DWORD *)(a1 + 264) = 0xFFFF;
  *(void *)(a1 + 276) = 0;
  *(void *)(a1 + 268) = 0;
  *(_OWORD *)(a1 + 284) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 300) = v8;
  *(_OWORD *)(a1 + 316) = v8;
  *(_OWORD *)(a1 + 332) = v8;
  *(_DWORD *)(a1 + 348) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 352) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 376) = 0;
  *(void *)(a1 + 380) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 388) = 0x7FFFFFFF;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 392) = 0;
  *(unsigned char *)(a1 + 416) = 0;
  *(void *)(a1 + 420) = -1;
  return a1;
}

void sub_10013FBB8(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_10013FBD4(uint64_t a1, void *context)
{
  CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 8);
  if (v3)
  {
    CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)sub_10013C32C, context);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    long long v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 136315138;
      CFTypeID v7 = context;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "dictionary, %s, NULL", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNameValuePair::printCSV(const char *)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

uint64_t sub_10013FDDC(const void *a1)
{
  if (CFEqual(a1, kCTCellMonitorRadioAccessTechnologyGSM)) {
    return 0;
  }
  if (CFEqual(a1, kCTCellMonitorRadioAccessTechnologyLTE)) {
    return 6;
  }
  if (CFEqual(a1, kCTCellMonitorRadioAccessTechnologyUMTS)) {
    return 7;
  }
  if (CFEqual(a1, kCTCellMonitorRadioAccessTechnologyUTRAN)) {
    return 2;
  }
  if (CFEqual(a1, kCTCellMonitorRadioAccessTechnologyCDMA1x)) {
    return 3;
  }
  if (CFEqual(a1, kCTCellMonitorRadioAccessTechnologyCDMAEVDO)) {
    return 4;
  }
  if (CFEqual(a1, kCTCellMonitorRadioAccessTechnologyCDMAHybrid)) {
    return 5;
  }
  if (CFEqual(a1, kCTCellMonitorRadioAccessTechnologyUTRAN2)) {
    return 9;
  }
  if (CFEqual(a1, kCTCellMonitorRadioAccessTechnologyNR)) {
    return 10;
  }
  return 11;
}

uint64_t sub_10013FF18(const void *a1)
{
  if (CFEqual(a1, kCTCellMonitorCellTypeServing)) {
    return 0;
  }
  if (CFEqual(a1, kCTCellMonitorCellTypeNeighbor)) {
    return 1;
  }
  if (CFEqual(a1, kCTCellMonitorCellTypeDetected)) {
    return 2;
  }
  return 3;
}

BOOL sub_10013FF94(uint64_t a1, const __CFString *a2, void *a3)
{
  if (sub_10013EDE8(a1 + 120, a2, a3)) {
    return 1;
  }
  CFPropertyListRef v6 = CFPreferencesCopyValue(a2, *(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), kCFPreferencesCurrentHost);
  *a3 = v6;
  if (v6) {
    return 1;
  }

  return sub_10013EDE8(a1 + 104, a2, a3);
}

BOOL sub_100140020(uint64_t a1, const void *a2, void *a3)
{
  uint64_t v7 = a1 + 128;
  uint64_t v6 = *(void *)(a1 + 128);
  cf[1] = (CFTypeRef)(a1 + 128);
  (*(void (**)(uint64_t))(v6 + 16))(a1 + 128);
  __int16 v13 = 256;
  cf[0] = 0;
  BOOL v8 = sub_10013EDE8(a1, a2, cf);
  if (v8)
  {
    CFTypeID v9 = CFGetTypeID(cf[0]);
    if (v9 == CFArrayGetTypeID() || v9 == CFDictionaryGetTypeID())
    {
      *a3 = [cf[0] cl_deepCopy];
    }
    else
    {
      CFTypeRef v10 = cf[0];
      *a3 = cf[0];
      CFRetain(v10);
    }
    CFRelease(cf[0]);
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  return v8;
}

void sub_100140124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10014013C(uint64_t a1, double a2, long double a3)
{
  if ((sub_100142194(a1) & 1) == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    __int16 v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      int v16 = *(unsigned __int8 *)(a1 + 64);
      int buf = 67240192;
      *(_DWORD *)double v68 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#Warning,DEM,availability file is not valid,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    int v17 = *(unsigned __int8 *)(a1 + 64);
    LODWORD(v59) = 67240192;
    DWORD1(v59) = v17;
    CFTypeRef v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v18);
    if (v18 == (char *)&buf) {
      return 0;
    }
LABEL_117:
    free(v18);
    return 0;
  }
  int v63 = 0;
  long long v61 = 0u;
  long long v62 = 0u;
  memset(v60, 0, sizeof(v60));
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v64 = 0;
  uint64_t v53 = 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = (void *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v7 = (void *)*v7;
    }
    int buf = 136446210;
    *(void *)double v68 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "DEM,Reading,%{public}s", (uint8_t *)&buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    __int16 v46 = (void *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      __int16 v46 = (void *)*v46;
    }
    int v54 = 136446210;
    *(void *)std::string::size_type v55 = v46;
    int v47 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v47);
    if (v47 != (char *)&buf) {
      free(v47);
    }
  }
  BOOL v8 = (const char **)(a1 + 72);
  CFTypeID v9 = (const char *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    CFTypeID v9 = *v8;
  }
  CFTypeRef v10 = fopen(v9, "rb");
  CFTypeID v11 = v10;
  if (!v10)
  {
    *(unsigned char *)(a1 + 64) = 1;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    uint64_t v19 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = (const char *)(a1 + 72);
      if (*(char *)(a1 + 95) < 0) {
        uint64_t v20 = *v8;
      }
      int v21 = *(unsigned __int8 *)(a1 + 64);
      int v22 = *__error();
      int buf = 136446722;
      *(void *)double v68 = v20;
      *(_WORD *)&v68[8] = 1026;
      int v69 = v21;
      __int16 v70 = 1026;
      int v71 = v22;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#Error,DEM,could not open,%{public}s,fNeedToDownloadAvlFile,%{public}d,errno,%{public}d", (uint8_t *)&buf, 0x18u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    if (*(char *)(a1 + 95) < 0) {
      BOOL v8 = (const char **)*v8;
    }
    int v48 = *(unsigned __int8 *)(a1 + 64);
    int v49 = *__error();
    int v54 = 136446722;
    *(void *)std::string::size_type v55 = v8;
    *(_WORD *)&v55[8] = 1026;
    int v56 = v48;
    __int16 v57 = 1026;
    int v58 = v49;
    CFTypeRef v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLDemTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v18);
    if (v18 == (char *)&buf) {
      return 0;
    }
    goto LABEL_117;
  }
  uint64_t v52 = 0;
  if (!sub_10014117C((BOOL)v10, &v59, (uint64_t)v60, (int *)&v53, (uint64_t)&v52))
  {
    *(unsigned char *)(a1 + 64) = 1;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    CFIndex v24 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v25 = *(unsigned __int8 *)(a1 + 64);
      int buf = 67240192;
      *(_DWORD *)double v68 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "DEM,readAvlHelper failed,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_44;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    int v50 = *(unsigned __int8 *)(a1 + 64);
    int v54 = 67240192;
    *(_DWORD *)std::string::size_type v55 = v50;
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v14);
    goto LABEL_121;
  }
  int v12 = SBYTE10(v61);
  if ((double)SBYTE10(v61) <= a2)
  {
    int v27 = SBYTE11(v61);
    if ((double)SBYTE11(v61) <= a2)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
      }
      __int16 v31 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        int buf = 134283777;
        *(double *)double v68 = a2;
        *(_WORD *)&v68[8] = 1025;
        int v69 = v27;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "DEM,input latitude, %{private}.3lf, beyond maximum acceptable latitude, %{private}d", (uint8_t *)&buf, 0x12u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_44;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
      }
      int v54 = 134283777;
      *(double *)std::string::size_type v55 = a2;
      *(_WORD *)&v55[8] = 1025;
      int v56 = v27;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v14);
      goto LABEL_121;
    }
    sub_100142F58(a3);
    signed int v29 = vcvtmd_s64_f64(v28 * 10.0) + 3600 * ((int)(floor(a2 * 10.0) + 900.0) - 10 * v12 - 900);
    if (v29 >= 0) {
      int v30 = v29;
    }
    else {
      int v30 = v29 + 7;
    }
    unsigned __int8 __ptr = 0;
    if ((v30 >> 3) >= HIDWORD(v62))
    {
      *(unsigned char *)(a1 + 64) = 1;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
      }
      CFTypeID v32 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        int v33 = *(unsigned __int8 *)(a1 + 64);
        int buf = 67240448;
        *(_DWORD *)double v68 = v30 >> 3;
        *(_WORD *)&v68[4] = 1026;
        *(_DWORD *)&v68[6] = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "#Warning,DEM,avl byte index,%{public}d,is larger than the data available in the availabilty file,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_44;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
      }
      int v34 = *(unsigned __int8 *)(a1 + 64);
      int v54 = 67240448;
      *(_DWORD *)std::string::size_type v55 = v30 >> 3;
      *(_WORD *)&v55[4] = 1026;
      *(_DWORD *)&v55[6] = v34;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v14);
      goto LABEL_121;
    }
    fseek(v11, v30 >> 3, 1);
    if (fread(&__ptr, 1uLL, 1uLL, v11) == 1)
    {
      fclose(v11);
      switch(v29 - (v30 & 0xFFFFFFF8))
      {
        case 0u:
          uint64_t v23 = __ptr & 1;
          break;
        case 1u:
          uint64_t v23 = (__ptr >> 1) & 1;
          break;
        case 2u:
          uint64_t v23 = (__ptr >> 2) & 1;
          break;
        case 3u:
          uint64_t v23 = (__ptr >> 3) & 1;
          break;
        case 4u:
          uint64_t v23 = (__ptr >> 4) & 1;
          break;
        case 5u:
          uint64_t v23 = (__ptr >> 5) & 1;
          break;
        case 6u:
          uint64_t v23 = (__ptr >> 6) & 1;
          break;
        case 7u:
          uint64_t v23 = (__ptr & 0x80u) != 0;
          break;
        default:
          *(unsigned char *)(a1 + 64) = 1;
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
          }
          CFTypeID v42 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
          {
            int v43 = *(unsigned __int8 *)(a1 + 64);
            int buf = 67240192;
            *(_DWORD *)double v68 = v43;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_FAULT, "DEM,Unexpected case,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 8u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
            }
            int v44 = *(unsigned __int8 *)(a1 + 64);
            int v54 = 67240192;
            *(_DWORD *)std::string::size_type v55 = v44;
            std::string::size_type v45 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLDemTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v45);
            if (v45 != (char *)&buf) {
              free(v45);
            }
          }
          goto LABEL_45;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
      }
      char v38 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v39 = *(unsigned __int8 *)(a1 + 64);
        int buf = 67240448;
        *(_DWORD *)double v68 = v23;
        *(_WORD *)&v68[4] = 1026;
        *(_DWORD *)&v68[6] = v39;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "DEM,isTileAvailable,%{public}d,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
        }
        int v40 = *(unsigned __int8 *)(a1 + 64);
        int v54 = 67240448;
        *(_DWORD *)std::string::size_type v55 = v23;
        *(_WORD *)&v55[4] = 1026;
        *(_DWORD *)&v55[6] = v40;
        int v41 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v41);
        if (v41 != (char *)&buf) {
          free(v41);
        }
      }
      goto LABEL_46;
    }
    *(unsigned char *)(a1 + 64) = 1;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    int v35 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      int v36 = *(unsigned __int8 *)(a1 + 64);
      int buf = 67240192;
      *(_DWORD *)double v68 = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "#Warning,DEM,Invalid CLDEM availability file - unable to get data byte,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
      }
      int v37 = *(unsigned __int8 *)(a1 + 64);
      int v54 = 67240192;
      *(_DWORD *)std::string::size_type v55 = v37;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v14);
      goto LABEL_121;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    __int16 v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      int buf = 134283777;
      *(double *)double v68 = a2;
      *(_WORD *)&v68[8] = 1025;
      int v69 = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "DEM,input latitude, %{private}.3lf, below minimum acceptable latitude, %{private}d", (uint8_t *)&buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
      }
      int v54 = 134283777;
      *(double *)std::string::size_type v55 = a2;
      *(_WORD *)&v55[8] = 1025;
      int v56 = v12;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v14);
LABEL_121:
      if (v14 != (char *)&buf) {
        free(v14);
      }
    }
  }
LABEL_44:
  fclose(v11);
LABEL_45:
  uint64_t v23 = 0;
LABEL_46:
  if (SHIBYTE(v66) < 0) {
    operator delete(v64);
  }
  return v23;
}

void sub_100141120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a71 < 0) {
    operator delete(*(void **)(v71 + 136));
  }
  _Unwind_Resume(a1);
}

BOOL sub_10014117C(BOOL result, long long *a2, uint64_t a3, int *a4, uint64_t a5)
{
  if (!result) {
    return result;
  }
  CFTypeID v9 = (FILE *)result;
  v56[1] = v56;
  CFTypeRef v10 = (FILE *)__chkstk_darwin();
  if (feof(v10)) {
    return 0;
  }
  v56[0] = a5;
  unsigned int v11 = 0;
  while (1)
  {
    char v57 = 0;
    if (fread(&v57, 1uLL, 1uLL, v9) != 1) {
      return 0;
    }
    uint64_t v12 = ftell(v9);
    if (v57 == 67) {
      break;
    }
LABEL_12:
    int v16 = feof(v9);
    uint64_t result = 0;
    if (!v16 && v11++ < 0x1FF) {
      continue;
    }
    return result;
  }
  uint64_t v13 = v12;
  LOBYTE(v54) = 67;
  if (fread((char *)&v54 + 1, 1uLL, 4uLL, v9) != 4) {
    return 0;
  }
  *(_DWORD *)a3 = v54;
  int v15 = v55;
  *(unsigned char *)(a3 + 4) = v55;
  v14.i32[0] = *(_DWORD *)a3;
  if (vmovn_s16((int16x8_t)vmovl_u8(v14)).u32[0] != 1447119939 || v15 != 76)
  {
    if (!fseek(v9, v13, 0)) {
      goto LABEL_12;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    int v37 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v60) = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_FAULT, "DEM,fseek returned non-zero", (uint8_t *)&v60, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(&v60, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    LOWORD(v58) = 0;
    char v38 = (int *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLDemTileAvailability::readAvlHelper(FILE *, unsigned char *, CLDEMTileAvailabilityData &, size_t &, size_t &)", "%s\n");
LABEL_137:
    if (v38 != &v60) {
      free(v38);
    }
    return 0;
  }
  unint64_t v18 = 0;
  *(void *)a4 = 5;
  do
  {
    *((unsigned char *)a2 + v18) = *(unsigned char *)(a3 + v18);
    ++v18;
    uint64_t v19 = *(void *)a4;
  }
  while (*(void *)a4 > v18);
  size_t v20 = (104 - v19);
  if (fread((char *)a2 + v19, 1uLL, v20, v9) != v20)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    int v39 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      LOWORD(v60) = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "#Warning,DEM,Invalid CLDEM availability file - header string", (uint8_t *)&v60, 2u);
    }
    uint64_t result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(&v60, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    LOWORD(v58) = 0;
    goto LABEL_136;
  }
  long long v21 = *a2;
  long long v22 = a2[2];
  *(_OWORD *)(a3 + 16) = a2[1];
  *(_OWORD *)(a3 + 32) = v22;
  *(_OWORD *)a3 = v21;
  long long v23 = a2[3];
  long long v24 = a2[4];
  long long v25 = a2[5];
  *(void *)(a3 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a3 + 64) = v24;
  *(_OWORD *)(a3 + 80) = v25;
  *(_OWORD *)(a3 + 48) = v23;
  size_t v26 = *(void *)a4 + v20;
  *(void *)a4 = v26;
  LODWORD(v23) = *(_DWORD *)a3;
  if (vmovn_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)&v23)).u32[0] != 1447119939 || *(unsigned char *)(a3 + 4) != 76)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    int v40 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      LOWORD(v60) = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "#Warning,DEM,Invalid CLDEM availability file - invalid header string", (uint8_t *)&v60, 2u);
    }
    uint64_t result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(&v60, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    LOWORD(v58) = 0;
    goto LABEL_136;
  }
  if (fread((char *)a2 + v26, 1uLL, 1uLL, v9) != 1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    int v41 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      LOWORD(v60) = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "#Warning,DEM,Invalid CLDEM availability file - version", (uint8_t *)&v60, 2u);
    }
    uint64_t result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(&v60, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    LOWORD(v58) = 0;
    goto LABEL_136;
  }
  uint64_t v27 = *(void *)a4;
  *(unsigned char *)(a3 + 104) = *((unsigned char *)a2 + *(void *)a4);
  *(void *)a4 = ++v27;
  if (fread((char *)a2 + v27, 1uLL, 1uLL, v9) != 1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    CFTypeID v42 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      LOWORD(v60) = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "#Warning,DEM,Invalid CLDEM availability file - headerLength", (uint8_t *)&v60, 2u);
    }
    uint64_t result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(&v60, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    LOWORD(v58) = 0;
    goto LABEL_136;
  }
  uint64_t v28 = *(void *)a4;
  *(unsigned char *)(a3 + 105) = *((unsigned char *)a2 + *(void *)a4);
  *(void *)a4 = ++v28;
  if (fread((char *)a2 + v28, 1uLL, 1uLL, v9) != 1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    int v43 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      LOWORD(v60) = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "#Warning,DEM,Invalid CLDEM availability file - minLat", (uint8_t *)&v60, 2u);
    }
    uint64_t result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(&v60, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    LOWORD(v58) = 0;
    goto LABEL_136;
  }
  uint64_t v29 = *(void *)a4;
  *(unsigned char *)(a3 + 106) = *((unsigned char *)a2 + *(void *)a4);
  *(void *)a4 = ++v29;
  if (fread((char *)a2 + v29, 1uLL, 1uLL, v9) != 1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    int v44 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      LOWORD(v60) = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "#Warning,DEM,Invalid CLDEM availability file - maxLat", (uint8_t *)&v60, 2u);
    }
    uint64_t result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(&v60, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    LOWORD(v58) = 0;
    goto LABEL_136;
  }
  uint64_t v30 = *(void *)a4;
  *(unsigned char *)(a3 + 107) = *((unsigned char *)a2 + *(void *)a4);
  *(void *)a4 = ++v30;
  if (fread((char *)a2 + v30, 1uLL, 4uLL, v9) != 4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    std::string::size_type v45 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      LOWORD(v60) = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "#Warning,DEM,Invalid CLDEM availability file - binsize", (uint8_t *)&v60, 2u);
    }
    uint64_t result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(&v60, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    LOWORD(v58) = 0;
LABEL_136:
    char v38 = (int *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLDemTileAvailability::readAvlHelper(FILE *, unsigned char *, CLDEMTileAvailabilityData &, size_t &, size_t &)", "%s\n");
    goto LABEL_137;
  }
  uint64_t v31 = *(void *)a4;
  float v32 = COERCE_FLOAT(bswap32(*(_DWORD *)((char *)a2 + *(void *)a4)));
  *(float *)(a3 + 108) = v32;
  uint64_t v33 = v31 + 4;
  *(void *)a4 = v33;
  if (fabsf(v32 + -0.1) <= 0.0001)
  {
    if (fread((char *)a2 + v33, 1uLL, 8uLL, v9) == 8)
    {
      uint64_t v46 = *(void *)a4;
      *(void *)(a3 + 112) = bswap64(*(void *)((char *)a2 + *(void *)a4));
      v46 += 8;
      *(void *)a4 = v46;
      if (fread((char *)a2 + v46, 1uLL, 4uLL, v9) == 4)
      {
        uint64_t v47 = *(void *)a4;
        *(_DWORD *)(a3 + 120) = bswap32(*(_DWORD *)((char *)a2 + *(void *)a4));
        v47 += 4;
        *(void *)a4 = v47;
        if (fread((char *)a2 + v47, 1uLL, 4uLL, v9) == 4)
        {
          uint64_t v48 = *(void *)a4;
          *(_DWORD *)(a3 + 124) = bswap32(*(_DWORD *)((char *)a2 + *(void *)a4));
          v48 += 4;
          *(void *)a4 = v48;
          if (fread((char *)a2 + v48, 1uLL, 4uLL, v9) == 4)
          {
            *(void *)v56[0] = *a4;
            uint64_t v49 = *(void *)a4;
            *(_DWORD *)(a3 + 128) = bswap32(*(_DWORD *)((char *)a2 + *(void *)a4));
            *(void *)a4 = v49 + 4;
            return 1;
          }
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
          }
          uint64_t v53 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
          {
            LOWORD(v60) = 0;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_INFO, "#Warning,DEM,Invalid CLDEM availability file - crc", (uint8_t *)&v60, 2u);
          }
          uint64_t result = sub_10013D1A0(115, 2);
          if (!result) {
            return result;
          }
          bzero(&v60, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
          }
          LOWORD(v58) = 0;
        }
        else
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
          }
          uint64_t v52 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
          {
            LOWORD(v60) = 0;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "#Warning,DEM,Invalid CLDEM availability file - data size", (uint8_t *)&v60, 2u);
          }
          uint64_t result = sub_10013D1A0(115, 2);
          if (!result) {
            return result;
          }
          bzero(&v60, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
          }
          LOWORD(v58) = 0;
        }
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
        }
        long long v51 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          LOWORD(v60) = 0;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "#Warning,DEM,Invalid CLDEM availability file - expiration age", (uint8_t *)&v60, 2u);
        }
        uint64_t result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(&v60, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
        }
        LOWORD(v58) = 0;
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
      }
      int v50 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        LOWORD(v60) = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "#Warning,DEM,Invalid CLDEM availability file - timestamp", (uint8_t *)&v60, 2u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(&v60, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
      }
      LOWORD(v58) = 0;
    }
    goto LABEL_136;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
  }
  int v34 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    double v35 = *(float *)(a3 + 108);
    int v60 = 134349056;
    double v61 = v35;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "#Warning,DEM,coarse avl file is not 0.1 deg by 0.1 deg,spacing unexpected,%{public}.1f,re-download needed", (uint8_t *)&v60, 0xCu);
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(&v60, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    double v36 = *(float *)(a3 + 108);
    int v58 = 134349056;
    double v59 = v36;
    goto LABEL_136;
  }
  return result;
}

uint64_t sub_100142194(uint64_t a1)
{
  int v61 = 0;
  long long v59 = 0u;
  long long v60 = 0u;
  memset(v58, 0, sizeof(v58));
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  long long v62 = 0;
  uint64_t v43 = 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)int buf = 67240192;
    LODWORD(v52) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "DEM,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    int v31 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)uint64_t v46 = 67240192;
    *(_DWORD *)&v46[4] = v31;
    float v32 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v32);
    if (v32 != (char *)buf) {
      free(v32);
    }
  }
  if (!sub_100142E38(a1))
  {
    *(unsigned char *)(a1 + 64) = 1;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    int v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      int v16 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)int buf = 67240192;
      LODWORD(v52) = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#Warning,DEM,availability file does not exist,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    int v17 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)uint64_t v46 = 67240192;
    *(_DWORD *)&v46[4] = v17;
    unint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v18);
    if (v18 == (char *)buf) {
      return 0;
    }
LABEL_80:
    free(v18);
    return 0;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
  }
  long long v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v5 = *(const char **)v5;
    }
    *(_DWORD *)int buf = 136446210;
    uint64_t v52 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "DEM,Reading,%{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    uint64_t v33 = (void *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v33 = (void *)*v33;
    }
    *(_DWORD *)uint64_t v46 = 136446210;
    *(void *)&v46[4] = v33;
    int v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v34);
    if (v34 != (char *)buf) {
      free(v34);
    }
  }
  uint64_t v6 = (const char **)(a1 + 72);
  uint64_t v7 = (const char *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    uint64_t v7 = *v6;
  }
  BOOL v8 = fopen(v7, "rb");
  CFTypeID v9 = v8;
  if (!v8)
  {
    *(unsigned char *)(a1 + 64) = 1;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    uint64_t v19 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      size_t v20 = (const char *)(a1 + 72);
      if (*(char *)(a1 + 95) < 0) {
        size_t v20 = *v6;
      }
      int v21 = *(unsigned __int8 *)(a1 + 64);
      int v22 = *__error();
      *(_DWORD *)int buf = 136446722;
      uint64_t v52 = v20;
      __int16 v53 = 1026;
      int v54 = v21;
      __int16 v55 = 1026;
      int v56 = v22;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#Error,DEM,could not open,%{public}s,fNeedToDownloadAvlFile,%{public}d,errno,%{public}d", buf, 0x18u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v6 = (const char **)*v6;
    }
    int v35 = *(unsigned __int8 *)(a1 + 64);
    int v36 = *__error();
    *(_DWORD *)uint64_t v46 = 136446722;
    *(void *)&v46[4] = v6;
    __int16 v47 = 1026;
    int v48 = v35;
    __int16 v49 = 1026;
    int v50 = v36;
    unint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLDemTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v18);
    if (v18 == (char *)buf) {
      return 0;
    }
    goto LABEL_80;
  }
  *(void *)uint64_t v46 = 0;
  if (!sub_10014117C((BOOL)v8, v57, (uint64_t)v58, (int *)&v43, (uint64_t)v46))
  {
    *(unsigned char *)(a1 + 64) = 1;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    long long v24 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      int v25 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)int buf = 67240192;
      LODWORD(v52) = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "#Warning,DEM,readAvlHelper failed,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
      }
      int v37 = *(unsigned __int8 *)(a1 + 64);
      int v44 = 67240192;
      int v45 = v37;
      char v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v38);
      if (v38 != (char *)buf) {
        free(v38);
      }
    }
    fclose(v9);
    goto LABEL_55;
  }
  fclose(v9);
  if (BYTE8(v59) != 1)
  {
    *(unsigned char *)(a1 + 64) = 1;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    size_t v26 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v27 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)int buf = 67240192;
      LODWORD(v52) = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "DEM,availability file version does not match expected,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_55;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_86;
    }
    goto LABEL_92;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  double v11 = *(double *)&v60;
  unsigned int v12 = DWORD2(v60);
  if (Current <= v11 + (double)v12 + (double)(random() % 86400))
  {
    *(unsigned char *)(a1 + 64) = 0;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    }
    uint64_t v29 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v30 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)int buf = 67240192;
      LODWORD(v52) = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "DEM,end of checkAvlFileValidityAndSetDownloadFlag function reached,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
      }
      int v41 = *(unsigned __int8 *)(a1 + 64);
      int v44 = 67240192;
      int v45 = v41;
      CFTypeID v42 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v42);
      if (v42 != (char *)buf) {
        free(v42);
      }
    }
    uint64_t v23 = 1;
    goto LABEL_56;
  }
  *(unsigned char *)(a1 + 64) = 1;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
  }
  uint64_t v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v14 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)int buf = 67240192;
    LODWORD(v52) = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "DEM,availability file has expired,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_86:
      int v39 = *(unsigned __int8 *)(a1 + 64);
      int v44 = 67240192;
      int v45 = v39;
      int v40 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v40);
      if (v40 != (char *)buf) {
        free(v40);
      }
      goto LABEL_55;
    }
LABEL_92:
    dispatch_once(&qword_1024193D0, &stru_1022CF8B8);
    goto LABEL_86;
  }
LABEL_55:
  uint64_t v23 = 0;
LABEL_56:
  if (SHIBYTE(v64) < 0) {
    operator delete(v62);
  }
  return v23;
}

void sub_100142DEC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100142E38(uint64_t a1)
{
  double v2 = (char *)sub_1000A6958();
  sub_1000A5670(v2, (uint64_t)&__str);
  if (*(char *)(a1 + 63) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)&__p.st_dev = *(_OWORD *)(a1 + 40);
    *(void *)&__p.st_uid = *(void *)(a1 + 56);
  }
  if ((__p.st_gid & 0x80000000) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = *(const std::string::value_type **)&__p.st_dev;
  }
  if ((__p.st_gid & 0x80000000) == 0) {
    __darwin_ino64_t st_gid_high = HIBYTE(__p.st_gid);
  }
  else {
    __darwin_ino64_t st_gid_high = __p.st_ino;
  }
  std::string::append(&__str, p_p, st_gid_high);
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  std::string::operator=((std::string *)(a1 + 72), &__str);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  int v6 = stat((const char *)p_str, &__p);
  if (v6) {
    *(unsigned char *)(a1 + 64) = 1;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v6 == 0;
}

void sub_100142F1C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 17) < 0) {
    operator delete(*(void **)(v1 - 40));
  }
  _Unwind_Resume(exception_object);
}

void sub_100142F40(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x100142F28);
}

void sub_100142F58(long double a1)
{
}

void sub_100142F90(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    (*(void (**)(void))(**(void **)(v4 + 464) + 56))(*(void *)(v4 + 464));
    uint64_t v6 = *(void *)(a1 + 40);
    if (*(double *)(v6 + 20) < 0.0 || vabdd_f64(v5, *(double *)(v6 + 76)) > 3600.0)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      uint64_t v7 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: location not relevant", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        LOWORD(v71) = 0;
        BOOL v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke", "%s\n", v8);
LABEL_24:
        if (v8 != (char *)buf) {
          free(v8);
        }
        return;
      }
      return;
    }
    long long v59 = (int *)(a2 + 4);
    sub_10014F674((uint64_t)&v71, (_DWORD *)(a2 + 4));
    sub_100146674((uint64_t)&v71, -1, *(double *)(*(void *)(a1 + 40) + 4), *(double *)(*(void *)(a1 + 40) + 12), *(double *)(a2 + 152), *(double *)(a2 + 160));
    if (sub_1001447B8((unsigned int *)&v71))
    {
      uint64_t v14 = sub_100144000(a2 + 184, (unsigned int *)&v71);
      uint64_t v15 = v14;
      if (v14 && sub_1001453B8(v14, *(unsigned char *)(v4 + 200)))
      {
        double v16 = (*(double (**)(void))(**(void **)(v4 + 464) + 56))(*(void *)(v4 + 464));
        int v17 = sub_100144E3C(v15, v16);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        unint64_t v18 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          int v19 = *v59;
          sub_100C094CC((uint64_t)&v71);
          size_t v20 = SHIBYTE(v63) >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)int buf = 67109634;
          *(_DWORD *)std::string v76 = v17;
          *(_WORD *)&v76[4] = 1024;
          *(_DWORD *)&v76[6] = (__int16)v19;
          __int16 v77 = 2080;
          uint64_t v78 = v20;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "TILE: updating mtime, %d, type, %d, tileid, %s", buf, 0x18u);
          if (SHIBYTE(v63) < 0) {
            operator delete(__p[0]);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10230D000);
          }
          int v56 = *v59;
          sub_100C094CC((uint64_t)&v71);
          if (SHIBYTE(v70) >= 0) {
            char v57 = &v66;
          }
          else {
            char v57 = v66;
          }
          LODWORD(__p[0]) = 67109634;
          HIDWORD(__p[0]) = v17;
          LOWORD(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 2) = (__int16)v56;
          HIWORD(__p[1]) = 2080;
          uint64_t v63 = v57;
          int v58 = (char *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v70) < 0) {
            operator delete(v66);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke", "%s\n", v58);
          if (v58 != (char *)buf) {
            free(v58);
          }
        }
      }
      int v21 = *v59;
      if (*v59 == 1)
      {
        unsigned int v22 = -18;
        uint64_t v23 = &qword_102419000;
        while (1)
        {
          for (unsigned int i = -18; i != 19; ++i)
          {
            if (!(i | v22)) {
              continue;
            }
            *(_OWORD *)stat __p = v71;
            uint64_t v63 = v72;
            if (SHIBYTE(v74) < 0)
            {
              sub_1000DC48C(&v64, (void *)v73, *((unint64_t *)&v73 + 1));
            }
            else
            {
              long long v64 = v73;
              uint64_t v65 = v74;
            }
            double v25 = *(double *)(a2 + 160);
            float32_t v26 = *(double *)(a2 + 152);
            *(float *)&double v25 = v25;
            sub_100143FCC((uint64_t)__p, v22, i, v26, *(float32x2_t *)&v25);
            if (sub_1001447B8((unsigned int *)__p))
            {
              uint64_t v27 = sub_100144000(a2 + 184, (unsigned int *)__p);
              uint64_t v28 = v27;
              if (!v27 || !sub_1001453B8(v27, *(unsigned char *)(v4 + 200))) {
                goto LABEL_69;
              }
              double v29 = (*(double (**)(void))(**(void **)(v4 + 464) + 56))(*(void *)(v4 + 464));
              int v30 = sub_100144E3C(v28, v29);
              if (v23[112] != -1) {
                dispatch_once(&qword_102419380, &stru_10230D000);
              }
              int v31 = qword_102419388;
              if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
              {
                int v32 = *v59;
                sub_100C094CC((uint64_t)__p);
                uint64_t v33 = &v66;
                if (SHIBYTE(v70) < 0) {
                  uint64_t v33 = (void **)v66;
                }
                *(_DWORD *)int buf = 67109634;
                *(_DWORD *)std::string v76 = v30;
                *(_WORD *)&v76[4] = 1024;
                *(_DWORD *)&v76[6] = (__int16)v32;
                __int16 v77 = 2080;
                uint64_t v78 = v33;
                _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "TILE: updating dem neighbor mtime, %d, type, %d, tileid, %s", buf, 0x18u);
                if (SHIBYTE(v70) < 0) {
                  operator delete(v66);
                }
                uint64_t v23 = &qword_102419000;
              }
              if (!sub_10013D1A0(115, 2)) {
                goto LABEL_69;
              }
              bzero(buf, 0x65CuLL);
              if (v23[112] != -1) {
                dispatch_once(&qword_102419380, &stru_10230D000);
              }
              int v34 = *v59;
              sub_100C094CC((uint64_t)__p);
              int v35 = v60;
              if (v61 < 0) {
                int v35 = (void **)v60[0];
              }
              LODWORD(v66) = 67109634;
              HIDWORD(v66) = v30;
              __int16 v67 = 1024;
              int v68 = (__int16)v34;
              __int16 v69 = 2080;
              __int16 v70 = v35;
              int v36 = (char *)_os_log_send_and_compose_impl();
              if (v61 < 0) {
                operator delete(v60[0]);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke", "%s\n", v36);
              uint64_t v23 = &qword_102419000;
            }
            else
            {
              if (v23[112] != -1) {
                dispatch_once(&qword_102419380, &stru_10230D000);
              }
              int v37 = qword_102419388;
              if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)int buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "Invalid dem neighbor tile id!", buf, 2u);
              }
              if (!sub_10013D1A0(115, 2)) {
                goto LABEL_69;
              }
              bzero(buf, 0x65CuLL);
              if (v23[112] != -1) {
                dispatch_once(&qword_102419380, &stru_10230D000);
              }
              LOWORD(v66) = 0;
              int v36 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke", "%s\n", v36);
            }
            if (v36 != (char *)buf) {
              free(v36);
            }
LABEL_69:
            if (SHIBYTE(v65) < 0) {
              operator delete((void *)v64);
            }
          }
          if (++v22 == 19)
          {
            int v21 = *v59;
            break;
          }
        }
      }
      if (v21 == 2)
      {
        unsigned int v38 = -20;
        int v39 = &qword_102419000;
        do
        {
          for (unsigned int j = -20; j != 21; ++j)
          {
            if (!(j | v38)) {
              continue;
            }
            *(_OWORD *)stat __p = v71;
            uint64_t v63 = v72;
            if (SHIBYTE(v74) < 0)
            {
              sub_1000DC48C(&v64, (void *)v73, *((unint64_t *)&v73 + 1));
            }
            else
            {
              long long v64 = v73;
              uint64_t v65 = v74;
            }
            double v41 = *(double *)(a2 + 160);
            float32_t v42 = *(double *)(a2 + 152);
            *(float *)&double v41 = v41;
            sub_100143FCC((uint64_t)__p, v38, j, v42, *(float32x2_t *)&v41);
            if (sub_1001447B8((unsigned int *)__p))
            {
              uint64_t v43 = sub_100144000(a2 + 184, (unsigned int *)__p);
              uint64_t v44 = v43;
              if (!v43 || !sub_1001453B8(v43, *(unsigned char *)(v4 + 200))) {
                goto LABEL_111;
              }
              double v45 = (*(double (**)(void))(**(void **)(v4 + 464) + 56))(*(void *)(v4 + 464));
              int v46 = sub_100144E3C(v44, v45);
              if (v39[112] != -1) {
                dispatch_once(&qword_102419380, &stru_10230D000);
              }
              __int16 v47 = qword_102419388;
              if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
              {
                int v48 = *v59;
                sub_100C094CC((uint64_t)__p);
                __int16 v49 = &v66;
                if (SHIBYTE(v70) < 0) {
                  __int16 v49 = (void **)v66;
                }
                *(_DWORD *)int buf = 67109634;
                *(_DWORD *)std::string v76 = v46;
                *(_WORD *)&v76[4] = 1024;
                *(_DWORD *)&v76[6] = (__int16)v48;
                __int16 v77 = 2080;
                uint64_t v78 = v49;
                _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "TILE: updating HRSE neighbor mtime, %d, type, %d, tileid, %s", buf, 0x18u);
                if (SHIBYTE(v70) < 0) {
                  operator delete(v66);
                }
                int v39 = &qword_102419000;
              }
              if (!sub_10013D1A0(115, 2)) {
                goto LABEL_111;
              }
              bzero(buf, 0x65CuLL);
              if (v39[112] != -1) {
                dispatch_once(&qword_102419380, &stru_10230D000);
              }
              int v50 = *v59;
              sub_100C094CC((uint64_t)__p);
              long long v51 = v60;
              if (v61 < 0) {
                long long v51 = (void **)v60[0];
              }
              LODWORD(v66) = 67109634;
              HIDWORD(v66) = v46;
              __int16 v67 = 1024;
              int v68 = (__int16)v50;
              __int16 v69 = 2080;
              __int16 v70 = v51;
              uint64_t v52 = (char *)_os_log_send_and_compose_impl();
              if (v61 < 0) {
                operator delete(v60[0]);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke", "%s\n", v52);
              int v39 = &qword_102419000;
            }
            else
            {
              if (v39[112] != -1) {
                dispatch_once(&qword_102419380, &stru_10230D000);
              }
              __int16 v53 = qword_102419388;
              if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)int buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "Invalid HRSE neighbor tile id!", buf, 2u);
              }
              if (!sub_10013D1A0(115, 2)) {
                goto LABEL_111;
              }
              bzero(buf, 0x65CuLL);
              if (v39[112] != -1) {
                dispatch_once(&qword_102419380, &stru_10230D000);
              }
              LOWORD(v66) = 0;
              uint64_t v52 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke", "%s\n", v52);
            }
            if (v52 != (char *)buf) {
              free(v52);
            }
LABEL_111:
            if (SHIBYTE(v65) < 0) {
              operator delete((void *)v64);
            }
          }
          ++v38;
        }
        while (v38 != 21);
      }
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CFE0);
      }
      int v54 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "TileMgr, Invalid tile id!, #CloneMe", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10230CFE0);
        }
        LOWORD(__p[0]) = 0;
        __int16 v55 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke", "%s\n", v55);
        if (v55 != (char *)buf) {
          free(v55);
        }
      }
    }
    if (SHIBYTE(v74) < 0) {
      operator delete((void *)v73);
    }
    return;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  CFTypeID v9 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = a2 + 8;
    if (*(char *)(a2 + 31) < 0) {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    *(_DWORD *)int buf = 136315138;
    *(void *)std::string v76 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "TILE: tiles, %s, not active", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v13 = *(void *)(a2 + 8);
    uint64_t v12 = a2 + 8;
    uint64_t v11 = v13;
    if (*(char *)(v12 + 23) >= 0) {
      uint64_t v11 = v12;
    }
    LODWORD(v71) = 136315138;
    *(void *)((char *)&v71 + 4) = v11;
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke", "%s\n", v8);
    goto LABEL_24;
  }
}

void sub_100143F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int32x2_t sub_100143FCC(uint64_t a1, unsigned int a2, unsigned int a3, float32_t a4, float32x2_t a5)
{
  a5.f32[1] = a4;
  int32x2_t result = vcvt_s32_f32(vmla_f32(vcvt_f32_s32(*(int32x2_t *)(a1 + 4)), a5, vcvt_f32_s32(vmul_s32((int32x2_t)__PAIR64__(a2, a3), vdup_n_s32(0x2710u)))));
  *(int32x2_t *)(a1 + 4) = result;
  return result;
}

uint64_t sub_100144000(uint64_t a1, unsigned int *a2)
{
  if (sub_1001447B8(a2))
  {
    uint64_t v4 = sub_100144248(a1, (uint64_t)a2);
    if ((void *)(a1 + 8) != v4) {
      return v4[10];
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022CF858);
    }
    uint64_t v6 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
    {
      sub_100C094CC((uint64_t)a2);
      uint64_t v7 = v15 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136380675;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Invalid tile ID: %{private}s, #CloneMe", buf, 0xCu);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022CF858);
      }
      sub_100C094CC((uint64_t)a2);
      if (v11 >= 0) {
        BOOL v8 = buf;
      }
      else {
        BOOL v8 = *(unsigned char **)buf;
      }
      int v12 = 136380675;
      uint64_t v13 = v8;
      CFTypeID v9 = (char *)_os_log_send_and_compose_impl();
      if (v11 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "CLTileFile *CLTilesMap::at(const TileId &) const", "%s\n", v9);
      if (v9 != (char *)__p) {
        free(v9);
      }
    }
  }
  return 0;
}

void *sub_100144248(uint64_t a1, uint64_t a2)
{
  double v2 = (void *)(a1 + 8);
  int v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  double v5 = (void *)(a1 + 8);
  do
  {
    int v6 = sub_1001442C4((uint64_t)(v3 + 4), a2);
    uint64_t v7 = v3 + 1;
    if (!v6)
    {
      uint64_t v7 = v3;
      double v5 = v3;
    }
    int v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_1001442C4(a2, (uint64_t)(v5 + 4))) {
    return v2;
  }
  return v5;
}

uint64_t sub_1001442C4(uint64_t a1, uint64_t a2)
{
  if (!sub_1001447B8((unsigned int *)a1))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022ED8A0);
    }
    uint64_t v4 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
    {
      sub_100C094CC(a1);
      double v5 = v40 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136380675;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Invalid tile ID: %{private}s, #CloneMe", buf, 0xCu);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022ED8A0);
      }
      sub_100C094CC(a1);
      if (v36 >= 0) {
        int v31 = buf;
      }
      else {
        int v31 = *(unsigned char **)buf;
      }
      int v37 = 136380675;
      unsigned int v38 = v31;
      int v32 = (char *)_os_log_send_and_compose_impl();
      if (v36 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL TileId::operator<(const TileId &) const", "%s\n", v32);
      if (v32 != (char *)__p) {
        free(v32);
      }
    }
  }
  if (!sub_1001447B8((unsigned int *)a2))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022ED8A0);
    }
    int v6 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
    {
      sub_100C094CC(a2);
      uint64_t v7 = v40 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136380675;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Invalid tile ID: %{private}s, #CloneMe", buf, 0xCu);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022ED8A0);
      }
      sub_100C094CC(a2);
      if (v36 >= 0) {
        uint64_t v33 = buf;
      }
      else {
        uint64_t v33 = *(unsigned char **)buf;
      }
      int v37 = 136380675;
      unsigned int v38 = v33;
      int v34 = (char *)_os_log_send_and_compose_impl();
      if (v36 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL TileId::operator<(const TileId &) const", "%s\n", v34);
      if (v34 != (char *)__p) {
        free(v34);
      }
    }
  }
  BOOL v8 = *(_DWORD *)a1 < *(_DWORD *)a2;
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return v8;
  }
  int v9 = *(_DWORD *)(a1 + 8);
  int v10 = *(_DWORD *)(a2 + 8);
  BOOL v8 = v9 < v10;
  if (v9 != v10) {
    return v8;
  }
  int v11 = *(_DWORD *)(a1 + 4);
  int v12 = *(_DWORD *)(a2 + 4);
  BOOL v8 = v11 < v12;
  if (v11 != v12) {
    return v8;
  }
  unint64_t v13 = *(void *)(a1 + 16);
  unint64_t v14 = *(void *)(a2 + 16);
  if (v13 != v14) {
    return v13 < v14;
  }
  char v15 = (const void **)(a1 + 24);
  uint64_t v16 = *(unsigned __int8 *)(a1 + 47);
  size_t v17 = *(void *)(a1 + 32);
  if ((v16 & 0x80u) == 0) {
    size_t v18 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    size_t v18 = *(void *)(a1 + 32);
  }
  int v21 = *(unsigned __int8 **)(a2 + 24);
  size_t v20 = (unsigned __int8 *)(a2 + 24);
  int v19 = v21;
  int v22 = (char)v20[23];
  if (v22 >= 0) {
    size_t v23 = v20[23];
  }
  else {
    size_t v23 = *((void *)v20 + 1);
  }
  if (v22 < 0) {
    size_t v20 = v19;
  }
  if (v18 == v23)
  {
    if ((v16 & 0x80) != 0)
    {
      uint64_t result = memcmp(*v15, v20, v17);
      if (!result) {
        return result;
      }
    }
    else
    {
      if (!v16) {
        return 0;
      }
      long long v24 = v20;
      double v25 = v15;
      uint64_t v26 = v16;
      while (*(unsigned __int8 *)v25 == *v24)
      {
        uint64_t result = 0;
        double v25 = (const void **)((char *)v25 + 1);
        ++v24;
        if (!--v26) {
          return result;
        }
      }
    }
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v28 = v15;
  }
  else {
    uint64_t v28 = *v15;
  }
  if (v23 >= v18) {
    size_t v29 = v18;
  }
  else {
    size_t v29 = v23;
  }
  int v30 = memcmp(v28, v20, v29);
  if (v30) {
    return v30 < 0;
  }
  else {
    return v18 < v23;
  }
}

BOOL sub_1001447B8(unsigned int *a1)
{
  if (!sub_100144C08((uint64_t)a1) || !sub_100144810(a1)) {
    return 0;
  }

  return sub_1001449D8((uint64_t)a1);
}

BOOL sub_100144810(unsigned int *a1)
{
  unsigned int v1 = *a1;
  if (*a1 >= 0xD)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022ED8A0);
    }
    int v3 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v4 = *a1;
      *(_DWORD *)int buf = 67109120;
      unsigned int v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Invalid tile type: %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022ED8A0);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL TileId::isTileTypeValid() const", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return v1 < 0xD;
}

BOOL sub_1001449D8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 7) && !*(unsigned char *)(a1 + 11)) {
    return 1;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022ED8A0);
  }
  int v3 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100C094CC(a1);
    unsigned int v4 = v12 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Invalid tile hash: %s", buf, 0xCu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022ED8A0);
    }
    sub_100C094CC(a1);
    if (v8 >= 0) {
      double v5 = buf;
    }
    else {
      double v5 = *(unsigned char **)buf;
    }
    int v9 = 136315138;
    int v10 = v5;
    int v6 = (char *)_os_log_send_and_compose_impl();
    if (v8 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL TileId::isHashValid() const", "%s\n", v6);
    if (v6 != (char *)__p) {
      free(v6);
    }
    return 0;
  }
  return result;
}

BOOL sub_100144C08(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) == 0 && (*(_DWORD *)(a1 + 8) & 0x80000000) == 0) {
    return 1;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022ED8A0);
  }
  int v3 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100C094CC(a1);
    unsigned int v4 = v12 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Invalid tile x, y: %s", buf, 0xCu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022ED8A0);
    }
    sub_100C094CC(a1);
    if (v8 >= 0) {
      double v5 = buf;
    }
    else {
      double v5 = *(unsigned char **)buf;
    }
    int v9 = 136315138;
    int v10 = v5;
    int v6 = (char *)_os_log_send_and_compose_impl();
    if (v8 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL TileId::isXYValid() const", "%s\n", v6);
    if (v6 != (char *)__p) {
      free(v6);
    }
    return 0;
  }
  return result;
}

uint64_t sub_100144E3C(uint64_t a1, double a2)
{
  double v3 = a2;
  return sub_100144E6C(a1, &v3, (double *)&qword_102477288);
}

uint64_t sub_100144E6C(uint64_t a1, double *a2, double *a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v27 = v6;
  (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  __int16 v28 = 256;
  double v7 = *a2;
  double v8 = *(double *)(a1 + 192);
  if (*a2 < v8 || v7 < *(double *)(a1 + 232))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    int v9 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      int v10 = sub_100147F50(*(_DWORD *)(a1 + 48));
      double v11 = *a2;
      *(_DWORD *)int buf = 136446466;
      int v39 = v10;
      __int16 v40 = 2050;
      double v41 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "@TileList, %{public}s, touch, ignoring, %{public}.2lf, #CloneMe", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CB28);
      }
      int v19 = sub_100147F50(*(_DWORD *)(a1 + 48));
      double v20 = *a2;
      *(_DWORD *)int v35 = 136446466;
      *(void *)&v35[4] = v19;
      *(_WORD *)&v35[12] = 2050;
      *(double *)&unsigned char v35[14] = v20;
      int v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTileFile::touchMTime(const CFAbsoluteTime &, const CFAbsoluteTime &)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    goto LABEL_8;
  }
  if (vabdd_f64(v7, v8) < *a3)
  {
LABEL_8:
    uint64_t v12 = 0;
    goto LABEL_9;
  }
  sub_100C0A030((int *)(a1 + 48), a1 + 8, &v26);
  double v14 = *a2;
  *(double *)(a1 + 192) = *a2;
  *(double *)(a1 + 232) = v14;
  sub_10104D5C4(a1);
  *(_OWORD *)int v35 = *(_OWORD *)(a1 + 48);
  *(void *)&v35[16] = *(void *)(a1 + 64);
  if (*(char *)(a1 + 95) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(a1 + 72), *(void *)(a1 + 80));
  }
  else
  {
    long long __p = *(_OWORD *)(a1 + 72);
    uint64_t v37 = *(void *)(a1 + 88);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  char v15 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    uint64_t v16 = sub_100147F50(*(unsigned int *)v35);
    double v17 = sub_10013DAC0((uint64_t)v35);
    double v18 = sub_10013DA9C((uint64_t)v35);
    *(_DWORD *)int buf = 136446723;
    int v39 = v16;
    __int16 v40 = 2049;
    double v41 = v17;
    __int16 v42 = 2049;
    double v43 = v18;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "@TileList, %{public}s, touch, llsw, %{private}.2lf, %{private}.2lf", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    int v22 = sub_100147F50(*(unsigned int *)v35);
    double v23 = sub_10013DAC0((uint64_t)v35);
    double v24 = sub_10013DA9C((uint64_t)v35);
    int v29 = 136446723;
    int v30 = v22;
    __int16 v31 = 2049;
    double v32 = v23;
    __int16 v33 = 2049;
    double v34 = v24;
    double v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::touchMTime(const CFAbsoluteTime &, const CFAbsoluteTime &)", "%s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
  }
  if (SHIBYTE(v37) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = 1;
LABEL_9:
  (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  return v12;
}

void sub_100145340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  sub_1019DB560((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_1001453B8(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  uint64_t v5 = sub_10014548C(a1);
  if (a2)
  {
    if ((int)sub_10104BDA0(a1) > 2) {
      uint64_t v5 = v5;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return v5;
}

void sub_100145470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10014548C(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 40);
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  LODWORD(v1) = *(unsigned __int8 *)(v1 + 32);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v1 == 0;
}

uint64_t sub_100145510(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 8) + 64) assertInside];
  if (byte_10247B1E0)
  {
    uint64_t v4 = mach_absolute_time();
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v1 = v4 - *(void *)(v5 + 96);
    if (*(unsigned char *)(v5 + 88) && v1 > qword_10247B1F8)
    {
      uint64_t v2 = &qword_102419000;
      if (qword_102419630 == -1) {
        goto LABEL_8;
      }
      goto LABEL_22;
    }
  }
  while (1)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    int v12 = *(_DWORD *)(v11 + 72);
    if (v12 > 0) {
      break;
    }
    uint64_t result = sub_101A64248();
LABEL_21:
    sub_101A643AC(result);
LABEL_22:
    dispatch_once(&qword_102419630, &stru_1022B8580);
LABEL_8:
    double v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      double v8 = *(const char **)(*(void *)(a1 + 8) + 104);
      if (!v8) {
        double v8 = "<unnamed>";
      }
      *(_DWORD *)int buf = 136315650;
      double v17 = v8;
      __int16 v18 = 2048;
      uint64_t v19 = a1;
      __int16 v20 = 2048;
      double v21 = (double)(v1 * dword_10247B1E4 / *(unsigned int *)algn_10247B1E8) / 1000000000.0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning TIMEOUT: Held lock '%s' (%p) for %f seconds", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v2[198] != -1) {
        dispatch_once(&qword_102419630, &stru_1022B8580);
      }
      uint64_t v1 = (uint64_t)buf;
      char v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void BasicMutex::unlock()", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    uint64_t v9 = sub_10013D1F4();
    int v10 = *(FILE **)(v9 + 192);
    if (v10) {
      sub_100AFBB84(v9, 0, v10);
    }
  }
  int v13 = v12 - 1;
  *(_DWORD *)(v11 + 72) = v13;
  if (!v13) {
    *(void *)(v11 + 80) = 0;
  }
  uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)v11);
  if (result) {
    goto LABEL_21;
  }
  return result;
}

pthread_t sub_1001457E0(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 8) + 64) assertInside];
  uint64_t v3 = (uint64_t)&unk_10247B000;
  if (byte_10247B1E0) {
    uint64_t v4 = mach_absolute_time();
  }
  else {
    uint64_t v4 = 0;
  }
  if (pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8)))
  {
    pthread_t result = (pthread_t)sub_101A640E4();
    goto LABEL_26;
  }
  if (byte_10247B1E0)
  {
    uint64_t v5 = mach_absolute_time();
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(v6 + 96) = v5;
    uint64_t v3 = v5 - v4;
    if (*(unsigned char *)(v6 + 88) && v3 > qword_10247B1F0)
    {
      uint64_t v1 = &qword_102419000;
      if (qword_102419630 == -1) {
        goto LABEL_12;
      }
      goto LABEL_28;
    }
  }
  while (1)
  {
    pthread_t result = pthread_self();
    uint64_t v13 = *(void *)(a1 + 8);
    int v14 = *(_DWORD *)(v13 + 72);
    if (v14 < 0)
    {
LABEL_26:
      pthread_t result = (pthread_t)sub_100145AEC(result);
      goto LABEL_27;
    }
    char v15 = *(_opaque_pthread_t **)(v13 + 80);
    if (v14)
    {
      if (v15 == result) {
        break;
      }
      pthread_t result = (pthread_t)sub_101A63F80();
    }
    if (!v15) {
      break;
    }
LABEL_27:
    sub_101A63E1C(result);
LABEL_28:
    dispatch_once(&qword_102419630, &stru_1022B8580);
LABEL_12:
    double v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(const char **)(*(void *)(a1 + 8) + 104);
      *(_DWORD *)int buf = 134218498;
      double v18 = (double)(v3 * dword_10247B1E4 / *(unsigned int *)algn_10247B1E8) / 1000000000.0;
      if (!v9) {
        uint64_t v9 = "<unnamed>";
      }
      __int16 v19 = 2080;
      __int16 v20 = v9;
      __int16 v21 = 2048;
      uint64_t v22 = a1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning TIMEOUT: Waited %f seconds to aquire lock '%s' (%p)", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v1[198] != -1) {
        dispatch_once(&qword_102419630, &stru_1022B8580);
      }
      uint64_t v3 = (uint64_t)buf;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void BasicMutex::lock()", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    uint64_t v10 = sub_10013D1F4();
    uint64_t v11 = *(FILE **)(v10 + 192);
    if (v11) {
      sub_100AFBB84(v10, 0, v11);
    }
  }
  *(_DWORD *)(v13 + 72) = v14 + 1;
  *(void *)(v13 + 80) = result;
  return result;
}

#error "100145B64: call analysis failed (funcsize=71)"

uint64_t sub_100145C50(uint64_t a1, unsigned int a2, uint64_t a3, double a4, double a5, double a6)
{
  unsigned int v50 = a2;
  if (a2 - 3 >= 3)
  {
    sub_101AA8D6C();
    __break(1u);
LABEL_50:
    dispatch_once(&qword_1024193A0, &stru_1023197C0);
    goto LABEL_17;
  }
  uint64_t v6 = a1;
  if (*(unsigned char *)(a1 + 129))
  {
    sub_10014F674((uint64_t)&v47, &v50);
    std::string::assign(&v49, "");
    uint64_t v12 = sub_10015EF24(v47, (void *)(v6 + 416));
    if (*(unsigned char *)(v6 + 160))
    {
      sub_100146674((uint64_t)&v47, a3, a4, a5, *(double *)(v12 + 152), *(double *)(v12 + 160));
      if (sub_1001447B8((unsigned int *)&v47))
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023197C0);
        }
        uint64_t v13 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v14 = v50;
          char v15 = sub_100147F50(v50);
          sub_100C094CC((uint64_t)&v47);
          uint64_t v16 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
          int v17 = *(_DWORD *)(v6 + 352);
          *(_DWORD *)int buf = 67241475;
          *(_DWORD *)int v58 = v14;
          *(_WORD *)&v58[4] = 2082;
          *(void *)&v58[6] = v15;
          *(_WORD *)&v58[14] = 2049;
          *(double *)&v58[16] = a4;
          __int16 v59 = 2049;
          *(double *)long long v60 = a5;
          *(_WORD *)&v60[8] = 2081;
          char v61 = v16;
          __int16 v62 = 1026;
          int v63 = v17;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "TileDl, requestDownload, type, %{public}d, %{public}s, location, %{private}14.8lf, %{private}14.8lf, id, %{private}s, reachbility, %{public}d", buf, 0x36u);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023197C0);
          }
          unsigned int v36 = v50;
          uint64_t v37 = sub_100147F50(v50);
          sub_100C094CC((uint64_t)&v47);
          if (v46 >= 0) {
            unsigned int v38 = &v45;
          }
          else {
            unsigned int v38 = v45;
          }
          int v39 = *(_DWORD *)(v6 + 352);
          *(_DWORD *)long long __p = 67241475;
          *(_DWORD *)&__p[4] = v36;
          *(_WORD *)&__p[8] = 2082;
          *(void *)&__p[10] = v37;
          *(_WORD *)&unsigned char __p[18] = 2049;
          *(double *)&unsigned char __p[20] = a4;
          __int16 v52 = 2049;
          *(double *)__int16 v53 = a5;
          *(_WORD *)&v53[8] = 2081;
          int v54 = v38;
          __int16 v55 = 1026;
          int v56 = v39;
          __int16 v40 = (char *)_os_log_send_and_compose_impl();
          if (v46 < 0) {
            operator delete(v45);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, CFAbsoluteTime)", "%s\n", v40);
          if (v40 != (char *)buf) {
            free(v40);
          }
        }
        uint64_t v18 = *(void *)(v6 + 376);
        long long v42 = v47;
        uint64_t v43 = v48;
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
          sub_1000DC48C(&v44, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
        }
        else {
          std::string v44 = v49;
        }
        int v29 = sub_1001468F8(v18, (uint64_t)&v42, a6);
        int v30 = v29;
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v44.__r_.__value_.__l.__data_);
          if (!v30)
          {
LABEL_45:
            uint64_t v21 = 1;
LABEL_46:
            if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v49.__r_.__value_.__l.__data_);
            }
            return v21;
          }
        }
        else if (!v29)
        {
          goto LABEL_45;
        }
        int v31 = (*(uint64_t (**)(void))(**(void **)(v6 + 368) + 40))(*(void *)(v6 + 368));
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023197C0);
        }
        double v32 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 67240192;
          *(_DWORD *)int v58 = v31;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "@TileSched, cell, set, %{public}d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023197C0);
          }
          *(_DWORD *)long long __p = 67240192;
          *(_DWORD *)&__p[4] = v31;
          double v41 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, CFAbsoluteTime)", "%s\n", v41);
          if (v41 != (char *)buf) {
            free(v41);
          }
        }
        goto LABEL_45;
      }
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      __int16 v28 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 134284545;
        *(double *)int v58 = a4;
        *(_WORD *)&v58[8] = 2049;
        *(double *)&v58[10] = a5;
        *(_WORD *)&v58[18] = 1024;
        *(_DWORD *)&v58[20] = v47;
        __int16 v59 = 1024;
        *(_DWORD *)long long v60 = DWORD1(v47);
        *(_WORD *)&v60[4] = 1024;
        *(_DWORD *)&v60[6] = DWORD2(v47);
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "@TileError, RequestID, ll, %{private}.3lf, %{private}.3lf, tid, %d, %d, %d", buf, 0x28u);
      }
      if (!sub_10013D1A0(115, 2))
      {
LABEL_34:
        uint64_t v21 = 0;
        goto LABEL_46;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      *(_DWORD *)long long __p = 134284545;
      *(double *)&__p[4] = a4;
      *(_WORD *)&unsigned char __p[12] = 2049;
      *(double *)&unsigned char __p[14] = a5;
      *(_WORD *)&__p[22] = 1024;
      *(_DWORD *)&__p[24] = v47;
      __int16 v52 = 1024;
      *(_DWORD *)__int16 v53 = DWORD1(v47);
      *(_WORD *)&v53[4] = 1024;
      *(_DWORD *)&v53[6] = DWORD2(v47);
      uint64_t v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, CFAbsoluteTime)", "%s\n", v27);
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      uint64_t v22 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
      {
        unsigned int v23 = v50;
        double v24 = sub_100147F50(v50);
        *(_DWORD *)int buf = 67240451;
        *(_DWORD *)int v58 = v23;
        *(_WORD *)&v58[4] = 2081;
        *(void *)&v58[6] = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "@TileDl, requestDownload, type, %{public}d, %{private}s, not active", buf, 0x12u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      unsigned int v25 = v50;
      std::string v26 = sub_100147F50(v50);
      *(_DWORD *)long long __p = 67240451;
      *(_DWORD *)&__p[4] = v25;
      *(_WORD *)&__p[8] = 2081;
      *(void *)&__p[10] = v26;
      uint64_t v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, CFAbsoluteTime)", "%s\n", v27);
    }
    if (v27 != (char *)buf) {
      free(v27);
    }
    goto LABEL_34;
  }
  double v7 = &qword_102419000;
  if (qword_1024193A0 != -1) {
    goto LABEL_50;
  }
LABEL_17:
  __int16 v19 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    int v20 = *(unsigned __int8 *)(v6 + 128);
    *(_DWORD *)int buf = 67240192;
    *(_DWORD *)int v58 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "TileDl, ignore before first unlock, fDataProtectionEnabled, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v7[116] != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    int v34 = *(unsigned __int8 *)(v6 + 128);
    *(_DWORD *)long long __p = 67240192;
    *(_DWORD *)&__p[4] = v34;
    int v35 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, CFAbsoluteTime)", "%s\n", v35);
    if (v35 != (char *)buf) {
      free(v35);
    }
  }
  return 0;
}

void sub_100146604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100146674(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  int v10 = (int)(a5 * 10000.0);
  int v11 = (int)(a6 * 10000.0);
  if (v10) {
    BOOL v12 = v11 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    uint64_t v13 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 67240448;
      int v19 = v10;
      __int16 v20 = 1026;
      int v21 = v11;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "TileFile, Delta lat/lon zero, %{public}d, %{public}d, #CloneMe", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CB28);
      }
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLTileFileUtility::initTileIdWithLatitudeAndLongitude(TileId &, double, double, double, double, sec_key_t)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    int v11 = 10000;
    int v10 = 10000;
  }
  int v14 = (int)((a3 + 90.0) * 10000.0) / v10 * v10;
  int v15 = (int)((a4 + 180.0) * 10000.0) / v11 * v11;
  *(_DWORD *)(a1 + 4) = v15;
  *(_DWORD *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = a2;
  return sub_1001468EC(a1, v14, v15, a2);
}

uint64_t sub_1001468EC(uint64_t result, int a2, int a3, uint64_t a4)
{
  *(_DWORD *)(result + 4) = a3;
  *(_DWORD *)(result + 8) = a2;
  *(void *)(result + 16) = a4;
  return result;
}

uint64_t sub_1001468F8(uint64_t a1, uint64_t a2, double a3)
{
  char v6 = sub_100147F74(*(_DWORD *)(a1 + 104), *(unsigned __int8 *)(a1 + 109));
  if (!*(unsigned char *)(a1 + 111))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    int v21 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "TileDl, preindexskip, request, #CloneMe", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023130F0);
      }
      *(_WORD *)int v104 = 0;
      long long v47 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)", "%s\n", v47);
      if (v47 != buf) {
        free(v47);
      }
    }
    char v22 = 0;
    return v22 & 1;
  }
  char v7 = v6;
  uint64_t v96 = sub_10015EF24(*(_DWORD *)a2, *(void **)(a1 + 120));
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023130F0);
  }
  double v8 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = sub_100147F50(*(_DWORD *)a2);
    *(_DWORD *)int buf = 136446723;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&unsigned char buf[12] = 2049;
    double v106 = sub_10013DAC0(a2);
    *(_WORD *)BOOL v107 = 2049;
    *(void *)&v107[2] = sub_10013DA9C(a2);
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "@TileDl, %{public}s, request, llsw, %{private}.2lf, %{private}.2lf", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    double v45 = sub_100147F50(*(_DWORD *)a2);
    *(_DWORD *)int v104 = 136446723;
    *(void *)&v104[4] = v45;
    *(_WORD *)&unsigned char v104[12] = 2049;
    *(void *)&v104[14] = sub_10013DAC0(a2);
    *(_WORD *)&v104[22] = 2049;
    *(void *)&v104[24] = sub_10013DA9C(a2);
    char v46 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)", "%s\n", v46);
    if (v46 != buf) {
      free(v46);
    }
  }
  int v10 = sub_100144248(a1, a2);
  uint64_t v93 = v96 + 184;
  BOOL v11 = sub_10013D858(v96 + 184, (unsigned int *)a2);
  uint64_t v94 = (void *)(a1 + 8);
  if (v11 && (uint64_t v12 = sub_100144000(v93, (unsigned int *)a2), sub_1001453B8(v12, *(unsigned char *)(a1 + 110))))
  {
    BOOL v13 = v94 == v10;
    uint64_t v14 = sub_100144000(v93, (unsigned int *)a2);
    BOOL v15 = v13 && sub_100147F80(a1, v14, a3);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    int v30 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v14 + 16))(buf, v14);
      int v31 = v107[1] >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)int v104 = 67240451;
      *(_DWORD *)&v104[4] = v15;
      *(_WORD *)&v104[8] = 2081;
      *(void *)&v104[10] = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "@TileQueue, usable, %{public}d, tileid, %{private}s", v104, 0x12u);
      if ((v107[1] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023130F0);
      }
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v14 + 16))(v104, v14);
      if (v104[23] >= 0) {
        double v32 = v104;
      }
      else {
        double v32 = *(unsigned char **)v104;
      }
      *(_DWORD *)int v99 = 67240451;
      *(_DWORD *)&v99[4] = v15;
      *(_WORD *)&v99[8] = 2081;
      *(void *)&v99[10] = v32;
      __int16 v33 = (char *)_os_log_send_and_compose_impl();
      if ((v104[23] & 0x80000000) != 0) {
        operator delete(*(void **)v104);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)", "%s\n", v33);
      if (v33 != buf) {
LABEL_123:
      }
        free(v33);
LABEL_124:
      if (!v15) {
        goto LABEL_125;
      }
LABEL_92:
      sub_10125C090(*(_DWORD *)(v96 + 4), v99);
      uint64_t v98 = *(void *)v99;
      *(void *)int v99 = 0;
      sub_10112BCE8(a1, &v98, a2, a3);
      uint64_t v38 = v98;
      uint64_t v98 = 0;
      if (v38) {
        (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
      }
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023130F0);
      }
      int v39 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v40 = sub_100147F50(*(_DWORD *)a2);
        double v41 = sub_10013DAC0(a2);
        double v42 = sub_10013DA9C(a2);
        uint64_t v43 = *(void *)(a1 + 16);
        *(_DWORD *)int buf = 136446979;
        *(void *)&uint8_t buf[4] = v40;
        *(_WORD *)&unsigned char buf[12] = 2049;
        double v106 = v41;
        *(_WORD *)BOOL v107 = 2049;
        *(double *)&v107[2] = v42;
        *(_WORD *)&v107[10] = 2050;
        uint64_t v108 = v43;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "@TileReq, %{public}s, onlist, llsw, %{private}.2lf, %{private}.2lf, center, size, %{public}ld", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023130F0);
        }
        uint64_t v48 = sub_100147F50(*(_DWORD *)a2);
        double v49 = sub_10013DAC0(a2);
        double v50 = sub_10013DA9C(a2);
        uint64_t v51 = *(void *)(a1 + 16);
        *(_DWORD *)int v104 = 136446979;
        *(void *)&v104[4] = v48;
        *(_WORD *)&unsigned char v104[12] = 2049;
        *(double *)&v104[14] = v49;
        *(_WORD *)&v104[22] = 2049;
        *(double *)&v104[24] = v50;
        *(_WORD *)&v104[32] = 2050;
        *(void *)&v104[34] = v51;
        __int16 v52 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)", "%s\n", v52);
        if (v52 != buf) {
          free(v52);
        }
      }
      uint64_t v44 = *(void *)v99;
      *(void *)int v99 = 0;
      if (v44) {
        (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
      }
      char v29 = 1;
      goto LABEL_126;
    }
  }
  else
  {
    if (v94 != v10)
    {
      uint64_t v16 = v10[10];
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023130F0);
      }
      int v17 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v16 + 16))(buf, v16);
        uint64_t v18 = v107[1] >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)int v104 = 136380675;
        *(void *)&v104[4] = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "@TileQueue, onlist, tileid, %{private}s", v104, 0xCu);
        if ((v107[1] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023130F0);
        }
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v16 + 16))(v104, v16);
        if (v104[23] >= 0) {
          int v19 = v104;
        }
        else {
          int v19 = *(unsigned char **)v104;
        }
        *(_DWORD *)int v99 = 136380675;
        *(void *)&v99[4] = v19;
        __int16 v20 = (char *)_os_log_send_and_compose_impl();
        if ((v104[23] & 0x80000000) != 0) {
          operator delete(*(void **)v104);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)", "%s\n", v20);
        if (v20 != buf) {
          free(v20);
        }
      }
      goto LABEL_125;
    }
    char v23 = !v11;
    if (!*(unsigned char *)(a1 + 110)) {
      char v23 = 1;
    }
    if (v23)
    {
      if (v11)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023130F0);
        }
        unsigned int v25 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          int v26 = *(unsigned __int8 *)(a1 + 110);
          *(_DWORD *)int buf = 67240961;
          *(_DWORD *)&uint8_t buf[4] = 1;
          *(_WORD *)&uint8_t buf[8] = 1025;
          *(_DWORD *)&buf[10] = 0;
          double v106 = 2.18053518e-289;
          *(_DWORD *)BOOL v107 = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "@TileQueue, skip, alreadyDownloaded, %{public}d, accessible, %{private}d, inqueue, %{public}d, locked, %{private}d", buf, 0x1Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023130F0);
          }
          int v27 = *(unsigned __int8 *)(a1 + 110);
          *(_DWORD *)int v104 = 67240961;
          *(_DWORD *)&v104[4] = 1;
          *(_WORD *)&v104[8] = 1025;
          *(_DWORD *)&v104[10] = 0;
          *(_WORD *)&v104[14] = 1026;
          *(_DWORD *)&v104[16] = 0;
          *(_WORD *)&v104[20] = 1025;
          *(_DWORD *)&v104[22] = v27;
          __int16 v28 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)", "%s\n", v28);
          if (v28 != buf) {
            free(v28);
          }
          char v29 = 0;
          goto LABEL_126;
        }
        goto LABEL_125;
      }
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023130F0);
      }
      int v34 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "@TileQueue, queue, 1", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023130F0);
        }
        *(_WORD *)int v104 = 0;
        int v35 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)", "%s\n", v35);
        if (v35 != buf) {
          free(v35);
        }
      }
      goto LABEL_92;
    }
    uint64_t v24 = sub_100144000(v93, (unsigned int *)a2);
    BOOL v15 = (v7 & 1) != 0 || *(unsigned char *)(a1 + 69) != 0;
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    unsigned int v36 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v24 + 16))(buf, v24);
      uint64_t v37 = v107[1] >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)int v104 = 67240451;
      *(_DWORD *)&v104[4] = v15;
      *(_WORD *)&v104[8] = 2081;
      *(void *)&v104[10] = v37;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "@TileQueue, unreadable, %{public}d, tileid, %{private}s", v104, 0x12u);
      if ((v107[1] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023130F0);
      }
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v24 + 16))(v104, v24);
      if (v104[23] >= 0) {
        __int16 v53 = v104;
      }
      else {
        __int16 v53 = *(unsigned char **)v104;
      }
      *(_DWORD *)int v99 = 67240451;
      *(_DWORD *)&v99[4] = v15;
      *(_WORD *)&v99[8] = 2081;
      *(void *)&v99[10] = v53;
      __int16 v33 = (char *)_os_log_send_and_compose_impl();
      if ((v104[23] & 0x80000000) != 0) {
        operator delete(*(void **)v104);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)", "%s\n", v33);
      if (v33 != buf) {
        goto LABEL_123;
      }
      goto LABEL_124;
    }
  }
  if (v15) {
    goto LABEL_92;
  }
LABEL_125:
  char v29 = 0;
LABEL_126:
  *(_OWORD *)int v104 = *(_OWORD *)a2;
  *(void *)&v104[16] = *(void *)(a2 + 16);
  int v54 = (const std::string *)(a2 + 24);
  if (*(char *)(a2 + 47) < 0)
  {
    sub_1000DC48C(&v104[24], *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)&v104[24] = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    *(void *)&v104[40] = *(void *)(a2 + 40);
  }
  char v92 = v29;
  int v55 = *(_DWORD *)(a1 + 72);
  if ((v55 & 0x80000000) == 0)
  {
    uint64_t v95 = a2;
    unsigned int v56 = -v55;
    int v90 = (2 * v55) | 1;
    int v91 = -v55;
    int v89 = *(_DWORD *)(a1 + 72);
    do
    {
      int v57 = v90;
      unsigned int v58 = v91;
      do
      {
        if (!(v58 | v56)) {
          goto LABEL_154;
        }
        *(_OWORD *)int v104 = *(_OWORD *)v95;
        *(void *)&v104[16] = *(void *)(v95 + 16);
        std::string::operator=((std::string *)&v104[24], v54);
        double v59 = *(double *)(v96 + 160);
        float32_t v60 = *(double *)(v96 + 152);
        *(float *)&double v59 = v59;
        sub_100143FCC((uint64_t)v104, v56, v58, v60, *(float32x2_t *)&v59);
        BOOL v61 = sub_1001447B8((unsigned int *)v104);
        int v62 = !v61;
        if (v61)
        {
          int v63 = sub_100144248(a1, (uint64_t)v104);
          BOOL v64 = sub_10013D858(v93, (unsigned int *)v104);
          BOOL v65 = v64;
          if (*(unsigned char *)(a1 + 110)) {
            int v66 = 1;
          }
          else {
            int v66 = v64;
          }
          BOOL v67 = v94 != v63;
          if (v94 != v63) {
            int v66 = 1;
          }
          if (((v66 | v62) & 1) == 0)
          {
            sub_10125C090(*(_DWORD *)(v96 + 4), &v97);
            sub_10112BCE8(a1, &v97, (uint64_t)v104, a3);
            uint64_t v68 = v97;
            uint64_t v97 = 0;
            if (v68) {
              (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
            }
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1023130F0);
            }
            __int16 v69 = qword_1024193A8;
            if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
            {
              __int16 v70 = sub_100147F50(*(unsigned int *)v104);
              double v71 = sub_10013DAC0((uint64_t)v104);
              double v72 = sub_10013DA9C((uint64_t)v104);
              uint64_t v73 = *(void *)(a1 + 16);
              *(_DWORD *)int buf = 136446979;
              *(void *)&uint8_t buf[4] = v70;
              *(_WORD *)&unsigned char buf[12] = 2049;
              double v106 = v71;
              *(_WORD *)BOOL v107 = 2049;
              *(double *)&v107[2] = v72;
              *(_WORD *)&v107[10] = 2050;
              uint64_t v108 = v73;
              _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "@TileReq, %{public}s, onlist, llsw, %{private}.2lf, %{private}.2lf, neighbor, size, %{public}ld", buf, 0x2Au);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193A0 != -1) {
                dispatch_once(&qword_1024193A0, &stru_1023130F0);
              }
              double v82 = sub_100147F50(*(unsigned int *)v104);
              double v83 = sub_10013DAC0((uint64_t)v104);
              double v84 = sub_10013DA9C((uint64_t)v104);
              uint64_t v85 = *(void *)(a1 + 16);
              *(_DWORD *)int v99 = 136446979;
              *(void *)&v99[4] = v82;
              *(_WORD *)&v99[12] = 2049;
              *(double *)&v99[14] = v83;
              __int16 v100 = 2049;
              *(double *)float32_t v101 = v84;
              *(_WORD *)&v101[8] = 2050;
              uint64_t v102 = v85;
              uint64_t v86 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)", "%s\n", v86);
              if (v86 != buf) {
                free(v86);
              }
            }
            char v92 = 1;
            goto LABEL_154;
          }
        }
        else
        {
          BOOL v67 = 0;
          BOOL v65 = 0;
        }
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023130F0);
        }
        uint64_t v74 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          double v75 = sub_10013DAC0((uint64_t)v104);
          double v76 = sub_10013DA9C((uint64_t)v104);
          int v77 = *(unsigned __int8 *)(a1 + 110);
          *(_DWORD *)int buf = 134284801;
          *(double *)&uint8_t buf[4] = v75;
          *(_WORD *)&unsigned char buf[12] = 2049;
          double v106 = v76;
          *(_WORD *)BOOL v107 = 1026;
          *(_DWORD *)&v107[2] = v77;
          *(_WORD *)&v107[6] = 1026;
          *(_DWORD *)&v107[8] = v65;
          LOWORD(v108) = 1026;
          *(_DWORD *)((char *)&v108 + 2) = v67;
          HIWORD(v108) = 1026;
          int v109 = v62;
          _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "@TileDl, skipneighbor, %{private}.2lf, %{private}.2lf, locked, %{public}d, dled, %{public}d, pending, %{public}d, outbounds, %{public}d", buf, 0x2Eu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023130F0);
          }
          double v78 = sub_10013DAC0((uint64_t)v104);
          double v79 = sub_10013DA9C((uint64_t)v104);
          int v80 = *(unsigned __int8 *)(a1 + 110);
          *(_DWORD *)int v99 = 134284801;
          *(double *)&v99[4] = v78;
          *(_WORD *)&v99[12] = 2049;
          *(double *)&v99[14] = v79;
          __int16 v100 = 1026;
          *(_DWORD *)float32_t v101 = v80;
          *(_WORD *)&v101[4] = 1026;
          *(_DWORD *)&v101[6] = v65;
          LOWORD(v102) = 1026;
          *(_DWORD *)((char *)&v102 + 2) = v67;
          HIWORD(v102) = 1026;
          int v103 = v62;
          unsigned int v81 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)", "%s\n", v81);
          if (v81 != buf) {
            free(v81);
          }
        }
LABEL_154:
        ++v58;
        --v57;
      }
      while (v57);
    }
    while (v56++ != v89);
  }
  if ((v104[47] & 0x80000000) != 0) {
    operator delete(*(void **)&v104[24]);
  }
  char v22 = v92;
  return v22 & 1;
}

void sub_100147E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a27) {
    (*(void (**)(uint64_t))(*(void *)a27 + 8))(a27);
  }
  _Unwind_Resume(exception_object);
}

const char *sub_100147F50(unsigned int a1)
{
  if (a1 > 0xC) {
    return "?";
  }
  else {
    return (&off_10231A2A8)[a1];
  }
}

uint64_t sub_100147F74(int a1, unsigned int a2)
{
  if (a1 == 2) {
    return 1;
  }
  else {
    return a2;
  }
}

BOOL sub_100147F80(uint64_t a1, uint64_t a2, double a3)
{
  memset(&v25, 0, sizeof(v25));
  char v6 = (unsigned int *)(a2 + 48);
  *(void *)int buf = a2 + 48;
  char v7 = sub_1001483A0((uint64_t **)(a1 + 24), a2 + 48, (uint64_t)&unk_101D0B290, (long long **)buf);
  BOOL v8 = sub_10014548C(a2);
  int v9 = sub_100148440(a2);
  int v10 = sub_100147F74(*(_DWORD *)(a1 + 104), *(unsigned __int8 *)(a1 + 109));
  double v11 = vabdd_f64(a3, sub_100148438(a2));
  if (*((unsigned char *)v7 + 88))
  {
    uint64_t v12 = "DlProgress";
LABEL_3:
    std::string::assign(&v25, v12);
    BOOL v13 = 0;
    goto LABEL_4;
  }
  if ((v9 | !v8))
  {
    if ((v9 ^ 1 | !v8) != 1)
    {
      uint64_t v12 = "RefreshSkipped";
      goto LABEL_3;
    }
    if ((v9 ^ 1 | v8))
    {
      uint64_t v12 = "Empty";
      goto LABEL_3;
    }
    BOOL v13 = sub_101045914(a2, v10, a3, 1.0);
    std::string::assign(&v25, "DoesntExist");
  }
  else
  {
    BOOL v13 = v11 >= *(double *)(a1 + 88);
    std::string::assign(&v25, "1st/Re-Try");
  }
LABEL_4:
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023130F0);
  }
  uint64_t v14 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    BOOL v15 = sub_100147F50(*v6);
    double v16 = sub_10013DAC0((uint64_t)v6);
    double v17 = sub_10013DA9C((uint64_t)v6);
    uint64_t v18 = &v25;
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v18 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int buf = 136448003;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v43 = 2049;
    double v44 = v16;
    __int16 v45 = 2049;
    double v46 = v17;
    __int16 v47 = 1026;
    BOOL v48 = v13;
    __int16 v49 = 1026;
    int v50 = v9;
    __int16 v51 = 1026;
    BOOL v52 = v8;
    __int16 v53 = 2050;
    double v54 = v11;
    __int16 v55 = 2082;
    unsigned int v56 = v18;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "@TileReq, %{public}s, attempts, llsw, %{private}.2lf, %{private}.2lf, isDownload, %{public}d, lastSuccess, %{public}d, existsOnServer, %{public}d, sinceLastDownload, %{public}.1lf, path, %{public}s", buf, 0x46u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    __int16 v20 = sub_100147F50(*v6);
    double v21 = sub_10013DAC0((uint64_t)v6);
    double v22 = sub_10013DA9C((uint64_t)v6);
    char v23 = &v25;
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      char v23 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    int v26 = 136448003;
    int v27 = v20;
    __int16 v28 = 2049;
    double v29 = v21;
    __int16 v30 = 2049;
    double v31 = v22;
    __int16 v32 = 1026;
    BOOL v33 = v13;
    __int16 v34 = 1026;
    int v35 = v9;
    __int16 v36 = 1026;
    BOOL v37 = v8;
    __int16 v38 = 2050;
    double v39 = v11;
    __int16 v40 = 2082;
    double v41 = v23;
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileDownloader::canRequestBasedOnAttempts(CLTileFile *, CFAbsoluteTime)", "%s\n", v24);
    if (v24 != buf) {
      free(v24);
    }
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  return v13;
}

void sub_100148368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1001483A0(uint64_t **a1, uint64_t a2, uint64_t a3, long long **a4)
{
  char v6 = (uint64_t **)sub_10014F4E4((uint64_t)a1, &v9, a2);
  pthread_t result = *v6;
  if (!*v6)
  {
    sub_10017CB1C((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000EDF90(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

double sub_100148438(uint64_t a1)
{
  return *(double *)(a1 + 160);
}

uint64_t sub_100148440(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 168);
}

uint64_t sub_100148448(uint64_t a1, void *a2)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022EA308);
  }
  uint64_t v4 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 112);
    *(_DWORD *)int buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2114;
    *(void *)&buf[20] = v5;
    __int16 v49 = 2114;
    uint64_t v50 = v6;
    __int16 v51 = 2114;
    BOOL v52 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthContext Set authorization context\", \"ckp\":%{public, location:escape_only}@, \"prevAuthContext\":%{public, location:escape_only}@, \"newAuthContext\":%{public, location:escape_only}@}", buf, 0x30u);
  }
  id v7 = *(id *)(a1 + 112);
  id v8 = a2;
  *(void *)(a1 + 112) = v8;
  sub_100148CC0(*(void *)(a1 + 16), *(void *)(a1 + 48), *(void *)(a1 + 160), v8);
  for (unsigned int i = *(uint64_t ***)(a1 + 304); i; unsigned int i = (uint64_t **)*i)
    sub_100148B48((id *)i[3], *(void **)(a1 + 112));
  uint64_t result = (uint64_t)[v7 isEqual:*(void *)(a1 + 112)];
  if ((result & 1) == 0)
  {
    unsigned int v11 = [*(id *)(a1 + 112) transientAwareRegistrationResult];
    if (v11 <= 8)
    {
      if (((1 << v11) & 0x1C) != 0)
      {
        sub_100148DA8(a1);
        int v22 = 0;
        uint64_t v23 = a1;
LABEL_69:
        sub_100148BB0(*(void *)(a1 + 16), *(void *)(a1 + 48), v23);
        return sub_100148C40(*(void *)(a1 + 16), a1, v22);
      }
      if (((1 << v11) & 0x103) != 0)
      {
        *(void *)&long long v42 = &v42;
        *((void *)&v42 + 1) = &v42;
        uint64_t v43 = 0;
        uint64_t v12 = a1 + 128;
        sub_10017FEB8(&v42, (uint64_t *)(a1 + 128));
        for (uint64_t j = *((void *)&v42 + 1); (long long *)j != &v42; uint64_t j = *(void *)(j + 8))
        {
          uint64_t v14 = CLConnectionMessage::name(*(CLConnectionMessage **)(j + 16));
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, v14))
          {
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022EA308);
            }
            BOOL v15 = qword_102419528;
            if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v16 = CLConnectionMessage::name(*(CLConnectionMessage **)(j + 16));
              if (*(char *)(v16 + 23) >= 0) {
                uint64_t v17 = v16;
              }
              else {
                uint64_t v17 = *(void *)v16;
              }
              *(_DWORD *)int buf = 68289282;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)&uint8_t buf[8] = 2082;
              *(void *)&buf[10] = "";
              *(_WORD *)&unsigned char buf[18] = 2082;
              *(void *)&buf[20] = v17;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"client authorized; sending out cached message\", \"msg\":%{public, location:escape_only}s}",
                buf,
                0x1Cu);
            }
            uint64_t v18 = *(std::__shared_weak_count **)(j + 24);
            uint64_t v39 = *(void *)(j + 16);
            __int16 v40 = v18;
            if (v18) {
              atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v41 = *(_OWORD *)(j + 32);
            sub_1000EFC20(a1, (uint64_t)&v39);
            if (v40) {
              sub_1000DB0A0(v40);
            }
          }
          else
          {
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022EA308);
            }
            int v19 = qword_102419528;
            if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v20 = CLConnectionMessage::name(*(CLConnectionMessage **)(j + 16));
              if (*(char *)(v20 + 23) >= 0) {
                uint64_t v21 = v20;
              }
              else {
                uint64_t v21 = *(void *)v20;
              }
              *(_DWORD *)int buf = 68289282;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)&uint8_t buf[8] = 2082;
              *(void *)&buf[10] = "";
              *(_WORD *)&unsigned char buf[18] = 2082;
              *(void *)&buf[20] = v21;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"client authorized but no longer interested in cached message; discarding cache\","
                " \"msg\":%{public, location:escape_only}s}",
                buf,
                0x1Cu);
            }
          }
        }
        if (*(void *)(a1 + 144))
        {
          sub_100134750(&v38, "{ ");
          for (uint64_t k = *(void *)(a1 + 136); k != v12; uint64_t k = *(void *)(k + 8))
          {
            uint64_t v25 = CLConnectionMessage::name(*(CLConnectionMessage **)(k + 16));
            int v26 = (char *)v25;
            if (*(char *)(v25 + 23) >= 0) {
              size_t v27 = *(unsigned __int8 *)(v25 + 23);
            }
            else {
              size_t v27 = *(void *)(v25 + 8);
            }
            sub_1001110E4((uint64_t)buf, v27 + 1);
            if (buf[23] >= 0) {
              __int16 v28 = buf;
            }
            else {
              __int16 v28 = *(unsigned char **)buf;
            }
            if (v27)
            {
              if (v26[23] >= 0) {
                double v29 = v26;
              }
              else {
                double v29 = *(char **)v26;
              }
              memmove(v28, v29, v27);
            }
            *(_WORD *)&v28[v27] = 32;
            if (buf[23] >= 0) {
              __int16 v30 = buf;
            }
            else {
              __int16 v30 = *(const std::string::value_type **)buf;
            }
            if (buf[23] >= 0) {
              std::string::size_type v31 = buf[23];
            }
            else {
              std::string::size_type v31 = *(void *)&buf[8];
            }
            std::string::append(&v38, v30, v31);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
          std::string::append(&v38, "}");
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022EA328);
          }
          __int16 v32 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v33 = *(void *)(a1 + 48);
            __int16 v34 = &v38;
            if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              __int16 v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)int buf = 138412546;
            *(void *)&uint8_t buf[4] = v33;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&unsigned char buf[14] = v34;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#Warning %@ is still not authorized for %s, dropping", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022EA328);
            }
            uint64_t v35 = *(void *)(a1 + 48);
            __int16 v36 = &v38;
            if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              __int16 v36 = (std::string *)v38.__r_.__value_.__r.__words[0];
            }
            int v44 = 138412546;
            uint64_t v45 = v35;
            __int16 v46 = 2080;
            __int16 v47 = v36;
            BOOL v37 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonClient::setAuthorizationContext(CLClientManagerAuthorizationContext *)", "%s\n", v37);
            if (v37 != buf) {
              free(v37);
            }
          }
          sub_10017FF2C((uint64_t *)(a1 + 128));
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v38.__r_.__value_.__l.__data_);
          }
        }
        sub_10017FF2C((uint64_t *)&v42);
      }
      else if (v11 == 5 && [*(id *)(a1 + 112) registrationResult] == 5)
      {
        sub_101A8118C();
        __break(1u);
      }
    }
    sub_100148DA8(a1);
    uint64_t v23 = 0;
    int v22 = 1;
    goto LABEL_69;
  }
  return result;
}